// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded , cratesAllow ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 103 0 0
// InGameOn ;
  19: CALL_OW 8
// CenterNowOnXY ( 67 , 22 ) ;
  23: LD_INT 67
  25: PPUSH
  26: LD_INT 22
  28: PPUSH
  29: CALL_OW 86
// PlaceSeeing ( 67 , 22 , 1 , - 6 ) ;
  33: LD_INT 67
  35: PPUSH
  36: LD_INT 22
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: LD_INT 6
  44: NEG
  45: PPUSH
  46: CALL_OW 330
// RemoveSeeing ( 67 , 22 , 1 ) ;
  50: LD_INT 67
  52: PPUSH
  53: LD_INT 22
  55: PPUSH
  56: LD_INT 1
  58: PPUSH
  59: CALL_OW 331
// CreateNature ;
  63: CALL 15938 0 0
// RaiseSailEvent ( 1 ) ;
  67: LD_INT 1
  69: PPUSH
  70: CALL_OW 427
// PrepareVehicles ;
  74: CALL 1938 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL 1456 0 4
// PrepareAmericanHeroes ;
  94: CALL 671 0 0
// Action ;
  98: CALL 6293 0 0
// end ;
 102: END
// function Init ; begin
 103: LD_INT 0
 105: PPUSH
// RuScientists := [ ] ;
 106: LD_ADDR_EXP 27
 110: PUSH
 111: EMPTY
 112: ST_TO_ADDR
// sciCounter := 0 ;
 113: LD_ADDR_EXP 28
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 121: LD_ADDR_EXP 31
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// russianTanks := [ ] ;
 128: LD_ADDR_EXP 32
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 135: LD_ADDR_EXP 33
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// arabianMines := [ ] ;
 142: LD_ADDR_EXP 37
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 149: LD_ADDR_EXP 19
 153: PUSH
 154: LD_STRING 06_KurtStatus_1
 156: PPUSH
 157: LD_INT 0
 159: PPUSH
 160: CALL_OW 30
 164: ST_TO_ADDR
// secondPass := 0 ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// teleportExplored := 0 ;
 173: LD_ADDR_EXP 26
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// attackTactic := 0 ;
 181: LD_ADDR_EXP 36
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tpCounter := 0 ;
 189: LD_ADDR_EXP 22
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// askSiberite := 0 ;
 197: LD_ADDR_EXP 25
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// warWithLegion := 0 ;
 205: LD_ADDR_EXP 23
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// fakeInfo := 0 ;
 213: LD_ADDR_EXP 24
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// cratesSpawned := 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// ruAI := 0 ;
 229: LD_ADDR_EXP 34
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// ruEscape := 0 ;
 237: LD_ADDR_EXP 35
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// eventVar1 := 0 ;
 245: LD_ADDR_EXP 40
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// mission_prefix := 12_ ;
 253: LD_ADDR_EXP 39
 257: PUSH
 258: LD_STRING 12_
 260: ST_TO_ADDR
// debugMode := 0 ;
 261: LD_ADDR_EXP 41
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// westPathUsed := false ;
 269: LD_ADDR_EXP 42
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 277: LD_ADDR_EXP 43
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// rocketBuilded := false ;
 285: LD_ADDR_EXP 44
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// cratesAllow := false ;
 293: LD_ADDR_EXP 45
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// end ;
 301: LD_VAR 0 1
 305: RET
// every 0 0$1 trigger debugMode do var i ;
 306: LD_EXP 41
 310: IFFALSE 616
 312: GO 314
 314: DISABLE
 315: LD_INT 0
 317: PPUSH
// begin enable ;
 318: ENABLE
// FogOff ( true ) ;
 319: LD_INT 1
 321: PPUSH
 322: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 326: LD_ADDR_VAR 0 1
 330: PUSH
 331: LD_INT 22
 333: PUSH
 334: LD_INT 1
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 1
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PPUSH
 355: CALL_OW 69
 359: PUSH
 360: FOR_IN
 361: IFFALSE 377
// SetLives ( i , 1000 ) ;
 363: LD_VAR 0 1
 367: PPUSH
 368: LD_INT 1000
 370: PPUSH
 371: CALL_OW 234
 375: GO 360
 377: POP
 378: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 379: LD_ADDR_VAR 0 1
 383: PUSH
 384: LD_INT 22
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: LD_INT 2
 396: PUSH
 397: LD_INT 30
 399: PUSH
 400: LD_INT 0
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 456
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: CALL_OW 274
 443: PPUSH
 444: LD_INT 1
 446: PPUSH
 447: LD_INT 9999
 449: PPUSH
 450: CALL_OW 277
 454: GO 431
 456: POP
 457: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 458: LD_ADDR_VAR 0 1
 462: PUSH
 463: LD_INT 22
 465: PUSH
 466: LD_INT 1
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 30
 488: PUSH
 489: LD_INT 1
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PUSH
 510: FOR_IN
 511: IFFALSE 535
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 513: LD_VAR 0 1
 517: PPUSH
 518: CALL_OW 274
 522: PPUSH
 523: LD_INT 2
 525: PPUSH
 526: LD_INT 9999
 528: PPUSH
 529: CALL_OW 277
 533: GO 510
 535: POP
 536: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 537: LD_ADDR_VAR 0 1
 541: PUSH
 542: LD_INT 22
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 2
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: LD_INT 30
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: PPUSH
 584: CALL_OW 69
 588: PUSH
 589: FOR_IN
 590: IFFALSE 614
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 592: LD_VAR 0 1
 596: PPUSH
 597: CALL_OW 274
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 9999
 607: PPUSH
 608: CALL_OW 277
 612: GO 589
 614: POP
 615: POP
// end ;
 616: PPOPN 1
 618: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 619: LD_INT 24
 621: PPUSH
 622: LD_INT 22
 624: PUSH
 625: LD_INT 1
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: PPUSH
 632: CALL_OW 70
 636: IFFALSE 649
 638: GO 640
 640: DISABLE
// westPathUsed := true ;
 641: LD_ADDR_EXP 42
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
 649: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 650: LD_EXP 43
 654: PUSH
 655: LD_INT 3
 657: GREATEREQUAL
 658: IFFALSE 670
 660: GO 662
 662: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 663: LD_STRING ACH_LASER
 665: PPUSH
 666: CALL_OW 543
 670: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 671: LD_INT 0
 673: PPUSH
 674: PPUSH
 675: PPUSH
// uc_side := 1 ;
 676: LD_ADDR_OWVAR 20
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 684: LD_ADDR_EXP 14
 688: PUSH
 689: LD_STRING 11c_others
 691: PPUSH
 692: CALL_OW 31
 696: PUSH
 697: LD_STRING 11_others
 699: PPUSH
 700: CALL_OW 31
 704: UNION
 705: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 11_ ) ;
 706: LD_ADDR_EXP 1
 710: PUSH
 711: LD_STRING JMM
 713: PPUSH
 714: LD_EXP 41
 718: NOT
 719: PPUSH
 720: LD_STRING 11_
 722: PPUSH
 723: CALL 42244 0 3
 727: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 728: LD_EXP 1
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 740: LD_EXP 1
 744: PPUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 58
 767: PUSH
 768: EMPTY
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PPUSH
 776: CALL_OW 69
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 52
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 11_ ) ;
 789: LD_ADDR_EXP 2
 793: PUSH
 794: LD_STRING Lisa
 796: PPUSH
 797: LD_EXP 41
 801: NOT
 802: PPUSH
 803: LD_STRING 11_
 805: PPUSH
 806: CALL 42244 0 3
 810: ST_TO_ADDR
// if Lisa then
 811: LD_EXP 2
 815: IFFALSE 855
// begin SetClass ( Lisa , 1 ) ;
 817: LD_EXP 2
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: CALL_OW 336
// repeat wait ( 1 ) ;
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 67
// until PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 836: LD_EXP 2
 840: PPUSH
 841: LD_INT 4
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 49
 851: IFFALSE 829
// end else
 853: GO 871
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 855: LD_INT 4
 857: PPUSH
 858: LD_INT 0
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL 1456 0 4
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 11_ ) ;
 871: LD_ADDR_EXP 3
 875: PUSH
 876: LD_STRING Donaldson
 878: PPUSH
 879: LD_EXP 41
 883: NOT
 884: PPUSH
 885: LD_STRING 11_
 887: PPUSH
 888: CALL 42244 0 3
 892: ST_TO_ADDR
// if Donaldson then
 893: LD_EXP 3
 897: IFFALSE 937
// begin SetClass ( Donaldson , 1 ) ;
 899: LD_EXP 3
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL_OW 336
// repeat wait ( 1 ) ;
 911: LD_INT 1
 913: PPUSH
 914: CALL_OW 67
// until PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 918: LD_EXP 3
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
 933: IFFALSE 911
// end else
 935: GO 953
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL 1456 0 4
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 11_ ) ;
 953: LD_ADDR_EXP 5
 957: PUSH
 958: LD_STRING Cyrus
 960: PPUSH
 961: LD_EXP 41
 965: NOT
 966: PPUSH
 967: LD_STRING 11_
 969: PPUSH
 970: CALL 42244 0 3
 974: ST_TO_ADDR
// if Cyrus then
 975: LD_EXP 5
 979: IFFALSE 1019
// begin SetClass ( Cyrus , 1 ) ;
 981: LD_EXP 5
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL_OW 336
// repeat wait ( 1 ) ;
 993: LD_INT 1
 995: PPUSH
 996: CALL_OW 67
// until PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1000: LD_EXP 5
1004: PPUSH
1005: LD_INT 4
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 49
1015: IFFALSE 993
// end else
1017: GO 1035
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1019: LD_INT 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL 1456 0 4
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 11_ ) ;
1035: LD_ADDR_EXP 6
1039: PUSH
1040: LD_STRING Denis
1042: PPUSH
1043: LD_EXP 41
1047: NOT
1048: PPUSH
1049: LD_STRING 11_
1051: PPUSH
1052: CALL 42244 0 3
1056: ST_TO_ADDR
// if Denis then
1057: LD_EXP 6
1061: IFFALSE 1101
// begin SetClass ( Denis , 4 ) ;
1063: LD_EXP 6
1067: PPUSH
1068: LD_INT 4
1070: PPUSH
1071: CALL_OW 336
// repeat wait ( 1 ) ;
1075: LD_INT 1
1077: PPUSH
1078: CALL_OW 67
// until PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1082: LD_EXP 6
1086: PPUSH
1087: LD_INT 4
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
1097: IFFALSE 1075
// end else
1099: GO 1117
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1101: LD_INT 4
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: LD_INT 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL 1456 0 4
// Frank := PrepareUnit ( Frank , ( not debugMode ) , 11_ ) ;
1117: LD_ADDR_EXP 12
1121: PUSH
1122: LD_STRING Frank
1124: PPUSH
1125: LD_EXP 41
1129: NOT
1130: PPUSH
1131: LD_STRING 11_
1133: PPUSH
1134: CALL 42244 0 3
1138: ST_TO_ADDR
// if Frank then
1139: LD_EXP 12
1143: IFFALSE 1183
// begin SetClass ( Frank , 1 ) ;
1145: LD_EXP 12
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: CALL_OW 336
// repeat wait ( 1 ) ;
1157: LD_INT 1
1159: PPUSH
1160: CALL_OW 67
// until PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1164: LD_EXP 12
1168: PPUSH
1169: LD_INT 4
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
1179: IFFALSE 1157
// end else
1181: GO 1199
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1183: LD_INT 4
1185: PPUSH
1186: LD_INT 0
1188: PPUSH
1189: LD_INT 1
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL 1456 0 4
// Cornel := PrepareUnit ( Cornell , ( not debugMode ) , 11_ ) ;
1199: LD_ADDR_EXP 10
1203: PUSH
1204: LD_STRING Cornell
1206: PPUSH
1207: LD_EXP 41
1211: NOT
1212: PPUSH
1213: LD_STRING 11_
1215: PPUSH
1216: CALL 42244 0 3
1220: ST_TO_ADDR
// if Cornel then
1221: LD_EXP 10
1225: IFFALSE 1265
// begin SetClass ( Cornel , 1 ) ;
1227: LD_EXP 10
1231: PPUSH
1232: LD_INT 1
1234: PPUSH
1235: CALL_OW 336
// repeat wait ( 1 ) ;
1239: LD_INT 1
1241: PPUSH
1242: CALL_OW 67
// until PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1246: LD_EXP 10
1250: PPUSH
1251: LD_INT 4
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL_OW 49
1261: IFFALSE 1239
// end else
1263: GO 1281
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1265: LD_INT 4
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: LD_INT 1
1273: PPUSH
1274: LD_INT 0
1276: PPUSH
1277: CALL 1456 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1281: LD_ADDR_VAR 0 2
1285: PUSH
1286: LD_EXP 14
1290: PPUSH
1291: LD_INT 26
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PPUSH
1301: CALL_OW 72
1305: ST_TO_ADDR
// if not tmp then
1306: LD_VAR 0 2
1310: NOT
1311: IFFALSE 1349
// begin PrepareSoldier ( sex_male , 8 ) ;
1313: LD_INT 1
1315: PPUSH
1316: LD_INT 8
1318: PPUSH
1319: CALL_OW 381
// repeat wait ( 1 ) ;
1323: LD_INT 1
1325: PPUSH
1326: CALL_OW 67
// until PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1330: CALL_OW 44
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 49
1345: IFFALSE 1323
// end else
1347: GO 1432
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1349: LD_VAR 0 2
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: CALL_OW 257
1362: PUSH
1363: LD_INT 1
1365: NONEQUAL
1366: IFFALSE 1384
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1368: LD_VAR 0 2
1372: PUSH
1373: LD_INT 1
1375: ARRAY
1376: PPUSH
1377: LD_INT 1
1379: PPUSH
1380: CALL_OW 336
// repeat wait ( 1 ) ;
1384: LD_INT 1
1386: PPUSH
1387: CALL_OW 67
// until PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1391: LD_VAR 0 2
1395: PUSH
1396: LD_INT 1
1398: ARRAY
1399: PPUSH
1400: LD_INT 4
1402: PPUSH
1403: LD_INT 0
1405: PPUSH
1406: CALL_OW 49
1410: IFFALSE 1384
// others11 := others11 diff tmp [ 1 ] ;
1412: LD_ADDR_EXP 14
1416: PUSH
1417: LD_EXP 14
1421: PUSH
1422: LD_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: DIFF
1431: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1432: LD_ADDR_EXP 15
1436: PUSH
1437: LD_STRING Powell
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: LD_STRING 
1445: PPUSH
1446: CALL 42244 0 3
1450: ST_TO_ADDR
// end ;
1451: LD_VAR 0 1
1455: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1456: LD_INT 0
1458: PPUSH
1459: PPUSH
1460: PPUSH
1461: PPUSH
1462: PPUSH
// if mech = 1 then
1463: LD_VAR 0 4
1467: PUSH
1468: LD_INT 1
1470: EQUAL
1471: IFFALSE 1725
// begin if others11 then
1473: LD_EXP 14
1477: IFFALSE 1665
// begin for i := 1 to others11 - 1 do
1479: LD_ADDR_VAR 0 6
1483: PUSH
1484: DOUBLE
1485: LD_INT 1
1487: DEC
1488: ST_TO_ADDR
1489: LD_EXP 14
1493: PUSH
1494: LD_INT 1
1496: MINUS
1497: PUSH
1498: FOR_TO
1499: IFFALSE 1581
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1501: LD_EXP 14
1505: PUSH
1506: LD_VAR 0 6
1510: ARRAY
1511: PPUSH
1512: LD_INT 3
1514: PPUSH
1515: CALL_OW 259
1519: PUSH
1520: LD_EXP 14
1524: PUSH
1525: LD_VAR 0 6
1529: PUSH
1530: LD_INT 1
1532: PLUS
1533: ARRAY
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: CALL_OW 259
1542: LESS
1543: IFFALSE 1579
// begin mecha = others11 [ i + 1 ] ;
1545: LD_ADDR_VAR 0 9
1549: PUSH
1550: LD_EXP 14
1554: PUSH
1555: LD_VAR 0 6
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: ARRAY
1564: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1565: LD_VAR 0 9
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 336
// break ;
1577: GO 1581
// end ; end ;
1579: GO 1498
1581: POP
1582: POP
// if spawnMode = 1 then
1583: LD_VAR 0 3
1587: PUSH
1588: LD_INT 1
1590: EQUAL
1591: IFFALSE 1633
// begin SetClass ( mecha , class_soldier ) ;
1593: LD_VAR 0 9
1597: PPUSH
1598: LD_INT 1
1600: PPUSH
1601: CALL_OW 336
// repeat wait ( 1 ) ;
1605: LD_INT 1
1607: PPUSH
1608: CALL_OW 67
// until PlaceUnitArea ( mecha , area , false ) ;
1612: LD_VAR 0 9
1616: PPUSH
1617: LD_VAR 0 1
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 49
1629: IFFALSE 1605
// end else
1631: GO 1647
// PlaceHumanInUnit ( mecha , veh ) ;
1633: LD_VAR 0 9
1637: PPUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 52
// others11 := others11 diff mecha ;
1647: LD_ADDR_EXP 14
1651: PUSH
1652: LD_EXP 14
1656: PUSH
1657: LD_VAR 0 9
1661: DIFF
1662: ST_TO_ADDR
// end else
1663: GO 1723
// begin hc_name :=  ;
1665: LD_ADDR_OWVAR 26
1669: PUSH
1670: LD_STRING 
1672: ST_TO_ADDR
// hc_gallery :=  ;
1673: LD_ADDR_OWVAR 33
1677: PUSH
1678: LD_STRING 
1680: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1681: LD_INT 0
1683: PPUSH
1684: LD_INT 7
1686: PPUSH
1687: LD_INT 9
1689: PPUSH
1690: CALL_OW 12
1694: PPUSH
1695: CALL_OW 383
// un := CreateHuman ;
1699: LD_ADDR_VAR 0 7
1703: PUSH
1704: CALL_OW 44
1708: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1709: LD_VAR 0 7
1713: PPUSH
1714: LD_VAR 0 2
1718: PPUSH
1719: CALL_OW 52
// end ; end else
1723: GO 1933
// begin if others11 then
1725: LD_EXP 14
1729: IFFALSE 1827
// begin if spawnMode = 1 then
1731: LD_VAR 0 3
1735: PUSH
1736: LD_INT 1
1738: EQUAL
1739: IFFALSE 1789
// begin SetClass ( others11 [ 1 ] , class_soldier ) ;
1741: LD_EXP 14
1745: PUSH
1746: LD_INT 1
1748: ARRAY
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 336
// repeat wait ( 1 ) ;
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 67
// until PlaceUnitArea ( others11 [ 1 ] , area , false ) ;
1764: LD_EXP 14
1768: PUSH
1769: LD_INT 1
1771: ARRAY
1772: PPUSH
1773: LD_VAR 0 1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 49
1785: IFFALSE 1757
// end else
1787: GO 1807
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1789: LD_EXP 14
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_VAR 0 2
1802: PPUSH
1803: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1807: LD_ADDR_EXP 14
1811: PUSH
1812: LD_EXP 14
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 3
1824: ST_TO_ADDR
// end else
1825: GO 1933
// begin hc_name :=  ;
1827: LD_ADDR_OWVAR 26
1831: PUSH
1832: LD_STRING 
1834: ST_TO_ADDR
// hc_gallery :=  ;
1835: LD_ADDR_OWVAR 33
1839: PUSH
1840: LD_STRING 
1842: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 7 , 9 ) ) ;
1843: LD_INT 0
1845: PPUSH
1846: LD_INT 1
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL_OW 12
1856: PPUSH
1857: LD_INT 7
1859: PPUSH
1860: LD_INT 9
1862: PPUSH
1863: CALL_OW 12
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 7
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
1882: LD_VAR 0 7
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: CALL_OW 336
// if veh then
1894: LD_VAR 0 2
1898: IFFALSE 1916
// PlaceHumanInUnit ( un , veh ) else
1900: LD_VAR 0 7
1904: PPUSH
1905: LD_VAR 0 2
1909: PPUSH
1910: CALL_OW 52
1914: GO 1933
// PlaceUnitArea ( un , area , false ) ;
1916: LD_VAR 0 7
1920: PPUSH
1921: LD_VAR 0 1
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// end ; end ; end ;
1933: LD_VAR 0 5
1937: RET
// export function PrepareVehicles ; var veh ; begin
1938: LD_INT 0
1940: PPUSH
1941: PPUSH
// uc_side := 1 ;
1942: LD_ADDR_OWVAR 20
1946: PUSH
1947: LD_INT 1
1949: ST_TO_ADDR
// uc_nation := 1 ;
1950: LD_ADDR_OWVAR 21
1954: PUSH
1955: LD_INT 1
1957: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 3
1965: ST_TO_ADDR
// vc_engine := engine_siberite ;
1966: LD_ADDR_OWVAR 39
1970: PUSH
1971: LD_INT 3
1973: ST_TO_ADDR
// vc_control := control_computer ;
1974: LD_ADDR_OWVAR 38
1978: PUSH
1979: LD_INT 3
1981: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1982: LD_ADDR_OWVAR 40
1986: PUSH
1987: LD_INT 4
1989: ST_TO_ADDR
// veh := CreateVehicle ;
1990: LD_ADDR_VAR 0 2
1994: PUSH
1995: CALL_OW 45
1999: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2000: LD_VAR 0 2
2004: PPUSH
2005: LD_INT 4
2007: PPUSH
2008: CALL_OW 233
// repeat wait ( 1 ) ;
2012: LD_INT 1
2014: PPUSH
2015: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 4
2026: PPUSH
2027: LD_INT 0
2029: PPUSH
2030: CALL_OW 49
2034: IFFALSE 2012
// vc_weapon := us_double_gun ;
2036: LD_ADDR_OWVAR 40
2040: PUSH
2041: LD_INT 5
2043: ST_TO_ADDR
// vc_control := control_manual ;
2044: LD_ADDR_OWVAR 38
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// veh := CreateVehicle ;
2052: LD_ADDR_VAR 0 2
2056: PUSH
2057: CALL_OW 45
2061: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2062: LD_VAR 0 2
2066: PPUSH
2067: LD_INT 4
2069: PPUSH
2070: CALL_OW 233
// repeat wait ( 3 ) ;
2074: LD_INT 3
2076: PPUSH
2077: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 4
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: IFFALSE 2074
// vc_weapon := us_radar ;
2098: LD_ADDR_OWVAR 40
2102: PUSH
2103: LD_INT 11
2105: ST_TO_ADDR
// vc_control := control_computer ;
2106: LD_ADDR_OWVAR 38
2110: PUSH
2111: LD_INT 3
2113: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2114: LD_ADDR_OWVAR 37
2118: PUSH
2119: LD_INT 2
2121: ST_TO_ADDR
// veh := CreateVehicle ;
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: CALL_OW 45
2131: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2132: LD_VAR 0 2
2136: PPUSH
2137: LD_INT 4
2139: PPUSH
2140: CALL_OW 233
// repeat wait ( 1 ) ;
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_INT 4
2158: PPUSH
2159: LD_INT 0
2161: PPUSH
2162: CALL_OW 49
2166: IFFALSE 2144
// vc_weapon := us_double_gun ;
2168: LD_ADDR_OWVAR 40
2172: PUSH
2173: LD_INT 5
2175: ST_TO_ADDR
// veh := CreateVehicle ;
2176: LD_ADDR_VAR 0 2
2180: PUSH
2181: CALL_OW 45
2185: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2186: LD_VAR 0 2
2190: PPUSH
2191: LD_INT 4
2193: PPUSH
2194: CALL_OW 233
// repeat wait ( 1 ) ;
2198: LD_INT 1
2200: PPUSH
2201: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: LD_INT 4
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 49
2220: IFFALSE 2198
// end ;
2222: LD_VAR 0 1
2226: RET
// export function PowellSupport1 ; var veh , un ; begin
2227: LD_INT 0
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 1 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// uc_nation := 1 ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 11_ ) ;
2248: LD_ADDR_EXP 7
2252: PUSH
2253: LD_STRING Brown
2255: PPUSH
2256: LD_EXP 41
2260: NOT
2261: PPUSH
2262: LD_STRING 11_
2264: PPUSH
2265: CALL 42244 0 3
2269: ST_TO_ADDR
// if Brown then
2270: LD_EXP 7
2274: IFFALSE 2305
// begin SetClass ( Brown , class_engineer ) ;
2276: LD_EXP 7
2280: PPUSH
2281: LD_INT 2
2283: PPUSH
2284: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2288: LD_EXP 7
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
// end else
2303: GO 2321
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2305: LD_INT 4
2307: PPUSH
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: CALL 1456 0 4
// Gary := PrepareUnit ( Gary , ( not debugMode ) , 11_ ) ;
2321: LD_ADDR_EXP 11
2325: PUSH
2326: LD_STRING Gary
2328: PPUSH
2329: LD_EXP 41
2333: NOT
2334: PPUSH
2335: LD_STRING 11_
2337: PPUSH
2338: CALL 42244 0 3
2342: ST_TO_ADDR
// if Gary then
2343: LD_EXP 11
2347: IFFALSE 2378
// begin SetClass ( Gary , class_engineer ) ;
2349: LD_EXP 11
2353: PPUSH
2354: LD_INT 2
2356: PPUSH
2357: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2361: LD_EXP 11
2365: PPUSH
2366: LD_INT 4
2368: PPUSH
2369: LD_INT 0
2371: PPUSH
2372: CALL_OW 49
// end else
2376: GO 2394
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2378: LD_INT 4
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 0
2389: PPUSH
2390: CALL 1456 0 4
// vc_chassis := us_medium_tracked ;
2394: LD_ADDR_OWVAR 37
2398: PUSH
2399: LD_INT 3
2401: ST_TO_ADDR
// vc_engine := engine_siberite ;
2402: LD_ADDR_OWVAR 39
2406: PUSH
2407: LD_INT 3
2409: ST_TO_ADDR
// vc_control := control_manual ;
2410: LD_ADDR_OWVAR 38
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// vc_weapon := us_crane ;
2418: LD_ADDR_OWVAR 40
2422: PUSH
2423: LD_INT 13
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2436: LD_VAR 0 2
2440: PPUSH
2441: LD_INT 4
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2448: LD_VAR 0 2
2452: PPUSH
2453: LD_INT 4
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2463: LD_INT 4
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: LD_INT 2
2473: PPUSH
2474: LD_INT 1
2476: PPUSH
2477: CALL 1456 0 4
// vc_weapon := us_laser ;
2481: LD_ADDR_OWVAR 40
2485: PUSH
2486: LD_INT 9
2488: ST_TO_ADDR
// veh := CreateVehicle ;
2489: LD_ADDR_VAR 0 2
2493: PUSH
2494: CALL_OW 45
2498: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2499: LD_VAR 0 2
2503: PPUSH
2504: LD_INT 4
2506: PPUSH
2507: CALL_OW 233
// repeat wait ( 3 ) ;
2511: LD_INT 3
2513: PPUSH
2514: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2518: LD_VAR 0 2
2522: PPUSH
2523: LD_INT 4
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
2533: IFFALSE 2511
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2535: LD_INT 4
2537: PPUSH
2538: LD_VAR 0 2
2542: PPUSH
2543: LD_INT 2
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: CALL 1456 0 4
// vc_control := control_computer ;
2553: LD_ADDR_OWVAR 38
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2561: LD_ADDR_OWVAR 40
2565: PUSH
2566: LD_INT 12
2568: ST_TO_ADDR
// veh := CreateVehicle ;
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: CALL_OW 45
2578: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 17
2586: PPUSH
2587: CALL_OW 109
// SetDir ( veh , 4 ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_INT 4
2598: PPUSH
2599: CALL_OW 233
// repeat wait ( 1 ) ;
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2610: LD_VAR 0 2
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
2625: IFFALSE 2603
// AddCargo ( veh , mat_siberit , 100 ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 3
2634: PPUSH
2635: LD_INT 100
2637: PPUSH
2638: CALL_OW 291
// veh := CreateVehicle ;
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: CALL_OW 45
2651: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2652: LD_VAR 0 2
2656: PPUSH
2657: LD_INT 17
2659: PPUSH
2660: CALL_OW 109
// SetDir ( veh , 4 ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 4
2671: PPUSH
2672: CALL_OW 233
// repeat wait ( 1 ) ;
2676: LD_INT 1
2678: PPUSH
2679: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2683: LD_VAR 0 2
2687: PPUSH
2688: LD_INT 4
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
2698: IFFALSE 2676
// AddCargo ( veh , mat_siberit , 20 ) ;
2700: LD_VAR 0 2
2704: PPUSH
2705: LD_INT 3
2707: PPUSH
2708: LD_INT 20
2710: PPUSH
2711: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2715: LD_VAR 0 2
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: LD_INT 80
2725: PPUSH
2726: CALL_OW 291
// end ;
2730: LD_VAR 0 1
2734: RET
// export function PowellSupport2 ; var veh , un ; begin
2735: LD_INT 0
2737: PPUSH
2738: PPUSH
2739: PPUSH
// uc_side := 1 ;
2740: LD_ADDR_OWVAR 20
2744: PUSH
2745: LD_INT 1
2747: ST_TO_ADDR
// uc_nation := 1 ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// vc_engine := engine_siberite ;
2756: LD_ADDR_OWVAR 39
2760: PUSH
2761: LD_INT 3
2763: ST_TO_ADDR
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2772: LD_ADDR_OWVAR 37
2776: PUSH
2777: LD_INT 2
2779: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2780: LD_ADDR_OWVAR 40
2784: PUSH
2785: LD_INT 5
2787: ST_TO_ADDR
// veh := CreateVehicle ;
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: CALL_OW 45
2797: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2798: LD_VAR 0 2
2802: PPUSH
2803: LD_INT 4
2805: PPUSH
2806: CALL_OW 233
// repeat wait ( 1 ) ;
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 49
2832: IFFALSE 2810
// vc_chassis := us_heavy_tracked ;
2834: LD_ADDR_OWVAR 37
2838: PUSH
2839: LD_INT 4
2841: ST_TO_ADDR
// vc_engine := engine_siberite ;
2842: LD_ADDR_OWVAR 39
2846: PUSH
2847: LD_INT 3
2849: ST_TO_ADDR
// vc_control := control_manual ;
2850: LD_ADDR_OWVAR 38
2854: PUSH
2855: LD_INT 1
2857: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
2858: LD_ADDR_OWVAR 40
2862: PUSH
2863: LD_INT 6
2865: ST_TO_ADDR
// veh := CreateVehicle ;
2866: LD_ADDR_VAR 0 2
2870: PUSH
2871: CALL_OW 45
2875: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2876: LD_VAR 0 2
2880: PPUSH
2881: LD_INT 4
2883: PPUSH
2884: CALL_OW 233
// repeat wait ( 1 ) ;
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2895: LD_VAR 0 2
2899: PPUSH
2900: LD_INT 4
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
2910: IFFALSE 2888
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 11_ ) ;
2912: LD_ADDR_EXP 4
2916: PUSH
2917: LD_STRING Bobby
2919: PPUSH
2920: LD_EXP 41
2924: NOT
2925: PPUSH
2926: LD_STRING 11_
2928: PPUSH
2929: CALL 42244 0 3
2933: ST_TO_ADDR
// if Bobby then
2934: LD_EXP 4
2938: IFFALSE 2968
// begin SetClass ( Bobby , 3 ) ;
2940: LD_EXP 4
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2952: LD_EXP 4
2956: PPUSH
2957: LD_VAR 0 2
2961: PPUSH
2962: CALL_OW 52
// end else
2966: GO 2986
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2968: LD_INT 0
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: LD_INT 2
2978: PPUSH
2979: LD_INT 0
2981: PPUSH
2982: CALL 1456 0 4
// Houten := PrepareUnit ( Houten , ( not debugMode ) , 11_ ) ;
2986: LD_ADDR_EXP 9
2990: PUSH
2991: LD_STRING Houten
2993: PPUSH
2994: LD_EXP 41
2998: NOT
2999: PPUSH
3000: LD_STRING 11_
3002: PPUSH
3003: CALL 42244 0 3
3007: ST_TO_ADDR
// if Houten then
3008: LD_EXP 9
3012: IFFALSE 3052
// begin SetClass ( Houten , 1 ) ;
3014: LD_EXP 9
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: CALL_OW 336
// repeat wait ( 1 ) ;
3026: LD_INT 1
3028: PPUSH
3029: CALL_OW 67
// until PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
3033: LD_EXP 9
3037: PPUSH
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
3048: IFFALSE 3026
// end else
3050: GO 3068
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: LD_INT 1
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL 1456 0 4
// vc_chassis := us_medium_wheeled ;
3068: LD_ADDR_OWVAR 37
3072: PUSH
3073: LD_INT 2
3075: ST_TO_ADDR
// vc_control := control_computer ;
3076: LD_ADDR_OWVAR 38
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3084: LD_ADDR_OWVAR 40
3088: PUSH
3089: LD_INT 12
3091: ST_TO_ADDR
// veh := CreateVehicle ;
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: CALL_OW 45
3101: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3102: LD_VAR 0 2
3106: PPUSH
3107: LD_INT 4
3109: PPUSH
3110: CALL_OW 233
// SetTag ( veh , 17 ) ;
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_INT 17
3121: PPUSH
3122: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
3126: LD_VAR 0 2
3130: PPUSH
3131: LD_INT 1
3133: PPUSH
3134: LD_INT 100
3136: PPUSH
3137: CALL_OW 291
// veh := CreateVehicle ;
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3151: LD_VAR 0 2
3155: PPUSH
3156: LD_INT 4
3158: PPUSH
3159: CALL_OW 233
// SetTag ( veh , 17 ) ;
3163: LD_VAR 0 2
3167: PPUSH
3168: LD_INT 17
3170: PPUSH
3171: CALL_OW 109
// repeat wait ( 1 ) ;
3175: LD_INT 1
3177: PPUSH
3178: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: CALL_OW 49
3197: IFFALSE 3175
// AddCargo ( veh , mat_cans , 100 ) ;
3199: LD_VAR 0 2
3203: PPUSH
3204: LD_INT 1
3206: PPUSH
3207: LD_INT 100
3209: PPUSH
3210: CALL_OW 291
// veh := CreateVehicle ;
3214: LD_ADDR_VAR 0 2
3218: PUSH
3219: CALL_OW 45
3223: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 4
3231: PPUSH
3232: CALL_OW 233
// SetTag ( veh , 17 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 17
3243: PPUSH
3244: CALL_OW 109
// repeat wait ( 1 ) ;
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: LD_INT 0
3265: PPUSH
3266: CALL_OW 49
3270: IFFALSE 3248
// if kurtStatus then
3272: LD_EXP 19
3276: IFFALSE 3310
// begin AddCargo ( veh , mat_siberit , 60 ) ;
3278: LD_VAR 0 2
3282: PPUSH
3283: LD_INT 3
3285: PPUSH
3286: LD_INT 60
3288: PPUSH
3289: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: LD_INT 40
3303: PPUSH
3304: CALL_OW 291
// end else
3308: GO 3325
// AddCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 2
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 291
// veh := CreateVehicle ;
3325: LD_ADDR_VAR 0 2
3329: PUSH
3330: CALL_OW 45
3334: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3335: LD_VAR 0 2
3339: PPUSH
3340: LD_INT 4
3342: PPUSH
3343: CALL_OW 233
// SetTag ( veh , 17 ) ;
3347: LD_VAR 0 2
3351: PPUSH
3352: LD_INT 17
3354: PPUSH
3355: CALL_OW 109
// repeat wait ( 1 ) ;
3359: LD_INT 1
3361: PPUSH
3362: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3366: LD_VAR 0 2
3370: PPUSH
3371: LD_INT 4
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
3381: IFFALSE 3359
// AddCargo ( veh , mat_oil , 60 ) ;
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_INT 2
3390: PPUSH
3391: LD_INT 60
3393: PPUSH
3394: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_INT 40
3408: PPUSH
3409: CALL_OW 291
// end ;
3413: LD_VAR 0 1
3417: RET
// export function PowellSupport3 ; var i , cargo ; begin
3418: LD_INT 0
3420: PPUSH
3421: PPUSH
3422: PPUSH
// uc_side := 1 ;
3423: LD_ADDR_OWVAR 20
3427: PUSH
3428: LD_INT 1
3430: ST_TO_ADDR
// uc_nation := 1 ;
3431: LD_ADDR_OWVAR 21
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3439: LD_INT 4
3441: PPUSH
3442: LD_INT 0
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: LD_INT 0
3450: PPUSH
3451: CALL 1456 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3455: LD_INT 4
3457: PPUSH
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 1
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL 1456 0 4
// for i := 1 to 2 do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: DOUBLE
3477: LD_INT 1
3479: DEC
3480: ST_TO_ADDR
3481: LD_INT 2
3483: PUSH
3484: FOR_TO
3485: IFFALSE 3594
// begin vc_chassis := us_medium_wheeled ;
3487: LD_ADDR_OWVAR 37
3491: PUSH
3492: LD_INT 2
3494: ST_TO_ADDR
// vc_engine := engine_siberite ;
3495: LD_ADDR_OWVAR 39
3499: PUSH
3500: LD_INT 3
3502: ST_TO_ADDR
// vc_control = control_computer ;
3503: LD_ADDR_OWVAR 38
3507: PUSH
3508: LD_INT 3
3510: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3511: LD_ADDR_OWVAR 40
3515: PUSH
3516: LD_INT 12
3518: ST_TO_ADDR
// cargo := CreateVehicle ;
3519: LD_ADDR_VAR 0 3
3523: PUSH
3524: CALL_OW 45
3528: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3529: LD_VAR 0 3
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3541: LD_VAR 0 3
3545: PPUSH
3546: LD_INT 17
3548: PPUSH
3549: CALL_OW 109
// repeat wait ( 1 ) ;
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 67
// until PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3560: LD_VAR 0 3
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 0
3570: PPUSH
3571: CALL_OW 49
3575: IFFALSE 3553
// AddCargo ( cargo , mat_cans , 100 ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_INT 100
3587: PPUSH
3588: CALL_OW 291
// end ;
3592: GO 3484
3594: POP
3595: POP
// end ; end_of_file
3596: LD_VAR 0 1
3600: RET
// export function PrepareRussian ; begin
3601: LD_INT 0
3603: PPUSH
// SetBName ( rueastdepot , ryutin ) ;
3604: LD_INT 4
3606: PPUSH
3607: LD_STRING ryutin
3609: PPUSH
3610: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
3614: LD_INT 6
3616: PPUSH
3617: LD_STRING yegorov
3619: PPUSH
3620: CALL_OW 500
// PrepareDifficulty ;
3624: CALL 13281 0 0
// PrepareRussianCommander ;
3628: CALL 3649 0 0
// PrepareWestBase ;
3632: CALL 4374 0 0
// PrepareEastBase ;
3636: CALL 3728 0 0
// PrepareOtherRussians ;
3640: CALL 4600 0 0
// end ;
3644: LD_VAR 0 1
3648: RET
// export function PrepareRussianCommander ; begin
3649: LD_INT 0
3651: PPUSH
// uc_side := 3 ;
3652: LD_ADDR_OWVAR 20
3656: PUSH
3657: LD_INT 3
3659: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3660: LD_ADDR_EXP 16
3664: PUSH
3665: LD_STRING Davidov
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: LD_STRING 
3673: PPUSH
3674: CALL 42244 0 3
3678: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3679: LD_EXP 16
3683: PPUSH
3684: LD_INT 3
3686: PPUSH
3687: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3691: LD_ADDR_EXP 27
3695: PUSH
3696: LD_EXP 27
3700: PPUSH
3701: LD_EXP 16
3705: PPUSH
3706: CALL 80400 0 2
3710: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3711: LD_EXP 27
3715: PPUSH
3716: LD_INT 4
3718: PPUSH
3719: CALL_OW 336
// end ;
3723: LD_VAR 0 1
3727: RET
// export function PrepareEastBase ; var i , un ; begin
3728: LD_INT 0
3730: PPUSH
3731: PPUSH
3732: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , [ 2 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 3
3738: PPUSH
3739: LD_INT 121
3741: PPUSH
3742: LD_EXP 29
3746: PPUSH
3747: LD_EXP 30
3751: PPUSH
3752: CALL_OW 12
3756: PPUSH
3757: LD_INT 1
3759: PPUSH
3760: LD_INT 2
3762: PUSH
3763: LD_INT 2
3765: PUSH
3766: LD_INT 3
3768: PUSH
3769: LD_INT 3
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: PUSH
3778: LD_OWVAR 67
3782: ARRAY
3783: PPUSH
3784: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3788: LD_INT 3
3790: PPUSH
3791: LD_INT 3
3793: PPUSH
3794: LD_INT 121
3796: PPUSH
3797: LD_EXP 29
3801: PPUSH
3802: LD_EXP 30
3806: PPUSH
3807: CALL_OW 12
3811: PPUSH
3812: LD_INT 9
3814: PPUSH
3815: LD_INT 1
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: LD_INT 3
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PUSH
3833: LD_OWVAR 67
3837: ARRAY
3838: PPUSH
3839: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3843: LD_INT 3
3845: PPUSH
3846: LD_INT 3
3848: PPUSH
3849: LD_INT 226
3851: PPUSH
3852: LD_EXP 29
3856: PPUSH
3857: LD_EXP 30
3861: PPUSH
3862: CALL_OW 12
3866: PPUSH
3867: LD_INT 9
3869: PPUSH
3870: LD_INT 2
3872: PUSH
3873: LD_INT 3
3875: PUSH
3876: LD_INT 4
3878: PUSH
3879: LD_INT 5
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: PUSH
3888: LD_OWVAR 67
3892: ARRAY
3893: PPUSH
3894: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3898: LD_INT 3
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: LD_INT 4
3906: PPUSH
3907: LD_EXP 29
3911: PPUSH
3912: LD_EXP 30
3916: PPUSH
3917: CALL_OW 12
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: LD_INT 3
3927: PUSH
3928: LD_INT 4
3930: PUSH
3931: LD_INT 5
3933: PUSH
3934: LD_INT 6
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: LD_OWVAR 67
3947: ARRAY
3948: PPUSH
3949: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3953: LD_INT 3
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_INT 112
3961: PPUSH
3962: LD_EXP 29
3966: PPUSH
3967: LD_EXP 30
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: LD_INT 3
3979: PPUSH
3980: LD_INT 4
3982: PUSH
3983: LD_INT 4
3985: PUSH
3986: LD_INT 5
3988: PUSH
3989: LD_INT 6
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: PUSH
3998: LD_OWVAR 67
4002: ARRAY
4003: PPUSH
4004: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 3
4013: PPUSH
4014: LD_INT 47
4016: PPUSH
4017: LD_EXP 29
4021: PPUSH
4022: LD_EXP 30
4026: PPUSH
4027: CALL_OW 12
4031: PPUSH
4032: LD_INT 4
4034: PPUSH
4035: LD_INT 2
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: LD_INT 5
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: PUSH
4053: LD_OWVAR 67
4057: ARRAY
4058: PPUSH
4059: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4063: LD_INT 3
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 129
4071: PPUSH
4072: LD_EXP 29
4076: PPUSH
4077: LD_EXP 30
4081: PPUSH
4082: CALL_OW 12
4086: PPUSH
4087: LD_INT 4
4089: PPUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 3
4095: PUSH
4096: LD_INT 4
4098: PUSH
4099: LD_INT 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_OWVAR 67
4112: ARRAY
4113: PPUSH
4114: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4118: LD_INT 3
4120: PPUSH
4121: LD_INT 3
4123: PPUSH
4124: LD_INT 135
4126: PPUSH
4127: LD_EXP 29
4131: PPUSH
4132: LD_EXP 30
4136: PPUSH
4137: CALL_OW 12
4141: PPUSH
4142: LD_INT 4
4144: PPUSH
4145: LD_INT 2
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 5
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL 13600 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
4173: LD_ADDR_VAR 0 2
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 30
4190: PUSH
4191: LD_INT 32
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PPUSH
4202: CALL_OW 69
4206: PUSH
4207: FOR_IN
4208: IFFALSE 4248
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
4210: LD_INT 3
4212: PPUSH
4213: LD_INT 3
4215: PPUSH
4216: LD_VAR 0 2
4220: PPUSH
4221: LD_EXP 29
4225: PPUSH
4226: LD_EXP 30
4230: PPUSH
4231: CALL_OW 12
4235: PPUSH
4236: LD_INT 1
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: CALL 13600 0 6
4246: GO 4207
4248: POP
4249: POP
// for i := 1 to 5 do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 5
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4367
// begin uc_side := 3 ;
4266: LD_ADDR_OWVAR 20
4270: PUSH
4271: LD_INT 3
4273: ST_TO_ADDR
// uc_nation := 3 ;
4274: LD_ADDR_OWVAR 21
4278: PUSH
4279: LD_INT 3
4281: ST_TO_ADDR
// hc_gallery :=  ;
4282: LD_ADDR_OWVAR 33
4286: PUSH
4287: LD_STRING 
4289: ST_TO_ADDR
// hc_name :=  ;
4290: LD_ADDR_OWVAR 26
4294: PUSH
4295: LD_STRING 
4297: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4298: LD_INT 0
4300: PPUSH
4301: LD_INT 4
4303: PPUSH
4304: LD_EXP 29
4308: PPUSH
4309: LD_EXP 30
4313: PPUSH
4314: CALL_OW 12
4318: PPUSH
4319: CALL_OW 380
// un := CreateHuman ;
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: CALL_OW 44
4332: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
4333: LD_VAR 0 3
4337: PPUSH
4338: LD_INT 3
4340: PPUSH
4341: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
4345: LD_ADDR_EXP 27
4349: PUSH
4350: LD_EXP 27
4354: PPUSH
4355: LD_VAR 0 3
4359: PPUSH
4360: CALL 80400 0 2
4364: ST_TO_ADDR
// end ;
4365: GO 4263
4367: POP
4368: POP
// end ;
4369: LD_VAR 0 1
4373: RET
// export function PrepareWestBase ; var i , un ; begin
4374: LD_INT 0
4376: PPUSH
4377: PPUSH
4378: PPUSH
// if Difficulty = 1 then
4379: LD_OWVAR 67
4383: PUSH
4384: LD_INT 1
4386: EQUAL
4387: IFFALSE 4425
// for i in FilterAllUnits ( [ f_inarea , delBuildingsArea ] ) do
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: LD_INT 95
4396: PUSH
4397: LD_INT 28
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 69
4408: PUSH
4409: FOR_IN
4410: IFFALSE 4423
// RemoveUnit ( i ) ;
4412: LD_VAR 0 2
4416: PPUSH
4417: CALL_OW 64
4421: GO 4409
4423: POP
4424: POP
// TeleportExit ( ruteleprt , 122 , 145 ) ;
4425: LD_INT 10
4427: PPUSH
4428: LD_INT 122
4430: PPUSH
4431: LD_INT 145
4433: PPUSH
4434: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4438: LD_INT 137
4440: PPUSH
4441: LD_INT 84
4443: PPUSH
4444: LD_INT 61
4446: PPUSH
4447: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ) ;
4451: LD_INT 3
4453: PPUSH
4454: LD_INT 3
4456: PPUSH
4457: LD_INT 6
4459: PPUSH
4460: LD_EXP 29
4464: PPUSH
4465: LD_EXP 30
4469: PPUSH
4470: CALL_OW 12
4474: PPUSH
4475: LD_INT 2
4477: PPUSH
4478: LD_INT 2
4480: PUSH
4481: LD_INT 3
4483: PUSH
4484: LD_INT 3
4486: PUSH
4487: LD_INT 3
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: PPUSH
4502: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4506: LD_INT 3
4508: PPUSH
4509: LD_INT 3
4511: PPUSH
4512: LD_INT 91
4514: PPUSH
4515: LD_EXP 29
4519: PPUSH
4520: LD_EXP 30
4524: PPUSH
4525: CALL_OW 12
4529: PPUSH
4530: LD_INT 4
4532: PPUSH
4533: LD_INT 3
4535: PPUSH
4536: CALL 13600 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
4540: LD_INT 3
4542: PPUSH
4543: LD_INT 3
4545: PPUSH
4546: LD_INT 21
4548: PPUSH
4549: LD_EXP 29
4553: PPUSH
4554: LD_EXP 30
4558: PPUSH
4559: CALL_OW 12
4563: PPUSH
4564: LD_INT 3
4566: PPUSH
4567: LD_INT 4
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: LD_INT 6
4575: PUSH
4576: LD_INT 6
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_OWVAR 67
4589: ARRAY
4590: PPUSH
4591: CALL 13600 0 6
// end ;
4595: LD_VAR 0 1
4599: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4600: LD_INT 0
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
// uc_side := 3 ;
4606: LD_ADDR_OWVAR 20
4610: PUSH
4611: LD_INT 3
4613: ST_TO_ADDR
// uc_nation := 3 ;
4614: LD_ADDR_OWVAR 21
4618: PUSH
4619: LD_INT 3
4621: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
4622: LD_ADDR_VAR 0 2
4626: PUSH
4627: DOUBLE
4628: LD_INT 1
4630: DEC
4631: ST_TO_ADDR
4632: LD_INT 4
4634: PUSH
4635: LD_INT 5
4637: PUSH
4638: LD_INT 5
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PUSH
4650: LD_OWVAR 67
4654: ARRAY
4655: PUSH
4656: FOR_TO
4657: IFFALSE 4727
// begin hc_gallery :=  ;
4659: LD_ADDR_OWVAR 33
4663: PUSH
4664: LD_STRING 
4666: ST_TO_ADDR
// hc_name :=  ;
4667: LD_ADDR_OWVAR 26
4671: PUSH
4672: LD_STRING 
4674: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 9
4680: PPUSH
4681: LD_EXP 29
4685: PPUSH
4686: LD_EXP 30
4690: PPUSH
4691: CALL_OW 12
4695: PPUSH
4696: CALL_OW 380
// un := CreateHuman ;
4700: LD_ADDR_VAR 0 3
4704: PUSH
4705: CALL_OW 44
4709: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_INT 8
4717: PPUSH
4718: LD_INT 0
4720: PPUSH
4721: CALL_OW 49
// end ;
4725: GO 4656
4727: POP
4728: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: DOUBLE
4735: LD_INT 1
4737: DEC
4738: ST_TO_ADDR
4739: LD_INT 2
4741: PUSH
4742: LD_INT 3
4744: PUSH
4745: LD_INT 4
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: PUSH
4757: LD_OWVAR 67
4761: ARRAY
4762: PUSH
4763: FOR_TO
4764: IFFALSE 4834
// begin hc_gallery :=  ;
4766: LD_ADDR_OWVAR 33
4770: PUSH
4771: LD_STRING 
4773: ST_TO_ADDR
// hc_name :=  ;
4774: LD_ADDR_OWVAR 26
4778: PUSH
4779: LD_STRING 
4781: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4782: LD_INT 0
4784: PPUSH
4785: LD_INT 4
4787: PPUSH
4788: LD_EXP 29
4792: PPUSH
4793: LD_EXP 30
4797: PPUSH
4798: CALL_OW 12
4802: PPUSH
4803: CALL_OW 380
// un := CreateHuman ;
4807: LD_ADDR_VAR 0 3
4811: PUSH
4812: CALL_OW 44
4816: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4817: LD_VAR 0 3
4821: PPUSH
4822: LD_INT 8
4824: PPUSH
4825: LD_INT 0
4827: PPUSH
4828: CALL_OW 49
// end ;
4832: GO 4763
4834: POP
4835: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: DOUBLE
4842: LD_INT 1
4844: DEC
4845: ST_TO_ADDR
4846: LD_INT 3
4848: PUSH
4849: LD_INT 4
4851: PUSH
4852: LD_INT 5
4854: PUSH
4855: LD_INT 5
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_OWVAR 67
4868: ARRAY
4869: PUSH
4870: FOR_TO
4871: IFFALSE 5088
// begin vc_engine = 3 ;
4873: LD_ADDR_OWVAR 39
4877: PUSH
4878: LD_INT 3
4880: ST_TO_ADDR
// vc_control = 1 ;
4881: LD_ADDR_OWVAR 38
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4889: LD_ADDR_OWVAR 40
4893: PUSH
4894: LD_INT 42
4896: PUSH
4897: LD_INT 43
4899: PUSH
4900: LD_INT 44
4902: PUSH
4903: LD_INT 45
4905: PUSH
4906: LD_INT 46
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 1
4918: PPUSH
4919: LD_INT 5
4921: PPUSH
4922: CALL_OW 12
4926: ARRAY
4927: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4928: LD_OWVAR 40
4932: PUSH
4933: LD_INT 46
4935: EQUAL
4936: IFFALSE 4948
// vc_chassis := ru_heavy_tracked else
4938: LD_ADDR_OWVAR 37
4942: PUSH
4943: LD_INT 24
4945: ST_TO_ADDR
4946: GO 4975
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4948: LD_ADDR_OWVAR 37
4952: PUSH
4953: LD_INT 22
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 1
4965: PPUSH
4966: LD_INT 2
4968: PPUSH
4969: CALL_OW 12
4973: ARRAY
4974: ST_TO_ADDR
// veh := CreateVehicle ;
4975: LD_ADDR_VAR 0 4
4979: PUSH
4980: CALL_OW 45
4984: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4997: LD_VAR 0 4
5001: PPUSH
5002: LD_INT 5
5004: PPUSH
5005: LD_INT 0
5007: PPUSH
5008: CALL_OW 49
// hc_gallery :=  ;
5012: LD_ADDR_OWVAR 33
5016: PUSH
5017: LD_STRING 
5019: ST_TO_ADDR
// hc_name :=  ;
5020: LD_ADDR_OWVAR 26
5024: PUSH
5025: LD_STRING 
5027: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
5028: LD_INT 0
5030: PPUSH
5031: LD_INT 3
5033: PPUSH
5034: LD_INT 6
5036: PUSH
5037: LD_INT 7
5039: PUSH
5040: LD_INT 8
5042: PUSH
5043: LD_INT 10
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: PUSH
5052: LD_OWVAR 67
5056: ARRAY
5057: PPUSH
5058: CALL_OW 380
// un = CreateHuman ;
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: CALL_OW 44
5071: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5072: LD_VAR 0 3
5076: PPUSH
5077: LD_VAR 0 4
5081: PPUSH
5082: CALL_OW 52
// end ;
5086: GO 4870
5088: POP
5089: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
5090: LD_ADDR_VAR 0 2
5094: PUSH
5095: DOUBLE
5096: LD_INT 1
5098: DEC
5099: ST_TO_ADDR
5100: LD_INT 3
5102: PUSH
5103: LD_INT 4
5105: PUSH
5106: LD_INT 5
5108: PUSH
5109: LD_INT 5
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: PUSH
5118: LD_OWVAR 67
5122: ARRAY
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5272
// begin vc_engine := 3 ;
5127: LD_ADDR_OWVAR 39
5131: PUSH
5132: LD_INT 3
5134: ST_TO_ADDR
// vc_control := 3 ;
5135: LD_ADDR_OWVAR 38
5139: PUSH
5140: LD_INT 3
5142: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
5143: LD_ADDR_OWVAR 40
5147: PUSH
5148: LD_INT 42
5150: PUSH
5151: LD_INT 43
5153: PUSH
5154: LD_INT 44
5156: PUSH
5157: LD_INT 45
5159: PUSH
5160: LD_INT 46
5162: PUSH
5163: LD_INT 49
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 1
5176: PPUSH
5177: LD_INT 5
5179: PPUSH
5180: CALL_OW 12
5184: ARRAY
5185: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
5186: LD_OWVAR 40
5190: PUSH
5191: LD_INT 46
5193: EQUAL
5194: IFFALSE 5206
// vc_chassis := ru_heavy_tracked else
5196: LD_ADDR_OWVAR 37
5200: PUSH
5201: LD_INT 24
5203: ST_TO_ADDR
5204: GO 5233
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
5206: LD_ADDR_OWVAR 37
5210: PUSH
5211: LD_INT 22
5213: PUSH
5214: LD_INT 21
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 2
5226: PPUSH
5227: CALL_OW 12
5231: ARRAY
5232: ST_TO_ADDR
// veh := CreateVehicle ;
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: CALL_OW 45
5242: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5243: LD_VAR 0 4
5247: PPUSH
5248: LD_INT 3
5250: PPUSH
5251: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
5255: LD_VAR 0 4
5259: PPUSH
5260: LD_INT 6
5262: PPUSH
5263: LD_INT 0
5265: PPUSH
5266: CALL_OW 49
// end ;
5270: GO 5124
5272: POP
5273: POP
// end ; end_of_file
5274: LD_VAR 0 1
5278: RET
// export function PrepareKurt ; begin
5279: LD_INT 0
5281: PPUSH
// uc_side := 8 ;
5282: LD_ADDR_OWVAR 20
5286: PUSH
5287: LD_INT 8
5289: ST_TO_ADDR
// uc_nation := 2 ;
5290: LD_ADDR_OWVAR 21
5294: PUSH
5295: LD_INT 2
5297: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
5298: LD_ADDR_OWVAR 37
5302: PUSH
5303: LD_INT 13
5305: ST_TO_ADDR
// vc_engine := 1 ;
5306: LD_ADDR_OWVAR 39
5310: PUSH
5311: LD_INT 1
5313: ST_TO_ADDR
// vc_control := 1 ;
5314: LD_ADDR_OWVAR 38
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// vc_weapon := 24 ;
5322: LD_ADDR_OWVAR 40
5326: PUSH
5327: LD_INT 24
5329: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
5330: LD_ADDR_EXP 18
5334: PUSH
5335: CALL_OW 45
5339: ST_TO_ADDR
// if kurtStatus > 0 then
5340: LD_EXP 19
5344: PUSH
5345: LD_INT 0
5347: GREATER
5348: IFFALSE 5400
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
5350: LD_ADDR_EXP 17
5354: PUSH
5355: LD_STRING Kurt
5357: PPUSH
5358: LD_INT 0
5360: PPUSH
5361: LD_STRING 
5363: PPUSH
5364: CALL 42244 0 3
5368: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5369: LD_EXP 18
5373: PPUSH
5374: LD_INT 4
5376: PPUSH
5377: LD_INT 0
5379: PPUSH
5380: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5384: LD_EXP 17
5388: PPUSH
5389: LD_EXP 18
5393: PPUSH
5394: CALL_OW 52
// end else
5398: GO 5477
// begin hc_name :=  ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING 
5407: ST_TO_ADDR
// hc_gallery :=  ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING 
5415: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
5416: LD_INT 1
5418: PPUSH
5419: LD_INT 10
5421: PPUSH
5422: CALL_OW 381
// Kurt := CreateHuman ;
5426: LD_ADDR_EXP 17
5430: PUSH
5431: CALL_OW 44
5435: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5436: LD_EXP 18
5440: PPUSH
5441: LD_INT 4
5443: PPUSH
5444: LD_INT 0
5446: PPUSH
5447: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5451: LD_EXP 17
5455: PPUSH
5456: LD_EXP 18
5460: PPUSH
5461: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING AltKurt
5472: PPUSH
5473: CALL_OW 38
// end ; end ;
5477: LD_VAR 0 1
5481: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
5482: LD_INT 0
5484: PPUSH
5485: PPUSH
5486: PPUSH
5487: PPUSH
// for i := 1 to 3 do
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: DOUBLE
5494: LD_INT 1
5496: DEC
5497: ST_TO_ADDR
5498: LD_INT 3
5500: PUSH
5501: FOR_TO
5502: IFFALSE 5625
// begin uc_side := 1 ;
5504: LD_ADDR_OWVAR 20
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// uc_nation := 2 ;
5512: LD_ADDR_OWVAR 21
5516: PUSH
5517: LD_INT 2
5519: ST_TO_ADDR
// hc_gallery =  ;
5520: LD_ADDR_OWVAR 33
5524: PUSH
5525: LD_STRING 
5527: ST_TO_ADDR
// hc_name =  ;
5528: LD_ADDR_OWVAR 26
5532: PUSH
5533: LD_STRING 
5535: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
5536: LD_EXP 19
5540: PUSH
5541: LD_INT 0
5543: EQUAL
5544: IFTRUE 5556
5546: PUSH
5547: LD_EXP 19
5551: PUSH
5552: LD_INT 2
5554: EQUAL
5555: OR
5556: IFFALSE 5573
// PrepareHuman ( false , 1 , 6 ) else
5558: LD_INT 0
5560: PPUSH
5561: LD_INT 1
5563: PPUSH
5564: LD_INT 6
5566: PPUSH
5567: CALL_OW 380
5571: GO 5586
// PrepareHuman ( false , 1 , 8 ) ;
5573: LD_INT 0
5575: PPUSH
5576: LD_INT 1
5578: PPUSH
5579: LD_INT 8
5581: PPUSH
5582: CALL_OW 380
// un := CreateHuman ;
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: CALL_OW 44
5595: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 4
5603: PPUSH
5604: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5608: LD_VAR 0 3
5612: PPUSH
5613: LD_INT 4
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 49
// end ;
5623: GO 5501
5625: POP
5626: POP
// vc_chassis := 14 ;
5627: LD_ADDR_OWVAR 37
5631: PUSH
5632: LD_INT 14
5634: ST_TO_ADDR
// vc_engine := 3 ;
5635: LD_ADDR_OWVAR 39
5639: PUSH
5640: LD_INT 3
5642: ST_TO_ADDR
// vc_control := 1 ;
5643: LD_ADDR_OWVAR 38
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5651: LD_ADDR_OWVAR 40
5655: PUSH
5656: LD_INT 27
5658: PUSH
5659: LD_INT 26
5661: PUSH
5662: LD_INT 28
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 1
5672: PPUSH
5673: LD_INT 3
5675: PPUSH
5676: CALL_OW 12
5680: ARRAY
5681: ST_TO_ADDR
// veh := CreateVehicle ;
5682: LD_ADDR_VAR 0 4
5686: PUSH
5687: CALL_OW 45
5691: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5692: LD_VAR 0 4
5696: PPUSH
5697: LD_INT 4
5699: PPUSH
5700: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5704: LD_VAR 0 4
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: LD_INT 0
5714: PPUSH
5715: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5719: LD_EXP 19
5723: PUSH
5724: LD_INT 0
5726: EQUAL
5727: IFTRUE 5739
5729: PUSH
5730: LD_EXP 19
5734: PUSH
5735: LD_INT 2
5737: EQUAL
5738: OR
5739: IFFALSE 5756
// PrepareHuman ( false , 3 , 6 ) else
5741: LD_INT 0
5743: PPUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_INT 6
5749: PPUSH
5750: CALL_OW 380
5754: GO 5769
// PrepareHuman ( false , 3 , 8 ) ;
5756: LD_INT 0
5758: PPUSH
5759: LD_INT 3
5761: PPUSH
5762: LD_INT 8
5764: PPUSH
5765: CALL_OW 380
// un := CreateHuman ;
5769: LD_ADDR_VAR 0 3
5773: PUSH
5774: CALL_OW 44
5778: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5779: LD_VAR 0 3
5783: PPUSH
5784: LD_VAR 0 4
5788: PPUSH
5789: CALL_OW 52
// vc_chassis := 14 ;
5793: LD_ADDR_OWVAR 37
5797: PUSH
5798: LD_INT 14
5800: ST_TO_ADDR
// vc_engine := 3 ;
5801: LD_ADDR_OWVAR 39
5805: PUSH
5806: LD_INT 3
5808: ST_TO_ADDR
// vc_control := 1 ;
5809: LD_ADDR_OWVAR 38
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5817: LD_ADDR_OWVAR 40
5821: PUSH
5822: LD_INT 27
5824: PUSH
5825: LD_INT 26
5827: PUSH
5828: LD_INT 28
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: LIST
5835: PUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_INT 3
5841: PPUSH
5842: CALL_OW 12
5846: ARRAY
5847: ST_TO_ADDR
// veh := CreateVehicle ;
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: CALL_OW 45
5857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5858: LD_VAR 0 4
5862: PPUSH
5863: LD_INT 4
5865: PPUSH
5866: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5870: LD_VAR 0 4
5874: PPUSH
5875: LD_INT 4
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5885: LD_EXP 19
5889: PUSH
5890: LD_INT 0
5892: EQUAL
5893: IFTRUE 5905
5895: PUSH
5896: LD_EXP 19
5900: PUSH
5901: LD_INT 2
5903: EQUAL
5904: OR
5905: IFFALSE 5922
// PrepareHuman ( false , 4 , 6 ) else
5907: LD_INT 0
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: LD_INT 6
5915: PPUSH
5916: CALL_OW 380
5920: GO 5935
// PrepareHuman ( false , 4 , 8 ) ;
5922: LD_INT 0
5924: PPUSH
5925: LD_INT 4
5927: PPUSH
5928: LD_INT 8
5930: PPUSH
5931: CALL_OW 380
// un := CreateHuman ;
5935: LD_ADDR_VAR 0 3
5939: PUSH
5940: CALL_OW 44
5944: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5945: LD_VAR 0 3
5949: PPUSH
5950: LD_INT 4
5952: PPUSH
5953: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5957: LD_VAR 0 3
5961: PPUSH
5962: LD_VAR 0 4
5966: PPUSH
5967: CALL_OW 52
// vc_chassis := 14 ;
5971: LD_ADDR_OWVAR 37
5975: PUSH
5976: LD_INT 14
5978: ST_TO_ADDR
// vc_engine := 3 ;
5979: LD_ADDR_OWVAR 39
5983: PUSH
5984: LD_INT 3
5986: ST_TO_ADDR
// vc_control := 1 ;
5987: LD_ADDR_OWVAR 38
5991: PUSH
5992: LD_INT 1
5994: ST_TO_ADDR
// vc_weapon := 26 ;
5995: LD_ADDR_OWVAR 40
5999: PUSH
6000: LD_INT 26
6002: ST_TO_ADDR
// veh := CreateVehicle ;
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: CALL_OW 45
6012: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6013: LD_VAR 0 4
6017: PPUSH
6018: LD_INT 4
6020: PPUSH
6021: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
6025: LD_VAR 0 4
6029: PPUSH
6030: LD_INT 4
6032: PPUSH
6033: LD_INT 0
6035: PPUSH
6036: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
6040: LD_EXP 19
6044: PUSH
6045: LD_INT 0
6047: EQUAL
6048: IFTRUE 6060
6050: PUSH
6051: LD_EXP 19
6055: PUSH
6056: LD_INT 2
6058: EQUAL
6059: OR
6060: IFFALSE 6077
// PrepareHuman ( false , 2 , 4 ) else
6062: LD_INT 0
6064: PPUSH
6065: LD_INT 2
6067: PPUSH
6068: LD_INT 4
6070: PPUSH
6071: CALL_OW 380
6075: GO 6090
// PrepareHuman ( false , 2 , 8 ) ;
6077: LD_INT 0
6079: PPUSH
6080: LD_INT 2
6082: PPUSH
6083: LD_INT 8
6085: PPUSH
6086: CALL_OW 380
// un := CreateHuman ;
6090: LD_ADDR_VAR 0 3
6094: PUSH
6095: CALL_OW 44
6099: ST_TO_ADDR
// SetDir ( un , 4 ) ;
6100: LD_VAR 0 3
6104: PPUSH
6105: LD_INT 4
6107: PPUSH
6108: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
6112: LD_VAR 0 3
6116: PPUSH
6117: LD_VAR 0 4
6121: PPUSH
6122: CALL_OW 52
// end ;
6126: LD_VAR 0 1
6130: RET
// export function PrepareAttackLegion ; var i , un ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
// for i := 1 to 4 do
6136: LD_ADDR_VAR 0 2
6140: PUSH
6141: DOUBLE
6142: LD_INT 1
6144: DEC
6145: ST_TO_ADDR
6146: LD_INT 4
6148: PUSH
6149: FOR_TO
6150: IFFALSE 6260
// begin uc_side := 8 ;
6152: LD_ADDR_OWVAR 20
6156: PUSH
6157: LD_INT 8
6159: ST_TO_ADDR
// uc_nation := 2 ;
6160: LD_ADDR_OWVAR 21
6164: PUSH
6165: LD_INT 2
6167: ST_TO_ADDR
// hc_gallery :=  ;
6168: LD_ADDR_OWVAR 33
6172: PUSH
6173: LD_STRING 
6175: ST_TO_ADDR
// hc_name :=  ;
6176: LD_ADDR_OWVAR 26
6180: PUSH
6181: LD_STRING 
6183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
6184: LD_INT 0
6186: PPUSH
6187: LD_INT 1
6189: PUSH
6190: LD_INT 8
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 1
6199: PPUSH
6200: LD_INT 2
6202: PPUSH
6203: CALL_OW 12
6207: ARRAY
6208: PPUSH
6209: LD_INT 6
6211: PPUSH
6212: LD_INT 8
6214: PPUSH
6215: CALL_OW 12
6219: PPUSH
6220: CALL_OW 380
// un := CreateHuman ;
6224: LD_ADDR_VAR 0 3
6228: PUSH
6229: CALL_OW 44
6233: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
6234: LD_VAR 0 3
6238: PPUSH
6239: LD_INT 19
6241: PPUSH
6242: LD_INT 0
6244: PPUSH
6245: CALL_OW 49
// ComCrawl ( un ) ;
6249: LD_VAR 0 3
6253: PPUSH
6254: CALL_OW 137
// end ;
6258: GO 6149
6260: POP
6261: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 8
6267: PPUSH
6268: LD_INT 2
6270: PPUSH
6271: LD_INT 1
6273: PPUSH
6274: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
6278: LD_INT 20
6280: PPUSH
6281: LD_INT 3
6283: PPUSH
6284: CALL 15465 0 2
// end ; end_of_file
6288: LD_VAR 0 1
6292: RET
// export function Action ; var i , tmp , group ; begin
6293: LD_INT 0
6295: PPUSH
6296: PPUSH
6297: PPUSH
6298: PPUSH
// music_nat := 1 ;
6299: LD_ADDR_OWVAR 71
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
6307: LD_ADDR_VAR 0 4
6311: PUSH
6312: LD_INT 22
6314: PUSH
6315: LD_INT 1
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 69
6326: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
6327: LD_ADDR_VAR 0 3
6331: PUSH
6332: LD_EXP 1
6336: PPUSH
6337: CALL_OW 310
6341: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
6342: LD_VAR 0 3
6346: PPUSH
6347: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
6351: LD_VAR 0 4
6355: PPUSH
6356: LD_INT 130
6358: PPUSH
6359: LD_INT 103
6361: PPUSH
6362: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_INT 114
6373: PPUSH
6374: LD_INT 102
6376: PPUSH
6377: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
6381: LD_EXP 1
6385: PPUSH
6386: LD_STRING D1-JMM-1
6388: PPUSH
6389: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6393: LD_VAR 0 3
6397: PPUSH
6398: CALL_OW 87
// if IsOk ( Donaldson ) then
6402: LD_EXP 3
6406: PPUSH
6407: CALL_OW 302
6411: IFFALSE 6476
// begin Say ( Donaldson , D1-Don-1 ) ;
6413: LD_EXP 3
6417: PPUSH
6418: LD_STRING D1-Don-1
6420: PPUSH
6421: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
6434: LD_EXP 1
6438: PPUSH
6439: LD_STRING D1-JMM-2
6441: PPUSH
6442: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6446: LD_VAR 0 3
6450: PPUSH
6451: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
6455: LD_EXP 3
6459: PPUSH
6460: LD_STRING D1-Don-2
6462: PPUSH
6463: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6467: LD_VAR 0 3
6471: PPUSH
6472: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
6476: LD_VAR 0 4
6480: PPUSH
6481: LD_INT 110
6483: PPUSH
6484: LD_INT 101
6486: PPUSH
6487: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6491: LD_INT 35
6493: PPUSH
6494: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
6498: LD_VAR 0 3
6502: PPUSH
6503: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
6507: LD_INT 1
6509: PPUSH
6510: LD_INT 102
6512: PPUSH
6513: LD_INT 94
6515: PPUSH
6516: CALL_OW 293
6520: IFFALSE 6491
// CenterOnXY ( 102 , 94 ) ;
6522: LD_INT 102
6524: PPUSH
6525: LD_INT 94
6527: PPUSH
6528: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
6532: LD_VAR 0 4
6536: PPUSH
6537: LD_INT 26
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PPUSH
6547: CALL_OW 72
6551: PPUSH
6552: LD_STRING D1-Sol1-2
6554: PPUSH
6555: LD_STRING 
6557: PPUSH
6558: CALL 13095 0 3
// Say ( JMM , D1-JMM-3 ) ;
6562: LD_EXP 1
6566: PPUSH
6567: LD_STRING D1-JMM-3
6569: PPUSH
6570: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6574: LD_STRING M1
6576: PPUSH
6577: CALL_OW 337
// for i in group do
6581: LD_ADDR_VAR 0 2
6585: PUSH
6586: LD_VAR 0 4
6590: PUSH
6591: FOR_IN
6592: IFFALSE 6611
// ComMoveXY ( i , 95 , 84 ) ;
6594: LD_VAR 0 2
6598: PPUSH
6599: LD_INT 95
6601: PPUSH
6602: LD_INT 84
6604: PPUSH
6605: CALL_OW 111
6609: GO 6591
6611: POP
6612: POP
// end ;
6613: LD_VAR 0 1
6617: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
6618: LD_INT 7
6620: PPUSH
6621: LD_INT 22
6623: PUSH
6624: LD_INT 1
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PPUSH
6631: CALL_OW 70
6635: PUSH
6636: LD_INT 1
6638: GREATER
6639: IFFALSE 7342
6641: GO 6643
6643: DISABLE
6644: LD_INT 0
6646: PPUSH
6647: PPUSH
6648: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6649: LD_ADDR_VAR 0 2
6653: PUSH
6654: LD_INT 8
6656: PPUSH
6657: LD_INT 22
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 25
6669: PUSH
6670: LD_INT 9
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PPUSH
6681: CALL_OW 70
6685: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_INT 96
6693: PPUSH
6694: LD_INT 85
6696: PPUSH
6697: CALL_OW 154
// for i := 1 to 5 do
6701: LD_ADDR_VAR 0 1
6705: PUSH
6706: DOUBLE
6707: LD_INT 1
6709: DEC
6710: ST_TO_ADDR
6711: LD_INT 5
6713: PUSH
6714: FOR_TO
6715: IFFALSE 6734
// AddComTimeShift ( tmp , 96 , 85 ) ;
6717: LD_VAR 0 2
6721: PPUSH
6722: LD_INT 96
6724: PPUSH
6725: LD_INT 85
6727: PPUSH
6728: CALL_OW 214
6732: GO 6714
6734: POP
6735: POP
// wait ( 0 0$2 ) ;
6736: LD_INT 70
6738: PPUSH
6739: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6743: LD_EXP 1
6747: PPUSH
6748: LD_STRING D1a-JMM-1
6750: PPUSH
6751: CALL_OW 88
// if Donaldson then
6755: LD_EXP 3
6759: IFFALSE 6773
// Say ( Donaldson , D1a-Don-1 ) ;
6761: LD_EXP 3
6765: PPUSH
6766: LD_STRING D1a-Don-1
6768: PPUSH
6769: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6773: LD_ADDR_VAR 0 1
6777: PUSH
6778: LD_INT 22
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PPUSH
6788: CALL_OW 69
6792: PUSH
6793: FOR_IN
6794: IFFALSE 6813
// ComMoveXY ( i , 109 , 102 ) ;
6796: LD_VAR 0 1
6800: PPUSH
6801: LD_INT 109
6803: PPUSH
6804: LD_INT 102
6806: PPUSH
6807: CALL_OW 111
6811: GO 6793
6813: POP
6814: POP
// Say ( JMM , D1a-JMM-2 ) ;
6815: LD_EXP 1
6819: PPUSH
6820: LD_STRING D1a-JMM-2
6822: PPUSH
6823: CALL_OW 88
// wait ( 0 0$10 ) ;
6827: LD_INT 350
6829: PPUSH
6830: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6834: LD_EXP 1
6838: PPUSH
6839: CALL_OW 310
6843: PPUSH
6844: CALL_OW 87
// if IsOk ( Donaldson ) then
6848: LD_EXP 3
6852: PPUSH
6853: CALL_OW 302
6857: IFFALSE 6883
// begin Say ( Donaldson , D1b-Don-1 ) ;
6859: LD_EXP 3
6863: PPUSH
6864: LD_STRING D1b-Don-1
6866: PPUSH
6867: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6871: LD_EXP 1
6875: PPUSH
6876: LD_STRING D1b-JMM-1
6878: PPUSH
6879: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6883: LD_INT 22
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 26
6895: PUSH
6896: LD_INT 1
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 2
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 25
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 25
6928: PUSH
6929: LD_INT 3
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 4
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 5
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 8
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PPUSH
6980: CALL_OW 69
6984: PPUSH
6985: LD_STRING D1b-Sol1-1
6987: PPUSH
6988: LD_STRING 
6990: PPUSH
6991: CALL 13095 0 3
// if IsOk ( Donaldson ) then
6995: LD_EXP 3
6999: PPUSH
7000: CALL_OW 302
7004: IFFALSE 7018
// Say ( Donaldson , D1b-Don-2 ) ;
7006: LD_EXP 3
7010: PPUSH
7011: LD_STRING D1b-Don-2
7013: PPUSH
7014: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
7018: LD_EXP 1
7022: PPUSH
7023: LD_STRING D1b-JMM-2
7025: PPUSH
7026: CALL_OW 88
// dec := ShowQuery1 ;
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: CALL 13558 0 0
7039: ST_TO_ADDR
// if dec = 1 then
7040: LD_VAR 0 3
7044: PUSH
7045: LD_INT 1
7047: EQUAL
7048: IFFALSE 7190
// begin Say ( JMM , D2-JMM-1 ) ;
7050: LD_EXP 1
7054: PPUSH
7055: LD_STRING D2-JMM-1
7057: PPUSH
7058: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
7062: LD_EXP 15
7066: PPUSH
7067: LD_STRING D2-Pow-1
7069: PPUSH
7070: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
7074: LD_EXP 1
7078: PPUSH
7079: LD_STRING D2a-JMM-1
7081: PPUSH
7082: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
7086: LD_EXP 15
7090: PPUSH
7091: LD_STRING D2a-Pow-1
7093: PPUSH
7094: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
7098: LD_EXP 1
7102: PPUSH
7103: LD_STRING D2a-JMM-2
7105: PPUSH
7106: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
7110: LD_EXP 15
7114: PPUSH
7115: LD_STRING D2a-Pow-2
7117: PPUSH
7118: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
7122: LD_EXP 1
7126: PPUSH
7127: LD_STRING D2a-JMM-3
7129: PPUSH
7130: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
7134: LD_EXP 15
7138: PPUSH
7139: LD_STRING D2a-Pow-3
7141: PPUSH
7142: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D2c-JMM-1
7153: PPUSH
7154: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
7158: LD_EXP 15
7162: PPUSH
7163: LD_STRING D2c-Pow-1
7165: PPUSH
7166: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_STRING D2c-JMM-2
7177: PPUSH
7178: CALL_OW 88
// secondPass := 2 ;
7182: LD_ADDR_EXP 20
7186: PUSH
7187: LD_INT 2
7189: ST_TO_ADDR
// end ; if dec = 2 then
7190: LD_VAR 0 3
7194: PUSH
7195: LD_INT 2
7197: EQUAL
7198: IFFALSE 7292
// begin Say ( JMM , D2-JMM-1 ) ;
7200: LD_EXP 1
7204: PPUSH
7205: LD_STRING D2-JMM-1
7207: PPUSH
7208: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
7212: LD_EXP 15
7216: PPUSH
7217: LD_STRING D2-Pow-1
7219: PPUSH
7220: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
7224: LD_EXP 1
7228: PPUSH
7229: LD_STRING D2b-JMM-1
7231: PPUSH
7232: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
7236: LD_EXP 15
7240: PPUSH
7241: LD_STRING D2b-Pow-1
7243: PPUSH
7244: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
7248: LD_EXP 1
7252: PPUSH
7253: LD_STRING D2c-JMM-1
7255: PPUSH
7256: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
7260: LD_EXP 15
7264: PPUSH
7265: LD_STRING D2c-Pow-1
7267: PPUSH
7268: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
7272: LD_EXP 1
7276: PPUSH
7277: LD_STRING D2c-JMM-2
7279: PPUSH
7280: CALL_OW 88
// secondPass := 2 ;
7284: LD_ADDR_EXP 20
7288: PUSH
7289: LD_INT 2
7291: ST_TO_ADDR
// end ; if dec = 3 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 3
7299: EQUAL
7300: IFFALSE 7310
// secondPass := 1 ;
7302: LD_ADDR_EXP 20
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// InGameOff ;
7310: CALL_OW 9
// ruAI := true ;
7314: LD_ADDR_EXP 34
7318: PUSH
7319: LD_INT 1
7321: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
7322: LD_INT 1
7324: PPUSH
7325: LD_INT 3
7327: PPUSH
7328: LD_INT 2
7330: PPUSH
7331: LD_INT 1
7333: PPUSH
7334: CALL_OW 80
// SaveForQuickRestart ;
7338: CALL_OW 22
// end ;
7342: PPOPN 3
7344: END
// every 1 1$0 trigger secondPass = 2 do
7345: LD_EXP 20
7349: PUSH
7350: LD_INT 2
7352: EQUAL
7353: IFFALSE 7583
7355: GO 7357
7357: DISABLE
// begin cratesAllow := true ;
7358: LD_ADDR_EXP 45
7362: PUSH
7363: LD_INT 1
7365: ST_TO_ADDR
// PowellSupport1 ;
7366: CALL 2227 0 0
// DialogueOn ;
7370: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
7374: LD_EXP 1
7378: PPUSH
7379: LD_STRING DC1-JMM-1
7381: PPUSH
7382: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
7386: LD_EXP 15
7390: PPUSH
7391: LD_STRING DC1-Pow-1
7393: PPUSH
7394: CALL_OW 94
// DialogueOff ;
7398: CALL_OW 7
// wait ( 3 3$0 ) ;
7402: LD_INT 6300
7404: PPUSH
7405: CALL_OW 67
// PowellSupport2 ;
7409: CALL 2735 0 0
// DialogueOn ;
7413: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
7417: LD_EXP 1
7421: PPUSH
7422: LD_STRING DC2-JMM-1
7424: PPUSH
7425: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
7429: LD_EXP 15
7433: PPUSH
7434: LD_STRING DC2-Pow-1
7436: PPUSH
7437: CALL_OW 94
// DialogueOff ;
7441: CALL_OW 7
// wait ( 3 3$00 ) ;
7445: LD_INT 6300
7447: PPUSH
7448: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7452: LD_INT 35
7454: PPUSH
7455: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
7459: LD_INT 22
7461: PUSH
7462: LD_INT 1
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 2
7471: PUSH
7472: LD_INT 30
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: LD_INT 30
7484: PUSH
7485: LD_INT 1
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PPUSH
7501: CALL_OW 69
7505: IFFALSE 7527
7507: PUSH
7508: LD_INT 11
7510: PPUSH
7511: LD_INT 22
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PPUSH
7521: CALL_OW 70
7525: NOT
7526: AND
7527: IFFALSE 7452
// wait ( 0 0$10 ) ;
7529: LD_INT 350
7531: PPUSH
7532: CALL_OW 67
// Legion ;
7536: CALL 7584 0 0
// wait ( 5 5$0 ) ;
7540: LD_INT 10500
7542: PPUSH
7543: CALL_OW 67
// PowellSupport3 ;
7547: CALL 3418 0 0
// DialogueOn ;
7551: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
7555: LD_EXP 15
7559: PPUSH
7560: LD_STRING DC3-Pow-1
7562: PPUSH
7563: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DC3-JMM-1
7574: PPUSH
7575: CALL_OW 88
// DialogueOff ;
7579: CALL_OW 7
// end ;
7583: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
7584: LD_INT 0
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
7596: PPUSH
7597: PPUSH
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7602: LD_ADDR_VAR 0 5
7606: PUSH
7607: LD_INT 22
7609: PUSH
7610: LD_INT 1
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 21
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 2
7629: PUSH
7630: LD_INT 30
7632: PUSH
7633: LD_INT 0
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 30
7642: PUSH
7643: LD_INT 1
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PPUSH
7660: CALL_OW 69
7664: ST_TO_ADDR
// crates := 0 ;
7665: LD_ADDR_VAR 0 8
7669: PUSH
7670: LD_INT 0
7672: ST_TO_ADDR
// oil := 0 ;
7673: LD_ADDR_VAR 0 9
7677: PUSH
7678: LD_INT 0
7680: ST_TO_ADDR
// siberite := 0 ;
7681: LD_ADDR_VAR 0 10
7685: PUSH
7686: LD_INT 0
7688: ST_TO_ADDR
// payForNeutral := false ;
7689: LD_ADDR_VAR 0 13
7693: PUSH
7694: LD_INT 0
7696: ST_TO_ADDR
// payForHelp := false ;
7697: LD_ADDR_VAR 0 14
7701: PUSH
7702: LD_INT 0
7704: ST_TO_ADDR
// for i in tmp do
7705: LD_ADDR_VAR 0 2
7709: PUSH
7710: LD_VAR 0 5
7714: PUSH
7715: FOR_IN
7716: IFFALSE 7807
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7718: LD_ADDR_VAR 0 8
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_VAR 0 2
7732: PPUSH
7733: CALL_OW 274
7737: PPUSH
7738: LD_INT 1
7740: PPUSH
7741: CALL_OW 275
7745: PLUS
7746: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7747: LD_ADDR_VAR 0 9
7751: PUSH
7752: LD_VAR 0 9
7756: PUSH
7757: LD_VAR 0 2
7761: PPUSH
7762: CALL_OW 274
7766: PPUSH
7767: LD_INT 2
7769: PPUSH
7770: CALL_OW 275
7774: PLUS
7775: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7776: LD_ADDR_VAR 0 10
7780: PUSH
7781: LD_VAR 0 10
7785: PUSH
7786: LD_VAR 0 2
7790: PPUSH
7791: CALL_OW 274
7795: PPUSH
7796: LD_INT 3
7798: PPUSH
7799: CALL_OW 275
7803: PLUS
7804: ST_TO_ADDR
// end ;
7805: GO 7715
7807: POP
7808: POP
// PrepareKurt ;
7809: CALL 5279 0 0
// if not Kurt then
7813: LD_EXP 17
7817: NOT
7818: IFFALSE 7822
// exit ;
7820: GO 9953
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7822: LD_EXP 18
7826: PPUSH
7827: LD_INT 144
7829: PPUSH
7830: LD_INT 111
7832: PPUSH
7833: CALL_OW 111
// wait ( 0 0$2 ) ;
7837: LD_INT 70
7839: PPUSH
7840: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7844: LD_INT 167
7846: PPUSH
7847: LD_INT 121
7849: PPUSH
7850: LD_INT 1
7852: PPUSH
7853: LD_INT 10
7855: NEG
7856: PPUSH
7857: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7861: LD_EXP 17
7865: PPUSH
7866: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7870: LD_EXP 17
7874: PPUSH
7875: CALL_OW 87
// wait ( 0 0$1 ) ;
7879: LD_INT 35
7881: PPUSH
7882: CALL_OW 67
// DialogueOn ;
7886: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 26
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 25
7915: PUSH
7916: LD_INT 1
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 25
7935: PUSH
7936: LD_INT 3
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 25
7945: PUSH
7946: LD_INT 4
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 25
7955: PUSH
7956: LD_INT 5
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 25
7965: PUSH
7966: LD_INT 8
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PPUSH
7987: CALL_OW 69
7991: PPUSH
7992: LD_STRING D3-Sol1-1
7994: PPUSH
7995: LD_STRING 
7997: PPUSH
7998: CALL 13095 0 3
// if KurtStatus then
8002: LD_EXP 19
8006: IFFALSE 8106
// begin Say ( Kurt , D3-Kurt-1 ) ;
8008: LD_EXP 17
8012: PPUSH
8013: LD_STRING D3-Kurt-1
8015: PPUSH
8016: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8020: LD_EXP 1
8024: PPUSH
8025: LD_STRING D3-JMM-1
8027: PPUSH
8028: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
8032: LD_EXP 17
8036: PPUSH
8037: LD_STRING D3-Kurt-2
8039: PPUSH
8040: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
8044: LD_EXP 1
8048: PPUSH
8049: LD_STRING D3-JMM-2
8051: PPUSH
8052: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
8056: LD_EXP 17
8060: PPUSH
8061: LD_STRING D3-Kurt-4
8063: PPUSH
8064: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8068: LD_EXP 1
8072: PPUSH
8073: LD_STRING D3-JMM-4
8075: PPUSH
8076: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
8080: LD_EXP 17
8084: PPUSH
8085: LD_STRING D3-Kurt-5
8087: PPUSH
8088: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
8092: LD_EXP 17
8096: PPUSH
8097: LD_STRING D3-Kurt-5a
8099: PPUSH
8100: CALL_OW 88
// end else
8104: GO 8202
// begin Say ( Kurt , D3-Kurt-1 ) ;
8106: LD_EXP 17
8110: PPUSH
8111: LD_STRING D3-Kurt-1
8113: PPUSH
8114: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8118: LD_EXP 1
8122: PPUSH
8123: LD_STRING D3-JMM-1
8125: PPUSH
8126: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
8130: LD_EXP 17
8134: PPUSH
8135: LD_STRING D3-Kurt-3
8137: PPUSH
8138: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8142: LD_EXP 1
8146: PPUSH
8147: LD_STRING D3-JMM-3
8149: PPUSH
8150: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
8154: LD_EXP 17
8158: PPUSH
8159: LD_STRING D3-Kurt-4
8161: PPUSH
8162: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8166: LD_EXP 1
8170: PPUSH
8171: LD_STRING D3-JMM-4
8173: PPUSH
8174: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
8178: LD_EXP 17
8182: PPUSH
8183: LD_STRING D3-Kurt-5
8185: PPUSH
8186: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
8190: LD_EXP 17
8194: PPUSH
8195: LD_STRING D3-Kurt-5b
8197: PPUSH
8198: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8202: LD_VAR 0 8
8206: PUSH
8207: LD_INT 120
8209: PUSH
8210: LD_INT 60
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_EXP 19
8221: PUSH
8222: LD_INT 1
8224: PLUS
8225: ARRAY
8226: GREATEREQUAL
8227: IFFALSE 8256
8229: PUSH
8230: LD_VAR 0 10
8234: PUSH
8235: LD_INT 120
8237: PUSH
8238: LD_INT 60
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_EXP 19
8249: PUSH
8250: LD_INT 1
8252: PLUS
8253: ARRAY
8254: GREATEREQUAL
8255: AND
8256: IFFALSE 8308
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8258: LD_ADDR_VAR 0 3
8262: PUSH
8263: LD_STRING Q2
8265: PUSH
8266: LD_STRING Q2K
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_EXP 19
8277: PUSH
8278: LD_INT 1
8280: PLUS
8281: ARRAY
8282: PPUSH
8283: LD_INT 1
8285: PUSH
8286: LD_INT 2
8288: PUSH
8289: LD_INT 3
8291: PUSH
8292: LD_INT 4
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 98
8305: ST_TO_ADDR
8306: GO 8352
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: LD_STRING Q2
8315: PUSH
8316: LD_STRING Q2K
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_EXP 19
8327: PUSH
8328: LD_INT 1
8330: PLUS
8331: ARRAY
8332: PPUSH
8333: LD_INT 1
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 4
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 98
8351: ST_TO_ADDR
// if dec1 = 1 then
8352: LD_VAR 0 3
8356: PUSH
8357: LD_INT 1
8359: EQUAL
8360: IFFALSE 8394
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8362: LD_EXP 1
8366: PPUSH
8367: LD_STRING D3Ka-JMM-1
8369: PPUSH
8370: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
8374: LD_EXP 17
8378: PPUSH
8379: LD_STRING D3Ka-Kurt-1
8381: PPUSH
8382: CALL_OW 88
// warWithLegion = 1 ;
8386: LD_ADDR_EXP 23
8390: PUSH
8391: LD_INT 1
8393: ST_TO_ADDR
// end ; if dec1 = 2 then
8394: LD_VAR 0 3
8398: PUSH
8399: LD_INT 2
8401: EQUAL
8402: IFFALSE 8486
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8404: LD_EXP 1
8408: PPUSH
8409: LD_STRING D3Kb-JMM-1
8411: PPUSH
8412: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8416: LD_EXP 17
8420: PPUSH
8421: LD_STRING D3Kb-Kurt-1
8423: PPUSH
8424: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8428: LD_ADDR_VAR 0 11
8432: PUSH
8433: LD_INT 120
8435: PUSH
8436: LD_INT 60
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: LD_EXP 19
8447: PUSH
8448: LD_INT 1
8450: PLUS
8451: ARRAY
8452: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8453: LD_ADDR_VAR 0 12
8457: PUSH
8458: LD_INT 120
8460: PUSH
8461: LD_INT 60
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_EXP 19
8472: PUSH
8473: LD_INT 1
8475: PLUS
8476: ARRAY
8477: ST_TO_ADDR
// payForNeutral := true ;
8478: LD_ADDR_VAR 0 13
8482: PUSH
8483: LD_INT 1
8485: ST_TO_ADDR
// end ; if dec1 = 3 then
8486: LD_VAR 0 3
8490: PUSH
8491: LD_INT 3
8493: EQUAL
8494: IFFALSE 8729
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8496: LD_EXP 1
8500: PPUSH
8501: LD_STRING D3Kc1-JMM-1
8503: PPUSH
8504: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8508: LD_EXP 17
8512: PPUSH
8513: LD_STRING D3Kc1-Kurt-1
8515: PPUSH
8516: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8520: LD_EXP 1
8524: PPUSH
8525: LD_STRING D3Kc1-JMM-2
8527: PPUSH
8528: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8532: LD_EXP 17
8536: PPUSH
8537: LD_STRING D3Kc1-Kurt-2
8539: PPUSH
8540: CALL_OW 88
// askSiberite = 1 ;
8544: LD_ADDR_EXP 25
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8552: LD_ADDR_VAR 0 4
8556: PUSH
8557: LD_STRING Q2b
8559: PPUSH
8560: LD_INT 1
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: PPUSH
8574: CALL_OW 98
8578: ST_TO_ADDR
// if dec2 = 1 then
8579: LD_VAR 0 4
8583: PUSH
8584: LD_INT 1
8586: EQUAL
8587: IFFALSE 8621
// begin Say ( JMM , D4a-JMM-1 ) ;
8589: LD_EXP 1
8593: PPUSH
8594: LD_STRING D4a-JMM-1
8596: PPUSH
8597: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8601: LD_EXP 17
8605: PPUSH
8606: LD_STRING D4b-Kurt-1
8608: PPUSH
8609: CALL_OW 88
// warWithLegion = 1 ;
8613: LD_ADDR_EXP 23
8617: PUSH
8618: LD_INT 1
8620: ST_TO_ADDR
// end ; if dec2 = 2 then
8621: LD_VAR 0 4
8625: PUSH
8626: LD_INT 2
8628: EQUAL
8629: IFFALSE 8663
// begin Say ( JMM , D4b-JMM-1 ) ;
8631: LD_EXP 1
8635: PPUSH
8636: LD_STRING D4b-JMM-1
8638: PPUSH
8639: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8643: LD_EXP 17
8647: PPUSH
8648: LD_STRING D4b-Kurt-1
8650: PPUSH
8651: CALL_OW 88
// warWithLegion = 1 ;
8655: LD_ADDR_EXP 23
8659: PUSH
8660: LD_INT 1
8662: ST_TO_ADDR
// end ; if dec2 = 3 then
8663: LD_VAR 0 4
8667: PUSH
8668: LD_INT 3
8670: EQUAL
8671: IFFALSE 8729
// begin Say ( JMM , D4c-JMM-1 ) ;
8673: LD_EXP 1
8677: PPUSH
8678: LD_STRING D4c-JMM-1
8680: PPUSH
8681: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8685: LD_EXP 17
8689: PPUSH
8690: LD_STRING D4c-Kurt-1
8692: PPUSH
8693: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8697: LD_EXP 1
8701: PPUSH
8702: LD_STRING D4c-JMM-2
8704: PPUSH
8705: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8709: LD_EXP 17
8713: PPUSH
8714: LD_STRING D4c-Kurt-2
8716: PPUSH
8717: CALL_OW 88
// fakeInfo = 1 ;
8721: LD_ADDR_EXP 24
8725: PUSH
8726: LD_INT 1
8728: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8729: LD_VAR 0 3
8733: PUSH
8734: LD_INT 4
8736: EQUAL
8737: IFFALSE 9809
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8739: LD_EXP 1
8743: PPUSH
8744: LD_STRING D3Kd-JMM-1
8746: PPUSH
8747: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8751: LD_VAR 0 8
8755: PUSH
8756: LD_INT 200
8758: PUSH
8759: LD_INT 120
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_EXP 19
8770: PUSH
8771: LD_INT 1
8773: PLUS
8774: ARRAY
8775: GREATEREQUAL
8776: IFFALSE 8805
8778: PUSH
8779: LD_VAR 0 10
8783: PUSH
8784: LD_INT 200
8786: PUSH
8787: LD_INT 120
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_EXP 19
8798: PUSH
8799: LD_INT 1
8801: PLUS
8802: ARRAY
8803: GREATEREQUAL
8804: AND
8805: IFFALSE 8857
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8807: LD_ADDR_VAR 0 4
8811: PUSH
8812: LD_STRING Q2a
8814: PUSH
8815: LD_STRING Q2aK
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_EXP 19
8826: PUSH
8827: LD_INT 1
8829: PLUS
8830: ARRAY
8831: PPUSH
8832: LD_INT 1
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: LD_INT 3
8840: PUSH
8841: LD_INT 4
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 98
8854: ST_TO_ADDR
8855: GO 9023
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8857: LD_VAR 0 8
8861: PUSH
8862: LD_INT 120
8864: PUSH
8865: LD_INT 60
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_EXP 19
8876: PUSH
8877: LD_INT 1
8879: PLUS
8880: ARRAY
8881: GREATEREQUAL
8882: IFFALSE 8911
8884: PUSH
8885: LD_VAR 0 10
8889: PUSH
8890: LD_INT 120
8892: PUSH
8893: LD_INT 60
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_EXP 19
8904: PUSH
8905: LD_INT 1
8907: PLUS
8908: ARRAY
8909: GREATEREQUAL
8910: AND
8911: IFFALSE 8959
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8913: LD_ADDR_VAR 0 4
8917: PUSH
8918: LD_STRING Q2a
8920: PUSH
8921: LD_STRING Q2aK
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_EXP 19
8932: PUSH
8933: LD_INT 1
8935: PLUS
8936: ARRAY
8937: PPUSH
8938: LD_INT 1
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: LD_INT 4
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 98
8956: ST_TO_ADDR
8957: GO 9023
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8959: LD_STRING Q2d
8961: PUSH
8962: LD_STRING Q2dK
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_EXP 19
8973: PUSH
8974: LD_INT 1
8976: PLUS
8977: ARRAY
8978: PPUSH
8979: CALL_OW 97
// dec2 := 0 ;
8983: LD_ADDR_VAR 0 4
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8991: LD_EXP 1
8995: PPUSH
8996: LD_STRING D3Kc1-JMM-1
8998: PPUSH
8999: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
9003: LD_EXP 17
9007: PPUSH
9008: LD_STRING D3Kc2-Kurt-1
9010: PPUSH
9011: CALL_OW 88
// warWithLegion := 1 ;
9015: LD_ADDR_EXP 23
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// end ; if dec2 = 1 then
9023: LD_VAR 0 4
9027: PUSH
9028: LD_INT 1
9030: EQUAL
9031: IFFALSE 9065
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9033: LD_EXP 1
9037: PPUSH
9038: LD_STRING D5Ka-JMM-1
9040: PPUSH
9041: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
9045: LD_EXP 17
9049: PPUSH
9050: LD_STRING D5Ka-Kurt-1
9052: PPUSH
9053: CALL_OW 88
// warWithLegion = 1 ;
9057: LD_ADDR_EXP 23
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// end ; if dec2 = 2 then
9065: LD_VAR 0 4
9069: PUSH
9070: LD_INT 2
9072: EQUAL
9073: IFFALSE 9157
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D3Kb-JMM-1
9082: PPUSH
9083: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
9087: LD_EXP 17
9091: PPUSH
9092: LD_STRING D3Kb-Kurt-1
9094: PPUSH
9095: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
9099: LD_ADDR_VAR 0 11
9103: PUSH
9104: LD_INT 120
9106: PUSH
9107: LD_INT 60
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_EXP 19
9118: PUSH
9119: LD_INT 1
9121: PLUS
9122: ARRAY
9123: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
9124: LD_ADDR_VAR 0 12
9128: PUSH
9129: LD_INT 120
9131: PUSH
9132: LD_INT 60
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_EXP 19
9143: PUSH
9144: LD_INT 1
9146: PLUS
9147: ARRAY
9148: ST_TO_ADDR
// payForNeutral := true ;
9149: LD_ADDR_VAR 0 13
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// end ; if dec2 = 3 then
9157: LD_VAR 0 4
9161: PUSH
9162: LD_INT 3
9164: EQUAL
9165: IFFALSE 9249
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D3Ke-JMM-1
9174: PPUSH
9175: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
9179: LD_EXP 17
9183: PPUSH
9184: LD_STRING D3Ke-Kurt-1
9186: PPUSH
9187: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
9191: LD_ADDR_VAR 0 11
9195: PUSH
9196: LD_INT 200
9198: PUSH
9199: LD_INT 120
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_EXP 19
9210: PUSH
9211: LD_INT 1
9213: PLUS
9214: ARRAY
9215: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
9216: LD_ADDR_VAR 0 12
9220: PUSH
9221: LD_INT 200
9223: PUSH
9224: LD_INT 120
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_EXP 19
9235: PUSH
9236: LD_INT 1
9238: PLUS
9239: ARRAY
9240: ST_TO_ADDR
// payForHelp := true ;
9241: LD_ADDR_VAR 0 14
9245: PUSH
9246: LD_INT 1
9248: ST_TO_ADDR
// end ; if dec2 = 4 then
9249: LD_VAR 0 4
9253: PUSH
9254: LD_INT 4
9256: EQUAL
9257: IFFALSE 9492
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9259: LD_EXP 1
9263: PPUSH
9264: LD_STRING D3Kc1-JMM-1
9266: PPUSH
9267: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
9271: LD_EXP 17
9275: PPUSH
9276: LD_STRING D3Kc1-Kurt-1
9278: PPUSH
9279: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9283: LD_EXP 1
9287: PPUSH
9288: LD_STRING D3Kc1-JMM-2
9290: PPUSH
9291: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
9295: LD_EXP 17
9299: PPUSH
9300: LD_STRING D3Kc1-Kurt-2
9302: PPUSH
9303: CALL_OW 88
// askSiberite = 1 ;
9307: LD_ADDR_EXP 25
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9315: LD_ADDR_VAR 0 4
9319: PUSH
9320: LD_STRING Q2b
9322: PPUSH
9323: LD_INT 1
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: LD_INT 3
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 98
9341: ST_TO_ADDR
// if dec2 = 1 then
9342: LD_VAR 0 4
9346: PUSH
9347: LD_INT 1
9349: EQUAL
9350: IFFALSE 9384
// begin Say ( JMM , D4a-JMM-1 ) ;
9352: LD_EXP 1
9356: PPUSH
9357: LD_STRING D4a-JMM-1
9359: PPUSH
9360: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9364: LD_EXP 17
9368: PPUSH
9369: LD_STRING D4b-Kurt-1
9371: PPUSH
9372: CALL_OW 88
// warWithLegion = 1 ;
9376: LD_ADDR_EXP 23
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// end ; if dec2 = 2 then
9384: LD_VAR 0 4
9388: PUSH
9389: LD_INT 2
9391: EQUAL
9392: IFFALSE 9426
// begin Say ( JMM , D4b-JMM-1 ) ;
9394: LD_EXP 1
9398: PPUSH
9399: LD_STRING D4b-JMM-1
9401: PPUSH
9402: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9406: LD_EXP 17
9410: PPUSH
9411: LD_STRING D4b-Kurt-1
9413: PPUSH
9414: CALL_OW 88
// warWithLegion = 1 ;
9418: LD_ADDR_EXP 23
9422: PUSH
9423: LD_INT 1
9425: ST_TO_ADDR
// end ; if dec2 = 3 then
9426: LD_VAR 0 4
9430: PUSH
9431: LD_INT 3
9433: EQUAL
9434: IFFALSE 9492
// begin Say ( JMM , D4c-JMM-1 ) ;
9436: LD_EXP 1
9440: PPUSH
9441: LD_STRING D4c-JMM-1
9443: PPUSH
9444: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
9448: LD_EXP 17
9452: PPUSH
9453: LD_STRING D4c-Kurt-1
9455: PPUSH
9456: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9460: LD_EXP 1
9464: PPUSH
9465: LD_STRING D4c-JMM-2
9467: PPUSH
9468: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
9472: LD_EXP 17
9476: PPUSH
9477: LD_STRING D4c-Kurt-2
9479: PPUSH
9480: CALL_OW 88
// fakeInfo = 1 ;
9484: LD_ADDR_EXP 24
9488: PUSH
9489: LD_INT 1
9491: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
9492: LD_VAR 0 13
9496: IFTRUE 9504
9498: PUSH
9499: LD_VAR 0 14
9503: OR
9504: IFFALSE 9809
// begin for i in tmp do
9506: LD_ADDR_VAR 0 2
9510: PUSH
9511: LD_VAR 0 5
9515: PUSH
9516: FOR_IN
9517: IFFALSE 9807
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9519: LD_ADDR_VAR 0 6
9523: PUSH
9524: LD_VAR 0 2
9528: PPUSH
9529: CALL_OW 274
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: CALL_OW 275
9541: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9542: LD_ADDR_VAR 0 7
9546: PUSH
9547: LD_VAR 0 2
9551: PPUSH
9552: CALL_OW 274
9556: PPUSH
9557: LD_INT 3
9559: PPUSH
9560: CALL_OW 275
9564: ST_TO_ADDR
// if cr then
9565: LD_VAR 0 11
9569: IFFALSE 9685
// begin if tmp2 and tmp2 < cr then
9571: LD_VAR 0 6
9575: IFFALSE 9589
9577: PUSH
9578: LD_VAR 0 6
9582: PUSH
9583: LD_VAR 0 11
9587: LESS
9588: AND
9589: IFFALSE 9637
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9591: LD_VAR 0 2
9595: PPUSH
9596: CALL_OW 274
9600: PPUSH
9601: LD_INT 1
9603: PPUSH
9604: LD_VAR 0 11
9608: PUSH
9609: LD_VAR 0 6
9613: MINUS
9614: PPUSH
9615: CALL_OW 277
// cr := cr - tmp2 ;
9619: LD_ADDR_VAR 0 11
9623: PUSH
9624: LD_VAR 0 11
9628: PUSH
9629: LD_VAR 0 6
9633: MINUS
9634: ST_TO_ADDR
// end else
9635: GO 9685
// if tmp2 > cr then
9637: LD_VAR 0 6
9641: PUSH
9642: LD_VAR 0 11
9646: GREATER
9647: IFFALSE 9685
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9649: LD_VAR 0 2
9653: PPUSH
9654: CALL_OW 274
9658: PPUSH
9659: LD_INT 1
9661: PPUSH
9662: LD_VAR 0 6
9666: PUSH
9667: LD_VAR 0 11
9671: MINUS
9672: PPUSH
9673: CALL_OW 277
// cr := 0 ;
9677: LD_ADDR_VAR 0 11
9681: PUSH
9682: LD_INT 0
9684: ST_TO_ADDR
// end ; end ; if sb then
9685: LD_VAR 0 12
9689: IFFALSE 9805
// begin if tmp3 and tmp3 < sb then
9691: LD_VAR 0 7
9695: IFFALSE 9709
9697: PUSH
9698: LD_VAR 0 7
9702: PUSH
9703: LD_VAR 0 12
9707: LESS
9708: AND
9709: IFFALSE 9757
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9711: LD_VAR 0 2
9715: PPUSH
9716: CALL_OW 274
9720: PPUSH
9721: LD_INT 3
9723: PPUSH
9724: LD_VAR 0 12
9728: PUSH
9729: LD_VAR 0 7
9733: MINUS
9734: PPUSH
9735: CALL_OW 277
// sb := sb - tmp3 ;
9739: LD_ADDR_VAR 0 12
9743: PUSH
9744: LD_VAR 0 12
9748: PUSH
9749: LD_VAR 0 7
9753: MINUS
9754: ST_TO_ADDR
// end else
9755: GO 9805
// if tmp3 > sb then
9757: LD_VAR 0 7
9761: PUSH
9762: LD_VAR 0 12
9766: GREATER
9767: IFFALSE 9805
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9769: LD_VAR 0 2
9773: PPUSH
9774: CALL_OW 274
9778: PPUSH
9779: LD_INT 3
9781: PPUSH
9782: LD_VAR 0 7
9786: PUSH
9787: LD_VAR 0 12
9791: MINUS
9792: PPUSH
9793: CALL_OW 277
// sb := 0 ;
9797: LD_ADDR_VAR 0 12
9801: PUSH
9802: LD_INT 0
9804: ST_TO_ADDR
// end ; end ; end ;
9805: GO 9516
9807: POP
9808: POP
// end ; end ; DialogueOff ;
9809: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9813: LD_INT 167
9815: PPUSH
9816: LD_INT 121
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9826: LD_EXP 17
9830: PPUSH
9831: LD_EXP 18
9835: PPUSH
9836: CALL_OW 120
// wait ( 0 0$1 ) ;
9840: LD_INT 35
9842: PPUSH
9843: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9847: LD_EXP 18
9851: PPUSH
9852: LD_INT 4
9854: PPUSH
9855: CALL_OW 113
// wait ( 0 0$3 ) ;
9859: LD_INT 105
9861: PPUSH
9862: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9866: LD_EXP 17
9870: PPUSH
9871: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9875: LD_EXP 18
9879: PPUSH
9880: CALL_OW 64
// wait ( 0 0$3 ) ;
9884: LD_INT 105
9886: PPUSH
9887: CALL_OW 67
// if payForHelp then
9891: LD_VAR 0 14
9895: IFFALSE 9953
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9897: LD_INT 36
9899: PPUSH
9900: LD_INT 57
9902: PPUSH
9903: LD_INT 1
9905: PPUSH
9906: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9910: LD_INT 51
9912: PPUSH
9913: LD_INT 63
9915: PPUSH
9916: LD_INT 1
9918: PPUSH
9919: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9923: LD_INT 93
9925: PPUSH
9926: LD_INT 65
9928: PPUSH
9929: LD_INT 1
9931: PPUSH
9932: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9936: LD_INT 42
9938: PPUSH
9939: LD_INT 12
9941: PPUSH
9942: LD_INT 1
9944: PPUSH
9945: CALL_OW 244
// PrepareLegionForPlayer ;
9949: CALL 5482 0 0
// end ; end ;
9953: LD_VAR 0 1
9957: RET
// every 0 0$10 trigger warWithLegion = 1 do
9958: LD_EXP 23
9962: PUSH
9963: LD_INT 1
9965: EQUAL
9966: IFFALSE 9982
9968: GO 9970
9970: DISABLE
// begin wait ( 0 0$30 ) ;
9971: LD_INT 1050
9973: PPUSH
9974: CALL_OW 67
// PrepareAttackLegion ;
9978: CALL 6131 0 0
// end ;
9982: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9983: LD_INT 120
9985: PUSH
9986: LD_INT 17
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 52
9995: PUSH
9996: EMPTY
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: IFFALSE 10154
10009: GO 10011
10011: DISABLE
10012: LD_INT 0
10014: PPUSH
// begin enable ;
10015: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
10016: LD_ADDR_VAR 0 1
10020: PUSH
10021: LD_INT 120
10023: PUSH
10024: LD_INT 17
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 52
10033: PUSH
10034: EMPTY
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 69
10045: PUSH
10046: FOR_IN
10047: IFFALSE 10152
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
10049: LD_VAR 0 1
10053: PPUSH
10054: CALL 84139 0 1
10058: PUSH
10059: LD_INT 4
10061: ARRAY
10062: PUSH
10063: LD_INT 0
10065: EQUAL
10066: IFFALSE 10083
10068: PUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 255
10078: PUSH
10079: LD_INT 1
10081: EQUAL
10082: AND
10083: IFFALSE 10097
// SetSide ( i , 4 ) ;
10085: LD_VAR 0 1
10089: PPUSH
10090: LD_INT 4
10092: PPUSH
10093: CALL_OW 235
// if GetSide ( i ) = 4 then
10097: LD_VAR 0 1
10101: PPUSH
10102: CALL_OW 255
10106: PUSH
10107: LD_INT 4
10109: EQUAL
10110: IFFALSE 10150
// if not IsInArea ( i , PlayerSpawn ) then
10112: LD_VAR 0 1
10116: PPUSH
10117: LD_INT 4
10119: PPUSH
10120: CALL_OW 308
10124: NOT
10125: IFFALSE 10141
// ComMoveToArea ( i , PlayerSpawn ) else
10127: LD_VAR 0 1
10131: PPUSH
10132: LD_INT 4
10134: PPUSH
10135: CALL_OW 113
10139: GO 10150
// RemoveUnit ( i ) ;
10141: LD_VAR 0 1
10145: PPUSH
10146: CALL_OW 64
// end ;
10150: GO 10046
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
10157: LD_EXP 20
10161: PUSH
10162: LD_INT 1
10164: EQUAL
10165: IFFALSE 10211
10167: PUSH
10168: LD_INT 12
10170: PPUSH
10171: LD_INT 22
10173: PUSH
10174: LD_INT 3
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 101
10183: PUSH
10184: LD_INT 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 21
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: PPUSH
10206: CALL_OW 70
10210: AND
10211: IFFALSE 10796
10213: GO 10215
10215: DISABLE
10216: LD_INT 0
10218: PPUSH
10219: PPUSH
10220: PPUSH
// begin DialogueOn ;
10221: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10225: LD_VAR 0 1
10229: PPUSH
10230: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10234: LD_INT 22
10236: PUSH
10237: LD_INT 1
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 26
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: LD_INT 25
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 25
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 25
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 25
10289: PUSH
10290: LD_INT 4
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 25
10299: PUSH
10300: LD_INT 5
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 25
10309: PUSH
10310: LD_INT 8
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 69
10335: PPUSH
10336: LD_STRING DT1-Sol1-1
10338: PPUSH
10339: LD_STRING DT1-FSol1-1
10341: PPUSH
10342: CALL 13095 0 3
// dec := ShowQuery2 ;
10346: LD_ADDR_VAR 0 3
10350: PUSH
10351: CALL 13579 0 0
10355: ST_TO_ADDR
// if dec = 1 then
10356: LD_VAR 0 3
10360: PUSH
10361: LD_INT 1
10363: EQUAL
10364: IFFALSE 10506
// begin Say ( JMM , D2-JMM-1 ) ;
10366: LD_EXP 1
10370: PPUSH
10371: LD_STRING D2-JMM-1
10373: PPUSH
10374: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10378: LD_EXP 15
10382: PPUSH
10383: LD_STRING D2-Pow-1
10385: PPUSH
10386: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10390: LD_EXP 1
10394: PPUSH
10395: LD_STRING D2a-JMM-1
10397: PPUSH
10398: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10402: LD_EXP 15
10406: PPUSH
10407: LD_STRING D2a-Pow-1
10409: PPUSH
10410: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10414: LD_EXP 1
10418: PPUSH
10419: LD_STRING D2a-JMM-2
10421: PPUSH
10422: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10426: LD_EXP 15
10430: PPUSH
10431: LD_STRING D2a-Pow-2
10433: PPUSH
10434: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10438: LD_EXP 1
10442: PPUSH
10443: LD_STRING D2a-JMM-3
10445: PPUSH
10446: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10450: LD_EXP 15
10454: PPUSH
10455: LD_STRING D2a-Pow-3
10457: PPUSH
10458: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10462: LD_EXP 1
10466: PPUSH
10467: LD_STRING D2c-JMM-1
10469: PPUSH
10470: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10474: LD_EXP 15
10478: PPUSH
10479: LD_STRING D2c-Pow-1
10481: PPUSH
10482: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10486: LD_EXP 1
10490: PPUSH
10491: LD_STRING D2c-JMM-2
10493: PPUSH
10494: CALL_OW 88
// secondPass := 2 ;
10498: LD_ADDR_EXP 20
10502: PUSH
10503: LD_INT 2
10505: ST_TO_ADDR
// end ; if dec = 2 then
10506: LD_VAR 0 3
10510: PUSH
10511: LD_INT 2
10513: EQUAL
10514: IFFALSE 10608
// begin Say ( JMM , D2-JMM-1 ) ;
10516: LD_EXP 1
10520: PPUSH
10521: LD_STRING D2-JMM-1
10523: PPUSH
10524: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10528: LD_EXP 15
10532: PPUSH
10533: LD_STRING D2-Pow-1
10535: PPUSH
10536: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D2b-JMM-1
10547: PPUSH
10548: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10552: LD_EXP 15
10556: PPUSH
10557: LD_STRING D2b-Pow-1
10559: PPUSH
10560: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10564: LD_EXP 1
10568: PPUSH
10569: LD_STRING D2c-JMM-1
10571: PPUSH
10572: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10576: LD_EXP 15
10580: PPUSH
10581: LD_STRING D2c-Pow-1
10583: PPUSH
10584: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10588: LD_EXP 1
10592: PPUSH
10593: LD_STRING D2c-JMM-2
10595: PPUSH
10596: CALL_OW 88
// secondPass := 2 ;
10600: LD_ADDR_EXP 20
10604: PUSH
10605: LD_INT 2
10607: ST_TO_ADDR
// end ; DialogueOff ;
10608: CALL_OW 7
// if secondPass = 2 then
10612: LD_EXP 20
10616: PUSH
10617: LD_INT 2
10619: EQUAL
10620: IFFALSE 10624
// exit ;
10622: GO 10796
// Query ( HelpRequest ) ;
10624: LD_STRING HelpRequest
10626: PPUSH
10627: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
10631: LD_INT 27
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
10641: LD_INT 35
10643: PPUSH
10644: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
10648: LD_EXP 1
10652: PPUSH
10653: LD_INT 27
10655: PPUSH
10656: CALL_OW 308
10660: IFFALSE 10641
// SetAreaMapShow ( helpRequestArea , 0 ) ;
10662: LD_INT 27
10664: PPUSH
10665: LD_INT 0
10667: PPUSH
10668: CALL_OW 424
// DialogueOn ;
10672: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
10676: LD_EXP 1
10680: PPUSH
10681: LD_STRING D2-JMM-1
10683: PPUSH
10684: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10688: LD_EXP 15
10692: PPUSH
10693: LD_STRING D2-Pow-1
10695: PPUSH
10696: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10700: LD_EXP 1
10704: PPUSH
10705: LD_STRING D2b-JMM-1
10707: PPUSH
10708: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10712: LD_EXP 15
10716: PPUSH
10717: LD_STRING D2a-Pow-2
10719: PPUSH
10720: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_STRING D2a-JMM-3
10731: PPUSH
10732: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10736: LD_EXP 15
10740: PPUSH
10741: LD_STRING D2a-Pow-3
10743: PPUSH
10744: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10748: LD_EXP 1
10752: PPUSH
10753: LD_STRING D2c-JMM-1
10755: PPUSH
10756: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10760: LD_EXP 15
10764: PPUSH
10765: LD_STRING D2c-Pow-1
10767: PPUSH
10768: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10772: LD_EXP 1
10776: PPUSH
10777: LD_STRING D2c-JMM-2
10779: PPUSH
10780: CALL_OW 88
// DialogueOff ;
10784: CALL_OW 7
// secondPass := 2 ;
10788: LD_ADDR_EXP 20
10792: PUSH
10793: LD_INT 2
10795: ST_TO_ADDR
// end ;
10796: PPOPN 3
10798: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10799: LD_EXP 21
10803: PUSH
10804: LD_INT 1
10806: EQUAL
10807: IFFALSE 10828
10809: PUSH
10810: LD_INT 11
10812: PPUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 3
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 70
10827: AND
10828: IFFALSE 11311
10830: GO 10832
10832: DISABLE
10833: LD_INT 0
10835: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10836: LD_ADDR_VAR 0 1
10840: PUSH
10841: LD_INT 11
10843: PPUSH
10844: LD_INT 22
10846: PUSH
10847: LD_INT 3
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 70
10858: ST_TO_ADDR
// if not vehicles then
10859: LD_VAR 0 1
10863: NOT
10864: IFFALSE 10868
// exit ;
10866: GO 11311
// repeat wait ( 0 0$1 ) ;
10868: LD_INT 35
10870: PPUSH
10871: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_INT 101
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 72
10894: IFFALSE 10868
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 101
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: PUSH
10916: LD_INT 1
10918: ARRAY
10919: PPUSH
10920: CALL_OW 87
// DialogueOn ;
10924: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10928: LD_INT 22
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 26
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 23
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 2
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 3
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 4
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 5
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 25
11013: PUSH
11014: LD_INT 8
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PPUSH
11036: CALL_OW 69
11040: PPUSH
11041: LD_STRING DT1-Sol1-1
11043: PPUSH
11044: LD_STRING DT1-FSol1-1
11046: PPUSH
11047: CALL 13095 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11051: LD_EXP 1
11055: PPUSH
11056: LD_STRING DT1-JMM-1
11058: PPUSH
11059: CALL_OW 88
// DialogueOff ;
11063: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
11067: LD_INT 175
11069: PPUSH
11070: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
11074: LD_INT 11
11076: PPUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 50
11089: PUSH
11090: EMPTY
11091: LIST
11092: PUSH
11093: LD_INT 2
11095: PUSH
11096: LD_INT 21
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: PPUSH
11126: CALL_OW 70
11130: PUSH
11131: LD_INT 0
11133: EQUAL
11134: IFFALSE 11146
11136: PUSH
11137: LD_EXP 22
11141: PUSH
11142: LD_INT 2
11144: GREATER
11145: AND
11146: IFFALSE 11067
// DialogueOn ;
11148: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11152: LD_EXP 1
11156: PPUSH
11157: LD_STRING DT1a-JMM-1
11159: PPUSH
11160: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11164: LD_INT 22
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 26
11176: PUSH
11177: LD_INT 1
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 23
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 2
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 1
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 25
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 25
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 25
11229: PUSH
11230: LD_INT 4
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 25
11239: PUSH
11240: LD_INT 5
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 25
11249: PUSH
11250: LD_INT 8
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 69
11276: PPUSH
11277: LD_STRING DT1a-Sol1-1
11279: PPUSH
11280: LD_STRING DT1a-FSol1-1
11282: PPUSH
11283: CALL 13095 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11287: LD_EXP 1
11291: PPUSH
11292: LD_STRING DT1a-JMM-2
11294: PPUSH
11295: CALL_OW 88
// DialogueOff ;
11299: CALL_OW 7
// vehicleTeleported := 2 ;
11303: LD_ADDR_EXP 21
11307: PUSH
11308: LD_INT 2
11310: ST_TO_ADDR
// end ;
11311: PPOPN 1
11313: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
11314: LD_EXP 21
11318: PUSH
11319: LD_INT 3
11321: EQUAL
11322: IFFALSE 11357
11324: PUSH
11325: LD_INT 11
11327: PPUSH
11328: LD_INT 22
11330: PUSH
11331: LD_INT 3
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 101
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 70
11356: AND
11357: IFFALSE 11642
11359: GO 11361
11361: DISABLE
11362: LD_INT 0
11364: PPUSH
11365: PPUSH
11366: PPUSH
// begin wait ( 0 0$0.3 ) ;
11367: LD_INT 10
11369: PPUSH
11370: CALL_OW 67
// DialogueOn ;
11374: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11378: LD_ADDR_VAR 0 3
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 1
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 23
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 26
11405: PUSH
11406: LD_INT 1
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 2
11415: PUSH
11416: LD_INT 25
11418: PUSH
11419: LD_INT 1
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 25
11438: PUSH
11439: LD_INT 3
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 25
11448: PUSH
11449: LD_INT 4
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 25
11458: PUSH
11459: LD_INT 5
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 25
11468: PUSH
11469: LD_INT 8
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 69
11495: PPUSH
11496: LD_STRING DT2-Sol1-1
11498: PPUSH
11499: LD_STRING DT2-FSol1-1
11501: PPUSH
11502: CALL 13095 0 3
11506: ST_TO_ADDR
// DialogueOff ;
11507: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
11511: LD_INT 175
11513: PPUSH
11514: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11518: LD_INT 11
11520: PPUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 50
11533: PUSH
11534: EMPTY
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 70
11545: NOT
11546: IFFALSE 11511
// wait ( 0 0$2 ) ;
11548: LD_INT 70
11550: PPUSH
11551: CALL_OW 67
// vehicleTeleported := 4 ;
11555: LD_ADDR_EXP 21
11559: PUSH
11560: LD_INT 4
11562: ST_TO_ADDR
// DialogueOn ;
11563: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11567: LD_EXP 1
11571: PPUSH
11572: LD_STRING DT2a-JMM-1
11574: PPUSH
11575: CALL_OW 88
// if speaker then
11579: LD_VAR 0 3
11583: IFFALSE 11626
// if GetSex ( speaker ) = 1 then
11585: LD_VAR 0 3
11589: PPUSH
11590: CALL_OW 258
11594: PUSH
11595: LD_INT 1
11597: EQUAL
11598: IFFALSE 11614
// Say ( speaker , DT2a-Sol1-1 ) else
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_STRING DT2a-Sol1-1
11607: PPUSH
11608: CALL_OW 88
11612: GO 11626
// Say ( speaker , DT2a-FSol1-1 ) ;
11614: LD_VAR 0 3
11618: PPUSH
11619: LD_STRING DT2a-FSol1-1
11621: PPUSH
11622: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11626: LD_EXP 3
11630: PPUSH
11631: LD_STRING DT2a-Don-1
11633: PPUSH
11634: CALL_OW 88
// DialogueOff ;
11638: CALL_OW 7
// end ;
11642: PPOPN 3
11644: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11645: LD_INT 1
11647: PPUSH
11648: LD_INT 45
11650: PPUSH
11651: LD_INT 74
11653: PPUSH
11654: CALL_OW 293
11658: IFFALSE 11835
11660: GO 11662
11662: DISABLE
// begin DialogueOn ;
11663: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11667: LD_INT 36
11669: PPUSH
11670: LD_INT 55
11672: PPUSH
11673: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11677: LD_INT 22
11679: PUSH
11680: LD_INT 1
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 23
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 26
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 2
11709: PUSH
11710: LD_INT 25
11712: PUSH
11713: LD_INT 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 25
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 25
11742: PUSH
11743: LD_INT 4
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 25
11752: PUSH
11753: LD_INT 5
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 8
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PPUSH
11785: CALL_OW 69
11789: PPUSH
11790: LD_STRING D5-Sol1-1
11792: PPUSH
11793: LD_STRING D5-FSol1-
11795: PPUSH
11796: CALL 13095 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11800: LD_EXP 23
11804: IFFALSE 11817
11806: PUSH
11807: LD_EXP 3
11811: PPUSH
11812: CALL_OW 302
11816: AND
11817: IFFALSE 11831
// Say ( Donaldson , D5-Don-1 ) ;
11819: LD_EXP 3
11823: PPUSH
11824: LD_STRING D5-Don-1
11826: PPUSH
11827: CALL_OW 88
// DialogueOff ;
11831: CALL_OW 7
// end ;
11835: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11836: LD_INT 1
11838: PPUSH
11839: LD_INT 10
11841: PPUSH
11842: CALL_OW 292
11846: IFTRUE 11860
11848: PUSH
11849: LD_INT 1
11851: PPUSH
11852: LD_INT 137
11854: PPUSH
11855: CALL_OW 292
11859: OR
11860: IFFALSE 12015
11862: GO 11864
11864: DISABLE
// begin DialogueOn ;
11865: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11869: LD_INT 22
11871: PUSH
11872: LD_INT 1
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 23
11881: PUSH
11882: LD_INT 1
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 26
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: LD_INT 25
11904: PUSH
11905: LD_INT 1
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 25
11914: PUSH
11915: LD_INT 2
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 25
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 4
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 5
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 25
11954: PUSH
11955: LD_INT 8
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 69
11981: PPUSH
11982: LD_STRING DT3-Sol1-1
11984: PPUSH
11985: LD_STRING DT3-FSol1-1
11987: PPUSH
11988: CALL 13095 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11992: LD_EXP 1
11996: PPUSH
11997: LD_STRING DT3-JMM-1
11999: PPUSH
12000: CALL_OW 88
// DialogueOff ;
12004: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12008: LD_STRING M2
12010: PPUSH
12011: CALL_OW 337
// end ;
12015: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
12016: LD_EXP 35
12020: PUSH
12021: LD_INT 0
12023: EQUAL
12024: IFFALSE 12105
12026: PUSH
12027: LD_INT 10
12029: PPUSH
12030: LD_INT 22
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 70
12044: IFTRUE 12104
12046: PUSH
12047: LD_INT 10
12049: PPUSH
12050: LD_INT 22
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 3
12062: PUSH
12063: LD_INT 24
12065: PUSH
12066: LD_INT 800
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 21
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 58
12089: PUSH
12090: EMPTY
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PPUSH
12099: CALL_OW 70
12103: OR
12104: AND
12105: IFTRUE 12120
12107: PUSH
12108: LD_INT 137
12110: PPUSH
12111: CALL_OW 256
12115: PUSH
12116: LD_INT 900
12118: LESS
12119: OR
12120: IFFALSE 12133
12122: GO 12124
12124: DISABLE
// ruEscape := 1 ;
12125: LD_ADDR_EXP 35
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
12133: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
12134: LD_INT 3
12136: PPUSH
12137: CALL_OW 303
12141: IFTRUE 12152
12143: PUSH
12144: LD_INT 4
12146: PPUSH
12147: CALL_OW 303
12151: OR
12152: IFTRUE 12164
12154: PUSH
12155: LD_EXP 35
12159: PUSH
12160: LD_INT 1
12162: EQUAL
12163: OR
12164: IFFALSE 12759
12166: GO 12168
12168: DISABLE
12169: LD_INT 0
12171: PPUSH
12172: PPUSH
12173: PPUSH
// begin ruAI := 0 ;
12174: LD_ADDR_EXP 34
12178: PUSH
12179: LD_INT 0
12181: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12182: LD_EXP 27
12186: PPUSH
12187: CALL_OW 122
// wait ( 0 0$1 ) ;
12191: LD_INT 35
12193: PPUSH
12194: CALL_OW 67
// DialogueOn ;
12198: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
12202: LD_INT 75
12204: PPUSH
12205: LD_INT 21
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_INT 12
12213: PPUSH
12214: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
12218: LD_INT 75
12220: PPUSH
12221: LD_INT 21
12223: PPUSH
12224: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
12228: LD_INT 10
12230: PPUSH
12231: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
12235: LD_EXP 1
12239: PPUSH
12240: LD_STRING D6-JMM-1
12242: PPUSH
12243: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
12247: LD_INT 75
12249: PPUSH
12250: LD_INT 21
12252: PPUSH
12253: LD_INT 1
12255: PPUSH
12256: CALL_OW 331
// DialogueOff ;
12260: CALL_OW 7
// for i in RuScientists do
12264: LD_ADDR_VAR 0 1
12268: PUSH
12269: LD_EXP 27
12273: PUSH
12274: FOR_IN
12275: IFFALSE 12311
// begin SetSide ( i , 6 ) ;
12277: LD_VAR 0 1
12281: PPUSH
12282: LD_INT 6
12284: PPUSH
12285: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: LD_INT 3
12299: PPUSH
12300: CALL_OW 12
12304: PPUSH
12305: CALL_OW 109
// end ;
12309: GO 12274
12311: POP
12312: POP
// repeat wait ( 0 0$1 ) ;
12313: LD_INT 35
12315: PPUSH
12316: CALL_OW 67
// for i in RuScientists do
12320: LD_ADDR_VAR 0 1
12324: PUSH
12325: LD_EXP 27
12329: PUSH
12330: FOR_IN
12331: IFFALSE 12750
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12333: LD_ADDR_VAR 0 3
12337: PUSH
12338: LD_INT 22
12340: PUSH
12341: LD_INT 3
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 91
12350: PUSH
12351: LD_VAR 0 1
12355: PUSH
12356: LD_INT 10
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 58
12376: PUSH
12377: EMPTY
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 69
12390: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
12391: LD_VAR 0 3
12395: IFFALSE 12409
12397: PUSH
12398: LD_VAR 0 1
12402: PPUSH
12403: CALL_OW 310
12407: NOT
12408: AND
12409: IFFALSE 12437
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: LD_VAR 0 3
12420: PPUSH
12421: LD_VAR 0 1
12425: PPUSH
12426: CALL_OW 74
12430: PPUSH
12431: CALL_OW 120
// continue ;
12435: GO 12330
// end ; if IsInUnit ( i ) then
12437: LD_VAR 0 1
12441: PPUSH
12442: CALL_OW 310
12446: IFFALSE 12465
// unit := IsInUnit ( i ) else
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: LD_VAR 0 1
12457: PPUSH
12458: CALL_OW 310
12462: ST_TO_ADDR
12463: GO 12475
// unit := i ;
12465: LD_ADDR_VAR 0 2
12469: PUSH
12470: LD_VAR 0 1
12474: ST_TO_ADDR
// case GetTag ( i ) of 1 :
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 110
12484: PUSH
12485: LD_INT 1
12487: DOUBLE
12488: EQUAL
12489: IFTRUE 12493
12491: GO 12554
12493: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12494: LD_VAR 0 2
12498: PPUSH
12499: LD_INT 137
12501: PPUSH
12502: CALL_OW 296
12506: PUSH
12507: LD_INT 13
12509: LESS
12510: IFFALSE 12521
12512: PUSH
12513: LD_INT 137
12515: PPUSH
12516: CALL_OW 302
12520: AND
12521: IFFALSE 12537
// ComEnterUnit ( unit , rutp ) else
12523: LD_VAR 0 2
12527: PPUSH
12528: LD_INT 137
12530: PPUSH
12531: CALL_OW 120
12535: GO 12552
// ComMoveXY ( unit , 16 , 28 ) ;
12537: LD_VAR 0 2
12541: PPUSH
12542: LD_INT 16
12544: PPUSH
12545: LD_INT 28
12547: PPUSH
12548: CALL_OW 111
// end ; 2 :
12552: GO 12748
12554: LD_INT 2
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12580
12562: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
12563: LD_VAR 0 2
12567: PPUSH
12568: LD_INT 97
12570: PPUSH
12571: LD_INT 2
12573: PPUSH
12574: CALL_OW 111
12578: GO 12748
12580: LD_INT 3
12582: DOUBLE
12583: EQUAL
12584: IFTRUE 12588
12586: GO 12649
12588: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12589: LD_VAR 0 2
12593: PPUSH
12594: LD_INT 137
12596: PPUSH
12597: CALL_OW 296
12601: PUSH
12602: LD_INT 13
12604: LESS
12605: IFFALSE 12616
12607: PUSH
12608: LD_INT 137
12610: PPUSH
12611: CALL_OW 302
12615: AND
12616: IFFALSE 12632
// ComEnterUnit ( unit , rutp ) else
12618: LD_VAR 0 2
12622: PPUSH
12623: LD_INT 137
12625: PPUSH
12626: CALL_OW 120
12630: GO 12647
// ComMoveXY ( unit , 128 , 155 ) ;
12632: LD_VAR 0 2
12636: PPUSH
12637: LD_INT 128
12639: PPUSH
12640: LD_INT 155
12642: PPUSH
12643: CALL_OW 111
// end ; 11 :
12647: GO 12748
12649: LD_INT 11
12651: DOUBLE
12652: EQUAL
12653: IFTRUE 12657
12655: GO 12675
12657: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 16
12665: PPUSH
12666: LD_INT 28
12668: PPUSH
12669: CALL_OW 111
12673: GO 12748
12675: LD_INT 13
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12721
12683: POP
// begin if IsOk ( ruteleprt ) then
12684: LD_INT 10
12686: PPUSH
12687: CALL_OW 302
12691: IFFALSE 12707
// ComEnterUnit ( unit , ruteleprt ) else
12693: LD_VAR 0 2
12697: PPUSH
12698: LD_INT 10
12700: PPUSH
12701: CALL_OW 120
12705: GO 12719
// SetTag ( unit , 23 ) ;
12707: LD_VAR 0 2
12711: PPUSH
12712: LD_INT 23
12714: PPUSH
12715: CALL_OW 109
// end ; 23 :
12719: GO 12748
12721: LD_INT 23
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12729
12727: GO 12747
12729: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
12730: LD_VAR 0 2
12734: PPUSH
12735: LD_INT 128
12737: PPUSH
12738: LD_INT 155
12740: PPUSH
12741: CALL_OW 111
12745: GO 12748
12747: POP
// end ;
12748: GO 12330
12750: POP
12751: POP
// until not RuScientists ;
12752: LD_EXP 27
12756: NOT
12757: IFFALSE 12313
// end ;
12759: PPOPN 3
12761: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
12762: LD_EXP 34
12766: PUSH
12767: LD_INT 0
12769: EQUAL
12770: IFFALSE 12778
12772: PUSH
12773: LD_EXP 27
12777: AND
12778: IFFALSE 12839
12780: PUSH
12781: LD_INT 22
12783: PUSH
12784: LD_INT 6
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 2
12793: PUSH
12794: LD_INT 95
12796: PUSH
12797: LD_INT 13
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 95
12806: PUSH
12807: LD_INT 14
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 95
12816: PUSH
12817: LD_INT 25
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PPUSH
12834: CALL_OW 69
12838: AND
12839: IFFALSE 13052
12841: GO 12843
12843: DISABLE
12844: LD_INT 0
12846: PPUSH
12847: PPUSH
12848: PPUSH
12849: PPUSH
// begin enable ;
12850: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 2
12868: PUSH
12869: LD_INT 95
12871: PUSH
12872: LD_INT 13
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 95
12881: PUSH
12882: LD_INT 14
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 95
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PPUSH
12909: CALL_OW 69
12913: PUSH
12914: FOR_IN
12915: IFFALSE 13050
// begin if i in RuScientists then
12917: LD_VAR 0 1
12921: PUSH
12922: LD_EXP 27
12926: IN
12927: IFFALSE 12956
// begin RuScientists = RuScientists diff i ;
12929: LD_ADDR_EXP 27
12933: PUSH
12934: LD_EXP 27
12938: PUSH
12939: LD_VAR 0 1
12943: DIFF
12944: ST_TO_ADDR
// RemoveUnit ( i ) ;
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 64
// continue ;
12954: GO 12914
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12956: LD_VAR 0 1
12960: PUSH
12961: LD_INT 22
12963: PUSH
12964: LD_INT 6
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 33
12973: PUSH
12974: LD_INT 1
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 69
12989: IN
12990: IFFALSE 13048
// begin if IsDrivenBy ( i ) in RuScientists then
12992: LD_VAR 0 1
12996: PPUSH
12997: CALL_OW 311
13001: PUSH
13002: LD_EXP 27
13006: IN
13007: IFFALSE 13025
// RuScientists = RuScientists diff i ;
13009: LD_ADDR_EXP 27
13013: PUSH
13014: LD_EXP 27
13018: PUSH
13019: LD_VAR 0 1
13023: DIFF
13024: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 311
13034: PPUSH
13035: CALL_OW 64
// RemoveUnit ( i ) ;
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 64
// end ; end ;
13048: GO 12914
13050: POP
13051: POP
// end ; end_of_file
13052: PPOPN 4
13054: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13055: LD_INT 0
13057: PPUSH
13058: PPUSH
// for i in charactersList do
13059: LD_ADDR_VAR 0 4
13063: PUSH
13064: LD_VAR 0 1
13068: PUSH
13069: FOR_IN
13070: IFFALSE 13088
// SaveCharacters ( i , ident ) ;
13072: LD_VAR 0 4
13076: PPUSH
13077: LD_VAR 0 2
13081: PPUSH
13082: CALL_OW 38
13086: GO 13069
13088: POP
13089: POP
// end ;
13090: LD_VAR 0 3
13094: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
13099: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13100: LD_ADDR_VAR 0 1
13104: PUSH
13105: LD_VAR 0 1
13109: PUSH
13110: LD_EXP 1
13114: PUSH
13115: LD_EXP 7
13119: PUSH
13120: LD_EXP 3
13124: PUSH
13125: LD_EXP 4
13129: PUSH
13130: LD_EXP 5
13134: PUSH
13135: LD_EXP 2
13139: PUSH
13140: LD_EXP 12
13144: PUSH
13145: LD_EXP 13
13149: PUSH
13150: LD_EXP 9
13154: PUSH
13155: LD_EXP 11
13159: PUSH
13160: LD_EXP 6
13164: PUSH
13165: LD_EXP 8
13169: PUSH
13170: LD_EXP 10
13174: PUSH
13175: LD_EXP 15
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: DIFF
13196: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
13197: LD_ADDR_VAR 0 6
13201: PUSH
13202: LD_VAR 0 1
13206: PUSH
13207: LD_INT 1
13209: PPUSH
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 12
13219: ARRAY
13220: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
13221: LD_VAR 0 6
13225: PPUSH
13226: CALL_OW 258
13230: PUSH
13231: LD_INT 1
13233: EQUAL
13234: IFFALSE 13252
// Say ( speaker , dialogMID ) else
13236: LD_VAR 0 6
13240: PPUSH
13241: LD_VAR 0 2
13245: PPUSH
13246: CALL_OW 88
13250: GO 13266
// Say ( speaker , dialogFID ) ;
13252: LD_VAR 0 6
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: CALL_OW 88
// result := speaker ;
13266: LD_ADDR_VAR 0 4
13270: PUSH
13271: LD_VAR 0 6
13275: ST_TO_ADDR
// end ;
13276: LD_VAR 0 4
13280: RET
// export function PrepareDifficulty ; var tmp ; begin
13281: LD_INT 0
13283: PPUSH
13284: PPUSH
// if Difficulty = 1 then
13285: LD_OWVAR 67
13289: PUSH
13290: LD_INT 1
13292: EQUAL
13293: IFFALSE 13313
// begin RuSolMinLevel = 6 ;
13295: LD_ADDR_EXP 29
13299: PUSH
13300: LD_INT 6
13302: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
13303: LD_ADDR_EXP 30
13307: PUSH
13308: LD_INT 8
13310: ST_TO_ADDR
// end else
13311: GO 13553
// if Difficulty = 2 then
13313: LD_OWVAR 67
13317: PUSH
13318: LD_INT 2
13320: EQUAL
13321: IFFALSE 13417
// begin RuSolMinLevel = 7 ;
13323: LD_ADDR_EXP 29
13327: PUSH
13328: LD_INT 7
13330: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
13331: LD_ADDR_EXP 30
13335: PUSH
13336: LD_INT 9
13338: ST_TO_ADDR
// uc_nation = 3 ;
13339: LD_ADDR_OWVAR 21
13343: PUSH
13344: LD_INT 3
13346: ST_TO_ADDR
// uc_side = 3 ;
13347: LD_ADDR_OWVAR 20
13351: PUSH
13352: LD_INT 3
13354: ST_TO_ADDR
// bc_level = 10 ;
13355: LD_ADDR_OWVAR 43
13359: PUSH
13360: LD_INT 10
13362: ST_TO_ADDR
// bc_type = b_turret ;
13363: LD_ADDR_OWVAR 42
13367: PUSH
13368: LD_INT 33
13370: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13371: LD_ADDR_VAR 0 2
13375: PUSH
13376: LD_INT 86
13378: PPUSH
13379: LD_INT 34
13381: PPUSH
13382: LD_INT 2
13384: PPUSH
13385: CALL_OW 47
13389: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13390: LD_VAR 0 2
13394: PPUSH
13395: LD_INT 49
13397: PPUSH
13398: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13402: LD_INT 64
13404: PPUSH
13405: LD_INT 3
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 322
// end else
13415: GO 13553
// begin RuSolMinLevel = 8 ;
13417: LD_ADDR_EXP 29
13421: PUSH
13422: LD_INT 8
13424: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13425: LD_ADDR_EXP 30
13429: PUSH
13430: LD_INT 10
13432: ST_TO_ADDR
// uc_nation = 3 ;
13433: LD_ADDR_OWVAR 21
13437: PUSH
13438: LD_INT 3
13440: ST_TO_ADDR
// uc_side = 3 ;
13441: LD_ADDR_OWVAR 20
13445: PUSH
13446: LD_INT 3
13448: ST_TO_ADDR
// bc_level = 10 ;
13449: LD_ADDR_OWVAR 43
13453: PUSH
13454: LD_INT 10
13456: ST_TO_ADDR
// bc_type = b_turret ;
13457: LD_ADDR_OWVAR 42
13461: PUSH
13462: LD_INT 33
13464: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13465: LD_ADDR_VAR 0 2
13469: PUSH
13470: LD_INT 86
13472: PPUSH
13473: LD_INT 34
13475: PPUSH
13476: LD_INT 2
13478: PPUSH
13479: CALL_OW 47
13483: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13484: LD_VAR 0 2
13488: PPUSH
13489: LD_INT 49
13491: PPUSH
13492: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13496: LD_ADDR_VAR 0 2
13500: PUSH
13501: LD_INT 93
13503: PPUSH
13504: LD_INT 31
13506: PPUSH
13507: LD_INT 2
13509: PPUSH
13510: CALL_OW 47
13514: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13515: LD_VAR 0 2
13519: PPUSH
13520: LD_INT 49
13522: PPUSH
13523: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13527: LD_INT 64
13529: PPUSH
13530: LD_INT 3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13540: LD_INT 65
13542: PPUSH
13543: LD_INT 3
13545: PPUSH
13546: LD_INT 1
13548: PPUSH
13549: CALL_OW 322
// end ; end ;
13553: LD_VAR 0 1
13557: RET
// export function ShowQuery1 ; begin
13558: LD_INT 0
13560: PPUSH
// result := Query ( Q1 ) ;
13561: LD_ADDR_VAR 0 1
13565: PUSH
13566: LD_STRING Q1
13568: PPUSH
13569: CALL_OW 97
13573: ST_TO_ADDR
// end ;
13574: LD_VAR 0 1
13578: RET
// export function ShowQuery2 ; begin
13579: LD_INT 0
13581: PPUSH
// result := Query ( Q1a ) ;
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_STRING Q1a
13589: PPUSH
13590: CALL_OW 97
13594: ST_TO_ADDR
// end ;
13595: LD_VAR 0 1
13599: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
13600: LD_INT 0
13602: PPUSH
13603: PPUSH
13604: PPUSH
13605: PPUSH
// for i = 1 to count do
13606: LD_ADDR_VAR 0 8
13610: PUSH
13611: DOUBLE
13612: LD_INT 1
13614: DEC
13615: ST_TO_ADDR
13616: LD_VAR 0 6
13620: PUSH
13621: FOR_TO
13622: IFFALSE 13703
// begin uc_side = side ;
13624: LD_ADDR_OWVAR 20
13628: PUSH
13629: LD_VAR 0 1
13633: ST_TO_ADDR
// uc_nation = nation ;
13634: LD_ADDR_OWVAR 21
13638: PUSH
13639: LD_VAR 0 2
13643: ST_TO_ADDR
// hc_gallery =  ;
13644: LD_ADDR_OWVAR 33
13648: PUSH
13649: LD_STRING 
13651: ST_TO_ADDR
// hc_name =  ;
13652: LD_ADDR_OWVAR 26
13656: PUSH
13657: LD_STRING 
13659: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13660: LD_INT 0
13662: PPUSH
13663: LD_VAR 0 5
13667: PPUSH
13668: LD_VAR 0 4
13672: PPUSH
13673: CALL_OW 380
// un = CreateHuman ;
13677: LD_ADDR_VAR 0 10
13681: PUSH
13682: CALL_OW 44
13686: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13687: LD_VAR 0 10
13691: PPUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: CALL_OW 52
// end ;
13701: GO 13621
13703: POP
13704: POP
// end ;
13705: LD_VAR 0 7
13709: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
13710: LD_INT 0
13712: PPUSH
13713: PPUSH
13714: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13715: LD_ADDR_VAR 0 6
13719: PUSH
13720: LD_INT 48
13722: PUSH
13723: LD_INT 49
13725: PUSH
13726: LD_INT 50
13728: PUSH
13729: LD_INT 20
13731: PUSH
13732: LD_INT 1
13734: PUSH
13735: LD_INT 51
13737: PUSH
13738: LD_INT 52
13740: PUSH
13741: LD_INT 69
13743: PUSH
13744: LD_INT 39
13746: PUSH
13747: LD_INT 34
13749: PUSH
13750: LD_INT 40
13752: PUSH
13753: LD_INT 53
13755: PUSH
13756: LD_INT 71
13758: PUSH
13759: LD_INT 57
13761: PUSH
13762: LD_INT 58
13764: PUSH
13765: LD_INT 44
13767: PUSH
13768: LD_INT 32
13770: PUSH
13771: LD_INT 27
13773: PUSH
13774: LD_INT 23
13776: PUSH
13777: LD_INT 33
13779: PUSH
13780: LD_INT 59
13782: PUSH
13783: LD_INT 54
13785: PUSH
13786: LD_INT 55
13788: PUSH
13789: LD_INT 56
13791: PUSH
13792: LD_INT 63
13794: PUSH
13795: LD_INT 64
13797: PUSH
13798: LD_INT 65
13800: PUSH
13801: LD_INT 30
13803: PUSH
13804: LD_INT 31
13806: PUSH
13807: LD_INT 21
13809: PUSH
13810: LD_INT 22
13812: PUSH
13813: LD_INT 25
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: ST_TO_ADDR
// for i := 1 to list do
13850: LD_ADDR_VAR 0 5
13854: PUSH
13855: DOUBLE
13856: LD_INT 1
13858: DEC
13859: ST_TO_ADDR
13860: LD_VAR 0 6
13864: PUSH
13865: FOR_TO
13866: IFFALSE 13940
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13868: LD_VAR 0 6
13872: PUSH
13873: LD_VAR 0 5
13877: ARRAY
13878: PPUSH
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 321
13888: PUSH
13889: LD_INT 1
13891: EQUAL
13892: IFFALSE 13916
13894: PUSH
13895: LD_VAR 0 6
13899: PUSH
13900: LD_VAR 0 5
13904: ARRAY
13905: PPUSH
13906: LD_VAR 0 3
13910: PPUSH
13911: CALL_OW 482
13915: AND
13916: IFFALSE 13938
// AddComResearch ( lab , list [ i ] ) ;
13918: LD_VAR 0 2
13922: PPUSH
13923: LD_VAR 0 6
13927: PUSH
13928: LD_VAR 0 5
13932: ARRAY
13933: PPUSH
13934: CALL_OW 184
13938: GO 13865
13940: POP
13941: POP
// end ;
13942: LD_VAR 0 4
13946: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13947: LD_INT 0
13949: PPUSH
13950: PPUSH
13951: PPUSH
13952: PPUSH
13953: PPUSH
13954: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13955: LD_ADDR_VAR 0 8
13959: PUSH
13960: LD_VAR 0 2
13964: PPUSH
13965: CALL_OW 313
13969: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13970: LD_ADDR_VAR 0 9
13974: PUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_INT 22
13982: PUSH
13983: LD_VAR 0 1
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 25
13994: PUSH
13995: LD_INT 2
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 24
14004: PUSH
14005: LD_INT 750
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: LD_INT 54
14017: PUSH
14018: EMPTY
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 70
14035: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14036: LD_ADDR_VAR 0 6
14040: PUSH
14041: LD_VAR 0 3
14045: PPUSH
14046: LD_INT 22
14048: PUSH
14049: LD_VAR 0 1
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 21
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 3
14070: PUSH
14071: LD_INT 24
14073: PUSH
14074: LD_INT 1000
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: PPUSH
14093: CALL_OW 70
14097: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14098: LD_VAR 0 6
14102: NOT
14103: IFFALSE 14149
14105: PUSH
14106: LD_INT 22
14108: PUSH
14109: LD_VAR 0 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 25
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 24
14130: PUSH
14131: LD_INT 250
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: NOT
14148: AND
14149: IFFALSE 14153
// exit ;
14151: GO 14323
// if buildingsList and engineerOkInside then
14153: LD_VAR 0 6
14157: IFFALSE 14165
14159: PUSH
14160: LD_VAR 0 8
14164: AND
14165: IFFALSE 14176
// ComExitBuilding ( engineerOkInside ) ;
14167: LD_VAR 0 8
14171: PPUSH
14172: CALL_OW 122
// if buildingsList and engineerOkOutside then
14176: LD_VAR 0 6
14180: IFFALSE 14188
14182: PUSH
14183: LD_VAR 0 9
14187: AND
14188: IFFALSE 14208
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
14190: LD_VAR 0 9
14194: PPUSH
14195: LD_VAR 0 6
14199: PUSH
14200: LD_INT 1
14202: ARRAY
14203: PPUSH
14204: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
14208: LD_VAR 0 6
14212: PUSH
14213: LD_INT 0
14215: EQUAL
14216: IFFALSE 14228
14218: PUSH
14219: LD_VAR 0 4
14223: PUSH
14224: LD_INT 0
14226: EQUAL
14227: AND
14228: IFFALSE 14236
14230: PUSH
14231: LD_VAR 0 9
14235: AND
14236: IFFALSE 14252
// ComEnterUnit ( engineerOkOutside , depot ) ;
14238: LD_VAR 0 9
14242: PPUSH
14243: LD_VAR 0 2
14247: PPUSH
14248: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
14252: LD_VAR 0 9
14256: IFFALSE 14268
14258: PUSH
14259: LD_VAR 0 6
14263: PUSH
14264: LD_INT 0
14266: EQUAL
14267: AND
14268: IFFALSE 14276
14270: PUSH
14271: LD_VAR 0 4
14275: AND
14276: IFFALSE 14323
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14278: LD_VAR 0 9
14282: PPUSH
14283: LD_VAR 0 4
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: LD_VAR 0 4
14296: PUSH
14297: LD_INT 2
14299: ARRAY
14300: PPUSH
14301: LD_VAR 0 4
14305: PUSH
14306: LD_INT 3
14308: ARRAY
14309: PPUSH
14310: LD_VAR 0 4
14314: PUSH
14315: LD_INT 4
14317: ARRAY
14318: PPUSH
14319: CALL_OW 145
// end ;
14323: LD_VAR 0 5
14327: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14328: LD_INT 0
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14339: LD_ADDR_VAR 0 6
14343: PUSH
14344: LD_INT 22
14346: PUSH
14347: LD_VAR 0 1
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 25
14358: PUSH
14359: LD_INT 4
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 24
14368: PUSH
14369: LD_INT 251
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 69
14385: PUSH
14386: LD_EXP 27
14390: PUSH
14391: EMPTY
14392: LIST
14393: DIFF
14394: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14395: LD_ADDR_VAR 0 7
14399: PUSH
14400: LD_VAR 0 3
14404: PPUSH
14405: LD_INT 22
14407: PUSH
14408: LD_VAR 0 1
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 56
14419: PUSH
14420: EMPTY
14421: LIST
14422: PUSH
14423: LD_INT 25
14425: PUSH
14426: LD_INT 4
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 50
14435: PUSH
14436: EMPTY
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 70
14449: PUSH
14450: LD_EXP 27
14454: PUSH
14455: EMPTY
14456: LIST
14457: DIFF
14458: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14459: LD_ADDR_VAR 0 10
14463: PUSH
14464: LD_VAR 0 3
14468: PPUSH
14469: LD_INT 22
14471: PUSH
14472: LD_VAR 0 1
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 21
14483: PUSH
14484: LD_INT 1
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 3
14493: PUSH
14494: LD_INT 24
14496: PUSH
14497: LD_INT 750
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 70
14517: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14518: LD_ADDR_VAR 0 11
14522: PUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_INT 22
14530: PUSH
14531: LD_VAR 0 1
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 3
14552: PUSH
14553: LD_INT 24
14555: PUSH
14556: LD_INT 1000
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 70
14576: ST_TO_ADDR
// if damageUnits and sciList then
14577: LD_VAR 0 10
14581: IFFALSE 14589
14583: PUSH
14584: LD_VAR 0 6
14588: AND
14589: IFFALSE 14605
// ComMoveToArea ( damageUnits , healArea ) ;
14591: LD_VAR 0 10
14595: PPUSH
14596: LD_VAR 0 2
14600: PPUSH
14601: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
14605: LD_VAR 0 11
14609: IFFALSE 14617
14611: PUSH
14612: LD_VAR 0 6
14616: AND
14617: IFFALSE 14629
14619: PUSH
14620: LD_VAR 0 7
14624: PUSH
14625: LD_INT 0
14627: EQUAL
14628: AND
14629: IFFALSE 14675
// for i in buildings do
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 4
14640: PUSH
14641: FOR_IN
14642: IFFALSE 14673
// begin if UnitsInside ( i ) then
14644: LD_VAR 0 8
14648: PPUSH
14649: CALL_OW 313
14653: IFFALSE 14671
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
14655: LD_VAR 0 8
14659: PPUSH
14660: CALL_OW 313
14664: PPUSH
14665: CALL_OW 122
// break ;
14669: GO 14673
// end ; end ;
14671: GO 14641
14673: POP
14674: POP
// if unitsToHeal and sciListOutside then
14675: LD_VAR 0 11
14679: IFFALSE 14687
14681: PUSH
14682: LD_VAR 0 7
14686: AND
14687: IFFALSE 14707
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
14689: LD_VAR 0 7
14693: PPUSH
14694: LD_VAR 0 11
14698: PUSH
14699: LD_INT 1
14701: ARRAY
14702: PPUSH
14703: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
14707: LD_VAR 0 10
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: IFFALSE 14727
14717: PUSH
14718: LD_VAR 0 11
14722: PUSH
14723: LD_INT 0
14725: EQUAL
14726: AND
14727: IFFALSE 14735
14729: PUSH
14730: LD_VAR 0 7
14734: AND
14735: IFFALSE 14803
// begin tmp := buildings ;
14737: LD_ADDR_VAR 0 12
14741: PUSH
14742: LD_VAR 0 4
14746: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
14747: LD_ADDR_VAR 0 13
14751: PUSH
14752: LD_INT 1
14754: PPUSH
14755: LD_VAR 0 12
14759: PPUSH
14760: CALL_OW 12
14764: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14765: LD_VAR 0 7
14769: PPUSH
14770: LD_INT 3
14772: PUSH
14773: LD_INT 60
14775: PUSH
14776: EMPTY
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 72
14787: PPUSH
14788: LD_VAR 0 12
14792: PUSH
14793: LD_VAR 0 13
14797: ARRAY
14798: PPUSH
14799: CALL_OW 120
// end ; end ;
14803: LD_VAR 0 5
14807: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14808: LD_INT 0
14810: PPUSH
14811: PPUSH
14812: PPUSH
14813: PPUSH
14814: PPUSH
14815: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14816: LD_ADDR_VAR 0 7
14820: PUSH
14821: LD_VAR 0 2
14825: PPUSH
14826: LD_INT 22
14828: PUSH
14829: LD_VAR 0 1
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 21
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 34
14850: PUSH
14851: LD_INT 52
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 70
14867: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14868: LD_ADDR_VAR 0 8
14872: PUSH
14873: LD_VAR 0 2
14877: PPUSH
14878: LD_INT 22
14880: PUSH
14881: LD_VAR 0 1
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 21
14892: PUSH
14893: LD_INT 3
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 3
14902: PUSH
14903: LD_INT 24
14905: PUSH
14906: LD_INT 1000
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: PPUSH
14925: CALL_OW 70
14929: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14930: LD_VAR 0 8
14934: PUSH
14935: LD_INT 0
14937: GREATER
14938: IFFALSE 14965
14940: PUSH
14941: LD_VAR 0 7
14945: PPUSH
14946: LD_INT 24
14948: PUSH
14949: LD_INT 750
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PPUSH
14956: CALL_OW 72
14960: PUSH
14961: LD_INT 0
14963: GREATER
14964: AND
14965: IFFALSE 14985
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14967: LD_VAR 0 7
14971: PPUSH
14972: LD_VAR 0 8
14976: PUSH
14977: LD_INT 1
14979: ARRAY
14980: PPUSH
14981: CALL_OW 130
// end ;
14985: LD_VAR 0 3
14989: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14990: LD_INT 0
14992: PPUSH
14993: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14994: LD_INT 22
14996: PUSH
14997: LD_VAR 0 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 21
15008: PUSH
15009: LD_INT 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: PUSH
15025: LD_INT 18
15027: PPUSH
15028: LD_INT 22
15030: PUSH
15031: LD_VAR 0 1
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 21
15042: PUSH
15043: LD_INT 2
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PPUSH
15054: CALL_OW 70
15058: PUSH
15059: LD_VAR 0 3
15063: LESSEQUAL
15064: DIFF
15065: IFFALSE 15132
// for i := 1 to vehCount do
15067: LD_ADDR_VAR 0 9
15071: PUSH
15072: DOUBLE
15073: LD_INT 1
15075: DEC
15076: ST_TO_ADDR
15077: LD_VAR 0 3
15081: PUSH
15082: FOR_TO
15083: IFFALSE 15130
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15085: LD_VAR 0 2
15089: PPUSH
15090: LD_VAR 0 7
15094: PPUSH
15095: LD_VAR 0 5
15099: PPUSH
15100: LD_VAR 0 6
15104: PPUSH
15105: LD_VAR 0 4
15109: PUSH
15110: LD_INT 1
15112: PPUSH
15113: LD_VAR 0 4
15117: PPUSH
15118: CALL_OW 12
15122: ARRAY
15123: PPUSH
15124: CALL_OW 185
15128: GO 15082
15130: POP
15131: POP
// end ;
15132: LD_VAR 0 8
15136: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15137: LD_INT 0
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15145: LD_ADDR_VAR 0 6
15149: PUSH
15150: LD_INT 22
15152: PUSH
15153: LD_VAR 0 1
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 25
15164: PUSH
15165: LD_INT 9
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15181: LD_ADDR_VAR 0 7
15185: PUSH
15186: LD_INT 81
15188: PUSH
15189: LD_VAR 0 1
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 3
15200: PUSH
15201: LD_INT 21
15203: PUSH
15204: LD_INT 3
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15224: LD_ADDR_VAR 0 4
15228: PUSH
15229: LD_INT 1
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: CALL_OW 12
15239: ST_TO_ADDR
// for i := 1 to list do
15240: LD_ADDR_VAR 0 5
15244: PUSH
15245: DOUBLE
15246: LD_INT 1
15248: DEC
15249: ST_TO_ADDR
15250: LD_VAR 0 6
15254: PUSH
15255: FOR_TO
15256: IFFALSE 15458
// for ta in filter do
15258: LD_ADDR_VAR 0 3
15262: PUSH
15263: LD_VAR 0 7
15267: PUSH
15268: FOR_IN
15269: IFFALSE 15454
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15271: LD_VAR 0 6
15275: PUSH
15276: LD_VAR 0 5
15280: ARRAY
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: CALL_OW 296
15291: PUSH
15292: LD_INT 15
15294: LESSEQUAL
15295: IFFALSE 15452
// begin case c of 1 :
15297: LD_VAR 0 4
15301: PUSH
15302: LD_INT 1
15304: DOUBLE
15305: EQUAL
15306: IFTRUE 15310
15308: GO 15348
15310: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15311: LD_VAR 0 6
15315: PUSH
15316: LD_VAR 0 5
15320: ARRAY
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL_OW 250
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: CALL_OW 251
15341: PPUSH
15342: CALL_OW 154
15346: GO 15452
15348: LD_INT 2
15350: DOUBLE
15351: EQUAL
15352: IFTRUE 15356
15354: GO 15420
15356: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15357: LD_VAR 0 6
15361: PUSH
15362: LD_VAR 0 5
15366: ARRAY
15367: PPUSH
15368: LD_VAR 0 3
15372: PPUSH
15373: CALL_OW 250
15377: PUSH
15378: LD_INT 1
15380: NEG
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: CALL_OW 12
15389: PLUS
15390: PPUSH
15391: LD_VAR 0 3
15395: PPUSH
15396: CALL_OW 251
15400: PUSH
15401: LD_INT 1
15403: NEG
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 12
15412: PLUS
15413: PPUSH
15414: CALL_OW 153
15418: GO 15452
15420: LD_INT 3
15422: DOUBLE
15423: EQUAL
15424: IFTRUE 15428
15426: GO 15451
15428: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15429: LD_VAR 0 6
15433: PUSH
15434: LD_VAR 0 5
15438: ARRAY
15439: PPUSH
15440: LD_VAR 0 3
15444: PPUSH
15445: CALL_OW 115
15449: GO 15452
15451: POP
// end ; end ;
15452: GO 15268
15454: POP
15455: POP
15456: GO 15255
15458: POP
15459: POP
// end ;
15460: LD_VAR 0 2
15464: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15465: LD_INT 0
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
// r := 100 ;
15471: LD_ADDR_VAR 0 5
15475: PUSH
15476: LD_INT 100
15478: ST_TO_ADDR
// x := 0 ;
15479: LD_ADDR_VAR 0 6
15483: PUSH
15484: LD_INT 0
15486: ST_TO_ADDR
// while ( x < n ) do
15487: LD_VAR 0 6
15491: PUSH
15492: LD_VAR 0 2
15496: LESS
15497: IFFALSE 15760
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15499: LD_ADDR_VAR 0 4
15503: PUSH
15504: DOUBLE
15505: LD_INT 1
15507: DEC
15508: ST_TO_ADDR
15509: LD_VAR 0 1
15513: PPUSH
15514: LD_INT 0
15516: PPUSH
15517: CALL_OW 517
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PUSH
15526: FOR_TO
15527: IFFALSE 15756
// begin if r > 50 then
15529: LD_VAR 0 5
15533: PUSH
15534: LD_INT 50
15536: GREATER
15537: IFFALSE 15740
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15539: LD_VAR 0 1
15543: PPUSH
15544: LD_INT 0
15546: PPUSH
15547: CALL_OW 517
15551: PUSH
15552: LD_INT 1
15554: ARRAY
15555: PUSH
15556: LD_VAR 0 4
15560: ARRAY
15561: PPUSH
15562: LD_VAR 0 1
15566: PPUSH
15567: LD_INT 0
15569: PPUSH
15570: CALL_OW 517
15574: PUSH
15575: LD_INT 2
15577: ARRAY
15578: PUSH
15579: LD_VAR 0 4
15583: ARRAY
15584: PPUSH
15585: CALL_OW 458
15589: NOT
15590: IFFALSE 15738
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15592: LD_VAR 0 1
15596: PPUSH
15597: LD_INT 0
15599: PPUSH
15600: CALL_OW 517
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: PUSH
15609: LD_VAR 0 4
15613: ARRAY
15614: PPUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: LD_INT 0
15622: PPUSH
15623: CALL_OW 517
15627: PUSH
15628: LD_INT 2
15630: ARRAY
15631: PUSH
15632: LD_VAR 0 4
15636: ARRAY
15637: PPUSH
15638: LD_INT 8
15640: PPUSH
15641: LD_INT 0
15643: PPUSH
15644: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15648: LD_ADDR_EXP 37
15652: PUSH
15653: LD_EXP 37
15657: PPUSH
15658: LD_INT 1
15660: PPUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: LD_INT 0
15668: PPUSH
15669: CALL_OW 517
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PUSH
15678: LD_VAR 0 4
15682: ARRAY
15683: PUSH
15684: LD_VAR 0 1
15688: PPUSH
15689: LD_INT 0
15691: PPUSH
15692: CALL_OW 517
15696: PUSH
15697: LD_INT 2
15699: ARRAY
15700: PUSH
15701: LD_VAR 0 4
15705: ARRAY
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 2
15715: ST_TO_ADDR
// r := 0 ;
15716: LD_ADDR_VAR 0 5
15720: PUSH
15721: LD_INT 0
15723: ST_TO_ADDR
// x := x + 1 ;
15724: LD_ADDR_VAR 0 6
15728: PUSH
15729: LD_VAR 0 6
15733: PUSH
15734: LD_INT 1
15736: PLUS
15737: ST_TO_ADDR
// end end else
15738: GO 15754
// r := r + 35 ;
15740: LD_ADDR_VAR 0 5
15744: PUSH
15745: LD_VAR 0 5
15749: PUSH
15750: LD_INT 35
15752: PLUS
15753: ST_TO_ADDR
// end end ;
15754: GO 15526
15756: POP
15757: POP
15758: GO 15487
15760: LD_VAR 0 3
15764: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
// tmp := [ ] ;
15772: LD_ADDR_VAR 0 6
15776: PUSH
15777: EMPTY
15778: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
15779: LD_ADDR_VAR 0 7
15783: PUSH
15784: LD_INT 22
15786: PUSH
15787: LD_VAR 0 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 30
15798: PUSH
15799: LD_INT 32
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PPUSH
15810: CALL_OW 69
15814: ST_TO_ADDR
// if bunkers then
15815: LD_VAR 0 7
15819: IFFALSE 15889
// for i in bunkers do
15821: LD_ADDR_VAR 0 4
15825: PUSH
15826: LD_VAR 0 7
15830: PUSH
15831: FOR_IN
15832: IFFALSE 15887
// for j in UnitsInside ( i ) do
15834: LD_ADDR_VAR 0 5
15838: PUSH
15839: LD_VAR 0 4
15843: PPUSH
15844: CALL_OW 313
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15883
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15852: LD_ADDR_VAR 0 6
15856: PUSH
15857: LD_VAR 0 6
15861: PPUSH
15862: LD_VAR 0 6
15866: PUSH
15867: LD_INT 1
15869: PLUS
15870: PPUSH
15871: LD_VAR 0 5
15875: PPUSH
15876: CALL_OW 1
15880: ST_TO_ADDR
15881: GO 15849
15883: POP
15884: POP
15885: GO 15831
15887: POP
15888: POP
// if tmp then
15889: LD_VAR 0 6
15893: IFFALSE 15933
// begin ComExitBuilding ( tmp ) ;
15895: LD_VAR 0 6
15899: PPUSH
15900: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15904: LD_VAR 0 6
15908: PPUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 250
15918: PPUSH
15919: LD_VAR 0 2
15923: PPUSH
15924: CALL_OW 251
15928: PPUSH
15929: CALL_OW 174
// end ; end ;
15933: LD_VAR 0 3
15937: RET
// export function CreateNature ; var i , un ; begin
15938: LD_INT 0
15940: PPUSH
15941: PPUSH
15942: PPUSH
// uc_side := 0 ;
15943: LD_ADDR_OWVAR 20
15947: PUSH
15948: LD_INT 0
15950: ST_TO_ADDR
// uc_nation := 0 ;
15951: LD_ADDR_OWVAR 21
15955: PUSH
15956: LD_INT 0
15958: ST_TO_ADDR
// InitHc ;
15959: CALL_OW 19
// hc_class := class_fish ;
15963: LD_ADDR_OWVAR 28
15967: PUSH
15968: LD_INT 20
15970: ST_TO_ADDR
// for i := 1 to 6 do
15971: LD_ADDR_VAR 0 2
15975: PUSH
15976: DOUBLE
15977: LD_INT 1
15979: DEC
15980: ST_TO_ADDR
15981: LD_INT 6
15983: PUSH
15984: FOR_TO
15985: IFFALSE 16004
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15987: CALL_OW 44
15991: PPUSH
15992: LD_INT 22
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 49
16002: GO 15984
16004: POP
16005: POP
// for i := 1 to Difficulty + 2 do
16006: LD_ADDR_VAR 0 2
16010: PUSH
16011: DOUBLE
16012: LD_INT 1
16014: DEC
16015: ST_TO_ADDR
16016: LD_OWVAR 67
16020: PUSH
16021: LD_INT 2
16023: PLUS
16024: PUSH
16025: FOR_TO
16026: IFFALSE 16135
// begin hc_sex := sex_male ;
16028: LD_ADDR_OWVAR 27
16032: PUSH
16033: LD_INT 1
16035: ST_TO_ADDR
// uc_side := 0 ;
16036: LD_ADDR_OWVAR 20
16040: PUSH
16041: LD_INT 0
16043: ST_TO_ADDR
// uc_nation := nation_nature ;
16044: LD_ADDR_OWVAR 21
16048: PUSH
16049: LD_INT 0
16051: ST_TO_ADDR
// hc_class := class_tiger ;
16052: LD_ADDR_OWVAR 28
16056: PUSH
16057: LD_INT 14
16059: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16060: LD_ADDR_OWVAR 31
16064: PUSH
16065: LD_EXP 30
16069: PUSH
16070: LD_INT 0
16072: PUSH
16073: LD_INT 0
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
16085: LD_ADDR_OWVAR 35
16089: PUSH
16090: LD_INT 5
16092: NEG
16093: PPUSH
16094: LD_INT 5
16096: PPUSH
16097: CALL_OW 12
16101: PUSH
16102: LD_OWVAR 67
16106: MUL
16107: ST_TO_ADDR
// un := CreateHuman ;
16108: LD_ADDR_VAR 0 3
16112: PUSH
16113: CALL_OW 44
16117: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16118: LD_VAR 0 3
16122: PPUSH
16123: LD_INT 23
16125: PPUSH
16126: LD_INT 0
16128: PPUSH
16129: CALL_OW 49
// end ;
16133: GO 16025
16135: POP
16136: POP
// for i := 1 to rand ( 3 , 4 ) do
16137: LD_ADDR_VAR 0 2
16141: PUSH
16142: DOUBLE
16143: LD_INT 1
16145: DEC
16146: ST_TO_ADDR
16147: LD_INT 3
16149: PPUSH
16150: LD_INT 4
16152: PPUSH
16153: CALL_OW 12
16157: PUSH
16158: FOR_TO
16159: IFFALSE 16251
// begin hc_sex := sex_male ;
16161: LD_ADDR_OWVAR 27
16165: PUSH
16166: LD_INT 1
16168: ST_TO_ADDR
// uc_side := 0 ;
16169: LD_ADDR_OWVAR 20
16173: PUSH
16174: LD_INT 0
16176: ST_TO_ADDR
// uc_nation := nation_nature ;
16177: LD_ADDR_OWVAR 21
16181: PUSH
16182: LD_INT 0
16184: ST_TO_ADDR
// hc_class := 18 ;
16185: LD_ADDR_OWVAR 28
16189: PUSH
16190: LD_INT 18
16192: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
16193: LD_ADDR_OWVAR 31
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: ST_TO_ADDR
// hc_agressivity := 0 ;
16216: LD_ADDR_OWVAR 35
16220: PUSH
16221: LD_INT 0
16223: ST_TO_ADDR
// un := CreateHuman ;
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: CALL_OW 44
16233: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 23
16241: PPUSH
16242: LD_INT 0
16244: PPUSH
16245: CALL_OW 49
// end ;
16249: GO 16158
16251: POP
16252: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
16253: LD_ADDR_VAR 0 2
16257: PUSH
16258: DOUBLE
16259: LD_INT 1
16261: DEC
16262: ST_TO_ADDR
16263: LD_INT 4
16265: PUSH
16266: LD_INT 3
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: LD_INT 3
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: PUSH
16281: LD_OWVAR 67
16285: ARRAY
16286: PUSH
16287: FOR_TO
16288: IFFALSE 16397
// begin hc_sex := sex_male ;
16290: LD_ADDR_OWVAR 27
16294: PUSH
16295: LD_INT 1
16297: ST_TO_ADDR
// uc_side := 0 ;
16298: LD_ADDR_OWVAR 20
16302: PUSH
16303: LD_INT 0
16305: ST_TO_ADDR
// uc_nation := nation_nature ;
16306: LD_ADDR_OWVAR 21
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// hc_class := class_apeman ;
16314: LD_ADDR_OWVAR 28
16318: PUSH
16319: LD_INT 12
16321: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
16322: LD_ADDR_OWVAR 31
16326: PUSH
16327: LD_INT 0
16329: PPUSH
16330: LD_INT 2
16332: PPUSH
16333: CALL_OW 12
16337: PUSH
16338: LD_INT 0
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
16353: LD_ADDR_OWVAR 35
16357: PUSH
16358: LD_INT 10
16360: NEG
16361: PPUSH
16362: LD_INT 10
16364: PPUSH
16365: CALL_OW 12
16369: ST_TO_ADDR
// un := CreateHuman ;
16370: LD_ADDR_VAR 0 3
16374: PUSH
16375: CALL_OW 44
16379: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
16380: LD_VAR 0 3
16384: PPUSH
16385: LD_INT 26
16387: PPUSH
16388: LD_INT 0
16390: PPUSH
16391: CALL_OW 49
// end ;
16395: GO 16287
16397: POP
16398: POP
// end ; end_of_file
16399: LD_VAR 0 1
16403: RET
// on UnitDestroyed ( unit ) do var i ;
16404: LD_INT 0
16406: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL 36041 0 1
// if unit = JMM then
16416: LD_VAR 0 1
16420: PUSH
16421: LD_EXP 1
16425: EQUAL
16426: IFFALSE 16435
// YouLost ( JMM ) ;
16428: LD_STRING JMM
16430: PPUSH
16431: CALL_OW 104
// if unit in russianTanks then
16435: LD_VAR 0 1
16439: PUSH
16440: LD_EXP 32
16444: IN
16445: IFFALSE 16463
// russianTanks := russianTanks diff unit ;
16447: LD_ADDR_EXP 32
16451: PUSH
16452: LD_EXP 32
16456: PUSH
16457: LD_VAR 0 1
16461: DIFF
16462: ST_TO_ADDR
// if unit in russianTimeLapsers then
16463: LD_VAR 0 1
16467: PUSH
16468: LD_EXP 33
16472: IN
16473: IFFALSE 16491
// russianTimeLapsers := russianTimeLapsers diff unit ;
16475: LD_ADDR_EXP 33
16479: PUSH
16480: LD_EXP 33
16484: PUSH
16485: LD_VAR 0 1
16489: DIFF
16490: ST_TO_ADDR
// if unit in RuScientists then
16491: LD_VAR 0 1
16495: PUSH
16496: LD_EXP 27
16500: IN
16501: IFFALSE 16533
// begin RuScientists := RuScientists diff unit ;
16503: LD_ADDR_EXP 27
16507: PUSH
16508: LD_EXP 27
16512: PUSH
16513: LD_VAR 0 1
16517: DIFF
16518: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
16519: LD_ADDR_EXP 28
16523: PUSH
16524: LD_EXP 28
16528: PUSH
16529: LD_INT 1
16531: PLUS
16532: ST_TO_ADDR
// end ; end ;
16533: PPOPN 2
16535: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16536: LD_VAR 0 3
16540: PPUSH
16541: CALL_OW 264
16545: PUSH
16546: LD_INT 9
16548: EQUAL
16549: IFFALSE 16565
// laserCounterDestroy := laserCounterDestroy + 1 ;
16551: LD_ADDR_EXP 43
16555: PUSH
16556: LD_EXP 43
16560: PUSH
16561: LD_INT 1
16563: PLUS
16564: ST_TO_ADDR
// end ;
16565: PPOPN 3
16567: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 22
16575: PUSH
16576: LD_INT 6
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PPUSH
16583: CALL_OW 69
16587: IN
16588: IFFALSE 16643
// begin if GetType ( human ) = unit_vehicle then
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL_OW 247
16599: PUSH
16600: LD_INT 2
16602: EQUAL
16603: IFFALSE 16620
// human := IsDrivenBy ( human ) ;
16605: LD_ADDR_VAR 0 2
16609: PUSH
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 311
16619: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
16620: LD_VAR 0 2
16624: PPUSH
16625: LD_VAR 0 2
16629: PPUSH
16630: CALL_OW 110
16634: PUSH
16635: LD_INT 10
16637: PLUS
16638: PPUSH
16639: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
16643: LD_VAR 0 2
16647: PPUSH
16648: CALL_OW 255
16652: PUSH
16653: LD_INT 1
16655: EQUAL
16656: IFFALSE 16668
16658: PUSH
16659: LD_EXP 40
16663: PUSH
16664: LD_INT 0
16666: EQUAL
16667: AND
16668: IFFALSE 16780
// begin eventVar1 = 1 ;
16670: LD_ADDR_EXP 40
16674: PUSH
16675: LD_INT 1
16677: ST_TO_ADDR
// teleportExplored = 1 ;
16678: LD_ADDR_EXP 26
16682: PUSH
16683: LD_INT 1
16685: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16686: LD_STRING M2a
16688: PPUSH
16689: CALL_OW 337
// wait ( 0 0$2 ) ;
16693: LD_INT 70
16695: PPUSH
16696: CALL_OW 67
// DialogueOn ;
16700: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16704: LD_INT 22
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PPUSH
16733: LD_STRING DT3a-Sol1-1
16735: PPUSH
16736: LD_STRING DT3a-FSol1-1
16738: PPUSH
16739: CALL 13095 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16743: LD_EXP 1
16747: PPUSH
16748: LD_STRING DT3a-JMM-1
16750: PPUSH
16751: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16755: LD_VAR 0 2
16759: PPUSH
16760: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16764: LD_EXP 1
16768: PPUSH
16769: LD_STRING DT3a-JMM-1a
16771: PPUSH
16772: CALL_OW 88
// DialogueOff ;
16776: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16780: LD_VAR 0 1
16784: PUSH
16785: LD_INT 10
16787: EQUAL
16788: IFFALSE 16805
16790: PUSH
16791: LD_VAR 0 2
16795: PPUSH
16796: CALL_OW 247
16800: PUSH
16801: LD_INT 2
16803: EQUAL
16804: AND
16805: IFFALSE 16822
16807: PUSH
16808: LD_VAR 0 2
16812: PPUSH
16813: CALL_OW 255
16817: PUSH
16818: LD_INT 3
16820: EQUAL
16821: AND
16822: IFFALSE 16888
// begin if vehicleTeleported = 0 then
16824: LD_EXP 21
16828: PUSH
16829: LD_INT 0
16831: EQUAL
16832: IFFALSE 16849
// begin wait ( 0 0$03 ) ;
16834: LD_INT 105
16836: PPUSH
16837: CALL_OW 67
// vehicleTeleported := 1 ;
16841: LD_ADDR_EXP 21
16845: PUSH
16846: LD_INT 1
16848: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16849: LD_EXP 21
16853: PUSH
16854: LD_INT 2
16856: EQUAL
16857: IFFALSE 16874
// begin wait ( 0 0$03 ) ;
16859: LD_INT 105
16861: PPUSH
16862: CALL_OW 67
// vehicleTeleported := 3 ;
16866: LD_ADDR_EXP 21
16870: PUSH
16871: LD_INT 3
16873: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16874: LD_ADDR_EXP 22
16878: PUSH
16879: LD_EXP 22
16883: PUSH
16884: LD_INT 1
16886: PLUS
16887: ST_TO_ADDR
// end ; end ;
16888: PPOPN 2
16890: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_VAR 0 2
16900: PPUSH
16901: CALL 36099 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 264
16914: PUSH
16915: LD_INT 7
16917: EQUAL
16918: IFFALSE 16928
// rocketBuilded := true ;
16920: LD_ADDR_EXP 44
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 255
16937: PUSH
16938: LD_INT 3
16940: NONEQUAL
16941: IFFALSE 16945
// exit ;
16943: GO 17062
// if factory in [ ru_fact , rufab2 ] then
16945: LD_VAR 0 2
16949: PUSH
16950: LD_INT 21
16952: PUSH
16953: LD_INT 112
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: IN
16960: IFFALSE 17062
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 264
16971: PUSH
16972: LD_INT 49
16974: EQUAL
16975: IFFALSE 17011
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16977: LD_ADDR_EXP 33
16981: PUSH
16982: LD_EXP 33
16986: PPUSH
16987: LD_VAR 0 1
16991: PPUSH
16992: CALL 80400 0 2
16996: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_INT 137
17004: PPUSH
17005: CALL_OW 120
// end else
17009: GO 17062
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 264
17020: PUSH
17021: LD_INT 51
17023: PUSH
17024: LD_INT 89
17026: PUSH
17027: LD_INT 52
17029: PUSH
17030: LD_INT 53
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: IN
17039: NOT
17040: IFFALSE 17062
// begin russianTanks := Join ( russianTanks , vehicle ) ;
17042: LD_ADDR_EXP 32
17046: PUSH
17047: LD_EXP 32
17051: PPUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL 80400 0 2
17061: ST_TO_ADDR
// end ; end ; end ;
17062: PPOPN 2
17064: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17065: LD_INT 0
17067: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17068: LD_VAR 0 2
17072: PPUSH
17073: CALL_OW 255
17077: PUSH
17078: LD_INT 3
17080: EQUAL
17081: IFFALSE 17098
17083: PUSH
17084: LD_VAR 0 2
17088: PPUSH
17089: CALL_OW 257
17093: PUSH
17094: LD_INT 3
17096: EQUAL
17097: AND
17098: IFFALSE 17113
17100: PUSH
17101: LD_INT 21
17103: PPUSH
17104: CALL_OW 255
17108: PUSH
17109: LD_INT 3
17111: EQUAL
17112: AND
17113: IFFALSE 17124
17115: PUSH
17116: LD_INT 21
17118: PPUSH
17119: CALL_OW 302
17123: AND
17124: IFFALSE 17138
// ComEnterUnit ( human , ru_fact ) ;
17126: LD_VAR 0 2
17130: PPUSH
17131: LD_INT 21
17133: PPUSH
17134: CALL_OW 120
// end ;
17138: PPOPN 3
17140: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL 36083 0 1
// end ;
17150: PPOPN 1
17152: END
// on SailEvent ( event ) do begin if event = 1 then
17153: LD_VAR 0 1
17157: PUSH
17158: LD_INT 1
17160: EQUAL
17161: IFFALSE 17167
// PrepareRussian ;
17163: CALL 3601 0 0
// end ; end_of_file
17167: PPOPN 1
17169: END
// every 0 0$1 trigger ruAI = 1 do
17170: LD_EXP 34
17174: PUSH
17175: LD_INT 1
17177: EQUAL
17178: IFFALSE 17290
17180: GO 17182
17182: DISABLE
// begin enable ;
17183: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17184: LD_INT 3
17186: PPUSH
17187: LD_INT 6
17189: PPUSH
17190: LD_INT 9
17192: PPUSH
17193: LD_EXP 31
17197: PPUSH
17198: CALL 13947 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17202: LD_INT 3
17204: PPUSH
17205: LD_INT 4
17207: PPUSH
17208: LD_INT 10
17210: PPUSH
17211: LD_EXP 31
17215: PPUSH
17216: CALL 13947 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17220: LD_INT 3
17222: PPUSH
17223: LD_INT 9
17225: PPUSH
17226: CALL 14808 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17230: LD_INT 3
17232: PPUSH
17233: LD_INT 10
17235: PPUSH
17236: CALL 14808 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17240: LD_INT 3
17242: PPUSH
17243: LD_INT 16
17245: PPUSH
17246: LD_INT 9
17248: PPUSH
17249: LD_INT 91
17251: PPUSH
17252: CALL 14328 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17256: LD_INT 3
17258: PPUSH
17259: LD_INT 17
17261: PPUSH
17262: LD_INT 10
17264: PPUSH
17265: LD_INT 47
17267: PUSH
17268: LD_INT 129
17270: PUSH
17271: LD_INT 135
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL 14328 0 4
// IntBazooka ( 3 ) ;
17283: LD_INT 3
17285: PPUSH
17286: CALL 15137 0 1
// end ;
17290: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
17291: LD_EXP 32
17295: PUSH
17296: LD_INT 3
17298: PUSH
17299: LD_INT 4
17301: PUSH
17302: LD_INT 5
17304: PUSH
17305: LD_INT 6
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: LD_OWVAR 67
17318: ARRAY
17319: GREATEREQUAL
17320: IFFALSE 17694
17322: GO 17324
17324: DISABLE
17325: LD_INT 0
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
// begin enable ;
17331: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17332: LD_ADDR_VAR 0 2
17336: PUSH
17337: LD_EXP 32
17341: PUSH
17342: LD_EXP 33
17346: UNION
17347: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17348: LD_ADDR_EXP 32
17352: PUSH
17353: LD_EXP 32
17357: PUSH
17358: LD_VAR 0 2
17362: DIFF
17363: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17364: LD_ADDR_EXP 33
17368: PUSH
17369: LD_EXP 33
17373: PUSH
17374: LD_VAR 0 2
17378: DIFF
17379: ST_TO_ADDR
// if vehicleTeleported >= 4 then
17380: LD_EXP 21
17384: PUSH
17385: LD_INT 4
17387: GREATEREQUAL
17388: IFFALSE 17406
// attackTactic := rand ( 1 , 2 ) ;
17390: LD_ADDR_EXP 36
17394: PUSH
17395: LD_INT 1
17397: PPUSH
17398: LD_INT 2
17400: PPUSH
17401: CALL_OW 12
17405: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
17406: LD_ADDR_VAR 0 4
17410: PUSH
17411: LD_INT 93
17413: PUSH
17414: LD_INT 77
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 107
17423: PUSH
17424: LD_INT 99
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 123
17433: PUSH
17434: LD_INT 112
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 140
17443: PUSH
17444: LD_INT 112
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: ST_TO_ADDR
// if attackTactic < 2 then
17457: LD_EXP 36
17461: PUSH
17462: LD_INT 2
17464: LESS
17465: IFFALSE 17496
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
17467: LD_ADDR_VAR 0 4
17471: PUSH
17472: LD_INT 131
17474: PUSH
17475: LD_INT 136
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 140
17484: PUSH
17485: LD_INT 112
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17496: LD_INT 10
17498: PPUSH
17499: CALL_OW 302
17503: IFFALSE 17621
// begin for i in tmp do
17505: LD_ADDR_VAR 0 1
17509: PUSH
17510: LD_VAR 0 2
17514: PUSH
17515: FOR_IN
17516: IFFALSE 17559
// if attackTactic < 2 then
17518: LD_EXP 36
17522: PUSH
17523: LD_INT 2
17525: LESS
17526: IFFALSE 17542
// ComEnterUnit ( i , ruteleprt ) else
17528: LD_VAR 0 1
17532: PPUSH
17533: LD_INT 10
17535: PPUSH
17536: CALL_OW 120
17540: GO 17557
// ComMoveXY ( i , 88 , 69 ) ;
17542: LD_VAR 0 1
17546: PPUSH
17547: LD_INT 88
17549: PPUSH
17550: LD_INT 69
17552: PPUSH
17553: CALL_OW 111
17557: GO 17515
17559: POP
17560: POP
// p := 0 ;
17561: LD_ADDR_VAR 0 3
17565: PUSH
17566: LD_INT 0
17568: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
17569: LD_INT 70
17571: PPUSH
17572: CALL_OW 67
// p := Inc ( p ) ;
17576: LD_ADDR_VAR 0 3
17580: PUSH
17581: LD_VAR 0 3
17585: PPUSH
17586: CALL 81773 0 1
17590: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
17591: LD_VAR 0 2
17595: PPUSH
17596: LD_INT 60
17598: PUSH
17599: EMPTY
17600: LIST
17601: PPUSH
17602: CALL_OW 72
17606: NOT
17607: IFTRUE 17619
17609: PUSH
17610: LD_VAR 0 3
17614: PUSH
17615: LD_INT 30
17617: GREATER
17618: OR
17619: IFFALSE 17569
// end ; repeat wait ( 0 0$1 ) ;
17621: LD_INT 35
17623: PPUSH
17624: CALL_OW 67
// for i in tmp do
17628: LD_ADDR_VAR 0 1
17632: PUSH
17633: LD_VAR 0 2
17637: PUSH
17638: FOR_IN
17639: IFFALSE 17671
// if not IsOk ( i ) then
17641: LD_VAR 0 1
17645: PPUSH
17646: CALL_OW 302
17650: NOT
17651: IFFALSE 17669
// tmp := tmp diff i ;
17653: LD_ADDR_VAR 0 2
17657: PUSH
17658: LD_VAR 0 2
17662: PUSH
17663: LD_VAR 0 1
17667: DIFF
17668: ST_TO_ADDR
17669: GO 17638
17671: POP
17672: POP
// AgressiveMove ( tmp , path ) ;
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 4
17682: PPUSH
17683: CALL 83166 0 2
// until not tmp ;
17687: LD_VAR 0 2
17691: NOT
17692: IFFALSE 17621
// end ;
17694: PPOPN 4
17696: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17697: LD_INT 4
17699: PPUSH
17700: CALL_OW 303
17704: IFFALSE 17719
17706: GO 17708
17708: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17709: LD_INT 3
17711: PPUSH
17712: LD_INT 4
17714: PPUSH
17715: CALL 15765 0 2
17719: END
// every 0 0$1 do
17720: GO 17722
17722: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17723: LD_INT 3
17725: PPUSH
17726: LD_INT 91
17728: PPUSH
17729: LD_INT 3
17731: PPUSH
17732: CALL 13710 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17736: LD_INT 3
17738: PPUSH
17739: LD_INT 47
17741: PPUSH
17742: LD_INT 3
17744: PPUSH
17745: CALL 13710 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17749: LD_INT 3
17751: PPUSH
17752: LD_INT 129
17754: PPUSH
17755: LD_INT 3
17757: PPUSH
17758: CALL 13710 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17762: LD_INT 3
17764: PPUSH
17765: LD_INT 3
17767: PPUSH
17768: LD_INT 3
17770: PPUSH
17771: CALL 13710 0 3
// end ;
17775: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17776: LD_INT 22
17778: PUSH
17779: LD_INT 1
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 21
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PPUSH
17800: CALL_OW 69
17804: IFFALSE 17873
17806: GO 17808
17808: DISABLE
// begin wait ( 0 0$40 ) ;
17809: LD_INT 1400
17811: PPUSH
17812: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17816: LD_INT 3
17818: PPUSH
17819: LD_INT 21
17821: PPUSH
17822: LD_INT 3
17824: PUSH
17825: LD_INT 4
17827: PUSH
17828: LD_INT 5
17830: PUSH
17831: LD_INT 6
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: PUSH
17840: LD_OWVAR 67
17844: ARRAY
17845: PPUSH
17846: LD_INT 46
17848: PUSH
17849: LD_INT 45
17851: PUSH
17852: LD_INT 44
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: PPUSH
17860: LD_INT 3
17862: PPUSH
17863: LD_INT 3
17865: PPUSH
17866: LD_INT 24
17868: PPUSH
17869: CALL 14990 0 7
// end ;
17873: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17874: LD_EXP 20
17878: PUSH
17879: LD_INT 2
17881: EQUAL
17882: IFFALSE 17897
17884: PUSH
17885: LD_INT 21
17887: PPUSH
17888: CALL_OW 255
17892: PUSH
17893: LD_INT 3
17895: EQUAL
17896: AND
17897: IFFALSE 17912
17899: PUSH
17900: LD_INT 112
17902: PPUSH
17903: CALL_OW 255
17907: PUSH
17908: LD_INT 3
17910: EQUAL
17911: AND
17912: IFFALSE 17923
17914: PUSH
17915: LD_INT 21
17917: PPUSH
17918: CALL_OW 302
17922: AND
17923: IFFALSE 17934
17925: PUSH
17926: LD_INT 112
17928: PPUSH
17929: CALL_OW 302
17933: AND
17934: IFFALSE 18024
17936: PUSH
17937: LD_INT 22
17939: PUSH
17940: LD_INT 3
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 21
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 50
17959: PUSH
17960: EMPTY
17961: LIST
17962: PUSH
17963: LD_INT 3
17965: PUSH
17966: LD_INT 58
17968: PUSH
17969: EMPTY
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: PPUSH
17982: CALL_OW 69
17986: PUSH
17987: LD_INT 18
17989: PPUSH
17990: LD_INT 22
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 21
18002: PUSH
18003: LD_INT 2
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PPUSH
18014: CALL_OW 70
18018: PUSH
18019: LD_INT 0
18021: EQUAL
18022: DIFF
18023: AND
18024: IFFALSE 18150
18026: GO 18028
18028: DISABLE
// begin enable ;
18029: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18030: LD_INT 3
18032: PPUSH
18033: LD_INT 21
18035: PPUSH
18036: LD_INT 3
18038: PUSH
18039: LD_INT 4
18041: PUSH
18042: LD_INT 5
18044: PUSH
18045: LD_INT 6
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: PUSH
18054: LD_OWVAR 67
18058: ARRAY
18059: PPUSH
18060: LD_INT 46
18062: PUSH
18063: LD_INT 45
18065: PUSH
18066: LD_INT 44
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: LIST
18073: PPUSH
18074: LD_INT 3
18076: PPUSH
18077: LD_INT 3
18079: PPUSH
18080: LD_INT 24
18082: PPUSH
18083: CALL 14990 0 7
// if russianTimeLapsers = 0 then
18087: LD_EXP 33
18091: PUSH
18092: LD_INT 0
18094: EQUAL
18095: IFFALSE 18150
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18097: LD_INT 3
18099: PPUSH
18100: LD_INT 112
18102: PPUSH
18103: LD_INT 1
18105: PUSH
18106: LD_INT 2
18108: PUSH
18109: LD_INT 2
18111: PUSH
18112: LD_INT 2
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: PUSH
18121: LD_OWVAR 67
18125: ARRAY
18126: PPUSH
18127: LD_INT 49
18129: PUSH
18130: LD_INT 49
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: LD_INT 3
18139: PPUSH
18140: LD_INT 3
18142: PPUSH
18143: LD_INT 24
18145: PPUSH
18146: CALL 14990 0 7
// end ;
18150: END
// every 0 0$1 trigger arabianMines do var i ;
18151: LD_EXP 37
18155: IFFALSE 18276
18157: GO 18159
18159: DISABLE
18160: LD_INT 0
18162: PPUSH
// begin enable ;
18163: ENABLE
// for i in arabianMines do
18164: LD_ADDR_VAR 0 1
18168: PUSH
18169: LD_EXP 37
18173: PUSH
18174: FOR_IN
18175: IFFALSE 18274
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18177: LD_INT 22
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 92
18189: PUSH
18190: LD_VAR 0 1
18194: PUSH
18195: LD_INT 1
18197: ARRAY
18198: PUSH
18199: LD_VAR 0 1
18203: PUSH
18204: LD_INT 2
18206: ARRAY
18207: PUSH
18208: LD_INT 3
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 69
18225: IFFALSE 18272
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18227: LD_VAR 0 1
18231: PUSH
18232: LD_INT 1
18234: ARRAY
18235: PPUSH
18236: LD_VAR 0 1
18240: PUSH
18241: LD_INT 2
18243: ARRAY
18244: PPUSH
18245: LD_INT 5
18247: PPUSH
18248: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18252: LD_ADDR_EXP 37
18256: PUSH
18257: LD_EXP 37
18261: PPUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 3
18271: ST_TO_ADDR
// end ; end ;
18272: GO 18174
18274: POP
18275: POP
// end ;
18276: PPOPN 1
18278: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
18279: LD_EXP 21
18283: PUSH
18284: LD_INT 4
18286: GREATEREQUAL
18287: IFFALSE 18303
18289: PUSH
18290: LD_EXP 22
18294: PUSH
18295: LD_INT 12
18297: MOD
18298: PUSH
18299: LD_INT 0
18301: EQUAL
18302: AND
18303: IFFALSE 18417
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin enable ;
18312: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
18313: LD_ADDR_VAR 0 2
18317: PUSH
18318: LD_INT 122
18320: PUSH
18321: LD_INT 142
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 101
18330: PUSH
18331: LD_INT 127
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 104
18340: PUSH
18341: LD_INT 104
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 46
18350: PUSH
18351: LD_INT 81
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
18364: LD_ADDR_VAR 0 1
18368: PUSH
18369: LD_INT 1
18371: PPUSH
18372: LD_INT 4
18374: PPUSH
18375: CALL_OW 12
18379: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18380: LD_INT 10
18382: PPUSH
18383: LD_VAR 0 2
18387: PUSH
18388: LD_VAR 0 1
18392: ARRAY
18393: PUSH
18394: LD_INT 1
18396: ARRAY
18397: PPUSH
18398: LD_VAR 0 2
18402: PUSH
18403: LD_VAR 0 1
18407: ARRAY
18408: PUSH
18409: LD_INT 2
18411: ARRAY
18412: PPUSH
18413: CALL_OW 243
// end ; end_of_file
18417: PPOPN 2
18419: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18420: LD_INT 3
18422: PPUSH
18423: CALL_OW 301
18427: IFFALSE 18648
18429: GO 18431
18431: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
18432: LD_EXP 27
18436: PPUSH
18437: LD_INT 50
18439: PUSH
18440: EMPTY
18441: LIST
18442: PPUSH
18443: CALL_OW 72
18447: IFFALSE 18456
// wait ( 0 0$10 ) ;
18449: LD_INT 350
18451: PPUSH
18452: CALL_OW 67
// DialogueOn ;
18456: CALL_OW 6
// if sciCounter = 0 then
18460: LD_EXP 28
18464: PUSH
18465: LD_INT 0
18467: EQUAL
18468: IFFALSE 18496
// begin Say ( JMM , D7a-JMM-1 ) ;
18470: LD_EXP 1
18474: PPUSH
18475: LD_STRING D7a-JMM-1
18477: PPUSH
18478: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18482: LD_EXP 15
18486: PPUSH
18487: LD_STRING D7a-Pow-1
18489: PPUSH
18490: CALL_OW 94
// end else
18494: GO 18640
// if sciCounter < 6 then
18496: LD_EXP 28
18500: PUSH
18501: LD_INT 6
18503: LESS
18504: IFFALSE 18532
// begin Say ( JMM , D7b-JMM-1 ) ;
18506: LD_EXP 1
18510: PPUSH
18511: LD_STRING D7b-JMM-1
18513: PPUSH
18514: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18518: LD_EXP 15
18522: PPUSH
18523: LD_STRING D7b-Pow-1
18525: PPUSH
18526: CALL_OW 94
// end else
18530: GO 18640
// begin Say ( JMM , D7c-JMM-1 ) ;
18532: LD_EXP 1
18536: PPUSH
18537: LD_STRING D7c-JMM-1
18539: PPUSH
18540: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18544: LD_EXP 15
18548: PPUSH
18549: LD_STRING D7c-Pow-1
18551: PPUSH
18552: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18556: LD_EXP 1
18560: PPUSH
18561: LD_STRING D7d-JMM-1
18563: PPUSH
18564: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18568: LD_EXP 15
18572: PPUSH
18573: LD_STRING D7d-Pow-1
18575: PPUSH
18576: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18580: LD_EXP 1
18584: PPUSH
18585: LD_STRING D7d-JMM-2
18587: PPUSH
18588: CALL_OW 88
// if askSiberite = 1 then
18592: LD_EXP 25
18596: PUSH
18597: LD_INT 1
18599: EQUAL
18600: IFFALSE 18616
// Say ( JMM , D7d-JMM-2a ) else
18602: LD_EXP 1
18606: PPUSH
18607: LD_STRING D7d-JMM-2a
18609: PPUSH
18610: CALL_OW 88
18614: GO 18628
// SayRadio ( Powell , D7d-Pow-2 ) ;
18616: LD_EXP 15
18620: PPUSH
18621: LD_STRING D7d-Pow-2
18623: PPUSH
18624: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18628: LD_EXP 15
18632: PPUSH
18633: LD_STRING D7d-Pow-2a
18635: PPUSH
18636: CALL_OW 94
// end ; DialogueOff ;
18640: CALL_OW 7
// FinishMission ;
18644: CALL 18649 0 0
// end ;
18648: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18649: LD_INT 0
18651: PPUSH
18652: PPUSH
18653: PPUSH
18654: PPUSH
// m1 := false ;
18655: LD_ADDR_VAR 0 2
18659: PUSH
18660: LD_INT 0
18662: ST_TO_ADDR
// m2 := false ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// m3 := false ;
18671: LD_ADDR_VAR 0 4
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// if not westPathUsed then
18679: LD_EXP 42
18683: NOT
18684: IFFALSE 18693
// SetAchievement ( ACH_PATH ) ;
18686: LD_STRING ACH_PATH
18688: PPUSH
18689: CALL_OW 543
// if not rocketBuilded then
18693: LD_EXP 44
18697: NOT
18698: IFFALSE 18714
// begin wait ( 3 ) ;
18700: LD_INT 3
18702: PPUSH
18703: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18707: LD_STRING ACH_ROCKET
18709: PPUSH
18710: CALL_OW 543
// end ; if tick <= 40 40$00 then
18714: LD_OWVAR 1
18718: PUSH
18719: LD_INT 84000
18721: LESSEQUAL
18722: IFFALSE 18738
// begin wait ( 3 ) ;
18724: LD_INT 3
18726: PPUSH
18727: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18731: LD_STRING ACH_ASPEED_12
18733: PPUSH
18734: CALL_OW 543
// end ; if teleportExplored = 1 then
18738: LD_EXP 26
18742: PUSH
18743: LD_INT 1
18745: EQUAL
18746: IFFALSE 18768
// begin m1 := true ;
18748: LD_ADDR_VAR 0 2
18752: PUSH
18753: LD_INT 1
18755: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18756: LD_STRING Teleport
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 101
// end else
18766: GO 18779
// AddMedal ( Teleport , - 1 ) ;
18768: LD_STRING Teleport
18770: PPUSH
18771: LD_INT 1
18773: NEG
18774: PPUSH
18775: CALL_OW 101
// if sciCounter > 2 then
18779: LD_EXP 28
18783: PUSH
18784: LD_INT 2
18786: GREATER
18787: IFFALSE 18809
// begin m2 := true ;
18789: LD_ADDR_VAR 0 3
18793: PUSH
18794: LD_INT 1
18796: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18797: LD_STRING Materials
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: CALL_OW 101
// end else
18807: GO 18820
// AddMedal ( Materials , - 1 ) ;
18809: LD_STRING Materials
18811: PPUSH
18812: LD_INT 1
18814: NEG
18815: PPUSH
18816: CALL_OW 101
// if sciCounter >= 6 then
18820: LD_EXP 28
18824: PUSH
18825: LD_INT 6
18827: GREATEREQUAL
18828: IFFALSE 18860
// begin m3 := true ;
18830: LD_ADDR_VAR 0 4
18834: PUSH
18835: LD_INT 1
18837: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18838: LD_STRING Scientists
18840: PPUSH
18841: LD_INT 1
18843: PPUSH
18844: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18848: LD_INT 1
18850: PPUSH
18851: LD_STRING 12_SciDed_1
18853: PPUSH
18854: CALL_OW 39
// end else
18858: GO 18881
// begin AddMedal ( Scientists , - 1 ) ;
18860: LD_STRING Scientists
18862: PPUSH
18863: LD_INT 1
18865: NEG
18866: PPUSH
18867: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18871: LD_INT 0
18873: PPUSH
18874: LD_STRING 12_SciDed_1
18876: PPUSH
18877: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18881: LD_EXP 24
18885: PPUSH
18886: LD_STRING 12_MainDepositFake_1
18888: PPUSH
18889: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18893: LD_VAR 0 2
18897: IFFALSE 18905
18899: PUSH
18900: LD_VAR 0 3
18904: AND
18905: IFFALSE 18913
18907: PUSH
18908: LD_VAR 0 4
18912: AND
18913: IFFALSE 18925
18915: PUSH
18916: LD_OWVAR 67
18920: PUSH
18921: LD_INT 3
18923: GREATEREQUAL
18924: AND
18925: IFFALSE 18937
// SetAchievementEX ( ACH_AMER , 12 ) ;
18927: LD_STRING ACH_AMER
18929: PPUSH
18930: LD_INT 12
18932: PPUSH
18933: CALL_OW 564
// GiveMedals ( MAIN ) ;
18937: LD_STRING MAIN
18939: PPUSH
18940: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18944: LD_INT 22
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 23
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 21
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 25
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 25
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 25
18999: PUSH
19000: LD_INT 3
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 4
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 25
19019: PUSH
19020: LD_INT 5
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 25
19029: PUSH
19030: LD_INT 8
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: PPUSH
19057: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19061: LD_EXP 1
19065: PPUSH
19066: LD_EXP 39
19070: PUSH
19071: LD_STRING JMM
19073: STR
19074: PPUSH
19075: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19079: LD_EXP 7
19083: PPUSH
19084: LD_EXP 39
19088: PUSH
19089: LD_STRING Brown
19091: STR
19092: PPUSH
19093: CALL 13055 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19097: LD_EXP 3
19101: PPUSH
19102: LD_EXP 39
19106: PUSH
19107: LD_STRING Donaldson
19109: STR
19110: PPUSH
19111: CALL 13055 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19115: LD_EXP 4
19119: PPUSH
19120: LD_EXP 39
19124: PUSH
19125: LD_STRING Bobby
19127: STR
19128: PPUSH
19129: CALL 13055 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19133: LD_EXP 5
19137: PPUSH
19138: LD_EXP 39
19142: PUSH
19143: LD_STRING Cyrus
19145: STR
19146: PPUSH
19147: CALL 13055 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19151: LD_EXP 2
19155: PPUSH
19156: LD_EXP 39
19160: PUSH
19161: LD_STRING Lisa
19163: STR
19164: PPUSH
19165: CALL 13055 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19169: LD_EXP 12
19173: PPUSH
19174: LD_EXP 39
19178: PUSH
19179: LD_STRING Frank
19181: STR
19182: PPUSH
19183: CALL 13055 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19187: LD_EXP 13
19191: PPUSH
19192: LD_EXP 39
19196: PUSH
19197: LD_STRING Kikuchi
19199: STR
19200: PPUSH
19201: CALL 13055 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19205: LD_EXP 9
19209: PPUSH
19210: LD_EXP 39
19214: PUSH
19215: LD_STRING Houten
19217: STR
19218: PPUSH
19219: CALL 13055 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19223: LD_EXP 11
19227: PPUSH
19228: LD_EXP 39
19232: PUSH
19233: LD_STRING Gary
19235: STR
19236: PPUSH
19237: CALL 13055 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19241: LD_EXP 10
19245: PPUSH
19246: LD_EXP 39
19250: PUSH
19251: LD_STRING Cornell
19253: STR
19254: PPUSH
19255: CALL 13055 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19259: LD_EXP 6
19263: PPUSH
19264: LD_EXP 39
19268: PUSH
19269: LD_STRING Denis
19271: STR
19272: PPUSH
19273: CALL 13055 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19277: LD_EXP 8
19281: PPUSH
19282: LD_EXP 39
19286: PUSH
19287: LD_STRING Gladstone
19289: STR
19290: PPUSH
19291: CALL 13055 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19295: LD_INT 22
19297: PUSH
19298: LD_INT 1
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 23
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 21
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: LD_INT 25
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 25
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 25
19350: PUSH
19351: LD_INT 3
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 25
19360: PUSH
19361: LD_INT 4
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 25
19370: PUSH
19371: LD_INT 5
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 25
19380: PUSH
19381: LD_INT 8
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 69
19407: PUSH
19408: LD_EXP 1
19412: PUSH
19413: LD_EXP 7
19417: PUSH
19418: LD_EXP 3
19422: PUSH
19423: LD_EXP 4
19427: PUSH
19428: LD_EXP 5
19432: PUSH
19433: LD_EXP 2
19437: PUSH
19438: LD_EXP 12
19442: PUSH
19443: LD_EXP 8
19447: PUSH
19448: LD_EXP 13
19452: PUSH
19453: LD_EXP 6
19457: PUSH
19458: LD_EXP 9
19462: PUSH
19463: LD_EXP 11
19467: PUSH
19468: LD_EXP 10
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: DIFF
19488: PPUSH
19489: LD_STRING 12_other_survivors
19491: PPUSH
19492: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19496: LD_INT 22
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 23
19508: PUSH
19509: LD_INT 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: LD_INT 25
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 25
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 25
19551: PUSH
19552: LD_INT 3
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 25
19561: PUSH
19562: LD_INT 4
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 25
19571: PUSH
19572: LD_INT 5
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 25
19581: PUSH
19582: LD_INT 8
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PPUSH
19604: CALL_OW 69
19608: PPUSH
19609: LD_STRING 12_kurt_squad
19611: PPUSH
19612: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19616: LD_EXP 14
19620: PPUSH
19621: LD_STRING 12_others
19623: PPUSH
19624: CALL_OW 38
// YouWin ;
19628: CALL_OW 103
// end ; end_of_file
19632: LD_VAR 0 1
19636: RET
// every 0 0$01 trigger ruAI and cratesAllow do
19637: LD_EXP 34
19641: IFFALSE 19649
19643: PUSH
19644: LD_EXP 45
19648: AND
19649: IFFALSE 19961
19651: GO 19653
19653: DISABLE
// begin repeat wait ( 0 0$08 ) ;
19654: LD_INT 280
19656: PPUSH
19657: CALL_OW 67
// if cratesSpawned < 12 then
19661: LD_EXP 38
19665: PUSH
19666: LD_INT 12
19668: LESS
19669: IFFALSE 19721
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
19671: LD_INT 105
19673: PPUSH
19674: LD_INT 350
19676: PPUSH
19677: CALL_OW 12
19681: PPUSH
19682: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19686: LD_INT 3
19688: PPUSH
19689: LD_INT 5
19691: PPUSH
19692: CALL_OW 12
19696: PPUSH
19697: LD_INT 21
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19707: LD_ADDR_EXP 38
19711: PUSH
19712: LD_EXP 38
19716: PUSH
19717: LD_INT 1
19719: PLUS
19720: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
19721: LD_EXP 38
19725: PUSH
19726: LD_INT 12
19728: GREATEREQUAL
19729: IFFALSE 19741
19731: PUSH
19732: LD_EXP 38
19736: PUSH
19737: LD_INT 32
19739: LESS
19740: AND
19741: IFFALSE 19793
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
19743: LD_INT 420
19745: PPUSH
19746: LD_INT 700
19748: PPUSH
19749: CALL_OW 12
19753: PPUSH
19754: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19758: LD_INT 3
19760: PPUSH
19761: LD_INT 5
19763: PPUSH
19764: CALL_OW 12
19768: PPUSH
19769: LD_INT 21
19771: PPUSH
19772: LD_INT 1
19774: PPUSH
19775: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19779: LD_ADDR_EXP 38
19783: PUSH
19784: LD_EXP 38
19788: PUSH
19789: LD_INT 1
19791: PLUS
19792: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
19793: LD_EXP 38
19797: PUSH
19798: LD_INT 32
19800: GREATEREQUAL
19801: IFFALSE 19875
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19803: LD_INT 21
19805: PPUSH
19806: CALL_OW 435
19810: PUSH
19811: LD_INT 14
19813: LESS
19814: IFFALSE 19825
// wait ( 0 0$10 ) else
19816: LD_INT 350
19818: PPUSH
19819: CALL_OW 67
19823: GO 19840
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
19825: LD_INT 1750
19827: PPUSH
19828: LD_INT 3150
19830: PPUSH
19831: CALL_OW 12
19835: PPUSH
19836: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
19840: LD_INT 2
19842: PPUSH
19843: LD_INT 5
19845: PPUSH
19846: CALL_OW 12
19850: PPUSH
19851: LD_INT 21
19853: PPUSH
19854: LD_INT 1
19856: PPUSH
19857: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19861: LD_ADDR_EXP 38
19865: PUSH
19866: LD_EXP 38
19870: PUSH
19871: LD_INT 1
19873: PLUS
19874: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
19875: LD_EXP 38
19879: PUSH
19880: LD_INT 110
19882: GREATEREQUAL
19883: IFFALSE 19957
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19885: LD_INT 21
19887: PPUSH
19888: CALL_OW 435
19892: PUSH
19893: LD_INT 14
19895: LESS
19896: IFFALSE 19907
// wait ( 0 0$20 ) else
19898: LD_INT 700
19900: PPUSH
19901: CALL_OW 67
19905: GO 19922
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
19907: LD_INT 2450
19909: PPUSH
19910: LD_INT 3850
19912: PPUSH
19913: CALL_OW 12
19917: PPUSH
19918: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19922: LD_INT 1
19924: PPUSH
19925: LD_INT 5
19927: PPUSH
19928: CALL_OW 12
19932: PPUSH
19933: LD_INT 21
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19943: LD_ADDR_EXP 38
19947: PUSH
19948: LD_EXP 38
19952: PUSH
19953: LD_INT 1
19955: PLUS
19956: ST_TO_ADDR
// end ; until false ;
19957: LD_INT 0
19959: IFFALSE 19654
// end ; end_of_file end_of_file
19961: END
// export globalGameSaveCounter ; every 0 0$1 do
19962: GO 19964
19964: DISABLE
// begin enable ;
19965: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19966: LD_STRING updateTimer(
19968: PUSH
19969: LD_OWVAR 1
19973: STR
19974: PUSH
19975: LD_STRING );
19977: STR
19978: PPUSH
19979: CALL_OW 559
// end ;
19983: END
// every 0 0$1 do
19984: GO 19986
19986: DISABLE
// begin globalGameSaveCounter := 0 ;
19987: LD_ADDR_EXP 46
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19995: LD_STRING setGameSaveCounter(0)
19997: PPUSH
19998: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20002: LD_STRING initStreamRollete();
20004: PPUSH
20005: CALL_OW 559
// InitStreamMode ;
20009: CALL 21354 0 0
// DefineStreamItems ( false ) ;
20013: LD_INT 0
20015: PPUSH
20016: CALL 21818 0 1
// end ;
20020: END
// export function SOS_MapStart ( ) ; begin
20021: LD_INT 0
20023: PPUSH
// if streamModeActive then
20024: LD_EXP 47
20028: IFFALSE 20037
// DefineStreamItems ( true ) ;
20030: LD_INT 1
20032: PPUSH
20033: CALL 21818 0 1
// UpdateLuaVariables ( ) ;
20037: CALL 20054 0 0
// UpdateFactoryWaypoints ( ) ;
20041: CALL 34940 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20045: CALL 35192 0 0
// end ;
20049: LD_VAR 0 1
20053: RET
// function UpdateLuaVariables ( ) ; begin
20054: LD_INT 0
20056: PPUSH
// if globalGameSaveCounter then
20057: LD_EXP 46
20061: IFFALSE 20095
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20063: LD_ADDR_EXP 46
20067: PUSH
20068: LD_EXP 46
20072: PPUSH
20073: CALL 81773 0 1
20077: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20078: LD_STRING setGameSaveCounter(
20080: PUSH
20081: LD_EXP 46
20085: STR
20086: PUSH
20087: LD_STRING )
20089: STR
20090: PPUSH
20091: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20095: LD_STRING setGameDifficulty(
20097: PUSH
20098: LD_OWVAR 67
20102: STR
20103: PUSH
20104: LD_STRING )
20106: STR
20107: PPUSH
20108: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20112: LD_STRING displayDifficulty(
20114: PUSH
20115: LD_OWVAR 67
20119: STR
20120: PUSH
20121: LD_STRING )
20123: STR
20124: PPUSH
20125: CALL_OW 559
// end ;
20129: LD_VAR 0 1
20133: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20134: LD_INT 0
20136: PPUSH
// if p2 = stream_mode then
20137: LD_VAR 0 2
20141: PUSH
20142: LD_INT 100
20144: EQUAL
20145: IFFALSE 21148
// begin if not StreamModeActive then
20147: LD_EXP 47
20151: NOT
20152: IFFALSE 20162
// StreamModeActive := true ;
20154: LD_ADDR_EXP 47
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 0 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 0
20169: EQUAL
20170: IFFALSE 20176
// InitStreamMode ;
20172: CALL 21354 0 0
// if p3 = 1 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 1
20183: EQUAL
20184: IFFALSE 20194
// sRocket := true ;
20186: LD_ADDR_EXP 52
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 2 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 2
20201: EQUAL
20202: IFFALSE 20212
// sSpeed := true ;
20204: LD_ADDR_EXP 51
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// if p3 = 3 then
20212: LD_VAR 0 3
20216: PUSH
20217: LD_INT 3
20219: EQUAL
20220: IFFALSE 20230
// sEngine := true ;
20222: LD_ADDR_EXP 53
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if p3 = 4 then
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 4
20237: EQUAL
20238: IFFALSE 20248
// sSpec := true ;
20240: LD_ADDR_EXP 50
20244: PUSH
20245: LD_INT 1
20247: ST_TO_ADDR
// if p3 = 5 then
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 5
20255: EQUAL
20256: IFFALSE 20266
// sLevel := true ;
20258: LD_ADDR_EXP 54
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// if p3 = 6 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 6
20273: EQUAL
20274: IFFALSE 20284
// sArmoury := true ;
20276: LD_ADDR_EXP 55
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 7 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 7
20291: EQUAL
20292: IFFALSE 20302
// sRadar := true ;
20294: LD_ADDR_EXP 56
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 8 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 8
20309: EQUAL
20310: IFFALSE 20320
// sBunker := true ;
20312: LD_ADDR_EXP 57
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 9 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 9
20327: EQUAL
20328: IFFALSE 20338
// sHack := true ;
20330: LD_ADDR_EXP 58
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// if p3 = 10 then
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 10
20345: EQUAL
20346: IFFALSE 20356
// sFire := true ;
20348: LD_ADDR_EXP 59
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// if p3 = 11 then
20356: LD_VAR 0 3
20360: PUSH
20361: LD_INT 11
20363: EQUAL
20364: IFFALSE 20374
// sRefresh := true ;
20366: LD_ADDR_EXP 60
20370: PUSH
20371: LD_INT 1
20373: ST_TO_ADDR
// if p3 = 12 then
20374: LD_VAR 0 3
20378: PUSH
20379: LD_INT 12
20381: EQUAL
20382: IFFALSE 20392
// sExp := true ;
20384: LD_ADDR_EXP 61
20388: PUSH
20389: LD_INT 1
20391: ST_TO_ADDR
// if p3 = 13 then
20392: LD_VAR 0 3
20396: PUSH
20397: LD_INT 13
20399: EQUAL
20400: IFFALSE 20410
// sDepot := true ;
20402: LD_ADDR_EXP 62
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// if p3 = 14 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 14
20417: EQUAL
20418: IFFALSE 20428
// sFlag := true ;
20420: LD_ADDR_EXP 63
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// if p3 = 15 then
20428: LD_VAR 0 3
20432: PUSH
20433: LD_INT 15
20435: EQUAL
20436: IFFALSE 20446
// sKamikadze := true ;
20438: LD_ADDR_EXP 71
20442: PUSH
20443: LD_INT 1
20445: ST_TO_ADDR
// if p3 = 16 then
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 16
20453: EQUAL
20454: IFFALSE 20464
// sTroll := true ;
20456: LD_ADDR_EXP 72
20460: PUSH
20461: LD_INT 1
20463: ST_TO_ADDR
// if p3 = 17 then
20464: LD_VAR 0 3
20468: PUSH
20469: LD_INT 17
20471: EQUAL
20472: IFFALSE 20482
// sSlow := true ;
20474: LD_ADDR_EXP 73
20478: PUSH
20479: LD_INT 1
20481: ST_TO_ADDR
// if p3 = 18 then
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 18
20489: EQUAL
20490: IFFALSE 20500
// sLack := true ;
20492: LD_ADDR_EXP 74
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// if p3 = 19 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 19
20507: EQUAL
20508: IFFALSE 20518
// sTank := true ;
20510: LD_ADDR_EXP 76
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// if p3 = 20 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 20
20525: EQUAL
20526: IFFALSE 20536
// sRemote := true ;
20528: LD_ADDR_EXP 77
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// if p3 = 21 then
20536: LD_VAR 0 3
20540: PUSH
20541: LD_INT 21
20543: EQUAL
20544: IFFALSE 20554
// sPowell := true ;
20546: LD_ADDR_EXP 78
20550: PUSH
20551: LD_INT 1
20553: ST_TO_ADDR
// if p3 = 22 then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 22
20561: EQUAL
20562: IFFALSE 20572
// sTeleport := true ;
20564: LD_ADDR_EXP 81
20568: PUSH
20569: LD_INT 1
20571: ST_TO_ADDR
// if p3 = 23 then
20572: LD_VAR 0 3
20576: PUSH
20577: LD_INT 23
20579: EQUAL
20580: IFFALSE 20590
// sOilTower := true ;
20582: LD_ADDR_EXP 83
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// if p3 = 24 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 24
20597: EQUAL
20598: IFFALSE 20608
// sShovel := true ;
20600: LD_ADDR_EXP 84
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// if p3 = 25 then
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 25
20615: EQUAL
20616: IFFALSE 20626
// sSheik := true ;
20618: LD_ADDR_EXP 85
20622: PUSH
20623: LD_INT 1
20625: ST_TO_ADDR
// if p3 = 26 then
20626: LD_VAR 0 3
20630: PUSH
20631: LD_INT 26
20633: EQUAL
20634: IFFALSE 20644
// sEarthquake := true ;
20636: LD_ADDR_EXP 87
20640: PUSH
20641: LD_INT 1
20643: ST_TO_ADDR
// if p3 = 27 then
20644: LD_VAR 0 3
20648: PUSH
20649: LD_INT 27
20651: EQUAL
20652: IFFALSE 20662
// sAI := true ;
20654: LD_ADDR_EXP 88
20658: PUSH
20659: LD_INT 1
20661: ST_TO_ADDR
// if p3 = 28 then
20662: LD_VAR 0 3
20666: PUSH
20667: LD_INT 28
20669: EQUAL
20670: IFFALSE 20680
// sCargo := true ;
20672: LD_ADDR_EXP 91
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// if p3 = 29 then
20680: LD_VAR 0 3
20684: PUSH
20685: LD_INT 29
20687: EQUAL
20688: IFFALSE 20698
// sDLaser := true ;
20690: LD_ADDR_EXP 92
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// if p3 = 30 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_INT 30
20705: EQUAL
20706: IFFALSE 20716
// sExchange := true ;
20708: LD_ADDR_EXP 93
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// if p3 = 31 then
20716: LD_VAR 0 3
20720: PUSH
20721: LD_INT 31
20723: EQUAL
20724: IFFALSE 20734
// sFac := true ;
20726: LD_ADDR_EXP 94
20730: PUSH
20731: LD_INT 1
20733: ST_TO_ADDR
// if p3 = 32 then
20734: LD_VAR 0 3
20738: PUSH
20739: LD_INT 32
20741: EQUAL
20742: IFFALSE 20752
// sPower := true ;
20744: LD_ADDR_EXP 95
20748: PUSH
20749: LD_INT 1
20751: ST_TO_ADDR
// if p3 = 33 then
20752: LD_VAR 0 3
20756: PUSH
20757: LD_INT 33
20759: EQUAL
20760: IFFALSE 20770
// sRandom := true ;
20762: LD_ADDR_EXP 96
20766: PUSH
20767: LD_INT 1
20769: ST_TO_ADDR
// if p3 = 34 then
20770: LD_VAR 0 3
20774: PUSH
20775: LD_INT 34
20777: EQUAL
20778: IFFALSE 20788
// sShield := true ;
20780: LD_ADDR_EXP 97
20784: PUSH
20785: LD_INT 1
20787: ST_TO_ADDR
// if p3 = 35 then
20788: LD_VAR 0 3
20792: PUSH
20793: LD_INT 35
20795: EQUAL
20796: IFFALSE 20806
// sTime := true ;
20798: LD_ADDR_EXP 98
20802: PUSH
20803: LD_INT 1
20805: ST_TO_ADDR
// if p3 = 36 then
20806: LD_VAR 0 3
20810: PUSH
20811: LD_INT 36
20813: EQUAL
20814: IFFALSE 20824
// sTools := true ;
20816: LD_ADDR_EXP 99
20820: PUSH
20821: LD_INT 1
20823: ST_TO_ADDR
// if p3 = 101 then
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 101
20831: EQUAL
20832: IFFALSE 20842
// sSold := true ;
20834: LD_ADDR_EXP 64
20838: PUSH
20839: LD_INT 1
20841: ST_TO_ADDR
// if p3 = 102 then
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 102
20849: EQUAL
20850: IFFALSE 20860
// sDiff := true ;
20852: LD_ADDR_EXP 65
20856: PUSH
20857: LD_INT 1
20859: ST_TO_ADDR
// if p3 = 103 then
20860: LD_VAR 0 3
20864: PUSH
20865: LD_INT 103
20867: EQUAL
20868: IFFALSE 20878
// sFog := true ;
20870: LD_ADDR_EXP 68
20874: PUSH
20875: LD_INT 1
20877: ST_TO_ADDR
// if p3 = 104 then
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 104
20885: EQUAL
20886: IFFALSE 20896
// sReset := true ;
20888: LD_ADDR_EXP 69
20892: PUSH
20893: LD_INT 1
20895: ST_TO_ADDR
// if p3 = 105 then
20896: LD_VAR 0 3
20900: PUSH
20901: LD_INT 105
20903: EQUAL
20904: IFFALSE 20914
// sSun := true ;
20906: LD_ADDR_EXP 70
20910: PUSH
20911: LD_INT 1
20913: ST_TO_ADDR
// if p3 = 106 then
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 106
20921: EQUAL
20922: IFFALSE 20932
// sTiger := true ;
20924: LD_ADDR_EXP 66
20928: PUSH
20929: LD_INT 1
20931: ST_TO_ADDR
// if p3 = 107 then
20932: LD_VAR 0 3
20936: PUSH
20937: LD_INT 107
20939: EQUAL
20940: IFFALSE 20950
// sBomb := true ;
20942: LD_ADDR_EXP 67
20946: PUSH
20947: LD_INT 1
20949: ST_TO_ADDR
// if p3 = 108 then
20950: LD_VAR 0 3
20954: PUSH
20955: LD_INT 108
20957: EQUAL
20958: IFFALSE 20968
// sWound := true ;
20960: LD_ADDR_EXP 75
20964: PUSH
20965: LD_INT 1
20967: ST_TO_ADDR
// if p3 = 109 then
20968: LD_VAR 0 3
20972: PUSH
20973: LD_INT 109
20975: EQUAL
20976: IFFALSE 20986
// sBetray := true ;
20978: LD_ADDR_EXP 79
20982: PUSH
20983: LD_INT 1
20985: ST_TO_ADDR
// if p3 = 110 then
20986: LD_VAR 0 3
20990: PUSH
20991: LD_INT 110
20993: EQUAL
20994: IFFALSE 21004
// sContamin := true ;
20996: LD_ADDR_EXP 80
21000: PUSH
21001: LD_INT 1
21003: ST_TO_ADDR
// if p3 = 111 then
21004: LD_VAR 0 3
21008: PUSH
21009: LD_INT 111
21011: EQUAL
21012: IFFALSE 21022
// sOil := true ;
21014: LD_ADDR_EXP 82
21018: PUSH
21019: LD_INT 1
21021: ST_TO_ADDR
// if p3 = 112 then
21022: LD_VAR 0 3
21026: PUSH
21027: LD_INT 112
21029: EQUAL
21030: IFFALSE 21040
// sStu := true ;
21032: LD_ADDR_EXP 86
21036: PUSH
21037: LD_INT 1
21039: ST_TO_ADDR
// if p3 = 113 then
21040: LD_VAR 0 3
21044: PUSH
21045: LD_INT 113
21047: EQUAL
21048: IFFALSE 21058
// sBazooka := true ;
21050: LD_ADDR_EXP 89
21054: PUSH
21055: LD_INT 1
21057: ST_TO_ADDR
// if p3 = 114 then
21058: LD_VAR 0 3
21062: PUSH
21063: LD_INT 114
21065: EQUAL
21066: IFFALSE 21076
// sMortar := true ;
21068: LD_ADDR_EXP 90
21072: PUSH
21073: LD_INT 1
21075: ST_TO_ADDR
// if p3 = 115 then
21076: LD_VAR 0 3
21080: PUSH
21081: LD_INT 115
21083: EQUAL
21084: IFFALSE 21094
// sRanger := true ;
21086: LD_ADDR_EXP 100
21090: PUSH
21091: LD_INT 1
21093: ST_TO_ADDR
// if p3 = 116 then
21094: LD_VAR 0 3
21098: PUSH
21099: LD_INT 116
21101: EQUAL
21102: IFFALSE 21112
// sComputer := true ;
21104: LD_ADDR_EXP 101
21108: PUSH
21109: LD_INT 1
21111: ST_TO_ADDR
// if p3 = 117 then
21112: LD_VAR 0 3
21116: PUSH
21117: LD_INT 117
21119: EQUAL
21120: IFFALSE 21130
// s30 := true ;
21122: LD_ADDR_EXP 102
21126: PUSH
21127: LD_INT 1
21129: ST_TO_ADDR
// if p3 = 118 then
21130: LD_VAR 0 3
21134: PUSH
21135: LD_INT 118
21137: EQUAL
21138: IFFALSE 21148
// s60 := true ;
21140: LD_ADDR_EXP 103
21144: PUSH
21145: LD_INT 1
21147: ST_TO_ADDR
// end ; if p2 = hack_mode then
21148: LD_VAR 0 2
21152: PUSH
21153: LD_INT 101
21155: EQUAL
21156: IFFALSE 21284
// begin case p3 of 1 :
21158: LD_VAR 0 3
21162: PUSH
21163: LD_INT 1
21165: DOUBLE
21166: EQUAL
21167: IFTRUE 21171
21169: GO 21178
21171: POP
// hHackUnlimitedResources ; 2 :
21172: CALL 33547 0 0
21176: GO 21284
21178: LD_INT 2
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21193
21186: POP
// hHackSetLevel10 ; 3 :
21187: CALL 33680 0 0
21191: GO 21284
21193: LD_INT 3
21195: DOUBLE
21196: EQUAL
21197: IFTRUE 21201
21199: GO 21208
21201: POP
// hHackSetLevel10YourUnits ; 4 :
21202: CALL 33765 0 0
21206: GO 21284
21208: LD_INT 4
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21223
21216: POP
// hHackInvincible ; 5 :
21217: CALL 34213 0 0
21221: GO 21284
21223: LD_INT 5
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21238
21231: POP
// hHackInvisible ; 6 :
21232: CALL 34324 0 0
21236: GO 21284
21238: LD_INT 6
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21253
21246: POP
// hHackChangeYourSide ; 7 :
21247: CALL 34381 0 0
21251: GO 21284
21253: LD_INT 7
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21268
21261: POP
// hHackChangeUnitSide ; 8 :
21262: CALL 34423 0 0
21266: GO 21284
21268: LD_INT 8
21270: DOUBLE
21271: EQUAL
21272: IFTRUE 21276
21274: GO 21283
21276: POP
// hHackFog ; end ;
21277: CALL 34524 0 0
21281: GO 21284
21283: POP
// end ; if p2 = game_save_mode then
21284: LD_VAR 0 2
21288: PUSH
21289: LD_INT 102
21291: EQUAL
21292: IFFALSE 21349
// begin if p3 = 1 then
21294: LD_VAR 0 3
21298: PUSH
21299: LD_INT 1
21301: EQUAL
21302: IFFALSE 21314
// globalGameSaveCounter := p4 ;
21304: LD_ADDR_EXP 46
21308: PUSH
21309: LD_VAR 0 4
21313: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21314: LD_VAR 0 3
21318: PUSH
21319: LD_INT 2
21321: EQUAL
21322: IFFALSE 21330
21324: PUSH
21325: LD_EXP 46
21329: AND
21330: IFFALSE 21349
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21332: LD_STRING setGameSaveCounter(
21334: PUSH
21335: LD_EXP 46
21339: STR
21340: PUSH
21341: LD_STRING )
21343: STR
21344: PPUSH
21345: CALL_OW 559
// end ; end ;
21349: LD_VAR 0 7
21353: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21354: LD_INT 0
21356: PPUSH
// streamModeActive := false ;
21357: LD_ADDR_EXP 47
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// normalCounter := 36 ;
21365: LD_ADDR_EXP 48
21369: PUSH
21370: LD_INT 36
21372: ST_TO_ADDR
// hardcoreCounter := 18 ;
21373: LD_ADDR_EXP 49
21377: PUSH
21378: LD_INT 18
21380: ST_TO_ADDR
// sRocket := false ;
21381: LD_ADDR_EXP 52
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sSpeed := false ;
21389: LD_ADDR_EXP 51
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sEngine := false ;
21397: LD_ADDR_EXP 53
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sSpec := false ;
21405: LD_ADDR_EXP 50
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sLevel := false ;
21413: LD_ADDR_EXP 54
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sArmoury := false ;
21421: LD_ADDR_EXP 55
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sRadar := false ;
21429: LD_ADDR_EXP 56
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sBunker := false ;
21437: LD_ADDR_EXP 57
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sHack := false ;
21445: LD_ADDR_EXP 58
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sFire := false ;
21453: LD_ADDR_EXP 59
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sRefresh := false ;
21461: LD_ADDR_EXP 60
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sExp := false ;
21469: LD_ADDR_EXP 61
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sDepot := false ;
21477: LD_ADDR_EXP 62
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sFlag := false ;
21485: LD_ADDR_EXP 63
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sKamikadze := false ;
21493: LD_ADDR_EXP 71
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sTroll := false ;
21501: LD_ADDR_EXP 72
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sSlow := false ;
21509: LD_ADDR_EXP 73
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sLack := false ;
21517: LD_ADDR_EXP 74
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sTank := false ;
21525: LD_ADDR_EXP 76
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sRemote := false ;
21533: LD_ADDR_EXP 77
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sPowell := false ;
21541: LD_ADDR_EXP 78
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sTeleport := false ;
21549: LD_ADDR_EXP 81
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sOilTower := false ;
21557: LD_ADDR_EXP 83
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sShovel := false ;
21565: LD_ADDR_EXP 84
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sSheik := false ;
21573: LD_ADDR_EXP 85
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sEarthquake := false ;
21581: LD_ADDR_EXP 87
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sAI := false ;
21589: LD_ADDR_EXP 88
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// sCargo := false ;
21597: LD_ADDR_EXP 91
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// sDLaser := false ;
21605: LD_ADDR_EXP 92
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// sExchange := false ;
21613: LD_ADDR_EXP 93
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
// sFac := false ;
21621: LD_ADDR_EXP 94
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// sPower := false ;
21629: LD_ADDR_EXP 95
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// sRandom := false ;
21637: LD_ADDR_EXP 96
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// sShield := false ;
21645: LD_ADDR_EXP 97
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// sTime := false ;
21653: LD_ADDR_EXP 98
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
// sTools := false ;
21661: LD_ADDR_EXP 99
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// sSold := false ;
21669: LD_ADDR_EXP 64
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// sDiff := false ;
21677: LD_ADDR_EXP 65
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// sFog := false ;
21685: LD_ADDR_EXP 68
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// sReset := false ;
21693: LD_ADDR_EXP 69
21697: PUSH
21698: LD_INT 0
21700: ST_TO_ADDR
// sSun := false ;
21701: LD_ADDR_EXP 70
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// sTiger := false ;
21709: LD_ADDR_EXP 66
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// sBomb := false ;
21717: LD_ADDR_EXP 67
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// sWound := false ;
21725: LD_ADDR_EXP 75
21729: PUSH
21730: LD_INT 0
21732: ST_TO_ADDR
// sBetray := false ;
21733: LD_ADDR_EXP 79
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
// sContamin := false ;
21741: LD_ADDR_EXP 80
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// sOil := false ;
21749: LD_ADDR_EXP 82
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// sStu := false ;
21757: LD_ADDR_EXP 86
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// sBazooka := false ;
21765: LD_ADDR_EXP 89
21769: PUSH
21770: LD_INT 0
21772: ST_TO_ADDR
// sMortar := false ;
21773: LD_ADDR_EXP 90
21777: PUSH
21778: LD_INT 0
21780: ST_TO_ADDR
// sRanger := false ;
21781: LD_ADDR_EXP 100
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// sComputer := false ;
21789: LD_ADDR_EXP 101
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// s30 := false ;
21797: LD_ADDR_EXP 102
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// s60 := false ;
21805: LD_ADDR_EXP 103
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// end ;
21813: LD_VAR 0 1
21817: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21818: LD_INT 0
21820: PPUSH
21821: PPUSH
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
21826: PPUSH
// result := [ ] ;
21827: LD_ADDR_VAR 0 2
21831: PUSH
21832: EMPTY
21833: ST_TO_ADDR
// if campaign_id = 1 then
21834: LD_OWVAR 69
21838: PUSH
21839: LD_INT 1
21841: EQUAL
21842: IFFALSE 25008
// begin case mission_number of 1 :
21844: LD_OWVAR 70
21848: PUSH
21849: LD_INT 1
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21857
21855: GO 21933
21857: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: LD_INT 4
21868: PUSH
21869: LD_INT 11
21871: PUSH
21872: LD_INT 12
21874: PUSH
21875: LD_INT 15
21877: PUSH
21878: LD_INT 16
21880: PUSH
21881: LD_INT 22
21883: PUSH
21884: LD_INT 23
21886: PUSH
21887: LD_INT 26
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 101
21903: PUSH
21904: LD_INT 102
21906: PUSH
21907: LD_INT 106
21909: PUSH
21910: LD_INT 116
21912: PUSH
21913: LD_INT 117
21915: PUSH
21916: LD_INT 118
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: ST_TO_ADDR
21931: GO 25006
21933: LD_INT 2
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 22025
21941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21942: LD_ADDR_VAR 0 2
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 4
21952: PUSH
21953: LD_INT 11
21955: PUSH
21956: LD_INT 12
21958: PUSH
21959: LD_INT 15
21961: PUSH
21962: LD_INT 16
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_INT 23
21970: PUSH
21971: LD_INT 26
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 101
21987: PUSH
21988: LD_INT 102
21990: PUSH
21991: LD_INT 105
21993: PUSH
21994: LD_INT 106
21996: PUSH
21997: LD_INT 108
21999: PUSH
22000: LD_INT 116
22002: PUSH
22003: LD_INT 117
22005: PUSH
22006: LD_INT 118
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: ST_TO_ADDR
22023: GO 25006
22025: LD_INT 3
22027: DOUBLE
22028: EQUAL
22029: IFTRUE 22033
22031: GO 22121
22033: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22034: LD_ADDR_VAR 0 2
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 4
22044: PUSH
22045: LD_INT 5
22047: PUSH
22048: LD_INT 11
22050: PUSH
22051: LD_INT 12
22053: PUSH
22054: LD_INT 15
22056: PUSH
22057: LD_INT 16
22059: PUSH
22060: LD_INT 22
22062: PUSH
22063: LD_INT 26
22065: PUSH
22066: LD_INT 36
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 101
22083: PUSH
22084: LD_INT 102
22086: PUSH
22087: LD_INT 105
22089: PUSH
22090: LD_INT 106
22092: PUSH
22093: LD_INT 108
22095: PUSH
22096: LD_INT 116
22098: PUSH
22099: LD_INT 117
22101: PUSH
22102: LD_INT 118
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: ST_TO_ADDR
22119: GO 25006
22121: LD_INT 4
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22225
22129: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: LD_INT 5
22143: PUSH
22144: LD_INT 8
22146: PUSH
22147: LD_INT 11
22149: PUSH
22150: LD_INT 12
22152: PUSH
22153: LD_INT 15
22155: PUSH
22156: LD_INT 16
22158: PUSH
22159: LD_INT 22
22161: PUSH
22162: LD_INT 23
22164: PUSH
22165: LD_INT 26
22167: PUSH
22168: LD_INT 36
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 101
22187: PUSH
22188: LD_INT 102
22190: PUSH
22191: LD_INT 105
22193: PUSH
22194: LD_INT 106
22196: PUSH
22197: LD_INT 108
22199: PUSH
22200: LD_INT 116
22202: PUSH
22203: LD_INT 117
22205: PUSH
22206: LD_INT 118
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: ST_TO_ADDR
22223: GO 25006
22225: LD_INT 5
22227: DOUBLE
22228: EQUAL
22229: IFTRUE 22233
22231: GO 22345
22233: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22234: LD_ADDR_VAR 0 2
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: LD_INT 4
22244: PUSH
22245: LD_INT 5
22247: PUSH
22248: LD_INT 6
22250: PUSH
22251: LD_INT 8
22253: PUSH
22254: LD_INT 11
22256: PUSH
22257: LD_INT 12
22259: PUSH
22260: LD_INT 15
22262: PUSH
22263: LD_INT 16
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 23
22271: PUSH
22272: LD_INT 25
22274: PUSH
22275: LD_INT 26
22277: PUSH
22278: LD_INT 36
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 101
22299: PUSH
22300: LD_INT 102
22302: PUSH
22303: LD_INT 105
22305: PUSH
22306: LD_INT 106
22308: PUSH
22309: LD_INT 108
22311: PUSH
22312: LD_INT 109
22314: PUSH
22315: LD_INT 112
22317: PUSH
22318: LD_INT 116
22320: PUSH
22321: LD_INT 117
22323: PUSH
22324: LD_INT 118
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: ST_TO_ADDR
22343: GO 25006
22345: LD_INT 6
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22353
22351: GO 22485
22353: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: LD_INT 4
22364: PUSH
22365: LD_INT 5
22367: PUSH
22368: LD_INT 6
22370: PUSH
22371: LD_INT 8
22373: PUSH
22374: LD_INT 11
22376: PUSH
22377: LD_INT 12
22379: PUSH
22380: LD_INT 15
22382: PUSH
22383: LD_INT 16
22385: PUSH
22386: LD_INT 20
22388: PUSH
22389: LD_INT 21
22391: PUSH
22392: LD_INT 22
22394: PUSH
22395: LD_INT 23
22397: PUSH
22398: LD_INT 25
22400: PUSH
22401: LD_INT 26
22403: PUSH
22404: LD_INT 30
22406: PUSH
22407: LD_INT 31
22409: PUSH
22410: LD_INT 32
22412: PUSH
22413: LD_INT 36
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 101
22439: PUSH
22440: LD_INT 102
22442: PUSH
22443: LD_INT 105
22445: PUSH
22446: LD_INT 106
22448: PUSH
22449: LD_INT 108
22451: PUSH
22452: LD_INT 109
22454: PUSH
22455: LD_INT 112
22457: PUSH
22458: LD_INT 116
22460: PUSH
22461: LD_INT 117
22463: PUSH
22464: LD_INT 118
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: ST_TO_ADDR
22483: GO 25006
22485: LD_INT 7
22487: DOUBLE
22488: EQUAL
22489: IFTRUE 22493
22491: GO 22605
22493: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22494: LD_ADDR_VAR 0 2
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 4
22504: PUSH
22505: LD_INT 5
22507: PUSH
22508: LD_INT 7
22510: PUSH
22511: LD_INT 11
22513: PUSH
22514: LD_INT 12
22516: PUSH
22517: LD_INT 15
22519: PUSH
22520: LD_INT 16
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 25
22537: PUSH
22538: LD_INT 26
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 101
22559: PUSH
22560: LD_INT 102
22562: PUSH
22563: LD_INT 103
22565: PUSH
22566: LD_INT 105
22568: PUSH
22569: LD_INT 106
22571: PUSH
22572: LD_INT 108
22574: PUSH
22575: LD_INT 112
22577: PUSH
22578: LD_INT 116
22580: PUSH
22581: LD_INT 117
22583: PUSH
22584: LD_INT 118
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: ST_TO_ADDR
22603: GO 25006
22605: LD_INT 8
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22753
22613: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22614: LD_ADDR_VAR 0 2
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 4
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: LD_INT 6
22630: PUSH
22631: LD_INT 7
22633: PUSH
22634: LD_INT 8
22636: PUSH
22637: LD_INT 11
22639: PUSH
22640: LD_INT 12
22642: PUSH
22643: LD_INT 15
22645: PUSH
22646: LD_INT 16
22648: PUSH
22649: LD_INT 20
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 22
22657: PUSH
22658: LD_INT 23
22660: PUSH
22661: LD_INT 25
22663: PUSH
22664: LD_INT 26
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: LD_INT 31
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 36
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 101
22703: PUSH
22704: LD_INT 102
22706: PUSH
22707: LD_INT 103
22709: PUSH
22710: LD_INT 105
22712: PUSH
22713: LD_INT 106
22715: PUSH
22716: LD_INT 108
22718: PUSH
22719: LD_INT 109
22721: PUSH
22722: LD_INT 112
22724: PUSH
22725: LD_INT 116
22727: PUSH
22728: LD_INT 117
22730: PUSH
22731: LD_INT 118
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: ST_TO_ADDR
22751: GO 25006
22753: LD_INT 9
22755: DOUBLE
22756: EQUAL
22757: IFTRUE 22761
22759: GO 22909
22761: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 4
22772: PUSH
22773: LD_INT 5
22775: PUSH
22776: LD_INT 6
22778: PUSH
22779: LD_INT 7
22781: PUSH
22782: LD_INT 8
22784: PUSH
22785: LD_INT 11
22787: PUSH
22788: LD_INT 12
22790: PUSH
22791: LD_INT 15
22793: PUSH
22794: LD_INT 16
22796: PUSH
22797: LD_INT 20
22799: PUSH
22800: LD_INT 21
22802: PUSH
22803: LD_INT 22
22805: PUSH
22806: LD_INT 23
22808: PUSH
22809: LD_INT 25
22811: PUSH
22812: LD_INT 26
22814: PUSH
22815: LD_INT 28
22817: PUSH
22818: LD_INT 30
22820: PUSH
22821: LD_INT 31
22823: PUSH
22824: LD_INT 32
22826: PUSH
22827: LD_INT 36
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 101
22855: PUSH
22856: LD_INT 102
22858: PUSH
22859: LD_INT 103
22861: PUSH
22862: LD_INT 105
22864: PUSH
22865: LD_INT 106
22867: PUSH
22868: LD_INT 108
22870: PUSH
22871: LD_INT 109
22873: PUSH
22874: LD_INT 112
22876: PUSH
22877: LD_INT 114
22879: PUSH
22880: LD_INT 116
22882: PUSH
22883: LD_INT 117
22885: PUSH
22886: LD_INT 118
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: ST_TO_ADDR
22907: GO 25006
22909: LD_INT 10
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 23113
22917: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22918: LD_ADDR_VAR 0 2
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 4
22928: PUSH
22929: LD_INT 5
22931: PUSH
22932: LD_INT 6
22934: PUSH
22935: LD_INT 7
22937: PUSH
22938: LD_INT 8
22940: PUSH
22941: LD_INT 9
22943: PUSH
22944: LD_INT 10
22946: PUSH
22947: LD_INT 11
22949: PUSH
22950: LD_INT 12
22952: PUSH
22953: LD_INT 13
22955: PUSH
22956: LD_INT 14
22958: PUSH
22959: LD_INT 15
22961: PUSH
22962: LD_INT 16
22964: PUSH
22965: LD_INT 17
22967: PUSH
22968: LD_INT 18
22970: PUSH
22971: LD_INT 19
22973: PUSH
22974: LD_INT 20
22976: PUSH
22977: LD_INT 21
22979: PUSH
22980: LD_INT 22
22982: PUSH
22983: LD_INT 23
22985: PUSH
22986: LD_INT 24
22988: PUSH
22989: LD_INT 25
22991: PUSH
22992: LD_INT 26
22994: PUSH
22995: LD_INT 28
22997: PUSH
22998: LD_INT 30
23000: PUSH
23001: LD_INT 31
23003: PUSH
23004: LD_INT 32
23006: PUSH
23007: LD_INT 36
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 101
23043: PUSH
23044: LD_INT 102
23046: PUSH
23047: LD_INT 103
23049: PUSH
23050: LD_INT 104
23052: PUSH
23053: LD_INT 105
23055: PUSH
23056: LD_INT 106
23058: PUSH
23059: LD_INT 107
23061: PUSH
23062: LD_INT 108
23064: PUSH
23065: LD_INT 109
23067: PUSH
23068: LD_INT 110
23070: PUSH
23071: LD_INT 111
23073: PUSH
23074: LD_INT 112
23076: PUSH
23077: LD_INT 114
23079: PUSH
23080: LD_INT 116
23082: PUSH
23083: LD_INT 117
23085: PUSH
23086: LD_INT 118
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: ST_TO_ADDR
23111: GO 25006
23113: LD_INT 11
23115: DOUBLE
23116: EQUAL
23117: IFTRUE 23121
23119: GO 23325
23121: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23122: LD_ADDR_VAR 0 2
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 4
23135: PUSH
23136: LD_INT 5
23138: PUSH
23139: LD_INT 6
23141: PUSH
23142: LD_INT 7
23144: PUSH
23145: LD_INT 8
23147: PUSH
23148: LD_INT 9
23150: PUSH
23151: LD_INT 10
23153: PUSH
23154: LD_INT 11
23156: PUSH
23157: LD_INT 12
23159: PUSH
23160: LD_INT 13
23162: PUSH
23163: LD_INT 14
23165: PUSH
23166: LD_INT 15
23168: PUSH
23169: LD_INT 16
23171: PUSH
23172: LD_INT 17
23174: PUSH
23175: LD_INT 18
23177: PUSH
23178: LD_INT 19
23180: PUSH
23181: LD_INT 20
23183: PUSH
23184: LD_INT 21
23186: PUSH
23187: LD_INT 22
23189: PUSH
23190: LD_INT 23
23192: PUSH
23193: LD_INT 24
23195: PUSH
23196: LD_INT 25
23198: PUSH
23199: LD_INT 26
23201: PUSH
23202: LD_INT 28
23204: PUSH
23205: LD_INT 30
23207: PUSH
23208: LD_INT 31
23210: PUSH
23211: LD_INT 32
23213: PUSH
23214: LD_INT 34
23216: PUSH
23217: LD_INT 36
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 101
23255: PUSH
23256: LD_INT 102
23258: PUSH
23259: LD_INT 103
23261: PUSH
23262: LD_INT 104
23264: PUSH
23265: LD_INT 105
23267: PUSH
23268: LD_INT 106
23270: PUSH
23271: LD_INT 107
23273: PUSH
23274: LD_INT 108
23276: PUSH
23277: LD_INT 109
23279: PUSH
23280: LD_INT 110
23282: PUSH
23283: LD_INT 111
23285: PUSH
23286: LD_INT 112
23288: PUSH
23289: LD_INT 114
23291: PUSH
23292: LD_INT 116
23294: PUSH
23295: LD_INT 117
23297: PUSH
23298: LD_INT 118
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: ST_TO_ADDR
23323: GO 25006
23325: LD_INT 12
23327: DOUBLE
23328: EQUAL
23329: IFTRUE 23333
23331: GO 23553
23333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23334: LD_ADDR_VAR 0 2
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: LD_INT 6
23356: PUSH
23357: LD_INT 7
23359: PUSH
23360: LD_INT 8
23362: PUSH
23363: LD_INT 9
23365: PUSH
23366: LD_INT 10
23368: PUSH
23369: LD_INT 11
23371: PUSH
23372: LD_INT 12
23374: PUSH
23375: LD_INT 13
23377: PUSH
23378: LD_INT 14
23380: PUSH
23381: LD_INT 15
23383: PUSH
23384: LD_INT 16
23386: PUSH
23387: LD_INT 17
23389: PUSH
23390: LD_INT 18
23392: PUSH
23393: LD_INT 19
23395: PUSH
23396: LD_INT 20
23398: PUSH
23399: LD_INT 21
23401: PUSH
23402: LD_INT 22
23404: PUSH
23405: LD_INT 23
23407: PUSH
23408: LD_INT 24
23410: PUSH
23411: LD_INT 25
23413: PUSH
23414: LD_INT 26
23416: PUSH
23417: LD_INT 27
23419: PUSH
23420: LD_INT 28
23422: PUSH
23423: LD_INT 30
23425: PUSH
23426: LD_INT 31
23428: PUSH
23429: LD_INT 32
23431: PUSH
23432: LD_INT 33
23434: PUSH
23435: LD_INT 34
23437: PUSH
23438: LD_INT 36
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 101
23479: PUSH
23480: LD_INT 102
23482: PUSH
23483: LD_INT 103
23485: PUSH
23486: LD_INT 104
23488: PUSH
23489: LD_INT 105
23491: PUSH
23492: LD_INT 106
23494: PUSH
23495: LD_INT 107
23497: PUSH
23498: LD_INT 108
23500: PUSH
23501: LD_INT 109
23503: PUSH
23504: LD_INT 110
23506: PUSH
23507: LD_INT 111
23509: PUSH
23510: LD_INT 112
23512: PUSH
23513: LD_INT 113
23515: PUSH
23516: LD_INT 114
23518: PUSH
23519: LD_INT 116
23521: PUSH
23522: LD_INT 117
23524: PUSH
23525: LD_INT 118
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: ST_TO_ADDR
23551: GO 25006
23553: LD_INT 13
23555: DOUBLE
23556: EQUAL
23557: IFTRUE 23561
23559: GO 23769
23561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23562: LD_ADDR_VAR 0 2
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: LD_INT 2
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: LD_INT 4
23578: PUSH
23579: LD_INT 5
23581: PUSH
23582: LD_INT 8
23584: PUSH
23585: LD_INT 9
23587: PUSH
23588: LD_INT 10
23590: PUSH
23591: LD_INT 11
23593: PUSH
23594: LD_INT 12
23596: PUSH
23597: LD_INT 14
23599: PUSH
23600: LD_INT 15
23602: PUSH
23603: LD_INT 16
23605: PUSH
23606: LD_INT 17
23608: PUSH
23609: LD_INT 18
23611: PUSH
23612: LD_INT 19
23614: PUSH
23615: LD_INT 20
23617: PUSH
23618: LD_INT 21
23620: PUSH
23621: LD_INT 22
23623: PUSH
23624: LD_INT 23
23626: PUSH
23627: LD_INT 24
23629: PUSH
23630: LD_INT 25
23632: PUSH
23633: LD_INT 26
23635: PUSH
23636: LD_INT 27
23638: PUSH
23639: LD_INT 28
23641: PUSH
23642: LD_INT 30
23644: PUSH
23645: LD_INT 31
23647: PUSH
23648: LD_INT 32
23650: PUSH
23651: LD_INT 33
23653: PUSH
23654: LD_INT 34
23656: PUSH
23657: LD_INT 36
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 101
23695: PUSH
23696: LD_INT 102
23698: PUSH
23699: LD_INT 103
23701: PUSH
23702: LD_INT 104
23704: PUSH
23705: LD_INT 105
23707: PUSH
23708: LD_INT 106
23710: PUSH
23711: LD_INT 107
23713: PUSH
23714: LD_INT 108
23716: PUSH
23717: LD_INT 109
23719: PUSH
23720: LD_INT 110
23722: PUSH
23723: LD_INT 111
23725: PUSH
23726: LD_INT 112
23728: PUSH
23729: LD_INT 113
23731: PUSH
23732: LD_INT 114
23734: PUSH
23735: LD_INT 116
23737: PUSH
23738: LD_INT 117
23740: PUSH
23741: LD_INT 118
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: ST_TO_ADDR
23767: GO 25006
23769: LD_INT 14
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23777
23775: GO 24001
23777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23778: LD_ADDR_VAR 0 2
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: LD_INT 4
23794: PUSH
23795: LD_INT 5
23797: PUSH
23798: LD_INT 6
23800: PUSH
23801: LD_INT 7
23803: PUSH
23804: LD_INT 8
23806: PUSH
23807: LD_INT 9
23809: PUSH
23810: LD_INT 10
23812: PUSH
23813: LD_INT 11
23815: PUSH
23816: LD_INT 12
23818: PUSH
23819: LD_INT 13
23821: PUSH
23822: LD_INT 14
23824: PUSH
23825: LD_INT 15
23827: PUSH
23828: LD_INT 16
23830: PUSH
23831: LD_INT 17
23833: PUSH
23834: LD_INT 18
23836: PUSH
23837: LD_INT 19
23839: PUSH
23840: LD_INT 20
23842: PUSH
23843: LD_INT 21
23845: PUSH
23846: LD_INT 22
23848: PUSH
23849: LD_INT 23
23851: PUSH
23852: LD_INT 24
23854: PUSH
23855: LD_INT 25
23857: PUSH
23858: LD_INT 26
23860: PUSH
23861: LD_INT 27
23863: PUSH
23864: LD_INT 28
23866: PUSH
23867: LD_INT 29
23869: PUSH
23870: LD_INT 30
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: LD_INT 32
23878: PUSH
23879: LD_INT 33
23881: PUSH
23882: LD_INT 34
23884: PUSH
23885: LD_INT 36
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 101
23927: PUSH
23928: LD_INT 102
23930: PUSH
23931: LD_INT 103
23933: PUSH
23934: LD_INT 104
23936: PUSH
23937: LD_INT 105
23939: PUSH
23940: LD_INT 106
23942: PUSH
23943: LD_INT 107
23945: PUSH
23946: LD_INT 108
23948: PUSH
23949: LD_INT 109
23951: PUSH
23952: LD_INT 110
23954: PUSH
23955: LD_INT 111
23957: PUSH
23958: LD_INT 112
23960: PUSH
23961: LD_INT 113
23963: PUSH
23964: LD_INT 114
23966: PUSH
23967: LD_INT 116
23969: PUSH
23970: LD_INT 117
23972: PUSH
23973: LD_INT 118
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: ST_TO_ADDR
23999: GO 25006
24001: LD_INT 15
24003: DOUBLE
24004: EQUAL
24005: IFTRUE 24009
24007: GO 24233
24009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24010: LD_ADDR_VAR 0 2
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 3
24023: PUSH
24024: LD_INT 4
24026: PUSH
24027: LD_INT 5
24029: PUSH
24030: LD_INT 6
24032: PUSH
24033: LD_INT 7
24035: PUSH
24036: LD_INT 8
24038: PUSH
24039: LD_INT 9
24041: PUSH
24042: LD_INT 10
24044: PUSH
24045: LD_INT 11
24047: PUSH
24048: LD_INT 12
24050: PUSH
24051: LD_INT 13
24053: PUSH
24054: LD_INT 14
24056: PUSH
24057: LD_INT 15
24059: PUSH
24060: LD_INT 16
24062: PUSH
24063: LD_INT 17
24065: PUSH
24066: LD_INT 18
24068: PUSH
24069: LD_INT 19
24071: PUSH
24072: LD_INT 20
24074: PUSH
24075: LD_INT 21
24077: PUSH
24078: LD_INT 22
24080: PUSH
24081: LD_INT 23
24083: PUSH
24084: LD_INT 24
24086: PUSH
24087: LD_INT 25
24089: PUSH
24090: LD_INT 26
24092: PUSH
24093: LD_INT 27
24095: PUSH
24096: LD_INT 28
24098: PUSH
24099: LD_INT 29
24101: PUSH
24102: LD_INT 30
24104: PUSH
24105: LD_INT 31
24107: PUSH
24108: LD_INT 32
24110: PUSH
24111: LD_INT 33
24113: PUSH
24114: LD_INT 34
24116: PUSH
24117: LD_INT 36
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 101
24159: PUSH
24160: LD_INT 102
24162: PUSH
24163: LD_INT 103
24165: PUSH
24166: LD_INT 104
24168: PUSH
24169: LD_INT 105
24171: PUSH
24172: LD_INT 106
24174: PUSH
24175: LD_INT 107
24177: PUSH
24178: LD_INT 108
24180: PUSH
24181: LD_INT 109
24183: PUSH
24184: LD_INT 110
24186: PUSH
24187: LD_INT 111
24189: PUSH
24190: LD_INT 112
24192: PUSH
24193: LD_INT 113
24195: PUSH
24196: LD_INT 114
24198: PUSH
24199: LD_INT 116
24201: PUSH
24202: LD_INT 117
24204: PUSH
24205: LD_INT 118
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: ST_TO_ADDR
24231: GO 25006
24233: LD_INT 16
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24377
24241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24242: LD_ADDR_VAR 0 2
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: LD_INT 4
24252: PUSH
24253: LD_INT 5
24255: PUSH
24256: LD_INT 7
24258: PUSH
24259: LD_INT 11
24261: PUSH
24262: LD_INT 12
24264: PUSH
24265: LD_INT 15
24267: PUSH
24268: LD_INT 16
24270: PUSH
24271: LD_INT 20
24273: PUSH
24274: LD_INT 21
24276: PUSH
24277: LD_INT 22
24279: PUSH
24280: LD_INT 23
24282: PUSH
24283: LD_INT 25
24285: PUSH
24286: LD_INT 26
24288: PUSH
24289: LD_INT 30
24291: PUSH
24292: LD_INT 31
24294: PUSH
24295: LD_INT 32
24297: PUSH
24298: LD_INT 33
24300: PUSH
24301: LD_INT 34
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 101
24327: PUSH
24328: LD_INT 102
24330: PUSH
24331: LD_INT 103
24333: PUSH
24334: LD_INT 106
24336: PUSH
24337: LD_INT 108
24339: PUSH
24340: LD_INT 112
24342: PUSH
24343: LD_INT 113
24345: PUSH
24346: LD_INT 114
24348: PUSH
24349: LD_INT 116
24351: PUSH
24352: LD_INT 117
24354: PUSH
24355: LD_INT 118
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: ST_TO_ADDR
24375: GO 25006
24377: LD_INT 17
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24609
24385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24386: LD_ADDR_VAR 0 2
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 4
24402: PUSH
24403: LD_INT 5
24405: PUSH
24406: LD_INT 6
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 8
24414: PUSH
24415: LD_INT 9
24417: PUSH
24418: LD_INT 10
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: LD_INT 12
24426: PUSH
24427: LD_INT 13
24429: PUSH
24430: LD_INT 14
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 17
24441: PUSH
24442: LD_INT 18
24444: PUSH
24445: LD_INT 19
24447: PUSH
24448: LD_INT 20
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 24
24462: PUSH
24463: LD_INT 25
24465: PUSH
24466: LD_INT 26
24468: PUSH
24469: LD_INT 27
24471: PUSH
24472: LD_INT 28
24474: PUSH
24475: LD_INT 29
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 31
24483: PUSH
24484: LD_INT 32
24486: PUSH
24487: LD_INT 33
24489: PUSH
24490: LD_INT 34
24492: PUSH
24493: LD_INT 36
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 101
24535: PUSH
24536: LD_INT 102
24538: PUSH
24539: LD_INT 103
24541: PUSH
24542: LD_INT 104
24544: PUSH
24545: LD_INT 105
24547: PUSH
24548: LD_INT 106
24550: PUSH
24551: LD_INT 107
24553: PUSH
24554: LD_INT 108
24556: PUSH
24557: LD_INT 109
24559: PUSH
24560: LD_INT 110
24562: PUSH
24563: LD_INT 111
24565: PUSH
24566: LD_INT 112
24568: PUSH
24569: LD_INT 113
24571: PUSH
24572: LD_INT 114
24574: PUSH
24575: LD_INT 116
24577: PUSH
24578: LD_INT 117
24580: PUSH
24581: LD_INT 118
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: ST_TO_ADDR
24607: GO 25006
24609: LD_INT 18
24611: DOUBLE
24612: EQUAL
24613: IFTRUE 24617
24615: GO 24765
24617: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 4
24628: PUSH
24629: LD_INT 5
24631: PUSH
24632: LD_INT 7
24634: PUSH
24635: LD_INT 11
24637: PUSH
24638: LD_INT 12
24640: PUSH
24641: LD_INT 15
24643: PUSH
24644: LD_INT 16
24646: PUSH
24647: LD_INT 20
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 22
24655: PUSH
24656: LD_INT 23
24658: PUSH
24659: LD_INT 25
24661: PUSH
24662: LD_INT 26
24664: PUSH
24665: LD_INT 30
24667: PUSH
24668: LD_INT 31
24670: PUSH
24671: LD_INT 32
24673: PUSH
24674: LD_INT 33
24676: PUSH
24677: LD_INT 34
24679: PUSH
24680: LD_INT 35
24682: PUSH
24683: LD_INT 36
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 101
24711: PUSH
24712: LD_INT 102
24714: PUSH
24715: LD_INT 103
24717: PUSH
24718: LD_INT 106
24720: PUSH
24721: LD_INT 108
24723: PUSH
24724: LD_INT 112
24726: PUSH
24727: LD_INT 113
24729: PUSH
24730: LD_INT 114
24732: PUSH
24733: LD_INT 115
24735: PUSH
24736: LD_INT 116
24738: PUSH
24739: LD_INT 117
24741: PUSH
24742: LD_INT 118
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: ST_TO_ADDR
24763: GO 25006
24765: LD_INT 19
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 25005
24773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24774: LD_ADDR_VAR 0 2
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: LD_INT 3
24787: PUSH
24788: LD_INT 4
24790: PUSH
24791: LD_INT 5
24793: PUSH
24794: LD_INT 6
24796: PUSH
24797: LD_INT 7
24799: PUSH
24800: LD_INT 8
24802: PUSH
24803: LD_INT 9
24805: PUSH
24806: LD_INT 10
24808: PUSH
24809: LD_INT 11
24811: PUSH
24812: LD_INT 12
24814: PUSH
24815: LD_INT 13
24817: PUSH
24818: LD_INT 14
24820: PUSH
24821: LD_INT 15
24823: PUSH
24824: LD_INT 16
24826: PUSH
24827: LD_INT 17
24829: PUSH
24830: LD_INT 18
24832: PUSH
24833: LD_INT 19
24835: PUSH
24836: LD_INT 20
24838: PUSH
24839: LD_INT 21
24841: PUSH
24842: LD_INT 22
24844: PUSH
24845: LD_INT 23
24847: PUSH
24848: LD_INT 24
24850: PUSH
24851: LD_INT 25
24853: PUSH
24854: LD_INT 26
24856: PUSH
24857: LD_INT 27
24859: PUSH
24860: LD_INT 28
24862: PUSH
24863: LD_INT 29
24865: PUSH
24866: LD_INT 30
24868: PUSH
24869: LD_INT 31
24871: PUSH
24872: LD_INT 32
24874: PUSH
24875: LD_INT 33
24877: PUSH
24878: LD_INT 34
24880: PUSH
24881: LD_INT 35
24883: PUSH
24884: LD_INT 36
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 101
24927: PUSH
24928: LD_INT 102
24930: PUSH
24931: LD_INT 103
24933: PUSH
24934: LD_INT 104
24936: PUSH
24937: LD_INT 105
24939: PUSH
24940: LD_INT 106
24942: PUSH
24943: LD_INT 107
24945: PUSH
24946: LD_INT 108
24948: PUSH
24949: LD_INT 109
24951: PUSH
24952: LD_INT 110
24954: PUSH
24955: LD_INT 111
24957: PUSH
24958: LD_INT 112
24960: PUSH
24961: LD_INT 113
24963: PUSH
24964: LD_INT 114
24966: PUSH
24967: LD_INT 115
24969: PUSH
24970: LD_INT 116
24972: PUSH
24973: LD_INT 117
24975: PUSH
24976: LD_INT 118
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: ST_TO_ADDR
25003: GO 25006
25005: POP
// end else
25006: GO 25237
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25008: LD_ADDR_VAR 0 2
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 3
25021: PUSH
25022: LD_INT 4
25024: PUSH
25025: LD_INT 5
25027: PUSH
25028: LD_INT 6
25030: PUSH
25031: LD_INT 7
25033: PUSH
25034: LD_INT 8
25036: PUSH
25037: LD_INT 9
25039: PUSH
25040: LD_INT 10
25042: PUSH
25043: LD_INT 11
25045: PUSH
25046: LD_INT 12
25048: PUSH
25049: LD_INT 13
25051: PUSH
25052: LD_INT 14
25054: PUSH
25055: LD_INT 15
25057: PUSH
25058: LD_INT 16
25060: PUSH
25061: LD_INT 17
25063: PUSH
25064: LD_INT 18
25066: PUSH
25067: LD_INT 19
25069: PUSH
25070: LD_INT 20
25072: PUSH
25073: LD_INT 21
25075: PUSH
25076: LD_INT 22
25078: PUSH
25079: LD_INT 23
25081: PUSH
25082: LD_INT 24
25084: PUSH
25085: LD_INT 25
25087: PUSH
25088: LD_INT 26
25090: PUSH
25091: LD_INT 27
25093: PUSH
25094: LD_INT 28
25096: PUSH
25097: LD_INT 29
25099: PUSH
25100: LD_INT 30
25102: PUSH
25103: LD_INT 31
25105: PUSH
25106: LD_INT 32
25108: PUSH
25109: LD_INT 33
25111: PUSH
25112: LD_INT 34
25114: PUSH
25115: LD_INT 35
25117: PUSH
25118: LD_INT 36
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 101
25161: PUSH
25162: LD_INT 102
25164: PUSH
25165: LD_INT 103
25167: PUSH
25168: LD_INT 104
25170: PUSH
25171: LD_INT 105
25173: PUSH
25174: LD_INT 106
25176: PUSH
25177: LD_INT 107
25179: PUSH
25180: LD_INT 108
25182: PUSH
25183: LD_INT 109
25185: PUSH
25186: LD_INT 110
25188: PUSH
25189: LD_INT 111
25191: PUSH
25192: LD_INT 112
25194: PUSH
25195: LD_INT 113
25197: PUSH
25198: LD_INT 114
25200: PUSH
25201: LD_INT 115
25203: PUSH
25204: LD_INT 116
25206: PUSH
25207: LD_INT 117
25209: PUSH
25210: LD_INT 118
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// if result then
25237: LD_VAR 0 2
25241: IFFALSE 26027
// begin normal :=  ;
25243: LD_ADDR_VAR 0 5
25247: PUSH
25248: LD_STRING 
25250: ST_TO_ADDR
// hardcore :=  ;
25251: LD_ADDR_VAR 0 6
25255: PUSH
25256: LD_STRING 
25258: ST_TO_ADDR
// active :=  ;
25259: LD_ADDR_VAR 0 7
25263: PUSH
25264: LD_STRING 
25266: ST_TO_ADDR
// for i = 1 to normalCounter do
25267: LD_ADDR_VAR 0 8
25271: PUSH
25272: DOUBLE
25273: LD_INT 1
25275: DEC
25276: ST_TO_ADDR
25277: LD_EXP 48
25281: PUSH
25282: FOR_TO
25283: IFFALSE 25384
// begin tmp := 0 ;
25285: LD_ADDR_VAR 0 3
25289: PUSH
25290: LD_STRING 0
25292: ST_TO_ADDR
// if result [ 1 ] then
25293: LD_VAR 0 2
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: IFFALSE 25366
// if result [ 1 ] [ 1 ] = i then
25303: LD_VAR 0 2
25307: PUSH
25308: LD_INT 1
25310: ARRAY
25311: PUSH
25312: LD_INT 1
25314: ARRAY
25315: PUSH
25316: LD_VAR 0 8
25320: EQUAL
25321: IFFALSE 25366
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25323: LD_ADDR_VAR 0 2
25327: PUSH
25328: LD_VAR 0 2
25332: PPUSH
25333: LD_INT 1
25335: PPUSH
25336: LD_VAR 0 2
25340: PUSH
25341: LD_INT 1
25343: ARRAY
25344: PPUSH
25345: LD_INT 1
25347: PPUSH
25348: CALL_OW 3
25352: PPUSH
25353: CALL_OW 1
25357: ST_TO_ADDR
// tmp := 1 ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_STRING 1
25365: ST_TO_ADDR
// end ; normal := normal & tmp ;
25366: LD_ADDR_VAR 0 5
25370: PUSH
25371: LD_VAR 0 5
25375: PUSH
25376: LD_VAR 0 3
25380: STR
25381: ST_TO_ADDR
// end ;
25382: GO 25282
25384: POP
25385: POP
// for i = 1 to hardcoreCounter do
25386: LD_ADDR_VAR 0 8
25390: PUSH
25391: DOUBLE
25392: LD_INT 1
25394: DEC
25395: ST_TO_ADDR
25396: LD_EXP 49
25400: PUSH
25401: FOR_TO
25402: IFFALSE 25507
// begin tmp := 0 ;
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_STRING 0
25411: ST_TO_ADDR
// if result [ 2 ] then
25412: LD_VAR 0 2
25416: PUSH
25417: LD_INT 2
25419: ARRAY
25420: IFFALSE 25489
// if result [ 2 ] [ 1 ] = 100 + i then
25422: LD_VAR 0 2
25426: PUSH
25427: LD_INT 2
25429: ARRAY
25430: PUSH
25431: LD_INT 1
25433: ARRAY
25434: PUSH
25435: LD_INT 100
25437: PUSH
25438: LD_VAR 0 8
25442: PLUS
25443: EQUAL
25444: IFFALSE 25489
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25446: LD_ADDR_VAR 0 2
25450: PUSH
25451: LD_VAR 0 2
25455: PPUSH
25456: LD_INT 2
25458: PPUSH
25459: LD_VAR 0 2
25463: PUSH
25464: LD_INT 2
25466: ARRAY
25467: PPUSH
25468: LD_INT 1
25470: PPUSH
25471: CALL_OW 3
25475: PPUSH
25476: CALL_OW 1
25480: ST_TO_ADDR
// tmp := 1 ;
25481: LD_ADDR_VAR 0 3
25485: PUSH
25486: LD_STRING 1
25488: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25489: LD_ADDR_VAR 0 6
25493: PUSH
25494: LD_VAR 0 6
25498: PUSH
25499: LD_VAR 0 3
25503: STR
25504: ST_TO_ADDR
// end ;
25505: GO 25401
25507: POP
25508: POP
// if isGameLoad then
25509: LD_VAR 0 1
25513: IFFALSE 25988
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25515: LD_ADDR_VAR 0 4
25519: PUSH
25520: LD_EXP 52
25524: PUSH
25525: LD_EXP 51
25529: PUSH
25530: LD_EXP 53
25534: PUSH
25535: LD_EXP 50
25539: PUSH
25540: LD_EXP 54
25544: PUSH
25545: LD_EXP 55
25549: PUSH
25550: LD_EXP 56
25554: PUSH
25555: LD_EXP 57
25559: PUSH
25560: LD_EXP 58
25564: PUSH
25565: LD_EXP 59
25569: PUSH
25570: LD_EXP 60
25574: PUSH
25575: LD_EXP 61
25579: PUSH
25580: LD_EXP 62
25584: PUSH
25585: LD_EXP 63
25589: PUSH
25590: LD_EXP 71
25594: PUSH
25595: LD_EXP 72
25599: PUSH
25600: LD_EXP 73
25604: PUSH
25605: LD_EXP 74
25609: PUSH
25610: LD_EXP 76
25614: PUSH
25615: LD_EXP 77
25619: PUSH
25620: LD_EXP 78
25624: PUSH
25625: LD_EXP 81
25629: PUSH
25630: LD_EXP 83
25634: PUSH
25635: LD_EXP 84
25639: PUSH
25640: LD_EXP 85
25644: PUSH
25645: LD_EXP 87
25649: PUSH
25650: LD_EXP 88
25654: PUSH
25655: LD_EXP 91
25659: PUSH
25660: LD_EXP 92
25664: PUSH
25665: LD_EXP 93
25669: PUSH
25670: LD_EXP 94
25674: PUSH
25675: LD_EXP 95
25679: PUSH
25680: LD_EXP 96
25684: PUSH
25685: LD_EXP 97
25689: PUSH
25690: LD_EXP 98
25694: PUSH
25695: LD_EXP 99
25699: PUSH
25700: LD_EXP 64
25704: PUSH
25705: LD_EXP 65
25709: PUSH
25710: LD_EXP 68
25714: PUSH
25715: LD_EXP 69
25719: PUSH
25720: LD_EXP 70
25724: PUSH
25725: LD_EXP 66
25729: PUSH
25730: LD_EXP 67
25734: PUSH
25735: LD_EXP 75
25739: PUSH
25740: LD_EXP 79
25744: PUSH
25745: LD_EXP 80
25749: PUSH
25750: LD_EXP 82
25754: PUSH
25755: LD_EXP 86
25759: PUSH
25760: LD_EXP 89
25764: PUSH
25765: LD_EXP 90
25769: PUSH
25770: LD_EXP 100
25774: PUSH
25775: LD_EXP 101
25779: PUSH
25780: LD_EXP 102
25784: PUSH
25785: LD_EXP 103
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
// tmp :=  ;
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_STRING 
25853: ST_TO_ADDR
// for i = 1 to normalCounter do
25854: LD_ADDR_VAR 0 8
25858: PUSH
25859: DOUBLE
25860: LD_INT 1
25862: DEC
25863: ST_TO_ADDR
25864: LD_EXP 48
25868: PUSH
25869: FOR_TO
25870: IFFALSE 25906
// begin if flags [ i ] then
25872: LD_VAR 0 4
25876: PUSH
25877: LD_VAR 0 8
25881: ARRAY
25882: IFFALSE 25904
// tmp := tmp & i & ; ;
25884: LD_ADDR_VAR 0 3
25888: PUSH
25889: LD_VAR 0 3
25893: PUSH
25894: LD_VAR 0 8
25898: STR
25899: PUSH
25900: LD_STRING ;
25902: STR
25903: ST_TO_ADDR
// end ;
25904: GO 25869
25906: POP
25907: POP
// for i = 1 to hardcoreCounter do
25908: LD_ADDR_VAR 0 8
25912: PUSH
25913: DOUBLE
25914: LD_INT 1
25916: DEC
25917: ST_TO_ADDR
25918: LD_EXP 49
25922: PUSH
25923: FOR_TO
25924: IFFALSE 25970
// begin if flags [ normalCounter + i ] then
25926: LD_VAR 0 4
25930: PUSH
25931: LD_EXP 48
25935: PUSH
25936: LD_VAR 0 8
25940: PLUS
25941: ARRAY
25942: IFFALSE 25968
// tmp := tmp & ( 100 + i ) & ; ;
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_VAR 0 3
25953: PUSH
25954: LD_INT 100
25956: PUSH
25957: LD_VAR 0 8
25961: PLUS
25962: STR
25963: PUSH
25964: LD_STRING ;
25966: STR
25967: ST_TO_ADDR
// end ;
25968: GO 25923
25970: POP
25971: POP
// if tmp then
25972: LD_VAR 0 3
25976: IFFALSE 25988
// active := tmp ;
25978: LD_ADDR_VAR 0 7
25982: PUSH
25983: LD_VAR 0 3
25987: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25988: LD_STRING getStreamItemsFromMission("
25990: PUSH
25991: LD_VAR 0 5
25995: STR
25996: PUSH
25997: LD_STRING ","
25999: STR
26000: PUSH
26001: LD_VAR 0 6
26005: STR
26006: PUSH
26007: LD_STRING ","
26009: STR
26010: PUSH
26011: LD_VAR 0 7
26015: STR
26016: PUSH
26017: LD_STRING ")
26019: STR
26020: PPUSH
26021: CALL_OW 559
// end else
26025: GO 26034
// ToLua ( getStreamItemsFromMission("","","") ) ;
26027: LD_STRING getStreamItemsFromMission("","","")
26029: PPUSH
26030: CALL_OW 559
// end ;
26034: LD_VAR 0 2
26038: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26039: LD_EXP 47
26043: IFFALSE 26051
26045: PUSH
26046: LD_EXP 52
26050: AND
26051: IFFALSE 26175
26053: GO 26055
26055: DISABLE
26056: LD_INT 0
26058: PPUSH
26059: PPUSH
// begin enable ;
26060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: LD_INT 22
26068: PUSH
26069: LD_OWVAR 2
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 2
26080: PUSH
26081: LD_INT 34
26083: PUSH
26084: LD_INT 7
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 34
26093: PUSH
26094: LD_INT 45
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 34
26103: PUSH
26104: LD_INT 28
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 34
26113: PUSH
26114: LD_INT 47
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PPUSH
26132: CALL_OW 69
26136: ST_TO_ADDR
// if not tmp then
26137: LD_VAR 0 2
26141: NOT
26142: IFFALSE 26146
// exit ;
26144: GO 26175
// for i in tmp do
26146: LD_ADDR_VAR 0 1
26150: PUSH
26151: LD_VAR 0 2
26155: PUSH
26156: FOR_IN
26157: IFFALSE 26173
// begin SetLives ( i , 0 ) ;
26159: LD_VAR 0 1
26163: PPUSH
26164: LD_INT 0
26166: PPUSH
26167: CALL_OW 234
// end ;
26171: GO 26156
26173: POP
26174: POP
// end ;
26175: PPOPN 2
26177: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26178: LD_EXP 47
26182: IFFALSE 26190
26184: PUSH
26185: LD_EXP 53
26189: AND
26190: IFFALSE 26274
26192: GO 26194
26194: DISABLE
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
// begin enable ;
26199: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26200: LD_ADDR_VAR 0 2
26204: PUSH
26205: LD_INT 22
26207: PUSH
26208: LD_OWVAR 2
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 32
26219: PUSH
26220: LD_INT 3
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PPUSH
26231: CALL_OW 69
26235: ST_TO_ADDR
// if not tmp then
26236: LD_VAR 0 2
26240: NOT
26241: IFFALSE 26245
// exit ;
26243: GO 26274
// for i in tmp do
26245: LD_ADDR_VAR 0 1
26249: PUSH
26250: LD_VAR 0 2
26254: PUSH
26255: FOR_IN
26256: IFFALSE 26272
// begin SetLives ( i , 0 ) ;
26258: LD_VAR 0 1
26262: PPUSH
26263: LD_INT 0
26265: PPUSH
26266: CALL_OW 234
// end ;
26270: GO 26255
26272: POP
26273: POP
// end ;
26274: PPOPN 2
26276: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26277: LD_EXP 47
26281: IFFALSE 26289
26283: PUSH
26284: LD_EXP 50
26288: AND
26289: IFFALSE 26382
26291: GO 26293
26293: DISABLE
26294: LD_INT 0
26296: PPUSH
// begin enable ;
26297: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26298: LD_ADDR_VAR 0 1
26302: PUSH
26303: LD_INT 22
26305: PUSH
26306: LD_OWVAR 2
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: LD_INT 25
26320: PUSH
26321: LD_INT 5
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 25
26330: PUSH
26331: LD_INT 9
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 25
26340: PUSH
26341: LD_INT 8
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PPUSH
26358: CALL_OW 69
26362: PUSH
26363: FOR_IN
26364: IFFALSE 26380
// begin SetClass ( i , 1 ) ;
26366: LD_VAR 0 1
26370: PPUSH
26371: LD_INT 1
26373: PPUSH
26374: CALL_OW 336
// end ;
26378: GO 26363
26380: POP
26381: POP
// end ;
26382: PPOPN 1
26384: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26385: LD_EXP 47
26389: IFFALSE 26397
26391: PUSH
26392: LD_EXP 51
26396: AND
26397: IFFALSE 26409
26399: PUSH
26400: LD_OWVAR 65
26404: PUSH
26405: LD_INT 7
26407: LESS
26408: AND
26409: IFFALSE 26423
26411: GO 26413
26413: DISABLE
// begin enable ;
26414: ENABLE
// game_speed := 7 ;
26415: LD_ADDR_OWVAR 65
26419: PUSH
26420: LD_INT 7
26422: ST_TO_ADDR
// end ;
26423: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26424: LD_EXP 47
26428: IFFALSE 26436
26430: PUSH
26431: LD_EXP 54
26435: AND
26436: IFFALSE 26638
26438: GO 26440
26440: DISABLE
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
26445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26446: LD_ADDR_VAR 0 3
26450: PUSH
26451: LD_INT 81
26453: PUSH
26454: LD_OWVAR 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 21
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: ST_TO_ADDR
// if not tmp then
26482: LD_VAR 0 3
26486: NOT
26487: IFFALSE 26491
// exit ;
26489: GO 26638
// if tmp > 5 then
26491: LD_VAR 0 3
26495: PUSH
26496: LD_INT 5
26498: GREATER
26499: IFFALSE 26511
// k := 5 else
26501: LD_ADDR_VAR 0 2
26505: PUSH
26506: LD_INT 5
26508: ST_TO_ADDR
26509: GO 26521
// k := tmp ;
26511: LD_ADDR_VAR 0 2
26515: PUSH
26516: LD_VAR 0 3
26520: ST_TO_ADDR
// for i := 1 to k do
26521: LD_ADDR_VAR 0 1
26525: PUSH
26526: DOUBLE
26527: LD_INT 1
26529: DEC
26530: ST_TO_ADDR
26531: LD_VAR 0 2
26535: PUSH
26536: FOR_TO
26537: IFFALSE 26636
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26539: LD_VAR 0 3
26543: PUSH
26544: LD_VAR 0 1
26548: ARRAY
26549: PPUSH
26550: LD_VAR 0 1
26554: PUSH
26555: LD_INT 4
26557: MOD
26558: PUSH
26559: LD_INT 1
26561: PLUS
26562: PPUSH
26563: CALL_OW 259
26567: PUSH
26568: LD_INT 10
26570: LESS
26571: IFFALSE 26634
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26573: LD_VAR 0 3
26577: PUSH
26578: LD_VAR 0 1
26582: ARRAY
26583: PPUSH
26584: LD_VAR 0 1
26588: PUSH
26589: LD_INT 4
26591: MOD
26592: PUSH
26593: LD_INT 1
26595: PLUS
26596: PPUSH
26597: LD_VAR 0 3
26601: PUSH
26602: LD_VAR 0 1
26606: ARRAY
26607: PPUSH
26608: LD_VAR 0 1
26612: PUSH
26613: LD_INT 4
26615: MOD
26616: PUSH
26617: LD_INT 1
26619: PLUS
26620: PPUSH
26621: CALL_OW 259
26625: PUSH
26626: LD_INT 1
26628: PLUS
26629: PPUSH
26630: CALL_OW 237
26634: GO 26536
26636: POP
26637: POP
// end ;
26638: PPOPN 3
26640: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26641: LD_EXP 47
26645: IFFALSE 26653
26647: PUSH
26648: LD_EXP 55
26652: AND
26653: IFFALSE 26673
26655: GO 26657
26657: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26658: LD_INT 4
26660: PPUSH
26661: LD_OWVAR 2
26665: PPUSH
26666: LD_INT 0
26668: PPUSH
26669: CALL_OW 324
26673: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26674: LD_EXP 47
26678: IFFALSE 26686
26680: PUSH
26681: LD_EXP 84
26685: AND
26686: IFFALSE 26706
26688: GO 26690
26690: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26691: LD_INT 19
26693: PPUSH
26694: LD_OWVAR 2
26698: PPUSH
26699: LD_INT 0
26701: PPUSH
26702: CALL_OW 324
26706: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26707: LD_EXP 47
26711: IFFALSE 26719
26713: PUSH
26714: LD_EXP 56
26718: AND
26719: IFFALSE 26821
26721: GO 26723
26723: DISABLE
26724: LD_INT 0
26726: PPUSH
26727: PPUSH
// begin enable ;
26728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26729: LD_ADDR_VAR 0 2
26733: PUSH
26734: LD_INT 22
26736: PUSH
26737: LD_OWVAR 2
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: LD_INT 34
26751: PUSH
26752: LD_INT 11
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 34
26761: PUSH
26762: LD_INT 30
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PPUSH
26778: CALL_OW 69
26782: ST_TO_ADDR
// if not tmp then
26783: LD_VAR 0 2
26787: NOT
26788: IFFALSE 26792
// exit ;
26790: GO 26821
// for i in tmp do
26792: LD_ADDR_VAR 0 1
26796: PUSH
26797: LD_VAR 0 2
26801: PUSH
26802: FOR_IN
26803: IFFALSE 26819
// begin SetLives ( i , 0 ) ;
26805: LD_VAR 0 1
26809: PPUSH
26810: LD_INT 0
26812: PPUSH
26813: CALL_OW 234
// end ;
26817: GO 26802
26819: POP
26820: POP
// end ;
26821: PPOPN 2
26823: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26824: LD_EXP 47
26828: IFFALSE 26836
26830: PUSH
26831: LD_EXP 57
26835: AND
26836: IFFALSE 26856
26838: GO 26840
26840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26841: LD_INT 32
26843: PPUSH
26844: LD_OWVAR 2
26848: PPUSH
26849: LD_INT 0
26851: PPUSH
26852: CALL_OW 324
26856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26857: LD_EXP 47
26861: IFFALSE 26869
26863: PUSH
26864: LD_EXP 58
26868: AND
26869: IFFALSE 27052
26871: GO 26873
26873: DISABLE
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
26878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_INT 22
26886: PUSH
26887: LD_OWVAR 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 33
26898: PUSH
26899: LD_INT 3
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 69
26914: ST_TO_ADDR
// if not tmp then
26915: LD_VAR 0 2
26919: NOT
26920: IFFALSE 26924
// exit ;
26922: GO 27052
// side := 0 ;
26924: LD_ADDR_VAR 0 3
26928: PUSH
26929: LD_INT 0
26931: ST_TO_ADDR
// for i := 1 to 8 do
26932: LD_ADDR_VAR 0 1
26936: PUSH
26937: DOUBLE
26938: LD_INT 1
26940: DEC
26941: ST_TO_ADDR
26942: LD_INT 8
26944: PUSH
26945: FOR_TO
26946: IFFALSE 26996
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26948: LD_OWVAR 2
26952: PUSH
26953: LD_VAR 0 1
26957: NONEQUAL
26958: IFFALSE 26980
26960: PUSH
26961: LD_OWVAR 2
26965: PPUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 81
26975: PUSH
26976: LD_INT 2
26978: EQUAL
26979: AND
26980: IFFALSE 26994
// begin side := i ;
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: LD_VAR 0 1
26991: ST_TO_ADDR
// break ;
26992: GO 26996
// end ;
26994: GO 26945
26996: POP
26997: POP
// if not side then
26998: LD_VAR 0 3
27002: NOT
27003: IFFALSE 27007
// exit ;
27005: GO 27052
// for i := 1 to tmp do
27007: LD_ADDR_VAR 0 1
27011: PUSH
27012: DOUBLE
27013: LD_INT 1
27015: DEC
27016: ST_TO_ADDR
27017: LD_VAR 0 2
27021: PUSH
27022: FOR_TO
27023: IFFALSE 27050
// if Prob ( 60 ) then
27025: LD_INT 60
27027: PPUSH
27028: CALL_OW 13
27032: IFFALSE 27048
// SetSide ( i , side ) ;
27034: LD_VAR 0 1
27038: PPUSH
27039: LD_VAR 0 3
27043: PPUSH
27044: CALL_OW 235
27048: GO 27022
27050: POP
27051: POP
// end ;
27052: PPOPN 3
27054: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27055: LD_EXP 47
27059: IFFALSE 27067
27061: PUSH
27062: LD_EXP 60
27066: AND
27067: IFFALSE 27186
27069: GO 27071
27071: DISABLE
27072: LD_INT 0
27074: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27075: LD_ADDR_VAR 0 1
27079: PUSH
27080: LD_INT 22
27082: PUSH
27083: LD_OWVAR 2
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 21
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 3
27104: PUSH
27105: LD_INT 23
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: PPUSH
27124: CALL_OW 69
27128: PUSH
27129: FOR_IN
27130: IFFALSE 27184
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27132: LD_VAR 0 1
27136: PPUSH
27137: CALL_OW 257
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: LD_INT 4
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: IN
27160: IFFALSE 27182
// SetClass ( un , rand ( 1 , 4 ) ) ;
27162: LD_VAR 0 1
27166: PPUSH
27167: LD_INT 1
27169: PPUSH
27170: LD_INT 4
27172: PPUSH
27173: CALL_OW 12
27177: PPUSH
27178: CALL_OW 336
27182: GO 27129
27184: POP
27185: POP
// end ;
27186: PPOPN 1
27188: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27189: LD_EXP 47
27193: IFFALSE 27201
27195: PUSH
27196: LD_EXP 59
27200: AND
27201: IFFALSE 27280
27203: GO 27205
27205: DISABLE
27206: LD_INT 0
27208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27209: LD_ADDR_VAR 0 1
27213: PUSH
27214: LD_INT 22
27216: PUSH
27217: LD_OWVAR 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 21
27228: PUSH
27229: LD_INT 3
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PPUSH
27240: CALL_OW 69
27244: ST_TO_ADDR
// if not tmp then
27245: LD_VAR 0 1
27249: NOT
27250: IFFALSE 27254
// exit ;
27252: GO 27280
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27254: LD_VAR 0 1
27258: PUSH
27259: LD_INT 1
27261: PPUSH
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL_OW 12
27271: ARRAY
27272: PPUSH
27273: LD_INT 100
27275: PPUSH
27276: CALL_OW 234
// end ;
27280: PPOPN 1
27282: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27283: LD_EXP 47
27287: IFFALSE 27295
27289: PUSH
27290: LD_EXP 61
27294: AND
27295: IFFALSE 27393
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27303: LD_ADDR_VAR 0 1
27307: PUSH
27308: LD_INT 22
27310: PUSH
27311: LD_OWVAR 2
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 21
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PPUSH
27334: CALL_OW 69
27338: ST_TO_ADDR
// if not tmp then
27339: LD_VAR 0 1
27343: NOT
27344: IFFALSE 27348
// exit ;
27346: GO 27393
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27348: LD_VAR 0 1
27352: PUSH
27353: LD_INT 1
27355: PPUSH
27356: LD_VAR 0 1
27360: PPUSH
27361: CALL_OW 12
27365: ARRAY
27366: PPUSH
27367: LD_INT 1
27369: PPUSH
27370: LD_INT 4
27372: PPUSH
27373: CALL_OW 12
27377: PPUSH
27378: LD_INT 3000
27380: PPUSH
27381: LD_INT 9000
27383: PPUSH
27384: CALL_OW 12
27388: PPUSH
27389: CALL_OW 492
// end ;
27393: PPOPN 1
27395: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27396: LD_EXP 47
27400: IFFALSE 27408
27402: PUSH
27403: LD_EXP 62
27407: AND
27408: IFFALSE 27428
27410: GO 27412
27412: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27413: LD_INT 1
27415: PPUSH
27416: LD_OWVAR 2
27420: PPUSH
27421: LD_INT 0
27423: PPUSH
27424: CALL_OW 324
27428: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27429: LD_EXP 47
27433: IFFALSE 27441
27435: PUSH
27436: LD_EXP 63
27440: AND
27441: IFFALSE 27524
27443: GO 27445
27445: DISABLE
27446: LD_INT 0
27448: PPUSH
27449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27450: LD_ADDR_VAR 0 2
27454: PUSH
27455: LD_INT 22
27457: PUSH
27458: LD_OWVAR 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 21
27469: PUSH
27470: LD_INT 3
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PPUSH
27481: CALL_OW 69
27485: ST_TO_ADDR
// if not tmp then
27486: LD_VAR 0 2
27490: NOT
27491: IFFALSE 27495
// exit ;
27493: GO 27524
// for i in tmp do
27495: LD_ADDR_VAR 0 1
27499: PUSH
27500: LD_VAR 0 2
27504: PUSH
27505: FOR_IN
27506: IFFALSE 27522
// SetBLevel ( i , 10 ) ;
27508: LD_VAR 0 1
27512: PPUSH
27513: LD_INT 10
27515: PPUSH
27516: CALL_OW 241
27520: GO 27505
27522: POP
27523: POP
// end ;
27524: PPOPN 2
27526: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27527: LD_EXP 47
27531: IFFALSE 27539
27533: PUSH
27534: LD_EXP 64
27538: AND
27539: IFFALSE 27650
27541: GO 27543
27543: DISABLE
27544: LD_INT 0
27546: PPUSH
27547: PPUSH
27548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27549: LD_ADDR_VAR 0 3
27553: PUSH
27554: LD_INT 22
27556: PUSH
27557: LD_OWVAR 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 25
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PPUSH
27580: CALL_OW 69
27584: ST_TO_ADDR
// if not tmp then
27585: LD_VAR 0 3
27589: NOT
27590: IFFALSE 27594
// exit ;
27592: GO 27650
// un := tmp [ rand ( 1 , tmp ) ] ;
27594: LD_ADDR_VAR 0 2
27598: PUSH
27599: LD_VAR 0 3
27603: PUSH
27604: LD_INT 1
27606: PPUSH
27607: LD_VAR 0 3
27611: PPUSH
27612: CALL_OW 12
27616: ARRAY
27617: ST_TO_ADDR
// if Crawls ( un ) then
27618: LD_VAR 0 2
27622: PPUSH
27623: CALL_OW 318
27627: IFFALSE 27638
// ComWalk ( un ) ;
27629: LD_VAR 0 2
27633: PPUSH
27634: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27638: LD_VAR 0 2
27642: PPUSH
27643: LD_INT 5
27645: PPUSH
27646: CALL_OW 336
// end ;
27650: PPOPN 3
27652: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27653: LD_EXP 47
27657: IFFALSE 27665
27659: PUSH
27660: LD_EXP 65
27664: AND
27665: IFFALSE 27677
27667: PUSH
27668: LD_OWVAR 67
27672: PUSH
27673: LD_INT 4
27675: LESS
27676: AND
27677: IFFALSE 27696
27679: GO 27681
27681: DISABLE
// begin Difficulty := Difficulty + 1 ;
27682: LD_ADDR_OWVAR 67
27686: PUSH
27687: LD_OWVAR 67
27691: PUSH
27692: LD_INT 1
27694: PLUS
27695: ST_TO_ADDR
// end ;
27696: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27697: LD_EXP 47
27701: IFFALSE 27709
27703: PUSH
27704: LD_EXP 66
27708: AND
27709: IFFALSE 27812
27711: GO 27713
27713: DISABLE
27714: LD_INT 0
27716: PPUSH
// begin for i := 1 to 5 do
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: DOUBLE
27723: LD_INT 1
27725: DEC
27726: ST_TO_ADDR
27727: LD_INT 5
27729: PUSH
27730: FOR_TO
27731: IFFALSE 27810
// begin uc_nation := nation_nature ;
27733: LD_ADDR_OWVAR 21
27737: PUSH
27738: LD_INT 0
27740: ST_TO_ADDR
// uc_side := 0 ;
27741: LD_ADDR_OWVAR 20
27745: PUSH
27746: LD_INT 0
27748: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27749: LD_ADDR_OWVAR 29
27753: PUSH
27754: LD_INT 12
27756: PUSH
27757: LD_INT 12
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// hc_agressivity := 20 ;
27764: LD_ADDR_OWVAR 35
27768: PUSH
27769: LD_INT 20
27771: ST_TO_ADDR
// hc_class := class_tiger ;
27772: LD_ADDR_OWVAR 28
27776: PUSH
27777: LD_INT 14
27779: ST_TO_ADDR
// hc_gallery :=  ;
27780: LD_ADDR_OWVAR 33
27784: PUSH
27785: LD_STRING 
27787: ST_TO_ADDR
// hc_name :=  ;
27788: LD_ADDR_OWVAR 26
27792: PUSH
27793: LD_STRING 
27795: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27796: CALL_OW 44
27800: PPUSH
27801: LD_INT 0
27803: PPUSH
27804: CALL_OW 51
// end ;
27808: GO 27730
27810: POP
27811: POP
// end ;
27812: PPOPN 1
27814: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27815: LD_EXP 47
27819: IFFALSE 27827
27821: PUSH
27822: LD_EXP 67
27826: AND
27827: IFFALSE 27836
27829: GO 27831
27831: DISABLE
// StreamSibBomb ;
27832: CALL 27837 0 0
27836: END
// export function StreamSibBomb ; var i , x , y ; begin
27837: LD_INT 0
27839: PPUSH
27840: PPUSH
27841: PPUSH
27842: PPUSH
// result := false ;
27843: LD_ADDR_VAR 0 1
27847: PUSH
27848: LD_INT 0
27850: ST_TO_ADDR
// for i := 1 to 16 do
27851: LD_ADDR_VAR 0 2
27855: PUSH
27856: DOUBLE
27857: LD_INT 1
27859: DEC
27860: ST_TO_ADDR
27861: LD_INT 16
27863: PUSH
27864: FOR_TO
27865: IFFALSE 28064
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27867: LD_ADDR_VAR 0 3
27871: PUSH
27872: LD_INT 10
27874: PUSH
27875: LD_INT 20
27877: PUSH
27878: LD_INT 30
27880: PUSH
27881: LD_INT 40
27883: PUSH
27884: LD_INT 50
27886: PUSH
27887: LD_INT 60
27889: PUSH
27890: LD_INT 70
27892: PUSH
27893: LD_INT 80
27895: PUSH
27896: LD_INT 90
27898: PUSH
27899: LD_INT 100
27901: PUSH
27902: LD_INT 110
27904: PUSH
27905: LD_INT 120
27907: PUSH
27908: LD_INT 130
27910: PUSH
27911: LD_INT 140
27913: PUSH
27914: LD_INT 150
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: PPUSH
27937: LD_INT 15
27939: PPUSH
27940: CALL_OW 12
27944: ARRAY
27945: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27946: LD_ADDR_VAR 0 4
27950: PUSH
27951: LD_INT 10
27953: PUSH
27954: LD_INT 20
27956: PUSH
27957: LD_INT 30
27959: PUSH
27960: LD_INT 40
27962: PUSH
27963: LD_INT 50
27965: PUSH
27966: LD_INT 60
27968: PUSH
27969: LD_INT 70
27971: PUSH
27972: LD_INT 80
27974: PUSH
27975: LD_INT 90
27977: PUSH
27978: LD_INT 100
27980: PUSH
27981: LD_INT 110
27983: PUSH
27984: LD_INT 120
27986: PUSH
27987: LD_INT 130
27989: PUSH
27990: LD_INT 140
27992: PUSH
27993: LD_INT 150
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: PPUSH
28016: LD_INT 15
28018: PPUSH
28019: CALL_OW 12
28023: ARRAY
28024: ST_TO_ADDR
// if ValidHex ( x , y ) then
28025: LD_VAR 0 3
28029: PPUSH
28030: LD_VAR 0 4
28034: PPUSH
28035: CALL_OW 488
28039: IFFALSE 28062
// begin result := [ x , y ] ;
28041: LD_ADDR_VAR 0 1
28045: PUSH
28046: LD_VAR 0 3
28050: PUSH
28051: LD_VAR 0 4
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: ST_TO_ADDR
// break ;
28060: GO 28064
// end ; end ;
28062: GO 27864
28064: POP
28065: POP
// if result then
28066: LD_VAR 0 1
28070: IFFALSE 28130
// begin ToLua ( playSibBomb() ) ;
28072: LD_STRING playSibBomb()
28074: PPUSH
28075: CALL_OW 559
// wait ( 0 0$14 ) ;
28079: LD_INT 490
28081: PPUSH
28082: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28086: LD_VAR 0 1
28090: PUSH
28091: LD_INT 1
28093: ARRAY
28094: PPUSH
28095: LD_VAR 0 1
28099: PUSH
28100: LD_INT 2
28102: ARRAY
28103: PPUSH
28104: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28108: LD_VAR 0 1
28112: PUSH
28113: LD_INT 1
28115: ARRAY
28116: PPUSH
28117: LD_VAR 0 1
28121: PUSH
28122: LD_INT 2
28124: ARRAY
28125: PPUSH
28126: CALL_OW 429
// end ; end ;
28130: LD_VAR 0 1
28134: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28135: LD_EXP 47
28139: IFFALSE 28147
28141: PUSH
28142: LD_EXP 69
28146: AND
28147: IFFALSE 28159
28149: GO 28151
28151: DISABLE
// YouLost (  ) ;
28152: LD_STRING 
28154: PPUSH
28155: CALL_OW 104
28159: END
// every 0 0$1 trigger StreamModeActive and sFog do
28160: LD_EXP 47
28164: IFFALSE 28172
28166: PUSH
28167: LD_EXP 68
28171: AND
28172: IFFALSE 28186
28174: GO 28176
28176: DISABLE
// FogOff ( your_side ) ;
28177: LD_OWVAR 2
28181: PPUSH
28182: CALL_OW 344
28186: END
// every 0 0$1 trigger StreamModeActive and sSun do
28187: LD_EXP 47
28191: IFFALSE 28199
28193: PUSH
28194: LD_EXP 70
28198: AND
28199: IFFALSE 28227
28201: GO 28203
28203: DISABLE
// begin solar_recharge_percent := 0 ;
28204: LD_ADDR_OWVAR 79
28208: PUSH
28209: LD_INT 0
28211: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28212: LD_INT 10500
28214: PPUSH
28215: CALL_OW 67
// solar_recharge_percent := 100 ;
28219: LD_ADDR_OWVAR 79
28223: PUSH
28224: LD_INT 100
28226: ST_TO_ADDR
// end ;
28227: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28228: LD_EXP 47
28232: IFFALSE 28240
28234: PUSH
28235: LD_EXP 71
28239: AND
28240: IFFALSE 28479
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
28249: PPUSH
// begin tmp := [ ] ;
28250: LD_ADDR_VAR 0 3
28254: PUSH
28255: EMPTY
28256: ST_TO_ADDR
// for i := 1 to 6 do
28257: LD_ADDR_VAR 0 1
28261: PUSH
28262: DOUBLE
28263: LD_INT 1
28265: DEC
28266: ST_TO_ADDR
28267: LD_INT 6
28269: PUSH
28270: FOR_TO
28271: IFFALSE 28376
// begin uc_nation := nation_nature ;
28273: LD_ADDR_OWVAR 21
28277: PUSH
28278: LD_INT 0
28280: ST_TO_ADDR
// uc_side := 0 ;
28281: LD_ADDR_OWVAR 20
28285: PUSH
28286: LD_INT 0
28288: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28289: LD_ADDR_OWVAR 29
28293: PUSH
28294: LD_INT 12
28296: PUSH
28297: LD_INT 12
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// hc_agressivity := 20 ;
28304: LD_ADDR_OWVAR 35
28308: PUSH
28309: LD_INT 20
28311: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28312: LD_ADDR_OWVAR 28
28316: PUSH
28317: LD_INT 17
28319: ST_TO_ADDR
// hc_gallery :=  ;
28320: LD_ADDR_OWVAR 33
28324: PUSH
28325: LD_STRING 
28327: ST_TO_ADDR
// hc_name :=  ;
28328: LD_ADDR_OWVAR 26
28332: PUSH
28333: LD_STRING 
28335: ST_TO_ADDR
// un := CreateHuman ;
28336: LD_ADDR_VAR 0 2
28340: PUSH
28341: CALL_OW 44
28345: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28346: LD_VAR 0 2
28350: PPUSH
28351: LD_INT 1
28353: PPUSH
28354: CALL_OW 51
// tmp := tmp ^ un ;
28358: LD_ADDR_VAR 0 3
28362: PUSH
28363: LD_VAR 0 3
28367: PUSH
28368: LD_VAR 0 2
28372: ADD
28373: ST_TO_ADDR
// end ;
28374: GO 28270
28376: POP
28377: POP
// repeat wait ( 0 0$1 ) ;
28378: LD_INT 35
28380: PPUSH
28381: CALL_OW 67
// for un in tmp do
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_VAR 0 3
28394: PUSH
28395: FOR_IN
28396: IFFALSE 28470
// begin if IsDead ( un ) then
28398: LD_VAR 0 2
28402: PPUSH
28403: CALL_OW 301
28407: IFFALSE 28427
// begin tmp := tmp diff un ;
28409: LD_ADDR_VAR 0 3
28413: PUSH
28414: LD_VAR 0 3
28418: PUSH
28419: LD_VAR 0 2
28423: DIFF
28424: ST_TO_ADDR
// continue ;
28425: GO 28395
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28427: LD_VAR 0 2
28431: PPUSH
28432: LD_INT 3
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 69
28453: PPUSH
28454: LD_VAR 0 2
28458: PPUSH
28459: CALL_OW 74
28463: PPUSH
28464: CALL_OW 115
// end ;
28468: GO 28395
28470: POP
28471: POP
// until not tmp ;
28472: LD_VAR 0 3
28476: NOT
28477: IFFALSE 28378
// end ;
28479: PPOPN 3
28481: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28482: LD_EXP 47
28486: IFFALSE 28494
28488: PUSH
28489: LD_EXP 72
28493: AND
28494: IFFALSE 28548
28496: GO 28498
28498: DISABLE
// begin ToLua ( displayTroll(); ) ;
28499: LD_STRING displayTroll();
28501: PPUSH
28502: CALL_OW 559
// wait ( 3 3$00 ) ;
28506: LD_INT 6300
28508: PPUSH
28509: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28513: LD_STRING hideTroll();
28515: PPUSH
28516: CALL_OW 559
// wait ( 1 1$00 ) ;
28520: LD_INT 2100
28522: PPUSH
28523: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28527: LD_STRING displayTroll();
28529: PPUSH
28530: CALL_OW 559
// wait ( 1 1$00 ) ;
28534: LD_INT 2100
28536: PPUSH
28537: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28541: LD_STRING hideTroll();
28543: PPUSH
28544: CALL_OW 559
// end ;
28548: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28549: LD_EXP 47
28553: IFFALSE 28561
28555: PUSH
28556: LD_EXP 73
28560: AND
28561: IFFALSE 28624
28563: GO 28565
28565: DISABLE
28566: LD_INT 0
28568: PPUSH
// begin p := 0 ;
28569: LD_ADDR_VAR 0 1
28573: PUSH
28574: LD_INT 0
28576: ST_TO_ADDR
// repeat game_speed := 1 ;
28577: LD_ADDR_OWVAR 65
28581: PUSH
28582: LD_INT 1
28584: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28585: LD_INT 35
28587: PPUSH
28588: CALL_OW 67
// p := p + 1 ;
28592: LD_ADDR_VAR 0 1
28596: PUSH
28597: LD_VAR 0 1
28601: PUSH
28602: LD_INT 1
28604: PLUS
28605: ST_TO_ADDR
// until p >= 60 ;
28606: LD_VAR 0 1
28610: PUSH
28611: LD_INT 60
28613: GREATEREQUAL
28614: IFFALSE 28577
// game_speed := 4 ;
28616: LD_ADDR_OWVAR 65
28620: PUSH
28621: LD_INT 4
28623: ST_TO_ADDR
// end ;
28624: PPOPN 1
28626: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28627: LD_EXP 47
28631: IFFALSE 28639
28633: PUSH
28634: LD_EXP 74
28638: AND
28639: IFFALSE 28785
28641: GO 28643
28643: DISABLE
28644: LD_INT 0
28646: PPUSH
28647: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28648: LD_ADDR_VAR 0 1
28652: PUSH
28653: LD_INT 22
28655: PUSH
28656: LD_OWVAR 2
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 30
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 30
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PPUSH
28697: CALL_OW 69
28701: ST_TO_ADDR
// if not depot then
28702: LD_VAR 0 1
28706: NOT
28707: IFFALSE 28711
// exit ;
28709: GO 28785
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_VAR 0 1
28720: PUSH
28721: LD_INT 1
28723: PPUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 12
28733: ARRAY
28734: PPUSH
28735: CALL_OW 274
28739: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28740: LD_VAR 0 2
28744: PPUSH
28745: LD_INT 1
28747: PPUSH
28748: LD_INT 0
28750: PPUSH
28751: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28755: LD_VAR 0 2
28759: PPUSH
28760: LD_INT 2
28762: PPUSH
28763: LD_INT 0
28765: PPUSH
28766: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28770: LD_VAR 0 2
28774: PPUSH
28775: LD_INT 3
28777: PPUSH
28778: LD_INT 0
28780: PPUSH
28781: CALL_OW 277
// end ;
28785: PPOPN 2
28787: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28788: LD_EXP 47
28792: IFFALSE 28800
28794: PUSH
28795: LD_EXP 75
28799: AND
28800: IFFALSE 28897
28802: GO 28804
28804: DISABLE
28805: LD_INT 0
28807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_INT 22
28815: PUSH
28816: LD_OWVAR 2
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 21
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: LD_INT 23
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: PPUSH
28857: CALL_OW 69
28861: ST_TO_ADDR
// if not tmp then
28862: LD_VAR 0 1
28866: NOT
28867: IFFALSE 28871
// exit ;
28869: GO 28897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28871: LD_VAR 0 1
28875: PUSH
28876: LD_INT 1
28878: PPUSH
28879: LD_VAR 0 1
28883: PPUSH
28884: CALL_OW 12
28888: ARRAY
28889: PPUSH
28890: LD_INT 200
28892: PPUSH
28893: CALL_OW 234
// end ;
28897: PPOPN 1
28899: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28900: LD_EXP 47
28904: IFFALSE 28912
28906: PUSH
28907: LD_EXP 76
28911: AND
28912: IFFALSE 28991
28914: GO 28916
28916: DISABLE
28917: LD_INT 0
28919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28920: LD_ADDR_VAR 0 1
28924: PUSH
28925: LD_INT 22
28927: PUSH
28928: LD_OWVAR 2
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 21
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PPUSH
28951: CALL_OW 69
28955: ST_TO_ADDR
// if not tmp then
28956: LD_VAR 0 1
28960: NOT
28961: IFFALSE 28965
// exit ;
28963: GO 28991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28965: LD_VAR 0 1
28969: PUSH
28970: LD_INT 1
28972: PPUSH
28973: LD_VAR 0 1
28977: PPUSH
28978: CALL_OW 12
28982: ARRAY
28983: PPUSH
28984: LD_INT 60
28986: PPUSH
28987: CALL_OW 234
// end ;
28991: PPOPN 1
28993: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28994: LD_EXP 47
28998: IFFALSE 29006
29000: PUSH
29001: LD_EXP 77
29005: AND
29006: IFFALSE 29105
29008: GO 29010
29010: DISABLE
29011: LD_INT 0
29013: PPUSH
29014: PPUSH
// begin enable ;
29015: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29016: LD_ADDR_VAR 0 1
29020: PUSH
29021: LD_INT 22
29023: PUSH
29024: LD_OWVAR 2
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 61
29035: PUSH
29036: EMPTY
29037: LIST
29038: PUSH
29039: LD_INT 33
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: PPUSH
29054: CALL_OW 69
29058: ST_TO_ADDR
// if not tmp then
29059: LD_VAR 0 1
29063: NOT
29064: IFFALSE 29068
// exit ;
29066: GO 29105
// for i in tmp do
29068: LD_ADDR_VAR 0 2
29072: PUSH
29073: LD_VAR 0 1
29077: PUSH
29078: FOR_IN
29079: IFFALSE 29103
// if IsControledBy ( i ) then
29081: LD_VAR 0 2
29085: PPUSH
29086: CALL_OW 312
29090: IFFALSE 29101
// ComUnlink ( i ) ;
29092: LD_VAR 0 2
29096: PPUSH
29097: CALL_OW 136
29101: GO 29078
29103: POP
29104: POP
// end ;
29105: PPOPN 2
29107: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29108: LD_EXP 47
29112: IFFALSE 29120
29114: PUSH
29115: LD_EXP 78
29119: AND
29120: IFFALSE 29260
29122: GO 29124
29124: DISABLE
29125: LD_INT 0
29127: PPUSH
29128: PPUSH
// begin ToLua ( displayPowell(); ) ;
29129: LD_STRING displayPowell();
29131: PPUSH
29132: CALL_OW 559
// uc_side := 0 ;
29136: LD_ADDR_OWVAR 20
29140: PUSH
29141: LD_INT 0
29143: ST_TO_ADDR
// uc_nation := 2 ;
29144: LD_ADDR_OWVAR 21
29148: PUSH
29149: LD_INT 2
29151: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29152: LD_ADDR_OWVAR 37
29156: PUSH
29157: LD_INT 14
29159: ST_TO_ADDR
// vc_engine := engine_siberite ;
29160: LD_ADDR_OWVAR 39
29164: PUSH
29165: LD_INT 3
29167: ST_TO_ADDR
// vc_control := control_apeman ;
29168: LD_ADDR_OWVAR 38
29172: PUSH
29173: LD_INT 5
29175: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29176: LD_ADDR_OWVAR 40
29180: PUSH
29181: LD_INT 29
29183: ST_TO_ADDR
// un := CreateVehicle ;
29184: LD_ADDR_VAR 0 2
29188: PUSH
29189: CALL_OW 45
29193: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29194: LD_VAR 0 2
29198: PPUSH
29199: LD_INT 1
29201: PPUSH
29202: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29206: LD_INT 35
29208: PPUSH
29209: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29213: LD_VAR 0 2
29217: PPUSH
29218: LD_INT 22
29220: PUSH
29221: LD_OWVAR 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PPUSH
29230: CALL_OW 69
29234: PPUSH
29235: LD_VAR 0 2
29239: PPUSH
29240: CALL_OW 74
29244: PPUSH
29245: CALL_OW 115
// until IsDead ( un ) ;
29249: LD_VAR 0 2
29253: PPUSH
29254: CALL_OW 301
29258: IFFALSE 29206
// end ;
29260: PPOPN 2
29262: END
// every 0 0$1 trigger StreamModeActive and sStu do
29263: LD_EXP 47
29267: IFFALSE 29275
29269: PUSH
29270: LD_EXP 86
29274: AND
29275: IFFALSE 29291
29277: GO 29279
29279: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29280: LD_STRING displayStucuk();
29282: PPUSH
29283: CALL_OW 559
// ResetFog ;
29287: CALL_OW 335
// end ;
29291: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29292: LD_EXP 47
29296: IFFALSE 29304
29298: PUSH
29299: LD_EXP 79
29303: AND
29304: IFFALSE 29445
29306: GO 29308
29308: DISABLE
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29313: LD_ADDR_VAR 0 2
29317: PUSH
29318: LD_INT 22
29320: PUSH
29321: LD_OWVAR 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 21
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PPUSH
29344: CALL_OW 69
29348: ST_TO_ADDR
// if not tmp then
29349: LD_VAR 0 2
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 29445
// un := tmp [ rand ( 1 , tmp ) ] ;
29358: LD_ADDR_VAR 0 1
29362: PUSH
29363: LD_VAR 0 2
29367: PUSH
29368: LD_INT 1
29370: PPUSH
29371: LD_VAR 0 2
29375: PPUSH
29376: CALL_OW 12
29380: ARRAY
29381: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29382: LD_VAR 0 1
29386: PPUSH
29387: LD_INT 0
29389: PPUSH
29390: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29394: LD_VAR 0 1
29398: PPUSH
29399: LD_OWVAR 3
29403: PUSH
29404: LD_VAR 0 1
29408: DIFF
29409: PPUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 74
29419: PPUSH
29420: CALL_OW 115
// wait ( 0 0$20 ) ;
29424: LD_INT 700
29426: PPUSH
29427: CALL_OW 67
// SetSide ( un , your_side ) ;
29431: LD_VAR 0 1
29435: PPUSH
29436: LD_OWVAR 2
29440: PPUSH
29441: CALL_OW 235
// end ;
29445: PPOPN 2
29447: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29448: LD_EXP 47
29452: IFFALSE 29460
29454: PUSH
29455: LD_EXP 80
29459: AND
29460: IFFALSE 29566
29462: GO 29464
29464: DISABLE
29465: LD_INT 0
29467: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29468: LD_ADDR_VAR 0 1
29472: PUSH
29473: LD_INT 22
29475: PUSH
29476: LD_OWVAR 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 2
29487: PUSH
29488: LD_INT 30
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 30
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PPUSH
29517: CALL_OW 69
29521: ST_TO_ADDR
// if not depot then
29522: LD_VAR 0 1
29526: NOT
29527: IFFALSE 29531
// exit ;
29529: GO 29566
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29531: LD_VAR 0 1
29535: PUSH
29536: LD_INT 1
29538: ARRAY
29539: PPUSH
29540: CALL_OW 250
29544: PPUSH
29545: LD_VAR 0 1
29549: PUSH
29550: LD_INT 1
29552: ARRAY
29553: PPUSH
29554: CALL_OW 251
29558: PPUSH
29559: LD_INT 70
29561: PPUSH
29562: CALL_OW 495
// end ;
29566: PPOPN 1
29568: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29569: LD_EXP 47
29573: IFFALSE 29581
29575: PUSH
29576: LD_EXP 81
29580: AND
29581: IFFALSE 29792
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29593: LD_ADDR_VAR 0 5
29597: PUSH
29598: LD_INT 22
29600: PUSH
29601: LD_OWVAR 2
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 21
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PPUSH
29624: CALL_OW 69
29628: ST_TO_ADDR
// if not tmp then
29629: LD_VAR 0 5
29633: NOT
29634: IFFALSE 29638
// exit ;
29636: GO 29792
// for i in tmp do
29638: LD_ADDR_VAR 0 1
29642: PUSH
29643: LD_VAR 0 5
29647: PUSH
29648: FOR_IN
29649: IFFALSE 29790
// begin d := rand ( 0 , 5 ) ;
29651: LD_ADDR_VAR 0 4
29655: PUSH
29656: LD_INT 0
29658: PPUSH
29659: LD_INT 5
29661: PPUSH
29662: CALL_OW 12
29666: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29667: LD_ADDR_VAR 0 2
29671: PUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 250
29681: PPUSH
29682: LD_VAR 0 4
29686: PPUSH
29687: LD_INT 3
29689: PPUSH
29690: LD_INT 12
29692: PPUSH
29693: CALL_OW 12
29697: PPUSH
29698: CALL_OW 272
29702: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 251
29717: PPUSH
29718: LD_VAR 0 4
29722: PPUSH
29723: LD_INT 3
29725: PPUSH
29726: LD_INT 12
29728: PPUSH
29729: CALL_OW 12
29733: PPUSH
29734: CALL_OW 273
29738: ST_TO_ADDR
// if ValidHex ( x , y ) then
29739: LD_VAR 0 2
29743: PPUSH
29744: LD_VAR 0 3
29748: PPUSH
29749: CALL_OW 488
29753: IFFALSE 29788
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29755: LD_VAR 0 1
29759: PPUSH
29760: LD_VAR 0 2
29764: PPUSH
29765: LD_VAR 0 3
29769: PPUSH
29770: LD_INT 3
29772: PPUSH
29773: LD_INT 6
29775: PPUSH
29776: CALL_OW 12
29780: PPUSH
29781: LD_INT 1
29783: PPUSH
29784: CALL_OW 483
// end ;
29788: GO 29648
29790: POP
29791: POP
// end ;
29792: PPOPN 5
29794: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29795: LD_EXP 47
29799: IFFALSE 29807
29801: PUSH
29802: LD_EXP 82
29806: AND
29807: IFFALSE 29901
29809: GO 29811
29811: DISABLE
29812: LD_INT 0
29814: PPUSH
29815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29816: LD_ADDR_VAR 0 2
29820: PUSH
29821: LD_INT 22
29823: PUSH
29824: LD_OWVAR 2
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 32
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 21
29845: PUSH
29846: LD_INT 2
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: LIST
29857: PPUSH
29858: CALL_OW 69
29862: ST_TO_ADDR
// if not tmp then
29863: LD_VAR 0 2
29867: NOT
29868: IFFALSE 29872
// exit ;
29870: GO 29901
// for i in tmp do
29872: LD_ADDR_VAR 0 1
29876: PUSH
29877: LD_VAR 0 2
29881: PUSH
29882: FOR_IN
29883: IFFALSE 29899
// SetFuel ( i , 0 ) ;
29885: LD_VAR 0 1
29889: PPUSH
29890: LD_INT 0
29892: PPUSH
29893: CALL_OW 240
29897: GO 29882
29899: POP
29900: POP
// end ;
29901: PPOPN 2
29903: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29904: LD_EXP 47
29908: IFFALSE 29916
29910: PUSH
29911: LD_EXP 83
29915: AND
29916: IFFALSE 29982
29918: GO 29920
29920: DISABLE
29921: LD_INT 0
29923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29924: LD_ADDR_VAR 0 1
29928: PUSH
29929: LD_INT 22
29931: PUSH
29932: LD_OWVAR 2
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 30
29943: PUSH
29944: LD_INT 29
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PPUSH
29955: CALL_OW 69
29959: ST_TO_ADDR
// if not tmp then
29960: LD_VAR 0 1
29964: NOT
29965: IFFALSE 29969
// exit ;
29967: GO 29982
// DestroyUnit ( tmp [ 1 ] ) ;
29969: LD_VAR 0 1
29973: PUSH
29974: LD_INT 1
29976: ARRAY
29977: PPUSH
29978: CALL_OW 65
// end ;
29982: PPOPN 1
29984: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29985: LD_EXP 47
29989: IFFALSE 29997
29991: PUSH
29992: LD_EXP 85
29996: AND
29997: IFFALSE 30126
29999: GO 30001
30001: DISABLE
30002: LD_INT 0
30004: PPUSH
// begin uc_side := 0 ;
30005: LD_ADDR_OWVAR 20
30009: PUSH
30010: LD_INT 0
30012: ST_TO_ADDR
// uc_nation := nation_arabian ;
30013: LD_ADDR_OWVAR 21
30017: PUSH
30018: LD_INT 2
30020: ST_TO_ADDR
// hc_gallery :=  ;
30021: LD_ADDR_OWVAR 33
30025: PUSH
30026: LD_STRING 
30028: ST_TO_ADDR
// hc_name :=  ;
30029: LD_ADDR_OWVAR 26
30033: PUSH
30034: LD_STRING 
30036: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30037: LD_INT 1
30039: PPUSH
30040: LD_INT 11
30042: PPUSH
30043: LD_INT 10
30045: PPUSH
30046: CALL_OW 380
// un := CreateHuman ;
30050: LD_ADDR_VAR 0 1
30054: PUSH
30055: CALL_OW 44
30059: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30060: LD_VAR 0 1
30064: PPUSH
30065: LD_INT 1
30067: PPUSH
30068: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30072: LD_INT 35
30074: PPUSH
30075: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30079: LD_VAR 0 1
30083: PPUSH
30084: LD_INT 22
30086: PUSH
30087: LD_OWVAR 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PPUSH
30096: CALL_OW 69
30100: PPUSH
30101: LD_VAR 0 1
30105: PPUSH
30106: CALL_OW 74
30110: PPUSH
30111: CALL_OW 115
// until IsDead ( un ) ;
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL_OW 301
30124: IFFALSE 30072
// end ;
30126: PPOPN 1
30128: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30129: LD_EXP 47
30133: IFFALSE 30141
30135: PUSH
30136: LD_EXP 87
30140: AND
30141: IFFALSE 30153
30143: GO 30145
30145: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30146: LD_STRING earthquake(getX(game), 0, 32)
30148: PPUSH
30149: CALL_OW 559
30153: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30154: LD_EXP 47
30158: IFFALSE 30166
30160: PUSH
30161: LD_EXP 88
30165: AND
30166: IFFALSE 30257
30168: GO 30170
30170: DISABLE
30171: LD_INT 0
30173: PPUSH
// begin enable ;
30174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30175: LD_ADDR_VAR 0 1
30179: PUSH
30180: LD_INT 22
30182: PUSH
30183: LD_OWVAR 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 21
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 33
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: PPUSH
30217: CALL_OW 69
30221: ST_TO_ADDR
// if not tmp then
30222: LD_VAR 0 1
30226: NOT
30227: IFFALSE 30231
// exit ;
30229: GO 30257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30231: LD_VAR 0 1
30235: PUSH
30236: LD_INT 1
30238: PPUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 12
30248: ARRAY
30249: PPUSH
30250: LD_INT 1
30252: PPUSH
30253: CALL_OW 234
// end ;
30257: PPOPN 1
30259: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30260: LD_EXP 47
30264: IFFALSE 30272
30266: PUSH
30267: LD_EXP 89
30271: AND
30272: IFFALSE 30413
30274: GO 30276
30276: DISABLE
30277: LD_INT 0
30279: PPUSH
30280: PPUSH
30281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: LD_INT 22
30289: PUSH
30290: LD_OWVAR 2
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 3
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30413
// un := tmp [ rand ( 1 , tmp ) ] ;
30327: LD_ADDR_VAR 0 2
30331: PUSH
30332: LD_VAR 0 3
30336: PUSH
30337: LD_INT 1
30339: PPUSH
30340: LD_VAR 0 3
30344: PPUSH
30345: CALL_OW 12
30349: ARRAY
30350: ST_TO_ADDR
// if Crawls ( un ) then
30351: LD_VAR 0 2
30355: PPUSH
30356: CALL_OW 318
30360: IFFALSE 30371
// ComWalk ( un ) ;
30362: LD_VAR 0 2
30366: PPUSH
30367: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30371: LD_VAR 0 2
30375: PPUSH
30376: LD_INT 9
30378: PPUSH
30379: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30383: LD_INT 28
30385: PPUSH
30386: LD_OWVAR 2
30390: PPUSH
30391: LD_INT 2
30393: PPUSH
30394: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30398: LD_INT 29
30400: PPUSH
30401: LD_OWVAR 2
30405: PPUSH
30406: LD_INT 2
30408: PPUSH
30409: CALL_OW 322
// end ;
30413: PPOPN 3
30415: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30416: LD_EXP 47
30420: IFFALSE 30428
30422: PUSH
30423: LD_EXP 90
30427: AND
30428: IFFALSE 30539
30430: GO 30432
30432: DISABLE
30433: LD_INT 0
30435: PPUSH
30436: PPUSH
30437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30438: LD_ADDR_VAR 0 3
30442: PUSH
30443: LD_INT 22
30445: PUSH
30446: LD_OWVAR 2
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 25
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: CALL_OW 69
30473: ST_TO_ADDR
// if not tmp then
30474: LD_VAR 0 3
30478: NOT
30479: IFFALSE 30483
// exit ;
30481: GO 30539
// un := tmp [ rand ( 1 , tmp ) ] ;
30483: LD_ADDR_VAR 0 2
30487: PUSH
30488: LD_VAR 0 3
30492: PUSH
30493: LD_INT 1
30495: PPUSH
30496: LD_VAR 0 3
30500: PPUSH
30501: CALL_OW 12
30505: ARRAY
30506: ST_TO_ADDR
// if Crawls ( un ) then
30507: LD_VAR 0 2
30511: PPUSH
30512: CALL_OW 318
30516: IFFALSE 30527
// ComWalk ( un ) ;
30518: LD_VAR 0 2
30522: PPUSH
30523: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30527: LD_VAR 0 2
30531: PPUSH
30532: LD_INT 8
30534: PPUSH
30535: CALL_OW 336
// end ;
30539: PPOPN 3
30541: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30542: LD_EXP 47
30546: IFFALSE 30554
30548: PUSH
30549: LD_EXP 91
30553: AND
30554: IFFALSE 30698
30556: GO 30558
30558: DISABLE
30559: LD_INT 0
30561: PPUSH
30562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30563: LD_ADDR_VAR 0 2
30567: PUSH
30568: LD_INT 22
30570: PUSH
30571: LD_OWVAR 2
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 21
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 34
30595: PUSH
30596: LD_INT 12
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 34
30605: PUSH
30606: LD_INT 51
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 34
30615: PUSH
30616: LD_INT 32
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: LIST
30633: PPUSH
30634: CALL_OW 69
30638: ST_TO_ADDR
// if not tmp then
30639: LD_VAR 0 2
30643: NOT
30644: IFFALSE 30648
// exit ;
30646: GO 30698
// for i in tmp do
30648: LD_ADDR_VAR 0 1
30652: PUSH
30653: LD_VAR 0 2
30657: PUSH
30658: FOR_IN
30659: IFFALSE 30696
// if GetCargo ( i , mat_artifact ) = 0 then
30661: LD_VAR 0 1
30665: PPUSH
30666: LD_INT 4
30668: PPUSH
30669: CALL_OW 289
30673: PUSH
30674: LD_INT 0
30676: EQUAL
30677: IFFALSE 30694
// SetCargo ( i , mat_siberit , 100 ) ;
30679: LD_VAR 0 1
30683: PPUSH
30684: LD_INT 3
30686: PPUSH
30687: LD_INT 100
30689: PPUSH
30690: CALL_OW 290
30694: GO 30658
30696: POP
30697: POP
// end ;
30698: PPOPN 2
30700: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30701: LD_EXP 47
30705: IFFALSE 30713
30707: PUSH
30708: LD_EXP 92
30712: AND
30713: IFFALSE 30896
30715: GO 30717
30717: DISABLE
30718: LD_INT 0
30720: PPUSH
30721: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30722: LD_ADDR_VAR 0 2
30726: PUSH
30727: LD_INT 22
30729: PUSH
30730: LD_OWVAR 2
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PPUSH
30739: CALL_OW 69
30743: ST_TO_ADDR
// if not tmp then
30744: LD_VAR 0 2
30748: NOT
30749: IFFALSE 30753
// exit ;
30751: GO 30896
// for i := 1 to 2 do
30753: LD_ADDR_VAR 0 1
30757: PUSH
30758: DOUBLE
30759: LD_INT 1
30761: DEC
30762: ST_TO_ADDR
30763: LD_INT 2
30765: PUSH
30766: FOR_TO
30767: IFFALSE 30894
// begin uc_side := your_side ;
30769: LD_ADDR_OWVAR 20
30773: PUSH
30774: LD_OWVAR 2
30778: ST_TO_ADDR
// uc_nation := nation_american ;
30779: LD_ADDR_OWVAR 21
30783: PUSH
30784: LD_INT 1
30786: ST_TO_ADDR
// vc_chassis := us_morphling ;
30787: LD_ADDR_OWVAR 37
30791: PUSH
30792: LD_INT 5
30794: ST_TO_ADDR
// vc_engine := engine_siberite ;
30795: LD_ADDR_OWVAR 39
30799: PUSH
30800: LD_INT 3
30802: ST_TO_ADDR
// vc_control := control_computer ;
30803: LD_ADDR_OWVAR 38
30807: PUSH
30808: LD_INT 3
30810: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30811: LD_ADDR_OWVAR 40
30815: PUSH
30816: LD_INT 10
30818: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30819: LD_VAR 0 2
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: CALL_OW 310
30832: NOT
30833: IFFALSE 30880
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30835: CALL_OW 45
30839: PPUSH
30840: LD_VAR 0 2
30844: PUSH
30845: LD_INT 1
30847: ARRAY
30848: PPUSH
30849: CALL_OW 250
30853: PPUSH
30854: LD_VAR 0 2
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: PPUSH
30863: CALL_OW 251
30867: PPUSH
30868: LD_INT 12
30870: PPUSH
30871: LD_INT 1
30873: PPUSH
30874: CALL_OW 50
30878: GO 30892
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30880: CALL_OW 45
30884: PPUSH
30885: LD_INT 1
30887: PPUSH
30888: CALL_OW 51
// end ;
30892: GO 30766
30894: POP
30895: POP
// end ;
30896: PPOPN 2
30898: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30899: LD_EXP 47
30903: IFFALSE 30911
30905: PUSH
30906: LD_EXP 93
30910: AND
30911: IFFALSE 31133
30913: GO 30915
30915: DISABLE
30916: LD_INT 0
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30924: LD_ADDR_VAR 0 6
30928: PUSH
30929: LD_INT 22
30931: PUSH
30932: LD_OWVAR 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 21
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: LD_INT 23
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: PPUSH
30973: CALL_OW 69
30977: ST_TO_ADDR
// if not tmp then
30978: LD_VAR 0 6
30982: NOT
30983: IFFALSE 30987
// exit ;
30985: GO 31133
// s1 := rand ( 1 , 4 ) ;
30987: LD_ADDR_VAR 0 2
30991: PUSH
30992: LD_INT 1
30994: PPUSH
30995: LD_INT 4
30997: PPUSH
30998: CALL_OW 12
31002: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31003: LD_ADDR_VAR 0 4
31007: PUSH
31008: LD_VAR 0 6
31012: PUSH
31013: LD_INT 1
31015: ARRAY
31016: PPUSH
31017: LD_VAR 0 2
31021: PPUSH
31022: CALL_OW 259
31026: ST_TO_ADDR
// if s1 = 1 then
31027: LD_VAR 0 2
31031: PUSH
31032: LD_INT 1
31034: EQUAL
31035: IFFALSE 31055
// s2 := rand ( 2 , 4 ) else
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_INT 2
31044: PPUSH
31045: LD_INT 4
31047: PPUSH
31048: CALL_OW 12
31052: ST_TO_ADDR
31053: GO 31063
// s2 := 1 ;
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_INT 1
31062: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31063: LD_ADDR_VAR 0 5
31067: PUSH
31068: LD_VAR 0 6
31072: PUSH
31073: LD_INT 1
31075: ARRAY
31076: PPUSH
31077: LD_VAR 0 3
31081: PPUSH
31082: CALL_OW 259
31086: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31087: LD_VAR 0 6
31091: PUSH
31092: LD_INT 1
31094: ARRAY
31095: PPUSH
31096: LD_VAR 0 2
31100: PPUSH
31101: LD_VAR 0 5
31105: PPUSH
31106: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31110: LD_VAR 0 6
31114: PUSH
31115: LD_INT 1
31117: ARRAY
31118: PPUSH
31119: LD_VAR 0 3
31123: PPUSH
31124: LD_VAR 0 4
31128: PPUSH
31129: CALL_OW 237
// end ;
31133: PPOPN 6
31135: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31136: LD_EXP 47
31140: IFFALSE 31148
31142: PUSH
31143: LD_EXP 94
31147: AND
31148: IFFALSE 31227
31150: GO 31152
31152: DISABLE
31153: LD_INT 0
31155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31156: LD_ADDR_VAR 0 1
31160: PUSH
31161: LD_INT 22
31163: PUSH
31164: LD_OWVAR 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 30
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PPUSH
31187: CALL_OW 69
31191: ST_TO_ADDR
// if not tmp then
31192: LD_VAR 0 1
31196: NOT
31197: IFFALSE 31201
// exit ;
31199: GO 31227
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31201: LD_VAR 0 1
31205: PUSH
31206: LD_INT 1
31208: PPUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 12
31218: ARRAY
31219: PPUSH
31220: LD_INT 1
31222: PPUSH
31223: CALL_OW 234
// end ;
31227: PPOPN 1
31229: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31230: LD_EXP 47
31234: IFFALSE 31242
31236: PUSH
31237: LD_EXP 95
31241: AND
31242: IFFALSE 31354
31244: GO 31246
31246: DISABLE
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31251: LD_ADDR_VAR 0 2
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 30
31273: PUSH
31274: LD_INT 27
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 30
31283: PUSH
31284: LD_INT 26
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 30
31293: PUSH
31294: LD_INT 28
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: ST_TO_ADDR
// if not tmp then
31316: LD_VAR 0 2
31320: NOT
31321: IFFALSE 31325
// exit ;
31323: GO 31354
// for i in tmp do
31325: LD_ADDR_VAR 0 1
31329: PUSH
31330: LD_VAR 0 2
31334: PUSH
31335: FOR_IN
31336: IFFALSE 31352
// SetLives ( i , 1 ) ;
31338: LD_VAR 0 1
31342: PPUSH
31343: LD_INT 1
31345: PPUSH
31346: CALL_OW 234
31350: GO 31335
31352: POP
31353: POP
// end ;
31354: PPOPN 2
31356: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31357: LD_EXP 47
31361: IFFALSE 31369
31363: PUSH
31364: LD_EXP 96
31368: AND
31369: IFFALSE 31656
31371: GO 31373
31373: DISABLE
31374: LD_INT 0
31376: PPUSH
31377: PPUSH
31378: PPUSH
// begin i := rand ( 1 , 7 ) ;
31379: LD_ADDR_VAR 0 1
31383: PUSH
31384: LD_INT 1
31386: PPUSH
31387: LD_INT 7
31389: PPUSH
31390: CALL_OW 12
31394: ST_TO_ADDR
// case i of 1 :
31395: LD_VAR 0 1
31399: PUSH
31400: LD_INT 1
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31418
31408: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31409: LD_STRING earthquake(getX(game), 0, 32)
31411: PPUSH
31412: CALL_OW 559
31416: GO 31656
31418: LD_INT 2
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31440
31426: POP
// begin ToLua ( displayStucuk(); ) ;
31427: LD_STRING displayStucuk();
31429: PPUSH
31430: CALL_OW 559
// ResetFog ;
31434: CALL_OW 335
// end ; 3 :
31438: GO 31656
31440: LD_INT 3
31442: DOUBLE
31443: EQUAL
31444: IFTRUE 31448
31446: GO 31552
31448: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31449: LD_ADDR_VAR 0 2
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_OWVAR 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 25
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PPUSH
31480: CALL_OW 69
31484: ST_TO_ADDR
// if not tmp then
31485: LD_VAR 0 2
31489: NOT
31490: IFFALSE 31494
// exit ;
31492: GO 31656
// un := tmp [ rand ( 1 , tmp ) ] ;
31494: LD_ADDR_VAR 0 3
31498: PUSH
31499: LD_VAR 0 2
31503: PUSH
31504: LD_INT 1
31506: PPUSH
31507: LD_VAR 0 2
31511: PPUSH
31512: CALL_OW 12
31516: ARRAY
31517: ST_TO_ADDR
// if Crawls ( un ) then
31518: LD_VAR 0 3
31522: PPUSH
31523: CALL_OW 318
31527: IFFALSE 31538
// ComWalk ( un ) ;
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31538: LD_VAR 0 3
31542: PPUSH
31543: LD_INT 8
31545: PPUSH
31546: CALL_OW 336
// end ; 4 :
31550: GO 31656
31552: LD_INT 4
31554: DOUBLE
31555: EQUAL
31556: IFTRUE 31560
31558: GO 31634
31560: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31561: LD_ADDR_VAR 0 2
31565: PUSH
31566: LD_INT 22
31568: PUSH
31569: LD_OWVAR 2
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 30
31580: PUSH
31581: LD_INT 29
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PPUSH
31592: CALL_OW 69
31596: ST_TO_ADDR
// if not tmp then
31597: LD_VAR 0 2
31601: NOT
31602: IFFALSE 31606
// exit ;
31604: GO 31656
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31606: LD_VAR 0 2
31610: PUSH
31611: LD_INT 1
31613: ARRAY
31614: PPUSH
31615: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31619: LD_VAR 0 2
31623: PUSH
31624: LD_INT 1
31626: ARRAY
31627: PPUSH
31628: CALL_OW 65
// end ; 5 .. 7 :
31632: GO 31656
31634: LD_INT 5
31636: DOUBLE
31637: GREATEREQUAL
31638: IFFALSE 31646
31640: LD_INT 7
31642: DOUBLE
31643: LESSEQUAL
31644: IFTRUE 31648
31646: GO 31655
31648: POP
// StreamSibBomb ; end ;
31649: CALL 27837 0 0
31653: GO 31656
31655: POP
// end ;
31656: PPOPN 3
31658: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31659: LD_EXP 47
31663: IFFALSE 31671
31665: PUSH
31666: LD_EXP 97
31670: AND
31671: IFFALSE 31827
31673: GO 31675
31675: DISABLE
31676: LD_INT 0
31678: PPUSH
31679: PPUSH
31680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31681: LD_ADDR_VAR 0 2
31685: PUSH
31686: LD_INT 81
31688: PUSH
31689: LD_OWVAR 2
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 21
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 21
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PPUSH
31730: CALL_OW 69
31734: ST_TO_ADDR
// if not tmp then
31735: LD_VAR 0 2
31739: NOT
31740: IFFALSE 31744
// exit ;
31742: GO 31827
// p := 0 ;
31744: LD_ADDR_VAR 0 3
31748: PUSH
31749: LD_INT 0
31751: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31752: LD_INT 35
31754: PPUSH
31755: CALL_OW 67
// p := p + 1 ;
31759: LD_ADDR_VAR 0 3
31763: PUSH
31764: LD_VAR 0 3
31768: PUSH
31769: LD_INT 1
31771: PLUS
31772: ST_TO_ADDR
// for i in tmp do
31773: LD_ADDR_VAR 0 1
31777: PUSH
31778: LD_VAR 0 2
31782: PUSH
31783: FOR_IN
31784: IFFALSE 31815
// if GetLives ( i ) < 1000 then
31786: LD_VAR 0 1
31790: PPUSH
31791: CALL_OW 256
31795: PUSH
31796: LD_INT 1000
31798: LESS
31799: IFFALSE 31813
// SetLives ( i , 1000 ) ;
31801: LD_VAR 0 1
31805: PPUSH
31806: LD_INT 1000
31808: PPUSH
31809: CALL_OW 234
31813: GO 31783
31815: POP
31816: POP
// until p > 20 ;
31817: LD_VAR 0 3
31821: PUSH
31822: LD_INT 20
31824: GREATER
31825: IFFALSE 31752
// end ;
31827: PPOPN 3
31829: END
// every 0 0$1 trigger StreamModeActive and sTime do
31830: LD_EXP 47
31834: IFFALSE 31842
31836: PUSH
31837: LD_EXP 98
31841: AND
31842: IFFALSE 31877
31844: GO 31846
31846: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31847: LD_INT 28
31849: PPUSH
31850: LD_OWVAR 2
31854: PPUSH
31855: LD_INT 2
31857: PPUSH
31858: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31862: LD_INT 30
31864: PPUSH
31865: LD_OWVAR 2
31869: PPUSH
31870: LD_INT 2
31872: PPUSH
31873: CALL_OW 322
// end ;
31877: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31878: LD_EXP 47
31882: IFFALSE 31890
31884: PUSH
31885: LD_EXP 99
31889: AND
31890: IFFALSE 32011
31892: GO 31894
31894: DISABLE
31895: LD_INT 0
31897: PPUSH
31898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31899: LD_ADDR_VAR 0 2
31903: PUSH
31904: LD_INT 22
31906: PUSH
31907: LD_OWVAR 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 21
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: LD_INT 23
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: PPUSH
31948: CALL_OW 69
31952: ST_TO_ADDR
// if not tmp then
31953: LD_VAR 0 2
31957: NOT
31958: IFFALSE 31962
// exit ;
31960: GO 32011
// for i in tmp do
31962: LD_ADDR_VAR 0 1
31966: PUSH
31967: LD_VAR 0 2
31971: PUSH
31972: FOR_IN
31973: IFFALSE 32009
// begin if Crawls ( i ) then
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 318
31984: IFFALSE 31995
// ComWalk ( i ) ;
31986: LD_VAR 0 1
31990: PPUSH
31991: CALL_OW 138
// SetClass ( i , 2 ) ;
31995: LD_VAR 0 1
31999: PPUSH
32000: LD_INT 2
32002: PPUSH
32003: CALL_OW 336
// end ;
32007: GO 31972
32009: POP
32010: POP
// end ;
32011: PPOPN 2
32013: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32014: LD_EXP 47
32018: IFFALSE 32026
32020: PUSH
32021: LD_EXP 100
32025: AND
32026: IFFALSE 32316
32028: GO 32030
32030: DISABLE
32031: LD_INT 0
32033: PPUSH
32034: PPUSH
32035: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32036: LD_OWVAR 2
32040: PPUSH
32041: LD_INT 9
32043: PPUSH
32044: LD_INT 1
32046: PPUSH
32047: LD_INT 1
32049: PPUSH
32050: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32054: LD_INT 9
32056: PPUSH
32057: LD_OWVAR 2
32061: PPUSH
32062: CALL_OW 343
// uc_side := 9 ;
32066: LD_ADDR_OWVAR 20
32070: PUSH
32071: LD_INT 9
32073: ST_TO_ADDR
// uc_nation := 2 ;
32074: LD_ADDR_OWVAR 21
32078: PUSH
32079: LD_INT 2
32081: ST_TO_ADDR
// hc_name := Dark Warrior ;
32082: LD_ADDR_OWVAR 26
32086: PUSH
32087: LD_STRING Dark Warrior
32089: ST_TO_ADDR
// hc_gallery :=  ;
32090: LD_ADDR_OWVAR 33
32094: PUSH
32095: LD_STRING 
32097: ST_TO_ADDR
// hc_noskilllimit := true ;
32098: LD_ADDR_OWVAR 76
32102: PUSH
32103: LD_INT 1
32105: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32106: LD_ADDR_OWVAR 31
32110: PUSH
32111: LD_INT 30
32113: PUSH
32114: LD_INT 30
32116: PUSH
32117: LD_INT 30
32119: PUSH
32120: LD_INT 30
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: ST_TO_ADDR
// un := CreateHuman ;
32129: LD_ADDR_VAR 0 3
32133: PUSH
32134: CALL_OW 44
32138: ST_TO_ADDR
// hc_noskilllimit := false ;
32139: LD_ADDR_OWVAR 76
32143: PUSH
32144: LD_INT 0
32146: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32147: LD_VAR 0 3
32151: PPUSH
32152: LD_INT 1
32154: PPUSH
32155: CALL_OW 51
// ToLua ( playRanger() ) ;
32159: LD_STRING playRanger()
32161: PPUSH
32162: CALL_OW 559
// p := 0 ;
32166: LD_ADDR_VAR 0 2
32170: PUSH
32171: LD_INT 0
32173: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32174: LD_INT 35
32176: PPUSH
32177: CALL_OW 67
// p := p + 1 ;
32181: LD_ADDR_VAR 0 2
32185: PUSH
32186: LD_VAR 0 2
32190: PUSH
32191: LD_INT 1
32193: PLUS
32194: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32195: LD_VAR 0 3
32199: PPUSH
32200: CALL_OW 256
32204: PUSH
32205: LD_INT 1000
32207: LESS
32208: IFFALSE 32222
// SetLives ( un , 1000 ) ;
32210: LD_VAR 0 3
32214: PPUSH
32215: LD_INT 1000
32217: PPUSH
32218: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32222: LD_VAR 0 3
32226: PPUSH
32227: LD_INT 81
32229: PUSH
32230: LD_OWVAR 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 91
32241: PUSH
32242: LD_VAR 0 3
32246: PUSH
32247: LD_INT 30
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PPUSH
32259: CALL_OW 69
32263: PPUSH
32264: LD_VAR 0 3
32268: PPUSH
32269: CALL_OW 74
32273: PPUSH
32274: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32278: LD_VAR 0 2
32282: PUSH
32283: LD_INT 80
32285: GREATER
32286: IFTRUE 32299
32288: PUSH
32289: LD_VAR 0 3
32293: PPUSH
32294: CALL_OW 301
32298: OR
32299: IFFALSE 32174
// if un then
32301: LD_VAR 0 3
32305: IFFALSE 32316
// RemoveUnit ( un ) ;
32307: LD_VAR 0 3
32311: PPUSH
32312: CALL_OW 64
// end ;
32316: PPOPN 3
32318: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32319: LD_EXP 101
32323: IFFALSE 32439
32325: GO 32327
32327: DISABLE
32328: LD_INT 0
32330: PPUSH
32331: PPUSH
32332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32333: LD_ADDR_VAR 0 2
32337: PUSH
32338: LD_INT 81
32340: PUSH
32341: LD_OWVAR 2
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 21
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PPUSH
32364: CALL_OW 69
32368: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32369: LD_STRING playComputer()
32371: PPUSH
32372: CALL_OW 559
// if not tmp then
32376: LD_VAR 0 2
32380: NOT
32381: IFFALSE 32385
// exit ;
32383: GO 32439
// for i in tmp do
32385: LD_ADDR_VAR 0 1
32389: PUSH
32390: LD_VAR 0 2
32394: PUSH
32395: FOR_IN
32396: IFFALSE 32437
// for j := 1 to 4 do
32398: LD_ADDR_VAR 0 3
32402: PUSH
32403: DOUBLE
32404: LD_INT 1
32406: DEC
32407: ST_TO_ADDR
32408: LD_INT 4
32410: PUSH
32411: FOR_TO
32412: IFFALSE 32433
// SetSkill ( i , j , 10 ) ;
32414: LD_VAR 0 1
32418: PPUSH
32419: LD_VAR 0 3
32423: PPUSH
32424: LD_INT 10
32426: PPUSH
32427: CALL_OW 237
32431: GO 32411
32433: POP
32434: POP
32435: GO 32395
32437: POP
32438: POP
// end ;
32439: PPOPN 3
32441: END
// every 0 0$1 trigger s30 do var i , tmp ;
32442: LD_EXP 102
32446: IFFALSE 32515
32448: GO 32450
32450: DISABLE
32451: LD_INT 0
32453: PPUSH
32454: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32455: LD_ADDR_VAR 0 2
32459: PUSH
32460: LD_INT 22
32462: PUSH
32463: LD_OWVAR 2
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PPUSH
32472: CALL_OW 69
32476: ST_TO_ADDR
// if not tmp then
32477: LD_VAR 0 2
32481: NOT
32482: IFFALSE 32486
// exit ;
32484: GO 32515
// for i in tmp do
32486: LD_ADDR_VAR 0 1
32490: PUSH
32491: LD_VAR 0 2
32495: PUSH
32496: FOR_IN
32497: IFFALSE 32513
// SetLives ( i , 300 ) ;
32499: LD_VAR 0 1
32503: PPUSH
32504: LD_INT 300
32506: PPUSH
32507: CALL_OW 234
32511: GO 32496
32513: POP
32514: POP
// end ;
32515: PPOPN 2
32517: END
// every 0 0$1 trigger s60 do var i , tmp ;
32518: LD_EXP 103
32522: IFFALSE 32591
32524: GO 32526
32526: DISABLE
32527: LD_INT 0
32529: PPUSH
32530: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32531: LD_ADDR_VAR 0 2
32535: PUSH
32536: LD_INT 22
32538: PUSH
32539: LD_OWVAR 2
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PPUSH
32548: CALL_OW 69
32552: ST_TO_ADDR
// if not tmp then
32553: LD_VAR 0 2
32557: NOT
32558: IFFALSE 32562
// exit ;
32560: GO 32591
// for i in tmp do
32562: LD_ADDR_VAR 0 1
32566: PUSH
32567: LD_VAR 0 2
32571: PUSH
32572: FOR_IN
32573: IFFALSE 32589
// SetLives ( i , 600 ) ;
32575: LD_VAR 0 1
32579: PPUSH
32580: LD_INT 600
32582: PPUSH
32583: CALL_OW 234
32587: GO 32572
32589: POP
32590: POP
// end ;
32591: PPOPN 2
32593: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32594: LD_INT 0
32596: PPUSH
// case cmd of 301 :
32597: LD_VAR 0 1
32601: PUSH
32602: LD_INT 301
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32642
32610: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32611: LD_VAR 0 6
32615: PPUSH
32616: LD_VAR 0 7
32620: PPUSH
32621: LD_VAR 0 8
32625: PPUSH
32626: LD_VAR 0 4
32630: PPUSH
32631: LD_VAR 0 5
32635: PPUSH
32636: CALL 33855 0 5
32640: GO 32763
32642: LD_INT 302
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32687
32650: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32651: LD_VAR 0 6
32655: PPUSH
32656: LD_VAR 0 7
32660: PPUSH
32661: LD_VAR 0 8
32665: PPUSH
32666: LD_VAR 0 9
32670: PPUSH
32671: LD_VAR 0 4
32675: PPUSH
32676: LD_VAR 0 5
32680: PPUSH
32681: CALL 33946 0 6
32685: GO 32763
32687: LD_INT 303
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32732
32695: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32696: LD_VAR 0 6
32700: PPUSH
32701: LD_VAR 0 7
32705: PPUSH
32706: LD_VAR 0 8
32710: PPUSH
32711: LD_VAR 0 9
32715: PPUSH
32716: LD_VAR 0 4
32720: PPUSH
32721: LD_VAR 0 5
32725: PPUSH
32726: CALL 32768 0 6
32730: GO 32763
32732: LD_INT 304
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32762
32740: POP
// hHackTeleport ( unit , x , y ) ; end ;
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 4
32750: PPUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: CALL 34539 0 3
32760: GO 32763
32762: POP
// end ;
32763: LD_VAR 0 12
32767: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32768: LD_INT 0
32770: PPUSH
32771: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32772: LD_VAR 0 1
32776: PUSH
32777: LD_INT 1
32779: LESS
32780: IFTRUE 32792
32782: PUSH
32783: LD_VAR 0 1
32787: PUSH
32788: LD_INT 3
32790: GREATER
32791: OR
32792: IFTRUE 32810
32794: PUSH
32795: LD_VAR 0 5
32799: PPUSH
32800: LD_VAR 0 6
32804: PPUSH
32805: CALL_OW 428
32809: OR
32810: IFFALSE 32814
// exit ;
32812: GO 33542
// uc_side := your_side ;
32814: LD_ADDR_OWVAR 20
32818: PUSH
32819: LD_OWVAR 2
32823: ST_TO_ADDR
// uc_nation := nation ;
32824: LD_ADDR_OWVAR 21
32828: PUSH
32829: LD_VAR 0 1
32833: ST_TO_ADDR
// bc_level = 1 ;
32834: LD_ADDR_OWVAR 43
32838: PUSH
32839: LD_INT 1
32841: ST_TO_ADDR
// case btype of 1 :
32842: LD_VAR 0 2
32846: PUSH
32847: LD_INT 1
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32866
32855: POP
// bc_type := b_depot ; 2 :
32856: LD_ADDR_OWVAR 42
32860: PUSH
32861: LD_INT 0
32863: ST_TO_ADDR
32864: GO 33486
32866: LD_INT 2
32868: DOUBLE
32869: EQUAL
32870: IFTRUE 32874
32872: GO 32885
32874: POP
// bc_type := b_warehouse ; 3 :
32875: LD_ADDR_OWVAR 42
32879: PUSH
32880: LD_INT 1
32882: ST_TO_ADDR
32883: GO 33486
32885: LD_INT 3
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32904
32893: POP
// bc_type := b_lab ; 4 .. 9 :
32894: LD_ADDR_OWVAR 42
32898: PUSH
32899: LD_INT 6
32901: ST_TO_ADDR
32902: GO 33486
32904: LD_INT 4
32906: DOUBLE
32907: GREATEREQUAL
32908: IFFALSE 32916
32910: LD_INT 9
32912: DOUBLE
32913: LESSEQUAL
32914: IFTRUE 32918
32916: GO 32978
32918: POP
// begin bc_type := b_lab_half ;
32919: LD_ADDR_OWVAR 42
32923: PUSH
32924: LD_INT 7
32926: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32927: LD_ADDR_OWVAR 44
32931: PUSH
32932: LD_INT 10
32934: PUSH
32935: LD_INT 11
32937: PUSH
32938: LD_INT 12
32940: PUSH
32941: LD_INT 15
32943: PUSH
32944: LD_INT 14
32946: PUSH
32947: LD_INT 13
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: PUSH
32958: LD_VAR 0 2
32962: PUSH
32963: LD_INT 3
32965: MINUS
32966: ARRAY
32967: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32968: LD_ADDR_OWVAR 45
32972: PUSH
32973: LD_INT 9
32975: ST_TO_ADDR
// end ; 10 .. 13 :
32976: GO 33486
32978: LD_INT 10
32980: DOUBLE
32981: GREATEREQUAL
32982: IFFALSE 32990
32984: LD_INT 13
32986: DOUBLE
32987: LESSEQUAL
32988: IFTRUE 32992
32990: GO 33069
32992: POP
// begin bc_type := b_lab_full ;
32993: LD_ADDR_OWVAR 42
32997: PUSH
32998: LD_INT 8
33000: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33001: LD_ADDR_OWVAR 44
33005: PUSH
33006: LD_INT 10
33008: PUSH
33009: LD_INT 12
33011: PUSH
33012: LD_INT 14
33014: PUSH
33015: LD_INT 13
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: PUSH
33024: LD_VAR 0 2
33028: PUSH
33029: LD_INT 9
33031: MINUS
33032: ARRAY
33033: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33034: LD_ADDR_OWVAR 45
33038: PUSH
33039: LD_INT 11
33041: PUSH
33042: LD_INT 15
33044: PUSH
33045: LD_INT 12
33047: PUSH
33048: LD_INT 15
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: PUSH
33057: LD_VAR 0 2
33061: PUSH
33062: LD_INT 9
33064: MINUS
33065: ARRAY
33066: ST_TO_ADDR
// end ; 14 :
33067: GO 33486
33069: LD_INT 14
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33077
33075: GO 33088
33077: POP
// bc_type := b_workshop ; 15 :
33078: LD_ADDR_OWVAR 42
33082: PUSH
33083: LD_INT 2
33085: ST_TO_ADDR
33086: GO 33486
33088: LD_INT 15
33090: DOUBLE
33091: EQUAL
33092: IFTRUE 33096
33094: GO 33107
33096: POP
// bc_type := b_factory ; 16 :
33097: LD_ADDR_OWVAR 42
33101: PUSH
33102: LD_INT 3
33104: ST_TO_ADDR
33105: GO 33486
33107: LD_INT 16
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33115
33113: GO 33126
33115: POP
// bc_type := b_ext_gun ; 17 :
33116: LD_ADDR_OWVAR 42
33120: PUSH
33121: LD_INT 17
33123: ST_TO_ADDR
33124: GO 33486
33126: LD_INT 17
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33162
33134: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33135: LD_ADDR_OWVAR 42
33139: PUSH
33140: LD_INT 19
33142: PUSH
33143: LD_INT 23
33145: PUSH
33146: LD_INT 19
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: PUSH
33154: LD_VAR 0 1
33158: ARRAY
33159: ST_TO_ADDR
33160: GO 33486
33162: LD_INT 18
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33181
33170: POP
// bc_type := b_ext_radar ; 19 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 20
33178: ST_TO_ADDR
33179: GO 33486
33181: LD_INT 19
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// bc_type := b_ext_radio ; 20 :
33190: LD_ADDR_OWVAR 42
33194: PUSH
33195: LD_INT 22
33197: ST_TO_ADDR
33198: GO 33486
33200: LD_INT 20
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// bc_type := b_ext_siberium ; 21 :
33209: LD_ADDR_OWVAR 42
33213: PUSH
33214: LD_INT 21
33216: ST_TO_ADDR
33217: GO 33486
33219: LD_INT 21
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// bc_type := b_ext_computer ; 22 :
33228: LD_ADDR_OWVAR 42
33232: PUSH
33233: LD_INT 24
33235: ST_TO_ADDR
33236: GO 33486
33238: LD_INT 22
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33257
33246: POP
// bc_type := b_ext_track ; 23 :
33247: LD_ADDR_OWVAR 42
33251: PUSH
33252: LD_INT 16
33254: ST_TO_ADDR
33255: GO 33486
33257: LD_INT 23
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33276
33265: POP
// bc_type := b_ext_laser ; 24 :
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 25
33273: ST_TO_ADDR
33274: GO 33486
33276: LD_INT 24
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33295
33284: POP
// bc_type := b_control_tower ; 25 :
33285: LD_ADDR_OWVAR 42
33289: PUSH
33290: LD_INT 36
33292: ST_TO_ADDR
33293: GO 33486
33295: LD_INT 25
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33314
33303: POP
// bc_type := b_breastwork ; 26 :
33304: LD_ADDR_OWVAR 42
33308: PUSH
33309: LD_INT 31
33311: ST_TO_ADDR
33312: GO 33486
33314: LD_INT 26
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33333
33322: POP
// bc_type := b_bunker ; 27 :
33323: LD_ADDR_OWVAR 42
33327: PUSH
33328: LD_INT 32
33330: ST_TO_ADDR
33331: GO 33486
33333: LD_INT 27
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33352
33341: POP
// bc_type := b_turret ; 28 :
33342: LD_ADDR_OWVAR 42
33346: PUSH
33347: LD_INT 33
33349: ST_TO_ADDR
33350: GO 33486
33352: LD_INT 28
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33371
33360: POP
// bc_type := b_armoury ; 29 :
33361: LD_ADDR_OWVAR 42
33365: PUSH
33366: LD_INT 4
33368: ST_TO_ADDR
33369: GO 33486
33371: LD_INT 29
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33390
33379: POP
// bc_type := b_barracks ; 30 :
33380: LD_ADDR_OWVAR 42
33384: PUSH
33385: LD_INT 5
33387: ST_TO_ADDR
33388: GO 33486
33390: LD_INT 30
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 33409
33398: POP
// bc_type := b_solar_power ; 31 :
33399: LD_ADDR_OWVAR 42
33403: PUSH
33404: LD_INT 27
33406: ST_TO_ADDR
33407: GO 33486
33409: LD_INT 31
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33428
33417: POP
// bc_type := b_oil_power ; 32 :
33418: LD_ADDR_OWVAR 42
33422: PUSH
33423: LD_INT 26
33425: ST_TO_ADDR
33426: GO 33486
33428: LD_INT 32
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33447
33436: POP
// bc_type := b_siberite_power ; 33 :
33437: LD_ADDR_OWVAR 42
33441: PUSH
33442: LD_INT 28
33444: ST_TO_ADDR
33445: GO 33486
33447: LD_INT 33
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33466
33455: POP
// bc_type := b_oil_mine ; 34 :
33456: LD_ADDR_OWVAR 42
33460: PUSH
33461: LD_INT 29
33463: ST_TO_ADDR
33464: GO 33486
33466: LD_INT 34
33468: DOUBLE
33469: EQUAL
33470: IFTRUE 33474
33472: GO 33485
33474: POP
// bc_type := b_siberite_mine ; end ;
33475: LD_ADDR_OWVAR 42
33479: PUSH
33480: LD_INT 30
33482: ST_TO_ADDR
33483: GO 33486
33485: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33486: LD_ADDR_VAR 0 8
33490: PUSH
33491: LD_VAR 0 5
33495: PPUSH
33496: LD_VAR 0 6
33500: PPUSH
33501: LD_VAR 0 3
33505: PPUSH
33506: CALL_OW 47
33510: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33511: LD_OWVAR 42
33515: PUSH
33516: LD_INT 32
33518: PUSH
33519: LD_INT 33
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: IN
33526: IFFALSE 33542
// PlaceWeaponTurret ( b , weapon ) ;
33528: LD_VAR 0 8
33532: PPUSH
33533: LD_VAR 0 4
33537: PPUSH
33538: CALL_OW 431
// end ;
33542: LD_VAR 0 7
33546: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33547: LD_INT 0
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33553: LD_ADDR_VAR 0 4
33557: PUSH
33558: LD_INT 22
33560: PUSH
33561: LD_OWVAR 2
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 30
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 30
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PPUSH
33602: CALL_OW 69
33606: ST_TO_ADDR
// if not tmp then
33607: LD_VAR 0 4
33611: NOT
33612: IFFALSE 33616
// exit ;
33614: GO 33675
// for i in tmp do
33616: LD_ADDR_VAR 0 2
33620: PUSH
33621: LD_VAR 0 4
33625: PUSH
33626: FOR_IN
33627: IFFALSE 33673
// for j = 1 to 3 do
33629: LD_ADDR_VAR 0 3
33633: PUSH
33634: DOUBLE
33635: LD_INT 1
33637: DEC
33638: ST_TO_ADDR
33639: LD_INT 3
33641: PUSH
33642: FOR_TO
33643: IFFALSE 33669
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33645: LD_VAR 0 2
33649: PPUSH
33650: CALL_OW 274
33654: PPUSH
33655: LD_VAR 0 3
33659: PPUSH
33660: LD_INT 99999
33662: PPUSH
33663: CALL_OW 277
33667: GO 33642
33669: POP
33670: POP
33671: GO 33626
33673: POP
33674: POP
// end ;
33675: LD_VAR 0 1
33679: RET
// export function hHackSetLevel10 ; var i , j ; begin
33680: LD_INT 0
33682: PPUSH
33683: PPUSH
33684: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33685: LD_ADDR_VAR 0 2
33689: PUSH
33690: LD_INT 21
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PPUSH
33700: CALL_OW 69
33704: PUSH
33705: FOR_IN
33706: IFFALSE 33758
// if IsSelected ( i ) then
33708: LD_VAR 0 2
33712: PPUSH
33713: CALL_OW 306
33717: IFFALSE 33756
// begin for j := 1 to 4 do
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: DOUBLE
33725: LD_INT 1
33727: DEC
33728: ST_TO_ADDR
33729: LD_INT 4
33731: PUSH
33732: FOR_TO
33733: IFFALSE 33754
// SetSkill ( i , j , 10 ) ;
33735: LD_VAR 0 2
33739: PPUSH
33740: LD_VAR 0 3
33744: PPUSH
33745: LD_INT 10
33747: PPUSH
33748: CALL_OW 237
33752: GO 33732
33754: POP
33755: POP
// end ;
33756: GO 33705
33758: POP
33759: POP
// end ;
33760: LD_VAR 0 1
33764: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33765: LD_INT 0
33767: PPUSH
33768: PPUSH
33769: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33770: LD_ADDR_VAR 0 2
33774: PUSH
33775: LD_INT 22
33777: PUSH
33778: LD_OWVAR 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 21
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PPUSH
33801: CALL_OW 69
33805: PUSH
33806: FOR_IN
33807: IFFALSE 33848
// begin for j := 1 to 4 do
33809: LD_ADDR_VAR 0 3
33813: PUSH
33814: DOUBLE
33815: LD_INT 1
33817: DEC
33818: ST_TO_ADDR
33819: LD_INT 4
33821: PUSH
33822: FOR_TO
33823: IFFALSE 33844
// SetSkill ( i , j , 10 ) ;
33825: LD_VAR 0 2
33829: PPUSH
33830: LD_VAR 0 3
33834: PPUSH
33835: LD_INT 10
33837: PPUSH
33838: CALL_OW 237
33842: GO 33822
33844: POP
33845: POP
// end ;
33846: GO 33806
33848: POP
33849: POP
// end ;
33850: LD_VAR 0 1
33854: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33855: LD_INT 0
33857: PPUSH
// uc_side := your_side ;
33858: LD_ADDR_OWVAR 20
33862: PUSH
33863: LD_OWVAR 2
33867: ST_TO_ADDR
// uc_nation := nation ;
33868: LD_ADDR_OWVAR 21
33872: PUSH
33873: LD_VAR 0 1
33877: ST_TO_ADDR
// InitHc ;
33878: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33882: LD_INT 0
33884: PPUSH
33885: LD_VAR 0 2
33889: PPUSH
33890: LD_VAR 0 3
33894: PPUSH
33895: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33899: LD_VAR 0 4
33903: PPUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: CALL_OW 428
33913: PUSH
33914: LD_INT 0
33916: EQUAL
33917: IFFALSE 33941
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33919: CALL_OW 44
33923: PPUSH
33924: LD_VAR 0 4
33928: PPUSH
33929: LD_VAR 0 5
33933: PPUSH
33934: LD_INT 1
33936: PPUSH
33937: CALL_OW 48
// end ;
33941: LD_VAR 0 6
33945: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33946: LD_INT 0
33948: PPUSH
33949: PPUSH
// uc_side := your_side ;
33950: LD_ADDR_OWVAR 20
33954: PUSH
33955: LD_OWVAR 2
33959: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33960: LD_VAR 0 1
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 4
33976: PUSH
33977: LD_INT 5
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: IN
33987: IFFALSE 33999
// uc_nation := nation_american else
33989: LD_ADDR_OWVAR 21
33993: PUSH
33994: LD_INT 1
33996: ST_TO_ADDR
33997: GO 34042
// if chassis in [ 11 , 12 , 13 , 14 ] then
33999: LD_VAR 0 1
34003: PUSH
34004: LD_INT 11
34006: PUSH
34007: LD_INT 12
34009: PUSH
34010: LD_INT 13
34012: PUSH
34013: LD_INT 14
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: IN
34022: IFFALSE 34034
// uc_nation := nation_arabian else
34024: LD_ADDR_OWVAR 21
34028: PUSH
34029: LD_INT 2
34031: ST_TO_ADDR
34032: GO 34042
// uc_nation := nation_russian ;
34034: LD_ADDR_OWVAR 21
34038: PUSH
34039: LD_INT 3
34041: ST_TO_ADDR
// vc_chassis := chassis ;
34042: LD_ADDR_OWVAR 37
34046: PUSH
34047: LD_VAR 0 1
34051: ST_TO_ADDR
// vc_engine := engine ;
34052: LD_ADDR_OWVAR 39
34056: PUSH
34057: LD_VAR 0 2
34061: ST_TO_ADDR
// vc_control := control ;
34062: LD_ADDR_OWVAR 38
34066: PUSH
34067: LD_VAR 0 3
34071: ST_TO_ADDR
// vc_weapon := weapon ;
34072: LD_ADDR_OWVAR 40
34076: PUSH
34077: LD_VAR 0 4
34081: ST_TO_ADDR
// un := CreateVehicle ;
34082: LD_ADDR_VAR 0 8
34086: PUSH
34087: CALL_OW 45
34091: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34092: LD_VAR 0 8
34096: PPUSH
34097: LD_INT 0
34099: PPUSH
34100: LD_INT 5
34102: PPUSH
34103: CALL_OW 12
34107: PPUSH
34108: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34112: LD_VAR 0 8
34116: PPUSH
34117: LD_VAR 0 5
34121: PPUSH
34122: LD_VAR 0 6
34126: PPUSH
34127: LD_INT 1
34129: PPUSH
34130: CALL_OW 48
// end ;
34134: LD_VAR 0 7
34138: RET
// export hInvincible ; every 1 do
34139: GO 34141
34141: DISABLE
// hInvincible := [ ] ;
34142: LD_ADDR_EXP 104
34146: PUSH
34147: EMPTY
34148: ST_TO_ADDR
34149: END
// every 10 do var i ;
34150: GO 34152
34152: DISABLE
34153: LD_INT 0
34155: PPUSH
// begin enable ;
34156: ENABLE
// if not hInvincible then
34157: LD_EXP 104
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34210
// for i in hInvincible do
34166: LD_ADDR_VAR 0 1
34170: PUSH
34171: LD_EXP 104
34175: PUSH
34176: FOR_IN
34177: IFFALSE 34208
// if GetLives ( i ) < 1000 then
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 256
34188: PUSH
34189: LD_INT 1000
34191: LESS
34192: IFFALSE 34206
// SetLives ( i , 1000 ) ;
34194: LD_VAR 0 1
34198: PPUSH
34199: LD_INT 1000
34201: PPUSH
34202: CALL_OW 234
34206: GO 34176
34208: POP
34209: POP
// end ;
34210: PPOPN 1
34212: END
// export function hHackInvincible ; var i ; begin
34213: LD_INT 0
34215: PPUSH
34216: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34217: LD_ADDR_VAR 0 2
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 21
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 21
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: PPUSH
34250: CALL_OW 69
34254: PUSH
34255: FOR_IN
34256: IFFALSE 34317
// if IsSelected ( i ) then
34258: LD_VAR 0 2
34262: PPUSH
34263: CALL_OW 306
34267: IFFALSE 34315
// begin if i in hInvincible then
34269: LD_VAR 0 2
34273: PUSH
34274: LD_EXP 104
34278: IN
34279: IFFALSE 34299
// hInvincible := hInvincible diff i else
34281: LD_ADDR_EXP 104
34285: PUSH
34286: LD_EXP 104
34290: PUSH
34291: LD_VAR 0 2
34295: DIFF
34296: ST_TO_ADDR
34297: GO 34315
// hInvincible := hInvincible union i ;
34299: LD_ADDR_EXP 104
34303: PUSH
34304: LD_EXP 104
34308: PUSH
34309: LD_VAR 0 2
34313: UNION
34314: ST_TO_ADDR
// end ;
34315: GO 34255
34317: POP
34318: POP
// end ;
34319: LD_VAR 0 1
34323: RET
// export function hHackInvisible ; var i , j ; begin
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
34328: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34329: LD_ADDR_VAR 0 2
34333: PUSH
34334: LD_INT 21
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PPUSH
34344: CALL_OW 69
34348: PUSH
34349: FOR_IN
34350: IFFALSE 34374
// if IsSelected ( i ) then
34352: LD_VAR 0 2
34356: PPUSH
34357: CALL_OW 306
34361: IFFALSE 34372
// ComForceInvisible ( i ) ;
34363: LD_VAR 0 2
34367: PPUSH
34368: CALL_OW 496
34372: GO 34349
34374: POP
34375: POP
// end ;
34376: LD_VAR 0 1
34380: RET
// export function hHackChangeYourSide ; begin
34381: LD_INT 0
34383: PPUSH
// if your_side = 8 then
34384: LD_OWVAR 2
34388: PUSH
34389: LD_INT 8
34391: EQUAL
34392: IFFALSE 34404
// your_side := 0 else
34394: LD_ADDR_OWVAR 2
34398: PUSH
34399: LD_INT 0
34401: ST_TO_ADDR
34402: GO 34418
// your_side := your_side + 1 ;
34404: LD_ADDR_OWVAR 2
34408: PUSH
34409: LD_OWVAR 2
34413: PUSH
34414: LD_INT 1
34416: PLUS
34417: ST_TO_ADDR
// end ;
34418: LD_VAR 0 1
34422: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34423: LD_INT 0
34425: PPUSH
34426: PPUSH
34427: PPUSH
// for i in all_units do
34428: LD_ADDR_VAR 0 2
34432: PUSH
34433: LD_OWVAR 3
34437: PUSH
34438: FOR_IN
34439: IFFALSE 34517
// if IsSelected ( i ) then
34441: LD_VAR 0 2
34445: PPUSH
34446: CALL_OW 306
34450: IFFALSE 34515
// begin j := GetSide ( i ) ;
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_VAR 0 2
34461: PPUSH
34462: CALL_OW 255
34466: ST_TO_ADDR
// if j = 8 then
34467: LD_VAR 0 3
34471: PUSH
34472: LD_INT 8
34474: EQUAL
34475: IFFALSE 34487
// j := 0 else
34477: LD_ADDR_VAR 0 3
34481: PUSH
34482: LD_INT 0
34484: ST_TO_ADDR
34485: GO 34501
// j := j + 1 ;
34487: LD_ADDR_VAR 0 3
34491: PUSH
34492: LD_VAR 0 3
34496: PUSH
34497: LD_INT 1
34499: PLUS
34500: ST_TO_ADDR
// SetSide ( i , j ) ;
34501: LD_VAR 0 2
34505: PPUSH
34506: LD_VAR 0 3
34510: PPUSH
34511: CALL_OW 235
// end ;
34515: GO 34438
34517: POP
34518: POP
// end ;
34519: LD_VAR 0 1
34523: RET
// export function hHackFog ; begin
34524: LD_INT 0
34526: PPUSH
// FogOff ( true ) ;
34527: LD_INT 1
34529: PPUSH
34530: CALL_OW 344
// end ;
34534: LD_VAR 0 1
34538: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34539: LD_INT 0
34541: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34542: LD_VAR 0 1
34546: PPUSH
34547: LD_VAR 0 2
34551: PPUSH
34552: LD_VAR 0 3
34556: PPUSH
34557: LD_INT 1
34559: PPUSH
34560: LD_INT 1
34562: PPUSH
34563: CALL_OW 483
// CenterOnXY ( x , y ) ;
34567: LD_VAR 0 2
34571: PPUSH
34572: LD_VAR 0 3
34576: PPUSH
34577: CALL_OW 84
// end ;
34581: LD_VAR 0 4
34585: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34586: LD_INT 0
34588: PPUSH
34589: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34590: LD_VAR 0 1
34594: NOT
34595: IFTRUE 34614
34597: PUSH
34598: LD_VAR 0 2
34602: PPUSH
34603: LD_VAR 0 3
34607: PPUSH
34608: CALL_OW 488
34612: NOT
34613: OR
34614: IFTRUE 34649
34616: PUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL_OW 266
34626: PUSH
34627: LD_INT 3
34629: NONEQUAL
34630: IFFALSE 34648
34632: PUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 247
34642: PUSH
34643: LD_INT 1
34645: EQUAL
34646: NOT
34647: AND
34648: OR
34649: IFFALSE 34653
// exit ;
34651: GO 34935
// if GetType ( factory ) = unit_human then
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 247
34662: PUSH
34663: LD_INT 1
34665: EQUAL
34666: IFFALSE 34683
// factory := IsInUnit ( factory ) ;
34668: LD_ADDR_VAR 0 1
34672: PUSH
34673: LD_VAR 0 1
34677: PPUSH
34678: CALL_OW 310
34682: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 266
34692: PUSH
34693: LD_INT 3
34695: NONEQUAL
34696: IFFALSE 34700
// exit ;
34698: GO 34935
// for i := 1 to Count ( factoryWaypoints ) do
34700: LD_ADDR_VAR 0 5
34704: PUSH
34705: DOUBLE
34706: LD_INT 1
34708: DEC
34709: ST_TO_ADDR
34710: LD_EXP 105
34714: PPUSH
34715: CALL 44468 0 1
34719: PUSH
34720: FOR_TO
34721: IFFALSE 34883
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34723: LD_VAR 0 2
34727: PPUSH
34728: LD_VAR 0 3
34732: PPUSH
34733: CALL_OW 428
34737: PUSH
34738: LD_EXP 105
34742: PUSH
34743: LD_VAR 0 5
34747: ARRAY
34748: PUSH
34749: LD_INT 2
34751: ARRAY
34752: EQUAL
34753: IFFALSE 34785
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34755: LD_ADDR_EXP 105
34759: PUSH
34760: LD_EXP 105
34764: PPUSH
34765: LD_VAR 0 5
34769: PPUSH
34770: CALL_OW 3
34774: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34775: CALL 34940 0 0
// exit ;
34779: POP
34780: POP
34781: GO 34935
// end else
34783: GO 34881
// if factory = factoryWaypoints [ i ] [ 2 ] then
34785: LD_VAR 0 1
34789: PUSH
34790: LD_EXP 105
34794: PUSH
34795: LD_VAR 0 5
34799: ARRAY
34800: PUSH
34801: LD_INT 2
34803: ARRAY
34804: EQUAL
34805: IFFALSE 34881
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34807: LD_ADDR_EXP 105
34811: PUSH
34812: LD_EXP 105
34816: PPUSH
34817: LD_VAR 0 5
34821: PPUSH
34822: CALL_OW 3
34826: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34827: LD_ADDR_EXP 105
34831: PUSH
34832: LD_EXP 105
34836: PPUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 255
34846: PUSH
34847: LD_VAR 0 1
34851: PUSH
34852: LD_VAR 0 2
34856: PUSH
34857: LD_VAR 0 3
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: PPUSH
34868: CALL 80400 0 2
34872: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34873: CALL 34940 0 0
// exit ;
34877: POP
34878: POP
34879: GO 34935
// end ; end ;
34881: GO 34720
34883: POP
34884: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34885: LD_ADDR_EXP 105
34889: PUSH
34890: LD_EXP 105
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 255
34904: PUSH
34905: LD_VAR 0 1
34909: PUSH
34910: LD_VAR 0 2
34914: PUSH
34915: LD_VAR 0 3
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: PPUSH
34926: CALL 80400 0 2
34930: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34931: CALL 34940 0 0
// end ;
34935: LD_VAR 0 4
34939: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34940: LD_INT 0
34942: PPUSH
34943: PPUSH
34944: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34945: LD_STRING resetFactoryWaypoint();
34947: PPUSH
34948: CALL_OW 559
// if factoryWaypoints then
34952: LD_EXP 105
34956: IFFALSE 35077
// begin list := factoryWaypoints ;
34958: LD_ADDR_VAR 0 3
34962: PUSH
34963: LD_EXP 105
34967: ST_TO_ADDR
// for i := 1 to list do
34968: LD_ADDR_VAR 0 2
34972: PUSH
34973: DOUBLE
34974: LD_INT 1
34976: DEC
34977: ST_TO_ADDR
34978: LD_VAR 0 3
34982: PUSH
34983: FOR_TO
34984: IFFALSE 35075
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34986: LD_STRING setFactoryWaypointXY(
34988: PUSH
34989: LD_VAR 0 3
34993: PUSH
34994: LD_VAR 0 2
34998: ARRAY
34999: PUSH
35000: LD_INT 1
35002: ARRAY
35003: STR
35004: PUSH
35005: LD_STRING ,
35007: STR
35008: PUSH
35009: LD_VAR 0 3
35013: PUSH
35014: LD_VAR 0 2
35018: ARRAY
35019: PUSH
35020: LD_INT 2
35022: ARRAY
35023: STR
35024: PUSH
35025: LD_STRING ,
35027: STR
35028: PUSH
35029: LD_VAR 0 3
35033: PUSH
35034: LD_VAR 0 2
35038: ARRAY
35039: PUSH
35040: LD_INT 3
35042: ARRAY
35043: STR
35044: PUSH
35045: LD_STRING ,
35047: STR
35048: PUSH
35049: LD_VAR 0 3
35053: PUSH
35054: LD_VAR 0 2
35058: ARRAY
35059: PUSH
35060: LD_INT 4
35062: ARRAY
35063: STR
35064: PUSH
35065: LD_STRING )
35067: STR
35068: PPUSH
35069: CALL_OW 559
35073: GO 34983
35075: POP
35076: POP
// end ; end ;
35077: LD_VAR 0 1
35081: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35082: LD_INT 0
35084: PPUSH
// if HexInfo ( x , y ) = warehouse then
35085: LD_VAR 0 2
35089: PPUSH
35090: LD_VAR 0 3
35094: PPUSH
35095: CALL_OW 428
35099: PUSH
35100: LD_VAR 0 1
35104: EQUAL
35105: IFFALSE 35132
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35107: LD_ADDR_EXP 107
35111: PUSH
35112: LD_EXP 107
35116: PPUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: LD_INT 0
35124: PPUSH
35125: CALL_OW 1
35129: ST_TO_ADDR
35130: GO 35183
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35132: LD_ADDR_EXP 107
35136: PUSH
35137: LD_EXP 107
35141: PPUSH
35142: LD_VAR 0 1
35146: PPUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 255
35156: PUSH
35157: LD_VAR 0 1
35161: PUSH
35162: LD_VAR 0 2
35166: PUSH
35167: LD_VAR 0 3
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: PPUSH
35178: CALL_OW 1
35182: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35183: CALL 35192 0 0
// end ;
35187: LD_VAR 0 4
35191: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35192: LD_INT 0
35194: PPUSH
35195: PPUSH
35196: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35197: LD_STRING resetWarehouseGatheringPoints();
35199: PPUSH
35200: CALL_OW 559
// if warehouseGatheringPoints then
35204: LD_EXP 107
35208: IFFALSE 35334
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_EXP 107
35219: PPUSH
35220: CALL 84334 0 1
35224: ST_TO_ADDR
// for i := 1 to list do
35225: LD_ADDR_VAR 0 2
35229: PUSH
35230: DOUBLE
35231: LD_INT 1
35233: DEC
35234: ST_TO_ADDR
35235: LD_VAR 0 3
35239: PUSH
35240: FOR_TO
35241: IFFALSE 35332
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35243: LD_STRING setWarehouseGatheringPointXY(
35245: PUSH
35246: LD_VAR 0 3
35250: PUSH
35251: LD_VAR 0 2
35255: ARRAY
35256: PUSH
35257: LD_INT 1
35259: ARRAY
35260: STR
35261: PUSH
35262: LD_STRING ,
35264: STR
35265: PUSH
35266: LD_VAR 0 3
35270: PUSH
35271: LD_VAR 0 2
35275: ARRAY
35276: PUSH
35277: LD_INT 2
35279: ARRAY
35280: STR
35281: PUSH
35282: LD_STRING ,
35284: STR
35285: PUSH
35286: LD_VAR 0 3
35290: PUSH
35291: LD_VAR 0 2
35295: ARRAY
35296: PUSH
35297: LD_INT 3
35299: ARRAY
35300: STR
35301: PUSH
35302: LD_STRING ,
35304: STR
35305: PUSH
35306: LD_VAR 0 3
35310: PUSH
35311: LD_VAR 0 2
35315: ARRAY
35316: PUSH
35317: LD_INT 4
35319: ARRAY
35320: STR
35321: PUSH
35322: LD_STRING )
35324: STR
35325: PPUSH
35326: CALL_OW 559
35330: GO 35240
35332: POP
35333: POP
// end ; end ;
35334: LD_VAR 0 1
35338: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35339: LD_EXP 107
35343: IFFALSE 36038
35345: GO 35347
35347: DISABLE
35348: LD_INT 0
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
// begin enable ;
35359: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_EXP 107
35369: PPUSH
35370: CALL 84334 0 1
35374: ST_TO_ADDR
// if not list then
35375: LD_VAR 0 3
35379: NOT
35380: IFFALSE 35384
// exit ;
35382: GO 36038
// for i := 1 to list do
35384: LD_ADDR_VAR 0 1
35388: PUSH
35389: DOUBLE
35390: LD_INT 1
35392: DEC
35393: ST_TO_ADDR
35394: LD_VAR 0 3
35398: PUSH
35399: FOR_TO
35400: IFFALSE 36036
// begin depot := list [ i ] [ 2 ] ;
35402: LD_ADDR_VAR 0 8
35406: PUSH
35407: LD_VAR 0 3
35411: PUSH
35412: LD_VAR 0 1
35416: ARRAY
35417: PUSH
35418: LD_INT 2
35420: ARRAY
35421: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35422: LD_ADDR_VAR 0 5
35426: PUSH
35427: LD_VAR 0 3
35431: PUSH
35432: LD_VAR 0 1
35436: ARRAY
35437: PUSH
35438: LD_INT 1
35440: ARRAY
35441: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35442: LD_VAR 0 8
35446: PPUSH
35447: CALL_OW 301
35451: IFTRUE 35470
35453: PUSH
35454: LD_VAR 0 5
35458: PUSH
35459: LD_VAR 0 8
35463: PPUSH
35464: CALL_OW 255
35468: NONEQUAL
35469: OR
35470: IFFALSE 35499
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35472: LD_ADDR_EXP 107
35476: PUSH
35477: LD_EXP 107
35481: PPUSH
35482: LD_VAR 0 8
35486: PPUSH
35487: LD_INT 0
35489: PPUSH
35490: CALL_OW 1
35494: ST_TO_ADDR
// exit ;
35495: POP
35496: POP
35497: GO 36038
// end ; x := list [ i ] [ 3 ] ;
35499: LD_ADDR_VAR 0 6
35503: PUSH
35504: LD_VAR 0 3
35508: PUSH
35509: LD_VAR 0 1
35513: ARRAY
35514: PUSH
35515: LD_INT 3
35517: ARRAY
35518: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35519: LD_ADDR_VAR 0 7
35523: PUSH
35524: LD_VAR 0 3
35528: PUSH
35529: LD_VAR 0 1
35533: ARRAY
35534: PUSH
35535: LD_INT 4
35537: ARRAY
35538: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_VAR 0 6
35548: PPUSH
35549: LD_VAR 0 7
35553: PPUSH
35554: LD_INT 16
35556: PPUSH
35557: CALL 82908 0 3
35561: ST_TO_ADDR
// if not cratesNearbyPoint then
35562: LD_VAR 0 9
35566: NOT
35567: IFFALSE 35573
// exit ;
35569: POP
35570: POP
35571: GO 36038
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35573: LD_ADDR_VAR 0 4
35577: PUSH
35578: LD_INT 22
35580: PUSH
35581: LD_VAR 0 5
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: LD_INT 60
35595: PUSH
35596: EMPTY
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 91
35605: PUSH
35606: LD_VAR 0 8
35610: PUSH
35611: LD_INT 6
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 25
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 25
35634: PUSH
35635: LD_INT 16
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: PPUSH
35653: CALL_OW 69
35657: PUSH
35658: LD_VAR 0 8
35662: PPUSH
35663: CALL_OW 313
35667: PPUSH
35668: LD_INT 3
35670: PUSH
35671: LD_INT 60
35673: PUSH
35674: EMPTY
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: LD_INT 25
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 25
35696: PUSH
35697: LD_INT 16
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PPUSH
35713: CALL_OW 72
35717: UNION
35718: ST_TO_ADDR
// if tmp then
35719: LD_VAR 0 4
35723: IFFALSE 35803
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35725: LD_ADDR_VAR 0 4
35729: PUSH
35730: LD_VAR 0 4
35734: PPUSH
35735: LD_INT 3
35737: PPUSH
35738: CALL 80715 0 2
35742: ST_TO_ADDR
// for j in tmp do
35743: LD_ADDR_VAR 0 2
35747: PUSH
35748: LD_VAR 0 4
35752: PUSH
35753: FOR_IN
35754: IFFALSE 35797
// begin if IsInUnit ( j ) then
35756: LD_VAR 0 2
35760: PPUSH
35761: CALL_OW 310
35765: IFFALSE 35776
// ComExit ( j ) ;
35767: LD_VAR 0 2
35771: PPUSH
35772: CALL 80798 0 1
// AddComCollect ( j , x , y ) ;
35776: LD_VAR 0 2
35780: PPUSH
35781: LD_VAR 0 6
35785: PPUSH
35786: LD_VAR 0 7
35790: PPUSH
35791: CALL_OW 177
// end ;
35795: GO 35753
35797: POP
35798: POP
// exit ;
35799: POP
35800: POP
35801: GO 36038
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35803: LD_ADDR_VAR 0 4
35807: PUSH
35808: LD_INT 22
35810: PUSH
35811: LD_VAR 0 5
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 91
35822: PUSH
35823: LD_VAR 0 8
35827: PUSH
35828: LD_INT 8
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 34
35841: PUSH
35842: LD_INT 12
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 34
35851: PUSH
35852: LD_INT 51
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 34
35861: PUSH
35862: LD_INT 32
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 34
35871: PUSH
35872: LD_INT 89
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: PPUSH
35891: CALL_OW 69
35895: ST_TO_ADDR
// if tmp then
35896: LD_VAR 0 4
35900: IFFALSE 36034
// begin for j in tmp do
35902: LD_ADDR_VAR 0 2
35906: PUSH
35907: LD_VAR 0 4
35911: PUSH
35912: FOR_IN
35913: IFFALSE 36032
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35915: LD_VAR 0 2
35919: PPUSH
35920: CALL_OW 262
35924: PUSH
35925: LD_INT 3
35927: EQUAL
35928: IFTRUE 35945
35930: PUSH
35931: LD_VAR 0 2
35935: PPUSH
35936: CALL_OW 261
35940: PUSH
35941: LD_INT 20
35943: GREATER
35944: OR
35945: IFFALSE 35959
35947: PUSH
35948: LD_VAR 0 2
35952: PPUSH
35953: CALL_OW 314
35957: NOT
35958: AND
35959: IFFALSE 35989
35961: PUSH
35962: LD_VAR 0 2
35966: PPUSH
35967: CALL_OW 263
35971: PUSH
35972: LD_INT 1
35974: NONEQUAL
35975: IFTRUE 35988
35977: PUSH
35978: LD_VAR 0 2
35982: PPUSH
35983: CALL_OW 311
35987: OR
35988: AND
35989: IFFALSE 36030
// begin ComCollect ( j , x , y ) ;
35991: LD_VAR 0 2
35995: PPUSH
35996: LD_VAR 0 6
36000: PPUSH
36001: LD_VAR 0 7
36005: PPUSH
36006: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36010: LD_VAR 0 2
36014: PPUSH
36015: LD_VAR 0 8
36019: PPUSH
36020: CALL_OW 172
// exit ;
36024: POP
36025: POP
36026: POP
36027: POP
36028: GO 36038
// end ;
36030: GO 35912
36032: POP
36033: POP
// end ; end ;
36034: GO 35399
36036: POP
36037: POP
// end ; end_of_file
36038: PPOPN 9
36040: END
// export function SOS_UnitDestroyed ( un ) ; begin
36041: LD_INT 0
36043: PPUSH
// ComRadiation ( un ) ;
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL 37130 0 1
// end ;
36053: LD_VAR 0 2
36057: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36058: LD_INT 0
36060: PPUSH
// ComRadiation ( un ) ;
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL 37130 0 1
// end ;
36070: LD_VAR 0 2
36074: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36075: LD_INT 0
36077: PPUSH
// end ;
36078: LD_VAR 0 4
36082: RET
// export function SOS_Command ( cmd ) ; begin
36083: LD_INT 0
36085: PPUSH
// end ;
36086: LD_VAR 0 2
36090: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36091: LD_INT 0
36093: PPUSH
// end ;
36094: LD_VAR 0 6
36098: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
36099: LD_INT 0
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
// if not vehicle or not factory then
36105: LD_VAR 0 1
36109: NOT
36110: IFTRUE 36119
36112: PUSH
36113: LD_VAR 0 2
36117: NOT
36118: OR
36119: IFFALSE 36123
// exit ;
36121: GO 36705
// if not factoryWaypoints then
36123: LD_EXP 105
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 36705
// for i := 1 to Count ( factoryWaypoints ) do
36132: LD_ADDR_VAR 0 4
36136: PUSH
36137: DOUBLE
36138: LD_INT 1
36140: DEC
36141: ST_TO_ADDR
36142: LD_EXP 105
36146: PPUSH
36147: CALL 44468 0 1
36151: PUSH
36152: FOR_TO
36153: IFFALSE 36703
// if factoryWaypoints [ i ] [ 2 ] = factory then
36155: LD_EXP 105
36159: PUSH
36160: LD_VAR 0 4
36164: ARRAY
36165: PUSH
36166: LD_INT 2
36168: ARRAY
36169: PUSH
36170: LD_VAR 0 2
36174: EQUAL
36175: IFFALSE 36701
// begin if GetControl ( vehicle ) = control_manual then
36177: LD_VAR 0 1
36181: PPUSH
36182: CALL_OW 263
36186: PUSH
36187: LD_INT 1
36189: EQUAL
36190: IFFALSE 36554
// begin driver := IsDrivenBy ( vehicle ) ;
36192: LD_ADDR_VAR 0 5
36196: PUSH
36197: LD_VAR 0 1
36201: PPUSH
36202: CALL_OW 311
36206: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36207: LD_VAR 0 5
36211: PUSH
36212: LD_EXP 106
36216: IN
36217: IFTRUE 36231
36219: PUSH
36220: LD_VAR 0 1
36224: PUSH
36225: LD_EXP 106
36229: IN
36230: OR
36231: IFFALSE 36237
// exit ;
36233: POP
36234: POP
36235: GO 36705
// if not HasTask ( driver ) then
36237: LD_VAR 0 5
36241: PPUSH
36242: CALL_OW 314
36246: NOT
36247: IFFALSE 36552
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36249: LD_ADDR_EXP 106
36253: PUSH
36254: LD_EXP 106
36258: PPUSH
36259: LD_VAR 0 5
36263: PPUSH
36264: CALL 80400 0 2
36268: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36269: LD_ADDR_EXP 106
36273: PUSH
36274: LD_EXP 106
36278: PPUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL 80400 0 2
36288: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36289: LD_ADDR_VAR 0 6
36293: PUSH
36294: LD_EXP 105
36298: PUSH
36299: LD_VAR 0 4
36303: ARRAY
36304: PUSH
36305: LD_INT 3
36307: ARRAY
36308: PPUSH
36309: LD_EXP 105
36313: PUSH
36314: LD_VAR 0 4
36318: ARRAY
36319: PUSH
36320: LD_INT 4
36322: ARRAY
36323: PPUSH
36324: CALL_OW 428
36328: ST_TO_ADDR
// if hex then
36329: LD_VAR 0 6
36333: IFFALSE 36351
// ComMoveUnit ( driver , hex ) else
36335: LD_VAR 0 5
36339: PPUSH
36340: LD_VAR 0 6
36344: PPUSH
36345: CALL_OW 112
36349: GO 36435
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36351: LD_VAR 0 1
36355: PPUSH
36356: LD_EXP 105
36360: PUSH
36361: LD_VAR 0 4
36365: ARRAY
36366: PUSH
36367: LD_INT 3
36369: ARRAY
36370: PPUSH
36371: LD_EXP 105
36375: PUSH
36376: LD_VAR 0 4
36380: ARRAY
36381: PUSH
36382: LD_INT 4
36384: ARRAY
36385: PPUSH
36386: CALL_OW 297
36390: PUSH
36391: LD_INT 0
36393: GREATER
36394: IFFALSE 36435
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36396: LD_VAR 0 5
36400: PPUSH
36401: LD_EXP 105
36405: PUSH
36406: LD_VAR 0 4
36410: ARRAY
36411: PUSH
36412: LD_INT 3
36414: ARRAY
36415: PPUSH
36416: LD_EXP 105
36420: PUSH
36421: LD_VAR 0 4
36425: ARRAY
36426: PUSH
36427: LD_INT 4
36429: ARRAY
36430: PPUSH
36431: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36435: LD_VAR 0 5
36439: PPUSH
36440: CALL_OW 181
// if Multiplayer then
36444: LD_OWVAR 4
36448: IFFALSE 36497
// begin repeat wait ( 10 ) ;
36450: LD_INT 10
36452: PPUSH
36453: CALL_OW 67
// until not IsInUnit ( driver ) ;
36457: LD_VAR 0 5
36461: PPUSH
36462: CALL_OW 310
36466: NOT
36467: IFFALSE 36450
// if not HasTask ( driver ) then
36469: LD_VAR 0 5
36473: PPUSH
36474: CALL_OW 314
36478: NOT
36479: IFFALSE 36495
// ComEnterUnit ( driver , factory ) ;
36481: LD_VAR 0 5
36485: PPUSH
36486: LD_VAR 0 2
36490: PPUSH
36491: CALL_OW 120
// end else
36495: GO 36511
// AddComEnterUnit ( driver , factory ) ;
36497: LD_VAR 0 5
36501: PPUSH
36502: LD_VAR 0 2
36506: PPUSH
36507: CALL_OW 180
// wait ( 0 0$1 ) ;
36511: LD_INT 35
36513: PPUSH
36514: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36518: LD_ADDR_EXP 106
36522: PUSH
36523: LD_EXP 106
36527: PUSH
36528: LD_VAR 0 5
36532: DIFF
36533: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36534: LD_ADDR_EXP 106
36538: PUSH
36539: LD_EXP 106
36543: PUSH
36544: LD_VAR 0 1
36548: DIFF
36549: ST_TO_ADDR
// break ;
36550: GO 36703
// end ; end else
36552: GO 36701
// if GetControl ( vehicle ) = control_remote then
36554: LD_VAR 0 1
36558: PPUSH
36559: CALL_OW 263
36563: PUSH
36564: LD_INT 2
36566: EQUAL
36567: IFFALSE 36653
// begin wait ( 0 0$2 ) ;
36569: LD_INT 70
36571: PPUSH
36572: CALL_OW 67
// repeat wait ( 10 ) ;
36576: LD_INT 10
36578: PPUSH
36579: CALL_OW 67
// Connect ( vehicle ) ;
36583: LD_VAR 0 1
36587: PPUSH
36588: CALL 50712 0 1
// until IsControledBy ( vehicle ) ;
36592: LD_VAR 0 1
36596: PPUSH
36597: CALL_OW 312
36601: IFFALSE 36576
// wait ( 10 ) ;
36603: LD_INT 10
36605: PPUSH
36606: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36610: LD_VAR 0 1
36614: PPUSH
36615: LD_EXP 105
36619: PUSH
36620: LD_VAR 0 4
36624: ARRAY
36625: PUSH
36626: LD_INT 3
36628: ARRAY
36629: PPUSH
36630: LD_EXP 105
36634: PUSH
36635: LD_VAR 0 4
36639: ARRAY
36640: PUSH
36641: LD_INT 4
36643: ARRAY
36644: PPUSH
36645: CALL_OW 111
// break ;
36649: GO 36703
// end else
36651: GO 36701
// begin wait ( 0 0$3 ) ;
36653: LD_INT 105
36655: PPUSH
36656: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36660: LD_VAR 0 1
36664: PPUSH
36665: LD_EXP 105
36669: PUSH
36670: LD_VAR 0 4
36674: ARRAY
36675: PUSH
36676: LD_INT 3
36678: ARRAY
36679: PPUSH
36680: LD_EXP 105
36684: PUSH
36685: LD_VAR 0 4
36689: ARRAY
36690: PUSH
36691: LD_INT 4
36693: ARRAY
36694: PPUSH
36695: CALL_OW 111
// break ;
36699: GO 36703
// end ; end ;
36701: GO 36152
36703: POP
36704: POP
// end ;
36705: LD_VAR 0 3
36709: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36710: LD_INT 0
36712: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36713: LD_VAR 0 1
36717: PUSH
36718: LD_INT 250
36720: EQUAL
36721: IFFALSE 36738
36723: PUSH
36724: LD_VAR 0 2
36728: PPUSH
36729: CALL_OW 264
36733: PUSH
36734: LD_INT 81
36736: EQUAL
36737: AND
36738: IFFALSE 36759
// MinerPlaceMine ( unit , x , y ) ;
36740: LD_VAR 0 2
36744: PPUSH
36745: LD_VAR 0 4
36749: PPUSH
36750: LD_VAR 0 5
36754: PPUSH
36755: CALL 39891 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36759: LD_VAR 0 1
36763: PUSH
36764: LD_INT 251
36766: EQUAL
36767: IFFALSE 36784
36769: PUSH
36770: LD_VAR 0 2
36774: PPUSH
36775: CALL_OW 264
36779: PUSH
36780: LD_INT 81
36782: EQUAL
36783: AND
36784: IFFALSE 36805
// MinerDetonateMine ( unit , x , y ) ;
36786: LD_VAR 0 2
36790: PPUSH
36791: LD_VAR 0 4
36795: PPUSH
36796: LD_VAR 0 5
36800: PPUSH
36801: CALL 40170 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36805: LD_VAR 0 1
36809: PUSH
36810: LD_INT 252
36812: EQUAL
36813: IFFALSE 36830
36815: PUSH
36816: LD_VAR 0 2
36820: PPUSH
36821: CALL_OW 264
36825: PUSH
36826: LD_INT 81
36828: EQUAL
36829: AND
36830: IFFALSE 36851
// MinerCreateMinefield ( unit , x , y ) ;
36832: LD_VAR 0 2
36836: PPUSH
36837: LD_VAR 0 4
36841: PPUSH
36842: LD_VAR 0 5
36846: PPUSH
36847: CALL 40589 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36851: LD_VAR 0 1
36855: PUSH
36856: LD_INT 253
36858: EQUAL
36859: IFFALSE 36876
36861: PUSH
36862: LD_VAR 0 2
36866: PPUSH
36867: CALL_OW 257
36871: PUSH
36872: LD_INT 5
36874: EQUAL
36875: AND
36876: IFFALSE 36897
// ComBinocular ( unit , x , y ) ;
36878: LD_VAR 0 2
36882: PPUSH
36883: LD_VAR 0 4
36887: PPUSH
36888: LD_VAR 0 5
36892: PPUSH
36893: CALL 40964 0 3
// if selectedUnit then
36897: LD_VAR 0 3
36901: IFFALSE 36961
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36903: LD_VAR 0 1
36907: PUSH
36908: LD_INT 254
36910: EQUAL
36911: IFFALSE 36928
36913: PUSH
36914: LD_VAR 0 2
36918: PPUSH
36919: CALL_OW 264
36923: PUSH
36924: LD_INT 99
36926: EQUAL
36927: AND
36928: IFFALSE 36945
36930: PUSH
36931: LD_VAR 0 3
36935: PPUSH
36936: CALL_OW 263
36940: PUSH
36941: LD_INT 3
36943: EQUAL
36944: AND
36945: IFFALSE 36961
// HackDestroyVehicle ( unit , selectedUnit ) ;
36947: LD_VAR 0 2
36951: PPUSH
36952: LD_VAR 0 3
36956: PPUSH
36957: CALL 39251 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36961: LD_VAR 0 1
36965: PUSH
36966: LD_INT 255
36968: EQUAL
36969: IFFALSE 36993
36971: PUSH
36972: LD_VAR 0 2
36976: PPUSH
36977: CALL_OW 264
36981: PUSH
36982: LD_INT 14
36984: PUSH
36985: LD_INT 53
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: IN
36992: AND
36993: IFFALSE 37011
36995: PUSH
36996: LD_VAR 0 4
37000: PPUSH
37001: LD_VAR 0 5
37005: PPUSH
37006: CALL_OW 488
37010: AND
37011: IFFALSE 37035
// CutTreeXYR ( unit , x , y , 12 ) ;
37013: LD_VAR 0 2
37017: PPUSH
37018: LD_VAR 0 4
37022: PPUSH
37023: LD_VAR 0 5
37027: PPUSH
37028: LD_INT 12
37030: PPUSH
37031: CALL 37226 0 4
// if cmd = 256 then
37035: LD_VAR 0 1
37039: PUSH
37040: LD_INT 256
37042: EQUAL
37043: IFFALSE 37064
// SetFactoryWaypoint ( unit , x , y ) ;
37045: LD_VAR 0 2
37049: PPUSH
37050: LD_VAR 0 4
37054: PPUSH
37055: LD_VAR 0 5
37059: PPUSH
37060: CALL 34586 0 3
// if cmd = 257 then
37064: LD_VAR 0 1
37068: PUSH
37069: LD_INT 257
37071: EQUAL
37072: IFFALSE 37093
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37074: LD_VAR 0 2
37078: PPUSH
37079: LD_VAR 0 4
37083: PPUSH
37084: LD_VAR 0 5
37088: PPUSH
37089: CALL 35082 0 3
// if cmd = 258 then
37093: LD_VAR 0 1
37097: PUSH
37098: LD_INT 258
37100: EQUAL
37101: IFFALSE 37125
// BurnTreeXYR ( unit , x , y , 8 ) ;
37103: LD_VAR 0 2
37107: PPUSH
37108: LD_VAR 0 4
37112: PPUSH
37113: LD_VAR 0 5
37117: PPUSH
37118: LD_INT 8
37120: PPUSH
37121: CALL 37626 0 4
// end ;
37125: LD_VAR 0 6
37129: RET
// export function ComRadiation ( un ) ; var eff ; begin
37130: LD_INT 0
37132: PPUSH
37133: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 264
37143: PUSH
37144: LD_INT 91
37146: NONEQUAL
37147: IFFALSE 37151
// exit ;
37149: GO 37221
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37151: LD_INT 68
37153: PPUSH
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL_OW 255
37163: PPUSH
37164: CALL_OW 321
37168: PUSH
37169: LD_INT 2
37171: EQUAL
37172: IFFALSE 37184
// eff := 50 else
37174: LD_ADDR_VAR 0 3
37178: PUSH
37179: LD_INT 50
37181: ST_TO_ADDR
37182: GO 37192
// eff := 25 ;
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_INT 25
37191: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37192: LD_VAR 0 1
37196: PPUSH
37197: CALL_OW 250
37201: PPUSH
37202: LD_VAR 0 1
37206: PPUSH
37207: CALL_OW 251
37211: PPUSH
37212: LD_VAR 0 3
37216: PPUSH
37217: CALL_OW 495
// end ;
37221: LD_VAR 0 2
37225: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37226: LD_INT 0
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37237: LD_VAR 0 1
37241: PPUSH
37242: CALL_OW 302
37246: NOT
37247: IFTRUE 37266
37249: PUSH
37250: LD_VAR 0 2
37254: PPUSH
37255: LD_VAR 0 3
37259: PPUSH
37260: CALL_OW 488
37264: NOT
37265: OR
37266: IFTRUE 37275
37268: PUSH
37269: LD_VAR 0 4
37273: NOT
37274: OR
37275: IFFALSE 37279
// exit ;
37277: GO 37621
// list := [ ] ;
37279: LD_ADDR_VAR 0 13
37283: PUSH
37284: EMPTY
37285: ST_TO_ADDR
// if x - r < 0 then
37286: LD_VAR 0 2
37290: PUSH
37291: LD_VAR 0 4
37295: MINUS
37296: PUSH
37297: LD_INT 0
37299: LESS
37300: IFFALSE 37312
// min_x := 0 else
37302: LD_ADDR_VAR 0 7
37306: PUSH
37307: LD_INT 0
37309: ST_TO_ADDR
37310: GO 37328
// min_x := x - r ;
37312: LD_ADDR_VAR 0 7
37316: PUSH
37317: LD_VAR 0 2
37321: PUSH
37322: LD_VAR 0 4
37326: MINUS
37327: ST_TO_ADDR
// if y - r < 0 then
37328: LD_VAR 0 3
37332: PUSH
37333: LD_VAR 0 4
37337: MINUS
37338: PUSH
37339: LD_INT 0
37341: LESS
37342: IFFALSE 37354
// min_y := 0 else
37344: LD_ADDR_VAR 0 8
37348: PUSH
37349: LD_INT 0
37351: ST_TO_ADDR
37352: GO 37370
// min_y := y - r ;
37354: LD_ADDR_VAR 0 8
37358: PUSH
37359: LD_VAR 0 3
37363: PUSH
37364: LD_VAR 0 4
37368: MINUS
37369: ST_TO_ADDR
// max_x := x + r ;
37370: LD_ADDR_VAR 0 9
37374: PUSH
37375: LD_VAR 0 2
37379: PUSH
37380: LD_VAR 0 4
37384: PLUS
37385: ST_TO_ADDR
// max_y := y + r ;
37386: LD_ADDR_VAR 0 10
37390: PUSH
37391: LD_VAR 0 3
37395: PUSH
37396: LD_VAR 0 4
37400: PLUS
37401: ST_TO_ADDR
// for _x = min_x to max_x do
37402: LD_ADDR_VAR 0 11
37406: PUSH
37407: DOUBLE
37408: LD_VAR 0 7
37412: DEC
37413: ST_TO_ADDR
37414: LD_VAR 0 9
37418: PUSH
37419: FOR_TO
37420: IFFALSE 37539
// for _y = min_y to max_y do
37422: LD_ADDR_VAR 0 12
37426: PUSH
37427: DOUBLE
37428: LD_VAR 0 8
37432: DEC
37433: ST_TO_ADDR
37434: LD_VAR 0 10
37438: PUSH
37439: FOR_TO
37440: IFFALSE 37535
// begin if not ValidHex ( _x , _y ) then
37442: LD_VAR 0 11
37446: PPUSH
37447: LD_VAR 0 12
37451: PPUSH
37452: CALL_OW 488
37456: NOT
37457: IFFALSE 37461
// continue ;
37459: GO 37439
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37461: LD_VAR 0 11
37465: PPUSH
37466: LD_VAR 0 12
37470: PPUSH
37471: CALL_OW 351
37475: IFFALSE 37493
37477: PUSH
37478: LD_VAR 0 11
37482: PPUSH
37483: LD_VAR 0 12
37487: PPUSH
37488: CALL_OW 554
37492: AND
37493: IFFALSE 37533
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37495: LD_ADDR_VAR 0 13
37499: PUSH
37500: LD_VAR 0 13
37504: PPUSH
37505: LD_VAR 0 13
37509: PUSH
37510: LD_INT 1
37512: PLUS
37513: PPUSH
37514: LD_VAR 0 11
37518: PUSH
37519: LD_VAR 0 12
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PPUSH
37528: CALL_OW 2
37532: ST_TO_ADDR
// end ;
37533: GO 37439
37535: POP
37536: POP
37537: GO 37419
37539: POP
37540: POP
// if not list then
37541: LD_VAR 0 13
37545: NOT
37546: IFFALSE 37550
// exit ;
37548: GO 37621
// for i in list do
37550: LD_ADDR_VAR 0 6
37554: PUSH
37555: LD_VAR 0 13
37559: PUSH
37560: FOR_IN
37561: IFFALSE 37619
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37563: LD_VAR 0 1
37567: PPUSH
37568: LD_STRING M
37570: PUSH
37571: LD_VAR 0 6
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: PUSH
37580: LD_VAR 0 6
37584: PUSH
37585: LD_INT 2
37587: ARRAY
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: PUSH
37610: EMPTY
37611: LIST
37612: PPUSH
37613: CALL_OW 447
37617: GO 37560
37619: POP
37620: POP
// end ;
37621: LD_VAR 0 5
37625: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37626: LD_INT 0
37628: PPUSH
37629: PPUSH
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37638: LD_VAR 0 1
37642: PPUSH
37643: CALL_OW 302
37647: NOT
37648: IFTRUE 37667
37650: PUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: LD_VAR 0 3
37660: PPUSH
37661: CALL_OW 488
37665: NOT
37666: OR
37667: IFTRUE 37676
37669: PUSH
37670: LD_VAR 0 4
37674: NOT
37675: OR
37676: IFFALSE 37680
// exit ;
37678: GO 38197
// list := [ ] ;
37680: LD_ADDR_VAR 0 13
37684: PUSH
37685: EMPTY
37686: ST_TO_ADDR
// if x - r < 0 then
37687: LD_VAR 0 2
37691: PUSH
37692: LD_VAR 0 4
37696: MINUS
37697: PUSH
37698: LD_INT 0
37700: LESS
37701: IFFALSE 37713
// min_x := 0 else
37703: LD_ADDR_VAR 0 7
37707: PUSH
37708: LD_INT 0
37710: ST_TO_ADDR
37711: GO 37729
// min_x := x - r ;
37713: LD_ADDR_VAR 0 7
37717: PUSH
37718: LD_VAR 0 2
37722: PUSH
37723: LD_VAR 0 4
37727: MINUS
37728: ST_TO_ADDR
// if y - r < 0 then
37729: LD_VAR 0 3
37733: PUSH
37734: LD_VAR 0 4
37738: MINUS
37739: PUSH
37740: LD_INT 0
37742: LESS
37743: IFFALSE 37755
// min_y := 0 else
37745: LD_ADDR_VAR 0 8
37749: PUSH
37750: LD_INT 0
37752: ST_TO_ADDR
37753: GO 37771
// min_y := y - r ;
37755: LD_ADDR_VAR 0 8
37759: PUSH
37760: LD_VAR 0 3
37764: PUSH
37765: LD_VAR 0 4
37769: MINUS
37770: ST_TO_ADDR
// max_x := x + r ;
37771: LD_ADDR_VAR 0 9
37775: PUSH
37776: LD_VAR 0 2
37780: PUSH
37781: LD_VAR 0 4
37785: PLUS
37786: ST_TO_ADDR
// max_y := y + r ;
37787: LD_ADDR_VAR 0 10
37791: PUSH
37792: LD_VAR 0 3
37796: PUSH
37797: LD_VAR 0 4
37801: PLUS
37802: ST_TO_ADDR
// for _x = min_x to max_x do
37803: LD_ADDR_VAR 0 11
37807: PUSH
37808: DOUBLE
37809: LD_VAR 0 7
37813: DEC
37814: ST_TO_ADDR
37815: LD_VAR 0 9
37819: PUSH
37820: FOR_TO
37821: IFFALSE 37940
// for _y = min_y to max_y do
37823: LD_ADDR_VAR 0 12
37827: PUSH
37828: DOUBLE
37829: LD_VAR 0 8
37833: DEC
37834: ST_TO_ADDR
37835: LD_VAR 0 10
37839: PUSH
37840: FOR_TO
37841: IFFALSE 37936
// begin if not ValidHex ( _x , _y ) then
37843: LD_VAR 0 11
37847: PPUSH
37848: LD_VAR 0 12
37852: PPUSH
37853: CALL_OW 488
37857: NOT
37858: IFFALSE 37862
// continue ;
37860: GO 37840
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37862: LD_VAR 0 11
37866: PPUSH
37867: LD_VAR 0 12
37871: PPUSH
37872: CALL_OW 351
37876: IFFALSE 37894
37878: PUSH
37879: LD_VAR 0 11
37883: PPUSH
37884: LD_VAR 0 12
37888: PPUSH
37889: CALL_OW 554
37893: AND
37894: IFFALSE 37934
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37896: LD_ADDR_VAR 0 13
37900: PUSH
37901: LD_VAR 0 13
37905: PPUSH
37906: LD_VAR 0 13
37910: PUSH
37911: LD_INT 1
37913: PLUS
37914: PPUSH
37915: LD_VAR 0 11
37919: PUSH
37920: LD_VAR 0 12
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PPUSH
37929: CALL_OW 2
37933: ST_TO_ADDR
// end ;
37934: GO 37840
37936: POP
37937: POP
37938: GO 37820
37940: POP
37941: POP
// if not list then
37942: LD_VAR 0 13
37946: NOT
37947: IFFALSE 37951
// exit ;
37949: GO 38197
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37951: LD_ADDR_VAR 0 13
37955: PUSH
37956: LD_VAR 0 1
37960: PPUSH
37961: LD_VAR 0 13
37965: PPUSH
37966: LD_INT 1
37968: PPUSH
37969: LD_INT 1
37971: PPUSH
37972: CALL 47840 0 4
37976: ST_TO_ADDR
// ComStop ( flame ) ;
37977: LD_VAR 0 1
37981: PPUSH
37982: CALL_OW 141
// for i in list do
37986: LD_ADDR_VAR 0 6
37990: PUSH
37991: LD_VAR 0 13
37995: PUSH
37996: FOR_IN
37997: IFFALSE 38028
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37999: LD_VAR 0 1
38003: PPUSH
38004: LD_VAR 0 6
38008: PUSH
38009: LD_INT 1
38011: ARRAY
38012: PPUSH
38013: LD_VAR 0 6
38017: PUSH
38018: LD_INT 2
38020: ARRAY
38021: PPUSH
38022: CALL_OW 176
38026: GO 37996
38028: POP
38029: POP
// repeat wait ( 0 0$1 ) ;
38030: LD_INT 35
38032: PPUSH
38033: CALL_OW 67
// task := GetTaskList ( flame ) ;
38037: LD_ADDR_VAR 0 14
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 437
38051: ST_TO_ADDR
// if not task then
38052: LD_VAR 0 14
38056: NOT
38057: IFFALSE 38061
// exit ;
38059: GO 38197
// if task [ 1 ] [ 1 ] <> | then
38061: LD_VAR 0 14
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: PUSH
38070: LD_INT 1
38072: ARRAY
38073: PUSH
38074: LD_STRING |
38076: NONEQUAL
38077: IFFALSE 38081
// exit ;
38079: GO 38197
// _x := task [ 1 ] [ 2 ] ;
38081: LD_ADDR_VAR 0 11
38085: PUSH
38086: LD_VAR 0 14
38090: PUSH
38091: LD_INT 1
38093: ARRAY
38094: PUSH
38095: LD_INT 2
38097: ARRAY
38098: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38099: LD_ADDR_VAR 0 12
38103: PUSH
38104: LD_VAR 0 14
38108: PUSH
38109: LD_INT 1
38111: ARRAY
38112: PUSH
38113: LD_INT 3
38115: ARRAY
38116: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38117: LD_VAR 0 11
38121: PPUSH
38122: LD_VAR 0 12
38126: PPUSH
38127: CALL_OW 351
38131: NOT
38132: IFTRUE 38151
38134: PUSH
38135: LD_VAR 0 11
38139: PPUSH
38140: LD_VAR 0 12
38144: PPUSH
38145: CALL_OW 554
38149: NOT
38150: OR
38151: IFFALSE 38185
// begin task := Delete ( task , 1 ) ;
38153: LD_ADDR_VAR 0 14
38157: PUSH
38158: LD_VAR 0 14
38162: PPUSH
38163: LD_INT 1
38165: PPUSH
38166: CALL_OW 3
38170: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38171: LD_VAR 0 1
38175: PPUSH
38176: LD_VAR 0 14
38180: PPUSH
38181: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38185: LD_VAR 0 1
38189: PPUSH
38190: CALL_OW 314
38194: NOT
38195: IFFALSE 38030
// end ;
38197: LD_VAR 0 5
38201: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38202: LD_EXP 109
38206: NOT
38207: IFFALSE 38257
38209: GO 38211
38211: DISABLE
// begin initHack := true ;
38212: LD_ADDR_EXP 109
38216: PUSH
38217: LD_INT 1
38219: ST_TO_ADDR
// hackTanks := [ ] ;
38220: LD_ADDR_EXP 110
38224: PUSH
38225: EMPTY
38226: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38227: LD_ADDR_EXP 111
38231: PUSH
38232: EMPTY
38233: ST_TO_ADDR
// hackLimit := 3 ;
38234: LD_ADDR_EXP 112
38238: PUSH
38239: LD_INT 3
38241: ST_TO_ADDR
// hackDist := 12 ;
38242: LD_ADDR_EXP 113
38246: PUSH
38247: LD_INT 12
38249: ST_TO_ADDR
// hackCounter := [ ] ;
38250: LD_ADDR_EXP 114
38254: PUSH
38255: EMPTY
38256: ST_TO_ADDR
// end ;
38257: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38258: LD_EXP 109
38262: IFFALSE 38280
38264: PUSH
38265: LD_INT 34
38267: PUSH
38268: LD_INT 99
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PPUSH
38275: CALL_OW 69
38279: AND
38280: IFFALSE 38533
38282: GO 38284
38284: DISABLE
38285: LD_INT 0
38287: PPUSH
38288: PPUSH
// begin enable ;
38289: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38290: LD_ADDR_VAR 0 1
38294: PUSH
38295: LD_INT 34
38297: PUSH
38298: LD_INT 99
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PPUSH
38305: CALL_OW 69
38309: PUSH
38310: FOR_IN
38311: IFFALSE 38531
// begin if not i in hackTanks then
38313: LD_VAR 0 1
38317: PUSH
38318: LD_EXP 110
38322: IN
38323: NOT
38324: IFFALSE 38407
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38326: LD_ADDR_EXP 110
38330: PUSH
38331: LD_EXP 110
38335: PPUSH
38336: LD_EXP 110
38340: PUSH
38341: LD_INT 1
38343: PLUS
38344: PPUSH
38345: LD_VAR 0 1
38349: PPUSH
38350: CALL_OW 1
38354: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38355: LD_ADDR_EXP 111
38359: PUSH
38360: LD_EXP 111
38364: PPUSH
38365: LD_EXP 111
38369: PUSH
38370: LD_INT 1
38372: PLUS
38373: PPUSH
38374: EMPTY
38375: PPUSH
38376: CALL_OW 1
38380: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38381: LD_ADDR_EXP 114
38385: PUSH
38386: LD_EXP 114
38390: PPUSH
38391: LD_EXP 114
38395: PUSH
38396: LD_INT 1
38398: PLUS
38399: PPUSH
38400: EMPTY
38401: PPUSH
38402: CALL_OW 1
38406: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 302
38416: NOT
38417: IFFALSE 38430
// begin HackUnlinkAll ( i ) ;
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL 38536 0 1
// continue ;
38428: GO 38310
// end ; HackCheckCapturedStatus ( i ) ;
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL 38981 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38439: LD_ADDR_VAR 0 2
38443: PUSH
38444: LD_INT 81
38446: PUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 255
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 33
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 91
38473: PUSH
38474: LD_VAR 0 1
38478: PUSH
38479: LD_EXP 113
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 50
38491: PUSH
38492: EMPTY
38493: LIST
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: PPUSH
38501: CALL_OW 69
38505: ST_TO_ADDR
// if not tmp then
38506: LD_VAR 0 2
38510: NOT
38511: IFFALSE 38515
// continue ;
38513: GO 38310
// HackLink ( i , tmp ) ;
38515: LD_VAR 0 1
38519: PPUSH
38520: LD_VAR 0 2
38524: PPUSH
38525: CALL 38672 0 2
// end ;
38529: GO 38310
38531: POP
38532: POP
// end ;
38533: PPOPN 2
38535: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38536: LD_INT 0
38538: PPUSH
38539: PPUSH
38540: PPUSH
// if not hack in hackTanks then
38541: LD_VAR 0 1
38545: PUSH
38546: LD_EXP 110
38550: IN
38551: NOT
38552: IFFALSE 38556
// exit ;
38554: GO 38667
// index := GetElementIndex ( hackTanks , hack ) ;
38556: LD_ADDR_VAR 0 4
38560: PUSH
38561: LD_EXP 110
38565: PPUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL 47135 0 2
38575: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38576: LD_EXP 111
38580: PUSH
38581: LD_VAR 0 4
38585: ARRAY
38586: IFFALSE 38667
// begin for i in hackTanksCaptured [ index ] do
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_EXP 111
38597: PUSH
38598: LD_VAR 0 4
38602: ARRAY
38603: PUSH
38604: FOR_IN
38605: IFFALSE 38631
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38607: LD_VAR 0 3
38611: PUSH
38612: LD_INT 1
38614: ARRAY
38615: PPUSH
38616: LD_VAR 0 3
38620: PUSH
38621: LD_INT 2
38623: ARRAY
38624: PPUSH
38625: CALL_OW 235
38629: GO 38604
38631: POP
38632: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38633: LD_ADDR_EXP 111
38637: PUSH
38638: LD_EXP 111
38642: PPUSH
38643: LD_VAR 0 4
38647: PPUSH
38648: EMPTY
38649: PPUSH
38650: CALL_OW 1
38654: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38655: LD_VAR 0 1
38659: PPUSH
38660: LD_INT 0
38662: PPUSH
38663: CALL_OW 505
// end ; end ;
38667: LD_VAR 0 2
38671: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38672: LD_INT 0
38674: PPUSH
38675: PPUSH
38676: PPUSH
// if not hack in hackTanks or not vehicles then
38677: LD_VAR 0 1
38681: PUSH
38682: LD_EXP 110
38686: IN
38687: NOT
38688: IFTRUE 38697
38690: PUSH
38691: LD_VAR 0 2
38695: NOT
38696: OR
38697: IFFALSE 38701
// exit ;
38699: GO 38976
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38701: LD_ADDR_VAR 0 2
38705: PUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: LD_VAR 0 2
38715: PPUSH
38716: LD_INT 1
38718: PPUSH
38719: LD_INT 1
38721: PPUSH
38722: CALL 47787 0 4
38726: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38727: LD_ADDR_VAR 0 5
38731: PUSH
38732: LD_EXP 110
38736: PPUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL 47135 0 2
38746: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38747: LD_EXP 111
38751: PUSH
38752: LD_VAR 0 5
38756: ARRAY
38757: PUSH
38758: LD_EXP 112
38762: LESS
38763: IFFALSE 38952
// begin for i := 1 to vehicles do
38765: LD_ADDR_VAR 0 4
38769: PUSH
38770: DOUBLE
38771: LD_INT 1
38773: DEC
38774: ST_TO_ADDR
38775: LD_VAR 0 2
38779: PUSH
38780: FOR_TO
38781: IFFALSE 38950
// begin if hackTanksCaptured [ index ] = hackLimit then
38783: LD_EXP 111
38787: PUSH
38788: LD_VAR 0 5
38792: ARRAY
38793: PUSH
38794: LD_EXP 112
38798: EQUAL
38799: IFFALSE 38803
// break ;
38801: GO 38950
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38803: LD_ADDR_EXP 114
38807: PUSH
38808: LD_EXP 114
38812: PPUSH
38813: LD_VAR 0 5
38817: PPUSH
38818: LD_EXP 114
38822: PUSH
38823: LD_VAR 0 5
38827: ARRAY
38828: PUSH
38829: LD_INT 1
38831: PLUS
38832: PPUSH
38833: CALL_OW 1
38837: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38838: LD_ADDR_EXP 111
38842: PUSH
38843: LD_EXP 111
38847: PPUSH
38848: LD_VAR 0 5
38852: PUSH
38853: LD_EXP 111
38857: PUSH
38858: LD_VAR 0 5
38862: ARRAY
38863: PUSH
38864: LD_INT 1
38866: PLUS
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PPUSH
38872: LD_VAR 0 2
38876: PUSH
38877: LD_VAR 0 4
38881: ARRAY
38882: PUSH
38883: LD_VAR 0 2
38887: PUSH
38888: LD_VAR 0 4
38892: ARRAY
38893: PPUSH
38894: CALL_OW 255
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PPUSH
38903: CALL 47352 0 3
38907: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38908: LD_VAR 0 2
38912: PUSH
38913: LD_VAR 0 4
38917: ARRAY
38918: PPUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 255
38928: PPUSH
38929: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38933: LD_VAR 0 2
38937: PUSH
38938: LD_VAR 0 4
38942: ARRAY
38943: PPUSH
38944: CALL_OW 141
// end ;
38948: GO 38780
38950: POP
38951: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38952: LD_VAR 0 1
38956: PPUSH
38957: LD_EXP 111
38961: PUSH
38962: LD_VAR 0 5
38966: ARRAY
38967: PUSH
38968: LD_INT 0
38970: PLUS
38971: PPUSH
38972: CALL_OW 505
// end ;
38976: LD_VAR 0 3
38980: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38981: LD_INT 0
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
// if not hack in hackTanks then
38987: LD_VAR 0 1
38991: PUSH
38992: LD_EXP 110
38996: IN
38997: NOT
38998: IFFALSE 39002
// exit ;
39000: GO 39246
// index := GetElementIndex ( hackTanks , hack ) ;
39002: LD_ADDR_VAR 0 4
39006: PUSH
39007: LD_EXP 110
39011: PPUSH
39012: LD_VAR 0 1
39016: PPUSH
39017: CALL 47135 0 2
39021: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39022: LD_ADDR_VAR 0 3
39026: PUSH
39027: DOUBLE
39028: LD_EXP 111
39032: PUSH
39033: LD_VAR 0 4
39037: ARRAY
39038: INC
39039: ST_TO_ADDR
39040: LD_INT 1
39042: PUSH
39043: FOR_DOWNTO
39044: IFFALSE 39220
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39046: LD_ADDR_VAR 0 5
39050: PUSH
39051: LD_EXP 111
39055: PUSH
39056: LD_VAR 0 4
39060: ARRAY
39061: PUSH
39062: LD_VAR 0 3
39066: ARRAY
39067: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39068: LD_VAR 0 5
39072: PUSH
39073: LD_INT 1
39075: ARRAY
39076: PPUSH
39077: CALL_OW 302
39081: NOT
39082: IFTRUE 39110
39084: PUSH
39085: LD_VAR 0 5
39089: PUSH
39090: LD_INT 1
39092: ARRAY
39093: PPUSH
39094: CALL_OW 255
39098: PUSH
39099: LD_VAR 0 1
39103: PPUSH
39104: CALL_OW 255
39108: NONEQUAL
39109: OR
39110: IFFALSE 39218
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39112: LD_VAR 0 5
39116: PUSH
39117: LD_INT 1
39119: ARRAY
39120: PPUSH
39121: CALL_OW 305
39125: IFFALSE 39153
39127: PUSH
39128: LD_VAR 0 5
39132: PUSH
39133: LD_INT 1
39135: ARRAY
39136: PPUSH
39137: CALL_OW 255
39141: PUSH
39142: LD_VAR 0 1
39146: PPUSH
39147: CALL_OW 255
39151: EQUAL
39152: AND
39153: IFFALSE 39177
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39155: LD_VAR 0 5
39159: PUSH
39160: LD_INT 1
39162: ARRAY
39163: PPUSH
39164: LD_VAR 0 5
39168: PUSH
39169: LD_INT 2
39171: ARRAY
39172: PPUSH
39173: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39177: LD_ADDR_EXP 111
39181: PUSH
39182: LD_EXP 111
39186: PPUSH
39187: LD_VAR 0 4
39191: PPUSH
39192: LD_EXP 111
39196: PUSH
39197: LD_VAR 0 4
39201: ARRAY
39202: PPUSH
39203: LD_VAR 0 3
39207: PPUSH
39208: CALL_OW 3
39212: PPUSH
39213: CALL_OW 1
39217: ST_TO_ADDR
// end ; end ;
39218: GO 39043
39220: POP
39221: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39222: LD_VAR 0 1
39226: PPUSH
39227: LD_EXP 111
39231: PUSH
39232: LD_VAR 0 4
39236: ARRAY
39237: PUSH
39238: LD_INT 0
39240: PLUS
39241: PPUSH
39242: CALL_OW 505
// end ;
39246: LD_VAR 0 2
39250: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39251: LD_INT 0
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
// if not hack in hackTanks then
39257: LD_VAR 0 1
39261: PUSH
39262: LD_EXP 110
39266: IN
39267: NOT
39268: IFFALSE 39272
// exit ;
39270: GO 39357
// index := GetElementIndex ( hackTanks , hack ) ;
39272: LD_ADDR_VAR 0 5
39276: PUSH
39277: LD_EXP 110
39281: PPUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL 47135 0 2
39291: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39292: LD_ADDR_VAR 0 4
39296: PUSH
39297: DOUBLE
39298: LD_INT 1
39300: DEC
39301: ST_TO_ADDR
39302: LD_EXP 111
39306: PUSH
39307: LD_VAR 0 5
39311: ARRAY
39312: PUSH
39313: FOR_TO
39314: IFFALSE 39355
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39316: LD_EXP 111
39320: PUSH
39321: LD_VAR 0 5
39325: ARRAY
39326: PUSH
39327: LD_VAR 0 4
39331: ARRAY
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PUSH
39337: LD_VAR 0 2
39341: EQUAL
39342: IFFALSE 39353
// KillUnit ( vehicle ) ;
39344: LD_VAR 0 2
39348: PPUSH
39349: CALL_OW 66
39353: GO 39313
39355: POP
39356: POP
// end ;
39357: LD_VAR 0 3
39361: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39362: LD_EXP 115
39366: NOT
39367: IFFALSE 39402
39369: GO 39371
39371: DISABLE
// begin initMiner := true ;
39372: LD_ADDR_EXP 115
39376: PUSH
39377: LD_INT 1
39379: ST_TO_ADDR
// minersList := [ ] ;
39380: LD_ADDR_EXP 116
39384: PUSH
39385: EMPTY
39386: ST_TO_ADDR
// minerMinesList := [ ] ;
39387: LD_ADDR_EXP 117
39391: PUSH
39392: EMPTY
39393: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39394: LD_ADDR_EXP 118
39398: PUSH
39399: LD_INT 5
39401: ST_TO_ADDR
// end ;
39402: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39403: LD_EXP 115
39407: IFFALSE 39425
39409: PUSH
39410: LD_INT 34
39412: PUSH
39413: LD_INT 81
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PPUSH
39420: CALL_OW 69
39424: AND
39425: IFFALSE 39888
39427: GO 39429
39429: DISABLE
39430: LD_INT 0
39432: PPUSH
39433: PPUSH
39434: PPUSH
39435: PPUSH
// begin enable ;
39436: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39437: LD_ADDR_VAR 0 1
39441: PUSH
39442: LD_INT 34
39444: PUSH
39445: LD_INT 81
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PPUSH
39452: CALL_OW 69
39456: PUSH
39457: FOR_IN
39458: IFFALSE 39530
// begin if not i in minersList then
39460: LD_VAR 0 1
39464: PUSH
39465: LD_EXP 116
39469: IN
39470: NOT
39471: IFFALSE 39528
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39473: LD_ADDR_EXP 116
39477: PUSH
39478: LD_EXP 116
39482: PPUSH
39483: LD_EXP 116
39487: PUSH
39488: LD_INT 1
39490: PLUS
39491: PPUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: CALL_OW 1
39501: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39502: LD_ADDR_EXP 117
39506: PUSH
39507: LD_EXP 117
39511: PPUSH
39512: LD_EXP 117
39516: PUSH
39517: LD_INT 1
39519: PLUS
39520: PPUSH
39521: EMPTY
39522: PPUSH
39523: CALL_OW 1
39527: ST_TO_ADDR
// end end ;
39528: GO 39457
39530: POP
39531: POP
// for i := minerMinesList downto 1 do
39532: LD_ADDR_VAR 0 1
39536: PUSH
39537: DOUBLE
39538: LD_EXP 117
39542: INC
39543: ST_TO_ADDR
39544: LD_INT 1
39546: PUSH
39547: FOR_DOWNTO
39548: IFFALSE 39886
// begin if IsLive ( minersList [ i ] ) then
39550: LD_EXP 116
39554: PUSH
39555: LD_VAR 0 1
39559: ARRAY
39560: PPUSH
39561: CALL_OW 300
39565: IFFALSE 39593
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39567: LD_EXP 116
39571: PUSH
39572: LD_VAR 0 1
39576: ARRAY
39577: PPUSH
39578: LD_EXP 117
39582: PUSH
39583: LD_VAR 0 1
39587: ARRAY
39588: PPUSH
39589: CALL_OW 505
// if not minerMinesList [ i ] then
39593: LD_EXP 117
39597: PUSH
39598: LD_VAR 0 1
39602: ARRAY
39603: NOT
39604: IFFALSE 39608
// continue ;
39606: GO 39547
// for j := minerMinesList [ i ] downto 1 do
39608: LD_ADDR_VAR 0 2
39612: PUSH
39613: DOUBLE
39614: LD_EXP 117
39618: PUSH
39619: LD_VAR 0 1
39623: ARRAY
39624: INC
39625: ST_TO_ADDR
39626: LD_INT 1
39628: PUSH
39629: FOR_DOWNTO
39630: IFFALSE 39882
// begin side := GetSide ( minersList [ i ] ) ;
39632: LD_ADDR_VAR 0 3
39636: PUSH
39637: LD_EXP 116
39641: PUSH
39642: LD_VAR 0 1
39646: ARRAY
39647: PPUSH
39648: CALL_OW 255
39652: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39653: LD_ADDR_VAR 0 4
39657: PUSH
39658: LD_EXP 117
39662: PUSH
39663: LD_VAR 0 1
39667: ARRAY
39668: PUSH
39669: LD_VAR 0 2
39673: ARRAY
39674: PUSH
39675: LD_INT 1
39677: ARRAY
39678: PPUSH
39679: LD_EXP 117
39683: PUSH
39684: LD_VAR 0 1
39688: ARRAY
39689: PUSH
39690: LD_VAR 0 2
39694: ARRAY
39695: PUSH
39696: LD_INT 2
39698: ARRAY
39699: PPUSH
39700: CALL_OW 428
39704: ST_TO_ADDR
// if not tmp then
39705: LD_VAR 0 4
39709: NOT
39710: IFFALSE 39714
// continue ;
39712: GO 39629
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39714: LD_VAR 0 4
39718: PUSH
39719: LD_INT 81
39721: PUSH
39722: LD_VAR 0 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PPUSH
39731: CALL_OW 69
39735: IN
39736: IFFALSE 39786
39738: PUSH
39739: LD_EXP 117
39743: PUSH
39744: LD_VAR 0 1
39748: ARRAY
39749: PUSH
39750: LD_VAR 0 2
39754: ARRAY
39755: PUSH
39756: LD_INT 1
39758: ARRAY
39759: PPUSH
39760: LD_EXP 117
39764: PUSH
39765: LD_VAR 0 1
39769: ARRAY
39770: PUSH
39771: LD_VAR 0 2
39775: ARRAY
39776: PUSH
39777: LD_INT 2
39779: ARRAY
39780: PPUSH
39781: CALL_OW 458
39785: AND
39786: IFFALSE 39880
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39788: LD_EXP 117
39792: PUSH
39793: LD_VAR 0 1
39797: ARRAY
39798: PUSH
39799: LD_VAR 0 2
39803: ARRAY
39804: PUSH
39805: LD_INT 1
39807: ARRAY
39808: PPUSH
39809: LD_EXP 117
39813: PUSH
39814: LD_VAR 0 1
39818: ARRAY
39819: PUSH
39820: LD_VAR 0 2
39824: ARRAY
39825: PUSH
39826: LD_INT 2
39828: ARRAY
39829: PPUSH
39830: LD_VAR 0 3
39834: PPUSH
39835: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39839: LD_ADDR_EXP 117
39843: PUSH
39844: LD_EXP 117
39848: PPUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_EXP 117
39858: PUSH
39859: LD_VAR 0 1
39863: ARRAY
39864: PPUSH
39865: LD_VAR 0 2
39869: PPUSH
39870: CALL_OW 3
39874: PPUSH
39875: CALL_OW 1
39879: ST_TO_ADDR
// end ; end ;
39880: GO 39629
39882: POP
39883: POP
// end ;
39884: GO 39547
39886: POP
39887: POP
// end ;
39888: PPOPN 4
39890: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
// result := false ;
39895: LD_ADDR_VAR 0 4
39899: PUSH
39900: LD_INT 0
39902: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 264
39912: PUSH
39913: LD_INT 81
39915: EQUAL
39916: NOT
39917: IFFALSE 39921
// exit ;
39919: GO 40165
// index := GetElementIndex ( minersList , unit ) ;
39921: LD_ADDR_VAR 0 5
39925: PUSH
39926: LD_EXP 116
39930: PPUSH
39931: LD_VAR 0 1
39935: PPUSH
39936: CALL 47135 0 2
39940: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39941: LD_EXP 117
39945: PUSH
39946: LD_VAR 0 5
39950: ARRAY
39951: PUSH
39952: LD_EXP 118
39956: GREATEREQUAL
39957: IFFALSE 39961
// exit ;
39959: GO 40165
// ComMoveXY ( unit , x , y ) ;
39961: LD_VAR 0 1
39965: PPUSH
39966: LD_VAR 0 2
39970: PPUSH
39971: LD_VAR 0 3
39975: PPUSH
39976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39980: LD_INT 35
39982: PPUSH
39983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39987: LD_VAR 0 1
39991: PPUSH
39992: LD_VAR 0 2
39996: PPUSH
39997: LD_VAR 0 3
40001: PPUSH
40002: CALL 79181 0 3
40006: NOT
40007: IFFALSE 40020
40009: PUSH
40010: LD_VAR 0 1
40014: PPUSH
40015: CALL_OW 314
40019: AND
40020: IFFALSE 40024
// exit ;
40022: GO 40165
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40024: LD_VAR 0 2
40028: PPUSH
40029: LD_VAR 0 3
40033: PPUSH
40034: CALL_OW 428
40038: PUSH
40039: LD_VAR 0 1
40043: EQUAL
40044: IFFALSE 40058
40046: PUSH
40047: LD_VAR 0 1
40051: PPUSH
40052: CALL_OW 314
40056: NOT
40057: AND
40058: IFFALSE 39980
// PlaySoundXY ( x , y , PlantMine ) ;
40060: LD_VAR 0 2
40064: PPUSH
40065: LD_VAR 0 3
40069: PPUSH
40070: LD_STRING PlantMine
40072: PPUSH
40073: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40077: LD_VAR 0 2
40081: PPUSH
40082: LD_VAR 0 3
40086: PPUSH
40087: LD_VAR 0 1
40091: PPUSH
40092: CALL_OW 255
40096: PPUSH
40097: LD_INT 0
40099: PPUSH
40100: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40104: LD_ADDR_EXP 117
40108: PUSH
40109: LD_EXP 117
40113: PPUSH
40114: LD_VAR 0 5
40118: PUSH
40119: LD_EXP 117
40123: PUSH
40124: LD_VAR 0 5
40128: ARRAY
40129: PUSH
40130: LD_INT 1
40132: PLUS
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PPUSH
40138: LD_VAR 0 2
40142: PUSH
40143: LD_VAR 0 3
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PPUSH
40152: CALL 47352 0 3
40156: ST_TO_ADDR
// result := true ;
40157: LD_ADDR_VAR 0 4
40161: PUSH
40162: LD_INT 1
40164: ST_TO_ADDR
// end ;
40165: LD_VAR 0 4
40169: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40170: LD_INT 0
40172: PPUSH
40173: PPUSH
40174: PPUSH
// if not unit in minersList then
40175: LD_VAR 0 1
40179: PUSH
40180: LD_EXP 116
40184: IN
40185: NOT
40186: IFFALSE 40190
// exit ;
40188: GO 40584
// index := GetElementIndex ( minersList , unit ) ;
40190: LD_ADDR_VAR 0 6
40194: PUSH
40195: LD_EXP 116
40199: PPUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL 47135 0 2
40209: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40210: LD_ADDR_VAR 0 5
40214: PUSH
40215: DOUBLE
40216: LD_EXP 117
40220: PUSH
40221: LD_VAR 0 6
40225: ARRAY
40226: INC
40227: ST_TO_ADDR
40228: LD_INT 1
40230: PUSH
40231: FOR_DOWNTO
40232: IFFALSE 40395
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40234: LD_EXP 117
40238: PUSH
40239: LD_VAR 0 6
40243: ARRAY
40244: PUSH
40245: LD_VAR 0 5
40249: ARRAY
40250: PUSH
40251: LD_INT 1
40253: ARRAY
40254: PUSH
40255: LD_VAR 0 2
40259: EQUAL
40260: IFFALSE 40290
40262: PUSH
40263: LD_EXP 117
40267: PUSH
40268: LD_VAR 0 6
40272: ARRAY
40273: PUSH
40274: LD_VAR 0 5
40278: ARRAY
40279: PUSH
40280: LD_INT 2
40282: ARRAY
40283: PUSH
40284: LD_VAR 0 3
40288: EQUAL
40289: AND
40290: IFFALSE 40393
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40292: LD_EXP 117
40296: PUSH
40297: LD_VAR 0 6
40301: ARRAY
40302: PUSH
40303: LD_VAR 0 5
40307: ARRAY
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: PPUSH
40313: LD_EXP 117
40317: PUSH
40318: LD_VAR 0 6
40322: ARRAY
40323: PUSH
40324: LD_VAR 0 5
40328: ARRAY
40329: PUSH
40330: LD_INT 2
40332: ARRAY
40333: PPUSH
40334: LD_VAR 0 1
40338: PPUSH
40339: CALL_OW 255
40343: PPUSH
40344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40348: LD_ADDR_EXP 117
40352: PUSH
40353: LD_EXP 117
40357: PPUSH
40358: LD_VAR 0 6
40362: PPUSH
40363: LD_EXP 117
40367: PUSH
40368: LD_VAR 0 6
40372: ARRAY
40373: PPUSH
40374: LD_VAR 0 5
40378: PPUSH
40379: CALL_OW 3
40383: PPUSH
40384: CALL_OW 1
40388: ST_TO_ADDR
// exit ;
40389: POP
40390: POP
40391: GO 40584
// end ; end ;
40393: GO 40231
40395: POP
40396: POP
// for i := minerMinesList [ index ] downto 1 do
40397: LD_ADDR_VAR 0 5
40401: PUSH
40402: DOUBLE
40403: LD_EXP 117
40407: PUSH
40408: LD_VAR 0 6
40412: ARRAY
40413: INC
40414: ST_TO_ADDR
40415: LD_INT 1
40417: PUSH
40418: FOR_DOWNTO
40419: IFFALSE 40582
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40421: LD_EXP 117
40425: PUSH
40426: LD_VAR 0 6
40430: ARRAY
40431: PUSH
40432: LD_VAR 0 5
40436: ARRAY
40437: PUSH
40438: LD_INT 1
40440: ARRAY
40441: PPUSH
40442: LD_EXP 117
40446: PUSH
40447: LD_VAR 0 6
40451: ARRAY
40452: PUSH
40453: LD_VAR 0 5
40457: ARRAY
40458: PUSH
40459: LD_INT 2
40461: ARRAY
40462: PPUSH
40463: LD_VAR 0 2
40467: PPUSH
40468: LD_VAR 0 3
40472: PPUSH
40473: CALL_OW 298
40477: PUSH
40478: LD_INT 6
40480: LESS
40481: IFFALSE 40580
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40483: LD_EXP 117
40487: PUSH
40488: LD_VAR 0 6
40492: ARRAY
40493: PUSH
40494: LD_VAR 0 5
40498: ARRAY
40499: PUSH
40500: LD_INT 1
40502: ARRAY
40503: PPUSH
40504: LD_EXP 117
40508: PUSH
40509: LD_VAR 0 6
40513: ARRAY
40514: PUSH
40515: LD_VAR 0 5
40519: ARRAY
40520: PUSH
40521: LD_INT 2
40523: ARRAY
40524: PPUSH
40525: LD_VAR 0 1
40529: PPUSH
40530: CALL_OW 255
40534: PPUSH
40535: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40539: LD_ADDR_EXP 117
40543: PUSH
40544: LD_EXP 117
40548: PPUSH
40549: LD_VAR 0 6
40553: PPUSH
40554: LD_EXP 117
40558: PUSH
40559: LD_VAR 0 6
40563: ARRAY
40564: PPUSH
40565: LD_VAR 0 5
40569: PPUSH
40570: CALL_OW 3
40574: PPUSH
40575: CALL_OW 1
40579: ST_TO_ADDR
// end ; end ;
40580: GO 40418
40582: POP
40583: POP
// end ;
40584: LD_VAR 0 4
40588: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40589: LD_INT 0
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL_OW 264
40609: PUSH
40610: LD_INT 81
40612: EQUAL
40613: NOT
40614: IFTRUE 40629
40616: PUSH
40617: LD_VAR 0 1
40621: PUSH
40622: LD_EXP 116
40626: IN
40627: NOT
40628: OR
40629: IFFALSE 40633
// exit ;
40631: GO 40959
// index := GetElementIndex ( minersList , unit ) ;
40633: LD_ADDR_VAR 0 6
40637: PUSH
40638: LD_EXP 116
40642: PPUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL 47135 0 2
40652: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40653: LD_ADDR_VAR 0 8
40657: PUSH
40658: LD_EXP 118
40662: PUSH
40663: LD_EXP 117
40667: PUSH
40668: LD_VAR 0 6
40672: ARRAY
40673: MINUS
40674: ST_TO_ADDR
// if not minesFreeAmount then
40675: LD_VAR 0 8
40679: NOT
40680: IFFALSE 40684
// exit ;
40682: GO 40959
// tmp := [ ] ;
40684: LD_ADDR_VAR 0 7
40688: PUSH
40689: EMPTY
40690: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: DOUBLE
40697: LD_INT 1
40699: DEC
40700: ST_TO_ADDR
40701: LD_VAR 0 8
40705: PUSH
40706: FOR_TO
40707: IFFALSE 40906
// begin _d := rand ( 0 , 5 ) ;
40709: LD_ADDR_VAR 0 11
40713: PUSH
40714: LD_INT 0
40716: PPUSH
40717: LD_INT 5
40719: PPUSH
40720: CALL_OW 12
40724: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40725: LD_ADDR_VAR 0 12
40729: PUSH
40730: LD_INT 2
40732: PPUSH
40733: LD_INT 6
40735: PPUSH
40736: CALL_OW 12
40740: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40741: LD_ADDR_VAR 0 9
40745: PUSH
40746: LD_VAR 0 2
40750: PPUSH
40751: LD_VAR 0 11
40755: PPUSH
40756: LD_VAR 0 12
40760: PPUSH
40761: CALL_OW 272
40765: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40766: LD_ADDR_VAR 0 10
40770: PUSH
40771: LD_VAR 0 3
40775: PPUSH
40776: LD_VAR 0 11
40780: PPUSH
40781: LD_VAR 0 12
40785: PPUSH
40786: CALL_OW 273
40790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40791: LD_VAR 0 9
40795: PPUSH
40796: LD_VAR 0 10
40800: PPUSH
40801: CALL_OW 488
40805: IFFALSE 40829
40807: PUSH
40808: LD_VAR 0 9
40812: PUSH
40813: LD_VAR 0 10
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_VAR 0 7
40826: IN
40827: NOT
40828: AND
40829: IFFALSE 40848
40831: PUSH
40832: LD_VAR 0 9
40836: PPUSH
40837: LD_VAR 0 10
40841: PPUSH
40842: CALL_OW 458
40846: NOT
40847: AND
40848: IFFALSE 40890
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40850: LD_ADDR_VAR 0 7
40854: PUSH
40855: LD_VAR 0 7
40859: PPUSH
40860: LD_VAR 0 7
40864: PUSH
40865: LD_INT 1
40867: PLUS
40868: PPUSH
40869: LD_VAR 0 9
40873: PUSH
40874: LD_VAR 0 10
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PPUSH
40883: CALL_OW 1
40887: ST_TO_ADDR
40888: GO 40904
// i := i - 1 ;
40890: LD_ADDR_VAR 0 5
40894: PUSH
40895: LD_VAR 0 5
40899: PUSH
40900: LD_INT 1
40902: MINUS
40903: ST_TO_ADDR
// end ;
40904: GO 40706
40906: POP
40907: POP
// for i in tmp do
40908: LD_ADDR_VAR 0 5
40912: PUSH
40913: LD_VAR 0 7
40917: PUSH
40918: FOR_IN
40919: IFFALSE 40957
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40921: LD_VAR 0 1
40925: PPUSH
40926: LD_VAR 0 5
40930: PUSH
40931: LD_INT 1
40933: ARRAY
40934: PPUSH
40935: LD_VAR 0 5
40939: PUSH
40940: LD_INT 2
40942: ARRAY
40943: PPUSH
40944: CALL 39891 0 3
40948: NOT
40949: IFFALSE 40955
// exit ;
40951: POP
40952: POP
40953: GO 40959
40955: GO 40918
40957: POP
40958: POP
// end ;
40959: LD_VAR 0 4
40963: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40964: LD_INT 0
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
// if GetClass ( unit ) <> class_sniper then
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 257
40984: PUSH
40985: LD_INT 5
40987: NONEQUAL
40988: IFFALSE 40992
// exit ;
40990: GO 41462
// dist := 8 ;
40992: LD_ADDR_VAR 0 5
40996: PUSH
40997: LD_INT 8
40999: ST_TO_ADDR
// viewRange := 12 ;
41000: LD_ADDR_VAR 0 8
41004: PUSH
41005: LD_INT 12
41007: ST_TO_ADDR
// side := GetSide ( unit ) ;
41008: LD_ADDR_VAR 0 6
41012: PUSH
41013: LD_VAR 0 1
41017: PPUSH
41018: CALL_OW 255
41022: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41023: LD_INT 61
41025: PPUSH
41026: LD_VAR 0 6
41030: PPUSH
41031: CALL_OW 321
41035: PUSH
41036: LD_INT 2
41038: EQUAL
41039: IFFALSE 41049
// viewRange := 16 ;
41041: LD_ADDR_VAR 0 8
41045: PUSH
41046: LD_INT 16
41048: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41049: LD_VAR 0 1
41053: PPUSH
41054: LD_VAR 0 2
41058: PPUSH
41059: LD_VAR 0 3
41063: PPUSH
41064: CALL_OW 297
41068: PUSH
41069: LD_VAR 0 5
41073: GREATER
41074: IFFALSE 41153
// begin ComMoveXY ( unit , x , y ) ;
41076: LD_VAR 0 1
41080: PPUSH
41081: LD_VAR 0 2
41085: PPUSH
41086: LD_VAR 0 3
41090: PPUSH
41091: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41095: LD_INT 35
41097: PPUSH
41098: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41102: LD_VAR 0 1
41106: PPUSH
41107: LD_VAR 0 2
41111: PPUSH
41112: LD_VAR 0 3
41116: PPUSH
41117: CALL 79181 0 3
41121: NOT
41122: IFFALSE 41126
// exit ;
41124: GO 41462
// until GetDistUnitXY ( unit , x , y ) < dist ;
41126: LD_VAR 0 1
41130: PPUSH
41131: LD_VAR 0 2
41135: PPUSH
41136: LD_VAR 0 3
41140: PPUSH
41141: CALL_OW 297
41145: PUSH
41146: LD_VAR 0 5
41150: LESS
41151: IFFALSE 41095
// end ; ComTurnXY ( unit , x , y ) ;
41153: LD_VAR 0 1
41157: PPUSH
41158: LD_VAR 0 2
41162: PPUSH
41163: LD_VAR 0 3
41167: PPUSH
41168: CALL_OW 118
// repeat if Multiplayer then
41172: LD_OWVAR 4
41176: IFFALSE 41187
// wait ( 35 ) else
41178: LD_INT 35
41180: PPUSH
41181: CALL_OW 67
41185: GO 41194
// wait ( 5 ) ;
41187: LD_INT 5
41189: PPUSH
41190: CALL_OW 67
// _d := GetDir ( unit ) ;
41194: LD_ADDR_VAR 0 11
41198: PUSH
41199: LD_VAR 0 1
41203: PPUSH
41204: CALL_OW 254
41208: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41209: LD_ADDR_VAR 0 7
41213: PUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 250
41223: PPUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 251
41233: PPUSH
41234: LD_VAR 0 2
41238: PPUSH
41239: LD_VAR 0 3
41243: PPUSH
41244: CALL 81817 0 4
41248: ST_TO_ADDR
// until dir = _d ;
41249: LD_VAR 0 7
41253: PUSH
41254: LD_VAR 0 11
41258: EQUAL
41259: IFFALSE 41172
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41261: LD_ADDR_VAR 0 9
41265: PUSH
41266: LD_VAR 0 1
41270: PPUSH
41271: CALL_OW 250
41275: PPUSH
41276: LD_VAR 0 7
41280: PPUSH
41281: LD_VAR 0 5
41285: PPUSH
41286: CALL_OW 272
41290: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41291: LD_ADDR_VAR 0 10
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 251
41305: PPUSH
41306: LD_VAR 0 7
41310: PPUSH
41311: LD_VAR 0 5
41315: PPUSH
41316: CALL_OW 273
41320: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41321: LD_VAR 0 9
41325: PPUSH
41326: LD_VAR 0 10
41330: PPUSH
41331: CALL_OW 488
41335: NOT
41336: IFFALSE 41340
// exit ;
41338: GO 41462
// ComAnimCustom ( unit , 1 ) ;
41340: LD_VAR 0 1
41344: PPUSH
41345: LD_INT 1
41347: PPUSH
41348: CALL_OW 592
// p := 0 ;
41352: LD_ADDR_VAR 0 12
41356: PUSH
41357: LD_INT 0
41359: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41360: LD_VAR 0 9
41364: PPUSH
41365: LD_VAR 0 10
41369: PPUSH
41370: LD_VAR 0 6
41374: PPUSH
41375: LD_VAR 0 8
41379: PPUSH
41380: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41384: LD_INT 35
41386: PPUSH
41387: CALL_OW 67
// p := Inc ( p ) ;
41391: LD_ADDR_VAR 0 12
41395: PUSH
41396: LD_VAR 0 12
41400: PPUSH
41401: CALL 81773 0 1
41405: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41406: LD_VAR 0 12
41410: PUSH
41411: LD_INT 3
41413: EQUAL
41414: IFTRUE 41428
41416: PUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: CALL_OW 302
41426: NOT
41427: OR
41428: IFTRUE 41441
41430: PUSH
41431: LD_VAR 0 1
41435: PPUSH
41436: CALL_OW 301
41440: OR
41441: IFFALSE 41384
// RemoveSeeing ( _x , _y , side ) ;
41443: LD_VAR 0 9
41447: PPUSH
41448: LD_VAR 0 10
41452: PPUSH
41453: LD_VAR 0 6
41457: PPUSH
41458: CALL_OW 331
// end ;
41462: LD_VAR 0 4
41466: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41467: LD_INT 0
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
// if not unit then
41480: LD_VAR 0 1
41484: NOT
41485: IFFALSE 41489
// exit ;
41487: GO 41760
// side := GetSide ( unit ) ;
41489: LD_ADDR_VAR 0 3
41493: PUSH
41494: LD_VAR 0 1
41498: PPUSH
41499: CALL_OW 255
41503: ST_TO_ADDR
// x := GetX ( unit ) ;
41504: LD_ADDR_VAR 0 5
41508: PUSH
41509: LD_VAR 0 1
41513: PPUSH
41514: CALL_OW 250
41518: ST_TO_ADDR
// y := GetY ( unit ) ;
41519: LD_ADDR_VAR 0 6
41523: PUSH
41524: LD_VAR 0 1
41528: PPUSH
41529: CALL_OW 251
41533: ST_TO_ADDR
// r := 8 ;
41534: LD_ADDR_VAR 0 4
41538: PUSH
41539: LD_INT 8
41541: ST_TO_ADDR
// if x - r < 0 then
41542: LD_VAR 0 5
41546: PUSH
41547: LD_VAR 0 4
41551: MINUS
41552: PUSH
41553: LD_INT 0
41555: LESS
41556: IFFALSE 41568
// min_x := 0 else
41558: LD_ADDR_VAR 0 7
41562: PUSH
41563: LD_INT 0
41565: ST_TO_ADDR
41566: GO 41584
// min_x := x - r ;
41568: LD_ADDR_VAR 0 7
41572: PUSH
41573: LD_VAR 0 5
41577: PUSH
41578: LD_VAR 0 4
41582: MINUS
41583: ST_TO_ADDR
// if y - r < 0 then
41584: LD_VAR 0 6
41588: PUSH
41589: LD_VAR 0 4
41593: MINUS
41594: PUSH
41595: LD_INT 0
41597: LESS
41598: IFFALSE 41610
// min_y := 0 else
41600: LD_ADDR_VAR 0 8
41604: PUSH
41605: LD_INT 0
41607: ST_TO_ADDR
41608: GO 41626
// min_y := y - r ;
41610: LD_ADDR_VAR 0 8
41614: PUSH
41615: LD_VAR 0 6
41619: PUSH
41620: LD_VAR 0 4
41624: MINUS
41625: ST_TO_ADDR
// max_x := x + r ;
41626: LD_ADDR_VAR 0 9
41630: PUSH
41631: LD_VAR 0 5
41635: PUSH
41636: LD_VAR 0 4
41640: PLUS
41641: ST_TO_ADDR
// max_y := y + r ;
41642: LD_ADDR_VAR 0 10
41646: PUSH
41647: LD_VAR 0 6
41651: PUSH
41652: LD_VAR 0 4
41656: PLUS
41657: ST_TO_ADDR
// for _x = min_x to max_x do
41658: LD_ADDR_VAR 0 11
41662: PUSH
41663: DOUBLE
41664: LD_VAR 0 7
41668: DEC
41669: ST_TO_ADDR
41670: LD_VAR 0 9
41674: PUSH
41675: FOR_TO
41676: IFFALSE 41758
// for _y = min_y to max_y do
41678: LD_ADDR_VAR 0 12
41682: PUSH
41683: DOUBLE
41684: LD_VAR 0 8
41688: DEC
41689: ST_TO_ADDR
41690: LD_VAR 0 10
41694: PUSH
41695: FOR_TO
41696: IFFALSE 41754
// begin if not ValidHex ( _x , _y ) then
41698: LD_VAR 0 11
41702: PPUSH
41703: LD_VAR 0 12
41707: PPUSH
41708: CALL_OW 488
41712: NOT
41713: IFFALSE 41717
// continue ;
41715: GO 41695
// if MineAtPos ( _x , _y ) then
41717: LD_VAR 0 11
41721: PPUSH
41722: LD_VAR 0 12
41726: PPUSH
41727: CALL_OW 458
41731: IFFALSE 41752
// ViewMineAtPos ( _x , _y , side ) ;
41733: LD_VAR 0 11
41737: PPUSH
41738: LD_VAR 0 12
41742: PPUSH
41743: LD_VAR 0 3
41747: PPUSH
41748: CALL_OW 457
// end ;
41752: GO 41695
41754: POP
41755: POP
41756: GO 41675
41758: POP
41759: POP
// end ;
41760: LD_VAR 0 2
41764: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
41765: LD_INT 0
41767: PPUSH
41768: PPUSH
41769: PPUSH
41770: PPUSH
41771: PPUSH
41772: PPUSH
// if not units then
41773: LD_VAR 0 1
41777: NOT
41778: IFFALSE 41782
// exit ;
41780: GO 42212
// scaners := [ ] ;
41782: LD_ADDR_VAR 0 6
41786: PUSH
41787: EMPTY
41788: ST_TO_ADDR
// for i in units do
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_VAR 0 1
41798: PUSH
41799: FOR_IN
41800: IFFALSE 41957
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
41802: LD_VAR 0 3
41806: PPUSH
41807: CALL_OW 264
41811: PUSH
41812: LD_INT 11
41814: NONEQUAL
41815: IFTRUE 41829
41817: PUSH
41818: LD_VAR 0 3
41822: PPUSH
41823: CALL_OW 302
41827: NOT
41828: OR
41829: IFTRUE 41846
41831: PUSH
41832: LD_VAR 0 3
41836: PPUSH
41837: CALL_OW 110
41841: PUSH
41842: LD_INT 502
41844: EQUAL
41845: OR
41846: IFFALSE 41850
// continue ;
41848: GO 41799
// ComStop ( i ) ;
41850: LD_VAR 0 3
41854: PPUSH
41855: CALL_OW 141
// x := GetX ( i ) ;
41859: LD_ADDR_VAR 0 4
41863: PUSH
41864: LD_VAR 0 3
41868: PPUSH
41869: CALL_OW 250
41873: ST_TO_ADDR
// y := GetY ( i ) ;
41874: LD_ADDR_VAR 0 5
41878: PUSH
41879: LD_VAR 0 3
41883: PPUSH
41884: CALL_OW 251
41888: ST_TO_ADDR
// if GetSide ( i ) = your_side then
41889: LD_VAR 0 3
41893: PPUSH
41894: CALL_OW 255
41898: PUSH
41899: LD_OWVAR 2
41903: EQUAL
41904: IFFALSE 41923
// PlaySoundXY ( x , y , mineDetector ) ;
41906: LD_VAR 0 4
41910: PPUSH
41911: LD_VAR 0 5
41915: PPUSH
41916: LD_STRING mineDetector
41918: PPUSH
41919: CALL_OW 366
// scaners := Join ( scaners , i ) ;
41923: LD_ADDR_VAR 0 6
41927: PUSH
41928: LD_VAR 0 6
41932: PPUSH
41933: LD_VAR 0 3
41937: PPUSH
41938: CALL 80400 0 2
41942: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
41943: LD_VAR 0 3
41947: PPUSH
41948: LD_INT 502
41950: PPUSH
41951: CALL_OW 109
// end ;
41955: GO 41799
41957: POP
41958: POP
// if not scaners then
41959: LD_VAR 0 6
41963: NOT
41964: IFFALSE 41968
// exit ;
41966: GO 42212
// wait ( 3 ) ;
41968: LD_INT 3
41970: PPUSH
41971: CALL_OW 67
// timer := 6 ;
41975: LD_ADDR_VAR 0 7
41979: PUSH
41980: LD_INT 6
41982: ST_TO_ADDR
// repeat for i in scaners do
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: LD_VAR 0 6
41992: PUSH
41993: FOR_IN
41994: IFFALSE 42110
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
41996: LD_VAR 0 3
42000: PPUSH
42001: CALL_OW 302
42005: NOT
42006: IFTRUE 42019
42008: PUSH
42009: LD_VAR 0 3
42013: PPUSH
42014: CALL_OW 314
42018: OR
42019: IFTRUE 42050
42021: PUSH
42022: LD_VAR 0 3
42026: PPUSH
42027: CALL_OW 263
42031: PUSH
42032: LD_INT 1
42034: EQUAL
42035: IFFALSE 42049
42037: PUSH
42038: LD_VAR 0 3
42042: PPUSH
42043: CALL_OW 311
42047: NOT
42048: AND
42049: OR
42050: IFFALSE 42094
// begin SetUnitDisplayNumber ( i , 0 ) ;
42052: LD_VAR 0 3
42056: PPUSH
42057: LD_INT 0
42059: PPUSH
42060: CALL_OW 505
// SetTag ( i , 0 ) ;
42064: LD_VAR 0 3
42068: PPUSH
42069: LD_INT 0
42071: PPUSH
42072: CALL_OW 109
// scaners := scaners diff i ;
42076: LD_ADDR_VAR 0 6
42080: PUSH
42081: LD_VAR 0 6
42085: PUSH
42086: LD_VAR 0 3
42090: DIFF
42091: ST_TO_ADDR
// continue ;
42092: GO 41993
// end ; SetUnitDisplayNumber ( i , timer ) ;
42094: LD_VAR 0 3
42098: PPUSH
42099: LD_VAR 0 7
42103: PPUSH
42104: CALL_OW 505
// end ;
42108: GO 41993
42110: POP
42111: POP
// if not scaners then
42112: LD_VAR 0 6
42116: NOT
42117: IFFALSE 42121
// exit ;
42119: GO 42212
// timer := Dec ( timer ) ;
42121: LD_ADDR_VAR 0 7
42125: PUSH
42126: LD_VAR 0 7
42130: PPUSH
42131: CALL 81795 0 1
42135: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42136: LD_INT 35
42138: PPUSH
42139: CALL_OW 67
// until timer = 0 ;
42143: LD_VAR 0 7
42147: PUSH
42148: LD_INT 0
42150: EQUAL
42151: IFFALSE 41983
// if not scaners then
42153: LD_VAR 0 6
42157: NOT
42158: IFFALSE 42162
// exit ;
42160: GO 42212
// for i in scaners do
42162: LD_ADDR_VAR 0 3
42166: PUSH
42167: LD_VAR 0 6
42171: PUSH
42172: FOR_IN
42173: IFFALSE 42210
// begin SetUnitDisplayNumber ( i , 0 ) ;
42175: LD_VAR 0 3
42179: PPUSH
42180: LD_INT 0
42182: PPUSH
42183: CALL_OW 505
// SetTag ( i , 0 ) ;
42187: LD_VAR 0 3
42191: PPUSH
42192: LD_INT 0
42194: PPUSH
42195: CALL_OW 109
// RevealDetectorMine ( i ) ;
42199: LD_VAR 0 3
42203: PPUSH
42204: CALL 41467 0 1
// end ;
42208: GO 42172
42210: POP
42211: POP
// end ;
42212: LD_VAR 0 2
42216: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
42217: LD_INT 0
42219: PPUSH
// if p1 = mine_detector_mode then
42220: LD_VAR 0 2
42224: PUSH
42225: LD_INT 103
42227: EQUAL
42228: IFFALSE 42239
// DetectMine ( units ) ;
42230: LD_VAR 0 1
42234: PPUSH
42235: CALL 41765 0 1
// end ; end_of_file
42239: LD_VAR 0 7
42243: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42244: LD_INT 0
42246: PPUSH
42247: PPUSH
// if exist_mode then
42248: LD_VAR 0 2
42252: IFFALSE 42298
// begin unit := CreateCharacter ( prefix & ident ) ;
42254: LD_ADDR_VAR 0 5
42258: PUSH
42259: LD_VAR 0 3
42263: PUSH
42264: LD_VAR 0 1
42268: STR
42269: PPUSH
42270: CALL_OW 34
42274: ST_TO_ADDR
// if unit then
42275: LD_VAR 0 5
42279: IFFALSE 42296
// DeleteCharacters ( prefix & ident ) ;
42281: LD_VAR 0 3
42285: PUSH
42286: LD_VAR 0 1
42290: STR
42291: PPUSH
42292: CALL_OW 40
// end else
42296: GO 42313
// unit := NewCharacter ( ident ) ;
42298: LD_ADDR_VAR 0 5
42302: PUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: CALL_OW 25
42312: ST_TO_ADDR
// result := unit ;
42313: LD_ADDR_VAR 0 4
42317: PUSH
42318: LD_VAR 0 5
42322: ST_TO_ADDR
// end ;
42323: LD_VAR 0 4
42327: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42328: LD_INT 0
42330: PPUSH
42331: PPUSH
// if exist_mode then
42332: LD_VAR 0 2
42336: IFFALSE 42361
// unit := CreateCharacter ( prefix & ident ) else
42338: LD_ADDR_VAR 0 5
42342: PUSH
42343: LD_VAR 0 3
42347: PUSH
42348: LD_VAR 0 1
42352: STR
42353: PPUSH
42354: CALL_OW 34
42358: ST_TO_ADDR
42359: GO 42376
// unit := NewCharacter ( ident ) ;
42361: LD_ADDR_VAR 0 5
42365: PUSH
42366: LD_VAR 0 1
42370: PPUSH
42371: CALL_OW 25
42375: ST_TO_ADDR
// result := unit ;
42376: LD_ADDR_VAR 0 4
42380: PUSH
42381: LD_VAR 0 5
42385: ST_TO_ADDR
// end ;
42386: LD_VAR 0 4
42390: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42391: LD_INT 0
42393: PPUSH
42394: PPUSH
// if not side or not nation then
42395: LD_VAR 0 1
42399: NOT
42400: IFTRUE 42409
42402: PUSH
42403: LD_VAR 0 2
42407: NOT
42408: OR
42409: IFFALSE 42413
// exit ;
42411: GO 43207
// case nation of nation_american :
42413: LD_VAR 0 2
42417: PUSH
42418: LD_INT 1
42420: DOUBLE
42421: EQUAL
42422: IFTRUE 42426
42424: GO 42648
42426: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42427: LD_ADDR_VAR 0 4
42431: PUSH
42432: LD_INT 35
42434: PUSH
42435: LD_INT 45
42437: PUSH
42438: LD_INT 46
42440: PUSH
42441: LD_INT 47
42443: PUSH
42444: LD_INT 82
42446: PUSH
42447: LD_INT 83
42449: PUSH
42450: LD_INT 84
42452: PUSH
42453: LD_INT 85
42455: PUSH
42456: LD_INT 86
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: LD_INT 6
42467: PUSH
42468: LD_INT 15
42470: PUSH
42471: LD_INT 16
42473: PUSH
42474: LD_INT 7
42476: PUSH
42477: LD_INT 12
42479: PUSH
42480: LD_INT 13
42482: PUSH
42483: LD_INT 10
42485: PUSH
42486: LD_INT 14
42488: PUSH
42489: LD_INT 20
42491: PUSH
42492: LD_INT 21
42494: PUSH
42495: LD_INT 22
42497: PUSH
42498: LD_INT 25
42500: PUSH
42501: LD_INT 32
42503: PUSH
42504: LD_INT 27
42506: PUSH
42507: LD_INT 36
42509: PUSH
42510: LD_INT 69
42512: PUSH
42513: LD_INT 39
42515: PUSH
42516: LD_INT 34
42518: PUSH
42519: LD_INT 40
42521: PUSH
42522: LD_INT 48
42524: PUSH
42525: LD_INT 49
42527: PUSH
42528: LD_INT 50
42530: PUSH
42531: LD_INT 51
42533: PUSH
42534: LD_INT 52
42536: PUSH
42537: LD_INT 53
42539: PUSH
42540: LD_INT 54
42542: PUSH
42543: LD_INT 55
42545: PUSH
42546: LD_INT 56
42548: PUSH
42549: LD_INT 57
42551: PUSH
42552: LD_INT 58
42554: PUSH
42555: LD_INT 59
42557: PUSH
42558: LD_INT 60
42560: PUSH
42561: LD_INT 61
42563: PUSH
42564: LD_INT 62
42566: PUSH
42567: LD_INT 80
42569: PUSH
42570: LD_INT 82
42572: PUSH
42573: LD_INT 83
42575: PUSH
42576: LD_INT 84
42578: PUSH
42579: LD_INT 85
42581: PUSH
42582: LD_INT 86
42584: PUSH
42585: LD_INT 90
42587: PUSH
42588: LD_INT 93
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: ST_TO_ADDR
42646: GO 43129
42648: LD_INT 2
42650: DOUBLE
42651: EQUAL
42652: IFTRUE 42656
42654: GO 42890
42656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
42657: LD_ADDR_VAR 0 4
42661: PUSH
42662: LD_INT 35
42664: PUSH
42665: LD_INT 45
42667: PUSH
42668: LD_INT 46
42670: PUSH
42671: LD_INT 47
42673: PUSH
42674: LD_INT 82
42676: PUSH
42677: LD_INT 83
42679: PUSH
42680: LD_INT 84
42682: PUSH
42683: LD_INT 85
42685: PUSH
42686: LD_INT 87
42688: PUSH
42689: LD_INT 70
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 11
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 4
42703: PUSH
42704: LD_INT 5
42706: PUSH
42707: LD_INT 6
42709: PUSH
42710: LD_INT 15
42712: PUSH
42713: LD_INT 18
42715: PUSH
42716: LD_INT 7
42718: PUSH
42719: LD_INT 17
42721: PUSH
42722: LD_INT 8
42724: PUSH
42725: LD_INT 20
42727: PUSH
42728: LD_INT 21
42730: PUSH
42731: LD_INT 22
42733: PUSH
42734: LD_INT 72
42736: PUSH
42737: LD_INT 26
42739: PUSH
42740: LD_INT 69
42742: PUSH
42743: LD_INT 39
42745: PUSH
42746: LD_INT 40
42748: PUSH
42749: LD_INT 41
42751: PUSH
42752: LD_INT 42
42754: PUSH
42755: LD_INT 43
42757: PUSH
42758: LD_INT 48
42760: PUSH
42761: LD_INT 49
42763: PUSH
42764: LD_INT 50
42766: PUSH
42767: LD_INT 51
42769: PUSH
42770: LD_INT 52
42772: PUSH
42773: LD_INT 53
42775: PUSH
42776: LD_INT 54
42778: PUSH
42779: LD_INT 55
42781: PUSH
42782: LD_INT 56
42784: PUSH
42785: LD_INT 60
42787: PUSH
42788: LD_INT 61
42790: PUSH
42791: LD_INT 62
42793: PUSH
42794: LD_INT 66
42796: PUSH
42797: LD_INT 67
42799: PUSH
42800: LD_INT 68
42802: PUSH
42803: LD_INT 81
42805: PUSH
42806: LD_INT 82
42808: PUSH
42809: LD_INT 83
42811: PUSH
42812: LD_INT 84
42814: PUSH
42815: LD_INT 85
42817: PUSH
42818: LD_INT 87
42820: PUSH
42821: LD_INT 88
42823: PUSH
42824: LD_INT 92
42826: PUSH
42827: LD_INT 94
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: ST_TO_ADDR
42888: GO 43129
42890: LD_INT 3
42892: DOUBLE
42893: EQUAL
42894: IFTRUE 42898
42896: GO 43128
42898: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
42899: LD_ADDR_VAR 0 4
42903: PUSH
42904: LD_INT 46
42906: PUSH
42907: LD_INT 47
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: LD_INT 82
42918: PUSH
42919: LD_INT 83
42921: PUSH
42922: LD_INT 84
42924: PUSH
42925: LD_INT 85
42927: PUSH
42928: LD_INT 86
42930: PUSH
42931: LD_INT 11
42933: PUSH
42934: LD_INT 9
42936: PUSH
42937: LD_INT 20
42939: PUSH
42940: LD_INT 19
42942: PUSH
42943: LD_INT 21
42945: PUSH
42946: LD_INT 24
42948: PUSH
42949: LD_INT 22
42951: PUSH
42952: LD_INT 25
42954: PUSH
42955: LD_INT 28
42957: PUSH
42958: LD_INT 29
42960: PUSH
42961: LD_INT 30
42963: PUSH
42964: LD_INT 31
42966: PUSH
42967: LD_INT 37
42969: PUSH
42970: LD_INT 38
42972: PUSH
42973: LD_INT 32
42975: PUSH
42976: LD_INT 27
42978: PUSH
42979: LD_INT 33
42981: PUSH
42982: LD_INT 69
42984: PUSH
42985: LD_INT 39
42987: PUSH
42988: LD_INT 34
42990: PUSH
42991: LD_INT 40
42993: PUSH
42994: LD_INT 71
42996: PUSH
42997: LD_INT 23
42999: PUSH
43000: LD_INT 44
43002: PUSH
43003: LD_INT 48
43005: PUSH
43006: LD_INT 49
43008: PUSH
43009: LD_INT 50
43011: PUSH
43012: LD_INT 51
43014: PUSH
43015: LD_INT 52
43017: PUSH
43018: LD_INT 53
43020: PUSH
43021: LD_INT 54
43023: PUSH
43024: LD_INT 55
43026: PUSH
43027: LD_INT 56
43029: PUSH
43030: LD_INT 57
43032: PUSH
43033: LD_INT 58
43035: PUSH
43036: LD_INT 59
43038: PUSH
43039: LD_INT 63
43041: PUSH
43042: LD_INT 64
43044: PUSH
43045: LD_INT 65
43047: PUSH
43048: LD_INT 82
43050: PUSH
43051: LD_INT 83
43053: PUSH
43054: LD_INT 84
43056: PUSH
43057: LD_INT 85
43059: PUSH
43060: LD_INT 86
43062: PUSH
43063: LD_INT 89
43065: PUSH
43066: LD_INT 91
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
43126: GO 43129
43128: POP
// if state > - 1 and state < 3 then
43129: LD_VAR 0 3
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: GREATER
43138: IFFALSE 43150
43140: PUSH
43141: LD_VAR 0 3
43145: PUSH
43146: LD_INT 3
43148: LESS
43149: AND
43150: IFFALSE 43207
// for i in result do
43152: LD_ADDR_VAR 0 5
43156: PUSH
43157: LD_VAR 0 4
43161: PUSH
43162: FOR_IN
43163: IFFALSE 43205
// if GetTech ( i , side ) <> state then
43165: LD_VAR 0 5
43169: PPUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: CALL_OW 321
43179: PUSH
43180: LD_VAR 0 3
43184: NONEQUAL
43185: IFFALSE 43203
// result := result diff i ;
43187: LD_ADDR_VAR 0 4
43191: PUSH
43192: LD_VAR 0 4
43196: PUSH
43197: LD_VAR 0 5
43201: DIFF
43202: ST_TO_ADDR
43203: GO 43162
43205: POP
43206: POP
// end ;
43207: LD_VAR 0 4
43211: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43212: LD_INT 0
43214: PPUSH
43215: PPUSH
43216: PPUSH
// result := true ;
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_INT 1
43224: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43225: LD_ADDR_VAR 0 5
43229: PUSH
43230: LD_VAR 0 2
43234: PPUSH
43235: CALL_OW 480
43239: ST_TO_ADDR
// if not tmp then
43240: LD_VAR 0 5
43244: NOT
43245: IFFALSE 43249
// exit ;
43247: GO 43298
// for i in tmp do
43249: LD_ADDR_VAR 0 4
43253: PUSH
43254: LD_VAR 0 5
43258: PUSH
43259: FOR_IN
43260: IFFALSE 43296
// if GetTech ( i , side ) <> state_researched then
43262: LD_VAR 0 4
43266: PPUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: CALL_OW 321
43276: PUSH
43277: LD_INT 2
43279: NONEQUAL
43280: IFFALSE 43294
// begin result := false ;
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: LD_INT 0
43289: ST_TO_ADDR
// exit ;
43290: POP
43291: POP
43292: GO 43298
// end ;
43294: GO 43259
43296: POP
43297: POP
// end ;
43298: LD_VAR 0 3
43302: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43303: LD_INT 0
43305: PPUSH
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43318: LD_VAR 0 1
43322: NOT
43323: IFTRUE 43340
43325: PUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 257
43335: PUSH
43336: LD_INT 9
43338: NONEQUAL
43339: OR
43340: IFFALSE 43344
// exit ;
43342: GO 43923
// side := GetSide ( unit ) ;
43344: LD_ADDR_VAR 0 9
43348: PUSH
43349: LD_VAR 0 1
43353: PPUSH
43354: CALL_OW 255
43358: ST_TO_ADDR
// tech_space := tech_spacanom ;
43359: LD_ADDR_VAR 0 12
43363: PUSH
43364: LD_INT 29
43366: ST_TO_ADDR
// tech_time := tech_taurad ;
43367: LD_ADDR_VAR 0 13
43371: PUSH
43372: LD_INT 28
43374: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43375: LD_ADDR_VAR 0 11
43379: PUSH
43380: LD_VAR 0 1
43384: PPUSH
43385: CALL_OW 310
43389: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43390: LD_VAR 0 11
43394: PPUSH
43395: CALL_OW 247
43399: PUSH
43400: LD_INT 2
43402: EQUAL
43403: IFFALSE 43407
// exit ;
43405: GO 43923
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43407: LD_ADDR_VAR 0 8
43411: PUSH
43412: LD_INT 81
43414: PUSH
43415: LD_VAR 0 9
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 3
43426: PUSH
43427: LD_INT 21
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PPUSH
43445: CALL_OW 69
43449: ST_TO_ADDR
// if not tmp then
43450: LD_VAR 0 8
43454: NOT
43455: IFFALSE 43459
// exit ;
43457: GO 43923
// if in_unit then
43459: LD_VAR 0 11
43463: IFFALSE 43487
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43465: LD_ADDR_VAR 0 10
43469: PUSH
43470: LD_VAR 0 8
43474: PPUSH
43475: LD_VAR 0 11
43479: PPUSH
43480: CALL_OW 74
43484: ST_TO_ADDR
43485: GO 43507
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43487: LD_ADDR_VAR 0 10
43491: PUSH
43492: LD_VAR 0 8
43496: PPUSH
43497: LD_VAR 0 1
43501: PPUSH
43502: CALL_OW 74
43506: ST_TO_ADDR
// if not enemy then
43507: LD_VAR 0 10
43511: NOT
43512: IFFALSE 43516
// exit ;
43514: GO 43923
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43516: LD_VAR 0 11
43520: IFFALSE 43542
43522: PUSH
43523: LD_VAR 0 11
43527: PPUSH
43528: LD_VAR 0 10
43532: PPUSH
43533: CALL_OW 296
43537: PUSH
43538: LD_INT 13
43540: GREATER
43541: AND
43542: IFTRUE 43564
43544: PUSH
43545: LD_VAR 0 1
43549: PPUSH
43550: LD_VAR 0 10
43554: PPUSH
43555: CALL_OW 296
43559: PUSH
43560: LD_INT 12
43562: GREATER
43563: OR
43564: IFFALSE 43568
// exit ;
43566: GO 43923
// missile := [ 1 ] ;
43568: LD_ADDR_VAR 0 14
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43579: LD_VAR 0 9
43583: PPUSH
43584: LD_VAR 0 12
43588: PPUSH
43589: CALL_OW 325
43593: IFFALSE 43622
// missile := Replace ( missile , missile + 1 , 2 ) ;
43595: LD_ADDR_VAR 0 14
43599: PUSH
43600: LD_VAR 0 14
43604: PPUSH
43605: LD_VAR 0 14
43609: PUSH
43610: LD_INT 1
43612: PLUS
43613: PPUSH
43614: LD_INT 2
43616: PPUSH
43617: CALL_OW 1
43621: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43622: LD_VAR 0 9
43626: PPUSH
43627: LD_VAR 0 13
43631: PPUSH
43632: CALL_OW 325
43636: IFFALSE 43660
43638: PUSH
43639: LD_VAR 0 10
43643: PPUSH
43644: CALL_OW 255
43648: PPUSH
43649: LD_VAR 0 13
43653: PPUSH
43654: CALL_OW 325
43658: NOT
43659: AND
43660: IFFALSE 43689
// missile := Replace ( missile , missile + 1 , 3 ) ;
43662: LD_ADDR_VAR 0 14
43666: PUSH
43667: LD_VAR 0 14
43671: PPUSH
43672: LD_VAR 0 14
43676: PUSH
43677: LD_INT 1
43679: PLUS
43680: PPUSH
43681: LD_INT 3
43683: PPUSH
43684: CALL_OW 1
43688: ST_TO_ADDR
// if missile < 2 then
43689: LD_VAR 0 14
43693: PUSH
43694: LD_INT 2
43696: LESS
43697: IFFALSE 43701
// exit ;
43699: GO 43923
// x := GetX ( enemy ) ;
43701: LD_ADDR_VAR 0 4
43705: PUSH
43706: LD_VAR 0 10
43710: PPUSH
43711: CALL_OW 250
43715: ST_TO_ADDR
// y := GetY ( enemy ) ;
43716: LD_ADDR_VAR 0 5
43720: PUSH
43721: LD_VAR 0 10
43725: PPUSH
43726: CALL_OW 251
43730: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43731: LD_ADDR_VAR 0 6
43735: PUSH
43736: LD_VAR 0 4
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PPUSH
43745: LD_INT 1
43747: PPUSH
43748: CALL_OW 12
43752: PLUS
43753: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43754: LD_ADDR_VAR 0 7
43758: PUSH
43759: LD_VAR 0 5
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PPUSH
43768: LD_INT 1
43770: PPUSH
43771: CALL_OW 12
43775: PLUS
43776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43777: LD_VAR 0 6
43781: PPUSH
43782: LD_VAR 0 7
43786: PPUSH
43787: CALL_OW 488
43791: NOT
43792: IFFALSE 43814
// begin _x := x ;
43794: LD_ADDR_VAR 0 6
43798: PUSH
43799: LD_VAR 0 4
43803: ST_TO_ADDR
// _y := y ;
43804: LD_ADDR_VAR 0 7
43808: PUSH
43809: LD_VAR 0 5
43813: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43814: LD_ADDR_VAR 0 3
43818: PUSH
43819: LD_INT 1
43821: PPUSH
43822: LD_VAR 0 14
43826: PPUSH
43827: CALL_OW 12
43831: ST_TO_ADDR
// case i of 1 :
43832: LD_VAR 0 3
43836: PUSH
43837: LD_INT 1
43839: DOUBLE
43840: EQUAL
43841: IFTRUE 43845
43843: GO 43862
43845: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43846: LD_VAR 0 1
43850: PPUSH
43851: LD_VAR 0 10
43855: PPUSH
43856: CALL_OW 115
43860: GO 43923
43862: LD_INT 2
43864: DOUBLE
43865: EQUAL
43866: IFTRUE 43870
43868: GO 43892
43870: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43871: LD_VAR 0 1
43875: PPUSH
43876: LD_VAR 0 6
43880: PPUSH
43881: LD_VAR 0 7
43885: PPUSH
43886: CALL_OW 153
43890: GO 43923
43892: LD_INT 3
43894: DOUBLE
43895: EQUAL
43896: IFTRUE 43900
43898: GO 43922
43900: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43901: LD_VAR 0 1
43905: PPUSH
43906: LD_VAR 0 6
43910: PPUSH
43911: LD_VAR 0 7
43915: PPUSH
43916: CALL_OW 154
43920: GO 43923
43922: POP
// end ;
43923: LD_VAR 0 2
43927: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43928: LD_INT 0
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
// if not unit or not building then
43936: LD_VAR 0 1
43940: NOT
43941: IFTRUE 43950
43943: PUSH
43944: LD_VAR 0 2
43948: NOT
43949: OR
43950: IFFALSE 43954
// exit ;
43952: GO 44112
// x := GetX ( building ) ;
43954: LD_ADDR_VAR 0 5
43958: PUSH
43959: LD_VAR 0 2
43963: PPUSH
43964: CALL_OW 250
43968: ST_TO_ADDR
// y := GetY ( building ) ;
43969: LD_ADDR_VAR 0 6
43973: PUSH
43974: LD_VAR 0 2
43978: PPUSH
43979: CALL_OW 251
43983: ST_TO_ADDR
// for i := 0 to 5 do
43984: LD_ADDR_VAR 0 4
43988: PUSH
43989: DOUBLE
43990: LD_INT 0
43992: DEC
43993: ST_TO_ADDR
43994: LD_INT 5
43996: PUSH
43997: FOR_TO
43998: IFFALSE 44110
// begin _x := ShiftX ( x , i , 3 ) ;
44000: LD_ADDR_VAR 0 7
44004: PUSH
44005: LD_VAR 0 5
44009: PPUSH
44010: LD_VAR 0 4
44014: PPUSH
44015: LD_INT 3
44017: PPUSH
44018: CALL_OW 272
44022: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44023: LD_ADDR_VAR 0 8
44027: PUSH
44028: LD_VAR 0 6
44032: PPUSH
44033: LD_VAR 0 4
44037: PPUSH
44038: LD_INT 3
44040: PPUSH
44041: CALL_OW 273
44045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44046: LD_VAR 0 7
44050: PPUSH
44051: LD_VAR 0 8
44055: PPUSH
44056: CALL_OW 488
44060: NOT
44061: IFFALSE 44065
// continue ;
44063: GO 43997
// if HexInfo ( _x , _y ) = 0 then
44065: LD_VAR 0 7
44069: PPUSH
44070: LD_VAR 0 8
44074: PPUSH
44075: CALL_OW 428
44079: PUSH
44080: LD_INT 0
44082: EQUAL
44083: IFFALSE 44108
// begin ComMoveXY ( unit , _x , _y ) ;
44085: LD_VAR 0 1
44089: PPUSH
44090: LD_VAR 0 7
44094: PPUSH
44095: LD_VAR 0 8
44099: PPUSH
44100: CALL_OW 111
// exit ;
44104: POP
44105: POP
44106: GO 44112
// end ; end ;
44108: GO 43997
44110: POP
44111: POP
// end ;
44112: LD_VAR 0 3
44116: RET
// export function ScanBase ( side , base_area ) ; begin
44117: LD_INT 0
44119: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44120: LD_ADDR_VAR 0 3
44124: PUSH
44125: LD_VAR 0 2
44129: PPUSH
44130: LD_INT 81
44132: PUSH
44133: LD_VAR 0 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PPUSH
44142: CALL_OW 70
44146: ST_TO_ADDR
// end ;
44147: LD_VAR 0 3
44151: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44152: LD_INT 0
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
// result := false ;
44158: LD_ADDR_VAR 0 2
44162: PUSH
44163: LD_INT 0
44165: ST_TO_ADDR
// side := GetSide ( unit ) ;
44166: LD_ADDR_VAR 0 3
44170: PUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 255
44180: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44181: LD_ADDR_VAR 0 4
44185: PUSH
44186: LD_VAR 0 1
44190: PPUSH
44191: CALL_OW 248
44195: ST_TO_ADDR
// case nat of 1 :
44196: LD_VAR 0 4
44200: PUSH
44201: LD_INT 1
44203: DOUBLE
44204: EQUAL
44205: IFTRUE 44209
44207: GO 44220
44209: POP
// tech := tech_lassight ; 2 :
44210: LD_ADDR_VAR 0 5
44214: PUSH
44215: LD_INT 12
44217: ST_TO_ADDR
44218: GO 44259
44220: LD_INT 2
44222: DOUBLE
44223: EQUAL
44224: IFTRUE 44228
44226: GO 44239
44228: POP
// tech := tech_mortar ; 3 :
44229: LD_ADDR_VAR 0 5
44233: PUSH
44234: LD_INT 41
44236: ST_TO_ADDR
44237: GO 44259
44239: LD_INT 3
44241: DOUBLE
44242: EQUAL
44243: IFTRUE 44247
44245: GO 44258
44247: POP
// tech := tech_bazooka ; end ;
44248: LD_ADDR_VAR 0 5
44252: PUSH
44253: LD_INT 44
44255: ST_TO_ADDR
44256: GO 44259
44258: POP
// if Researched ( side , tech ) then
44259: LD_VAR 0 3
44263: PPUSH
44264: LD_VAR 0 5
44268: PPUSH
44269: CALL_OW 325
44273: IFFALSE 44300
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44275: LD_ADDR_VAR 0 2
44279: PUSH
44280: LD_INT 5
44282: PUSH
44283: LD_INT 8
44285: PUSH
44286: LD_INT 9
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: LIST
44293: PUSH
44294: LD_VAR 0 4
44298: ARRAY
44299: ST_TO_ADDR
// end ;
44300: LD_VAR 0 2
44304: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44305: LD_INT 0
44307: PPUSH
44308: PPUSH
44309: PPUSH
// if not mines then
44310: LD_VAR 0 2
44314: NOT
44315: IFFALSE 44319
// exit ;
44317: GO 44463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44319: LD_ADDR_VAR 0 5
44323: PUSH
44324: LD_INT 81
44326: PUSH
44327: LD_VAR 0 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: LD_INT 21
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PPUSH
44357: CALL_OW 69
44361: ST_TO_ADDR
// for i in mines do
44362: LD_ADDR_VAR 0 4
44366: PUSH
44367: LD_VAR 0 2
44371: PUSH
44372: FOR_IN
44373: IFFALSE 44461
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44375: LD_VAR 0 4
44379: PUSH
44380: LD_INT 1
44382: ARRAY
44383: PPUSH
44384: LD_VAR 0 4
44388: PUSH
44389: LD_INT 2
44391: ARRAY
44392: PPUSH
44393: CALL_OW 458
44397: NOT
44398: IFFALSE 44402
// continue ;
44400: GO 44372
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44402: LD_VAR 0 4
44406: PUSH
44407: LD_INT 1
44409: ARRAY
44410: PPUSH
44411: LD_VAR 0 4
44415: PUSH
44416: LD_INT 2
44418: ARRAY
44419: PPUSH
44420: CALL_OW 428
44424: PUSH
44425: LD_VAR 0 5
44429: IN
44430: IFFALSE 44459
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44432: LD_VAR 0 4
44436: PUSH
44437: LD_INT 1
44439: ARRAY
44440: PPUSH
44441: LD_VAR 0 4
44445: PUSH
44446: LD_INT 2
44448: ARRAY
44449: PPUSH
44450: LD_VAR 0 1
44454: PPUSH
44455: CALL_OW 456
// end ;
44459: GO 44372
44461: POP
44462: POP
// end ;
44463: LD_VAR 0 3
44467: RET
// export function Count ( array ) ; begin
44468: LD_INT 0
44470: PPUSH
// result := array + 0 ;
44471: LD_ADDR_VAR 0 2
44475: PUSH
44476: LD_VAR 0 1
44480: PUSH
44481: LD_INT 0
44483: PLUS
44484: ST_TO_ADDR
// end ;
44485: LD_VAR 0 2
44489: RET
// export function IsEmpty ( building ) ; begin
44490: LD_INT 0
44492: PPUSH
// if not building then
44493: LD_VAR 0 1
44497: NOT
44498: IFFALSE 44502
// exit ;
44500: GO 44545
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44502: LD_ADDR_VAR 0 2
44506: PUSH
44507: LD_VAR 0 1
44511: PUSH
44512: LD_INT 22
44514: PUSH
44515: LD_VAR 0 1
44519: PPUSH
44520: CALL_OW 255
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 58
44531: PUSH
44532: EMPTY
44533: LIST
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PPUSH
44539: CALL_OW 69
44543: IN
44544: ST_TO_ADDR
// end ;
44545: LD_VAR 0 2
44549: RET
// export function IsNotFull ( building ) ; var places ; begin
44550: LD_INT 0
44552: PPUSH
44553: PPUSH
// if not building then
44554: LD_VAR 0 1
44558: NOT
44559: IFFALSE 44563
// exit ;
44561: GO 44591
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44563: LD_ADDR_VAR 0 2
44567: PUSH
44568: LD_VAR 0 1
44572: PPUSH
44573: LD_INT 3
44575: PUSH
44576: LD_INT 62
44578: PUSH
44579: EMPTY
44580: LIST
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PPUSH
44586: CALL_OW 72
44590: ST_TO_ADDR
// end ;
44591: LD_VAR 0 2
44595: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44596: LD_INT 0
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
// tmp := [ ] ;
44602: LD_ADDR_VAR 0 3
44606: PUSH
44607: EMPTY
44608: ST_TO_ADDR
// list := [ ] ;
44609: LD_ADDR_VAR 0 5
44613: PUSH
44614: EMPTY
44615: ST_TO_ADDR
// for i = 16 to 25 do
44616: LD_ADDR_VAR 0 4
44620: PUSH
44621: DOUBLE
44622: LD_INT 16
44624: DEC
44625: ST_TO_ADDR
44626: LD_INT 25
44628: PUSH
44629: FOR_TO
44630: IFFALSE 44703
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44632: LD_ADDR_VAR 0 3
44636: PUSH
44637: LD_VAR 0 3
44641: PUSH
44642: LD_INT 22
44644: PUSH
44645: LD_VAR 0 1
44649: PPUSH
44650: CALL_OW 255
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 91
44661: PUSH
44662: LD_VAR 0 1
44666: PUSH
44667: LD_INT 6
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 30
44677: PUSH
44678: LD_VAR 0 4
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: PPUSH
44695: CALL_OW 69
44699: ADD
44700: ST_TO_ADDR
44701: GO 44629
44703: POP
44704: POP
// for i = 1 to tmp do
44705: LD_ADDR_VAR 0 4
44709: PUSH
44710: DOUBLE
44711: LD_INT 1
44713: DEC
44714: ST_TO_ADDR
44715: LD_VAR 0 3
44719: PUSH
44720: FOR_TO
44721: IFFALSE 44809
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44723: LD_ADDR_VAR 0 5
44727: PUSH
44728: LD_VAR 0 5
44732: PUSH
44733: LD_VAR 0 3
44737: PUSH
44738: LD_VAR 0 4
44742: ARRAY
44743: PPUSH
44744: CALL_OW 266
44748: PUSH
44749: LD_VAR 0 3
44753: PUSH
44754: LD_VAR 0 4
44758: ARRAY
44759: PPUSH
44760: CALL_OW 250
44764: PUSH
44765: LD_VAR 0 3
44769: PUSH
44770: LD_VAR 0 4
44774: ARRAY
44775: PPUSH
44776: CALL_OW 251
44780: PUSH
44781: LD_VAR 0 3
44785: PUSH
44786: LD_VAR 0 4
44790: ARRAY
44791: PPUSH
44792: CALL_OW 254
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: PUSH
44803: EMPTY
44804: LIST
44805: ADD
44806: ST_TO_ADDR
44807: GO 44720
44809: POP
44810: POP
// result := list ;
44811: LD_ADDR_VAR 0 2
44815: PUSH
44816: LD_VAR 0 5
44820: ST_TO_ADDR
// end ;
44821: LD_VAR 0 2
44825: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44826: LD_INT 0
44828: PPUSH
44829: PPUSH
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
// if not factory then
44835: LD_VAR 0 1
44839: NOT
44840: IFFALSE 44844
// exit ;
44842: GO 45447
// if control = control_apeman then
44844: LD_VAR 0 4
44848: PUSH
44849: LD_INT 5
44851: EQUAL
44852: IFFALSE 44961
// begin tmp := UnitsInside ( factory ) ;
44854: LD_ADDR_VAR 0 8
44858: PUSH
44859: LD_VAR 0 1
44863: PPUSH
44864: CALL_OW 313
44868: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44869: LD_VAR 0 8
44873: PPUSH
44874: LD_INT 25
44876: PUSH
44877: LD_INT 12
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PPUSH
44884: CALL_OW 72
44888: NOT
44889: IFFALSE 44899
// control := control_manual ;
44891: LD_ADDR_VAR 0 4
44895: PUSH
44896: LD_INT 1
44898: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44899: LD_ADDR_VAR 0 8
44903: PUSH
44904: LD_VAR 0 1
44908: PPUSH
44909: CALL 44596 0 1
44913: ST_TO_ADDR
// if tmp then
44914: LD_VAR 0 8
44918: IFFALSE 44961
// begin for i in tmp do
44920: LD_ADDR_VAR 0 7
44924: PUSH
44925: LD_VAR 0 8
44929: PUSH
44930: FOR_IN
44931: IFFALSE 44959
// if i [ 1 ] = b_ext_radio then
44933: LD_VAR 0 7
44937: PUSH
44938: LD_INT 1
44940: ARRAY
44941: PUSH
44942: LD_INT 22
44944: EQUAL
44945: IFFALSE 44957
// begin control := control_remote ;
44947: LD_ADDR_VAR 0 4
44951: PUSH
44952: LD_INT 2
44954: ST_TO_ADDR
// break ;
44955: GO 44959
// end ;
44957: GO 44930
44959: POP
44960: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44961: LD_VAR 0 1
44965: PPUSH
44966: LD_VAR 0 2
44970: PPUSH
44971: LD_VAR 0 3
44975: PPUSH
44976: LD_VAR 0 4
44980: PPUSH
44981: LD_VAR 0 5
44985: PPUSH
44986: CALL_OW 448
44990: IFFALSE 45025
// begin result := [ chassis , engine , control , weapon ] ;
44992: LD_ADDR_VAR 0 6
44996: PUSH
44997: LD_VAR 0 2
45001: PUSH
45002: LD_VAR 0 3
45006: PUSH
45007: LD_VAR 0 4
45011: PUSH
45012: LD_VAR 0 5
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: ST_TO_ADDR
// exit ;
45023: GO 45447
// end ; _chassis := AvailableChassisList ( factory ) ;
45025: LD_ADDR_VAR 0 9
45029: PUSH
45030: LD_VAR 0 1
45034: PPUSH
45035: CALL_OW 475
45039: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45040: LD_ADDR_VAR 0 11
45044: PUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 476
45054: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45055: LD_ADDR_VAR 0 12
45059: PUSH
45060: LD_VAR 0 1
45064: PPUSH
45065: CALL_OW 477
45069: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45070: LD_ADDR_VAR 0 10
45074: PUSH
45075: LD_VAR 0 1
45079: PPUSH
45080: CALL_OW 478
45084: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45085: LD_VAR 0 9
45089: NOT
45090: IFTRUE 45099
45092: PUSH
45093: LD_VAR 0 11
45097: NOT
45098: OR
45099: IFTRUE 45108
45101: PUSH
45102: LD_VAR 0 12
45106: NOT
45107: OR
45108: IFTRUE 45117
45110: PUSH
45111: LD_VAR 0 10
45115: NOT
45116: OR
45117: IFFALSE 45152
// begin result := [ chassis , engine , control , weapon ] ;
45119: LD_ADDR_VAR 0 6
45123: PUSH
45124: LD_VAR 0 2
45128: PUSH
45129: LD_VAR 0 3
45133: PUSH
45134: LD_VAR 0 4
45138: PUSH
45139: LD_VAR 0 5
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// exit ;
45150: GO 45447
// end ; if not chassis in _chassis then
45152: LD_VAR 0 2
45156: PUSH
45157: LD_VAR 0 9
45161: IN
45162: NOT
45163: IFFALSE 45189
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45165: LD_ADDR_VAR 0 2
45169: PUSH
45170: LD_VAR 0 9
45174: PUSH
45175: LD_INT 1
45177: PPUSH
45178: LD_VAR 0 9
45182: PPUSH
45183: CALL_OW 12
45187: ARRAY
45188: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45189: LD_VAR 0 2
45193: PPUSH
45194: LD_VAR 0 3
45198: PPUSH
45199: CALL 45452 0 2
45203: NOT
45204: IFFALSE 45265
// repeat engine := _engine [ 1 ] ;
45206: LD_ADDR_VAR 0 3
45210: PUSH
45211: LD_VAR 0 11
45215: PUSH
45216: LD_INT 1
45218: ARRAY
45219: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45220: LD_ADDR_VAR 0 11
45224: PUSH
45225: LD_VAR 0 11
45229: PPUSH
45230: LD_INT 1
45232: PPUSH
45233: CALL_OW 3
45237: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45238: LD_VAR 0 2
45242: PPUSH
45243: LD_VAR 0 3
45247: PPUSH
45248: CALL 45452 0 2
45252: IFTRUE 45263
45254: PUSH
45255: LD_VAR 0 11
45259: PUSH
45260: EMPTY
45261: EQUAL
45262: OR
45263: IFFALSE 45206
// if not control in _control then
45265: LD_VAR 0 4
45269: PUSH
45270: LD_VAR 0 12
45274: IN
45275: NOT
45276: IFFALSE 45302
// control := _control [ rand ( 1 , _control ) ] ;
45278: LD_ADDR_VAR 0 4
45282: PUSH
45283: LD_VAR 0 12
45287: PUSH
45288: LD_INT 1
45290: PPUSH
45291: LD_VAR 0 12
45295: PPUSH
45296: CALL_OW 12
45300: ARRAY
45301: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45302: LD_VAR 0 2
45306: PPUSH
45307: LD_VAR 0 5
45311: PPUSH
45312: CALL 45674 0 2
45316: NOT
45317: IFFALSE 45378
// repeat weapon := _weapon [ 1 ] ;
45319: LD_ADDR_VAR 0 5
45323: PUSH
45324: LD_VAR 0 10
45328: PUSH
45329: LD_INT 1
45331: ARRAY
45332: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45333: LD_ADDR_VAR 0 10
45337: PUSH
45338: LD_VAR 0 10
45342: PPUSH
45343: LD_INT 1
45345: PPUSH
45346: CALL_OW 3
45350: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45351: LD_VAR 0 2
45355: PPUSH
45356: LD_VAR 0 5
45360: PPUSH
45361: CALL 45674 0 2
45365: IFTRUE 45376
45367: PUSH
45368: LD_VAR 0 10
45372: PUSH
45373: EMPTY
45374: EQUAL
45375: OR
45376: IFFALSE 45319
// result := [ ] ;
45378: LD_ADDR_VAR 0 6
45382: PUSH
45383: EMPTY
45384: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45385: LD_VAR 0 1
45389: PPUSH
45390: LD_VAR 0 2
45394: PPUSH
45395: LD_VAR 0 3
45399: PPUSH
45400: LD_VAR 0 4
45404: PPUSH
45405: LD_VAR 0 5
45409: PPUSH
45410: CALL_OW 448
45414: IFFALSE 45447
// result := [ chassis , engine , control , weapon ] ;
45416: LD_ADDR_VAR 0 6
45420: PUSH
45421: LD_VAR 0 2
45425: PUSH
45426: LD_VAR 0 3
45430: PUSH
45431: LD_VAR 0 4
45435: PUSH
45436: LD_VAR 0 5
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// end ;
45447: LD_VAR 0 6
45451: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45452: LD_INT 0
45454: PPUSH
// if not chassis or not engine then
45455: LD_VAR 0 1
45459: NOT
45460: IFTRUE 45469
45462: PUSH
45463: LD_VAR 0 2
45467: NOT
45468: OR
45469: IFFALSE 45473
// exit ;
45471: GO 45669
// case engine of engine_solar :
45473: LD_VAR 0 2
45477: PUSH
45478: LD_INT 2
45480: DOUBLE
45481: EQUAL
45482: IFTRUE 45486
45484: GO 45524
45486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45487: LD_ADDR_VAR 0 3
45491: PUSH
45492: LD_INT 11
45494: PUSH
45495: LD_INT 12
45497: PUSH
45498: LD_INT 13
45500: PUSH
45501: LD_INT 14
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
45522: GO 45653
45524: LD_INT 1
45526: DOUBLE
45527: EQUAL
45528: IFTRUE 45532
45530: GO 45594
45532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45533: LD_ADDR_VAR 0 3
45537: PUSH
45538: LD_INT 11
45540: PUSH
45541: LD_INT 12
45543: PUSH
45544: LD_INT 13
45546: PUSH
45547: LD_INT 14
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: LD_INT 4
45561: PUSH
45562: LD_INT 5
45564: PUSH
45565: LD_INT 21
45567: PUSH
45568: LD_INT 23
45570: PUSH
45571: LD_INT 22
45573: PUSH
45574: LD_INT 24
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: ST_TO_ADDR
45592: GO 45653
45594: LD_INT 3
45596: DOUBLE
45597: EQUAL
45598: IFTRUE 45602
45600: GO 45652
45602: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45603: LD_ADDR_VAR 0 3
45607: PUSH
45608: LD_INT 13
45610: PUSH
45611: LD_INT 14
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: LD_INT 4
45622: PUSH
45623: LD_INT 5
45625: PUSH
45626: LD_INT 21
45628: PUSH
45629: LD_INT 22
45631: PUSH
45632: LD_INT 23
45634: PUSH
45635: LD_INT 24
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: ST_TO_ADDR
45650: GO 45653
45652: POP
// result := ( chassis in result ) ;
45653: LD_ADDR_VAR 0 3
45657: PUSH
45658: LD_VAR 0 1
45662: PUSH
45663: LD_VAR 0 3
45667: IN
45668: ST_TO_ADDR
// end ;
45669: LD_VAR 0 3
45673: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45674: LD_INT 0
45676: PPUSH
// if not chassis or not weapon then
45677: LD_VAR 0 1
45681: NOT
45682: IFTRUE 45691
45684: PUSH
45685: LD_VAR 0 2
45689: NOT
45690: OR
45691: IFFALSE 45695
// exit ;
45693: GO 46755
// case weapon of us_machine_gun :
45695: LD_VAR 0 2
45699: PUSH
45700: LD_INT 2
45702: DOUBLE
45703: EQUAL
45704: IFTRUE 45708
45706: GO 45738
45708: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45709: LD_ADDR_VAR 0 3
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: LD_INT 4
45725: PUSH
45726: LD_INT 5
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
45736: GO 46739
45738: LD_INT 3
45740: DOUBLE
45741: EQUAL
45742: IFTRUE 45746
45744: GO 45776
45746: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45747: LD_ADDR_VAR 0 3
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 4
45763: PUSH
45764: LD_INT 5
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: ST_TO_ADDR
45774: GO 46739
45776: LD_INT 11
45778: DOUBLE
45779: EQUAL
45780: IFTRUE 45784
45782: GO 45814
45784: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45785: LD_ADDR_VAR 0 3
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: LD_INT 4
45801: PUSH
45802: LD_INT 5
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: ST_TO_ADDR
45812: GO 46739
45814: LD_INT 4
45816: DOUBLE
45817: EQUAL
45818: IFTRUE 45822
45820: GO 45848
45822: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45823: LD_ADDR_VAR 0 3
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 3
45833: PUSH
45834: LD_INT 4
45836: PUSH
45837: LD_INT 5
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: ST_TO_ADDR
45846: GO 46739
45848: LD_INT 5
45850: DOUBLE
45851: EQUAL
45852: IFTRUE 45856
45854: GO 45882
45856: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45857: LD_ADDR_VAR 0 3
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 3
45867: PUSH
45868: LD_INT 4
45870: PUSH
45871: LD_INT 5
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: ST_TO_ADDR
45880: GO 46739
45882: LD_INT 9
45884: DOUBLE
45885: EQUAL
45886: IFTRUE 45890
45888: GO 45916
45890: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45891: LD_ADDR_VAR 0 3
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: LD_INT 4
45904: PUSH
45905: LD_INT 5
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: ST_TO_ADDR
45914: GO 46739
45916: LD_INT 7
45918: DOUBLE
45919: EQUAL
45920: IFTRUE 45924
45922: GO 45950
45924: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45925: LD_ADDR_VAR 0 3
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 4
45938: PUSH
45939: LD_INT 5
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: ST_TO_ADDR
45948: GO 46739
45950: LD_INT 12
45952: DOUBLE
45953: EQUAL
45954: IFTRUE 45958
45956: GO 45984
45958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45959: LD_ADDR_VAR 0 3
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 3
45969: PUSH
45970: LD_INT 4
45972: PUSH
45973: LD_INT 5
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: ST_TO_ADDR
45982: GO 46739
45984: LD_INT 13
45986: DOUBLE
45987: EQUAL
45988: IFTRUE 45992
45990: GO 46018
45992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45993: LD_ADDR_VAR 0 3
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 4
46006: PUSH
46007: LD_INT 5
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
46016: GO 46739
46018: LD_INT 14
46020: DOUBLE
46021: EQUAL
46022: IFTRUE 46026
46024: GO 46044
46026: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46027: LD_ADDR_VAR 0 3
46031: PUSH
46032: LD_INT 4
46034: PUSH
46035: LD_INT 5
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: ST_TO_ADDR
46042: GO 46739
46044: LD_INT 6
46046: DOUBLE
46047: EQUAL
46048: IFTRUE 46052
46050: GO 46070
46052: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46053: LD_ADDR_VAR 0 3
46057: PUSH
46058: LD_INT 4
46060: PUSH
46061: LD_INT 5
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: ST_TO_ADDR
46068: GO 46739
46070: LD_INT 10
46072: DOUBLE
46073: EQUAL
46074: IFTRUE 46078
46076: GO 46096
46078: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46079: LD_ADDR_VAR 0 3
46083: PUSH
46084: LD_INT 4
46086: PUSH
46087: LD_INT 5
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: ST_TO_ADDR
46094: GO 46739
46096: LD_INT 22
46098: DOUBLE
46099: EQUAL
46100: IFTRUE 46104
46102: GO 46130
46104: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46105: LD_ADDR_VAR 0 3
46109: PUSH
46110: LD_INT 11
46112: PUSH
46113: LD_INT 12
46115: PUSH
46116: LD_INT 13
46118: PUSH
46119: LD_INT 14
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: ST_TO_ADDR
46128: GO 46739
46130: LD_INT 23
46132: DOUBLE
46133: EQUAL
46134: IFTRUE 46138
46136: GO 46164
46138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46139: LD_ADDR_VAR 0 3
46143: PUSH
46144: LD_INT 11
46146: PUSH
46147: LD_INT 12
46149: PUSH
46150: LD_INT 13
46152: PUSH
46153: LD_INT 14
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: ST_TO_ADDR
46162: GO 46739
46164: LD_INT 24
46166: DOUBLE
46167: EQUAL
46168: IFTRUE 46172
46170: GO 46198
46172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46173: LD_ADDR_VAR 0 3
46177: PUSH
46178: LD_INT 11
46180: PUSH
46181: LD_INT 12
46183: PUSH
46184: LD_INT 13
46186: PUSH
46187: LD_INT 14
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: ST_TO_ADDR
46196: GO 46739
46198: LD_INT 30
46200: DOUBLE
46201: EQUAL
46202: IFTRUE 46206
46204: GO 46232
46206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46207: LD_ADDR_VAR 0 3
46211: PUSH
46212: LD_INT 11
46214: PUSH
46215: LD_INT 12
46217: PUSH
46218: LD_INT 13
46220: PUSH
46221: LD_INT 14
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
46230: GO 46739
46232: LD_INT 25
46234: DOUBLE
46235: EQUAL
46236: IFTRUE 46240
46238: GO 46258
46240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46241: LD_ADDR_VAR 0 3
46245: PUSH
46246: LD_INT 13
46248: PUSH
46249: LD_INT 14
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: ST_TO_ADDR
46256: GO 46739
46258: LD_INT 27
46260: DOUBLE
46261: EQUAL
46262: IFTRUE 46266
46264: GO 46284
46266: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46267: LD_ADDR_VAR 0 3
46271: PUSH
46272: LD_INT 13
46274: PUSH
46275: LD_INT 14
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: ST_TO_ADDR
46282: GO 46739
46284: LD_INT 92
46286: DOUBLE
46287: EQUAL
46288: IFTRUE 46292
46290: GO 46318
46292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46293: LD_ADDR_VAR 0 3
46297: PUSH
46298: LD_INT 11
46300: PUSH
46301: LD_INT 12
46303: PUSH
46304: LD_INT 13
46306: PUSH
46307: LD_INT 14
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: ST_TO_ADDR
46316: GO 46739
46318: LD_INT 28
46320: DOUBLE
46321: EQUAL
46322: IFTRUE 46326
46324: GO 46344
46326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46327: LD_ADDR_VAR 0 3
46331: PUSH
46332: LD_INT 13
46334: PUSH
46335: LD_INT 14
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: ST_TO_ADDR
46342: GO 46739
46344: LD_INT 29
46346: DOUBLE
46347: EQUAL
46348: IFTRUE 46352
46350: GO 46370
46352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46353: LD_ADDR_VAR 0 3
46357: PUSH
46358: LD_INT 13
46360: PUSH
46361: LD_INT 14
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: ST_TO_ADDR
46368: GO 46739
46370: LD_INT 31
46372: DOUBLE
46373: EQUAL
46374: IFTRUE 46378
46376: GO 46396
46378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46379: LD_ADDR_VAR 0 3
46383: PUSH
46384: LD_INT 13
46386: PUSH
46387: LD_INT 14
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: ST_TO_ADDR
46394: GO 46739
46396: LD_INT 26
46398: DOUBLE
46399: EQUAL
46400: IFTRUE 46404
46402: GO 46422
46404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46405: LD_ADDR_VAR 0 3
46409: PUSH
46410: LD_INT 13
46412: PUSH
46413: LD_INT 14
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: ST_TO_ADDR
46420: GO 46739
46422: LD_INT 42
46424: DOUBLE
46425: EQUAL
46426: IFTRUE 46430
46428: GO 46456
46430: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46431: LD_ADDR_VAR 0 3
46435: PUSH
46436: LD_INT 21
46438: PUSH
46439: LD_INT 22
46441: PUSH
46442: LD_INT 23
46444: PUSH
46445: LD_INT 24
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
46454: GO 46739
46456: LD_INT 43
46458: DOUBLE
46459: EQUAL
46460: IFTRUE 46464
46462: GO 46490
46464: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46465: LD_ADDR_VAR 0 3
46469: PUSH
46470: LD_INT 21
46472: PUSH
46473: LD_INT 22
46475: PUSH
46476: LD_INT 23
46478: PUSH
46479: LD_INT 24
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: ST_TO_ADDR
46488: GO 46739
46490: LD_INT 44
46492: DOUBLE
46493: EQUAL
46494: IFTRUE 46498
46496: GO 46524
46498: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46499: LD_ADDR_VAR 0 3
46503: PUSH
46504: LD_INT 21
46506: PUSH
46507: LD_INT 22
46509: PUSH
46510: LD_INT 23
46512: PUSH
46513: LD_INT 24
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: ST_TO_ADDR
46522: GO 46739
46524: LD_INT 45
46526: DOUBLE
46527: EQUAL
46528: IFTRUE 46532
46530: GO 46558
46532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46533: LD_ADDR_VAR 0 3
46537: PUSH
46538: LD_INT 21
46540: PUSH
46541: LD_INT 22
46543: PUSH
46544: LD_INT 23
46546: PUSH
46547: LD_INT 24
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
46556: GO 46739
46558: LD_INT 49
46560: DOUBLE
46561: EQUAL
46562: IFTRUE 46566
46564: GO 46592
46566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46567: LD_ADDR_VAR 0 3
46571: PUSH
46572: LD_INT 21
46574: PUSH
46575: LD_INT 22
46577: PUSH
46578: LD_INT 23
46580: PUSH
46581: LD_INT 24
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: ST_TO_ADDR
46590: GO 46739
46592: LD_INT 51
46594: DOUBLE
46595: EQUAL
46596: IFTRUE 46600
46598: GO 46626
46600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46601: LD_ADDR_VAR 0 3
46605: PUSH
46606: LD_INT 21
46608: PUSH
46609: LD_INT 22
46611: PUSH
46612: LD_INT 23
46614: PUSH
46615: LD_INT 24
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: ST_TO_ADDR
46624: GO 46739
46626: LD_INT 52
46628: DOUBLE
46629: EQUAL
46630: IFTRUE 46634
46632: GO 46660
46634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46635: LD_ADDR_VAR 0 3
46639: PUSH
46640: LD_INT 21
46642: PUSH
46643: LD_INT 22
46645: PUSH
46646: LD_INT 23
46648: PUSH
46649: LD_INT 24
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
46658: GO 46739
46660: LD_INT 53
46662: DOUBLE
46663: EQUAL
46664: IFTRUE 46668
46666: GO 46686
46668: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46669: LD_ADDR_VAR 0 3
46673: PUSH
46674: LD_INT 23
46676: PUSH
46677: LD_INT 24
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: ST_TO_ADDR
46684: GO 46739
46686: LD_INT 46
46688: DOUBLE
46689: EQUAL
46690: IFTRUE 46694
46692: GO 46712
46694: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46695: LD_ADDR_VAR 0 3
46699: PUSH
46700: LD_INT 23
46702: PUSH
46703: LD_INT 24
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: ST_TO_ADDR
46710: GO 46739
46712: LD_INT 47
46714: DOUBLE
46715: EQUAL
46716: IFTRUE 46720
46718: GO 46738
46720: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46721: LD_ADDR_VAR 0 3
46725: PUSH
46726: LD_INT 23
46728: PUSH
46729: LD_INT 24
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: ST_TO_ADDR
46736: GO 46739
46738: POP
// result := ( chassis in result ) ;
46739: LD_ADDR_VAR 0 3
46743: PUSH
46744: LD_VAR 0 1
46748: PUSH
46749: LD_VAR 0 3
46753: IN
46754: ST_TO_ADDR
// end ;
46755: LD_VAR 0 3
46759: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46760: LD_INT 0
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
// result := array ;
46769: LD_ADDR_VAR 0 5
46773: PUSH
46774: LD_VAR 0 1
46778: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46779: LD_VAR 0 1
46783: NOT
46784: IFTRUE 46793
46786: PUSH
46787: LD_VAR 0 2
46791: NOT
46792: OR
46793: IFTRUE 46802
46795: PUSH
46796: LD_VAR 0 3
46800: NOT
46801: OR
46802: IFTRUE 46816
46804: PUSH
46805: LD_VAR 0 2
46809: PUSH
46810: LD_VAR 0 1
46814: GREATER
46815: OR
46816: IFTRUE 46830
46818: PUSH
46819: LD_VAR 0 3
46823: PUSH
46824: LD_VAR 0 1
46828: GREATER
46829: OR
46830: IFFALSE 46834
// exit ;
46832: GO 47130
// if direction then
46834: LD_VAR 0 4
46838: IFFALSE 46902
// begin d := 1 ;
46840: LD_ADDR_VAR 0 9
46844: PUSH
46845: LD_INT 1
46847: ST_TO_ADDR
// if i_from > i_to then
46848: LD_VAR 0 2
46852: PUSH
46853: LD_VAR 0 3
46857: GREATER
46858: IFFALSE 46884
// length := ( array - i_from ) + i_to else
46860: LD_ADDR_VAR 0 11
46864: PUSH
46865: LD_VAR 0 1
46869: PUSH
46870: LD_VAR 0 2
46874: MINUS
46875: PUSH
46876: LD_VAR 0 3
46880: PLUS
46881: ST_TO_ADDR
46882: GO 46900
// length := i_to - i_from ;
46884: LD_ADDR_VAR 0 11
46888: PUSH
46889: LD_VAR 0 3
46893: PUSH
46894: LD_VAR 0 2
46898: MINUS
46899: ST_TO_ADDR
// end else
46900: GO 46963
// begin d := - 1 ;
46902: LD_ADDR_VAR 0 9
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: ST_TO_ADDR
// if i_from > i_to then
46911: LD_VAR 0 2
46915: PUSH
46916: LD_VAR 0 3
46920: GREATER
46921: IFFALSE 46941
// length := i_from - i_to else
46923: LD_ADDR_VAR 0 11
46927: PUSH
46928: LD_VAR 0 2
46932: PUSH
46933: LD_VAR 0 3
46937: MINUS
46938: ST_TO_ADDR
46939: GO 46963
// length := ( array - i_to ) + i_from ;
46941: LD_ADDR_VAR 0 11
46945: PUSH
46946: LD_VAR 0 1
46950: PUSH
46951: LD_VAR 0 3
46955: MINUS
46956: PUSH
46957: LD_VAR 0 2
46961: PLUS
46962: ST_TO_ADDR
// end ; if not length then
46963: LD_VAR 0 11
46967: NOT
46968: IFFALSE 46972
// exit ;
46970: GO 47130
// tmp := array ;
46972: LD_ADDR_VAR 0 10
46976: PUSH
46977: LD_VAR 0 1
46981: ST_TO_ADDR
// for i = 1 to length do
46982: LD_ADDR_VAR 0 6
46986: PUSH
46987: DOUBLE
46988: LD_INT 1
46990: DEC
46991: ST_TO_ADDR
46992: LD_VAR 0 11
46996: PUSH
46997: FOR_TO
46998: IFFALSE 47118
// begin for j = 1 to array do
47000: LD_ADDR_VAR 0 7
47004: PUSH
47005: DOUBLE
47006: LD_INT 1
47008: DEC
47009: ST_TO_ADDR
47010: LD_VAR 0 1
47014: PUSH
47015: FOR_TO
47016: IFFALSE 47104
// begin k := j + d ;
47018: LD_ADDR_VAR 0 8
47022: PUSH
47023: LD_VAR 0 7
47027: PUSH
47028: LD_VAR 0 9
47032: PLUS
47033: ST_TO_ADDR
// if k > array then
47034: LD_VAR 0 8
47038: PUSH
47039: LD_VAR 0 1
47043: GREATER
47044: IFFALSE 47054
// k := 1 ;
47046: LD_ADDR_VAR 0 8
47050: PUSH
47051: LD_INT 1
47053: ST_TO_ADDR
// if not k then
47054: LD_VAR 0 8
47058: NOT
47059: IFFALSE 47071
// k := array ;
47061: LD_ADDR_VAR 0 8
47065: PUSH
47066: LD_VAR 0 1
47070: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47071: LD_ADDR_VAR 0 10
47075: PUSH
47076: LD_VAR 0 10
47080: PPUSH
47081: LD_VAR 0 8
47085: PPUSH
47086: LD_VAR 0 1
47090: PUSH
47091: LD_VAR 0 7
47095: ARRAY
47096: PPUSH
47097: CALL_OW 1
47101: ST_TO_ADDR
// end ;
47102: GO 47015
47104: POP
47105: POP
// array := tmp ;
47106: LD_ADDR_VAR 0 1
47110: PUSH
47111: LD_VAR 0 10
47115: ST_TO_ADDR
// end ;
47116: GO 46997
47118: POP
47119: POP
// result := array ;
47120: LD_ADDR_VAR 0 5
47124: PUSH
47125: LD_VAR 0 1
47129: ST_TO_ADDR
// end ;
47130: LD_VAR 0 5
47134: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47135: LD_INT 0
47137: PPUSH
47138: PPUSH
// result := 0 ;
47139: LD_ADDR_VAR 0 3
47143: PUSH
47144: LD_INT 0
47146: ST_TO_ADDR
// if not array or not value in array then
47147: LD_VAR 0 1
47151: NOT
47152: IFTRUE 47167
47154: PUSH
47155: LD_VAR 0 2
47159: PUSH
47160: LD_VAR 0 1
47164: IN
47165: NOT
47166: OR
47167: IFFALSE 47171
// exit ;
47169: GO 47225
// for i = 1 to array do
47171: LD_ADDR_VAR 0 4
47175: PUSH
47176: DOUBLE
47177: LD_INT 1
47179: DEC
47180: ST_TO_ADDR
47181: LD_VAR 0 1
47185: PUSH
47186: FOR_TO
47187: IFFALSE 47223
// if value = array [ i ] then
47189: LD_VAR 0 2
47193: PUSH
47194: LD_VAR 0 1
47198: PUSH
47199: LD_VAR 0 4
47203: ARRAY
47204: EQUAL
47205: IFFALSE 47221
// begin result := i ;
47207: LD_ADDR_VAR 0 3
47211: PUSH
47212: LD_VAR 0 4
47216: ST_TO_ADDR
// exit ;
47217: POP
47218: POP
47219: GO 47225
// end ;
47221: GO 47186
47223: POP
47224: POP
// end ;
47225: LD_VAR 0 3
47229: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47230: LD_INT 0
47232: PPUSH
// vc_chassis := chassis ;
47233: LD_ADDR_OWVAR 37
47237: PUSH
47238: LD_VAR 0 1
47242: ST_TO_ADDR
// vc_engine := engine ;
47243: LD_ADDR_OWVAR 39
47247: PUSH
47248: LD_VAR 0 2
47252: ST_TO_ADDR
// vc_control := control ;
47253: LD_ADDR_OWVAR 38
47257: PUSH
47258: LD_VAR 0 3
47262: ST_TO_ADDR
// vc_weapon := weapon ;
47263: LD_ADDR_OWVAR 40
47267: PUSH
47268: LD_VAR 0 4
47272: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47273: LD_ADDR_OWVAR 41
47277: PUSH
47278: LD_VAR 0 5
47282: ST_TO_ADDR
// end ;
47283: LD_VAR 0 6
47287: RET
// export function WantPlant ( unit ) ; var task ; begin
47288: LD_INT 0
47290: PPUSH
47291: PPUSH
// result := false ;
47292: LD_ADDR_VAR 0 2
47296: PUSH
47297: LD_INT 0
47299: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47300: LD_ADDR_VAR 0 3
47304: PUSH
47305: LD_VAR 0 1
47309: PPUSH
47310: CALL_OW 437
47314: ST_TO_ADDR
// if task then
47315: LD_VAR 0 3
47319: IFFALSE 47347
// if task [ 1 ] [ 1 ] = p then
47321: LD_VAR 0 3
47325: PUSH
47326: LD_INT 1
47328: ARRAY
47329: PUSH
47330: LD_INT 1
47332: ARRAY
47333: PUSH
47334: LD_STRING p
47336: EQUAL
47337: IFFALSE 47347
// result := true ;
47339: LD_ADDR_VAR 0 2
47343: PUSH
47344: LD_INT 1
47346: ST_TO_ADDR
// end ;
47347: LD_VAR 0 2
47351: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47352: LD_INT 0
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
// if pos < 1 then
47358: LD_VAR 0 2
47362: PUSH
47363: LD_INT 1
47365: LESS
47366: IFFALSE 47370
// exit ;
47368: GO 47673
// if pos = 1 then
47370: LD_VAR 0 2
47374: PUSH
47375: LD_INT 1
47377: EQUAL
47378: IFFALSE 47411
// result := Replace ( arr , pos [ 1 ] , value ) else
47380: LD_ADDR_VAR 0 4
47384: PUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: LD_VAR 0 2
47394: PUSH
47395: LD_INT 1
47397: ARRAY
47398: PPUSH
47399: LD_VAR 0 3
47403: PPUSH
47404: CALL_OW 1
47408: ST_TO_ADDR
47409: GO 47673
// begin tmp := arr ;
47411: LD_ADDR_VAR 0 6
47415: PUSH
47416: LD_VAR 0 1
47420: ST_TO_ADDR
// s_arr := [ tmp ] ;
47421: LD_ADDR_VAR 0 7
47425: PUSH
47426: LD_VAR 0 6
47430: PUSH
47431: EMPTY
47432: LIST
47433: ST_TO_ADDR
// for i = 1 to pos - 1 do
47434: LD_ADDR_VAR 0 5
47438: PUSH
47439: DOUBLE
47440: LD_INT 1
47442: DEC
47443: ST_TO_ADDR
47444: LD_VAR 0 2
47448: PUSH
47449: LD_INT 1
47451: MINUS
47452: PUSH
47453: FOR_TO
47454: IFFALSE 47499
// begin tmp := tmp [ pos [ i ] ] ;
47456: LD_ADDR_VAR 0 6
47460: PUSH
47461: LD_VAR 0 6
47465: PUSH
47466: LD_VAR 0 2
47470: PUSH
47471: LD_VAR 0 5
47475: ARRAY
47476: ARRAY
47477: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47478: LD_ADDR_VAR 0 7
47482: PUSH
47483: LD_VAR 0 7
47487: PUSH
47488: LD_VAR 0 6
47492: PUSH
47493: EMPTY
47494: LIST
47495: ADD
47496: ST_TO_ADDR
// end ;
47497: GO 47453
47499: POP
47500: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47501: LD_ADDR_VAR 0 6
47505: PUSH
47506: LD_VAR 0 6
47510: PPUSH
47511: LD_VAR 0 2
47515: PUSH
47516: LD_VAR 0 2
47520: ARRAY
47521: PPUSH
47522: LD_VAR 0 3
47526: PPUSH
47527: CALL_OW 1
47531: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47532: LD_ADDR_VAR 0 7
47536: PUSH
47537: LD_VAR 0 7
47541: PPUSH
47542: LD_VAR 0 7
47546: PPUSH
47547: LD_VAR 0 6
47551: PPUSH
47552: CALL_OW 1
47556: ST_TO_ADDR
// for i = s_arr downto 2 do
47557: LD_ADDR_VAR 0 5
47561: PUSH
47562: DOUBLE
47563: LD_VAR 0 7
47567: INC
47568: ST_TO_ADDR
47569: LD_INT 2
47571: PUSH
47572: FOR_DOWNTO
47573: IFFALSE 47657
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47575: LD_ADDR_VAR 0 6
47579: PUSH
47580: LD_VAR 0 7
47584: PUSH
47585: LD_VAR 0 5
47589: PUSH
47590: LD_INT 1
47592: MINUS
47593: ARRAY
47594: PPUSH
47595: LD_VAR 0 2
47599: PUSH
47600: LD_VAR 0 5
47604: PUSH
47605: LD_INT 1
47607: MINUS
47608: ARRAY
47609: PPUSH
47610: LD_VAR 0 7
47614: PUSH
47615: LD_VAR 0 5
47619: ARRAY
47620: PPUSH
47621: CALL_OW 1
47625: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47626: LD_ADDR_VAR 0 7
47630: PUSH
47631: LD_VAR 0 7
47635: PPUSH
47636: LD_VAR 0 5
47640: PUSH
47641: LD_INT 1
47643: MINUS
47644: PPUSH
47645: LD_VAR 0 6
47649: PPUSH
47650: CALL_OW 1
47654: ST_TO_ADDR
// end ;
47655: GO 47572
47657: POP
47658: POP
// result := s_arr [ 1 ] ;
47659: LD_ADDR_VAR 0 4
47663: PUSH
47664: LD_VAR 0 7
47668: PUSH
47669: LD_INT 1
47671: ARRAY
47672: ST_TO_ADDR
// end ; end ;
47673: LD_VAR 0 4
47677: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47678: LD_INT 0
47680: PPUSH
47681: PPUSH
// if not list then
47682: LD_VAR 0 1
47686: NOT
47687: IFFALSE 47691
// exit ;
47689: GO 47782
// i := list [ pos1 ] ;
47691: LD_ADDR_VAR 0 5
47695: PUSH
47696: LD_VAR 0 1
47700: PUSH
47701: LD_VAR 0 2
47705: ARRAY
47706: ST_TO_ADDR
// if not i then
47707: LD_VAR 0 5
47711: NOT
47712: IFFALSE 47716
// exit ;
47714: GO 47782
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47716: LD_ADDR_VAR 0 1
47720: PUSH
47721: LD_VAR 0 1
47725: PPUSH
47726: LD_VAR 0 2
47730: PPUSH
47731: LD_VAR 0 1
47735: PUSH
47736: LD_VAR 0 3
47740: ARRAY
47741: PPUSH
47742: CALL_OW 1
47746: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47747: LD_ADDR_VAR 0 1
47751: PUSH
47752: LD_VAR 0 1
47756: PPUSH
47757: LD_VAR 0 3
47761: PPUSH
47762: LD_VAR 0 5
47766: PPUSH
47767: CALL_OW 1
47771: ST_TO_ADDR
// result := list ;
47772: LD_ADDR_VAR 0 4
47776: PUSH
47777: LD_VAR 0 1
47781: ST_TO_ADDR
// end ;
47782: LD_VAR 0 4
47786: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47787: LD_INT 0
47789: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47790: LD_ADDR_VAR 0 5
47794: PUSH
47795: LD_VAR 0 1
47799: PPUSH
47800: CALL_OW 250
47804: PPUSH
47805: LD_VAR 0 1
47809: PPUSH
47810: CALL_OW 251
47814: PPUSH
47815: LD_VAR 0 2
47819: PPUSH
47820: LD_VAR 0 3
47824: PPUSH
47825: LD_VAR 0 4
47829: PPUSH
47830: CALL 48212 0 5
47834: ST_TO_ADDR
// end ;
47835: LD_VAR 0 5
47839: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47840: LD_INT 0
47842: PPUSH
47843: PPUSH
47844: PPUSH
47845: PPUSH
// if not list or not unit then
47846: LD_VAR 0 2
47850: NOT
47851: IFTRUE 47860
47853: PUSH
47854: LD_VAR 0 1
47858: NOT
47859: OR
47860: IFFALSE 47864
// exit ;
47862: GO 48207
// result := [ ] ;
47864: LD_ADDR_VAR 0 5
47868: PUSH
47869: EMPTY
47870: ST_TO_ADDR
// for i in list do
47871: LD_ADDR_VAR 0 6
47875: PUSH
47876: LD_VAR 0 2
47880: PUSH
47881: FOR_IN
47882: IFFALSE 48100
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47884: LD_ADDR_VAR 0 8
47888: PUSH
47889: LD_VAR 0 1
47893: PPUSH
47894: LD_VAR 0 6
47898: PUSH
47899: LD_INT 1
47901: ARRAY
47902: PPUSH
47903: LD_VAR 0 6
47907: PUSH
47908: LD_INT 2
47910: ARRAY
47911: PPUSH
47912: CALL_OW 297
47916: ST_TO_ADDR
// if not Count ( result ) then
47917: LD_VAR 0 5
47921: PPUSH
47922: CALL 44468 0 1
47926: NOT
47927: IFFALSE 47960
// begin result := Join ( result , [ i , tmp ] ) ;
47929: LD_ADDR_VAR 0 5
47933: PUSH
47934: LD_VAR 0 5
47938: PPUSH
47939: LD_VAR 0 6
47943: PUSH
47944: LD_VAR 0 8
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PPUSH
47953: CALL 80400 0 2
47957: ST_TO_ADDR
// continue ;
47958: GO 47881
// end ; if result [ result ] [ 2 ] <= tmp then
47960: LD_VAR 0 5
47964: PUSH
47965: LD_VAR 0 5
47969: ARRAY
47970: PUSH
47971: LD_INT 2
47973: ARRAY
47974: PUSH
47975: LD_VAR 0 8
47979: LESSEQUAL
47980: IFFALSE 48013
// result := Join ( result , [ i , tmp ] ) else
47982: LD_ADDR_VAR 0 5
47986: PUSH
47987: LD_VAR 0 5
47991: PPUSH
47992: LD_VAR 0 6
47996: PUSH
47997: LD_VAR 0 8
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PPUSH
48006: CALL 80400 0 2
48010: ST_TO_ADDR
48011: GO 48098
// begin for j := 1 to Count ( result ) do
48013: LD_ADDR_VAR 0 7
48017: PUSH
48018: DOUBLE
48019: LD_INT 1
48021: DEC
48022: ST_TO_ADDR
48023: LD_VAR 0 5
48027: PPUSH
48028: CALL 44468 0 1
48032: PUSH
48033: FOR_TO
48034: IFFALSE 48096
// begin if tmp < result [ j ] [ 2 ] then
48036: LD_VAR 0 8
48040: PUSH
48041: LD_VAR 0 5
48045: PUSH
48046: LD_VAR 0 7
48050: ARRAY
48051: PUSH
48052: LD_INT 2
48054: ARRAY
48055: LESS
48056: IFFALSE 48094
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48058: LD_ADDR_VAR 0 5
48062: PUSH
48063: LD_VAR 0 5
48067: PPUSH
48068: LD_VAR 0 7
48072: PPUSH
48073: LD_VAR 0 6
48077: PUSH
48078: LD_VAR 0 8
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PPUSH
48087: CALL_OW 2
48091: ST_TO_ADDR
// break ;
48092: GO 48096
// end ; end ;
48094: GO 48033
48096: POP
48097: POP
// end ; end ;
48098: GO 47881
48100: POP
48101: POP
// if result and not asc then
48102: LD_VAR 0 5
48106: IFFALSE 48115
48108: PUSH
48109: LD_VAR 0 3
48113: NOT
48114: AND
48115: IFFALSE 48132
// result := ReverseArray ( result ) ;
48117: LD_ADDR_VAR 0 5
48121: PUSH
48122: LD_VAR 0 5
48126: PPUSH
48127: CALL 75490 0 1
48131: ST_TO_ADDR
// tmp := [ ] ;
48132: LD_ADDR_VAR 0 8
48136: PUSH
48137: EMPTY
48138: ST_TO_ADDR
// if mode then
48139: LD_VAR 0 4
48143: IFFALSE 48207
// begin for i := 1 to result do
48145: LD_ADDR_VAR 0 6
48149: PUSH
48150: DOUBLE
48151: LD_INT 1
48153: DEC
48154: ST_TO_ADDR
48155: LD_VAR 0 5
48159: PUSH
48160: FOR_TO
48161: IFFALSE 48195
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48163: LD_ADDR_VAR 0 8
48167: PUSH
48168: LD_VAR 0 8
48172: PPUSH
48173: LD_VAR 0 5
48177: PUSH
48178: LD_VAR 0 6
48182: ARRAY
48183: PUSH
48184: LD_INT 1
48186: ARRAY
48187: PPUSH
48188: CALL 80400 0 2
48192: ST_TO_ADDR
48193: GO 48160
48195: POP
48196: POP
// result := tmp ;
48197: LD_ADDR_VAR 0 5
48201: PUSH
48202: LD_VAR 0 8
48206: ST_TO_ADDR
// end ; end ;
48207: LD_VAR 0 5
48211: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48212: LD_INT 0
48214: PPUSH
48215: PPUSH
48216: PPUSH
48217: PPUSH
// if not list then
48218: LD_VAR 0 3
48222: NOT
48223: IFFALSE 48227
// exit ;
48225: GO 48617
// result := [ ] ;
48227: LD_ADDR_VAR 0 6
48231: PUSH
48232: EMPTY
48233: ST_TO_ADDR
// for i in list do
48234: LD_ADDR_VAR 0 7
48238: PUSH
48239: LD_VAR 0 3
48243: PUSH
48244: FOR_IN
48245: IFFALSE 48447
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48247: LD_ADDR_VAR 0 9
48251: PUSH
48252: LD_VAR 0 7
48256: PPUSH
48257: LD_VAR 0 1
48261: PPUSH
48262: LD_VAR 0 2
48266: PPUSH
48267: CALL_OW 297
48271: ST_TO_ADDR
// if not result then
48272: LD_VAR 0 6
48276: NOT
48277: IFFALSE 48303
// result := [ [ i , tmp ] ] else
48279: LD_ADDR_VAR 0 6
48283: PUSH
48284: LD_VAR 0 7
48288: PUSH
48289: LD_VAR 0 9
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: EMPTY
48299: LIST
48300: ST_TO_ADDR
48301: GO 48445
// begin if result [ result ] [ 2 ] <= tmp then
48303: LD_VAR 0 6
48307: PUSH
48308: LD_VAR 0 6
48312: ARRAY
48313: PUSH
48314: LD_INT 2
48316: ARRAY
48317: PUSH
48318: LD_VAR 0 9
48322: LESSEQUAL
48323: IFFALSE 48365
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48325: LD_ADDR_VAR 0 6
48329: PUSH
48330: LD_VAR 0 6
48334: PPUSH
48335: LD_VAR 0 6
48339: PUSH
48340: LD_INT 1
48342: PLUS
48343: PPUSH
48344: LD_VAR 0 7
48348: PUSH
48349: LD_VAR 0 9
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PPUSH
48358: CALL_OW 2
48362: ST_TO_ADDR
48363: GO 48445
// for j := 1 to result do
48365: LD_ADDR_VAR 0 8
48369: PUSH
48370: DOUBLE
48371: LD_INT 1
48373: DEC
48374: ST_TO_ADDR
48375: LD_VAR 0 6
48379: PUSH
48380: FOR_TO
48381: IFFALSE 48443
// begin if tmp < result [ j ] [ 2 ] then
48383: LD_VAR 0 9
48387: PUSH
48388: LD_VAR 0 6
48392: PUSH
48393: LD_VAR 0 8
48397: ARRAY
48398: PUSH
48399: LD_INT 2
48401: ARRAY
48402: LESS
48403: IFFALSE 48441
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48405: LD_ADDR_VAR 0 6
48409: PUSH
48410: LD_VAR 0 6
48414: PPUSH
48415: LD_VAR 0 8
48419: PPUSH
48420: LD_VAR 0 7
48424: PUSH
48425: LD_VAR 0 9
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PPUSH
48434: CALL_OW 2
48438: ST_TO_ADDR
// break ;
48439: GO 48443
// end ; end ;
48441: GO 48380
48443: POP
48444: POP
// end ; end ;
48445: GO 48244
48447: POP
48448: POP
// if result and not asc then
48449: LD_VAR 0 6
48453: IFFALSE 48462
48455: PUSH
48456: LD_VAR 0 4
48460: NOT
48461: AND
48462: IFFALSE 48537
// begin tmp := result ;
48464: LD_ADDR_VAR 0 9
48468: PUSH
48469: LD_VAR 0 6
48473: ST_TO_ADDR
// for i = tmp downto 1 do
48474: LD_ADDR_VAR 0 7
48478: PUSH
48479: DOUBLE
48480: LD_VAR 0 9
48484: INC
48485: ST_TO_ADDR
48486: LD_INT 1
48488: PUSH
48489: FOR_DOWNTO
48490: IFFALSE 48535
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48492: LD_ADDR_VAR 0 6
48496: PUSH
48497: LD_VAR 0 6
48501: PPUSH
48502: LD_VAR 0 9
48506: PUSH
48507: LD_VAR 0 7
48511: MINUS
48512: PUSH
48513: LD_INT 1
48515: PLUS
48516: PPUSH
48517: LD_VAR 0 9
48521: PUSH
48522: LD_VAR 0 7
48526: ARRAY
48527: PPUSH
48528: CALL_OW 1
48532: ST_TO_ADDR
48533: GO 48489
48535: POP
48536: POP
// end ; tmp := [ ] ;
48537: LD_ADDR_VAR 0 9
48541: PUSH
48542: EMPTY
48543: ST_TO_ADDR
// if mode then
48544: LD_VAR 0 5
48548: IFFALSE 48617
// begin for i = 1 to result do
48550: LD_ADDR_VAR 0 7
48554: PUSH
48555: DOUBLE
48556: LD_INT 1
48558: DEC
48559: ST_TO_ADDR
48560: LD_VAR 0 6
48564: PUSH
48565: FOR_TO
48566: IFFALSE 48605
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48568: LD_ADDR_VAR 0 9
48572: PUSH
48573: LD_VAR 0 9
48577: PPUSH
48578: LD_VAR 0 7
48582: PPUSH
48583: LD_VAR 0 6
48587: PUSH
48588: LD_VAR 0 7
48592: ARRAY
48593: PUSH
48594: LD_INT 1
48596: ARRAY
48597: PPUSH
48598: CALL_OW 1
48602: ST_TO_ADDR
48603: GO 48565
48605: POP
48606: POP
// result := tmp ;
48607: LD_ADDR_VAR 0 6
48611: PUSH
48612: LD_VAR 0 9
48616: ST_TO_ADDR
// end ; end ;
48617: LD_VAR 0 6
48621: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48622: LD_INT 0
48624: PPUSH
48625: PPUSH
48626: PPUSH
48627: PPUSH
48628: PPUSH
48629: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48630: LD_ADDR_VAR 0 5
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: ST_TO_ADDR
// if not x or not y then
48652: LD_VAR 0 2
48656: NOT
48657: IFTRUE 48666
48659: PUSH
48660: LD_VAR 0 3
48664: NOT
48665: OR
48666: IFFALSE 48670
// exit ;
48668: GO 50326
// if not range then
48670: LD_VAR 0 4
48674: NOT
48675: IFFALSE 48685
// range := 10 ;
48677: LD_ADDR_VAR 0 4
48681: PUSH
48682: LD_INT 10
48684: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48685: LD_ADDR_VAR 0 8
48689: PUSH
48690: LD_INT 81
48692: PUSH
48693: LD_VAR 0 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 92
48704: PUSH
48705: LD_VAR 0 2
48709: PUSH
48710: LD_VAR 0 3
48714: PUSH
48715: LD_VAR 0 4
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: LD_INT 21
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: PPUSH
48748: CALL_OW 69
48752: ST_TO_ADDR
// if not tmp then
48753: LD_VAR 0 8
48757: NOT
48758: IFFALSE 48762
// exit ;
48760: GO 50326
// for i in tmp do
48762: LD_ADDR_VAR 0 6
48766: PUSH
48767: LD_VAR 0 8
48771: PUSH
48772: FOR_IN
48773: IFFALSE 50301
// begin points := [ 0 , 0 , 0 ] ;
48775: LD_ADDR_VAR 0 9
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: LIST
48793: ST_TO_ADDR
// bpoints := 1 ;
48794: LD_ADDR_VAR 0 10
48798: PUSH
48799: LD_INT 1
48801: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48802: LD_VAR 0 6
48806: PPUSH
48807: CALL_OW 247
48811: PUSH
48812: LD_INT 1
48814: DOUBLE
48815: EQUAL
48816: IFTRUE 48820
48818: GO 49402
48820: POP
// begin if GetClass ( i ) = 1 then
48821: LD_VAR 0 6
48825: PPUSH
48826: CALL_OW 257
48830: PUSH
48831: LD_INT 1
48833: EQUAL
48834: IFFALSE 48855
// points := [ 10 , 5 , 3 ] ;
48836: LD_ADDR_VAR 0 9
48840: PUSH
48841: LD_INT 10
48843: PUSH
48844: LD_INT 5
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48855: LD_VAR 0 6
48859: PPUSH
48860: CALL_OW 257
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: LD_INT 4
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: IN
48879: IFFALSE 48900
// points := [ 3 , 2 , 1 ] ;
48881: LD_ADDR_VAR 0 9
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48900: LD_VAR 0 6
48904: PPUSH
48905: CALL_OW 257
48909: PUSH
48910: LD_INT 5
48912: EQUAL
48913: IFFALSE 48934
// points := [ 130 , 5 , 2 ] ;
48915: LD_ADDR_VAR 0 9
48919: PUSH
48920: LD_INT 130
48922: PUSH
48923: LD_INT 5
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48934: LD_VAR 0 6
48938: PPUSH
48939: CALL_OW 257
48943: PUSH
48944: LD_INT 8
48946: EQUAL
48947: IFFALSE 48968
// points := [ 35 , 35 , 30 ] ;
48949: LD_ADDR_VAR 0 9
48953: PUSH
48954: LD_INT 35
48956: PUSH
48957: LD_INT 35
48959: PUSH
48960: LD_INT 30
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48968: LD_VAR 0 6
48972: PPUSH
48973: CALL_OW 257
48977: PUSH
48978: LD_INT 9
48980: EQUAL
48981: IFFALSE 49002
// points := [ 20 , 55 , 40 ] ;
48983: LD_ADDR_VAR 0 9
48987: PUSH
48988: LD_INT 20
48990: PUSH
48991: LD_INT 55
48993: PUSH
48994: LD_INT 40
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49002: LD_VAR 0 6
49006: PPUSH
49007: CALL_OW 257
49011: PUSH
49012: LD_INT 12
49014: PUSH
49015: LD_INT 16
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: IN
49022: IFFALSE 49043
// points := [ 5 , 3 , 2 ] ;
49024: LD_ADDR_VAR 0 9
49028: PUSH
49029: LD_INT 5
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49043: LD_VAR 0 6
49047: PPUSH
49048: CALL_OW 257
49052: PUSH
49053: LD_INT 17
49055: EQUAL
49056: IFFALSE 49077
// points := [ 100 , 50 , 75 ] ;
49058: LD_ADDR_VAR 0 9
49062: PUSH
49063: LD_INT 100
49065: PUSH
49066: LD_INT 50
49068: PUSH
49069: LD_INT 75
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49077: LD_VAR 0 6
49081: PPUSH
49082: CALL_OW 257
49086: PUSH
49087: LD_INT 15
49089: EQUAL
49090: IFFALSE 49111
// points := [ 10 , 5 , 3 ] ;
49092: LD_ADDR_VAR 0 9
49096: PUSH
49097: LD_INT 10
49099: PUSH
49100: LD_INT 5
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49111: LD_VAR 0 6
49115: PPUSH
49116: CALL_OW 257
49120: PUSH
49121: LD_INT 14
49123: EQUAL
49124: IFFALSE 49145
// points := [ 10 , 0 , 0 ] ;
49126: LD_ADDR_VAR 0 9
49130: PUSH
49131: LD_INT 10
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49145: LD_VAR 0 6
49149: PPUSH
49150: CALL_OW 257
49154: PUSH
49155: LD_INT 11
49157: EQUAL
49158: IFFALSE 49179
// points := [ 30 , 10 , 5 ] ;
49160: LD_ADDR_VAR 0 9
49164: PUSH
49165: LD_INT 30
49167: PUSH
49168: LD_INT 10
49170: PUSH
49171: LD_INT 5
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49179: LD_VAR 0 1
49183: PPUSH
49184: LD_INT 5
49186: PPUSH
49187: CALL_OW 321
49191: PUSH
49192: LD_INT 2
49194: EQUAL
49195: IFFALSE 49212
// bpoints := bpoints * 1.8 ;
49197: LD_ADDR_VAR 0 10
49201: PUSH
49202: LD_VAR 0 10
49206: PUSH
49207: LD_REAL  1.80000000000000E+0000
49210: MUL
49211: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49212: LD_VAR 0 6
49216: PPUSH
49217: CALL_OW 257
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: LD_INT 3
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: IN
49240: IFFALSE 49260
49242: PUSH
49243: LD_VAR 0 1
49247: PPUSH
49248: LD_INT 51
49250: PPUSH
49251: CALL_OW 321
49255: PUSH
49256: LD_INT 2
49258: EQUAL
49259: AND
49260: IFFALSE 49277
// bpoints := bpoints * 1.2 ;
49262: LD_ADDR_VAR 0 10
49266: PUSH
49267: LD_VAR 0 10
49271: PUSH
49272: LD_REAL  1.20000000000000E+0000
49275: MUL
49276: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49277: LD_VAR 0 6
49281: PPUSH
49282: CALL_OW 257
49286: PUSH
49287: LD_INT 5
49289: PUSH
49290: LD_INT 7
49292: PUSH
49293: LD_INT 9
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: IN
49301: IFFALSE 49321
49303: PUSH
49304: LD_VAR 0 1
49308: PPUSH
49309: LD_INT 52
49311: PPUSH
49312: CALL_OW 321
49316: PUSH
49317: LD_INT 2
49319: EQUAL
49320: AND
49321: IFFALSE 49338
// bpoints := bpoints * 1.5 ;
49323: LD_ADDR_VAR 0 10
49327: PUSH
49328: LD_VAR 0 10
49332: PUSH
49333: LD_REAL  1.50000000000000E+0000
49336: MUL
49337: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49338: LD_VAR 0 1
49342: PPUSH
49343: LD_INT 66
49345: PPUSH
49346: CALL_OW 321
49350: PUSH
49351: LD_INT 2
49353: EQUAL
49354: IFFALSE 49371
// bpoints := bpoints * 1.1 ;
49356: LD_ADDR_VAR 0 10
49360: PUSH
49361: LD_VAR 0 10
49365: PUSH
49366: LD_REAL  1.10000000000000E+0000
49369: MUL
49370: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49371: LD_ADDR_VAR 0 10
49375: PUSH
49376: LD_VAR 0 10
49380: PUSH
49381: LD_VAR 0 6
49385: PPUSH
49386: LD_INT 1
49388: PPUSH
49389: CALL_OW 259
49393: PUSH
49394: LD_REAL  1.15000000000000E+0000
49397: MUL
49398: MUL
49399: ST_TO_ADDR
// end ; unit_vehicle :
49400: GO 50230
49402: LD_INT 2
49404: DOUBLE
49405: EQUAL
49406: IFTRUE 49410
49408: GO 50218
49410: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49411: LD_VAR 0 6
49415: PPUSH
49416: CALL_OW 264
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: LD_INT 42
49426: PUSH
49427: LD_INT 24
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: IN
49435: IFFALSE 49456
// points := [ 25 , 5 , 3 ] ;
49437: LD_ADDR_VAR 0 9
49441: PUSH
49442: LD_INT 25
49444: PUSH
49445: LD_INT 5
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: LIST
49455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49456: LD_VAR 0 6
49460: PPUSH
49461: CALL_OW 264
49465: PUSH
49466: LD_INT 4
49468: PUSH
49469: LD_INT 43
49471: PUSH
49472: LD_INT 25
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: IN
49480: IFFALSE 49501
// points := [ 40 , 15 , 5 ] ;
49482: LD_ADDR_VAR 0 9
49486: PUSH
49487: LD_INT 40
49489: PUSH
49490: LD_INT 15
49492: PUSH
49493: LD_INT 5
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49501: LD_VAR 0 6
49505: PPUSH
49506: CALL_OW 264
49510: PUSH
49511: LD_INT 3
49513: PUSH
49514: LD_INT 23
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: IN
49521: IFFALSE 49542
// points := [ 7 , 25 , 8 ] ;
49523: LD_ADDR_VAR 0 9
49527: PUSH
49528: LD_INT 7
49530: PUSH
49531: LD_INT 25
49533: PUSH
49534: LD_INT 8
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49542: LD_VAR 0 6
49546: PPUSH
49547: CALL_OW 264
49551: PUSH
49552: LD_INT 5
49554: PUSH
49555: LD_INT 27
49557: PUSH
49558: LD_INT 44
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: IN
49566: IFFALSE 49587
// points := [ 14 , 50 , 16 ] ;
49568: LD_ADDR_VAR 0 9
49572: PUSH
49573: LD_INT 14
49575: PUSH
49576: LD_INT 50
49578: PUSH
49579: LD_INT 16
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49587: LD_VAR 0 6
49591: PPUSH
49592: CALL_OW 264
49596: PUSH
49597: LD_INT 6
49599: PUSH
49600: LD_INT 46
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: IN
49607: IFFALSE 49628
// points := [ 32 , 120 , 70 ] ;
49609: LD_ADDR_VAR 0 9
49613: PUSH
49614: LD_INT 32
49616: PUSH
49617: LD_INT 120
49619: PUSH
49620: LD_INT 70
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49628: LD_VAR 0 6
49632: PPUSH
49633: CALL_OW 264
49637: PUSH
49638: LD_INT 7
49640: PUSH
49641: LD_INT 28
49643: PUSH
49644: LD_INT 45
49646: PUSH
49647: LD_INT 92
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: IN
49656: IFFALSE 49677
// points := [ 35 , 20 , 45 ] ;
49658: LD_ADDR_VAR 0 9
49662: PUSH
49663: LD_INT 35
49665: PUSH
49666: LD_INT 20
49668: PUSH
49669: LD_INT 45
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49677: LD_VAR 0 6
49681: PPUSH
49682: CALL_OW 264
49686: PUSH
49687: LD_INT 47
49689: PUSH
49690: EMPTY
49691: LIST
49692: IN
49693: IFFALSE 49714
// points := [ 67 , 45 , 75 ] ;
49695: LD_ADDR_VAR 0 9
49699: PUSH
49700: LD_INT 67
49702: PUSH
49703: LD_INT 45
49705: PUSH
49706: LD_INT 75
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49714: LD_VAR 0 6
49718: PPUSH
49719: CALL_OW 264
49723: PUSH
49724: LD_INT 26
49726: PUSH
49727: EMPTY
49728: LIST
49729: IN
49730: IFFALSE 49751
// points := [ 120 , 30 , 80 ] ;
49732: LD_ADDR_VAR 0 9
49736: PUSH
49737: LD_INT 120
49739: PUSH
49740: LD_INT 30
49742: PUSH
49743: LD_INT 80
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49751: LD_VAR 0 6
49755: PPUSH
49756: CALL_OW 264
49760: PUSH
49761: LD_INT 22
49763: PUSH
49764: EMPTY
49765: LIST
49766: IN
49767: IFFALSE 49788
// points := [ 40 , 1 , 1 ] ;
49769: LD_ADDR_VAR 0 9
49773: PUSH
49774: LD_INT 40
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49788: LD_VAR 0 6
49792: PPUSH
49793: CALL_OW 264
49797: PUSH
49798: LD_INT 29
49800: PUSH
49801: EMPTY
49802: LIST
49803: IN
49804: IFFALSE 49825
// points := [ 70 , 200 , 400 ] ;
49806: LD_ADDR_VAR 0 9
49810: PUSH
49811: LD_INT 70
49813: PUSH
49814: LD_INT 200
49816: PUSH
49817: LD_INT 400
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49825: LD_VAR 0 6
49829: PPUSH
49830: CALL_OW 264
49834: PUSH
49835: LD_INT 14
49837: PUSH
49838: LD_INT 53
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: IN
49845: IFFALSE 49866
// points := [ 40 , 10 , 20 ] ;
49847: LD_ADDR_VAR 0 9
49851: PUSH
49852: LD_INT 40
49854: PUSH
49855: LD_INT 10
49857: PUSH
49858: LD_INT 20
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: LIST
49865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49866: LD_VAR 0 6
49870: PPUSH
49871: CALL_OW 264
49875: PUSH
49876: LD_INT 9
49878: PUSH
49879: EMPTY
49880: LIST
49881: IN
49882: IFFALSE 49903
// points := [ 5 , 70 , 20 ] ;
49884: LD_ADDR_VAR 0 9
49888: PUSH
49889: LD_INT 5
49891: PUSH
49892: LD_INT 70
49894: PUSH
49895: LD_INT 20
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: LIST
49902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49903: LD_VAR 0 6
49907: PPUSH
49908: CALL_OW 264
49912: PUSH
49913: LD_INT 10
49915: PUSH
49916: EMPTY
49917: LIST
49918: IN
49919: IFFALSE 49940
// points := [ 35 , 110 , 70 ] ;
49921: LD_ADDR_VAR 0 9
49925: PUSH
49926: LD_INT 35
49928: PUSH
49929: LD_INT 110
49931: PUSH
49932: LD_INT 70
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49940: LD_VAR 0 6
49944: PPUSH
49945: CALL_OW 265
49949: PUSH
49950: LD_INT 25
49952: EQUAL
49953: IFFALSE 49974
// points := [ 80 , 65 , 100 ] ;
49955: LD_ADDR_VAR 0 9
49959: PUSH
49960: LD_INT 80
49962: PUSH
49963: LD_INT 65
49965: PUSH
49966: LD_INT 100
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: LIST
49973: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49974: LD_VAR 0 6
49978: PPUSH
49979: CALL_OW 263
49983: PUSH
49984: LD_INT 1
49986: EQUAL
49987: IFFALSE 50022
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49989: LD_ADDR_VAR 0 10
49993: PUSH
49994: LD_VAR 0 10
49998: PUSH
49999: LD_VAR 0 6
50003: PPUSH
50004: CALL_OW 311
50008: PPUSH
50009: LD_INT 3
50011: PPUSH
50012: CALL_OW 259
50016: PUSH
50017: LD_INT 4
50019: MUL
50020: MUL
50021: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50022: LD_VAR 0 6
50026: PPUSH
50027: CALL_OW 263
50031: PUSH
50032: LD_INT 2
50034: EQUAL
50035: IFFALSE 50086
// begin j := IsControledBy ( i ) ;
50037: LD_ADDR_VAR 0 7
50041: PUSH
50042: LD_VAR 0 6
50046: PPUSH
50047: CALL_OW 312
50051: ST_TO_ADDR
// if j then
50052: LD_VAR 0 7
50056: IFFALSE 50086
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50058: LD_ADDR_VAR 0 10
50062: PUSH
50063: LD_VAR 0 10
50067: PUSH
50068: LD_VAR 0 7
50072: PPUSH
50073: LD_INT 3
50075: PPUSH
50076: CALL_OW 259
50080: PUSH
50081: LD_INT 3
50083: MUL
50084: MUL
50085: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50086: LD_VAR 0 6
50090: PPUSH
50091: CALL_OW 264
50095: PUSH
50096: LD_INT 5
50098: PUSH
50099: LD_INT 6
50101: PUSH
50102: LD_INT 46
50104: PUSH
50105: LD_INT 44
50107: PUSH
50108: LD_INT 47
50110: PUSH
50111: LD_INT 45
50113: PUSH
50114: LD_INT 28
50116: PUSH
50117: LD_INT 7
50119: PUSH
50120: LD_INT 27
50122: PUSH
50123: LD_INT 29
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: IN
50138: IFFALSE 50158
50140: PUSH
50141: LD_VAR 0 1
50145: PPUSH
50146: LD_INT 52
50148: PPUSH
50149: CALL_OW 321
50153: PUSH
50154: LD_INT 2
50156: EQUAL
50157: AND
50158: IFFALSE 50175
// bpoints := bpoints * 1.2 ;
50160: LD_ADDR_VAR 0 10
50164: PUSH
50165: LD_VAR 0 10
50169: PUSH
50170: LD_REAL  1.20000000000000E+0000
50173: MUL
50174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50175: LD_VAR 0 6
50179: PPUSH
50180: CALL_OW 264
50184: PUSH
50185: LD_INT 6
50187: PUSH
50188: LD_INT 46
50190: PUSH
50191: LD_INT 47
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: IN
50199: IFFALSE 50216
// bpoints := bpoints * 1.2 ;
50201: LD_ADDR_VAR 0 10
50205: PUSH
50206: LD_VAR 0 10
50210: PUSH
50211: LD_REAL  1.20000000000000E+0000
50214: MUL
50215: ST_TO_ADDR
// end ; unit_building :
50216: GO 50230
50218: LD_INT 3
50220: DOUBLE
50221: EQUAL
50222: IFTRUE 50226
50224: GO 50229
50226: POP
// ; end ;
50227: GO 50230
50229: POP
// for j = 1 to 3 do
50230: LD_ADDR_VAR 0 7
50234: PUSH
50235: DOUBLE
50236: LD_INT 1
50238: DEC
50239: ST_TO_ADDR
50240: LD_INT 3
50242: PUSH
50243: FOR_TO
50244: IFFALSE 50297
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50246: LD_ADDR_VAR 0 5
50250: PUSH
50251: LD_VAR 0 5
50255: PPUSH
50256: LD_VAR 0 7
50260: PPUSH
50261: LD_VAR 0 5
50265: PUSH
50266: LD_VAR 0 7
50270: ARRAY
50271: PUSH
50272: LD_VAR 0 9
50276: PUSH
50277: LD_VAR 0 7
50281: ARRAY
50282: PUSH
50283: LD_VAR 0 10
50287: MUL
50288: PLUS
50289: PPUSH
50290: CALL_OW 1
50294: ST_TO_ADDR
50295: GO 50243
50297: POP
50298: POP
// end ;
50299: GO 48772
50301: POP
50302: POP
// result := Replace ( result , 4 , tmp ) ;
50303: LD_ADDR_VAR 0 5
50307: PUSH
50308: LD_VAR 0 5
50312: PPUSH
50313: LD_INT 4
50315: PPUSH
50316: LD_VAR 0 8
50320: PPUSH
50321: CALL_OW 1
50325: ST_TO_ADDR
// end ;
50326: LD_VAR 0 5
50330: RET
// export function DangerAtRange ( unit , range ) ; begin
50331: LD_INT 0
50333: PPUSH
// if not unit then
50334: LD_VAR 0 1
50338: NOT
50339: IFFALSE 50343
// exit ;
50341: GO 50388
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50343: LD_ADDR_VAR 0 3
50347: PUSH
50348: LD_VAR 0 1
50352: PPUSH
50353: CALL_OW 255
50357: PPUSH
50358: LD_VAR 0 1
50362: PPUSH
50363: CALL_OW 250
50367: PPUSH
50368: LD_VAR 0 1
50372: PPUSH
50373: CALL_OW 251
50377: PPUSH
50378: LD_VAR 0 2
50382: PPUSH
50383: CALL 48622 0 4
50387: ST_TO_ADDR
// end ;
50388: LD_VAR 0 3
50392: RET
// export function DangerInArea ( side , area ) ; begin
50393: LD_INT 0
50395: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50396: LD_ADDR_VAR 0 3
50400: PUSH
50401: LD_VAR 0 2
50405: PPUSH
50406: LD_INT 81
50408: PUSH
50409: LD_VAR 0 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PPUSH
50418: CALL_OW 70
50422: ST_TO_ADDR
// end ;
50423: LD_VAR 0 3
50427: RET
// export function IsExtension ( b ) ; begin
50428: LD_INT 0
50430: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50431: LD_ADDR_VAR 0 2
50435: PUSH
50436: LD_VAR 0 1
50440: PUSH
50441: LD_INT 23
50443: PUSH
50444: LD_INT 20
50446: PUSH
50447: LD_INT 22
50449: PUSH
50450: LD_INT 17
50452: PUSH
50453: LD_INT 24
50455: PUSH
50456: LD_INT 21
50458: PUSH
50459: LD_INT 19
50461: PUSH
50462: LD_INT 16
50464: PUSH
50465: LD_INT 25
50467: PUSH
50468: LD_INT 18
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: IN
50483: ST_TO_ADDR
// end ;
50484: LD_VAR 0 2
50488: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50489: LD_INT 0
50491: PPUSH
50492: PPUSH
50493: PPUSH
// result := [ ] ;
50494: LD_ADDR_VAR 0 4
50498: PUSH
50499: EMPTY
50500: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50501: LD_ADDR_VAR 0 5
50505: PUSH
50506: LD_VAR 0 2
50510: PPUSH
50511: LD_INT 21
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PPUSH
50521: CALL_OW 70
50525: ST_TO_ADDR
// if not tmp then
50526: LD_VAR 0 5
50530: NOT
50531: IFFALSE 50535
// exit ;
50533: GO 50599
// if checkLink then
50535: LD_VAR 0 3
50539: IFFALSE 50589
// begin for i in tmp do
50541: LD_ADDR_VAR 0 6
50545: PUSH
50546: LD_VAR 0 5
50550: PUSH
50551: FOR_IN
50552: IFFALSE 50587
// if GetBase ( i ) <> base then
50554: LD_VAR 0 6
50558: PPUSH
50559: CALL_OW 274
50563: PUSH
50564: LD_VAR 0 1
50568: NONEQUAL
50569: IFFALSE 50585
// ComLinkToBase ( base , i ) ;
50571: LD_VAR 0 1
50575: PPUSH
50576: LD_VAR 0 6
50580: PPUSH
50581: CALL_OW 169
50585: GO 50551
50587: POP
50588: POP
// end ; result := tmp ;
50589: LD_ADDR_VAR 0 4
50593: PUSH
50594: LD_VAR 0 5
50598: ST_TO_ADDR
// end ;
50599: LD_VAR 0 4
50603: RET
// export function ComComplete ( units , b ) ; var i ; begin
50604: LD_INT 0
50606: PPUSH
50607: PPUSH
// if not units then
50608: LD_VAR 0 1
50612: NOT
50613: IFFALSE 50617
// exit ;
50615: GO 50707
// for i in units do
50617: LD_ADDR_VAR 0 4
50621: PUSH
50622: LD_VAR 0 1
50626: PUSH
50627: FOR_IN
50628: IFFALSE 50705
// if BuildingStatus ( b ) = bs_build then
50630: LD_VAR 0 2
50634: PPUSH
50635: CALL_OW 461
50639: PUSH
50640: LD_INT 1
50642: EQUAL
50643: IFFALSE 50703
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50645: LD_VAR 0 4
50649: PPUSH
50650: LD_STRING h
50652: PUSH
50653: LD_VAR 0 2
50657: PPUSH
50658: CALL_OW 250
50662: PUSH
50663: LD_VAR 0 2
50667: PPUSH
50668: CALL_OW 251
50672: PUSH
50673: LD_VAR 0 2
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: PPUSH
50699: CALL_OW 446
50703: GO 50627
50705: POP
50706: POP
// end ;
50707: LD_VAR 0 3
50711: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50712: LD_INT 0
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50720: LD_VAR 0 1
50724: NOT
50725: IFTRUE 50742
50727: PUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: CALL_OW 263
50737: PUSH
50738: LD_INT 2
50740: NONEQUAL
50741: OR
50742: IFFALSE 50746
// exit ;
50744: GO 51062
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50746: LD_ADDR_VAR 0 6
50750: PUSH
50751: LD_INT 22
50753: PUSH
50754: LD_VAR 0 1
50758: PPUSH
50759: CALL_OW 255
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 30
50773: PUSH
50774: LD_INT 36
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 34
50783: PUSH
50784: LD_INT 31
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PPUSH
50800: CALL_OW 69
50804: ST_TO_ADDR
// if not tmp then
50805: LD_VAR 0 6
50809: NOT
50810: IFFALSE 50814
// exit ;
50812: GO 51062
// result := [ ] ;
50814: LD_ADDR_VAR 0 2
50818: PUSH
50819: EMPTY
50820: ST_TO_ADDR
// for i in tmp do
50821: LD_ADDR_VAR 0 3
50825: PUSH
50826: LD_VAR 0 6
50830: PUSH
50831: FOR_IN
50832: IFFALSE 50903
// begin t := UnitsInside ( i ) ;
50834: LD_ADDR_VAR 0 4
50838: PUSH
50839: LD_VAR 0 3
50843: PPUSH
50844: CALL_OW 313
50848: ST_TO_ADDR
// if t then
50849: LD_VAR 0 4
50853: IFFALSE 50901
// for j in t do
50855: LD_ADDR_VAR 0 7
50859: PUSH
50860: LD_VAR 0 4
50864: PUSH
50865: FOR_IN
50866: IFFALSE 50899
// result := Replace ( result , result + 1 , j ) ;
50868: LD_ADDR_VAR 0 2
50872: PUSH
50873: LD_VAR 0 2
50877: PPUSH
50878: LD_VAR 0 2
50882: PUSH
50883: LD_INT 1
50885: PLUS
50886: PPUSH
50887: LD_VAR 0 7
50891: PPUSH
50892: CALL_OW 1
50896: ST_TO_ADDR
50897: GO 50865
50899: POP
50900: POP
// end ;
50901: GO 50831
50903: POP
50904: POP
// if not result then
50905: LD_VAR 0 2
50909: NOT
50910: IFFALSE 50914
// exit ;
50912: GO 51062
// mech := result [ 1 ] ;
50914: LD_ADDR_VAR 0 5
50918: PUSH
50919: LD_VAR 0 2
50923: PUSH
50924: LD_INT 1
50926: ARRAY
50927: ST_TO_ADDR
// if result > 1 then
50928: LD_VAR 0 2
50932: PUSH
50933: LD_INT 1
50935: GREATER
50936: IFFALSE 51048
// begin for i = 2 to result do
50938: LD_ADDR_VAR 0 3
50942: PUSH
50943: DOUBLE
50944: LD_INT 2
50946: DEC
50947: ST_TO_ADDR
50948: LD_VAR 0 2
50952: PUSH
50953: FOR_TO
50954: IFFALSE 51046
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50956: LD_ADDR_VAR 0 4
50960: PUSH
50961: LD_VAR 0 2
50965: PUSH
50966: LD_VAR 0 3
50970: ARRAY
50971: PPUSH
50972: LD_INT 3
50974: PPUSH
50975: CALL_OW 259
50979: PUSH
50980: LD_VAR 0 2
50984: PUSH
50985: LD_VAR 0 3
50989: ARRAY
50990: PPUSH
50991: CALL_OW 432
50995: MINUS
50996: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50997: LD_VAR 0 4
51001: PUSH
51002: LD_VAR 0 5
51006: PPUSH
51007: LD_INT 3
51009: PPUSH
51010: CALL_OW 259
51014: PUSH
51015: LD_VAR 0 5
51019: PPUSH
51020: CALL_OW 432
51024: MINUS
51025: GREATEREQUAL
51026: IFFALSE 51044
// mech := result [ i ] ;
51028: LD_ADDR_VAR 0 5
51032: PUSH
51033: LD_VAR 0 2
51037: PUSH
51038: LD_VAR 0 3
51042: ARRAY
51043: ST_TO_ADDR
// end ;
51044: GO 50953
51046: POP
51047: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51048: LD_VAR 0 1
51052: PPUSH
51053: LD_VAR 0 5
51057: PPUSH
51058: CALL_OW 135
// end ;
51062: LD_VAR 0 2
51066: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51067: LD_INT 0
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
// result := [ ] ;
51082: LD_ADDR_VAR 0 7
51086: PUSH
51087: EMPTY
51088: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51089: LD_VAR 0 1
51093: PPUSH
51094: CALL_OW 266
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: IN
51109: NOT
51110: IFFALSE 51114
// exit ;
51112: GO 52754
// if name then
51114: LD_VAR 0 3
51118: IFFALSE 51134
// SetBName ( base_dep , name ) ;
51120: LD_VAR 0 1
51124: PPUSH
51125: LD_VAR 0 3
51129: PPUSH
51130: CALL_OW 500
// base := GetBase ( base_dep ) ;
51134: LD_ADDR_VAR 0 15
51138: PUSH
51139: LD_VAR 0 1
51143: PPUSH
51144: CALL_OW 274
51148: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51149: LD_ADDR_VAR 0 16
51153: PUSH
51154: LD_VAR 0 1
51158: PPUSH
51159: CALL_OW 255
51163: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51164: LD_ADDR_VAR 0 17
51168: PUSH
51169: LD_VAR 0 1
51173: PPUSH
51174: CALL_OW 248
51178: ST_TO_ADDR
// if sources then
51179: LD_VAR 0 5
51183: IFFALSE 51230
// for i = 1 to 3 do
51185: LD_ADDR_VAR 0 8
51189: PUSH
51190: DOUBLE
51191: LD_INT 1
51193: DEC
51194: ST_TO_ADDR
51195: LD_INT 3
51197: PUSH
51198: FOR_TO
51199: IFFALSE 51228
// AddResourceType ( base , i , sources [ i ] ) ;
51201: LD_VAR 0 15
51205: PPUSH
51206: LD_VAR 0 8
51210: PPUSH
51211: LD_VAR 0 5
51215: PUSH
51216: LD_VAR 0 8
51220: ARRAY
51221: PPUSH
51222: CALL_OW 276
51226: GO 51198
51228: POP
51229: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51230: LD_ADDR_VAR 0 18
51234: PUSH
51235: LD_VAR 0 15
51239: PPUSH
51240: LD_VAR 0 2
51244: PPUSH
51245: LD_INT 1
51247: PPUSH
51248: CALL 50489 0 3
51252: ST_TO_ADDR
// InitHc ;
51253: CALL_OW 19
// InitUc ;
51257: CALL_OW 18
// uc_side := side ;
51261: LD_ADDR_OWVAR 20
51265: PUSH
51266: LD_VAR 0 16
51270: ST_TO_ADDR
// uc_nation := nation ;
51271: LD_ADDR_OWVAR 21
51275: PUSH
51276: LD_VAR 0 17
51280: ST_TO_ADDR
// if buildings then
51281: LD_VAR 0 18
51285: IFFALSE 52613
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51287: LD_ADDR_VAR 0 19
51291: PUSH
51292: LD_VAR 0 18
51296: PPUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 30
51302: PUSH
51303: LD_INT 29
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 30
51312: PUSH
51313: LD_INT 30
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: PPUSH
51325: CALL_OW 72
51329: ST_TO_ADDR
// if tmp then
51330: LD_VAR 0 19
51334: IFFALSE 51382
// for i in tmp do
51336: LD_ADDR_VAR 0 8
51340: PUSH
51341: LD_VAR 0 19
51345: PUSH
51346: FOR_IN
51347: IFFALSE 51380
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51349: LD_VAR 0 8
51353: PPUSH
51354: CALL_OW 250
51358: PPUSH
51359: LD_VAR 0 8
51363: PPUSH
51364: CALL_OW 251
51368: PPUSH
51369: LD_VAR 0 16
51373: PPUSH
51374: CALL_OW 441
51378: GO 51346
51380: POP
51381: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51382: LD_VAR 0 18
51386: PPUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 30
51392: PUSH
51393: LD_INT 32
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 30
51402: PUSH
51403: LD_INT 33
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: PPUSH
51415: CALL_OW 72
51419: IFFALSE 51507
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51421: LD_ADDR_VAR 0 8
51425: PUSH
51426: LD_VAR 0 18
51430: PPUSH
51431: LD_INT 2
51433: PUSH
51434: LD_INT 30
51436: PUSH
51437: LD_INT 32
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 30
51446: PUSH
51447: LD_INT 33
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: PPUSH
51459: CALL_OW 72
51463: PUSH
51464: FOR_IN
51465: IFFALSE 51505
// begin if not GetBWeapon ( i ) then
51467: LD_VAR 0 8
51471: PPUSH
51472: CALL_OW 269
51476: NOT
51477: IFFALSE 51503
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51479: LD_VAR 0 8
51483: PPUSH
51484: LD_VAR 0 8
51488: PPUSH
51489: LD_VAR 0 2
51493: PPUSH
51494: CALL 52759 0 2
51498: PPUSH
51499: CALL_OW 431
// end ;
51503: GO 51464
51505: POP
51506: POP
// end ; for i = 1 to personel do
51507: LD_ADDR_VAR 0 8
51511: PUSH
51512: DOUBLE
51513: LD_INT 1
51515: DEC
51516: ST_TO_ADDR
51517: LD_VAR 0 6
51521: PUSH
51522: FOR_TO
51523: IFFALSE 52593
// begin if i > 4 then
51525: LD_VAR 0 8
51529: PUSH
51530: LD_INT 4
51532: GREATER
51533: IFFALSE 51537
// break ;
51535: GO 52593
// case i of 1 :
51537: LD_VAR 0 8
51541: PUSH
51542: LD_INT 1
51544: DOUBLE
51545: EQUAL
51546: IFTRUE 51550
51548: GO 51630
51550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51551: LD_ADDR_VAR 0 12
51555: PUSH
51556: LD_VAR 0 18
51560: PPUSH
51561: LD_INT 22
51563: PUSH
51564: LD_VAR 0 16
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 58
51575: PUSH
51576: EMPTY
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: LD_INT 30
51584: PUSH
51585: LD_INT 32
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 30
51594: PUSH
51595: LD_INT 4
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 30
51604: PUSH
51605: LD_INT 5
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: PPUSH
51623: CALL_OW 72
51627: ST_TO_ADDR
51628: GO 51852
51630: LD_INT 2
51632: DOUBLE
51633: EQUAL
51634: IFTRUE 51638
51636: GO 51700
51638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51639: LD_ADDR_VAR 0 12
51643: PUSH
51644: LD_VAR 0 18
51648: PPUSH
51649: LD_INT 22
51651: PUSH
51652: LD_VAR 0 16
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: LD_INT 30
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 30
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PPUSH
51693: CALL_OW 72
51697: ST_TO_ADDR
51698: GO 51852
51700: LD_INT 3
51702: DOUBLE
51703: EQUAL
51704: IFTRUE 51708
51706: GO 51770
51708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51709: LD_ADDR_VAR 0 12
51713: PUSH
51714: LD_VAR 0 18
51718: PPUSH
51719: LD_INT 22
51721: PUSH
51722: LD_VAR 0 16
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 30
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 30
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PPUSH
51763: CALL_OW 72
51767: ST_TO_ADDR
51768: GO 51852
51770: LD_INT 4
51772: DOUBLE
51773: EQUAL
51774: IFTRUE 51778
51776: GO 51851
51778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51779: LD_ADDR_VAR 0 12
51783: PUSH
51784: LD_VAR 0 18
51788: PPUSH
51789: LD_INT 22
51791: PUSH
51792: LD_VAR 0 16
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 30
51806: PUSH
51807: LD_INT 6
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 30
51816: PUSH
51817: LD_INT 7
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 30
51826: PUSH
51827: LD_INT 8
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PPUSH
51844: CALL_OW 72
51848: ST_TO_ADDR
51849: GO 51852
51851: POP
// if i = 1 then
51852: LD_VAR 0 8
51856: PUSH
51857: LD_INT 1
51859: EQUAL
51860: IFFALSE 51971
// begin tmp := [ ] ;
51862: LD_ADDR_VAR 0 19
51866: PUSH
51867: EMPTY
51868: ST_TO_ADDR
// for j in f do
51869: LD_ADDR_VAR 0 9
51873: PUSH
51874: LD_VAR 0 12
51878: PUSH
51879: FOR_IN
51880: IFFALSE 51953
// if GetBType ( j ) = b_bunker then
51882: LD_VAR 0 9
51886: PPUSH
51887: CALL_OW 266
51891: PUSH
51892: LD_INT 32
51894: EQUAL
51895: IFFALSE 51922
// tmp := Insert ( tmp , 1 , j ) else
51897: LD_ADDR_VAR 0 19
51901: PUSH
51902: LD_VAR 0 19
51906: PPUSH
51907: LD_INT 1
51909: PPUSH
51910: LD_VAR 0 9
51914: PPUSH
51915: CALL_OW 2
51919: ST_TO_ADDR
51920: GO 51951
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51922: LD_ADDR_VAR 0 19
51926: PUSH
51927: LD_VAR 0 19
51931: PPUSH
51932: LD_VAR 0 19
51936: PUSH
51937: LD_INT 1
51939: PLUS
51940: PPUSH
51941: LD_VAR 0 9
51945: PPUSH
51946: CALL_OW 2
51950: ST_TO_ADDR
51951: GO 51879
51953: POP
51954: POP
// if tmp then
51955: LD_VAR 0 19
51959: IFFALSE 51971
// f := tmp ;
51961: LD_ADDR_VAR 0 12
51965: PUSH
51966: LD_VAR 0 19
51970: ST_TO_ADDR
// end ; x := personel [ i ] ;
51971: LD_ADDR_VAR 0 13
51975: PUSH
51976: LD_VAR 0 6
51980: PUSH
51981: LD_VAR 0 8
51985: ARRAY
51986: ST_TO_ADDR
// if x = - 1 then
51987: LD_VAR 0 13
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: EQUAL
51996: IFFALSE 52207
// begin for j in f do
51998: LD_ADDR_VAR 0 9
52002: PUSH
52003: LD_VAR 0 12
52007: PUSH
52008: FOR_IN
52009: IFFALSE 52203
// repeat InitHc ;
52011: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52015: LD_VAR 0 9
52019: PPUSH
52020: CALL_OW 266
52024: PUSH
52025: LD_INT 5
52027: EQUAL
52028: IFFALSE 52098
// begin if UnitsInside ( j ) < 3 then
52030: LD_VAR 0 9
52034: PPUSH
52035: CALL_OW 313
52039: PUSH
52040: LD_INT 3
52042: LESS
52043: IFFALSE 52079
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52045: LD_INT 0
52047: PPUSH
52048: LD_INT 5
52050: PUSH
52051: LD_INT 8
52053: PUSH
52054: LD_INT 9
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: PUSH
52062: LD_VAR 0 17
52066: ARRAY
52067: PPUSH
52068: LD_VAR 0 4
52072: PPUSH
52073: CALL_OW 380
52077: GO 52096
// PrepareHuman ( false , i , skill ) ;
52079: LD_INT 0
52081: PPUSH
52082: LD_VAR 0 8
52086: PPUSH
52087: LD_VAR 0 4
52091: PPUSH
52092: CALL_OW 380
// end else
52096: GO 52115
// PrepareHuman ( false , i , skill ) ;
52098: LD_INT 0
52100: PPUSH
52101: LD_VAR 0 8
52105: PPUSH
52106: LD_VAR 0 4
52110: PPUSH
52111: CALL_OW 380
// un := CreateHuman ;
52115: LD_ADDR_VAR 0 14
52119: PUSH
52120: CALL_OW 44
52124: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52125: LD_ADDR_VAR 0 7
52129: PUSH
52130: LD_VAR 0 7
52134: PPUSH
52135: LD_INT 1
52137: PPUSH
52138: LD_VAR 0 14
52142: PPUSH
52143: CALL_OW 2
52147: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52148: LD_VAR 0 14
52152: PPUSH
52153: LD_VAR 0 9
52157: PPUSH
52158: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52162: LD_VAR 0 9
52166: PPUSH
52167: CALL_OW 313
52171: PUSH
52172: LD_INT 6
52174: EQUAL
52175: IFTRUE 52199
52177: PUSH
52178: LD_VAR 0 9
52182: PPUSH
52183: CALL_OW 266
52187: PUSH
52188: LD_INT 32
52190: PUSH
52191: LD_INT 31
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: IN
52198: OR
52199: IFFALSE 52011
52201: GO 52008
52203: POP
52204: POP
// end else
52205: GO 52591
// for j = 1 to x do
52207: LD_ADDR_VAR 0 9
52211: PUSH
52212: DOUBLE
52213: LD_INT 1
52215: DEC
52216: ST_TO_ADDR
52217: LD_VAR 0 13
52221: PUSH
52222: FOR_TO
52223: IFFALSE 52589
// begin InitHc ;
52225: CALL_OW 19
// if not f then
52229: LD_VAR 0 12
52233: NOT
52234: IFFALSE 52323
// begin PrepareHuman ( false , i , skill ) ;
52236: LD_INT 0
52238: PPUSH
52239: LD_VAR 0 8
52243: PPUSH
52244: LD_VAR 0 4
52248: PPUSH
52249: CALL_OW 380
// un := CreateHuman ;
52253: LD_ADDR_VAR 0 14
52257: PUSH
52258: CALL_OW 44
52262: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52263: LD_ADDR_VAR 0 7
52267: PUSH
52268: LD_VAR 0 7
52272: PPUSH
52273: LD_INT 1
52275: PPUSH
52276: LD_VAR 0 14
52280: PPUSH
52281: CALL_OW 2
52285: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52286: LD_VAR 0 14
52290: PPUSH
52291: LD_VAR 0 1
52295: PPUSH
52296: CALL_OW 250
52300: PPUSH
52301: LD_VAR 0 1
52305: PPUSH
52306: CALL_OW 251
52310: PPUSH
52311: LD_INT 10
52313: PPUSH
52314: LD_INT 0
52316: PPUSH
52317: CALL_OW 50
// continue ;
52321: GO 52222
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52323: LD_VAR 0 12
52327: PUSH
52328: LD_INT 1
52330: ARRAY
52331: PPUSH
52332: CALL_OW 313
52336: IFFALSE 52364
52338: PUSH
52339: LD_VAR 0 12
52343: PUSH
52344: LD_INT 1
52346: ARRAY
52347: PPUSH
52348: CALL_OW 266
52352: PUSH
52353: LD_INT 32
52355: PUSH
52356: LD_INT 31
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: IN
52363: AND
52364: IFTRUE 52385
52366: PUSH
52367: LD_VAR 0 12
52371: PUSH
52372: LD_INT 1
52374: ARRAY
52375: PPUSH
52376: CALL_OW 313
52380: PUSH
52381: LD_INT 6
52383: EQUAL
52384: OR
52385: IFFALSE 52405
// f := Delete ( f , 1 ) ;
52387: LD_ADDR_VAR 0 12
52391: PUSH
52392: LD_VAR 0 12
52396: PPUSH
52397: LD_INT 1
52399: PPUSH
52400: CALL_OW 3
52404: ST_TO_ADDR
// if not f then
52405: LD_VAR 0 12
52409: NOT
52410: IFFALSE 52428
// begin x := x + 2 ;
52412: LD_ADDR_VAR 0 13
52416: PUSH
52417: LD_VAR 0 13
52421: PUSH
52422: LD_INT 2
52424: PLUS
52425: ST_TO_ADDR
// continue ;
52426: GO 52222
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52428: LD_VAR 0 12
52432: PUSH
52433: LD_INT 1
52435: ARRAY
52436: PPUSH
52437: CALL_OW 266
52441: PUSH
52442: LD_INT 5
52444: EQUAL
52445: IFFALSE 52519
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52447: LD_VAR 0 12
52451: PUSH
52452: LD_INT 1
52454: ARRAY
52455: PPUSH
52456: CALL_OW 313
52460: PUSH
52461: LD_INT 3
52463: LESS
52464: IFFALSE 52500
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52466: LD_INT 0
52468: PPUSH
52469: LD_INT 5
52471: PUSH
52472: LD_INT 8
52474: PUSH
52475: LD_INT 9
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: PUSH
52483: LD_VAR 0 17
52487: ARRAY
52488: PPUSH
52489: LD_VAR 0 4
52493: PPUSH
52494: CALL_OW 380
52498: GO 52517
// PrepareHuman ( false , i , skill ) ;
52500: LD_INT 0
52502: PPUSH
52503: LD_VAR 0 8
52507: PPUSH
52508: LD_VAR 0 4
52512: PPUSH
52513: CALL_OW 380
// end else
52517: GO 52536
// PrepareHuman ( false , i , skill ) ;
52519: LD_INT 0
52521: PPUSH
52522: LD_VAR 0 8
52526: PPUSH
52527: LD_VAR 0 4
52531: PPUSH
52532: CALL_OW 380
// un := CreateHuman ;
52536: LD_ADDR_VAR 0 14
52540: PUSH
52541: CALL_OW 44
52545: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52546: LD_ADDR_VAR 0 7
52550: PUSH
52551: LD_VAR 0 7
52555: PPUSH
52556: LD_INT 1
52558: PPUSH
52559: LD_VAR 0 14
52563: PPUSH
52564: CALL_OW 2
52568: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52569: LD_VAR 0 14
52573: PPUSH
52574: LD_VAR 0 12
52578: PUSH
52579: LD_INT 1
52581: ARRAY
52582: PPUSH
52583: CALL_OW 52
// end ;
52587: GO 52222
52589: POP
52590: POP
// end ;
52591: GO 51522
52593: POP
52594: POP
// result := result ^ buildings ;
52595: LD_ADDR_VAR 0 7
52599: PUSH
52600: LD_VAR 0 7
52604: PUSH
52605: LD_VAR 0 18
52609: ADD
52610: ST_TO_ADDR
// end else
52611: GO 52754
// begin for i = 1 to personel do
52613: LD_ADDR_VAR 0 8
52617: PUSH
52618: DOUBLE
52619: LD_INT 1
52621: DEC
52622: ST_TO_ADDR
52623: LD_VAR 0 6
52627: PUSH
52628: FOR_TO
52629: IFFALSE 52752
// begin if i > 4 then
52631: LD_VAR 0 8
52635: PUSH
52636: LD_INT 4
52638: GREATER
52639: IFFALSE 52643
// break ;
52641: GO 52752
// x := personel [ i ] ;
52643: LD_ADDR_VAR 0 13
52647: PUSH
52648: LD_VAR 0 6
52652: PUSH
52653: LD_VAR 0 8
52657: ARRAY
52658: ST_TO_ADDR
// if x = - 1 then
52659: LD_VAR 0 13
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: EQUAL
52668: IFFALSE 52672
// continue ;
52670: GO 52628
// PrepareHuman ( false , i , skill ) ;
52672: LD_INT 0
52674: PPUSH
52675: LD_VAR 0 8
52679: PPUSH
52680: LD_VAR 0 4
52684: PPUSH
52685: CALL_OW 380
// un := CreateHuman ;
52689: LD_ADDR_VAR 0 14
52693: PUSH
52694: CALL_OW 44
52698: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52699: LD_VAR 0 14
52703: PPUSH
52704: LD_VAR 0 1
52708: PPUSH
52709: CALL_OW 250
52713: PPUSH
52714: LD_VAR 0 1
52718: PPUSH
52719: CALL_OW 251
52723: PPUSH
52724: LD_INT 10
52726: PPUSH
52727: LD_INT 0
52729: PPUSH
52730: CALL_OW 50
// result := result ^ un ;
52734: LD_ADDR_VAR 0 7
52738: PUSH
52739: LD_VAR 0 7
52743: PUSH
52744: LD_VAR 0 14
52748: ADD
52749: ST_TO_ADDR
// end ;
52750: GO 52628
52752: POP
52753: POP
// end ; end ;
52754: LD_VAR 0 7
52758: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52759: LD_INT 0
52761: PPUSH
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
// result := false ;
52777: LD_ADDR_VAR 0 3
52781: PUSH
52782: LD_INT 0
52784: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52785: LD_VAR 0 1
52789: NOT
52790: IFTRUE 52815
52792: PUSH
52793: LD_VAR 0 1
52797: PPUSH
52798: CALL_OW 266
52802: PUSH
52803: LD_INT 32
52805: PUSH
52806: LD_INT 33
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: IN
52813: NOT
52814: OR
52815: IFFALSE 52819
// exit ;
52817: GO 53954
// nat := GetNation ( tower ) ;
52819: LD_ADDR_VAR 0 12
52823: PUSH
52824: LD_VAR 0 1
52828: PPUSH
52829: CALL_OW 248
52833: ST_TO_ADDR
// side := GetSide ( tower ) ;
52834: LD_ADDR_VAR 0 16
52838: PUSH
52839: LD_VAR 0 1
52843: PPUSH
52844: CALL_OW 255
52848: ST_TO_ADDR
// x := GetX ( tower ) ;
52849: LD_ADDR_VAR 0 10
52853: PUSH
52854: LD_VAR 0 1
52858: PPUSH
52859: CALL_OW 250
52863: ST_TO_ADDR
// y := GetY ( tower ) ;
52864: LD_ADDR_VAR 0 11
52868: PUSH
52869: LD_VAR 0 1
52873: PPUSH
52874: CALL_OW 251
52878: ST_TO_ADDR
// if not x or not y then
52879: LD_VAR 0 10
52883: NOT
52884: IFTRUE 52893
52886: PUSH
52887: LD_VAR 0 11
52891: NOT
52892: OR
52893: IFFALSE 52897
// exit ;
52895: GO 53954
// weapon := 0 ;
52897: LD_ADDR_VAR 0 18
52901: PUSH
52902: LD_INT 0
52904: ST_TO_ADDR
// fac_list := [ ] ;
52905: LD_ADDR_VAR 0 17
52909: PUSH
52910: EMPTY
52911: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52912: LD_ADDR_VAR 0 6
52916: PUSH
52917: LD_VAR 0 1
52921: PPUSH
52922: CALL_OW 274
52926: PPUSH
52927: LD_VAR 0 2
52931: PPUSH
52932: LD_INT 0
52934: PPUSH
52935: CALL 50489 0 3
52939: PPUSH
52940: LD_INT 30
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PPUSH
52950: CALL_OW 72
52954: ST_TO_ADDR
// if not factories then
52955: LD_VAR 0 6
52959: NOT
52960: IFFALSE 52964
// exit ;
52962: GO 53954
// for i in factories do
52964: LD_ADDR_VAR 0 8
52968: PUSH
52969: LD_VAR 0 6
52973: PUSH
52974: FOR_IN
52975: IFFALSE 53000
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52977: LD_ADDR_VAR 0 17
52981: PUSH
52982: LD_VAR 0 17
52986: PUSH
52987: LD_VAR 0 8
52991: PPUSH
52992: CALL_OW 478
52996: UNION
52997: ST_TO_ADDR
52998: GO 52974
53000: POP
53001: POP
// if not fac_list then
53002: LD_VAR 0 17
53006: NOT
53007: IFFALSE 53011
// exit ;
53009: GO 53954
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53011: LD_ADDR_VAR 0 5
53015: PUSH
53016: LD_INT 4
53018: PUSH
53019: LD_INT 5
53021: PUSH
53022: LD_INT 9
53024: PUSH
53025: LD_INT 10
53027: PUSH
53028: LD_INT 6
53030: PUSH
53031: LD_INT 7
53033: PUSH
53034: LD_INT 11
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 27
53048: PUSH
53049: LD_INT 28
53051: PUSH
53052: LD_INT 26
53054: PUSH
53055: LD_INT 30
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 43
53066: PUSH
53067: LD_INT 44
53069: PUSH
53070: LD_INT 46
53072: PUSH
53073: LD_INT 45
53075: PUSH
53076: LD_INT 47
53078: PUSH
53079: LD_INT 49
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: PUSH
53095: LD_VAR 0 12
53099: ARRAY
53100: ST_TO_ADDR
// list := list isect fac_list ;
53101: LD_ADDR_VAR 0 5
53105: PUSH
53106: LD_VAR 0 5
53110: PUSH
53111: LD_VAR 0 17
53115: ISECT
53116: ST_TO_ADDR
// if not list then
53117: LD_VAR 0 5
53121: NOT
53122: IFFALSE 53126
// exit ;
53124: GO 53954
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53126: LD_VAR 0 12
53130: PUSH
53131: LD_INT 3
53133: EQUAL
53134: IFFALSE 53146
53136: PUSH
53137: LD_INT 49
53139: PUSH
53140: LD_VAR 0 5
53144: IN
53145: AND
53146: IFFALSE 53166
53148: PUSH
53149: LD_INT 31
53151: PPUSH
53152: LD_VAR 0 16
53156: PPUSH
53157: CALL_OW 321
53161: PUSH
53162: LD_INT 2
53164: EQUAL
53165: AND
53166: IFFALSE 53226
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53168: LD_INT 22
53170: PUSH
53171: LD_VAR 0 16
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 35
53182: PUSH
53183: LD_INT 49
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 91
53192: PUSH
53193: LD_VAR 0 1
53197: PUSH
53198: LD_INT 10
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: LIST
53210: PPUSH
53211: CALL_OW 69
53215: NOT
53216: IFFALSE 53226
// weapon := ru_time_lapser ;
53218: LD_ADDR_VAR 0 18
53222: PUSH
53223: LD_INT 49
53225: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53226: LD_VAR 0 12
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: IN
53241: IFFALSE 53265
53243: PUSH
53244: LD_INT 11
53246: PUSH
53247: LD_VAR 0 5
53251: IN
53252: IFTRUE 53264
53254: PUSH
53255: LD_INT 30
53257: PUSH
53258: LD_VAR 0 5
53262: IN
53263: OR
53264: AND
53265: IFFALSE 53285
53267: PUSH
53268: LD_INT 6
53270: PPUSH
53271: LD_VAR 0 16
53275: PPUSH
53276: CALL_OW 321
53280: PUSH
53281: LD_INT 2
53283: EQUAL
53284: AND
53285: IFFALSE 53452
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53287: LD_INT 22
53289: PUSH
53290: LD_VAR 0 16
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 35
53304: PUSH
53305: LD_INT 11
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 35
53314: PUSH
53315: LD_INT 30
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 91
53329: PUSH
53330: LD_VAR 0 1
53334: PUSH
53335: LD_INT 18
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: PPUSH
53348: CALL_OW 69
53352: NOT
53353: IFFALSE 53429
53355: PUSH
53356: LD_INT 22
53358: PUSH
53359: LD_VAR 0 16
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 30
53373: PUSH
53374: LD_INT 32
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 30
53383: PUSH
53384: LD_INT 33
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 91
53398: PUSH
53399: LD_VAR 0 1
53403: PUSH
53404: LD_INT 12
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: PPUSH
53420: CALL_OW 69
53424: PUSH
53425: LD_INT 2
53427: GREATER
53428: AND
53429: IFFALSE 53452
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53431: LD_ADDR_VAR 0 18
53435: PUSH
53436: LD_INT 11
53438: PUSH
53439: LD_INT 30
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_VAR 0 12
53450: ARRAY
53451: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53452: LD_VAR 0 18
53456: NOT
53457: IFFALSE 53477
53459: PUSH
53460: LD_INT 40
53462: PPUSH
53463: LD_VAR 0 16
53467: PPUSH
53468: CALL_OW 321
53472: PUSH
53473: LD_INT 2
53475: EQUAL
53476: AND
53477: IFFALSE 53513
53479: PUSH
53480: LD_INT 7
53482: PUSH
53483: LD_VAR 0 5
53487: IN
53488: IFTRUE 53500
53490: PUSH
53491: LD_INT 28
53493: PUSH
53494: LD_VAR 0 5
53498: IN
53499: OR
53500: IFTRUE 53512
53502: PUSH
53503: LD_INT 45
53505: PUSH
53506: LD_VAR 0 5
53510: IN
53511: OR
53512: AND
53513: IFFALSE 53767
// begin hex := GetHexInfo ( x , y ) ;
53515: LD_ADDR_VAR 0 4
53519: PUSH
53520: LD_VAR 0 10
53524: PPUSH
53525: LD_VAR 0 11
53529: PPUSH
53530: CALL_OW 546
53534: ST_TO_ADDR
// if hex [ 1 ] then
53535: LD_VAR 0 4
53539: PUSH
53540: LD_INT 1
53542: ARRAY
53543: IFFALSE 53547
// exit ;
53545: GO 53954
// height := hex [ 2 ] ;
53547: LD_ADDR_VAR 0 15
53551: PUSH
53552: LD_VAR 0 4
53556: PUSH
53557: LD_INT 2
53559: ARRAY
53560: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53561: LD_ADDR_VAR 0 14
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 5
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: ST_TO_ADDR
// for i in tmp do
53584: LD_ADDR_VAR 0 8
53588: PUSH
53589: LD_VAR 0 14
53593: PUSH
53594: FOR_IN
53595: IFFALSE 53765
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53597: LD_ADDR_VAR 0 9
53601: PUSH
53602: LD_VAR 0 10
53606: PPUSH
53607: LD_VAR 0 8
53611: PPUSH
53612: LD_INT 5
53614: PPUSH
53615: CALL_OW 272
53619: PUSH
53620: LD_VAR 0 11
53624: PPUSH
53625: LD_VAR 0 8
53629: PPUSH
53630: LD_INT 5
53632: PPUSH
53633: CALL_OW 273
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53642: LD_VAR 0 9
53646: PUSH
53647: LD_INT 1
53649: ARRAY
53650: PPUSH
53651: LD_VAR 0 9
53655: PUSH
53656: LD_INT 2
53658: ARRAY
53659: PPUSH
53660: CALL_OW 488
53664: IFFALSE 53763
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53666: LD_ADDR_VAR 0 4
53670: PUSH
53671: LD_VAR 0 9
53675: PUSH
53676: LD_INT 1
53678: ARRAY
53679: PPUSH
53680: LD_VAR 0 9
53684: PUSH
53685: LD_INT 2
53687: ARRAY
53688: PPUSH
53689: CALL_OW 546
53693: ST_TO_ADDR
// if hex [ 1 ] then
53694: LD_VAR 0 4
53698: PUSH
53699: LD_INT 1
53701: ARRAY
53702: IFFALSE 53706
// continue ;
53704: GO 53594
// h := hex [ 2 ] ;
53706: LD_ADDR_VAR 0 13
53710: PUSH
53711: LD_VAR 0 4
53715: PUSH
53716: LD_INT 2
53718: ARRAY
53719: ST_TO_ADDR
// if h + 7 < height then
53720: LD_VAR 0 13
53724: PUSH
53725: LD_INT 7
53727: PLUS
53728: PUSH
53729: LD_VAR 0 15
53733: LESS
53734: IFFALSE 53763
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53736: LD_ADDR_VAR 0 18
53740: PUSH
53741: LD_INT 7
53743: PUSH
53744: LD_INT 28
53746: PUSH
53747: LD_INT 45
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: PUSH
53755: LD_VAR 0 12
53759: ARRAY
53760: ST_TO_ADDR
// break ;
53761: GO 53765
// end ; end ; end ;
53763: GO 53594
53765: POP
53766: POP
// end ; if not weapon then
53767: LD_VAR 0 18
53771: NOT
53772: IFFALSE 53832
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53774: LD_ADDR_VAR 0 5
53778: PUSH
53779: LD_VAR 0 5
53783: PUSH
53784: LD_INT 11
53786: PUSH
53787: LD_INT 30
53789: PUSH
53790: LD_INT 49
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: LIST
53797: DIFF
53798: ST_TO_ADDR
// if not list then
53799: LD_VAR 0 5
53803: NOT
53804: IFFALSE 53808
// exit ;
53806: GO 53954
// weapon := list [ rand ( 1 , list ) ] ;
53808: LD_ADDR_VAR 0 18
53812: PUSH
53813: LD_VAR 0 5
53817: PUSH
53818: LD_INT 1
53820: PPUSH
53821: LD_VAR 0 5
53825: PPUSH
53826: CALL_OW 12
53830: ARRAY
53831: ST_TO_ADDR
// end ; if weapon then
53832: LD_VAR 0 18
53836: IFFALSE 53954
// begin tmp := CostOfWeapon ( weapon ) ;
53838: LD_ADDR_VAR 0 14
53842: PUSH
53843: LD_VAR 0 18
53847: PPUSH
53848: CALL_OW 451
53852: ST_TO_ADDR
// j := GetBase ( tower ) ;
53853: LD_ADDR_VAR 0 9
53857: PUSH
53858: LD_VAR 0 1
53862: PPUSH
53863: CALL_OW 274
53867: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53868: LD_VAR 0 9
53872: PPUSH
53873: LD_INT 1
53875: PPUSH
53876: CALL_OW 275
53880: PUSH
53881: LD_VAR 0 14
53885: PUSH
53886: LD_INT 1
53888: ARRAY
53889: GREATEREQUAL
53890: IFFALSE 53916
53892: PUSH
53893: LD_VAR 0 9
53897: PPUSH
53898: LD_INT 2
53900: PPUSH
53901: CALL_OW 275
53905: PUSH
53906: LD_VAR 0 14
53910: PUSH
53911: LD_INT 2
53913: ARRAY
53914: GREATEREQUAL
53915: AND
53916: IFFALSE 53942
53918: PUSH
53919: LD_VAR 0 9
53923: PPUSH
53924: LD_INT 3
53926: PPUSH
53927: CALL_OW 275
53931: PUSH
53932: LD_VAR 0 14
53936: PUSH
53937: LD_INT 3
53939: ARRAY
53940: GREATEREQUAL
53941: AND
53942: IFFALSE 53954
// result := weapon ;
53944: LD_ADDR_VAR 0 3
53948: PUSH
53949: LD_VAR 0 18
53953: ST_TO_ADDR
// end ; end ;
53954: LD_VAR 0 3
53958: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53959: LD_INT 0
53961: PPUSH
53962: PPUSH
// result := true ;
53963: LD_ADDR_VAR 0 3
53967: PUSH
53968: LD_INT 1
53970: ST_TO_ADDR
// if array1 = array2 then
53971: LD_VAR 0 1
53975: PUSH
53976: LD_VAR 0 2
53980: EQUAL
53981: IFFALSE 54041
// begin for i = 1 to array1 do
53983: LD_ADDR_VAR 0 4
53987: PUSH
53988: DOUBLE
53989: LD_INT 1
53991: DEC
53992: ST_TO_ADDR
53993: LD_VAR 0 1
53997: PUSH
53998: FOR_TO
53999: IFFALSE 54037
// if array1 [ i ] <> array2 [ i ] then
54001: LD_VAR 0 1
54005: PUSH
54006: LD_VAR 0 4
54010: ARRAY
54011: PUSH
54012: LD_VAR 0 2
54016: PUSH
54017: LD_VAR 0 4
54021: ARRAY
54022: NONEQUAL
54023: IFFALSE 54035
// begin result := false ;
54025: LD_ADDR_VAR 0 3
54029: PUSH
54030: LD_INT 0
54032: ST_TO_ADDR
// break ;
54033: GO 54037
// end ;
54035: GO 53998
54037: POP
54038: POP
// end else
54039: GO 54049
// result := false ;
54041: LD_ADDR_VAR 0 3
54045: PUSH
54046: LD_INT 0
54048: ST_TO_ADDR
// end ;
54049: LD_VAR 0 3
54053: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54054: LD_INT 0
54056: PPUSH
54057: PPUSH
// if not array1 or not array2 then
54058: LD_VAR 0 1
54062: NOT
54063: IFTRUE 54072
54065: PUSH
54066: LD_VAR 0 2
54070: NOT
54071: OR
54072: IFFALSE 54076
// exit ;
54074: GO 54140
// result := true ;
54076: LD_ADDR_VAR 0 3
54080: PUSH
54081: LD_INT 1
54083: ST_TO_ADDR
// for i = 1 to array1 do
54084: LD_ADDR_VAR 0 4
54088: PUSH
54089: DOUBLE
54090: LD_INT 1
54092: DEC
54093: ST_TO_ADDR
54094: LD_VAR 0 1
54098: PUSH
54099: FOR_TO
54100: IFFALSE 54138
// if array1 [ i ] <> array2 [ i ] then
54102: LD_VAR 0 1
54106: PUSH
54107: LD_VAR 0 4
54111: ARRAY
54112: PUSH
54113: LD_VAR 0 2
54117: PUSH
54118: LD_VAR 0 4
54122: ARRAY
54123: NONEQUAL
54124: IFFALSE 54136
// begin result := false ;
54126: LD_ADDR_VAR 0 3
54130: PUSH
54131: LD_INT 0
54133: ST_TO_ADDR
// break ;
54134: GO 54138
// end ;
54136: GO 54099
54138: POP
54139: POP
// end ;
54140: LD_VAR 0 3
54144: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54145: LD_INT 0
54147: PPUSH
54148: PPUSH
54149: PPUSH
// pom := GetBase ( fac ) ;
54150: LD_ADDR_VAR 0 5
54154: PUSH
54155: LD_VAR 0 1
54159: PPUSH
54160: CALL_OW 274
54164: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54165: LD_ADDR_VAR 0 4
54169: PUSH
54170: LD_VAR 0 2
54174: PUSH
54175: LD_INT 1
54177: ARRAY
54178: PPUSH
54179: LD_VAR 0 2
54183: PUSH
54184: LD_INT 2
54186: ARRAY
54187: PPUSH
54188: LD_VAR 0 2
54192: PUSH
54193: LD_INT 3
54195: ARRAY
54196: PPUSH
54197: LD_VAR 0 2
54201: PUSH
54202: LD_INT 4
54204: ARRAY
54205: PPUSH
54206: CALL_OW 449
54210: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54211: LD_ADDR_VAR 0 3
54215: PUSH
54216: LD_VAR 0 5
54220: PPUSH
54221: LD_INT 1
54223: PPUSH
54224: CALL_OW 275
54228: PUSH
54229: LD_VAR 0 4
54233: PUSH
54234: LD_INT 1
54236: ARRAY
54237: GREATEREQUAL
54238: IFFALSE 54264
54240: PUSH
54241: LD_VAR 0 5
54245: PPUSH
54246: LD_INT 2
54248: PPUSH
54249: CALL_OW 275
54253: PUSH
54254: LD_VAR 0 4
54258: PUSH
54259: LD_INT 2
54261: ARRAY
54262: GREATEREQUAL
54263: AND
54264: IFFALSE 54290
54266: PUSH
54267: LD_VAR 0 5
54271: PPUSH
54272: LD_INT 3
54274: PPUSH
54275: CALL_OW 275
54279: PUSH
54280: LD_VAR 0 4
54284: PUSH
54285: LD_INT 3
54287: ARRAY
54288: GREATEREQUAL
54289: AND
54290: ST_TO_ADDR
// end ;
54291: LD_VAR 0 3
54295: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54296: LD_INT 0
54298: PPUSH
54299: PPUSH
54300: PPUSH
54301: PPUSH
// pom := GetBase ( building ) ;
54302: LD_ADDR_VAR 0 3
54306: PUSH
54307: LD_VAR 0 1
54311: PPUSH
54312: CALL_OW 274
54316: ST_TO_ADDR
// if not pom then
54317: LD_VAR 0 3
54321: NOT
54322: IFFALSE 54326
// exit ;
54324: GO 54500
// btype := GetBType ( building ) ;
54326: LD_ADDR_VAR 0 5
54330: PUSH
54331: LD_VAR 0 1
54335: PPUSH
54336: CALL_OW 266
54340: ST_TO_ADDR
// if btype = b_armoury then
54341: LD_VAR 0 5
54345: PUSH
54346: LD_INT 4
54348: EQUAL
54349: IFFALSE 54359
// btype := b_barracks ;
54351: LD_ADDR_VAR 0 5
54355: PUSH
54356: LD_INT 5
54358: ST_TO_ADDR
// if btype = b_depot then
54359: LD_VAR 0 5
54363: PUSH
54364: LD_INT 0
54366: EQUAL
54367: IFFALSE 54377
// btype := b_warehouse ;
54369: LD_ADDR_VAR 0 5
54373: PUSH
54374: LD_INT 1
54376: ST_TO_ADDR
// if btype = b_workshop then
54377: LD_VAR 0 5
54381: PUSH
54382: LD_INT 2
54384: EQUAL
54385: IFFALSE 54395
// btype := b_factory ;
54387: LD_ADDR_VAR 0 5
54391: PUSH
54392: LD_INT 3
54394: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54395: LD_ADDR_VAR 0 4
54399: PUSH
54400: LD_VAR 0 5
54404: PPUSH
54405: LD_VAR 0 1
54409: PPUSH
54410: CALL_OW 248
54414: PPUSH
54415: CALL_OW 450
54419: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54420: LD_ADDR_VAR 0 2
54424: PUSH
54425: LD_VAR 0 3
54429: PPUSH
54430: LD_INT 1
54432: PPUSH
54433: CALL_OW 275
54437: PUSH
54438: LD_VAR 0 4
54442: PUSH
54443: LD_INT 1
54445: ARRAY
54446: GREATEREQUAL
54447: IFFALSE 54473
54449: PUSH
54450: LD_VAR 0 3
54454: PPUSH
54455: LD_INT 2
54457: PPUSH
54458: CALL_OW 275
54462: PUSH
54463: LD_VAR 0 4
54467: PUSH
54468: LD_INT 2
54470: ARRAY
54471: GREATEREQUAL
54472: AND
54473: IFFALSE 54499
54475: PUSH
54476: LD_VAR 0 3
54480: PPUSH
54481: LD_INT 3
54483: PPUSH
54484: CALL_OW 275
54488: PUSH
54489: LD_VAR 0 4
54493: PUSH
54494: LD_INT 3
54496: ARRAY
54497: GREATEREQUAL
54498: AND
54499: ST_TO_ADDR
// end ;
54500: LD_VAR 0 2
54504: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54505: LD_INT 0
54507: PPUSH
54508: PPUSH
54509: PPUSH
// pom := GetBase ( building ) ;
54510: LD_ADDR_VAR 0 4
54514: PUSH
54515: LD_VAR 0 1
54519: PPUSH
54520: CALL_OW 274
54524: ST_TO_ADDR
// if not pom then
54525: LD_VAR 0 4
54529: NOT
54530: IFFALSE 54534
// exit ;
54532: GO 54639
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54534: LD_ADDR_VAR 0 5
54538: PUSH
54539: LD_VAR 0 2
54543: PPUSH
54544: LD_VAR 0 1
54548: PPUSH
54549: CALL_OW 248
54553: PPUSH
54554: CALL_OW 450
54558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54559: LD_ADDR_VAR 0 3
54563: PUSH
54564: LD_VAR 0 4
54568: PPUSH
54569: LD_INT 1
54571: PPUSH
54572: CALL_OW 275
54576: PUSH
54577: LD_VAR 0 5
54581: PUSH
54582: LD_INT 1
54584: ARRAY
54585: GREATEREQUAL
54586: IFFALSE 54612
54588: PUSH
54589: LD_VAR 0 4
54593: PPUSH
54594: LD_INT 2
54596: PPUSH
54597: CALL_OW 275
54601: PUSH
54602: LD_VAR 0 5
54606: PUSH
54607: LD_INT 2
54609: ARRAY
54610: GREATEREQUAL
54611: AND
54612: IFFALSE 54638
54614: PUSH
54615: LD_VAR 0 4
54619: PPUSH
54620: LD_INT 3
54622: PPUSH
54623: CALL_OW 275
54627: PUSH
54628: LD_VAR 0 5
54632: PUSH
54633: LD_INT 3
54635: ARRAY
54636: GREATEREQUAL
54637: AND
54638: ST_TO_ADDR
// end ;
54639: LD_VAR 0 3
54643: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54644: LD_INT 0
54646: PPUSH
54647: PPUSH
54648: PPUSH
54649: PPUSH
54650: PPUSH
54651: PPUSH
54652: PPUSH
54653: PPUSH
54654: PPUSH
54655: PPUSH
54656: PPUSH
// result := false ;
54657: LD_ADDR_VAR 0 8
54661: PUSH
54662: LD_INT 0
54664: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54665: LD_VAR 0 5
54669: NOT
54670: IFTRUE 54679
54672: PUSH
54673: LD_VAR 0 1
54677: NOT
54678: OR
54679: IFTRUE 54688
54681: PUSH
54682: LD_VAR 0 2
54686: NOT
54687: OR
54688: IFTRUE 54697
54690: PUSH
54691: LD_VAR 0 3
54695: NOT
54696: OR
54697: IFFALSE 54701
// exit ;
54699: GO 55527
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54701: LD_ADDR_VAR 0 14
54705: PUSH
54706: LD_VAR 0 1
54710: PPUSH
54711: LD_VAR 0 2
54715: PPUSH
54716: LD_VAR 0 3
54720: PPUSH
54721: LD_VAR 0 4
54725: PPUSH
54726: LD_VAR 0 5
54730: PUSH
54731: LD_INT 1
54733: ARRAY
54734: PPUSH
54735: CALL_OW 248
54739: PPUSH
54740: LD_INT 0
54742: PPUSH
54743: CALL 56808 0 6
54747: ST_TO_ADDR
// if not hexes then
54748: LD_VAR 0 14
54752: NOT
54753: IFFALSE 54757
// exit ;
54755: GO 55527
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54757: LD_ADDR_VAR 0 17
54761: PUSH
54762: LD_VAR 0 5
54766: PPUSH
54767: LD_INT 22
54769: PUSH
54770: LD_VAR 0 13
54774: PPUSH
54775: CALL_OW 255
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 30
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 30
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PPUSH
54816: CALL_OW 72
54820: ST_TO_ADDR
// for i = 1 to hexes do
54821: LD_ADDR_VAR 0 9
54825: PUSH
54826: DOUBLE
54827: LD_INT 1
54829: DEC
54830: ST_TO_ADDR
54831: LD_VAR 0 14
54835: PUSH
54836: FOR_TO
54837: IFFALSE 55525
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54839: LD_ADDR_VAR 0 13
54843: PUSH
54844: LD_VAR 0 14
54848: PUSH
54849: LD_VAR 0 9
54853: ARRAY
54854: PUSH
54855: LD_INT 1
54857: ARRAY
54858: PPUSH
54859: LD_VAR 0 14
54863: PUSH
54864: LD_VAR 0 9
54868: ARRAY
54869: PUSH
54870: LD_INT 2
54872: ARRAY
54873: PPUSH
54874: CALL_OW 428
54878: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54879: LD_VAR 0 14
54883: PUSH
54884: LD_VAR 0 9
54888: ARRAY
54889: PUSH
54890: LD_INT 1
54892: ARRAY
54893: PPUSH
54894: LD_VAR 0 14
54898: PUSH
54899: LD_VAR 0 9
54903: ARRAY
54904: PUSH
54905: LD_INT 2
54907: ARRAY
54908: PPUSH
54909: CALL_OW 351
54913: IFTRUE 54952
54915: PUSH
54916: LD_VAR 0 14
54920: PUSH
54921: LD_VAR 0 9
54925: ARRAY
54926: PUSH
54927: LD_INT 1
54929: ARRAY
54930: PPUSH
54931: LD_VAR 0 14
54935: PUSH
54936: LD_VAR 0 9
54940: ARRAY
54941: PUSH
54942: LD_INT 2
54944: ARRAY
54945: PPUSH
54946: CALL_OW 488
54950: NOT
54951: OR
54952: IFTRUE 54969
54954: PUSH
54955: LD_VAR 0 13
54959: PPUSH
54960: CALL_OW 247
54964: PUSH
54965: LD_INT 3
54967: EQUAL
54968: OR
54969: IFFALSE 54975
// exit ;
54971: POP
54972: POP
54973: GO 55527
// if not tmp then
54975: LD_VAR 0 13
54979: NOT
54980: IFFALSE 54984
// continue ;
54982: GO 54836
// result := true ;
54984: LD_ADDR_VAR 0 8
54988: PUSH
54989: LD_INT 1
54991: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54992: LD_VAR 0 6
54996: IFFALSE 55013
54998: PUSH
54999: LD_VAR 0 13
55003: PPUSH
55004: CALL_OW 247
55008: PUSH
55009: LD_INT 2
55011: EQUAL
55012: AND
55013: IFFALSE 55030
55015: PUSH
55016: LD_VAR 0 13
55020: PPUSH
55021: CALL_OW 263
55025: PUSH
55026: LD_INT 1
55028: EQUAL
55029: AND
55030: IFFALSE 55194
// begin if IsDrivenBy ( tmp ) then
55032: LD_VAR 0 13
55036: PPUSH
55037: CALL_OW 311
55041: IFFALSE 55045
// continue ;
55043: GO 54836
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55045: LD_VAR 0 6
55049: PPUSH
55050: LD_INT 3
55052: PUSH
55053: LD_INT 60
55055: PUSH
55056: EMPTY
55057: LIST
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 55
55068: PUSH
55069: EMPTY
55070: LIST
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PPUSH
55080: CALL_OW 72
55084: IFFALSE 55192
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55086: LD_ADDR_VAR 0 18
55090: PUSH
55091: LD_VAR 0 6
55095: PPUSH
55096: LD_INT 3
55098: PUSH
55099: LD_INT 60
55101: PUSH
55102: EMPTY
55103: LIST
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 3
55111: PUSH
55112: LD_INT 55
55114: PUSH
55115: EMPTY
55116: LIST
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PPUSH
55126: CALL_OW 72
55130: PUSH
55131: LD_INT 1
55133: ARRAY
55134: ST_TO_ADDR
// if IsInUnit ( driver ) then
55135: LD_VAR 0 18
55139: PPUSH
55140: CALL_OW 310
55144: IFFALSE 55155
// ComExit ( driver ) ;
55146: LD_VAR 0 18
55150: PPUSH
55151: CALL 80798 0 1
// AddComEnterUnit ( driver , tmp ) ;
55155: LD_VAR 0 18
55159: PPUSH
55160: LD_VAR 0 13
55164: PPUSH
55165: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55169: LD_VAR 0 18
55173: PPUSH
55174: LD_VAR 0 7
55178: PPUSH
55179: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55183: LD_VAR 0 18
55187: PPUSH
55188: CALL_OW 181
// end ; continue ;
55192: GO 54836
// end ; if not cleaners or not tmp in cleaners then
55194: LD_VAR 0 6
55198: NOT
55199: IFTRUE 55214
55201: PUSH
55202: LD_VAR 0 13
55206: PUSH
55207: LD_VAR 0 6
55211: IN
55212: NOT
55213: OR
55214: IFFALSE 55523
// begin if dep then
55216: LD_VAR 0 17
55220: IFFALSE 55356
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55222: LD_ADDR_VAR 0 16
55226: PUSH
55227: LD_VAR 0 17
55231: PUSH
55232: LD_INT 1
55234: ARRAY
55235: PPUSH
55236: CALL_OW 250
55240: PPUSH
55241: LD_VAR 0 17
55245: PUSH
55246: LD_INT 1
55248: ARRAY
55249: PPUSH
55250: CALL_OW 254
55254: PPUSH
55255: LD_INT 5
55257: PPUSH
55258: CALL_OW 272
55262: PUSH
55263: LD_VAR 0 17
55267: PUSH
55268: LD_INT 1
55270: ARRAY
55271: PPUSH
55272: CALL_OW 251
55276: PPUSH
55277: LD_VAR 0 17
55281: PUSH
55282: LD_INT 1
55284: ARRAY
55285: PPUSH
55286: CALL_OW 254
55290: PPUSH
55291: LD_INT 5
55293: PPUSH
55294: CALL_OW 273
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55303: LD_VAR 0 16
55307: PUSH
55308: LD_INT 1
55310: ARRAY
55311: PPUSH
55312: LD_VAR 0 16
55316: PUSH
55317: LD_INT 2
55319: ARRAY
55320: PPUSH
55321: CALL_OW 488
55325: IFFALSE 55356
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55327: LD_VAR 0 13
55331: PPUSH
55332: LD_VAR 0 16
55336: PUSH
55337: LD_INT 1
55339: ARRAY
55340: PPUSH
55341: LD_VAR 0 16
55345: PUSH
55346: LD_INT 2
55348: ARRAY
55349: PPUSH
55350: CALL_OW 111
// continue ;
55354: GO 54836
// end ; end ; r := GetDir ( tmp ) ;
55356: LD_ADDR_VAR 0 15
55360: PUSH
55361: LD_VAR 0 13
55365: PPUSH
55366: CALL_OW 254
55370: ST_TO_ADDR
// if r = 5 then
55371: LD_VAR 0 15
55375: PUSH
55376: LD_INT 5
55378: EQUAL
55379: IFFALSE 55389
// r := 0 ;
55381: LD_ADDR_VAR 0 15
55385: PUSH
55386: LD_INT 0
55388: ST_TO_ADDR
// for j = r to 5 do
55389: LD_ADDR_VAR 0 10
55393: PUSH
55394: DOUBLE
55395: LD_VAR 0 15
55399: DEC
55400: ST_TO_ADDR
55401: LD_INT 5
55403: PUSH
55404: FOR_TO
55405: IFFALSE 55521
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55407: LD_ADDR_VAR 0 11
55411: PUSH
55412: LD_VAR 0 13
55416: PPUSH
55417: CALL_OW 250
55421: PPUSH
55422: LD_VAR 0 10
55426: PPUSH
55427: LD_INT 2
55429: PPUSH
55430: CALL_OW 272
55434: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55435: LD_ADDR_VAR 0 12
55439: PUSH
55440: LD_VAR 0 13
55444: PPUSH
55445: CALL_OW 251
55449: PPUSH
55450: LD_VAR 0 10
55454: PPUSH
55455: LD_INT 2
55457: PPUSH
55458: CALL_OW 273
55462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55463: LD_VAR 0 11
55467: PPUSH
55468: LD_VAR 0 12
55472: PPUSH
55473: CALL_OW 488
55477: IFFALSE 55496
55479: PUSH
55480: LD_VAR 0 11
55484: PPUSH
55485: LD_VAR 0 12
55489: PPUSH
55490: CALL_OW 428
55494: NOT
55495: AND
55496: IFFALSE 55519
// begin ComMoveXY ( tmp , _x , _y ) ;
55498: LD_VAR 0 13
55502: PPUSH
55503: LD_VAR 0 11
55507: PPUSH
55508: LD_VAR 0 12
55512: PPUSH
55513: CALL_OW 111
// break ;
55517: GO 55521
// end ; end ;
55519: GO 55404
55521: POP
55522: POP
// end ; end ;
55523: GO 54836
55525: POP
55526: POP
// end ;
55527: LD_VAR 0 8
55531: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55532: LD_INT 0
55534: PPUSH
// result := true ;
55535: LD_ADDR_VAR 0 3
55539: PUSH
55540: LD_INT 1
55542: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55543: LD_VAR 0 2
55547: PUSH
55548: LD_INT 24
55550: DOUBLE
55551: EQUAL
55552: IFTRUE 55562
55554: LD_INT 33
55556: DOUBLE
55557: EQUAL
55558: IFTRUE 55562
55560: GO 55587
55562: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55563: LD_ADDR_VAR 0 3
55567: PUSH
55568: LD_INT 32
55570: PPUSH
55571: LD_VAR 0 1
55575: PPUSH
55576: CALL_OW 321
55580: PUSH
55581: LD_INT 2
55583: EQUAL
55584: ST_TO_ADDR
55585: GO 55903
55587: LD_INT 20
55589: DOUBLE
55590: EQUAL
55591: IFTRUE 55595
55593: GO 55620
55595: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55596: LD_ADDR_VAR 0 3
55600: PUSH
55601: LD_INT 6
55603: PPUSH
55604: LD_VAR 0 1
55608: PPUSH
55609: CALL_OW 321
55613: PUSH
55614: LD_INT 2
55616: EQUAL
55617: ST_TO_ADDR
55618: GO 55903
55620: LD_INT 22
55622: DOUBLE
55623: EQUAL
55624: IFTRUE 55634
55626: LD_INT 36
55628: DOUBLE
55629: EQUAL
55630: IFTRUE 55634
55632: GO 55659
55634: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55635: LD_ADDR_VAR 0 3
55639: PUSH
55640: LD_INT 15
55642: PPUSH
55643: LD_VAR 0 1
55647: PPUSH
55648: CALL_OW 321
55652: PUSH
55653: LD_INT 2
55655: EQUAL
55656: ST_TO_ADDR
55657: GO 55903
55659: LD_INT 30
55661: DOUBLE
55662: EQUAL
55663: IFTRUE 55667
55665: GO 55692
55667: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55668: LD_ADDR_VAR 0 3
55672: PUSH
55673: LD_INT 20
55675: PPUSH
55676: LD_VAR 0 1
55680: PPUSH
55681: CALL_OW 321
55685: PUSH
55686: LD_INT 2
55688: EQUAL
55689: ST_TO_ADDR
55690: GO 55903
55692: LD_INT 28
55694: DOUBLE
55695: EQUAL
55696: IFTRUE 55706
55698: LD_INT 21
55700: DOUBLE
55701: EQUAL
55702: IFTRUE 55706
55704: GO 55731
55706: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55707: LD_ADDR_VAR 0 3
55711: PUSH
55712: LD_INT 21
55714: PPUSH
55715: LD_VAR 0 1
55719: PPUSH
55720: CALL_OW 321
55724: PUSH
55725: LD_INT 2
55727: EQUAL
55728: ST_TO_ADDR
55729: GO 55903
55731: LD_INT 16
55733: DOUBLE
55734: EQUAL
55735: IFTRUE 55739
55737: GO 55764
55739: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55740: LD_ADDR_VAR 0 3
55744: PUSH
55745: LD_INT 84
55747: PPUSH
55748: LD_VAR 0 1
55752: PPUSH
55753: CALL_OW 321
55757: PUSH
55758: LD_INT 2
55760: EQUAL
55761: ST_TO_ADDR
55762: GO 55903
55764: LD_INT 19
55766: DOUBLE
55767: EQUAL
55768: IFTRUE 55778
55770: LD_INT 23
55772: DOUBLE
55773: EQUAL
55774: IFTRUE 55778
55776: GO 55803
55778: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55779: LD_ADDR_VAR 0 3
55783: PUSH
55784: LD_INT 83
55786: PPUSH
55787: LD_VAR 0 1
55791: PPUSH
55792: CALL_OW 321
55796: PUSH
55797: LD_INT 2
55799: EQUAL
55800: ST_TO_ADDR
55801: GO 55903
55803: LD_INT 17
55805: DOUBLE
55806: EQUAL
55807: IFTRUE 55811
55809: GO 55836
55811: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55812: LD_ADDR_VAR 0 3
55816: PUSH
55817: LD_INT 39
55819: PPUSH
55820: LD_VAR 0 1
55824: PPUSH
55825: CALL_OW 321
55829: PUSH
55830: LD_INT 2
55832: EQUAL
55833: ST_TO_ADDR
55834: GO 55903
55836: LD_INT 18
55838: DOUBLE
55839: EQUAL
55840: IFTRUE 55844
55842: GO 55869
55844: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55845: LD_ADDR_VAR 0 3
55849: PUSH
55850: LD_INT 40
55852: PPUSH
55853: LD_VAR 0 1
55857: PPUSH
55858: CALL_OW 321
55862: PUSH
55863: LD_INT 2
55865: EQUAL
55866: ST_TO_ADDR
55867: GO 55903
55869: LD_INT 27
55871: DOUBLE
55872: EQUAL
55873: IFTRUE 55877
55875: GO 55902
55877: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55878: LD_ADDR_VAR 0 3
55882: PUSH
55883: LD_INT 35
55885: PPUSH
55886: LD_VAR 0 1
55890: PPUSH
55891: CALL_OW 321
55895: PUSH
55896: LD_INT 2
55898: EQUAL
55899: ST_TO_ADDR
55900: GO 55903
55902: POP
// end ;
55903: LD_VAR 0 3
55907: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55908: LD_INT 0
55910: PPUSH
55911: PPUSH
55912: PPUSH
55913: PPUSH
55914: PPUSH
55915: PPUSH
55916: PPUSH
55917: PPUSH
55918: PPUSH
55919: PPUSH
55920: PPUSH
// result := false ;
55921: LD_ADDR_VAR 0 6
55925: PUSH
55926: LD_INT 0
55928: ST_TO_ADDR
// if btype = b_depot then
55929: LD_VAR 0 2
55933: PUSH
55934: LD_INT 0
55936: EQUAL
55937: IFFALSE 55949
// begin result := true ;
55939: LD_ADDR_VAR 0 6
55943: PUSH
55944: LD_INT 1
55946: ST_TO_ADDR
// exit ;
55947: GO 56803
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55949: LD_VAR 0 1
55953: NOT
55954: IFTRUE 55979
55956: PUSH
55957: LD_VAR 0 1
55961: PPUSH
55962: CALL_OW 266
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: IN
55977: NOT
55978: OR
55979: IFTRUE 55988
55981: PUSH
55982: LD_VAR 0 2
55986: NOT
55987: OR
55988: IFTRUE 56024
55990: PUSH
55991: LD_VAR 0 5
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: LD_INT 4
56010: PUSH
56011: LD_INT 5
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: IN
56022: NOT
56023: OR
56024: IFTRUE 56043
56026: PUSH
56027: LD_VAR 0 3
56031: PPUSH
56032: LD_VAR 0 4
56036: PPUSH
56037: CALL_OW 488
56041: NOT
56042: OR
56043: IFFALSE 56047
// exit ;
56045: GO 56803
// side := GetSide ( depot ) ;
56047: LD_ADDR_VAR 0 9
56051: PUSH
56052: LD_VAR 0 1
56056: PPUSH
56057: CALL_OW 255
56061: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56062: LD_VAR 0 9
56066: PPUSH
56067: LD_VAR 0 2
56071: PPUSH
56072: CALL 55532 0 2
56076: NOT
56077: IFFALSE 56081
// exit ;
56079: GO 56803
// pom := GetBase ( depot ) ;
56081: LD_ADDR_VAR 0 10
56085: PUSH
56086: LD_VAR 0 1
56090: PPUSH
56091: CALL_OW 274
56095: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56096: LD_ADDR_VAR 0 11
56100: PUSH
56101: LD_VAR 0 2
56105: PPUSH
56106: LD_VAR 0 1
56110: PPUSH
56111: CALL_OW 248
56115: PPUSH
56116: CALL_OW 450
56120: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56121: LD_VAR 0 10
56125: PPUSH
56126: LD_INT 1
56128: PPUSH
56129: CALL_OW 275
56133: PUSH
56134: LD_VAR 0 11
56138: PUSH
56139: LD_INT 1
56141: ARRAY
56142: GREATEREQUAL
56143: IFFALSE 56169
56145: PUSH
56146: LD_VAR 0 10
56150: PPUSH
56151: LD_INT 2
56153: PPUSH
56154: CALL_OW 275
56158: PUSH
56159: LD_VAR 0 11
56163: PUSH
56164: LD_INT 2
56166: ARRAY
56167: GREATEREQUAL
56168: AND
56169: IFFALSE 56195
56171: PUSH
56172: LD_VAR 0 10
56176: PPUSH
56177: LD_INT 3
56179: PPUSH
56180: CALL_OW 275
56184: PUSH
56185: LD_VAR 0 11
56189: PUSH
56190: LD_INT 3
56192: ARRAY
56193: GREATEREQUAL
56194: AND
56195: NOT
56196: IFFALSE 56200
// exit ;
56198: GO 56803
// if GetBType ( depot ) = b_depot then
56200: LD_VAR 0 1
56204: PPUSH
56205: CALL_OW 266
56209: PUSH
56210: LD_INT 0
56212: EQUAL
56213: IFFALSE 56225
// dist := 28 else
56215: LD_ADDR_VAR 0 14
56219: PUSH
56220: LD_INT 28
56222: ST_TO_ADDR
56223: GO 56233
// dist := 36 ;
56225: LD_ADDR_VAR 0 14
56229: PUSH
56230: LD_INT 36
56232: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56233: LD_VAR 0 1
56237: PPUSH
56238: LD_VAR 0 3
56242: PPUSH
56243: LD_VAR 0 4
56247: PPUSH
56248: CALL_OW 297
56252: PUSH
56253: LD_VAR 0 14
56257: GREATER
56258: IFFALSE 56262
// exit ;
56260: GO 56803
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56262: LD_ADDR_VAR 0 12
56266: PUSH
56267: LD_VAR 0 2
56271: PPUSH
56272: LD_VAR 0 3
56276: PPUSH
56277: LD_VAR 0 4
56281: PPUSH
56282: LD_VAR 0 5
56286: PPUSH
56287: LD_VAR 0 1
56291: PPUSH
56292: CALL_OW 248
56296: PPUSH
56297: LD_INT 0
56299: PPUSH
56300: CALL 56808 0 6
56304: ST_TO_ADDR
// if not hexes then
56305: LD_VAR 0 12
56309: NOT
56310: IFFALSE 56314
// exit ;
56312: GO 56803
// hex := GetHexInfo ( x , y ) ;
56314: LD_ADDR_VAR 0 15
56318: PUSH
56319: LD_VAR 0 3
56323: PPUSH
56324: LD_VAR 0 4
56328: PPUSH
56329: CALL_OW 546
56333: ST_TO_ADDR
// if hex [ 1 ] then
56334: LD_VAR 0 15
56338: PUSH
56339: LD_INT 1
56341: ARRAY
56342: IFFALSE 56346
// exit ;
56344: GO 56803
// height := hex [ 2 ] ;
56346: LD_ADDR_VAR 0 13
56350: PUSH
56351: LD_VAR 0 15
56355: PUSH
56356: LD_INT 2
56358: ARRAY
56359: ST_TO_ADDR
// for i = 1 to hexes do
56360: LD_ADDR_VAR 0 7
56364: PUSH
56365: DOUBLE
56366: LD_INT 1
56368: DEC
56369: ST_TO_ADDR
56370: LD_VAR 0 12
56374: PUSH
56375: FOR_TO
56376: IFFALSE 56720
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56378: LD_VAR 0 12
56382: PUSH
56383: LD_VAR 0 7
56387: ARRAY
56388: PUSH
56389: LD_INT 1
56391: ARRAY
56392: PPUSH
56393: LD_VAR 0 12
56397: PUSH
56398: LD_VAR 0 7
56402: ARRAY
56403: PUSH
56404: LD_INT 2
56406: ARRAY
56407: PPUSH
56408: CALL_OW 488
56412: NOT
56413: IFTRUE 56455
56415: PUSH
56416: LD_VAR 0 12
56420: PUSH
56421: LD_VAR 0 7
56425: ARRAY
56426: PUSH
56427: LD_INT 1
56429: ARRAY
56430: PPUSH
56431: LD_VAR 0 12
56435: PUSH
56436: LD_VAR 0 7
56440: ARRAY
56441: PUSH
56442: LD_INT 2
56444: ARRAY
56445: PPUSH
56446: CALL_OW 428
56450: PUSH
56451: LD_INT 0
56453: GREATER
56454: OR
56455: IFTRUE 56493
56457: PUSH
56458: LD_VAR 0 12
56462: PUSH
56463: LD_VAR 0 7
56467: ARRAY
56468: PUSH
56469: LD_INT 1
56471: ARRAY
56472: PPUSH
56473: LD_VAR 0 12
56477: PUSH
56478: LD_VAR 0 7
56482: ARRAY
56483: PUSH
56484: LD_INT 2
56486: ARRAY
56487: PPUSH
56488: CALL_OW 351
56492: OR
56493: IFFALSE 56499
// exit ;
56495: POP
56496: POP
56497: GO 56803
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56499: LD_ADDR_VAR 0 8
56503: PUSH
56504: LD_VAR 0 12
56508: PUSH
56509: LD_VAR 0 7
56513: ARRAY
56514: PUSH
56515: LD_INT 1
56517: ARRAY
56518: PPUSH
56519: LD_VAR 0 12
56523: PUSH
56524: LD_VAR 0 7
56528: ARRAY
56529: PUSH
56530: LD_INT 2
56532: ARRAY
56533: PPUSH
56534: CALL_OW 546
56538: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56539: LD_VAR 0 8
56543: PUSH
56544: LD_INT 1
56546: ARRAY
56547: IFTRUE 56569
56549: PUSH
56550: LD_VAR 0 8
56554: PUSH
56555: LD_INT 2
56557: ARRAY
56558: PUSH
56559: LD_VAR 0 13
56563: PUSH
56564: LD_INT 2
56566: PLUS
56567: GREATER
56568: OR
56569: IFTRUE 56591
56571: PUSH
56572: LD_VAR 0 8
56576: PUSH
56577: LD_INT 2
56579: ARRAY
56580: PUSH
56581: LD_VAR 0 13
56585: PUSH
56586: LD_INT 2
56588: MINUS
56589: LESS
56590: OR
56591: IFTRUE 56659
56593: PUSH
56594: LD_VAR 0 8
56598: PUSH
56599: LD_INT 3
56601: ARRAY
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 8
56608: PUSH
56609: LD_INT 9
56611: PUSH
56612: LD_INT 10
56614: PUSH
56615: LD_INT 11
56617: PUSH
56618: LD_INT 12
56620: PUSH
56621: LD_INT 13
56623: PUSH
56624: LD_INT 16
56626: PUSH
56627: LD_INT 17
56629: PUSH
56630: LD_INT 18
56632: PUSH
56633: LD_INT 19
56635: PUSH
56636: LD_INT 20
56638: PUSH
56639: LD_INT 21
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: IN
56657: NOT
56658: OR
56659: IFTRUE 56672
56661: PUSH
56662: LD_VAR 0 8
56666: PUSH
56667: LD_INT 5
56669: ARRAY
56670: NOT
56671: OR
56672: IFTRUE 56712
56674: PUSH
56675: LD_VAR 0 8
56679: PUSH
56680: LD_INT 6
56682: ARRAY
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 7
56692: PUSH
56693: LD_INT 9
56695: PUSH
56696: LD_INT 10
56698: PUSH
56699: LD_INT 11
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: IN
56710: NOT
56711: OR
56712: IFFALSE 56718
// exit ;
56714: POP
56715: POP
56716: GO 56803
// end ;
56718: GO 56375
56720: POP
56721: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56722: LD_VAR 0 9
56726: PPUSH
56727: LD_VAR 0 3
56731: PPUSH
56732: LD_VAR 0 4
56736: PPUSH
56737: LD_INT 20
56739: PPUSH
56740: CALL 48622 0 4
56744: PUSH
56745: LD_INT 4
56747: ARRAY
56748: IFFALSE 56752
// exit ;
56750: GO 56803
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56752: LD_VAR 0 2
56756: PUSH
56757: LD_INT 29
56759: PUSH
56760: LD_INT 30
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: IN
56767: IFFALSE 56791
56769: PUSH
56770: LD_VAR 0 3
56774: PPUSH
56775: LD_VAR 0 4
56779: PPUSH
56780: LD_VAR 0 9
56784: PPUSH
56785: CALL_OW 440
56789: NOT
56790: AND
56791: IFFALSE 56795
// exit ;
56793: GO 56803
// result := true ;
56795: LD_ADDR_VAR 0 6
56799: PUSH
56800: LD_INT 1
56802: ST_TO_ADDR
// end ;
56803: LD_VAR 0 6
56807: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56808: LD_INT 0
56810: PPUSH
56811: PPUSH
56812: PPUSH
56813: PPUSH
56814: PPUSH
56815: PPUSH
56816: PPUSH
56817: PPUSH
56818: PPUSH
56819: PPUSH
56820: PPUSH
56821: PPUSH
56822: PPUSH
56823: PPUSH
56824: PPUSH
56825: PPUSH
56826: PPUSH
56827: PPUSH
56828: PPUSH
56829: PPUSH
56830: PPUSH
56831: PPUSH
56832: PPUSH
56833: PPUSH
56834: PPUSH
56835: PPUSH
56836: PPUSH
56837: PPUSH
56838: PPUSH
56839: PPUSH
56840: PPUSH
56841: PPUSH
56842: PPUSH
56843: PPUSH
56844: PPUSH
56845: PPUSH
56846: PPUSH
56847: PPUSH
56848: PPUSH
56849: PPUSH
56850: PPUSH
56851: PPUSH
56852: PPUSH
56853: PPUSH
56854: PPUSH
56855: PPUSH
56856: PPUSH
56857: PPUSH
56858: PPUSH
56859: PPUSH
56860: PPUSH
56861: PPUSH
56862: PPUSH
56863: PPUSH
56864: PPUSH
56865: PPUSH
56866: PPUSH
56867: PPUSH
// result = [ ] ;
56868: LD_ADDR_VAR 0 7
56872: PUSH
56873: EMPTY
56874: ST_TO_ADDR
// temp_list = [ ] ;
56875: LD_ADDR_VAR 0 9
56879: PUSH
56880: EMPTY
56881: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56882: LD_VAR 0 4
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 4
56901: PUSH
56902: LD_INT 5
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: IN
56913: NOT
56914: IFTRUE 56957
56916: PUSH
56917: LD_VAR 0 1
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: IN
56932: IFFALSE 56956
56934: PUSH
56935: LD_VAR 0 5
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: IN
56954: NOT
56955: AND
56956: OR
56957: IFFALSE 56961
// exit ;
56959: GO 75360
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56961: LD_VAR 0 1
56965: PUSH
56966: LD_INT 6
56968: PUSH
56969: LD_INT 7
56971: PUSH
56972: LD_INT 8
56974: PUSH
56975: LD_INT 13
56977: PUSH
56978: LD_INT 12
56980: PUSH
56981: LD_INT 15
56983: PUSH
56984: LD_INT 11
56986: PUSH
56987: LD_INT 14
56989: PUSH
56990: LD_INT 10
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: IN
57004: IFFALSE 57014
// btype = b_lab ;
57006: LD_ADDR_VAR 0 1
57010: PUSH
57011: LD_INT 6
57013: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57014: LD_VAR 0 6
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: IN
57033: NOT
57034: IFTRUE 57102
57036: PUSH
57037: LD_VAR 0 1
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: LD_INT 6
57056: PUSH
57057: LD_INT 36
57059: PUSH
57060: LD_INT 4
57062: PUSH
57063: LD_INT 5
57065: PUSH
57066: LD_INT 31
57068: PUSH
57069: LD_INT 32
57071: PUSH
57072: LD_INT 33
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: IN
57088: NOT
57089: IFFALSE 57101
57091: PUSH
57092: LD_VAR 0 6
57096: PUSH
57097: LD_INT 1
57099: EQUAL
57100: AND
57101: OR
57102: IFTRUE 57134
57104: PUSH
57105: LD_VAR 0 1
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: IN
57120: NOT
57121: IFFALSE 57133
57123: PUSH
57124: LD_VAR 0 6
57128: PUSH
57129: LD_INT 2
57131: EQUAL
57132: AND
57133: OR
57134: IFFALSE 57144
// mode = 0 ;
57136: LD_ADDR_VAR 0 6
57140: PUSH
57141: LD_INT 0
57143: ST_TO_ADDR
// case mode of 0 :
57144: LD_VAR 0 6
57148: PUSH
57149: LD_INT 0
57151: DOUBLE
57152: EQUAL
57153: IFTRUE 57157
57155: GO 68610
57157: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57158: LD_ADDR_VAR 0 11
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57351: LD_ADDR_VAR 0 12
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57547: LD_ADDR_VAR 0 13
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57746: LD_ADDR_VAR 0 14
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57942: LD_ADDR_VAR 0 15
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58135: LD_ADDR_VAR 0 16
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 3
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: LD_INT 3
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58328: LD_ADDR_VAR 0 17
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58558: LD_ADDR_VAR 0 18
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 2
58757: NEG
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58788: LD_ADDR_VAR 0 19
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59018: LD_ADDR_VAR 0 20
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59248: LD_ADDR_VAR 0 21
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59478: LD_ADDR_VAR 0 22
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: PUSH
59614: LD_INT 2
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 2
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59708: LD_ADDR_VAR 0 23
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 3
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59988: LD_ADDR_VAR 0 24
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60264: LD_ADDR_VAR 0 25
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 2
60360: NEG
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 3
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60538: LD_ADDR_VAR 0 26
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60814: LD_ADDR_VAR 0 27
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 2
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: NEG
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 3
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: LD_INT 2
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61094: LD_ADDR_VAR 0 28
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 3
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61376: LD_ADDR_VAR 0 29
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: LD_INT 3
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: NEG
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61655: LD_ADDR_VAR 0 30
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 3
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61933: LD_ADDR_VAR 0 31
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 2
62110: NEG
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 3
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 3
62176: NEG
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62211: LD_ADDR_VAR 0 32
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 2
62377: NEG
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: NEG
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: LD_INT 3
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 3
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: NEG
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62489: LD_ADDR_VAR 0 33
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 2
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: LD_INT 3
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 3
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: LD_INT 3
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62768: LD_ADDR_VAR 0 34
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: LD_INT 2
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: LD_INT 2
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 3
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 3
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 3
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63048: LD_ADDR_VAR 0 35
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63160: LD_ADDR_VAR 0 36
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63272: LD_ADDR_VAR 0 37
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63384: LD_ADDR_VAR 0 38
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63496: LD_ADDR_VAR 0 39
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63608: LD_ADDR_VAR 0 40
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63720: LD_ADDR_VAR 0 41
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: NEG
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: NEG
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 3
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 3
63963: PUSH
63964: LD_INT 3
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 3
64017: NEG
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 3
64029: NEG
64030: PUSH
64031: LD_INT 3
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64070: LD_ADDR_VAR 0 42
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: LD_INT 2
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: NEG
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 3
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 2
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: LD_INT 3
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: LD_INT 2
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: NEG
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 3
64379: NEG
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64420: LD_ADDR_VAR 0 43
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 2
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 2
64586: NEG
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: LD_INT 1
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: LD_INT 3
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 3
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 2
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 2
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 3
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: LD_INT 3
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 3
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 3
64716: NEG
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 3
64727: NEG
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64768: LD_ADDR_VAR 0 44
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: NEG
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 2
64958: NEG
64959: PUSH
64960: LD_INT 3
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 3
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 2
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 3
65042: NEG
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 3
65053: NEG
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 3
65065: NEG
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 3
65077: NEG
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65118: LD_ADDR_VAR 0 45
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: LD_INT 2
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 2
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 2
65243: PUSH
65244: LD_INT 2
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: LD_INT 2
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 2
65284: NEG
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 2
65296: NEG
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: LD_INT 3
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 3
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: LD_INT 2
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 3
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 2
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 3
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 3
65415: NEG
65416: PUSH
65417: LD_INT 2
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: LD_INT 3
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65468: LD_ADDR_VAR 0 46
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: LD_INT 2
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 2
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: NEG
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 1
65657: NEG
65658: PUSH
65659: LD_INT 3
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: LD_INT 3
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 2
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 2
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 3
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 3
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: LD_INT 3
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: LD_INT 3
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 2
65753: NEG
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 3
65764: NEG
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 3
65775: NEG
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65816: LD_ADDR_VAR 0 47
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: LD_INT 2
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 2
65931: NEG
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 2
65943: NEG
65944: PUSH
65945: LD_INT 2
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65967: LD_ADDR_VAR 0 48
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: LD_INT 2
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 2
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 2
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66114: LD_ADDR_VAR 0 49
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: LD_INT 1
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 1
66172: NEG
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 2
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: PUSH
66227: LD_INT 2
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 1
66236: PUSH
66237: LD_INT 2
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66258: LD_ADDR_VAR 0 50
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 1
66327: NEG
66328: PUSH
66329: LD_INT 1
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 2
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: LD_INT 2
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: LD_INT 2
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: NEG
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66402: LD_ADDR_VAR 0 51
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: NEG
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 2
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: NEG
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66549: LD_ADDR_VAR 0 52
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 1
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 2
66664: NEG
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66700: LD_ADDR_VAR 0 53
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: LD_INT 1
66720: NEG
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 1
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: LD_INT 2
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: LD_INT 2
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 2
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: LD_INT 2
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: LD_INT 2
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 2
66876: NEG
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 2
66887: NEG
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 2
66899: NEG
66900: PUSH
66901: LD_INT 2
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66930: LD_ADDR_VAR 0 54
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: LD_INT 1
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 1
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: LD_INT 2
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: LD_INT 2
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 2
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 2
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: LD_INT 2
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 2
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 2
67106: NEG
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 2
67117: NEG
67118: PUSH
67119: LD_INT 1
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 2
67129: NEG
67130: PUSH
67131: LD_INT 2
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67160: LD_ADDR_VAR 0 55
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: LD_INT 0
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: LD_INT 1
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: LD_INT 0
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: NEG
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 1
67229: NEG
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 1
67241: NEG
67242: PUSH
67243: LD_INT 2
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: LD_INT 2
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 2
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 2
67285: PUSH
67286: LD_INT 1
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 2
67295: PUSH
67296: LD_INT 2
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: LD_INT 2
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 1
67325: NEG
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 2
67336: NEG
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 2
67359: NEG
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67390: LD_ADDR_VAR 0 56
67394: PUSH
67395: LD_INT 0
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 1
67418: PUSH
67419: LD_INT 0
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 1
67428: PUSH
67429: LD_INT 1
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: LD_INT 1
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 0
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 2
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 2
67515: PUSH
67516: LD_INT 1
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: LD_INT 2
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 2
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 2
67566: NEG
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 2
67577: NEG
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 2
67589: NEG
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67620: LD_ADDR_VAR 0 57
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: LD_INT 0
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 0
67637: PUSH
67638: LD_INT 1
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: NEG
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: LD_INT 1
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 2
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: LD_INT 2
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 2
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 2
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: LD_INT 1
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: LD_INT 0
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 2
67807: NEG
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 2
67819: NEG
67820: PUSH
67821: LD_INT 2
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67850: LD_ADDR_VAR 0 58
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 1
67878: PUSH
67879: LD_INT 0
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: LD_INT 1
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 1
67908: NEG
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 1
67931: NEG
67932: PUSH
67933: LD_INT 2
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 1
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 2
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 2
67975: PUSH
67976: LD_INT 1
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: LD_INT 2
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: LD_INT 2
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: LD_INT 2
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 1
68015: NEG
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 2
68037: NEG
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: LD_INT 2
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68080: LD_ADDR_VAR 0 59
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 1
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 1
68149: NEG
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68168: LD_ADDR_VAR 0 60
68172: PUSH
68173: LD_INT 0
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: LD_INT 0
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 1
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 1
68226: NEG
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68256: LD_ADDR_VAR 0 61
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: LD_INT 1
68276: NEG
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 1
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 1
68314: NEG
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 1
68325: NEG
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68344: LD_ADDR_VAR 0 62
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: LD_INT 1
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: LD_INT 0
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: LD_INT 1
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 1
68402: NEG
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 1
68413: NEG
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68432: LD_ADDR_VAR 0 63
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 0
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 1
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 1
68470: PUSH
68471: LD_INT 1
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: LD_INT 1
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 1
68490: NEG
68491: PUSH
68492: LD_INT 0
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: LD_INT 1
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68520: LD_ADDR_VAR 0 64
68524: PUSH
68525: LD_INT 0
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 1
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 1
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 1
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: NEG
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: NEG
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: ST_TO_ADDR
// end ; 1 :
68608: GO 74505
68610: LD_INT 1
68612: DOUBLE
68613: EQUAL
68614: IFTRUE 68618
68616: GO 71241
68618: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68619: LD_ADDR_VAR 0 11
68623: PUSH
68624: LD_INT 1
68626: NEG
68627: PUSH
68628: LD_INT 3
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: LD_INT 3
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 1
68649: PUSH
68650: LD_INT 2
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: LIST
68662: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68663: LD_ADDR_VAR 0 12
68667: PUSH
68668: LD_INT 2
68670: PUSH
68671: LD_INT 1
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: LD_INT 0
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68704: LD_ADDR_VAR 0 13
68708: PUSH
68709: LD_INT 3
68711: PUSH
68712: LD_INT 2
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 3
68721: PUSH
68722: LD_INT 3
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 2
68731: PUSH
68732: LD_INT 3
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68744: LD_ADDR_VAR 0 14
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: LD_INT 3
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 3
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: NEG
68772: PUSH
68773: LD_INT 2
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68785: LD_ADDR_VAR 0 15
68789: PUSH
68790: LD_INT 2
68792: NEG
68793: PUSH
68794: LD_INT 1
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 3
68803: NEG
68804: PUSH
68805: LD_INT 0
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 3
68814: NEG
68815: PUSH
68816: LD_INT 1
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: LIST
68828: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68829: LD_ADDR_VAR 0 16
68833: PUSH
68834: LD_INT 2
68836: NEG
68837: PUSH
68838: LD_INT 3
68840: NEG
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 3
68848: NEG
68849: PUSH
68850: LD_INT 2
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: NEG
68861: PUSH
68862: LD_INT 3
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: LIST
68874: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68875: LD_ADDR_VAR 0 17
68879: PUSH
68880: LD_INT 1
68882: NEG
68883: PUSH
68884: LD_INT 3
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 3
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: LD_INT 2
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: LIST
68918: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68919: LD_ADDR_VAR 0 18
68923: PUSH
68924: LD_INT 2
68926: PUSH
68927: LD_INT 1
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 3
68947: PUSH
68948: LD_INT 1
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: LIST
68959: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68960: LD_ADDR_VAR 0 19
68964: PUSH
68965: LD_INT 3
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 2
68987: PUSH
68988: LD_INT 3
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: LIST
68999: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69000: LD_ADDR_VAR 0 20
69004: PUSH
69005: LD_INT 1
69007: PUSH
69008: LD_INT 3
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 0
69017: PUSH
69018: LD_INT 3
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 1
69027: NEG
69028: PUSH
69029: LD_INT 2
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: LIST
69040: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69041: LD_ADDR_VAR 0 21
69045: PUSH
69046: LD_INT 2
69048: NEG
69049: PUSH
69050: LD_INT 1
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 3
69059: NEG
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 3
69070: NEG
69071: PUSH
69072: LD_INT 1
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: LIST
69084: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69085: LD_ADDR_VAR 0 22
69089: PUSH
69090: LD_INT 2
69092: NEG
69093: PUSH
69094: LD_INT 3
69096: NEG
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: NEG
69105: PUSH
69106: LD_INT 2
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: NEG
69117: PUSH
69118: LD_INT 3
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69131: LD_ADDR_VAR 0 23
69135: PUSH
69136: LD_INT 0
69138: PUSH
69139: LD_INT 3
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 1
69149: NEG
69150: PUSH
69151: LD_INT 4
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 1
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69175: LD_ADDR_VAR 0 24
69179: PUSH
69180: LD_INT 3
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 3
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 4
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: LIST
69215: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69216: LD_ADDR_VAR 0 25
69220: PUSH
69221: LD_INT 3
69223: PUSH
69224: LD_INT 3
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 4
69233: PUSH
69234: LD_INT 3
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 3
69243: PUSH
69244: LD_INT 4
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: LIST
69255: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69256: LD_ADDR_VAR 0 26
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 3
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 1
69273: PUSH
69274: LD_INT 4
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: LIST
69296: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69297: LD_ADDR_VAR 0 27
69301: PUSH
69302: LD_INT 3
69304: NEG
69305: PUSH
69306: LD_INT 0
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 3
69315: NEG
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 4
69326: NEG
69327: PUSH
69328: LD_INT 1
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: LIST
69340: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69341: LD_ADDR_VAR 0 28
69345: PUSH
69346: LD_INT 3
69348: NEG
69349: PUSH
69350: LD_INT 3
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 3
69360: NEG
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: LIST
69386: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69387: LD_ADDR_VAR 0 29
69391: PUSH
69392: LD_INT 1
69394: NEG
69395: PUSH
69396: LD_INT 3
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 1
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: NEG
69429: PUSH
69430: LD_INT 4
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 0
69440: PUSH
69441: LD_INT 4
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 1
69451: PUSH
69452: LD_INT 3
69454: NEG
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: NEG
69463: PUSH
69464: LD_INT 5
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 0
69474: PUSH
69475: LD_INT 5
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 1
69485: PUSH
69486: LD_INT 4
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 1
69496: NEG
69497: PUSH
69498: LD_INT 6
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 0
69508: PUSH
69509: LD_INT 6
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 1
69519: PUSH
69520: LD_INT 5
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69542: LD_ADDR_VAR 0 30
69546: PUSH
69547: LD_INT 2
69549: PUSH
69550: LD_INT 1
69552: NEG
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 3
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 3
69570: PUSH
69571: LD_INT 1
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: LD_INT 1
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 4
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 4
69601: PUSH
69602: LD_INT 1
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 4
69611: PUSH
69612: LD_INT 1
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 5
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 5
69632: PUSH
69633: LD_INT 1
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 5
69642: PUSH
69643: LD_INT 1
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 6
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 6
69663: PUSH
69664: LD_INT 1
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69685: LD_ADDR_VAR 0 31
69689: PUSH
69690: LD_INT 3
69692: PUSH
69693: LD_INT 2
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 3
69702: PUSH
69703: LD_INT 3
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 2
69712: PUSH
69713: LD_INT 3
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 4
69722: PUSH
69723: LD_INT 3
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: LD_INT 4
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 3
69742: PUSH
69743: LD_INT 4
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 5
69752: PUSH
69753: LD_INT 4
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 5
69762: PUSH
69763: LD_INT 5
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 4
69772: PUSH
69773: LD_INT 5
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 6
69782: PUSH
69783: LD_INT 5
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 6
69792: PUSH
69793: LD_INT 6
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 5
69802: PUSH
69803: LD_INT 6
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69824: LD_ADDR_VAR 0 32
69828: PUSH
69829: LD_INT 1
69831: PUSH
69832: LD_INT 3
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: LD_INT 3
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: LD_INT 2
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: LD_INT 4
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 0
69872: PUSH
69873: LD_INT 4
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: LD_INT 3
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 1
69893: PUSH
69894: LD_INT 5
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 0
69903: PUSH
69904: LD_INT 5
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 1
69913: NEG
69914: PUSH
69915: LD_INT 4
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 1
69924: PUSH
69925: LD_INT 6
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: LD_INT 6
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 1
69944: NEG
69945: PUSH
69946: LD_INT 5
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69967: LD_ADDR_VAR 0 33
69971: PUSH
69972: LD_INT 2
69974: NEG
69975: PUSH
69976: LD_INT 1
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 3
69985: NEG
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 3
69996: NEG
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 4
70019: NEG
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 4
70030: NEG
70031: PUSH
70032: LD_INT 1
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 4
70042: NEG
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 5
70053: NEG
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 5
70064: NEG
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 5
70076: NEG
70077: PUSH
70078: LD_INT 1
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 6
70087: NEG
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 6
70098: NEG
70099: PUSH
70100: LD_INT 1
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70122: LD_ADDR_VAR 0 34
70126: PUSH
70127: LD_INT 2
70129: NEG
70130: PUSH
70131: LD_INT 3
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 3
70141: NEG
70142: PUSH
70143: LD_INT 2
70145: NEG
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 3
70153: NEG
70154: PUSH
70155: LD_INT 3
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 3
70165: NEG
70166: PUSH
70167: LD_INT 4
70169: NEG
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 4
70177: NEG
70178: PUSH
70179: LD_INT 3
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 4
70189: NEG
70190: PUSH
70191: LD_INT 4
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 4
70201: NEG
70202: PUSH
70203: LD_INT 5
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 5
70213: NEG
70214: PUSH
70215: LD_INT 4
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 5
70225: NEG
70226: PUSH
70227: LD_INT 5
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 5
70237: NEG
70238: PUSH
70239: LD_INT 6
70241: NEG
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 6
70249: NEG
70250: PUSH
70251: LD_INT 5
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 6
70261: NEG
70262: PUSH
70263: LD_INT 6
70265: NEG
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70285: LD_ADDR_VAR 0 41
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 2
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: NEG
70304: PUSH
70305: LD_INT 3
70307: NEG
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 1
70315: PUSH
70316: LD_INT 2
70318: NEG
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70329: LD_ADDR_VAR 0 42
70333: PUSH
70334: LD_INT 2
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 2
70346: PUSH
70347: LD_INT 1
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 3
70357: PUSH
70358: LD_INT 1
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: LIST
70369: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70370: LD_ADDR_VAR 0 43
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: LD_INT 2
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: LD_INT 2
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 2
70397: PUSH
70398: LD_INT 3
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: LIST
70409: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70410: LD_ADDR_VAR 0 44
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: LD_INT 2
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 1
70427: PUSH
70428: LD_INT 3
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 1
70437: NEG
70438: PUSH
70439: LD_INT 2
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: LIST
70450: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70451: LD_ADDR_VAR 0 45
70455: PUSH
70456: LD_INT 2
70458: NEG
70459: PUSH
70460: LD_INT 0
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 2
70469: NEG
70470: PUSH
70471: LD_INT 1
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 3
70480: NEG
70481: PUSH
70482: LD_INT 1
70484: NEG
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: LIST
70494: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70495: LD_ADDR_VAR 0 46
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: LD_INT 2
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 2
70514: NEG
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 3
70526: NEG
70527: PUSH
70528: LD_INT 2
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: LIST
70540: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70541: LD_ADDR_VAR 0 47
70545: PUSH
70546: LD_INT 2
70548: NEG
70549: PUSH
70550: LD_INT 3
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 1
70560: NEG
70561: PUSH
70562: LD_INT 3
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70574: LD_ADDR_VAR 0 48
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: LD_INT 2
70584: NEG
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 2
70592: PUSH
70593: LD_INT 1
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70605: LD_ADDR_VAR 0 49
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: LD_INT 1
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 3
70622: PUSH
70623: LD_INT 2
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70634: LD_ADDR_VAR 0 50
70638: PUSH
70639: LD_INT 2
70641: PUSH
70642: LD_INT 3
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: LD_INT 3
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70663: LD_ADDR_VAR 0 51
70667: PUSH
70668: LD_INT 1
70670: NEG
70671: PUSH
70672: LD_INT 2
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 2
70681: NEG
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70694: LD_ADDR_VAR 0 52
70698: PUSH
70699: LD_INT 3
70701: NEG
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 3
70713: NEG
70714: PUSH
70715: LD_INT 2
70717: NEG
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70727: LD_ADDR_VAR 0 53
70731: PUSH
70732: LD_INT 1
70734: NEG
70735: PUSH
70736: LD_INT 3
70738: NEG
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 0
70746: PUSH
70747: LD_INT 3
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 1
70757: PUSH
70758: LD_INT 2
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: LIST
70770: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70771: LD_ADDR_VAR 0 54
70775: PUSH
70776: LD_INT 2
70778: PUSH
70779: LD_INT 1
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 3
70789: PUSH
70790: LD_INT 0
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 3
70799: PUSH
70800: LD_INT 1
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: LIST
70811: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70812: LD_ADDR_VAR 0 55
70816: PUSH
70817: LD_INT 3
70819: PUSH
70820: LD_INT 2
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 3
70829: PUSH
70830: LD_INT 3
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: LD_INT 3
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70852: LD_ADDR_VAR 0 56
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: LD_INT 3
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 1
70879: NEG
70880: PUSH
70881: LD_INT 2
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: LIST
70892: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70893: LD_ADDR_VAR 0 57
70897: PUSH
70898: LD_INT 2
70900: NEG
70901: PUSH
70902: LD_INT 1
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 3
70911: NEG
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 3
70922: NEG
70923: PUSH
70924: LD_INT 1
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70937: LD_ADDR_VAR 0 58
70941: PUSH
70942: LD_INT 2
70944: NEG
70945: PUSH
70946: LD_INT 3
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 3
70956: NEG
70957: PUSH
70958: LD_INT 2
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 3
70968: NEG
70969: PUSH
70970: LD_INT 3
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: LIST
70982: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70983: LD_ADDR_VAR 0 59
70987: PUSH
70988: LD_INT 1
70990: NEG
70991: PUSH
70992: LD_INT 2
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 0
71002: PUSH
71003: LD_INT 2
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 1
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: LIST
71026: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71027: LD_ADDR_VAR 0 60
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: LD_INT 1
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 2
71045: PUSH
71046: LD_INT 0
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 2
71055: PUSH
71056: LD_INT 1
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: LIST
71067: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71068: LD_ADDR_VAR 0 61
71072: PUSH
71073: LD_INT 2
71075: PUSH
71076: LD_INT 1
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: PUSH
71086: LD_INT 2
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 1
71095: PUSH
71096: LD_INT 2
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: LIST
71107: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71108: LD_ADDR_VAR 0 62
71112: PUSH
71113: LD_INT 1
71115: PUSH
71116: LD_INT 2
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 0
71125: PUSH
71126: LD_INT 2
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 1
71135: NEG
71136: PUSH
71137: LD_INT 1
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: LIST
71148: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71149: LD_ADDR_VAR 0 63
71153: PUSH
71154: LD_INT 1
71156: NEG
71157: PUSH
71158: LD_INT 1
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 2
71167: NEG
71168: PUSH
71169: LD_INT 0
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 2
71178: NEG
71179: PUSH
71180: LD_INT 1
71182: NEG
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: LIST
71192: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71193: LD_ADDR_VAR 0 64
71197: PUSH
71198: LD_INT 1
71200: NEG
71201: PUSH
71202: LD_INT 2
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 2
71212: NEG
71213: PUSH
71214: LD_INT 1
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 2
71224: NEG
71225: PUSH
71226: LD_INT 2
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: LIST
71238: ST_TO_ADDR
// end ; 2 :
71239: GO 74505
71241: LD_INT 2
71243: DOUBLE
71244: EQUAL
71245: IFTRUE 71249
71247: GO 74504
71249: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71250: LD_ADDR_VAR 0 29
71254: PUSH
71255: LD_INT 4
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 4
71267: PUSH
71268: LD_INT 1
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 5
71278: PUSH
71279: LD_INT 0
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 5
71288: PUSH
71289: LD_INT 1
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 4
71298: PUSH
71299: LD_INT 1
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 3
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 3
71318: PUSH
71319: LD_INT 1
71321: NEG
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 3
71329: PUSH
71330: LD_INT 2
71332: NEG
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 5
71340: PUSH
71341: LD_INT 2
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 3
71350: PUSH
71351: LD_INT 3
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 3
71360: PUSH
71361: LD_INT 2
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 4
71370: PUSH
71371: LD_INT 3
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 4
71380: PUSH
71381: LD_INT 4
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 3
71390: PUSH
71391: LD_INT 4
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 2
71400: PUSH
71401: LD_INT 3
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 2
71410: PUSH
71411: LD_INT 2
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 4
71420: PUSH
71421: LD_INT 2
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 2
71430: PUSH
71431: LD_INT 4
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 0
71440: PUSH
71441: LD_INT 4
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: LD_INT 3
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 1
71460: PUSH
71461: LD_INT 4
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: LD_INT 5
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 5
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 1
71490: NEG
71491: PUSH
71492: LD_INT 4
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 1
71501: NEG
71502: PUSH
71503: LD_INT 3
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 2
71512: PUSH
71513: LD_INT 5
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 2
71522: NEG
71523: PUSH
71524: LD_INT 3
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 3
71544: NEG
71545: PUSH
71546: LD_INT 1
71548: NEG
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 2
71556: NEG
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 2
71567: NEG
71568: PUSH
71569: LD_INT 1
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 3
71578: NEG
71579: PUSH
71580: LD_INT 1
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 4
71589: NEG
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 4
71600: NEG
71601: PUSH
71602: LD_INT 1
71604: NEG
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: LD_INT 4
71612: NEG
71613: PUSH
71614: LD_INT 2
71616: NEG
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 2
71624: NEG
71625: PUSH
71626: LD_INT 2
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 4
71635: NEG
71636: PUSH
71637: LD_INT 4
71639: NEG
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 4
71647: NEG
71648: PUSH
71649: LD_INT 5
71651: NEG
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 3
71659: NEG
71660: PUSH
71661: LD_INT 4
71663: NEG
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 3
71671: NEG
71672: PUSH
71673: LD_INT 3
71675: NEG
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 4
71683: NEG
71684: PUSH
71685: LD_INT 3
71687: NEG
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 5
71695: NEG
71696: PUSH
71697: LD_INT 4
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 5
71707: NEG
71708: PUSH
71709: LD_INT 5
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 3
71719: NEG
71720: PUSH
71721: LD_INT 5
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 5
71731: NEG
71732: PUSH
71733: LD_INT 3
71735: NEG
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71788: LD_ADDR_VAR 0 30
71792: PUSH
71793: LD_INT 4
71795: PUSH
71796: LD_INT 4
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 4
71805: PUSH
71806: LD_INT 3
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 5
71815: PUSH
71816: LD_INT 4
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 5
71825: PUSH
71826: LD_INT 5
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: LD_INT 4
71835: PUSH
71836: LD_INT 5
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 3
71845: PUSH
71846: LD_INT 4
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 3
71855: PUSH
71856: LD_INT 3
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 5
71865: PUSH
71866: LD_INT 3
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 3
71875: PUSH
71876: LD_INT 5
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 0
71885: PUSH
71886: LD_INT 3
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 0
71895: PUSH
71896: LD_INT 2
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 1
71905: PUSH
71906: LD_INT 3
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: PUSH
71916: LD_INT 4
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 0
71925: PUSH
71926: LD_INT 4
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 1
71935: NEG
71936: PUSH
71937: LD_INT 3
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 1
71946: NEG
71947: PUSH
71948: LD_INT 2
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 2
71957: PUSH
71958: LD_INT 4
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 2
71967: NEG
71968: PUSH
71969: LD_INT 2
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_INT 4
71978: NEG
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 4
71989: NEG
71990: PUSH
71991: LD_INT 1
71993: NEG
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 3
72001: NEG
72002: PUSH
72003: LD_INT 0
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 3
72012: NEG
72013: PUSH
72014: LD_INT 1
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 4
72023: NEG
72024: PUSH
72025: LD_INT 1
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 5
72034: NEG
72035: PUSH
72036: LD_INT 0
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 5
72045: NEG
72046: PUSH
72047: LD_INT 1
72049: NEG
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 5
72057: NEG
72058: PUSH
72059: LD_INT 2
72061: NEG
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 3
72069: NEG
72070: PUSH
72071: LD_INT 2
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 3
72080: NEG
72081: PUSH
72082: LD_INT 3
72084: NEG
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 3
72092: NEG
72093: PUSH
72094: LD_INT 4
72096: NEG
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 2
72104: NEG
72105: PUSH
72106: LD_INT 3
72108: NEG
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_INT 2
72116: NEG
72117: PUSH
72118: LD_INT 2
72120: NEG
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 3
72128: NEG
72129: PUSH
72130: LD_INT 2
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 4
72140: NEG
72141: PUSH
72142: LD_INT 3
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 4
72152: NEG
72153: PUSH
72154: LD_INT 4
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 2
72164: NEG
72165: PUSH
72166: LD_INT 4
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 4
72176: NEG
72177: PUSH
72178: LD_INT 2
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 0
72188: PUSH
72189: LD_INT 4
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 0
72199: PUSH
72200: LD_INT 5
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: LD_INT 4
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 1
72221: PUSH
72222: LD_INT 3
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 0
72232: PUSH
72233: LD_INT 3
72235: NEG
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: PUSH
72241: LD_INT 1
72243: NEG
72244: PUSH
72245: LD_INT 4
72247: NEG
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 1
72255: NEG
72256: PUSH
72257: LD_INT 5
72259: NEG
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 2
72267: PUSH
72268: LD_INT 3
72270: NEG
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 2
72278: NEG
72279: PUSH
72280: LD_INT 5
72282: NEG
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72335: LD_ADDR_VAR 0 31
72339: PUSH
72340: LD_INT 0
72342: PUSH
72343: LD_INT 4
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 0
72352: PUSH
72353: LD_INT 3
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 1
72362: PUSH
72363: LD_INT 4
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 1
72372: PUSH
72373: LD_INT 5
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: LD_INT 5
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 1
72392: NEG
72393: PUSH
72394: LD_INT 4
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 1
72403: NEG
72404: PUSH
72405: LD_INT 3
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 2
72414: PUSH
72415: LD_INT 5
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 2
72424: NEG
72425: PUSH
72426: LD_INT 3
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 3
72435: NEG
72436: PUSH
72437: LD_INT 0
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 3
72446: NEG
72447: PUSH
72448: LD_INT 1
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 2
72458: NEG
72459: PUSH
72460: LD_INT 0
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 2
72469: NEG
72470: PUSH
72471: LD_INT 1
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 3
72480: NEG
72481: PUSH
72482: LD_INT 1
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 4
72491: NEG
72492: PUSH
72493: LD_INT 0
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 4
72502: NEG
72503: PUSH
72504: LD_INT 1
72506: NEG
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 4
72514: NEG
72515: PUSH
72516: LD_INT 2
72518: NEG
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 2
72526: NEG
72527: PUSH
72528: LD_INT 2
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 4
72537: NEG
72538: PUSH
72539: LD_INT 4
72541: NEG
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 4
72549: NEG
72550: PUSH
72551: LD_INT 5
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 3
72561: NEG
72562: PUSH
72563: LD_INT 4
72565: NEG
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 3
72573: NEG
72574: PUSH
72575: LD_INT 3
72577: NEG
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 4
72585: NEG
72586: PUSH
72587: LD_INT 3
72589: NEG
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 5
72597: NEG
72598: PUSH
72599: LD_INT 4
72601: NEG
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 5
72609: NEG
72610: PUSH
72611: LD_INT 5
72613: NEG
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 3
72621: NEG
72622: PUSH
72623: LD_INT 5
72625: NEG
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 5
72633: NEG
72634: PUSH
72635: LD_INT 3
72637: NEG
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 0
72645: PUSH
72646: LD_INT 3
72648: NEG
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PUSH
72654: LD_INT 0
72656: PUSH
72657: LD_INT 4
72659: NEG
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: LD_INT 3
72670: NEG
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 1
72678: PUSH
72679: LD_INT 2
72681: NEG
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 0
72689: PUSH
72690: LD_INT 2
72692: NEG
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_INT 1
72700: NEG
72701: PUSH
72702: LD_INT 3
72704: NEG
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 1
72712: NEG
72713: PUSH
72714: LD_INT 4
72716: NEG
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 2
72724: PUSH
72725: LD_INT 2
72727: NEG
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 2
72735: NEG
72736: PUSH
72737: LD_INT 4
72739: NEG
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 4
72747: PUSH
72748: LD_INT 0
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 4
72757: PUSH
72758: LD_INT 1
72760: NEG
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 5
72768: PUSH
72769: LD_INT 0
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 5
72778: PUSH
72779: LD_INT 1
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 4
72788: PUSH
72789: LD_INT 1
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 3
72798: PUSH
72799: LD_INT 0
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 3
72808: PUSH
72809: LD_INT 1
72811: NEG
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 3
72819: PUSH
72820: LD_INT 2
72822: NEG
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 5
72830: PUSH
72831: LD_INT 2
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72885: LD_ADDR_VAR 0 32
72889: PUSH
72890: LD_INT 4
72892: NEG
72893: PUSH
72894: LD_INT 0
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 4
72903: NEG
72904: PUSH
72905: LD_INT 1
72907: NEG
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 3
72915: NEG
72916: PUSH
72917: LD_INT 0
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 3
72926: NEG
72927: PUSH
72928: LD_INT 1
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 4
72937: NEG
72938: PUSH
72939: LD_INT 1
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 5
72948: NEG
72949: PUSH
72950: LD_INT 0
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 5
72959: NEG
72960: PUSH
72961: LD_INT 1
72963: NEG
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 5
72971: NEG
72972: PUSH
72973: LD_INT 2
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 3
72983: NEG
72984: PUSH
72985: LD_INT 2
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 3
72994: NEG
72995: PUSH
72996: LD_INT 3
72998: NEG
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 3
73006: NEG
73007: PUSH
73008: LD_INT 4
73010: NEG
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 2
73018: NEG
73019: PUSH
73020: LD_INT 3
73022: NEG
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 2
73030: NEG
73031: PUSH
73032: LD_INT 2
73034: NEG
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 3
73042: NEG
73043: PUSH
73044: LD_INT 2
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 4
73054: NEG
73055: PUSH
73056: LD_INT 3
73058: NEG
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 4
73066: NEG
73067: PUSH
73068: LD_INT 4
73070: NEG
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: LD_INT 2
73078: NEG
73079: PUSH
73080: LD_INT 4
73082: NEG
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 4
73090: NEG
73091: PUSH
73092: LD_INT 2
73094: NEG
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 0
73102: PUSH
73103: LD_INT 4
73105: NEG
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 0
73113: PUSH
73114: LD_INT 5
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 1
73124: PUSH
73125: LD_INT 4
73127: NEG
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 1
73135: PUSH
73136: LD_INT 3
73138: NEG
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 0
73146: PUSH
73147: LD_INT 3
73149: NEG
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 1
73157: NEG
73158: PUSH
73159: LD_INT 4
73161: NEG
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 1
73169: NEG
73170: PUSH
73171: LD_INT 5
73173: NEG
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 2
73181: PUSH
73182: LD_INT 3
73184: NEG
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 2
73192: NEG
73193: PUSH
73194: LD_INT 5
73196: NEG
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 3
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 3
73214: PUSH
73215: LD_INT 1
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 4
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 4
73235: PUSH
73236: LD_INT 1
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 3
73245: PUSH
73246: LD_INT 1
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 2
73255: PUSH
73256: LD_INT 0
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 2
73265: PUSH
73266: LD_INT 1
73268: NEG
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 2
73276: PUSH
73277: LD_INT 2
73279: NEG
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: LD_INT 4
73287: PUSH
73288: LD_INT 2
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_INT 4
73297: PUSH
73298: LD_INT 4
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: PUSH
73305: LD_INT 4
73307: PUSH
73308: LD_INT 3
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 5
73317: PUSH
73318: LD_INT 4
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 5
73327: PUSH
73328: LD_INT 5
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 4
73337: PUSH
73338: LD_INT 5
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 3
73347: PUSH
73348: LD_INT 4
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 3
73357: PUSH
73358: LD_INT 3
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 5
73367: PUSH
73368: LD_INT 3
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 3
73377: PUSH
73378: LD_INT 5
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: LIST
73393: LIST
73394: LIST
73395: LIST
73396: LIST
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73432: LD_ADDR_VAR 0 33
73436: PUSH
73437: LD_INT 4
73439: NEG
73440: PUSH
73441: LD_INT 4
73443: NEG
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 4
73451: NEG
73452: PUSH
73453: LD_INT 5
73455: NEG
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 3
73463: NEG
73464: PUSH
73465: LD_INT 4
73467: NEG
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 3
73475: NEG
73476: PUSH
73477: LD_INT 3
73479: NEG
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 4
73487: NEG
73488: PUSH
73489: LD_INT 3
73491: NEG
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 5
73499: NEG
73500: PUSH
73501: LD_INT 4
73503: NEG
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: LD_INT 5
73511: NEG
73512: PUSH
73513: LD_INT 5
73515: NEG
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 3
73523: NEG
73524: PUSH
73525: LD_INT 5
73527: NEG
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 5
73535: NEG
73536: PUSH
73537: LD_INT 3
73539: NEG
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 0
73547: PUSH
73548: LD_INT 3
73550: NEG
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 0
73558: PUSH
73559: LD_INT 4
73561: NEG
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 1
73569: PUSH
73570: LD_INT 3
73572: NEG
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 1
73580: PUSH
73581: LD_INT 2
73583: NEG
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 0
73591: PUSH
73592: LD_INT 2
73594: NEG
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: LD_INT 1
73602: NEG
73603: PUSH
73604: LD_INT 3
73606: NEG
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: PUSH
73612: LD_INT 1
73614: NEG
73615: PUSH
73616: LD_INT 4
73618: NEG
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 2
73626: PUSH
73627: LD_INT 2
73629: NEG
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 2
73637: NEG
73638: PUSH
73639: LD_INT 4
73641: NEG
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 4
73649: PUSH
73650: LD_INT 0
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 4
73659: PUSH
73660: LD_INT 1
73662: NEG
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: LD_INT 5
73670: PUSH
73671: LD_INT 0
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 5
73680: PUSH
73681: LD_INT 1
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 4
73690: PUSH
73691: LD_INT 1
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 3
73700: PUSH
73701: LD_INT 0
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 3
73710: PUSH
73711: LD_INT 1
73713: NEG
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: LD_INT 3
73721: PUSH
73722: LD_INT 2
73724: NEG
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 5
73732: PUSH
73733: LD_INT 2
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 3
73742: PUSH
73743: LD_INT 3
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 3
73752: PUSH
73753: LD_INT 2
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 4
73762: PUSH
73763: LD_INT 3
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: PUSH
73770: LD_INT 4
73772: PUSH
73773: LD_INT 4
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 3
73782: PUSH
73783: LD_INT 4
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: PUSH
73790: LD_INT 2
73792: PUSH
73793: LD_INT 3
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: PUSH
73800: LD_INT 2
73802: PUSH
73803: LD_INT 2
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: PUSH
73810: LD_INT 4
73812: PUSH
73813: LD_INT 2
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 2
73822: PUSH
73823: LD_INT 4
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: LD_INT 0
73832: PUSH
73833: LD_INT 4
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: PUSH
73840: LD_INT 0
73842: PUSH
73843: LD_INT 3
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: PUSH
73850: LD_INT 1
73852: PUSH
73853: LD_INT 4
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 1
73862: PUSH
73863: LD_INT 5
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PUSH
73870: LD_INT 0
73872: PUSH
73873: LD_INT 5
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 1
73882: NEG
73883: PUSH
73884: LD_INT 4
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PUSH
73891: LD_INT 1
73893: NEG
73894: PUSH
73895: LD_INT 3
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 2
73904: PUSH
73905: LD_INT 5
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: PUSH
73912: LD_INT 2
73914: NEG
73915: PUSH
73916: LD_INT 3
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: LIST
73969: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73970: LD_ADDR_VAR 0 34
73974: PUSH
73975: LD_INT 0
73977: PUSH
73978: LD_INT 4
73980: NEG
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 0
73988: PUSH
73989: LD_INT 5
73991: NEG
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 1
73999: PUSH
74000: LD_INT 4
74002: NEG
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_INT 1
74010: PUSH
74011: LD_INT 3
74013: NEG
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 0
74021: PUSH
74022: LD_INT 3
74024: NEG
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 1
74032: NEG
74033: PUSH
74034: LD_INT 4
74036: NEG
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 1
74044: NEG
74045: PUSH
74046: LD_INT 5
74048: NEG
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 2
74056: PUSH
74057: LD_INT 3
74059: NEG
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 2
74067: NEG
74068: PUSH
74069: LD_INT 5
74071: NEG
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 3
74079: PUSH
74080: LD_INT 0
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 3
74089: PUSH
74090: LD_INT 1
74092: NEG
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_INT 4
74100: PUSH
74101: LD_INT 0
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: LD_INT 4
74110: PUSH
74111: LD_INT 1
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 3
74120: PUSH
74121: LD_INT 1
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 2
74130: PUSH
74131: LD_INT 0
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 2
74140: PUSH
74141: LD_INT 1
74143: NEG
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 2
74151: PUSH
74152: LD_INT 2
74154: NEG
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 4
74162: PUSH
74163: LD_INT 2
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 4
74172: PUSH
74173: LD_INT 4
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 4
74182: PUSH
74183: LD_INT 3
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 5
74192: PUSH
74193: LD_INT 4
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: PUSH
74200: LD_INT 5
74202: PUSH
74203: LD_INT 5
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: PUSH
74210: LD_INT 4
74212: PUSH
74213: LD_INT 5
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PUSH
74220: LD_INT 3
74222: PUSH
74223: LD_INT 4
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: PUSH
74230: LD_INT 3
74232: PUSH
74233: LD_INT 3
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: LD_INT 5
74242: PUSH
74243: LD_INT 3
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: PUSH
74250: LD_INT 3
74252: PUSH
74253: LD_INT 5
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PUSH
74260: LD_INT 0
74262: PUSH
74263: LD_INT 3
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: LD_INT 0
74272: PUSH
74273: LD_INT 2
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: LD_INT 1
74282: PUSH
74283: LD_INT 3
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: PUSH
74290: LD_INT 1
74292: PUSH
74293: LD_INT 4
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PUSH
74300: LD_INT 0
74302: PUSH
74303: LD_INT 4
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 1
74312: NEG
74313: PUSH
74314: LD_INT 3
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: LD_INT 1
74323: NEG
74324: PUSH
74325: LD_INT 2
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: PUSH
74332: LD_INT 2
74334: PUSH
74335: LD_INT 4
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: PUSH
74342: LD_INT 2
74344: NEG
74345: PUSH
74346: LD_INT 2
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_INT 4
74355: NEG
74356: PUSH
74357: LD_INT 0
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: LD_INT 4
74366: NEG
74367: PUSH
74368: LD_INT 1
74370: NEG
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 3
74378: NEG
74379: PUSH
74380: LD_INT 0
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 3
74389: NEG
74390: PUSH
74391: LD_INT 1
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: PUSH
74398: LD_INT 4
74400: NEG
74401: PUSH
74402: LD_INT 1
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: PUSH
74409: LD_INT 5
74411: NEG
74412: PUSH
74413: LD_INT 0
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 5
74422: NEG
74423: PUSH
74424: LD_INT 1
74426: NEG
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 5
74434: NEG
74435: PUSH
74436: LD_INT 2
74438: NEG
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 3
74446: NEG
74447: PUSH
74448: LD_INT 2
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: ST_TO_ADDR
// end ; end ;
74502: GO 74505
74504: POP
// case btype of b_depot , b_warehouse :
74505: LD_VAR 0 1
74509: PUSH
74510: LD_INT 0
74512: DOUBLE
74513: EQUAL
74514: IFTRUE 74524
74516: LD_INT 1
74518: DOUBLE
74519: EQUAL
74520: IFTRUE 74524
74522: GO 74725
74524: POP
// case nation of nation_american :
74525: LD_VAR 0 5
74529: PUSH
74530: LD_INT 1
74532: DOUBLE
74533: EQUAL
74534: IFTRUE 74538
74536: GO 74594
74538: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74539: LD_ADDR_VAR 0 9
74543: PUSH
74544: LD_VAR 0 11
74548: PUSH
74549: LD_VAR 0 12
74553: PUSH
74554: LD_VAR 0 13
74558: PUSH
74559: LD_VAR 0 14
74563: PUSH
74564: LD_VAR 0 15
74568: PUSH
74569: LD_VAR 0 16
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: PUSH
74582: LD_VAR 0 4
74586: PUSH
74587: LD_INT 1
74589: PLUS
74590: ARRAY
74591: ST_TO_ADDR
74592: GO 74723
74594: LD_INT 2
74596: DOUBLE
74597: EQUAL
74598: IFTRUE 74602
74600: GO 74658
74602: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74603: LD_ADDR_VAR 0 9
74607: PUSH
74608: LD_VAR 0 17
74612: PUSH
74613: LD_VAR 0 18
74617: PUSH
74618: LD_VAR 0 19
74622: PUSH
74623: LD_VAR 0 20
74627: PUSH
74628: LD_VAR 0 21
74632: PUSH
74633: LD_VAR 0 22
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: PUSH
74646: LD_VAR 0 4
74650: PUSH
74651: LD_INT 1
74653: PLUS
74654: ARRAY
74655: ST_TO_ADDR
74656: GO 74723
74658: LD_INT 3
74660: DOUBLE
74661: EQUAL
74662: IFTRUE 74666
74664: GO 74722
74666: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74667: LD_ADDR_VAR 0 9
74671: PUSH
74672: LD_VAR 0 23
74676: PUSH
74677: LD_VAR 0 24
74681: PUSH
74682: LD_VAR 0 25
74686: PUSH
74687: LD_VAR 0 26
74691: PUSH
74692: LD_VAR 0 27
74696: PUSH
74697: LD_VAR 0 28
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: PUSH
74710: LD_VAR 0 4
74714: PUSH
74715: LD_INT 1
74717: PLUS
74718: ARRAY
74719: ST_TO_ADDR
74720: GO 74723
74722: POP
74723: GO 75278
74725: LD_INT 2
74727: DOUBLE
74728: EQUAL
74729: IFTRUE 74739
74731: LD_INT 3
74733: DOUBLE
74734: EQUAL
74735: IFTRUE 74739
74737: GO 74795
74739: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74740: LD_ADDR_VAR 0 9
74744: PUSH
74745: LD_VAR 0 29
74749: PUSH
74750: LD_VAR 0 30
74754: PUSH
74755: LD_VAR 0 31
74759: PUSH
74760: LD_VAR 0 32
74764: PUSH
74765: LD_VAR 0 33
74769: PUSH
74770: LD_VAR 0 34
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: PUSH
74783: LD_VAR 0 4
74787: PUSH
74788: LD_INT 1
74790: PLUS
74791: ARRAY
74792: ST_TO_ADDR
74793: GO 75278
74795: LD_INT 16
74797: DOUBLE
74798: EQUAL
74799: IFTRUE 74857
74801: LD_INT 17
74803: DOUBLE
74804: EQUAL
74805: IFTRUE 74857
74807: LD_INT 18
74809: DOUBLE
74810: EQUAL
74811: IFTRUE 74857
74813: LD_INT 19
74815: DOUBLE
74816: EQUAL
74817: IFTRUE 74857
74819: LD_INT 22
74821: DOUBLE
74822: EQUAL
74823: IFTRUE 74857
74825: LD_INT 20
74827: DOUBLE
74828: EQUAL
74829: IFTRUE 74857
74831: LD_INT 21
74833: DOUBLE
74834: EQUAL
74835: IFTRUE 74857
74837: LD_INT 23
74839: DOUBLE
74840: EQUAL
74841: IFTRUE 74857
74843: LD_INT 24
74845: DOUBLE
74846: EQUAL
74847: IFTRUE 74857
74849: LD_INT 25
74851: DOUBLE
74852: EQUAL
74853: IFTRUE 74857
74855: GO 74913
74857: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74858: LD_ADDR_VAR 0 9
74862: PUSH
74863: LD_VAR 0 35
74867: PUSH
74868: LD_VAR 0 36
74872: PUSH
74873: LD_VAR 0 37
74877: PUSH
74878: LD_VAR 0 38
74882: PUSH
74883: LD_VAR 0 39
74887: PUSH
74888: LD_VAR 0 40
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: PUSH
74901: LD_VAR 0 4
74905: PUSH
74906: LD_INT 1
74908: PLUS
74909: ARRAY
74910: ST_TO_ADDR
74911: GO 75278
74913: LD_INT 6
74915: DOUBLE
74916: EQUAL
74917: IFTRUE 74969
74919: LD_INT 7
74921: DOUBLE
74922: EQUAL
74923: IFTRUE 74969
74925: LD_INT 8
74927: DOUBLE
74928: EQUAL
74929: IFTRUE 74969
74931: LD_INT 13
74933: DOUBLE
74934: EQUAL
74935: IFTRUE 74969
74937: LD_INT 12
74939: DOUBLE
74940: EQUAL
74941: IFTRUE 74969
74943: LD_INT 15
74945: DOUBLE
74946: EQUAL
74947: IFTRUE 74969
74949: LD_INT 11
74951: DOUBLE
74952: EQUAL
74953: IFTRUE 74969
74955: LD_INT 14
74957: DOUBLE
74958: EQUAL
74959: IFTRUE 74969
74961: LD_INT 10
74963: DOUBLE
74964: EQUAL
74965: IFTRUE 74969
74967: GO 75025
74969: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74970: LD_ADDR_VAR 0 9
74974: PUSH
74975: LD_VAR 0 41
74979: PUSH
74980: LD_VAR 0 42
74984: PUSH
74985: LD_VAR 0 43
74989: PUSH
74990: LD_VAR 0 44
74994: PUSH
74995: LD_VAR 0 45
74999: PUSH
75000: LD_VAR 0 46
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: PUSH
75013: LD_VAR 0 4
75017: PUSH
75018: LD_INT 1
75020: PLUS
75021: ARRAY
75022: ST_TO_ADDR
75023: GO 75278
75025: LD_INT 36
75027: DOUBLE
75028: EQUAL
75029: IFTRUE 75033
75031: GO 75089
75033: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75034: LD_ADDR_VAR 0 9
75038: PUSH
75039: LD_VAR 0 47
75043: PUSH
75044: LD_VAR 0 48
75048: PUSH
75049: LD_VAR 0 49
75053: PUSH
75054: LD_VAR 0 50
75058: PUSH
75059: LD_VAR 0 51
75063: PUSH
75064: LD_VAR 0 52
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: PUSH
75077: LD_VAR 0 4
75081: PUSH
75082: LD_INT 1
75084: PLUS
75085: ARRAY
75086: ST_TO_ADDR
75087: GO 75278
75089: LD_INT 4
75091: DOUBLE
75092: EQUAL
75093: IFTRUE 75115
75095: LD_INT 5
75097: DOUBLE
75098: EQUAL
75099: IFTRUE 75115
75101: LD_INT 34
75103: DOUBLE
75104: EQUAL
75105: IFTRUE 75115
75107: LD_INT 37
75109: DOUBLE
75110: EQUAL
75111: IFTRUE 75115
75113: GO 75171
75115: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75116: LD_ADDR_VAR 0 9
75120: PUSH
75121: LD_VAR 0 53
75125: PUSH
75126: LD_VAR 0 54
75130: PUSH
75131: LD_VAR 0 55
75135: PUSH
75136: LD_VAR 0 56
75140: PUSH
75141: LD_VAR 0 57
75145: PUSH
75146: LD_VAR 0 58
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: PUSH
75159: LD_VAR 0 4
75163: PUSH
75164: LD_INT 1
75166: PLUS
75167: ARRAY
75168: ST_TO_ADDR
75169: GO 75278
75171: LD_INT 31
75173: DOUBLE
75174: EQUAL
75175: IFTRUE 75221
75177: LD_INT 32
75179: DOUBLE
75180: EQUAL
75181: IFTRUE 75221
75183: LD_INT 33
75185: DOUBLE
75186: EQUAL
75187: IFTRUE 75221
75189: LD_INT 27
75191: DOUBLE
75192: EQUAL
75193: IFTRUE 75221
75195: LD_INT 26
75197: DOUBLE
75198: EQUAL
75199: IFTRUE 75221
75201: LD_INT 28
75203: DOUBLE
75204: EQUAL
75205: IFTRUE 75221
75207: LD_INT 29
75209: DOUBLE
75210: EQUAL
75211: IFTRUE 75221
75213: LD_INT 30
75215: DOUBLE
75216: EQUAL
75217: IFTRUE 75221
75219: GO 75277
75221: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75222: LD_ADDR_VAR 0 9
75226: PUSH
75227: LD_VAR 0 59
75231: PUSH
75232: LD_VAR 0 60
75236: PUSH
75237: LD_VAR 0 61
75241: PUSH
75242: LD_VAR 0 62
75246: PUSH
75247: LD_VAR 0 63
75251: PUSH
75252: LD_VAR 0 64
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: PUSH
75265: LD_VAR 0 4
75269: PUSH
75270: LD_INT 1
75272: PLUS
75273: ARRAY
75274: ST_TO_ADDR
75275: GO 75278
75277: POP
// temp_list2 = [ ] ;
75278: LD_ADDR_VAR 0 10
75282: PUSH
75283: EMPTY
75284: ST_TO_ADDR
// for i in temp_list do
75285: LD_ADDR_VAR 0 8
75289: PUSH
75290: LD_VAR 0 9
75294: PUSH
75295: FOR_IN
75296: IFFALSE 75348
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75298: LD_ADDR_VAR 0 10
75302: PUSH
75303: LD_VAR 0 10
75307: PUSH
75308: LD_VAR 0 8
75312: PUSH
75313: LD_INT 1
75315: ARRAY
75316: PUSH
75317: LD_VAR 0 2
75321: PLUS
75322: PUSH
75323: LD_VAR 0 8
75327: PUSH
75328: LD_INT 2
75330: ARRAY
75331: PUSH
75332: LD_VAR 0 3
75336: PLUS
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: EMPTY
75343: LIST
75344: ADD
75345: ST_TO_ADDR
75346: GO 75295
75348: POP
75349: POP
// result = temp_list2 ;
75350: LD_ADDR_VAR 0 7
75354: PUSH
75355: LD_VAR 0 10
75359: ST_TO_ADDR
// end ;
75360: LD_VAR 0 7
75364: RET
// export function EnemyInRange ( unit , dist ) ; begin
75365: LD_INT 0
75367: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75368: LD_ADDR_VAR 0 3
75372: PUSH
75373: LD_VAR 0 1
75377: PPUSH
75378: CALL_OW 255
75382: PPUSH
75383: LD_VAR 0 1
75387: PPUSH
75388: CALL_OW 250
75392: PPUSH
75393: LD_VAR 0 1
75397: PPUSH
75398: CALL_OW 251
75402: PPUSH
75403: LD_VAR 0 2
75407: PPUSH
75408: CALL 48622 0 4
75412: PUSH
75413: LD_INT 4
75415: ARRAY
75416: ST_TO_ADDR
// end ;
75417: LD_VAR 0 3
75421: RET
// export function PlayerSeeMe ( unit ) ; begin
75422: LD_INT 0
75424: PPUSH
// result := See ( your_side , unit ) ;
75425: LD_ADDR_VAR 0 2
75429: PUSH
75430: LD_OWVAR 2
75434: PPUSH
75435: LD_VAR 0 1
75439: PPUSH
75440: CALL_OW 292
75444: ST_TO_ADDR
// end ;
75445: LD_VAR 0 2
75449: RET
// export function ReverseDir ( unit ) ; begin
75450: LD_INT 0
75452: PPUSH
// if not unit then
75453: LD_VAR 0 1
75457: NOT
75458: IFFALSE 75462
// exit ;
75460: GO 75485
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75462: LD_ADDR_VAR 0 2
75466: PUSH
75467: LD_VAR 0 1
75471: PPUSH
75472: CALL_OW 254
75476: PUSH
75477: LD_INT 3
75479: PLUS
75480: PUSH
75481: LD_INT 6
75483: MOD
75484: ST_TO_ADDR
// end ;
75485: LD_VAR 0 2
75489: RET
// export function ReverseArray ( array ) ; var i ; begin
75490: LD_INT 0
75492: PPUSH
75493: PPUSH
// if not array then
75494: LD_VAR 0 1
75498: NOT
75499: IFFALSE 75503
// exit ;
75501: GO 75558
// result := [ ] ;
75503: LD_ADDR_VAR 0 2
75507: PUSH
75508: EMPTY
75509: ST_TO_ADDR
// for i := array downto 1 do
75510: LD_ADDR_VAR 0 3
75514: PUSH
75515: DOUBLE
75516: LD_VAR 0 1
75520: INC
75521: ST_TO_ADDR
75522: LD_INT 1
75524: PUSH
75525: FOR_DOWNTO
75526: IFFALSE 75556
// result := Join ( result , array [ i ] ) ;
75528: LD_ADDR_VAR 0 2
75532: PUSH
75533: LD_VAR 0 2
75537: PPUSH
75538: LD_VAR 0 1
75542: PUSH
75543: LD_VAR 0 3
75547: ARRAY
75548: PPUSH
75549: CALL 80400 0 2
75553: ST_TO_ADDR
75554: GO 75525
75556: POP
75557: POP
// end ;
75558: LD_VAR 0 2
75562: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75563: LD_INT 0
75565: PPUSH
75566: PPUSH
75567: PPUSH
75568: PPUSH
75569: PPUSH
75570: PPUSH
// if not unit or not hexes then
75571: LD_VAR 0 1
75575: NOT
75576: IFTRUE 75585
75578: PUSH
75579: LD_VAR 0 2
75583: NOT
75584: OR
75585: IFFALSE 75589
// exit ;
75587: GO 75712
// dist := 9999 ;
75589: LD_ADDR_VAR 0 5
75593: PUSH
75594: LD_INT 9999
75596: ST_TO_ADDR
// for i = 1 to hexes do
75597: LD_ADDR_VAR 0 4
75601: PUSH
75602: DOUBLE
75603: LD_INT 1
75605: DEC
75606: ST_TO_ADDR
75607: LD_VAR 0 2
75611: PUSH
75612: FOR_TO
75613: IFFALSE 75700
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75615: LD_ADDR_VAR 0 6
75619: PUSH
75620: LD_VAR 0 1
75624: PPUSH
75625: LD_VAR 0 2
75629: PUSH
75630: LD_VAR 0 4
75634: ARRAY
75635: PUSH
75636: LD_INT 1
75638: ARRAY
75639: PPUSH
75640: LD_VAR 0 2
75644: PUSH
75645: LD_VAR 0 4
75649: ARRAY
75650: PUSH
75651: LD_INT 2
75653: ARRAY
75654: PPUSH
75655: CALL_OW 297
75659: ST_TO_ADDR
// if tdist < dist then
75660: LD_VAR 0 6
75664: PUSH
75665: LD_VAR 0 5
75669: LESS
75670: IFFALSE 75698
// begin hex := hexes [ i ] ;
75672: LD_ADDR_VAR 0 8
75676: PUSH
75677: LD_VAR 0 2
75681: PUSH
75682: LD_VAR 0 4
75686: ARRAY
75687: ST_TO_ADDR
// dist := tdist ;
75688: LD_ADDR_VAR 0 5
75692: PUSH
75693: LD_VAR 0 6
75697: ST_TO_ADDR
// end ; end ;
75698: GO 75612
75700: POP
75701: POP
// result := hex ;
75702: LD_ADDR_VAR 0 3
75706: PUSH
75707: LD_VAR 0 8
75711: ST_TO_ADDR
// end ;
75712: LD_VAR 0 3
75716: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75717: LD_INT 0
75719: PPUSH
75720: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75721: LD_VAR 0 1
75725: NOT
75726: IFTRUE 75765
75728: PUSH
75729: LD_VAR 0 1
75733: PUSH
75734: LD_INT 21
75736: PUSH
75737: LD_INT 2
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: LD_INT 23
75746: PUSH
75747: LD_INT 2
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: PUSH
75754: EMPTY
75755: LIST
75756: LIST
75757: PPUSH
75758: CALL_OW 69
75762: IN
75763: NOT
75764: OR
75765: IFFALSE 75769
// exit ;
75767: GO 75816
// for i = 1 to 3 do
75769: LD_ADDR_VAR 0 3
75773: PUSH
75774: DOUBLE
75775: LD_INT 1
75777: DEC
75778: ST_TO_ADDR
75779: LD_INT 3
75781: PUSH
75782: FOR_TO
75783: IFFALSE 75814
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75785: LD_VAR 0 1
75789: PPUSH
75790: CALL_OW 250
75794: PPUSH
75795: LD_VAR 0 1
75799: PPUSH
75800: CALL_OW 251
75804: PPUSH
75805: LD_INT 1
75807: PPUSH
75808: CALL_OW 453
75812: GO 75782
75814: POP
75815: POP
// end ;
75816: LD_VAR 0 2
75820: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75821: LD_INT 0
75823: PPUSH
75824: PPUSH
75825: PPUSH
75826: PPUSH
75827: PPUSH
75828: PPUSH
// if not unit or not enemy_unit then
75829: LD_VAR 0 1
75833: NOT
75834: IFTRUE 75843
75836: PUSH
75837: LD_VAR 0 2
75841: NOT
75842: OR
75843: IFFALSE 75847
// exit ;
75845: GO 76318
// if GetLives ( i ) < 250 then
75847: LD_VAR 0 4
75851: PPUSH
75852: CALL_OW 256
75856: PUSH
75857: LD_INT 250
75859: LESS
75860: IFFALSE 75873
// begin ComAutodestruct ( i ) ;
75862: LD_VAR 0 4
75866: PPUSH
75867: CALL 75717 0 1
// exit ;
75871: GO 76318
// end ; x := GetX ( enemy_unit ) ;
75873: LD_ADDR_VAR 0 7
75877: PUSH
75878: LD_VAR 0 2
75882: PPUSH
75883: CALL_OW 250
75887: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75888: LD_ADDR_VAR 0 8
75892: PUSH
75893: LD_VAR 0 2
75897: PPUSH
75898: CALL_OW 251
75902: ST_TO_ADDR
// if not x or not y then
75903: LD_VAR 0 7
75907: NOT
75908: IFTRUE 75917
75910: PUSH
75911: LD_VAR 0 8
75915: NOT
75916: OR
75917: IFFALSE 75921
// exit ;
75919: GO 76318
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75921: LD_ADDR_VAR 0 6
75925: PUSH
75926: LD_VAR 0 7
75930: PPUSH
75931: LD_INT 0
75933: PPUSH
75934: LD_INT 4
75936: PPUSH
75937: CALL_OW 272
75941: PUSH
75942: LD_VAR 0 8
75946: PPUSH
75947: LD_INT 0
75949: PPUSH
75950: LD_INT 4
75952: PPUSH
75953: CALL_OW 273
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: LD_VAR 0 7
75966: PPUSH
75967: LD_INT 1
75969: PPUSH
75970: LD_INT 4
75972: PPUSH
75973: CALL_OW 272
75977: PUSH
75978: LD_VAR 0 8
75982: PPUSH
75983: LD_INT 1
75985: PPUSH
75986: LD_INT 4
75988: PPUSH
75989: CALL_OW 273
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PUSH
75998: LD_VAR 0 7
76002: PPUSH
76003: LD_INT 2
76005: PPUSH
76006: LD_INT 4
76008: PPUSH
76009: CALL_OW 272
76013: PUSH
76014: LD_VAR 0 8
76018: PPUSH
76019: LD_INT 2
76021: PPUSH
76022: LD_INT 4
76024: PPUSH
76025: CALL_OW 273
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: LD_VAR 0 7
76038: PPUSH
76039: LD_INT 3
76041: PPUSH
76042: LD_INT 4
76044: PPUSH
76045: CALL_OW 272
76049: PUSH
76050: LD_VAR 0 8
76054: PPUSH
76055: LD_INT 3
76057: PPUSH
76058: LD_INT 4
76060: PPUSH
76061: CALL_OW 273
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: LD_VAR 0 7
76074: PPUSH
76075: LD_INT 4
76077: PPUSH
76078: LD_INT 4
76080: PPUSH
76081: CALL_OW 272
76085: PUSH
76086: LD_VAR 0 8
76090: PPUSH
76091: LD_INT 4
76093: PPUSH
76094: LD_INT 4
76096: PPUSH
76097: CALL_OW 273
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_VAR 0 7
76110: PPUSH
76111: LD_INT 5
76113: PPUSH
76114: LD_INT 4
76116: PPUSH
76117: CALL_OW 272
76121: PUSH
76122: LD_VAR 0 8
76126: PPUSH
76127: LD_INT 5
76129: PPUSH
76130: LD_INT 4
76132: PPUSH
76133: CALL_OW 273
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: ST_TO_ADDR
// for i = tmp downto 1 do
76150: LD_ADDR_VAR 0 4
76154: PUSH
76155: DOUBLE
76156: LD_VAR 0 6
76160: INC
76161: ST_TO_ADDR
76162: LD_INT 1
76164: PUSH
76165: FOR_DOWNTO
76166: IFFALSE 76269
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76168: LD_VAR 0 6
76172: PUSH
76173: LD_VAR 0 4
76177: ARRAY
76178: PUSH
76179: LD_INT 1
76181: ARRAY
76182: PPUSH
76183: LD_VAR 0 6
76187: PUSH
76188: LD_VAR 0 4
76192: ARRAY
76193: PUSH
76194: LD_INT 2
76196: ARRAY
76197: PPUSH
76198: CALL_OW 488
76202: NOT
76203: IFTRUE 76245
76205: PUSH
76206: LD_VAR 0 6
76210: PUSH
76211: LD_VAR 0 4
76215: ARRAY
76216: PUSH
76217: LD_INT 1
76219: ARRAY
76220: PPUSH
76221: LD_VAR 0 6
76225: PUSH
76226: LD_VAR 0 4
76230: ARRAY
76231: PUSH
76232: LD_INT 2
76234: ARRAY
76235: PPUSH
76236: CALL_OW 428
76240: PUSH
76241: LD_INT 0
76243: NONEQUAL
76244: OR
76245: IFFALSE 76267
// tmp := Delete ( tmp , i ) ;
76247: LD_ADDR_VAR 0 6
76251: PUSH
76252: LD_VAR 0 6
76256: PPUSH
76257: LD_VAR 0 4
76261: PPUSH
76262: CALL_OW 3
76266: ST_TO_ADDR
76267: GO 76165
76269: POP
76270: POP
// j := GetClosestHex ( unit , tmp ) ;
76271: LD_ADDR_VAR 0 5
76275: PUSH
76276: LD_VAR 0 1
76280: PPUSH
76281: LD_VAR 0 6
76285: PPUSH
76286: CALL 75563 0 2
76290: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76291: LD_VAR 0 1
76295: PPUSH
76296: LD_VAR 0 5
76300: PUSH
76301: LD_INT 1
76303: ARRAY
76304: PPUSH
76305: LD_VAR 0 5
76309: PUSH
76310: LD_INT 2
76312: ARRAY
76313: PPUSH
76314: CALL_OW 111
// end ;
76318: LD_VAR 0 3
76322: RET
// export function PrepareApemanSoldier ( ) ; begin
76323: LD_INT 0
76325: PPUSH
// uc_nation := 0 ;
76326: LD_ADDR_OWVAR 21
76330: PUSH
76331: LD_INT 0
76333: ST_TO_ADDR
// hc_sex := sex_male ;
76334: LD_ADDR_OWVAR 27
76338: PUSH
76339: LD_INT 1
76341: ST_TO_ADDR
// hc_name :=  ;
76342: LD_ADDR_OWVAR 26
76346: PUSH
76347: LD_STRING 
76349: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76350: LD_ADDR_OWVAR 28
76354: PUSH
76355: LD_INT 15
76357: ST_TO_ADDR
// hc_gallery :=  ;
76358: LD_ADDR_OWVAR 33
76362: PUSH
76363: LD_STRING 
76365: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76366: LD_ADDR_OWVAR 31
76370: PUSH
76371: LD_INT 0
76373: PPUSH
76374: LD_INT 3
76376: PPUSH
76377: CALL_OW 12
76381: PUSH
76382: LD_INT 0
76384: PPUSH
76385: LD_INT 3
76387: PPUSH
76388: CALL_OW 12
76392: PUSH
76393: LD_INT 0
76395: PUSH
76396: LD_INT 0
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76405: LD_ADDR_OWVAR 29
76409: PUSH
76410: LD_INT 12
76412: PUSH
76413: LD_INT 12
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: ST_TO_ADDR
// end ;
76420: LD_VAR 0 1
76424: RET
// export function PrepareApemanEngineer ( ) ; begin
76425: LD_INT 0
76427: PPUSH
// uc_nation := 0 ;
76428: LD_ADDR_OWVAR 21
76432: PUSH
76433: LD_INT 0
76435: ST_TO_ADDR
// hc_sex := sex_male ;
76436: LD_ADDR_OWVAR 27
76440: PUSH
76441: LD_INT 1
76443: ST_TO_ADDR
// hc_name :=  ;
76444: LD_ADDR_OWVAR 26
76448: PUSH
76449: LD_STRING 
76451: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76452: LD_ADDR_OWVAR 28
76456: PUSH
76457: LD_INT 16
76459: ST_TO_ADDR
// hc_gallery :=  ;
76460: LD_ADDR_OWVAR 33
76464: PUSH
76465: LD_STRING 
76467: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76468: LD_ADDR_OWVAR 31
76472: PUSH
76473: LD_INT 0
76475: PPUSH
76476: LD_INT 3
76478: PPUSH
76479: CALL_OW 12
76483: PUSH
76484: LD_INT 0
76486: PPUSH
76487: LD_INT 3
76489: PPUSH
76490: CALL_OW 12
76494: PUSH
76495: LD_INT 0
76497: PUSH
76498: LD_INT 0
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76507: LD_ADDR_OWVAR 29
76511: PUSH
76512: LD_INT 12
76514: PUSH
76515: LD_INT 12
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: ST_TO_ADDR
// end ;
76522: LD_VAR 0 1
76526: RET
// export function PrepareApeman ( agressivity ) ; begin
76527: LD_INT 0
76529: PPUSH
// uc_side := 0 ;
76530: LD_ADDR_OWVAR 20
76534: PUSH
76535: LD_INT 0
76537: ST_TO_ADDR
// uc_nation := 0 ;
76538: LD_ADDR_OWVAR 21
76542: PUSH
76543: LD_INT 0
76545: ST_TO_ADDR
// hc_sex := sex_male ;
76546: LD_ADDR_OWVAR 27
76550: PUSH
76551: LD_INT 1
76553: ST_TO_ADDR
// hc_class := class_apeman ;
76554: LD_ADDR_OWVAR 28
76558: PUSH
76559: LD_INT 12
76561: ST_TO_ADDR
// hc_gallery :=  ;
76562: LD_ADDR_OWVAR 33
76566: PUSH
76567: LD_STRING 
76569: ST_TO_ADDR
// hc_name :=  ;
76570: LD_ADDR_OWVAR 26
76574: PUSH
76575: LD_STRING 
76577: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76578: LD_ADDR_OWVAR 29
76582: PUSH
76583: LD_INT 12
76585: PUSH
76586: LD_INT 12
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: ST_TO_ADDR
// if agressivity = 0 then
76593: LD_VAR 0 1
76597: PUSH
76598: LD_INT 0
76600: EQUAL
76601: IFFALSE 76613
// hc_agressivity := 0 else
76603: LD_ADDR_OWVAR 35
76607: PUSH
76608: LD_INT 0
76610: ST_TO_ADDR
76611: GO 76634
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76613: LD_ADDR_OWVAR 35
76617: PUSH
76618: LD_VAR 0 1
76622: NEG
76623: PPUSH
76624: LD_VAR 0 1
76628: PPUSH
76629: CALL_OW 12
76633: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76634: LD_ADDR_OWVAR 31
76638: PUSH
76639: LD_INT 0
76641: PPUSH
76642: LD_INT 3
76644: PPUSH
76645: CALL_OW 12
76649: PUSH
76650: LD_INT 0
76652: PPUSH
76653: LD_INT 3
76655: PPUSH
76656: CALL_OW 12
76660: PUSH
76661: LD_INT 0
76663: PUSH
76664: LD_INT 0
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: ST_TO_ADDR
// end ;
76673: LD_VAR 0 2
76677: RET
// export function PrepareTiger ( agressivity ) ; begin
76678: LD_INT 0
76680: PPUSH
// uc_side := 0 ;
76681: LD_ADDR_OWVAR 20
76685: PUSH
76686: LD_INT 0
76688: ST_TO_ADDR
// uc_nation := 0 ;
76689: LD_ADDR_OWVAR 21
76693: PUSH
76694: LD_INT 0
76696: ST_TO_ADDR
// InitHc ;
76697: CALL_OW 19
// hc_class := class_tiger ;
76701: LD_ADDR_OWVAR 28
76705: PUSH
76706: LD_INT 14
76708: ST_TO_ADDR
// hc_gallery :=  ;
76709: LD_ADDR_OWVAR 33
76713: PUSH
76714: LD_STRING 
76716: ST_TO_ADDR
// hc_name :=  ;
76717: LD_ADDR_OWVAR 26
76721: PUSH
76722: LD_STRING 
76724: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76725: LD_ADDR_OWVAR 35
76729: PUSH
76730: LD_VAR 0 1
76734: NEG
76735: PPUSH
76736: LD_VAR 0 1
76740: PPUSH
76741: CALL_OW 12
76745: ST_TO_ADDR
// end ;
76746: LD_VAR 0 2
76750: RET
// export function PrepareEnchidna ( ) ; begin
76751: LD_INT 0
76753: PPUSH
// uc_side := 0 ;
76754: LD_ADDR_OWVAR 20
76758: PUSH
76759: LD_INT 0
76761: ST_TO_ADDR
// uc_nation := 0 ;
76762: LD_ADDR_OWVAR 21
76766: PUSH
76767: LD_INT 0
76769: ST_TO_ADDR
// InitHc ;
76770: CALL_OW 19
// hc_class := class_baggie ;
76774: LD_ADDR_OWVAR 28
76778: PUSH
76779: LD_INT 13
76781: ST_TO_ADDR
// hc_gallery :=  ;
76782: LD_ADDR_OWVAR 33
76786: PUSH
76787: LD_STRING 
76789: ST_TO_ADDR
// hc_name :=  ;
76790: LD_ADDR_OWVAR 26
76794: PUSH
76795: LD_STRING 
76797: ST_TO_ADDR
// end ;
76798: LD_VAR 0 1
76802: RET
// export function PrepareFrog ( ) ; begin
76803: LD_INT 0
76805: PPUSH
// uc_side := 0 ;
76806: LD_ADDR_OWVAR 20
76810: PUSH
76811: LD_INT 0
76813: ST_TO_ADDR
// uc_nation := 0 ;
76814: LD_ADDR_OWVAR 21
76818: PUSH
76819: LD_INT 0
76821: ST_TO_ADDR
// InitHc ;
76822: CALL_OW 19
// hc_class := class_frog ;
76826: LD_ADDR_OWVAR 28
76830: PUSH
76831: LD_INT 19
76833: ST_TO_ADDR
// hc_gallery :=  ;
76834: LD_ADDR_OWVAR 33
76838: PUSH
76839: LD_STRING 
76841: ST_TO_ADDR
// hc_name :=  ;
76842: LD_ADDR_OWVAR 26
76846: PUSH
76847: LD_STRING 
76849: ST_TO_ADDR
// end ;
76850: LD_VAR 0 1
76854: RET
// export function PrepareFish ( ) ; begin
76855: LD_INT 0
76857: PPUSH
// uc_side := 0 ;
76858: LD_ADDR_OWVAR 20
76862: PUSH
76863: LD_INT 0
76865: ST_TO_ADDR
// uc_nation := 0 ;
76866: LD_ADDR_OWVAR 21
76870: PUSH
76871: LD_INT 0
76873: ST_TO_ADDR
// InitHc ;
76874: CALL_OW 19
// hc_class := class_fish ;
76878: LD_ADDR_OWVAR 28
76882: PUSH
76883: LD_INT 20
76885: ST_TO_ADDR
// hc_gallery :=  ;
76886: LD_ADDR_OWVAR 33
76890: PUSH
76891: LD_STRING 
76893: ST_TO_ADDR
// hc_name :=  ;
76894: LD_ADDR_OWVAR 26
76898: PUSH
76899: LD_STRING 
76901: ST_TO_ADDR
// end ;
76902: LD_VAR 0 1
76906: RET
// export function PrepareBird ( ) ; begin
76907: LD_INT 0
76909: PPUSH
// uc_side := 0 ;
76910: LD_ADDR_OWVAR 20
76914: PUSH
76915: LD_INT 0
76917: ST_TO_ADDR
// uc_nation := 0 ;
76918: LD_ADDR_OWVAR 21
76922: PUSH
76923: LD_INT 0
76925: ST_TO_ADDR
// InitHc ;
76926: CALL_OW 19
// hc_class := class_phororhacos ;
76930: LD_ADDR_OWVAR 28
76934: PUSH
76935: LD_INT 18
76937: ST_TO_ADDR
// hc_gallery :=  ;
76938: LD_ADDR_OWVAR 33
76942: PUSH
76943: LD_STRING 
76945: ST_TO_ADDR
// hc_name :=  ;
76946: LD_ADDR_OWVAR 26
76950: PUSH
76951: LD_STRING 
76953: ST_TO_ADDR
// end ;
76954: LD_VAR 0 1
76958: RET
// export function PrepareHorse ( ) ; begin
76959: LD_INT 0
76961: PPUSH
// uc_side := 0 ;
76962: LD_ADDR_OWVAR 20
76966: PUSH
76967: LD_INT 0
76969: ST_TO_ADDR
// uc_nation := 0 ;
76970: LD_ADDR_OWVAR 21
76974: PUSH
76975: LD_INT 0
76977: ST_TO_ADDR
// InitHc ;
76978: CALL_OW 19
// hc_class := class_horse ;
76982: LD_ADDR_OWVAR 28
76986: PUSH
76987: LD_INT 21
76989: ST_TO_ADDR
// hc_gallery :=  ;
76990: LD_ADDR_OWVAR 33
76994: PUSH
76995: LD_STRING 
76997: ST_TO_ADDR
// hc_name :=  ;
76998: LD_ADDR_OWVAR 26
77002: PUSH
77003: LD_STRING 
77005: ST_TO_ADDR
// end ;
77006: LD_VAR 0 1
77010: RET
// export function PrepareMastodont ( ) ; begin
77011: LD_INT 0
77013: PPUSH
// uc_side := 0 ;
77014: LD_ADDR_OWVAR 20
77018: PUSH
77019: LD_INT 0
77021: ST_TO_ADDR
// uc_nation := 0 ;
77022: LD_ADDR_OWVAR 21
77026: PUSH
77027: LD_INT 0
77029: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77030: LD_ADDR_OWVAR 37
77034: PUSH
77035: LD_INT 31
77037: ST_TO_ADDR
// vc_control := control_rider ;
77038: LD_ADDR_OWVAR 38
77042: PUSH
77043: LD_INT 4
77045: ST_TO_ADDR
// end ;
77046: LD_VAR 0 1
77050: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77051: LD_INT 0
77053: PPUSH
77054: PPUSH
77055: PPUSH
// uc_side = 0 ;
77056: LD_ADDR_OWVAR 20
77060: PUSH
77061: LD_INT 0
77063: ST_TO_ADDR
// uc_nation = 0 ;
77064: LD_ADDR_OWVAR 21
77068: PUSH
77069: LD_INT 0
77071: ST_TO_ADDR
// InitHc_All ( ) ;
77072: CALL_OW 584
// InitVc ;
77076: CALL_OW 20
// if mastodonts then
77080: LD_VAR 0 6
77084: IFFALSE 77151
// for i = 1 to mastodonts do
77086: LD_ADDR_VAR 0 11
77090: PUSH
77091: DOUBLE
77092: LD_INT 1
77094: DEC
77095: ST_TO_ADDR
77096: LD_VAR 0 6
77100: PUSH
77101: FOR_TO
77102: IFFALSE 77149
// begin vc_chassis := 31 ;
77104: LD_ADDR_OWVAR 37
77108: PUSH
77109: LD_INT 31
77111: ST_TO_ADDR
// vc_control := control_rider ;
77112: LD_ADDR_OWVAR 38
77116: PUSH
77117: LD_INT 4
77119: ST_TO_ADDR
// animal := CreateVehicle ;
77120: LD_ADDR_VAR 0 12
77124: PUSH
77125: CALL_OW 45
77129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77130: LD_VAR 0 12
77134: PPUSH
77135: LD_VAR 0 8
77139: PPUSH
77140: LD_INT 0
77142: PPUSH
77143: CALL 79293 0 3
// end ;
77147: GO 77101
77149: POP
77150: POP
// if horses then
77151: LD_VAR 0 5
77155: IFFALSE 77222
// for i = 1 to horses do
77157: LD_ADDR_VAR 0 11
77161: PUSH
77162: DOUBLE
77163: LD_INT 1
77165: DEC
77166: ST_TO_ADDR
77167: LD_VAR 0 5
77171: PUSH
77172: FOR_TO
77173: IFFALSE 77220
// begin hc_class := 21 ;
77175: LD_ADDR_OWVAR 28
77179: PUSH
77180: LD_INT 21
77182: ST_TO_ADDR
// hc_gallery :=  ;
77183: LD_ADDR_OWVAR 33
77187: PUSH
77188: LD_STRING 
77190: ST_TO_ADDR
// animal := CreateHuman ;
77191: LD_ADDR_VAR 0 12
77195: PUSH
77196: CALL_OW 44
77200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77201: LD_VAR 0 12
77205: PPUSH
77206: LD_VAR 0 8
77210: PPUSH
77211: LD_INT 0
77213: PPUSH
77214: CALL 79293 0 3
// end ;
77218: GO 77172
77220: POP
77221: POP
// if birds then
77222: LD_VAR 0 1
77226: IFFALSE 77293
// for i = 1 to birds do
77228: LD_ADDR_VAR 0 11
77232: PUSH
77233: DOUBLE
77234: LD_INT 1
77236: DEC
77237: ST_TO_ADDR
77238: LD_VAR 0 1
77242: PUSH
77243: FOR_TO
77244: IFFALSE 77291
// begin hc_class := 18 ;
77246: LD_ADDR_OWVAR 28
77250: PUSH
77251: LD_INT 18
77253: ST_TO_ADDR
// hc_gallery =  ;
77254: LD_ADDR_OWVAR 33
77258: PUSH
77259: LD_STRING 
77261: ST_TO_ADDR
// animal := CreateHuman ;
77262: LD_ADDR_VAR 0 12
77266: PUSH
77267: CALL_OW 44
77271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77272: LD_VAR 0 12
77276: PPUSH
77277: LD_VAR 0 8
77281: PPUSH
77282: LD_INT 0
77284: PPUSH
77285: CALL 79293 0 3
// end ;
77289: GO 77243
77291: POP
77292: POP
// if tigers then
77293: LD_VAR 0 2
77297: IFFALSE 77381
// for i = 1 to tigers do
77299: LD_ADDR_VAR 0 11
77303: PUSH
77304: DOUBLE
77305: LD_INT 1
77307: DEC
77308: ST_TO_ADDR
77309: LD_VAR 0 2
77313: PUSH
77314: FOR_TO
77315: IFFALSE 77379
// begin hc_class = class_tiger ;
77317: LD_ADDR_OWVAR 28
77321: PUSH
77322: LD_INT 14
77324: ST_TO_ADDR
// hc_gallery =  ;
77325: LD_ADDR_OWVAR 33
77329: PUSH
77330: LD_STRING 
77332: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77333: LD_ADDR_OWVAR 35
77337: PUSH
77338: LD_INT 7
77340: NEG
77341: PPUSH
77342: LD_INT 7
77344: PPUSH
77345: CALL_OW 12
77349: ST_TO_ADDR
// animal := CreateHuman ;
77350: LD_ADDR_VAR 0 12
77354: PUSH
77355: CALL_OW 44
77359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77360: LD_VAR 0 12
77364: PPUSH
77365: LD_VAR 0 8
77369: PPUSH
77370: LD_INT 0
77372: PPUSH
77373: CALL 79293 0 3
// end ;
77377: GO 77314
77379: POP
77380: POP
// if apemans then
77381: LD_VAR 0 3
77385: IFFALSE 77508
// for i = 1 to apemans do
77387: LD_ADDR_VAR 0 11
77391: PUSH
77392: DOUBLE
77393: LD_INT 1
77395: DEC
77396: ST_TO_ADDR
77397: LD_VAR 0 3
77401: PUSH
77402: FOR_TO
77403: IFFALSE 77506
// begin hc_class = class_apeman ;
77405: LD_ADDR_OWVAR 28
77409: PUSH
77410: LD_INT 12
77412: ST_TO_ADDR
// hc_gallery =  ;
77413: LD_ADDR_OWVAR 33
77417: PUSH
77418: LD_STRING 
77420: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77421: LD_ADDR_OWVAR 35
77425: PUSH
77426: LD_INT 2
77428: NEG
77429: PPUSH
77430: LD_INT 2
77432: PPUSH
77433: CALL_OW 12
77437: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77438: LD_ADDR_OWVAR 31
77442: PUSH
77443: LD_INT 1
77445: PPUSH
77446: LD_INT 3
77448: PPUSH
77449: CALL_OW 12
77453: PUSH
77454: LD_INT 1
77456: PPUSH
77457: LD_INT 3
77459: PPUSH
77460: CALL_OW 12
77464: PUSH
77465: LD_INT 0
77467: PUSH
77468: LD_INT 0
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: ST_TO_ADDR
// animal := CreateHuman ;
77477: LD_ADDR_VAR 0 12
77481: PUSH
77482: CALL_OW 44
77486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77487: LD_VAR 0 12
77491: PPUSH
77492: LD_VAR 0 8
77496: PPUSH
77497: LD_INT 0
77499: PPUSH
77500: CALL 79293 0 3
// end ;
77504: GO 77402
77506: POP
77507: POP
// if enchidnas then
77508: LD_VAR 0 4
77512: IFFALSE 77579
// for i = 1 to enchidnas do
77514: LD_ADDR_VAR 0 11
77518: PUSH
77519: DOUBLE
77520: LD_INT 1
77522: DEC
77523: ST_TO_ADDR
77524: LD_VAR 0 4
77528: PUSH
77529: FOR_TO
77530: IFFALSE 77577
// begin hc_class = 13 ;
77532: LD_ADDR_OWVAR 28
77536: PUSH
77537: LD_INT 13
77539: ST_TO_ADDR
// hc_gallery =  ;
77540: LD_ADDR_OWVAR 33
77544: PUSH
77545: LD_STRING 
77547: ST_TO_ADDR
// animal := CreateHuman ;
77548: LD_ADDR_VAR 0 12
77552: PUSH
77553: CALL_OW 44
77557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77558: LD_VAR 0 12
77562: PPUSH
77563: LD_VAR 0 8
77567: PPUSH
77568: LD_INT 0
77570: PPUSH
77571: CALL 79293 0 3
// end ;
77575: GO 77529
77577: POP
77578: POP
// if fishes then
77579: LD_VAR 0 7
77583: IFFALSE 77650
// for i = 1 to fishes do
77585: LD_ADDR_VAR 0 11
77589: PUSH
77590: DOUBLE
77591: LD_INT 1
77593: DEC
77594: ST_TO_ADDR
77595: LD_VAR 0 7
77599: PUSH
77600: FOR_TO
77601: IFFALSE 77648
// begin hc_class = 20 ;
77603: LD_ADDR_OWVAR 28
77607: PUSH
77608: LD_INT 20
77610: ST_TO_ADDR
// hc_gallery =  ;
77611: LD_ADDR_OWVAR 33
77615: PUSH
77616: LD_STRING 
77618: ST_TO_ADDR
// animal := CreateHuman ;
77619: LD_ADDR_VAR 0 12
77623: PUSH
77624: CALL_OW 44
77628: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77629: LD_VAR 0 12
77633: PPUSH
77634: LD_VAR 0 9
77638: PPUSH
77639: LD_INT 0
77641: PPUSH
77642: CALL 79293 0 3
// end ;
77646: GO 77600
77648: POP
77649: POP
// end ;
77650: LD_VAR 0 10
77654: RET
// export function WantHeal ( sci , unit ) ; begin
77655: LD_INT 0
77657: PPUSH
// if GetTaskList ( sci ) > 0 then
77658: LD_VAR 0 1
77662: PPUSH
77663: CALL_OW 437
77667: PUSH
77668: LD_INT 0
77670: GREATER
77671: IFFALSE 77743
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77673: LD_VAR 0 1
77677: PPUSH
77678: CALL_OW 437
77682: PUSH
77683: LD_INT 1
77685: ARRAY
77686: PUSH
77687: LD_INT 1
77689: ARRAY
77690: PUSH
77691: LD_STRING l
77693: EQUAL
77694: IFFALSE 77721
77696: PUSH
77697: LD_VAR 0 1
77701: PPUSH
77702: CALL_OW 437
77706: PUSH
77707: LD_INT 1
77709: ARRAY
77710: PUSH
77711: LD_INT 4
77713: ARRAY
77714: PUSH
77715: LD_VAR 0 2
77719: EQUAL
77720: AND
77721: IFFALSE 77733
// result := true else
77723: LD_ADDR_VAR 0 3
77727: PUSH
77728: LD_INT 1
77730: ST_TO_ADDR
77731: GO 77741
// result := false ;
77733: LD_ADDR_VAR 0 3
77737: PUSH
77738: LD_INT 0
77740: ST_TO_ADDR
// end else
77741: GO 77751
// result := false ;
77743: LD_ADDR_VAR 0 3
77747: PUSH
77748: LD_INT 0
77750: ST_TO_ADDR
// end ;
77751: LD_VAR 0 3
77755: RET
// export function HealTarget ( sci ) ; begin
77756: LD_INT 0
77758: PPUSH
// if not sci then
77759: LD_VAR 0 1
77763: NOT
77764: IFFALSE 77768
// exit ;
77766: GO 77833
// result := 0 ;
77768: LD_ADDR_VAR 0 2
77772: PUSH
77773: LD_INT 0
77775: ST_TO_ADDR
// if GetTaskList ( sci ) then
77776: LD_VAR 0 1
77780: PPUSH
77781: CALL_OW 437
77785: IFFALSE 77833
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77787: LD_VAR 0 1
77791: PPUSH
77792: CALL_OW 437
77796: PUSH
77797: LD_INT 1
77799: ARRAY
77800: PUSH
77801: LD_INT 1
77803: ARRAY
77804: PUSH
77805: LD_STRING l
77807: EQUAL
77808: IFFALSE 77833
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77810: LD_ADDR_VAR 0 2
77814: PUSH
77815: LD_VAR 0 1
77819: PPUSH
77820: CALL_OW 437
77824: PUSH
77825: LD_INT 1
77827: ARRAY
77828: PUSH
77829: LD_INT 4
77831: ARRAY
77832: ST_TO_ADDR
// end ;
77833: LD_VAR 0 2
77837: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77838: LD_INT 0
77840: PPUSH
77841: PPUSH
77842: PPUSH
77843: PPUSH
// if not base_units then
77844: LD_VAR 0 1
77848: NOT
77849: IFFALSE 77853
// exit ;
77851: GO 77940
// result := false ;
77853: LD_ADDR_VAR 0 2
77857: PUSH
77858: LD_INT 0
77860: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77861: LD_ADDR_VAR 0 5
77865: PUSH
77866: LD_VAR 0 1
77870: PPUSH
77871: LD_INT 21
77873: PUSH
77874: LD_INT 3
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: PPUSH
77881: CALL_OW 72
77885: ST_TO_ADDR
// if not tmp then
77886: LD_VAR 0 5
77890: NOT
77891: IFFALSE 77895
// exit ;
77893: GO 77940
// for i in tmp do
77895: LD_ADDR_VAR 0 3
77899: PUSH
77900: LD_VAR 0 5
77904: PUSH
77905: FOR_IN
77906: IFFALSE 77938
// begin result := EnemyInRange ( i , 22 ) ;
77908: LD_ADDR_VAR 0 2
77912: PUSH
77913: LD_VAR 0 3
77917: PPUSH
77918: LD_INT 22
77920: PPUSH
77921: CALL 75365 0 2
77925: ST_TO_ADDR
// if result then
77926: LD_VAR 0 2
77930: IFFALSE 77936
// exit ;
77932: POP
77933: POP
77934: GO 77940
// end ;
77936: GO 77905
77938: POP
77939: POP
// end ;
77940: LD_VAR 0 2
77944: RET
// export function FilterByTag ( units , tag ) ; begin
77945: LD_INT 0
77947: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77948: LD_ADDR_VAR 0 3
77952: PUSH
77953: LD_VAR 0 1
77957: PPUSH
77958: LD_INT 120
77960: PUSH
77961: LD_VAR 0 2
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PPUSH
77970: CALL_OW 72
77974: ST_TO_ADDR
// end ;
77975: LD_VAR 0 3
77979: RET
// export function IsDriver ( un ) ; begin
77980: LD_INT 0
77982: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77983: LD_ADDR_VAR 0 2
77987: PUSH
77988: LD_VAR 0 1
77992: PUSH
77993: LD_INT 55
77995: PUSH
77996: EMPTY
77997: LIST
77998: PPUSH
77999: CALL_OW 69
78003: IN
78004: ST_TO_ADDR
// end ;
78005: LD_VAR 0 2
78009: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78010: LD_INT 0
78012: PPUSH
78013: PPUSH
// list := [ ] ;
78014: LD_ADDR_VAR 0 5
78018: PUSH
78019: EMPTY
78020: ST_TO_ADDR
// case d of 0 :
78021: LD_VAR 0 3
78025: PUSH
78026: LD_INT 0
78028: DOUBLE
78029: EQUAL
78030: IFTRUE 78034
78032: GO 78167
78034: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78035: LD_ADDR_VAR 0 5
78039: PUSH
78040: LD_VAR 0 1
78044: PUSH
78045: LD_INT 4
78047: MINUS
78048: PUSH
78049: LD_VAR 0 2
78053: PUSH
78054: LD_INT 4
78056: MINUS
78057: PUSH
78058: LD_INT 2
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: LIST
78065: PUSH
78066: LD_VAR 0 1
78070: PUSH
78071: LD_INT 3
78073: MINUS
78074: PUSH
78075: LD_VAR 0 2
78079: PUSH
78080: LD_INT 1
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: LIST
78087: PUSH
78088: LD_VAR 0 1
78092: PUSH
78093: LD_INT 4
78095: PLUS
78096: PUSH
78097: LD_VAR 0 2
78101: PUSH
78102: LD_INT 4
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: LIST
78109: PUSH
78110: LD_VAR 0 1
78114: PUSH
78115: LD_INT 3
78117: PLUS
78118: PUSH
78119: LD_VAR 0 2
78123: PUSH
78124: LD_INT 3
78126: PLUS
78127: PUSH
78128: LD_INT 5
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: LIST
78135: PUSH
78136: LD_VAR 0 1
78140: PUSH
78141: LD_VAR 0 2
78145: PUSH
78146: LD_INT 4
78148: PLUS
78149: PUSH
78150: LD_INT 0
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: LIST
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: ST_TO_ADDR
// end ; 1 :
78165: GO 78865
78167: LD_INT 1
78169: DOUBLE
78170: EQUAL
78171: IFTRUE 78175
78173: GO 78308
78175: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78176: LD_ADDR_VAR 0 5
78180: PUSH
78181: LD_VAR 0 1
78185: PUSH
78186: LD_VAR 0 2
78190: PUSH
78191: LD_INT 4
78193: MINUS
78194: PUSH
78195: LD_INT 3
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: LIST
78202: PUSH
78203: LD_VAR 0 1
78207: PUSH
78208: LD_INT 3
78210: MINUS
78211: PUSH
78212: LD_VAR 0 2
78216: PUSH
78217: LD_INT 3
78219: MINUS
78220: PUSH
78221: LD_INT 2
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: LIST
78228: PUSH
78229: LD_VAR 0 1
78233: PUSH
78234: LD_INT 4
78236: MINUS
78237: PUSH
78238: LD_VAR 0 2
78242: PUSH
78243: LD_INT 1
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: LIST
78250: PUSH
78251: LD_VAR 0 1
78255: PUSH
78256: LD_VAR 0 2
78260: PUSH
78261: LD_INT 3
78263: PLUS
78264: PUSH
78265: LD_INT 0
78267: PUSH
78268: EMPTY
78269: LIST
78270: LIST
78271: LIST
78272: PUSH
78273: LD_VAR 0 1
78277: PUSH
78278: LD_INT 4
78280: PLUS
78281: PUSH
78282: LD_VAR 0 2
78286: PUSH
78287: LD_INT 4
78289: PLUS
78290: PUSH
78291: LD_INT 5
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: LIST
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: LIST
78303: LIST
78304: LIST
78305: ST_TO_ADDR
// end ; 2 :
78306: GO 78865
78308: LD_INT 2
78310: DOUBLE
78311: EQUAL
78312: IFTRUE 78316
78314: GO 78445
78316: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78317: LD_ADDR_VAR 0 5
78321: PUSH
78322: LD_VAR 0 1
78326: PUSH
78327: LD_VAR 0 2
78331: PUSH
78332: LD_INT 3
78334: MINUS
78335: PUSH
78336: LD_INT 3
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: LIST
78343: PUSH
78344: LD_VAR 0 1
78348: PUSH
78349: LD_INT 4
78351: PLUS
78352: PUSH
78353: LD_VAR 0 2
78357: PUSH
78358: LD_INT 4
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: LIST
78365: PUSH
78366: LD_VAR 0 1
78370: PUSH
78371: LD_VAR 0 2
78375: PUSH
78376: LD_INT 4
78378: PLUS
78379: PUSH
78380: LD_INT 0
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: LIST
78387: PUSH
78388: LD_VAR 0 1
78392: PUSH
78393: LD_INT 3
78395: MINUS
78396: PUSH
78397: LD_VAR 0 2
78401: PUSH
78402: LD_INT 1
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: LIST
78409: PUSH
78410: LD_VAR 0 1
78414: PUSH
78415: LD_INT 4
78417: MINUS
78418: PUSH
78419: LD_VAR 0 2
78423: PUSH
78424: LD_INT 4
78426: MINUS
78427: PUSH
78428: LD_INT 2
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: LIST
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: LIST
78440: LIST
78441: LIST
78442: ST_TO_ADDR
// end ; 3 :
78443: GO 78865
78445: LD_INT 3
78447: DOUBLE
78448: EQUAL
78449: IFTRUE 78453
78451: GO 78586
78453: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78454: LD_ADDR_VAR 0 5
78458: PUSH
78459: LD_VAR 0 1
78463: PUSH
78464: LD_INT 3
78466: PLUS
78467: PUSH
78468: LD_VAR 0 2
78472: PUSH
78473: LD_INT 4
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: LIST
78480: PUSH
78481: LD_VAR 0 1
78485: PUSH
78486: LD_INT 4
78488: PLUS
78489: PUSH
78490: LD_VAR 0 2
78494: PUSH
78495: LD_INT 4
78497: PLUS
78498: PUSH
78499: LD_INT 5
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: LIST
78506: PUSH
78507: LD_VAR 0 1
78511: PUSH
78512: LD_INT 4
78514: MINUS
78515: PUSH
78516: LD_VAR 0 2
78520: PUSH
78521: LD_INT 1
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: LIST
78528: PUSH
78529: LD_VAR 0 1
78533: PUSH
78534: LD_VAR 0 2
78538: PUSH
78539: LD_INT 4
78541: MINUS
78542: PUSH
78543: LD_INT 3
78545: PUSH
78546: EMPTY
78547: LIST
78548: LIST
78549: LIST
78550: PUSH
78551: LD_VAR 0 1
78555: PUSH
78556: LD_INT 3
78558: MINUS
78559: PUSH
78560: LD_VAR 0 2
78564: PUSH
78565: LD_INT 3
78567: MINUS
78568: PUSH
78569: LD_INT 2
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: LIST
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: LIST
78581: LIST
78582: LIST
78583: ST_TO_ADDR
// end ; 4 :
78584: GO 78865
78586: LD_INT 4
78588: DOUBLE
78589: EQUAL
78590: IFTRUE 78594
78592: GO 78727
78594: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78595: LD_ADDR_VAR 0 5
78599: PUSH
78600: LD_VAR 0 1
78604: PUSH
78605: LD_VAR 0 2
78609: PUSH
78610: LD_INT 4
78612: PLUS
78613: PUSH
78614: LD_INT 0
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: LIST
78621: PUSH
78622: LD_VAR 0 1
78626: PUSH
78627: LD_INT 3
78629: PLUS
78630: PUSH
78631: LD_VAR 0 2
78635: PUSH
78636: LD_INT 3
78638: PLUS
78639: PUSH
78640: LD_INT 5
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: LIST
78647: PUSH
78648: LD_VAR 0 1
78652: PUSH
78653: LD_INT 4
78655: PLUS
78656: PUSH
78657: LD_VAR 0 2
78661: PUSH
78662: LD_INT 4
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: LIST
78669: PUSH
78670: LD_VAR 0 1
78674: PUSH
78675: LD_VAR 0 2
78679: PUSH
78680: LD_INT 3
78682: MINUS
78683: PUSH
78684: LD_INT 3
78686: PUSH
78687: EMPTY
78688: LIST
78689: LIST
78690: LIST
78691: PUSH
78692: LD_VAR 0 1
78696: PUSH
78697: LD_INT 4
78699: MINUS
78700: PUSH
78701: LD_VAR 0 2
78705: PUSH
78706: LD_INT 4
78708: MINUS
78709: PUSH
78710: LD_INT 2
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: LIST
78717: PUSH
78718: EMPTY
78719: LIST
78720: LIST
78721: LIST
78722: LIST
78723: LIST
78724: ST_TO_ADDR
// end ; 5 :
78725: GO 78865
78727: LD_INT 5
78729: DOUBLE
78730: EQUAL
78731: IFTRUE 78735
78733: GO 78864
78735: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78736: LD_ADDR_VAR 0 5
78740: PUSH
78741: LD_VAR 0 1
78745: PUSH
78746: LD_INT 4
78748: MINUS
78749: PUSH
78750: LD_VAR 0 2
78754: PUSH
78755: LD_INT 1
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: LIST
78762: PUSH
78763: LD_VAR 0 1
78767: PUSH
78768: LD_VAR 0 2
78772: PUSH
78773: LD_INT 4
78775: MINUS
78776: PUSH
78777: LD_INT 3
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: LIST
78784: PUSH
78785: LD_VAR 0 1
78789: PUSH
78790: LD_INT 4
78792: PLUS
78793: PUSH
78794: LD_VAR 0 2
78798: PUSH
78799: LD_INT 4
78801: PLUS
78802: PUSH
78803: LD_INT 5
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: LIST
78810: PUSH
78811: LD_VAR 0 1
78815: PUSH
78816: LD_INT 3
78818: PLUS
78819: PUSH
78820: LD_VAR 0 2
78824: PUSH
78825: LD_INT 4
78827: PUSH
78828: EMPTY
78829: LIST
78830: LIST
78831: LIST
78832: PUSH
78833: LD_VAR 0 1
78837: PUSH
78838: LD_VAR 0 2
78842: PUSH
78843: LD_INT 3
78845: PLUS
78846: PUSH
78847: LD_INT 0
78849: PUSH
78850: EMPTY
78851: LIST
78852: LIST
78853: LIST
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: LIST
78859: LIST
78860: LIST
78861: ST_TO_ADDR
// end ; end ;
78862: GO 78865
78864: POP
// result := list ;
78865: LD_ADDR_VAR 0 4
78869: PUSH
78870: LD_VAR 0 5
78874: ST_TO_ADDR
// end ;
78875: LD_VAR 0 4
78879: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78880: LD_INT 0
78882: PPUSH
78883: PPUSH
78884: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78885: LD_VAR 0 1
78889: NOT
78890: IFTRUE 78918
78892: PUSH
78893: LD_VAR 0 2
78897: PUSH
78898: LD_INT 1
78900: PUSH
78901: LD_INT 2
78903: PUSH
78904: LD_INT 3
78906: PUSH
78907: LD_INT 4
78909: PUSH
78910: EMPTY
78911: LIST
78912: LIST
78913: LIST
78914: LIST
78915: IN
78916: NOT
78917: OR
78918: IFFALSE 78922
// exit ;
78920: GO 79005
// tmp := [ ] ;
78922: LD_ADDR_VAR 0 5
78926: PUSH
78927: EMPTY
78928: ST_TO_ADDR
// for i in units do
78929: LD_ADDR_VAR 0 4
78933: PUSH
78934: LD_VAR 0 1
78938: PUSH
78939: FOR_IN
78940: IFFALSE 78974
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78942: LD_ADDR_VAR 0 5
78946: PUSH
78947: LD_VAR 0 5
78951: PPUSH
78952: LD_VAR 0 4
78956: PPUSH
78957: LD_VAR 0 2
78961: PPUSH
78962: CALL_OW 259
78966: PPUSH
78967: CALL 80400 0 2
78971: ST_TO_ADDR
78972: GO 78939
78974: POP
78975: POP
// if not tmp then
78976: LD_VAR 0 5
78980: NOT
78981: IFFALSE 78985
// exit ;
78983: GO 79005
// result := SortListByListDesc ( units , tmp ) ;
78985: LD_ADDR_VAR 0 3
78989: PUSH
78990: LD_VAR 0 1
78994: PPUSH
78995: LD_VAR 0 5
78999: PPUSH
79000: CALL_OW 77
79004: ST_TO_ADDR
// end ;
79005: LD_VAR 0 3
79009: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79010: LD_INT 0
79012: PPUSH
79013: PPUSH
79014: PPUSH
// result := false ;
79015: LD_ADDR_VAR 0 3
79019: PUSH
79020: LD_INT 0
79022: ST_TO_ADDR
// if not building then
79023: LD_VAR 0 2
79027: NOT
79028: IFFALSE 79032
// exit ;
79030: GO 79176
// x := GetX ( building ) ;
79032: LD_ADDR_VAR 0 4
79036: PUSH
79037: LD_VAR 0 2
79041: PPUSH
79042: CALL_OW 250
79046: ST_TO_ADDR
// y := GetY ( building ) ;
79047: LD_ADDR_VAR 0 5
79051: PUSH
79052: LD_VAR 0 2
79056: PPUSH
79057: CALL_OW 251
79061: ST_TO_ADDR
// if not x or not y then
79062: LD_VAR 0 4
79066: NOT
79067: IFTRUE 79076
79069: PUSH
79070: LD_VAR 0 5
79074: NOT
79075: OR
79076: IFFALSE 79080
// exit ;
79078: GO 79176
// if GetTaskList ( unit ) then
79080: LD_VAR 0 1
79084: PPUSH
79085: CALL_OW 437
79089: IFFALSE 79176
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79091: LD_STRING e
79093: PUSH
79094: LD_VAR 0 1
79098: PPUSH
79099: CALL_OW 437
79103: PUSH
79104: LD_INT 1
79106: ARRAY
79107: PUSH
79108: LD_INT 1
79110: ARRAY
79111: EQUAL
79112: IFFALSE 79139
79114: PUSH
79115: LD_VAR 0 4
79119: PUSH
79120: LD_VAR 0 1
79124: PPUSH
79125: CALL_OW 437
79129: PUSH
79130: LD_INT 1
79132: ARRAY
79133: PUSH
79134: LD_INT 2
79136: ARRAY
79137: EQUAL
79138: AND
79139: IFFALSE 79166
79141: PUSH
79142: LD_VAR 0 5
79146: PUSH
79147: LD_VAR 0 1
79151: PPUSH
79152: CALL_OW 437
79156: PUSH
79157: LD_INT 1
79159: ARRAY
79160: PUSH
79161: LD_INT 3
79163: ARRAY
79164: EQUAL
79165: AND
79166: IFFALSE 79176
// result := true end ;
79168: LD_ADDR_VAR 0 3
79172: PUSH
79173: LD_INT 1
79175: ST_TO_ADDR
// end ;
79176: LD_VAR 0 3
79180: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79181: LD_INT 0
79183: PPUSH
// result := false ;
79184: LD_ADDR_VAR 0 4
79188: PUSH
79189: LD_INT 0
79191: ST_TO_ADDR
// if GetTaskList ( unit ) then
79192: LD_VAR 0 1
79196: PPUSH
79197: CALL_OW 437
79201: IFFALSE 79288
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79203: LD_STRING M
79205: PUSH
79206: LD_VAR 0 1
79210: PPUSH
79211: CALL_OW 437
79215: PUSH
79216: LD_INT 1
79218: ARRAY
79219: PUSH
79220: LD_INT 1
79222: ARRAY
79223: EQUAL
79224: IFFALSE 79251
79226: PUSH
79227: LD_VAR 0 2
79231: PUSH
79232: LD_VAR 0 1
79236: PPUSH
79237: CALL_OW 437
79241: PUSH
79242: LD_INT 1
79244: ARRAY
79245: PUSH
79246: LD_INT 2
79248: ARRAY
79249: EQUAL
79250: AND
79251: IFFALSE 79278
79253: PUSH
79254: LD_VAR 0 3
79258: PUSH
79259: LD_VAR 0 1
79263: PPUSH
79264: CALL_OW 437
79268: PUSH
79269: LD_INT 1
79271: ARRAY
79272: PUSH
79273: LD_INT 3
79275: ARRAY
79276: EQUAL
79277: AND
79278: IFFALSE 79288
// result := true ;
79280: LD_ADDR_VAR 0 4
79284: PUSH
79285: LD_INT 1
79287: ST_TO_ADDR
// end ; end ;
79288: LD_VAR 0 4
79292: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79293: LD_INT 0
79295: PPUSH
79296: PPUSH
79297: PPUSH
79298: PPUSH
// if not unit or not area then
79299: LD_VAR 0 1
79303: NOT
79304: IFTRUE 79313
79306: PUSH
79307: LD_VAR 0 2
79311: NOT
79312: OR
79313: IFFALSE 79317
// exit ;
79315: GO 79493
// tmp := AreaToList ( area , i ) ;
79317: LD_ADDR_VAR 0 6
79321: PUSH
79322: LD_VAR 0 2
79326: PPUSH
79327: LD_VAR 0 5
79331: PPUSH
79332: CALL_OW 517
79336: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79337: LD_ADDR_VAR 0 5
79341: PUSH
79342: DOUBLE
79343: LD_INT 1
79345: DEC
79346: ST_TO_ADDR
79347: LD_VAR 0 6
79351: PUSH
79352: LD_INT 1
79354: ARRAY
79355: PUSH
79356: FOR_TO
79357: IFFALSE 79491
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79359: LD_ADDR_VAR 0 7
79363: PUSH
79364: LD_VAR 0 6
79368: PUSH
79369: LD_INT 1
79371: ARRAY
79372: PUSH
79373: LD_VAR 0 5
79377: ARRAY
79378: PUSH
79379: LD_VAR 0 6
79383: PUSH
79384: LD_INT 2
79386: ARRAY
79387: PUSH
79388: LD_VAR 0 5
79392: ARRAY
79393: PUSH
79394: EMPTY
79395: LIST
79396: LIST
79397: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79398: LD_INT 92
79400: PUSH
79401: LD_VAR 0 7
79405: PUSH
79406: LD_INT 1
79408: ARRAY
79409: PUSH
79410: LD_VAR 0 7
79414: PUSH
79415: LD_INT 2
79417: ARRAY
79418: PUSH
79419: LD_INT 2
79421: PUSH
79422: EMPTY
79423: LIST
79424: LIST
79425: LIST
79426: LIST
79427: PPUSH
79428: CALL_OW 69
79432: PUSH
79433: LD_INT 0
79435: EQUAL
79436: IFFALSE 79489
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79438: LD_VAR 0 1
79442: PPUSH
79443: LD_VAR 0 7
79447: PUSH
79448: LD_INT 1
79450: ARRAY
79451: PPUSH
79452: LD_VAR 0 7
79456: PUSH
79457: LD_INT 2
79459: ARRAY
79460: PPUSH
79461: LD_VAR 0 3
79465: PPUSH
79466: CALL_OW 48
// result := IsPlaced ( unit ) ;
79470: LD_ADDR_VAR 0 4
79474: PUSH
79475: LD_VAR 0 1
79479: PPUSH
79480: CALL_OW 305
79484: ST_TO_ADDR
// exit ;
79485: POP
79486: POP
79487: GO 79493
// end ; end ;
79489: GO 79356
79491: POP
79492: POP
// end ;
79493: LD_VAR 0 4
79497: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79498: LD_INT 0
79500: PPUSH
79501: PPUSH
79502: PPUSH
// if not side or side > 8 then
79503: LD_VAR 0 1
79507: NOT
79508: IFTRUE 79520
79510: PUSH
79511: LD_VAR 0 1
79515: PUSH
79516: LD_INT 8
79518: GREATER
79519: OR
79520: IFFALSE 79524
// exit ;
79522: GO 79711
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79524: LD_ADDR_VAR 0 4
79528: PUSH
79529: LD_INT 22
79531: PUSH
79532: LD_VAR 0 1
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: LD_INT 21
79543: PUSH
79544: LD_INT 3
79546: PUSH
79547: EMPTY
79548: LIST
79549: LIST
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: PPUSH
79555: CALL_OW 69
79559: ST_TO_ADDR
// if not tmp then
79560: LD_VAR 0 4
79564: NOT
79565: IFFALSE 79569
// exit ;
79567: GO 79711
// enable_addtolog := true ;
79569: LD_ADDR_OWVAR 81
79573: PUSH
79574: LD_INT 1
79576: ST_TO_ADDR
// AddToLog ( [ ) ;
79577: LD_STRING [
79579: PPUSH
79580: CALL_OW 561
// for i in tmp do
79584: LD_ADDR_VAR 0 3
79588: PUSH
79589: LD_VAR 0 4
79593: PUSH
79594: FOR_IN
79595: IFFALSE 79702
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79597: LD_STRING [
79599: PUSH
79600: LD_VAR 0 3
79604: PPUSH
79605: CALL_OW 266
79609: STR
79610: PUSH
79611: LD_STRING , 
79613: STR
79614: PUSH
79615: LD_VAR 0 3
79619: PPUSH
79620: CALL_OW 250
79624: STR
79625: PUSH
79626: LD_STRING , 
79628: STR
79629: PUSH
79630: LD_VAR 0 3
79634: PPUSH
79635: CALL_OW 251
79639: STR
79640: PUSH
79641: LD_STRING , 
79643: STR
79644: PUSH
79645: LD_VAR 0 3
79649: PPUSH
79650: CALL_OW 254
79654: STR
79655: PUSH
79656: LD_STRING , 
79658: STR
79659: PUSH
79660: LD_VAR 0 3
79664: PPUSH
79665: LD_INT 1
79667: PPUSH
79668: CALL_OW 268
79672: STR
79673: PUSH
79674: LD_STRING , 
79676: STR
79677: PUSH
79678: LD_VAR 0 3
79682: PPUSH
79683: LD_INT 2
79685: PPUSH
79686: CALL_OW 268
79690: STR
79691: PUSH
79692: LD_STRING ],
79694: STR
79695: PPUSH
79696: CALL_OW 561
// end ;
79700: GO 79594
79702: POP
79703: POP
// AddToLog ( ]; ) ;
79704: LD_STRING ];
79706: PPUSH
79707: CALL_OW 561
// end ;
79711: LD_VAR 0 2
79715: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79716: LD_INT 0
79718: PPUSH
79719: PPUSH
79720: PPUSH
79721: PPUSH
79722: PPUSH
// if not area or not rate or not max then
79723: LD_VAR 0 1
79727: NOT
79728: IFTRUE 79737
79730: PUSH
79731: LD_VAR 0 2
79735: NOT
79736: OR
79737: IFTRUE 79746
79739: PUSH
79740: LD_VAR 0 4
79744: NOT
79745: OR
79746: IFFALSE 79750
// exit ;
79748: GO 79939
// while 1 do
79750: LD_INT 1
79752: IFFALSE 79939
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79754: LD_ADDR_VAR 0 9
79758: PUSH
79759: LD_VAR 0 1
79763: PPUSH
79764: LD_INT 1
79766: PPUSH
79767: CALL_OW 287
79771: PUSH
79772: LD_INT 10
79774: MUL
79775: ST_TO_ADDR
// r := rate / 10 ;
79776: LD_ADDR_VAR 0 7
79780: PUSH
79781: LD_VAR 0 2
79785: PUSH
79786: LD_INT 10
79788: DIVREAL
79789: ST_TO_ADDR
// time := 1 1$00 ;
79790: LD_ADDR_VAR 0 8
79794: PUSH
79795: LD_INT 2100
79797: ST_TO_ADDR
// if amount < min then
79798: LD_VAR 0 9
79802: PUSH
79803: LD_VAR 0 3
79807: LESS
79808: IFFALSE 79826
// r := r * 2 else
79810: LD_ADDR_VAR 0 7
79814: PUSH
79815: LD_VAR 0 7
79819: PUSH
79820: LD_INT 2
79822: MUL
79823: ST_TO_ADDR
79824: GO 79852
// if amount > max then
79826: LD_VAR 0 9
79830: PUSH
79831: LD_VAR 0 4
79835: GREATER
79836: IFFALSE 79852
// r := r / 2 ;
79838: LD_ADDR_VAR 0 7
79842: PUSH
79843: LD_VAR 0 7
79847: PUSH
79848: LD_INT 2
79850: DIVREAL
79851: ST_TO_ADDR
// time := time / r ;
79852: LD_ADDR_VAR 0 8
79856: PUSH
79857: LD_VAR 0 8
79861: PUSH
79862: LD_VAR 0 7
79866: DIVREAL
79867: ST_TO_ADDR
// if time < 0 then
79868: LD_VAR 0 8
79872: PUSH
79873: LD_INT 0
79875: LESS
79876: IFFALSE 79893
// time := time * - 1 ;
79878: LD_ADDR_VAR 0 8
79882: PUSH
79883: LD_VAR 0 8
79887: PUSH
79888: LD_INT 1
79890: NEG
79891: MUL
79892: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79893: LD_VAR 0 8
79897: PUSH
79898: LD_INT 35
79900: PPUSH
79901: LD_INT 875
79903: PPUSH
79904: CALL_OW 12
79908: PLUS
79909: PPUSH
79910: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79914: LD_INT 1
79916: PPUSH
79917: LD_INT 5
79919: PPUSH
79920: CALL_OW 12
79924: PPUSH
79925: LD_VAR 0 1
79929: PPUSH
79930: LD_INT 1
79932: PPUSH
79933: CALL_OW 55
// end ;
79937: GO 79750
// end ;
79939: LD_VAR 0 5
79943: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79944: LD_INT 0
79946: PPUSH
79947: PPUSH
79948: PPUSH
79949: PPUSH
79950: PPUSH
79951: PPUSH
79952: PPUSH
79953: PPUSH
// if not turrets or not factories then
79954: LD_VAR 0 1
79958: NOT
79959: IFTRUE 79968
79961: PUSH
79962: LD_VAR 0 2
79966: NOT
79967: OR
79968: IFFALSE 79972
// exit ;
79970: GO 80279
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79972: LD_ADDR_VAR 0 10
79976: PUSH
79977: LD_INT 5
79979: PUSH
79980: LD_INT 6
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 2
79989: PUSH
79990: LD_INT 4
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 3
79999: PUSH
80000: LD_INT 5
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: LIST
80011: PUSH
80012: LD_INT 24
80014: PUSH
80015: LD_INT 25
80017: PUSH
80018: EMPTY
80019: LIST
80020: LIST
80021: PUSH
80022: LD_INT 23
80024: PUSH
80025: LD_INT 27
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: PUSH
80036: LD_INT 42
80038: PUSH
80039: LD_INT 43
80041: PUSH
80042: EMPTY
80043: LIST
80044: LIST
80045: PUSH
80046: LD_INT 44
80048: PUSH
80049: LD_INT 46
80051: PUSH
80052: EMPTY
80053: LIST
80054: LIST
80055: PUSH
80056: LD_INT 45
80058: PUSH
80059: LD_INT 47
80061: PUSH
80062: EMPTY
80063: LIST
80064: LIST
80065: PUSH
80066: EMPTY
80067: LIST
80068: LIST
80069: LIST
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: LIST
80075: ST_TO_ADDR
// result := [ ] ;
80076: LD_ADDR_VAR 0 3
80080: PUSH
80081: EMPTY
80082: ST_TO_ADDR
// for i in turrets do
80083: LD_ADDR_VAR 0 4
80087: PUSH
80088: LD_VAR 0 1
80092: PUSH
80093: FOR_IN
80094: IFFALSE 80277
// begin nat := GetNation ( i ) ;
80096: LD_ADDR_VAR 0 7
80100: PUSH
80101: LD_VAR 0 4
80105: PPUSH
80106: CALL_OW 248
80110: ST_TO_ADDR
// weapon := 0 ;
80111: LD_ADDR_VAR 0 8
80115: PUSH
80116: LD_INT 0
80118: ST_TO_ADDR
// if not nat then
80119: LD_VAR 0 7
80123: NOT
80124: IFFALSE 80128
// continue ;
80126: GO 80093
// for j in list [ nat ] do
80128: LD_ADDR_VAR 0 5
80132: PUSH
80133: LD_VAR 0 10
80137: PUSH
80138: LD_VAR 0 7
80142: ARRAY
80143: PUSH
80144: FOR_IN
80145: IFFALSE 80186
// if GetBWeapon ( i ) = j [ 1 ] then
80147: LD_VAR 0 4
80151: PPUSH
80152: CALL_OW 269
80156: PUSH
80157: LD_VAR 0 5
80161: PUSH
80162: LD_INT 1
80164: ARRAY
80165: EQUAL
80166: IFFALSE 80184
// begin weapon := j [ 2 ] ;
80168: LD_ADDR_VAR 0 8
80172: PUSH
80173: LD_VAR 0 5
80177: PUSH
80178: LD_INT 2
80180: ARRAY
80181: ST_TO_ADDR
// break ;
80182: GO 80186
// end ;
80184: GO 80144
80186: POP
80187: POP
// if not weapon then
80188: LD_VAR 0 8
80192: NOT
80193: IFFALSE 80197
// continue ;
80195: GO 80093
// for k in factories do
80197: LD_ADDR_VAR 0 6
80201: PUSH
80202: LD_VAR 0 2
80206: PUSH
80207: FOR_IN
80208: IFFALSE 80273
// begin weapons := AvailableWeaponList ( k ) ;
80210: LD_ADDR_VAR 0 9
80214: PUSH
80215: LD_VAR 0 6
80219: PPUSH
80220: CALL_OW 478
80224: ST_TO_ADDR
// if not weapons then
80225: LD_VAR 0 9
80229: NOT
80230: IFFALSE 80234
// continue ;
80232: GO 80207
// if weapon in weapons then
80234: LD_VAR 0 8
80238: PUSH
80239: LD_VAR 0 9
80243: IN
80244: IFFALSE 80271
// begin result := [ i , weapon ] ;
80246: LD_ADDR_VAR 0 3
80250: PUSH
80251: LD_VAR 0 4
80255: PUSH
80256: LD_VAR 0 8
80260: PUSH
80261: EMPTY
80262: LIST
80263: LIST
80264: ST_TO_ADDR
// exit ;
80265: POP
80266: POP
80267: POP
80268: POP
80269: GO 80279
// end ; end ;
80271: GO 80207
80273: POP
80274: POP
// end ;
80275: GO 80093
80277: POP
80278: POP
// end ;
80279: LD_VAR 0 3
80283: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80284: LD_INT 0
80286: PPUSH
// if not side or side > 8 then
80287: LD_VAR 0 3
80291: NOT
80292: IFTRUE 80304
80294: PUSH
80295: LD_VAR 0 3
80299: PUSH
80300: LD_INT 8
80302: GREATER
80303: OR
80304: IFFALSE 80308
// exit ;
80306: GO 80367
// if not range then
80308: LD_VAR 0 4
80312: NOT
80313: IFFALSE 80324
// range := - 12 ;
80315: LD_ADDR_VAR 0 4
80319: PUSH
80320: LD_INT 12
80322: NEG
80323: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80324: LD_VAR 0 1
80328: PPUSH
80329: LD_VAR 0 2
80333: PPUSH
80334: LD_VAR 0 3
80338: PPUSH
80339: LD_VAR 0 4
80343: PPUSH
80344: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80348: LD_VAR 0 1
80352: PPUSH
80353: LD_VAR 0 2
80357: PPUSH
80358: LD_VAR 0 3
80362: PPUSH
80363: CALL_OW 331
// end ;
80367: LD_VAR 0 5
80371: RET
// export function Video ( mode ) ; begin
80372: LD_INT 0
80374: PPUSH
// ingame_video = mode ;
80375: LD_ADDR_OWVAR 52
80379: PUSH
80380: LD_VAR 0 1
80384: ST_TO_ADDR
// interface_hidden = mode ;
80385: LD_ADDR_OWVAR 54
80389: PUSH
80390: LD_VAR 0 1
80394: ST_TO_ADDR
// end ;
80395: LD_VAR 0 2
80399: RET
// export function Join ( array , element ) ; begin
80400: LD_INT 0
80402: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80403: LD_ADDR_VAR 0 3
80407: PUSH
80408: LD_VAR 0 1
80412: PPUSH
80413: LD_VAR 0 1
80417: PUSH
80418: LD_INT 1
80420: PLUS
80421: PPUSH
80422: LD_VAR 0 2
80426: PPUSH
80427: CALL_OW 1
80431: ST_TO_ADDR
// end ;
80432: LD_VAR 0 3
80436: RET
// export function JoinUnion ( array , element ) ; begin
80437: LD_INT 0
80439: PPUSH
// result := array union element ;
80440: LD_ADDR_VAR 0 3
80444: PUSH
80445: LD_VAR 0 1
80449: PUSH
80450: LD_VAR 0 2
80454: UNION
80455: ST_TO_ADDR
// end ;
80456: LD_VAR 0 3
80460: RET
// export function GetBehemoths ( side ) ; begin
80461: LD_INT 0
80463: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80464: LD_ADDR_VAR 0 2
80468: PUSH
80469: LD_INT 22
80471: PUSH
80472: LD_VAR 0 1
80476: PUSH
80477: EMPTY
80478: LIST
80479: LIST
80480: PUSH
80481: LD_INT 31
80483: PUSH
80484: LD_INT 25
80486: PUSH
80487: EMPTY
80488: LIST
80489: LIST
80490: PUSH
80491: EMPTY
80492: LIST
80493: LIST
80494: PPUSH
80495: CALL_OW 69
80499: ST_TO_ADDR
// end ;
80500: LD_VAR 0 2
80504: RET
// export function Shuffle ( array ) ; var i , index ; begin
80505: LD_INT 0
80507: PPUSH
80508: PPUSH
80509: PPUSH
// result := [ ] ;
80510: LD_ADDR_VAR 0 2
80514: PUSH
80515: EMPTY
80516: ST_TO_ADDR
// if not array then
80517: LD_VAR 0 1
80521: NOT
80522: IFFALSE 80526
// exit ;
80524: GO 80625
// Randomize ;
80526: CALL_OW 10
// for i = array downto 1 do
80530: LD_ADDR_VAR 0 3
80534: PUSH
80535: DOUBLE
80536: LD_VAR 0 1
80540: INC
80541: ST_TO_ADDR
80542: LD_INT 1
80544: PUSH
80545: FOR_DOWNTO
80546: IFFALSE 80623
// begin index := rand ( 1 , array ) ;
80548: LD_ADDR_VAR 0 4
80552: PUSH
80553: LD_INT 1
80555: PPUSH
80556: LD_VAR 0 1
80560: PPUSH
80561: CALL_OW 12
80565: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80566: LD_ADDR_VAR 0 2
80570: PUSH
80571: LD_VAR 0 2
80575: PPUSH
80576: LD_VAR 0 2
80580: PUSH
80581: LD_INT 1
80583: PLUS
80584: PPUSH
80585: LD_VAR 0 1
80589: PUSH
80590: LD_VAR 0 4
80594: ARRAY
80595: PPUSH
80596: CALL_OW 2
80600: ST_TO_ADDR
// array := Delete ( array , index ) ;
80601: LD_ADDR_VAR 0 1
80605: PUSH
80606: LD_VAR 0 1
80610: PPUSH
80611: LD_VAR 0 4
80615: PPUSH
80616: CALL_OW 3
80620: ST_TO_ADDR
// end ;
80621: GO 80545
80623: POP
80624: POP
// end ;
80625: LD_VAR 0 2
80629: RET
// export function GetBaseMaterials ( base ) ; begin
80630: LD_INT 0
80632: PPUSH
// result := [ 0 , 0 , 0 ] ;
80633: LD_ADDR_VAR 0 2
80637: PUSH
80638: LD_INT 0
80640: PUSH
80641: LD_INT 0
80643: PUSH
80644: LD_INT 0
80646: PUSH
80647: EMPTY
80648: LIST
80649: LIST
80650: LIST
80651: ST_TO_ADDR
// if not base then
80652: LD_VAR 0 1
80656: NOT
80657: IFFALSE 80661
// exit ;
80659: GO 80710
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80661: LD_ADDR_VAR 0 2
80665: PUSH
80666: LD_VAR 0 1
80670: PPUSH
80671: LD_INT 1
80673: PPUSH
80674: CALL_OW 275
80678: PUSH
80679: LD_VAR 0 1
80683: PPUSH
80684: LD_INT 2
80686: PPUSH
80687: CALL_OW 275
80691: PUSH
80692: LD_VAR 0 1
80696: PPUSH
80697: LD_INT 3
80699: PPUSH
80700: CALL_OW 275
80704: PUSH
80705: EMPTY
80706: LIST
80707: LIST
80708: LIST
80709: ST_TO_ADDR
// end ;
80710: LD_VAR 0 2
80714: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80715: LD_INT 0
80717: PPUSH
80718: PPUSH
// result := array ;
80719: LD_ADDR_VAR 0 3
80723: PUSH
80724: LD_VAR 0 1
80728: ST_TO_ADDR
// if size >= result then
80729: LD_VAR 0 2
80733: PUSH
80734: LD_VAR 0 3
80738: GREATEREQUAL
80739: IFFALSE 80743
// exit ;
80741: GO 80793
// if size then
80743: LD_VAR 0 2
80747: IFFALSE 80793
// for i := array downto size do
80749: LD_ADDR_VAR 0 4
80753: PUSH
80754: DOUBLE
80755: LD_VAR 0 1
80759: INC
80760: ST_TO_ADDR
80761: LD_VAR 0 2
80765: PUSH
80766: FOR_DOWNTO
80767: IFFALSE 80791
// result := Delete ( result , result ) ;
80769: LD_ADDR_VAR 0 3
80773: PUSH
80774: LD_VAR 0 3
80778: PPUSH
80779: LD_VAR 0 3
80783: PPUSH
80784: CALL_OW 3
80788: ST_TO_ADDR
80789: GO 80766
80791: POP
80792: POP
// end ;
80793: LD_VAR 0 3
80797: RET
// export function ComExit ( unit ) ; var tmp ; begin
80798: LD_INT 0
80800: PPUSH
80801: PPUSH
// if not IsInUnit ( unit ) then
80802: LD_VAR 0 1
80806: PPUSH
80807: CALL_OW 310
80811: NOT
80812: IFFALSE 80816
// exit ;
80814: GO 80876
// tmp := IsInUnit ( unit ) ;
80816: LD_ADDR_VAR 0 3
80820: PUSH
80821: LD_VAR 0 1
80825: PPUSH
80826: CALL_OW 310
80830: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80831: LD_VAR 0 3
80835: PPUSH
80836: CALL_OW 247
80840: PUSH
80841: LD_INT 2
80843: EQUAL
80844: IFFALSE 80857
// ComExitVehicle ( unit ) else
80846: LD_VAR 0 1
80850: PPUSH
80851: CALL_OW 121
80855: GO 80866
// ComExitBuilding ( unit ) ;
80857: LD_VAR 0 1
80861: PPUSH
80862: CALL_OW 122
// result := tmp ;
80866: LD_ADDR_VAR 0 2
80870: PUSH
80871: LD_VAR 0 3
80875: ST_TO_ADDR
// end ;
80876: LD_VAR 0 2
80880: RET
// export function ComExitAll ( units ) ; var i ; begin
80881: LD_INT 0
80883: PPUSH
80884: PPUSH
// if not units then
80885: LD_VAR 0 1
80889: NOT
80890: IFFALSE 80894
// exit ;
80892: GO 80920
// for i in units do
80894: LD_ADDR_VAR 0 3
80898: PUSH
80899: LD_VAR 0 1
80903: PUSH
80904: FOR_IN
80905: IFFALSE 80918
// ComExit ( i ) ;
80907: LD_VAR 0 3
80911: PPUSH
80912: CALL 80798 0 1
80916: GO 80904
80918: POP
80919: POP
// end ;
80920: LD_VAR 0 2
80924: RET
// export function ResetHc ; begin
80925: LD_INT 0
80927: PPUSH
// InitHc ;
80928: CALL_OW 19
// hc_importance := 0 ;
80932: LD_ADDR_OWVAR 32
80936: PUSH
80937: LD_INT 0
80939: ST_TO_ADDR
// end ;
80940: LD_VAR 0 1
80944: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80945: LD_INT 0
80947: PPUSH
80948: PPUSH
80949: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80950: LD_ADDR_VAR 0 6
80954: PUSH
80955: LD_VAR 0 1
80959: PUSH
80960: LD_VAR 0 3
80964: PLUS
80965: PUSH
80966: LD_INT 2
80968: DIV
80969: ST_TO_ADDR
// if _x < 0 then
80970: LD_VAR 0 6
80974: PUSH
80975: LD_INT 0
80977: LESS
80978: IFFALSE 80995
// _x := _x * - 1 ;
80980: LD_ADDR_VAR 0 6
80984: PUSH
80985: LD_VAR 0 6
80989: PUSH
80990: LD_INT 1
80992: NEG
80993: MUL
80994: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80995: LD_ADDR_VAR 0 7
80999: PUSH
81000: LD_VAR 0 2
81004: PUSH
81005: LD_VAR 0 4
81009: PLUS
81010: PUSH
81011: LD_INT 2
81013: DIV
81014: ST_TO_ADDR
// if _y < 0 then
81015: LD_VAR 0 7
81019: PUSH
81020: LD_INT 0
81022: LESS
81023: IFFALSE 81040
// _y := _y * - 1 ;
81025: LD_ADDR_VAR 0 7
81029: PUSH
81030: LD_VAR 0 7
81034: PUSH
81035: LD_INT 1
81037: NEG
81038: MUL
81039: ST_TO_ADDR
// result := [ _x , _y ] ;
81040: LD_ADDR_VAR 0 5
81044: PUSH
81045: LD_VAR 0 6
81049: PUSH
81050: LD_VAR 0 7
81054: PUSH
81055: EMPTY
81056: LIST
81057: LIST
81058: ST_TO_ADDR
// end ;
81059: LD_VAR 0 5
81063: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81064: LD_INT 0
81066: PPUSH
81067: PPUSH
81068: PPUSH
81069: PPUSH
// task := GetTaskList ( unit ) ;
81070: LD_ADDR_VAR 0 7
81074: PUSH
81075: LD_VAR 0 1
81079: PPUSH
81080: CALL_OW 437
81084: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81085: LD_VAR 0 7
81089: NOT
81090: IFFALSE 81109
81092: PUSH
81093: LD_VAR 0 1
81097: PPUSH
81098: LD_VAR 0 2
81102: PPUSH
81103: CALL_OW 308
81107: NOT
81108: AND
81109: IFFALSE 81113
// exit ;
81111: GO 81231
// if IsInArea ( unit , area ) then
81113: LD_VAR 0 1
81117: PPUSH
81118: LD_VAR 0 2
81122: PPUSH
81123: CALL_OW 308
81127: IFFALSE 81145
// begin ComMoveToArea ( unit , goAway ) ;
81129: LD_VAR 0 1
81133: PPUSH
81134: LD_VAR 0 3
81138: PPUSH
81139: CALL_OW 113
// exit ;
81143: GO 81231
// end ; if task [ 1 ] [ 1 ] <> M then
81145: LD_VAR 0 7
81149: PUSH
81150: LD_INT 1
81152: ARRAY
81153: PUSH
81154: LD_INT 1
81156: ARRAY
81157: PUSH
81158: LD_STRING M
81160: NONEQUAL
81161: IFFALSE 81165
// exit ;
81163: GO 81231
// x := task [ 1 ] [ 2 ] ;
81165: LD_ADDR_VAR 0 5
81169: PUSH
81170: LD_VAR 0 7
81174: PUSH
81175: LD_INT 1
81177: ARRAY
81178: PUSH
81179: LD_INT 2
81181: ARRAY
81182: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81183: LD_ADDR_VAR 0 6
81187: PUSH
81188: LD_VAR 0 7
81192: PUSH
81193: LD_INT 1
81195: ARRAY
81196: PUSH
81197: LD_INT 3
81199: ARRAY
81200: ST_TO_ADDR
// if InArea ( x , y , area ) then
81201: LD_VAR 0 5
81205: PPUSH
81206: LD_VAR 0 6
81210: PPUSH
81211: LD_VAR 0 2
81215: PPUSH
81216: CALL_OW 309
81220: IFFALSE 81231
// ComStop ( unit ) ;
81222: LD_VAR 0 1
81226: PPUSH
81227: CALL_OW 141
// end ;
81231: LD_VAR 0 4
81235: RET
// export function Abs ( value ) ; begin
81236: LD_INT 0
81238: PPUSH
// result := value ;
81239: LD_ADDR_VAR 0 2
81243: PUSH
81244: LD_VAR 0 1
81248: ST_TO_ADDR
// if value < 0 then
81249: LD_VAR 0 1
81253: PUSH
81254: LD_INT 0
81256: LESS
81257: IFFALSE 81274
// result := value * - 1 ;
81259: LD_ADDR_VAR 0 2
81263: PUSH
81264: LD_VAR 0 1
81268: PUSH
81269: LD_INT 1
81271: NEG
81272: MUL
81273: ST_TO_ADDR
// end ;
81274: LD_VAR 0 2
81278: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81279: LD_INT 0
81281: PPUSH
81282: PPUSH
81283: PPUSH
81284: PPUSH
81285: PPUSH
81286: PPUSH
81287: PPUSH
81288: PPUSH
// if not unit or not building then
81289: LD_VAR 0 1
81293: NOT
81294: IFTRUE 81303
81296: PUSH
81297: LD_VAR 0 2
81301: NOT
81302: OR
81303: IFFALSE 81307
// exit ;
81305: GO 81535
// x := GetX ( building ) ;
81307: LD_ADDR_VAR 0 4
81311: PUSH
81312: LD_VAR 0 2
81316: PPUSH
81317: CALL_OW 250
81321: ST_TO_ADDR
// y := GetY ( building ) ;
81322: LD_ADDR_VAR 0 6
81326: PUSH
81327: LD_VAR 0 2
81331: PPUSH
81332: CALL_OW 251
81336: ST_TO_ADDR
// d := GetDir ( building ) ;
81337: LD_ADDR_VAR 0 8
81341: PUSH
81342: LD_VAR 0 2
81346: PPUSH
81347: CALL_OW 254
81351: ST_TO_ADDR
// r := 4 ;
81352: LD_ADDR_VAR 0 9
81356: PUSH
81357: LD_INT 4
81359: ST_TO_ADDR
// for i := 1 to 5 do
81360: LD_ADDR_VAR 0 10
81364: PUSH
81365: DOUBLE
81366: LD_INT 1
81368: DEC
81369: ST_TO_ADDR
81370: LD_INT 5
81372: PUSH
81373: FOR_TO
81374: IFFALSE 81533
// begin _x := ShiftX ( x , d , r + i ) ;
81376: LD_ADDR_VAR 0 5
81380: PUSH
81381: LD_VAR 0 4
81385: PPUSH
81386: LD_VAR 0 8
81390: PPUSH
81391: LD_VAR 0 9
81395: PUSH
81396: LD_VAR 0 10
81400: PLUS
81401: PPUSH
81402: CALL_OW 272
81406: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81407: LD_ADDR_VAR 0 7
81411: PUSH
81412: LD_VAR 0 6
81416: PPUSH
81417: LD_VAR 0 8
81421: PPUSH
81422: LD_VAR 0 9
81426: PUSH
81427: LD_VAR 0 10
81431: PLUS
81432: PPUSH
81433: CALL_OW 273
81437: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81438: LD_VAR 0 5
81442: PPUSH
81443: LD_VAR 0 7
81447: PPUSH
81448: CALL_OW 488
81452: IFFALSE 81487
81454: PUSH
81455: LD_VAR 0 5
81459: PPUSH
81460: LD_VAR 0 7
81464: PPUSH
81465: CALL_OW 428
81469: PPUSH
81470: CALL_OW 247
81474: PUSH
81475: LD_INT 3
81477: PUSH
81478: LD_INT 2
81480: PUSH
81481: EMPTY
81482: LIST
81483: LIST
81484: IN
81485: NOT
81486: AND
81487: IFFALSE 81531
// begin ComMoveXY ( unit , _x , _y ) ;
81489: LD_VAR 0 1
81493: PPUSH
81494: LD_VAR 0 5
81498: PPUSH
81499: LD_VAR 0 7
81503: PPUSH
81504: CALL_OW 111
// result := [ _x , _y ] ;
81508: LD_ADDR_VAR 0 3
81512: PUSH
81513: LD_VAR 0 5
81517: PUSH
81518: LD_VAR 0 7
81522: PUSH
81523: EMPTY
81524: LIST
81525: LIST
81526: ST_TO_ADDR
// exit ;
81527: POP
81528: POP
81529: GO 81535
// end ; end ;
81531: GO 81373
81533: POP
81534: POP
// end ;
81535: LD_VAR 0 3
81539: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81540: LD_INT 0
81542: PPUSH
81543: PPUSH
81544: PPUSH
// result := 0 ;
81545: LD_ADDR_VAR 0 3
81549: PUSH
81550: LD_INT 0
81552: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81553: LD_VAR 0 1
81557: PUSH
81558: LD_INT 0
81560: LESS
81561: IFTRUE 81573
81563: PUSH
81564: LD_VAR 0 1
81568: PUSH
81569: LD_INT 8
81571: GREATER
81572: OR
81573: IFTRUE 81585
81575: PUSH
81576: LD_VAR 0 2
81580: PUSH
81581: LD_INT 0
81583: LESS
81584: OR
81585: IFTRUE 81597
81587: PUSH
81588: LD_VAR 0 2
81592: PUSH
81593: LD_INT 8
81595: GREATER
81596: OR
81597: IFFALSE 81601
// exit ;
81599: GO 81676
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81601: LD_ADDR_VAR 0 4
81605: PUSH
81606: LD_INT 22
81608: PUSH
81609: LD_VAR 0 2
81613: PUSH
81614: EMPTY
81615: LIST
81616: LIST
81617: PPUSH
81618: CALL_OW 69
81622: PUSH
81623: FOR_IN
81624: IFFALSE 81674
// begin un := UnitShoot ( i ) ;
81626: LD_ADDR_VAR 0 5
81630: PUSH
81631: LD_VAR 0 4
81635: PPUSH
81636: CALL_OW 504
81640: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81641: LD_VAR 0 5
81645: PPUSH
81646: CALL_OW 255
81650: PUSH
81651: LD_VAR 0 1
81655: EQUAL
81656: IFFALSE 81672
// begin result := un ;
81658: LD_ADDR_VAR 0 3
81662: PUSH
81663: LD_VAR 0 5
81667: ST_TO_ADDR
// exit ;
81668: POP
81669: POP
81670: GO 81676
// end ; end ;
81672: GO 81623
81674: POP
81675: POP
// end ;
81676: LD_VAR 0 3
81680: RET
// export function GetCargoBay ( units ) ; begin
81681: LD_INT 0
81683: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81684: LD_ADDR_VAR 0 2
81688: PUSH
81689: LD_VAR 0 1
81693: PPUSH
81694: LD_INT 2
81696: PUSH
81697: LD_INT 34
81699: PUSH
81700: LD_INT 12
81702: PUSH
81703: EMPTY
81704: LIST
81705: LIST
81706: PUSH
81707: LD_INT 34
81709: PUSH
81710: LD_INT 51
81712: PUSH
81713: EMPTY
81714: LIST
81715: LIST
81716: PUSH
81717: LD_INT 34
81719: PUSH
81720: LD_INT 32
81722: PUSH
81723: EMPTY
81724: LIST
81725: LIST
81726: PUSH
81727: LD_INT 34
81729: PUSH
81730: LD_INT 89
81732: PUSH
81733: EMPTY
81734: LIST
81735: LIST
81736: PUSH
81737: EMPTY
81738: LIST
81739: LIST
81740: LIST
81741: LIST
81742: LIST
81743: PPUSH
81744: CALL_OW 72
81748: ST_TO_ADDR
// end ;
81749: LD_VAR 0 2
81753: RET
// export function Negate ( value ) ; begin
81754: LD_INT 0
81756: PPUSH
// result := not value ;
81757: LD_ADDR_VAR 0 2
81761: PUSH
81762: LD_VAR 0 1
81766: NOT
81767: ST_TO_ADDR
// end ;
81768: LD_VAR 0 2
81772: RET
// export function Inc ( value ) ; begin
81773: LD_INT 0
81775: PPUSH
// result := value + 1 ;
81776: LD_ADDR_VAR 0 2
81780: PUSH
81781: LD_VAR 0 1
81785: PUSH
81786: LD_INT 1
81788: PLUS
81789: ST_TO_ADDR
// end ;
81790: LD_VAR 0 2
81794: RET
// export function Dec ( value ) ; begin
81795: LD_INT 0
81797: PPUSH
// result := value - 1 ;
81798: LD_ADDR_VAR 0 2
81802: PUSH
81803: LD_VAR 0 1
81807: PUSH
81808: LD_INT 1
81810: MINUS
81811: ST_TO_ADDR
// end ;
81812: LD_VAR 0 2
81816: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81817: LD_INT 0
81819: PPUSH
81820: PPUSH
81821: PPUSH
81822: PPUSH
81823: PPUSH
81824: PPUSH
81825: PPUSH
81826: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81827: LD_VAR 0 1
81831: PPUSH
81832: LD_VAR 0 2
81836: PPUSH
81837: CALL_OW 488
81841: NOT
81842: IFTRUE 81861
81844: PUSH
81845: LD_VAR 0 3
81849: PPUSH
81850: LD_VAR 0 4
81854: PPUSH
81855: CALL_OW 488
81859: NOT
81860: OR
81861: IFFALSE 81874
// begin result := - 1 ;
81863: LD_ADDR_VAR 0 5
81867: PUSH
81868: LD_INT 1
81870: NEG
81871: ST_TO_ADDR
// exit ;
81872: GO 82109
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81874: LD_ADDR_VAR 0 12
81878: PUSH
81879: LD_VAR 0 1
81883: PPUSH
81884: LD_VAR 0 2
81888: PPUSH
81889: LD_VAR 0 3
81893: PPUSH
81894: LD_VAR 0 4
81898: PPUSH
81899: CALL 80945 0 4
81903: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81904: LD_ADDR_VAR 0 11
81908: PUSH
81909: LD_VAR 0 1
81913: PPUSH
81914: LD_VAR 0 2
81918: PPUSH
81919: LD_VAR 0 12
81923: PUSH
81924: LD_INT 1
81926: ARRAY
81927: PPUSH
81928: LD_VAR 0 12
81932: PUSH
81933: LD_INT 2
81935: ARRAY
81936: PPUSH
81937: CALL_OW 298
81941: ST_TO_ADDR
// distance := 9999 ;
81942: LD_ADDR_VAR 0 10
81946: PUSH
81947: LD_INT 9999
81949: ST_TO_ADDR
// for i := 0 to 5 do
81950: LD_ADDR_VAR 0 6
81954: PUSH
81955: DOUBLE
81956: LD_INT 0
81958: DEC
81959: ST_TO_ADDR
81960: LD_INT 5
81962: PUSH
81963: FOR_TO
81964: IFFALSE 82107
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81966: LD_ADDR_VAR 0 7
81970: PUSH
81971: LD_VAR 0 1
81975: PPUSH
81976: LD_VAR 0 6
81980: PPUSH
81981: LD_VAR 0 11
81985: PPUSH
81986: CALL_OW 272
81990: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81991: LD_ADDR_VAR 0 8
81995: PUSH
81996: LD_VAR 0 2
82000: PPUSH
82001: LD_VAR 0 6
82005: PPUSH
82006: LD_VAR 0 11
82010: PPUSH
82011: CALL_OW 273
82015: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82016: LD_VAR 0 7
82020: PPUSH
82021: LD_VAR 0 8
82025: PPUSH
82026: CALL_OW 488
82030: NOT
82031: IFFALSE 82035
// continue ;
82033: GO 81963
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82035: LD_ADDR_VAR 0 9
82039: PUSH
82040: LD_VAR 0 12
82044: PUSH
82045: LD_INT 1
82047: ARRAY
82048: PPUSH
82049: LD_VAR 0 12
82053: PUSH
82054: LD_INT 2
82056: ARRAY
82057: PPUSH
82058: LD_VAR 0 7
82062: PPUSH
82063: LD_VAR 0 8
82067: PPUSH
82068: CALL_OW 298
82072: ST_TO_ADDR
// if tmp < distance then
82073: LD_VAR 0 9
82077: PUSH
82078: LD_VAR 0 10
82082: LESS
82083: IFFALSE 82105
// begin result := i ;
82085: LD_ADDR_VAR 0 5
82089: PUSH
82090: LD_VAR 0 6
82094: ST_TO_ADDR
// distance := tmp ;
82095: LD_ADDR_VAR 0 10
82099: PUSH
82100: LD_VAR 0 9
82104: ST_TO_ADDR
// end ; end ;
82105: GO 81963
82107: POP
82108: POP
// end ;
82109: LD_VAR 0 5
82113: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82114: LD_INT 0
82116: PPUSH
82117: PPUSH
// if not driver or not IsInUnit ( driver ) then
82118: LD_VAR 0 1
82122: NOT
82123: IFTRUE 82137
82125: PUSH
82126: LD_VAR 0 1
82130: PPUSH
82131: CALL_OW 310
82135: NOT
82136: OR
82137: IFFALSE 82141
// exit ;
82139: GO 82231
// vehicle := IsInUnit ( driver ) ;
82141: LD_ADDR_VAR 0 3
82145: PUSH
82146: LD_VAR 0 1
82150: PPUSH
82151: CALL_OW 310
82155: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82156: LD_VAR 0 1
82160: PPUSH
82161: LD_STRING \
82163: PUSH
82164: LD_INT 0
82166: PUSH
82167: LD_INT 0
82169: PUSH
82170: LD_INT 0
82172: PUSH
82173: LD_INT 0
82175: PUSH
82176: LD_INT 0
82178: PUSH
82179: LD_INT 0
82181: PUSH
82182: EMPTY
82183: LIST
82184: LIST
82185: LIST
82186: LIST
82187: LIST
82188: LIST
82189: LIST
82190: PUSH
82191: LD_STRING E
82193: PUSH
82194: LD_INT 0
82196: PUSH
82197: LD_INT 0
82199: PUSH
82200: LD_VAR 0 3
82204: PUSH
82205: LD_INT 0
82207: PUSH
82208: LD_INT 0
82210: PUSH
82211: LD_INT 0
82213: PUSH
82214: EMPTY
82215: LIST
82216: LIST
82217: LIST
82218: LIST
82219: LIST
82220: LIST
82221: LIST
82222: PUSH
82223: EMPTY
82224: LIST
82225: LIST
82226: PPUSH
82227: CALL_OW 446
// end ;
82231: LD_VAR 0 2
82235: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82236: LD_INT 0
82238: PPUSH
82239: PPUSH
// if not driver or not IsInUnit ( driver ) then
82240: LD_VAR 0 1
82244: NOT
82245: IFTRUE 82259
82247: PUSH
82248: LD_VAR 0 1
82252: PPUSH
82253: CALL_OW 310
82257: NOT
82258: OR
82259: IFFALSE 82263
// exit ;
82261: GO 82353
// vehicle := IsInUnit ( driver ) ;
82263: LD_ADDR_VAR 0 3
82267: PUSH
82268: LD_VAR 0 1
82272: PPUSH
82273: CALL_OW 310
82277: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82278: LD_VAR 0 1
82282: PPUSH
82283: LD_STRING \
82285: PUSH
82286: LD_INT 0
82288: PUSH
82289: LD_INT 0
82291: PUSH
82292: LD_INT 0
82294: PUSH
82295: LD_INT 0
82297: PUSH
82298: LD_INT 0
82300: PUSH
82301: LD_INT 0
82303: PUSH
82304: EMPTY
82305: LIST
82306: LIST
82307: LIST
82308: LIST
82309: LIST
82310: LIST
82311: LIST
82312: PUSH
82313: LD_STRING E
82315: PUSH
82316: LD_INT 0
82318: PUSH
82319: LD_INT 0
82321: PUSH
82322: LD_VAR 0 3
82326: PUSH
82327: LD_INT 0
82329: PUSH
82330: LD_INT 0
82332: PUSH
82333: LD_INT 0
82335: PUSH
82336: EMPTY
82337: LIST
82338: LIST
82339: LIST
82340: LIST
82341: LIST
82342: LIST
82343: LIST
82344: PUSH
82345: EMPTY
82346: LIST
82347: LIST
82348: PPUSH
82349: CALL_OW 447
// end ;
82353: LD_VAR 0 2
82357: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82358: LD_INT 0
82360: PPUSH
82361: PPUSH
82362: PPUSH
// tmp := [ ] ;
82363: LD_ADDR_VAR 0 5
82367: PUSH
82368: EMPTY
82369: ST_TO_ADDR
// for i in units do
82370: LD_ADDR_VAR 0 4
82374: PUSH
82375: LD_VAR 0 1
82379: PUSH
82380: FOR_IN
82381: IFFALSE 82419
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82383: LD_ADDR_VAR 0 5
82387: PUSH
82388: LD_VAR 0 5
82392: PPUSH
82393: LD_VAR 0 5
82397: PUSH
82398: LD_INT 1
82400: PLUS
82401: PPUSH
82402: LD_VAR 0 4
82406: PPUSH
82407: CALL_OW 256
82411: PPUSH
82412: CALL_OW 2
82416: ST_TO_ADDR
82417: GO 82380
82419: POP
82420: POP
// if not tmp then
82421: LD_VAR 0 5
82425: NOT
82426: IFFALSE 82430
// exit ;
82428: GO 82478
// if asc then
82430: LD_VAR 0 2
82434: IFFALSE 82458
// result := SortListByListAsc ( units , tmp ) else
82436: LD_ADDR_VAR 0 3
82440: PUSH
82441: LD_VAR 0 1
82445: PPUSH
82446: LD_VAR 0 5
82450: PPUSH
82451: CALL_OW 76
82455: ST_TO_ADDR
82456: GO 82478
// result := SortListByListDesc ( units , tmp ) ;
82458: LD_ADDR_VAR 0 3
82462: PUSH
82463: LD_VAR 0 1
82467: PPUSH
82468: LD_VAR 0 5
82472: PPUSH
82473: CALL_OW 77
82477: ST_TO_ADDR
// end ;
82478: LD_VAR 0 3
82482: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82483: LD_INT 0
82485: PPUSH
82486: PPUSH
// task := GetTaskList ( mech ) ;
82487: LD_ADDR_VAR 0 4
82491: PUSH
82492: LD_VAR 0 1
82496: PPUSH
82497: CALL_OW 437
82501: ST_TO_ADDR
// if not task then
82502: LD_VAR 0 4
82506: NOT
82507: IFFALSE 82511
// exit ;
82509: GO 82555
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82511: LD_ADDR_VAR 0 3
82515: PUSH
82516: LD_VAR 0 4
82520: PUSH
82521: LD_INT 1
82523: ARRAY
82524: PUSH
82525: LD_INT 1
82527: ARRAY
82528: PUSH
82529: LD_STRING r
82531: EQUAL
82532: IFFALSE 82554
82534: PUSH
82535: LD_VAR 0 4
82539: PUSH
82540: LD_INT 1
82542: ARRAY
82543: PUSH
82544: LD_INT 4
82546: ARRAY
82547: PUSH
82548: LD_VAR 0 2
82552: EQUAL
82553: AND
82554: ST_TO_ADDR
// end ;
82555: LD_VAR 0 3
82559: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82560: LD_INT 0
82562: PPUSH
// SetDir ( unit , d ) ;
82563: LD_VAR 0 1
82567: PPUSH
82568: LD_VAR 0 4
82572: PPUSH
82573: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82577: LD_ADDR_VAR 0 6
82581: PUSH
82582: LD_VAR 0 1
82586: PPUSH
82587: LD_VAR 0 2
82591: PPUSH
82592: LD_VAR 0 3
82596: PPUSH
82597: LD_VAR 0 5
82601: PPUSH
82602: CALL_OW 48
82606: ST_TO_ADDR
// end ;
82607: LD_VAR 0 6
82611: RET
// export function ToNaturalNumber ( number ) ; begin
82612: LD_INT 0
82614: PPUSH
// result := number div 1 ;
82615: LD_ADDR_VAR 0 2
82619: PUSH
82620: LD_VAR 0 1
82624: PUSH
82625: LD_INT 1
82627: DIV
82628: ST_TO_ADDR
// if number < 0 then
82629: LD_VAR 0 1
82633: PUSH
82634: LD_INT 0
82636: LESS
82637: IFFALSE 82647
// result := 0 ;
82639: LD_ADDR_VAR 0 2
82643: PUSH
82644: LD_INT 0
82646: ST_TO_ADDR
// end ;
82647: LD_VAR 0 2
82651: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82652: LD_INT 0
82654: PPUSH
82655: PPUSH
82656: PPUSH
// if not buildings then
82657: LD_VAR 0 1
82661: NOT
82662: IFFALSE 82666
// exit ;
82664: GO 82781
// tmp := [ ] ;
82666: LD_ADDR_VAR 0 5
82670: PUSH
82671: EMPTY
82672: ST_TO_ADDR
// for b in buildings do
82673: LD_ADDR_VAR 0 4
82677: PUSH
82678: LD_VAR 0 1
82682: PUSH
82683: FOR_IN
82684: IFFALSE 82722
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82686: LD_ADDR_VAR 0 5
82690: PUSH
82691: LD_VAR 0 5
82695: PPUSH
82696: LD_VAR 0 5
82700: PUSH
82701: LD_INT 1
82703: PLUS
82704: PPUSH
82705: LD_VAR 0 4
82709: PPUSH
82710: CALL_OW 266
82714: PPUSH
82715: CALL_OW 1
82719: ST_TO_ADDR
82720: GO 82683
82722: POP
82723: POP
// if not tmp then
82724: LD_VAR 0 5
82728: NOT
82729: IFFALSE 82733
// exit ;
82731: GO 82781
// if asc then
82733: LD_VAR 0 2
82737: IFFALSE 82761
// result := SortListByListAsc ( buildings , tmp ) else
82739: LD_ADDR_VAR 0 3
82743: PUSH
82744: LD_VAR 0 1
82748: PPUSH
82749: LD_VAR 0 5
82753: PPUSH
82754: CALL_OW 76
82758: ST_TO_ADDR
82759: GO 82781
// result := SortListByListDesc ( buildings , tmp ) ;
82761: LD_ADDR_VAR 0 3
82765: PUSH
82766: LD_VAR 0 1
82770: PPUSH
82771: LD_VAR 0 5
82775: PPUSH
82776: CALL_OW 77
82780: ST_TO_ADDR
// end ;
82781: LD_VAR 0 3
82785: RET
// export function SortByClass ( units , class ) ; var un ; begin
82786: LD_INT 0
82788: PPUSH
82789: PPUSH
// if not units or not class then
82790: LD_VAR 0 1
82794: NOT
82795: IFTRUE 82804
82797: PUSH
82798: LD_VAR 0 2
82802: NOT
82803: OR
82804: IFFALSE 82808
// exit ;
82806: GO 82903
// result := [ ] ;
82808: LD_ADDR_VAR 0 3
82812: PUSH
82813: EMPTY
82814: ST_TO_ADDR
// for un in units do
82815: LD_ADDR_VAR 0 4
82819: PUSH
82820: LD_VAR 0 1
82824: PUSH
82825: FOR_IN
82826: IFFALSE 82901
// if GetClass ( un ) = class then
82828: LD_VAR 0 4
82832: PPUSH
82833: CALL_OW 257
82837: PUSH
82838: LD_VAR 0 2
82842: EQUAL
82843: IFFALSE 82870
// result := Insert ( result , 1 , un ) else
82845: LD_ADDR_VAR 0 3
82849: PUSH
82850: LD_VAR 0 3
82854: PPUSH
82855: LD_INT 1
82857: PPUSH
82858: LD_VAR 0 4
82862: PPUSH
82863: CALL_OW 2
82867: ST_TO_ADDR
82868: GO 82899
// result := Replace ( result , result + 1 , un ) ;
82870: LD_ADDR_VAR 0 3
82874: PUSH
82875: LD_VAR 0 3
82879: PPUSH
82880: LD_VAR 0 3
82884: PUSH
82885: LD_INT 1
82887: PLUS
82888: PPUSH
82889: LD_VAR 0 4
82893: PPUSH
82894: CALL_OW 1
82898: ST_TO_ADDR
82899: GO 82825
82901: POP
82902: POP
// end ;
82903: LD_VAR 0 3
82907: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82908: LD_INT 0
82910: PPUSH
82911: PPUSH
82912: PPUSH
82913: PPUSH
82914: PPUSH
82915: PPUSH
82916: PPUSH
// result := [ ] ;
82917: LD_ADDR_VAR 0 4
82921: PUSH
82922: EMPTY
82923: ST_TO_ADDR
// if x - r < 0 then
82924: LD_VAR 0 1
82928: PUSH
82929: LD_VAR 0 3
82933: MINUS
82934: PUSH
82935: LD_INT 0
82937: LESS
82938: IFFALSE 82950
// min_x := 0 else
82940: LD_ADDR_VAR 0 8
82944: PUSH
82945: LD_INT 0
82947: ST_TO_ADDR
82948: GO 82966
// min_x := x - r ;
82950: LD_ADDR_VAR 0 8
82954: PUSH
82955: LD_VAR 0 1
82959: PUSH
82960: LD_VAR 0 3
82964: MINUS
82965: ST_TO_ADDR
// if y - r < 0 then
82966: LD_VAR 0 2
82970: PUSH
82971: LD_VAR 0 3
82975: MINUS
82976: PUSH
82977: LD_INT 0
82979: LESS
82980: IFFALSE 82992
// min_y := 0 else
82982: LD_ADDR_VAR 0 7
82986: PUSH
82987: LD_INT 0
82989: ST_TO_ADDR
82990: GO 83008
// min_y := y - r ;
82992: LD_ADDR_VAR 0 7
82996: PUSH
82997: LD_VAR 0 2
83001: PUSH
83002: LD_VAR 0 3
83006: MINUS
83007: ST_TO_ADDR
// max_x := x + r ;
83008: LD_ADDR_VAR 0 9
83012: PUSH
83013: LD_VAR 0 1
83017: PUSH
83018: LD_VAR 0 3
83022: PLUS
83023: ST_TO_ADDR
// max_y := y + r ;
83024: LD_ADDR_VAR 0 10
83028: PUSH
83029: LD_VAR 0 2
83033: PUSH
83034: LD_VAR 0 3
83038: PLUS
83039: ST_TO_ADDR
// for _x = min_x to max_x do
83040: LD_ADDR_VAR 0 5
83044: PUSH
83045: DOUBLE
83046: LD_VAR 0 8
83050: DEC
83051: ST_TO_ADDR
83052: LD_VAR 0 9
83056: PUSH
83057: FOR_TO
83058: IFFALSE 83159
// for _y = min_y to max_y do
83060: LD_ADDR_VAR 0 6
83064: PUSH
83065: DOUBLE
83066: LD_VAR 0 7
83070: DEC
83071: ST_TO_ADDR
83072: LD_VAR 0 10
83076: PUSH
83077: FOR_TO
83078: IFFALSE 83155
// begin if not ValidHex ( _x , _y ) then
83080: LD_VAR 0 5
83084: PPUSH
83085: LD_VAR 0 6
83089: PPUSH
83090: CALL_OW 488
83094: NOT
83095: IFFALSE 83099
// continue ;
83097: GO 83077
// if GetResourceTypeXY ( _x , _y ) then
83099: LD_VAR 0 5
83103: PPUSH
83104: LD_VAR 0 6
83108: PPUSH
83109: CALL_OW 283
83113: IFFALSE 83153
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83115: LD_ADDR_VAR 0 4
83119: PUSH
83120: LD_VAR 0 4
83124: PPUSH
83125: LD_VAR 0 4
83129: PUSH
83130: LD_INT 1
83132: PLUS
83133: PPUSH
83134: LD_VAR 0 5
83138: PUSH
83139: LD_VAR 0 6
83143: PUSH
83144: EMPTY
83145: LIST
83146: LIST
83147: PPUSH
83148: CALL_OW 1
83152: ST_TO_ADDR
// end ;
83153: GO 83077
83155: POP
83156: POP
83157: GO 83057
83159: POP
83160: POP
// end ;
83161: LD_VAR 0 4
83165: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83166: LD_INT 0
83168: PPUSH
83169: PPUSH
83170: PPUSH
83171: PPUSH
83172: PPUSH
83173: PPUSH
83174: PPUSH
83175: PPUSH
// if not units then
83176: LD_VAR 0 1
83180: NOT
83181: IFFALSE 83185
// exit ;
83183: GO 83717
// result := UnitFilter ( units , [ f_ok ] ) ;
83185: LD_ADDR_VAR 0 3
83189: PUSH
83190: LD_VAR 0 1
83194: PPUSH
83195: LD_INT 50
83197: PUSH
83198: EMPTY
83199: LIST
83200: PPUSH
83201: CALL_OW 72
83205: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83206: LD_ADDR_VAR 0 8
83210: PUSH
83211: LD_VAR 0 1
83215: PUSH
83216: LD_INT 1
83218: ARRAY
83219: PPUSH
83220: CALL_OW 255
83224: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83225: LD_ADDR_VAR 0 10
83229: PUSH
83230: LD_INT 29
83232: PUSH
83233: LD_INT 91
83235: PUSH
83236: LD_INT 49
83238: PUSH
83239: EMPTY
83240: LIST
83241: LIST
83242: LIST
83243: ST_TO_ADDR
// if not result then
83244: LD_VAR 0 3
83248: NOT
83249: IFFALSE 83253
// exit ;
83251: GO 83717
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83253: LD_ADDR_VAR 0 5
83257: PUSH
83258: LD_INT 81
83260: PUSH
83261: LD_VAR 0 8
83265: PUSH
83266: EMPTY
83267: LIST
83268: LIST
83269: PPUSH
83270: CALL_OW 69
83274: ST_TO_ADDR
// for i in result do
83275: LD_ADDR_VAR 0 4
83279: PUSH
83280: LD_VAR 0 3
83284: PUSH
83285: FOR_IN
83286: IFFALSE 83715
// begin tag := GetTag ( i ) + 1 ;
83288: LD_ADDR_VAR 0 9
83292: PUSH
83293: LD_VAR 0 4
83297: PPUSH
83298: CALL_OW 110
83302: PUSH
83303: LD_INT 1
83305: PLUS
83306: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83307: LD_ADDR_VAR 0 7
83311: PUSH
83312: LD_VAR 0 4
83316: PPUSH
83317: CALL_OW 250
83321: PPUSH
83322: LD_VAR 0 4
83326: PPUSH
83327: CALL_OW 251
83331: PPUSH
83332: LD_INT 4
83334: PPUSH
83335: CALL 82908 0 3
83339: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83340: LD_VAR 0 4
83344: PPUSH
83345: CALL_OW 247
83349: PUSH
83350: LD_INT 2
83352: EQUAL
83353: IFFALSE 83365
83355: PUSH
83356: LD_VAR 0 7
83360: PUSH
83361: LD_INT 2
83363: GREATER
83364: AND
83365: IFFALSE 83385
83367: PUSH
83368: LD_VAR 0 4
83372: PPUSH
83373: CALL_OW 264
83377: PUSH
83378: LD_VAR 0 10
83382: IN
83383: NOT
83384: AND
83385: IFFALSE 83424
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83387: LD_VAR 0 4
83391: PPUSH
83392: LD_VAR 0 7
83396: PUSH
83397: LD_INT 1
83399: ARRAY
83400: PUSH
83401: LD_INT 1
83403: ARRAY
83404: PPUSH
83405: LD_VAR 0 7
83409: PUSH
83410: LD_INT 1
83412: ARRAY
83413: PUSH
83414: LD_INT 2
83416: ARRAY
83417: PPUSH
83418: CALL_OW 116
83422: GO 83713
// if path > tag then
83424: LD_VAR 0 2
83428: PUSH
83429: LD_VAR 0 9
83433: GREATER
83434: IFFALSE 83642
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83436: LD_ADDR_VAR 0 6
83440: PUSH
83441: LD_VAR 0 5
83445: PPUSH
83446: LD_INT 91
83448: PUSH
83449: LD_VAR 0 4
83453: PUSH
83454: LD_INT 8
83456: PUSH
83457: EMPTY
83458: LIST
83459: LIST
83460: LIST
83461: PPUSH
83462: CALL_OW 72
83466: ST_TO_ADDR
// if nearEnemy then
83467: LD_VAR 0 6
83471: IFFALSE 83540
// begin if GetWeapon ( i ) = ru_time_lapser then
83473: LD_VAR 0 4
83477: PPUSH
83478: CALL_OW 264
83482: PUSH
83483: LD_INT 49
83485: EQUAL
83486: IFFALSE 83514
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83488: LD_VAR 0 4
83492: PPUSH
83493: LD_VAR 0 6
83497: PPUSH
83498: LD_VAR 0 4
83502: PPUSH
83503: CALL_OW 74
83507: PPUSH
83508: CALL_OW 112
83512: GO 83538
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83514: LD_VAR 0 4
83518: PPUSH
83519: LD_VAR 0 6
83523: PPUSH
83524: LD_VAR 0 4
83528: PPUSH
83529: CALL_OW 74
83533: PPUSH
83534: CALL 84798 0 2
// end else
83538: GO 83640
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83540: LD_VAR 0 4
83544: PPUSH
83545: LD_VAR 0 2
83549: PUSH
83550: LD_VAR 0 9
83554: ARRAY
83555: PUSH
83556: LD_INT 1
83558: ARRAY
83559: PPUSH
83560: LD_VAR 0 2
83564: PUSH
83565: LD_VAR 0 9
83569: ARRAY
83570: PUSH
83571: LD_INT 2
83573: ARRAY
83574: PPUSH
83575: CALL_OW 297
83579: PUSH
83580: LD_INT 6
83582: GREATER
83583: IFFALSE 83626
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83585: LD_VAR 0 4
83589: PPUSH
83590: LD_VAR 0 2
83594: PUSH
83595: LD_VAR 0 9
83599: ARRAY
83600: PUSH
83601: LD_INT 1
83603: ARRAY
83604: PPUSH
83605: LD_VAR 0 2
83609: PUSH
83610: LD_VAR 0 9
83614: ARRAY
83615: PUSH
83616: LD_INT 2
83618: ARRAY
83619: PPUSH
83620: CALL_OW 114
83624: GO 83640
// SetTag ( i , tag ) ;
83626: LD_VAR 0 4
83630: PPUSH
83631: LD_VAR 0 9
83635: PPUSH
83636: CALL_OW 109
// end else
83640: GO 83713
// if enemy then
83642: LD_VAR 0 5
83646: IFFALSE 83713
// begin if GetWeapon ( i ) = ru_time_lapser then
83648: LD_VAR 0 4
83652: PPUSH
83653: CALL_OW 264
83657: PUSH
83658: LD_INT 49
83660: EQUAL
83661: IFFALSE 83689
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83663: LD_VAR 0 4
83667: PPUSH
83668: LD_VAR 0 5
83672: PPUSH
83673: LD_VAR 0 4
83677: PPUSH
83678: CALL_OW 74
83682: PPUSH
83683: CALL_OW 112
83687: GO 83713
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83689: LD_VAR 0 4
83693: PPUSH
83694: LD_VAR 0 5
83698: PPUSH
83699: LD_VAR 0 4
83703: PPUSH
83704: CALL_OW 74
83708: PPUSH
83709: CALL 84798 0 2
// end ; end ;
83713: GO 83285
83715: POP
83716: POP
// end ;
83717: LD_VAR 0 3
83721: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83722: LD_INT 0
83724: PPUSH
83725: PPUSH
83726: PPUSH
// if not unit or IsInUnit ( unit ) then
83727: LD_VAR 0 1
83731: NOT
83732: IFTRUE 83745
83734: PUSH
83735: LD_VAR 0 1
83739: PPUSH
83740: CALL_OW 310
83744: OR
83745: IFFALSE 83749
// exit ;
83747: GO 83840
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83749: LD_ADDR_VAR 0 4
83753: PUSH
83754: LD_VAR 0 1
83758: PPUSH
83759: CALL_OW 250
83763: PPUSH
83764: LD_VAR 0 2
83768: PPUSH
83769: LD_INT 1
83771: PPUSH
83772: CALL_OW 272
83776: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83777: LD_ADDR_VAR 0 5
83781: PUSH
83782: LD_VAR 0 1
83786: PPUSH
83787: CALL_OW 251
83791: PPUSH
83792: LD_VAR 0 2
83796: PPUSH
83797: LD_INT 1
83799: PPUSH
83800: CALL_OW 273
83804: ST_TO_ADDR
// if ValidHex ( x , y ) then
83805: LD_VAR 0 4
83809: PPUSH
83810: LD_VAR 0 5
83814: PPUSH
83815: CALL_OW 488
83819: IFFALSE 83840
// ComTurnXY ( unit , x , y ) ;
83821: LD_VAR 0 1
83825: PPUSH
83826: LD_VAR 0 4
83830: PPUSH
83831: LD_VAR 0 5
83835: PPUSH
83836: CALL_OW 118
// end ;
83840: LD_VAR 0 3
83844: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83845: LD_INT 0
83847: PPUSH
83848: PPUSH
// result := false ;
83849: LD_ADDR_VAR 0 3
83853: PUSH
83854: LD_INT 0
83856: ST_TO_ADDR
// if not units then
83857: LD_VAR 0 2
83861: NOT
83862: IFFALSE 83866
// exit ;
83864: GO 83911
// for i in units do
83866: LD_ADDR_VAR 0 4
83870: PUSH
83871: LD_VAR 0 2
83875: PUSH
83876: FOR_IN
83877: IFFALSE 83909
// if See ( side , i ) then
83879: LD_VAR 0 1
83883: PPUSH
83884: LD_VAR 0 4
83888: PPUSH
83889: CALL_OW 292
83893: IFFALSE 83907
// begin result := true ;
83895: LD_ADDR_VAR 0 3
83899: PUSH
83900: LD_INT 1
83902: ST_TO_ADDR
// exit ;
83903: POP
83904: POP
83905: GO 83911
// end ;
83907: GO 83876
83909: POP
83910: POP
// end ;
83911: LD_VAR 0 3
83915: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83916: LD_INT 0
83918: PPUSH
83919: PPUSH
83920: PPUSH
83921: PPUSH
// if not unit or not points then
83922: LD_VAR 0 1
83926: NOT
83927: IFTRUE 83936
83929: PUSH
83930: LD_VAR 0 2
83934: NOT
83935: OR
83936: IFFALSE 83940
// exit ;
83938: GO 84030
// dist := 99999 ;
83940: LD_ADDR_VAR 0 5
83944: PUSH
83945: LD_INT 99999
83947: ST_TO_ADDR
// for i in points do
83948: LD_ADDR_VAR 0 4
83952: PUSH
83953: LD_VAR 0 2
83957: PUSH
83958: FOR_IN
83959: IFFALSE 84028
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83961: LD_ADDR_VAR 0 6
83965: PUSH
83966: LD_VAR 0 1
83970: PPUSH
83971: LD_VAR 0 4
83975: PUSH
83976: LD_INT 1
83978: ARRAY
83979: PPUSH
83980: LD_VAR 0 4
83984: PUSH
83985: LD_INT 2
83987: ARRAY
83988: PPUSH
83989: CALL_OW 297
83993: ST_TO_ADDR
// if tmpDist < dist then
83994: LD_VAR 0 6
83998: PUSH
83999: LD_VAR 0 5
84003: LESS
84004: IFFALSE 84026
// begin result := i ;
84006: LD_ADDR_VAR 0 3
84010: PUSH
84011: LD_VAR 0 4
84015: ST_TO_ADDR
// dist := tmpDist ;
84016: LD_ADDR_VAR 0 5
84020: PUSH
84021: LD_VAR 0 6
84025: ST_TO_ADDR
// end ; end ;
84026: GO 83958
84028: POP
84029: POP
// end ;
84030: LD_VAR 0 3
84034: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84035: LD_INT 0
84037: PPUSH
// uc_side := side ;
84038: LD_ADDR_OWVAR 20
84042: PUSH
84043: LD_VAR 0 1
84047: ST_TO_ADDR
// uc_nation := 3 ;
84048: LD_ADDR_OWVAR 21
84052: PUSH
84053: LD_INT 3
84055: ST_TO_ADDR
// vc_chassis := 25 ;
84056: LD_ADDR_OWVAR 37
84060: PUSH
84061: LD_INT 25
84063: ST_TO_ADDR
// vc_engine := engine_siberite ;
84064: LD_ADDR_OWVAR 39
84068: PUSH
84069: LD_INT 3
84071: ST_TO_ADDR
// vc_control := control_computer ;
84072: LD_ADDR_OWVAR 38
84076: PUSH
84077: LD_INT 3
84079: ST_TO_ADDR
// vc_weapon := 59 ;
84080: LD_ADDR_OWVAR 40
84084: PUSH
84085: LD_INT 59
84087: ST_TO_ADDR
// result := CreateVehicle ;
84088: LD_ADDR_VAR 0 5
84092: PUSH
84093: CALL_OW 45
84097: ST_TO_ADDR
// SetDir ( result , d ) ;
84098: LD_VAR 0 5
84102: PPUSH
84103: LD_VAR 0 4
84107: PPUSH
84108: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84112: LD_VAR 0 5
84116: PPUSH
84117: LD_VAR 0 2
84121: PPUSH
84122: LD_VAR 0 3
84126: PPUSH
84127: LD_INT 0
84129: PPUSH
84130: CALL_OW 48
// end ;
84134: LD_VAR 0 5
84138: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84139: LD_INT 0
84141: PPUSH
84142: PPUSH
84143: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84144: LD_ADDR_VAR 0 2
84148: PUSH
84149: LD_INT 0
84151: PUSH
84152: LD_INT 0
84154: PUSH
84155: LD_INT 0
84157: PUSH
84158: LD_INT 0
84160: PUSH
84161: EMPTY
84162: LIST
84163: LIST
84164: LIST
84165: LIST
84166: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84167: LD_VAR 0 1
84171: NOT
84172: IFTRUE 84205
84174: PUSH
84175: LD_VAR 0 1
84179: PPUSH
84180: CALL_OW 264
84184: PUSH
84185: LD_INT 12
84187: PUSH
84188: LD_INT 51
84190: PUSH
84191: LD_INT 32
84193: PUSH
84194: LD_INT 89
84196: PUSH
84197: EMPTY
84198: LIST
84199: LIST
84200: LIST
84201: LIST
84202: IN
84203: NOT
84204: OR
84205: IFFALSE 84209
// exit ;
84207: GO 84307
// for i := 1 to 3 do
84209: LD_ADDR_VAR 0 3
84213: PUSH
84214: DOUBLE
84215: LD_INT 1
84217: DEC
84218: ST_TO_ADDR
84219: LD_INT 3
84221: PUSH
84222: FOR_TO
84223: IFFALSE 84305
// begin tmp := GetCargo ( cargo , i ) ;
84225: LD_ADDR_VAR 0 4
84229: PUSH
84230: LD_VAR 0 1
84234: PPUSH
84235: LD_VAR 0 3
84239: PPUSH
84240: CALL_OW 289
84244: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84245: LD_ADDR_VAR 0 2
84249: PUSH
84250: LD_VAR 0 2
84254: PPUSH
84255: LD_VAR 0 3
84259: PPUSH
84260: LD_VAR 0 4
84264: PPUSH
84265: CALL_OW 1
84269: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84270: LD_ADDR_VAR 0 2
84274: PUSH
84275: LD_VAR 0 2
84279: PPUSH
84280: LD_INT 4
84282: PPUSH
84283: LD_VAR 0 2
84287: PUSH
84288: LD_INT 4
84290: ARRAY
84291: PUSH
84292: LD_VAR 0 4
84296: PLUS
84297: PPUSH
84298: CALL_OW 1
84302: ST_TO_ADDR
// end ;
84303: GO 84222
84305: POP
84306: POP
// end ;
84307: LD_VAR 0 2
84311: RET
// export function Length ( array ) ; begin
84312: LD_INT 0
84314: PPUSH
// result := array + 0 ;
84315: LD_ADDR_VAR 0 2
84319: PUSH
84320: LD_VAR 0 1
84324: PUSH
84325: LD_INT 0
84327: PLUS
84328: ST_TO_ADDR
// end ;
84329: LD_VAR 0 2
84333: RET
// export function PrepareArray ( array ) ; begin
84334: LD_INT 0
84336: PPUSH
// result := array diff 0 ;
84337: LD_ADDR_VAR 0 2
84341: PUSH
84342: LD_VAR 0 1
84346: PUSH
84347: LD_INT 0
84349: DIFF
84350: ST_TO_ADDR
// if not result [ 1 ] then
84351: LD_VAR 0 2
84355: PUSH
84356: LD_INT 1
84358: ARRAY
84359: NOT
84360: IFFALSE 84380
// result := Delete ( result , 1 ) ;
84362: LD_ADDR_VAR 0 2
84366: PUSH
84367: LD_VAR 0 2
84371: PPUSH
84372: LD_INT 1
84374: PPUSH
84375: CALL_OW 3
84379: ST_TO_ADDR
// end ;
84380: LD_VAR 0 2
84384: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84385: LD_INT 0
84387: PPUSH
84388: PPUSH
84389: PPUSH
84390: PPUSH
// sibRocketRange := 25 ;
84391: LD_ADDR_VAR 0 6
84395: PUSH
84396: LD_INT 25
84398: ST_TO_ADDR
// result := false ;
84399: LD_ADDR_VAR 0 4
84403: PUSH
84404: LD_INT 0
84406: ST_TO_ADDR
// for i := 0 to 5 do
84407: LD_ADDR_VAR 0 5
84411: PUSH
84412: DOUBLE
84413: LD_INT 0
84415: DEC
84416: ST_TO_ADDR
84417: LD_INT 5
84419: PUSH
84420: FOR_TO
84421: IFFALSE 84488
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84423: LD_VAR 0 1
84427: PPUSH
84428: LD_VAR 0 5
84432: PPUSH
84433: LD_VAR 0 6
84437: PPUSH
84438: CALL_OW 272
84442: PPUSH
84443: LD_VAR 0 2
84447: PPUSH
84448: LD_VAR 0 5
84452: PPUSH
84453: LD_VAR 0 6
84457: PPUSH
84458: CALL_OW 273
84462: PPUSH
84463: LD_VAR 0 3
84467: PPUSH
84468: CALL_OW 309
84472: IFFALSE 84486
// begin result := true ;
84474: LD_ADDR_VAR 0 4
84478: PUSH
84479: LD_INT 1
84481: ST_TO_ADDR
// exit ;
84482: POP
84483: POP
84484: GO 84490
// end ;
84486: GO 84420
84488: POP
84489: POP
// end ;
84490: LD_VAR 0 4
84494: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84495: LD_INT 0
84497: PPUSH
84498: PPUSH
84499: PPUSH
// if btype = b_depot then
84500: LD_VAR 0 2
84504: PUSH
84505: LD_INT 0
84507: EQUAL
84508: IFFALSE 84520
// begin result := true ;
84510: LD_ADDR_VAR 0 3
84514: PUSH
84515: LD_INT 1
84517: ST_TO_ADDR
// exit ;
84518: GO 84640
// end ; pom := GetBase ( depot ) ;
84520: LD_ADDR_VAR 0 4
84524: PUSH
84525: LD_VAR 0 1
84529: PPUSH
84530: CALL_OW 274
84534: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84535: LD_ADDR_VAR 0 5
84539: PUSH
84540: LD_VAR 0 2
84544: PPUSH
84545: LD_VAR 0 1
84549: PPUSH
84550: CALL_OW 248
84554: PPUSH
84555: CALL_OW 450
84559: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84560: LD_ADDR_VAR 0 3
84564: PUSH
84565: LD_VAR 0 4
84569: PPUSH
84570: LD_INT 1
84572: PPUSH
84573: CALL_OW 275
84577: PUSH
84578: LD_VAR 0 5
84582: PUSH
84583: LD_INT 1
84585: ARRAY
84586: GREATEREQUAL
84587: IFFALSE 84613
84589: PUSH
84590: LD_VAR 0 4
84594: PPUSH
84595: LD_INT 2
84597: PPUSH
84598: CALL_OW 275
84602: PUSH
84603: LD_VAR 0 5
84607: PUSH
84608: LD_INT 2
84610: ARRAY
84611: GREATEREQUAL
84612: AND
84613: IFFALSE 84639
84615: PUSH
84616: LD_VAR 0 4
84620: PPUSH
84621: LD_INT 3
84623: PPUSH
84624: CALL_OW 275
84628: PUSH
84629: LD_VAR 0 5
84633: PUSH
84634: LD_INT 3
84636: ARRAY
84637: GREATEREQUAL
84638: AND
84639: ST_TO_ADDR
// end ;
84640: LD_VAR 0 3
84644: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84645: LD_INT 0
84647: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84648: LD_VAR 0 1
84652: PPUSH
84653: LD_VAR 0 2
84657: PPUSH
84658: LD_INT 0
84660: PPUSH
84661: LD_INT 0
84663: PPUSH
84664: LD_INT 1
84666: PPUSH
84667: LD_INT 0
84669: PPUSH
84670: CALL_OW 587
// end ;
84674: LD_VAR 0 3
84678: RET
// export function CenterOnNow ( unit ) ; begin
84679: LD_INT 0
84681: PPUSH
// result := IsInUnit ( unit ) ;
84682: LD_ADDR_VAR 0 2
84686: PUSH
84687: LD_VAR 0 1
84691: PPUSH
84692: CALL_OW 310
84696: ST_TO_ADDR
// if not result then
84697: LD_VAR 0 2
84701: NOT
84702: IFFALSE 84714
// result := unit ;
84704: LD_ADDR_VAR 0 2
84708: PUSH
84709: LD_VAR 0 1
84713: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84714: LD_VAR 0 1
84718: PPUSH
84719: CALL_OW 87
// end ;
84723: LD_VAR 0 2
84727: RET
// export function ComMoveHex ( unit , hex ) ; begin
84728: LD_INT 0
84730: PPUSH
// if not hex then
84731: LD_VAR 0 2
84735: NOT
84736: IFFALSE 84740
// exit ;
84738: GO 84793
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84740: LD_VAR 0 2
84744: PUSH
84745: LD_INT 1
84747: ARRAY
84748: PPUSH
84749: LD_VAR 0 2
84753: PUSH
84754: LD_INT 2
84756: ARRAY
84757: PPUSH
84758: CALL_OW 428
84762: IFFALSE 84766
// exit ;
84764: GO 84793
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84766: LD_VAR 0 1
84770: PPUSH
84771: LD_VAR 0 2
84775: PUSH
84776: LD_INT 1
84778: ARRAY
84779: PPUSH
84780: LD_VAR 0 2
84784: PUSH
84785: LD_INT 2
84787: ARRAY
84788: PPUSH
84789: CALL_OW 111
// end ;
84793: LD_VAR 0 3
84797: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84798: LD_INT 0
84800: PPUSH
84801: PPUSH
84802: PPUSH
// if not unit or not enemy then
84803: LD_VAR 0 1
84807: NOT
84808: IFTRUE 84817
84810: PUSH
84811: LD_VAR 0 2
84815: NOT
84816: OR
84817: IFFALSE 84821
// exit ;
84819: GO 84947
// x := GetX ( enemy ) ;
84821: LD_ADDR_VAR 0 4
84825: PUSH
84826: LD_VAR 0 2
84830: PPUSH
84831: CALL_OW 250
84835: ST_TO_ADDR
// y := GetY ( enemy ) ;
84836: LD_ADDR_VAR 0 5
84840: PUSH
84841: LD_VAR 0 2
84845: PPUSH
84846: CALL_OW 251
84850: ST_TO_ADDR
// if ValidHex ( x , y ) then
84851: LD_VAR 0 4
84855: PPUSH
84856: LD_VAR 0 5
84860: PPUSH
84861: CALL_OW 488
84865: IFFALSE 84947
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84867: LD_VAR 0 2
84871: PPUSH
84872: CALL_OW 247
84876: PUSH
84877: LD_INT 3
84879: PUSH
84880: LD_INT 2
84882: PUSH
84883: EMPTY
84884: LIST
84885: LIST
84886: IN
84887: IFTRUE 84910
84889: PUSH
84890: LD_VAR 0 1
84894: PPUSH
84895: CALL_OW 255
84899: PPUSH
84900: LD_VAR 0 2
84904: PPUSH
84905: CALL_OW 292
84909: OR
84910: IFFALSE 84928
// ComAttackUnit ( unit , enemy ) else
84912: LD_VAR 0 1
84916: PPUSH
84917: LD_VAR 0 2
84921: PPUSH
84922: CALL_OW 115
84926: GO 84947
// ComAgressiveMove ( unit , x , y ) ;
84928: LD_VAR 0 1
84932: PPUSH
84933: LD_VAR 0 4
84937: PPUSH
84938: LD_VAR 0 5
84942: PPUSH
84943: CALL_OW 114
// end ;
84947: LD_VAR 0 3
84951: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84952: LD_INT 0
84954: PPUSH
84955: PPUSH
84956: PPUSH
// list := AreaToList ( area , 0 ) ;
84957: LD_ADDR_VAR 0 5
84961: PUSH
84962: LD_VAR 0 1
84966: PPUSH
84967: LD_INT 0
84969: PPUSH
84970: CALL_OW 517
84974: ST_TO_ADDR
// if not list then
84975: LD_VAR 0 5
84979: NOT
84980: IFFALSE 84984
// exit ;
84982: GO 85114
// if all then
84984: LD_VAR 0 2
84988: IFFALSE 85076
// begin for i := 1 to list [ 1 ] do
84990: LD_ADDR_VAR 0 4
84994: PUSH
84995: DOUBLE
84996: LD_INT 1
84998: DEC
84999: ST_TO_ADDR
85000: LD_VAR 0 5
85004: PUSH
85005: LD_INT 1
85007: ARRAY
85008: PUSH
85009: FOR_TO
85010: IFFALSE 85072
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85012: LD_ADDR_VAR 0 3
85016: PUSH
85017: LD_VAR 0 3
85021: PPUSH
85022: LD_VAR 0 3
85026: PUSH
85027: LD_INT 1
85029: PLUS
85030: PPUSH
85031: LD_VAR 0 5
85035: PUSH
85036: LD_INT 1
85038: ARRAY
85039: PUSH
85040: LD_VAR 0 4
85044: ARRAY
85045: PUSH
85046: LD_VAR 0 5
85050: PUSH
85051: LD_INT 2
85053: ARRAY
85054: PUSH
85055: LD_VAR 0 4
85059: ARRAY
85060: PUSH
85061: EMPTY
85062: LIST
85063: LIST
85064: PPUSH
85065: CALL_OW 1
85069: ST_TO_ADDR
85070: GO 85009
85072: POP
85073: POP
// exit ;
85074: GO 85114
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85076: LD_ADDR_VAR 0 3
85080: PUSH
85081: LD_VAR 0 5
85085: PUSH
85086: LD_INT 1
85088: ARRAY
85089: PUSH
85090: LD_INT 1
85092: ARRAY
85093: PUSH
85094: LD_VAR 0 5
85098: PUSH
85099: LD_INT 2
85101: ARRAY
85102: PUSH
85103: LD_INT 1
85105: ARRAY
85106: PUSH
85107: EMPTY
85108: LIST
85109: LIST
85110: PUSH
85111: EMPTY
85112: LIST
85113: ST_TO_ADDR
// end ;
85114: LD_VAR 0 3
85118: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85119: LD_INT 0
85121: PPUSH
85122: PPUSH
// list := AreaToList ( area , 0 ) ;
85123: LD_ADDR_VAR 0 4
85127: PUSH
85128: LD_VAR 0 1
85132: PPUSH
85133: LD_INT 0
85135: PPUSH
85136: CALL_OW 517
85140: ST_TO_ADDR
// if not list then
85141: LD_VAR 0 4
85145: NOT
85146: IFFALSE 85150
// exit ;
85148: GO 85191
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85150: LD_ADDR_VAR 0 3
85154: PUSH
85155: LD_VAR 0 4
85159: PUSH
85160: LD_INT 1
85162: ARRAY
85163: PUSH
85164: LD_INT 1
85166: ARRAY
85167: PUSH
85168: LD_VAR 0 4
85172: PUSH
85173: LD_INT 2
85175: ARRAY
85176: PUSH
85177: LD_INT 1
85179: ARRAY
85180: PUSH
85181: LD_VAR 0 2
85185: PUSH
85186: EMPTY
85187: LIST
85188: LIST
85189: LIST
85190: ST_TO_ADDR
// end ;
85191: LD_VAR 0 3
85195: RET
// export function First ( array ) ; begin
85196: LD_INT 0
85198: PPUSH
// if not array then
85199: LD_VAR 0 1
85203: NOT
85204: IFFALSE 85208
// exit ;
85206: GO 85222
// result := array [ 1 ] ;
85208: LD_ADDR_VAR 0 2
85212: PUSH
85213: LD_VAR 0 1
85217: PUSH
85218: LD_INT 1
85220: ARRAY
85221: ST_TO_ADDR
// end ;
85222: LD_VAR 0 2
85226: RET
// export function Last ( array ) ; begin
85227: LD_INT 0
85229: PPUSH
// if not array then
85230: LD_VAR 0 1
85234: NOT
85235: IFFALSE 85239
// exit ;
85237: GO 85255
// result := array [ array ] ;
85239: LD_ADDR_VAR 0 2
85243: PUSH
85244: LD_VAR 0 1
85248: PUSH
85249: LD_VAR 0 1
85253: ARRAY
85254: ST_TO_ADDR
// end ;
85255: LD_VAR 0 2
85259: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85260: LD_INT 0
85262: PPUSH
85263: PPUSH
// result := [ ] ;
85264: LD_ADDR_VAR 0 5
85268: PUSH
85269: EMPTY
85270: ST_TO_ADDR
// if not array then
85271: LD_VAR 0 1
85275: NOT
85276: IFFALSE 85280
// exit ;
85278: GO 85392
// for i := 1 to array do
85280: LD_ADDR_VAR 0 6
85284: PUSH
85285: DOUBLE
85286: LD_INT 1
85288: DEC
85289: ST_TO_ADDR
85290: LD_VAR 0 1
85294: PUSH
85295: FOR_TO
85296: IFFALSE 85390
// if array [ i ] [ index ] = value then
85298: LD_VAR 0 1
85302: PUSH
85303: LD_VAR 0 6
85307: ARRAY
85308: PUSH
85309: LD_VAR 0 2
85313: ARRAY
85314: PUSH
85315: LD_VAR 0 3
85319: EQUAL
85320: IFFALSE 85388
// begin if indexColumn then
85322: LD_VAR 0 4
85326: IFFALSE 85362
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85328: LD_ADDR_VAR 0 5
85332: PUSH
85333: LD_VAR 0 5
85337: PPUSH
85338: LD_VAR 0 1
85342: PUSH
85343: LD_VAR 0 6
85347: ARRAY
85348: PUSH
85349: LD_VAR 0 4
85353: ARRAY
85354: PPUSH
85355: CALL 80400 0 2
85359: ST_TO_ADDR
85360: GO 85388
// result := Join ( result , array [ i ] ) ;
85362: LD_ADDR_VAR 0 5
85366: PUSH
85367: LD_VAR 0 5
85371: PPUSH
85372: LD_VAR 0 1
85376: PUSH
85377: LD_VAR 0 6
85381: ARRAY
85382: PPUSH
85383: CALL 80400 0 2
85387: ST_TO_ADDR
// end ;
85388: GO 85295
85390: POP
85391: POP
// end ;
85392: LD_VAR 0 5
85396: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85397: LD_INT 0
85399: PPUSH
// if not vehicles or not parkingPoint then
85400: LD_VAR 0 1
85404: NOT
85405: IFTRUE 85414
85407: PUSH
85408: LD_VAR 0 2
85412: NOT
85413: OR
85414: IFFALSE 85418
// exit ;
85416: GO 85516
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85418: LD_ADDR_VAR 0 1
85422: PUSH
85423: LD_VAR 0 1
85427: PPUSH
85428: LD_INT 50
85430: PUSH
85431: EMPTY
85432: LIST
85433: PUSH
85434: LD_INT 3
85436: PUSH
85437: LD_INT 92
85439: PUSH
85440: LD_VAR 0 2
85444: PUSH
85445: LD_INT 1
85447: ARRAY
85448: PUSH
85449: LD_VAR 0 2
85453: PUSH
85454: LD_INT 2
85456: ARRAY
85457: PUSH
85458: LD_INT 8
85460: PUSH
85461: EMPTY
85462: LIST
85463: LIST
85464: LIST
85465: LIST
85466: PUSH
85467: EMPTY
85468: LIST
85469: LIST
85470: PUSH
85471: EMPTY
85472: LIST
85473: LIST
85474: PPUSH
85475: CALL_OW 72
85479: ST_TO_ADDR
// if not vehicles then
85480: LD_VAR 0 1
85484: NOT
85485: IFFALSE 85489
// exit ;
85487: GO 85516
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85489: LD_VAR 0 1
85493: PPUSH
85494: LD_VAR 0 2
85498: PUSH
85499: LD_INT 1
85501: ARRAY
85502: PPUSH
85503: LD_VAR 0 2
85507: PUSH
85508: LD_INT 2
85510: ARRAY
85511: PPUSH
85512: CALL_OW 111
// end ;
85516: LD_VAR 0 3
85520: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85521: LD_INT 0
85523: PPUSH
85524: PPUSH
85525: PPUSH
// if not side or not area then
85526: LD_VAR 0 1
85530: NOT
85531: IFTRUE 85540
85533: PUSH
85534: LD_VAR 0 2
85538: NOT
85539: OR
85540: IFFALSE 85544
// exit ;
85542: GO 85663
// tmp := AreaToList ( area , 0 ) ;
85544: LD_ADDR_VAR 0 5
85548: PUSH
85549: LD_VAR 0 2
85553: PPUSH
85554: LD_INT 0
85556: PPUSH
85557: CALL_OW 517
85561: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85562: LD_ADDR_VAR 0 4
85566: PUSH
85567: DOUBLE
85568: LD_INT 1
85570: DEC
85571: ST_TO_ADDR
85572: LD_VAR 0 5
85576: PUSH
85577: LD_INT 1
85579: ARRAY
85580: PUSH
85581: FOR_TO
85582: IFFALSE 85661
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85584: LD_VAR 0 5
85588: PUSH
85589: LD_INT 1
85591: ARRAY
85592: PUSH
85593: LD_VAR 0 4
85597: ARRAY
85598: PPUSH
85599: LD_VAR 0 5
85603: PUSH
85604: LD_INT 2
85606: ARRAY
85607: PUSH
85608: LD_VAR 0 4
85612: ARRAY
85613: PPUSH
85614: CALL_OW 351
85618: IFFALSE 85659
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85620: LD_VAR 0 5
85624: PUSH
85625: LD_INT 1
85627: ARRAY
85628: PUSH
85629: LD_VAR 0 4
85633: ARRAY
85634: PPUSH
85635: LD_VAR 0 5
85639: PUSH
85640: LD_INT 2
85642: ARRAY
85643: PUSH
85644: LD_VAR 0 4
85648: ARRAY
85649: PPUSH
85650: LD_VAR 0 1
85654: PPUSH
85655: CALL_OW 244
// end ;
85659: GO 85581
85661: POP
85662: POP
// end ;
85663: LD_VAR 0 3
85667: RET
// export function UniqueArray ( array ) ; var i ; begin
85668: LD_INT 0
85670: PPUSH
85671: PPUSH
// result := [ ] ;
85672: LD_ADDR_VAR 0 2
85676: PUSH
85677: EMPTY
85678: ST_TO_ADDR
// if not array then
85679: LD_VAR 0 1
85683: NOT
85684: IFFALSE 85688
// exit ;
85686: GO 85749
// for i := 1 to array do
85688: LD_ADDR_VAR 0 3
85692: PUSH
85693: DOUBLE
85694: LD_INT 1
85696: DEC
85697: ST_TO_ADDR
85698: LD_VAR 0 1
85702: PUSH
85703: FOR_TO
85704: IFFALSE 85747
// if not array [ i ] in result then
85706: LD_VAR 0 1
85710: PUSH
85711: LD_VAR 0 3
85715: ARRAY
85716: PUSH
85717: LD_VAR 0 2
85721: IN
85722: NOT
85723: IFFALSE 85745
// result := Join ( result , i ) ;
85725: LD_ADDR_VAR 0 2
85729: PUSH
85730: LD_VAR 0 2
85734: PPUSH
85735: LD_VAR 0 3
85739: PPUSH
85740: CALL 80400 0 2
85744: ST_TO_ADDR
85745: GO 85703
85747: POP
85748: POP
// end ; end_of_file
85749: LD_VAR 0 2
85753: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85754: LD_VAR 0 1
85758: PUSH
85759: LD_INT 200
85761: DOUBLE
85762: GREATEREQUAL
85763: IFFALSE 85771
85765: LD_INT 299
85767: DOUBLE
85768: LESSEQUAL
85769: IFTRUE 85773
85771: GO 85805
85773: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85774: LD_VAR 0 1
85778: PPUSH
85779: LD_VAR 0 2
85783: PPUSH
85784: LD_VAR 0 3
85788: PPUSH
85789: LD_VAR 0 4
85793: PPUSH
85794: LD_VAR 0 5
85798: PPUSH
85799: CALL 36710 0 5
85803: GO 85882
85805: LD_INT 300
85807: DOUBLE
85808: GREATEREQUAL
85809: IFFALSE 85817
85811: LD_INT 399
85813: DOUBLE
85814: LESSEQUAL
85815: IFTRUE 85819
85817: GO 85881
85819: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85820: LD_VAR 0 1
85824: PPUSH
85825: LD_VAR 0 2
85829: PPUSH
85830: LD_VAR 0 3
85834: PPUSH
85835: LD_VAR 0 4
85839: PPUSH
85840: LD_VAR 0 5
85844: PPUSH
85845: LD_VAR 0 6
85849: PPUSH
85850: LD_VAR 0 7
85854: PPUSH
85855: LD_VAR 0 8
85859: PPUSH
85860: LD_VAR 0 9
85864: PPUSH
85865: LD_VAR 0 10
85869: PPUSH
85870: LD_VAR 0 11
85874: PPUSH
85875: CALL 32594 0 11
85879: GO 85882
85881: POP
// end ;
85882: PPOPN 11
85884: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85885: LD_VAR 0 1
85889: PPUSH
85890: LD_VAR 0 2
85894: PPUSH
85895: LD_VAR 0 3
85899: PPUSH
85900: LD_VAR 0 4
85904: PPUSH
85905: LD_VAR 0 5
85909: PPUSH
85910: CALL 36091 0 5
// end ; end_of_file
85914: PPOPN 5
85916: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85917: LD_VAR 0 1
85921: PPUSH
85922: LD_VAR 0 2
85926: PPUSH
85927: LD_VAR 0 3
85931: PPUSH
85932: LD_VAR 0 4
85936: PPUSH
85937: LD_VAR 0 5
85941: PPUSH
85942: LD_VAR 0 6
85946: PPUSH
85947: CALL 20134 0 6
// end ;
85951: PPOPN 6
85953: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85954: LD_INT 0
85956: PPUSH
// begin if not units then
85957: LD_VAR 0 1
85961: NOT
85962: IFFALSE 85966
// exit ;
85964: GO 86000
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
85966: LD_VAR 0 1
85970: PPUSH
85971: LD_VAR 0 2
85975: PPUSH
85976: LD_VAR 0 3
85980: PPUSH
85981: LD_VAR 0 4
85985: PPUSH
85986: LD_VAR 0 5
85990: PPUSH
85991: LD_VAR 0 6
85995: PPUSH
85996: CALL 42217 0 6
// end ;
86000: PPOPN 7
86002: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86003: CALL 20021 0 0
// end ;
86007: PPOPN 1
86009: END
