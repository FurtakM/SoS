// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15311 0 0
// PrepareDifficulty ;
 226: CALL 12526 0 0
// PrepareVehicles ;
 230: CALL 1765 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1339 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3153 0 0
// PrepareWestBase ;
 258: CALL 3668 0 0
// PrepareEastBase ;
 262: CALL 3228 0 0
// PrepareOtherRussians ;
 266: CALL 3780 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_STRING 11_
 688: PPUSH
 689: CALL 37431 0 3
 693: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 694: LD_EXP 1
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 21
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 58
 733: PUSH
 734: EMPTY
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 755: LD_STRING 11_Lisa
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: IFFALSE 816
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_STRING Lisa
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 11_
 781: PPUSH
 782: CALL 37431 0 3
 786: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 787: LD_EXP 2
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 799: LD_EXP 2
 803: PPUSH
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end else
 814: GO 832
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL 1339 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 832: LD_STRING 11_Donaldson
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 893
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 845: LD_ADDR_EXP 3
 849: PUSH
 850: LD_STRING Donaldson
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_STRING 11_
 858: PPUSH
 859: CALL 37431 0 3
 863: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 4
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// end else
 891: GO 909
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 909: LD_STRING 11_Cyrus
 911: PPUSH
 912: CALL_OW 28
 916: PUSH
 917: LD_INT 1
 919: EQUAL
 920: IFFALSE 970
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 37431 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1339 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: PUSH
 994: LD_INT 1
 996: EQUAL
 997: IFFALSE 1047
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
 999: LD_ADDR_EXP 6
1003: PUSH
1004: LD_STRING Denis
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_STRING 11_
1012: PPUSH
1013: CALL 37431 0 3
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1063
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1047: LD_INT 4
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 1339 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1063: LD_STRING 11_Frank
1065: PPUSH
1066: CALL_OW 28
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1124
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 37431 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1201
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING Cornell
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_STRING 11_
1166: PPUSH
1167: CALL 37431 0 3
1171: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1184: LD_EXP 10
1188: PPUSH
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// end else
1199: GO 1217
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1201: LD_INT 4
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL 1339 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_EXP 14
1226: PPUSH
1227: LD_INT 26
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: ST_TO_ADDR
// if not tmp then
1242: LD_VAR 0 2
1246: NOT
1247: IFFALSE 1276
// begin PrepareSoldier ( sex_male , 8 ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 8
1254: PPUSH
1255: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// end else
1274: GO 1315
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1276: LD_VAR 0 2
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: DIFF
1314: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1315: LD_ADDR_EXP 22
1319: PUSH
1320: LD_STRING Powell
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: LD_STRING 
1328: PPUSH
1329: CALL 37431 0 3
1333: ST_TO_ADDR
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// if mech = 1 then
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1591
// begin if others11 > 0 then
1356: LD_EXP 14
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1531
// begin for i := 1 to others11 - 1 do
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 14
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1468
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1388: LD_EXP 14
1392: PUSH
1393: LD_VAR 0 6
1397: ARRAY
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: CALL_OW 259
1406: PUSH
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL_OW 259
1429: LESS
1430: IFFALSE 1466
// begin mecha = others11 [ i + 1 ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_EXP 14
1441: PUSH
1442: LD_VAR 0 6
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1452: LD_VAR 0 9
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL_OW 336
// break ;
1464: GO 1468
// end ; end ;
1466: GO 1385
1468: POP
1469: POP
// if spawnMode = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1499
// PlaceUnitArea ( mecha , area , false ) else
1480: LD_VAR 0 9
1484: PPUSH
1485: LD_VAR 0 1
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
1497: GO 1513
// PlaceHumanInUnit ( mecha , veh ) ;
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 52
// others11 = others11 diff mecha ;
1513: LD_ADDR_EXP 14
1517: PUSH
1518: LD_EXP 14
1522: PUSH
1523: LD_VAR 0 9
1527: DIFF
1528: ST_TO_ADDR
// end else
1529: GO 1589
// begin hc_name =  ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING 
1538: ST_TO_ADDR
// hc_gallery =  ;
1539: LD_ADDR_OWVAR 33
1543: PUSH
1544: LD_STRING 
1546: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1547: LD_INT 0
1549: PPUSH
1550: LD_INT 7
1552: PPUSH
1553: LD_INT 9
1555: PPUSH
1556: CALL_OW 12
1560: PPUSH
1561: CALL_OW 383
// un = CreateHuman ;
1565: LD_ADDR_VAR 0 7
1569: PUSH
1570: CALL_OW 44
1574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1575: LD_VAR 0 7
1579: PPUSH
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 52
// end ; end else
1589: GO 1760
// begin if others11 > 0 then
1591: LD_EXP 14
1595: PUSH
1596: LD_INT 0
1598: GREATER
1599: IFFALSE 1672
// begin if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1634
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1611: LD_EXP 14
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
1632: GO 1652
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1634: LD_EXP 14
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_VAR 0 2
1647: PPUSH
1648: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1652: LD_ADDR_EXP 14
1656: PUSH
1657: LD_EXP 14
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 3
1669: ST_TO_ADDR
// end else
1670: GO 1760
// begin hc_name =  ;
1672: LD_ADDR_OWVAR 26
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 3
1699: PUSH
1700: LD_INT 4
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: ARRAY
1720: PPUSH
1721: LD_INT 7
1723: PPUSH
1724: LD_INT 9
1726: PPUSH
1727: CALL_OW 12
1731: PPUSH
1732: CALL_OW 380
// un = CreateHuman ;
1736: LD_ADDR_VAR 0 7
1740: PUSH
1741: CALL_OW 44
1745: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1746: LD_VAR 0 7
1750: PPUSH
1751: LD_VAR 0 2
1755: PPUSH
1756: CALL_OW 52
// end ; end ; end ;
1760: LD_VAR 0 5
1764: RET
// export function PrepareVehicles ; var veh ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1785: LD_ADDR_OWVAR 37
1789: PUSH
1790: LD_INT 3
1792: ST_TO_ADDR
// vc_engine = 3 ;
1793: LD_ADDR_OWVAR 39
1797: PUSH
1798: LD_INT 3
1800: ST_TO_ADDR
// vc_control = 3 ;
1801: LD_ADDR_OWVAR 38
1805: PUSH
1806: LD_INT 3
1808: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// veh = CreateVehicle ;
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: CALL_OW 45
1826: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1827: LD_VAR 0 2
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// vc_weapon = us_double_gun ;
1842: LD_ADDR_OWVAR 40
1846: PUSH
1847: LD_INT 5
1849: ST_TO_ADDR
// vc_control = 1 ;
1850: LD_ADDR_OWVAR 38
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// veh = CreateVehicle ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: CALL_OW 45
1867: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// vc_weapon = us_light_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// vc_control = 3 ;
1891: LD_ADDR_OWVAR 38
1895: PUSH
1896: LD_INT 3
1898: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1899: LD_ADDR_OWVAR 37
1903: PUSH
1904: LD_INT 2
1906: ST_TO_ADDR
// veh = CreateVehicle ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1932: LD_ADDR_OWVAR 40
1936: PUSH
1937: LD_INT 4
1939: ST_TO_ADDR
// veh = CreateVehicle ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: CALL_OW 45
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: LD_INT 4
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PowellSupport1 ; var veh , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
// uc_side = 1 ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// uc_nation = 1 ;
1983: LD_ADDR_OWVAR 21
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1991: LD_STRING 11_Brown
1993: PPUSH
1994: CALL_OW 28
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: IFFALSE 2052
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2004: LD_ADDR_EXP 7
2008: PUSH
2009: LD_STRING Brown
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_STRING 11_
2017: PPUSH
2018: CALL 37431 0 3
2022: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2023: LD_EXP 7
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2035: LD_EXP 7
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL_OW 49
// end else
2050: GO 2068
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2052: LD_INT 4
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL 1339 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2068: LD_STRING 11_Gary
2070: PPUSH
2071: CALL_OW 28
2075: PUSH
2076: LD_INT 1
2078: EQUAL
2079: IFFALSE 2129
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2081: LD_ADDR_EXP 11
2085: PUSH
2086: LD_STRING Gary
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_STRING 11_
2094: PPUSH
2095: CALL 37431 0 3
2099: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2100: LD_EXP 11
2104: PPUSH
2105: LD_INT 2
2107: PPUSH
2108: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2112: LD_EXP 11
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 49
// end else
2127: GO 2145
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 1339 0 4
// end ; vc_chassis = us_medium_tracked ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 3
2152: ST_TO_ADDR
// vc_engine = 3 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 3
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = us_crane ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 13
2176: ST_TO_ADDR
// veh = CreateVehicle ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: CALL_OW 45
2186: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2214: LD_INT 4
2216: PPUSH
2217: LD_VAR 0 2
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL 1339 0 4
// vc_weapon = 9 ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 9
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2277: LD_INT 4
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 2
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: CALL 1339 0 4
// vc_control = 3 ;
2295: LD_ADDR_OWVAR 38
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2303: LD_ADDR_OWVAR 40
2307: PUSH
2308: LD_INT 12
2310: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2311: LD_ADDR_EXP 15
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2321: LD_ADDR_EXP 16
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2331: LD_EXP 15
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2343: LD_EXP 16
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 4
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2385: LD_EXP 15
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 100
2395: PPUSH
2396: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2400: LD_EXP 16
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_INT 80
2410: PPUSH
2411: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2415: LD_EXP 16
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_INT 20
2425: PPUSH
2426: CALL_OW 291
// end ;
2430: LD_VAR 0 1
2434: RET
// export function PowellSupport2 ; var veh , un ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// uc_side = 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 2
2463: ST_TO_ADDR
// vc_engine = 3 ;
2464: LD_ADDR_OWVAR 39
2468: PUSH
2469: LD_INT 3
2471: ST_TO_ADDR
// vc_control = 3 ;
2472: LD_ADDR_OWVAR 38
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2480: LD_ADDR_OWVAR 40
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// veh = CreateVehicle ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: CALL_OW 45
2497: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 4
2505: PPUSH
2506: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// vc_control = 1 ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2533: LD_ADDR_OWVAR 37
2537: PUSH
2538: LD_INT 2
2540: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2559: LD_VAR 0 2
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2571: LD_VAR 0 2
2575: PPUSH
2576: LD_INT 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2586: LD_STRING 11_Bobby
2588: PPUSH
2589: CALL_OW 28
2593: PUSH
2594: LD_INT 1
2596: EQUAL
2597: IFFALSE 2646
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2599: LD_ADDR_EXP 4
2603: PUSH
2604: LD_STRING Bobby
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_STRING 11_
2612: PPUSH
2613: CALL 37431 0 3
2617: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2618: LD_EXP 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2630: LD_EXP 4
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 52
// end else
2644: GO 2664
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 1339 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2664: LD_STRING 11_Houten
2666: PPUSH
2667: CALL_OW 28
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: IFFALSE 2725
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2677: LD_ADDR_EXP 9
2681: PUSH
2682: LD_STRING Houten
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 11_
2690: PPUSH
2691: CALL 37431 0 3
2695: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2696: LD_EXP 9
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2708: LD_EXP 9
2712: PPUSH
2713: LD_INT 4
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 49
// end else
2723: GO 2741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2725: LD_INT 4
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL 1339 0 4
// end ; vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2757: LD_ADDR_EXP 17
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2767: LD_EXP 17
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: CALL_OW 233
// amCargo4 = CreateVehicle ;
2779: LD_ADDR_EXP 18
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2789: LD_EXP 18
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// amCargo5 = CreateVehicle ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: CALL_OW 45
2810: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2811: LD_EXP 19
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2823: LD_EXP 17
2827: PPUSH
2828: LD_INT 4
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2838: LD_EXP 18
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 49
// if kurtStatus > 0 then
2868: LD_EXP 26
2872: PUSH
2873: LD_INT 0
2875: GREATER
2876: IFFALSE 2925
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2878: LD_EXP 17
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2893: LD_EXP 18
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2908: LD_EXP 19
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_INT 80
2918: PPUSH
2919: CALL_OW 291
// end else
2923: GO 2970
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2925: LD_EXP 17
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2940: LD_EXP 18
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: LD_INT 60
2950: PPUSH
2951: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2955: LD_EXP 19
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 100
2965: PPUSH
2966: CALL_OW 291
// end ; end ;
2970: LD_VAR 0 1
2974: RET
// export function PowellSupport3 ; var veh , un ; begin
2975: LD_INT 0
2977: PPUSH
2978: PPUSH
2979: PPUSH
// uc_side = 1 ;
2980: LD_ADDR_OWVAR 20
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// uc_nation = 1 ;
2988: LD_ADDR_OWVAR 21
2992: PUSH
2993: LD_INT 1
2995: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL 1339 0 4
// vc_chassis = us_medium_wheeled ;
3012: LD_ADDR_OWVAR 37
3016: PUSH
3017: LD_INT 2
3019: ST_TO_ADDR
// vc_engine = 3 ;
3020: LD_ADDR_OWVAR 39
3024: PUSH
3025: LD_INT 3
3027: ST_TO_ADDR
// vc_control = 3 ;
3028: LD_ADDR_OWVAR 38
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3036: LD_ADDR_OWVAR 40
3040: PUSH
3041: LD_INT 12
3043: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3044: LD_ADDR_EXP 20
3048: PUSH
3049: CALL_OW 45
3053: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3054: LD_ADDR_EXP 21
3058: PUSH
3059: CALL_OW 45
3063: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3064: LD_EXP 20
3068: PPUSH
3069: LD_INT 4
3071: PPUSH
3072: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3076: LD_EXP 21
3080: PPUSH
3081: LD_INT 4
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3088: LD_EXP 20
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3103: LD_EXP 21
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3118: LD_EXP 20
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 100
3128: PPUSH
3129: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3133: LD_EXP 21
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 100
3143: PPUSH
3144: CALL_OW 291
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareRussianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 3 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3164: LD_ADDR_EXP 23
3168: PUSH
3169: LD_STRING Davidov
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_STRING 
3177: PPUSH
3178: CALL 37431 0 3
3182: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3183: LD_EXP 23
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3195: LD_ADDR_EXP 34
3199: PUSH
3200: LD_EXP 34
3204: PUSH
3205: LD_EXP 23
3209: ADD
3210: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3211: LD_EXP 34
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 336
// end ;
3223: LD_VAR 0 1
3227: RET
// export function PrepareEastBase ; var i , un ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: LD_INT 121
3241: PPUSH
3242: LD_EXP 36
3246: PPUSH
3247: LD_EXP 37
3251: PPUSH
3252: CALL_OW 12
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 121
3275: PPUSH
3276: LD_EXP 36
3280: PPUSH
3281: LD_EXP 37
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 9
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_EXP 36
3314: PPUSH
3315: LD_EXP 37
3319: PPUSH
3320: CALL_OW 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3335: LD_INT 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: LD_INT 112
3343: PPUSH
3344: LD_EXP 36
3348: PPUSH
3349: LD_EXP 37
3353: PPUSH
3354: CALL_OW 12
3358: PPUSH
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 6
3364: PPUSH
3365: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3369: LD_INT 3
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 47
3377: PPUSH
3378: LD_EXP 36
3382: PPUSH
3383: LD_EXP 37
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: LD_INT 4
3395: PPUSH
3396: LD_INT 6
3398: PPUSH
3399: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_INT 129
3411: PPUSH
3412: LD_EXP 36
3416: PPUSH
3417: LD_EXP 37
3421: PPUSH
3422: CALL_OW 12
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 6
3432: PPUSH
3433: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 135
3445: PPUSH
3446: LD_EXP 36
3450: PPUSH
3451: LD_EXP 37
3455: PPUSH
3456: CALL_OW 12
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 6
3466: PPUSH
3467: CALL 12845 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 30
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3546
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_EXP 36
3523: PPUSH
3524: LD_EXP 37
3528: PPUSH
3529: CALL_OW 12
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL 12845 0 6
3544: GO 3505
3546: POP
3547: POP
// for i = 1 to 5 do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 5
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3661
// begin uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// hc_gallery =  ;
3580: LD_ADDR_OWVAR 33
3584: PUSH
3585: LD_STRING 
3587: ST_TO_ADDR
// hc_name =  ;
3588: LD_ADDR_OWVAR 26
3592: PUSH
3593: LD_STRING 
3595: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_EXP 36
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: CALL_OW 12
3616: PPUSH
3617: CALL_OW 380
// un = CreateHuman ;
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3643: LD_ADDR_EXP 34
3647: PUSH
3648: LD_EXP 34
3652: PUSH
3653: LD_VAR 0 3
3657: ADD
3658: ST_TO_ADDR
// end ;
3659: GO 3561
3661: POP
3662: POP
// end ;
3663: LD_VAR 0 1
3667: RET
// export function PrepareWestBase ; var i , un ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: LD_INT 6
3681: PPUSH
3682: LD_EXP 36
3686: PPUSH
3687: LD_EXP 37
3691: PPUSH
3692: CALL_OW 12
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 91
3715: PPUSH
3716: LD_EXP 36
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: CALL_OW 12
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL 12845 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 21
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 6
3770: PPUSH
3771: CALL 12845 0 6
// end ;
3775: LD_VAR 0 1
3779: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side = 3 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// uc_nation = 3 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// for i = 1 to 5 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 5
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3886
// begin hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_EXP 36
3844: PPUSH
3845: LD_EXP 37
3849: PPUSH
3850: CALL_OW 12
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// end ;
3884: GO 3815
3886: POP
3887: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
3888: LD_ADDR_VAR 0 2
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PUSH
3916: LD_OWVAR 67
3920: ARRAY
3921: PUSH
3922: FOR_TO
3923: IFFALSE 3993
// begin hc_gallery =  ;
3925: LD_ADDR_OWVAR 33
3929: PUSH
3930: LD_STRING 
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 4
3946: PPUSH
3947: LD_EXP 36
3951: PPUSH
3952: LD_EXP 37
3956: PPUSH
3957: CALL_OW 12
3961: PPUSH
3962: CALL_OW 380
// un = CreateHuman ;
3966: LD_ADDR_VAR 0 3
3970: PUSH
3971: CALL_OW 44
3975: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3976: LD_VAR 0 3
3980: PPUSH
3981: LD_INT 8
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 49
// end ;
3991: GO 3922
3993: POP
3994: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: DOUBLE
4001: LD_INT 1
4003: DEC
4004: ST_TO_ADDR
4005: LD_INT 3
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: LD_OWVAR 67
4027: ARRAY
4028: PUSH
4029: FOR_TO
4030: IFFALSE 4226
// begin vc_engine = 3 ;
4032: LD_ADDR_OWVAR 39
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// vc_control = 1 ;
4040: LD_ADDR_OWVAR 38
4044: PUSH
4045: LD_INT 1
4047: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4048: LD_ADDR_OWVAR 40
4052: PUSH
4053: LD_INT 42
4055: PUSH
4056: LD_INT 43
4058: PUSH
4059: LD_INT 44
4061: PUSH
4062: LD_INT 45
4064: PUSH
4065: LD_INT 46
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 5
4080: PPUSH
4081: CALL_OW 12
4085: ARRAY
4086: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4087: LD_OWVAR 40
4091: PUSH
4092: LD_INT 46
4094: EQUAL
4095: IFFALSE 4107
// vc_chassis = ru_heavy_tracked else
4097: LD_ADDR_OWVAR 37
4101: PUSH
4102: LD_INT 24
4104: ST_TO_ADDR
4105: GO 4134
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4107: LD_ADDR_OWVAR 37
4111: PUSH
4112: LD_INT 22
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 12
4132: ARRAY
4133: ST_TO_ADDR
// veh = CreateVehicle ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: CALL_OW 45
4143: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4144: LD_VAR 0 4
4148: PPUSH
4149: LD_INT 3
4151: PPUSH
4152: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4156: LD_VAR 0 4
4160: PPUSH
4161: LD_INT 5
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// hc_gallery =  ;
4171: LD_ADDR_OWVAR 33
4175: PUSH
4176: LD_STRING 
4178: ST_TO_ADDR
// hc_name =  ;
4179: LD_ADDR_OWVAR 26
4183: PUSH
4184: LD_STRING 
4186: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4187: LD_INT 0
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 10
4195: PPUSH
4196: CALL_OW 380
// un = CreateHuman ;
4200: LD_ADDR_VAR 0 3
4204: PUSH
4205: CALL_OW 44
4209: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4210: LD_VAR 0 3
4214: PPUSH
4215: LD_VAR 0 4
4219: PPUSH
4220: CALL_OW 52
// end ;
4224: GO 4029
4226: POP
4227: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_OWVAR 67
4260: ARRAY
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4410
// begin vc_engine = 3 ;
4265: LD_ADDR_OWVAR 39
4269: PUSH
4270: LD_INT 3
4272: ST_TO_ADDR
// vc_control = 3 ;
4273: LD_ADDR_OWVAR 38
4277: PUSH
4278: LD_INT 3
4280: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 42
4288: PUSH
4289: LD_INT 43
4291: PUSH
4292: LD_INT 44
4294: PUSH
4295: LD_INT 45
4297: PUSH
4298: LD_INT 46
4300: PUSH
4301: LD_INT 49
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 5
4317: PPUSH
4318: CALL_OW 12
4322: ARRAY
4323: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4324: LD_OWVAR 40
4328: PUSH
4329: LD_INT 46
4331: EQUAL
4332: IFFALSE 4344
// vc_chassis = ru_heavy_tracked else
4334: LD_ADDR_OWVAR 37
4338: PUSH
4339: LD_INT 24
4341: ST_TO_ADDR
4342: GO 4371
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4344: LD_ADDR_OWVAR 37
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 21
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_INT 2
4364: PPUSH
4365: CALL_OW 12
4369: ARRAY
4370: ST_TO_ADDR
// veh = CreateVehicle ;
4371: LD_ADDR_VAR 0 4
4375: PUSH
4376: CALL_OW 45
4380: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_INT 3
4388: PPUSH
4389: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4393: LD_VAR 0 4
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: LD_INT 0
4403: PPUSH
4404: CALL_OW 49
// end ;
4408: GO 4262
4410: POP
4411: POP
// end ; end_of_file
4412: LD_VAR 0 1
4416: RET
// export function PrepareKurt ; begin
4417: LD_INT 0
4419: PPUSH
// uc_side = 8 ;
4420: LD_ADDR_OWVAR 20
4424: PUSH
4425: LD_INT 8
4427: ST_TO_ADDR
// uc_nation = 2 ;
4428: LD_ADDR_OWVAR 21
4432: PUSH
4433: LD_INT 2
4435: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4436: LD_ADDR_OWVAR 37
4440: PUSH
4441: LD_INT 13
4443: ST_TO_ADDR
// vc_engine = 1 ;
4444: LD_ADDR_OWVAR 39
4448: PUSH
4449: LD_INT 1
4451: ST_TO_ADDR
// vc_control = 1 ;
4452: LD_ADDR_OWVAR 38
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// vc_weapon = 24 ;
4460: LD_ADDR_OWVAR 40
4464: PUSH
4465: LD_INT 24
4467: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4468: LD_ADDR_EXP 25
4472: PUSH
4473: CALL_OW 45
4477: ST_TO_ADDR
// if kurtStatus > 0 then
4478: LD_EXP 26
4482: PUSH
4483: LD_INT 0
4485: GREATER
4486: IFFALSE 4538
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4488: LD_ADDR_EXP 24
4492: PUSH
4493: LD_STRING Kurt
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: LD_STRING 
4501: PPUSH
4502: CALL 37431 0 3
4506: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4507: LD_EXP 25
4511: PPUSH
4512: LD_INT 4
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4522: LD_EXP 24
4526: PPUSH
4527: LD_EXP 25
4531: PPUSH
4532: CALL_OW 52
// end else
4536: GO 4615
// begin hc_name =  ;
4538: LD_ADDR_OWVAR 26
4542: PUSH
4543: LD_STRING 
4545: ST_TO_ADDR
// hc_gallery =  ;
4546: LD_ADDR_OWVAR 33
4550: PUSH
4551: LD_STRING 
4553: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 10
4559: PPUSH
4560: CALL_OW 381
// Kurt = CreateHuman ;
4564: LD_ADDR_EXP 24
4568: PUSH
4569: CALL_OW 44
4573: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4574: LD_EXP 25
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4589: LD_EXP 24
4593: PPUSH
4594: LD_EXP 25
4598: PPUSH
4599: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4603: LD_EXP 24
4607: PPUSH
4608: LD_STRING AltKurt
4610: PPUSH
4611: CALL_OW 38
// end ; end ;
4615: LD_VAR 0 1
4619: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4620: LD_INT 0
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
// for i = 1 to 3 do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: DOUBLE
4632: LD_INT 1
4634: DEC
4635: ST_TO_ADDR
4636: LD_INT 3
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4761
// begin uc_side = 1 ;
4642: LD_ADDR_OWVAR 20
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// uc_nation = 2 ;
4650: LD_ADDR_OWVAR 21
4654: PUSH
4655: LD_INT 2
4657: ST_TO_ADDR
// hc_gallery =  ;
4658: LD_ADDR_OWVAR 33
4662: PUSH
4663: LD_STRING 
4665: ST_TO_ADDR
// hc_name =  ;
4666: LD_ADDR_OWVAR 26
4670: PUSH
4671: LD_STRING 
4673: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4674: LD_EXP 26
4678: PUSH
4679: LD_INT 0
4681: EQUAL
4682: PUSH
4683: LD_EXP 26
4687: PUSH
4688: LD_INT 2
4690: EQUAL
4691: OR
4692: IFFALSE 4709
// PrepareHuman ( false , 1 , 6 ) else
4694: LD_INT 0
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 6
4702: PPUSH
4703: CALL_OW 380
4707: GO 4722
// PrepareHuman ( false , 1 , 8 ) ;
4709: LD_INT 0
4711: PPUSH
4712: LD_INT 1
4714: PPUSH
4715: LD_INT 8
4717: PPUSH
4718: CALL_OW 380
// un = CreateHuman ;
4722: LD_ADDR_VAR 0 3
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 4
4739: PPUSH
4740: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4744: LD_VAR 0 3
4748: PPUSH
4749: LD_INT 4
4751: PPUSH
4752: LD_INT 0
4754: PPUSH
4755: CALL_OW 49
// end ;
4759: GO 4639
4761: POP
4762: POP
// vc_chassis = 14 ;
4763: LD_ADDR_OWVAR 37
4767: PUSH
4768: LD_INT 14
4770: ST_TO_ADDR
// vc_engine = 3 ;
4771: LD_ADDR_OWVAR 39
4775: PUSH
4776: LD_INT 3
4778: ST_TO_ADDR
// vc_control = 1 ;
4779: LD_ADDR_OWVAR 38
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4787: LD_ADDR_OWVAR 40
4791: PUSH
4792: LD_INT 27
4794: PUSH
4795: LD_INT 26
4797: PUSH
4798: LD_INT 28
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 1
4808: PPUSH
4809: LD_INT 3
4811: PPUSH
4812: CALL_OW 12
4816: ARRAY
4817: ST_TO_ADDR
// veh = CreateVehicle ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: CALL_OW 45
4827: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4828: LD_VAR 0 4
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4840: LD_VAR 0 4
4844: PPUSH
4845: LD_INT 4
4847: PPUSH
4848: LD_INT 0
4850: PPUSH
4851: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4855: LD_EXP 26
4859: PUSH
4860: LD_INT 0
4862: EQUAL
4863: PUSH
4864: LD_EXP 26
4868: PUSH
4869: LD_INT 2
4871: EQUAL
4872: OR
4873: IFFALSE 4890
// PrepareHuman ( false , 3 , 6 ) else
4875: LD_INT 0
4877: PPUSH
4878: LD_INT 3
4880: PPUSH
4881: LD_INT 6
4883: PPUSH
4884: CALL_OW 380
4888: GO 4903
// PrepareHuman ( false , 3 , 8 ) ;
4890: LD_INT 0
4892: PPUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 8
4898: PPUSH
4899: CALL_OW 380
// un = CreateHuman ;
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: CALL_OW 44
4912: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4913: LD_VAR 0 3
4917: PPUSH
4918: LD_VAR 0 4
4922: PPUSH
4923: CALL_OW 52
// vc_chassis = 14 ;
4927: LD_ADDR_OWVAR 37
4931: PUSH
4932: LD_INT 14
4934: ST_TO_ADDR
// vc_engine = 3 ;
4935: LD_ADDR_OWVAR 39
4939: PUSH
4940: LD_INT 3
4942: ST_TO_ADDR
// vc_control = 1 ;
4943: LD_ADDR_OWVAR 38
4947: PUSH
4948: LD_INT 1
4950: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4951: LD_ADDR_OWVAR 40
4955: PUSH
4956: LD_INT 27
4958: PUSH
4959: LD_INT 26
4961: PUSH
4962: LD_INT 28
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: CALL_OW 12
4980: ARRAY
4981: ST_TO_ADDR
// veh = CreateVehicle ;
4982: LD_ADDR_VAR 0 4
4986: PUSH
4987: CALL_OW 45
4991: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4992: LD_VAR 0 4
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5004: LD_VAR 0 4
5008: PPUSH
5009: LD_INT 4
5011: PPUSH
5012: LD_INT 0
5014: PPUSH
5015: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5019: LD_EXP 26
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: PUSH
5028: LD_EXP 26
5032: PUSH
5033: LD_INT 2
5035: EQUAL
5036: OR
5037: IFFALSE 5054
// PrepareHuman ( false , 4 , 6 ) else
5039: LD_INT 0
5041: PPUSH
5042: LD_INT 4
5044: PPUSH
5045: LD_INT 6
5047: PPUSH
5048: CALL_OW 380
5052: GO 5067
// PrepareHuman ( false , 4 , 8 ) ;
5054: LD_INT 0
5056: PPUSH
5057: LD_INT 4
5059: PPUSH
5060: LD_INT 8
5062: PPUSH
5063: CALL_OW 380
// un = CreateHuman ;
5067: LD_ADDR_VAR 0 3
5071: PUSH
5072: CALL_OW 44
5076: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5089: LD_VAR 0 3
5093: PPUSH
5094: LD_VAR 0 4
5098: PPUSH
5099: CALL_OW 52
// vc_chassis = 14 ;
5103: LD_ADDR_OWVAR 37
5107: PUSH
5108: LD_INT 14
5110: ST_TO_ADDR
// vc_engine = 3 ;
5111: LD_ADDR_OWVAR 39
5115: PUSH
5116: LD_INT 3
5118: ST_TO_ADDR
// vc_control = 1 ;
5119: LD_ADDR_OWVAR 38
5123: PUSH
5124: LD_INT 1
5126: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5127: LD_ADDR_OWVAR 40
5131: PUSH
5132: LD_INT 27
5134: PUSH
5135: LD_INT 26
5137: PUSH
5138: LD_INT 28
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 1
5148: PPUSH
5149: LD_INT 3
5151: PPUSH
5152: CALL_OW 12
5156: ARRAY
5157: ST_TO_ADDR
// veh = CreateVehicle ;
5158: LD_ADDR_VAR 0 4
5162: PUSH
5163: CALL_OW 45
5167: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 4
5175: PPUSH
5176: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5180: LD_VAR 0 4
5184: PPUSH
5185: LD_INT 4
5187: PPUSH
5188: LD_INT 0
5190: PPUSH
5191: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5195: LD_EXP 26
5199: PUSH
5200: LD_INT 0
5202: EQUAL
5203: PUSH
5204: LD_EXP 26
5208: PUSH
5209: LD_INT 2
5211: EQUAL
5212: OR
5213: IFFALSE 5230
// PrepareHuman ( false , 2 , 4 ) else
5215: LD_INT 0
5217: PPUSH
5218: LD_INT 2
5220: PPUSH
5221: LD_INT 4
5223: PPUSH
5224: CALL_OW 380
5228: GO 5243
// PrepareHuman ( false , 2 , 8 ) ;
5230: LD_INT 0
5232: PPUSH
5233: LD_INT 2
5235: PPUSH
5236: LD_INT 8
5238: PPUSH
5239: CALL_OW 380
// un = CreateHuman ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: CALL_OW 44
5252: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_INT 4
5260: PPUSH
5261: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: LD_VAR 0 4
5274: PPUSH
5275: CALL_OW 52
// end ;
5279: LD_VAR 0 1
5283: RET
// export function PrepareAttackLegion ; var i , un ; begin
5284: LD_INT 0
5286: PPUSH
5287: PPUSH
5288: PPUSH
// for i = 1 to 4 do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 4
5301: PUSH
5302: FOR_TO
5303: IFFALSE 5413
// begin uc_side = 8 ;
5305: LD_ADDR_OWVAR 20
5309: PUSH
5310: LD_INT 8
5312: ST_TO_ADDR
// uc_nation = 2 ;
5313: LD_ADDR_OWVAR 21
5317: PUSH
5318: LD_INT 2
5320: ST_TO_ADDR
// hc_gallery =  ;
5321: LD_ADDR_OWVAR 33
5325: PUSH
5326: LD_STRING 
5328: ST_TO_ADDR
// hc_name =  ;
5329: LD_ADDR_OWVAR 26
5333: PUSH
5334: LD_STRING 
5336: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5337: LD_INT 0
5339: PPUSH
5340: LD_INT 1
5342: PUSH
5343: LD_INT 8
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 1
5352: PPUSH
5353: LD_INT 2
5355: PPUSH
5356: CALL_OW 12
5360: ARRAY
5361: PPUSH
5362: LD_INT 6
5364: PPUSH
5365: LD_INT 8
5367: PPUSH
5368: CALL_OW 12
5372: PPUSH
5373: CALL_OW 380
// un = CreateHuman ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: CALL_OW 44
5386: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_INT 19
5394: PPUSH
5395: LD_INT 0
5397: PPUSH
5398: CALL_OW 49
// ComCrawl ( un ) ;
5402: LD_VAR 0 3
5406: PPUSH
5407: CALL_OW 137
// end ;
5411: GO 5302
5413: POP
5414: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5415: LD_INT 1
5417: PPUSH
5418: LD_INT 8
5420: PPUSH
5421: LD_INT 2
5423: PPUSH
5424: LD_INT 1
5426: PPUSH
5427: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5431: LD_INT 20
5433: PPUSH
5434: LD_INT 3
5436: PPUSH
5437: CALL 14823 0 2
// end ; end_of_file
5441: LD_VAR 0 1
5445: RET
// every 1 do var i ;
5446: GO 5448
5448: DISABLE
5449: LD_INT 0
5451: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5452: LD_INT 10
5454: PPUSH
5455: LD_INT 122
5457: PPUSH
5458: LD_INT 145
5460: PPUSH
5461: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5465: LD_INT 137
5467: PPUSH
5468: LD_INT 84
5470: PPUSH
5471: LD_INT 61
5473: PPUSH
5474: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5478: LD_EXP 1
5482: PPUSH
5483: CALL_OW 310
5487: PPUSH
5488: CALL_OW 87
// InGameOn ;
5492: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5496: LD_INT 22
5498: PUSH
5499: LD_INT 1
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: PPUSH
5511: LD_INT 130
5513: PPUSH
5514: LD_INT 103
5516: PPUSH
5517: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5521: LD_VAR 0 1
5525: PPUSH
5526: LD_INT 114
5528: PPUSH
5529: LD_INT 102
5531: PPUSH
5532: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5536: LD_EXP 1
5540: PPUSH
5541: LD_STRING D1-JMM-1
5543: PPUSH
5544: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5548: LD_EXP 1
5552: PPUSH
5553: CALL_OW 310
5557: PPUSH
5558: CALL_OW 87
// if IsOk ( Donaldson ) then
5562: LD_EXP 3
5566: PPUSH
5567: CALL_OW 302
5571: IFFALSE 5651
// begin Say ( Donaldson , D1-Don-1 ) ;
5573: LD_EXP 3
5577: PPUSH
5578: LD_STRING D1-Don-1
5580: PPUSH
5581: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5585: LD_EXP 1
5589: PPUSH
5590: CALL_OW 310
5594: PPUSH
5595: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5599: LD_EXP 1
5603: PPUSH
5604: LD_STRING D1-JMM-2
5606: PPUSH
5607: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5611: LD_EXP 1
5615: PPUSH
5616: CALL_OW 310
5620: PPUSH
5621: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5625: LD_EXP 3
5629: PPUSH
5630: LD_STRING D1-Don-2
5632: PPUSH
5633: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5637: LD_EXP 1
5641: PPUSH
5642: CALL_OW 310
5646: PPUSH
5647: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: CALL_OW 69
5665: PPUSH
5666: LD_INT 110
5668: PPUSH
5669: LD_INT 101
5671: PPUSH
5672: CALL_OW 171
// wait ( 0 0$1 ) ;
5676: LD_INT 35
5678: PPUSH
5679: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 310
5692: PPUSH
5693: CALL_OW 87
// wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5704: LD_EXP 1
5708: PPUSH
5709: CALL_OW 310
5713: PPUSH
5714: CALL_OW 87
// wait ( 0 0$1 ) ;
5718: LD_INT 35
5720: PPUSH
5721: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5725: LD_EXP 1
5729: PPUSH
5730: CALL_OW 310
5734: PPUSH
5735: CALL_OW 87
// wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5746: LD_EXP 1
5750: PPUSH
5751: CALL_OW 310
5755: PPUSH
5756: CALL_OW 87
// end ;
5760: PPOPN 1
5762: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 102
5768: PPUSH
5769: LD_INT 94
5771: PPUSH
5772: CALL_OW 293
5776: IFFALSE 5967
5778: GO 5780
5780: DISABLE
5781: LD_INT 0
5783: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5784: LD_INT 102
5786: PPUSH
5787: LD_INT 94
5789: PPUSH
5790: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5794: LD_INT 22
5796: PUSH
5797: LD_INT 1
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 26
5806: PUSH
5807: LD_INT 1
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 2
5816: PUSH
5817: LD_INT 25
5819: PUSH
5820: LD_INT 1
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 25
5829: PUSH
5830: LD_INT 2
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: LD_INT 25
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 25
5849: PUSH
5850: LD_INT 4
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 25
5869: PUSH
5870: LD_INT 8
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PPUSH
5891: CALL_OW 69
5895: PPUSH
5896: LD_STRING D1-Sol1-2
5898: PPUSH
5899: LD_STRING 
5901: PPUSH
5902: CALL 12340 0 3
// Say ( JMM , D1-JMM-3 ) ;
5906: LD_EXP 1
5910: PPUSH
5911: LD_STRING D1-JMM-3
5913: PPUSH
5914: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5918: LD_STRING M1
5920: PPUSH
5921: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5925: LD_ADDR_VAR 0 1
5929: PUSH
5930: LD_INT 22
5932: PUSH
5933: LD_INT 1
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PPUSH
5940: CALL_OW 69
5944: PUSH
5945: FOR_IN
5946: IFFALSE 5965
// ComMoveXY ( i , 95 , 84 ) ;
5948: LD_VAR 0 1
5952: PPUSH
5953: LD_INT 95
5955: PPUSH
5956: LD_INT 84
5958: PPUSH
5959: CALL_OW 111
5963: GO 5945
5965: POP
5966: POP
// end ;
5967: PPOPN 1
5969: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5979: LD_ADDR_VAR 0 2
5983: PUSH
5984: LD_INT 8
5986: PPUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 25
5999: PUSH
6000: LD_INT 9
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: CALL_OW 70
6015: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: PPUSH
6034: CALL_OW 69
6038: ST_TO_ADDR
// enable ;
6039: ENABLE
// for i in your_units do
6040: LD_ADDR_VAR 0 1
6044: PUSH
6045: LD_VAR 0 3
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6717
// begin if See ( 3 , i ) then
6053: LD_INT 3
6055: PPUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 292
6065: IFFALSE 6715
// begin disable ;
6067: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 96
6075: PPUSH
6076: LD_INT 85
6078: PPUSH
6079: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 96
6090: PPUSH
6091: LD_INT 85
6093: PPUSH
6094: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 96
6105: PPUSH
6106: LD_INT 85
6108: PPUSH
6109: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: LD_INT 96
6120: PPUSH
6121: LD_INT 85
6123: PPUSH
6124: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6128: LD_VAR 0 2
6132: PPUSH
6133: LD_INT 96
6135: PPUSH
6136: LD_INT 85
6138: PPUSH
6139: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6143: LD_VAR 0 2
6147: PPUSH
6148: LD_INT 96
6150: PPUSH
6151: LD_INT 85
6153: PPUSH
6154: CALL_OW 214
// wait ( 0 0$2 ) ;
6158: LD_INT 70
6160: PPUSH
6161: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6165: LD_EXP 1
6169: PPUSH
6170: LD_STRING D1a-JMM-1
6172: PPUSH
6173: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6177: LD_EXP 3
6181: PPUSH
6182: LD_STRING D1a-Don-1
6184: PPUSH
6185: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6189: LD_ADDR_VAR 0 1
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: PUSH
6209: FOR_IN
6210: IFFALSE 6229
// ComMoveXY ( i , 109 , 102 ) ;
6212: LD_VAR 0 1
6216: PPUSH
6217: LD_INT 109
6219: PPUSH
6220: LD_INT 102
6222: PPUSH
6223: CALL_OW 111
6227: GO 6209
6229: POP
6230: POP
// Say ( JMM , D1a-JMM-2 ) ;
6231: LD_EXP 1
6235: PPUSH
6236: LD_STRING D1a-JMM-2
6238: PPUSH
6239: CALL_OW 88
// wait ( 0 0$10 ) ;
6243: LD_INT 350
6245: PPUSH
6246: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6250: LD_EXP 1
6254: PPUSH
6255: CALL_OW 310
6259: PPUSH
6260: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6264: LD_EXP 3
6268: PPUSH
6269: LD_STRING D1b-Don-1
6271: PPUSH
6272: CALL_OW 88
// if IsOk ( Donaldson ) then
6276: LD_EXP 3
6280: PPUSH
6281: CALL_OW 302
6285: IFFALSE 6299
// Say ( JMM , D1b-JMM-1 ) ;
6287: LD_EXP 1
6291: PPUSH
6292: LD_STRING D1b-JMM-1
6294: PPUSH
6295: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6299: LD_INT 22
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 26
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 25
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 25
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 25
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 25
6364: PUSH
6365: LD_INT 5
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 25
6374: PUSH
6375: LD_INT 8
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: PPUSH
6401: LD_STRING D1b-Sol1-1
6403: PPUSH
6404: LD_STRING 
6406: PPUSH
6407: CALL 12340 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6411: LD_EXP 3
6415: PPUSH
6416: LD_STRING D1b-Don-2
6418: PPUSH
6419: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6423: LD_EXP 1
6427: PPUSH
6428: LD_STRING D1b-JMM-2
6430: PPUSH
6431: CALL_OW 88
// dec = ShowQuery1 ;
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: CALL 12803 0 0
6444: ST_TO_ADDR
// if dec = 1 then
6445: LD_VAR 0 4
6449: PUSH
6450: LD_INT 1
6452: EQUAL
6453: IFFALSE 6559
// begin Say ( JMM , D2-JMM-1 ) ;
6455: LD_EXP 1
6459: PPUSH
6460: LD_STRING D2-JMM-1
6462: PPUSH
6463: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6467: LD_EXP 22
6471: PPUSH
6472: LD_STRING D2-Pow-1
6474: PPUSH
6475: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6479: LD_EXP 1
6483: PPUSH
6484: LD_STRING D2a-JMM-1
6486: PPUSH
6487: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6491: LD_EXP 22
6495: PPUSH
6496: LD_STRING D2a-Pow-1
6498: PPUSH
6499: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6503: LD_EXP 1
6507: PPUSH
6508: LD_STRING D2a-JMM-2
6510: PPUSH
6511: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6515: LD_EXP 22
6519: PPUSH
6520: LD_STRING D2a-Pow-2
6522: PPUSH
6523: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D2a-JMM-3
6534: PPUSH
6535: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6539: LD_EXP 22
6543: PPUSH
6544: LD_STRING D2a-Pow-3
6546: PPUSH
6547: CALL_OW 94
// secondPass = 2 ;
6551: LD_ADDR_EXP 27
6555: PUSH
6556: LD_INT 2
6558: ST_TO_ADDR
// end ; if dec = 2 then
6559: LD_VAR 0 4
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: IFFALSE 6661
// begin Say ( JMM , D2-JMM-1 ) ;
6569: LD_EXP 1
6573: PPUSH
6574: LD_STRING D2-JMM-1
6576: PPUSH
6577: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6581: LD_EXP 22
6585: PPUSH
6586: LD_STRING D2-Pow-1
6588: PPUSH
6589: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6593: LD_EXP 1
6597: PPUSH
6598: LD_STRING D2b-JMM-1
6600: PPUSH
6601: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6605: LD_EXP 22
6609: PPUSH
6610: LD_STRING D2b-Pow-1
6612: PPUSH
6613: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6617: LD_EXP 1
6621: PPUSH
6622: LD_STRING D2c-JMM-1
6624: PPUSH
6625: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6629: LD_EXP 22
6633: PPUSH
6634: LD_STRING D2c-Pow-1
6636: PPUSH
6637: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6641: LD_EXP 1
6645: PPUSH
6646: LD_STRING D2c-JMM-2
6648: PPUSH
6649: CALL_OW 88
// secondPass = 2 ;
6653: LD_ADDR_EXP 27
6657: PUSH
6658: LD_INT 2
6660: ST_TO_ADDR
// end ; if dec = 3 then
6661: LD_VAR 0 4
6665: PUSH
6666: LD_INT 3
6668: EQUAL
6669: IFFALSE 6679
// secondPass = 1 ;
6671: LD_ADDR_EXP 27
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// InGameOff ;
6679: CALL_OW 9
// ruAI = 1 ;
6683: LD_ADDR_EXP 41
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 2
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: CALL_OW 80
// SaveForQuickRestart ;
6707: CALL_OW 22
// exit ;
6711: POP
6712: POP
6713: GO 6719
// end ; end ;
6715: GO 6050
6717: POP
6718: POP
// end ;
6719: PPOPN 4
6721: END
// every 1 1$0 trigger secondPass = 2 do
6722: LD_EXP 27
6726: PUSH
6727: LD_INT 2
6729: EQUAL
6730: IFFALSE 6950
6732: GO 6734
6734: DISABLE
// begin PowellSupport1 ;
6735: CALL 1970 0 0
// DialogueOn ;
6739: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6743: LD_EXP 1
6747: PPUSH
6748: LD_STRING DC1-JMM-1
6750: PPUSH
6751: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6755: LD_EXP 22
6759: PPUSH
6760: LD_STRING DC1-Pow-1
6762: PPUSH
6763: CALL_OW 94
// DialogueOff ;
6767: CALL_OW 7
// wait ( 3 3$0 ) ;
6771: LD_INT 6300
6773: PPUSH
6774: CALL_OW 67
// PowellSupport2 ;
6778: CALL 2435 0 0
// DialogueOn ;
6782: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6786: LD_EXP 1
6790: PPUSH
6791: LD_STRING DC2-JMM-1
6793: PPUSH
6794: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6798: LD_EXP 22
6802: PPUSH
6803: LD_STRING DC2-Pow-1
6805: PPUSH
6806: CALL_OW 94
// DialogueOff ;
6810: CALL_OW 7
// wait ( 3 3$00 ) ;
6814: LD_INT 6300
6816: PPUSH
6817: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6828: LD_INT 22
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: LD_INT 30
6843: PUSH
6844: LD_INT 0
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 30
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: PUSH
6875: LD_INT 11
6877: PPUSH
6878: LD_INT 22
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 70
6892: NOT
6893: AND
6894: IFFALSE 6821
// wait ( 0 0$10 ) ;
6896: LD_INT 350
6898: PPUSH
6899: CALL_OW 67
// Legion ;
6903: CALL 6951 0 0
// wait ( 6 6$0 ) ;
6907: LD_INT 12600
6909: PPUSH
6910: CALL_OW 67
// PowellSupport3 ;
6914: CALL 2975 0 0
// DialogueOn ;
6918: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6922: LD_EXP 22
6926: PPUSH
6927: LD_STRING DC3-Pow-1
6929: PPUSH
6930: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6934: LD_EXP 1
6938: PPUSH
6939: LD_STRING DC3-JMM-1
6941: PPUSH
6942: CALL_OW 88
// DialogueOff ;
6946: CALL_OW 7
// end ;
6950: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6951: LD_INT 0
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6969: LD_ADDR_VAR 0 5
6973: PUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 21
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 30
6999: PUSH
7000: LD_INT 0
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 30
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: ST_TO_ADDR
// crates := 0 ;
7032: LD_ADDR_VAR 0 8
7036: PUSH
7037: LD_INT 0
7039: ST_TO_ADDR
// oil := 0 ;
7040: LD_ADDR_VAR 0 9
7044: PUSH
7045: LD_INT 0
7047: ST_TO_ADDR
// siberite := 0 ;
7048: LD_ADDR_VAR 0 10
7052: PUSH
7053: LD_INT 0
7055: ST_TO_ADDR
// payForNeutral := false ;
7056: LD_ADDR_VAR 0 13
7060: PUSH
7061: LD_INT 0
7063: ST_TO_ADDR
// payForHelp := false ;
7064: LD_ADDR_VAR 0 14
7068: PUSH
7069: LD_INT 0
7071: ST_TO_ADDR
// for i in tmp do
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: LD_VAR 0 5
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7174
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7085: LD_ADDR_VAR 0 8
7089: PUSH
7090: LD_VAR 0 8
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 274
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: CALL_OW 275
7112: PLUS
7113: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7114: LD_ADDR_VAR 0 9
7118: PUSH
7119: LD_VAR 0 9
7123: PUSH
7124: LD_VAR 0 2
7128: PPUSH
7129: CALL_OW 274
7133: PPUSH
7134: LD_INT 2
7136: PPUSH
7137: CALL_OW 275
7141: PLUS
7142: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7143: LD_ADDR_VAR 0 10
7147: PUSH
7148: LD_VAR 0 10
7152: PUSH
7153: LD_VAR 0 2
7157: PPUSH
7158: CALL_OW 274
7162: PPUSH
7163: LD_INT 3
7165: PPUSH
7166: CALL_OW 275
7170: PLUS
7171: ST_TO_ADDR
// end ;
7172: GO 7082
7174: POP
7175: POP
// PrepareKurt ;
7176: CALL 4417 0 0
// if not Kurt then
7180: LD_EXP 24
7184: NOT
7185: IFFALSE 7189
// exit ;
7187: GO 9321
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7189: LD_EXP 25
7193: PPUSH
7194: LD_INT 144
7196: PPUSH
7197: LD_INT 111
7199: PPUSH
7200: CALL_OW 111
// wait ( 0 0$2 ) ;
7204: LD_INT 70
7206: PPUSH
7207: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7211: LD_INT 167
7213: PPUSH
7214: LD_INT 121
7216: PPUSH
7217: LD_INT 1
7219: PPUSH
7220: LD_INT 10
7222: NEG
7223: PPUSH
7224: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7228: LD_EXP 24
7232: PPUSH
7233: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7237: LD_EXP 24
7241: PPUSH
7242: CALL_OW 87
// wait ( 0 0$1 ) ;
7246: LD_INT 35
7248: PPUSH
7249: CALL_OW 67
// DialogueOn ;
7253: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7257: LD_INT 22
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 26
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 2
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 25
7302: PUSH
7303: LD_INT 3
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 25
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 25
7322: PUSH
7323: LD_INT 5
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 25
7332: PUSH
7333: LD_INT 8
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: PPUSH
7354: CALL_OW 69
7358: PPUSH
7359: LD_STRING D3-Sol1-1
7361: PPUSH
7362: LD_STRING 
7364: PPUSH
7365: CALL 12340 0 3
// if KurtStatus then
7369: LD_EXP 26
7373: IFFALSE 7473
// begin Say ( Kurt , D3-Kurt-1 ) ;
7375: LD_EXP 24
7379: PPUSH
7380: LD_STRING D3-Kurt-1
7382: PPUSH
7383: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7387: LD_EXP 1
7391: PPUSH
7392: LD_STRING D3-JMM-1
7394: PPUSH
7395: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7399: LD_EXP 24
7403: PPUSH
7404: LD_STRING D3-Kurt-2
7406: PPUSH
7407: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7411: LD_EXP 1
7415: PPUSH
7416: LD_STRING D3-JMM-2
7418: PPUSH
7419: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7423: LD_EXP 24
7427: PPUSH
7428: LD_STRING D3-Kurt-4
7430: PPUSH
7431: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7435: LD_EXP 1
7439: PPUSH
7440: LD_STRING D3-JMM-4
7442: PPUSH
7443: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-5
7454: PPUSH
7455: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7459: LD_EXP 24
7463: PPUSH
7464: LD_STRING D3-Kurt-5a
7466: PPUSH
7467: CALL_OW 88
// end else
7471: GO 7569
// begin Say ( Kurt , D3-Kurt-1 ) ;
7473: LD_EXP 24
7477: PPUSH
7478: LD_STRING D3-Kurt-1
7480: PPUSH
7481: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7485: LD_EXP 1
7489: PPUSH
7490: LD_STRING D3-JMM-1
7492: PPUSH
7493: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7497: LD_EXP 24
7501: PPUSH
7502: LD_STRING D3-Kurt-3
7504: PPUSH
7505: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7509: LD_EXP 1
7513: PPUSH
7514: LD_STRING D3-JMM-3
7516: PPUSH
7517: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7521: LD_EXP 24
7525: PPUSH
7526: LD_STRING D3-Kurt-4
7528: PPUSH
7529: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7533: LD_EXP 1
7537: PPUSH
7538: LD_STRING D3-JMM-4
7540: PPUSH
7541: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7545: LD_EXP 24
7549: PPUSH
7550: LD_STRING D3-Kurt-5
7552: PPUSH
7553: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7557: LD_EXP 24
7561: PPUSH
7562: LD_STRING D3-Kurt-5b
7564: PPUSH
7565: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7569: LD_VAR 0 8
7573: PUSH
7574: LD_INT 120
7576: PUSH
7577: LD_INT 60
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: ARRAY
7593: GREATEREQUAL
7594: PUSH
7595: LD_VAR 0 10
7599: PUSH
7600: LD_INT 120
7602: PUSH
7603: LD_INT 60
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_EXP 26
7614: PUSH
7615: LD_INT 1
7617: PLUS
7618: ARRAY
7619: GREATEREQUAL
7620: AND
7621: IFFALSE 7673
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_STRING Q2
7630: PUSH
7631: LD_STRING Q2K
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_EXP 26
7642: PUSH
7643: LD_INT 1
7645: PLUS
7646: ARRAY
7647: PPUSH
7648: LD_INT 1
7650: PUSH
7651: LD_INT 2
7653: PUSH
7654: LD_INT 3
7656: PUSH
7657: LD_INT 4
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 98
7670: ST_TO_ADDR
7671: GO 7717
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7673: LD_ADDR_VAR 0 3
7677: PUSH
7678: LD_STRING Q2
7680: PUSH
7681: LD_STRING Q2K
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_EXP 26
7692: PUSH
7693: LD_INT 1
7695: PLUS
7696: ARRAY
7697: PPUSH
7698: LD_INT 1
7700: PUSH
7701: LD_INT 3
7703: PUSH
7704: LD_INT 4
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: PPUSH
7712: CALL_OW 98
7716: ST_TO_ADDR
// if dec1 = 1 then
7717: LD_VAR 0 3
7721: PUSH
7722: LD_INT 1
7724: EQUAL
7725: IFFALSE 7759
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7727: LD_EXP 1
7731: PPUSH
7732: LD_STRING D3Ka-JMM-1
7734: PPUSH
7735: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7739: LD_EXP 24
7743: PPUSH
7744: LD_STRING D3Ka-Kurt-1
7746: PPUSH
7747: CALL_OW 88
// warWithLegion = 1 ;
7751: LD_ADDR_EXP 30
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// end ; if dec1 = 2 then
7759: LD_VAR 0 3
7763: PUSH
7764: LD_INT 2
7766: EQUAL
7767: IFFALSE 7851
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7769: LD_EXP 1
7773: PPUSH
7774: LD_STRING D3Kb-JMM-1
7776: PPUSH
7777: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7781: LD_EXP 24
7785: PPUSH
7786: LD_STRING D3Kb-Kurt-1
7788: PPUSH
7789: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7793: LD_ADDR_VAR 0 11
7797: PUSH
7798: LD_INT 120
7800: PUSH
7801: LD_INT 60
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_EXP 26
7812: PUSH
7813: LD_INT 1
7815: PLUS
7816: ARRAY
7817: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7818: LD_ADDR_VAR 0 12
7822: PUSH
7823: LD_INT 120
7825: PUSH
7826: LD_INT 60
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_EXP 26
7837: PUSH
7838: LD_INT 1
7840: PLUS
7841: ARRAY
7842: ST_TO_ADDR
// payForNeutral := true ;
7843: LD_ADDR_VAR 0 13
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// end ; if dec1 = 3 then
7851: LD_VAR 0 3
7855: PUSH
7856: LD_INT 3
7858: EQUAL
7859: IFFALSE 8094
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7861: LD_EXP 1
7865: PPUSH
7866: LD_STRING D3Kc1-JMM-1
7868: PPUSH
7869: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7873: LD_EXP 24
7877: PPUSH
7878: LD_STRING D3Kc1-Kurt-1
7880: PPUSH
7881: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7885: LD_EXP 1
7889: PPUSH
7890: LD_STRING D3Kc1-JMM-2
7892: PPUSH
7893: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7897: LD_EXP 24
7901: PPUSH
7902: LD_STRING D3Kc1-Kurt-2
7904: PPUSH
7905: CALL_OW 88
// askSiberite = 1 ;
7909: LD_ADDR_EXP 32
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7917: LD_ADDR_VAR 0 4
7921: PUSH
7922: LD_STRING Q2b
7924: PPUSH
7925: LD_INT 1
7927: PUSH
7928: LD_INT 2
7930: PUSH
7931: LD_INT 3
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 98
7943: ST_TO_ADDR
// if dec2 = 1 then
7944: LD_VAR 0 4
7948: PUSH
7949: LD_INT 1
7951: EQUAL
7952: IFFALSE 7986
// begin Say ( JMM , D4a-JMM-1 ) ;
7954: LD_EXP 1
7958: PPUSH
7959: LD_STRING D4a-JMM-1
7961: PPUSH
7962: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7966: LD_EXP 24
7970: PPUSH
7971: LD_STRING D4b-Kurt-1
7973: PPUSH
7974: CALL_OW 88
// warWithLegion = 1 ;
7978: LD_ADDR_EXP 30
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// end ; if dec2 = 2 then
7986: LD_VAR 0 4
7990: PUSH
7991: LD_INT 2
7993: EQUAL
7994: IFFALSE 8028
// begin Say ( JMM , D4b-JMM-1 ) ;
7996: LD_EXP 1
8000: PPUSH
8001: LD_STRING D4b-JMM-1
8003: PPUSH
8004: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8008: LD_EXP 24
8012: PPUSH
8013: LD_STRING D4b-Kurt-1
8015: PPUSH
8016: CALL_OW 88
// warWithLegion = 1 ;
8020: LD_ADDR_EXP 30
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// end ; if dec2 = 3 then
8028: LD_VAR 0 4
8032: PUSH
8033: LD_INT 3
8035: EQUAL
8036: IFFALSE 8094
// begin Say ( JMM , D4c-JMM-1 ) ;
8038: LD_EXP 1
8042: PPUSH
8043: LD_STRING D4c-JMM-1
8045: PPUSH
8046: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8050: LD_EXP 24
8054: PPUSH
8055: LD_STRING D4c-Kurt-1
8057: PPUSH
8058: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8062: LD_EXP 1
8066: PPUSH
8067: LD_STRING D4c-JMM-2
8069: PPUSH
8070: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8074: LD_EXP 24
8078: PPUSH
8079: LD_STRING D4c-Kurt-2
8081: PPUSH
8082: CALL_OW 88
// fakeInfo = 1 ;
8086: LD_ADDR_EXP 31
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8094: LD_VAR 0 3
8098: PUSH
8099: LD_INT 4
8101: EQUAL
8102: IFFALSE 9177
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8104: LD_EXP 1
8108: PPUSH
8109: LD_STRING D3Kd-JMM-1
8111: PPUSH
8112: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8116: LD_VAR 0 8
8120: PUSH
8121: LD_INT 200
8123: PUSH
8124: LD_INT 120
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: GREATEREQUAL
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_INT 200
8149: PUSH
8150: LD_INT 120
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_EXP 26
8161: PUSH
8162: LD_INT 1
8164: PLUS
8165: ARRAY
8166: GREATEREQUAL
8167: AND
8168: IFFALSE 8220
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8170: LD_ADDR_VAR 0 4
8174: PUSH
8175: LD_STRING Q2a
8177: PUSH
8178: LD_STRING Q2aK
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_EXP 26
8189: PUSH
8190: LD_INT 1
8192: PLUS
8193: ARRAY
8194: PPUSH
8195: LD_INT 1
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 3
8203: PUSH
8204: LD_INT 4
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 98
8217: ST_TO_ADDR
8218: GO 8397
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8220: LD_VAR 0 8
8224: PUSH
8225: LD_INT 120
8227: PUSH
8228: LD_INT 60
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_EXP 26
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: ARRAY
8244: GREATEREQUAL
8245: PUSH
8246: LD_VAR 0 10
8250: PUSH
8251: LD_INT 120
8253: PUSH
8254: LD_INT 60
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_EXP 26
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ARRAY
8270: GREATEREQUAL
8271: AND
8272: IFFALSE 8320
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8274: LD_ADDR_VAR 0 4
8278: PUSH
8279: LD_STRING Q2a
8281: PUSH
8282: LD_STRING Q2aK
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_EXP 26
8293: PUSH
8294: LD_INT 1
8296: PLUS
8297: ARRAY
8298: PPUSH
8299: LD_INT 1
8301: PUSH
8302: LD_INT 2
8304: PUSH
8305: LD_INT 4
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 98
8317: ST_TO_ADDR
8318: GO 8397
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8320: LD_STRING Q2d
8322: PUSH
8323: LD_STRING Q2dK
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_EXP 26
8334: PUSH
8335: LD_INT 1
8337: PLUS
8338: ARRAY
8339: PPUSH
8340: CALL_OW 97
8344: PUSH
8345: LD_INT 1
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8356
8353: POP
// ; end ;
8354: GO 8357
8356: POP
// dec2 := 0 ;
8357: LD_ADDR_VAR 0 4
8361: PUSH
8362: LD_INT 0
8364: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8365: LD_EXP 1
8369: PPUSH
8370: LD_STRING D3Kc1-JMM-1
8372: PPUSH
8373: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8377: LD_EXP 24
8381: PPUSH
8382: LD_STRING D3Kc2-Kurt-1
8384: PPUSH
8385: CALL_OW 88
// warWithLegion := 1 ;
8389: LD_ADDR_EXP 30
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// end ; if dec2 = 1 then
8397: LD_VAR 0 4
8401: PUSH
8402: LD_INT 1
8404: EQUAL
8405: IFFALSE 8439
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8407: LD_EXP 1
8411: PPUSH
8412: LD_STRING D5Ka-JMM-1
8414: PPUSH
8415: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8419: LD_EXP 24
8423: PPUSH
8424: LD_STRING D5Ka-Kurt-1
8426: PPUSH
8427: CALL_OW 88
// warWithLegion = 1 ;
8431: LD_ADDR_EXP 30
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// end ; if dec2 = 2 then
8439: LD_VAR 0 4
8443: PUSH
8444: LD_INT 2
8446: EQUAL
8447: IFFALSE 8531
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8449: LD_EXP 1
8453: PPUSH
8454: LD_STRING D3Kb-JMM-1
8456: PPUSH
8457: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8461: LD_EXP 24
8465: PPUSH
8466: LD_STRING D3Kb-Kurt-1
8468: PPUSH
8469: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8473: LD_ADDR_VAR 0 11
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: LD_INT 60
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_EXP 26
8492: PUSH
8493: LD_INT 1
8495: PLUS
8496: ARRAY
8497: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8498: LD_ADDR_VAR 0 12
8502: PUSH
8503: LD_INT 120
8505: PUSH
8506: LD_INT 60
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_EXP 26
8517: PUSH
8518: LD_INT 1
8520: PLUS
8521: ARRAY
8522: ST_TO_ADDR
// payForNeutral := true ;
8523: LD_ADDR_VAR 0 13
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// end ; if dec2 = 3 then
8531: LD_VAR 0 4
8535: PUSH
8536: LD_INT 3
8538: EQUAL
8539: IFFALSE 8623
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8541: LD_EXP 1
8545: PPUSH
8546: LD_STRING D3Ke-JMM-1
8548: PPUSH
8549: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8553: LD_EXP 24
8557: PPUSH
8558: LD_STRING D3Ke-Kurt-1
8560: PPUSH
8561: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8565: LD_ADDR_VAR 0 11
8569: PUSH
8570: LD_INT 200
8572: PUSH
8573: LD_INT 120
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_EXP 26
8584: PUSH
8585: LD_INT 1
8587: PLUS
8588: ARRAY
8589: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8590: LD_ADDR_VAR 0 12
8594: PUSH
8595: LD_INT 200
8597: PUSH
8598: LD_INT 120
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 26
8609: PUSH
8610: LD_INT 1
8612: PLUS
8613: ARRAY
8614: ST_TO_ADDR
// payForHelp := true ;
8615: LD_ADDR_VAR 0 14
8619: PUSH
8620: LD_INT 1
8622: ST_TO_ADDR
// end ; if dec2 = 4 then
8623: LD_VAR 0 4
8627: PUSH
8628: LD_INT 4
8630: EQUAL
8631: IFFALSE 8866
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8633: LD_EXP 1
8637: PPUSH
8638: LD_STRING D3Kc1-JMM-1
8640: PPUSH
8641: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8645: LD_EXP 24
8649: PPUSH
8650: LD_STRING D3Kc1-Kurt-1
8652: PPUSH
8653: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8657: LD_EXP 1
8661: PPUSH
8662: LD_STRING D3Kc1-JMM-2
8664: PPUSH
8665: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8669: LD_EXP 24
8673: PPUSH
8674: LD_STRING D3Kc1-Kurt-2
8676: PPUSH
8677: CALL_OW 88
// askSiberite = 1 ;
8681: LD_ADDR_EXP 32
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8689: LD_ADDR_VAR 0 4
8693: PUSH
8694: LD_STRING Q2b
8696: PPUSH
8697: LD_INT 1
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL_OW 98
8715: ST_TO_ADDR
// if dec2 = 1 then
8716: LD_VAR 0 4
8720: PUSH
8721: LD_INT 1
8723: EQUAL
8724: IFFALSE 8758
// begin Say ( JMM , D4a-JMM-1 ) ;
8726: LD_EXP 1
8730: PPUSH
8731: LD_STRING D4a-JMM-1
8733: PPUSH
8734: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8738: LD_EXP 24
8742: PPUSH
8743: LD_STRING D4b-Kurt-1
8745: PPUSH
8746: CALL_OW 88
// warWithLegion = 1 ;
8750: LD_ADDR_EXP 30
8754: PUSH
8755: LD_INT 1
8757: ST_TO_ADDR
// end ; if dec2 = 2 then
8758: LD_VAR 0 4
8762: PUSH
8763: LD_INT 2
8765: EQUAL
8766: IFFALSE 8800
// begin Say ( JMM , D4b-JMM-1 ) ;
8768: LD_EXP 1
8772: PPUSH
8773: LD_STRING D4b-JMM-1
8775: PPUSH
8776: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8780: LD_EXP 24
8784: PPUSH
8785: LD_STRING D4b-Kurt-1
8787: PPUSH
8788: CALL_OW 88
// warWithLegion = 1 ;
8792: LD_ADDR_EXP 30
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// end ; if dec2 = 3 then
8800: LD_VAR 0 4
8804: PUSH
8805: LD_INT 3
8807: EQUAL
8808: IFFALSE 8866
// begin Say ( JMM , D4c-JMM-1 ) ;
8810: LD_EXP 1
8814: PPUSH
8815: LD_STRING D4c-JMM-1
8817: PPUSH
8818: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8822: LD_EXP 24
8826: PPUSH
8827: LD_STRING D4c-Kurt-1
8829: PPUSH
8830: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8834: LD_EXP 1
8838: PPUSH
8839: LD_STRING D4c-JMM-2
8841: PPUSH
8842: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8846: LD_EXP 24
8850: PPUSH
8851: LD_STRING D4c-Kurt-2
8853: PPUSH
8854: CALL_OW 88
// fakeInfo = 1 ;
8858: LD_ADDR_EXP 31
8862: PUSH
8863: LD_INT 1
8865: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8866: LD_VAR 0 13
8870: PUSH
8871: LD_VAR 0 14
8875: OR
8876: IFFALSE 9177
// begin for i in tmp do
8878: LD_ADDR_VAR 0 2
8882: PUSH
8883: LD_VAR 0 5
8887: PUSH
8888: FOR_IN
8889: IFFALSE 9175
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 274
8905: PPUSH
8906: LD_INT 1
8908: PPUSH
8909: CALL_OW 275
8913: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8914: LD_ADDR_VAR 0 7
8918: PUSH
8919: LD_VAR 0 2
8923: PPUSH
8924: CALL_OW 274
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: CALL_OW 275
8936: ST_TO_ADDR
// if cr then
8937: LD_VAR 0 11
8941: IFFALSE 9055
// begin if tmp2 and tmp2 < cr then
8943: LD_VAR 0 6
8947: PUSH
8948: LD_VAR 0 6
8952: PUSH
8953: LD_VAR 0 11
8957: LESS
8958: AND
8959: IFFALSE 9007
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL_OW 274
8970: PPUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 11
8978: PUSH
8979: LD_VAR 0 6
8983: MINUS
8984: PPUSH
8985: CALL_OW 277
// cr := cr - tmp2 ;
8989: LD_ADDR_VAR 0 11
8993: PUSH
8994: LD_VAR 0 11
8998: PUSH
8999: LD_VAR 0 6
9003: MINUS
9004: ST_TO_ADDR
// end else
9005: GO 9055
// if tmp2 > cr then
9007: LD_VAR 0 6
9011: PUSH
9012: LD_VAR 0 11
9016: GREATER
9017: IFFALSE 9055
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9019: LD_VAR 0 2
9023: PPUSH
9024: CALL_OW 274
9028: PPUSH
9029: LD_INT 1
9031: PPUSH
9032: LD_VAR 0 6
9036: PUSH
9037: LD_VAR 0 11
9041: MINUS
9042: PPUSH
9043: CALL_OW 277
// cr := 0 ;
9047: LD_ADDR_VAR 0 11
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// end ; end ; if sb then
9055: LD_VAR 0 12
9059: IFFALSE 9173
// begin if tmp3 and tmp3 < sb then
9061: LD_VAR 0 7
9065: PUSH
9066: LD_VAR 0 7
9070: PUSH
9071: LD_VAR 0 12
9075: LESS
9076: AND
9077: IFFALSE 9125
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9079: LD_VAR 0 2
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: LD_VAR 0 12
9096: PUSH
9097: LD_VAR 0 7
9101: MINUS
9102: PPUSH
9103: CALL_OW 277
// sb := sb - tmp3 ;
9107: LD_ADDR_VAR 0 12
9111: PUSH
9112: LD_VAR 0 12
9116: PUSH
9117: LD_VAR 0 7
9121: MINUS
9122: ST_TO_ADDR
// end else
9123: GO 9173
// if tmp3 > sb then
9125: LD_VAR 0 7
9129: PUSH
9130: LD_VAR 0 12
9134: GREATER
9135: IFFALSE 9173
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9137: LD_VAR 0 2
9141: PPUSH
9142: CALL_OW 274
9146: PPUSH
9147: LD_INT 3
9149: PPUSH
9150: LD_VAR 0 7
9154: PUSH
9155: LD_VAR 0 12
9159: MINUS
9160: PPUSH
9161: CALL_OW 277
// sb := 0 ;
9165: LD_ADDR_VAR 0 12
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// end ; end ; end ;
9173: GO 8888
9175: POP
9176: POP
// end ; end ; DialogueOff ;
9177: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9181: LD_INT 167
9183: PPUSH
9184: LD_INT 121
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9194: LD_EXP 24
9198: PPUSH
9199: LD_EXP 25
9203: PPUSH
9204: CALL_OW 120
// wait ( 0 0$1 ) ;
9208: LD_INT 35
9210: PPUSH
9211: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9215: LD_EXP 25
9219: PPUSH
9220: LD_INT 4
9222: PPUSH
9223: CALL_OW 113
// wait ( 0 0$3 ) ;
9227: LD_INT 105
9229: PPUSH
9230: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9234: LD_EXP 24
9238: PPUSH
9239: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9243: LD_EXP 25
9247: PPUSH
9248: CALL_OW 64
// wait ( 0 0$3 ) ;
9252: LD_INT 105
9254: PPUSH
9255: CALL_OW 67
// if payForHelp then
9259: LD_VAR 0 14
9263: IFFALSE 9321
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9265: LD_INT 36
9267: PPUSH
9268: LD_INT 57
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9278: LD_INT 51
9280: PPUSH
9281: LD_INT 63
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9291: LD_INT 93
9293: PPUSH
9294: LD_INT 65
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9304: LD_INT 42
9306: PPUSH
9307: LD_INT 12
9309: PPUSH
9310: LD_INT 1
9312: PPUSH
9313: CALL_OW 244
// PrepareLegionForPlayer ;
9317: CALL 4620 0 0
// end ; end ;
9321: LD_VAR 0 1
9325: RET
// every 0 0$10 trigger warWithLegion = 1 do
9326: LD_EXP 30
9330: PUSH
9331: LD_INT 1
9333: EQUAL
9334: IFFALSE 9343
9336: GO 9338
9338: DISABLE
// PrepareAttackLegion ;
9339: CALL 5284 0 0
9343: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9344: LD_EXP 15
9348: PPUSH
9349: CALL_OW 305
9353: PUSH
9354: LD_EXP 15
9358: PPUSH
9359: LD_INT 1
9361: PPUSH
9362: CALL_OW 289
9366: NOT
9367: AND
9368: PUSH
9369: LD_EXP 15
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: CALL_OW 289
9381: NOT
9382: AND
9383: PUSH
9384: LD_EXP 15
9388: PPUSH
9389: LD_INT 3
9391: PPUSH
9392: CALL_OW 289
9396: NOT
9397: AND
9398: IFFALSE 9415
9400: GO 9402
9402: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9403: LD_EXP 15
9407: PPUSH
9408: LD_INT 4
9410: PPUSH
9411: CALL_OW 235
9415: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9416: LD_EXP 16
9420: PPUSH
9421: CALL_OW 305
9425: PUSH
9426: LD_EXP 16
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 289
9438: NOT
9439: AND
9440: PUSH
9441: LD_EXP 16
9445: PPUSH
9446: LD_INT 2
9448: PPUSH
9449: CALL_OW 289
9453: NOT
9454: AND
9455: PUSH
9456: LD_EXP 16
9460: PPUSH
9461: LD_INT 3
9463: PPUSH
9464: CALL_OW 289
9468: NOT
9469: AND
9470: IFFALSE 9487
9472: GO 9474
9474: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9475: LD_EXP 16
9479: PPUSH
9480: LD_INT 4
9482: PPUSH
9483: CALL_OW 235
9487: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9488: LD_EXP 17
9492: PPUSH
9493: CALL_OW 305
9497: PUSH
9498: LD_EXP 17
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: CALL_OW 289
9510: NOT
9511: AND
9512: PUSH
9513: LD_EXP 17
9517: PPUSH
9518: LD_INT 2
9520: PPUSH
9521: CALL_OW 289
9525: NOT
9526: AND
9527: PUSH
9528: LD_EXP 17
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: CALL_OW 289
9540: NOT
9541: AND
9542: IFFALSE 9559
9544: GO 9546
9546: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9547: LD_EXP 17
9551: PPUSH
9552: LD_INT 4
9554: PPUSH
9555: CALL_OW 235
9559: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9560: LD_EXP 18
9564: PPUSH
9565: CALL_OW 305
9569: PUSH
9570: LD_EXP 18
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 289
9582: NOT
9583: AND
9584: PUSH
9585: LD_EXP 18
9589: PPUSH
9590: LD_INT 2
9592: PPUSH
9593: CALL_OW 289
9597: NOT
9598: AND
9599: PUSH
9600: LD_EXP 18
9604: PPUSH
9605: LD_INT 3
9607: PPUSH
9608: CALL_OW 289
9612: NOT
9613: AND
9614: IFFALSE 9631
9616: GO 9618
9618: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9619: LD_EXP 18
9623: PPUSH
9624: LD_INT 4
9626: PPUSH
9627: CALL_OW 235
9631: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9632: LD_EXP 19
9636: PPUSH
9637: CALL_OW 305
9641: PUSH
9642: LD_EXP 19
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 289
9654: NOT
9655: AND
9656: PUSH
9657: LD_EXP 19
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: CALL_OW 289
9669: NOT
9670: AND
9671: PUSH
9672: LD_EXP 19
9676: PPUSH
9677: LD_INT 3
9679: PPUSH
9680: CALL_OW 289
9684: NOT
9685: AND
9686: PUSH
9687: LD_EXP 19
9691: PPUSH
9692: LD_INT 2
9694: PPUSH
9695: CALL_OW 289
9699: NOT
9700: AND
9701: IFFALSE 9718
9703: GO 9705
9705: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9706: LD_EXP 19
9710: PPUSH
9711: LD_INT 4
9713: PPUSH
9714: CALL_OW 235
9718: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9719: LD_EXP 20
9723: PPUSH
9724: CALL_OW 305
9728: PUSH
9729: LD_EXP 20
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 289
9741: NOT
9742: AND
9743: PUSH
9744: LD_EXP 20
9748: PPUSH
9749: LD_INT 2
9751: PPUSH
9752: CALL_OW 289
9756: NOT
9757: AND
9758: PUSH
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 3
9766: PPUSH
9767: CALL_OW 289
9771: NOT
9772: AND
9773: IFFALSE 9790
9775: GO 9777
9777: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9778: LD_EXP 20
9782: PPUSH
9783: LD_INT 4
9785: PPUSH
9786: CALL_OW 235
9790: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9791: LD_EXP 21
9795: PPUSH
9796: CALL_OW 305
9800: PUSH
9801: LD_EXP 21
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL_OW 289
9813: NOT
9814: AND
9815: PUSH
9816: LD_EXP 21
9820: PPUSH
9821: LD_INT 2
9823: PPUSH
9824: CALL_OW 289
9828: NOT
9829: AND
9830: PUSH
9831: LD_EXP 21
9835: PPUSH
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 289
9843: NOT
9844: AND
9845: IFFALSE 9862
9847: GO 9849
9849: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9850: LD_EXP 21
9854: PPUSH
9855: LD_INT 4
9857: PPUSH
9858: CALL_OW 235
9862: END
// every 0 0$1 do var i ;
9863: GO 9865
9865: DISABLE
9866: LD_INT 0
9868: PPUSH
// begin enable ;
9869: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9870: LD_ADDR_VAR 0 1
9874: PUSH
9875: LD_INT 22
9877: PUSH
9878: LD_INT 4
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: PUSH
9890: FOR_IN
9891: IFFALSE 9930
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9893: LD_VAR 0 1
9897: PPUSH
9898: LD_INT 4
9900: PPUSH
9901: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9905: LD_VAR 0 1
9909: PPUSH
9910: LD_INT 4
9912: PPUSH
9913: CALL_OW 308
9917: IFFALSE 9928
// RemoveUnit ( i ) ;
9919: LD_VAR 0 1
9923: PPUSH
9924: CALL_OW 64
// end ;
9928: GO 9890
9930: POP
9931: POP
// end ;
9932: PPOPN 1
9934: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9935: LD_EXP 27
9939: PUSH
9940: LD_INT 1
9942: EQUAL
9943: IFFALSE 10382
9945: GO 9947
9947: DISABLE
9948: LD_INT 0
9950: PPUSH
9951: PPUSH
9952: PPUSH
// begin enable ;
9953: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: LD_INT 12
9961: PPUSH
9962: LD_INT 22
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 70
9990: ST_TO_ADDR
// for i in enemyVehs do
9991: LD_ADDR_VAR 0 1
9995: PUSH
9996: LD_VAR 0 2
10000: PUSH
10001: FOR_IN
10002: IFFALSE 10380
// begin if See ( 1 , i ) then
10004: LD_INT 1
10006: PPUSH
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 292
10016: IFFALSE 10378
// begin disable ;
10018: DISABLE
// DialogueOn ;
10019: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10023: LD_VAR 0 1
10027: PPUSH
10028: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10032: LD_INT 22
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 26
10044: PUSH
10045: LD_INT 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: LD_INT 25
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 25
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 25
10077: PUSH
10078: LD_INT 3
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 4
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 25
10107: PUSH
10108: LD_INT 8
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 69
10133: PPUSH
10134: LD_STRING DT1-Sol1-1
10136: PPUSH
10137: LD_STRING DT1-FSol1-1
10139: PPUSH
10140: CALL 12340 0 3
// dec = ShowQuery2 ;
10144: LD_ADDR_VAR 0 3
10148: PUSH
10149: CALL 12824 0 0
10153: ST_TO_ADDR
// if dec = 1 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 1
10161: EQUAL
10162: IFFALSE 10268
// begin Say ( JMM , D2-JMM-1 ) ;
10164: LD_EXP 1
10168: PPUSH
10169: LD_STRING D2-JMM-1
10171: PPUSH
10172: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10176: LD_EXP 22
10180: PPUSH
10181: LD_STRING D2-Pow-1
10183: PPUSH
10184: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10188: LD_EXP 1
10192: PPUSH
10193: LD_STRING D2a-JMM-1
10195: PPUSH
10196: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10200: LD_EXP 22
10204: PPUSH
10205: LD_STRING D2a-Pow-1
10207: PPUSH
10208: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10212: LD_EXP 1
10216: PPUSH
10217: LD_STRING D2a-JMM-2
10219: PPUSH
10220: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10224: LD_EXP 22
10228: PPUSH
10229: LD_STRING D2a-Pow-2
10231: PPUSH
10232: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10236: LD_EXP 1
10240: PPUSH
10241: LD_STRING D2a-JMM-3
10243: PPUSH
10244: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10248: LD_EXP 22
10252: PPUSH
10253: LD_STRING D2a-Pow-3
10255: PPUSH
10256: CALL_OW 94
// secondPass = 2 ;
10260: LD_ADDR_EXP 27
10264: PUSH
10265: LD_INT 2
10267: ST_TO_ADDR
// end ; if dec = 2 then
10268: LD_VAR 0 3
10272: PUSH
10273: LD_INT 2
10275: EQUAL
10276: IFFALSE 10370
// begin Say ( JMM , D2-JMM-1 ) ;
10278: LD_EXP 1
10282: PPUSH
10283: LD_STRING D2-JMM-1
10285: PPUSH
10286: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10290: LD_EXP 22
10294: PPUSH
10295: LD_STRING D2-Pow-1
10297: PPUSH
10298: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10302: LD_EXP 1
10306: PPUSH
10307: LD_STRING D2b-JMM-1
10309: PPUSH
10310: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10314: LD_EXP 22
10318: PPUSH
10319: LD_STRING D2b-Pow-1
10321: PPUSH
10322: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10326: LD_EXP 1
10330: PPUSH
10331: LD_STRING D2c-JMM-1
10333: PPUSH
10334: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10338: LD_EXP 22
10342: PPUSH
10343: LD_STRING D2c-Pow-1
10345: PPUSH
10346: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10350: LD_EXP 1
10354: PPUSH
10355: LD_STRING D2c-JMM-2
10357: PPUSH
10358: CALL_OW 88
// secondPass = 2 ;
10362: LD_ADDR_EXP 27
10366: PUSH
10367: LD_INT 2
10369: ST_TO_ADDR
// end ; DialogueOff ;
10370: CALL_OW 7
// exit ;
10374: POP
10375: POP
10376: GO 10382
// end ; end ;
10378: GO 10001
10380: POP
10381: POP
// end ;
10382: PPOPN 3
10384: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10385: LD_EXP 28
10389: PUSH
10390: LD_INT 1
10392: EQUAL
10393: PUSH
10394: LD_INT 11
10396: PPUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 70
10411: AND
10412: IFFALSE 10640
10414: GO 10416
10416: DISABLE
10417: LD_INT 0
10419: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10420: LD_ADDR_VAR 0 1
10424: PUSH
10425: LD_INT 11
10427: PPUSH
10428: LD_INT 22
10430: PUSH
10431: LD_INT 3
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 70
10442: ST_TO_ADDR
// if not vehicles then
10443: LD_VAR 0 1
10447: NOT
10448: IFFALSE 10452
// exit ;
10450: GO 10640
// repeat wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_INT 101
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PPUSH
10474: CALL_OW 72
10478: IFFALSE 10452
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 101
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PPUSH
10495: CALL_OW 72
10499: PUSH
10500: LD_INT 1
10502: ARRAY
10503: PPUSH
10504: CALL_OW 87
// DialogueOn ;
10508: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10512: LD_INT 22
10514: PUSH
10515: LD_INT 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 26
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 1
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 25
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 25
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: LD_INT 4
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 25
10577: PUSH
10578: LD_INT 5
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 25
10587: PUSH
10588: LD_INT 8
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 69
10613: PPUSH
10614: LD_STRING DT1-Sol1-1
10616: PPUSH
10617: LD_STRING DT1-FSol1-1
10619: PPUSH
10620: CALL 12340 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10624: LD_EXP 1
10628: PPUSH
10629: LD_STRING DT1-JMM-1
10631: PPUSH
10632: CALL_OW 88
// DialogueOff ;
10636: CALL_OW 7
// end ;
10640: PPOPN 1
10642: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10643: LD_EXP 28
10647: PUSH
10648: LD_INT 1
10650: EQUAL
10651: PUSH
10652: LD_INT 11
10654: PPUSH
10655: LD_INT 22
10657: PUSH
10658: LD_INT 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 50
10667: PUSH
10668: EMPTY
10669: LIST
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: LD_INT 21
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 21
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 70
10708: PUSH
10709: LD_INT 0
10711: EQUAL
10712: AND
10713: PUSH
10714: LD_EXP 29
10718: AND
10719: IFFALSE 10876
10721: GO 10723
10723: DISABLE
// begin vehicleTeleported = 2 ;
10724: LD_ADDR_EXP 28
10728: PUSH
10729: LD_INT 2
10731: ST_TO_ADDR
// DialogueOn ;
10732: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10736: LD_EXP 1
10740: PPUSH
10741: LD_STRING DT1a-JMM-1
10743: PPUSH
10744: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 26
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 3
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 4
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 5
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 8
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_STRING DT1a-Sol1-1
10852: PPUSH
10853: LD_STRING DT1a-FSol1-1
10855: PPUSH
10856: CALL 12340 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING DT1a-JMM-2
10867: PPUSH
10868: CALL_OW 88
// DialogueOff ;
10872: CALL_OW 7
// end ;
10876: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10877: LD_EXP 28
10881: PUSH
10882: LD_INT 3
10884: EQUAL
10885: PUSH
10886: LD_INT 11
10888: PPUSH
10889: LD_INT 22
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 101
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 70
10917: AND
10918: IFFALSE 11192
10920: GO 10922
10922: DISABLE
10923: LD_INT 0
10925: PPUSH
10926: PPUSH
10927: PPUSH
// begin wait ( 0 0$0.3 ) ;
10928: LD_INT 10
10930: PPUSH
10931: CALL_OW 67
// DialogueOn ;
10935: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10939: LD_ADDR_VAR 0 3
10943: PUSH
10944: LD_INT 22
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 26
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 2
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 4
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 5
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 8
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PPUSH
11041: CALL_OW 69
11045: PPUSH
11046: LD_STRING DT2-Sol1-1
11048: PPUSH
11049: LD_STRING DT2-FSol1-1
11051: PPUSH
11052: CALL 12340 0 3
11056: ST_TO_ADDR
// DialogueOff ;
11057: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11061: LD_INT 35
11063: PPUSH
11064: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11068: LD_INT 11
11070: PPUSH
11071: LD_INT 22
11073: PUSH
11074: LD_INT 3
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 50
11083: PUSH
11084: EMPTY
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 70
11095: NOT
11096: IFFALSE 11061
// wait ( 0 0$2 ) ;
11098: LD_INT 70
11100: PPUSH
11101: CALL_OW 67
// vehicleTeleported = 4 ;
11105: LD_ADDR_EXP 28
11109: PUSH
11110: LD_INT 4
11112: ST_TO_ADDR
// DialogueOn ;
11113: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11117: LD_EXP 1
11121: PPUSH
11122: LD_STRING DT2a-JMM-1
11124: PPUSH
11125: CALL_OW 88
// if speaker then
11129: LD_VAR 0 3
11133: IFFALSE 11176
// if GetSex ( speaker ) = 1 then
11135: LD_VAR 0 3
11139: PPUSH
11140: CALL_OW 258
11144: PUSH
11145: LD_INT 1
11147: EQUAL
11148: IFFALSE 11164
// Say ( speaker , DT2a-Sol1-1 ) else
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_STRING DT2a-Sol1-1
11157: PPUSH
11158: CALL_OW 88
11162: GO 11176
// Say ( speaker , DT2a-FSol1-1 ) ;
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_STRING DT2a-FSol1-1
11171: PPUSH
11172: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11176: LD_EXP 3
11180: PPUSH
11181: LD_STRING DT2a-Don-1
11183: PPUSH
11184: CALL_OW 88
// DialogueOff ;
11188: CALL_OW 7
// end ;
11192: PPOPN 3
11194: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11195: LD_INT 1
11197: PPUSH
11198: LD_INT 45
11200: PPUSH
11201: LD_INT 74
11203: PPUSH
11204: CALL_OW 293
11208: IFFALSE 11372
11210: GO 11212
11212: DISABLE
// begin DialogueOn ;
11213: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11217: LD_INT 36
11219: PPUSH
11220: LD_INT 55
11222: PPUSH
11223: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11227: LD_INT 22
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 26
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: LD_INT 25
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 25
11262: PUSH
11263: LD_INT 2
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 25
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 25
11282: PUSH
11283: LD_INT 4
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 25
11292: PUSH
11293: LD_INT 5
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 25
11302: PUSH
11303: LD_INT 8
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: PPUSH
11329: LD_STRING D5-Sol1-1
11331: PPUSH
11332: LD_STRING D5-FSol1-
11334: PPUSH
11335: CALL 12340 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11339: LD_EXP 30
11343: PUSH
11344: LD_EXP 3
11348: PPUSH
11349: CALL_OW 302
11353: AND
11354: IFFALSE 11368
// Say ( Donaldson , D5-Don-1 ) ;
11356: LD_EXP 3
11360: PPUSH
11361: LD_STRING D5-Don-1
11363: PPUSH
11364: CALL_OW 88
// DialogueOff ;
11368: CALL_OW 7
// end ;
11372: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11373: LD_INT 1
11375: PPUSH
11376: LD_INT 10
11378: PPUSH
11379: CALL_OW 292
11383: PUSH
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 137
11389: PPUSH
11390: CALL_OW 292
11394: OR
11395: IFFALSE 11539
11397: GO 11399
11399: DISABLE
// begin DialogueOn ;
11400: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11404: LD_INT 22
11406: PUSH
11407: LD_INT 1
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 26
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: LD_INT 25
11429: PUSH
11430: LD_INT 1
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 25
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 3
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 25
11459: PUSH
11460: LD_INT 4
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 25
11479: PUSH
11480: LD_INT 8
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 69
11505: PPUSH
11506: LD_STRING DT3-Sol1-1
11508: PPUSH
11509: LD_STRING DT3-FSol1-1
11511: PPUSH
11512: CALL 12340 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11516: LD_EXP 1
11520: PPUSH
11521: LD_STRING DT3-JMM-1
11523: PPUSH
11524: CALL_OW 88
// DialogueOff ;
11528: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11532: LD_STRING M2
11534: PPUSH
11535: CALL_OW 337
// end ;
11539: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11540: LD_EXP 42
11544: PUSH
11545: LD_INT 0
11547: EQUAL
11548: IFFALSE 11631
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
// begin enable ;
11556: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: LD_INT 10
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 58
11587: PUSH
11588: EMPTY
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 70
11600: PUSH
11601: FOR_IN
11602: IFFALSE 11629
// if GetLives ( i ) < 1000 then
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 256
11613: PUSH
11614: LD_INT 1000
11616: LESS
11617: IFFALSE 11627
// ruEscape = 1 ;
11619: LD_ADDR_EXP 42
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
11627: GO 11601
11629: POP
11630: POP
// end ;
11631: PPOPN 1
11633: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11634: LD_INT 3
11636: PPUSH
11637: CALL_OW 303
11641: PUSH
11642: LD_INT 4
11644: PPUSH
11645: CALL_OW 303
11649: OR
11650: PUSH
11651: LD_INT 22
11653: PPUSH
11654: LD_INT 22
11656: PUSH
11657: LD_INT 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 70
11668: PUSH
11669: LD_INT 0
11671: GREATER
11672: OR
11673: PUSH
11674: LD_EXP 42
11678: PUSH
11679: LD_INT 1
11681: EQUAL
11682: OR
11683: IFFALSE 11914
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
// begin ruAI = 0 ;
11693: LD_ADDR_EXP 41
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11701: LD_ADDR_VAR 0 3
11705: PUSH
11706: LD_INT 10
11708: PPUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 3
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 21
11721: PUSH
11722: LD_INT 2
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 58
11731: PUSH
11732: EMPTY
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: PPUSH
11740: CALL_OW 70
11744: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11745: LD_EXP 34
11749: PPUSH
11750: CALL_OW 122
// wait ( 0 0$1 ) ;
11754: LD_INT 35
11756: PPUSH
11757: CALL_OW 67
// DialogueOn ;
11761: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11765: LD_EXP 1
11769: PPUSH
11770: LD_STRING D6-JMM-1
11772: PPUSH
11773: CALL_OW 88
// DialogueOff ;
11777: CALL_OW 7
// if vehs > 0 then
11781: LD_VAR 0 3
11785: PUSH
11786: LD_INT 0
11788: GREATER
11789: IFFALSE 11859
// for i := 1 to RuScientists do
11791: LD_ADDR_VAR 0 1
11795: PUSH
11796: DOUBLE
11797: LD_INT 1
11799: DEC
11800: ST_TO_ADDR
11801: LD_EXP 34
11805: PUSH
11806: FOR_TO
11807: IFFALSE 11855
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11809: LD_EXP 34
11813: PUSH
11814: LD_VAR 0 1
11818: ARRAY
11819: PPUSH
11820: LD_INT 3
11822: PUSH
11823: LD_INT 60
11825: PUSH
11826: EMPTY
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 72
11837: PPUSH
11838: LD_VAR 0 3
11842: PUSH
11843: LD_VAR 0 1
11847: ARRAY
11848: PPUSH
11849: CALL_OW 120
11853: GO 11806
11855: POP
11856: POP
11857: GO 11914
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11859: LD_EXP 34
11863: PUSH
11864: LD_VAR 0 1
11868: ARRAY
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 60
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_INT 13
11890: PUSH
11891: LD_INT 14
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 2
11903: PPUSH
11904: CALL_OW 12
11908: ARRAY
11909: PPUSH
11910: CALL_OW 113
// end ;
11914: PPOPN 3
11916: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11917: LD_EXP 41
11921: PUSH
11922: LD_INT 0
11924: EQUAL
11925: IFFALSE 12297
11927: GO 11929
11929: DISABLE
11930: LD_INT 0
11932: PPUSH
11933: PPUSH
11934: PPUSH
11935: PPUSH
// begin enable ;
11936: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11937: LD_EXP 34
11941: PPUSH
11942: LD_INT 2
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 13
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 95
11957: PUSH
11958: LD_INT 14
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 72
11974: PUSH
11975: LD_INT 33
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 23
11987: PUSH
11988: LD_INT 3
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 95
12000: PUSH
12001: LD_INT 13
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 95
12010: PUSH
12011: LD_INT 14
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: OR
12033: IFFALSE 12222
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12035: LD_ADDR_VAR 0 2
12039: PUSH
12040: LD_EXP 34
12044: PPUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 95
12050: PUSH
12051: LD_INT 13
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 95
12060: PUSH
12061: LD_INT 14
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 72
12077: PUSH
12078: LD_INT 1
12080: ARRAY
12081: ST_TO_ADDR
// if not unit then
12082: LD_VAR 0 2
12086: NOT
12087: IFFALSE 12222
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12089: LD_ADDR_VAR 0 4
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: LD_INT 95
12099: PUSH
12100: LD_INT 13
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 95
12109: PUSH
12110: LD_INT 14
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 33
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 23
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 69
12151: ST_TO_ADDR
// if not tmp then
12152: LD_VAR 0 4
12156: NOT
12157: IFFALSE 12161
// exit ;
12159: GO 12297
// for i in tmp do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_VAR 0 4
12170: PUSH
12171: FOR_IN
12172: IFFALSE 12220
// if IsDrivenBy ( i ) in RuScientists then
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 311
12183: PUSH
12184: LD_EXP 34
12188: IN
12189: IFFALSE 12218
// begin unit := IsDrivenBy ( i ) ;
12191: LD_ADDR_VAR 0 2
12195: PUSH
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL_OW 311
12205: ST_TO_ADDR
// veh := i ;
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: LD_VAR 0 1
12215: ST_TO_ADDR
// break ;
12216: GO 12220
// end ;
12218: GO 12171
12220: POP
12221: POP
// end ; end ; if not unit then
12222: LD_VAR 0 2
12226: NOT
12227: IFFALSE 12231
// exit ;
12229: GO 12297
// RuScientists = RuScientists diff unit ;
12231: LD_ADDR_EXP 34
12235: PUSH
12236: LD_EXP 34
12240: PUSH
12241: LD_VAR 0 2
12245: DIFF
12246: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12247: LD_VAR 0 2
12251: PPUSH
12252: CALL_OW 64
// if veh then
12256: LD_VAR 0 3
12260: IFFALSE 12297
// begin if GetWeapon ( veh ) = 49 then
12262: LD_VAR 0 3
12266: PPUSH
12267: CALL_OW 264
12271: PUSH
12272: LD_INT 49
12274: EQUAL
12275: IFFALSE 12288
// KillUnit ( veh ) else
12277: LD_VAR 0 3
12281: PPUSH
12282: CALL_OW 66
12286: GO 12297
// RemoveUnit ( veh ) ;
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 64
// end ; end ; end_of_file
12297: PPOPN 4
12299: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12300: LD_INT 0
12302: PPUSH
12303: PPUSH
// for i in charactersList do
12304: LD_ADDR_VAR 0 4
12308: PUSH
12309: LD_VAR 0 1
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12333
// SaveCharacters ( i , ident ) ;
12317: LD_VAR 0 4
12321: PPUSH
12322: LD_VAR 0 2
12326: PPUSH
12327: CALL_OW 38
12331: GO 12314
12333: POP
12334: POP
// end ;
12335: LD_VAR 0 3
12339: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 1
12354: PUSH
12355: LD_EXP 1
12359: PUSH
12360: LD_EXP 7
12364: PUSH
12365: LD_EXP 3
12369: PUSH
12370: LD_EXP 4
12374: PUSH
12375: LD_EXP 5
12379: PUSH
12380: LD_EXP 2
12384: PUSH
12385: LD_EXP 12
12389: PUSH
12390: LD_EXP 13
12394: PUSH
12395: LD_EXP 9
12399: PUSH
12400: LD_EXP 11
12404: PUSH
12405: LD_EXP 6
12409: PUSH
12410: LD_EXP 8
12414: PUSH
12415: LD_EXP 10
12419: PUSH
12420: LD_EXP 22
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: DIFF
12441: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12442: LD_ADDR_VAR 0 6
12446: PUSH
12447: LD_VAR 0 1
12451: PUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 12
12464: ARRAY
12465: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12466: LD_VAR 0 6
12470: PPUSH
12471: CALL_OW 258
12475: PUSH
12476: LD_INT 1
12478: EQUAL
12479: IFFALSE 12497
// Say ( speaker , dialogMID ) else
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL_OW 88
12495: GO 12511
// Say ( speaker , dialogFID ) ;
12497: LD_VAR 0 6
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: CALL_OW 88
// result := speaker ;
12511: LD_ADDR_VAR 0 4
12515: PUSH
12516: LD_VAR 0 6
12520: ST_TO_ADDR
// end ;
12521: LD_VAR 0 4
12525: RET
// export function PrepareDifficulty ; var tmp ; begin
12526: LD_INT 0
12528: PPUSH
12529: PPUSH
// if Difficulty = 1 then
12530: LD_OWVAR 67
12534: PUSH
12535: LD_INT 1
12537: EQUAL
12538: IFFALSE 12558
// begin RuSolMinLevel = 8 ;
12540: LD_ADDR_EXP 36
12544: PUSH
12545: LD_INT 8
12547: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12548: LD_ADDR_EXP 37
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// end else
12556: GO 12798
// if Difficulty = 2 then
12558: LD_OWVAR 67
12562: PUSH
12563: LD_INT 2
12565: EQUAL
12566: IFFALSE 12662
// begin RuSolMinLevel = 9 ;
12568: LD_ADDR_EXP 36
12572: PUSH
12573: LD_INT 9
12575: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12576: LD_ADDR_EXP 37
12580: PUSH
12581: LD_INT 10
12583: ST_TO_ADDR
// uc_nation = 3 ;
12584: LD_ADDR_OWVAR 21
12588: PUSH
12589: LD_INT 3
12591: ST_TO_ADDR
// uc_side = 3 ;
12592: LD_ADDR_OWVAR 20
12596: PUSH
12597: LD_INT 3
12599: ST_TO_ADDR
// bc_level = 10 ;
12600: LD_ADDR_OWVAR 43
12604: PUSH
12605: LD_INT 10
12607: ST_TO_ADDR
// bc_type = b_turret ;
12608: LD_ADDR_OWVAR 42
12612: PUSH
12613: LD_INT 33
12615: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12616: LD_ADDR_VAR 0 2
12620: PUSH
12621: LD_INT 86
12623: PPUSH
12624: LD_INT 34
12626: PPUSH
12627: LD_INT 2
12629: PPUSH
12630: CALL_OW 47
12634: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12635: LD_VAR 0 2
12639: PPUSH
12640: LD_INT 49
12642: PPUSH
12643: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12647: LD_INT 64
12649: PPUSH
12650: LD_INT 3
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 322
// end else
12660: GO 12798
// begin RuSolMinLevel = 10 ;
12662: LD_ADDR_EXP 36
12666: PUSH
12667: LD_INT 10
12669: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12670: LD_ADDR_EXP 37
12674: PUSH
12675: LD_INT 10
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// uc_side = 3 ;
12686: LD_ADDR_OWVAR 20
12690: PUSH
12691: LD_INT 3
12693: ST_TO_ADDR
// bc_level = 10 ;
12694: LD_ADDR_OWVAR 43
12698: PUSH
12699: LD_INT 10
12701: ST_TO_ADDR
// bc_type = b_turret ;
12702: LD_ADDR_OWVAR 42
12706: PUSH
12707: LD_INT 33
12709: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 86
12717: PPUSH
12718: LD_INT 34
12720: PPUSH
12721: LD_INT 2
12723: PPUSH
12724: CALL_OW 47
12728: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12729: LD_VAR 0 2
12733: PPUSH
12734: LD_INT 49
12736: PPUSH
12737: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12741: LD_ADDR_VAR 0 2
12745: PUSH
12746: LD_INT 93
12748: PPUSH
12749: LD_INT 31
12751: PPUSH
12752: LD_INT 2
12754: PPUSH
12755: CALL_OW 47
12759: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12760: LD_VAR 0 2
12764: PPUSH
12765: LD_INT 49
12767: PPUSH
12768: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12772: LD_INT 64
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12785: LD_INT 65
12787: PPUSH
12788: LD_INT 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// end ; end ;
12798: LD_VAR 0 1
12802: RET
// export function ShowQuery1 ; begin
12803: LD_INT 0
12805: PPUSH
// result := Query ( Q1 ) ;
12806: LD_ADDR_VAR 0 1
12810: PUSH
12811: LD_STRING Q1
12813: PPUSH
12814: CALL_OW 97
12818: ST_TO_ADDR
// end ;
12819: LD_VAR 0 1
12823: RET
// export function ShowQuery2 ; begin
12824: LD_INT 0
12826: PPUSH
// result := Query ( Q1a ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_STRING Q1a
12834: PPUSH
12835: CALL_OW 97
12839: ST_TO_ADDR
// end ;
12840: LD_VAR 0 1
12844: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12845: LD_INT 0
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
// for i = 1 to count do
12852: LD_ADDR_VAR 0 8
12856: PUSH
12857: DOUBLE
12858: LD_INT 1
12860: DEC
12861: ST_TO_ADDR
12862: LD_VAR 0 6
12866: PUSH
12867: FOR_TO
12868: IFFALSE 12949
// begin uc_side = side ;
12870: LD_ADDR_OWVAR 20
12874: PUSH
12875: LD_VAR 0 1
12879: ST_TO_ADDR
// uc_nation = nation ;
12880: LD_ADDR_OWVAR 21
12884: PUSH
12885: LD_VAR 0 2
12889: ST_TO_ADDR
// hc_gallery =  ;
12890: LD_ADDR_OWVAR 33
12894: PUSH
12895: LD_STRING 
12897: ST_TO_ADDR
// hc_name =  ;
12898: LD_ADDR_OWVAR 26
12902: PUSH
12903: LD_STRING 
12905: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12906: LD_INT 0
12908: PPUSH
12909: LD_VAR 0 5
12913: PPUSH
12914: LD_VAR 0 4
12918: PPUSH
12919: CALL_OW 380
// un = CreateHuman ;
12923: LD_ADDR_VAR 0 10
12927: PUSH
12928: CALL_OW 44
12932: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12933: LD_VAR 0 10
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: CALL_OW 52
// end ;
12947: GO 12867
12949: POP
12950: POP
// end ;
12951: LD_VAR 0 7
12955: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12956: LD_INT 0
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12963: LD_ADDR_VAR 0 8
12967: PUSH
12968: LD_INT 48
12970: PUSH
12971: LD_INT 49
12973: PUSH
12974: LD_INT 50
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: LD_INT 51
12985: PUSH
12986: LD_INT 52
12988: PUSH
12989: LD_INT 69
12991: PUSH
12992: LD_INT 39
12994: PUSH
12995: LD_INT 34
12997: PUSH
12998: LD_INT 40
13000: PUSH
13001: LD_INT 53
13003: PUSH
13004: LD_INT 71
13006: PUSH
13007: LD_INT 57
13009: PUSH
13010: LD_INT 58
13012: PUSH
13013: LD_INT 44
13015: PUSH
13016: LD_INT 32
13018: PUSH
13019: LD_INT 27
13021: PUSH
13022: LD_INT 23
13024: PUSH
13025: LD_INT 33
13027: PUSH
13028: LD_INT 59
13030: PUSH
13031: LD_INT 54
13033: PUSH
13034: LD_INT 55
13036: PUSH
13037: LD_INT 56
13039: PUSH
13040: LD_INT 63
13042: PUSH
13043: LD_INT 64
13045: PUSH
13046: LD_INT 65
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 31
13054: PUSH
13055: LD_INT 21
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_INT 25
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13098: LD_ADDR_VAR 0 5
13102: PUSH
13103: DOUBLE
13104: LD_INT 1
13106: DEC
13107: ST_TO_ADDR
13108: LD_VAR 0 8
13112: PUSH
13113: FOR_TO
13114: IFFALSE 13190
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13116: LD_VAR 0 8
13120: PUSH
13121: LD_VAR 0 5
13125: ARRAY
13126: PPUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 321
13136: PUSH
13137: LD_INT 1
13139: EQUAL
13140: PUSH
13141: LD_VAR 0 8
13145: PUSH
13146: LD_VAR 0 5
13150: ARRAY
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: CALL_OW 482
13161: PUSH
13162: LD_INT 1
13164: EQUAL
13165: AND
13166: IFFALSE 13188
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13168: LD_VAR 0 2
13172: PPUSH
13173: LD_VAR 0 8
13177: PUSH
13178: LD_VAR 0 5
13182: ARRAY
13183: PPUSH
13184: CALL_OW 184
13188: GO 13113
13190: POP
13191: POP
// end ;
13192: LD_VAR 0 4
13196: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13197: LD_INT 0
13199: PPUSH
13200: PPUSH
13201: PPUSH
13202: PPUSH
13203: PPUSH
13204: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13205: LD_ADDR_VAR 0 8
13209: PUSH
13210: LD_VAR 0 2
13214: PPUSH
13215: CALL_OW 313
13219: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13220: LD_ADDR_VAR 0 9
13224: PUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 22
13232: PUSH
13233: LD_VAR 0 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 24
13254: PUSH
13255: LD_INT 750
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: LD_INT 54
13267: PUSH
13268: EMPTY
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 70
13285: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13286: LD_ADDR_VAR 0 6
13290: PUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_INT 22
13298: PUSH
13299: LD_VAR 0 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 3
13320: PUSH
13321: LD_INT 24
13323: PUSH
13324: LD_INT 1000
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: PPUSH
13343: CALL_OW 70
13347: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13348: LD_VAR 0 6
13352: NOT
13353: PUSH
13354: LD_INT 22
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 24
13378: PUSH
13379: LD_INT 250
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 69
13395: NOT
13396: AND
13397: IFFALSE 13401
// exit ;
13399: GO 13583
// if buildings_list > 0 and engineerOkInside then
13401: LD_VAR 0 6
13405: PUSH
13406: LD_INT 0
13408: GREATER
13409: PUSH
13410: LD_VAR 0 8
13414: AND
13415: IFFALSE 13426
// ComExitBuilding ( engineerOkInside ) ;
13417: LD_VAR 0 8
13421: PPUSH
13422: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13426: LD_VAR 0 6
13430: PUSH
13431: LD_INT 0
13433: GREATER
13434: PUSH
13435: LD_VAR 0 9
13439: PUSH
13440: LD_INT 0
13442: GREATER
13443: AND
13444: IFFALSE 13464
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13446: LD_VAR 0 9
13450: PPUSH
13451: LD_VAR 0 6
13455: PUSH
13456: LD_INT 1
13458: ARRAY
13459: PPUSH
13460: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13464: LD_VAR 0 6
13468: PUSH
13469: LD_INT 0
13471: EQUAL
13472: PUSH
13473: LD_VAR 0 4
13477: PUSH
13478: LD_INT 0
13480: EQUAL
13481: AND
13482: PUSH
13483: LD_VAR 0 9
13487: PUSH
13488: LD_INT 0
13490: GREATER
13491: AND
13492: IFFALSE 13508
// ComEnterUnit ( engineerOkOutside , building ) ;
13494: LD_VAR 0 9
13498: PPUSH
13499: LD_VAR 0 2
13503: PPUSH
13504: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13508: LD_VAR 0 9
13512: PUSH
13513: LD_INT 0
13515: GREATER
13516: PUSH
13517: LD_VAR 0 6
13521: PUSH
13522: LD_INT 0
13524: EQUAL
13525: AND
13526: PUSH
13527: LD_VAR 0 4
13531: PUSH
13532: LD_INT 0
13534: GREATER
13535: AND
13536: IFFALSE 13583
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13538: LD_VAR 0 9
13542: PPUSH
13543: LD_VAR 0 4
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: LD_VAR 0 4
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 4
13565: PUSH
13566: LD_INT 3
13568: ARRAY
13569: PPUSH
13570: LD_VAR 0 4
13574: PUSH
13575: LD_INT 4
13577: ARRAY
13578: PPUSH
13579: CALL_OW 145
// end ;
13583: LD_VAR 0 5
13587: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13588: LD_INT 0
13590: PPUSH
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
13597: PPUSH
13598: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13599: LD_ADDR_VAR 0 6
13603: PUSH
13604: LD_INT 22
13606: PUSH
13607: LD_VAR 0 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 25
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 24
13628: PUSH
13629: LD_INT 251
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 69
13645: PUSH
13646: LD_EXP 34
13650: PUSH
13651: EMPTY
13652: LIST
13653: DIFF
13654: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13655: LD_ADDR_VAR 0 7
13659: PUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: LD_INT 22
13667: PUSH
13668: LD_VAR 0 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 25
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 50
13689: PUSH
13690: EMPTY
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 70
13702: PUSH
13703: LD_EXP 34
13707: PUSH
13708: EMPTY
13709: LIST
13710: DIFF
13711: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13712: LD_ADDR_VAR 0 10
13716: PUSH
13717: LD_VAR 0 3
13721: PPUSH
13722: LD_INT 22
13724: PUSH
13725: LD_VAR 0 1
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 21
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 3
13746: PUSH
13747: LD_INT 24
13749: PUSH
13750: LD_INT 750
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 70
13770: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13771: LD_ADDR_VAR 0 11
13775: PUSH
13776: LD_VAR 0 2
13780: PPUSH
13781: LD_INT 22
13783: PUSH
13784: LD_VAR 0 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 21
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 3
13805: PUSH
13806: LD_INT 24
13808: PUSH
13809: LD_INT 1000
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: PPUSH
13825: CALL_OW 70
13829: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13830: LD_VAR 0 10
13834: PUSH
13835: LD_INT 0
13837: GREATER
13838: PUSH
13839: LD_VAR 0 6
13843: PUSH
13844: LD_INT 0
13846: GREATER
13847: AND
13848: IFFALSE 13864
// ComMoveToArea ( damageUnits , healArea ) ;
13850: LD_VAR 0 10
13854: PPUSH
13855: LD_VAR 0 2
13859: PPUSH
13860: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13864: LD_VAR 0 11
13868: PUSH
13869: LD_INT 0
13871: GREATER
13872: PUSH
13873: LD_VAR 0 7
13877: PUSH
13878: LD_INT 0
13880: GREATER
13881: AND
13882: IFFALSE 13902
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13884: LD_VAR 0 7
13888: PPUSH
13889: LD_VAR 0 11
13893: PUSH
13894: LD_INT 1
13896: ARRAY
13897: PPUSH
13898: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13902: LD_VAR 0 10
13906: PUSH
13907: LD_INT 0
13909: EQUAL
13910: PUSH
13911: LD_VAR 0 11
13915: PUSH
13916: LD_INT 0
13918: EQUAL
13919: AND
13920: PUSH
13921: LD_VAR 0 7
13925: PUSH
13926: LD_INT 0
13928: GREATER
13929: AND
13930: IFFALSE 14035
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13932: LD_ADDR_VAR 0 12
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_VAR 0 1
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 3
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 30
13961: PUSH
13962: LD_INT 8
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 69
13978: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13979: LD_ADDR_VAR 0 13
13983: PUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_VAR 0 12
13991: PPUSH
13992: CALL_OW 12
13996: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13997: LD_VAR 0 7
14001: PPUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 60
14007: PUSH
14008: EMPTY
14009: LIST
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 72
14019: PPUSH
14020: LD_VAR 0 12
14024: PUSH
14025: LD_VAR 0 13
14029: ARRAY
14030: PPUSH
14031: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14035: LD_VAR 0 3
14039: PPUSH
14040: LD_INT 22
14042: PUSH
14043: LD_VAR 0 1
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 24
14064: PUSH
14065: LD_INT 751
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 70
14081: PUSH
14082: LD_INT 0
14084: GREATER
14085: PUSH
14086: LD_INT 21
14088: PPUSH
14089: CALL_OW 302
14093: AND
14094: PUSH
14095: LD_INT 21
14097: PPUSH
14098: CALL_OW 255
14102: PUSH
14103: LD_INT 3
14105: EQUAL
14106: AND
14107: IFFALSE 14163
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 22
14116: PUSH
14117: LD_VAR 0 1
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 25
14128: PUSH
14129: LD_INT 3
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 24
14138: PUSH
14139: LD_INT 751
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 70
14155: PPUSH
14156: LD_INT 21
14158: PPUSH
14159: CALL_OW 120
// end ;
14163: LD_VAR 0 5
14167: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14168: LD_INT 0
14170: PPUSH
14171: PPUSH
14172: PPUSH
14173: PPUSH
14174: PPUSH
14175: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14176: LD_ADDR_VAR 0 7
14180: PUSH
14181: LD_VAR 0 2
14185: PPUSH
14186: LD_INT 22
14188: PUSH
14189: LD_VAR 0 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 34
14210: PUSH
14211: LD_INT 52
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 70
14227: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14228: LD_ADDR_VAR 0 8
14232: PUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_INT 22
14240: PUSH
14241: LD_VAR 0 1
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 3
14262: PUSH
14263: LD_INT 24
14265: PUSH
14266: LD_INT 1000
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 70
14289: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14290: LD_VAR 0 8
14294: PUSH
14295: LD_INT 0
14297: GREATER
14298: PUSH
14299: LD_VAR 0 7
14303: PPUSH
14304: LD_INT 24
14306: PUSH
14307: LD_INT 750
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 72
14318: PUSH
14319: LD_INT 0
14321: GREATER
14322: AND
14323: IFFALSE 14343
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14325: LD_VAR 0 7
14329: PPUSH
14330: LD_VAR 0 8
14334: PUSH
14335: LD_INT 1
14337: ARRAY
14338: PPUSH
14339: CALL_OW 130
// end ;
14343: LD_VAR 0 3
14347: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14348: LD_INT 0
14350: PPUSH
14351: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14352: LD_INT 22
14354: PUSH
14355: LD_VAR 0 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: PUSH
14383: LD_INT 18
14385: PPUSH
14386: LD_INT 22
14388: PUSH
14389: LD_VAR 0 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 70
14416: PUSH
14417: LD_VAR 0 3
14421: LESSEQUAL
14422: DIFF
14423: IFFALSE 14490
// for i = 1 to vehCount do
14425: LD_ADDR_VAR 0 9
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_VAR 0 3
14439: PUSH
14440: FOR_TO
14441: IFFALSE 14488
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_VAR 0 7
14452: PPUSH
14453: LD_VAR 0 5
14457: PPUSH
14458: LD_VAR 0 6
14462: PPUSH
14463: LD_VAR 0 4
14467: PUSH
14468: LD_INT 1
14470: PPUSH
14471: LD_VAR 0 4
14475: PPUSH
14476: CALL_OW 12
14480: ARRAY
14481: PPUSH
14482: CALL_OW 185
14486: GO 14440
14488: POP
14489: POP
// end ;
14490: LD_VAR 0 8
14494: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14503: LD_ADDR_VAR 0 6
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_VAR 0 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 25
14522: PUSH
14523: LD_INT 9
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14539: LD_ADDR_VAR 0 7
14543: PUSH
14544: LD_INT 81
14546: PUSH
14547: LD_VAR 0 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 69
14581: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14582: LD_ADDR_VAR 0 4
14586: PUSH
14587: LD_INT 1
14589: PPUSH
14590: LD_INT 3
14592: PPUSH
14593: CALL_OW 12
14597: ST_TO_ADDR
// for i = 1 to list do
14598: LD_ADDR_VAR 0 5
14602: PUSH
14603: DOUBLE
14604: LD_INT 1
14606: DEC
14607: ST_TO_ADDR
14608: LD_VAR 0 6
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14816
// for ta in filter do
14616: LD_ADDR_VAR 0 3
14620: PUSH
14621: LD_VAR 0 7
14625: PUSH
14626: FOR_IN
14627: IFFALSE 14812
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14629: LD_VAR 0 6
14633: PUSH
14634: LD_VAR 0 5
14638: ARRAY
14639: PPUSH
14640: LD_VAR 0 3
14644: PPUSH
14645: CALL_OW 296
14649: PUSH
14650: LD_INT 15
14652: LESSEQUAL
14653: IFFALSE 14810
// begin case c of 1 :
14655: LD_VAR 0 4
14659: PUSH
14660: LD_INT 1
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14706
14668: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14669: LD_VAR 0 6
14673: PUSH
14674: LD_VAR 0 5
14678: ARRAY
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: CALL_OW 250
14689: PPUSH
14690: LD_VAR 0 3
14694: PPUSH
14695: CALL_OW 251
14699: PPUSH
14700: CALL_OW 154
14704: GO 14810
14706: LD_INT 2
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14778
14714: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14715: LD_VAR 0 6
14719: PUSH
14720: LD_VAR 0 5
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 3
14730: PPUSH
14731: CALL_OW 250
14735: PUSH
14736: LD_INT 1
14738: NEG
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 12
14747: PLUS
14748: PPUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: CALL_OW 251
14758: PUSH
14759: LD_INT 1
14761: NEG
14762: PPUSH
14763: LD_INT 1
14765: PPUSH
14766: CALL_OW 12
14770: PLUS
14771: PPUSH
14772: CALL_OW 153
14776: GO 14810
14778: LD_INT 3
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14809
14786: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14787: LD_VAR 0 6
14791: PUSH
14792: LD_VAR 0 5
14796: ARRAY
14797: PPUSH
14798: LD_VAR 0 3
14802: PPUSH
14803: CALL_OW 115
14807: GO 14810
14809: POP
// end ; end ;
14810: GO 14626
14812: POP
14813: POP
14814: GO 14613
14816: POP
14817: POP
// end ;
14818: LD_VAR 0 2
14822: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
// r := 100 ;
14829: LD_ADDR_VAR 0 5
14833: PUSH
14834: LD_INT 100
14836: ST_TO_ADDR
// x := 0 ;
14837: LD_ADDR_VAR 0 6
14841: PUSH
14842: LD_INT 0
14844: ST_TO_ADDR
// while ( x < n ) do
14845: LD_VAR 0 6
14849: PUSH
14850: LD_VAR 0 2
14854: LESS
14855: IFFALSE 15142
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14857: LD_ADDR_VAR 0 4
14861: PUSH
14862: DOUBLE
14863: LD_INT 1
14865: DEC
14866: ST_TO_ADDR
14867: LD_VAR 0 1
14871: PPUSH
14872: LD_INT 0
14874: PPUSH
14875: CALL_OW 517
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PUSH
14884: FOR_TO
14885: IFFALSE 15138
// begin if r > 50 then
14887: LD_VAR 0 5
14891: PUSH
14892: LD_INT 50
14894: GREATER
14895: IFFALSE 15114
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 0
14904: PPUSH
14905: CALL_OW 517
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PUSH
14914: LD_VAR 0 4
14918: ARRAY
14919: PPUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: LD_INT 0
14927: PPUSH
14928: CALL_OW 517
14932: PUSH
14933: LD_INT 2
14935: ARRAY
14936: PUSH
14937: LD_VAR 0 4
14941: ARRAY
14942: PPUSH
14943: CALL_OW 458
14947: NOT
14948: IFFALSE 15098
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: LD_INT 0
14957: PPUSH
14958: CALL_OW 517
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PUSH
14967: LD_VAR 0 4
14971: ARRAY
14972: PPUSH
14973: LD_VAR 0 1
14977: PPUSH
14978: LD_INT 0
14980: PPUSH
14981: CALL_OW 517
14985: PUSH
14986: LD_INT 2
14988: ARRAY
14989: PUSH
14990: LD_VAR 0 4
14994: ARRAY
14995: PPUSH
14996: LD_INT 8
14998: PPUSH
14999: LD_INT 0
15001: PPUSH
15002: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15006: LD_ADDR_EXP 44
15010: PUSH
15011: LD_EXP 44
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: LD_INT 0
15026: PPUSH
15027: CALL_OW 517
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PUSH
15036: LD_VAR 0 4
15040: ARRAY
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_INT 0
15049: PPUSH
15050: CALL_OW 517
15054: PUSH
15055: LD_INT 2
15057: ARRAY
15058: PUSH
15059: LD_VAR 0 4
15063: ARRAY
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 2
15073: ST_TO_ADDR
// r := 0 ;
15074: LD_ADDR_VAR 0 5
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// x := x + 1 ;
15082: LD_ADDR_VAR 0 6
15086: PUSH
15087: LD_VAR 0 6
15091: PUSH
15092: LD_INT 1
15094: PLUS
15095: ST_TO_ADDR
// end else
15096: GO 15112
// r := r + 35 ;
15098: LD_ADDR_VAR 0 5
15102: PUSH
15103: LD_VAR 0 5
15107: PUSH
15108: LD_INT 35
15110: PLUS
15111: ST_TO_ADDR
// end else
15112: GO 15136
// r := r + rand ( 10 , 25 ) ;
15114: LD_ADDR_VAR 0 5
15118: PUSH
15119: LD_VAR 0 5
15123: PUSH
15124: LD_INT 10
15126: PPUSH
15127: LD_INT 25
15129: PPUSH
15130: CALL_OW 12
15134: PLUS
15135: ST_TO_ADDR
// end ;
15136: GO 14884
15138: POP
15139: POP
15140: GO 14845
// end ;
15142: LD_VAR 0 3
15146: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
// tmpTab = [ ] ;
15153: LD_ADDR_VAR 0 6
15157: PUSH
15158: EMPTY
15159: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15160: LD_INT 22
15162: PUSH
15163: LD_VAR 0 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 30
15174: PUSH
15175: LD_INT 32
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PUSH
15191: LD_INT 0
15193: GREATER
15194: IFFALSE 15277
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15196: LD_ADDR_VAR 0 4
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_VAR 0 1
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 30
15215: PUSH
15216: LD_INT 32
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL_OW 69
15231: PUSH
15232: FOR_IN
15233: IFFALSE 15275
// begin for j in UnitsInside ( i ) do
15235: LD_ADDR_VAR 0 5
15239: PUSH
15240: LD_VAR 0 4
15244: PPUSH
15245: CALL_OW 313
15249: PUSH
15250: FOR_IN
15251: IFFALSE 15271
// tmpTab = tmpTab ^ j ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: LD_VAR 0 6
15262: PUSH
15263: LD_VAR 0 5
15267: ADD
15268: ST_TO_ADDR
15269: GO 15250
15271: POP
15272: POP
// end ;
15273: GO 15232
15275: POP
15276: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15277: LD_VAR 0 6
15281: PPUSH
15282: LD_VAR 0 2
15286: PPUSH
15287: CALL_OW 250
15291: PPUSH
15292: LD_VAR 0 2
15296: PPUSH
15297: CALL_OW 251
15301: PPUSH
15302: CALL_OW 114
// end ;
15306: LD_VAR 0 3
15310: RET
// export function CreateNature ; var i , un ; begin
15311: LD_INT 0
15313: PPUSH
15314: PPUSH
15315: PPUSH
// uc_side := 0 ;
15316: LD_ADDR_OWVAR 20
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// uc_nation := 0 ;
15324: LD_ADDR_OWVAR 21
15328: PUSH
15329: LD_INT 0
15331: ST_TO_ADDR
// InitHc ;
15332: CALL_OW 19
// hc_class := class_fish ;
15336: LD_ADDR_OWVAR 28
15340: PUSH
15341: LD_INT 20
15343: ST_TO_ADDR
// for i = 1 to 6 do
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_INT 6
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15377
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15360: CALL_OW 44
15364: PPUSH
15365: LD_INT 23
15367: PPUSH
15368: LD_INT 0
15370: PPUSH
15371: CALL_OW 49
15375: GO 15357
15377: POP
15378: POP
// for i = 1 to Difficulty + 2 do
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: DOUBLE
15385: LD_INT 1
15387: DEC
15388: ST_TO_ADDR
15389: LD_OWVAR 67
15393: PUSH
15394: LD_INT 2
15396: PLUS
15397: PUSH
15398: FOR_TO
15399: IFFALSE 15508
// begin hc_sex = sex_male ;
15401: LD_ADDR_OWVAR 27
15405: PUSH
15406: LD_INT 1
15408: ST_TO_ADDR
// uc_side = 0 ;
15409: LD_ADDR_OWVAR 20
15413: PUSH
15414: LD_INT 0
15416: ST_TO_ADDR
// uc_nation = nation_nature ;
15417: LD_ADDR_OWVAR 21
15421: PUSH
15422: LD_INT 0
15424: ST_TO_ADDR
// hc_class = class_tiger ;
15425: LD_ADDR_OWVAR 28
15429: PUSH
15430: LD_INT 14
15432: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15433: LD_ADDR_OWVAR 31
15437: PUSH
15438: LD_EXP 37
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: LD_INT 0
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15458: LD_ADDR_OWVAR 35
15462: PUSH
15463: LD_INT 5
15465: NEG
15466: PPUSH
15467: LD_INT 5
15469: PPUSH
15470: CALL_OW 12
15474: PUSH
15475: LD_OWVAR 67
15479: MUL
15480: ST_TO_ADDR
// un = CreateHuman ;
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: CALL_OW 44
15490: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_INT 24
15498: PPUSH
15499: LD_INT 0
15501: PPUSH
15502: CALL_OW 49
// end ;
15506: GO 15398
15508: POP
15509: POP
// for i = 1 to rand ( 3 , 4 ) do
15510: LD_ADDR_VAR 0 2
15514: PUSH
15515: DOUBLE
15516: LD_INT 1
15518: DEC
15519: ST_TO_ADDR
15520: LD_INT 3
15522: PPUSH
15523: LD_INT 4
15525: PPUSH
15526: CALL_OW 12
15530: PUSH
15531: FOR_TO
15532: IFFALSE 15624
// begin hc_sex = sex_male ;
15534: LD_ADDR_OWVAR 27
15538: PUSH
15539: LD_INT 1
15541: ST_TO_ADDR
// uc_side = 0 ;
15542: LD_ADDR_OWVAR 20
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// uc_nation = nation_nature ;
15550: LD_ADDR_OWVAR 21
15554: PUSH
15555: LD_INT 0
15557: ST_TO_ADDR
// hc_class = 18 ;
15558: LD_ADDR_OWVAR 28
15562: PUSH
15563: LD_INT 18
15565: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15566: LD_ADDR_OWVAR 31
15570: PUSH
15571: LD_INT 0
15573: PUSH
15574: LD_INT 0
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: LD_INT 0
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: ST_TO_ADDR
// hc_agressivity = 0 ;
15589: LD_ADDR_OWVAR 35
15593: PUSH
15594: LD_INT 0
15596: ST_TO_ADDR
// un = CreateHuman ;
15597: LD_ADDR_VAR 0 3
15601: PUSH
15602: CALL_OW 44
15606: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_INT 24
15614: PPUSH
15615: LD_INT 0
15617: PPUSH
15618: CALL_OW 49
// end ;
15622: GO 15531
15624: POP
15625: POP
// for i = 1 to rand ( 1 , 3 ) do
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: DOUBLE
15632: LD_INT 1
15634: DEC
15635: ST_TO_ADDR
15636: LD_INT 1
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 12
15646: PUSH
15647: FOR_TO
15648: IFFALSE 15796
// begin hc_sex = sex_male ;
15650: LD_ADDR_OWVAR 27
15654: PUSH
15655: LD_INT 1
15657: ST_TO_ADDR
// uc_side = 0 ;
15658: LD_ADDR_OWVAR 20
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// uc_nation = nation_nature ;
15666: LD_ADDR_OWVAR 21
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// hc_class = class_apeman ;
15674: LD_ADDR_OWVAR 28
15678: PUSH
15679: LD_INT 12
15681: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15682: LD_ADDR_OWVAR 31
15686: PUSH
15687: LD_EXP 36
15691: PPUSH
15692: LD_EXP 37
15696: PPUSH
15697: CALL_OW 12
15701: PUSH
15702: LD_EXP 36
15706: PPUSH
15707: LD_EXP 37
15711: PPUSH
15712: CALL_OW 12
15716: PUSH
15717: LD_EXP 36
15721: PPUSH
15722: LD_EXP 37
15726: PPUSH
15727: CALL_OW 12
15731: PUSH
15732: LD_EXP 36
15736: PPUSH
15737: LD_EXP 37
15741: PPUSH
15742: CALL_OW 12
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15753: LD_ADDR_OWVAR 35
15757: PUSH
15758: LD_INT 1
15760: PPUSH
15761: LD_INT 20
15763: PPUSH
15764: CALL_OW 12
15768: ST_TO_ADDR
// un = CreateHuman ;
15769: LD_ADDR_VAR 0 3
15773: PUSH
15774: CALL_OW 44
15778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15779: LD_VAR 0 3
15783: PPUSH
15784: LD_INT 24
15786: PPUSH
15787: LD_INT 0
15789: PPUSH
15790: CALL_OW 49
// end ;
15794: GO 15647
15796: POP
15797: POP
// end ; end_of_file
15798: LD_VAR 0 1
15802: RET
// on UnitDestroyed ( unit ) do var i ;
15803: LD_INT 0
15805: PPUSH
// begin if unit in russianTanks then
15806: LD_VAR 0 1
15810: PUSH
15811: LD_EXP 39
15815: IN
15816: IFFALSE 15834
// russianTanks := russianTanks diff unit ;
15818: LD_ADDR_EXP 39
15822: PUSH
15823: LD_EXP 39
15827: PUSH
15828: LD_VAR 0 1
15832: DIFF
15833: ST_TO_ADDR
// if unit in russianTimeLapsers then
15834: LD_VAR 0 1
15838: PUSH
15839: LD_EXP 40
15843: IN
15844: IFFALSE 15862
// russianTimeLapsers := russianTimeLapsers diff unit ;
15846: LD_ADDR_EXP 40
15850: PUSH
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 1
15860: DIFF
15861: ST_TO_ADDR
// if unit in RuScientists then
15862: LD_VAR 0 1
15866: PUSH
15867: LD_EXP 34
15871: IN
15872: IFFALSE 15904
// begin RuScientists = RuScientists diff unit ;
15874: LD_ADDR_EXP 34
15878: PUSH
15879: LD_EXP 34
15883: PUSH
15884: LD_VAR 0 1
15888: DIFF
15889: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15890: LD_ADDR_EXP 35
15894: PUSH
15895: LD_EXP 35
15899: PUSH
15900: LD_INT 1
15902: PLUS
15903: ST_TO_ADDR
// end ; end ;
15904: PPOPN 2
15906: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15907: LD_VAR 0 3
15911: PPUSH
15912: CALL_OW 264
15916: PUSH
15917: LD_INT 9
15919: EQUAL
15920: IFFALSE 15936
// laserCounterDestroy := laserCounterDestroy + 1 ;
15922: LD_ADDR_EXP 50
15926: PUSH
15927: LD_EXP 50
15931: PUSH
15932: LD_INT 1
15934: PLUS
15935: ST_TO_ADDR
// end ;
15936: PPOPN 3
15938: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15939: LD_VAR 0 1
15943: PUSH
15944: LD_INT 10
15946: EQUAL
15947: PUSH
15948: LD_VAR 0 2
15952: PPUSH
15953: CALL_OW 255
15957: PUSH
15958: LD_INT 1
15960: EQUAL
15961: AND
15962: PUSH
15963: LD_EXP 47
15967: PUSH
15968: LD_INT 0
15970: EQUAL
15971: AND
15972: IFFALSE 16084
// begin eventVar1 = 1 ;
15974: LD_ADDR_EXP 47
15978: PUSH
15979: LD_INT 1
15981: ST_TO_ADDR
// teleportExplored = 1 ;
15982: LD_ADDR_EXP 33
15986: PUSH
15987: LD_INT 1
15989: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15990: LD_STRING M2a
15992: PPUSH
15993: CALL_OW 337
// wait ( 0 0$2 ) ;
15997: LD_INT 70
15999: PPUSH
16000: CALL_OW 67
// DialogueOn ;
16004: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16008: LD_INT 22
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 21
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PPUSH
16032: CALL_OW 69
16036: PPUSH
16037: LD_STRING DT3a-Sol1-1
16039: PPUSH
16040: LD_STRING DT3a-FSol1-1
16042: PPUSH
16043: CALL 12340 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16047: LD_EXP 1
16051: PPUSH
16052: LD_STRING DT3a-JMM-1
16054: PPUSH
16055: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16068: LD_EXP 1
16072: PPUSH
16073: LD_STRING DT3a-JMM-1a
16075: PPUSH
16076: CALL_OW 88
// DialogueOff ;
16080: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 10
16091: EQUAL
16092: PUSH
16093: LD_VAR 0 2
16097: PPUSH
16098: CALL_OW 247
16102: PUSH
16103: LD_INT 2
16105: EQUAL
16106: AND
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 255
16117: PUSH
16118: LD_INT 3
16120: EQUAL
16121: AND
16122: PUSH
16123: LD_EXP 28
16127: PUSH
16128: LD_INT 0
16130: EQUAL
16131: AND
16132: IFFALSE 16149
// begin wait ( 0 0$3 ) ;
16134: LD_INT 105
16136: PPUSH
16137: CALL_OW 67
// vehicleTeleported = 1 ;
16141: LD_ADDR_EXP 28
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16149: LD_VAR 0 1
16153: PUSH
16154: LD_INT 10
16156: EQUAL
16157: PUSH
16158: LD_VAR 0 2
16162: PPUSH
16163: CALL_OW 247
16167: PUSH
16168: LD_INT 2
16170: EQUAL
16171: AND
16172: PUSH
16173: LD_VAR 0 2
16177: PPUSH
16178: CALL_OW 255
16182: PUSH
16183: LD_INT 3
16185: EQUAL
16186: AND
16187: PUSH
16188: LD_EXP 28
16192: PUSH
16193: LD_INT 2
16195: EQUAL
16196: AND
16197: IFFALSE 16214
// begin wait ( 0 0$3 ) ;
16199: LD_INT 105
16201: PPUSH
16202: CALL_OW 67
// vehicleTeleported = 3 ;
16206: LD_ADDR_EXP 28
16210: PUSH
16211: LD_INT 3
16213: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16214: LD_VAR 0 1
16218: PUSH
16219: LD_INT 10
16221: EQUAL
16222: PUSH
16223: LD_VAR 0 2
16227: PPUSH
16228: CALL_OW 247
16232: PUSH
16233: LD_INT 2
16235: EQUAL
16236: AND
16237: PUSH
16238: LD_VAR 0 2
16242: PPUSH
16243: CALL_OW 255
16247: PUSH
16248: LD_INT 3
16250: EQUAL
16251: AND
16252: IFFALSE 16268
// tpCounter = tpCounter + 1 ;
16254: LD_ADDR_EXP 29
16258: PUSH
16259: LD_EXP 29
16263: PUSH
16264: LD_INT 1
16266: PLUS
16267: ST_TO_ADDR
// end ;
16268: PPOPN 2
16270: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 264
16280: PUSH
16281: LD_INT 7
16283: EQUAL
16284: IFFALSE 16294
// rocketBuilded := true ;
16286: LD_ADDR_EXP 51
16290: PUSH
16291: LD_INT 1
16293: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16294: LD_VAR 0 2
16298: PUSH
16299: LD_INT 21
16301: EQUAL
16302: PUSH
16303: LD_VAR 0 2
16307: PUSH
16308: LD_INT 112
16310: EQUAL
16311: OR
16312: IFFALSE 16433
// if GetSide ( vehicle ) = 3 then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 255
16323: PUSH
16324: LD_INT 3
16326: EQUAL
16327: IFFALSE 16433
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 264
16338: PUSH
16339: LD_INT 46
16341: EQUAL
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 264
16352: PUSH
16353: LD_INT 45
16355: EQUAL
16356: OR
16357: PUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 264
16367: PUSH
16368: LD_INT 44
16370: EQUAL
16371: OR
16372: IFFALSE 16390
// begin russianTanks = russianTanks ^ vehicle ;
16374: LD_ADDR_EXP 39
16378: PUSH
16379: LD_EXP 39
16383: PUSH
16384: LD_VAR 0 1
16388: ADD
16389: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 264
16399: PUSH
16400: LD_INT 49
16402: EQUAL
16403: IFFALSE 16433
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16405: LD_ADDR_EXP 40
16409: PUSH
16410: LD_EXP 40
16414: PUSH
16415: LD_VAR 0 1
16419: ADD
16420: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 137
16428: PPUSH
16429: CALL_OW 120
// end ; end ; end ;
16433: PPOPN 2
16435: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16436: LD_INT 0
16438: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL_OW 255
16448: PUSH
16449: LD_INT 3
16451: EQUAL
16452: PUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: CALL_OW 257
16462: PUSH
16463: LD_INT 3
16465: EQUAL
16466: AND
16467: PUSH
16468: LD_INT 21
16470: PPUSH
16471: CALL_OW 255
16475: PUSH
16476: LD_INT 3
16478: EQUAL
16479: AND
16480: PUSH
16481: LD_INT 21
16483: PPUSH
16484: CALL_OW 302
16488: AND
16489: IFFALSE 16503
// ComEnterUnit ( human , ru_fact ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_INT 21
16498: PPUSH
16499: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16503: LD_VAR 0 2
16507: PPUSH
16508: CALL_OW 257
16512: PUSH
16513: LD_INT 4
16515: EQUAL
16516: PUSH
16517: LD_VAR 0 2
16521: PPUSH
16522: CALL_OW 255
16526: PUSH
16527: LD_INT 3
16529: EQUAL
16530: AND
16531: PUSH
16532: LD_EXP 41
16536: PUSH
16537: LD_INT 0
16539: EQUAL
16540: AND
16541: IFFALSE 16603
// for i in RuScientists do
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_EXP 34
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16601
// if i = human then
16556: LD_VAR 0 3
16560: PUSH
16561: LD_VAR 0 2
16565: EQUAL
16566: IFFALSE 16599
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16568: LD_VAR 0 3
16572: PPUSH
16573: LD_INT 13
16575: PUSH
16576: LD_INT 14
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 1
16585: PPUSH
16586: LD_INT 2
16588: PPUSH
16589: CALL_OW 12
16593: ARRAY
16594: PPUSH
16595: CALL_OW 113
16599: GO 16553
16601: POP
16602: POP
// end ;
16603: PPOPN 3
16605: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16606: LD_INT 0
16608: PPUSH
16609: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 255
16619: PUSH
16620: LD_INT 3
16622: EQUAL
16623: PUSH
16624: LD_VAR 0 2
16628: PPUSH
16629: CALL_OW 257
16633: PUSH
16634: LD_INT 4
16636: EQUAL
16637: AND
16638: IFFALSE 16780
// for i in RuScientists do
16640: LD_ADDR_VAR 0 3
16644: PUSH
16645: LD_EXP 34
16649: PUSH
16650: FOR_IN
16651: IFFALSE 16778
// if i = human then
16653: LD_VAR 0 3
16657: PUSH
16658: LD_VAR 0 2
16662: EQUAL
16663: IFFALSE 16776
// if IsOk ( rutp ) then
16665: LD_INT 137
16667: PPUSH
16668: CALL_OW 302
16672: IFFALSE 16745
// begin rnd = rand ( 1 , 2 ) ;
16674: LD_ADDR_VAR 0 4
16678: PUSH
16679: LD_INT 1
16681: PPUSH
16682: LD_INT 2
16684: PPUSH
16685: CALL_OW 12
16689: ST_TO_ADDR
// if rnd = 1 then
16690: LD_VAR 0 4
16694: PUSH
16695: LD_INT 1
16697: EQUAL
16698: IFFALSE 16712
// ComEnterUnit ( vehicle , rutp ) ;
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_INT 137
16707: PPUSH
16708: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_INT 13
16719: PUSH
16720: LD_INT 14
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 1
16729: PPUSH
16730: LD_INT 2
16732: PPUSH
16733: CALL_OW 12
16737: ARRAY
16738: PPUSH
16739: CALL_OW 173
// end else
16743: GO 16776
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 13
16752: PUSH
16753: LD_INT 14
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PPUSH
16763: LD_INT 2
16765: PPUSH
16766: CALL_OW 12
16770: ARRAY
16771: PPUSH
16772: CALL_OW 113
// end ;
16776: GO 16650
16778: POP
16779: POP
// end ;
16780: PPOPN 4
16782: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL 33532 0 1
// end ; end_of_file
16792: PPOPN 1
16794: END
// every 0 0$1 trigger ruAI = 1 do
16795: LD_EXP 41
16799: PUSH
16800: LD_INT 1
16802: EQUAL
16803: IFFALSE 16915
16805: GO 16807
16807: DISABLE
// begin enable ;
16808: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16809: LD_INT 3
16811: PPUSH
16812: LD_INT 6
16814: PPUSH
16815: LD_INT 9
16817: PPUSH
16818: LD_EXP 38
16822: PPUSH
16823: CALL 13197 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16827: LD_INT 3
16829: PPUSH
16830: LD_INT 4
16832: PPUSH
16833: LD_INT 10
16835: PPUSH
16836: LD_EXP 38
16840: PPUSH
16841: CALL 13197 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16845: LD_INT 3
16847: PPUSH
16848: LD_INT 9
16850: PPUSH
16851: CALL 14168 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16855: LD_INT 3
16857: PPUSH
16858: LD_INT 10
16860: PPUSH
16861: CALL 14168 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16865: LD_INT 3
16867: PPUSH
16868: LD_INT 16
16870: PPUSH
16871: LD_INT 9
16873: PPUSH
16874: LD_INT 91
16876: PPUSH
16877: CALL 13588 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16881: LD_INT 3
16883: PPUSH
16884: LD_INT 17
16886: PPUSH
16887: LD_INT 10
16889: PPUSH
16890: LD_INT 47
16892: PUSH
16893: LD_INT 129
16895: PUSH
16896: LD_INT 135
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL 13588 0 4
// IntBazooka ( 3 ) ;
16908: LD_INT 3
16910: PPUSH
16911: CALL 14495 0 1
// end ;
16915: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 , 5 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16916: LD_EXP 39
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: LD_INT 4
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_OWVAR 67
16943: ARRAY
16944: GREATEREQUAL
16945: IFFALSE 17445
16947: GO 16949
16949: DISABLE
16950: LD_INT 0
16952: PPUSH
16953: PPUSH
16954: PPUSH
16955: PPUSH
// begin enable ;
16956: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16957: LD_ADDR_VAR 0 2
16961: PUSH
16962: LD_EXP 39
16966: PUSH
16967: LD_EXP 40
16971: UNION
16972: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16973: LD_ADDR_EXP 39
16977: PUSH
16978: LD_EXP 39
16982: PUSH
16983: LD_VAR 0 2
16987: DIFF
16988: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16989: LD_ADDR_EXP 40
16993: PUSH
16994: LD_EXP 40
16998: PUSH
16999: LD_VAR 0 2
17003: DIFF
17004: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17005: LD_INT 10
17007: PPUSH
17008: CALL_OW 302
17012: IFFALSE 17095
// begin for j in tmp do
17014: LD_ADDR_VAR 0 1
17018: PUSH
17019: LD_VAR 0 2
17023: PUSH
17024: FOR_IN
17025: IFFALSE 17068
// if attackTactic < 2 then
17027: LD_EXP 43
17031: PUSH
17032: LD_INT 2
17034: LESS
17035: IFFALSE 17051
// ComEnterUnit ( j , ruteleprt ) else
17037: LD_VAR 0 1
17041: PPUSH
17042: LD_INT 10
17044: PPUSH
17045: CALL_OW 120
17049: GO 17066
// ComMoveXY ( j , 88 , 69 ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 88
17058: PPUSH
17059: LD_INT 69
17061: PPUSH
17062: CALL_OW 111
17066: GO 17024
17068: POP
17069: POP
// repeat wait ( 0 0$1 ) ;
17070: LD_INT 35
17072: PPUSH
17073: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17077: LD_VAR 0 2
17081: PPUSH
17082: LD_INT 60
17084: PUSH
17085: EMPTY
17086: LIST
17087: PPUSH
17088: CALL_OW 72
17092: NOT
17093: IFFALSE 17070
// end ; repeat wait ( 0 0$1 ) ;
17095: LD_INT 35
17097: PPUSH
17098: CALL_OW 67
// for j in tmp do
17102: LD_ADDR_VAR 0 1
17106: PUSH
17107: LD_VAR 0 2
17111: PUSH
17112: FOR_IN
17113: IFFALSE 17436
// begin if IsDead ( j ) then
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 301
17124: IFFALSE 17142
// tmp := tmp diff j ;
17126: LD_ADDR_VAR 0 2
17130: PUSH
17131: LD_VAR 0 2
17135: PUSH
17136: LD_VAR 0 1
17140: DIFF
17141: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: LD_INT 81
17149: PUSH
17150: LD_INT 3
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: PPUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 74
17171: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17172: LD_ADDR_VAR 0 4
17176: PUSH
17177: LD_INT 81
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: PPUSH
17204: CALL_OW 69
17208: PPUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 74
17218: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 264
17228: PUSH
17229: LD_INT 49
17231: EQUAL
17232: IFFALSE 17368
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
17234: LD_VAR 0 2
17238: PPUSH
17239: LD_INT 3
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 49
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 72
17260: PUSH
17261: LD_INT 1
17263: GREATER
17264: PUSH
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_INT 3
17272: PUSH
17273: LD_INT 34
17275: PUSH
17276: LD_INT 49
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PPUSH
17287: CALL_OW 72
17291: AND
17292: IFFALSE 17342
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_VAR 0 2
17303: PPUSH
17304: LD_INT 3
17306: PUSH
17307: LD_INT 34
17309: PUSH
17310: LD_INT 49
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 72
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 74
17335: PPUSH
17336: CALL_OW 112
17340: GO 17366
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17342: LD_VAR 0 1
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 74
17361: PPUSH
17362: CALL_OW 112
// end else
17366: GO 17434
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_VAR 0 4
17377: PPUSH
17378: CALL_OW 296
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: CALL_OW 296
17397: PUSH
17398: LD_INT 2
17400: PLUS
17401: LESS
17402: IFFALSE 17420
// ComAttackUnit ( j , target2 ) else
17404: LD_VAR 0 1
17408: PPUSH
17409: LD_VAR 0 4
17413: PPUSH
17414: CALL_OW 115
17418: GO 17434
// ComAttackUnit ( j , target1 ) ;
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: CALL_OW 115
// end ; end ;
17434: GO 17112
17436: POP
17437: POP
// until not tmp ;
17438: LD_VAR 0 2
17442: NOT
17443: IFFALSE 17095
// end ;
17445: PPOPN 4
17447: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17448: LD_INT 4
17450: PPUSH
17451: CALL_OW 303
17455: IFFALSE 17470
17457: GO 17459
17459: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17460: LD_INT 3
17462: PPUSH
17463: LD_INT 4
17465: PPUSH
17466: CALL 15147 0 2
17470: END
// every 0 0$1 do
17471: GO 17473
17473: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17474: LD_INT 3
17476: PPUSH
17477: LD_INT 91
17479: PPUSH
17480: LD_INT 3
17482: PPUSH
17483: CALL 12956 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17487: LD_INT 3
17489: PPUSH
17490: LD_INT 47
17492: PPUSH
17493: LD_INT 3
17495: PPUSH
17496: CALL 12956 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17500: LD_INT 3
17502: PPUSH
17503: LD_INT 129
17505: PPUSH
17506: LD_INT 3
17508: PPUSH
17509: CALL 12956 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17513: LD_INT 3
17515: PPUSH
17516: LD_INT 3
17518: PPUSH
17519: LD_INT 3
17521: PPUSH
17522: CALL 12956 0 3
// end ;
17526: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17527: LD_INT 22
17529: PUSH
17530: LD_INT 1
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 21
17539: PUSH
17540: LD_INT 3
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 69
17555: IFFALSE 17624
17557: GO 17559
17559: DISABLE
// begin wait ( 0 0$40 ) ;
17560: LD_INT 1400
17562: PPUSH
17563: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17567: LD_INT 3
17569: PPUSH
17570: LD_INT 21
17572: PPUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 4
17578: PUSH
17579: LD_INT 4
17581: PUSH
17582: LD_INT 5
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: PUSH
17591: LD_OWVAR 67
17595: ARRAY
17596: PPUSH
17597: LD_INT 46
17599: PUSH
17600: LD_INT 45
17602: PUSH
17603: LD_INT 44
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PPUSH
17611: LD_INT 3
17613: PPUSH
17614: LD_INT 3
17616: PPUSH
17617: LD_INT 24
17619: PPUSH
17620: CALL 14348 0 7
// end ;
17624: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17625: LD_EXP 27
17629: PUSH
17630: LD_INT 2
17632: EQUAL
17633: PUSH
17634: LD_INT 21
17636: PPUSH
17637: CALL_OW 255
17641: PUSH
17642: LD_INT 3
17644: EQUAL
17645: AND
17646: PUSH
17647: LD_INT 112
17649: PPUSH
17650: CALL_OW 255
17654: PUSH
17655: LD_INT 3
17657: EQUAL
17658: AND
17659: PUSH
17660: LD_INT 21
17662: PPUSH
17663: CALL_OW 302
17667: AND
17668: PUSH
17669: LD_INT 112
17671: PPUSH
17672: CALL_OW 302
17676: AND
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 21
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 50
17700: PUSH
17701: EMPTY
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 58
17709: PUSH
17710: EMPTY
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: PUSH
17728: LD_INT 18
17730: PPUSH
17731: LD_INT 22
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 70
17759: PUSH
17760: LD_INT 0
17762: EQUAL
17763: DIFF
17764: AND
17765: IFFALSE 17891
17767: GO 17769
17769: DISABLE
// begin enable ;
17770: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17771: LD_INT 3
17773: PPUSH
17774: LD_INT 21
17776: PPUSH
17777: LD_INT 3
17779: PUSH
17780: LD_INT 4
17782: PUSH
17783: LD_INT 4
17785: PUSH
17786: LD_INT 5
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: PUSH
17795: LD_OWVAR 67
17799: ARRAY
17800: PPUSH
17801: LD_INT 46
17803: PUSH
17804: LD_INT 45
17806: PUSH
17807: LD_INT 44
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: PPUSH
17815: LD_INT 3
17817: PPUSH
17818: LD_INT 3
17820: PPUSH
17821: LD_INT 24
17823: PPUSH
17824: CALL 14348 0 7
// if russianTimeLapsers = 0 then
17828: LD_EXP 40
17832: PUSH
17833: LD_INT 0
17835: EQUAL
17836: IFFALSE 17891
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17838: LD_INT 3
17840: PPUSH
17841: LD_INT 112
17843: PPUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: PUSH
17862: LD_OWVAR 67
17866: ARRAY
17867: PPUSH
17868: LD_INT 49
17870: PUSH
17871: LD_INT 49
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 3
17883: PPUSH
17884: LD_INT 24
17886: PPUSH
17887: CALL 14348 0 7
// end ;
17891: END
// every 0 0$1 trigger arabianMines do var i ;
17892: LD_EXP 44
17896: IFFALSE 18017
17898: GO 17900
17900: DISABLE
17901: LD_INT 0
17903: PPUSH
// begin enable ;
17904: ENABLE
// for i in arabianMines do
17905: LD_ADDR_VAR 0 1
17909: PUSH
17910: LD_EXP 44
17914: PUSH
17915: FOR_IN
17916: IFFALSE 18015
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17918: LD_INT 22
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 92
17930: PUSH
17931: LD_VAR 0 1
17935: PUSH
17936: LD_INT 1
17938: ARRAY
17939: PUSH
17940: LD_VAR 0 1
17944: PUSH
17945: LD_INT 2
17947: ARRAY
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PPUSH
17962: CALL_OW 69
17966: IFFALSE 18013
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17968: LD_VAR 0 1
17972: PUSH
17973: LD_INT 1
17975: ARRAY
17976: PPUSH
17977: LD_VAR 0 1
17981: PUSH
17982: LD_INT 2
17984: ARRAY
17985: PPUSH
17986: LD_INT 5
17988: PPUSH
17989: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17993: LD_ADDR_EXP 44
17997: PUSH
17998: LD_EXP 44
18002: PPUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 3
18012: ST_TO_ADDR
// end ; end ;
18013: GO 17915
18015: POP
18016: POP
// end ;
18017: PPOPN 1
18019: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 , 8 ] [ Difficulty ] do
18020: LD_EXP 28
18024: PUSH
18025: LD_INT 4
18027: EQUAL
18028: PUSH
18029: LD_EXP 29
18033: PUSH
18034: LD_INT 6
18036: PUSH
18037: LD_INT 8
18039: PUSH
18040: LD_INT 8
18042: PUSH
18043: LD_INT 8
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: LD_OWVAR 67
18056: ARRAY
18057: EQUAL
18058: AND
18059: IFFALSE 18077
18061: GO 18063
18063: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18064: LD_INT 10
18066: PPUSH
18067: LD_INT 47
18069: PPUSH
18070: LD_INT 82
18072: PPUSH
18073: CALL_OW 243
18077: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18078: LD_EXP 28
18082: PUSH
18083: LD_INT 4
18085: EQUAL
18086: IFFALSE 18108
18088: GO 18090
18090: DISABLE
// begin enable ;
18091: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18092: LD_ADDR_EXP 43
18096: PUSH
18097: LD_INT 1
18099: PPUSH
18100: LD_INT 2
18102: PPUSH
18103: CALL_OW 12
18107: ST_TO_ADDR
// end ; end_of_file
18108: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18109: LD_INT 3
18111: PPUSH
18112: CALL_OW 301
18116: IFFALSE 18305
18118: GO 18120
18120: DISABLE
// begin if sciCounter = 0 then
18121: LD_EXP 35
18125: PUSH
18126: LD_INT 0
18128: EQUAL
18129: IFFALSE 18157
// begin Say ( JMM , D7a-JMM-1 ) ;
18131: LD_EXP 1
18135: PPUSH
18136: LD_STRING D7a-JMM-1
18138: PPUSH
18139: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18143: LD_EXP 22
18147: PPUSH
18148: LD_STRING D7a-Pow-1
18150: PPUSH
18151: CALL_OW 94
// end else
18155: GO 18301
// if sciCounter < 6 then
18157: LD_EXP 35
18161: PUSH
18162: LD_INT 6
18164: LESS
18165: IFFALSE 18193
// begin Say ( JMM , D7b-JMM-1 ) ;
18167: LD_EXP 1
18171: PPUSH
18172: LD_STRING D7b-JMM-1
18174: PPUSH
18175: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18179: LD_EXP 22
18183: PPUSH
18184: LD_STRING D7b-Pow-1
18186: PPUSH
18187: CALL_OW 94
// end else
18191: GO 18301
// begin Say ( JMM , D7c-JMM-1 ) ;
18193: LD_EXP 1
18197: PPUSH
18198: LD_STRING D7c-JMM-1
18200: PPUSH
18201: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18205: LD_EXP 22
18209: PPUSH
18210: LD_STRING D7c-Pow-1
18212: PPUSH
18213: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18217: LD_EXP 1
18221: PPUSH
18222: LD_STRING D7d-JMM-1
18224: PPUSH
18225: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18229: LD_EXP 22
18233: PPUSH
18234: LD_STRING D7d-Pow-1
18236: PPUSH
18237: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18241: LD_EXP 1
18245: PPUSH
18246: LD_STRING D7d-JMM-2
18248: PPUSH
18249: CALL_OW 88
// if askSiberite = 1 then
18253: LD_EXP 32
18257: PUSH
18258: LD_INT 1
18260: EQUAL
18261: IFFALSE 18277
// Say ( JMM , D7d-JMM-2a ) else
18263: LD_EXP 1
18267: PPUSH
18268: LD_STRING D7d-JMM-2a
18270: PPUSH
18271: CALL_OW 88
18275: GO 18289
// SayRadio ( Powell , D7d-Pow-2 ) ;
18277: LD_EXP 22
18281: PPUSH
18282: LD_STRING D7d-Pow-2
18284: PPUSH
18285: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18289: LD_EXP 22
18293: PPUSH
18294: LD_STRING D7d-Pow-2a
18296: PPUSH
18297: CALL_OW 94
// end ; FinishMission ;
18301: CALL 18306 0 0
// end ;
18305: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18306: LD_INT 0
18308: PPUSH
18309: PPUSH
18310: PPUSH
18311: PPUSH
// m1 := false ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// m2 := false ;
18320: LD_ADDR_VAR 0 3
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// m3 := false ;
18328: LD_ADDR_VAR 0 4
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// if not westPathUsed then
18336: LD_EXP 49
18340: NOT
18341: IFFALSE 18350
// SetAchievement ( ACH_PATH ) ;
18343: LD_STRING ACH_PATH
18345: PPUSH
18346: CALL_OW 543
// if not rocketBuilded then
18350: LD_EXP 51
18354: NOT
18355: IFFALSE 18371
// begin wait ( 3 ) ;
18357: LD_INT 3
18359: PPUSH
18360: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18364: LD_STRING ACH_ROCKET
18366: PPUSH
18367: CALL_OW 543
// end ; if tick <= 40 40$00 then
18371: LD_OWVAR 1
18375: PUSH
18376: LD_INT 84000
18378: LESSEQUAL
18379: IFFALSE 18395
// begin wait ( 3 ) ;
18381: LD_INT 3
18383: PPUSH
18384: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18388: LD_STRING ACH_ASPEED_12
18390: PPUSH
18391: CALL_OW 543
// end ; if teleportExplored = 1 then
18395: LD_EXP 33
18399: PUSH
18400: LD_INT 1
18402: EQUAL
18403: IFFALSE 18425
// begin m1 := true ;
18405: LD_ADDR_VAR 0 2
18409: PUSH
18410: LD_INT 1
18412: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18413: LD_STRING Teleport
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL_OW 101
// end else
18423: GO 18436
// AddMedal ( Teleport , - 1 ) ;
18425: LD_STRING Teleport
18427: PPUSH
18428: LD_INT 1
18430: NEG
18431: PPUSH
18432: CALL_OW 101
// if sciCounter > 2 then
18436: LD_EXP 35
18440: PUSH
18441: LD_INT 2
18443: GREATER
18444: IFFALSE 18466
// begin m2 := true ;
18446: LD_ADDR_VAR 0 3
18450: PUSH
18451: LD_INT 1
18453: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18454: LD_STRING Materials
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 101
// end else
18464: GO 18477
// AddMedal ( Materials , - 1 ) ;
18466: LD_STRING Materials
18468: PPUSH
18469: LD_INT 1
18471: NEG
18472: PPUSH
18473: CALL_OW 101
// if sciCounter >= 6 then
18477: LD_EXP 35
18481: PUSH
18482: LD_INT 6
18484: GREATEREQUAL
18485: IFFALSE 18517
// begin m3 := true ;
18487: LD_ADDR_VAR 0 4
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18495: LD_STRING Scientists
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18505: LD_INT 1
18507: PPUSH
18508: LD_STRING 12_SciDed_1
18510: PPUSH
18511: CALL_OW 39
// end else
18515: GO 18538
// begin AddMedal ( Scientists , - 1 ) ;
18517: LD_STRING Scientists
18519: PPUSH
18520: LD_INT 1
18522: NEG
18523: PPUSH
18524: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18528: LD_INT 0
18530: PPUSH
18531: LD_STRING 12_SciDed_1
18533: PPUSH
18534: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18538: LD_EXP 31
18542: PPUSH
18543: LD_STRING 12_MainDepositFake_1
18545: PPUSH
18546: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18550: LD_VAR 0 2
18554: PUSH
18555: LD_VAR 0 3
18559: AND
18560: PUSH
18561: LD_VAR 0 4
18565: AND
18566: PUSH
18567: LD_OWVAR 67
18571: PUSH
18572: LD_INT 3
18574: GREATEREQUAL
18575: AND
18576: IFFALSE 18588
// SetAchievementEX ( ACH_AMER , 12 ) ;
18578: LD_STRING ACH_AMER
18580: PPUSH
18581: LD_INT 12
18583: PPUSH
18584: CALL_OW 564
// GiveMedals ( MAIN ) ;
18588: LD_STRING MAIN
18590: PPUSH
18591: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18595: LD_INT 22
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 25
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 25
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 25
18650: PUSH
18651: LD_INT 4
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 5
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 8
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: PPUSH
18692: CALL_OW 69
18696: PPUSH
18697: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18701: LD_EXP 1
18705: PPUSH
18706: LD_EXP 46
18710: PUSH
18711: LD_STRING JMM
18713: STR
18714: PPUSH
18715: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18719: LD_EXP 7
18723: PPUSH
18724: LD_EXP 46
18728: PUSH
18729: LD_STRING Brown
18731: STR
18732: PPUSH
18733: CALL 12300 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18737: LD_EXP 3
18741: PPUSH
18742: LD_EXP 46
18746: PUSH
18747: LD_STRING Donaldson
18749: STR
18750: PPUSH
18751: CALL 12300 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18755: LD_EXP 4
18759: PPUSH
18760: LD_EXP 46
18764: PUSH
18765: LD_STRING Bobby
18767: STR
18768: PPUSH
18769: CALL 12300 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18773: LD_EXP 5
18777: PPUSH
18778: LD_EXP 46
18782: PUSH
18783: LD_STRING Cyrus
18785: STR
18786: PPUSH
18787: CALL 12300 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18791: LD_EXP 2
18795: PPUSH
18796: LD_EXP 46
18800: PUSH
18801: LD_STRING Lisa
18803: STR
18804: PPUSH
18805: CALL 12300 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18809: LD_EXP 12
18813: PPUSH
18814: LD_EXP 46
18818: PUSH
18819: LD_STRING Frank
18821: STR
18822: PPUSH
18823: CALL 12300 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18827: LD_EXP 13
18831: PPUSH
18832: LD_EXP 46
18836: PUSH
18837: LD_STRING Kikuchi
18839: STR
18840: PPUSH
18841: CALL 12300 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18845: LD_EXP 9
18849: PPUSH
18850: LD_EXP 46
18854: PUSH
18855: LD_STRING Houten
18857: STR
18858: PPUSH
18859: CALL 12300 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18863: LD_EXP 11
18867: PPUSH
18868: LD_EXP 46
18872: PUSH
18873: LD_STRING Gary
18875: STR
18876: PPUSH
18877: CALL 12300 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18881: LD_EXP 10
18885: PPUSH
18886: LD_EXP 46
18890: PUSH
18891: LD_STRING Cornell
18893: STR
18894: PPUSH
18895: CALL 12300 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18899: LD_EXP 6
18903: PPUSH
18904: LD_EXP 46
18908: PUSH
18909: LD_STRING Denis
18911: STR
18912: PPUSH
18913: CALL 12300 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18917: LD_EXP 8
18921: PPUSH
18922: LD_EXP 46
18926: PUSH
18927: LD_STRING Gladstone
18929: STR
18930: PPUSH
18931: CALL 12300 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18935: LD_INT 22
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 23
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 21
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 25
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 25
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 25
19000: PUSH
19001: LD_INT 4
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 25
19010: PUSH
19011: LD_INT 5
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 25
19020: PUSH
19021: LD_INT 8
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: PUSH
19048: LD_EXP 1
19052: PUSH
19053: LD_EXP 7
19057: PUSH
19058: LD_EXP 3
19062: PUSH
19063: LD_EXP 4
19067: PUSH
19068: LD_EXP 5
19072: PUSH
19073: LD_EXP 2
19077: PUSH
19078: LD_EXP 12
19082: PUSH
19083: LD_EXP 8
19087: PUSH
19088: LD_EXP 13
19092: PUSH
19093: LD_EXP 6
19097: PUSH
19098: LD_EXP 9
19102: PUSH
19103: LD_EXP 11
19107: PUSH
19108: LD_EXP 10
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: DIFF
19128: PPUSH
19129: LD_STRING 12_other_survivors
19131: PPUSH
19132: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19136: LD_INT 22
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 23
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: LD_INT 25
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 25
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 25
19201: PUSH
19202: LD_INT 4
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 25
19211: PUSH
19212: LD_INT 5
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 25
19221: PUSH
19222: LD_INT 8
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: PPUSH
19244: CALL_OW 69
19248: PPUSH
19249: LD_STRING 12_kurt_squad
19251: PPUSH
19252: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19256: LD_EXP 14
19260: PPUSH
19261: LD_STRING 12_others
19263: PPUSH
19264: CALL_OW 38
// YouWin ;
19268: CALL_OW 103
// end ; end_of_file
19272: LD_VAR 0 1
19276: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19277: LD_EXP 1
19281: PPUSH
19282: CALL_OW 301
19286: IFFALSE 19298
19288: GO 19290
19290: DISABLE
// YouLost ( JMM ) ; end_of_file
19291: LD_STRING JMM
19293: PPUSH
19294: CALL_OW 104
19298: END
// every 0 0$01 do
19299: GO 19301
19301: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19302: LD_INT 1050
19304: PPUSH
19305: CALL_OW 67
// if cratesSpawned < 6 then
19309: LD_EXP 45
19313: PUSH
19314: LD_INT 6
19316: LESS
19317: IFFALSE 19354
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19319: LD_INT 3
19321: PPUSH
19322: LD_INT 5
19324: PPUSH
19325: CALL_OW 12
19329: PPUSH
19330: LD_INT 21
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19340: LD_ADDR_EXP 45
19344: PUSH
19345: LD_EXP 45
19349: PUSH
19350: LD_INT 1
19352: PLUS
19353: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19354: LD_EXP 45
19358: PUSH
19359: LD_INT 6
19361: GREATEREQUAL
19362: PUSH
19363: LD_EXP 45
19367: PUSH
19368: LD_INT 12
19370: LESS
19371: AND
19372: IFFALSE 19416
// begin wait ( 0 0$50 ) ;
19374: LD_INT 1750
19376: PPUSH
19377: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19381: LD_INT 3
19383: PPUSH
19384: LD_INT 5
19386: PPUSH
19387: CALL_OW 12
19391: PPUSH
19392: LD_INT 21
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19402: LD_ADDR_EXP 45
19406: PUSH
19407: LD_EXP 45
19411: PUSH
19412: LD_INT 1
19414: PLUS
19415: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19416: LD_EXP 45
19420: PUSH
19421: LD_INT 12
19423: GREATEREQUAL
19424: IFFALSE 19468
// begin wait ( 1 1$40 ) ;
19426: LD_INT 3500
19428: PPUSH
19429: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19433: LD_INT 3
19435: PPUSH
19436: LD_INT 5
19438: PPUSH
19439: CALL_OW 12
19443: PPUSH
19444: LD_INT 21
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19454: LD_ADDR_EXP 45
19458: PUSH
19459: LD_EXP 45
19463: PUSH
19464: LD_INT 1
19466: PLUS
19467: ST_TO_ADDR
// end ; until false ;
19468: LD_INT 0
19470: IFFALSE 19302
// end ; end_of_file
19472: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19473: LD_INT 0
19475: PPUSH
// ar_miner := 81 ;
19476: LD_ADDR_EXP 59
19480: PUSH
19481: LD_INT 81
19483: ST_TO_ADDR
// ar_crane := 88 ;
19484: LD_ADDR_EXP 58
19488: PUSH
19489: LD_INT 88
19491: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19492: LD_ADDR_EXP 53
19496: PUSH
19497: LD_INT 89
19499: ST_TO_ADDR
// us_hack := 99 ;
19500: LD_ADDR_EXP 54
19504: PUSH
19505: LD_INT 99
19507: ST_TO_ADDR
// us_artillery := 97 ;
19508: LD_ADDR_EXP 55
19512: PUSH
19513: LD_INT 97
19515: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19516: LD_ADDR_EXP 56
19520: PUSH
19521: LD_INT 91
19523: ST_TO_ADDR
// ar_mortar := 92 ;
19524: LD_ADDR_EXP 57
19528: PUSH
19529: LD_INT 92
19531: ST_TO_ADDR
// ru_radar := 98 ;
19532: LD_ADDR_EXP 52
19536: PUSH
19537: LD_INT 98
19539: ST_TO_ADDR
// tech_Artillery := 80 ;
19540: LD_ADDR_EXP 60
19544: PUSH
19545: LD_INT 80
19547: ST_TO_ADDR
// tech_RadMat := 81 ;
19548: LD_ADDR_EXP 61
19552: PUSH
19553: LD_INT 81
19555: ST_TO_ADDR
// tech_BasicTools := 82 ;
19556: LD_ADDR_EXP 62
19560: PUSH
19561: LD_INT 82
19563: ST_TO_ADDR
// tech_Cargo := 83 ;
19564: LD_ADDR_EXP 63
19568: PUSH
19569: LD_INT 83
19571: ST_TO_ADDR
// tech_Track := 84 ;
19572: LD_ADDR_EXP 64
19576: PUSH
19577: LD_INT 84
19579: ST_TO_ADDR
// tech_Crane := 85 ;
19580: LD_ADDR_EXP 65
19584: PUSH
19585: LD_INT 85
19587: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19588: LD_ADDR_EXP 66
19592: PUSH
19593: LD_INT 86
19595: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19596: LD_ADDR_EXP 67
19600: PUSH
19601: LD_INT 87
19603: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19604: LD_ADDR_EXP 68
19608: PUSH
19609: LD_INT 88
19611: ST_TO_ADDR
// class_mastodont := 31 ;
19612: LD_ADDR_EXP 69
19616: PUSH
19617: LD_INT 31
19619: ST_TO_ADDR
// class_horse := 21 ;
19620: LD_ADDR_EXP 70
19624: PUSH
19625: LD_INT 21
19627: ST_TO_ADDR
// end ;
19628: LD_VAR 0 1
19632: RET
// every 1 do
19633: GO 19635
19635: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19636: CALL 19473 0 0
19640: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19641: LD_INT 0
19643: PPUSH
// if p2 = 100 then
19644: LD_VAR 0 2
19648: PUSH
19649: LD_INT 100
19651: EQUAL
19652: IFFALSE 20655
// begin if not StreamModeActive then
19654: LD_EXP 71
19658: NOT
19659: IFFALSE 19669
// StreamModeActive := true ;
19661: LD_ADDR_EXP 71
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 0 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 0
19676: EQUAL
19677: IFFALSE 19683
// InitStreamMode ;
19679: CALL 20815 0 0
// if p3 = 1 then
19683: LD_VAR 0 3
19687: PUSH
19688: LD_INT 1
19690: EQUAL
19691: IFFALSE 19701
// sRocket := true ;
19693: LD_ADDR_EXP 76
19697: PUSH
19698: LD_INT 1
19700: ST_TO_ADDR
// if p3 = 2 then
19701: LD_VAR 0 3
19705: PUSH
19706: LD_INT 2
19708: EQUAL
19709: IFFALSE 19719
// sSpeed := true ;
19711: LD_ADDR_EXP 75
19715: PUSH
19716: LD_INT 1
19718: ST_TO_ADDR
// if p3 = 3 then
19719: LD_VAR 0 3
19723: PUSH
19724: LD_INT 3
19726: EQUAL
19727: IFFALSE 19737
// sEngine := true ;
19729: LD_ADDR_EXP 77
19733: PUSH
19734: LD_INT 1
19736: ST_TO_ADDR
// if p3 = 4 then
19737: LD_VAR 0 3
19741: PUSH
19742: LD_INT 4
19744: EQUAL
19745: IFFALSE 19755
// sSpec := true ;
19747: LD_ADDR_EXP 74
19751: PUSH
19752: LD_INT 1
19754: ST_TO_ADDR
// if p3 = 5 then
19755: LD_VAR 0 3
19759: PUSH
19760: LD_INT 5
19762: EQUAL
19763: IFFALSE 19773
// sLevel := true ;
19765: LD_ADDR_EXP 78
19769: PUSH
19770: LD_INT 1
19772: ST_TO_ADDR
// if p3 = 6 then
19773: LD_VAR 0 3
19777: PUSH
19778: LD_INT 6
19780: EQUAL
19781: IFFALSE 19791
// sArmoury := true ;
19783: LD_ADDR_EXP 79
19787: PUSH
19788: LD_INT 1
19790: ST_TO_ADDR
// if p3 = 7 then
19791: LD_VAR 0 3
19795: PUSH
19796: LD_INT 7
19798: EQUAL
19799: IFFALSE 19809
// sRadar := true ;
19801: LD_ADDR_EXP 80
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// if p3 = 8 then
19809: LD_VAR 0 3
19813: PUSH
19814: LD_INT 8
19816: EQUAL
19817: IFFALSE 19827
// sBunker := true ;
19819: LD_ADDR_EXP 81
19823: PUSH
19824: LD_INT 1
19826: ST_TO_ADDR
// if p3 = 9 then
19827: LD_VAR 0 3
19831: PUSH
19832: LD_INT 9
19834: EQUAL
19835: IFFALSE 19845
// sHack := true ;
19837: LD_ADDR_EXP 82
19841: PUSH
19842: LD_INT 1
19844: ST_TO_ADDR
// if p3 = 10 then
19845: LD_VAR 0 3
19849: PUSH
19850: LD_INT 10
19852: EQUAL
19853: IFFALSE 19863
// sFire := true ;
19855: LD_ADDR_EXP 83
19859: PUSH
19860: LD_INT 1
19862: ST_TO_ADDR
// if p3 = 11 then
19863: LD_VAR 0 3
19867: PUSH
19868: LD_INT 11
19870: EQUAL
19871: IFFALSE 19881
// sRefresh := true ;
19873: LD_ADDR_EXP 84
19877: PUSH
19878: LD_INT 1
19880: ST_TO_ADDR
// if p3 = 12 then
19881: LD_VAR 0 3
19885: PUSH
19886: LD_INT 12
19888: EQUAL
19889: IFFALSE 19899
// sExp := true ;
19891: LD_ADDR_EXP 85
19895: PUSH
19896: LD_INT 1
19898: ST_TO_ADDR
// if p3 = 13 then
19899: LD_VAR 0 3
19903: PUSH
19904: LD_INT 13
19906: EQUAL
19907: IFFALSE 19917
// sDepot := true ;
19909: LD_ADDR_EXP 86
19913: PUSH
19914: LD_INT 1
19916: ST_TO_ADDR
// if p3 = 14 then
19917: LD_VAR 0 3
19921: PUSH
19922: LD_INT 14
19924: EQUAL
19925: IFFALSE 19935
// sFlag := true ;
19927: LD_ADDR_EXP 87
19931: PUSH
19932: LD_INT 1
19934: ST_TO_ADDR
// if p3 = 15 then
19935: LD_VAR 0 3
19939: PUSH
19940: LD_INT 15
19942: EQUAL
19943: IFFALSE 19953
// sKamikadze := true ;
19945: LD_ADDR_EXP 95
19949: PUSH
19950: LD_INT 1
19952: ST_TO_ADDR
// if p3 = 16 then
19953: LD_VAR 0 3
19957: PUSH
19958: LD_INT 16
19960: EQUAL
19961: IFFALSE 19971
// sTroll := true ;
19963: LD_ADDR_EXP 96
19967: PUSH
19968: LD_INT 1
19970: ST_TO_ADDR
// if p3 = 17 then
19971: LD_VAR 0 3
19975: PUSH
19976: LD_INT 17
19978: EQUAL
19979: IFFALSE 19989
// sSlow := true ;
19981: LD_ADDR_EXP 97
19985: PUSH
19986: LD_INT 1
19988: ST_TO_ADDR
// if p3 = 18 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 18
19996: EQUAL
19997: IFFALSE 20007
// sLack := true ;
19999: LD_ADDR_EXP 98
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// if p3 = 19 then
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 19
20014: EQUAL
20015: IFFALSE 20025
// sTank := true ;
20017: LD_ADDR_EXP 100
20021: PUSH
20022: LD_INT 1
20024: ST_TO_ADDR
// if p3 = 20 then
20025: LD_VAR 0 3
20029: PUSH
20030: LD_INT 20
20032: EQUAL
20033: IFFALSE 20043
// sRemote := true ;
20035: LD_ADDR_EXP 101
20039: PUSH
20040: LD_INT 1
20042: ST_TO_ADDR
// if p3 = 21 then
20043: LD_VAR 0 3
20047: PUSH
20048: LD_INT 21
20050: EQUAL
20051: IFFALSE 20061
// sPowell := true ;
20053: LD_ADDR_EXP 102
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// if p3 = 22 then
20061: LD_VAR 0 3
20065: PUSH
20066: LD_INT 22
20068: EQUAL
20069: IFFALSE 20079
// sTeleport := true ;
20071: LD_ADDR_EXP 105
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// if p3 = 23 then
20079: LD_VAR 0 3
20083: PUSH
20084: LD_INT 23
20086: EQUAL
20087: IFFALSE 20097
// sOilTower := true ;
20089: LD_ADDR_EXP 107
20093: PUSH
20094: LD_INT 1
20096: ST_TO_ADDR
// if p3 = 24 then
20097: LD_VAR 0 3
20101: PUSH
20102: LD_INT 24
20104: EQUAL
20105: IFFALSE 20115
// sShovel := true ;
20107: LD_ADDR_EXP 108
20111: PUSH
20112: LD_INT 1
20114: ST_TO_ADDR
// if p3 = 25 then
20115: LD_VAR 0 3
20119: PUSH
20120: LD_INT 25
20122: EQUAL
20123: IFFALSE 20133
// sSheik := true ;
20125: LD_ADDR_EXP 109
20129: PUSH
20130: LD_INT 1
20132: ST_TO_ADDR
// if p3 = 26 then
20133: LD_VAR 0 3
20137: PUSH
20138: LD_INT 26
20140: EQUAL
20141: IFFALSE 20151
// sEarthquake := true ;
20143: LD_ADDR_EXP 111
20147: PUSH
20148: LD_INT 1
20150: ST_TO_ADDR
// if p3 = 27 then
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 27
20158: EQUAL
20159: IFFALSE 20169
// sAI := true ;
20161: LD_ADDR_EXP 112
20165: PUSH
20166: LD_INT 1
20168: ST_TO_ADDR
// if p3 = 28 then
20169: LD_VAR 0 3
20173: PUSH
20174: LD_INT 28
20176: EQUAL
20177: IFFALSE 20187
// sCargo := true ;
20179: LD_ADDR_EXP 115
20183: PUSH
20184: LD_INT 1
20186: ST_TO_ADDR
// if p3 = 29 then
20187: LD_VAR 0 3
20191: PUSH
20192: LD_INT 29
20194: EQUAL
20195: IFFALSE 20205
// sDLaser := true ;
20197: LD_ADDR_EXP 116
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// if p3 = 30 then
20205: LD_VAR 0 3
20209: PUSH
20210: LD_INT 30
20212: EQUAL
20213: IFFALSE 20223
// sExchange := true ;
20215: LD_ADDR_EXP 117
20219: PUSH
20220: LD_INT 1
20222: ST_TO_ADDR
// if p3 = 31 then
20223: LD_VAR 0 3
20227: PUSH
20228: LD_INT 31
20230: EQUAL
20231: IFFALSE 20241
// sFac := true ;
20233: LD_ADDR_EXP 118
20237: PUSH
20238: LD_INT 1
20240: ST_TO_ADDR
// if p3 = 32 then
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 32
20248: EQUAL
20249: IFFALSE 20259
// sPower := true ;
20251: LD_ADDR_EXP 119
20255: PUSH
20256: LD_INT 1
20258: ST_TO_ADDR
// if p3 = 33 then
20259: LD_VAR 0 3
20263: PUSH
20264: LD_INT 33
20266: EQUAL
20267: IFFALSE 20277
// sRandom := true ;
20269: LD_ADDR_EXP 120
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if p3 = 34 then
20277: LD_VAR 0 3
20281: PUSH
20282: LD_INT 34
20284: EQUAL
20285: IFFALSE 20295
// sShield := true ;
20287: LD_ADDR_EXP 121
20291: PUSH
20292: LD_INT 1
20294: ST_TO_ADDR
// if p3 = 35 then
20295: LD_VAR 0 3
20299: PUSH
20300: LD_INT 35
20302: EQUAL
20303: IFFALSE 20313
// sTime := true ;
20305: LD_ADDR_EXP 122
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// if p3 = 36 then
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 36
20320: EQUAL
20321: IFFALSE 20331
// sTools := true ;
20323: LD_ADDR_EXP 123
20327: PUSH
20328: LD_INT 1
20330: ST_TO_ADDR
// if p3 = 101 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 101
20338: EQUAL
20339: IFFALSE 20349
// sSold := true ;
20341: LD_ADDR_EXP 88
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 102 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 102
20356: EQUAL
20357: IFFALSE 20367
// sDiff := true ;
20359: LD_ADDR_EXP 89
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 103 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 103
20374: EQUAL
20375: IFFALSE 20385
// sFog := true ;
20377: LD_ADDR_EXP 92
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 104 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 104
20392: EQUAL
20393: IFFALSE 20403
// sReset := true ;
20395: LD_ADDR_EXP 93
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 105 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 105
20410: EQUAL
20411: IFFALSE 20421
// sSun := true ;
20413: LD_ADDR_EXP 94
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 106 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 106
20428: EQUAL
20429: IFFALSE 20439
// sTiger := true ;
20431: LD_ADDR_EXP 90
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 107 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 107
20446: EQUAL
20447: IFFALSE 20457
// sBomb := true ;
20449: LD_ADDR_EXP 91
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 108 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 108
20464: EQUAL
20465: IFFALSE 20475
// sWound := true ;
20467: LD_ADDR_EXP 99
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 109 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 109
20482: EQUAL
20483: IFFALSE 20493
// sBetray := true ;
20485: LD_ADDR_EXP 103
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 110 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 110
20500: EQUAL
20501: IFFALSE 20511
// sContamin := true ;
20503: LD_ADDR_EXP 104
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 111 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 111
20518: EQUAL
20519: IFFALSE 20529
// sOil := true ;
20521: LD_ADDR_EXP 106
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 112 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 112
20536: EQUAL
20537: IFFALSE 20547
// sStu := true ;
20539: LD_ADDR_EXP 110
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 113 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 113
20554: EQUAL
20555: IFFALSE 20565
// sBazooka := true ;
20557: LD_ADDR_EXP 113
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 114 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 114
20572: EQUAL
20573: IFFALSE 20583
// sMortar := true ;
20575: LD_ADDR_EXP 114
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 115 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 115
20590: EQUAL
20591: IFFALSE 20601
// sRanger := true ;
20593: LD_ADDR_EXP 124
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 116 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 116
20608: EQUAL
20609: IFFALSE 20619
// sComputer := true ;
20611: LD_ADDR_EXP 125
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 117 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 117
20626: EQUAL
20627: IFFALSE 20637
// s30 := true ;
20629: LD_ADDR_EXP 126
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 118 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 118
20644: EQUAL
20645: IFFALSE 20655
// s60 := true ;
20647: LD_ADDR_EXP 127
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// end ; if p2 = 101 then
20655: LD_VAR 0 2
20659: PUSH
20660: LD_INT 101
20662: EQUAL
20663: IFFALSE 20791
// begin case p3 of 1 :
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 1
20672: DOUBLE
20673: EQUAL
20674: IFTRUE 20678
20676: GO 20685
20678: POP
// hHackUnlimitedResources ; 2 :
20679: CALL 32387 0 0
20683: GO 20791
20685: LD_INT 2
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20700
20693: POP
// hHackSetLevel10 ; 3 :
20694: CALL 32520 0 0
20698: GO 20791
20700: LD_INT 3
20702: DOUBLE
20703: EQUAL
20704: IFTRUE 20708
20706: GO 20715
20708: POP
// hHackSetLevel10YourUnits ; 4 :
20709: CALL 32605 0 0
20713: GO 20791
20715: LD_INT 4
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20730
20723: POP
// hHackInvincible ; 5 :
20724: CALL 33053 0 0
20728: GO 20791
20730: LD_INT 5
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20745
20738: POP
// hHackInvisible ; 6 :
20739: CALL 33164 0 0
20743: GO 20791
20745: LD_INT 6
20747: DOUBLE
20748: EQUAL
20749: IFTRUE 20753
20751: GO 20760
20753: POP
// hHackChangeYourSide ; 7 :
20754: CALL 33221 0 0
20758: GO 20791
20760: LD_INT 7
20762: DOUBLE
20763: EQUAL
20764: IFTRUE 20768
20766: GO 20775
20768: POP
// hHackChangeUnitSide ; 8 :
20769: CALL 33263 0 0
20773: GO 20791
20775: LD_INT 8
20777: DOUBLE
20778: EQUAL
20779: IFTRUE 20783
20781: GO 20790
20783: POP
// hHackFog ; end ;
20784: CALL 33364 0 0
20788: GO 20791
20790: POP
// end ; end ;
20791: LD_VAR 0 7
20795: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20796: GO 20798
20798: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20799: LD_STRING initStreamRollete();
20801: PPUSH
20802: CALL_OW 559
// InitStreamMode ;
20806: CALL 20815 0 0
// DefineStreamItems ( ) ;
20810: CALL 21279 0 0
// end ;
20814: END
// function InitStreamMode ; begin
20815: LD_INT 0
20817: PPUSH
// streamModeActive := false ;
20818: LD_ADDR_EXP 71
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// normalCounter := 36 ;
20826: LD_ADDR_EXP 72
20830: PUSH
20831: LD_INT 36
20833: ST_TO_ADDR
// hardcoreCounter := 16 ;
20834: LD_ADDR_EXP 73
20838: PUSH
20839: LD_INT 16
20841: ST_TO_ADDR
// sRocket := false ;
20842: LD_ADDR_EXP 76
20846: PUSH
20847: LD_INT 0
20849: ST_TO_ADDR
// sSpeed := false ;
20850: LD_ADDR_EXP 75
20854: PUSH
20855: LD_INT 0
20857: ST_TO_ADDR
// sEngine := false ;
20858: LD_ADDR_EXP 77
20862: PUSH
20863: LD_INT 0
20865: ST_TO_ADDR
// sSpec := false ;
20866: LD_ADDR_EXP 74
20870: PUSH
20871: LD_INT 0
20873: ST_TO_ADDR
// sLevel := false ;
20874: LD_ADDR_EXP 78
20878: PUSH
20879: LD_INT 0
20881: ST_TO_ADDR
// sArmoury := false ;
20882: LD_ADDR_EXP 79
20886: PUSH
20887: LD_INT 0
20889: ST_TO_ADDR
// sRadar := false ;
20890: LD_ADDR_EXP 80
20894: PUSH
20895: LD_INT 0
20897: ST_TO_ADDR
// sBunker := false ;
20898: LD_ADDR_EXP 81
20902: PUSH
20903: LD_INT 0
20905: ST_TO_ADDR
// sHack := false ;
20906: LD_ADDR_EXP 82
20910: PUSH
20911: LD_INT 0
20913: ST_TO_ADDR
// sFire := false ;
20914: LD_ADDR_EXP 83
20918: PUSH
20919: LD_INT 0
20921: ST_TO_ADDR
// sRefresh := false ;
20922: LD_ADDR_EXP 84
20926: PUSH
20927: LD_INT 0
20929: ST_TO_ADDR
// sExp := false ;
20930: LD_ADDR_EXP 85
20934: PUSH
20935: LD_INT 0
20937: ST_TO_ADDR
// sDepot := false ;
20938: LD_ADDR_EXP 86
20942: PUSH
20943: LD_INT 0
20945: ST_TO_ADDR
// sFlag := false ;
20946: LD_ADDR_EXP 87
20950: PUSH
20951: LD_INT 0
20953: ST_TO_ADDR
// sKamikadze := false ;
20954: LD_ADDR_EXP 95
20958: PUSH
20959: LD_INT 0
20961: ST_TO_ADDR
// sTroll := false ;
20962: LD_ADDR_EXP 96
20966: PUSH
20967: LD_INT 0
20969: ST_TO_ADDR
// sSlow := false ;
20970: LD_ADDR_EXP 97
20974: PUSH
20975: LD_INT 0
20977: ST_TO_ADDR
// sLack := false ;
20978: LD_ADDR_EXP 98
20982: PUSH
20983: LD_INT 0
20985: ST_TO_ADDR
// sTank := false ;
20986: LD_ADDR_EXP 100
20990: PUSH
20991: LD_INT 0
20993: ST_TO_ADDR
// sRemote := false ;
20994: LD_ADDR_EXP 101
20998: PUSH
20999: LD_INT 0
21001: ST_TO_ADDR
// sPowell := false ;
21002: LD_ADDR_EXP 102
21006: PUSH
21007: LD_INT 0
21009: ST_TO_ADDR
// sTeleport := false ;
21010: LD_ADDR_EXP 105
21014: PUSH
21015: LD_INT 0
21017: ST_TO_ADDR
// sOilTower := false ;
21018: LD_ADDR_EXP 107
21022: PUSH
21023: LD_INT 0
21025: ST_TO_ADDR
// sShovel := false ;
21026: LD_ADDR_EXP 108
21030: PUSH
21031: LD_INT 0
21033: ST_TO_ADDR
// sSheik := false ;
21034: LD_ADDR_EXP 109
21038: PUSH
21039: LD_INT 0
21041: ST_TO_ADDR
// sEarthquake := false ;
21042: LD_ADDR_EXP 111
21046: PUSH
21047: LD_INT 0
21049: ST_TO_ADDR
// sAI := false ;
21050: LD_ADDR_EXP 112
21054: PUSH
21055: LD_INT 0
21057: ST_TO_ADDR
// sCargo := false ;
21058: LD_ADDR_EXP 115
21062: PUSH
21063: LD_INT 0
21065: ST_TO_ADDR
// sDLaser := false ;
21066: LD_ADDR_EXP 116
21070: PUSH
21071: LD_INT 0
21073: ST_TO_ADDR
// sExchange := false ;
21074: LD_ADDR_EXP 117
21078: PUSH
21079: LD_INT 0
21081: ST_TO_ADDR
// sFac := false ;
21082: LD_ADDR_EXP 118
21086: PUSH
21087: LD_INT 0
21089: ST_TO_ADDR
// sPower := false ;
21090: LD_ADDR_EXP 119
21094: PUSH
21095: LD_INT 0
21097: ST_TO_ADDR
// sRandom := false ;
21098: LD_ADDR_EXP 120
21102: PUSH
21103: LD_INT 0
21105: ST_TO_ADDR
// sShield := false ;
21106: LD_ADDR_EXP 121
21110: PUSH
21111: LD_INT 0
21113: ST_TO_ADDR
// sTime := false ;
21114: LD_ADDR_EXP 122
21118: PUSH
21119: LD_INT 0
21121: ST_TO_ADDR
// sTools := false ;
21122: LD_ADDR_EXP 123
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// sSold := false ;
21130: LD_ADDR_EXP 88
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// sDiff := false ;
21138: LD_ADDR_EXP 89
21142: PUSH
21143: LD_INT 0
21145: ST_TO_ADDR
// sFog := false ;
21146: LD_ADDR_EXP 92
21150: PUSH
21151: LD_INT 0
21153: ST_TO_ADDR
// sReset := false ;
21154: LD_ADDR_EXP 93
21158: PUSH
21159: LD_INT 0
21161: ST_TO_ADDR
// sSun := false ;
21162: LD_ADDR_EXP 94
21166: PUSH
21167: LD_INT 0
21169: ST_TO_ADDR
// sTiger := false ;
21170: LD_ADDR_EXP 90
21174: PUSH
21175: LD_INT 0
21177: ST_TO_ADDR
// sBomb := false ;
21178: LD_ADDR_EXP 91
21182: PUSH
21183: LD_INT 0
21185: ST_TO_ADDR
// sWound := false ;
21186: LD_ADDR_EXP 99
21190: PUSH
21191: LD_INT 0
21193: ST_TO_ADDR
// sBetray := false ;
21194: LD_ADDR_EXP 103
21198: PUSH
21199: LD_INT 0
21201: ST_TO_ADDR
// sContamin := false ;
21202: LD_ADDR_EXP 104
21206: PUSH
21207: LD_INT 0
21209: ST_TO_ADDR
// sOil := false ;
21210: LD_ADDR_EXP 106
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
// sStu := false ;
21218: LD_ADDR_EXP 110
21222: PUSH
21223: LD_INT 0
21225: ST_TO_ADDR
// sBazooka := false ;
21226: LD_ADDR_EXP 113
21230: PUSH
21231: LD_INT 0
21233: ST_TO_ADDR
// sMortar := false ;
21234: LD_ADDR_EXP 114
21238: PUSH
21239: LD_INT 0
21241: ST_TO_ADDR
// sRanger := false ;
21242: LD_ADDR_EXP 124
21246: PUSH
21247: LD_INT 0
21249: ST_TO_ADDR
// sComputer := false ;
21250: LD_ADDR_EXP 125
21254: PUSH
21255: LD_INT 0
21257: ST_TO_ADDR
// s30 := false ;
21258: LD_ADDR_EXP 126
21262: PUSH
21263: LD_INT 0
21265: ST_TO_ADDR
// s60 := false ;
21266: LD_ADDR_EXP 127
21270: PUSH
21271: LD_INT 0
21273: ST_TO_ADDR
// end ;
21274: LD_VAR 0 1
21278: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
// result := [ ] ;
21286: LD_ADDR_VAR 0 1
21290: PUSH
21291: EMPTY
21292: ST_TO_ADDR
// if campaign_id = 1 then
21293: LD_OWVAR 69
21297: PUSH
21298: LD_INT 1
21300: EQUAL
21301: IFFALSE 24467
// begin case mission_number of 1 :
21303: LD_OWVAR 70
21307: PUSH
21308: LD_INT 1
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21392
21316: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21317: LD_ADDR_VAR 0 1
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 11
21330: PUSH
21331: LD_INT 12
21333: PUSH
21334: LD_INT 15
21336: PUSH
21337: LD_INT 16
21339: PUSH
21340: LD_INT 22
21342: PUSH
21343: LD_INT 23
21345: PUSH
21346: LD_INT 26
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 101
21362: PUSH
21363: LD_INT 102
21365: PUSH
21366: LD_INT 106
21368: PUSH
21369: LD_INT 116
21371: PUSH
21372: LD_INT 117
21374: PUSH
21375: LD_INT 118
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: ST_TO_ADDR
21390: GO 24465
21392: LD_INT 2
21394: DOUBLE
21395: EQUAL
21396: IFTRUE 21400
21398: GO 21484
21400: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21401: LD_ADDR_VAR 0 1
21405: PUSH
21406: LD_INT 2
21408: PUSH
21409: LD_INT 4
21411: PUSH
21412: LD_INT 11
21414: PUSH
21415: LD_INT 12
21417: PUSH
21418: LD_INT 15
21420: PUSH
21421: LD_INT 16
21423: PUSH
21424: LD_INT 22
21426: PUSH
21427: LD_INT 23
21429: PUSH
21430: LD_INT 26
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 101
21446: PUSH
21447: LD_INT 102
21449: PUSH
21450: LD_INT 105
21452: PUSH
21453: LD_INT 106
21455: PUSH
21456: LD_INT 108
21458: PUSH
21459: LD_INT 116
21461: PUSH
21462: LD_INT 117
21464: PUSH
21465: LD_INT 118
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: ST_TO_ADDR
21482: GO 24465
21484: LD_INT 3
21486: DOUBLE
21487: EQUAL
21488: IFTRUE 21492
21490: GO 21580
21492: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21493: LD_ADDR_VAR 0 1
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: LD_INT 4
21503: PUSH
21504: LD_INT 5
21506: PUSH
21507: LD_INT 11
21509: PUSH
21510: LD_INT 12
21512: PUSH
21513: LD_INT 15
21515: PUSH
21516: LD_INT 16
21518: PUSH
21519: LD_INT 22
21521: PUSH
21522: LD_INT 26
21524: PUSH
21525: LD_INT 36
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 101
21542: PUSH
21543: LD_INT 102
21545: PUSH
21546: LD_INT 105
21548: PUSH
21549: LD_INT 106
21551: PUSH
21552: LD_INT 108
21554: PUSH
21555: LD_INT 116
21557: PUSH
21558: LD_INT 117
21560: PUSH
21561: LD_INT 118
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: ST_TO_ADDR
21578: GO 24465
21580: LD_INT 4
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21684
21588: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21589: LD_ADDR_VAR 0 1
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 4
21599: PUSH
21600: LD_INT 5
21602: PUSH
21603: LD_INT 8
21605: PUSH
21606: LD_INT 11
21608: PUSH
21609: LD_INT 12
21611: PUSH
21612: LD_INT 15
21614: PUSH
21615: LD_INT 16
21617: PUSH
21618: LD_INT 22
21620: PUSH
21621: LD_INT 23
21623: PUSH
21624: LD_INT 26
21626: PUSH
21627: LD_INT 36
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 101
21646: PUSH
21647: LD_INT 102
21649: PUSH
21650: LD_INT 105
21652: PUSH
21653: LD_INT 106
21655: PUSH
21656: LD_INT 108
21658: PUSH
21659: LD_INT 116
21661: PUSH
21662: LD_INT 117
21664: PUSH
21665: LD_INT 118
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: ST_TO_ADDR
21682: GO 24465
21684: LD_INT 5
21686: DOUBLE
21687: EQUAL
21688: IFTRUE 21692
21690: GO 21804
21692: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21693: LD_ADDR_VAR 0 1
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: LD_INT 4
21703: PUSH
21704: LD_INT 5
21706: PUSH
21707: LD_INT 6
21709: PUSH
21710: LD_INT 8
21712: PUSH
21713: LD_INT 11
21715: PUSH
21716: LD_INT 12
21718: PUSH
21719: LD_INT 15
21721: PUSH
21722: LD_INT 16
21724: PUSH
21725: LD_INT 22
21727: PUSH
21728: LD_INT 23
21730: PUSH
21731: LD_INT 25
21733: PUSH
21734: LD_INT 26
21736: PUSH
21737: LD_INT 36
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 101
21758: PUSH
21759: LD_INT 102
21761: PUSH
21762: LD_INT 105
21764: PUSH
21765: LD_INT 106
21767: PUSH
21768: LD_INT 108
21770: PUSH
21771: LD_INT 109
21773: PUSH
21774: LD_INT 112
21776: PUSH
21777: LD_INT 116
21779: PUSH
21780: LD_INT 117
21782: PUSH
21783: LD_INT 118
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: ST_TO_ADDR
21802: GO 24465
21804: LD_INT 6
21806: DOUBLE
21807: EQUAL
21808: IFTRUE 21812
21810: GO 21944
21812: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21813: LD_ADDR_VAR 0 1
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 4
21823: PUSH
21824: LD_INT 5
21826: PUSH
21827: LD_INT 6
21829: PUSH
21830: LD_INT 8
21832: PUSH
21833: LD_INT 11
21835: PUSH
21836: LD_INT 12
21838: PUSH
21839: LD_INT 15
21841: PUSH
21842: LD_INT 16
21844: PUSH
21845: LD_INT 20
21847: PUSH
21848: LD_INT 21
21850: PUSH
21851: LD_INT 22
21853: PUSH
21854: LD_INT 23
21856: PUSH
21857: LD_INT 25
21859: PUSH
21860: LD_INT 26
21862: PUSH
21863: LD_INT 30
21865: PUSH
21866: LD_INT 31
21868: PUSH
21869: LD_INT 32
21871: PUSH
21872: LD_INT 36
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 101
21898: PUSH
21899: LD_INT 102
21901: PUSH
21902: LD_INT 105
21904: PUSH
21905: LD_INT 106
21907: PUSH
21908: LD_INT 108
21910: PUSH
21911: LD_INT 109
21913: PUSH
21914: LD_INT 112
21916: PUSH
21917: LD_INT 116
21919: PUSH
21920: LD_INT 117
21922: PUSH
21923: LD_INT 118
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: ST_TO_ADDR
21942: GO 24465
21944: LD_INT 7
21946: DOUBLE
21947: EQUAL
21948: IFTRUE 21952
21950: GO 22064
21952: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21953: LD_ADDR_VAR 0 1
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 4
21963: PUSH
21964: LD_INT 5
21966: PUSH
21967: LD_INT 7
21969: PUSH
21970: LD_INT 11
21972: PUSH
21973: LD_INT 12
21975: PUSH
21976: LD_INT 15
21978: PUSH
21979: LD_INT 16
21981: PUSH
21982: LD_INT 20
21984: PUSH
21985: LD_INT 21
21987: PUSH
21988: LD_INT 22
21990: PUSH
21991: LD_INT 23
21993: PUSH
21994: LD_INT 25
21996: PUSH
21997: LD_INT 26
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 101
22018: PUSH
22019: LD_INT 102
22021: PUSH
22022: LD_INT 103
22024: PUSH
22025: LD_INT 105
22027: PUSH
22028: LD_INT 106
22030: PUSH
22031: LD_INT 108
22033: PUSH
22034: LD_INT 112
22036: PUSH
22037: LD_INT 116
22039: PUSH
22040: LD_INT 117
22042: PUSH
22043: LD_INT 118
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: ST_TO_ADDR
22062: GO 24465
22064: LD_INT 8
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22212
22072: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22073: LD_ADDR_VAR 0 1
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: LD_INT 4
22083: PUSH
22084: LD_INT 5
22086: PUSH
22087: LD_INT 6
22089: PUSH
22090: LD_INT 7
22092: PUSH
22093: LD_INT 8
22095: PUSH
22096: LD_INT 11
22098: PUSH
22099: LD_INT 12
22101: PUSH
22102: LD_INT 15
22104: PUSH
22105: LD_INT 16
22107: PUSH
22108: LD_INT 20
22110: PUSH
22111: LD_INT 21
22113: PUSH
22114: LD_INT 22
22116: PUSH
22117: LD_INT 23
22119: PUSH
22120: LD_INT 25
22122: PUSH
22123: LD_INT 26
22125: PUSH
22126: LD_INT 30
22128: PUSH
22129: LD_INT 31
22131: PUSH
22132: LD_INT 32
22134: PUSH
22135: LD_INT 36
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 101
22162: PUSH
22163: LD_INT 102
22165: PUSH
22166: LD_INT 103
22168: PUSH
22169: LD_INT 105
22171: PUSH
22172: LD_INT 106
22174: PUSH
22175: LD_INT 108
22177: PUSH
22178: LD_INT 109
22180: PUSH
22181: LD_INT 112
22183: PUSH
22184: LD_INT 116
22186: PUSH
22187: LD_INT 117
22189: PUSH
22190: LD_INT 118
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 24465
22212: LD_INT 9
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22368
22220: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22221: LD_ADDR_VAR 0 1
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 6
22237: PUSH
22238: LD_INT 7
22240: PUSH
22241: LD_INT 8
22243: PUSH
22244: LD_INT 11
22246: PUSH
22247: LD_INT 12
22249: PUSH
22250: LD_INT 15
22252: PUSH
22253: LD_INT 16
22255: PUSH
22256: LD_INT 20
22258: PUSH
22259: LD_INT 21
22261: PUSH
22262: LD_INT 22
22264: PUSH
22265: LD_INT 23
22267: PUSH
22268: LD_INT 25
22270: PUSH
22271: LD_INT 26
22273: PUSH
22274: LD_INT 28
22276: PUSH
22277: LD_INT 30
22279: PUSH
22280: LD_INT 31
22282: PUSH
22283: LD_INT 32
22285: PUSH
22286: LD_INT 36
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 101
22314: PUSH
22315: LD_INT 102
22317: PUSH
22318: LD_INT 103
22320: PUSH
22321: LD_INT 105
22323: PUSH
22324: LD_INT 106
22326: PUSH
22327: LD_INT 108
22329: PUSH
22330: LD_INT 109
22332: PUSH
22333: LD_INT 112
22335: PUSH
22336: LD_INT 114
22338: PUSH
22339: LD_INT 116
22341: PUSH
22342: LD_INT 117
22344: PUSH
22345: LD_INT 118
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: ST_TO_ADDR
22366: GO 24465
22368: LD_INT 10
22370: DOUBLE
22371: EQUAL
22372: IFTRUE 22376
22374: GO 22572
22376: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22377: LD_ADDR_VAR 0 1
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 4
22387: PUSH
22388: LD_INT 5
22390: PUSH
22391: LD_INT 6
22393: PUSH
22394: LD_INT 7
22396: PUSH
22397: LD_INT 8
22399: PUSH
22400: LD_INT 9
22402: PUSH
22403: LD_INT 10
22405: PUSH
22406: LD_INT 11
22408: PUSH
22409: LD_INT 12
22411: PUSH
22412: LD_INT 13
22414: PUSH
22415: LD_INT 14
22417: PUSH
22418: LD_INT 15
22420: PUSH
22421: LD_INT 16
22423: PUSH
22424: LD_INT 17
22426: PUSH
22427: LD_INT 18
22429: PUSH
22430: LD_INT 19
22432: PUSH
22433: LD_INT 20
22435: PUSH
22436: LD_INT 21
22438: PUSH
22439: LD_INT 22
22441: PUSH
22442: LD_INT 23
22444: PUSH
22445: LD_INT 24
22447: PUSH
22448: LD_INT 25
22450: PUSH
22451: LD_INT 26
22453: PUSH
22454: LD_INT 28
22456: PUSH
22457: LD_INT 30
22459: PUSH
22460: LD_INT 31
22462: PUSH
22463: LD_INT 32
22465: PUSH
22466: LD_INT 36
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 101
22502: PUSH
22503: LD_INT 102
22505: PUSH
22506: LD_INT 103
22508: PUSH
22509: LD_INT 104
22511: PUSH
22512: LD_INT 105
22514: PUSH
22515: LD_INT 106
22517: PUSH
22518: LD_INT 107
22520: PUSH
22521: LD_INT 108
22523: PUSH
22524: LD_INT 109
22526: PUSH
22527: LD_INT 110
22529: PUSH
22530: LD_INT 111
22532: PUSH
22533: LD_INT 112
22535: PUSH
22536: LD_INT 114
22538: PUSH
22539: LD_INT 116
22541: PUSH
22542: LD_INT 117
22544: PUSH
22545: LD_INT 118
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: ST_TO_ADDR
22570: GO 24465
22572: LD_INT 11
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22784
22580: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22581: LD_ADDR_VAR 0 1
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 4
22594: PUSH
22595: LD_INT 5
22597: PUSH
22598: LD_INT 6
22600: PUSH
22601: LD_INT 7
22603: PUSH
22604: LD_INT 8
22606: PUSH
22607: LD_INT 9
22609: PUSH
22610: LD_INT 10
22612: PUSH
22613: LD_INT 11
22615: PUSH
22616: LD_INT 12
22618: PUSH
22619: LD_INT 13
22621: PUSH
22622: LD_INT 14
22624: PUSH
22625: LD_INT 15
22627: PUSH
22628: LD_INT 16
22630: PUSH
22631: LD_INT 17
22633: PUSH
22634: LD_INT 18
22636: PUSH
22637: LD_INT 19
22639: PUSH
22640: LD_INT 20
22642: PUSH
22643: LD_INT 21
22645: PUSH
22646: LD_INT 22
22648: PUSH
22649: LD_INT 23
22651: PUSH
22652: LD_INT 24
22654: PUSH
22655: LD_INT 25
22657: PUSH
22658: LD_INT 26
22660: PUSH
22661: LD_INT 28
22663: PUSH
22664: LD_INT 30
22666: PUSH
22667: LD_INT 31
22669: PUSH
22670: LD_INT 32
22672: PUSH
22673: LD_INT 34
22675: PUSH
22676: LD_INT 36
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 101
22714: PUSH
22715: LD_INT 102
22717: PUSH
22718: LD_INT 103
22720: PUSH
22721: LD_INT 104
22723: PUSH
22724: LD_INT 105
22726: PUSH
22727: LD_INT 106
22729: PUSH
22730: LD_INT 107
22732: PUSH
22733: LD_INT 108
22735: PUSH
22736: LD_INT 109
22738: PUSH
22739: LD_INT 110
22741: PUSH
22742: LD_INT 111
22744: PUSH
22745: LD_INT 112
22747: PUSH
22748: LD_INT 114
22750: PUSH
22751: LD_INT 116
22753: PUSH
22754: LD_INT 117
22756: PUSH
22757: LD_INT 118
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: ST_TO_ADDR
22782: GO 24465
22784: LD_INT 12
22786: DOUBLE
22787: EQUAL
22788: IFTRUE 22792
22790: GO 23012
22792: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22793: LD_ADDR_VAR 0 1
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: LD_INT 4
22809: PUSH
22810: LD_INT 5
22812: PUSH
22813: LD_INT 6
22815: PUSH
22816: LD_INT 7
22818: PUSH
22819: LD_INT 8
22821: PUSH
22822: LD_INT 9
22824: PUSH
22825: LD_INT 10
22827: PUSH
22828: LD_INT 11
22830: PUSH
22831: LD_INT 12
22833: PUSH
22834: LD_INT 13
22836: PUSH
22837: LD_INT 14
22839: PUSH
22840: LD_INT 15
22842: PUSH
22843: LD_INT 16
22845: PUSH
22846: LD_INT 17
22848: PUSH
22849: LD_INT 18
22851: PUSH
22852: LD_INT 19
22854: PUSH
22855: LD_INT 20
22857: PUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 22
22863: PUSH
22864: LD_INT 23
22866: PUSH
22867: LD_INT 24
22869: PUSH
22870: LD_INT 25
22872: PUSH
22873: LD_INT 26
22875: PUSH
22876: LD_INT 27
22878: PUSH
22879: LD_INT 28
22881: PUSH
22882: LD_INT 30
22884: PUSH
22885: LD_INT 31
22887: PUSH
22888: LD_INT 32
22890: PUSH
22891: LD_INT 33
22893: PUSH
22894: LD_INT 34
22896: PUSH
22897: LD_INT 36
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 101
22938: PUSH
22939: LD_INT 102
22941: PUSH
22942: LD_INT 103
22944: PUSH
22945: LD_INT 104
22947: PUSH
22948: LD_INT 105
22950: PUSH
22951: LD_INT 106
22953: PUSH
22954: LD_INT 107
22956: PUSH
22957: LD_INT 108
22959: PUSH
22960: LD_INT 109
22962: PUSH
22963: LD_INT 110
22965: PUSH
22966: LD_INT 111
22968: PUSH
22969: LD_INT 112
22971: PUSH
22972: LD_INT 113
22974: PUSH
22975: LD_INT 114
22977: PUSH
22978: LD_INT 116
22980: PUSH
22981: LD_INT 117
22983: PUSH
22984: LD_INT 118
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: ST_TO_ADDR
23010: GO 24465
23012: LD_INT 13
23014: DOUBLE
23015: EQUAL
23016: IFTRUE 23020
23018: GO 23228
23020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23021: LD_ADDR_VAR 0 1
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: LD_INT 3
23034: PUSH
23035: LD_INT 4
23037: PUSH
23038: LD_INT 5
23040: PUSH
23041: LD_INT 8
23043: PUSH
23044: LD_INT 9
23046: PUSH
23047: LD_INT 10
23049: PUSH
23050: LD_INT 11
23052: PUSH
23053: LD_INT 12
23055: PUSH
23056: LD_INT 14
23058: PUSH
23059: LD_INT 15
23061: PUSH
23062: LD_INT 16
23064: PUSH
23065: LD_INT 17
23067: PUSH
23068: LD_INT 18
23070: PUSH
23071: LD_INT 19
23073: PUSH
23074: LD_INT 20
23076: PUSH
23077: LD_INT 21
23079: PUSH
23080: LD_INT 22
23082: PUSH
23083: LD_INT 23
23085: PUSH
23086: LD_INT 24
23088: PUSH
23089: LD_INT 25
23091: PUSH
23092: LD_INT 26
23094: PUSH
23095: LD_INT 27
23097: PUSH
23098: LD_INT 28
23100: PUSH
23101: LD_INT 30
23103: PUSH
23104: LD_INT 31
23106: PUSH
23107: LD_INT 32
23109: PUSH
23110: LD_INT 33
23112: PUSH
23113: LD_INT 34
23115: PUSH
23116: LD_INT 36
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 101
23154: PUSH
23155: LD_INT 102
23157: PUSH
23158: LD_INT 103
23160: PUSH
23161: LD_INT 104
23163: PUSH
23164: LD_INT 105
23166: PUSH
23167: LD_INT 106
23169: PUSH
23170: LD_INT 107
23172: PUSH
23173: LD_INT 108
23175: PUSH
23176: LD_INT 109
23178: PUSH
23179: LD_INT 110
23181: PUSH
23182: LD_INT 111
23184: PUSH
23185: LD_INT 112
23187: PUSH
23188: LD_INT 113
23190: PUSH
23191: LD_INT 114
23193: PUSH
23194: LD_INT 116
23196: PUSH
23197: LD_INT 117
23199: PUSH
23200: LD_INT 118
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: ST_TO_ADDR
23226: GO 24465
23228: LD_INT 14
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23460
23236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23237: LD_ADDR_VAR 0 1
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 3
23250: PUSH
23251: LD_INT 4
23253: PUSH
23254: LD_INT 5
23256: PUSH
23257: LD_INT 6
23259: PUSH
23260: LD_INT 7
23262: PUSH
23263: LD_INT 8
23265: PUSH
23266: LD_INT 9
23268: PUSH
23269: LD_INT 10
23271: PUSH
23272: LD_INT 11
23274: PUSH
23275: LD_INT 12
23277: PUSH
23278: LD_INT 13
23280: PUSH
23281: LD_INT 14
23283: PUSH
23284: LD_INT 15
23286: PUSH
23287: LD_INT 16
23289: PUSH
23290: LD_INT 17
23292: PUSH
23293: LD_INT 18
23295: PUSH
23296: LD_INT 19
23298: PUSH
23299: LD_INT 20
23301: PUSH
23302: LD_INT 21
23304: PUSH
23305: LD_INT 22
23307: PUSH
23308: LD_INT 23
23310: PUSH
23311: LD_INT 24
23313: PUSH
23314: LD_INT 25
23316: PUSH
23317: LD_INT 26
23319: PUSH
23320: LD_INT 27
23322: PUSH
23323: LD_INT 28
23325: PUSH
23326: LD_INT 29
23328: PUSH
23329: LD_INT 30
23331: PUSH
23332: LD_INT 31
23334: PUSH
23335: LD_INT 32
23337: PUSH
23338: LD_INT 33
23340: PUSH
23341: LD_INT 34
23343: PUSH
23344: LD_INT 36
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 101
23386: PUSH
23387: LD_INT 102
23389: PUSH
23390: LD_INT 103
23392: PUSH
23393: LD_INT 104
23395: PUSH
23396: LD_INT 105
23398: PUSH
23399: LD_INT 106
23401: PUSH
23402: LD_INT 107
23404: PUSH
23405: LD_INT 108
23407: PUSH
23408: LD_INT 109
23410: PUSH
23411: LD_INT 110
23413: PUSH
23414: LD_INT 111
23416: PUSH
23417: LD_INT 112
23419: PUSH
23420: LD_INT 113
23422: PUSH
23423: LD_INT 114
23425: PUSH
23426: LD_INT 116
23428: PUSH
23429: LD_INT 117
23431: PUSH
23432: LD_INT 118
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: ST_TO_ADDR
23458: GO 24465
23460: LD_INT 15
23462: DOUBLE
23463: EQUAL
23464: IFTRUE 23468
23466: GO 23692
23468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23469: LD_ADDR_VAR 0 1
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: LD_INT 3
23482: PUSH
23483: LD_INT 4
23485: PUSH
23486: LD_INT 5
23488: PUSH
23489: LD_INT 6
23491: PUSH
23492: LD_INT 7
23494: PUSH
23495: LD_INT 8
23497: PUSH
23498: LD_INT 9
23500: PUSH
23501: LD_INT 10
23503: PUSH
23504: LD_INT 11
23506: PUSH
23507: LD_INT 12
23509: PUSH
23510: LD_INT 13
23512: PUSH
23513: LD_INT 14
23515: PUSH
23516: LD_INT 15
23518: PUSH
23519: LD_INT 16
23521: PUSH
23522: LD_INT 17
23524: PUSH
23525: LD_INT 18
23527: PUSH
23528: LD_INT 19
23530: PUSH
23531: LD_INT 20
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 22
23539: PUSH
23540: LD_INT 23
23542: PUSH
23543: LD_INT 24
23545: PUSH
23546: LD_INT 25
23548: PUSH
23549: LD_INT 26
23551: PUSH
23552: LD_INT 27
23554: PUSH
23555: LD_INT 28
23557: PUSH
23558: LD_INT 29
23560: PUSH
23561: LD_INT 30
23563: PUSH
23564: LD_INT 31
23566: PUSH
23567: LD_INT 32
23569: PUSH
23570: LD_INT 33
23572: PUSH
23573: LD_INT 34
23575: PUSH
23576: LD_INT 36
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 101
23618: PUSH
23619: LD_INT 102
23621: PUSH
23622: LD_INT 103
23624: PUSH
23625: LD_INT 104
23627: PUSH
23628: LD_INT 105
23630: PUSH
23631: LD_INT 106
23633: PUSH
23634: LD_INT 107
23636: PUSH
23637: LD_INT 108
23639: PUSH
23640: LD_INT 109
23642: PUSH
23643: LD_INT 110
23645: PUSH
23646: LD_INT 111
23648: PUSH
23649: LD_INT 112
23651: PUSH
23652: LD_INT 113
23654: PUSH
23655: LD_INT 114
23657: PUSH
23658: LD_INT 116
23660: PUSH
23661: LD_INT 117
23663: PUSH
23664: LD_INT 118
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: ST_TO_ADDR
23690: GO 24465
23692: LD_INT 16
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23836
23700: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23701: LD_ADDR_VAR 0 1
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 4
23711: PUSH
23712: LD_INT 5
23714: PUSH
23715: LD_INT 7
23717: PUSH
23718: LD_INT 11
23720: PUSH
23721: LD_INT 12
23723: PUSH
23724: LD_INT 15
23726: PUSH
23727: LD_INT 16
23729: PUSH
23730: LD_INT 20
23732: PUSH
23733: LD_INT 21
23735: PUSH
23736: LD_INT 22
23738: PUSH
23739: LD_INT 23
23741: PUSH
23742: LD_INT 25
23744: PUSH
23745: LD_INT 26
23747: PUSH
23748: LD_INT 30
23750: PUSH
23751: LD_INT 31
23753: PUSH
23754: LD_INT 32
23756: PUSH
23757: LD_INT 33
23759: PUSH
23760: LD_INT 34
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 101
23786: PUSH
23787: LD_INT 102
23789: PUSH
23790: LD_INT 103
23792: PUSH
23793: LD_INT 106
23795: PUSH
23796: LD_INT 108
23798: PUSH
23799: LD_INT 112
23801: PUSH
23802: LD_INT 113
23804: PUSH
23805: LD_INT 114
23807: PUSH
23808: LD_INT 116
23810: PUSH
23811: LD_INT 117
23813: PUSH
23814: LD_INT 118
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: ST_TO_ADDR
23834: GO 24465
23836: LD_INT 17
23838: DOUBLE
23839: EQUAL
23840: IFTRUE 23844
23842: GO 24068
23844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23845: LD_ADDR_VAR 0 1
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: LD_INT 2
23855: PUSH
23856: LD_INT 3
23858: PUSH
23859: LD_INT 4
23861: PUSH
23862: LD_INT 5
23864: PUSH
23865: LD_INT 6
23867: PUSH
23868: LD_INT 7
23870: PUSH
23871: LD_INT 8
23873: PUSH
23874: LD_INT 9
23876: PUSH
23877: LD_INT 10
23879: PUSH
23880: LD_INT 11
23882: PUSH
23883: LD_INT 12
23885: PUSH
23886: LD_INT 13
23888: PUSH
23889: LD_INT 14
23891: PUSH
23892: LD_INT 15
23894: PUSH
23895: LD_INT 16
23897: PUSH
23898: LD_INT 17
23900: PUSH
23901: LD_INT 18
23903: PUSH
23904: LD_INT 19
23906: PUSH
23907: LD_INT 20
23909: PUSH
23910: LD_INT 21
23912: PUSH
23913: LD_INT 22
23915: PUSH
23916: LD_INT 23
23918: PUSH
23919: LD_INT 24
23921: PUSH
23922: LD_INT 25
23924: PUSH
23925: LD_INT 26
23927: PUSH
23928: LD_INT 27
23930: PUSH
23931: LD_INT 28
23933: PUSH
23934: LD_INT 29
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 31
23942: PUSH
23943: LD_INT 32
23945: PUSH
23946: LD_INT 33
23948: PUSH
23949: LD_INT 34
23951: PUSH
23952: LD_INT 36
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 101
23994: PUSH
23995: LD_INT 102
23997: PUSH
23998: LD_INT 103
24000: PUSH
24001: LD_INT 104
24003: PUSH
24004: LD_INT 105
24006: PUSH
24007: LD_INT 106
24009: PUSH
24010: LD_INT 107
24012: PUSH
24013: LD_INT 108
24015: PUSH
24016: LD_INT 109
24018: PUSH
24019: LD_INT 110
24021: PUSH
24022: LD_INT 111
24024: PUSH
24025: LD_INT 112
24027: PUSH
24028: LD_INT 113
24030: PUSH
24031: LD_INT 114
24033: PUSH
24034: LD_INT 116
24036: PUSH
24037: LD_INT 117
24039: PUSH
24040: LD_INT 118
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: ST_TO_ADDR
24066: GO 24465
24068: LD_INT 18
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24224
24076: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24077: LD_ADDR_VAR 0 1
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: LD_INT 4
24087: PUSH
24088: LD_INT 5
24090: PUSH
24091: LD_INT 7
24093: PUSH
24094: LD_INT 11
24096: PUSH
24097: LD_INT 12
24099: PUSH
24100: LD_INT 15
24102: PUSH
24103: LD_INT 16
24105: PUSH
24106: LD_INT 20
24108: PUSH
24109: LD_INT 21
24111: PUSH
24112: LD_INT 22
24114: PUSH
24115: LD_INT 23
24117: PUSH
24118: LD_INT 25
24120: PUSH
24121: LD_INT 26
24123: PUSH
24124: LD_INT 30
24126: PUSH
24127: LD_INT 31
24129: PUSH
24130: LD_INT 32
24132: PUSH
24133: LD_INT 33
24135: PUSH
24136: LD_INT 34
24138: PUSH
24139: LD_INT 35
24141: PUSH
24142: LD_INT 36
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 101
24170: PUSH
24171: LD_INT 102
24173: PUSH
24174: LD_INT 103
24176: PUSH
24177: LD_INT 106
24179: PUSH
24180: LD_INT 108
24182: PUSH
24183: LD_INT 112
24185: PUSH
24186: LD_INT 113
24188: PUSH
24189: LD_INT 114
24191: PUSH
24192: LD_INT 115
24194: PUSH
24195: LD_INT 116
24197: PUSH
24198: LD_INT 117
24200: PUSH
24201: LD_INT 118
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: ST_TO_ADDR
24222: GO 24465
24224: LD_INT 19
24226: DOUBLE
24227: EQUAL
24228: IFTRUE 24232
24230: GO 24464
24232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24233: LD_ADDR_VAR 0 1
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: LD_INT 3
24246: PUSH
24247: LD_INT 4
24249: PUSH
24250: LD_INT 5
24252: PUSH
24253: LD_INT 6
24255: PUSH
24256: LD_INT 7
24258: PUSH
24259: LD_INT 8
24261: PUSH
24262: LD_INT 9
24264: PUSH
24265: LD_INT 10
24267: PUSH
24268: LD_INT 11
24270: PUSH
24271: LD_INT 12
24273: PUSH
24274: LD_INT 13
24276: PUSH
24277: LD_INT 14
24279: PUSH
24280: LD_INT 15
24282: PUSH
24283: LD_INT 16
24285: PUSH
24286: LD_INT 17
24288: PUSH
24289: LD_INT 18
24291: PUSH
24292: LD_INT 19
24294: PUSH
24295: LD_INT 20
24297: PUSH
24298: LD_INT 21
24300: PUSH
24301: LD_INT 22
24303: PUSH
24304: LD_INT 23
24306: PUSH
24307: LD_INT 24
24309: PUSH
24310: LD_INT 25
24312: PUSH
24313: LD_INT 26
24315: PUSH
24316: LD_INT 27
24318: PUSH
24319: LD_INT 28
24321: PUSH
24322: LD_INT 29
24324: PUSH
24325: LD_INT 30
24327: PUSH
24328: LD_INT 31
24330: PUSH
24331: LD_INT 32
24333: PUSH
24334: LD_INT 33
24336: PUSH
24337: LD_INT 34
24339: PUSH
24340: LD_INT 35
24342: PUSH
24343: LD_INT 36
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 101
24386: PUSH
24387: LD_INT 102
24389: PUSH
24390: LD_INT 103
24392: PUSH
24393: LD_INT 104
24395: PUSH
24396: LD_INT 105
24398: PUSH
24399: LD_INT 106
24401: PUSH
24402: LD_INT 107
24404: PUSH
24405: LD_INT 108
24407: PUSH
24408: LD_INT 109
24410: PUSH
24411: LD_INT 110
24413: PUSH
24414: LD_INT 111
24416: PUSH
24417: LD_INT 112
24419: PUSH
24420: LD_INT 113
24422: PUSH
24423: LD_INT 114
24425: PUSH
24426: LD_INT 115
24428: PUSH
24429: LD_INT 116
24431: PUSH
24432: LD_INT 117
24434: PUSH
24435: LD_INT 118
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: ST_TO_ADDR
24462: GO 24465
24464: POP
// end else
24465: GO 24696
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24467: LD_ADDR_VAR 0 1
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 3
24480: PUSH
24481: LD_INT 4
24483: PUSH
24484: LD_INT 5
24486: PUSH
24487: LD_INT 6
24489: PUSH
24490: LD_INT 7
24492: PUSH
24493: LD_INT 8
24495: PUSH
24496: LD_INT 9
24498: PUSH
24499: LD_INT 10
24501: PUSH
24502: LD_INT 11
24504: PUSH
24505: LD_INT 12
24507: PUSH
24508: LD_INT 13
24510: PUSH
24511: LD_INT 14
24513: PUSH
24514: LD_INT 15
24516: PUSH
24517: LD_INT 16
24519: PUSH
24520: LD_INT 17
24522: PUSH
24523: LD_INT 18
24525: PUSH
24526: LD_INT 19
24528: PUSH
24529: LD_INT 20
24531: PUSH
24532: LD_INT 21
24534: PUSH
24535: LD_INT 22
24537: PUSH
24538: LD_INT 23
24540: PUSH
24541: LD_INT 24
24543: PUSH
24544: LD_INT 25
24546: PUSH
24547: LD_INT 26
24549: PUSH
24550: LD_INT 27
24552: PUSH
24553: LD_INT 28
24555: PUSH
24556: LD_INT 29
24558: PUSH
24559: LD_INT 30
24561: PUSH
24562: LD_INT 31
24564: PUSH
24565: LD_INT 32
24567: PUSH
24568: LD_INT 33
24570: PUSH
24571: LD_INT 34
24573: PUSH
24574: LD_INT 35
24576: PUSH
24577: LD_INT 36
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 101
24620: PUSH
24621: LD_INT 102
24623: PUSH
24624: LD_INT 103
24626: PUSH
24627: LD_INT 104
24629: PUSH
24630: LD_INT 105
24632: PUSH
24633: LD_INT 106
24635: PUSH
24636: LD_INT 107
24638: PUSH
24639: LD_INT 108
24641: PUSH
24642: LD_INT 109
24644: PUSH
24645: LD_INT 110
24647: PUSH
24648: LD_INT 111
24650: PUSH
24651: LD_INT 112
24653: PUSH
24654: LD_INT 113
24656: PUSH
24657: LD_INT 114
24659: PUSH
24660: LD_INT 115
24662: PUSH
24663: LD_INT 116
24665: PUSH
24666: LD_INT 117
24668: PUSH
24669: LD_INT 118
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: ST_TO_ADDR
// if result then
24696: LD_VAR 0 1
24700: IFFALSE 24989
// begin normal :=  ;
24702: LD_ADDR_VAR 0 3
24706: PUSH
24707: LD_STRING 
24709: ST_TO_ADDR
// hardcore :=  ;
24710: LD_ADDR_VAR 0 4
24714: PUSH
24715: LD_STRING 
24717: ST_TO_ADDR
// for i = 1 to normalCounter do
24718: LD_ADDR_VAR 0 5
24722: PUSH
24723: DOUBLE
24724: LD_INT 1
24726: DEC
24727: ST_TO_ADDR
24728: LD_EXP 72
24732: PUSH
24733: FOR_TO
24734: IFFALSE 24835
// begin tmp := 0 ;
24736: LD_ADDR_VAR 0 2
24740: PUSH
24741: LD_STRING 0
24743: ST_TO_ADDR
// if result [ 1 ] then
24744: LD_VAR 0 1
24748: PUSH
24749: LD_INT 1
24751: ARRAY
24752: IFFALSE 24817
// if result [ 1 ] [ 1 ] = i then
24754: LD_VAR 0 1
24758: PUSH
24759: LD_INT 1
24761: ARRAY
24762: PUSH
24763: LD_INT 1
24765: ARRAY
24766: PUSH
24767: LD_VAR 0 5
24771: EQUAL
24772: IFFALSE 24817
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24774: LD_ADDR_VAR 0 1
24778: PUSH
24779: LD_VAR 0 1
24783: PPUSH
24784: LD_INT 1
24786: PPUSH
24787: LD_VAR 0 1
24791: PUSH
24792: LD_INT 1
24794: ARRAY
24795: PPUSH
24796: LD_INT 1
24798: PPUSH
24799: CALL_OW 3
24803: PPUSH
24804: CALL_OW 1
24808: ST_TO_ADDR
// tmp := 1 ;
24809: LD_ADDR_VAR 0 2
24813: PUSH
24814: LD_STRING 1
24816: ST_TO_ADDR
// end ; normal := normal & tmp ;
24817: LD_ADDR_VAR 0 3
24821: PUSH
24822: LD_VAR 0 3
24826: PUSH
24827: LD_VAR 0 2
24831: STR
24832: ST_TO_ADDR
// end ;
24833: GO 24733
24835: POP
24836: POP
// for i = 1 to hardcoreCounter do
24837: LD_ADDR_VAR 0 5
24841: PUSH
24842: DOUBLE
24843: LD_INT 1
24845: DEC
24846: ST_TO_ADDR
24847: LD_EXP 73
24851: PUSH
24852: FOR_TO
24853: IFFALSE 24958
// begin tmp := 0 ;
24855: LD_ADDR_VAR 0 2
24859: PUSH
24860: LD_STRING 0
24862: ST_TO_ADDR
// if result [ 2 ] then
24863: LD_VAR 0 1
24867: PUSH
24868: LD_INT 2
24870: ARRAY
24871: IFFALSE 24940
// if result [ 2 ] [ 1 ] = 100 + i then
24873: LD_VAR 0 1
24877: PUSH
24878: LD_INT 2
24880: ARRAY
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: PUSH
24886: LD_INT 100
24888: PUSH
24889: LD_VAR 0 5
24893: PLUS
24894: EQUAL
24895: IFFALSE 24940
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24897: LD_ADDR_VAR 0 1
24901: PUSH
24902: LD_VAR 0 1
24906: PPUSH
24907: LD_INT 2
24909: PPUSH
24910: LD_VAR 0 1
24914: PUSH
24915: LD_INT 2
24917: ARRAY
24918: PPUSH
24919: LD_INT 1
24921: PPUSH
24922: CALL_OW 3
24926: PPUSH
24927: CALL_OW 1
24931: ST_TO_ADDR
// tmp := 1 ;
24932: LD_ADDR_VAR 0 2
24936: PUSH
24937: LD_STRING 1
24939: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24940: LD_ADDR_VAR 0 4
24944: PUSH
24945: LD_VAR 0 4
24949: PUSH
24950: LD_VAR 0 2
24954: STR
24955: ST_TO_ADDR
// end ;
24956: GO 24852
24958: POP
24959: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24960: LD_STRING getStreamItemsFromMission("
24962: PUSH
24963: LD_VAR 0 3
24967: STR
24968: PUSH
24969: LD_STRING ","
24971: STR
24972: PUSH
24973: LD_VAR 0 4
24977: STR
24978: PUSH
24979: LD_STRING ")
24981: STR
24982: PPUSH
24983: CALL_OW 559
// end else
24987: GO 24996
// ToLua ( getStreamItemsFromMission("","") ) ;
24989: LD_STRING getStreamItemsFromMission("","")
24991: PPUSH
24992: CALL_OW 559
// end ;
24996: LD_VAR 0 1
25000: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25001: LD_EXP 71
25005: PUSH
25006: LD_EXP 76
25010: AND
25011: IFFALSE 25135
25013: GO 25015
25015: DISABLE
25016: LD_INT 0
25018: PPUSH
25019: PPUSH
// begin enable ;
25020: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25021: LD_ADDR_VAR 0 2
25025: PUSH
25026: LD_INT 22
25028: PUSH
25029: LD_OWVAR 2
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: PUSH
25041: LD_INT 34
25043: PUSH
25044: LD_INT 7
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 34
25053: PUSH
25054: LD_INT 45
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 34
25063: PUSH
25064: LD_INT 28
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 34
25073: PUSH
25074: LD_INT 47
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PPUSH
25092: CALL_OW 69
25096: ST_TO_ADDR
// if not tmp then
25097: LD_VAR 0 2
25101: NOT
25102: IFFALSE 25106
// exit ;
25104: GO 25135
// for i in tmp do
25106: LD_ADDR_VAR 0 1
25110: PUSH
25111: LD_VAR 0 2
25115: PUSH
25116: FOR_IN
25117: IFFALSE 25133
// begin SetLives ( i , 0 ) ;
25119: LD_VAR 0 1
25123: PPUSH
25124: LD_INT 0
25126: PPUSH
25127: CALL_OW 234
// end ;
25131: GO 25116
25133: POP
25134: POP
// end ;
25135: PPOPN 2
25137: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25138: LD_EXP 71
25142: PUSH
25143: LD_EXP 77
25147: AND
25148: IFFALSE 25232
25150: GO 25152
25152: DISABLE
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
// begin enable ;
25157: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25158: LD_ADDR_VAR 0 2
25162: PUSH
25163: LD_INT 22
25165: PUSH
25166: LD_OWVAR 2
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 32
25177: PUSH
25178: LD_INT 3
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 69
25193: ST_TO_ADDR
// if not tmp then
25194: LD_VAR 0 2
25198: NOT
25199: IFFALSE 25203
// exit ;
25201: GO 25232
// for i in tmp do
25203: LD_ADDR_VAR 0 1
25207: PUSH
25208: LD_VAR 0 2
25212: PUSH
25213: FOR_IN
25214: IFFALSE 25230
// begin SetLives ( i , 0 ) ;
25216: LD_VAR 0 1
25220: PPUSH
25221: LD_INT 0
25223: PPUSH
25224: CALL_OW 234
// end ;
25228: GO 25213
25230: POP
25231: POP
// end ;
25232: PPOPN 2
25234: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25235: LD_EXP 71
25239: PUSH
25240: LD_EXP 74
25244: AND
25245: IFFALSE 25338
25247: GO 25249
25249: DISABLE
25250: LD_INT 0
25252: PPUSH
// begin enable ;
25253: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25254: LD_ADDR_VAR 0 1
25258: PUSH
25259: LD_INT 22
25261: PUSH
25262: LD_OWVAR 2
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 2
25273: PUSH
25274: LD_INT 25
25276: PUSH
25277: LD_INT 5
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 25
25286: PUSH
25287: LD_INT 9
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 25
25296: PUSH
25297: LD_INT 8
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: PUSH
25319: FOR_IN
25320: IFFALSE 25336
// begin SetClass ( i , 1 ) ;
25322: LD_VAR 0 1
25326: PPUSH
25327: LD_INT 1
25329: PPUSH
25330: CALL_OW 336
// end ;
25334: GO 25319
25336: POP
25337: POP
// end ;
25338: PPOPN 1
25340: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25341: LD_EXP 71
25345: PUSH
25346: LD_EXP 75
25350: AND
25351: PUSH
25352: LD_OWVAR 65
25356: PUSH
25357: LD_INT 7
25359: LESS
25360: AND
25361: IFFALSE 25375
25363: GO 25365
25365: DISABLE
// begin enable ;
25366: ENABLE
// game_speed := 7 ;
25367: LD_ADDR_OWVAR 65
25371: PUSH
25372: LD_INT 7
25374: ST_TO_ADDR
// end ;
25375: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25376: LD_EXP 71
25380: PUSH
25381: LD_EXP 78
25385: AND
25386: IFFALSE 25588
25388: GO 25390
25390: DISABLE
25391: LD_INT 0
25393: PPUSH
25394: PPUSH
25395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25396: LD_ADDR_VAR 0 3
25400: PUSH
25401: LD_INT 81
25403: PUSH
25404: LD_OWVAR 2
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 21
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: ST_TO_ADDR
// if not tmp then
25432: LD_VAR 0 3
25436: NOT
25437: IFFALSE 25441
// exit ;
25439: GO 25588
// if tmp > 5 then
25441: LD_VAR 0 3
25445: PUSH
25446: LD_INT 5
25448: GREATER
25449: IFFALSE 25461
// k := 5 else
25451: LD_ADDR_VAR 0 2
25455: PUSH
25456: LD_INT 5
25458: ST_TO_ADDR
25459: GO 25471
// k := tmp ;
25461: LD_ADDR_VAR 0 2
25465: PUSH
25466: LD_VAR 0 3
25470: ST_TO_ADDR
// for i := 1 to k do
25471: LD_ADDR_VAR 0 1
25475: PUSH
25476: DOUBLE
25477: LD_INT 1
25479: DEC
25480: ST_TO_ADDR
25481: LD_VAR 0 2
25485: PUSH
25486: FOR_TO
25487: IFFALSE 25586
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25489: LD_VAR 0 3
25493: PUSH
25494: LD_VAR 0 1
25498: ARRAY
25499: PPUSH
25500: LD_VAR 0 1
25504: PUSH
25505: LD_INT 4
25507: MOD
25508: PUSH
25509: LD_INT 1
25511: PLUS
25512: PPUSH
25513: CALL_OW 259
25517: PUSH
25518: LD_INT 10
25520: LESS
25521: IFFALSE 25584
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25523: LD_VAR 0 3
25527: PUSH
25528: LD_VAR 0 1
25532: ARRAY
25533: PPUSH
25534: LD_VAR 0 1
25538: PUSH
25539: LD_INT 4
25541: MOD
25542: PUSH
25543: LD_INT 1
25545: PLUS
25546: PPUSH
25547: LD_VAR 0 3
25551: PUSH
25552: LD_VAR 0 1
25556: ARRAY
25557: PPUSH
25558: LD_VAR 0 1
25562: PUSH
25563: LD_INT 4
25565: MOD
25566: PUSH
25567: LD_INT 1
25569: PLUS
25570: PPUSH
25571: CALL_OW 259
25575: PUSH
25576: LD_INT 1
25578: PLUS
25579: PPUSH
25580: CALL_OW 237
25584: GO 25486
25586: POP
25587: POP
// end ;
25588: PPOPN 3
25590: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25591: LD_EXP 71
25595: PUSH
25596: LD_EXP 79
25600: AND
25601: IFFALSE 25621
25603: GO 25605
25605: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25606: LD_INT 4
25608: PPUSH
25609: LD_OWVAR 2
25613: PPUSH
25614: LD_INT 0
25616: PPUSH
25617: CALL_OW 324
25621: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25622: LD_EXP 71
25626: PUSH
25627: LD_EXP 108
25631: AND
25632: IFFALSE 25652
25634: GO 25636
25636: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25637: LD_INT 19
25639: PPUSH
25640: LD_OWVAR 2
25644: PPUSH
25645: LD_INT 0
25647: PPUSH
25648: CALL_OW 324
25652: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25653: LD_EXP 71
25657: PUSH
25658: LD_EXP 80
25662: AND
25663: IFFALSE 25765
25665: GO 25667
25667: DISABLE
25668: LD_INT 0
25670: PPUSH
25671: PPUSH
// begin enable ;
25672: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25673: LD_ADDR_VAR 0 2
25677: PUSH
25678: LD_INT 22
25680: PUSH
25681: LD_OWVAR 2
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: LD_INT 34
25695: PUSH
25696: LD_INT 11
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 34
25705: PUSH
25706: LD_INT 30
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PPUSH
25722: CALL_OW 69
25726: ST_TO_ADDR
// if not tmp then
25727: LD_VAR 0 2
25731: NOT
25732: IFFALSE 25736
// exit ;
25734: GO 25765
// for i in tmp do
25736: LD_ADDR_VAR 0 1
25740: PUSH
25741: LD_VAR 0 2
25745: PUSH
25746: FOR_IN
25747: IFFALSE 25763
// begin SetLives ( i , 0 ) ;
25749: LD_VAR 0 1
25753: PPUSH
25754: LD_INT 0
25756: PPUSH
25757: CALL_OW 234
// end ;
25761: GO 25746
25763: POP
25764: POP
// end ;
25765: PPOPN 2
25767: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25768: LD_EXP 71
25772: PUSH
25773: LD_EXP 81
25777: AND
25778: IFFALSE 25798
25780: GO 25782
25782: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25783: LD_INT 32
25785: PPUSH
25786: LD_OWVAR 2
25790: PPUSH
25791: LD_INT 0
25793: PPUSH
25794: CALL_OW 324
25798: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25799: LD_EXP 71
25803: PUSH
25804: LD_EXP 82
25808: AND
25809: IFFALSE 25990
25811: GO 25813
25813: DISABLE
25814: LD_INT 0
25816: PPUSH
25817: PPUSH
25818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25819: LD_ADDR_VAR 0 2
25823: PUSH
25824: LD_INT 22
25826: PUSH
25827: LD_OWVAR 2
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 33
25838: PUSH
25839: LD_INT 3
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PPUSH
25850: CALL_OW 69
25854: ST_TO_ADDR
// if not tmp then
25855: LD_VAR 0 2
25859: NOT
25860: IFFALSE 25864
// exit ;
25862: GO 25990
// side := 0 ;
25864: LD_ADDR_VAR 0 3
25868: PUSH
25869: LD_INT 0
25871: ST_TO_ADDR
// for i := 1 to 8 do
25872: LD_ADDR_VAR 0 1
25876: PUSH
25877: DOUBLE
25878: LD_INT 1
25880: DEC
25881: ST_TO_ADDR
25882: LD_INT 8
25884: PUSH
25885: FOR_TO
25886: IFFALSE 25934
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25888: LD_OWVAR 2
25892: PUSH
25893: LD_VAR 0 1
25897: NONEQUAL
25898: PUSH
25899: LD_OWVAR 2
25903: PPUSH
25904: LD_VAR 0 1
25908: PPUSH
25909: CALL_OW 81
25913: PUSH
25914: LD_INT 2
25916: EQUAL
25917: AND
25918: IFFALSE 25932
// begin side := i ;
25920: LD_ADDR_VAR 0 3
25924: PUSH
25925: LD_VAR 0 1
25929: ST_TO_ADDR
// break ;
25930: GO 25934
// end ;
25932: GO 25885
25934: POP
25935: POP
// if not side then
25936: LD_VAR 0 3
25940: NOT
25941: IFFALSE 25945
// exit ;
25943: GO 25990
// for i := 1 to tmp do
25945: LD_ADDR_VAR 0 1
25949: PUSH
25950: DOUBLE
25951: LD_INT 1
25953: DEC
25954: ST_TO_ADDR
25955: LD_VAR 0 2
25959: PUSH
25960: FOR_TO
25961: IFFALSE 25988
// if Prob ( 60 ) then
25963: LD_INT 60
25965: PPUSH
25966: CALL_OW 13
25970: IFFALSE 25986
// SetSide ( i , side ) ;
25972: LD_VAR 0 1
25976: PPUSH
25977: LD_VAR 0 3
25981: PPUSH
25982: CALL_OW 235
25986: GO 25960
25988: POP
25989: POP
// end ;
25990: PPOPN 3
25992: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25993: LD_EXP 71
25997: PUSH
25998: LD_EXP 84
26002: AND
26003: IFFALSE 26122
26005: GO 26007
26007: DISABLE
26008: LD_INT 0
26010: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26011: LD_ADDR_VAR 0 1
26015: PUSH
26016: LD_INT 22
26018: PUSH
26019: LD_OWVAR 2
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 21
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 3
26040: PUSH
26041: LD_INT 23
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: LIST
26059: PPUSH
26060: CALL_OW 69
26064: PUSH
26065: FOR_IN
26066: IFFALSE 26120
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26068: LD_VAR 0 1
26072: PPUSH
26073: CALL_OW 257
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: LD_INT 3
26086: PUSH
26087: LD_INT 4
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: IN
26096: IFFALSE 26118
// SetClass ( un , rand ( 1 , 4 ) ) ;
26098: LD_VAR 0 1
26102: PPUSH
26103: LD_INT 1
26105: PPUSH
26106: LD_INT 4
26108: PPUSH
26109: CALL_OW 12
26113: PPUSH
26114: CALL_OW 336
26118: GO 26065
26120: POP
26121: POP
// end ;
26122: PPOPN 1
26124: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26125: LD_EXP 71
26129: PUSH
26130: LD_EXP 83
26134: AND
26135: IFFALSE 26214
26137: GO 26139
26139: DISABLE
26140: LD_INT 0
26142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26143: LD_ADDR_VAR 0 1
26147: PUSH
26148: LD_INT 22
26150: PUSH
26151: LD_OWVAR 2
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 21
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PPUSH
26174: CALL_OW 69
26178: ST_TO_ADDR
// if not tmp then
26179: LD_VAR 0 1
26183: NOT
26184: IFFALSE 26188
// exit ;
26186: GO 26214
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26188: LD_VAR 0 1
26192: PUSH
26193: LD_INT 1
26195: PPUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: CALL_OW 12
26205: ARRAY
26206: PPUSH
26207: LD_INT 100
26209: PPUSH
26210: CALL_OW 234
// end ;
26214: PPOPN 1
26216: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26217: LD_EXP 71
26221: PUSH
26222: LD_EXP 85
26226: AND
26227: IFFALSE 26325
26229: GO 26231
26231: DISABLE
26232: LD_INT 0
26234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26235: LD_ADDR_VAR 0 1
26239: PUSH
26240: LD_INT 22
26242: PUSH
26243: LD_OWVAR 2
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 21
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PPUSH
26266: CALL_OW 69
26270: ST_TO_ADDR
// if not tmp then
26271: LD_VAR 0 1
26275: NOT
26276: IFFALSE 26280
// exit ;
26278: GO 26325
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26280: LD_VAR 0 1
26284: PUSH
26285: LD_INT 1
26287: PPUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 12
26297: ARRAY
26298: PPUSH
26299: LD_INT 1
26301: PPUSH
26302: LD_INT 4
26304: PPUSH
26305: CALL_OW 12
26309: PPUSH
26310: LD_INT 3000
26312: PPUSH
26313: LD_INT 9000
26315: PPUSH
26316: CALL_OW 12
26320: PPUSH
26321: CALL_OW 492
// end ;
26325: PPOPN 1
26327: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26328: LD_EXP 71
26332: PUSH
26333: LD_EXP 86
26337: AND
26338: IFFALSE 26358
26340: GO 26342
26342: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26343: LD_INT 1
26345: PPUSH
26346: LD_OWVAR 2
26350: PPUSH
26351: LD_INT 0
26353: PPUSH
26354: CALL_OW 324
26358: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26359: LD_EXP 71
26363: PUSH
26364: LD_EXP 87
26368: AND
26369: IFFALSE 26452
26371: GO 26373
26373: DISABLE
26374: LD_INT 0
26376: PPUSH
26377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26378: LD_ADDR_VAR 0 2
26382: PUSH
26383: LD_INT 22
26385: PUSH
26386: LD_OWVAR 2
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 21
26397: PUSH
26398: LD_INT 3
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: ST_TO_ADDR
// if not tmp then
26414: LD_VAR 0 2
26418: NOT
26419: IFFALSE 26423
// exit ;
26421: GO 26452
// for i in tmp do
26423: LD_ADDR_VAR 0 1
26427: PUSH
26428: LD_VAR 0 2
26432: PUSH
26433: FOR_IN
26434: IFFALSE 26450
// SetBLevel ( i , 10 ) ;
26436: LD_VAR 0 1
26440: PPUSH
26441: LD_INT 10
26443: PPUSH
26444: CALL_OW 241
26448: GO 26433
26450: POP
26451: POP
// end ;
26452: PPOPN 2
26454: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26455: LD_EXP 71
26459: PUSH
26460: LD_EXP 88
26464: AND
26465: IFFALSE 26576
26467: GO 26469
26469: DISABLE
26470: LD_INT 0
26472: PPUSH
26473: PPUSH
26474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26475: LD_ADDR_VAR 0 3
26479: PUSH
26480: LD_INT 22
26482: PUSH
26483: LD_OWVAR 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 25
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PPUSH
26506: CALL_OW 69
26510: ST_TO_ADDR
// if not tmp then
26511: LD_VAR 0 3
26515: NOT
26516: IFFALSE 26520
// exit ;
26518: GO 26576
// un := tmp [ rand ( 1 , tmp ) ] ;
26520: LD_ADDR_VAR 0 2
26524: PUSH
26525: LD_VAR 0 3
26529: PUSH
26530: LD_INT 1
26532: PPUSH
26533: LD_VAR 0 3
26537: PPUSH
26538: CALL_OW 12
26542: ARRAY
26543: ST_TO_ADDR
// if Crawls ( un ) then
26544: LD_VAR 0 2
26548: PPUSH
26549: CALL_OW 318
26553: IFFALSE 26564
// ComWalk ( un ) ;
26555: LD_VAR 0 2
26559: PPUSH
26560: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26564: LD_VAR 0 2
26568: PPUSH
26569: LD_INT 5
26571: PPUSH
26572: CALL_OW 336
// end ;
26576: PPOPN 3
26578: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26579: LD_EXP 71
26583: PUSH
26584: LD_EXP 89
26588: AND
26589: PUSH
26590: LD_OWVAR 67
26594: PUSH
26595: LD_INT 4
26597: LESS
26598: AND
26599: IFFALSE 26618
26601: GO 26603
26603: DISABLE
// begin Difficulty := Difficulty + 1 ;
26604: LD_ADDR_OWVAR 67
26608: PUSH
26609: LD_OWVAR 67
26613: PUSH
26614: LD_INT 1
26616: PLUS
26617: ST_TO_ADDR
// end ;
26618: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26619: LD_EXP 71
26623: PUSH
26624: LD_EXP 90
26628: AND
26629: IFFALSE 26732
26631: GO 26633
26633: DISABLE
26634: LD_INT 0
26636: PPUSH
// begin for i := 1 to 5 do
26637: LD_ADDR_VAR 0 1
26641: PUSH
26642: DOUBLE
26643: LD_INT 1
26645: DEC
26646: ST_TO_ADDR
26647: LD_INT 5
26649: PUSH
26650: FOR_TO
26651: IFFALSE 26730
// begin uc_nation := nation_nature ;
26653: LD_ADDR_OWVAR 21
26657: PUSH
26658: LD_INT 0
26660: ST_TO_ADDR
// uc_side := 0 ;
26661: LD_ADDR_OWVAR 20
26665: PUSH
26666: LD_INT 0
26668: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26669: LD_ADDR_OWVAR 29
26673: PUSH
26674: LD_INT 12
26676: PUSH
26677: LD_INT 12
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: ST_TO_ADDR
// hc_agressivity := 20 ;
26684: LD_ADDR_OWVAR 35
26688: PUSH
26689: LD_INT 20
26691: ST_TO_ADDR
// hc_class := class_tiger ;
26692: LD_ADDR_OWVAR 28
26696: PUSH
26697: LD_INT 14
26699: ST_TO_ADDR
// hc_gallery :=  ;
26700: LD_ADDR_OWVAR 33
26704: PUSH
26705: LD_STRING 
26707: ST_TO_ADDR
// hc_name :=  ;
26708: LD_ADDR_OWVAR 26
26712: PUSH
26713: LD_STRING 
26715: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26716: CALL_OW 44
26720: PPUSH
26721: LD_INT 0
26723: PPUSH
26724: CALL_OW 51
// end ;
26728: GO 26650
26730: POP
26731: POP
// end ;
26732: PPOPN 1
26734: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26735: LD_EXP 71
26739: PUSH
26740: LD_EXP 91
26744: AND
26745: IFFALSE 26754
26747: GO 26749
26749: DISABLE
// StreamSibBomb ;
26750: CALL 26755 0 0
26754: END
// export function StreamSibBomb ; var i , x , y ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
// result := false ;
26761: LD_ADDR_VAR 0 1
26765: PUSH
26766: LD_INT 0
26768: ST_TO_ADDR
// for i := 1 to 16 do
26769: LD_ADDR_VAR 0 2
26773: PUSH
26774: DOUBLE
26775: LD_INT 1
26777: DEC
26778: ST_TO_ADDR
26779: LD_INT 16
26781: PUSH
26782: FOR_TO
26783: IFFALSE 26982
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26785: LD_ADDR_VAR 0 3
26789: PUSH
26790: LD_INT 10
26792: PUSH
26793: LD_INT 20
26795: PUSH
26796: LD_INT 30
26798: PUSH
26799: LD_INT 40
26801: PUSH
26802: LD_INT 50
26804: PUSH
26805: LD_INT 60
26807: PUSH
26808: LD_INT 70
26810: PUSH
26811: LD_INT 80
26813: PUSH
26814: LD_INT 90
26816: PUSH
26817: LD_INT 100
26819: PUSH
26820: LD_INT 110
26822: PUSH
26823: LD_INT 120
26825: PUSH
26826: LD_INT 130
26828: PUSH
26829: LD_INT 140
26831: PUSH
26832: LD_INT 150
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: PPUSH
26855: LD_INT 15
26857: PPUSH
26858: CALL_OW 12
26862: ARRAY
26863: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26864: LD_ADDR_VAR 0 4
26868: PUSH
26869: LD_INT 10
26871: PUSH
26872: LD_INT 20
26874: PUSH
26875: LD_INT 30
26877: PUSH
26878: LD_INT 40
26880: PUSH
26881: LD_INT 50
26883: PUSH
26884: LD_INT 60
26886: PUSH
26887: LD_INT 70
26889: PUSH
26890: LD_INT 80
26892: PUSH
26893: LD_INT 90
26895: PUSH
26896: LD_INT 100
26898: PUSH
26899: LD_INT 110
26901: PUSH
26902: LD_INT 120
26904: PUSH
26905: LD_INT 130
26907: PUSH
26908: LD_INT 140
26910: PUSH
26911: LD_INT 150
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: PPUSH
26934: LD_INT 15
26936: PPUSH
26937: CALL_OW 12
26941: ARRAY
26942: ST_TO_ADDR
// if ValidHex ( x , y ) then
26943: LD_VAR 0 3
26947: PPUSH
26948: LD_VAR 0 4
26952: PPUSH
26953: CALL_OW 488
26957: IFFALSE 26980
// begin result := [ x , y ] ;
26959: LD_ADDR_VAR 0 1
26963: PUSH
26964: LD_VAR 0 3
26968: PUSH
26969: LD_VAR 0 4
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: ST_TO_ADDR
// break ;
26978: GO 26982
// end ; end ;
26980: GO 26782
26982: POP
26983: POP
// if result then
26984: LD_VAR 0 1
26988: IFFALSE 27048
// begin ToLua ( playSibBomb() ) ;
26990: LD_STRING playSibBomb()
26992: PPUSH
26993: CALL_OW 559
// wait ( 0 0$14 ) ;
26997: LD_INT 490
26999: PPUSH
27000: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27004: LD_VAR 0 1
27008: PUSH
27009: LD_INT 1
27011: ARRAY
27012: PPUSH
27013: LD_VAR 0 1
27017: PUSH
27018: LD_INT 2
27020: ARRAY
27021: PPUSH
27022: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27026: LD_VAR 0 1
27030: PUSH
27031: LD_INT 1
27033: ARRAY
27034: PPUSH
27035: LD_VAR 0 1
27039: PUSH
27040: LD_INT 2
27042: ARRAY
27043: PPUSH
27044: CALL_OW 429
// end ; end ;
27048: LD_VAR 0 1
27052: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27053: LD_EXP 71
27057: PUSH
27058: LD_EXP 93
27062: AND
27063: IFFALSE 27075
27065: GO 27067
27067: DISABLE
// YouLost (  ) ;
27068: LD_STRING 
27070: PPUSH
27071: CALL_OW 104
27075: END
// every 0 0$1 trigger StreamModeActive and sFog do
27076: LD_EXP 71
27080: PUSH
27081: LD_EXP 92
27085: AND
27086: IFFALSE 27100
27088: GO 27090
27090: DISABLE
// FogOff ( your_side ) ;
27091: LD_OWVAR 2
27095: PPUSH
27096: CALL_OW 344
27100: END
// every 0 0$1 trigger StreamModeActive and sSun do
27101: LD_EXP 71
27105: PUSH
27106: LD_EXP 94
27110: AND
27111: IFFALSE 27139
27113: GO 27115
27115: DISABLE
// begin solar_recharge_percent := 0 ;
27116: LD_ADDR_OWVAR 79
27120: PUSH
27121: LD_INT 0
27123: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27124: LD_INT 10500
27126: PPUSH
27127: CALL_OW 67
// solar_recharge_percent := 100 ;
27131: LD_ADDR_OWVAR 79
27135: PUSH
27136: LD_INT 100
27138: ST_TO_ADDR
// end ;
27139: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27140: LD_EXP 71
27144: PUSH
27145: LD_EXP 95
27149: AND
27150: IFFALSE 27389
27152: GO 27154
27154: DISABLE
27155: LD_INT 0
27157: PPUSH
27158: PPUSH
27159: PPUSH
// begin tmp := [ ] ;
27160: LD_ADDR_VAR 0 3
27164: PUSH
27165: EMPTY
27166: ST_TO_ADDR
// for i := 1 to 6 do
27167: LD_ADDR_VAR 0 1
27171: PUSH
27172: DOUBLE
27173: LD_INT 1
27175: DEC
27176: ST_TO_ADDR
27177: LD_INT 6
27179: PUSH
27180: FOR_TO
27181: IFFALSE 27286
// begin uc_nation := nation_nature ;
27183: LD_ADDR_OWVAR 21
27187: PUSH
27188: LD_INT 0
27190: ST_TO_ADDR
// uc_side := 0 ;
27191: LD_ADDR_OWVAR 20
27195: PUSH
27196: LD_INT 0
27198: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27199: LD_ADDR_OWVAR 29
27203: PUSH
27204: LD_INT 12
27206: PUSH
27207: LD_INT 12
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// hc_agressivity := 20 ;
27214: LD_ADDR_OWVAR 35
27218: PUSH
27219: LD_INT 20
27221: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27222: LD_ADDR_OWVAR 28
27226: PUSH
27227: LD_INT 17
27229: ST_TO_ADDR
// hc_gallery :=  ;
27230: LD_ADDR_OWVAR 33
27234: PUSH
27235: LD_STRING 
27237: ST_TO_ADDR
// hc_name :=  ;
27238: LD_ADDR_OWVAR 26
27242: PUSH
27243: LD_STRING 
27245: ST_TO_ADDR
// un := CreateHuman ;
27246: LD_ADDR_VAR 0 2
27250: PUSH
27251: CALL_OW 44
27255: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27256: LD_VAR 0 2
27260: PPUSH
27261: LD_INT 1
27263: PPUSH
27264: CALL_OW 51
// tmp := tmp ^ un ;
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: LD_VAR 0 3
27277: PUSH
27278: LD_VAR 0 2
27282: ADD
27283: ST_TO_ADDR
// end ;
27284: GO 27180
27286: POP
27287: POP
// repeat wait ( 0 0$1 ) ;
27288: LD_INT 35
27290: PPUSH
27291: CALL_OW 67
// for un in tmp do
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: LD_VAR 0 3
27304: PUSH
27305: FOR_IN
27306: IFFALSE 27380
// begin if IsDead ( un ) then
27308: LD_VAR 0 2
27312: PPUSH
27313: CALL_OW 301
27317: IFFALSE 27337
// begin tmp := tmp diff un ;
27319: LD_ADDR_VAR 0 3
27323: PUSH
27324: LD_VAR 0 3
27328: PUSH
27329: LD_VAR 0 2
27333: DIFF
27334: ST_TO_ADDR
// continue ;
27335: GO 27305
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27337: LD_VAR 0 2
27341: PPUSH
27342: LD_INT 3
27344: PUSH
27345: LD_INT 22
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PPUSH
27359: CALL_OW 69
27363: PPUSH
27364: LD_VAR 0 2
27368: PPUSH
27369: CALL_OW 74
27373: PPUSH
27374: CALL_OW 115
// end ;
27378: GO 27305
27380: POP
27381: POP
// until not tmp ;
27382: LD_VAR 0 3
27386: NOT
27387: IFFALSE 27288
// end ;
27389: PPOPN 3
27391: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27392: LD_EXP 71
27396: PUSH
27397: LD_EXP 96
27401: AND
27402: IFFALSE 27456
27404: GO 27406
27406: DISABLE
// begin ToLua ( displayTroll(); ) ;
27407: LD_STRING displayTroll();
27409: PPUSH
27410: CALL_OW 559
// wait ( 3 3$00 ) ;
27414: LD_INT 6300
27416: PPUSH
27417: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27421: LD_STRING hideTroll();
27423: PPUSH
27424: CALL_OW 559
// wait ( 1 1$00 ) ;
27428: LD_INT 2100
27430: PPUSH
27431: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27435: LD_STRING displayTroll();
27437: PPUSH
27438: CALL_OW 559
// wait ( 1 1$00 ) ;
27442: LD_INT 2100
27444: PPUSH
27445: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27449: LD_STRING hideTroll();
27451: PPUSH
27452: CALL_OW 559
// end ;
27456: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27457: LD_EXP 71
27461: PUSH
27462: LD_EXP 97
27466: AND
27467: IFFALSE 27530
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
// begin p := 0 ;
27475: LD_ADDR_VAR 0 1
27479: PUSH
27480: LD_INT 0
27482: ST_TO_ADDR
// repeat game_speed := 1 ;
27483: LD_ADDR_OWVAR 65
27487: PUSH
27488: LD_INT 1
27490: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27491: LD_INT 35
27493: PPUSH
27494: CALL_OW 67
// p := p + 1 ;
27498: LD_ADDR_VAR 0 1
27502: PUSH
27503: LD_VAR 0 1
27507: PUSH
27508: LD_INT 1
27510: PLUS
27511: ST_TO_ADDR
// until p >= 60 ;
27512: LD_VAR 0 1
27516: PUSH
27517: LD_INT 60
27519: GREATEREQUAL
27520: IFFALSE 27483
// game_speed := 4 ;
27522: LD_ADDR_OWVAR 65
27526: PUSH
27527: LD_INT 4
27529: ST_TO_ADDR
// end ;
27530: PPOPN 1
27532: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27533: LD_EXP 71
27537: PUSH
27538: LD_EXP 98
27542: AND
27543: IFFALSE 27689
27545: GO 27547
27547: DISABLE
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27552: LD_ADDR_VAR 0 1
27556: PUSH
27557: LD_INT 22
27559: PUSH
27560: LD_OWVAR 2
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: LD_INT 30
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 30
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: ST_TO_ADDR
// if not depot then
27606: LD_VAR 0 1
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 27689
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: LD_VAR 0 1
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_VAR 0 1
27632: PPUSH
27633: CALL_OW 12
27637: ARRAY
27638: PPUSH
27639: CALL_OW 274
27643: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27644: LD_VAR 0 2
27648: PPUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_INT 0
27654: PPUSH
27655: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27659: LD_VAR 0 2
27663: PPUSH
27664: LD_INT 2
27666: PPUSH
27667: LD_INT 0
27669: PPUSH
27670: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27674: LD_VAR 0 2
27678: PPUSH
27679: LD_INT 3
27681: PPUSH
27682: LD_INT 0
27684: PPUSH
27685: CALL_OW 277
// end ;
27689: PPOPN 2
27691: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27692: LD_EXP 71
27696: PUSH
27697: LD_EXP 99
27701: AND
27702: IFFALSE 27799
27704: GO 27706
27706: DISABLE
27707: LD_INT 0
27709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27710: LD_ADDR_VAR 0 1
27714: PUSH
27715: LD_INT 22
27717: PUSH
27718: LD_OWVAR 2
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 21
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 3
27739: PUSH
27740: LD_INT 23
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: PPUSH
27759: CALL_OW 69
27763: ST_TO_ADDR
// if not tmp then
27764: LD_VAR 0 1
27768: NOT
27769: IFFALSE 27773
// exit ;
27771: GO 27799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27773: LD_VAR 0 1
27777: PUSH
27778: LD_INT 1
27780: PPUSH
27781: LD_VAR 0 1
27785: PPUSH
27786: CALL_OW 12
27790: ARRAY
27791: PPUSH
27792: LD_INT 200
27794: PPUSH
27795: CALL_OW 234
// end ;
27799: PPOPN 1
27801: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27802: LD_EXP 71
27806: PUSH
27807: LD_EXP 100
27811: AND
27812: IFFALSE 27891
27814: GO 27816
27816: DISABLE
27817: LD_INT 0
27819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27820: LD_ADDR_VAR 0 1
27824: PUSH
27825: LD_INT 22
27827: PUSH
27828: LD_OWVAR 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 21
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PPUSH
27851: CALL_OW 69
27855: ST_TO_ADDR
// if not tmp then
27856: LD_VAR 0 1
27860: NOT
27861: IFFALSE 27865
// exit ;
27863: GO 27891
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27865: LD_VAR 0 1
27869: PUSH
27870: LD_INT 1
27872: PPUSH
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 12
27882: ARRAY
27883: PPUSH
27884: LD_INT 60
27886: PPUSH
27887: CALL_OW 234
// end ;
27891: PPOPN 1
27893: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27894: LD_EXP 71
27898: PUSH
27899: LD_EXP 101
27903: AND
27904: IFFALSE 28003
27906: GO 27908
27908: DISABLE
27909: LD_INT 0
27911: PPUSH
27912: PPUSH
// begin enable ;
27913: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27914: LD_ADDR_VAR 0 1
27918: PUSH
27919: LD_INT 22
27921: PUSH
27922: LD_OWVAR 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 61
27933: PUSH
27934: EMPTY
27935: LIST
27936: PUSH
27937: LD_INT 33
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: PPUSH
27952: CALL_OW 69
27956: ST_TO_ADDR
// if not tmp then
27957: LD_VAR 0 1
27961: NOT
27962: IFFALSE 27966
// exit ;
27964: GO 28003
// for i in tmp do
27966: LD_ADDR_VAR 0 2
27970: PUSH
27971: LD_VAR 0 1
27975: PUSH
27976: FOR_IN
27977: IFFALSE 28001
// if IsControledBy ( i ) then
27979: LD_VAR 0 2
27983: PPUSH
27984: CALL_OW 312
27988: IFFALSE 27999
// ComUnlink ( i ) ;
27990: LD_VAR 0 2
27994: PPUSH
27995: CALL_OW 136
27999: GO 27976
28001: POP
28002: POP
// end ;
28003: PPOPN 2
28005: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28006: LD_EXP 71
28010: PUSH
28011: LD_EXP 102
28015: AND
28016: IFFALSE 28156
28018: GO 28020
28020: DISABLE
28021: LD_INT 0
28023: PPUSH
28024: PPUSH
// begin ToLua ( displayPowell(); ) ;
28025: LD_STRING displayPowell();
28027: PPUSH
28028: CALL_OW 559
// uc_side := 0 ;
28032: LD_ADDR_OWVAR 20
28036: PUSH
28037: LD_INT 0
28039: ST_TO_ADDR
// uc_nation := 2 ;
28040: LD_ADDR_OWVAR 21
28044: PUSH
28045: LD_INT 2
28047: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28048: LD_ADDR_OWVAR 37
28052: PUSH
28053: LD_INT 14
28055: ST_TO_ADDR
// vc_engine := engine_siberite ;
28056: LD_ADDR_OWVAR 39
28060: PUSH
28061: LD_INT 3
28063: ST_TO_ADDR
// vc_control := control_apeman ;
28064: LD_ADDR_OWVAR 38
28068: PUSH
28069: LD_INT 5
28071: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28072: LD_ADDR_OWVAR 40
28076: PUSH
28077: LD_INT 29
28079: ST_TO_ADDR
// un := CreateVehicle ;
28080: LD_ADDR_VAR 0 2
28084: PUSH
28085: CALL_OW 45
28089: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28090: LD_VAR 0 2
28094: PPUSH
28095: LD_INT 1
28097: PPUSH
28098: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28102: LD_INT 35
28104: PPUSH
28105: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28109: LD_VAR 0 2
28113: PPUSH
28114: LD_INT 22
28116: PUSH
28117: LD_OWVAR 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PPUSH
28126: CALL_OW 69
28130: PPUSH
28131: LD_VAR 0 2
28135: PPUSH
28136: CALL_OW 74
28140: PPUSH
28141: CALL_OW 115
// until IsDead ( un ) ;
28145: LD_VAR 0 2
28149: PPUSH
28150: CALL_OW 301
28154: IFFALSE 28102
// end ;
28156: PPOPN 2
28158: END
// every 0 0$1 trigger StreamModeActive and sStu do
28159: LD_EXP 71
28163: PUSH
28164: LD_EXP 110
28168: AND
28169: IFFALSE 28185
28171: GO 28173
28173: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28174: LD_STRING displayStucuk();
28176: PPUSH
28177: CALL_OW 559
// ResetFog ;
28181: CALL_OW 335
// end ;
28185: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28186: LD_EXP 71
28190: PUSH
28191: LD_EXP 103
28195: AND
28196: IFFALSE 28337
28198: GO 28200
28200: DISABLE
28201: LD_INT 0
28203: PPUSH
28204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28205: LD_ADDR_VAR 0 2
28209: PUSH
28210: LD_INT 22
28212: PUSH
28213: LD_OWVAR 2
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 21
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PPUSH
28236: CALL_OW 69
28240: ST_TO_ADDR
// if not tmp then
28241: LD_VAR 0 2
28245: NOT
28246: IFFALSE 28250
// exit ;
28248: GO 28337
// un := tmp [ rand ( 1 , tmp ) ] ;
28250: LD_ADDR_VAR 0 1
28254: PUSH
28255: LD_VAR 0 2
28259: PUSH
28260: LD_INT 1
28262: PPUSH
28263: LD_VAR 0 2
28267: PPUSH
28268: CALL_OW 12
28272: ARRAY
28273: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28274: LD_VAR 0 1
28278: PPUSH
28279: LD_INT 0
28281: PPUSH
28282: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28286: LD_VAR 0 1
28290: PPUSH
28291: LD_OWVAR 3
28295: PUSH
28296: LD_VAR 0 1
28300: DIFF
28301: PPUSH
28302: LD_VAR 0 1
28306: PPUSH
28307: CALL_OW 74
28311: PPUSH
28312: CALL_OW 115
// wait ( 0 0$20 ) ;
28316: LD_INT 700
28318: PPUSH
28319: CALL_OW 67
// SetSide ( un , your_side ) ;
28323: LD_VAR 0 1
28327: PPUSH
28328: LD_OWVAR 2
28332: PPUSH
28333: CALL_OW 235
// end ;
28337: PPOPN 2
28339: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28340: LD_EXP 71
28344: PUSH
28345: LD_EXP 104
28349: AND
28350: IFFALSE 28456
28352: GO 28354
28354: DISABLE
28355: LD_INT 0
28357: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28358: LD_ADDR_VAR 0 1
28362: PUSH
28363: LD_INT 22
28365: PUSH
28366: LD_OWVAR 2
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 2
28377: PUSH
28378: LD_INT 30
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 30
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PPUSH
28407: CALL_OW 69
28411: ST_TO_ADDR
// if not depot then
28412: LD_VAR 0 1
28416: NOT
28417: IFFALSE 28421
// exit ;
28419: GO 28456
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28421: LD_VAR 0 1
28425: PUSH
28426: LD_INT 1
28428: ARRAY
28429: PPUSH
28430: CALL_OW 250
28434: PPUSH
28435: LD_VAR 0 1
28439: PUSH
28440: LD_INT 1
28442: ARRAY
28443: PPUSH
28444: CALL_OW 251
28448: PPUSH
28449: LD_INT 70
28451: PPUSH
28452: CALL_OW 495
// end ;
28456: PPOPN 1
28458: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28459: LD_EXP 71
28463: PUSH
28464: LD_EXP 105
28468: AND
28469: IFFALSE 28680
28471: GO 28473
28473: DISABLE
28474: LD_INT 0
28476: PPUSH
28477: PPUSH
28478: PPUSH
28479: PPUSH
28480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28481: LD_ADDR_VAR 0 5
28485: PUSH
28486: LD_INT 22
28488: PUSH
28489: LD_OWVAR 2
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 21
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PPUSH
28512: CALL_OW 69
28516: ST_TO_ADDR
// if not tmp then
28517: LD_VAR 0 5
28521: NOT
28522: IFFALSE 28526
// exit ;
28524: GO 28680
// for i in tmp do
28526: LD_ADDR_VAR 0 1
28530: PUSH
28531: LD_VAR 0 5
28535: PUSH
28536: FOR_IN
28537: IFFALSE 28678
// begin d := rand ( 0 , 5 ) ;
28539: LD_ADDR_VAR 0 4
28543: PUSH
28544: LD_INT 0
28546: PPUSH
28547: LD_INT 5
28549: PPUSH
28550: CALL_OW 12
28554: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28555: LD_ADDR_VAR 0 2
28559: PUSH
28560: LD_VAR 0 1
28564: PPUSH
28565: CALL_OW 250
28569: PPUSH
28570: LD_VAR 0 4
28574: PPUSH
28575: LD_INT 3
28577: PPUSH
28578: LD_INT 12
28580: PPUSH
28581: CALL_OW 12
28585: PPUSH
28586: CALL_OW 272
28590: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: LD_VAR 0 1
28600: PPUSH
28601: CALL_OW 251
28605: PPUSH
28606: LD_VAR 0 4
28610: PPUSH
28611: LD_INT 3
28613: PPUSH
28614: LD_INT 12
28616: PPUSH
28617: CALL_OW 12
28621: PPUSH
28622: CALL_OW 273
28626: ST_TO_ADDR
// if ValidHex ( x , y ) then
28627: LD_VAR 0 2
28631: PPUSH
28632: LD_VAR 0 3
28636: PPUSH
28637: CALL_OW 488
28641: IFFALSE 28676
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28643: LD_VAR 0 1
28647: PPUSH
28648: LD_VAR 0 2
28652: PPUSH
28653: LD_VAR 0 3
28657: PPUSH
28658: LD_INT 3
28660: PPUSH
28661: LD_INT 6
28663: PPUSH
28664: CALL_OW 12
28668: PPUSH
28669: LD_INT 1
28671: PPUSH
28672: CALL_OW 483
// end ;
28676: GO 28536
28678: POP
28679: POP
// end ;
28680: PPOPN 5
28682: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28683: LD_EXP 71
28687: PUSH
28688: LD_EXP 106
28692: AND
28693: IFFALSE 28787
28695: GO 28697
28697: DISABLE
28698: LD_INT 0
28700: PPUSH
28701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28702: LD_ADDR_VAR 0 2
28706: PUSH
28707: LD_INT 22
28709: PUSH
28710: LD_OWVAR 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 32
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 21
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: PPUSH
28744: CALL_OW 69
28748: ST_TO_ADDR
// if not tmp then
28749: LD_VAR 0 2
28753: NOT
28754: IFFALSE 28758
// exit ;
28756: GO 28787
// for i in tmp do
28758: LD_ADDR_VAR 0 1
28762: PUSH
28763: LD_VAR 0 2
28767: PUSH
28768: FOR_IN
28769: IFFALSE 28785
// SetFuel ( i , 0 ) ;
28771: LD_VAR 0 1
28775: PPUSH
28776: LD_INT 0
28778: PPUSH
28779: CALL_OW 240
28783: GO 28768
28785: POP
28786: POP
// end ;
28787: PPOPN 2
28789: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28790: LD_EXP 71
28794: PUSH
28795: LD_EXP 107
28799: AND
28800: IFFALSE 28866
28802: GO 28804
28804: DISABLE
28805: LD_INT 0
28807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_INT 22
28815: PUSH
28816: LD_OWVAR 2
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 30
28827: PUSH
28828: LD_INT 29
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 1
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 28866
// DestroyUnit ( tmp [ 1 ] ) ;
28853: LD_VAR 0 1
28857: PUSH
28858: LD_INT 1
28860: ARRAY
28861: PPUSH
28862: CALL_OW 65
// end ;
28866: PPOPN 1
28868: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28869: LD_EXP 71
28873: PUSH
28874: LD_EXP 109
28878: AND
28879: IFFALSE 29008
28881: GO 28883
28883: DISABLE
28884: LD_INT 0
28886: PPUSH
// begin uc_side := 0 ;
28887: LD_ADDR_OWVAR 20
28891: PUSH
28892: LD_INT 0
28894: ST_TO_ADDR
// uc_nation := nation_arabian ;
28895: LD_ADDR_OWVAR 21
28899: PUSH
28900: LD_INT 2
28902: ST_TO_ADDR
// hc_gallery :=  ;
28903: LD_ADDR_OWVAR 33
28907: PUSH
28908: LD_STRING 
28910: ST_TO_ADDR
// hc_name :=  ;
28911: LD_ADDR_OWVAR 26
28915: PUSH
28916: LD_STRING 
28918: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28919: LD_INT 1
28921: PPUSH
28922: LD_INT 11
28924: PPUSH
28925: LD_INT 10
28927: PPUSH
28928: CALL_OW 380
// un := CreateHuman ;
28932: LD_ADDR_VAR 0 1
28936: PUSH
28937: CALL_OW 44
28941: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28942: LD_VAR 0 1
28946: PPUSH
28947: LD_INT 1
28949: PPUSH
28950: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28954: LD_INT 35
28956: PPUSH
28957: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28961: LD_VAR 0 1
28965: PPUSH
28966: LD_INT 22
28968: PUSH
28969: LD_OWVAR 2
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PPUSH
28978: CALL_OW 69
28982: PPUSH
28983: LD_VAR 0 1
28987: PPUSH
28988: CALL_OW 74
28992: PPUSH
28993: CALL_OW 115
// until IsDead ( un ) ;
28997: LD_VAR 0 1
29001: PPUSH
29002: CALL_OW 301
29006: IFFALSE 28954
// end ;
29008: PPOPN 1
29010: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29011: LD_EXP 71
29015: PUSH
29016: LD_EXP 111
29020: AND
29021: IFFALSE 29033
29023: GO 29025
29025: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29026: LD_STRING earthquake(getX(game), 0, 32)
29028: PPUSH
29029: CALL_OW 559
29033: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29034: LD_EXP 71
29038: PUSH
29039: LD_EXP 112
29043: AND
29044: IFFALSE 29135
29046: GO 29048
29048: DISABLE
29049: LD_INT 0
29051: PPUSH
// begin enable ;
29052: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29053: LD_ADDR_VAR 0 1
29057: PUSH
29058: LD_INT 22
29060: PUSH
29061: LD_OWVAR 2
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 21
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 33
29082: PUSH
29083: LD_INT 3
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: LIST
29094: PPUSH
29095: CALL_OW 69
29099: ST_TO_ADDR
// if not tmp then
29100: LD_VAR 0 1
29104: NOT
29105: IFFALSE 29109
// exit ;
29107: GO 29135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29109: LD_VAR 0 1
29113: PUSH
29114: LD_INT 1
29116: PPUSH
29117: LD_VAR 0 1
29121: PPUSH
29122: CALL_OW 12
29126: ARRAY
29127: PPUSH
29128: LD_INT 1
29130: PPUSH
29131: CALL_OW 234
// end ;
29135: PPOPN 1
29137: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29138: LD_EXP 71
29142: PUSH
29143: LD_EXP 113
29147: AND
29148: IFFALSE 29289
29150: GO 29152
29152: DISABLE
29153: LD_INT 0
29155: PPUSH
29156: PPUSH
29157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29158: LD_ADDR_VAR 0 3
29162: PUSH
29163: LD_INT 22
29165: PUSH
29166: LD_OWVAR 2
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 25
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PPUSH
29189: CALL_OW 69
29193: ST_TO_ADDR
// if not tmp then
29194: LD_VAR 0 3
29198: NOT
29199: IFFALSE 29203
// exit ;
29201: GO 29289
// un := tmp [ rand ( 1 , tmp ) ] ;
29203: LD_ADDR_VAR 0 2
29207: PUSH
29208: LD_VAR 0 3
29212: PUSH
29213: LD_INT 1
29215: PPUSH
29216: LD_VAR 0 3
29220: PPUSH
29221: CALL_OW 12
29225: ARRAY
29226: ST_TO_ADDR
// if Crawls ( un ) then
29227: LD_VAR 0 2
29231: PPUSH
29232: CALL_OW 318
29236: IFFALSE 29247
// ComWalk ( un ) ;
29238: LD_VAR 0 2
29242: PPUSH
29243: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29247: LD_VAR 0 2
29251: PPUSH
29252: LD_INT 9
29254: PPUSH
29255: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29259: LD_INT 28
29261: PPUSH
29262: LD_OWVAR 2
29266: PPUSH
29267: LD_INT 2
29269: PPUSH
29270: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29274: LD_INT 29
29276: PPUSH
29277: LD_OWVAR 2
29281: PPUSH
29282: LD_INT 2
29284: PPUSH
29285: CALL_OW 322
// end ;
29289: PPOPN 3
29291: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29292: LD_EXP 71
29296: PUSH
29297: LD_EXP 114
29301: AND
29302: IFFALSE 29413
29304: GO 29306
29306: DISABLE
29307: LD_INT 0
29309: PPUSH
29310: PPUSH
29311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29312: LD_ADDR_VAR 0 3
29316: PUSH
29317: LD_INT 22
29319: PUSH
29320: LD_OWVAR 2
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 25
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PPUSH
29343: CALL_OW 69
29347: ST_TO_ADDR
// if not tmp then
29348: LD_VAR 0 3
29352: NOT
29353: IFFALSE 29357
// exit ;
29355: GO 29413
// un := tmp [ rand ( 1 , tmp ) ] ;
29357: LD_ADDR_VAR 0 2
29361: PUSH
29362: LD_VAR 0 3
29366: PUSH
29367: LD_INT 1
29369: PPUSH
29370: LD_VAR 0 3
29374: PPUSH
29375: CALL_OW 12
29379: ARRAY
29380: ST_TO_ADDR
// if Crawls ( un ) then
29381: LD_VAR 0 2
29385: PPUSH
29386: CALL_OW 318
29390: IFFALSE 29401
// ComWalk ( un ) ;
29392: LD_VAR 0 2
29396: PPUSH
29397: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29401: LD_VAR 0 2
29405: PPUSH
29406: LD_INT 8
29408: PPUSH
29409: CALL_OW 336
// end ;
29413: PPOPN 3
29415: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29416: LD_EXP 71
29420: PUSH
29421: LD_EXP 115
29425: AND
29426: IFFALSE 29570
29428: GO 29430
29430: DISABLE
29431: LD_INT 0
29433: PPUSH
29434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29435: LD_ADDR_VAR 0 2
29439: PUSH
29440: LD_INT 22
29442: PUSH
29443: LD_OWVAR 2
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 21
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: LD_INT 34
29467: PUSH
29468: LD_INT 12
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 34
29477: PUSH
29478: LD_INT 51
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 34
29487: PUSH
29488: LD_INT 32
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: PPUSH
29506: CALL_OW 69
29510: ST_TO_ADDR
// if not tmp then
29511: LD_VAR 0 2
29515: NOT
29516: IFFALSE 29520
// exit ;
29518: GO 29570
// for i in tmp do
29520: LD_ADDR_VAR 0 1
29524: PUSH
29525: LD_VAR 0 2
29529: PUSH
29530: FOR_IN
29531: IFFALSE 29568
// if GetCargo ( i , mat_artifact ) = 0 then
29533: LD_VAR 0 1
29537: PPUSH
29538: LD_INT 4
29540: PPUSH
29541: CALL_OW 289
29545: PUSH
29546: LD_INT 0
29548: EQUAL
29549: IFFALSE 29566
// SetCargo ( i , mat_siberit , 100 ) ;
29551: LD_VAR 0 1
29555: PPUSH
29556: LD_INT 3
29558: PPUSH
29559: LD_INT 100
29561: PPUSH
29562: CALL_OW 290
29566: GO 29530
29568: POP
29569: POP
// end ;
29570: PPOPN 2
29572: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29573: LD_EXP 71
29577: PUSH
29578: LD_EXP 116
29582: AND
29583: IFFALSE 29766
29585: GO 29587
29587: DISABLE
29588: LD_INT 0
29590: PPUSH
29591: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29592: LD_ADDR_VAR 0 2
29596: PUSH
29597: LD_INT 22
29599: PUSH
29600: LD_OWVAR 2
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PPUSH
29609: CALL_OW 69
29613: ST_TO_ADDR
// if not tmp then
29614: LD_VAR 0 2
29618: NOT
29619: IFFALSE 29623
// exit ;
29621: GO 29766
// for i := 1 to 2 do
29623: LD_ADDR_VAR 0 1
29627: PUSH
29628: DOUBLE
29629: LD_INT 1
29631: DEC
29632: ST_TO_ADDR
29633: LD_INT 2
29635: PUSH
29636: FOR_TO
29637: IFFALSE 29764
// begin uc_side := your_side ;
29639: LD_ADDR_OWVAR 20
29643: PUSH
29644: LD_OWVAR 2
29648: ST_TO_ADDR
// uc_nation := nation_american ;
29649: LD_ADDR_OWVAR 21
29653: PUSH
29654: LD_INT 1
29656: ST_TO_ADDR
// vc_chassis := us_morphling ;
29657: LD_ADDR_OWVAR 37
29661: PUSH
29662: LD_INT 5
29664: ST_TO_ADDR
// vc_engine := engine_siberite ;
29665: LD_ADDR_OWVAR 39
29669: PUSH
29670: LD_INT 3
29672: ST_TO_ADDR
// vc_control := control_computer ;
29673: LD_ADDR_OWVAR 38
29677: PUSH
29678: LD_INT 3
29680: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29681: LD_ADDR_OWVAR 40
29685: PUSH
29686: LD_INT 10
29688: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29689: LD_VAR 0 2
29693: PUSH
29694: LD_INT 1
29696: ARRAY
29697: PPUSH
29698: CALL_OW 310
29702: NOT
29703: IFFALSE 29750
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29705: CALL_OW 45
29709: PPUSH
29710: LD_VAR 0 2
29714: PUSH
29715: LD_INT 1
29717: ARRAY
29718: PPUSH
29719: CALL_OW 250
29723: PPUSH
29724: LD_VAR 0 2
29728: PUSH
29729: LD_INT 1
29731: ARRAY
29732: PPUSH
29733: CALL_OW 251
29737: PPUSH
29738: LD_INT 12
29740: PPUSH
29741: LD_INT 1
29743: PPUSH
29744: CALL_OW 50
29748: GO 29762
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29750: CALL_OW 45
29754: PPUSH
29755: LD_INT 1
29757: PPUSH
29758: CALL_OW 51
// end ;
29762: GO 29636
29764: POP
29765: POP
// end ;
29766: PPOPN 2
29768: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29769: LD_EXP 71
29773: PUSH
29774: LD_EXP 117
29778: AND
29779: IFFALSE 30001
29781: GO 29783
29783: DISABLE
29784: LD_INT 0
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29792: LD_ADDR_VAR 0 6
29796: PUSH
29797: LD_INT 22
29799: PUSH
29800: LD_OWVAR 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 21
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 3
29821: PUSH
29822: LD_INT 23
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: PPUSH
29841: CALL_OW 69
29845: ST_TO_ADDR
// if not tmp then
29846: LD_VAR 0 6
29850: NOT
29851: IFFALSE 29855
// exit ;
29853: GO 30001
// s1 := rand ( 1 , 4 ) ;
29855: LD_ADDR_VAR 0 2
29859: PUSH
29860: LD_INT 1
29862: PPUSH
29863: LD_INT 4
29865: PPUSH
29866: CALL_OW 12
29870: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29871: LD_ADDR_VAR 0 4
29875: PUSH
29876: LD_VAR 0 6
29880: PUSH
29881: LD_INT 1
29883: ARRAY
29884: PPUSH
29885: LD_VAR 0 2
29889: PPUSH
29890: CALL_OW 259
29894: ST_TO_ADDR
// if s1 = 1 then
29895: LD_VAR 0 2
29899: PUSH
29900: LD_INT 1
29902: EQUAL
29903: IFFALSE 29923
// s2 := rand ( 2 , 4 ) else
29905: LD_ADDR_VAR 0 3
29909: PUSH
29910: LD_INT 2
29912: PPUSH
29913: LD_INT 4
29915: PPUSH
29916: CALL_OW 12
29920: ST_TO_ADDR
29921: GO 29931
// s2 := 1 ;
29923: LD_ADDR_VAR 0 3
29927: PUSH
29928: LD_INT 1
29930: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29931: LD_ADDR_VAR 0 5
29935: PUSH
29936: LD_VAR 0 6
29940: PUSH
29941: LD_INT 1
29943: ARRAY
29944: PPUSH
29945: LD_VAR 0 3
29949: PPUSH
29950: CALL_OW 259
29954: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29955: LD_VAR 0 6
29959: PUSH
29960: LD_INT 1
29962: ARRAY
29963: PPUSH
29964: LD_VAR 0 2
29968: PPUSH
29969: LD_VAR 0 5
29973: PPUSH
29974: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29978: LD_VAR 0 6
29982: PUSH
29983: LD_INT 1
29985: ARRAY
29986: PPUSH
29987: LD_VAR 0 3
29991: PPUSH
29992: LD_VAR 0 4
29996: PPUSH
29997: CALL_OW 237
// end ;
30001: PPOPN 6
30003: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30004: LD_EXP 71
30008: PUSH
30009: LD_EXP 118
30013: AND
30014: IFFALSE 30093
30016: GO 30018
30018: DISABLE
30019: LD_INT 0
30021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30022: LD_ADDR_VAR 0 1
30026: PUSH
30027: LD_INT 22
30029: PUSH
30030: LD_OWVAR 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 30
30041: PUSH
30042: LD_INT 3
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PPUSH
30053: CALL_OW 69
30057: ST_TO_ADDR
// if not tmp then
30058: LD_VAR 0 1
30062: NOT
30063: IFFALSE 30067
// exit ;
30065: GO 30093
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30067: LD_VAR 0 1
30071: PUSH
30072: LD_INT 1
30074: PPUSH
30075: LD_VAR 0 1
30079: PPUSH
30080: CALL_OW 12
30084: ARRAY
30085: PPUSH
30086: LD_INT 1
30088: PPUSH
30089: CALL_OW 234
// end ;
30093: PPOPN 1
30095: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30096: LD_EXP 71
30100: PUSH
30101: LD_EXP 119
30105: AND
30106: IFFALSE 30218
30108: GO 30110
30110: DISABLE
30111: LD_INT 0
30113: PPUSH
30114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30115: LD_ADDR_VAR 0 2
30119: PUSH
30120: LD_INT 22
30122: PUSH
30123: LD_OWVAR 2
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 2
30134: PUSH
30135: LD_INT 30
30137: PUSH
30138: LD_INT 27
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 30
30147: PUSH
30148: LD_INT 26
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 30
30157: PUSH
30158: LD_INT 28
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PPUSH
30175: CALL_OW 69
30179: ST_TO_ADDR
// if not tmp then
30180: LD_VAR 0 2
30184: NOT
30185: IFFALSE 30189
// exit ;
30187: GO 30218
// for i in tmp do
30189: LD_ADDR_VAR 0 1
30193: PUSH
30194: LD_VAR 0 2
30198: PUSH
30199: FOR_IN
30200: IFFALSE 30216
// SetLives ( i , 1 ) ;
30202: LD_VAR 0 1
30206: PPUSH
30207: LD_INT 1
30209: PPUSH
30210: CALL_OW 234
30214: GO 30199
30216: POP
30217: POP
// end ;
30218: PPOPN 2
30220: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30221: LD_EXP 71
30225: PUSH
30226: LD_EXP 120
30230: AND
30231: IFFALSE 30518
30233: GO 30235
30235: DISABLE
30236: LD_INT 0
30238: PPUSH
30239: PPUSH
30240: PPUSH
// begin i := rand ( 1 , 7 ) ;
30241: LD_ADDR_VAR 0 1
30245: PUSH
30246: LD_INT 1
30248: PPUSH
30249: LD_INT 7
30251: PPUSH
30252: CALL_OW 12
30256: ST_TO_ADDR
// case i of 1 :
30257: LD_VAR 0 1
30261: PUSH
30262: LD_INT 1
30264: DOUBLE
30265: EQUAL
30266: IFTRUE 30270
30268: GO 30280
30270: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30271: LD_STRING earthquake(getX(game), 0, 32)
30273: PPUSH
30274: CALL_OW 559
30278: GO 30518
30280: LD_INT 2
30282: DOUBLE
30283: EQUAL
30284: IFTRUE 30288
30286: GO 30302
30288: POP
// begin ToLua ( displayStucuk(); ) ;
30289: LD_STRING displayStucuk();
30291: PPUSH
30292: CALL_OW 559
// ResetFog ;
30296: CALL_OW 335
// end ; 3 :
30300: GO 30518
30302: LD_INT 3
30304: DOUBLE
30305: EQUAL
30306: IFTRUE 30310
30308: GO 30414
30310: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30311: LD_ADDR_VAR 0 2
30315: PUSH
30316: LD_INT 22
30318: PUSH
30319: LD_OWVAR 2
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 25
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PPUSH
30342: CALL_OW 69
30346: ST_TO_ADDR
// if not tmp then
30347: LD_VAR 0 2
30351: NOT
30352: IFFALSE 30356
// exit ;
30354: GO 30518
// un := tmp [ rand ( 1 , tmp ) ] ;
30356: LD_ADDR_VAR 0 3
30360: PUSH
30361: LD_VAR 0 2
30365: PUSH
30366: LD_INT 1
30368: PPUSH
30369: LD_VAR 0 2
30373: PPUSH
30374: CALL_OW 12
30378: ARRAY
30379: ST_TO_ADDR
// if Crawls ( un ) then
30380: LD_VAR 0 3
30384: PPUSH
30385: CALL_OW 318
30389: IFFALSE 30400
// ComWalk ( un ) ;
30391: LD_VAR 0 3
30395: PPUSH
30396: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30400: LD_VAR 0 3
30404: PPUSH
30405: LD_INT 8
30407: PPUSH
30408: CALL_OW 336
// end ; 4 :
30412: GO 30518
30414: LD_INT 4
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30496
30422: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30423: LD_ADDR_VAR 0 2
30427: PUSH
30428: LD_INT 22
30430: PUSH
30431: LD_OWVAR 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 30
30442: PUSH
30443: LD_INT 29
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 69
30458: ST_TO_ADDR
// if not tmp then
30459: LD_VAR 0 2
30463: NOT
30464: IFFALSE 30468
// exit ;
30466: GO 30518
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30468: LD_VAR 0 2
30472: PUSH
30473: LD_INT 1
30475: ARRAY
30476: PPUSH
30477: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30481: LD_VAR 0 2
30485: PUSH
30486: LD_INT 1
30488: ARRAY
30489: PPUSH
30490: CALL_OW 65
// end ; 5 .. 7 :
30494: GO 30518
30496: LD_INT 5
30498: DOUBLE
30499: GREATEREQUAL
30500: IFFALSE 30508
30502: LD_INT 7
30504: DOUBLE
30505: LESSEQUAL
30506: IFTRUE 30510
30508: GO 30517
30510: POP
// StreamSibBomb ; end ;
30511: CALL 26755 0 0
30515: GO 30518
30517: POP
// end ;
30518: PPOPN 3
30520: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30521: LD_EXP 71
30525: PUSH
30526: LD_EXP 121
30530: AND
30531: IFFALSE 30687
30533: GO 30535
30535: DISABLE
30536: LD_INT 0
30538: PPUSH
30539: PPUSH
30540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30541: LD_ADDR_VAR 0 2
30545: PUSH
30546: LD_INT 81
30548: PUSH
30549: LD_OWVAR 2
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: LD_INT 21
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 21
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PPUSH
30590: CALL_OW 69
30594: ST_TO_ADDR
// if not tmp then
30595: LD_VAR 0 2
30599: NOT
30600: IFFALSE 30604
// exit ;
30602: GO 30687
// p := 0 ;
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_INT 0
30611: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30612: LD_INT 35
30614: PPUSH
30615: CALL_OW 67
// p := p + 1 ;
30619: LD_ADDR_VAR 0 3
30623: PUSH
30624: LD_VAR 0 3
30628: PUSH
30629: LD_INT 1
30631: PLUS
30632: ST_TO_ADDR
// for i in tmp do
30633: LD_ADDR_VAR 0 1
30637: PUSH
30638: LD_VAR 0 2
30642: PUSH
30643: FOR_IN
30644: IFFALSE 30675
// if GetLives ( i ) < 1000 then
30646: LD_VAR 0 1
30650: PPUSH
30651: CALL_OW 256
30655: PUSH
30656: LD_INT 1000
30658: LESS
30659: IFFALSE 30673
// SetLives ( i , 1000 ) ;
30661: LD_VAR 0 1
30665: PPUSH
30666: LD_INT 1000
30668: PPUSH
30669: CALL_OW 234
30673: GO 30643
30675: POP
30676: POP
// until p > 20 ;
30677: LD_VAR 0 3
30681: PUSH
30682: LD_INT 20
30684: GREATER
30685: IFFALSE 30612
// end ;
30687: PPOPN 3
30689: END
// every 0 0$1 trigger StreamModeActive and sTime do
30690: LD_EXP 71
30694: PUSH
30695: LD_EXP 122
30699: AND
30700: IFFALSE 30735
30702: GO 30704
30704: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30705: LD_INT 28
30707: PPUSH
30708: LD_OWVAR 2
30712: PPUSH
30713: LD_INT 2
30715: PPUSH
30716: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30720: LD_INT 30
30722: PPUSH
30723: LD_OWVAR 2
30727: PPUSH
30728: LD_INT 2
30730: PPUSH
30731: CALL_OW 322
// end ;
30735: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30736: LD_EXP 71
30740: PUSH
30741: LD_EXP 123
30745: AND
30746: IFFALSE 30867
30748: GO 30750
30750: DISABLE
30751: LD_INT 0
30753: PPUSH
30754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30755: LD_ADDR_VAR 0 2
30759: PUSH
30760: LD_INT 22
30762: PUSH
30763: LD_OWVAR 2
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 21
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: LD_INT 23
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: LIST
30803: PPUSH
30804: CALL_OW 69
30808: ST_TO_ADDR
// if not tmp then
30809: LD_VAR 0 2
30813: NOT
30814: IFFALSE 30818
// exit ;
30816: GO 30867
// for i in tmp do
30818: LD_ADDR_VAR 0 1
30822: PUSH
30823: LD_VAR 0 2
30827: PUSH
30828: FOR_IN
30829: IFFALSE 30865
// begin if Crawls ( i ) then
30831: LD_VAR 0 1
30835: PPUSH
30836: CALL_OW 318
30840: IFFALSE 30851
// ComWalk ( i ) ;
30842: LD_VAR 0 1
30846: PPUSH
30847: CALL_OW 138
// SetClass ( i , 2 ) ;
30851: LD_VAR 0 1
30855: PPUSH
30856: LD_INT 2
30858: PPUSH
30859: CALL_OW 336
// end ;
30863: GO 30828
30865: POP
30866: POP
// end ;
30867: PPOPN 2
30869: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30870: LD_EXP 71
30874: PUSH
30875: LD_EXP 124
30879: AND
30880: IFFALSE 31168
30882: GO 30884
30884: DISABLE
30885: LD_INT 0
30887: PPUSH
30888: PPUSH
30889: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30890: LD_OWVAR 2
30894: PPUSH
30895: LD_INT 9
30897: PPUSH
30898: LD_INT 1
30900: PPUSH
30901: LD_INT 1
30903: PPUSH
30904: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30908: LD_INT 9
30910: PPUSH
30911: LD_OWVAR 2
30915: PPUSH
30916: CALL_OW 343
// uc_side := 9 ;
30920: LD_ADDR_OWVAR 20
30924: PUSH
30925: LD_INT 9
30927: ST_TO_ADDR
// uc_nation := 2 ;
30928: LD_ADDR_OWVAR 21
30932: PUSH
30933: LD_INT 2
30935: ST_TO_ADDR
// hc_name := Dark Warrior ;
30936: LD_ADDR_OWVAR 26
30940: PUSH
30941: LD_STRING Dark Warrior
30943: ST_TO_ADDR
// hc_gallery :=  ;
30944: LD_ADDR_OWVAR 33
30948: PUSH
30949: LD_STRING 
30951: ST_TO_ADDR
// hc_noskilllimit := true ;
30952: LD_ADDR_OWVAR 76
30956: PUSH
30957: LD_INT 1
30959: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30960: LD_ADDR_OWVAR 31
30964: PUSH
30965: LD_INT 30
30967: PUSH
30968: LD_INT 30
30970: PUSH
30971: LD_INT 30
30973: PUSH
30974: LD_INT 30
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: ST_TO_ADDR
// un := CreateHuman ;
30983: LD_ADDR_VAR 0 3
30987: PUSH
30988: CALL_OW 44
30992: ST_TO_ADDR
// hc_noskilllimit := false ;
30993: LD_ADDR_OWVAR 76
30997: PUSH
30998: LD_INT 0
31000: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31001: LD_VAR 0 3
31005: PPUSH
31006: LD_INT 1
31008: PPUSH
31009: CALL_OW 51
// ToLua ( playRanger() ) ;
31013: LD_STRING playRanger()
31015: PPUSH
31016: CALL_OW 559
// p := 0 ;
31020: LD_ADDR_VAR 0 2
31024: PUSH
31025: LD_INT 0
31027: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31028: LD_INT 35
31030: PPUSH
31031: CALL_OW 67
// p := p + 1 ;
31035: LD_ADDR_VAR 0 2
31039: PUSH
31040: LD_VAR 0 2
31044: PUSH
31045: LD_INT 1
31047: PLUS
31048: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31049: LD_VAR 0 3
31053: PPUSH
31054: CALL_OW 256
31058: PUSH
31059: LD_INT 1000
31061: LESS
31062: IFFALSE 31076
// SetLives ( un , 1000 ) ;
31064: LD_VAR 0 3
31068: PPUSH
31069: LD_INT 1000
31071: PPUSH
31072: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31076: LD_VAR 0 3
31080: PPUSH
31081: LD_INT 81
31083: PUSH
31084: LD_OWVAR 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 91
31095: PUSH
31096: LD_VAR 0 3
31100: PUSH
31101: LD_INT 30
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PPUSH
31113: CALL_OW 69
31117: PPUSH
31118: LD_VAR 0 3
31122: PPUSH
31123: CALL_OW 74
31127: PPUSH
31128: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31132: LD_VAR 0 2
31136: PUSH
31137: LD_INT 80
31139: GREATER
31140: PUSH
31141: LD_VAR 0 3
31145: PPUSH
31146: CALL_OW 301
31150: OR
31151: IFFALSE 31028
// if un then
31153: LD_VAR 0 3
31157: IFFALSE 31168
// RemoveUnit ( un ) ;
31159: LD_VAR 0 3
31163: PPUSH
31164: CALL_OW 64
// end ;
31168: PPOPN 3
31170: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31171: LD_EXP 125
31175: IFFALSE 31291
31177: GO 31179
31179: DISABLE
31180: LD_INT 0
31182: PPUSH
31183: PPUSH
31184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31185: LD_ADDR_VAR 0 2
31189: PUSH
31190: LD_INT 81
31192: PUSH
31193: LD_OWVAR 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 21
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PPUSH
31216: CALL_OW 69
31220: ST_TO_ADDR
// if not tmp then
31221: LD_VAR 0 2
31225: NOT
31226: IFFALSE 31230
// exit ;
31228: GO 31291
// ToLua ( playComputer() ) ;
31230: LD_STRING playComputer()
31232: PPUSH
31233: CALL_OW 559
// for i in tmp do
31237: LD_ADDR_VAR 0 1
31241: PUSH
31242: LD_VAR 0 2
31246: PUSH
31247: FOR_IN
31248: IFFALSE 31289
// for j := 1 to 4 do
31250: LD_ADDR_VAR 0 3
31254: PUSH
31255: DOUBLE
31256: LD_INT 1
31258: DEC
31259: ST_TO_ADDR
31260: LD_INT 4
31262: PUSH
31263: FOR_TO
31264: IFFALSE 31285
// SetSkill ( i , j , 10 ) ;
31266: LD_VAR 0 1
31270: PPUSH
31271: LD_VAR 0 3
31275: PPUSH
31276: LD_INT 10
31278: PPUSH
31279: CALL_OW 237
31283: GO 31263
31285: POP
31286: POP
31287: GO 31247
31289: POP
31290: POP
// end ;
31291: PPOPN 3
31293: END
// every 0 0$1 trigger s30 do var i , tmp ;
31294: LD_EXP 126
31298: IFFALSE 31367
31300: GO 31302
31302: DISABLE
31303: LD_INT 0
31305: PPUSH
31306: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31307: LD_ADDR_VAR 0 2
31311: PUSH
31312: LD_INT 22
31314: PUSH
31315: LD_OWVAR 2
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PPUSH
31324: CALL_OW 69
31328: ST_TO_ADDR
// if not tmp then
31329: LD_VAR 0 2
31333: NOT
31334: IFFALSE 31338
// exit ;
31336: GO 31367
// for i in tmp do
31338: LD_ADDR_VAR 0 1
31342: PUSH
31343: LD_VAR 0 2
31347: PUSH
31348: FOR_IN
31349: IFFALSE 31365
// SetLives ( i , 300 ) ;
31351: LD_VAR 0 1
31355: PPUSH
31356: LD_INT 300
31358: PPUSH
31359: CALL_OW 234
31363: GO 31348
31365: POP
31366: POP
// end ;
31367: PPOPN 2
31369: END
// every 0 0$1 trigger s60 do var i , tmp ;
31370: LD_EXP 127
31374: IFFALSE 31443
31376: GO 31378
31378: DISABLE
31379: LD_INT 0
31381: PPUSH
31382: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31383: LD_ADDR_VAR 0 2
31387: PUSH
31388: LD_INT 22
31390: PUSH
31391: LD_OWVAR 2
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PPUSH
31400: CALL_OW 69
31404: ST_TO_ADDR
// if not tmp then
31405: LD_VAR 0 2
31409: NOT
31410: IFFALSE 31414
// exit ;
31412: GO 31443
// for i in tmp do
31414: LD_ADDR_VAR 0 1
31418: PUSH
31419: LD_VAR 0 2
31423: PUSH
31424: FOR_IN
31425: IFFALSE 31441
// SetLives ( i , 600 ) ;
31427: LD_VAR 0 1
31431: PPUSH
31432: LD_INT 600
31434: PPUSH
31435: CALL_OW 234
31439: GO 31424
31441: POP
31442: POP
// end ;
31443: PPOPN 2
31445: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31446: LD_INT 0
31448: PPUSH
// case cmd of 301 :
31449: LD_VAR 0 1
31453: PUSH
31454: LD_INT 301
31456: DOUBLE
31457: EQUAL
31458: IFTRUE 31462
31460: GO 31494
31462: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31463: LD_VAR 0 6
31467: PPUSH
31468: LD_VAR 0 7
31472: PPUSH
31473: LD_VAR 0 8
31477: PPUSH
31478: LD_VAR 0 4
31482: PPUSH
31483: LD_VAR 0 5
31487: PPUSH
31488: CALL 32695 0 5
31492: GO 31615
31494: LD_INT 302
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31539
31502: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31503: LD_VAR 0 6
31507: PPUSH
31508: LD_VAR 0 7
31512: PPUSH
31513: LD_VAR 0 8
31517: PPUSH
31518: LD_VAR 0 9
31522: PPUSH
31523: LD_VAR 0 4
31527: PPUSH
31528: LD_VAR 0 5
31532: PPUSH
31533: CALL 32786 0 6
31537: GO 31615
31539: LD_INT 303
31541: DOUBLE
31542: EQUAL
31543: IFTRUE 31547
31545: GO 31584
31547: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31548: LD_VAR 0 6
31552: PPUSH
31553: LD_VAR 0 7
31557: PPUSH
31558: LD_VAR 0 8
31562: PPUSH
31563: LD_VAR 0 9
31567: PPUSH
31568: LD_VAR 0 4
31572: PPUSH
31573: LD_VAR 0 5
31577: PPUSH
31578: CALL 31620 0 6
31582: GO 31615
31584: LD_INT 304
31586: DOUBLE
31587: EQUAL
31588: IFTRUE 31592
31590: GO 31614
31592: POP
// hHackTeleport ( unit , x , y ) ; end ;
31593: LD_VAR 0 2
31597: PPUSH
31598: LD_VAR 0 4
31602: PPUSH
31603: LD_VAR 0 5
31607: PPUSH
31608: CALL 33379 0 3
31612: GO 31615
31614: POP
// end ;
31615: LD_VAR 0 12
31619: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31620: LD_INT 0
31622: PPUSH
31623: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31624: LD_VAR 0 1
31628: PUSH
31629: LD_INT 1
31631: LESS
31632: PUSH
31633: LD_VAR 0 1
31637: PUSH
31638: LD_INT 3
31640: GREATER
31641: OR
31642: PUSH
31643: LD_VAR 0 5
31647: PPUSH
31648: LD_VAR 0 6
31652: PPUSH
31653: CALL_OW 428
31657: OR
31658: IFFALSE 31662
// exit ;
31660: GO 32382
// uc_side := your_side ;
31662: LD_ADDR_OWVAR 20
31666: PUSH
31667: LD_OWVAR 2
31671: ST_TO_ADDR
// uc_nation := nation ;
31672: LD_ADDR_OWVAR 21
31676: PUSH
31677: LD_VAR 0 1
31681: ST_TO_ADDR
// bc_level = 1 ;
31682: LD_ADDR_OWVAR 43
31686: PUSH
31687: LD_INT 1
31689: ST_TO_ADDR
// case btype of 1 :
31690: LD_VAR 0 2
31694: PUSH
31695: LD_INT 1
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 31714
31703: POP
// bc_type := b_depot ; 2 :
31704: LD_ADDR_OWVAR 42
31708: PUSH
31709: LD_INT 0
31711: ST_TO_ADDR
31712: GO 32326
31714: LD_INT 2
31716: DOUBLE
31717: EQUAL
31718: IFTRUE 31722
31720: GO 31733
31722: POP
// bc_type := b_warehouse ; 3 :
31723: LD_ADDR_OWVAR 42
31727: PUSH
31728: LD_INT 1
31730: ST_TO_ADDR
31731: GO 32326
31733: LD_INT 3
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31741
31739: GO 31752
31741: POP
// bc_type := b_lab ; 4 .. 9 :
31742: LD_ADDR_OWVAR 42
31746: PUSH
31747: LD_INT 6
31749: ST_TO_ADDR
31750: GO 32326
31752: LD_INT 4
31754: DOUBLE
31755: GREATEREQUAL
31756: IFFALSE 31764
31758: LD_INT 9
31760: DOUBLE
31761: LESSEQUAL
31762: IFTRUE 31766
31764: GO 31818
31766: POP
// begin bc_type := b_lab_half ;
31767: LD_ADDR_OWVAR 42
31771: PUSH
31772: LD_INT 7
31774: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31775: LD_ADDR_OWVAR 44
31779: PUSH
31780: LD_INT 10
31782: PUSH
31783: LD_INT 11
31785: PUSH
31786: LD_INT 12
31788: PUSH
31789: LD_INT 15
31791: PUSH
31792: LD_INT 14
31794: PUSH
31795: LD_INT 13
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: PUSH
31806: LD_VAR 0 2
31810: PUSH
31811: LD_INT 3
31813: MINUS
31814: ARRAY
31815: ST_TO_ADDR
// end ; 10 .. 13 :
31816: GO 32326
31818: LD_INT 10
31820: DOUBLE
31821: GREATEREQUAL
31822: IFFALSE 31830
31824: LD_INT 13
31826: DOUBLE
31827: LESSEQUAL
31828: IFTRUE 31832
31830: GO 31909
31832: POP
// begin bc_type := b_lab_full ;
31833: LD_ADDR_OWVAR 42
31837: PUSH
31838: LD_INT 8
31840: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31841: LD_ADDR_OWVAR 44
31845: PUSH
31846: LD_INT 10
31848: PUSH
31849: LD_INT 12
31851: PUSH
31852: LD_INT 14
31854: PUSH
31855: LD_INT 13
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: PUSH
31864: LD_VAR 0 2
31868: PUSH
31869: LD_INT 9
31871: MINUS
31872: ARRAY
31873: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31874: LD_ADDR_OWVAR 45
31878: PUSH
31879: LD_INT 11
31881: PUSH
31882: LD_INT 15
31884: PUSH
31885: LD_INT 12
31887: PUSH
31888: LD_INT 15
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: PUSH
31897: LD_VAR 0 2
31901: PUSH
31902: LD_INT 9
31904: MINUS
31905: ARRAY
31906: ST_TO_ADDR
// end ; 14 :
31907: GO 32326
31909: LD_INT 14
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 31928
31917: POP
// bc_type := b_workshop ; 15 :
31918: LD_ADDR_OWVAR 42
31922: PUSH
31923: LD_INT 2
31925: ST_TO_ADDR
31926: GO 32326
31928: LD_INT 15
31930: DOUBLE
31931: EQUAL
31932: IFTRUE 31936
31934: GO 31947
31936: POP
// bc_type := b_factory ; 16 :
31937: LD_ADDR_OWVAR 42
31941: PUSH
31942: LD_INT 3
31944: ST_TO_ADDR
31945: GO 32326
31947: LD_INT 16
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31966
31955: POP
// bc_type := b_ext_gun ; 17 :
31956: LD_ADDR_OWVAR 42
31960: PUSH
31961: LD_INT 17
31963: ST_TO_ADDR
31964: GO 32326
31966: LD_INT 17
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 32002
31974: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31975: LD_ADDR_OWVAR 42
31979: PUSH
31980: LD_INT 19
31982: PUSH
31983: LD_INT 23
31985: PUSH
31986: LD_INT 19
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: LIST
31993: PUSH
31994: LD_VAR 0 1
31998: ARRAY
31999: ST_TO_ADDR
32000: GO 32326
32002: LD_INT 18
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32021
32010: POP
// bc_type := b_ext_radar ; 19 :
32011: LD_ADDR_OWVAR 42
32015: PUSH
32016: LD_INT 20
32018: ST_TO_ADDR
32019: GO 32326
32021: LD_INT 19
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32040
32029: POP
// bc_type := b_ext_radio ; 20 :
32030: LD_ADDR_OWVAR 42
32034: PUSH
32035: LD_INT 22
32037: ST_TO_ADDR
32038: GO 32326
32040: LD_INT 20
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32059
32048: POP
// bc_type := b_ext_siberium ; 21 :
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 21
32056: ST_TO_ADDR
32057: GO 32326
32059: LD_INT 21
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32078
32067: POP
// bc_type := b_ext_computer ; 22 :
32068: LD_ADDR_OWVAR 42
32072: PUSH
32073: LD_INT 24
32075: ST_TO_ADDR
32076: GO 32326
32078: LD_INT 22
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32097
32086: POP
// bc_type := b_ext_track ; 23 :
32087: LD_ADDR_OWVAR 42
32091: PUSH
32092: LD_INT 16
32094: ST_TO_ADDR
32095: GO 32326
32097: LD_INT 23
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32116
32105: POP
// bc_type := b_ext_laser ; 24 :
32106: LD_ADDR_OWVAR 42
32110: PUSH
32111: LD_INT 25
32113: ST_TO_ADDR
32114: GO 32326
32116: LD_INT 24
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32135
32124: POP
// bc_type := b_control_tower ; 25 :
32125: LD_ADDR_OWVAR 42
32129: PUSH
32130: LD_INT 36
32132: ST_TO_ADDR
32133: GO 32326
32135: LD_INT 25
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32154
32143: POP
// bc_type := b_breastwork ; 26 :
32144: LD_ADDR_OWVAR 42
32148: PUSH
32149: LD_INT 31
32151: ST_TO_ADDR
32152: GO 32326
32154: LD_INT 26
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32173
32162: POP
// bc_type := b_bunker ; 27 :
32163: LD_ADDR_OWVAR 42
32167: PUSH
32168: LD_INT 32
32170: ST_TO_ADDR
32171: GO 32326
32173: LD_INT 27
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32192
32181: POP
// bc_type := b_turret ; 28 :
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 33
32189: ST_TO_ADDR
32190: GO 32326
32192: LD_INT 28
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32211
32200: POP
// bc_type := b_armoury ; 29 :
32201: LD_ADDR_OWVAR 42
32205: PUSH
32206: LD_INT 4
32208: ST_TO_ADDR
32209: GO 32326
32211: LD_INT 29
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32230
32219: POP
// bc_type := b_barracks ; 30 :
32220: LD_ADDR_OWVAR 42
32224: PUSH
32225: LD_INT 5
32227: ST_TO_ADDR
32228: GO 32326
32230: LD_INT 30
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// bc_type := b_solar_power ; 31 :
32239: LD_ADDR_OWVAR 42
32243: PUSH
32244: LD_INT 27
32246: ST_TO_ADDR
32247: GO 32326
32249: LD_INT 31
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// bc_type := b_oil_power ; 32 :
32258: LD_ADDR_OWVAR 42
32262: PUSH
32263: LD_INT 26
32265: ST_TO_ADDR
32266: GO 32326
32268: LD_INT 32
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32287
32276: POP
// bc_type := b_siberite_power ; 33 :
32277: LD_ADDR_OWVAR 42
32281: PUSH
32282: LD_INT 28
32284: ST_TO_ADDR
32285: GO 32326
32287: LD_INT 33
32289: DOUBLE
32290: EQUAL
32291: IFTRUE 32295
32293: GO 32306
32295: POP
// bc_type := b_oil_mine ; 34 :
32296: LD_ADDR_OWVAR 42
32300: PUSH
32301: LD_INT 29
32303: ST_TO_ADDR
32304: GO 32326
32306: LD_INT 34
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32314
32312: GO 32325
32314: POP
// bc_type := b_siberite_mine ; end ;
32315: LD_ADDR_OWVAR 42
32319: PUSH
32320: LD_INT 30
32322: ST_TO_ADDR
32323: GO 32326
32325: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32326: LD_ADDR_VAR 0 8
32330: PUSH
32331: LD_VAR 0 5
32335: PPUSH
32336: LD_VAR 0 6
32340: PPUSH
32341: LD_VAR 0 3
32345: PPUSH
32346: CALL_OW 47
32350: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32351: LD_OWVAR 42
32355: PUSH
32356: LD_INT 32
32358: PUSH
32359: LD_INT 33
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: IN
32366: IFFALSE 32382
// PlaceWeaponTurret ( b , weapon ) ;
32368: LD_VAR 0 8
32372: PPUSH
32373: LD_VAR 0 4
32377: PPUSH
32378: CALL_OW 431
// end ;
32382: LD_VAR 0 7
32386: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32387: LD_INT 0
32389: PPUSH
32390: PPUSH
32391: PPUSH
32392: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32393: LD_ADDR_VAR 0 4
32397: PUSH
32398: LD_INT 22
32400: PUSH
32401: LD_OWVAR 2
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 30
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 30
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PPUSH
32442: CALL_OW 69
32446: ST_TO_ADDR
// if not tmp then
32447: LD_VAR 0 4
32451: NOT
32452: IFFALSE 32456
// exit ;
32454: GO 32515
// for i in tmp do
32456: LD_ADDR_VAR 0 2
32460: PUSH
32461: LD_VAR 0 4
32465: PUSH
32466: FOR_IN
32467: IFFALSE 32513
// for j = 1 to 3 do
32469: LD_ADDR_VAR 0 3
32473: PUSH
32474: DOUBLE
32475: LD_INT 1
32477: DEC
32478: ST_TO_ADDR
32479: LD_INT 3
32481: PUSH
32482: FOR_TO
32483: IFFALSE 32509
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32485: LD_VAR 0 2
32489: PPUSH
32490: CALL_OW 274
32494: PPUSH
32495: LD_VAR 0 3
32499: PPUSH
32500: LD_INT 99999
32502: PPUSH
32503: CALL_OW 277
32507: GO 32482
32509: POP
32510: POP
32511: GO 32466
32513: POP
32514: POP
// end ;
32515: LD_VAR 0 1
32519: RET
// export function hHackSetLevel10 ; var i , j ; begin
32520: LD_INT 0
32522: PPUSH
32523: PPUSH
32524: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32525: LD_ADDR_VAR 0 2
32529: PUSH
32530: LD_INT 21
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PPUSH
32540: CALL_OW 69
32544: PUSH
32545: FOR_IN
32546: IFFALSE 32598
// if IsSelected ( i ) then
32548: LD_VAR 0 2
32552: PPUSH
32553: CALL_OW 306
32557: IFFALSE 32596
// begin for j := 1 to 4 do
32559: LD_ADDR_VAR 0 3
32563: PUSH
32564: DOUBLE
32565: LD_INT 1
32567: DEC
32568: ST_TO_ADDR
32569: LD_INT 4
32571: PUSH
32572: FOR_TO
32573: IFFALSE 32594
// SetSkill ( i , j , 10 ) ;
32575: LD_VAR 0 2
32579: PPUSH
32580: LD_VAR 0 3
32584: PPUSH
32585: LD_INT 10
32587: PPUSH
32588: CALL_OW 237
32592: GO 32572
32594: POP
32595: POP
// end ;
32596: GO 32545
32598: POP
32599: POP
// end ;
32600: LD_VAR 0 1
32604: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32605: LD_INT 0
32607: PPUSH
32608: PPUSH
32609: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32610: LD_ADDR_VAR 0 2
32614: PUSH
32615: LD_INT 22
32617: PUSH
32618: LD_OWVAR 2
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 21
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PPUSH
32641: CALL_OW 69
32645: PUSH
32646: FOR_IN
32647: IFFALSE 32688
// begin for j := 1 to 4 do
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: DOUBLE
32655: LD_INT 1
32657: DEC
32658: ST_TO_ADDR
32659: LD_INT 4
32661: PUSH
32662: FOR_TO
32663: IFFALSE 32684
// SetSkill ( i , j , 10 ) ;
32665: LD_VAR 0 2
32669: PPUSH
32670: LD_VAR 0 3
32674: PPUSH
32675: LD_INT 10
32677: PPUSH
32678: CALL_OW 237
32682: GO 32662
32684: POP
32685: POP
// end ;
32686: GO 32646
32688: POP
32689: POP
// end ;
32690: LD_VAR 0 1
32694: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32695: LD_INT 0
32697: PPUSH
// uc_side := your_side ;
32698: LD_ADDR_OWVAR 20
32702: PUSH
32703: LD_OWVAR 2
32707: ST_TO_ADDR
// uc_nation := nation ;
32708: LD_ADDR_OWVAR 21
32712: PUSH
32713: LD_VAR 0 1
32717: ST_TO_ADDR
// InitHc ;
32718: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32722: LD_INT 0
32724: PPUSH
32725: LD_VAR 0 2
32729: PPUSH
32730: LD_VAR 0 3
32734: PPUSH
32735: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32739: LD_VAR 0 4
32743: PPUSH
32744: LD_VAR 0 5
32748: PPUSH
32749: CALL_OW 428
32753: PUSH
32754: LD_INT 0
32756: EQUAL
32757: IFFALSE 32781
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32759: CALL_OW 44
32763: PPUSH
32764: LD_VAR 0 4
32768: PPUSH
32769: LD_VAR 0 5
32773: PPUSH
32774: LD_INT 1
32776: PPUSH
32777: CALL_OW 48
// end ;
32781: LD_VAR 0 6
32785: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32786: LD_INT 0
32788: PPUSH
32789: PPUSH
// uc_side := your_side ;
32790: LD_ADDR_OWVAR 20
32794: PUSH
32795: LD_OWVAR 2
32799: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32800: LD_VAR 0 1
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: LD_INT 4
32816: PUSH
32817: LD_INT 5
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: IN
32827: IFFALSE 32839
// uc_nation := nation_american else
32829: LD_ADDR_OWVAR 21
32833: PUSH
32834: LD_INT 1
32836: ST_TO_ADDR
32837: GO 32882
// if chassis in [ 11 , 12 , 13 , 14 ] then
32839: LD_VAR 0 1
32843: PUSH
32844: LD_INT 11
32846: PUSH
32847: LD_INT 12
32849: PUSH
32850: LD_INT 13
32852: PUSH
32853: LD_INT 14
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: IN
32862: IFFALSE 32874
// uc_nation := nation_arabian else
32864: LD_ADDR_OWVAR 21
32868: PUSH
32869: LD_INT 2
32871: ST_TO_ADDR
32872: GO 32882
// uc_nation := nation_russian ;
32874: LD_ADDR_OWVAR 21
32878: PUSH
32879: LD_INT 3
32881: ST_TO_ADDR
// vc_chassis := chassis ;
32882: LD_ADDR_OWVAR 37
32886: PUSH
32887: LD_VAR 0 1
32891: ST_TO_ADDR
// vc_engine := engine ;
32892: LD_ADDR_OWVAR 39
32896: PUSH
32897: LD_VAR 0 2
32901: ST_TO_ADDR
// vc_control := control ;
32902: LD_ADDR_OWVAR 38
32906: PUSH
32907: LD_VAR 0 3
32911: ST_TO_ADDR
// vc_weapon := weapon ;
32912: LD_ADDR_OWVAR 40
32916: PUSH
32917: LD_VAR 0 4
32921: ST_TO_ADDR
// un := CreateVehicle ;
32922: LD_ADDR_VAR 0 8
32926: PUSH
32927: CALL_OW 45
32931: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32932: LD_VAR 0 8
32936: PPUSH
32937: LD_INT 0
32939: PPUSH
32940: LD_INT 5
32942: PPUSH
32943: CALL_OW 12
32947: PPUSH
32948: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32952: LD_VAR 0 8
32956: PPUSH
32957: LD_VAR 0 5
32961: PPUSH
32962: LD_VAR 0 6
32966: PPUSH
32967: LD_INT 1
32969: PPUSH
32970: CALL_OW 48
// end ;
32974: LD_VAR 0 7
32978: RET
// export hInvincible ; every 1 do
32979: GO 32981
32981: DISABLE
// hInvincible := [ ] ;
32982: LD_ADDR_EXP 128
32986: PUSH
32987: EMPTY
32988: ST_TO_ADDR
32989: END
// every 10 do var i ;
32990: GO 32992
32992: DISABLE
32993: LD_INT 0
32995: PPUSH
// begin enable ;
32996: ENABLE
// if not hInvincible then
32997: LD_EXP 128
33001: NOT
33002: IFFALSE 33006
// exit ;
33004: GO 33050
// for i in hInvincible do
33006: LD_ADDR_VAR 0 1
33010: PUSH
33011: LD_EXP 128
33015: PUSH
33016: FOR_IN
33017: IFFALSE 33048
// if GetLives ( i ) < 1000 then
33019: LD_VAR 0 1
33023: PPUSH
33024: CALL_OW 256
33028: PUSH
33029: LD_INT 1000
33031: LESS
33032: IFFALSE 33046
// SetLives ( i , 1000 ) ;
33034: LD_VAR 0 1
33038: PPUSH
33039: LD_INT 1000
33041: PPUSH
33042: CALL_OW 234
33046: GO 33016
33048: POP
33049: POP
// end ;
33050: PPOPN 1
33052: END
// export function hHackInvincible ; var i ; begin
33053: LD_INT 0
33055: PPUSH
33056: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33057: LD_ADDR_VAR 0 2
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 21
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 21
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 69
33094: PUSH
33095: FOR_IN
33096: IFFALSE 33157
// if IsSelected ( i ) then
33098: LD_VAR 0 2
33102: PPUSH
33103: CALL_OW 306
33107: IFFALSE 33155
// begin if i in hInvincible then
33109: LD_VAR 0 2
33113: PUSH
33114: LD_EXP 128
33118: IN
33119: IFFALSE 33139
// hInvincible := hInvincible diff i else
33121: LD_ADDR_EXP 128
33125: PUSH
33126: LD_EXP 128
33130: PUSH
33131: LD_VAR 0 2
33135: DIFF
33136: ST_TO_ADDR
33137: GO 33155
// hInvincible := hInvincible union i ;
33139: LD_ADDR_EXP 128
33143: PUSH
33144: LD_EXP 128
33148: PUSH
33149: LD_VAR 0 2
33153: UNION
33154: ST_TO_ADDR
// end ;
33155: GO 33095
33157: POP
33158: POP
// end ;
33159: LD_VAR 0 1
33163: RET
// export function hHackInvisible ; var i , j ; begin
33164: LD_INT 0
33166: PPUSH
33167: PPUSH
33168: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33169: LD_ADDR_VAR 0 2
33173: PUSH
33174: LD_INT 21
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PPUSH
33184: CALL_OW 69
33188: PUSH
33189: FOR_IN
33190: IFFALSE 33214
// if IsSelected ( i ) then
33192: LD_VAR 0 2
33196: PPUSH
33197: CALL_OW 306
33201: IFFALSE 33212
// ComForceInvisible ( i ) ;
33203: LD_VAR 0 2
33207: PPUSH
33208: CALL_OW 496
33212: GO 33189
33214: POP
33215: POP
// end ;
33216: LD_VAR 0 1
33220: RET
// export function hHackChangeYourSide ; begin
33221: LD_INT 0
33223: PPUSH
// if your_side = 8 then
33224: LD_OWVAR 2
33228: PUSH
33229: LD_INT 8
33231: EQUAL
33232: IFFALSE 33244
// your_side := 0 else
33234: LD_ADDR_OWVAR 2
33238: PUSH
33239: LD_INT 0
33241: ST_TO_ADDR
33242: GO 33258
// your_side := your_side + 1 ;
33244: LD_ADDR_OWVAR 2
33248: PUSH
33249: LD_OWVAR 2
33253: PUSH
33254: LD_INT 1
33256: PLUS
33257: ST_TO_ADDR
// end ;
33258: LD_VAR 0 1
33262: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33263: LD_INT 0
33265: PPUSH
33266: PPUSH
33267: PPUSH
// for i in all_units do
33268: LD_ADDR_VAR 0 2
33272: PUSH
33273: LD_OWVAR 3
33277: PUSH
33278: FOR_IN
33279: IFFALSE 33357
// if IsSelected ( i ) then
33281: LD_VAR 0 2
33285: PPUSH
33286: CALL_OW 306
33290: IFFALSE 33355
// begin j := GetSide ( i ) ;
33292: LD_ADDR_VAR 0 3
33296: PUSH
33297: LD_VAR 0 2
33301: PPUSH
33302: CALL_OW 255
33306: ST_TO_ADDR
// if j = 8 then
33307: LD_VAR 0 3
33311: PUSH
33312: LD_INT 8
33314: EQUAL
33315: IFFALSE 33327
// j := 0 else
33317: LD_ADDR_VAR 0 3
33321: PUSH
33322: LD_INT 0
33324: ST_TO_ADDR
33325: GO 33341
// j := j + 1 ;
33327: LD_ADDR_VAR 0 3
33331: PUSH
33332: LD_VAR 0 3
33336: PUSH
33337: LD_INT 1
33339: PLUS
33340: ST_TO_ADDR
// SetSide ( i , j ) ;
33341: LD_VAR 0 2
33345: PPUSH
33346: LD_VAR 0 3
33350: PPUSH
33351: CALL_OW 235
// end ;
33355: GO 33278
33357: POP
33358: POP
// end ;
33359: LD_VAR 0 1
33363: RET
// export function hHackFog ; begin
33364: LD_INT 0
33366: PPUSH
// FogOff ( true ) ;
33367: LD_INT 1
33369: PPUSH
33370: CALL_OW 344
// end ;
33374: LD_VAR 0 1
33378: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33379: LD_INT 0
33381: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33382: LD_VAR 0 1
33386: PPUSH
33387: LD_VAR 0 2
33391: PPUSH
33392: LD_VAR 0 3
33396: PPUSH
33397: LD_INT 1
33399: PPUSH
33400: LD_INT 1
33402: PPUSH
33403: CALL_OW 483
// CenterOnXY ( x , y ) ;
33407: LD_VAR 0 2
33411: PPUSH
33412: LD_VAR 0 3
33416: PPUSH
33417: CALL_OW 84
// end ; end_of_file
33421: LD_VAR 0 4
33425: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33426: LD_INT 0
33428: PPUSH
33429: PPUSH
33430: PPUSH
33431: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33432: LD_VAR 0 1
33436: PPUSH
33437: CALL_OW 264
33441: PUSH
33442: LD_EXP 56
33446: EQUAL
33447: IFFALSE 33519
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33449: LD_INT 68
33451: PPUSH
33452: LD_VAR 0 1
33456: PPUSH
33457: CALL_OW 255
33461: PPUSH
33462: CALL_OW 321
33466: PUSH
33467: LD_INT 2
33469: EQUAL
33470: IFFALSE 33482
// eff := 70 else
33472: LD_ADDR_VAR 0 4
33476: PUSH
33477: LD_INT 70
33479: ST_TO_ADDR
33480: GO 33490
// eff := 30 ;
33482: LD_ADDR_VAR 0 4
33486: PUSH
33487: LD_INT 30
33489: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33490: LD_VAR 0 1
33494: PPUSH
33495: CALL_OW 250
33499: PPUSH
33500: LD_VAR 0 1
33504: PPUSH
33505: CALL_OW 251
33509: PPUSH
33510: LD_VAR 0 4
33514: PPUSH
33515: CALL_OW 495
// end ; end ;
33519: LD_VAR 0 2
33523: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33524: LD_INT 0
33526: PPUSH
// end ;
33527: LD_VAR 0 4
33531: RET
// export function SOS_Command ( cmd ) ; begin
33532: LD_INT 0
33534: PPUSH
// end ;
33535: LD_VAR 0 2
33539: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33540: LD_INT 0
33542: PPUSH
// end ;
33543: LD_VAR 0 6
33547: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33548: LD_INT 0
33550: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33551: LD_VAR 0 1
33555: PUSH
33556: LD_INT 250
33558: EQUAL
33559: PUSH
33560: LD_VAR 0 2
33564: PPUSH
33565: CALL_OW 264
33569: PUSH
33570: LD_EXP 59
33574: EQUAL
33575: AND
33576: IFFALSE 33597
// MinerPlaceMine ( unit , x , y ) ;
33578: LD_VAR 0 2
33582: PPUSH
33583: LD_VAR 0 4
33587: PPUSH
33588: LD_VAR 0 5
33592: PPUSH
33593: CALL 35946 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33597: LD_VAR 0 1
33601: PUSH
33602: LD_INT 251
33604: EQUAL
33605: PUSH
33606: LD_VAR 0 2
33610: PPUSH
33611: CALL_OW 264
33615: PUSH
33616: LD_EXP 59
33620: EQUAL
33621: AND
33622: IFFALSE 33643
// MinerDetonateMine ( unit , x , y ) ;
33624: LD_VAR 0 2
33628: PPUSH
33629: LD_VAR 0 4
33633: PPUSH
33634: LD_VAR 0 5
33638: PPUSH
33639: CALL 36223 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33643: LD_VAR 0 1
33647: PUSH
33648: LD_INT 252
33650: EQUAL
33651: PUSH
33652: LD_VAR 0 2
33656: PPUSH
33657: CALL_OW 264
33661: PUSH
33662: LD_EXP 59
33666: EQUAL
33667: AND
33668: IFFALSE 33689
// MinerCreateMinefield ( unit , x , y ) ;
33670: LD_VAR 0 2
33674: PPUSH
33675: LD_VAR 0 4
33679: PPUSH
33680: LD_VAR 0 5
33684: PPUSH
33685: CALL 36640 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33689: LD_VAR 0 1
33693: PUSH
33694: LD_INT 253
33696: EQUAL
33697: PUSH
33698: LD_VAR 0 2
33702: PPUSH
33703: CALL_OW 257
33707: PUSH
33708: LD_INT 5
33710: EQUAL
33711: AND
33712: IFFALSE 33733
// ComBinocular ( unit , x , y ) ;
33714: LD_VAR 0 2
33718: PPUSH
33719: LD_VAR 0 4
33723: PPUSH
33724: LD_VAR 0 5
33728: PPUSH
33729: CALL 37011 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33733: LD_VAR 0 1
33737: PUSH
33738: LD_INT 254
33740: EQUAL
33741: PUSH
33742: LD_VAR 0 2
33746: PPUSH
33747: CALL_OW 264
33751: PUSH
33752: LD_EXP 54
33756: EQUAL
33757: AND
33758: PUSH
33759: LD_VAR 0 3
33763: PPUSH
33764: CALL_OW 263
33768: PUSH
33769: LD_INT 3
33771: EQUAL
33772: AND
33773: IFFALSE 33789
// HackDestroyVehicle ( unit , selectedUnit ) ;
33775: LD_VAR 0 2
33779: PPUSH
33780: LD_VAR 0 3
33784: PPUSH
33785: CALL 35306 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33789: LD_VAR 0 1
33793: PUSH
33794: LD_INT 255
33796: EQUAL
33797: PUSH
33798: LD_VAR 0 2
33802: PPUSH
33803: CALL_OW 264
33807: PUSH
33808: LD_INT 14
33810: PUSH
33811: LD_INT 53
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: IN
33818: AND
33819: PUSH
33820: LD_VAR 0 4
33824: PPUSH
33825: LD_VAR 0 5
33829: PPUSH
33830: CALL_OW 488
33834: AND
33835: IFFALSE 33859
// CutTreeXYR ( unit , x , y , 12 ) ;
33837: LD_VAR 0 2
33841: PPUSH
33842: LD_VAR 0 4
33846: PPUSH
33847: LD_VAR 0 5
33851: PPUSH
33852: LD_INT 12
33854: PPUSH
33855: CALL 33872 0 4
// end ;
33859: LD_VAR 0 6
33863: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33864: LD_INT 0
33866: PPUSH
// end ;
33867: LD_VAR 0 4
33871: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33872: LD_INT 0
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33883: LD_VAR 0 1
33887: NOT
33888: PUSH
33889: LD_VAR 0 2
33893: PPUSH
33894: LD_VAR 0 3
33898: PPUSH
33899: CALL_OW 488
33903: NOT
33904: OR
33905: PUSH
33906: LD_VAR 0 4
33910: NOT
33911: OR
33912: IFFALSE 33916
// exit ;
33914: GO 34256
// list := [ ] ;
33916: LD_ADDR_VAR 0 13
33920: PUSH
33921: EMPTY
33922: ST_TO_ADDR
// if x - r < 0 then
33923: LD_VAR 0 2
33927: PUSH
33928: LD_VAR 0 4
33932: MINUS
33933: PUSH
33934: LD_INT 0
33936: LESS
33937: IFFALSE 33949
// min_x := 0 else
33939: LD_ADDR_VAR 0 7
33943: PUSH
33944: LD_INT 0
33946: ST_TO_ADDR
33947: GO 33965
// min_x := x - r ;
33949: LD_ADDR_VAR 0 7
33953: PUSH
33954: LD_VAR 0 2
33958: PUSH
33959: LD_VAR 0 4
33963: MINUS
33964: ST_TO_ADDR
// if y - r < 0 then
33965: LD_VAR 0 3
33969: PUSH
33970: LD_VAR 0 4
33974: MINUS
33975: PUSH
33976: LD_INT 0
33978: LESS
33979: IFFALSE 33991
// min_y := 0 else
33981: LD_ADDR_VAR 0 8
33985: PUSH
33986: LD_INT 0
33988: ST_TO_ADDR
33989: GO 34007
// min_y := y - r ;
33991: LD_ADDR_VAR 0 8
33995: PUSH
33996: LD_VAR 0 3
34000: PUSH
34001: LD_VAR 0 4
34005: MINUS
34006: ST_TO_ADDR
// max_x := x + r ;
34007: LD_ADDR_VAR 0 9
34011: PUSH
34012: LD_VAR 0 2
34016: PUSH
34017: LD_VAR 0 4
34021: PLUS
34022: ST_TO_ADDR
// max_y := y + r ;
34023: LD_ADDR_VAR 0 10
34027: PUSH
34028: LD_VAR 0 3
34032: PUSH
34033: LD_VAR 0 4
34037: PLUS
34038: ST_TO_ADDR
// for _x = min_x to max_x do
34039: LD_ADDR_VAR 0 11
34043: PUSH
34044: DOUBLE
34045: LD_VAR 0 7
34049: DEC
34050: ST_TO_ADDR
34051: LD_VAR 0 9
34055: PUSH
34056: FOR_TO
34057: IFFALSE 34174
// for _y = min_y to max_y do
34059: LD_ADDR_VAR 0 12
34063: PUSH
34064: DOUBLE
34065: LD_VAR 0 8
34069: DEC
34070: ST_TO_ADDR
34071: LD_VAR 0 10
34075: PUSH
34076: FOR_TO
34077: IFFALSE 34170
// begin if not ValidHex ( _x , _y ) then
34079: LD_VAR 0 11
34083: PPUSH
34084: LD_VAR 0 12
34088: PPUSH
34089: CALL_OW 488
34093: NOT
34094: IFFALSE 34098
// continue ;
34096: GO 34076
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34098: LD_VAR 0 11
34102: PPUSH
34103: LD_VAR 0 12
34107: PPUSH
34108: CALL_OW 351
34112: PUSH
34113: LD_VAR 0 11
34117: PPUSH
34118: LD_VAR 0 12
34122: PPUSH
34123: CALL_OW 554
34127: AND
34128: IFFALSE 34168
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34130: LD_ADDR_VAR 0 13
34134: PUSH
34135: LD_VAR 0 13
34139: PPUSH
34140: LD_VAR 0 13
34144: PUSH
34145: LD_INT 1
34147: PLUS
34148: PPUSH
34149: LD_VAR 0 11
34153: PUSH
34154: LD_VAR 0 12
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PPUSH
34163: CALL_OW 2
34167: ST_TO_ADDR
// end ;
34168: GO 34076
34170: POP
34171: POP
34172: GO 34056
34174: POP
34175: POP
// if not list then
34176: LD_VAR 0 13
34180: NOT
34181: IFFALSE 34185
// exit ;
34183: GO 34256
// for i in list do
34185: LD_ADDR_VAR 0 6
34189: PUSH
34190: LD_VAR 0 13
34194: PUSH
34195: FOR_IN
34196: IFFALSE 34254
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34198: LD_VAR 0 1
34202: PPUSH
34203: LD_STRING M
34205: PUSH
34206: LD_VAR 0 6
34210: PUSH
34211: LD_INT 1
34213: ARRAY
34214: PUSH
34215: LD_VAR 0 6
34219: PUSH
34220: LD_INT 2
34222: ARRAY
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: PPUSH
34248: CALL_OW 447
34252: GO 34195
34254: POP
34255: POP
// end ;
34256: LD_VAR 0 5
34260: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34261: LD_EXP 131
34265: NOT
34266: IFFALSE 34316
34268: GO 34270
34270: DISABLE
// begin initHack := true ;
34271: LD_ADDR_EXP 131
34275: PUSH
34276: LD_INT 1
34278: ST_TO_ADDR
// hackTanks := [ ] ;
34279: LD_ADDR_EXP 132
34283: PUSH
34284: EMPTY
34285: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34286: LD_ADDR_EXP 133
34290: PUSH
34291: EMPTY
34292: ST_TO_ADDR
// hackLimit := 3 ;
34293: LD_ADDR_EXP 134
34297: PUSH
34298: LD_INT 3
34300: ST_TO_ADDR
// hackDist := 12 ;
34301: LD_ADDR_EXP 135
34305: PUSH
34306: LD_INT 12
34308: ST_TO_ADDR
// hackCounter := [ ] ;
34309: LD_ADDR_EXP 136
34313: PUSH
34314: EMPTY
34315: ST_TO_ADDR
// end ;
34316: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34317: LD_EXP 131
34321: PUSH
34322: LD_INT 34
34324: PUSH
34325: LD_EXP 54
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PPUSH
34334: CALL_OW 69
34338: AND
34339: IFFALSE 34594
34341: GO 34343
34343: DISABLE
34344: LD_INT 0
34346: PPUSH
34347: PPUSH
// begin enable ;
34348: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34349: LD_ADDR_VAR 0 1
34353: PUSH
34354: LD_INT 34
34356: PUSH
34357: LD_EXP 54
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PPUSH
34366: CALL_OW 69
34370: PUSH
34371: FOR_IN
34372: IFFALSE 34592
// begin if not i in hackTanks then
34374: LD_VAR 0 1
34378: PUSH
34379: LD_EXP 132
34383: IN
34384: NOT
34385: IFFALSE 34468
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34387: LD_ADDR_EXP 132
34391: PUSH
34392: LD_EXP 132
34396: PPUSH
34397: LD_EXP 132
34401: PUSH
34402: LD_INT 1
34404: PLUS
34405: PPUSH
34406: LD_VAR 0 1
34410: PPUSH
34411: CALL_OW 1
34415: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34416: LD_ADDR_EXP 133
34420: PUSH
34421: LD_EXP 133
34425: PPUSH
34426: LD_EXP 133
34430: PUSH
34431: LD_INT 1
34433: PLUS
34434: PPUSH
34435: EMPTY
34436: PPUSH
34437: CALL_OW 1
34441: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34442: LD_ADDR_EXP 136
34446: PUSH
34447: LD_EXP 136
34451: PPUSH
34452: LD_EXP 136
34456: PUSH
34457: LD_INT 1
34459: PLUS
34460: PPUSH
34461: EMPTY
34462: PPUSH
34463: CALL_OW 1
34467: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL_OW 302
34477: NOT
34478: IFFALSE 34491
// begin HackUnlinkAll ( i ) ;
34480: LD_VAR 0 1
34484: PPUSH
34485: CALL 34597 0 1
// continue ;
34489: GO 34371
// end ; HackCheckCapturedStatus ( i ) ;
34491: LD_VAR 0 1
34495: PPUSH
34496: CALL 35040 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34500: LD_ADDR_VAR 0 2
34504: PUSH
34505: LD_INT 81
34507: PUSH
34508: LD_VAR 0 1
34512: PPUSH
34513: CALL_OW 255
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 33
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 91
34534: PUSH
34535: LD_VAR 0 1
34539: PUSH
34540: LD_EXP 135
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 50
34552: PUSH
34553: EMPTY
34554: LIST
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: PPUSH
34562: CALL_OW 69
34566: ST_TO_ADDR
// if not tmp then
34567: LD_VAR 0 2
34571: NOT
34572: IFFALSE 34576
// continue ;
34574: GO 34371
// HackLink ( i , tmp ) ;
34576: LD_VAR 0 1
34580: PPUSH
34581: LD_VAR 0 2
34585: PPUSH
34586: CALL 34733 0 2
// end ;
34590: GO 34371
34592: POP
34593: POP
// end ;
34594: PPOPN 2
34596: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34597: LD_INT 0
34599: PPUSH
34600: PPUSH
34601: PPUSH
// if not hack in hackTanks then
34602: LD_VAR 0 1
34606: PUSH
34607: LD_EXP 132
34611: IN
34612: NOT
34613: IFFALSE 34617
// exit ;
34615: GO 34728
// index := GetElementIndex ( hackTanks , hack ) ;
34617: LD_ADDR_VAR 0 4
34621: PUSH
34622: LD_EXP 132
34626: PPUSH
34627: LD_VAR 0 1
34631: PPUSH
34632: CALL 42202 0 2
34636: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34637: LD_EXP 133
34641: PUSH
34642: LD_VAR 0 4
34646: ARRAY
34647: IFFALSE 34728
// begin for i in hackTanksCaptured [ index ] do
34649: LD_ADDR_VAR 0 3
34653: PUSH
34654: LD_EXP 133
34658: PUSH
34659: LD_VAR 0 4
34663: ARRAY
34664: PUSH
34665: FOR_IN
34666: IFFALSE 34692
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34668: LD_VAR 0 3
34672: PUSH
34673: LD_INT 1
34675: ARRAY
34676: PPUSH
34677: LD_VAR 0 3
34681: PUSH
34682: LD_INT 2
34684: ARRAY
34685: PPUSH
34686: CALL_OW 235
34690: GO 34665
34692: POP
34693: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34694: LD_ADDR_EXP 133
34698: PUSH
34699: LD_EXP 133
34703: PPUSH
34704: LD_VAR 0 4
34708: PPUSH
34709: EMPTY
34710: PPUSH
34711: CALL_OW 1
34715: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34716: LD_VAR 0 1
34720: PPUSH
34721: LD_INT 0
34723: PPUSH
34724: CALL_OW 505
// end ; end ;
34728: LD_VAR 0 2
34732: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34733: LD_INT 0
34735: PPUSH
34736: PPUSH
34737: PPUSH
// if not hack in hackTanks or not vehicles then
34738: LD_VAR 0 1
34742: PUSH
34743: LD_EXP 132
34747: IN
34748: NOT
34749: PUSH
34750: LD_VAR 0 2
34754: NOT
34755: OR
34756: IFFALSE 34760
// exit ;
34758: GO 35035
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34760: LD_ADDR_VAR 0 2
34764: PUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: LD_VAR 0 2
34774: PPUSH
34775: LD_INT 1
34777: PPUSH
34778: LD_INT 1
34780: PPUSH
34781: CALL 42852 0 4
34785: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34786: LD_ADDR_VAR 0 5
34790: PUSH
34791: LD_EXP 132
34795: PPUSH
34796: LD_VAR 0 1
34800: PPUSH
34801: CALL 42202 0 2
34805: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34806: LD_EXP 133
34810: PUSH
34811: LD_VAR 0 5
34815: ARRAY
34816: PUSH
34817: LD_EXP 134
34821: LESS
34822: IFFALSE 35011
// begin for i := 1 to vehicles do
34824: LD_ADDR_VAR 0 4
34828: PUSH
34829: DOUBLE
34830: LD_INT 1
34832: DEC
34833: ST_TO_ADDR
34834: LD_VAR 0 2
34838: PUSH
34839: FOR_TO
34840: IFFALSE 35009
// begin if hackTanksCaptured [ index ] = hackLimit then
34842: LD_EXP 133
34846: PUSH
34847: LD_VAR 0 5
34851: ARRAY
34852: PUSH
34853: LD_EXP 134
34857: EQUAL
34858: IFFALSE 34862
// break ;
34860: GO 35009
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34862: LD_ADDR_EXP 136
34866: PUSH
34867: LD_EXP 136
34871: PPUSH
34872: LD_VAR 0 5
34876: PPUSH
34877: LD_EXP 136
34881: PUSH
34882: LD_VAR 0 5
34886: ARRAY
34887: PUSH
34888: LD_INT 1
34890: PLUS
34891: PPUSH
34892: CALL_OW 1
34896: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34897: LD_ADDR_EXP 133
34901: PUSH
34902: LD_EXP 133
34906: PPUSH
34907: LD_VAR 0 5
34911: PUSH
34912: LD_EXP 133
34916: PUSH
34917: LD_VAR 0 5
34921: ARRAY
34922: PUSH
34923: LD_INT 1
34925: PLUS
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PPUSH
34931: LD_VAR 0 2
34935: PUSH
34936: LD_VAR 0 4
34940: ARRAY
34941: PUSH
34942: LD_VAR 0 2
34946: PUSH
34947: LD_VAR 0 4
34951: ARRAY
34952: PPUSH
34953: CALL_OW 255
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PPUSH
34962: CALL 42417 0 3
34966: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34967: LD_VAR 0 2
34971: PUSH
34972: LD_VAR 0 4
34976: ARRAY
34977: PPUSH
34978: LD_VAR 0 1
34982: PPUSH
34983: CALL_OW 255
34987: PPUSH
34988: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34992: LD_VAR 0 2
34996: PUSH
34997: LD_VAR 0 4
35001: ARRAY
35002: PPUSH
35003: CALL_OW 141
// end ;
35007: GO 34839
35009: POP
35010: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35011: LD_VAR 0 1
35015: PPUSH
35016: LD_EXP 133
35020: PUSH
35021: LD_VAR 0 5
35025: ARRAY
35026: PUSH
35027: LD_INT 0
35029: PLUS
35030: PPUSH
35031: CALL_OW 505
// end ;
35035: LD_VAR 0 3
35039: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35040: LD_INT 0
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
// if not hack in hackTanks then
35046: LD_VAR 0 1
35050: PUSH
35051: LD_EXP 132
35055: IN
35056: NOT
35057: IFFALSE 35061
// exit ;
35059: GO 35301
// index := GetElementIndex ( hackTanks , hack ) ;
35061: LD_ADDR_VAR 0 4
35065: PUSH
35066: LD_EXP 132
35070: PPUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: CALL 42202 0 2
35080: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35081: LD_ADDR_VAR 0 3
35085: PUSH
35086: DOUBLE
35087: LD_EXP 133
35091: PUSH
35092: LD_VAR 0 4
35096: ARRAY
35097: INC
35098: ST_TO_ADDR
35099: LD_INT 1
35101: PUSH
35102: FOR_DOWNTO
35103: IFFALSE 35275
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35105: LD_ADDR_VAR 0 5
35109: PUSH
35110: LD_EXP 133
35114: PUSH
35115: LD_VAR 0 4
35119: ARRAY
35120: PUSH
35121: LD_VAR 0 3
35125: ARRAY
35126: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35127: LD_VAR 0 5
35131: PUSH
35132: LD_INT 1
35134: ARRAY
35135: PPUSH
35136: CALL_OW 302
35140: NOT
35141: PUSH
35142: LD_VAR 0 5
35146: PUSH
35147: LD_INT 1
35149: ARRAY
35150: PPUSH
35151: CALL_OW 255
35155: PUSH
35156: LD_VAR 0 1
35160: PPUSH
35161: CALL_OW 255
35165: NONEQUAL
35166: OR
35167: IFFALSE 35273
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35169: LD_VAR 0 5
35173: PUSH
35174: LD_INT 1
35176: ARRAY
35177: PPUSH
35178: CALL_OW 305
35182: PUSH
35183: LD_VAR 0 5
35187: PUSH
35188: LD_INT 1
35190: ARRAY
35191: PPUSH
35192: CALL_OW 255
35196: PUSH
35197: LD_VAR 0 1
35201: PPUSH
35202: CALL_OW 255
35206: EQUAL
35207: AND
35208: IFFALSE 35232
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35210: LD_VAR 0 5
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: PPUSH
35219: LD_VAR 0 5
35223: PUSH
35224: LD_INT 2
35226: ARRAY
35227: PPUSH
35228: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35232: LD_ADDR_EXP 133
35236: PUSH
35237: LD_EXP 133
35241: PPUSH
35242: LD_VAR 0 4
35246: PPUSH
35247: LD_EXP 133
35251: PUSH
35252: LD_VAR 0 4
35256: ARRAY
35257: PPUSH
35258: LD_VAR 0 3
35262: PPUSH
35263: CALL_OW 3
35267: PPUSH
35268: CALL_OW 1
35272: ST_TO_ADDR
// end ; end ;
35273: GO 35102
35275: POP
35276: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35277: LD_VAR 0 1
35281: PPUSH
35282: LD_EXP 133
35286: PUSH
35287: LD_VAR 0 4
35291: ARRAY
35292: PUSH
35293: LD_INT 0
35295: PLUS
35296: PPUSH
35297: CALL_OW 505
// end ;
35301: LD_VAR 0 2
35305: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35306: LD_INT 0
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
// if not hack in hackTanks then
35312: LD_VAR 0 1
35316: PUSH
35317: LD_EXP 132
35321: IN
35322: NOT
35323: IFFALSE 35327
// exit ;
35325: GO 35412
// index := GetElementIndex ( hackTanks , hack ) ;
35327: LD_ADDR_VAR 0 5
35331: PUSH
35332: LD_EXP 132
35336: PPUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL 42202 0 2
35346: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35347: LD_ADDR_VAR 0 4
35351: PUSH
35352: DOUBLE
35353: LD_INT 1
35355: DEC
35356: ST_TO_ADDR
35357: LD_EXP 133
35361: PUSH
35362: LD_VAR 0 5
35366: ARRAY
35367: PUSH
35368: FOR_TO
35369: IFFALSE 35410
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35371: LD_EXP 133
35375: PUSH
35376: LD_VAR 0 5
35380: ARRAY
35381: PUSH
35382: LD_VAR 0 4
35386: ARRAY
35387: PUSH
35388: LD_INT 1
35390: ARRAY
35391: PUSH
35392: LD_VAR 0 2
35396: EQUAL
35397: IFFALSE 35408
// KillUnit ( vehicle ) ;
35399: LD_VAR 0 2
35403: PPUSH
35404: CALL_OW 66
35408: GO 35368
35410: POP
35411: POP
// end ;
35412: LD_VAR 0 3
35416: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35417: LD_EXP 137
35421: NOT
35422: IFFALSE 35457
35424: GO 35426
35426: DISABLE
// begin initMiner := true ;
35427: LD_ADDR_EXP 137
35431: PUSH
35432: LD_INT 1
35434: ST_TO_ADDR
// minersList := [ ] ;
35435: LD_ADDR_EXP 138
35439: PUSH
35440: EMPTY
35441: ST_TO_ADDR
// minerMinesList := [ ] ;
35442: LD_ADDR_EXP 139
35446: PUSH
35447: EMPTY
35448: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35449: LD_ADDR_EXP 140
35453: PUSH
35454: LD_INT 5
35456: ST_TO_ADDR
// end ;
35457: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35458: LD_EXP 137
35462: PUSH
35463: LD_INT 34
35465: PUSH
35466: LD_EXP 59
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PPUSH
35475: CALL_OW 69
35479: AND
35480: IFFALSE 35943
35482: GO 35484
35484: DISABLE
35485: LD_INT 0
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
// begin enable ;
35491: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35492: LD_ADDR_VAR 0 1
35496: PUSH
35497: LD_INT 34
35499: PUSH
35500: LD_EXP 59
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PPUSH
35509: CALL_OW 69
35513: PUSH
35514: FOR_IN
35515: IFFALSE 35587
// begin if not i in minersList then
35517: LD_VAR 0 1
35521: PUSH
35522: LD_EXP 138
35526: IN
35527: NOT
35528: IFFALSE 35585
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35530: LD_ADDR_EXP 138
35534: PUSH
35535: LD_EXP 138
35539: PPUSH
35540: LD_EXP 138
35544: PUSH
35545: LD_INT 1
35547: PLUS
35548: PPUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 1
35558: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35559: LD_ADDR_EXP 139
35563: PUSH
35564: LD_EXP 139
35568: PPUSH
35569: LD_EXP 139
35573: PUSH
35574: LD_INT 1
35576: PLUS
35577: PPUSH
35578: EMPTY
35579: PPUSH
35580: CALL_OW 1
35584: ST_TO_ADDR
// end end ;
35585: GO 35514
35587: POP
35588: POP
// for i := minerMinesList downto 1 do
35589: LD_ADDR_VAR 0 1
35593: PUSH
35594: DOUBLE
35595: LD_EXP 139
35599: INC
35600: ST_TO_ADDR
35601: LD_INT 1
35603: PUSH
35604: FOR_DOWNTO
35605: IFFALSE 35941
// begin if IsLive ( minersList [ i ] ) then
35607: LD_EXP 138
35611: PUSH
35612: LD_VAR 0 1
35616: ARRAY
35617: PPUSH
35618: CALL_OW 300
35622: IFFALSE 35650
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35624: LD_EXP 138
35628: PUSH
35629: LD_VAR 0 1
35633: ARRAY
35634: PPUSH
35635: LD_EXP 139
35639: PUSH
35640: LD_VAR 0 1
35644: ARRAY
35645: PPUSH
35646: CALL_OW 505
// if not minerMinesList [ i ] then
35650: LD_EXP 139
35654: PUSH
35655: LD_VAR 0 1
35659: ARRAY
35660: NOT
35661: IFFALSE 35665
// continue ;
35663: GO 35604
// for j := minerMinesList [ i ] downto 1 do
35665: LD_ADDR_VAR 0 2
35669: PUSH
35670: DOUBLE
35671: LD_EXP 139
35675: PUSH
35676: LD_VAR 0 1
35680: ARRAY
35681: INC
35682: ST_TO_ADDR
35683: LD_INT 1
35685: PUSH
35686: FOR_DOWNTO
35687: IFFALSE 35937
// begin side := GetSide ( minersList [ i ] ) ;
35689: LD_ADDR_VAR 0 3
35693: PUSH
35694: LD_EXP 138
35698: PUSH
35699: LD_VAR 0 1
35703: ARRAY
35704: PPUSH
35705: CALL_OW 255
35709: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35710: LD_ADDR_VAR 0 4
35714: PUSH
35715: LD_EXP 139
35719: PUSH
35720: LD_VAR 0 1
35724: ARRAY
35725: PUSH
35726: LD_VAR 0 2
35730: ARRAY
35731: PUSH
35732: LD_INT 1
35734: ARRAY
35735: PPUSH
35736: LD_EXP 139
35740: PUSH
35741: LD_VAR 0 1
35745: ARRAY
35746: PUSH
35747: LD_VAR 0 2
35751: ARRAY
35752: PUSH
35753: LD_INT 2
35755: ARRAY
35756: PPUSH
35757: CALL_OW 428
35761: ST_TO_ADDR
// if not tmp then
35762: LD_VAR 0 4
35766: NOT
35767: IFFALSE 35771
// continue ;
35769: GO 35686
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35771: LD_VAR 0 4
35775: PUSH
35776: LD_INT 81
35778: PUSH
35779: LD_VAR 0 3
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PPUSH
35788: CALL_OW 69
35792: IN
35793: PUSH
35794: LD_EXP 139
35798: PUSH
35799: LD_VAR 0 1
35803: ARRAY
35804: PUSH
35805: LD_VAR 0 2
35809: ARRAY
35810: PUSH
35811: LD_INT 1
35813: ARRAY
35814: PPUSH
35815: LD_EXP 139
35819: PUSH
35820: LD_VAR 0 1
35824: ARRAY
35825: PUSH
35826: LD_VAR 0 2
35830: ARRAY
35831: PUSH
35832: LD_INT 2
35834: ARRAY
35835: PPUSH
35836: CALL_OW 458
35840: AND
35841: IFFALSE 35935
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35843: LD_EXP 139
35847: PUSH
35848: LD_VAR 0 1
35852: ARRAY
35853: PUSH
35854: LD_VAR 0 2
35858: ARRAY
35859: PUSH
35860: LD_INT 1
35862: ARRAY
35863: PPUSH
35864: LD_EXP 139
35868: PUSH
35869: LD_VAR 0 1
35873: ARRAY
35874: PUSH
35875: LD_VAR 0 2
35879: ARRAY
35880: PUSH
35881: LD_INT 2
35883: ARRAY
35884: PPUSH
35885: LD_VAR 0 3
35889: PPUSH
35890: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35894: LD_ADDR_EXP 139
35898: PUSH
35899: LD_EXP 139
35903: PPUSH
35904: LD_VAR 0 1
35908: PPUSH
35909: LD_EXP 139
35913: PUSH
35914: LD_VAR 0 1
35918: ARRAY
35919: PPUSH
35920: LD_VAR 0 2
35924: PPUSH
35925: CALL_OW 3
35929: PPUSH
35930: CALL_OW 1
35934: ST_TO_ADDR
// end ; end ;
35935: GO 35686
35937: POP
35938: POP
// end ;
35939: GO 35604
35941: POP
35942: POP
// end ;
35943: PPOPN 4
35945: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35946: LD_INT 0
35948: PPUSH
35949: PPUSH
// result := false ;
35950: LD_ADDR_VAR 0 4
35954: PUSH
35955: LD_INT 0
35957: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL_OW 264
35967: PUSH
35968: LD_EXP 59
35972: EQUAL
35973: NOT
35974: IFFALSE 35978
// exit ;
35976: GO 36218
// index := GetElementIndex ( minersList , unit ) ;
35978: LD_ADDR_VAR 0 5
35982: PUSH
35983: LD_EXP 138
35987: PPUSH
35988: LD_VAR 0 1
35992: PPUSH
35993: CALL 42202 0 2
35997: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35998: LD_EXP 139
36002: PUSH
36003: LD_VAR 0 5
36007: ARRAY
36008: PUSH
36009: LD_EXP 140
36013: GREATEREQUAL
36014: IFFALSE 36018
// exit ;
36016: GO 36218
// ComMoveXY ( unit , x , y ) ;
36018: LD_VAR 0 1
36022: PPUSH
36023: LD_VAR 0 2
36027: PPUSH
36028: LD_VAR 0 3
36032: PPUSH
36033: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36037: LD_INT 35
36039: PPUSH
36040: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36044: LD_VAR 0 1
36048: PPUSH
36049: LD_VAR 0 2
36053: PPUSH
36054: LD_VAR 0 3
36058: PPUSH
36059: CALL 72974 0 3
36063: NOT
36064: PUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: CALL_OW 314
36074: AND
36075: IFFALSE 36079
// exit ;
36077: GO 36218
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36079: LD_VAR 0 2
36083: PPUSH
36084: LD_VAR 0 3
36088: PPUSH
36089: CALL_OW 428
36093: PUSH
36094: LD_VAR 0 1
36098: EQUAL
36099: PUSH
36100: LD_VAR 0 1
36104: PPUSH
36105: CALL_OW 314
36109: NOT
36110: AND
36111: IFFALSE 36037
// PlaySoundXY ( x , y , PlantMine ) ;
36113: LD_VAR 0 2
36117: PPUSH
36118: LD_VAR 0 3
36122: PPUSH
36123: LD_STRING PlantMine
36125: PPUSH
36126: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36130: LD_VAR 0 2
36134: PPUSH
36135: LD_VAR 0 3
36139: PPUSH
36140: LD_VAR 0 1
36144: PPUSH
36145: CALL_OW 255
36149: PPUSH
36150: LD_INT 0
36152: PPUSH
36153: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36157: LD_ADDR_EXP 139
36161: PUSH
36162: LD_EXP 139
36166: PPUSH
36167: LD_VAR 0 5
36171: PUSH
36172: LD_EXP 139
36176: PUSH
36177: LD_VAR 0 5
36181: ARRAY
36182: PUSH
36183: LD_INT 1
36185: PLUS
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PPUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_VAR 0 3
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PPUSH
36205: CALL 42417 0 3
36209: ST_TO_ADDR
// result := true ;
36210: LD_ADDR_VAR 0 4
36214: PUSH
36215: LD_INT 1
36217: ST_TO_ADDR
// end ;
36218: LD_VAR 0 4
36222: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36223: LD_INT 0
36225: PPUSH
36226: PPUSH
36227: PPUSH
// if not unit in minersList then
36228: LD_VAR 0 1
36232: PUSH
36233: LD_EXP 138
36237: IN
36238: NOT
36239: IFFALSE 36243
// exit ;
36241: GO 36635
// index := GetElementIndex ( minersList , unit ) ;
36243: LD_ADDR_VAR 0 6
36247: PUSH
36248: LD_EXP 138
36252: PPUSH
36253: LD_VAR 0 1
36257: PPUSH
36258: CALL 42202 0 2
36262: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36263: LD_ADDR_VAR 0 5
36267: PUSH
36268: DOUBLE
36269: LD_EXP 139
36273: PUSH
36274: LD_VAR 0 6
36278: ARRAY
36279: INC
36280: ST_TO_ADDR
36281: LD_INT 1
36283: PUSH
36284: FOR_DOWNTO
36285: IFFALSE 36446
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36287: LD_EXP 139
36291: PUSH
36292: LD_VAR 0 6
36296: ARRAY
36297: PUSH
36298: LD_VAR 0 5
36302: ARRAY
36303: PUSH
36304: LD_INT 1
36306: ARRAY
36307: PUSH
36308: LD_VAR 0 2
36312: EQUAL
36313: PUSH
36314: LD_EXP 139
36318: PUSH
36319: LD_VAR 0 6
36323: ARRAY
36324: PUSH
36325: LD_VAR 0 5
36329: ARRAY
36330: PUSH
36331: LD_INT 2
36333: ARRAY
36334: PUSH
36335: LD_VAR 0 3
36339: EQUAL
36340: AND
36341: IFFALSE 36444
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36343: LD_EXP 139
36347: PUSH
36348: LD_VAR 0 6
36352: ARRAY
36353: PUSH
36354: LD_VAR 0 5
36358: ARRAY
36359: PUSH
36360: LD_INT 1
36362: ARRAY
36363: PPUSH
36364: LD_EXP 139
36368: PUSH
36369: LD_VAR 0 6
36373: ARRAY
36374: PUSH
36375: LD_VAR 0 5
36379: ARRAY
36380: PUSH
36381: LD_INT 2
36383: ARRAY
36384: PPUSH
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL_OW 255
36394: PPUSH
36395: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36399: LD_ADDR_EXP 139
36403: PUSH
36404: LD_EXP 139
36408: PPUSH
36409: LD_VAR 0 6
36413: PPUSH
36414: LD_EXP 139
36418: PUSH
36419: LD_VAR 0 6
36423: ARRAY
36424: PPUSH
36425: LD_VAR 0 5
36429: PPUSH
36430: CALL_OW 3
36434: PPUSH
36435: CALL_OW 1
36439: ST_TO_ADDR
// exit ;
36440: POP
36441: POP
36442: GO 36635
// end ; end ;
36444: GO 36284
36446: POP
36447: POP
// for i := minerMinesList [ index ] downto 1 do
36448: LD_ADDR_VAR 0 5
36452: PUSH
36453: DOUBLE
36454: LD_EXP 139
36458: PUSH
36459: LD_VAR 0 6
36463: ARRAY
36464: INC
36465: ST_TO_ADDR
36466: LD_INT 1
36468: PUSH
36469: FOR_DOWNTO
36470: IFFALSE 36633
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36472: LD_EXP 139
36476: PUSH
36477: LD_VAR 0 6
36481: ARRAY
36482: PUSH
36483: LD_VAR 0 5
36487: ARRAY
36488: PUSH
36489: LD_INT 1
36491: ARRAY
36492: PPUSH
36493: LD_EXP 139
36497: PUSH
36498: LD_VAR 0 6
36502: ARRAY
36503: PUSH
36504: LD_VAR 0 5
36508: ARRAY
36509: PUSH
36510: LD_INT 2
36512: ARRAY
36513: PPUSH
36514: LD_VAR 0 2
36518: PPUSH
36519: LD_VAR 0 3
36523: PPUSH
36524: CALL_OW 298
36528: PUSH
36529: LD_INT 6
36531: LESS
36532: IFFALSE 36631
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36534: LD_EXP 139
36538: PUSH
36539: LD_VAR 0 6
36543: ARRAY
36544: PUSH
36545: LD_VAR 0 5
36549: ARRAY
36550: PUSH
36551: LD_INT 1
36553: ARRAY
36554: PPUSH
36555: LD_EXP 139
36559: PUSH
36560: LD_VAR 0 6
36564: ARRAY
36565: PUSH
36566: LD_VAR 0 5
36570: ARRAY
36571: PUSH
36572: LD_INT 2
36574: ARRAY
36575: PPUSH
36576: LD_VAR 0 1
36580: PPUSH
36581: CALL_OW 255
36585: PPUSH
36586: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36590: LD_ADDR_EXP 139
36594: PUSH
36595: LD_EXP 139
36599: PPUSH
36600: LD_VAR 0 6
36604: PPUSH
36605: LD_EXP 139
36609: PUSH
36610: LD_VAR 0 6
36614: ARRAY
36615: PPUSH
36616: LD_VAR 0 5
36620: PPUSH
36621: CALL_OW 3
36625: PPUSH
36626: CALL_OW 1
36630: ST_TO_ADDR
// end ; end ;
36631: GO 36469
36633: POP
36634: POP
// end ;
36635: LD_VAR 0 4
36639: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36640: LD_INT 0
36642: PPUSH
36643: PPUSH
36644: PPUSH
36645: PPUSH
36646: PPUSH
36647: PPUSH
36648: PPUSH
36649: PPUSH
36650: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36651: LD_VAR 0 1
36655: PPUSH
36656: CALL_OW 264
36660: PUSH
36661: LD_EXP 59
36665: EQUAL
36666: NOT
36667: PUSH
36668: LD_VAR 0 1
36672: PUSH
36673: LD_EXP 138
36677: IN
36678: NOT
36679: OR
36680: IFFALSE 36684
// exit ;
36682: GO 37006
// index := GetElementIndex ( minersList , unit ) ;
36684: LD_ADDR_VAR 0 6
36688: PUSH
36689: LD_EXP 138
36693: PPUSH
36694: LD_VAR 0 1
36698: PPUSH
36699: CALL 42202 0 2
36703: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36704: LD_ADDR_VAR 0 8
36708: PUSH
36709: LD_EXP 140
36713: PUSH
36714: LD_EXP 139
36718: PUSH
36719: LD_VAR 0 6
36723: ARRAY
36724: MINUS
36725: ST_TO_ADDR
// if not minesFreeAmount then
36726: LD_VAR 0 8
36730: NOT
36731: IFFALSE 36735
// exit ;
36733: GO 37006
// tmp := [ ] ;
36735: LD_ADDR_VAR 0 7
36739: PUSH
36740: EMPTY
36741: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36742: LD_ADDR_VAR 0 5
36746: PUSH
36747: DOUBLE
36748: LD_INT 1
36750: DEC
36751: ST_TO_ADDR
36752: LD_VAR 0 8
36756: PUSH
36757: FOR_TO
36758: IFFALSE 36953
// begin _d := rand ( 0 , 5 ) ;
36760: LD_ADDR_VAR 0 11
36764: PUSH
36765: LD_INT 0
36767: PPUSH
36768: LD_INT 5
36770: PPUSH
36771: CALL_OW 12
36775: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36776: LD_ADDR_VAR 0 12
36780: PUSH
36781: LD_INT 2
36783: PPUSH
36784: LD_INT 6
36786: PPUSH
36787: CALL_OW 12
36791: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36792: LD_ADDR_VAR 0 9
36796: PUSH
36797: LD_VAR 0 2
36801: PPUSH
36802: LD_VAR 0 11
36806: PPUSH
36807: LD_VAR 0 12
36811: PPUSH
36812: CALL_OW 272
36816: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36817: LD_ADDR_VAR 0 10
36821: PUSH
36822: LD_VAR 0 3
36826: PPUSH
36827: LD_VAR 0 11
36831: PPUSH
36832: LD_VAR 0 12
36836: PPUSH
36837: CALL_OW 273
36841: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36842: LD_VAR 0 9
36846: PPUSH
36847: LD_VAR 0 10
36851: PPUSH
36852: CALL_OW 488
36856: PUSH
36857: LD_VAR 0 9
36861: PUSH
36862: LD_VAR 0 10
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_VAR 0 7
36875: IN
36876: NOT
36877: AND
36878: PUSH
36879: LD_VAR 0 9
36883: PPUSH
36884: LD_VAR 0 10
36888: PPUSH
36889: CALL_OW 458
36893: NOT
36894: AND
36895: IFFALSE 36937
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36897: LD_ADDR_VAR 0 7
36901: PUSH
36902: LD_VAR 0 7
36906: PPUSH
36907: LD_VAR 0 7
36911: PUSH
36912: LD_INT 1
36914: PLUS
36915: PPUSH
36916: LD_VAR 0 9
36920: PUSH
36921: LD_VAR 0 10
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PPUSH
36930: CALL_OW 1
36934: ST_TO_ADDR
36935: GO 36951
// i := i - 1 ;
36937: LD_ADDR_VAR 0 5
36941: PUSH
36942: LD_VAR 0 5
36946: PUSH
36947: LD_INT 1
36949: MINUS
36950: ST_TO_ADDR
// end ;
36951: GO 36757
36953: POP
36954: POP
// for i in tmp do
36955: LD_ADDR_VAR 0 5
36959: PUSH
36960: LD_VAR 0 7
36964: PUSH
36965: FOR_IN
36966: IFFALSE 37004
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36968: LD_VAR 0 1
36972: PPUSH
36973: LD_VAR 0 5
36977: PUSH
36978: LD_INT 1
36980: ARRAY
36981: PPUSH
36982: LD_VAR 0 5
36986: PUSH
36987: LD_INT 2
36989: ARRAY
36990: PPUSH
36991: CALL 35946 0 3
36995: NOT
36996: IFFALSE 37002
// exit ;
36998: POP
36999: POP
37000: GO 37006
37002: GO 36965
37004: POP
37005: POP
// end ;
37006: LD_VAR 0 4
37010: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37011: LD_INT 0
37013: PPUSH
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
// if not GetClass ( unit ) = class_sniper then
37020: LD_VAR 0 1
37024: PPUSH
37025: CALL_OW 257
37029: PUSH
37030: LD_INT 5
37032: EQUAL
37033: NOT
37034: IFFALSE 37038
// exit ;
37036: GO 37426
// dist := 8 ;
37038: LD_ADDR_VAR 0 5
37042: PUSH
37043: LD_INT 8
37045: ST_TO_ADDR
// viewRange := 12 ;
37046: LD_ADDR_VAR 0 7
37050: PUSH
37051: LD_INT 12
37053: ST_TO_ADDR
// side := GetSide ( unit ) ;
37054: LD_ADDR_VAR 0 6
37058: PUSH
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 255
37068: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37069: LD_INT 61
37071: PPUSH
37072: LD_VAR 0 6
37076: PPUSH
37077: CALL_OW 321
37081: PUSH
37082: LD_INT 2
37084: EQUAL
37085: IFFALSE 37095
// viewRange := 16 ;
37087: LD_ADDR_VAR 0 7
37091: PUSH
37092: LD_INT 16
37094: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37095: LD_VAR 0 1
37099: PPUSH
37100: LD_VAR 0 2
37104: PPUSH
37105: LD_VAR 0 3
37109: PPUSH
37110: CALL_OW 297
37114: PUSH
37115: LD_VAR 0 5
37119: GREATER
37120: IFFALSE 37199
// begin ComMoveXY ( unit , x , y ) ;
37122: LD_VAR 0 1
37126: PPUSH
37127: LD_VAR 0 2
37131: PPUSH
37132: LD_VAR 0 3
37136: PPUSH
37137: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37141: LD_INT 35
37143: PPUSH
37144: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37148: LD_VAR 0 1
37152: PPUSH
37153: LD_VAR 0 2
37157: PPUSH
37158: LD_VAR 0 3
37162: PPUSH
37163: CALL 72974 0 3
37167: NOT
37168: IFFALSE 37172
// exit ;
37170: GO 37426
// until GetDistUnitXY ( unit , x , y ) < dist ;
37172: LD_VAR 0 1
37176: PPUSH
37177: LD_VAR 0 2
37181: PPUSH
37182: LD_VAR 0 3
37186: PPUSH
37187: CALL_OW 297
37191: PUSH
37192: LD_VAR 0 5
37196: LESS
37197: IFFALSE 37141
// end ; ComTurnXY ( unit , x , y ) ;
37199: LD_VAR 0 1
37203: PPUSH
37204: LD_VAR 0 2
37208: PPUSH
37209: LD_VAR 0 3
37213: PPUSH
37214: CALL_OW 118
// wait ( 5 ) ;
37218: LD_INT 5
37220: PPUSH
37221: CALL_OW 67
// _d := GetDir ( unit ) ;
37225: LD_ADDR_VAR 0 10
37229: PUSH
37230: LD_VAR 0 1
37234: PPUSH
37235: CALL_OW 254
37239: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37240: LD_ADDR_VAR 0 8
37244: PUSH
37245: LD_VAR 0 1
37249: PPUSH
37250: CALL_OW 250
37254: PPUSH
37255: LD_VAR 0 10
37259: PPUSH
37260: LD_VAR 0 5
37264: PPUSH
37265: CALL_OW 272
37269: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37270: LD_ADDR_VAR 0 9
37274: PUSH
37275: LD_VAR 0 1
37279: PPUSH
37280: CALL_OW 251
37284: PPUSH
37285: LD_VAR 0 10
37289: PPUSH
37290: LD_VAR 0 5
37294: PPUSH
37295: CALL_OW 273
37299: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37300: LD_VAR 0 8
37304: PPUSH
37305: LD_VAR 0 9
37309: PPUSH
37310: CALL_OW 488
37314: NOT
37315: IFFALSE 37319
// exit ;
37317: GO 37426
// ComAnimCustom ( unit , 1 ) ;
37319: LD_VAR 0 1
37323: PPUSH
37324: LD_INT 1
37326: PPUSH
37327: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37331: LD_VAR 0 8
37335: PPUSH
37336: LD_VAR 0 9
37340: PPUSH
37341: LD_VAR 0 6
37345: PPUSH
37346: LD_VAR 0 7
37350: PPUSH
37351: CALL_OW 330
// repeat wait ( 1 ) ;
37355: LD_INT 1
37357: PPUSH
37358: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37362: LD_VAR 0 1
37366: PPUSH
37367: CALL_OW 316
37371: PUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 314
37381: OR
37382: PUSH
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 302
37392: NOT
37393: OR
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 301
37404: OR
37405: IFFALSE 37355
// RemoveSeeing ( _x , _y , side ) ;
37407: LD_VAR 0 8
37411: PPUSH
37412: LD_VAR 0 9
37416: PPUSH
37417: LD_VAR 0 6
37421: PPUSH
37422: CALL_OW 331
// end ; end_of_file
37426: LD_VAR 0 4
37430: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37431: LD_INT 0
37433: PPUSH
37434: PPUSH
// if exist_mode then
37435: LD_VAR 0 2
37439: IFFALSE 37464
// unit := CreateCharacter ( prefix & ident ) else
37441: LD_ADDR_VAR 0 5
37445: PUSH
37446: LD_VAR 0 3
37450: PUSH
37451: LD_VAR 0 1
37455: STR
37456: PPUSH
37457: CALL_OW 34
37461: ST_TO_ADDR
37462: GO 37479
// unit := NewCharacter ( ident ) ;
37464: LD_ADDR_VAR 0 5
37468: PUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL_OW 25
37478: ST_TO_ADDR
// result := unit ;
37479: LD_ADDR_VAR 0 4
37483: PUSH
37484: LD_VAR 0 5
37488: ST_TO_ADDR
// end ;
37489: LD_VAR 0 4
37493: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37494: LD_INT 0
37496: PPUSH
37497: PPUSH
// if not side or not nation then
37498: LD_VAR 0 1
37502: NOT
37503: PUSH
37504: LD_VAR 0 2
37508: NOT
37509: OR
37510: IFFALSE 37514
// exit ;
37512: GO 38282
// case nation of nation_american :
37514: LD_VAR 0 2
37518: PUSH
37519: LD_INT 1
37521: DOUBLE
37522: EQUAL
37523: IFTRUE 37527
37525: GO 37741
37527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37528: LD_ADDR_VAR 0 4
37532: PUSH
37533: LD_INT 35
37535: PUSH
37536: LD_INT 45
37538: PUSH
37539: LD_INT 46
37541: PUSH
37542: LD_INT 47
37544: PUSH
37545: LD_INT 82
37547: PUSH
37548: LD_INT 83
37550: PUSH
37551: LD_INT 84
37553: PUSH
37554: LD_INT 85
37556: PUSH
37557: LD_INT 86
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: LD_INT 6
37568: PUSH
37569: LD_INT 15
37571: PUSH
37572: LD_INT 16
37574: PUSH
37575: LD_INT 7
37577: PUSH
37578: LD_INT 12
37580: PUSH
37581: LD_INT 13
37583: PUSH
37584: LD_INT 10
37586: PUSH
37587: LD_INT 14
37589: PUSH
37590: LD_INT 20
37592: PUSH
37593: LD_INT 21
37595: PUSH
37596: LD_INT 22
37598: PUSH
37599: LD_INT 25
37601: PUSH
37602: LD_INT 32
37604: PUSH
37605: LD_INT 27
37607: PUSH
37608: LD_INT 36
37610: PUSH
37611: LD_INT 69
37613: PUSH
37614: LD_INT 39
37616: PUSH
37617: LD_INT 34
37619: PUSH
37620: LD_INT 40
37622: PUSH
37623: LD_INT 48
37625: PUSH
37626: LD_INT 49
37628: PUSH
37629: LD_INT 50
37631: PUSH
37632: LD_INT 51
37634: PUSH
37635: LD_INT 52
37637: PUSH
37638: LD_INT 53
37640: PUSH
37641: LD_INT 54
37643: PUSH
37644: LD_INT 55
37646: PUSH
37647: LD_INT 56
37649: PUSH
37650: LD_INT 57
37652: PUSH
37653: LD_INT 58
37655: PUSH
37656: LD_INT 59
37658: PUSH
37659: LD_INT 60
37661: PUSH
37662: LD_INT 61
37664: PUSH
37665: LD_INT 62
37667: PUSH
37668: LD_INT 80
37670: PUSH
37671: LD_INT 82
37673: PUSH
37674: LD_INT 83
37676: PUSH
37677: LD_INT 84
37679: PUSH
37680: LD_INT 85
37682: PUSH
37683: LD_INT 86
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: ST_TO_ADDR
37739: GO 38206
37741: LD_INT 2
37743: DOUBLE
37744: EQUAL
37745: IFTRUE 37749
37747: GO 37975
37749: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37750: LD_ADDR_VAR 0 4
37754: PUSH
37755: LD_INT 35
37757: PUSH
37758: LD_INT 45
37760: PUSH
37761: LD_INT 46
37763: PUSH
37764: LD_INT 47
37766: PUSH
37767: LD_INT 82
37769: PUSH
37770: LD_INT 83
37772: PUSH
37773: LD_INT 84
37775: PUSH
37776: LD_INT 85
37778: PUSH
37779: LD_INT 87
37781: PUSH
37782: LD_INT 70
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 11
37790: PUSH
37791: LD_INT 3
37793: PUSH
37794: LD_INT 4
37796: PUSH
37797: LD_INT 5
37799: PUSH
37800: LD_INT 6
37802: PUSH
37803: LD_INT 15
37805: PUSH
37806: LD_INT 18
37808: PUSH
37809: LD_INT 7
37811: PUSH
37812: LD_INT 17
37814: PUSH
37815: LD_INT 8
37817: PUSH
37818: LD_INT 20
37820: PUSH
37821: LD_INT 21
37823: PUSH
37824: LD_INT 22
37826: PUSH
37827: LD_INT 72
37829: PUSH
37830: LD_INT 26
37832: PUSH
37833: LD_INT 69
37835: PUSH
37836: LD_INT 39
37838: PUSH
37839: LD_INT 40
37841: PUSH
37842: LD_INT 41
37844: PUSH
37845: LD_INT 42
37847: PUSH
37848: LD_INT 43
37850: PUSH
37851: LD_INT 48
37853: PUSH
37854: LD_INT 49
37856: PUSH
37857: LD_INT 50
37859: PUSH
37860: LD_INT 51
37862: PUSH
37863: LD_INT 52
37865: PUSH
37866: LD_INT 53
37868: PUSH
37869: LD_INT 54
37871: PUSH
37872: LD_INT 55
37874: PUSH
37875: LD_INT 56
37877: PUSH
37878: LD_INT 60
37880: PUSH
37881: LD_INT 61
37883: PUSH
37884: LD_INT 62
37886: PUSH
37887: LD_INT 66
37889: PUSH
37890: LD_INT 67
37892: PUSH
37893: LD_INT 68
37895: PUSH
37896: LD_INT 81
37898: PUSH
37899: LD_INT 82
37901: PUSH
37902: LD_INT 83
37904: PUSH
37905: LD_INT 84
37907: PUSH
37908: LD_INT 85
37910: PUSH
37911: LD_INT 87
37913: PUSH
37914: LD_INT 88
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: ST_TO_ADDR
37973: GO 38206
37975: LD_INT 3
37977: DOUBLE
37978: EQUAL
37979: IFTRUE 37983
37981: GO 38205
37983: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37984: LD_ADDR_VAR 0 4
37988: PUSH
37989: LD_INT 46
37991: PUSH
37992: LD_INT 47
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: LD_INT 82
38003: PUSH
38004: LD_INT 83
38006: PUSH
38007: LD_INT 84
38009: PUSH
38010: LD_INT 85
38012: PUSH
38013: LD_INT 86
38015: PUSH
38016: LD_INT 11
38018: PUSH
38019: LD_INT 9
38021: PUSH
38022: LD_INT 20
38024: PUSH
38025: LD_INT 19
38027: PUSH
38028: LD_INT 21
38030: PUSH
38031: LD_INT 24
38033: PUSH
38034: LD_INT 22
38036: PUSH
38037: LD_INT 25
38039: PUSH
38040: LD_INT 28
38042: PUSH
38043: LD_INT 29
38045: PUSH
38046: LD_INT 30
38048: PUSH
38049: LD_INT 31
38051: PUSH
38052: LD_INT 37
38054: PUSH
38055: LD_INT 38
38057: PUSH
38058: LD_INT 32
38060: PUSH
38061: LD_INT 27
38063: PUSH
38064: LD_INT 33
38066: PUSH
38067: LD_INT 69
38069: PUSH
38070: LD_INT 39
38072: PUSH
38073: LD_INT 34
38075: PUSH
38076: LD_INT 40
38078: PUSH
38079: LD_INT 71
38081: PUSH
38082: LD_INT 23
38084: PUSH
38085: LD_INT 44
38087: PUSH
38088: LD_INT 48
38090: PUSH
38091: LD_INT 49
38093: PUSH
38094: LD_INT 50
38096: PUSH
38097: LD_INT 51
38099: PUSH
38100: LD_INT 52
38102: PUSH
38103: LD_INT 53
38105: PUSH
38106: LD_INT 54
38108: PUSH
38109: LD_INT 55
38111: PUSH
38112: LD_INT 56
38114: PUSH
38115: LD_INT 57
38117: PUSH
38118: LD_INT 58
38120: PUSH
38121: LD_INT 59
38123: PUSH
38124: LD_INT 63
38126: PUSH
38127: LD_INT 64
38129: PUSH
38130: LD_INT 65
38132: PUSH
38133: LD_INT 82
38135: PUSH
38136: LD_INT 83
38138: PUSH
38139: LD_INT 84
38141: PUSH
38142: LD_INT 85
38144: PUSH
38145: LD_INT 86
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: ST_TO_ADDR
38203: GO 38206
38205: POP
// if state > - 1 and state < 3 then
38206: LD_VAR 0 3
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: GREATER
38215: PUSH
38216: LD_VAR 0 3
38220: PUSH
38221: LD_INT 3
38223: LESS
38224: AND
38225: IFFALSE 38282
// for i in result do
38227: LD_ADDR_VAR 0 5
38231: PUSH
38232: LD_VAR 0 4
38236: PUSH
38237: FOR_IN
38238: IFFALSE 38280
// if GetTech ( i , side ) <> state then
38240: LD_VAR 0 5
38244: PPUSH
38245: LD_VAR 0 1
38249: PPUSH
38250: CALL_OW 321
38254: PUSH
38255: LD_VAR 0 3
38259: NONEQUAL
38260: IFFALSE 38278
// result := result diff i ;
38262: LD_ADDR_VAR 0 4
38266: PUSH
38267: LD_VAR 0 4
38271: PUSH
38272: LD_VAR 0 5
38276: DIFF
38277: ST_TO_ADDR
38278: GO 38237
38280: POP
38281: POP
// end ;
38282: LD_VAR 0 4
38286: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38287: LD_INT 0
38289: PPUSH
38290: PPUSH
38291: PPUSH
// result := true ;
38292: LD_ADDR_VAR 0 3
38296: PUSH
38297: LD_INT 1
38299: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38300: LD_ADDR_VAR 0 5
38304: PUSH
38305: LD_VAR 0 2
38309: PPUSH
38310: CALL_OW 480
38314: ST_TO_ADDR
// if not tmp then
38315: LD_VAR 0 5
38319: NOT
38320: IFFALSE 38324
// exit ;
38322: GO 38373
// for i in tmp do
38324: LD_ADDR_VAR 0 4
38328: PUSH
38329: LD_VAR 0 5
38333: PUSH
38334: FOR_IN
38335: IFFALSE 38371
// if GetTech ( i , side ) <> state_researched then
38337: LD_VAR 0 4
38341: PPUSH
38342: LD_VAR 0 1
38346: PPUSH
38347: CALL_OW 321
38351: PUSH
38352: LD_INT 2
38354: NONEQUAL
38355: IFFALSE 38369
// begin result := false ;
38357: LD_ADDR_VAR 0 3
38361: PUSH
38362: LD_INT 0
38364: ST_TO_ADDR
// exit ;
38365: POP
38366: POP
38367: GO 38373
// end ;
38369: GO 38334
38371: POP
38372: POP
// end ;
38373: LD_VAR 0 3
38377: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38378: LD_INT 0
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38393: LD_VAR 0 1
38397: NOT
38398: PUSH
38399: LD_VAR 0 1
38403: PPUSH
38404: CALL_OW 257
38408: PUSH
38409: LD_INT 9
38411: NONEQUAL
38412: OR
38413: IFFALSE 38417
// exit ;
38415: GO 38990
// side := GetSide ( unit ) ;
38417: LD_ADDR_VAR 0 9
38421: PUSH
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL_OW 255
38431: ST_TO_ADDR
// tech_space := tech_spacanom ;
38432: LD_ADDR_VAR 0 12
38436: PUSH
38437: LD_INT 29
38439: ST_TO_ADDR
// tech_time := tech_taurad ;
38440: LD_ADDR_VAR 0 13
38444: PUSH
38445: LD_INT 28
38447: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38448: LD_ADDR_VAR 0 11
38452: PUSH
38453: LD_VAR 0 1
38457: PPUSH
38458: CALL_OW 310
38462: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38463: LD_VAR 0 11
38467: PPUSH
38468: CALL_OW 247
38472: PUSH
38473: LD_INT 2
38475: EQUAL
38476: IFFALSE 38480
// exit ;
38478: GO 38990
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38480: LD_ADDR_VAR 0 8
38484: PUSH
38485: LD_INT 81
38487: PUSH
38488: LD_VAR 0 9
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 3
38499: PUSH
38500: LD_INT 21
38502: PUSH
38503: LD_INT 3
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PPUSH
38518: CALL_OW 69
38522: ST_TO_ADDR
// if not tmp then
38523: LD_VAR 0 8
38527: NOT
38528: IFFALSE 38532
// exit ;
38530: GO 38990
// if in_unit then
38532: LD_VAR 0 11
38536: IFFALSE 38560
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38538: LD_ADDR_VAR 0 10
38542: PUSH
38543: LD_VAR 0 8
38547: PPUSH
38548: LD_VAR 0 11
38552: PPUSH
38553: CALL_OW 74
38557: ST_TO_ADDR
38558: GO 38580
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38560: LD_ADDR_VAR 0 10
38564: PUSH
38565: LD_VAR 0 8
38569: PPUSH
38570: LD_VAR 0 1
38574: PPUSH
38575: CALL_OW 74
38579: ST_TO_ADDR
// if not enemy then
38580: LD_VAR 0 10
38584: NOT
38585: IFFALSE 38589
// exit ;
38587: GO 38990
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38589: LD_VAR 0 11
38593: PUSH
38594: LD_VAR 0 11
38598: PPUSH
38599: LD_VAR 0 10
38603: PPUSH
38604: CALL_OW 296
38608: PUSH
38609: LD_INT 13
38611: GREATER
38612: AND
38613: PUSH
38614: LD_VAR 0 1
38618: PPUSH
38619: LD_VAR 0 10
38623: PPUSH
38624: CALL_OW 296
38628: PUSH
38629: LD_INT 12
38631: GREATER
38632: OR
38633: IFFALSE 38637
// exit ;
38635: GO 38990
// missile := [ 1 ] ;
38637: LD_ADDR_VAR 0 14
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38648: LD_VAR 0 9
38652: PPUSH
38653: LD_VAR 0 12
38657: PPUSH
38658: CALL_OW 325
38662: IFFALSE 38691
// missile := Insert ( missile , missile + 1 , 2 ) ;
38664: LD_ADDR_VAR 0 14
38668: PUSH
38669: LD_VAR 0 14
38673: PPUSH
38674: LD_VAR 0 14
38678: PUSH
38679: LD_INT 1
38681: PLUS
38682: PPUSH
38683: LD_INT 2
38685: PPUSH
38686: CALL_OW 2
38690: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38691: LD_VAR 0 9
38695: PPUSH
38696: LD_VAR 0 13
38700: PPUSH
38701: CALL_OW 325
38705: PUSH
38706: LD_VAR 0 10
38710: PPUSH
38711: CALL_OW 255
38715: PPUSH
38716: LD_VAR 0 13
38720: PPUSH
38721: CALL_OW 325
38725: NOT
38726: AND
38727: IFFALSE 38756
// missile := Insert ( missile , missile + 1 , 3 ) ;
38729: LD_ADDR_VAR 0 14
38733: PUSH
38734: LD_VAR 0 14
38738: PPUSH
38739: LD_VAR 0 14
38743: PUSH
38744: LD_INT 1
38746: PLUS
38747: PPUSH
38748: LD_INT 3
38750: PPUSH
38751: CALL_OW 2
38755: ST_TO_ADDR
// if missile < 2 then
38756: LD_VAR 0 14
38760: PUSH
38761: LD_INT 2
38763: LESS
38764: IFFALSE 38768
// exit ;
38766: GO 38990
// x := GetX ( enemy ) ;
38768: LD_ADDR_VAR 0 4
38772: PUSH
38773: LD_VAR 0 10
38777: PPUSH
38778: CALL_OW 250
38782: ST_TO_ADDR
// y := GetY ( enemy ) ;
38783: LD_ADDR_VAR 0 5
38787: PUSH
38788: LD_VAR 0 10
38792: PPUSH
38793: CALL_OW 251
38797: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38798: LD_ADDR_VAR 0 6
38802: PUSH
38803: LD_VAR 0 4
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PPUSH
38812: LD_INT 1
38814: PPUSH
38815: CALL_OW 12
38819: PLUS
38820: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38821: LD_ADDR_VAR 0 7
38825: PUSH
38826: LD_VAR 0 5
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PPUSH
38835: LD_INT 1
38837: PPUSH
38838: CALL_OW 12
38842: PLUS
38843: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38844: LD_VAR 0 6
38848: PPUSH
38849: LD_VAR 0 7
38853: PPUSH
38854: CALL_OW 488
38858: NOT
38859: IFFALSE 38881
// begin _x := x ;
38861: LD_ADDR_VAR 0 6
38865: PUSH
38866: LD_VAR 0 4
38870: ST_TO_ADDR
// _y := y ;
38871: LD_ADDR_VAR 0 7
38875: PUSH
38876: LD_VAR 0 5
38880: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38881: LD_ADDR_VAR 0 3
38885: PUSH
38886: LD_INT 1
38888: PPUSH
38889: LD_VAR 0 14
38893: PPUSH
38894: CALL_OW 12
38898: ST_TO_ADDR
// case i of 1 :
38899: LD_VAR 0 3
38903: PUSH
38904: LD_INT 1
38906: DOUBLE
38907: EQUAL
38908: IFTRUE 38912
38910: GO 38929
38912: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38913: LD_VAR 0 1
38917: PPUSH
38918: LD_VAR 0 10
38922: PPUSH
38923: CALL_OW 115
38927: GO 38990
38929: LD_INT 2
38931: DOUBLE
38932: EQUAL
38933: IFTRUE 38937
38935: GO 38959
38937: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38938: LD_VAR 0 1
38942: PPUSH
38943: LD_VAR 0 6
38947: PPUSH
38948: LD_VAR 0 7
38952: PPUSH
38953: CALL_OW 153
38957: GO 38990
38959: LD_INT 3
38961: DOUBLE
38962: EQUAL
38963: IFTRUE 38967
38965: GO 38989
38967: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38968: LD_VAR 0 1
38972: PPUSH
38973: LD_VAR 0 6
38977: PPUSH
38978: LD_VAR 0 7
38982: PPUSH
38983: CALL_OW 154
38987: GO 38990
38989: POP
// end ;
38990: LD_VAR 0 2
38994: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38995: LD_INT 0
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
// if not unit or not building then
39003: LD_VAR 0 1
39007: NOT
39008: PUSH
39009: LD_VAR 0 2
39013: NOT
39014: OR
39015: IFFALSE 39019
// exit ;
39017: GO 39177
// x := GetX ( building ) ;
39019: LD_ADDR_VAR 0 5
39023: PUSH
39024: LD_VAR 0 2
39028: PPUSH
39029: CALL_OW 250
39033: ST_TO_ADDR
// y := GetY ( building ) ;
39034: LD_ADDR_VAR 0 6
39038: PUSH
39039: LD_VAR 0 2
39043: PPUSH
39044: CALL_OW 251
39048: ST_TO_ADDR
// for i = 0 to 5 do
39049: LD_ADDR_VAR 0 4
39053: PUSH
39054: DOUBLE
39055: LD_INT 0
39057: DEC
39058: ST_TO_ADDR
39059: LD_INT 5
39061: PUSH
39062: FOR_TO
39063: IFFALSE 39175
// begin _x := ShiftX ( x , i , 3 ) ;
39065: LD_ADDR_VAR 0 7
39069: PUSH
39070: LD_VAR 0 5
39074: PPUSH
39075: LD_VAR 0 4
39079: PPUSH
39080: LD_INT 3
39082: PPUSH
39083: CALL_OW 272
39087: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39088: LD_ADDR_VAR 0 8
39092: PUSH
39093: LD_VAR 0 6
39097: PPUSH
39098: LD_VAR 0 4
39102: PPUSH
39103: LD_INT 3
39105: PPUSH
39106: CALL_OW 273
39110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39111: LD_VAR 0 7
39115: PPUSH
39116: LD_VAR 0 8
39120: PPUSH
39121: CALL_OW 488
39125: NOT
39126: IFFALSE 39130
// continue ;
39128: GO 39062
// if HexInfo ( _x , _y ) = 0 then
39130: LD_VAR 0 7
39134: PPUSH
39135: LD_VAR 0 8
39139: PPUSH
39140: CALL_OW 428
39144: PUSH
39145: LD_INT 0
39147: EQUAL
39148: IFFALSE 39173
// begin ComMoveXY ( unit , _x , _y ) ;
39150: LD_VAR 0 1
39154: PPUSH
39155: LD_VAR 0 7
39159: PPUSH
39160: LD_VAR 0 8
39164: PPUSH
39165: CALL_OW 111
// exit ;
39169: POP
39170: POP
39171: GO 39177
// end ; end ;
39173: GO 39062
39175: POP
39176: POP
// end ;
39177: LD_VAR 0 3
39181: RET
// export function ScanBase ( side , base_area ) ; begin
39182: LD_INT 0
39184: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39185: LD_ADDR_VAR 0 3
39189: PUSH
39190: LD_VAR 0 2
39194: PPUSH
39195: LD_INT 81
39197: PUSH
39198: LD_VAR 0 1
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PPUSH
39207: CALL_OW 70
39211: ST_TO_ADDR
// end ;
39212: LD_VAR 0 3
39216: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39217: LD_INT 0
39219: PPUSH
39220: PPUSH
39221: PPUSH
39222: PPUSH
// result := false ;
39223: LD_ADDR_VAR 0 2
39227: PUSH
39228: LD_INT 0
39230: ST_TO_ADDR
// side := GetSide ( unit ) ;
39231: LD_ADDR_VAR 0 3
39235: PUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 255
39245: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39246: LD_ADDR_VAR 0 4
39250: PUSH
39251: LD_VAR 0 1
39255: PPUSH
39256: CALL_OW 248
39260: ST_TO_ADDR
// case nat of 1 :
39261: LD_VAR 0 4
39265: PUSH
39266: LD_INT 1
39268: DOUBLE
39269: EQUAL
39270: IFTRUE 39274
39272: GO 39285
39274: POP
// tech := tech_lassight ; 2 :
39275: LD_ADDR_VAR 0 5
39279: PUSH
39280: LD_INT 12
39282: ST_TO_ADDR
39283: GO 39324
39285: LD_INT 2
39287: DOUBLE
39288: EQUAL
39289: IFTRUE 39293
39291: GO 39304
39293: POP
// tech := tech_mortar ; 3 :
39294: LD_ADDR_VAR 0 5
39298: PUSH
39299: LD_INT 41
39301: ST_TO_ADDR
39302: GO 39324
39304: LD_INT 3
39306: DOUBLE
39307: EQUAL
39308: IFTRUE 39312
39310: GO 39323
39312: POP
// tech := tech_bazooka ; end ;
39313: LD_ADDR_VAR 0 5
39317: PUSH
39318: LD_INT 44
39320: ST_TO_ADDR
39321: GO 39324
39323: POP
// if Researched ( side , tech ) then
39324: LD_VAR 0 3
39328: PPUSH
39329: LD_VAR 0 5
39333: PPUSH
39334: CALL_OW 325
39338: IFFALSE 39365
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39340: LD_ADDR_VAR 0 2
39344: PUSH
39345: LD_INT 5
39347: PUSH
39348: LD_INT 8
39350: PUSH
39351: LD_INT 9
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: PUSH
39359: LD_VAR 0 4
39363: ARRAY
39364: ST_TO_ADDR
// end ;
39365: LD_VAR 0 2
39369: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39370: LD_INT 0
39372: PPUSH
39373: PPUSH
39374: PPUSH
// if not mines then
39375: LD_VAR 0 2
39379: NOT
39380: IFFALSE 39384
// exit ;
39382: GO 39528
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39384: LD_ADDR_VAR 0 5
39388: PUSH
39389: LD_INT 81
39391: PUSH
39392: LD_VAR 0 1
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: LD_INT 21
39406: PUSH
39407: LD_INT 3
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PPUSH
39422: CALL_OW 69
39426: ST_TO_ADDR
// for i in mines do
39427: LD_ADDR_VAR 0 4
39431: PUSH
39432: LD_VAR 0 2
39436: PUSH
39437: FOR_IN
39438: IFFALSE 39526
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39440: LD_VAR 0 4
39444: PUSH
39445: LD_INT 1
39447: ARRAY
39448: PPUSH
39449: LD_VAR 0 4
39453: PUSH
39454: LD_INT 2
39456: ARRAY
39457: PPUSH
39458: CALL_OW 458
39462: NOT
39463: IFFALSE 39467
// continue ;
39465: GO 39437
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39467: LD_VAR 0 4
39471: PUSH
39472: LD_INT 1
39474: ARRAY
39475: PPUSH
39476: LD_VAR 0 4
39480: PUSH
39481: LD_INT 2
39483: ARRAY
39484: PPUSH
39485: CALL_OW 428
39489: PUSH
39490: LD_VAR 0 5
39494: IN
39495: IFFALSE 39524
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39497: LD_VAR 0 4
39501: PUSH
39502: LD_INT 1
39504: ARRAY
39505: PPUSH
39506: LD_VAR 0 4
39510: PUSH
39511: LD_INT 2
39513: ARRAY
39514: PPUSH
39515: LD_VAR 0 1
39519: PPUSH
39520: CALL_OW 456
// end ;
39524: GO 39437
39526: POP
39527: POP
// end ;
39528: LD_VAR 0 3
39532: RET
// export function Count ( array ) ; var i ; begin
39533: LD_INT 0
39535: PPUSH
39536: PPUSH
// result := 0 ;
39537: LD_ADDR_VAR 0 2
39541: PUSH
39542: LD_INT 0
39544: ST_TO_ADDR
// for i in array do
39545: LD_ADDR_VAR 0 3
39549: PUSH
39550: LD_VAR 0 1
39554: PUSH
39555: FOR_IN
39556: IFFALSE 39580
// if i then
39558: LD_VAR 0 3
39562: IFFALSE 39578
// result := result + 1 ;
39564: LD_ADDR_VAR 0 2
39568: PUSH
39569: LD_VAR 0 2
39573: PUSH
39574: LD_INT 1
39576: PLUS
39577: ST_TO_ADDR
39578: GO 39555
39580: POP
39581: POP
// end ;
39582: LD_VAR 0 2
39586: RET
// export function IsEmpty ( building ) ; begin
39587: LD_INT 0
39589: PPUSH
// if not building then
39590: LD_VAR 0 1
39594: NOT
39595: IFFALSE 39599
// exit ;
39597: GO 39642
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39599: LD_ADDR_VAR 0 2
39603: PUSH
39604: LD_VAR 0 1
39608: PUSH
39609: LD_INT 22
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 255
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 58
39628: PUSH
39629: EMPTY
39630: LIST
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PPUSH
39636: CALL_OW 69
39640: IN
39641: ST_TO_ADDR
// end ;
39642: LD_VAR 0 2
39646: RET
// export function IsNotFull ( building ) ; begin
39647: LD_INT 0
39649: PPUSH
// if not building then
39650: LD_VAR 0 1
39654: NOT
39655: IFFALSE 39659
// exit ;
39657: GO 39678
// result := UnitsInside ( building ) < 6 ;
39659: LD_ADDR_VAR 0 2
39663: PUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 313
39673: PUSH
39674: LD_INT 6
39676: LESS
39677: ST_TO_ADDR
// end ;
39678: LD_VAR 0 2
39682: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39683: LD_INT 0
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
// tmp := [ ] ;
39689: LD_ADDR_VAR 0 3
39693: PUSH
39694: EMPTY
39695: ST_TO_ADDR
// list := [ ] ;
39696: LD_ADDR_VAR 0 5
39700: PUSH
39701: EMPTY
39702: ST_TO_ADDR
// for i = 16 to 25 do
39703: LD_ADDR_VAR 0 4
39707: PUSH
39708: DOUBLE
39709: LD_INT 16
39711: DEC
39712: ST_TO_ADDR
39713: LD_INT 25
39715: PUSH
39716: FOR_TO
39717: IFFALSE 39790
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_VAR 0 3
39728: PUSH
39729: LD_INT 22
39731: PUSH
39732: LD_VAR 0 1
39736: PPUSH
39737: CALL_OW 255
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 91
39748: PUSH
39749: LD_VAR 0 1
39753: PUSH
39754: LD_INT 6
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 30
39764: PUSH
39765: LD_VAR 0 4
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: PUSH
39779: EMPTY
39780: LIST
39781: PPUSH
39782: CALL_OW 69
39786: ADD
39787: ST_TO_ADDR
39788: GO 39716
39790: POP
39791: POP
// for i = 1 to tmp do
39792: LD_ADDR_VAR 0 4
39796: PUSH
39797: DOUBLE
39798: LD_INT 1
39800: DEC
39801: ST_TO_ADDR
39802: LD_VAR 0 3
39806: PUSH
39807: FOR_TO
39808: IFFALSE 39896
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39810: LD_ADDR_VAR 0 5
39814: PUSH
39815: LD_VAR 0 5
39819: PUSH
39820: LD_VAR 0 3
39824: PUSH
39825: LD_VAR 0 4
39829: ARRAY
39830: PPUSH
39831: CALL_OW 266
39835: PUSH
39836: LD_VAR 0 3
39840: PUSH
39841: LD_VAR 0 4
39845: ARRAY
39846: PPUSH
39847: CALL_OW 250
39851: PUSH
39852: LD_VAR 0 3
39856: PUSH
39857: LD_VAR 0 4
39861: ARRAY
39862: PPUSH
39863: CALL_OW 251
39867: PUSH
39868: LD_VAR 0 3
39872: PUSH
39873: LD_VAR 0 4
39877: ARRAY
39878: PPUSH
39879: CALL_OW 254
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: PUSH
39890: EMPTY
39891: LIST
39892: ADD
39893: ST_TO_ADDR
39894: GO 39807
39896: POP
39897: POP
// result := list ;
39898: LD_ADDR_VAR 0 2
39902: PUSH
39903: LD_VAR 0 5
39907: ST_TO_ADDR
// end ;
39908: LD_VAR 0 2
39912: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39913: LD_INT 0
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
// if not factory then
39922: LD_VAR 0 1
39926: NOT
39927: IFFALSE 39931
// exit ;
39929: GO 40524
// if control = control_apeman then
39931: LD_VAR 0 4
39935: PUSH
39936: LD_INT 5
39938: EQUAL
39939: IFFALSE 40048
// begin tmp := UnitsInside ( factory ) ;
39941: LD_ADDR_VAR 0 8
39945: PUSH
39946: LD_VAR 0 1
39950: PPUSH
39951: CALL_OW 313
39955: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39956: LD_VAR 0 8
39960: PPUSH
39961: LD_INT 25
39963: PUSH
39964: LD_INT 12
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PPUSH
39971: CALL_OW 72
39975: NOT
39976: IFFALSE 39986
// control := control_manual ;
39978: LD_ADDR_VAR 0 4
39982: PUSH
39983: LD_INT 1
39985: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39986: LD_ADDR_VAR 0 8
39990: PUSH
39991: LD_VAR 0 1
39995: PPUSH
39996: CALL 39683 0 1
40000: ST_TO_ADDR
// if tmp then
40001: LD_VAR 0 8
40005: IFFALSE 40048
// begin for i in tmp do
40007: LD_ADDR_VAR 0 7
40011: PUSH
40012: LD_VAR 0 8
40016: PUSH
40017: FOR_IN
40018: IFFALSE 40046
// if i [ 1 ] = b_ext_radio then
40020: LD_VAR 0 7
40024: PUSH
40025: LD_INT 1
40027: ARRAY
40028: PUSH
40029: LD_INT 22
40031: EQUAL
40032: IFFALSE 40044
// begin control := control_remote ;
40034: LD_ADDR_VAR 0 4
40038: PUSH
40039: LD_INT 2
40041: ST_TO_ADDR
// break ;
40042: GO 40046
// end ;
40044: GO 40017
40046: POP
40047: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40048: LD_VAR 0 1
40052: PPUSH
40053: LD_VAR 0 2
40057: PPUSH
40058: LD_VAR 0 3
40062: PPUSH
40063: LD_VAR 0 4
40067: PPUSH
40068: LD_VAR 0 5
40072: PPUSH
40073: CALL_OW 448
40077: IFFALSE 40112
// begin result := [ chassis , engine , control , weapon ] ;
40079: LD_ADDR_VAR 0 6
40083: PUSH
40084: LD_VAR 0 2
40088: PUSH
40089: LD_VAR 0 3
40093: PUSH
40094: LD_VAR 0 4
40098: PUSH
40099: LD_VAR 0 5
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: ST_TO_ADDR
// exit ;
40110: GO 40524
// end ; _chassis := AvailableChassisList ( factory ) ;
40112: LD_ADDR_VAR 0 9
40116: PUSH
40117: LD_VAR 0 1
40121: PPUSH
40122: CALL_OW 475
40126: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40127: LD_ADDR_VAR 0 11
40131: PUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 476
40141: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40142: LD_ADDR_VAR 0 12
40146: PUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: CALL_OW 477
40156: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40157: LD_ADDR_VAR 0 10
40161: PUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 478
40171: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40172: LD_VAR 0 9
40176: NOT
40177: PUSH
40178: LD_VAR 0 11
40182: NOT
40183: OR
40184: PUSH
40185: LD_VAR 0 12
40189: NOT
40190: OR
40191: PUSH
40192: LD_VAR 0 10
40196: NOT
40197: OR
40198: IFFALSE 40233
// begin result := [ chassis , engine , control , weapon ] ;
40200: LD_ADDR_VAR 0 6
40204: PUSH
40205: LD_VAR 0 2
40209: PUSH
40210: LD_VAR 0 3
40214: PUSH
40215: LD_VAR 0 4
40219: PUSH
40220: LD_VAR 0 5
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: ST_TO_ADDR
// exit ;
40231: GO 40524
// end ; if not chassis in _chassis then
40233: LD_VAR 0 2
40237: PUSH
40238: LD_VAR 0 9
40242: IN
40243: NOT
40244: IFFALSE 40270
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40246: LD_ADDR_VAR 0 2
40250: PUSH
40251: LD_VAR 0 9
40255: PUSH
40256: LD_INT 1
40258: PPUSH
40259: LD_VAR 0 9
40263: PPUSH
40264: CALL_OW 12
40268: ARRAY
40269: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40270: LD_VAR 0 2
40274: PPUSH
40275: LD_VAR 0 3
40279: PPUSH
40280: CALL 40529 0 2
40284: NOT
40285: IFFALSE 40344
// repeat engine := _engine [ 1 ] ;
40287: LD_ADDR_VAR 0 3
40291: PUSH
40292: LD_VAR 0 11
40296: PUSH
40297: LD_INT 1
40299: ARRAY
40300: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40301: LD_ADDR_VAR 0 11
40305: PUSH
40306: LD_VAR 0 11
40310: PPUSH
40311: LD_INT 1
40313: PPUSH
40314: CALL_OW 3
40318: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40319: LD_VAR 0 2
40323: PPUSH
40324: LD_VAR 0 3
40328: PPUSH
40329: CALL 40529 0 2
40333: PUSH
40334: LD_VAR 0 11
40338: PUSH
40339: EMPTY
40340: EQUAL
40341: OR
40342: IFFALSE 40287
// if not control in _control then
40344: LD_VAR 0 4
40348: PUSH
40349: LD_VAR 0 12
40353: IN
40354: NOT
40355: IFFALSE 40381
// control := _control [ rand ( 1 , _control ) ] ;
40357: LD_ADDR_VAR 0 4
40361: PUSH
40362: LD_VAR 0 12
40366: PUSH
40367: LD_INT 1
40369: PPUSH
40370: LD_VAR 0 12
40374: PPUSH
40375: CALL_OW 12
40379: ARRAY
40380: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40381: LD_VAR 0 2
40385: PPUSH
40386: LD_VAR 0 5
40390: PPUSH
40391: CALL 40749 0 2
40395: NOT
40396: IFFALSE 40455
// repeat weapon := _weapon [ 1 ] ;
40398: LD_ADDR_VAR 0 5
40402: PUSH
40403: LD_VAR 0 10
40407: PUSH
40408: LD_INT 1
40410: ARRAY
40411: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40412: LD_ADDR_VAR 0 10
40416: PUSH
40417: LD_VAR 0 10
40421: PPUSH
40422: LD_INT 1
40424: PPUSH
40425: CALL_OW 3
40429: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40430: LD_VAR 0 2
40434: PPUSH
40435: LD_VAR 0 5
40439: PPUSH
40440: CALL 40749 0 2
40444: PUSH
40445: LD_VAR 0 10
40449: PUSH
40450: EMPTY
40451: EQUAL
40452: OR
40453: IFFALSE 40398
// result := [ ] ;
40455: LD_ADDR_VAR 0 6
40459: PUSH
40460: EMPTY
40461: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40462: LD_VAR 0 1
40466: PPUSH
40467: LD_VAR 0 2
40471: PPUSH
40472: LD_VAR 0 3
40476: PPUSH
40477: LD_VAR 0 4
40481: PPUSH
40482: LD_VAR 0 5
40486: PPUSH
40487: CALL_OW 448
40491: IFFALSE 40524
// result := [ chassis , engine , control , weapon ] ;
40493: LD_ADDR_VAR 0 6
40497: PUSH
40498: LD_VAR 0 2
40502: PUSH
40503: LD_VAR 0 3
40507: PUSH
40508: LD_VAR 0 4
40512: PUSH
40513: LD_VAR 0 5
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: ST_TO_ADDR
// end ;
40524: LD_VAR 0 6
40528: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40529: LD_INT 0
40531: PPUSH
// if not chassis or not engine then
40532: LD_VAR 0 1
40536: NOT
40537: PUSH
40538: LD_VAR 0 2
40542: NOT
40543: OR
40544: IFFALSE 40548
// exit ;
40546: GO 40744
// case engine of engine_solar :
40548: LD_VAR 0 2
40552: PUSH
40553: LD_INT 2
40555: DOUBLE
40556: EQUAL
40557: IFTRUE 40561
40559: GO 40599
40561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40562: LD_ADDR_VAR 0 3
40566: PUSH
40567: LD_INT 11
40569: PUSH
40570: LD_INT 12
40572: PUSH
40573: LD_INT 13
40575: PUSH
40576: LD_INT 14
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: LD_INT 3
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: ST_TO_ADDR
40597: GO 40728
40599: LD_INT 1
40601: DOUBLE
40602: EQUAL
40603: IFTRUE 40607
40605: GO 40669
40607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40608: LD_ADDR_VAR 0 3
40612: PUSH
40613: LD_INT 11
40615: PUSH
40616: LD_INT 12
40618: PUSH
40619: LD_INT 13
40621: PUSH
40622: LD_INT 14
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 3
40633: PUSH
40634: LD_INT 4
40636: PUSH
40637: LD_INT 5
40639: PUSH
40640: LD_INT 21
40642: PUSH
40643: LD_INT 23
40645: PUSH
40646: LD_INT 22
40648: PUSH
40649: LD_INT 24
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: ST_TO_ADDR
40667: GO 40728
40669: LD_INT 3
40671: DOUBLE
40672: EQUAL
40673: IFTRUE 40677
40675: GO 40727
40677: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40678: LD_ADDR_VAR 0 3
40682: PUSH
40683: LD_INT 13
40685: PUSH
40686: LD_INT 14
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 3
40694: PUSH
40695: LD_INT 4
40697: PUSH
40698: LD_INT 5
40700: PUSH
40701: LD_INT 21
40703: PUSH
40704: LD_INT 22
40706: PUSH
40707: LD_INT 23
40709: PUSH
40710: LD_INT 24
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: ST_TO_ADDR
40725: GO 40728
40727: POP
// result := ( chassis in result ) ;
40728: LD_ADDR_VAR 0 3
40732: PUSH
40733: LD_VAR 0 1
40737: PUSH
40738: LD_VAR 0 3
40742: IN
40743: ST_TO_ADDR
// end ;
40744: LD_VAR 0 3
40748: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40749: LD_INT 0
40751: PPUSH
// if not chassis or not weapon then
40752: LD_VAR 0 1
40756: NOT
40757: PUSH
40758: LD_VAR 0 2
40762: NOT
40763: OR
40764: IFFALSE 40768
// exit ;
40766: GO 41830
// case weapon of us_machine_gun :
40768: LD_VAR 0 2
40772: PUSH
40773: LD_INT 2
40775: DOUBLE
40776: EQUAL
40777: IFTRUE 40781
40779: GO 40811
40781: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40782: LD_ADDR_VAR 0 3
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: LD_INT 3
40795: PUSH
40796: LD_INT 4
40798: PUSH
40799: LD_INT 5
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: ST_TO_ADDR
40809: GO 41814
40811: LD_INT 3
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40819
40817: GO 40849
40819: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 3
40833: PUSH
40834: LD_INT 4
40836: PUSH
40837: LD_INT 5
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
40847: GO 41814
40849: LD_INT 11
40851: DOUBLE
40852: EQUAL
40853: IFTRUE 40857
40855: GO 40887
40857: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40858: LD_ADDR_VAR 0 3
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: LD_INT 3
40871: PUSH
40872: LD_INT 4
40874: PUSH
40875: LD_INT 5
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: ST_TO_ADDR
40885: GO 41814
40887: LD_INT 4
40889: DOUBLE
40890: EQUAL
40891: IFTRUE 40895
40893: GO 40921
40895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 3
40906: PUSH
40907: LD_INT 4
40909: PUSH
40910: LD_INT 5
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: ST_TO_ADDR
40919: GO 41814
40921: LD_INT 5
40923: DOUBLE
40924: EQUAL
40925: IFTRUE 40929
40927: GO 40955
40929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40930: LD_ADDR_VAR 0 3
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: LD_INT 3
40940: PUSH
40941: LD_INT 4
40943: PUSH
40944: LD_INT 5
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: ST_TO_ADDR
40953: GO 41814
40955: LD_INT 9
40957: DOUBLE
40958: EQUAL
40959: IFTRUE 40963
40961: GO 40989
40963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40964: LD_ADDR_VAR 0 3
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 3
40974: PUSH
40975: LD_INT 4
40977: PUSH
40978: LD_INT 5
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
40987: GO 41814
40989: LD_INT 7
40991: DOUBLE
40992: EQUAL
40993: IFTRUE 40997
40995: GO 41023
40997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40998: LD_ADDR_VAR 0 3
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: LD_INT 3
41008: PUSH
41009: LD_INT 4
41011: PUSH
41012: LD_INT 5
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: ST_TO_ADDR
41021: GO 41814
41023: LD_INT 12
41025: DOUBLE
41026: EQUAL
41027: IFTRUE 41031
41029: GO 41057
41031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41032: LD_ADDR_VAR 0 3
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: LD_INT 3
41042: PUSH
41043: LD_INT 4
41045: PUSH
41046: LD_INT 5
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: ST_TO_ADDR
41055: GO 41814
41057: LD_INT 13
41059: DOUBLE
41060: EQUAL
41061: IFTRUE 41065
41063: GO 41091
41065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41066: LD_ADDR_VAR 0 3
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 3
41076: PUSH
41077: LD_INT 4
41079: PUSH
41080: LD_INT 5
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: ST_TO_ADDR
41089: GO 41814
41091: LD_INT 14
41093: DOUBLE
41094: EQUAL
41095: IFTRUE 41099
41097: GO 41117
41099: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41100: LD_ADDR_VAR 0 3
41104: PUSH
41105: LD_INT 4
41107: PUSH
41108: LD_INT 5
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: ST_TO_ADDR
41115: GO 41814
41117: LD_INT 6
41119: DOUBLE
41120: EQUAL
41121: IFTRUE 41125
41123: GO 41143
41125: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41126: LD_ADDR_VAR 0 3
41130: PUSH
41131: LD_INT 4
41133: PUSH
41134: LD_INT 5
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: ST_TO_ADDR
41141: GO 41814
41143: LD_INT 10
41145: DOUBLE
41146: EQUAL
41147: IFTRUE 41151
41149: GO 41169
41151: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41152: LD_ADDR_VAR 0 3
41156: PUSH
41157: LD_INT 4
41159: PUSH
41160: LD_INT 5
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: ST_TO_ADDR
41167: GO 41814
41169: LD_INT 22
41171: DOUBLE
41172: EQUAL
41173: IFTRUE 41177
41175: GO 41203
41177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41178: LD_ADDR_VAR 0 3
41182: PUSH
41183: LD_INT 11
41185: PUSH
41186: LD_INT 12
41188: PUSH
41189: LD_INT 13
41191: PUSH
41192: LD_INT 14
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: ST_TO_ADDR
41201: GO 41814
41203: LD_INT 23
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41211
41209: GO 41237
41211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41212: LD_ADDR_VAR 0 3
41216: PUSH
41217: LD_INT 11
41219: PUSH
41220: LD_INT 12
41222: PUSH
41223: LD_INT 13
41225: PUSH
41226: LD_INT 14
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: ST_TO_ADDR
41235: GO 41814
41237: LD_INT 24
41239: DOUBLE
41240: EQUAL
41241: IFTRUE 41245
41243: GO 41271
41245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41246: LD_ADDR_VAR 0 3
41250: PUSH
41251: LD_INT 11
41253: PUSH
41254: LD_INT 12
41256: PUSH
41257: LD_INT 13
41259: PUSH
41260: LD_INT 14
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: ST_TO_ADDR
41269: GO 41814
41271: LD_INT 30
41273: DOUBLE
41274: EQUAL
41275: IFTRUE 41279
41277: GO 41305
41279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41280: LD_ADDR_VAR 0 3
41284: PUSH
41285: LD_INT 11
41287: PUSH
41288: LD_INT 12
41290: PUSH
41291: LD_INT 13
41293: PUSH
41294: LD_INT 14
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: ST_TO_ADDR
41303: GO 41814
41305: LD_INT 25
41307: DOUBLE
41308: EQUAL
41309: IFTRUE 41313
41311: GO 41331
41313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41314: LD_ADDR_VAR 0 3
41318: PUSH
41319: LD_INT 13
41321: PUSH
41322: LD_INT 14
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: ST_TO_ADDR
41329: GO 41814
41331: LD_INT 27
41333: DOUBLE
41334: EQUAL
41335: IFTRUE 41339
41337: GO 41357
41339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_INT 13
41347: PUSH
41348: LD_INT 14
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: ST_TO_ADDR
41355: GO 41814
41357: LD_EXP 57
41361: DOUBLE
41362: EQUAL
41363: IFTRUE 41367
41365: GO 41393
41367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41368: LD_ADDR_VAR 0 3
41372: PUSH
41373: LD_INT 11
41375: PUSH
41376: LD_INT 12
41378: PUSH
41379: LD_INT 13
41381: PUSH
41382: LD_INT 14
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: ST_TO_ADDR
41391: GO 41814
41393: LD_INT 28
41395: DOUBLE
41396: EQUAL
41397: IFTRUE 41401
41399: GO 41419
41401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41402: LD_ADDR_VAR 0 3
41406: PUSH
41407: LD_INT 13
41409: PUSH
41410: LD_INT 14
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: ST_TO_ADDR
41417: GO 41814
41419: LD_INT 29
41421: DOUBLE
41422: EQUAL
41423: IFTRUE 41427
41425: GO 41445
41427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41428: LD_ADDR_VAR 0 3
41432: PUSH
41433: LD_INT 13
41435: PUSH
41436: LD_INT 14
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: ST_TO_ADDR
41443: GO 41814
41445: LD_INT 31
41447: DOUBLE
41448: EQUAL
41449: IFTRUE 41453
41451: GO 41471
41453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41454: LD_ADDR_VAR 0 3
41458: PUSH
41459: LD_INT 13
41461: PUSH
41462: LD_INT 14
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: ST_TO_ADDR
41469: GO 41814
41471: LD_INT 26
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41479
41477: GO 41497
41479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41480: LD_ADDR_VAR 0 3
41484: PUSH
41485: LD_INT 13
41487: PUSH
41488: LD_INT 14
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: ST_TO_ADDR
41495: GO 41814
41497: LD_INT 42
41499: DOUBLE
41500: EQUAL
41501: IFTRUE 41505
41503: GO 41531
41505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41506: LD_ADDR_VAR 0 3
41510: PUSH
41511: LD_INT 21
41513: PUSH
41514: LD_INT 22
41516: PUSH
41517: LD_INT 23
41519: PUSH
41520: LD_INT 24
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: ST_TO_ADDR
41529: GO 41814
41531: LD_INT 43
41533: DOUBLE
41534: EQUAL
41535: IFTRUE 41539
41537: GO 41565
41539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41540: LD_ADDR_VAR 0 3
41544: PUSH
41545: LD_INT 21
41547: PUSH
41548: LD_INT 22
41550: PUSH
41551: LD_INT 23
41553: PUSH
41554: LD_INT 24
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: ST_TO_ADDR
41563: GO 41814
41565: LD_INT 44
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41573
41571: GO 41599
41573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41574: LD_ADDR_VAR 0 3
41578: PUSH
41579: LD_INT 21
41581: PUSH
41582: LD_INT 22
41584: PUSH
41585: LD_INT 23
41587: PUSH
41588: LD_INT 24
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: ST_TO_ADDR
41597: GO 41814
41599: LD_INT 45
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41607
41605: GO 41633
41607: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41608: LD_ADDR_VAR 0 3
41612: PUSH
41613: LD_INT 21
41615: PUSH
41616: LD_INT 22
41618: PUSH
41619: LD_INT 23
41621: PUSH
41622: LD_INT 24
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: ST_TO_ADDR
41631: GO 41814
41633: LD_INT 49
41635: DOUBLE
41636: EQUAL
41637: IFTRUE 41641
41639: GO 41667
41641: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41642: LD_ADDR_VAR 0 3
41646: PUSH
41647: LD_INT 21
41649: PUSH
41650: LD_INT 22
41652: PUSH
41653: LD_INT 23
41655: PUSH
41656: LD_INT 24
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: ST_TO_ADDR
41665: GO 41814
41667: LD_INT 51
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41675
41673: GO 41701
41675: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41676: LD_ADDR_VAR 0 3
41680: PUSH
41681: LD_INT 21
41683: PUSH
41684: LD_INT 22
41686: PUSH
41687: LD_INT 23
41689: PUSH
41690: LD_INT 24
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: ST_TO_ADDR
41699: GO 41814
41701: LD_INT 52
41703: DOUBLE
41704: EQUAL
41705: IFTRUE 41709
41707: GO 41735
41709: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_INT 21
41717: PUSH
41718: LD_INT 22
41720: PUSH
41721: LD_INT 23
41723: PUSH
41724: LD_INT 24
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
41733: GO 41814
41735: LD_INT 53
41737: DOUBLE
41738: EQUAL
41739: IFTRUE 41743
41741: GO 41761
41743: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41744: LD_ADDR_VAR 0 3
41748: PUSH
41749: LD_INT 23
41751: PUSH
41752: LD_INT 24
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: ST_TO_ADDR
41759: GO 41814
41761: LD_INT 46
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41769
41767: GO 41787
41769: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: LD_INT 23
41777: PUSH
41778: LD_INT 24
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: ST_TO_ADDR
41785: GO 41814
41787: LD_INT 47
41789: DOUBLE
41790: EQUAL
41791: IFTRUE 41795
41793: GO 41813
41795: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41796: LD_ADDR_VAR 0 3
41800: PUSH
41801: LD_INT 23
41803: PUSH
41804: LD_INT 24
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: ST_TO_ADDR
41811: GO 41814
41813: POP
// result := ( chassis in result ) ;
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: LD_VAR 0 1
41823: PUSH
41824: LD_VAR 0 3
41828: IN
41829: ST_TO_ADDR
// end ;
41830: LD_VAR 0 3
41834: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41835: LD_INT 0
41837: PPUSH
41838: PPUSH
41839: PPUSH
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
// result := array ;
41844: LD_ADDR_VAR 0 5
41848: PUSH
41849: LD_VAR 0 1
41853: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41854: LD_VAR 0 1
41858: NOT
41859: PUSH
41860: LD_VAR 0 2
41864: NOT
41865: OR
41866: PUSH
41867: LD_VAR 0 3
41871: NOT
41872: OR
41873: PUSH
41874: LD_VAR 0 2
41878: PUSH
41879: LD_VAR 0 1
41883: GREATER
41884: OR
41885: PUSH
41886: LD_VAR 0 3
41890: PUSH
41891: LD_VAR 0 1
41895: GREATER
41896: OR
41897: IFFALSE 41901
// exit ;
41899: GO 42197
// if direction then
41901: LD_VAR 0 4
41905: IFFALSE 41969
// begin d := 1 ;
41907: LD_ADDR_VAR 0 9
41911: PUSH
41912: LD_INT 1
41914: ST_TO_ADDR
// if i_from > i_to then
41915: LD_VAR 0 2
41919: PUSH
41920: LD_VAR 0 3
41924: GREATER
41925: IFFALSE 41951
// length := ( array - i_from ) + i_to else
41927: LD_ADDR_VAR 0 11
41931: PUSH
41932: LD_VAR 0 1
41936: PUSH
41937: LD_VAR 0 2
41941: MINUS
41942: PUSH
41943: LD_VAR 0 3
41947: PLUS
41948: ST_TO_ADDR
41949: GO 41967
// length := i_to - i_from ;
41951: LD_ADDR_VAR 0 11
41955: PUSH
41956: LD_VAR 0 3
41960: PUSH
41961: LD_VAR 0 2
41965: MINUS
41966: ST_TO_ADDR
// end else
41967: GO 42030
// begin d := - 1 ;
41969: LD_ADDR_VAR 0 9
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: ST_TO_ADDR
// if i_from > i_to then
41978: LD_VAR 0 2
41982: PUSH
41983: LD_VAR 0 3
41987: GREATER
41988: IFFALSE 42008
// length := i_from - i_to else
41990: LD_ADDR_VAR 0 11
41994: PUSH
41995: LD_VAR 0 2
41999: PUSH
42000: LD_VAR 0 3
42004: MINUS
42005: ST_TO_ADDR
42006: GO 42030
// length := ( array - i_to ) + i_from ;
42008: LD_ADDR_VAR 0 11
42012: PUSH
42013: LD_VAR 0 1
42017: PUSH
42018: LD_VAR 0 3
42022: MINUS
42023: PUSH
42024: LD_VAR 0 2
42028: PLUS
42029: ST_TO_ADDR
// end ; if not length then
42030: LD_VAR 0 11
42034: NOT
42035: IFFALSE 42039
// exit ;
42037: GO 42197
// tmp := array ;
42039: LD_ADDR_VAR 0 10
42043: PUSH
42044: LD_VAR 0 1
42048: ST_TO_ADDR
// for i = 1 to length do
42049: LD_ADDR_VAR 0 6
42053: PUSH
42054: DOUBLE
42055: LD_INT 1
42057: DEC
42058: ST_TO_ADDR
42059: LD_VAR 0 11
42063: PUSH
42064: FOR_TO
42065: IFFALSE 42185
// begin for j = 1 to array do
42067: LD_ADDR_VAR 0 7
42071: PUSH
42072: DOUBLE
42073: LD_INT 1
42075: DEC
42076: ST_TO_ADDR
42077: LD_VAR 0 1
42081: PUSH
42082: FOR_TO
42083: IFFALSE 42171
// begin k := j + d ;
42085: LD_ADDR_VAR 0 8
42089: PUSH
42090: LD_VAR 0 7
42094: PUSH
42095: LD_VAR 0 9
42099: PLUS
42100: ST_TO_ADDR
// if k > array then
42101: LD_VAR 0 8
42105: PUSH
42106: LD_VAR 0 1
42110: GREATER
42111: IFFALSE 42121
// k := 1 ;
42113: LD_ADDR_VAR 0 8
42117: PUSH
42118: LD_INT 1
42120: ST_TO_ADDR
// if not k then
42121: LD_VAR 0 8
42125: NOT
42126: IFFALSE 42138
// k := array ;
42128: LD_ADDR_VAR 0 8
42132: PUSH
42133: LD_VAR 0 1
42137: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42138: LD_ADDR_VAR 0 10
42142: PUSH
42143: LD_VAR 0 10
42147: PPUSH
42148: LD_VAR 0 8
42152: PPUSH
42153: LD_VAR 0 1
42157: PUSH
42158: LD_VAR 0 7
42162: ARRAY
42163: PPUSH
42164: CALL_OW 1
42168: ST_TO_ADDR
// end ;
42169: GO 42082
42171: POP
42172: POP
// array := tmp ;
42173: LD_ADDR_VAR 0 1
42177: PUSH
42178: LD_VAR 0 10
42182: ST_TO_ADDR
// end ;
42183: GO 42064
42185: POP
42186: POP
// result := array ;
42187: LD_ADDR_VAR 0 5
42191: PUSH
42192: LD_VAR 0 1
42196: ST_TO_ADDR
// end ;
42197: LD_VAR 0 5
42201: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42202: LD_INT 0
42204: PPUSH
42205: PPUSH
// result := 0 ;
42206: LD_ADDR_VAR 0 3
42210: PUSH
42211: LD_INT 0
42213: ST_TO_ADDR
// if not array or not value in array then
42214: LD_VAR 0 1
42218: NOT
42219: PUSH
42220: LD_VAR 0 2
42224: PUSH
42225: LD_VAR 0 1
42229: IN
42230: NOT
42231: OR
42232: IFFALSE 42236
// exit ;
42234: GO 42290
// for i = 1 to array do
42236: LD_ADDR_VAR 0 4
42240: PUSH
42241: DOUBLE
42242: LD_INT 1
42244: DEC
42245: ST_TO_ADDR
42246: LD_VAR 0 1
42250: PUSH
42251: FOR_TO
42252: IFFALSE 42288
// if value = array [ i ] then
42254: LD_VAR 0 2
42258: PUSH
42259: LD_VAR 0 1
42263: PUSH
42264: LD_VAR 0 4
42268: ARRAY
42269: EQUAL
42270: IFFALSE 42286
// begin result := i ;
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_VAR 0 4
42281: ST_TO_ADDR
// exit ;
42282: POP
42283: POP
42284: GO 42290
// end ;
42286: GO 42251
42288: POP
42289: POP
// end ;
42290: LD_VAR 0 3
42294: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42295: LD_INT 0
42297: PPUSH
// vc_chassis := chassis ;
42298: LD_ADDR_OWVAR 37
42302: PUSH
42303: LD_VAR 0 1
42307: ST_TO_ADDR
// vc_engine := engine ;
42308: LD_ADDR_OWVAR 39
42312: PUSH
42313: LD_VAR 0 2
42317: ST_TO_ADDR
// vc_control := control ;
42318: LD_ADDR_OWVAR 38
42322: PUSH
42323: LD_VAR 0 3
42327: ST_TO_ADDR
// vc_weapon := weapon ;
42328: LD_ADDR_OWVAR 40
42332: PUSH
42333: LD_VAR 0 4
42337: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42338: LD_ADDR_OWVAR 41
42342: PUSH
42343: LD_VAR 0 5
42347: ST_TO_ADDR
// end ;
42348: LD_VAR 0 6
42352: RET
// export function WantPlant ( unit ) ; var task ; begin
42353: LD_INT 0
42355: PPUSH
42356: PPUSH
// result := false ;
42357: LD_ADDR_VAR 0 2
42361: PUSH
42362: LD_INT 0
42364: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42365: LD_ADDR_VAR 0 3
42369: PUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 437
42379: ST_TO_ADDR
// if task then
42380: LD_VAR 0 3
42384: IFFALSE 42412
// if task [ 1 ] [ 1 ] = p then
42386: LD_VAR 0 3
42390: PUSH
42391: LD_INT 1
42393: ARRAY
42394: PUSH
42395: LD_INT 1
42397: ARRAY
42398: PUSH
42399: LD_STRING p
42401: EQUAL
42402: IFFALSE 42412
// result := true ;
42404: LD_ADDR_VAR 0 2
42408: PUSH
42409: LD_INT 1
42411: ST_TO_ADDR
// end ;
42412: LD_VAR 0 2
42416: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42417: LD_INT 0
42419: PPUSH
42420: PPUSH
42421: PPUSH
42422: PPUSH
// if pos < 1 then
42423: LD_VAR 0 2
42427: PUSH
42428: LD_INT 1
42430: LESS
42431: IFFALSE 42435
// exit ;
42433: GO 42738
// if pos = 1 then
42435: LD_VAR 0 2
42439: PUSH
42440: LD_INT 1
42442: EQUAL
42443: IFFALSE 42476
// result := Replace ( arr , pos [ 1 ] , value ) else
42445: LD_ADDR_VAR 0 4
42449: PUSH
42450: LD_VAR 0 1
42454: PPUSH
42455: LD_VAR 0 2
42459: PUSH
42460: LD_INT 1
42462: ARRAY
42463: PPUSH
42464: LD_VAR 0 3
42468: PPUSH
42469: CALL_OW 1
42473: ST_TO_ADDR
42474: GO 42738
// begin tmp := arr ;
42476: LD_ADDR_VAR 0 6
42480: PUSH
42481: LD_VAR 0 1
42485: ST_TO_ADDR
// s_arr := [ tmp ] ;
42486: LD_ADDR_VAR 0 7
42490: PUSH
42491: LD_VAR 0 6
42495: PUSH
42496: EMPTY
42497: LIST
42498: ST_TO_ADDR
// for i = 1 to pos - 1 do
42499: LD_ADDR_VAR 0 5
42503: PUSH
42504: DOUBLE
42505: LD_INT 1
42507: DEC
42508: ST_TO_ADDR
42509: LD_VAR 0 2
42513: PUSH
42514: LD_INT 1
42516: MINUS
42517: PUSH
42518: FOR_TO
42519: IFFALSE 42564
// begin tmp := tmp [ pos [ i ] ] ;
42521: LD_ADDR_VAR 0 6
42525: PUSH
42526: LD_VAR 0 6
42530: PUSH
42531: LD_VAR 0 2
42535: PUSH
42536: LD_VAR 0 5
42540: ARRAY
42541: ARRAY
42542: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42543: LD_ADDR_VAR 0 7
42547: PUSH
42548: LD_VAR 0 7
42552: PUSH
42553: LD_VAR 0 6
42557: PUSH
42558: EMPTY
42559: LIST
42560: ADD
42561: ST_TO_ADDR
// end ;
42562: GO 42518
42564: POP
42565: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42566: LD_ADDR_VAR 0 6
42570: PUSH
42571: LD_VAR 0 6
42575: PPUSH
42576: LD_VAR 0 2
42580: PUSH
42581: LD_VAR 0 2
42585: ARRAY
42586: PPUSH
42587: LD_VAR 0 3
42591: PPUSH
42592: CALL_OW 1
42596: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42597: LD_ADDR_VAR 0 7
42601: PUSH
42602: LD_VAR 0 7
42606: PPUSH
42607: LD_VAR 0 7
42611: PPUSH
42612: LD_VAR 0 6
42616: PPUSH
42617: CALL_OW 1
42621: ST_TO_ADDR
// for i = s_arr downto 2 do
42622: LD_ADDR_VAR 0 5
42626: PUSH
42627: DOUBLE
42628: LD_VAR 0 7
42632: INC
42633: ST_TO_ADDR
42634: LD_INT 2
42636: PUSH
42637: FOR_DOWNTO
42638: IFFALSE 42722
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42640: LD_ADDR_VAR 0 6
42644: PUSH
42645: LD_VAR 0 7
42649: PUSH
42650: LD_VAR 0 5
42654: PUSH
42655: LD_INT 1
42657: MINUS
42658: ARRAY
42659: PPUSH
42660: LD_VAR 0 2
42664: PUSH
42665: LD_VAR 0 5
42669: PUSH
42670: LD_INT 1
42672: MINUS
42673: ARRAY
42674: PPUSH
42675: LD_VAR 0 7
42679: PUSH
42680: LD_VAR 0 5
42684: ARRAY
42685: PPUSH
42686: CALL_OW 1
42690: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42691: LD_ADDR_VAR 0 7
42695: PUSH
42696: LD_VAR 0 7
42700: PPUSH
42701: LD_VAR 0 5
42705: PUSH
42706: LD_INT 1
42708: MINUS
42709: PPUSH
42710: LD_VAR 0 6
42714: PPUSH
42715: CALL_OW 1
42719: ST_TO_ADDR
// end ;
42720: GO 42637
42722: POP
42723: POP
// result := s_arr [ 1 ] ;
42724: LD_ADDR_VAR 0 4
42728: PUSH
42729: LD_VAR 0 7
42733: PUSH
42734: LD_INT 1
42736: ARRAY
42737: ST_TO_ADDR
// end ; end ;
42738: LD_VAR 0 4
42742: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42743: LD_INT 0
42745: PPUSH
42746: PPUSH
// if not list then
42747: LD_VAR 0 1
42751: NOT
42752: IFFALSE 42756
// exit ;
42754: GO 42847
// i := list [ pos1 ] ;
42756: LD_ADDR_VAR 0 5
42760: PUSH
42761: LD_VAR 0 1
42765: PUSH
42766: LD_VAR 0 2
42770: ARRAY
42771: ST_TO_ADDR
// if not i then
42772: LD_VAR 0 5
42776: NOT
42777: IFFALSE 42781
// exit ;
42779: GO 42847
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42781: LD_ADDR_VAR 0 1
42785: PUSH
42786: LD_VAR 0 1
42790: PPUSH
42791: LD_VAR 0 2
42795: PPUSH
42796: LD_VAR 0 1
42800: PUSH
42801: LD_VAR 0 3
42805: ARRAY
42806: PPUSH
42807: CALL_OW 1
42811: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42812: LD_ADDR_VAR 0 1
42816: PUSH
42817: LD_VAR 0 1
42821: PPUSH
42822: LD_VAR 0 3
42826: PPUSH
42827: LD_VAR 0 5
42831: PPUSH
42832: CALL_OW 1
42836: ST_TO_ADDR
// result := list ;
42837: LD_ADDR_VAR 0 4
42841: PUSH
42842: LD_VAR 0 1
42846: ST_TO_ADDR
// end ;
42847: LD_VAR 0 4
42851: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42852: LD_INT 0
42854: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42855: LD_ADDR_VAR 0 5
42859: PUSH
42860: LD_VAR 0 1
42864: PPUSH
42865: CALL_OW 250
42869: PPUSH
42870: LD_VAR 0 1
42874: PPUSH
42875: CALL_OW 251
42879: PPUSH
42880: LD_VAR 0 2
42884: PPUSH
42885: LD_VAR 0 3
42889: PPUSH
42890: LD_VAR 0 4
42894: PPUSH
42895: CALL 42905 0 5
42899: ST_TO_ADDR
// end ;
42900: LD_VAR 0 5
42904: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42905: LD_INT 0
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
// if not list then
42911: LD_VAR 0 3
42915: NOT
42916: IFFALSE 42920
// exit ;
42918: GO 43308
// result := [ ] ;
42920: LD_ADDR_VAR 0 6
42924: PUSH
42925: EMPTY
42926: ST_TO_ADDR
// for i in list do
42927: LD_ADDR_VAR 0 7
42931: PUSH
42932: LD_VAR 0 3
42936: PUSH
42937: FOR_IN
42938: IFFALSE 43140
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42940: LD_ADDR_VAR 0 9
42944: PUSH
42945: LD_VAR 0 7
42949: PPUSH
42950: LD_VAR 0 1
42954: PPUSH
42955: LD_VAR 0 2
42959: PPUSH
42960: CALL_OW 297
42964: ST_TO_ADDR
// if not result then
42965: LD_VAR 0 6
42969: NOT
42970: IFFALSE 42996
// result := [ [ i , tmp ] ] else
42972: LD_ADDR_VAR 0 6
42976: PUSH
42977: LD_VAR 0 7
42981: PUSH
42982: LD_VAR 0 9
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: EMPTY
42992: LIST
42993: ST_TO_ADDR
42994: GO 43138
// begin if result [ result ] [ 2 ] < tmp then
42996: LD_VAR 0 6
43000: PUSH
43001: LD_VAR 0 6
43005: ARRAY
43006: PUSH
43007: LD_INT 2
43009: ARRAY
43010: PUSH
43011: LD_VAR 0 9
43015: LESS
43016: IFFALSE 43058
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43018: LD_ADDR_VAR 0 6
43022: PUSH
43023: LD_VAR 0 6
43027: PPUSH
43028: LD_VAR 0 6
43032: PUSH
43033: LD_INT 1
43035: PLUS
43036: PPUSH
43037: LD_VAR 0 7
43041: PUSH
43042: LD_VAR 0 9
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PPUSH
43051: CALL_OW 2
43055: ST_TO_ADDR
43056: GO 43138
// for j = 1 to result do
43058: LD_ADDR_VAR 0 8
43062: PUSH
43063: DOUBLE
43064: LD_INT 1
43066: DEC
43067: ST_TO_ADDR
43068: LD_VAR 0 6
43072: PUSH
43073: FOR_TO
43074: IFFALSE 43136
// begin if tmp < result [ j ] [ 2 ] then
43076: LD_VAR 0 9
43080: PUSH
43081: LD_VAR 0 6
43085: PUSH
43086: LD_VAR 0 8
43090: ARRAY
43091: PUSH
43092: LD_INT 2
43094: ARRAY
43095: LESS
43096: IFFALSE 43134
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43098: LD_ADDR_VAR 0 6
43102: PUSH
43103: LD_VAR 0 6
43107: PPUSH
43108: LD_VAR 0 8
43112: PPUSH
43113: LD_VAR 0 7
43117: PUSH
43118: LD_VAR 0 9
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PPUSH
43127: CALL_OW 2
43131: ST_TO_ADDR
// break ;
43132: GO 43136
// end ; end ;
43134: GO 43073
43136: POP
43137: POP
// end ; end ;
43138: GO 42937
43140: POP
43141: POP
// if result and not asc then
43142: LD_VAR 0 6
43146: PUSH
43147: LD_VAR 0 4
43151: NOT
43152: AND
43153: IFFALSE 43228
// begin tmp := result ;
43155: LD_ADDR_VAR 0 9
43159: PUSH
43160: LD_VAR 0 6
43164: ST_TO_ADDR
// for i = tmp downto 1 do
43165: LD_ADDR_VAR 0 7
43169: PUSH
43170: DOUBLE
43171: LD_VAR 0 9
43175: INC
43176: ST_TO_ADDR
43177: LD_INT 1
43179: PUSH
43180: FOR_DOWNTO
43181: IFFALSE 43226
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43183: LD_ADDR_VAR 0 6
43187: PUSH
43188: LD_VAR 0 6
43192: PPUSH
43193: LD_VAR 0 9
43197: PUSH
43198: LD_VAR 0 7
43202: MINUS
43203: PUSH
43204: LD_INT 1
43206: PLUS
43207: PPUSH
43208: LD_VAR 0 9
43212: PUSH
43213: LD_VAR 0 7
43217: ARRAY
43218: PPUSH
43219: CALL_OW 1
43223: ST_TO_ADDR
43224: GO 43180
43226: POP
43227: POP
// end ; tmp := [ ] ;
43228: LD_ADDR_VAR 0 9
43232: PUSH
43233: EMPTY
43234: ST_TO_ADDR
// if mode then
43235: LD_VAR 0 5
43239: IFFALSE 43308
// begin for i = 1 to result do
43241: LD_ADDR_VAR 0 7
43245: PUSH
43246: DOUBLE
43247: LD_INT 1
43249: DEC
43250: ST_TO_ADDR
43251: LD_VAR 0 6
43255: PUSH
43256: FOR_TO
43257: IFFALSE 43296
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43259: LD_ADDR_VAR 0 9
43263: PUSH
43264: LD_VAR 0 9
43268: PPUSH
43269: LD_VAR 0 7
43273: PPUSH
43274: LD_VAR 0 6
43278: PUSH
43279: LD_VAR 0 7
43283: ARRAY
43284: PUSH
43285: LD_INT 1
43287: ARRAY
43288: PPUSH
43289: CALL_OW 1
43293: ST_TO_ADDR
43294: GO 43256
43296: POP
43297: POP
// result := tmp ;
43298: LD_ADDR_VAR 0 6
43302: PUSH
43303: LD_VAR 0 9
43307: ST_TO_ADDR
// end ; end ;
43308: LD_VAR 0 6
43312: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43313: LD_INT 0
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43321: LD_ADDR_VAR 0 5
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: ST_TO_ADDR
// if not x or not y then
43343: LD_VAR 0 2
43347: NOT
43348: PUSH
43349: LD_VAR 0 3
43353: NOT
43354: OR
43355: IFFALSE 43359
// exit ;
43357: GO 45011
// if not range then
43359: LD_VAR 0 4
43363: NOT
43364: IFFALSE 43374
// range := 10 ;
43366: LD_ADDR_VAR 0 4
43370: PUSH
43371: LD_INT 10
43373: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43374: LD_ADDR_VAR 0 8
43378: PUSH
43379: LD_INT 81
43381: PUSH
43382: LD_VAR 0 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 92
43393: PUSH
43394: LD_VAR 0 2
43398: PUSH
43399: LD_VAR 0 3
43403: PUSH
43404: LD_VAR 0 4
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: LD_INT 21
43420: PUSH
43421: LD_INT 3
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: PPUSH
43437: CALL_OW 69
43441: ST_TO_ADDR
// if not tmp then
43442: LD_VAR 0 8
43446: NOT
43447: IFFALSE 43451
// exit ;
43449: GO 45011
// for i in tmp do
43451: LD_ADDR_VAR 0 6
43455: PUSH
43456: LD_VAR 0 8
43460: PUSH
43461: FOR_IN
43462: IFFALSE 44986
// begin points := [ 0 , 0 , 0 ] ;
43464: LD_ADDR_VAR 0 9
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: ST_TO_ADDR
// bpoints := 1 ;
43483: LD_ADDR_VAR 0 10
43487: PUSH
43488: LD_INT 1
43490: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43491: LD_VAR 0 6
43495: PPUSH
43496: CALL_OW 247
43500: PUSH
43501: LD_INT 1
43503: DOUBLE
43504: EQUAL
43505: IFTRUE 43509
43507: GO 44087
43509: POP
// begin if GetClass ( i ) = 1 then
43510: LD_VAR 0 6
43514: PPUSH
43515: CALL_OW 257
43519: PUSH
43520: LD_INT 1
43522: EQUAL
43523: IFFALSE 43544
// points := [ 10 , 5 , 3 ] ;
43525: LD_ADDR_VAR 0 9
43529: PUSH
43530: LD_INT 10
43532: PUSH
43533: LD_INT 5
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43544: LD_VAR 0 6
43548: PPUSH
43549: CALL_OW 257
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: LD_INT 4
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: LIST
43567: IN
43568: IFFALSE 43589
// points := [ 3 , 2 , 1 ] ;
43570: LD_ADDR_VAR 0 9
43574: PUSH
43575: LD_INT 3
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43589: LD_VAR 0 6
43593: PPUSH
43594: CALL_OW 257
43598: PUSH
43599: LD_INT 5
43601: EQUAL
43602: IFFALSE 43623
// points := [ 130 , 5 , 2 ] ;
43604: LD_ADDR_VAR 0 9
43608: PUSH
43609: LD_INT 130
43611: PUSH
43612: LD_INT 5
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43623: LD_VAR 0 6
43627: PPUSH
43628: CALL_OW 257
43632: PUSH
43633: LD_INT 8
43635: EQUAL
43636: IFFALSE 43657
// points := [ 35 , 35 , 30 ] ;
43638: LD_ADDR_VAR 0 9
43642: PUSH
43643: LD_INT 35
43645: PUSH
43646: LD_INT 35
43648: PUSH
43649: LD_INT 30
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43657: LD_VAR 0 6
43661: PPUSH
43662: CALL_OW 257
43666: PUSH
43667: LD_INT 9
43669: EQUAL
43670: IFFALSE 43691
// points := [ 20 , 55 , 40 ] ;
43672: LD_ADDR_VAR 0 9
43676: PUSH
43677: LD_INT 20
43679: PUSH
43680: LD_INT 55
43682: PUSH
43683: LD_INT 40
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43691: LD_VAR 0 6
43695: PPUSH
43696: CALL_OW 257
43700: PUSH
43701: LD_INT 12
43703: PUSH
43704: LD_INT 16
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: IN
43711: IFFALSE 43732
// points := [ 5 , 3 , 2 ] ;
43713: LD_ADDR_VAR 0 9
43717: PUSH
43718: LD_INT 5
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43732: LD_VAR 0 6
43736: PPUSH
43737: CALL_OW 257
43741: PUSH
43742: LD_INT 17
43744: EQUAL
43745: IFFALSE 43766
// points := [ 100 , 50 , 75 ] ;
43747: LD_ADDR_VAR 0 9
43751: PUSH
43752: LD_INT 100
43754: PUSH
43755: LD_INT 50
43757: PUSH
43758: LD_INT 75
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43766: LD_VAR 0 6
43770: PPUSH
43771: CALL_OW 257
43775: PUSH
43776: LD_INT 15
43778: EQUAL
43779: IFFALSE 43800
// points := [ 10 , 5 , 3 ] ;
43781: LD_ADDR_VAR 0 9
43785: PUSH
43786: LD_INT 10
43788: PUSH
43789: LD_INT 5
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43800: LD_VAR 0 6
43804: PPUSH
43805: CALL_OW 257
43809: PUSH
43810: LD_INT 14
43812: EQUAL
43813: IFFALSE 43834
// points := [ 10 , 0 , 0 ] ;
43815: LD_ADDR_VAR 0 9
43819: PUSH
43820: LD_INT 10
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43834: LD_VAR 0 6
43838: PPUSH
43839: CALL_OW 257
43843: PUSH
43844: LD_INT 11
43846: EQUAL
43847: IFFALSE 43868
// points := [ 30 , 10 , 5 ] ;
43849: LD_ADDR_VAR 0 9
43853: PUSH
43854: LD_INT 30
43856: PUSH
43857: LD_INT 10
43859: PUSH
43860: LD_INT 5
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43868: LD_VAR 0 1
43872: PPUSH
43873: LD_INT 5
43875: PPUSH
43876: CALL_OW 321
43880: PUSH
43881: LD_INT 2
43883: EQUAL
43884: IFFALSE 43901
// bpoints := bpoints * 1.8 ;
43886: LD_ADDR_VAR 0 10
43890: PUSH
43891: LD_VAR 0 10
43895: PUSH
43896: LD_REAL  1.80000000000000E+0000
43899: MUL
43900: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43901: LD_VAR 0 6
43905: PPUSH
43906: CALL_OW 257
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 4
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: IN
43929: PUSH
43930: LD_VAR 0 1
43934: PPUSH
43935: LD_INT 51
43937: PPUSH
43938: CALL_OW 321
43942: PUSH
43943: LD_INT 2
43945: EQUAL
43946: AND
43947: IFFALSE 43964
// bpoints := bpoints * 1.2 ;
43949: LD_ADDR_VAR 0 10
43953: PUSH
43954: LD_VAR 0 10
43958: PUSH
43959: LD_REAL  1.20000000000000E+0000
43962: MUL
43963: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43964: LD_VAR 0 6
43968: PPUSH
43969: CALL_OW 257
43973: PUSH
43974: LD_INT 5
43976: PUSH
43977: LD_INT 7
43979: PUSH
43980: LD_INT 9
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: LIST
43987: IN
43988: PUSH
43989: LD_VAR 0 1
43993: PPUSH
43994: LD_INT 52
43996: PPUSH
43997: CALL_OW 321
44001: PUSH
44002: LD_INT 2
44004: EQUAL
44005: AND
44006: IFFALSE 44023
// bpoints := bpoints * 1.5 ;
44008: LD_ADDR_VAR 0 10
44012: PUSH
44013: LD_VAR 0 10
44017: PUSH
44018: LD_REAL  1.50000000000000E+0000
44021: MUL
44022: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44023: LD_VAR 0 1
44027: PPUSH
44028: LD_INT 66
44030: PPUSH
44031: CALL_OW 321
44035: PUSH
44036: LD_INT 2
44038: EQUAL
44039: IFFALSE 44056
// bpoints := bpoints * 1.1 ;
44041: LD_ADDR_VAR 0 10
44045: PUSH
44046: LD_VAR 0 10
44050: PUSH
44051: LD_REAL  1.10000000000000E+0000
44054: MUL
44055: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44056: LD_ADDR_VAR 0 10
44060: PUSH
44061: LD_VAR 0 10
44065: PUSH
44066: LD_VAR 0 6
44070: PPUSH
44071: LD_INT 1
44073: PPUSH
44074: CALL_OW 259
44078: PUSH
44079: LD_REAL  1.15000000000000E+0000
44082: MUL
44083: MUL
44084: ST_TO_ADDR
// end ; unit_vehicle :
44085: GO 44915
44087: LD_INT 2
44089: DOUBLE
44090: EQUAL
44091: IFTRUE 44095
44093: GO 44903
44095: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44096: LD_VAR 0 6
44100: PPUSH
44101: CALL_OW 264
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: LD_INT 42
44111: PUSH
44112: LD_INT 24
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: IN
44120: IFFALSE 44141
// points := [ 25 , 5 , 3 ] ;
44122: LD_ADDR_VAR 0 9
44126: PUSH
44127: LD_INT 25
44129: PUSH
44130: LD_INT 5
44132: PUSH
44133: LD_INT 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44141: LD_VAR 0 6
44145: PPUSH
44146: CALL_OW 264
44150: PUSH
44151: LD_INT 4
44153: PUSH
44154: LD_INT 43
44156: PUSH
44157: LD_INT 25
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: LIST
44164: IN
44165: IFFALSE 44186
// points := [ 40 , 15 , 5 ] ;
44167: LD_ADDR_VAR 0 9
44171: PUSH
44172: LD_INT 40
44174: PUSH
44175: LD_INT 15
44177: PUSH
44178: LD_INT 5
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44186: LD_VAR 0 6
44190: PPUSH
44191: CALL_OW 264
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 23
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: IN
44206: IFFALSE 44227
// points := [ 7 , 25 , 8 ] ;
44208: LD_ADDR_VAR 0 9
44212: PUSH
44213: LD_INT 7
44215: PUSH
44216: LD_INT 25
44218: PUSH
44219: LD_INT 8
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44227: LD_VAR 0 6
44231: PPUSH
44232: CALL_OW 264
44236: PUSH
44237: LD_INT 5
44239: PUSH
44240: LD_INT 27
44242: PUSH
44243: LD_INT 44
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: IN
44251: IFFALSE 44272
// points := [ 14 , 50 , 16 ] ;
44253: LD_ADDR_VAR 0 9
44257: PUSH
44258: LD_INT 14
44260: PUSH
44261: LD_INT 50
44263: PUSH
44264: LD_INT 16
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: LIST
44271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44272: LD_VAR 0 6
44276: PPUSH
44277: CALL_OW 264
44281: PUSH
44282: LD_INT 6
44284: PUSH
44285: LD_INT 46
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: IN
44292: IFFALSE 44313
// points := [ 32 , 120 , 70 ] ;
44294: LD_ADDR_VAR 0 9
44298: PUSH
44299: LD_INT 32
44301: PUSH
44302: LD_INT 120
44304: PUSH
44305: LD_INT 70
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44313: LD_VAR 0 6
44317: PPUSH
44318: CALL_OW 264
44322: PUSH
44323: LD_INT 7
44325: PUSH
44326: LD_INT 28
44328: PUSH
44329: LD_INT 45
44331: PUSH
44332: LD_EXP 57
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: IN
44343: IFFALSE 44364
// points := [ 35 , 20 , 45 ] ;
44345: LD_ADDR_VAR 0 9
44349: PUSH
44350: LD_INT 35
44352: PUSH
44353: LD_INT 20
44355: PUSH
44356: LD_INT 45
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44364: LD_VAR 0 6
44368: PPUSH
44369: CALL_OW 264
44373: PUSH
44374: LD_INT 47
44376: PUSH
44377: EMPTY
44378: LIST
44379: IN
44380: IFFALSE 44401
// points := [ 67 , 45 , 75 ] ;
44382: LD_ADDR_VAR 0 9
44386: PUSH
44387: LD_INT 67
44389: PUSH
44390: LD_INT 45
44392: PUSH
44393: LD_INT 75
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44401: LD_VAR 0 6
44405: PPUSH
44406: CALL_OW 264
44410: PUSH
44411: LD_INT 26
44413: PUSH
44414: EMPTY
44415: LIST
44416: IN
44417: IFFALSE 44438
// points := [ 120 , 30 , 80 ] ;
44419: LD_ADDR_VAR 0 9
44423: PUSH
44424: LD_INT 120
44426: PUSH
44427: LD_INT 30
44429: PUSH
44430: LD_INT 80
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44438: LD_VAR 0 6
44442: PPUSH
44443: CALL_OW 264
44447: PUSH
44448: LD_INT 22
44450: PUSH
44451: EMPTY
44452: LIST
44453: IN
44454: IFFALSE 44475
// points := [ 40 , 1 , 1 ] ;
44456: LD_ADDR_VAR 0 9
44460: PUSH
44461: LD_INT 40
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: LIST
44474: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44475: LD_VAR 0 6
44479: PPUSH
44480: CALL_OW 264
44484: PUSH
44485: LD_INT 29
44487: PUSH
44488: EMPTY
44489: LIST
44490: IN
44491: IFFALSE 44512
// points := [ 70 , 200 , 400 ] ;
44493: LD_ADDR_VAR 0 9
44497: PUSH
44498: LD_INT 70
44500: PUSH
44501: LD_INT 200
44503: PUSH
44504: LD_INT 400
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44512: LD_VAR 0 6
44516: PPUSH
44517: CALL_OW 264
44521: PUSH
44522: LD_INT 14
44524: PUSH
44525: LD_INT 53
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: IN
44532: IFFALSE 44553
// points := [ 40 , 10 , 20 ] ;
44534: LD_ADDR_VAR 0 9
44538: PUSH
44539: LD_INT 40
44541: PUSH
44542: LD_INT 10
44544: PUSH
44545: LD_INT 20
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44553: LD_VAR 0 6
44557: PPUSH
44558: CALL_OW 264
44562: PUSH
44563: LD_INT 9
44565: PUSH
44566: EMPTY
44567: LIST
44568: IN
44569: IFFALSE 44590
// points := [ 5 , 70 , 20 ] ;
44571: LD_ADDR_VAR 0 9
44575: PUSH
44576: LD_INT 5
44578: PUSH
44579: LD_INT 70
44581: PUSH
44582: LD_INT 20
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44590: LD_VAR 0 6
44594: PPUSH
44595: CALL_OW 264
44599: PUSH
44600: LD_INT 10
44602: PUSH
44603: EMPTY
44604: LIST
44605: IN
44606: IFFALSE 44627
// points := [ 35 , 110 , 70 ] ;
44608: LD_ADDR_VAR 0 9
44612: PUSH
44613: LD_INT 35
44615: PUSH
44616: LD_INT 110
44618: PUSH
44619: LD_INT 70
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44627: LD_VAR 0 6
44631: PPUSH
44632: CALL_OW 265
44636: PUSH
44637: LD_INT 25
44639: EQUAL
44640: IFFALSE 44661
// points := [ 80 , 65 , 100 ] ;
44642: LD_ADDR_VAR 0 9
44646: PUSH
44647: LD_INT 80
44649: PUSH
44650: LD_INT 65
44652: PUSH
44653: LD_INT 100
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44661: LD_VAR 0 6
44665: PPUSH
44666: CALL_OW 263
44670: PUSH
44671: LD_INT 1
44673: EQUAL
44674: IFFALSE 44709
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44676: LD_ADDR_VAR 0 10
44680: PUSH
44681: LD_VAR 0 10
44685: PUSH
44686: LD_VAR 0 6
44690: PPUSH
44691: CALL_OW 311
44695: PPUSH
44696: LD_INT 3
44698: PPUSH
44699: CALL_OW 259
44703: PUSH
44704: LD_INT 4
44706: MUL
44707: MUL
44708: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44709: LD_VAR 0 6
44713: PPUSH
44714: CALL_OW 263
44718: PUSH
44719: LD_INT 2
44721: EQUAL
44722: IFFALSE 44773
// begin j := IsControledBy ( i ) ;
44724: LD_ADDR_VAR 0 7
44728: PUSH
44729: LD_VAR 0 6
44733: PPUSH
44734: CALL_OW 312
44738: ST_TO_ADDR
// if j then
44739: LD_VAR 0 7
44743: IFFALSE 44773
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44745: LD_ADDR_VAR 0 10
44749: PUSH
44750: LD_VAR 0 10
44754: PUSH
44755: LD_VAR 0 7
44759: PPUSH
44760: LD_INT 3
44762: PPUSH
44763: CALL_OW 259
44767: PUSH
44768: LD_INT 3
44770: MUL
44771: MUL
44772: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44773: LD_VAR 0 6
44777: PPUSH
44778: CALL_OW 264
44782: PUSH
44783: LD_INT 5
44785: PUSH
44786: LD_INT 6
44788: PUSH
44789: LD_INT 46
44791: PUSH
44792: LD_INT 44
44794: PUSH
44795: LD_INT 47
44797: PUSH
44798: LD_INT 45
44800: PUSH
44801: LD_INT 28
44803: PUSH
44804: LD_INT 7
44806: PUSH
44807: LD_INT 27
44809: PUSH
44810: LD_INT 29
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: IN
44825: PUSH
44826: LD_VAR 0 1
44830: PPUSH
44831: LD_INT 52
44833: PPUSH
44834: CALL_OW 321
44838: PUSH
44839: LD_INT 2
44841: EQUAL
44842: AND
44843: IFFALSE 44860
// bpoints := bpoints * 1.2 ;
44845: LD_ADDR_VAR 0 10
44849: PUSH
44850: LD_VAR 0 10
44854: PUSH
44855: LD_REAL  1.20000000000000E+0000
44858: MUL
44859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44860: LD_VAR 0 6
44864: PPUSH
44865: CALL_OW 264
44869: PUSH
44870: LD_INT 6
44872: PUSH
44873: LD_INT 46
44875: PUSH
44876: LD_INT 47
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: IN
44884: IFFALSE 44901
// bpoints := bpoints * 1.2 ;
44886: LD_ADDR_VAR 0 10
44890: PUSH
44891: LD_VAR 0 10
44895: PUSH
44896: LD_REAL  1.20000000000000E+0000
44899: MUL
44900: ST_TO_ADDR
// end ; unit_building :
44901: GO 44915
44903: LD_INT 3
44905: DOUBLE
44906: EQUAL
44907: IFTRUE 44911
44909: GO 44914
44911: POP
// ; end ;
44912: GO 44915
44914: POP
// for j = 1 to 3 do
44915: LD_ADDR_VAR 0 7
44919: PUSH
44920: DOUBLE
44921: LD_INT 1
44923: DEC
44924: ST_TO_ADDR
44925: LD_INT 3
44927: PUSH
44928: FOR_TO
44929: IFFALSE 44982
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44931: LD_ADDR_VAR 0 5
44935: PUSH
44936: LD_VAR 0 5
44940: PPUSH
44941: LD_VAR 0 7
44945: PPUSH
44946: LD_VAR 0 5
44950: PUSH
44951: LD_VAR 0 7
44955: ARRAY
44956: PUSH
44957: LD_VAR 0 9
44961: PUSH
44962: LD_VAR 0 7
44966: ARRAY
44967: PUSH
44968: LD_VAR 0 10
44972: MUL
44973: PLUS
44974: PPUSH
44975: CALL_OW 1
44979: ST_TO_ADDR
44980: GO 44928
44982: POP
44983: POP
// end ;
44984: GO 43461
44986: POP
44987: POP
// result := Replace ( result , 4 , tmp ) ;
44988: LD_ADDR_VAR 0 5
44992: PUSH
44993: LD_VAR 0 5
44997: PPUSH
44998: LD_INT 4
45000: PPUSH
45001: LD_VAR 0 8
45005: PPUSH
45006: CALL_OW 1
45010: ST_TO_ADDR
// end ;
45011: LD_VAR 0 5
45015: RET
// export function DangerAtRange ( unit , range ) ; begin
45016: LD_INT 0
45018: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45019: LD_ADDR_VAR 0 3
45023: PUSH
45024: LD_VAR 0 1
45028: PPUSH
45029: CALL_OW 255
45033: PPUSH
45034: LD_VAR 0 1
45038: PPUSH
45039: CALL_OW 250
45043: PPUSH
45044: LD_VAR 0 1
45048: PPUSH
45049: CALL_OW 251
45053: PPUSH
45054: LD_VAR 0 2
45058: PPUSH
45059: CALL 43313 0 4
45063: ST_TO_ADDR
// end ;
45064: LD_VAR 0 3
45068: RET
// export function DangerInArea ( side , area ) ; begin
45069: LD_INT 0
45071: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45072: LD_ADDR_VAR 0 3
45076: PUSH
45077: LD_VAR 0 2
45081: PPUSH
45082: LD_INT 81
45084: PUSH
45085: LD_VAR 0 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PPUSH
45094: CALL_OW 70
45098: ST_TO_ADDR
// end ;
45099: LD_VAR 0 3
45103: RET
// export function IsExtension ( b ) ; begin
45104: LD_INT 0
45106: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45107: LD_ADDR_VAR 0 2
45111: PUSH
45112: LD_VAR 0 1
45116: PUSH
45117: LD_INT 23
45119: PUSH
45120: LD_INT 20
45122: PUSH
45123: LD_INT 22
45125: PUSH
45126: LD_INT 17
45128: PUSH
45129: LD_INT 24
45131: PUSH
45132: LD_INT 21
45134: PUSH
45135: LD_INT 19
45137: PUSH
45138: LD_INT 16
45140: PUSH
45141: LD_INT 25
45143: PUSH
45144: LD_INT 18
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: IN
45159: ST_TO_ADDR
// end ;
45160: LD_VAR 0 2
45164: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45165: LD_INT 0
45167: PPUSH
45168: PPUSH
45169: PPUSH
// result := [ ] ;
45170: LD_ADDR_VAR 0 4
45174: PUSH
45175: EMPTY
45176: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45177: LD_ADDR_VAR 0 5
45181: PUSH
45182: LD_VAR 0 2
45186: PPUSH
45187: LD_INT 21
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PPUSH
45197: CALL_OW 70
45201: ST_TO_ADDR
// if not tmp then
45202: LD_VAR 0 5
45206: NOT
45207: IFFALSE 45211
// exit ;
45209: GO 45275
// if checkLink then
45211: LD_VAR 0 3
45215: IFFALSE 45265
// begin for i in tmp do
45217: LD_ADDR_VAR 0 6
45221: PUSH
45222: LD_VAR 0 5
45226: PUSH
45227: FOR_IN
45228: IFFALSE 45263
// if GetBase ( i ) <> base then
45230: LD_VAR 0 6
45234: PPUSH
45235: CALL_OW 274
45239: PUSH
45240: LD_VAR 0 1
45244: NONEQUAL
45245: IFFALSE 45261
// ComLinkToBase ( base , i ) ;
45247: LD_VAR 0 1
45251: PPUSH
45252: LD_VAR 0 6
45256: PPUSH
45257: CALL_OW 169
45261: GO 45227
45263: POP
45264: POP
// end ; result := tmp ;
45265: LD_ADDR_VAR 0 4
45269: PUSH
45270: LD_VAR 0 5
45274: ST_TO_ADDR
// end ;
45275: LD_VAR 0 4
45279: RET
// export function ComComplete ( units , b ) ; var i ; begin
45280: LD_INT 0
45282: PPUSH
45283: PPUSH
// if not units then
45284: LD_VAR 0 1
45288: NOT
45289: IFFALSE 45293
// exit ;
45291: GO 45383
// for i in units do
45293: LD_ADDR_VAR 0 4
45297: PUSH
45298: LD_VAR 0 1
45302: PUSH
45303: FOR_IN
45304: IFFALSE 45381
// if BuildingStatus ( b ) = bs_build then
45306: LD_VAR 0 2
45310: PPUSH
45311: CALL_OW 461
45315: PUSH
45316: LD_INT 1
45318: EQUAL
45319: IFFALSE 45379
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45321: LD_VAR 0 4
45325: PPUSH
45326: LD_STRING h
45328: PUSH
45329: LD_VAR 0 2
45333: PPUSH
45334: CALL_OW 250
45338: PUSH
45339: LD_VAR 0 2
45343: PPUSH
45344: CALL_OW 251
45348: PUSH
45349: LD_VAR 0 2
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: PPUSH
45375: CALL_OW 446
45379: GO 45303
45381: POP
45382: POP
// end ;
45383: LD_VAR 0 3
45387: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45388: LD_INT 0
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
45395: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45396: LD_VAR 0 1
45400: NOT
45401: PUSH
45402: LD_VAR 0 1
45406: PPUSH
45407: CALL_OW 263
45411: PUSH
45412: LD_INT 2
45414: NONEQUAL
45415: OR
45416: IFFALSE 45420
// exit ;
45418: GO 45736
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45420: LD_ADDR_VAR 0 6
45424: PUSH
45425: LD_INT 22
45427: PUSH
45428: LD_VAR 0 1
45432: PPUSH
45433: CALL_OW 255
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 30
45447: PUSH
45448: LD_INT 36
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 34
45457: PUSH
45458: LD_INT 31
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PPUSH
45474: CALL_OW 69
45478: ST_TO_ADDR
// if not tmp then
45479: LD_VAR 0 6
45483: NOT
45484: IFFALSE 45488
// exit ;
45486: GO 45736
// result := [ ] ;
45488: LD_ADDR_VAR 0 2
45492: PUSH
45493: EMPTY
45494: ST_TO_ADDR
// for i in tmp do
45495: LD_ADDR_VAR 0 3
45499: PUSH
45500: LD_VAR 0 6
45504: PUSH
45505: FOR_IN
45506: IFFALSE 45577
// begin t := UnitsInside ( i ) ;
45508: LD_ADDR_VAR 0 4
45512: PUSH
45513: LD_VAR 0 3
45517: PPUSH
45518: CALL_OW 313
45522: ST_TO_ADDR
// if t then
45523: LD_VAR 0 4
45527: IFFALSE 45575
// for j in t do
45529: LD_ADDR_VAR 0 7
45533: PUSH
45534: LD_VAR 0 4
45538: PUSH
45539: FOR_IN
45540: IFFALSE 45573
// result := Replace ( result , result + 1 , j ) ;
45542: LD_ADDR_VAR 0 2
45546: PUSH
45547: LD_VAR 0 2
45551: PPUSH
45552: LD_VAR 0 2
45556: PUSH
45557: LD_INT 1
45559: PLUS
45560: PPUSH
45561: LD_VAR 0 7
45565: PPUSH
45566: CALL_OW 1
45570: ST_TO_ADDR
45571: GO 45539
45573: POP
45574: POP
// end ;
45575: GO 45505
45577: POP
45578: POP
// if not result then
45579: LD_VAR 0 2
45583: NOT
45584: IFFALSE 45588
// exit ;
45586: GO 45736
// mech := result [ 1 ] ;
45588: LD_ADDR_VAR 0 5
45592: PUSH
45593: LD_VAR 0 2
45597: PUSH
45598: LD_INT 1
45600: ARRAY
45601: ST_TO_ADDR
// if result > 1 then
45602: LD_VAR 0 2
45606: PUSH
45607: LD_INT 1
45609: GREATER
45610: IFFALSE 45722
// begin for i = 2 to result do
45612: LD_ADDR_VAR 0 3
45616: PUSH
45617: DOUBLE
45618: LD_INT 2
45620: DEC
45621: ST_TO_ADDR
45622: LD_VAR 0 2
45626: PUSH
45627: FOR_TO
45628: IFFALSE 45720
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45630: LD_ADDR_VAR 0 4
45634: PUSH
45635: LD_VAR 0 2
45639: PUSH
45640: LD_VAR 0 3
45644: ARRAY
45645: PPUSH
45646: LD_INT 3
45648: PPUSH
45649: CALL_OW 259
45653: PUSH
45654: LD_VAR 0 2
45658: PUSH
45659: LD_VAR 0 3
45663: ARRAY
45664: PPUSH
45665: CALL_OW 432
45669: MINUS
45670: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45671: LD_VAR 0 4
45675: PUSH
45676: LD_VAR 0 5
45680: PPUSH
45681: LD_INT 3
45683: PPUSH
45684: CALL_OW 259
45688: PUSH
45689: LD_VAR 0 5
45693: PPUSH
45694: CALL_OW 432
45698: MINUS
45699: GREATEREQUAL
45700: IFFALSE 45718
// mech := result [ i ] ;
45702: LD_ADDR_VAR 0 5
45706: PUSH
45707: LD_VAR 0 2
45711: PUSH
45712: LD_VAR 0 3
45716: ARRAY
45717: ST_TO_ADDR
// end ;
45718: GO 45627
45720: POP
45721: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45722: LD_VAR 0 1
45726: PPUSH
45727: LD_VAR 0 5
45731: PPUSH
45732: CALL_OW 135
// end ;
45736: LD_VAR 0 2
45740: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45741: LD_INT 0
45743: PPUSH
45744: PPUSH
45745: PPUSH
45746: PPUSH
45747: PPUSH
45748: PPUSH
45749: PPUSH
45750: PPUSH
45751: PPUSH
45752: PPUSH
45753: PPUSH
45754: PPUSH
45755: PPUSH
// result := [ ] ;
45756: LD_ADDR_VAR 0 7
45760: PUSH
45761: EMPTY
45762: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45763: LD_VAR 0 1
45767: PPUSH
45768: CALL_OW 266
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: IN
45783: NOT
45784: IFFALSE 45788
// exit ;
45786: GO 47422
// if name then
45788: LD_VAR 0 3
45792: IFFALSE 45808
// SetBName ( base_dep , name ) ;
45794: LD_VAR 0 1
45798: PPUSH
45799: LD_VAR 0 3
45803: PPUSH
45804: CALL_OW 500
// base := GetBase ( base_dep ) ;
45808: LD_ADDR_VAR 0 15
45812: PUSH
45813: LD_VAR 0 1
45817: PPUSH
45818: CALL_OW 274
45822: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45823: LD_ADDR_VAR 0 16
45827: PUSH
45828: LD_VAR 0 1
45832: PPUSH
45833: CALL_OW 255
45837: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45838: LD_ADDR_VAR 0 17
45842: PUSH
45843: LD_VAR 0 1
45847: PPUSH
45848: CALL_OW 248
45852: ST_TO_ADDR
// if sources then
45853: LD_VAR 0 5
45857: IFFALSE 45904
// for i = 1 to 3 do
45859: LD_ADDR_VAR 0 8
45863: PUSH
45864: DOUBLE
45865: LD_INT 1
45867: DEC
45868: ST_TO_ADDR
45869: LD_INT 3
45871: PUSH
45872: FOR_TO
45873: IFFALSE 45902
// AddResourceType ( base , i , sources [ i ] ) ;
45875: LD_VAR 0 15
45879: PPUSH
45880: LD_VAR 0 8
45884: PPUSH
45885: LD_VAR 0 5
45889: PUSH
45890: LD_VAR 0 8
45894: ARRAY
45895: PPUSH
45896: CALL_OW 276
45900: GO 45872
45902: POP
45903: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45904: LD_ADDR_VAR 0 18
45908: PUSH
45909: LD_VAR 0 15
45913: PPUSH
45914: LD_VAR 0 2
45918: PPUSH
45919: LD_INT 1
45921: PPUSH
45922: CALL 45165 0 3
45926: ST_TO_ADDR
// InitHc ;
45927: CALL_OW 19
// InitUc ;
45931: CALL_OW 18
// uc_side := side ;
45935: LD_ADDR_OWVAR 20
45939: PUSH
45940: LD_VAR 0 16
45944: ST_TO_ADDR
// uc_nation := nation ;
45945: LD_ADDR_OWVAR 21
45949: PUSH
45950: LD_VAR 0 17
45954: ST_TO_ADDR
// if buildings then
45955: LD_VAR 0 18
45959: IFFALSE 47281
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45961: LD_ADDR_VAR 0 19
45965: PUSH
45966: LD_VAR 0 18
45970: PPUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 30
45976: PUSH
45977: LD_INT 29
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 30
45986: PUSH
45987: LD_INT 30
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: PPUSH
45999: CALL_OW 72
46003: ST_TO_ADDR
// if tmp then
46004: LD_VAR 0 19
46008: IFFALSE 46056
// for i in tmp do
46010: LD_ADDR_VAR 0 8
46014: PUSH
46015: LD_VAR 0 19
46019: PUSH
46020: FOR_IN
46021: IFFALSE 46054
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46023: LD_VAR 0 8
46027: PPUSH
46028: CALL_OW 250
46032: PPUSH
46033: LD_VAR 0 8
46037: PPUSH
46038: CALL_OW 251
46042: PPUSH
46043: LD_VAR 0 16
46047: PPUSH
46048: CALL_OW 441
46052: GO 46020
46054: POP
46055: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46056: LD_VAR 0 18
46060: PPUSH
46061: LD_INT 2
46063: PUSH
46064: LD_INT 30
46066: PUSH
46067: LD_INT 32
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 30
46076: PUSH
46077: LD_INT 33
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: PPUSH
46089: CALL_OW 72
46093: IFFALSE 46181
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46095: LD_ADDR_VAR 0 8
46099: PUSH
46100: LD_VAR 0 18
46104: PPUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 30
46110: PUSH
46111: LD_INT 32
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 30
46120: PUSH
46121: LD_INT 33
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: PPUSH
46133: CALL_OW 72
46137: PUSH
46138: FOR_IN
46139: IFFALSE 46179
// begin if not GetBWeapon ( i ) then
46141: LD_VAR 0 8
46145: PPUSH
46146: CALL_OW 269
46150: NOT
46151: IFFALSE 46177
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46153: LD_VAR 0 8
46157: PPUSH
46158: LD_VAR 0 8
46162: PPUSH
46163: LD_VAR 0 2
46167: PPUSH
46168: CALL 47427 0 2
46172: PPUSH
46173: CALL_OW 431
// end ;
46177: GO 46138
46179: POP
46180: POP
// end ; for i = 1 to personel do
46181: LD_ADDR_VAR 0 8
46185: PUSH
46186: DOUBLE
46187: LD_INT 1
46189: DEC
46190: ST_TO_ADDR
46191: LD_VAR 0 6
46195: PUSH
46196: FOR_TO
46197: IFFALSE 47261
// begin if i > 4 then
46199: LD_VAR 0 8
46203: PUSH
46204: LD_INT 4
46206: GREATER
46207: IFFALSE 46211
// break ;
46209: GO 47261
// case i of 1 :
46211: LD_VAR 0 8
46215: PUSH
46216: LD_INT 1
46218: DOUBLE
46219: EQUAL
46220: IFTRUE 46224
46222: GO 46304
46224: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46225: LD_ADDR_VAR 0 12
46229: PUSH
46230: LD_VAR 0 18
46234: PPUSH
46235: LD_INT 22
46237: PUSH
46238: LD_VAR 0 16
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 58
46249: PUSH
46250: EMPTY
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: LD_INT 30
46258: PUSH
46259: LD_INT 32
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 30
46268: PUSH
46269: LD_INT 4
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 30
46278: PUSH
46279: LD_INT 5
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: PPUSH
46297: CALL_OW 72
46301: ST_TO_ADDR
46302: GO 46526
46304: LD_INT 2
46306: DOUBLE
46307: EQUAL
46308: IFTRUE 46312
46310: GO 46374
46312: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46313: LD_ADDR_VAR 0 12
46317: PUSH
46318: LD_VAR 0 18
46322: PPUSH
46323: LD_INT 22
46325: PUSH
46326: LD_VAR 0 16
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 30
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 30
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PPUSH
46367: CALL_OW 72
46371: ST_TO_ADDR
46372: GO 46526
46374: LD_INT 3
46376: DOUBLE
46377: EQUAL
46378: IFTRUE 46382
46380: GO 46444
46382: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46383: LD_ADDR_VAR 0 12
46387: PUSH
46388: LD_VAR 0 18
46392: PPUSH
46393: LD_INT 22
46395: PUSH
46396: LD_VAR 0 16
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 30
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 30
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PPUSH
46437: CALL_OW 72
46441: ST_TO_ADDR
46442: GO 46526
46444: LD_INT 4
46446: DOUBLE
46447: EQUAL
46448: IFTRUE 46452
46450: GO 46525
46452: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46453: LD_ADDR_VAR 0 12
46457: PUSH
46458: LD_VAR 0 18
46462: PPUSH
46463: LD_INT 22
46465: PUSH
46466: LD_VAR 0 16
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 30
46480: PUSH
46481: LD_INT 6
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 30
46490: PUSH
46491: LD_INT 7
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 30
46500: PUSH
46501: LD_INT 8
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PPUSH
46518: CALL_OW 72
46522: ST_TO_ADDR
46523: GO 46526
46525: POP
// if i = 1 then
46526: LD_VAR 0 8
46530: PUSH
46531: LD_INT 1
46533: EQUAL
46534: IFFALSE 46645
// begin tmp := [ ] ;
46536: LD_ADDR_VAR 0 19
46540: PUSH
46541: EMPTY
46542: ST_TO_ADDR
// for j in f do
46543: LD_ADDR_VAR 0 9
46547: PUSH
46548: LD_VAR 0 12
46552: PUSH
46553: FOR_IN
46554: IFFALSE 46627
// if GetBType ( j ) = b_bunker then
46556: LD_VAR 0 9
46560: PPUSH
46561: CALL_OW 266
46565: PUSH
46566: LD_INT 32
46568: EQUAL
46569: IFFALSE 46596
// tmp := Insert ( tmp , 1 , j ) else
46571: LD_ADDR_VAR 0 19
46575: PUSH
46576: LD_VAR 0 19
46580: PPUSH
46581: LD_INT 1
46583: PPUSH
46584: LD_VAR 0 9
46588: PPUSH
46589: CALL_OW 2
46593: ST_TO_ADDR
46594: GO 46625
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46596: LD_ADDR_VAR 0 19
46600: PUSH
46601: LD_VAR 0 19
46605: PPUSH
46606: LD_VAR 0 19
46610: PUSH
46611: LD_INT 1
46613: PLUS
46614: PPUSH
46615: LD_VAR 0 9
46619: PPUSH
46620: CALL_OW 2
46624: ST_TO_ADDR
46625: GO 46553
46627: POP
46628: POP
// if tmp then
46629: LD_VAR 0 19
46633: IFFALSE 46645
// f := tmp ;
46635: LD_ADDR_VAR 0 12
46639: PUSH
46640: LD_VAR 0 19
46644: ST_TO_ADDR
// end ; x := personel [ i ] ;
46645: LD_ADDR_VAR 0 13
46649: PUSH
46650: LD_VAR 0 6
46654: PUSH
46655: LD_VAR 0 8
46659: ARRAY
46660: ST_TO_ADDR
// if x = - 1 then
46661: LD_VAR 0 13
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: EQUAL
46670: IFFALSE 46879
// begin for j in f do
46672: LD_ADDR_VAR 0 9
46676: PUSH
46677: LD_VAR 0 12
46681: PUSH
46682: FOR_IN
46683: IFFALSE 46875
// repeat InitHc ;
46685: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46689: LD_VAR 0 9
46693: PPUSH
46694: CALL_OW 266
46698: PUSH
46699: LD_INT 5
46701: EQUAL
46702: IFFALSE 46772
// begin if UnitsInside ( j ) < 3 then
46704: LD_VAR 0 9
46708: PPUSH
46709: CALL_OW 313
46713: PUSH
46714: LD_INT 3
46716: LESS
46717: IFFALSE 46753
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46719: LD_INT 0
46721: PPUSH
46722: LD_INT 5
46724: PUSH
46725: LD_INT 8
46727: PUSH
46728: LD_INT 9
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: PUSH
46736: LD_VAR 0 17
46740: ARRAY
46741: PPUSH
46742: LD_VAR 0 4
46746: PPUSH
46747: CALL_OW 380
46751: GO 46770
// PrepareHuman ( false , i , skill ) ;
46753: LD_INT 0
46755: PPUSH
46756: LD_VAR 0 8
46760: PPUSH
46761: LD_VAR 0 4
46765: PPUSH
46766: CALL_OW 380
// end else
46770: GO 46789
// PrepareHuman ( false , i , skill ) ;
46772: LD_INT 0
46774: PPUSH
46775: LD_VAR 0 8
46779: PPUSH
46780: LD_VAR 0 4
46784: PPUSH
46785: CALL_OW 380
// un := CreateHuman ;
46789: LD_ADDR_VAR 0 14
46793: PUSH
46794: CALL_OW 44
46798: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46799: LD_ADDR_VAR 0 7
46803: PUSH
46804: LD_VAR 0 7
46808: PPUSH
46809: LD_INT 1
46811: PPUSH
46812: LD_VAR 0 14
46816: PPUSH
46817: CALL_OW 2
46821: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46822: LD_VAR 0 14
46826: PPUSH
46827: LD_VAR 0 9
46831: PPUSH
46832: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46836: LD_VAR 0 9
46840: PPUSH
46841: CALL_OW 313
46845: PUSH
46846: LD_INT 6
46848: EQUAL
46849: PUSH
46850: LD_VAR 0 9
46854: PPUSH
46855: CALL_OW 266
46859: PUSH
46860: LD_INT 32
46862: PUSH
46863: LD_INT 31
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: IN
46870: OR
46871: IFFALSE 46685
46873: GO 46682
46875: POP
46876: POP
// end else
46877: GO 47259
// for j = 1 to x do
46879: LD_ADDR_VAR 0 9
46883: PUSH
46884: DOUBLE
46885: LD_INT 1
46887: DEC
46888: ST_TO_ADDR
46889: LD_VAR 0 13
46893: PUSH
46894: FOR_TO
46895: IFFALSE 47257
// begin InitHc ;
46897: CALL_OW 19
// if not f then
46901: LD_VAR 0 12
46905: NOT
46906: IFFALSE 46995
// begin PrepareHuman ( false , i , skill ) ;
46908: LD_INT 0
46910: PPUSH
46911: LD_VAR 0 8
46915: PPUSH
46916: LD_VAR 0 4
46920: PPUSH
46921: CALL_OW 380
// un := CreateHuman ;
46925: LD_ADDR_VAR 0 14
46929: PUSH
46930: CALL_OW 44
46934: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46935: LD_ADDR_VAR 0 7
46939: PUSH
46940: LD_VAR 0 7
46944: PPUSH
46945: LD_INT 1
46947: PPUSH
46948: LD_VAR 0 14
46952: PPUSH
46953: CALL_OW 2
46957: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46958: LD_VAR 0 14
46962: PPUSH
46963: LD_VAR 0 1
46967: PPUSH
46968: CALL_OW 250
46972: PPUSH
46973: LD_VAR 0 1
46977: PPUSH
46978: CALL_OW 251
46982: PPUSH
46983: LD_INT 10
46985: PPUSH
46986: LD_INT 0
46988: PPUSH
46989: CALL_OW 50
// continue ;
46993: GO 46894
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46995: LD_VAR 0 12
46999: PUSH
47000: LD_INT 1
47002: ARRAY
47003: PPUSH
47004: CALL_OW 313
47008: PUSH
47009: LD_VAR 0 12
47013: PUSH
47014: LD_INT 1
47016: ARRAY
47017: PPUSH
47018: CALL_OW 266
47022: PUSH
47023: LD_INT 32
47025: PUSH
47026: LD_INT 31
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: IN
47033: AND
47034: PUSH
47035: LD_VAR 0 12
47039: PUSH
47040: LD_INT 1
47042: ARRAY
47043: PPUSH
47044: CALL_OW 313
47048: PUSH
47049: LD_INT 6
47051: EQUAL
47052: OR
47053: IFFALSE 47073
// f := Delete ( f , 1 ) ;
47055: LD_ADDR_VAR 0 12
47059: PUSH
47060: LD_VAR 0 12
47064: PPUSH
47065: LD_INT 1
47067: PPUSH
47068: CALL_OW 3
47072: ST_TO_ADDR
// if not f then
47073: LD_VAR 0 12
47077: NOT
47078: IFFALSE 47096
// begin x := x + 2 ;
47080: LD_ADDR_VAR 0 13
47084: PUSH
47085: LD_VAR 0 13
47089: PUSH
47090: LD_INT 2
47092: PLUS
47093: ST_TO_ADDR
// continue ;
47094: GO 46894
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47096: LD_VAR 0 12
47100: PUSH
47101: LD_INT 1
47103: ARRAY
47104: PPUSH
47105: CALL_OW 266
47109: PUSH
47110: LD_INT 5
47112: EQUAL
47113: IFFALSE 47187
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47115: LD_VAR 0 12
47119: PUSH
47120: LD_INT 1
47122: ARRAY
47123: PPUSH
47124: CALL_OW 313
47128: PUSH
47129: LD_INT 3
47131: LESS
47132: IFFALSE 47168
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47134: LD_INT 0
47136: PPUSH
47137: LD_INT 5
47139: PUSH
47140: LD_INT 8
47142: PUSH
47143: LD_INT 9
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: PUSH
47151: LD_VAR 0 17
47155: ARRAY
47156: PPUSH
47157: LD_VAR 0 4
47161: PPUSH
47162: CALL_OW 380
47166: GO 47185
// PrepareHuman ( false , i , skill ) ;
47168: LD_INT 0
47170: PPUSH
47171: LD_VAR 0 8
47175: PPUSH
47176: LD_VAR 0 4
47180: PPUSH
47181: CALL_OW 380
// end else
47185: GO 47204
// PrepareHuman ( false , i , skill ) ;
47187: LD_INT 0
47189: PPUSH
47190: LD_VAR 0 8
47194: PPUSH
47195: LD_VAR 0 4
47199: PPUSH
47200: CALL_OW 380
// un := CreateHuman ;
47204: LD_ADDR_VAR 0 14
47208: PUSH
47209: CALL_OW 44
47213: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47214: LD_ADDR_VAR 0 7
47218: PUSH
47219: LD_VAR 0 7
47223: PPUSH
47224: LD_INT 1
47226: PPUSH
47227: LD_VAR 0 14
47231: PPUSH
47232: CALL_OW 2
47236: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47237: LD_VAR 0 14
47241: PPUSH
47242: LD_VAR 0 12
47246: PUSH
47247: LD_INT 1
47249: ARRAY
47250: PPUSH
47251: CALL_OW 52
// end ;
47255: GO 46894
47257: POP
47258: POP
// end ;
47259: GO 46196
47261: POP
47262: POP
// result := result ^ buildings ;
47263: LD_ADDR_VAR 0 7
47267: PUSH
47268: LD_VAR 0 7
47272: PUSH
47273: LD_VAR 0 18
47277: ADD
47278: ST_TO_ADDR
// end else
47279: GO 47422
// begin for i = 1 to personel do
47281: LD_ADDR_VAR 0 8
47285: PUSH
47286: DOUBLE
47287: LD_INT 1
47289: DEC
47290: ST_TO_ADDR
47291: LD_VAR 0 6
47295: PUSH
47296: FOR_TO
47297: IFFALSE 47420
// begin if i > 4 then
47299: LD_VAR 0 8
47303: PUSH
47304: LD_INT 4
47306: GREATER
47307: IFFALSE 47311
// break ;
47309: GO 47420
// x := personel [ i ] ;
47311: LD_ADDR_VAR 0 13
47315: PUSH
47316: LD_VAR 0 6
47320: PUSH
47321: LD_VAR 0 8
47325: ARRAY
47326: ST_TO_ADDR
// if x = - 1 then
47327: LD_VAR 0 13
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: EQUAL
47336: IFFALSE 47340
// continue ;
47338: GO 47296
// PrepareHuman ( false , i , skill ) ;
47340: LD_INT 0
47342: PPUSH
47343: LD_VAR 0 8
47347: PPUSH
47348: LD_VAR 0 4
47352: PPUSH
47353: CALL_OW 380
// un := CreateHuman ;
47357: LD_ADDR_VAR 0 14
47361: PUSH
47362: CALL_OW 44
47366: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47367: LD_VAR 0 14
47371: PPUSH
47372: LD_VAR 0 1
47376: PPUSH
47377: CALL_OW 250
47381: PPUSH
47382: LD_VAR 0 1
47386: PPUSH
47387: CALL_OW 251
47391: PPUSH
47392: LD_INT 10
47394: PPUSH
47395: LD_INT 0
47397: PPUSH
47398: CALL_OW 50
// result := result ^ un ;
47402: LD_ADDR_VAR 0 7
47406: PUSH
47407: LD_VAR 0 7
47411: PUSH
47412: LD_VAR 0 14
47416: ADD
47417: ST_TO_ADDR
// end ;
47418: GO 47296
47420: POP
47421: POP
// end ; end ;
47422: LD_VAR 0 7
47426: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47427: LD_INT 0
47429: PPUSH
47430: PPUSH
47431: PPUSH
47432: PPUSH
47433: PPUSH
47434: PPUSH
47435: PPUSH
47436: PPUSH
47437: PPUSH
47438: PPUSH
47439: PPUSH
47440: PPUSH
47441: PPUSH
47442: PPUSH
47443: PPUSH
47444: PPUSH
// result := false ;
47445: LD_ADDR_VAR 0 3
47449: PUSH
47450: LD_INT 0
47452: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47453: LD_VAR 0 1
47457: NOT
47458: PUSH
47459: LD_VAR 0 1
47463: PPUSH
47464: CALL_OW 266
47468: PUSH
47469: LD_INT 32
47471: PUSH
47472: LD_INT 33
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: IN
47479: NOT
47480: OR
47481: IFFALSE 47485
// exit ;
47483: GO 48594
// nat := GetNation ( tower ) ;
47485: LD_ADDR_VAR 0 12
47489: PUSH
47490: LD_VAR 0 1
47494: PPUSH
47495: CALL_OW 248
47499: ST_TO_ADDR
// side := GetSide ( tower ) ;
47500: LD_ADDR_VAR 0 16
47504: PUSH
47505: LD_VAR 0 1
47509: PPUSH
47510: CALL_OW 255
47514: ST_TO_ADDR
// x := GetX ( tower ) ;
47515: LD_ADDR_VAR 0 10
47519: PUSH
47520: LD_VAR 0 1
47524: PPUSH
47525: CALL_OW 250
47529: ST_TO_ADDR
// y := GetY ( tower ) ;
47530: LD_ADDR_VAR 0 11
47534: PUSH
47535: LD_VAR 0 1
47539: PPUSH
47540: CALL_OW 251
47544: ST_TO_ADDR
// if not x or not y then
47545: LD_VAR 0 10
47549: NOT
47550: PUSH
47551: LD_VAR 0 11
47555: NOT
47556: OR
47557: IFFALSE 47561
// exit ;
47559: GO 48594
// weapon := 0 ;
47561: LD_ADDR_VAR 0 18
47565: PUSH
47566: LD_INT 0
47568: ST_TO_ADDR
// fac_list := [ ] ;
47569: LD_ADDR_VAR 0 17
47573: PUSH
47574: EMPTY
47575: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47576: LD_ADDR_VAR 0 6
47580: PUSH
47581: LD_VAR 0 1
47585: PPUSH
47586: CALL_OW 274
47590: PPUSH
47591: LD_VAR 0 2
47595: PPUSH
47596: LD_INT 0
47598: PPUSH
47599: CALL 45165 0 3
47603: PPUSH
47604: LD_INT 30
47606: PUSH
47607: LD_INT 3
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PPUSH
47614: CALL_OW 72
47618: ST_TO_ADDR
// if not factories then
47619: LD_VAR 0 6
47623: NOT
47624: IFFALSE 47628
// exit ;
47626: GO 48594
// for i in factories do
47628: LD_ADDR_VAR 0 8
47632: PUSH
47633: LD_VAR 0 6
47637: PUSH
47638: FOR_IN
47639: IFFALSE 47664
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47641: LD_ADDR_VAR 0 17
47645: PUSH
47646: LD_VAR 0 17
47650: PUSH
47651: LD_VAR 0 8
47655: PPUSH
47656: CALL_OW 478
47660: UNION
47661: ST_TO_ADDR
47662: GO 47638
47664: POP
47665: POP
// if not fac_list then
47666: LD_VAR 0 17
47670: NOT
47671: IFFALSE 47675
// exit ;
47673: GO 48594
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47675: LD_ADDR_VAR 0 5
47679: PUSH
47680: LD_INT 4
47682: PUSH
47683: LD_INT 5
47685: PUSH
47686: LD_INT 9
47688: PUSH
47689: LD_INT 10
47691: PUSH
47692: LD_INT 6
47694: PUSH
47695: LD_INT 7
47697: PUSH
47698: LD_INT 11
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 27
47712: PUSH
47713: LD_INT 28
47715: PUSH
47716: LD_INT 26
47718: PUSH
47719: LD_INT 30
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 43
47730: PUSH
47731: LD_INT 44
47733: PUSH
47734: LD_INT 46
47736: PUSH
47737: LD_INT 45
47739: PUSH
47740: LD_INT 47
47742: PUSH
47743: LD_INT 49
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: LIST
47758: PUSH
47759: LD_VAR 0 12
47763: ARRAY
47764: ST_TO_ADDR
// list := list isect fac_list ;
47765: LD_ADDR_VAR 0 5
47769: PUSH
47770: LD_VAR 0 5
47774: PUSH
47775: LD_VAR 0 17
47779: ISECT
47780: ST_TO_ADDR
// if not list then
47781: LD_VAR 0 5
47785: NOT
47786: IFFALSE 47790
// exit ;
47788: GO 48594
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47790: LD_VAR 0 12
47794: PUSH
47795: LD_INT 3
47797: EQUAL
47798: PUSH
47799: LD_INT 49
47801: PUSH
47802: LD_VAR 0 5
47806: IN
47807: AND
47808: PUSH
47809: LD_INT 31
47811: PPUSH
47812: LD_VAR 0 16
47816: PPUSH
47817: CALL_OW 321
47821: PUSH
47822: LD_INT 2
47824: EQUAL
47825: AND
47826: IFFALSE 47886
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47828: LD_INT 22
47830: PUSH
47831: LD_VAR 0 16
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 35
47842: PUSH
47843: LD_INT 49
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 91
47852: PUSH
47853: LD_VAR 0 1
47857: PUSH
47858: LD_INT 10
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: PPUSH
47871: CALL_OW 69
47875: NOT
47876: IFFALSE 47886
// weapon := ru_time_lapser ;
47878: LD_ADDR_VAR 0 18
47882: PUSH
47883: LD_INT 49
47885: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47886: LD_VAR 0 12
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: IN
47901: PUSH
47902: LD_INT 11
47904: PUSH
47905: LD_VAR 0 5
47909: IN
47910: PUSH
47911: LD_INT 30
47913: PUSH
47914: LD_VAR 0 5
47918: IN
47919: OR
47920: AND
47921: PUSH
47922: LD_INT 6
47924: PPUSH
47925: LD_VAR 0 16
47929: PPUSH
47930: CALL_OW 321
47934: PUSH
47935: LD_INT 2
47937: EQUAL
47938: AND
47939: IFFALSE 48104
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47941: LD_INT 22
47943: PUSH
47944: LD_VAR 0 16
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 35
47958: PUSH
47959: LD_INT 11
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 35
47968: PUSH
47969: LD_INT 30
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 91
47983: PUSH
47984: LD_VAR 0 1
47988: PUSH
47989: LD_INT 18
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: PPUSH
48002: CALL_OW 69
48006: NOT
48007: PUSH
48008: LD_INT 22
48010: PUSH
48011: LD_VAR 0 16
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 30
48025: PUSH
48026: LD_INT 32
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 30
48035: PUSH
48036: LD_INT 33
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 91
48050: PUSH
48051: LD_VAR 0 1
48055: PUSH
48056: LD_INT 12
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: PPUSH
48072: CALL_OW 69
48076: PUSH
48077: LD_INT 2
48079: GREATER
48080: AND
48081: IFFALSE 48104
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48083: LD_ADDR_VAR 0 18
48087: PUSH
48088: LD_INT 11
48090: PUSH
48091: LD_INT 30
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_VAR 0 12
48102: ARRAY
48103: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48104: LD_VAR 0 18
48108: NOT
48109: PUSH
48110: LD_INT 40
48112: PPUSH
48113: LD_VAR 0 16
48117: PPUSH
48118: CALL_OW 321
48122: PUSH
48123: LD_INT 2
48125: EQUAL
48126: AND
48127: PUSH
48128: LD_INT 7
48130: PUSH
48131: LD_VAR 0 5
48135: IN
48136: PUSH
48137: LD_INT 28
48139: PUSH
48140: LD_VAR 0 5
48144: IN
48145: OR
48146: PUSH
48147: LD_INT 45
48149: PUSH
48150: LD_VAR 0 5
48154: IN
48155: OR
48156: AND
48157: IFFALSE 48411
// begin hex := GetHexInfo ( x , y ) ;
48159: LD_ADDR_VAR 0 4
48163: PUSH
48164: LD_VAR 0 10
48168: PPUSH
48169: LD_VAR 0 11
48173: PPUSH
48174: CALL_OW 546
48178: ST_TO_ADDR
// if hex [ 1 ] then
48179: LD_VAR 0 4
48183: PUSH
48184: LD_INT 1
48186: ARRAY
48187: IFFALSE 48191
// exit ;
48189: GO 48594
// height := hex [ 2 ] ;
48191: LD_ADDR_VAR 0 15
48195: PUSH
48196: LD_VAR 0 4
48200: PUSH
48201: LD_INT 2
48203: ARRAY
48204: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48205: LD_ADDR_VAR 0 14
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: LD_INT 5
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: ST_TO_ADDR
// for i in tmp do
48228: LD_ADDR_VAR 0 8
48232: PUSH
48233: LD_VAR 0 14
48237: PUSH
48238: FOR_IN
48239: IFFALSE 48409
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48241: LD_ADDR_VAR 0 9
48245: PUSH
48246: LD_VAR 0 10
48250: PPUSH
48251: LD_VAR 0 8
48255: PPUSH
48256: LD_INT 5
48258: PPUSH
48259: CALL_OW 272
48263: PUSH
48264: LD_VAR 0 11
48268: PPUSH
48269: LD_VAR 0 8
48273: PPUSH
48274: LD_INT 5
48276: PPUSH
48277: CALL_OW 273
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48286: LD_VAR 0 9
48290: PUSH
48291: LD_INT 1
48293: ARRAY
48294: PPUSH
48295: LD_VAR 0 9
48299: PUSH
48300: LD_INT 2
48302: ARRAY
48303: PPUSH
48304: CALL_OW 488
48308: IFFALSE 48407
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48310: LD_ADDR_VAR 0 4
48314: PUSH
48315: LD_VAR 0 9
48319: PUSH
48320: LD_INT 1
48322: ARRAY
48323: PPUSH
48324: LD_VAR 0 9
48328: PUSH
48329: LD_INT 2
48331: ARRAY
48332: PPUSH
48333: CALL_OW 546
48337: ST_TO_ADDR
// if hex [ 1 ] then
48338: LD_VAR 0 4
48342: PUSH
48343: LD_INT 1
48345: ARRAY
48346: IFFALSE 48350
// continue ;
48348: GO 48238
// h := hex [ 2 ] ;
48350: LD_ADDR_VAR 0 13
48354: PUSH
48355: LD_VAR 0 4
48359: PUSH
48360: LD_INT 2
48362: ARRAY
48363: ST_TO_ADDR
// if h + 7 < height then
48364: LD_VAR 0 13
48368: PUSH
48369: LD_INT 7
48371: PLUS
48372: PUSH
48373: LD_VAR 0 15
48377: LESS
48378: IFFALSE 48407
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48380: LD_ADDR_VAR 0 18
48384: PUSH
48385: LD_INT 7
48387: PUSH
48388: LD_INT 28
48390: PUSH
48391: LD_INT 45
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: PUSH
48399: LD_VAR 0 12
48403: ARRAY
48404: ST_TO_ADDR
// break ;
48405: GO 48409
// end ; end ; end ;
48407: GO 48238
48409: POP
48410: POP
// end ; if not weapon then
48411: LD_VAR 0 18
48415: NOT
48416: IFFALSE 48476
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48418: LD_ADDR_VAR 0 5
48422: PUSH
48423: LD_VAR 0 5
48427: PUSH
48428: LD_INT 11
48430: PUSH
48431: LD_INT 30
48433: PUSH
48434: LD_INT 49
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: DIFF
48442: ST_TO_ADDR
// if not list then
48443: LD_VAR 0 5
48447: NOT
48448: IFFALSE 48452
// exit ;
48450: GO 48594
// weapon := list [ rand ( 1 , list ) ] ;
48452: LD_ADDR_VAR 0 18
48456: PUSH
48457: LD_VAR 0 5
48461: PUSH
48462: LD_INT 1
48464: PPUSH
48465: LD_VAR 0 5
48469: PPUSH
48470: CALL_OW 12
48474: ARRAY
48475: ST_TO_ADDR
// end ; if weapon then
48476: LD_VAR 0 18
48480: IFFALSE 48594
// begin tmp := CostOfWeapon ( weapon ) ;
48482: LD_ADDR_VAR 0 14
48486: PUSH
48487: LD_VAR 0 18
48491: PPUSH
48492: CALL_OW 451
48496: ST_TO_ADDR
// j := GetBase ( tower ) ;
48497: LD_ADDR_VAR 0 9
48501: PUSH
48502: LD_VAR 0 1
48506: PPUSH
48507: CALL_OW 274
48511: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48512: LD_VAR 0 9
48516: PPUSH
48517: LD_INT 1
48519: PPUSH
48520: CALL_OW 275
48524: PUSH
48525: LD_VAR 0 14
48529: PUSH
48530: LD_INT 1
48532: ARRAY
48533: GREATEREQUAL
48534: PUSH
48535: LD_VAR 0 9
48539: PPUSH
48540: LD_INT 2
48542: PPUSH
48543: CALL_OW 275
48547: PUSH
48548: LD_VAR 0 14
48552: PUSH
48553: LD_INT 2
48555: ARRAY
48556: GREATEREQUAL
48557: AND
48558: PUSH
48559: LD_VAR 0 9
48563: PPUSH
48564: LD_INT 3
48566: PPUSH
48567: CALL_OW 275
48571: PUSH
48572: LD_VAR 0 14
48576: PUSH
48577: LD_INT 3
48579: ARRAY
48580: GREATEREQUAL
48581: AND
48582: IFFALSE 48594
// result := weapon ;
48584: LD_ADDR_VAR 0 3
48588: PUSH
48589: LD_VAR 0 18
48593: ST_TO_ADDR
// end ; end ;
48594: LD_VAR 0 3
48598: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48599: LD_INT 0
48601: PPUSH
48602: PPUSH
// result := true ;
48603: LD_ADDR_VAR 0 3
48607: PUSH
48608: LD_INT 1
48610: ST_TO_ADDR
// if array1 = array2 then
48611: LD_VAR 0 1
48615: PUSH
48616: LD_VAR 0 2
48620: EQUAL
48621: IFFALSE 48681
// begin for i = 1 to array1 do
48623: LD_ADDR_VAR 0 4
48627: PUSH
48628: DOUBLE
48629: LD_INT 1
48631: DEC
48632: ST_TO_ADDR
48633: LD_VAR 0 1
48637: PUSH
48638: FOR_TO
48639: IFFALSE 48677
// if array1 [ i ] <> array2 [ i ] then
48641: LD_VAR 0 1
48645: PUSH
48646: LD_VAR 0 4
48650: ARRAY
48651: PUSH
48652: LD_VAR 0 2
48656: PUSH
48657: LD_VAR 0 4
48661: ARRAY
48662: NONEQUAL
48663: IFFALSE 48675
// begin result := false ;
48665: LD_ADDR_VAR 0 3
48669: PUSH
48670: LD_INT 0
48672: ST_TO_ADDR
// break ;
48673: GO 48677
// end ;
48675: GO 48638
48677: POP
48678: POP
// end else
48679: GO 48689
// result := false ;
48681: LD_ADDR_VAR 0 3
48685: PUSH
48686: LD_INT 0
48688: ST_TO_ADDR
// end ;
48689: LD_VAR 0 3
48693: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48694: LD_INT 0
48696: PPUSH
48697: PPUSH
// if not array1 or not array2 then
48698: LD_VAR 0 1
48702: NOT
48703: PUSH
48704: LD_VAR 0 2
48708: NOT
48709: OR
48710: IFFALSE 48714
// exit ;
48712: GO 48778
// result := true ;
48714: LD_ADDR_VAR 0 3
48718: PUSH
48719: LD_INT 1
48721: ST_TO_ADDR
// for i = 1 to array1 do
48722: LD_ADDR_VAR 0 4
48726: PUSH
48727: DOUBLE
48728: LD_INT 1
48730: DEC
48731: ST_TO_ADDR
48732: LD_VAR 0 1
48736: PUSH
48737: FOR_TO
48738: IFFALSE 48776
// if array1 [ i ] <> array2 [ i ] then
48740: LD_VAR 0 1
48744: PUSH
48745: LD_VAR 0 4
48749: ARRAY
48750: PUSH
48751: LD_VAR 0 2
48755: PUSH
48756: LD_VAR 0 4
48760: ARRAY
48761: NONEQUAL
48762: IFFALSE 48774
// begin result := false ;
48764: LD_ADDR_VAR 0 3
48768: PUSH
48769: LD_INT 0
48771: ST_TO_ADDR
// break ;
48772: GO 48776
// end ;
48774: GO 48737
48776: POP
48777: POP
// end ;
48778: LD_VAR 0 3
48782: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48783: LD_INT 0
48785: PPUSH
48786: PPUSH
48787: PPUSH
// pom := GetBase ( fac ) ;
48788: LD_ADDR_VAR 0 5
48792: PUSH
48793: LD_VAR 0 1
48797: PPUSH
48798: CALL_OW 274
48802: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48803: LD_ADDR_VAR 0 4
48807: PUSH
48808: LD_VAR 0 2
48812: PUSH
48813: LD_INT 1
48815: ARRAY
48816: PPUSH
48817: LD_VAR 0 2
48821: PUSH
48822: LD_INT 2
48824: ARRAY
48825: PPUSH
48826: LD_VAR 0 2
48830: PUSH
48831: LD_INT 3
48833: ARRAY
48834: PPUSH
48835: LD_VAR 0 2
48839: PUSH
48840: LD_INT 4
48842: ARRAY
48843: PPUSH
48844: CALL_OW 449
48848: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48849: LD_ADDR_VAR 0 3
48853: PUSH
48854: LD_VAR 0 5
48858: PPUSH
48859: LD_INT 1
48861: PPUSH
48862: CALL_OW 275
48866: PUSH
48867: LD_VAR 0 4
48871: PUSH
48872: LD_INT 1
48874: ARRAY
48875: GREATEREQUAL
48876: PUSH
48877: LD_VAR 0 5
48881: PPUSH
48882: LD_INT 2
48884: PPUSH
48885: CALL_OW 275
48889: PUSH
48890: LD_VAR 0 4
48894: PUSH
48895: LD_INT 2
48897: ARRAY
48898: GREATEREQUAL
48899: AND
48900: PUSH
48901: LD_VAR 0 5
48905: PPUSH
48906: LD_INT 3
48908: PPUSH
48909: CALL_OW 275
48913: PUSH
48914: LD_VAR 0 4
48918: PUSH
48919: LD_INT 3
48921: ARRAY
48922: GREATEREQUAL
48923: AND
48924: ST_TO_ADDR
// end ;
48925: LD_VAR 0 3
48929: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48930: LD_INT 0
48932: PPUSH
48933: PPUSH
48934: PPUSH
48935: PPUSH
// pom := GetBase ( building ) ;
48936: LD_ADDR_VAR 0 3
48940: PUSH
48941: LD_VAR 0 1
48945: PPUSH
48946: CALL_OW 274
48950: ST_TO_ADDR
// if not pom then
48951: LD_VAR 0 3
48955: NOT
48956: IFFALSE 48960
// exit ;
48958: GO 49130
// btype := GetBType ( building ) ;
48960: LD_ADDR_VAR 0 5
48964: PUSH
48965: LD_VAR 0 1
48969: PPUSH
48970: CALL_OW 266
48974: ST_TO_ADDR
// if btype = b_armoury then
48975: LD_VAR 0 5
48979: PUSH
48980: LD_INT 4
48982: EQUAL
48983: IFFALSE 48993
// btype := b_barracks ;
48985: LD_ADDR_VAR 0 5
48989: PUSH
48990: LD_INT 5
48992: ST_TO_ADDR
// if btype = b_depot then
48993: LD_VAR 0 5
48997: PUSH
48998: LD_INT 0
49000: EQUAL
49001: IFFALSE 49011
// btype := b_warehouse ;
49003: LD_ADDR_VAR 0 5
49007: PUSH
49008: LD_INT 1
49010: ST_TO_ADDR
// if btype = b_workshop then
49011: LD_VAR 0 5
49015: PUSH
49016: LD_INT 2
49018: EQUAL
49019: IFFALSE 49029
// btype := b_factory ;
49021: LD_ADDR_VAR 0 5
49025: PUSH
49026: LD_INT 3
49028: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49029: LD_ADDR_VAR 0 4
49033: PUSH
49034: LD_VAR 0 5
49038: PPUSH
49039: LD_VAR 0 1
49043: PPUSH
49044: CALL_OW 248
49048: PPUSH
49049: CALL_OW 450
49053: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49054: LD_ADDR_VAR 0 2
49058: PUSH
49059: LD_VAR 0 3
49063: PPUSH
49064: LD_INT 1
49066: PPUSH
49067: CALL_OW 275
49071: PUSH
49072: LD_VAR 0 4
49076: PUSH
49077: LD_INT 1
49079: ARRAY
49080: GREATEREQUAL
49081: PUSH
49082: LD_VAR 0 3
49086: PPUSH
49087: LD_INT 2
49089: PPUSH
49090: CALL_OW 275
49094: PUSH
49095: LD_VAR 0 4
49099: PUSH
49100: LD_INT 2
49102: ARRAY
49103: GREATEREQUAL
49104: AND
49105: PUSH
49106: LD_VAR 0 3
49110: PPUSH
49111: LD_INT 3
49113: PPUSH
49114: CALL_OW 275
49118: PUSH
49119: LD_VAR 0 4
49123: PUSH
49124: LD_INT 3
49126: ARRAY
49127: GREATEREQUAL
49128: AND
49129: ST_TO_ADDR
// end ;
49130: LD_VAR 0 2
49134: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49135: LD_INT 0
49137: PPUSH
49138: PPUSH
49139: PPUSH
// pom := GetBase ( building ) ;
49140: LD_ADDR_VAR 0 4
49144: PUSH
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 274
49154: ST_TO_ADDR
// if not pom then
49155: LD_VAR 0 4
49159: NOT
49160: IFFALSE 49164
// exit ;
49162: GO 49265
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49164: LD_ADDR_VAR 0 5
49168: PUSH
49169: LD_VAR 0 2
49173: PPUSH
49174: LD_VAR 0 1
49178: PPUSH
49179: CALL_OW 248
49183: PPUSH
49184: CALL_OW 450
49188: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49189: LD_ADDR_VAR 0 3
49193: PUSH
49194: LD_VAR 0 4
49198: PPUSH
49199: LD_INT 1
49201: PPUSH
49202: CALL_OW 275
49206: PUSH
49207: LD_VAR 0 5
49211: PUSH
49212: LD_INT 1
49214: ARRAY
49215: GREATEREQUAL
49216: PUSH
49217: LD_VAR 0 4
49221: PPUSH
49222: LD_INT 2
49224: PPUSH
49225: CALL_OW 275
49229: PUSH
49230: LD_VAR 0 5
49234: PUSH
49235: LD_INT 2
49237: ARRAY
49238: GREATEREQUAL
49239: AND
49240: PUSH
49241: LD_VAR 0 4
49245: PPUSH
49246: LD_INT 3
49248: PPUSH
49249: CALL_OW 275
49253: PUSH
49254: LD_VAR 0 5
49258: PUSH
49259: LD_INT 3
49261: ARRAY
49262: GREATEREQUAL
49263: AND
49264: ST_TO_ADDR
// end ;
49265: LD_VAR 0 3
49269: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49270: LD_INT 0
49272: PPUSH
49273: PPUSH
49274: PPUSH
49275: PPUSH
49276: PPUSH
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
49282: PPUSH
// result := false ;
49283: LD_ADDR_VAR 0 8
49287: PUSH
49288: LD_INT 0
49290: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49291: LD_VAR 0 5
49295: NOT
49296: PUSH
49297: LD_VAR 0 1
49301: NOT
49302: OR
49303: PUSH
49304: LD_VAR 0 2
49308: NOT
49309: OR
49310: PUSH
49311: LD_VAR 0 3
49315: NOT
49316: OR
49317: IFFALSE 49321
// exit ;
49319: GO 50135
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49321: LD_ADDR_VAR 0 14
49325: PUSH
49326: LD_VAR 0 1
49330: PPUSH
49331: LD_VAR 0 2
49335: PPUSH
49336: LD_VAR 0 3
49340: PPUSH
49341: LD_VAR 0 4
49345: PPUSH
49346: LD_VAR 0 5
49350: PUSH
49351: LD_INT 1
49353: ARRAY
49354: PPUSH
49355: CALL_OW 248
49359: PPUSH
49360: LD_INT 0
49362: PPUSH
49363: CALL 51372 0 6
49367: ST_TO_ADDR
// if not hexes then
49368: LD_VAR 0 14
49372: NOT
49373: IFFALSE 49377
// exit ;
49375: GO 50135
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49377: LD_ADDR_VAR 0 17
49381: PUSH
49382: LD_VAR 0 5
49386: PPUSH
49387: LD_INT 22
49389: PUSH
49390: LD_VAR 0 13
49394: PPUSH
49395: CALL_OW 255
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 30
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 30
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PPUSH
49436: CALL_OW 72
49440: ST_TO_ADDR
// for i = 1 to hexes do
49441: LD_ADDR_VAR 0 9
49445: PUSH
49446: DOUBLE
49447: LD_INT 1
49449: DEC
49450: ST_TO_ADDR
49451: LD_VAR 0 14
49455: PUSH
49456: FOR_TO
49457: IFFALSE 50133
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49459: LD_ADDR_VAR 0 13
49463: PUSH
49464: LD_VAR 0 14
49468: PUSH
49469: LD_VAR 0 9
49473: ARRAY
49474: PUSH
49475: LD_INT 1
49477: ARRAY
49478: PPUSH
49479: LD_VAR 0 14
49483: PUSH
49484: LD_VAR 0 9
49488: ARRAY
49489: PUSH
49490: LD_INT 2
49492: ARRAY
49493: PPUSH
49494: CALL_OW 428
49498: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49499: LD_VAR 0 14
49503: PUSH
49504: LD_VAR 0 9
49508: ARRAY
49509: PUSH
49510: LD_INT 1
49512: ARRAY
49513: PPUSH
49514: LD_VAR 0 14
49518: PUSH
49519: LD_VAR 0 9
49523: ARRAY
49524: PUSH
49525: LD_INT 2
49527: ARRAY
49528: PPUSH
49529: CALL_OW 351
49533: PUSH
49534: LD_VAR 0 14
49538: PUSH
49539: LD_VAR 0 9
49543: ARRAY
49544: PUSH
49545: LD_INT 1
49547: ARRAY
49548: PPUSH
49549: LD_VAR 0 14
49553: PUSH
49554: LD_VAR 0 9
49558: ARRAY
49559: PUSH
49560: LD_INT 2
49562: ARRAY
49563: PPUSH
49564: CALL_OW 488
49568: NOT
49569: OR
49570: PUSH
49571: LD_VAR 0 13
49575: PPUSH
49576: CALL_OW 247
49580: PUSH
49581: LD_INT 3
49583: EQUAL
49584: OR
49585: IFFALSE 49591
// exit ;
49587: POP
49588: POP
49589: GO 50135
// if not tmp then
49591: LD_VAR 0 13
49595: NOT
49596: IFFALSE 49600
// continue ;
49598: GO 49456
// result := true ;
49600: LD_ADDR_VAR 0 8
49604: PUSH
49605: LD_INT 1
49607: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49608: LD_VAR 0 6
49612: PUSH
49613: LD_VAR 0 13
49617: PPUSH
49618: CALL_OW 247
49622: PUSH
49623: LD_INT 2
49625: EQUAL
49626: AND
49627: PUSH
49628: LD_VAR 0 13
49632: PPUSH
49633: CALL_OW 263
49637: PUSH
49638: LD_INT 1
49640: EQUAL
49641: AND
49642: IFFALSE 49806
// begin if IsDrivenBy ( tmp ) then
49644: LD_VAR 0 13
49648: PPUSH
49649: CALL_OW 311
49653: IFFALSE 49657
// continue ;
49655: GO 49456
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49657: LD_VAR 0 6
49661: PPUSH
49662: LD_INT 3
49664: PUSH
49665: LD_INT 60
49667: PUSH
49668: EMPTY
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: LD_INT 55
49680: PUSH
49681: EMPTY
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PPUSH
49692: CALL_OW 72
49696: IFFALSE 49804
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49698: LD_ADDR_VAR 0 18
49702: PUSH
49703: LD_VAR 0 6
49707: PPUSH
49708: LD_INT 3
49710: PUSH
49711: LD_INT 60
49713: PUSH
49714: EMPTY
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 55
49726: PUSH
49727: EMPTY
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PPUSH
49738: CALL_OW 72
49742: PUSH
49743: LD_INT 1
49745: ARRAY
49746: ST_TO_ADDR
// if IsInUnit ( driver ) then
49747: LD_VAR 0 18
49751: PPUSH
49752: CALL_OW 310
49756: IFFALSE 49767
// ComExit ( driver ) ;
49758: LD_VAR 0 18
49762: PPUSH
49763: CALL 74556 0 1
// AddComEnterUnit ( driver , tmp ) ;
49767: LD_VAR 0 18
49771: PPUSH
49772: LD_VAR 0 13
49776: PPUSH
49777: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49781: LD_VAR 0 18
49785: PPUSH
49786: LD_VAR 0 7
49790: PPUSH
49791: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49795: LD_VAR 0 18
49799: PPUSH
49800: CALL_OW 181
// end ; continue ;
49804: GO 49456
// end ; if not cleaners or not tmp in cleaners then
49806: LD_VAR 0 6
49810: NOT
49811: PUSH
49812: LD_VAR 0 13
49816: PUSH
49817: LD_VAR 0 6
49821: IN
49822: NOT
49823: OR
49824: IFFALSE 50131
// begin if dep then
49826: LD_VAR 0 17
49830: IFFALSE 49966
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49832: LD_ADDR_VAR 0 16
49836: PUSH
49837: LD_VAR 0 17
49841: PUSH
49842: LD_INT 1
49844: ARRAY
49845: PPUSH
49846: CALL_OW 250
49850: PPUSH
49851: LD_VAR 0 17
49855: PUSH
49856: LD_INT 1
49858: ARRAY
49859: PPUSH
49860: CALL_OW 254
49864: PPUSH
49865: LD_INT 5
49867: PPUSH
49868: CALL_OW 272
49872: PUSH
49873: LD_VAR 0 17
49877: PUSH
49878: LD_INT 1
49880: ARRAY
49881: PPUSH
49882: CALL_OW 251
49886: PPUSH
49887: LD_VAR 0 17
49891: PUSH
49892: LD_INT 1
49894: ARRAY
49895: PPUSH
49896: CALL_OW 254
49900: PPUSH
49901: LD_INT 5
49903: PPUSH
49904: CALL_OW 273
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49913: LD_VAR 0 16
49917: PUSH
49918: LD_INT 1
49920: ARRAY
49921: PPUSH
49922: LD_VAR 0 16
49926: PUSH
49927: LD_INT 2
49929: ARRAY
49930: PPUSH
49931: CALL_OW 488
49935: IFFALSE 49966
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49937: LD_VAR 0 13
49941: PPUSH
49942: LD_VAR 0 16
49946: PUSH
49947: LD_INT 1
49949: ARRAY
49950: PPUSH
49951: LD_VAR 0 16
49955: PUSH
49956: LD_INT 2
49958: ARRAY
49959: PPUSH
49960: CALL_OW 111
// continue ;
49964: GO 49456
// end ; end ; r := GetDir ( tmp ) ;
49966: LD_ADDR_VAR 0 15
49970: PUSH
49971: LD_VAR 0 13
49975: PPUSH
49976: CALL_OW 254
49980: ST_TO_ADDR
// if r = 5 then
49981: LD_VAR 0 15
49985: PUSH
49986: LD_INT 5
49988: EQUAL
49989: IFFALSE 49999
// r := 0 ;
49991: LD_ADDR_VAR 0 15
49995: PUSH
49996: LD_INT 0
49998: ST_TO_ADDR
// for j = r to 5 do
49999: LD_ADDR_VAR 0 10
50003: PUSH
50004: DOUBLE
50005: LD_VAR 0 15
50009: DEC
50010: ST_TO_ADDR
50011: LD_INT 5
50013: PUSH
50014: FOR_TO
50015: IFFALSE 50129
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50017: LD_ADDR_VAR 0 11
50021: PUSH
50022: LD_VAR 0 13
50026: PPUSH
50027: CALL_OW 250
50031: PPUSH
50032: LD_VAR 0 10
50036: PPUSH
50037: LD_INT 2
50039: PPUSH
50040: CALL_OW 272
50044: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50045: LD_ADDR_VAR 0 12
50049: PUSH
50050: LD_VAR 0 13
50054: PPUSH
50055: CALL_OW 251
50059: PPUSH
50060: LD_VAR 0 10
50064: PPUSH
50065: LD_INT 2
50067: PPUSH
50068: CALL_OW 273
50072: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50073: LD_VAR 0 11
50077: PPUSH
50078: LD_VAR 0 12
50082: PPUSH
50083: CALL_OW 488
50087: PUSH
50088: LD_VAR 0 11
50092: PPUSH
50093: LD_VAR 0 12
50097: PPUSH
50098: CALL_OW 428
50102: NOT
50103: AND
50104: IFFALSE 50127
// begin ComMoveXY ( tmp , _x , _y ) ;
50106: LD_VAR 0 13
50110: PPUSH
50111: LD_VAR 0 11
50115: PPUSH
50116: LD_VAR 0 12
50120: PPUSH
50121: CALL_OW 111
// break ;
50125: GO 50129
// end ; end ;
50127: GO 50014
50129: POP
50130: POP
// end ; end ;
50131: GO 49456
50133: POP
50134: POP
// end ;
50135: LD_VAR 0 8
50139: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50140: LD_INT 0
50142: PPUSH
// result := true ;
50143: LD_ADDR_VAR 0 3
50147: PUSH
50148: LD_INT 1
50150: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50151: LD_VAR 0 2
50155: PUSH
50156: LD_INT 24
50158: DOUBLE
50159: EQUAL
50160: IFTRUE 50170
50162: LD_INT 33
50164: DOUBLE
50165: EQUAL
50166: IFTRUE 50170
50168: GO 50195
50170: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50171: LD_ADDR_VAR 0 3
50175: PUSH
50176: LD_INT 32
50178: PPUSH
50179: LD_VAR 0 1
50183: PPUSH
50184: CALL_OW 321
50188: PUSH
50189: LD_INT 2
50191: EQUAL
50192: ST_TO_ADDR
50193: GO 50515
50195: LD_INT 20
50197: DOUBLE
50198: EQUAL
50199: IFTRUE 50203
50201: GO 50228
50203: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50204: LD_ADDR_VAR 0 3
50208: PUSH
50209: LD_INT 6
50211: PPUSH
50212: LD_VAR 0 1
50216: PPUSH
50217: CALL_OW 321
50221: PUSH
50222: LD_INT 2
50224: EQUAL
50225: ST_TO_ADDR
50226: GO 50515
50228: LD_INT 22
50230: DOUBLE
50231: EQUAL
50232: IFTRUE 50242
50234: LD_INT 36
50236: DOUBLE
50237: EQUAL
50238: IFTRUE 50242
50240: GO 50267
50242: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50243: LD_ADDR_VAR 0 3
50247: PUSH
50248: LD_INT 15
50250: PPUSH
50251: LD_VAR 0 1
50255: PPUSH
50256: CALL_OW 321
50260: PUSH
50261: LD_INT 2
50263: EQUAL
50264: ST_TO_ADDR
50265: GO 50515
50267: LD_INT 30
50269: DOUBLE
50270: EQUAL
50271: IFTRUE 50275
50273: GO 50300
50275: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50276: LD_ADDR_VAR 0 3
50280: PUSH
50281: LD_INT 20
50283: PPUSH
50284: LD_VAR 0 1
50288: PPUSH
50289: CALL_OW 321
50293: PUSH
50294: LD_INT 2
50296: EQUAL
50297: ST_TO_ADDR
50298: GO 50515
50300: LD_INT 28
50302: DOUBLE
50303: EQUAL
50304: IFTRUE 50314
50306: LD_INT 21
50308: DOUBLE
50309: EQUAL
50310: IFTRUE 50314
50312: GO 50339
50314: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50315: LD_ADDR_VAR 0 3
50319: PUSH
50320: LD_INT 21
50322: PPUSH
50323: LD_VAR 0 1
50327: PPUSH
50328: CALL_OW 321
50332: PUSH
50333: LD_INT 2
50335: EQUAL
50336: ST_TO_ADDR
50337: GO 50515
50339: LD_INT 16
50341: DOUBLE
50342: EQUAL
50343: IFTRUE 50347
50345: GO 50374
50347: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50348: LD_ADDR_VAR 0 3
50352: PUSH
50353: LD_EXP 64
50357: PPUSH
50358: LD_VAR 0 1
50362: PPUSH
50363: CALL_OW 321
50367: PUSH
50368: LD_INT 2
50370: EQUAL
50371: ST_TO_ADDR
50372: GO 50515
50374: LD_INT 19
50376: DOUBLE
50377: EQUAL
50378: IFTRUE 50388
50380: LD_INT 23
50382: DOUBLE
50383: EQUAL
50384: IFTRUE 50388
50386: GO 50415
50388: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50389: LD_ADDR_VAR 0 3
50393: PUSH
50394: LD_EXP 63
50398: PPUSH
50399: LD_VAR 0 1
50403: PPUSH
50404: CALL_OW 321
50408: PUSH
50409: LD_INT 2
50411: EQUAL
50412: ST_TO_ADDR
50413: GO 50515
50415: LD_INT 17
50417: DOUBLE
50418: EQUAL
50419: IFTRUE 50423
50421: GO 50448
50423: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50424: LD_ADDR_VAR 0 3
50428: PUSH
50429: LD_INT 39
50431: PPUSH
50432: LD_VAR 0 1
50436: PPUSH
50437: CALL_OW 321
50441: PUSH
50442: LD_INT 2
50444: EQUAL
50445: ST_TO_ADDR
50446: GO 50515
50448: LD_INT 18
50450: DOUBLE
50451: EQUAL
50452: IFTRUE 50456
50454: GO 50481
50456: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50457: LD_ADDR_VAR 0 3
50461: PUSH
50462: LD_INT 40
50464: PPUSH
50465: LD_VAR 0 1
50469: PPUSH
50470: CALL_OW 321
50474: PUSH
50475: LD_INT 2
50477: EQUAL
50478: ST_TO_ADDR
50479: GO 50515
50481: LD_INT 27
50483: DOUBLE
50484: EQUAL
50485: IFTRUE 50489
50487: GO 50514
50489: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50490: LD_ADDR_VAR 0 3
50494: PUSH
50495: LD_INT 35
50497: PPUSH
50498: LD_VAR 0 1
50502: PPUSH
50503: CALL_OW 321
50507: PUSH
50508: LD_INT 2
50510: EQUAL
50511: ST_TO_ADDR
50512: GO 50515
50514: POP
// end ;
50515: LD_VAR 0 3
50519: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50520: LD_INT 0
50522: PPUSH
50523: PPUSH
50524: PPUSH
50525: PPUSH
50526: PPUSH
50527: PPUSH
50528: PPUSH
50529: PPUSH
50530: PPUSH
50531: PPUSH
50532: PPUSH
// result := false ;
50533: LD_ADDR_VAR 0 6
50537: PUSH
50538: LD_INT 0
50540: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50541: LD_VAR 0 1
50545: NOT
50546: PUSH
50547: LD_VAR 0 1
50551: PPUSH
50552: CALL_OW 266
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: IN
50567: NOT
50568: OR
50569: PUSH
50570: LD_VAR 0 2
50574: NOT
50575: OR
50576: PUSH
50577: LD_VAR 0 5
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: LD_INT 4
50596: PUSH
50597: LD_INT 5
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: IN
50608: NOT
50609: OR
50610: PUSH
50611: LD_VAR 0 3
50615: PPUSH
50616: LD_VAR 0 4
50620: PPUSH
50621: CALL_OW 488
50625: NOT
50626: OR
50627: IFFALSE 50631
// exit ;
50629: GO 51367
// side := GetSide ( depot ) ;
50631: LD_ADDR_VAR 0 9
50635: PUSH
50636: LD_VAR 0 1
50640: PPUSH
50641: CALL_OW 255
50645: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50646: LD_VAR 0 9
50650: PPUSH
50651: LD_VAR 0 2
50655: PPUSH
50656: CALL 50140 0 2
50660: NOT
50661: IFFALSE 50665
// exit ;
50663: GO 51367
// pom := GetBase ( depot ) ;
50665: LD_ADDR_VAR 0 10
50669: PUSH
50670: LD_VAR 0 1
50674: PPUSH
50675: CALL_OW 274
50679: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50680: LD_ADDR_VAR 0 11
50684: PUSH
50685: LD_VAR 0 2
50689: PPUSH
50690: LD_VAR 0 1
50694: PPUSH
50695: CALL_OW 248
50699: PPUSH
50700: CALL_OW 450
50704: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50705: LD_VAR 0 10
50709: PPUSH
50710: LD_INT 1
50712: PPUSH
50713: CALL_OW 275
50717: PUSH
50718: LD_VAR 0 11
50722: PUSH
50723: LD_INT 1
50725: ARRAY
50726: GREATEREQUAL
50727: PUSH
50728: LD_VAR 0 10
50732: PPUSH
50733: LD_INT 2
50735: PPUSH
50736: CALL_OW 275
50740: PUSH
50741: LD_VAR 0 11
50745: PUSH
50746: LD_INT 2
50748: ARRAY
50749: GREATEREQUAL
50750: AND
50751: PUSH
50752: LD_VAR 0 10
50756: PPUSH
50757: LD_INT 3
50759: PPUSH
50760: CALL_OW 275
50764: PUSH
50765: LD_VAR 0 11
50769: PUSH
50770: LD_INT 3
50772: ARRAY
50773: GREATEREQUAL
50774: AND
50775: NOT
50776: IFFALSE 50780
// exit ;
50778: GO 51367
// if GetBType ( depot ) = b_depot then
50780: LD_VAR 0 1
50784: PPUSH
50785: CALL_OW 266
50789: PUSH
50790: LD_INT 0
50792: EQUAL
50793: IFFALSE 50805
// dist := 28 else
50795: LD_ADDR_VAR 0 14
50799: PUSH
50800: LD_INT 28
50802: ST_TO_ADDR
50803: GO 50813
// dist := 36 ;
50805: LD_ADDR_VAR 0 14
50809: PUSH
50810: LD_INT 36
50812: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50813: LD_VAR 0 1
50817: PPUSH
50818: LD_VAR 0 3
50822: PPUSH
50823: LD_VAR 0 4
50827: PPUSH
50828: CALL_OW 297
50832: PUSH
50833: LD_VAR 0 14
50837: GREATER
50838: IFFALSE 50842
// exit ;
50840: GO 51367
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50842: LD_ADDR_VAR 0 12
50846: PUSH
50847: LD_VAR 0 2
50851: PPUSH
50852: LD_VAR 0 3
50856: PPUSH
50857: LD_VAR 0 4
50861: PPUSH
50862: LD_VAR 0 5
50866: PPUSH
50867: LD_VAR 0 1
50871: PPUSH
50872: CALL_OW 248
50876: PPUSH
50877: LD_INT 0
50879: PPUSH
50880: CALL 51372 0 6
50884: ST_TO_ADDR
// if not hexes then
50885: LD_VAR 0 12
50889: NOT
50890: IFFALSE 50894
// exit ;
50892: GO 51367
// hex := GetHexInfo ( x , y ) ;
50894: LD_ADDR_VAR 0 15
50898: PUSH
50899: LD_VAR 0 3
50903: PPUSH
50904: LD_VAR 0 4
50908: PPUSH
50909: CALL_OW 546
50913: ST_TO_ADDR
// if hex [ 1 ] then
50914: LD_VAR 0 15
50918: PUSH
50919: LD_INT 1
50921: ARRAY
50922: IFFALSE 50926
// exit ;
50924: GO 51367
// height := hex [ 2 ] ;
50926: LD_ADDR_VAR 0 13
50930: PUSH
50931: LD_VAR 0 15
50935: PUSH
50936: LD_INT 2
50938: ARRAY
50939: ST_TO_ADDR
// for i = 1 to hexes do
50940: LD_ADDR_VAR 0 7
50944: PUSH
50945: DOUBLE
50946: LD_INT 1
50948: DEC
50949: ST_TO_ADDR
50950: LD_VAR 0 12
50954: PUSH
50955: FOR_TO
50956: IFFALSE 51286
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50958: LD_VAR 0 12
50962: PUSH
50963: LD_VAR 0 7
50967: ARRAY
50968: PUSH
50969: LD_INT 1
50971: ARRAY
50972: PPUSH
50973: LD_VAR 0 12
50977: PUSH
50978: LD_VAR 0 7
50982: ARRAY
50983: PUSH
50984: LD_INT 2
50986: ARRAY
50987: PPUSH
50988: CALL_OW 488
50992: NOT
50993: PUSH
50994: LD_VAR 0 12
50998: PUSH
50999: LD_VAR 0 7
51003: ARRAY
51004: PUSH
51005: LD_INT 1
51007: ARRAY
51008: PPUSH
51009: LD_VAR 0 12
51013: PUSH
51014: LD_VAR 0 7
51018: ARRAY
51019: PUSH
51020: LD_INT 2
51022: ARRAY
51023: PPUSH
51024: CALL_OW 428
51028: PUSH
51029: LD_INT 0
51031: GREATER
51032: OR
51033: PUSH
51034: LD_VAR 0 12
51038: PUSH
51039: LD_VAR 0 7
51043: ARRAY
51044: PUSH
51045: LD_INT 1
51047: ARRAY
51048: PPUSH
51049: LD_VAR 0 12
51053: PUSH
51054: LD_VAR 0 7
51058: ARRAY
51059: PUSH
51060: LD_INT 2
51062: ARRAY
51063: PPUSH
51064: CALL_OW 351
51068: OR
51069: IFFALSE 51075
// exit ;
51071: POP
51072: POP
51073: GO 51367
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51075: LD_ADDR_VAR 0 8
51079: PUSH
51080: LD_VAR 0 12
51084: PUSH
51085: LD_VAR 0 7
51089: ARRAY
51090: PUSH
51091: LD_INT 1
51093: ARRAY
51094: PPUSH
51095: LD_VAR 0 12
51099: PUSH
51100: LD_VAR 0 7
51104: ARRAY
51105: PUSH
51106: LD_INT 2
51108: ARRAY
51109: PPUSH
51110: CALL_OW 546
51114: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51115: LD_VAR 0 8
51119: PUSH
51120: LD_INT 1
51122: ARRAY
51123: PUSH
51124: LD_VAR 0 8
51128: PUSH
51129: LD_INT 2
51131: ARRAY
51132: PUSH
51133: LD_VAR 0 13
51137: PUSH
51138: LD_INT 2
51140: PLUS
51141: GREATER
51142: OR
51143: PUSH
51144: LD_VAR 0 8
51148: PUSH
51149: LD_INT 2
51151: ARRAY
51152: PUSH
51153: LD_VAR 0 13
51157: PUSH
51158: LD_INT 2
51160: MINUS
51161: LESS
51162: OR
51163: PUSH
51164: LD_VAR 0 8
51168: PUSH
51169: LD_INT 3
51171: ARRAY
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 8
51178: PUSH
51179: LD_INT 9
51181: PUSH
51182: LD_INT 10
51184: PUSH
51185: LD_INT 11
51187: PUSH
51188: LD_INT 12
51190: PUSH
51191: LD_INT 13
51193: PUSH
51194: LD_INT 16
51196: PUSH
51197: LD_INT 17
51199: PUSH
51200: LD_INT 18
51202: PUSH
51203: LD_INT 19
51205: PUSH
51206: LD_INT 20
51208: PUSH
51209: LD_INT 21
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: IN
51227: NOT
51228: OR
51229: PUSH
51230: LD_VAR 0 8
51234: PUSH
51235: LD_INT 5
51237: ARRAY
51238: NOT
51239: OR
51240: PUSH
51241: LD_VAR 0 8
51245: PUSH
51246: LD_INT 6
51248: ARRAY
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 7
51258: PUSH
51259: LD_INT 9
51261: PUSH
51262: LD_INT 10
51264: PUSH
51265: LD_INT 11
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: IN
51276: NOT
51277: OR
51278: IFFALSE 51284
// exit ;
51280: POP
51281: POP
51282: GO 51367
// end ;
51284: GO 50955
51286: POP
51287: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51288: LD_VAR 0 9
51292: PPUSH
51293: LD_VAR 0 3
51297: PPUSH
51298: LD_VAR 0 4
51302: PPUSH
51303: LD_INT 20
51305: PPUSH
51306: CALL 43313 0 4
51310: PUSH
51311: LD_INT 4
51313: ARRAY
51314: IFFALSE 51318
// exit ;
51316: GO 51367
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51318: LD_VAR 0 2
51322: PUSH
51323: LD_INT 29
51325: PUSH
51326: LD_INT 30
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: IN
51333: PUSH
51334: LD_VAR 0 3
51338: PPUSH
51339: LD_VAR 0 4
51343: PPUSH
51344: LD_VAR 0 9
51348: PPUSH
51349: CALL_OW 440
51353: NOT
51354: AND
51355: IFFALSE 51359
// exit ;
51357: GO 51367
// result := true ;
51359: LD_ADDR_VAR 0 6
51363: PUSH
51364: LD_INT 1
51366: ST_TO_ADDR
// end ;
51367: LD_VAR 0 6
51371: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51372: LD_INT 0
51374: PPUSH
51375: PPUSH
51376: PPUSH
51377: PPUSH
51378: PPUSH
51379: PPUSH
51380: PPUSH
51381: PPUSH
51382: PPUSH
51383: PPUSH
51384: PPUSH
51385: PPUSH
51386: PPUSH
51387: PPUSH
51388: PPUSH
51389: PPUSH
51390: PPUSH
51391: PPUSH
51392: PPUSH
51393: PPUSH
51394: PPUSH
51395: PPUSH
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
51412: PPUSH
51413: PPUSH
51414: PPUSH
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
51429: PPUSH
51430: PPUSH
51431: PPUSH
// result = [ ] ;
51432: LD_ADDR_VAR 0 7
51436: PUSH
51437: EMPTY
51438: ST_TO_ADDR
// temp_list = [ ] ;
51439: LD_ADDR_VAR 0 9
51443: PUSH
51444: EMPTY
51445: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51446: LD_VAR 0 4
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 3
51462: PUSH
51463: LD_INT 4
51465: PUSH
51466: LD_INT 5
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: IN
51477: NOT
51478: PUSH
51479: LD_VAR 0 1
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: IN
51494: PUSH
51495: LD_VAR 0 5
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: LIST
51513: IN
51514: NOT
51515: AND
51516: OR
51517: IFFALSE 51521
// exit ;
51519: GO 69912
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51521: LD_VAR 0 1
51525: PUSH
51526: LD_INT 6
51528: PUSH
51529: LD_INT 7
51531: PUSH
51532: LD_INT 8
51534: PUSH
51535: LD_INT 13
51537: PUSH
51538: LD_INT 12
51540: PUSH
51541: LD_INT 15
51543: PUSH
51544: LD_INT 11
51546: PUSH
51547: LD_INT 14
51549: PUSH
51550: LD_INT 10
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: IN
51564: IFFALSE 51574
// btype = b_lab ;
51566: LD_ADDR_VAR 0 1
51570: PUSH
51571: LD_INT 6
51573: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51574: LD_VAR 0 6
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: IN
51593: NOT
51594: PUSH
51595: LD_VAR 0 1
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 3
51611: PUSH
51612: LD_INT 6
51614: PUSH
51615: LD_INT 36
51617: PUSH
51618: LD_INT 4
51620: PUSH
51621: LD_INT 5
51623: PUSH
51624: LD_INT 31
51626: PUSH
51627: LD_INT 32
51629: PUSH
51630: LD_INT 33
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: IN
51646: NOT
51647: PUSH
51648: LD_VAR 0 6
51652: PUSH
51653: LD_INT 1
51655: EQUAL
51656: AND
51657: OR
51658: PUSH
51659: LD_VAR 0 1
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: IN
51674: NOT
51675: PUSH
51676: LD_VAR 0 6
51680: PUSH
51681: LD_INT 2
51683: EQUAL
51684: AND
51685: OR
51686: IFFALSE 51696
// mode = 0 ;
51688: LD_ADDR_VAR 0 6
51692: PUSH
51693: LD_INT 0
51695: ST_TO_ADDR
// case mode of 0 :
51696: LD_VAR 0 6
51700: PUSH
51701: LD_INT 0
51703: DOUBLE
51704: EQUAL
51705: IFTRUE 51709
51707: GO 63162
51709: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51710: LD_ADDR_VAR 0 11
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51903: LD_ADDR_VAR 0 12
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 3
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52099: LD_ADDR_VAR 0 13
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52298: LD_ADDR_VAR 0 14
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 2
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52494: LD_ADDR_VAR 0 15
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52687: LD_ADDR_VAR 0 16
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: LD_INT 3
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52880: LD_ADDR_VAR 0 17
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 2
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53110: LD_ADDR_VAR 0 18
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53340: LD_ADDR_VAR 0 19
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53570: LD_ADDR_VAR 0 20
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53800: LD_ADDR_VAR 0 21
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54030: LD_ADDR_VAR 0 22
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54260: LD_ADDR_VAR 0 23
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 3
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54540: LD_ADDR_VAR 0 24
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: NEG
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 3
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54816: LD_ADDR_VAR 0 25
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 3
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 3
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 3
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55090: LD_ADDR_VAR 0 26
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 3
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55366: LD_ADDR_VAR 0 27
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55646: LD_ADDR_VAR 0 28
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 3
55881: NEG
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55928: LD_ADDR_VAR 0 29
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56207: LD_ADDR_VAR 0 30
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 3
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56485: LD_ADDR_VAR 0 31
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 3
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56763: LD_ADDR_VAR 0 32
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 3
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57041: LD_ADDR_VAR 0 33
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57320: LD_ADDR_VAR 0 34
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 3
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57600: LD_ADDR_VAR 0 35
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57712: LD_ADDR_VAR 0 36
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57824: LD_ADDR_VAR 0 37
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57936: LD_ADDR_VAR 0 38
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58048: LD_ADDR_VAR 0 39
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58160: LD_ADDR_VAR 0 40
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58272: LD_ADDR_VAR 0 41
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: NEG
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58622: LD_ADDR_VAR 0 42
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58972: LD_ADDR_VAR 0 43
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: LD_INT 3
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 3
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 3
59268: NEG
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59320: LD_ADDR_VAR 0 44
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: NEG
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: PUSH
59564: LD_INT 3
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: LD_INT 3
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: LD_INT 3
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59670: LD_ADDR_VAR 0 45
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: LD_INT 3
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 3
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 3
59979: NEG
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60020: LD_ADDR_VAR 0 46
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 3
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 3
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60368: LD_ADDR_VAR 0 47
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: NEG
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60519: LD_ADDR_VAR 0 48
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60666: LD_ADDR_VAR 0 49
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60810: LD_ADDR_VAR 0 50
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: LD_INT 2
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60954: LD_ADDR_VAR 0 51
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61101: LD_ADDR_VAR 0 52
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61252: LD_ADDR_VAR 0 53
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: NEG
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61482: LD_ADDR_VAR 0 54
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61712: LD_ADDR_VAR 0 55
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61942: LD_ADDR_VAR 0 56
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 2
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 2
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62172: LD_ADDR_VAR 0 57
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 2
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 2
62348: NEG
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: NEG
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62402: LD_ADDR_VAR 0 58
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 2
62589: NEG
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 2
62601: NEG
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62632: LD_ADDR_VAR 0 59
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62720: LD_ADDR_VAR 0 60
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 1
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62808: LD_ADDR_VAR 0 61
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62896: LD_ADDR_VAR 0 62
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62984: LD_ADDR_VAR 0 63
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63072: LD_ADDR_VAR 0 64
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: LD_INT 1
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: ST_TO_ADDR
// end ; 1 :
63160: GO 69057
63162: LD_INT 1
63164: DOUBLE
63165: EQUAL
63166: IFTRUE 63170
63168: GO 65793
63170: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63171: LD_ADDR_VAR 0 11
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 3
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 2
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63215: LD_ADDR_VAR 0 12
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 3
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63256: LD_ADDR_VAR 0 13
63260: PUSH
63261: LD_INT 3
63263: PUSH
63264: LD_INT 2
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 3
63273: PUSH
63274: LD_INT 3
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: LD_INT 3
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63296: LD_ADDR_VAR 0 14
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 3
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_INT 3
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63337: LD_ADDR_VAR 0 15
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 3
63366: NEG
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63381: LD_ADDR_VAR 0 16
63385: PUSH
63386: LD_INT 2
63388: NEG
63389: PUSH
63390: LD_INT 3
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 3
63400: NEG
63401: PUSH
63402: LD_INT 2
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: NEG
63413: PUSH
63414: LD_INT 3
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63427: LD_ADDR_VAR 0 17
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: LD_INT 3
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 3
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63471: LD_ADDR_VAR 0 18
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63512: LD_ADDR_VAR 0 19
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63552: LD_ADDR_VAR 0 20
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: LD_INT 3
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63593: LD_ADDR_VAR 0 21
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 3
63611: NEG
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 3
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63637: LD_ADDR_VAR 0 22
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: LD_INT 3
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 3
63656: NEG
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 3
63668: NEG
63669: PUSH
63670: LD_INT 3
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: LIST
63682: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63683: LD_ADDR_VAR 0 23
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 3
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 4
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: LD_INT 3
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63727: LD_ADDR_VAR 0 24
63731: PUSH
63732: LD_INT 3
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 3
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 4
63755: PUSH
63756: LD_INT 1
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63768: LD_ADDR_VAR 0 25
63772: PUSH
63773: LD_INT 3
63775: PUSH
63776: LD_INT 3
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 4
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: PUSH
63796: LD_INT 4
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63808: LD_ADDR_VAR 0 26
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 3
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 4
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: LD_INT 3
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: LIST
63848: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63849: LD_ADDR_VAR 0 27
63853: PUSH
63854: LD_INT 3
63856: NEG
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 3
63867: NEG
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 4
63878: NEG
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63893: LD_ADDR_VAR 0 28
63897: PUSH
63898: LD_INT 3
63900: NEG
63901: PUSH
63902: LD_INT 3
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 3
63912: NEG
63913: PUSH
63914: LD_INT 4
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 4
63924: NEG
63925: PUSH
63926: LD_INT 3
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63939: LD_ADDR_VAR 0 29
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: LD_INT 3
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: LD_INT 4
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 4
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 3
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: LD_INT 5
64018: NEG
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 5
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: LD_INT 4
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 6
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 6
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: LD_INT 5
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64094: LD_ADDR_VAR 0 30
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 3
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 4
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 4
64153: PUSH
64154: LD_INT 1
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 4
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 5
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 5
64184: PUSH
64185: LD_INT 1
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 5
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 6
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 6
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64237: LD_ADDR_VAR 0 31
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: LD_INT 3
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: LD_INT 3
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 4
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 4
64284: PUSH
64285: LD_INT 4
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: LD_INT 4
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 5
64304: PUSH
64305: LD_INT 4
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 5
64314: PUSH
64315: LD_INT 5
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 4
64324: PUSH
64325: LD_INT 5
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 6
64334: PUSH
64335: LD_INT 5
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 6
64344: PUSH
64345: LD_INT 6
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 5
64354: PUSH
64355: LD_INT 6
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64376: LD_ADDR_VAR 0 32
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: LD_INT 3
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 3
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: LD_INT 4
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 4
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: LD_INT 3
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: LD_INT 5
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 5
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: LD_INT 4
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 6
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: LD_INT 6
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: LD_INT 5
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64519: LD_ADDR_VAR 0 33
64523: PUSH
64524: LD_INT 2
64526: NEG
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: NEG
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 3
64548: NEG
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 3
64560: NEG
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 4
64571: NEG
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 4
64582: NEG
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 4
64594: NEG
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 5
64605: NEG
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 5
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 5
64628: NEG
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 6
64639: NEG
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 6
64650: NEG
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64674: LD_ADDR_VAR 0 34
64678: PUSH
64679: LD_INT 2
64681: NEG
64682: PUSH
64683: LD_INT 3
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 3
64693: NEG
64694: PUSH
64695: LD_INT 2
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 3
64705: NEG
64706: PUSH
64707: LD_INT 3
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 3
64717: NEG
64718: PUSH
64719: LD_INT 4
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 4
64729: NEG
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 4
64741: NEG
64742: PUSH
64743: LD_INT 4
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 4
64753: NEG
64754: PUSH
64755: LD_INT 5
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 5
64765: NEG
64766: PUSH
64767: LD_INT 4
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 5
64777: NEG
64778: PUSH
64779: LD_INT 5
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 5
64789: NEG
64790: PUSH
64791: LD_INT 6
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 6
64801: NEG
64802: PUSH
64803: LD_INT 5
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 6
64813: NEG
64814: PUSH
64815: LD_INT 6
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64837: LD_ADDR_VAR 0 41
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 2
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: NEG
64856: PUSH
64857: LD_INT 3
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 2
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64881: LD_ADDR_VAR 0 42
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64922: LD_ADDR_VAR 0 43
64926: PUSH
64927: LD_INT 2
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 2
64949: PUSH
64950: LD_INT 3
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64962: LD_ADDR_VAR 0 44
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: LD_INT 3
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: LD_INT 2
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65003: LD_ADDR_VAR 0 45
65007: PUSH
65008: LD_INT 2
65010: NEG
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 2
65021: NEG
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 3
65032: NEG
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65047: LD_ADDR_VAR 0 46
65051: PUSH
65052: LD_INT 2
65054: NEG
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 2
65066: NEG
65067: PUSH
65068: LD_INT 3
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 3
65078: NEG
65079: PUSH
65080: LD_INT 2
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65093: LD_ADDR_VAR 0 47
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: LD_INT 3
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: NEG
65113: PUSH
65114: LD_INT 3
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65126: LD_ADDR_VAR 0 48
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65157: LD_ADDR_VAR 0 49
65161: PUSH
65162: LD_INT 3
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65186: LD_ADDR_VAR 0 50
65190: PUSH
65191: LD_INT 2
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65215: LD_ADDR_VAR 0 51
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65246: LD_ADDR_VAR 0 52
65250: PUSH
65251: LD_INT 3
65253: NEG
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: LD_INT 2
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65279: LD_ADDR_VAR 0 53
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: LD_INT 3
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 3
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65323: LD_ADDR_VAR 0 54
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 3
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 3
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65364: LD_ADDR_VAR 0 55
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: LD_INT 2
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 3
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 2
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65404: LD_ADDR_VAR 0 56
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: LD_INT 3
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: LD_INT 3
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: NEG
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: LIST
65444: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65445: LD_ADDR_VAR 0 57
65449: PUSH
65450: LD_INT 2
65452: NEG
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 3
65463: NEG
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 3
65474: NEG
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: LIST
65488: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65489: LD_ADDR_VAR 0 58
65493: PUSH
65494: LD_INT 2
65496: NEG
65497: PUSH
65498: LD_INT 3
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 3
65520: NEG
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: LIST
65534: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65535: LD_ADDR_VAR 0 59
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: LD_INT 2
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: LD_INT 2
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65579: LD_ADDR_VAR 0 60
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: LD_INT 1
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 2
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 2
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65620: LD_ADDR_VAR 0 61
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65660: LD_ADDR_VAR 0 62
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65701: LD_ADDR_VAR 0 63
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 2
65719: NEG
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 2
65730: NEG
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65745: LD_ADDR_VAR 0 64
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: LIST
65790: ST_TO_ADDR
// end ; 2 :
65791: GO 69057
65793: LD_INT 2
65795: DOUBLE
65796: EQUAL
65797: IFTRUE 65801
65799: GO 69056
65801: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65802: LD_ADDR_VAR 0 29
65806: PUSH
65807: LD_INT 4
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 4
65819: PUSH
65820: LD_INT 1
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 5
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 5
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 4
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 3
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 3
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 3
65881: PUSH
65882: LD_INT 2
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 5
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 3
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: LD_INT 2
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 4
65922: PUSH
65923: LD_INT 3
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 4
65932: PUSH
65933: LD_INT 4
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: LD_INT 4
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 2
65952: PUSH
65953: LD_INT 3
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 4
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: PUSH
65983: LD_INT 4
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_INT 4
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 3
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 1
66012: PUSH
66013: LD_INT 4
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: LD_INT 5
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 5
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: PUSH
66044: LD_INT 4
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: LD_INT 5
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 2
66074: NEG
66075: PUSH
66076: LD_INT 3
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 3
66085: NEG
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 2
66108: NEG
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 2
66119: NEG
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: LD_INT 1
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 4
66141: NEG
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 4
66152: NEG
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 4
66164: NEG
66165: PUSH
66166: LD_INT 2
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: LD_INT 2
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 4
66187: NEG
66188: PUSH
66189: LD_INT 4
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 4
66199: NEG
66200: PUSH
66201: LD_INT 5
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 3
66211: NEG
66212: PUSH
66213: LD_INT 4
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 3
66223: NEG
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 4
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 5
66247: NEG
66248: PUSH
66249: LD_INT 4
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 5
66259: NEG
66260: PUSH
66261: LD_INT 5
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: LD_INT 5
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 5
66283: NEG
66284: PUSH
66285: LD_INT 3
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66340: LD_ADDR_VAR 0 30
66344: PUSH
66345: LD_INT 4
66347: PUSH
66348: LD_INT 4
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 4
66357: PUSH
66358: LD_INT 3
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 5
66367: PUSH
66368: LD_INT 4
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 5
66377: PUSH
66378: LD_INT 5
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 4
66387: PUSH
66388: LD_INT 5
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 3
66397: PUSH
66398: LD_INT 4
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 3
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 5
66417: PUSH
66418: LD_INT 3
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: LD_INT 5
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 4
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 4
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: LD_INT 4
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 2
66519: NEG
66520: PUSH
66521: LD_INT 2
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 4
66530: NEG
66531: PUSH
66532: LD_INT 0
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 4
66541: NEG
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 3
66553: NEG
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 4
66575: NEG
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 5
66586: NEG
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 5
66597: NEG
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 5
66609: NEG
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 3
66621: NEG
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 3
66632: NEG
66633: PUSH
66634: LD_INT 3
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 3
66644: NEG
66645: PUSH
66646: LD_INT 4
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: LD_INT 3
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 2
66668: NEG
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 3
66680: NEG
66681: PUSH
66682: LD_INT 2
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 4
66692: NEG
66693: PUSH
66694: LD_INT 3
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 4
66704: NEG
66705: PUSH
66706: LD_INT 4
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 2
66716: NEG
66717: PUSH
66718: LD_INT 4
66720: NEG
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 4
66728: NEG
66729: PUSH
66730: LD_INT 2
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: LD_INT 4
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: LD_INT 5
66754: NEG
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: LD_INT 4
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: PUSH
66774: LD_INT 3
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 3
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: LD_INT 4
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 5
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 2
66830: NEG
66831: PUSH
66832: LD_INT 5
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66887: LD_ADDR_VAR 0 31
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: LD_INT 4
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: LD_INT 3
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: LD_INT 4
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: LD_INT 5
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: LD_INT 5
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: NEG
66945: PUSH
66946: LD_INT 4
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: LD_INT 3
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 2
66966: PUSH
66967: LD_INT 5
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 2
66976: NEG
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: NEG
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 2
67010: NEG
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 2
67021: NEG
67022: PUSH
67023: LD_INT 1
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 3
67032: NEG
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 4
67043: NEG
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 4
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 4
67066: NEG
67067: PUSH
67068: LD_INT 2
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 4
67089: NEG
67090: PUSH
67091: LD_INT 4
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 4
67101: NEG
67102: PUSH
67103: LD_INT 5
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: LD_INT 4
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 3
67125: NEG
67126: PUSH
67127: LD_INT 3
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 4
67137: NEG
67138: PUSH
67139: LD_INT 3
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 5
67149: NEG
67150: PUSH
67151: LD_INT 4
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 5
67161: NEG
67162: PUSH
67163: LD_INT 5
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 3
67173: NEG
67174: PUSH
67175: LD_INT 5
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 5
67185: NEG
67186: PUSH
67187: LD_INT 3
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 3
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: LD_INT 4
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: LD_INT 3
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: LD_INT 2
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: LD_INT 2
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 1
67264: NEG
67265: PUSH
67266: LD_INT 4
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 2
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 2
67287: NEG
67288: PUSH
67289: LD_INT 4
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 4
67309: PUSH
67310: LD_INT 1
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 5
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 5
67330: PUSH
67331: LD_INT 1
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 4
67340: PUSH
67341: LD_INT 1
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 3
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 3
67360: PUSH
67361: LD_INT 1
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: PUSH
67372: LD_INT 2
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 5
67382: PUSH
67383: LD_INT 2
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67437: LD_ADDR_VAR 0 32
67441: PUSH
67442: LD_INT 4
67444: NEG
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 4
67455: NEG
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 3
67467: NEG
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 3
67478: NEG
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 4
67489: NEG
67490: PUSH
67491: LD_INT 1
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 5
67500: NEG
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 5
67511: NEG
67512: PUSH
67513: LD_INT 1
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 5
67523: NEG
67524: PUSH
67525: LD_INT 2
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: LD_INT 2
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 3
67546: NEG
67547: PUSH
67548: LD_INT 3
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: NEG
67559: PUSH
67560: LD_INT 4
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 2
67570: NEG
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 3
67594: NEG
67595: PUSH
67596: LD_INT 2
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 4
67606: NEG
67607: PUSH
67608: LD_INT 3
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 4
67618: NEG
67619: PUSH
67620: LD_INT 4
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 2
67630: NEG
67631: PUSH
67632: LD_INT 4
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 4
67642: NEG
67643: PUSH
67644: LD_INT 2
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: LD_INT 4
67657: NEG
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: LD_INT 5
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 1
67676: PUSH
67677: LD_INT 4
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 1
67687: PUSH
67688: LD_INT 3
67690: NEG
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: LD_INT 3
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: NEG
67710: PUSH
67711: LD_INT 4
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 1
67721: NEG
67722: PUSH
67723: LD_INT 5
67725: NEG
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: LD_INT 3
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 2
67744: NEG
67745: PUSH
67746: LD_INT 5
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 3
67756: PUSH
67757: LD_INT 0
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 4
67777: PUSH
67778: LD_INT 0
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 4
67787: PUSH
67788: LD_INT 1
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 2
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: LD_INT 1
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: LD_INT 2
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 4
67839: PUSH
67840: LD_INT 2
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 4
67849: PUSH
67850: LD_INT 4
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 4
67859: PUSH
67860: LD_INT 3
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 5
67869: PUSH
67870: LD_INT 4
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 5
67879: PUSH
67880: LD_INT 5
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 4
67889: PUSH
67890: LD_INT 5
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: LD_INT 4
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: LD_INT 3
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 5
67919: PUSH
67920: LD_INT 3
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 3
67929: PUSH
67930: LD_INT 5
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67984: LD_ADDR_VAR 0 33
67988: PUSH
67989: LD_INT 4
67991: NEG
67992: PUSH
67993: LD_INT 4
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 4
68003: NEG
68004: PUSH
68005: LD_INT 5
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 3
68015: NEG
68016: PUSH
68017: LD_INT 4
68019: NEG
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 3
68027: NEG
68028: PUSH
68029: LD_INT 3
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 4
68039: NEG
68040: PUSH
68041: LD_INT 3
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 5
68051: NEG
68052: PUSH
68053: LD_INT 4
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 5
68063: NEG
68064: PUSH
68065: LD_INT 5
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 3
68075: NEG
68076: PUSH
68077: LD_INT 5
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 5
68087: NEG
68088: PUSH
68089: LD_INT 3
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: LD_INT 3
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: LD_INT 4
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: LD_INT 3
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 1
68132: PUSH
68133: LD_INT 2
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: LD_INT 2
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 1
68154: NEG
68155: PUSH
68156: LD_INT 3
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: PUSH
68168: LD_INT 4
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 2
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 2
68189: NEG
68190: PUSH
68191: LD_INT 4
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 4
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 4
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 5
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 5
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 4
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 3
68262: PUSH
68263: LD_INT 1
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 3
68273: PUSH
68274: LD_INT 2
68276: NEG
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 5
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 3
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 3
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 4
68314: PUSH
68315: LD_INT 3
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 4
68324: PUSH
68325: LD_INT 4
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: LD_INT 4
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 2
68344: PUSH
68345: LD_INT 3
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 2
68354: PUSH
68355: LD_INT 2
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 4
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 2
68374: PUSH
68375: LD_INT 4
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: LD_INT 3
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 1
68404: PUSH
68405: LD_INT 4
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: LD_INT 5
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: LD_INT 5
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 1
68434: NEG
68435: PUSH
68436: LD_INT 4
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: NEG
68446: PUSH
68447: LD_INT 3
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: LD_INT 5
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 2
68466: NEG
68467: PUSH
68468: LD_INT 3
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68522: LD_ADDR_VAR 0 34
68526: PUSH
68527: LD_INT 0
68529: PUSH
68530: LD_INT 4
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 5
68543: NEG
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: PUSH
68552: LD_INT 4
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 1
68562: PUSH
68563: LD_INT 3
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 0
68573: PUSH
68574: LD_INT 3
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: LD_INT 4
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 1
68596: NEG
68597: PUSH
68598: LD_INT 5
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 2
68608: PUSH
68609: LD_INT 3
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 2
68619: NEG
68620: PUSH
68621: LD_INT 5
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 4
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 4
68662: PUSH
68663: LD_INT 1
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 3
68672: PUSH
68673: LD_INT 1
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 2
68682: PUSH
68683: LD_INT 0
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 2
68692: PUSH
68693: LD_INT 1
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: LD_INT 2
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 4
68714: PUSH
68715: LD_INT 2
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 4
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 4
68734: PUSH
68735: LD_INT 3
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 5
68744: PUSH
68745: LD_INT 4
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 5
68754: PUSH
68755: LD_INT 5
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 4
68764: PUSH
68765: LD_INT 5
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 3
68774: PUSH
68775: LD_INT 4
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: LD_INT 3
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 5
68794: PUSH
68795: LD_INT 3
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 3
68804: PUSH
68805: LD_INT 5
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 0
68814: PUSH
68815: LD_INT 3
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: LD_INT 2
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 1
68834: PUSH
68835: LD_INT 3
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 1
68844: PUSH
68845: LD_INT 4
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: LD_INT 4
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 1
68864: NEG
68865: PUSH
68866: LD_INT 3
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: NEG
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 2
68886: PUSH
68887: LD_INT 4
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 2
68896: NEG
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 4
68907: NEG
68908: PUSH
68909: LD_INT 0
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 4
68918: NEG
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 3
68930: NEG
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 3
68941: NEG
68942: PUSH
68943: LD_INT 1
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 4
68952: NEG
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 5
68963: NEG
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 5
68974: NEG
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 5
68986: NEG
68987: PUSH
68988: LD_INT 2
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 3
68998: NEG
68999: PUSH
69000: LD_INT 2
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: ST_TO_ADDR
// end ; end ;
69054: GO 69057
69056: POP
// case btype of b_depot , b_warehouse :
69057: LD_VAR 0 1
69061: PUSH
69062: LD_INT 0
69064: DOUBLE
69065: EQUAL
69066: IFTRUE 69076
69068: LD_INT 1
69070: DOUBLE
69071: EQUAL
69072: IFTRUE 69076
69074: GO 69277
69076: POP
// case nation of nation_american :
69077: LD_VAR 0 5
69081: PUSH
69082: LD_INT 1
69084: DOUBLE
69085: EQUAL
69086: IFTRUE 69090
69088: GO 69146
69090: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69091: LD_ADDR_VAR 0 9
69095: PUSH
69096: LD_VAR 0 11
69100: PUSH
69101: LD_VAR 0 12
69105: PUSH
69106: LD_VAR 0 13
69110: PUSH
69111: LD_VAR 0 14
69115: PUSH
69116: LD_VAR 0 15
69120: PUSH
69121: LD_VAR 0 16
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: PUSH
69134: LD_VAR 0 4
69138: PUSH
69139: LD_INT 1
69141: PLUS
69142: ARRAY
69143: ST_TO_ADDR
69144: GO 69275
69146: LD_INT 2
69148: DOUBLE
69149: EQUAL
69150: IFTRUE 69154
69152: GO 69210
69154: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69155: LD_ADDR_VAR 0 9
69159: PUSH
69160: LD_VAR 0 17
69164: PUSH
69165: LD_VAR 0 18
69169: PUSH
69170: LD_VAR 0 19
69174: PUSH
69175: LD_VAR 0 20
69179: PUSH
69180: LD_VAR 0 21
69184: PUSH
69185: LD_VAR 0 22
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: PUSH
69198: LD_VAR 0 4
69202: PUSH
69203: LD_INT 1
69205: PLUS
69206: ARRAY
69207: ST_TO_ADDR
69208: GO 69275
69210: LD_INT 3
69212: DOUBLE
69213: EQUAL
69214: IFTRUE 69218
69216: GO 69274
69218: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69219: LD_ADDR_VAR 0 9
69223: PUSH
69224: LD_VAR 0 23
69228: PUSH
69229: LD_VAR 0 24
69233: PUSH
69234: LD_VAR 0 25
69238: PUSH
69239: LD_VAR 0 26
69243: PUSH
69244: LD_VAR 0 27
69248: PUSH
69249: LD_VAR 0 28
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: PUSH
69262: LD_VAR 0 4
69266: PUSH
69267: LD_INT 1
69269: PLUS
69270: ARRAY
69271: ST_TO_ADDR
69272: GO 69275
69274: POP
69275: GO 69830
69277: LD_INT 2
69279: DOUBLE
69280: EQUAL
69281: IFTRUE 69291
69283: LD_INT 3
69285: DOUBLE
69286: EQUAL
69287: IFTRUE 69291
69289: GO 69347
69291: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69292: LD_ADDR_VAR 0 9
69296: PUSH
69297: LD_VAR 0 29
69301: PUSH
69302: LD_VAR 0 30
69306: PUSH
69307: LD_VAR 0 31
69311: PUSH
69312: LD_VAR 0 32
69316: PUSH
69317: LD_VAR 0 33
69321: PUSH
69322: LD_VAR 0 34
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: PUSH
69335: LD_VAR 0 4
69339: PUSH
69340: LD_INT 1
69342: PLUS
69343: ARRAY
69344: ST_TO_ADDR
69345: GO 69830
69347: LD_INT 16
69349: DOUBLE
69350: EQUAL
69351: IFTRUE 69409
69353: LD_INT 17
69355: DOUBLE
69356: EQUAL
69357: IFTRUE 69409
69359: LD_INT 18
69361: DOUBLE
69362: EQUAL
69363: IFTRUE 69409
69365: LD_INT 19
69367: DOUBLE
69368: EQUAL
69369: IFTRUE 69409
69371: LD_INT 22
69373: DOUBLE
69374: EQUAL
69375: IFTRUE 69409
69377: LD_INT 20
69379: DOUBLE
69380: EQUAL
69381: IFTRUE 69409
69383: LD_INT 21
69385: DOUBLE
69386: EQUAL
69387: IFTRUE 69409
69389: LD_INT 23
69391: DOUBLE
69392: EQUAL
69393: IFTRUE 69409
69395: LD_INT 24
69397: DOUBLE
69398: EQUAL
69399: IFTRUE 69409
69401: LD_INT 25
69403: DOUBLE
69404: EQUAL
69405: IFTRUE 69409
69407: GO 69465
69409: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69410: LD_ADDR_VAR 0 9
69414: PUSH
69415: LD_VAR 0 35
69419: PUSH
69420: LD_VAR 0 36
69424: PUSH
69425: LD_VAR 0 37
69429: PUSH
69430: LD_VAR 0 38
69434: PUSH
69435: LD_VAR 0 39
69439: PUSH
69440: LD_VAR 0 40
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: PUSH
69453: LD_VAR 0 4
69457: PUSH
69458: LD_INT 1
69460: PLUS
69461: ARRAY
69462: ST_TO_ADDR
69463: GO 69830
69465: LD_INT 6
69467: DOUBLE
69468: EQUAL
69469: IFTRUE 69521
69471: LD_INT 7
69473: DOUBLE
69474: EQUAL
69475: IFTRUE 69521
69477: LD_INT 8
69479: DOUBLE
69480: EQUAL
69481: IFTRUE 69521
69483: LD_INT 13
69485: DOUBLE
69486: EQUAL
69487: IFTRUE 69521
69489: LD_INT 12
69491: DOUBLE
69492: EQUAL
69493: IFTRUE 69521
69495: LD_INT 15
69497: DOUBLE
69498: EQUAL
69499: IFTRUE 69521
69501: LD_INT 11
69503: DOUBLE
69504: EQUAL
69505: IFTRUE 69521
69507: LD_INT 14
69509: DOUBLE
69510: EQUAL
69511: IFTRUE 69521
69513: LD_INT 10
69515: DOUBLE
69516: EQUAL
69517: IFTRUE 69521
69519: GO 69577
69521: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69522: LD_ADDR_VAR 0 9
69526: PUSH
69527: LD_VAR 0 41
69531: PUSH
69532: LD_VAR 0 42
69536: PUSH
69537: LD_VAR 0 43
69541: PUSH
69542: LD_VAR 0 44
69546: PUSH
69547: LD_VAR 0 45
69551: PUSH
69552: LD_VAR 0 46
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: PUSH
69565: LD_VAR 0 4
69569: PUSH
69570: LD_INT 1
69572: PLUS
69573: ARRAY
69574: ST_TO_ADDR
69575: GO 69830
69577: LD_INT 36
69579: DOUBLE
69580: EQUAL
69581: IFTRUE 69585
69583: GO 69641
69585: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69586: LD_ADDR_VAR 0 9
69590: PUSH
69591: LD_VAR 0 47
69595: PUSH
69596: LD_VAR 0 48
69600: PUSH
69601: LD_VAR 0 49
69605: PUSH
69606: LD_VAR 0 50
69610: PUSH
69611: LD_VAR 0 51
69615: PUSH
69616: LD_VAR 0 52
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: PUSH
69629: LD_VAR 0 4
69633: PUSH
69634: LD_INT 1
69636: PLUS
69637: ARRAY
69638: ST_TO_ADDR
69639: GO 69830
69641: LD_INT 4
69643: DOUBLE
69644: EQUAL
69645: IFTRUE 69667
69647: LD_INT 5
69649: DOUBLE
69650: EQUAL
69651: IFTRUE 69667
69653: LD_INT 34
69655: DOUBLE
69656: EQUAL
69657: IFTRUE 69667
69659: LD_INT 37
69661: DOUBLE
69662: EQUAL
69663: IFTRUE 69667
69665: GO 69723
69667: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69668: LD_ADDR_VAR 0 9
69672: PUSH
69673: LD_VAR 0 53
69677: PUSH
69678: LD_VAR 0 54
69682: PUSH
69683: LD_VAR 0 55
69687: PUSH
69688: LD_VAR 0 56
69692: PUSH
69693: LD_VAR 0 57
69697: PUSH
69698: LD_VAR 0 58
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: PUSH
69711: LD_VAR 0 4
69715: PUSH
69716: LD_INT 1
69718: PLUS
69719: ARRAY
69720: ST_TO_ADDR
69721: GO 69830
69723: LD_INT 31
69725: DOUBLE
69726: EQUAL
69727: IFTRUE 69773
69729: LD_INT 32
69731: DOUBLE
69732: EQUAL
69733: IFTRUE 69773
69735: LD_INT 33
69737: DOUBLE
69738: EQUAL
69739: IFTRUE 69773
69741: LD_INT 27
69743: DOUBLE
69744: EQUAL
69745: IFTRUE 69773
69747: LD_INT 26
69749: DOUBLE
69750: EQUAL
69751: IFTRUE 69773
69753: LD_INT 28
69755: DOUBLE
69756: EQUAL
69757: IFTRUE 69773
69759: LD_INT 29
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69773
69765: LD_INT 30
69767: DOUBLE
69768: EQUAL
69769: IFTRUE 69773
69771: GO 69829
69773: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69774: LD_ADDR_VAR 0 9
69778: PUSH
69779: LD_VAR 0 59
69783: PUSH
69784: LD_VAR 0 60
69788: PUSH
69789: LD_VAR 0 61
69793: PUSH
69794: LD_VAR 0 62
69798: PUSH
69799: LD_VAR 0 63
69803: PUSH
69804: LD_VAR 0 64
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: PUSH
69817: LD_VAR 0 4
69821: PUSH
69822: LD_INT 1
69824: PLUS
69825: ARRAY
69826: ST_TO_ADDR
69827: GO 69830
69829: POP
// temp_list2 = [ ] ;
69830: LD_ADDR_VAR 0 10
69834: PUSH
69835: EMPTY
69836: ST_TO_ADDR
// for i in temp_list do
69837: LD_ADDR_VAR 0 8
69841: PUSH
69842: LD_VAR 0 9
69846: PUSH
69847: FOR_IN
69848: IFFALSE 69900
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69850: LD_ADDR_VAR 0 10
69854: PUSH
69855: LD_VAR 0 10
69859: PUSH
69860: LD_VAR 0 8
69864: PUSH
69865: LD_INT 1
69867: ARRAY
69868: PUSH
69869: LD_VAR 0 2
69873: PLUS
69874: PUSH
69875: LD_VAR 0 8
69879: PUSH
69880: LD_INT 2
69882: ARRAY
69883: PUSH
69884: LD_VAR 0 3
69888: PLUS
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: EMPTY
69895: LIST
69896: ADD
69897: ST_TO_ADDR
69898: GO 69847
69900: POP
69901: POP
// result = temp_list2 ;
69902: LD_ADDR_VAR 0 7
69906: PUSH
69907: LD_VAR 0 10
69911: ST_TO_ADDR
// end ;
69912: LD_VAR 0 7
69916: RET
// export function EnemyInRange ( unit , dist ) ; begin
69917: LD_INT 0
69919: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69920: LD_ADDR_VAR 0 3
69924: PUSH
69925: LD_VAR 0 1
69929: PPUSH
69930: CALL_OW 255
69934: PPUSH
69935: LD_VAR 0 1
69939: PPUSH
69940: CALL_OW 250
69944: PPUSH
69945: LD_VAR 0 1
69949: PPUSH
69950: CALL_OW 251
69954: PPUSH
69955: LD_VAR 0 2
69959: PPUSH
69960: CALL 43313 0 4
69964: PUSH
69965: LD_INT 4
69967: ARRAY
69968: ST_TO_ADDR
// end ;
69969: LD_VAR 0 3
69973: RET
// export function PlayerSeeMe ( unit ) ; begin
69974: LD_INT 0
69976: PPUSH
// result := See ( your_side , unit ) ;
69977: LD_ADDR_VAR 0 2
69981: PUSH
69982: LD_OWVAR 2
69986: PPUSH
69987: LD_VAR 0 1
69991: PPUSH
69992: CALL_OW 292
69996: ST_TO_ADDR
// end ;
69997: LD_VAR 0 2
70001: RET
// export function ReverseDir ( unit ) ; begin
70002: LD_INT 0
70004: PPUSH
// if not unit then
70005: LD_VAR 0 1
70009: NOT
70010: IFFALSE 70014
// exit ;
70012: GO 70037
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70014: LD_ADDR_VAR 0 2
70018: PUSH
70019: LD_VAR 0 1
70023: PPUSH
70024: CALL_OW 254
70028: PUSH
70029: LD_INT 3
70031: PLUS
70032: PUSH
70033: LD_INT 6
70035: MOD
70036: ST_TO_ADDR
// end ;
70037: LD_VAR 0 2
70041: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70042: LD_INT 0
70044: PPUSH
70045: PPUSH
70046: PPUSH
70047: PPUSH
70048: PPUSH
// if not hexes then
70049: LD_VAR 0 2
70053: NOT
70054: IFFALSE 70058
// exit ;
70056: GO 70206
// dist := 9999 ;
70058: LD_ADDR_VAR 0 5
70062: PUSH
70063: LD_INT 9999
70065: ST_TO_ADDR
// for i = 1 to hexes do
70066: LD_ADDR_VAR 0 4
70070: PUSH
70071: DOUBLE
70072: LD_INT 1
70074: DEC
70075: ST_TO_ADDR
70076: LD_VAR 0 2
70080: PUSH
70081: FOR_TO
70082: IFFALSE 70194
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70084: LD_VAR 0 1
70088: PPUSH
70089: LD_VAR 0 2
70093: PUSH
70094: LD_VAR 0 4
70098: ARRAY
70099: PUSH
70100: LD_INT 1
70102: ARRAY
70103: PPUSH
70104: LD_VAR 0 2
70108: PUSH
70109: LD_VAR 0 4
70113: ARRAY
70114: PUSH
70115: LD_INT 2
70117: ARRAY
70118: PPUSH
70119: CALL_OW 297
70123: PUSH
70124: LD_VAR 0 5
70128: LESS
70129: IFFALSE 70192
// begin hex := hexes [ i ] ;
70131: LD_ADDR_VAR 0 7
70135: PUSH
70136: LD_VAR 0 2
70140: PUSH
70141: LD_VAR 0 4
70145: ARRAY
70146: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70147: LD_ADDR_VAR 0 5
70151: PUSH
70152: LD_VAR 0 1
70156: PPUSH
70157: LD_VAR 0 2
70161: PUSH
70162: LD_VAR 0 4
70166: ARRAY
70167: PUSH
70168: LD_INT 1
70170: ARRAY
70171: PPUSH
70172: LD_VAR 0 2
70176: PUSH
70177: LD_VAR 0 4
70181: ARRAY
70182: PUSH
70183: LD_INT 2
70185: ARRAY
70186: PPUSH
70187: CALL_OW 297
70191: ST_TO_ADDR
// end ; end ;
70192: GO 70081
70194: POP
70195: POP
// result := hex ;
70196: LD_ADDR_VAR 0 3
70200: PUSH
70201: LD_VAR 0 7
70205: ST_TO_ADDR
// end ;
70206: LD_VAR 0 3
70210: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70211: LD_INT 0
70213: PPUSH
70214: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70215: LD_VAR 0 1
70219: NOT
70220: PUSH
70221: LD_VAR 0 1
70225: PUSH
70226: LD_INT 21
70228: PUSH
70229: LD_INT 2
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 23
70238: PUSH
70239: LD_INT 2
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PPUSH
70250: CALL_OW 69
70254: IN
70255: NOT
70256: OR
70257: IFFALSE 70261
// exit ;
70259: GO 70308
// for i = 1 to 3 do
70261: LD_ADDR_VAR 0 3
70265: PUSH
70266: DOUBLE
70267: LD_INT 1
70269: DEC
70270: ST_TO_ADDR
70271: LD_INT 3
70273: PUSH
70274: FOR_TO
70275: IFFALSE 70306
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70277: LD_VAR 0 1
70281: PPUSH
70282: CALL_OW 250
70286: PPUSH
70287: LD_VAR 0 1
70291: PPUSH
70292: CALL_OW 251
70296: PPUSH
70297: LD_INT 1
70299: PPUSH
70300: CALL_OW 453
70304: GO 70274
70306: POP
70307: POP
// end ;
70308: LD_VAR 0 2
70312: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70313: LD_INT 0
70315: PPUSH
70316: PPUSH
70317: PPUSH
70318: PPUSH
70319: PPUSH
70320: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70321: LD_VAR 0 1
70325: NOT
70326: PUSH
70327: LD_VAR 0 2
70331: NOT
70332: OR
70333: PUSH
70334: LD_VAR 0 1
70338: PPUSH
70339: CALL_OW 314
70343: OR
70344: IFFALSE 70348
// exit ;
70346: GO 70789
// x := GetX ( enemy_unit ) ;
70348: LD_ADDR_VAR 0 7
70352: PUSH
70353: LD_VAR 0 2
70357: PPUSH
70358: CALL_OW 250
70362: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70363: LD_ADDR_VAR 0 8
70367: PUSH
70368: LD_VAR 0 2
70372: PPUSH
70373: CALL_OW 251
70377: ST_TO_ADDR
// if not x or not y then
70378: LD_VAR 0 7
70382: NOT
70383: PUSH
70384: LD_VAR 0 8
70388: NOT
70389: OR
70390: IFFALSE 70394
// exit ;
70392: GO 70789
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70394: LD_ADDR_VAR 0 6
70398: PUSH
70399: LD_VAR 0 7
70403: PPUSH
70404: LD_INT 0
70406: PPUSH
70407: LD_INT 4
70409: PPUSH
70410: CALL_OW 272
70414: PUSH
70415: LD_VAR 0 8
70419: PPUSH
70420: LD_INT 0
70422: PPUSH
70423: LD_INT 4
70425: PPUSH
70426: CALL_OW 273
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_VAR 0 7
70439: PPUSH
70440: LD_INT 1
70442: PPUSH
70443: LD_INT 4
70445: PPUSH
70446: CALL_OW 272
70450: PUSH
70451: LD_VAR 0 8
70455: PPUSH
70456: LD_INT 1
70458: PPUSH
70459: LD_INT 4
70461: PPUSH
70462: CALL_OW 273
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_VAR 0 7
70475: PPUSH
70476: LD_INT 2
70478: PPUSH
70479: LD_INT 4
70481: PPUSH
70482: CALL_OW 272
70486: PUSH
70487: LD_VAR 0 8
70491: PPUSH
70492: LD_INT 2
70494: PPUSH
70495: LD_INT 4
70497: PPUSH
70498: CALL_OW 273
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_VAR 0 7
70511: PPUSH
70512: LD_INT 3
70514: PPUSH
70515: LD_INT 4
70517: PPUSH
70518: CALL_OW 272
70522: PUSH
70523: LD_VAR 0 8
70527: PPUSH
70528: LD_INT 3
70530: PPUSH
70531: LD_INT 4
70533: PPUSH
70534: CALL_OW 273
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_VAR 0 7
70547: PPUSH
70548: LD_INT 4
70550: PPUSH
70551: LD_INT 4
70553: PPUSH
70554: CALL_OW 272
70558: PUSH
70559: LD_VAR 0 8
70563: PPUSH
70564: LD_INT 4
70566: PPUSH
70567: LD_INT 4
70569: PPUSH
70570: CALL_OW 273
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_VAR 0 7
70583: PPUSH
70584: LD_INT 5
70586: PPUSH
70587: LD_INT 4
70589: PPUSH
70590: CALL_OW 272
70594: PUSH
70595: LD_VAR 0 8
70599: PPUSH
70600: LD_INT 5
70602: PPUSH
70603: LD_INT 4
70605: PPUSH
70606: CALL_OW 273
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: ST_TO_ADDR
// for i = tmp downto 1 do
70623: LD_ADDR_VAR 0 4
70627: PUSH
70628: DOUBLE
70629: LD_VAR 0 6
70633: INC
70634: ST_TO_ADDR
70635: LD_INT 1
70637: PUSH
70638: FOR_DOWNTO
70639: IFFALSE 70740
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70641: LD_VAR 0 6
70645: PUSH
70646: LD_VAR 0 4
70650: ARRAY
70651: PUSH
70652: LD_INT 1
70654: ARRAY
70655: PPUSH
70656: LD_VAR 0 6
70660: PUSH
70661: LD_VAR 0 4
70665: ARRAY
70666: PUSH
70667: LD_INT 2
70669: ARRAY
70670: PPUSH
70671: CALL_OW 488
70675: NOT
70676: PUSH
70677: LD_VAR 0 6
70681: PUSH
70682: LD_VAR 0 4
70686: ARRAY
70687: PUSH
70688: LD_INT 1
70690: ARRAY
70691: PPUSH
70692: LD_VAR 0 6
70696: PUSH
70697: LD_VAR 0 4
70701: ARRAY
70702: PUSH
70703: LD_INT 2
70705: ARRAY
70706: PPUSH
70707: CALL_OW 428
70711: PUSH
70712: LD_INT 0
70714: NONEQUAL
70715: OR
70716: IFFALSE 70738
// tmp := Delete ( tmp , i ) ;
70718: LD_ADDR_VAR 0 6
70722: PUSH
70723: LD_VAR 0 6
70727: PPUSH
70728: LD_VAR 0 4
70732: PPUSH
70733: CALL_OW 3
70737: ST_TO_ADDR
70738: GO 70638
70740: POP
70741: POP
// j := GetClosestHex ( unit , tmp ) ;
70742: LD_ADDR_VAR 0 5
70746: PUSH
70747: LD_VAR 0 1
70751: PPUSH
70752: LD_VAR 0 6
70756: PPUSH
70757: CALL 70042 0 2
70761: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70762: LD_VAR 0 1
70766: PPUSH
70767: LD_VAR 0 5
70771: PUSH
70772: LD_INT 1
70774: ARRAY
70775: PPUSH
70776: LD_VAR 0 5
70780: PUSH
70781: LD_INT 2
70783: ARRAY
70784: PPUSH
70785: CALL_OW 111
// end ;
70789: LD_VAR 0 3
70793: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70794: LD_INT 0
70796: PPUSH
70797: PPUSH
70798: PPUSH
// uc_side = 0 ;
70799: LD_ADDR_OWVAR 20
70803: PUSH
70804: LD_INT 0
70806: ST_TO_ADDR
// uc_nation = 0 ;
70807: LD_ADDR_OWVAR 21
70811: PUSH
70812: LD_INT 0
70814: ST_TO_ADDR
// InitHc_All ( ) ;
70815: CALL_OW 584
// InitVc ;
70819: CALL_OW 20
// if mastodonts then
70823: LD_VAR 0 6
70827: IFFALSE 70894
// for i = 1 to mastodonts do
70829: LD_ADDR_VAR 0 11
70833: PUSH
70834: DOUBLE
70835: LD_INT 1
70837: DEC
70838: ST_TO_ADDR
70839: LD_VAR 0 6
70843: PUSH
70844: FOR_TO
70845: IFFALSE 70892
// begin vc_chassis := 31 ;
70847: LD_ADDR_OWVAR 37
70851: PUSH
70852: LD_INT 31
70854: ST_TO_ADDR
// vc_control := control_rider ;
70855: LD_ADDR_OWVAR 38
70859: PUSH
70860: LD_INT 4
70862: ST_TO_ADDR
// animal := CreateVehicle ;
70863: LD_ADDR_VAR 0 12
70867: PUSH
70868: CALL_OW 45
70872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70873: LD_VAR 0 12
70877: PPUSH
70878: LD_VAR 0 8
70882: PPUSH
70883: LD_INT 0
70885: PPUSH
70886: CALL 73082 0 3
// end ;
70890: GO 70844
70892: POP
70893: POP
// if horses then
70894: LD_VAR 0 5
70898: IFFALSE 70965
// for i = 1 to horses do
70900: LD_ADDR_VAR 0 11
70904: PUSH
70905: DOUBLE
70906: LD_INT 1
70908: DEC
70909: ST_TO_ADDR
70910: LD_VAR 0 5
70914: PUSH
70915: FOR_TO
70916: IFFALSE 70963
// begin hc_class := 21 ;
70918: LD_ADDR_OWVAR 28
70922: PUSH
70923: LD_INT 21
70925: ST_TO_ADDR
// hc_gallery :=  ;
70926: LD_ADDR_OWVAR 33
70930: PUSH
70931: LD_STRING 
70933: ST_TO_ADDR
// animal := CreateHuman ;
70934: LD_ADDR_VAR 0 12
70938: PUSH
70939: CALL_OW 44
70943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70944: LD_VAR 0 12
70948: PPUSH
70949: LD_VAR 0 8
70953: PPUSH
70954: LD_INT 0
70956: PPUSH
70957: CALL 73082 0 3
// end ;
70961: GO 70915
70963: POP
70964: POP
// if birds then
70965: LD_VAR 0 1
70969: IFFALSE 71036
// for i = 1 to birds do
70971: LD_ADDR_VAR 0 11
70975: PUSH
70976: DOUBLE
70977: LD_INT 1
70979: DEC
70980: ST_TO_ADDR
70981: LD_VAR 0 1
70985: PUSH
70986: FOR_TO
70987: IFFALSE 71034
// begin hc_class = 18 ;
70989: LD_ADDR_OWVAR 28
70993: PUSH
70994: LD_INT 18
70996: ST_TO_ADDR
// hc_gallery =  ;
70997: LD_ADDR_OWVAR 33
71001: PUSH
71002: LD_STRING 
71004: ST_TO_ADDR
// animal := CreateHuman ;
71005: LD_ADDR_VAR 0 12
71009: PUSH
71010: CALL_OW 44
71014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71015: LD_VAR 0 12
71019: PPUSH
71020: LD_VAR 0 8
71024: PPUSH
71025: LD_INT 0
71027: PPUSH
71028: CALL 73082 0 3
// end ;
71032: GO 70986
71034: POP
71035: POP
// if tigers then
71036: LD_VAR 0 2
71040: IFFALSE 71124
// for i = 1 to tigers do
71042: LD_ADDR_VAR 0 11
71046: PUSH
71047: DOUBLE
71048: LD_INT 1
71050: DEC
71051: ST_TO_ADDR
71052: LD_VAR 0 2
71056: PUSH
71057: FOR_TO
71058: IFFALSE 71122
// begin hc_class = class_tiger ;
71060: LD_ADDR_OWVAR 28
71064: PUSH
71065: LD_INT 14
71067: ST_TO_ADDR
// hc_gallery =  ;
71068: LD_ADDR_OWVAR 33
71072: PUSH
71073: LD_STRING 
71075: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71076: LD_ADDR_OWVAR 35
71080: PUSH
71081: LD_INT 7
71083: NEG
71084: PPUSH
71085: LD_INT 7
71087: PPUSH
71088: CALL_OW 12
71092: ST_TO_ADDR
// animal := CreateHuman ;
71093: LD_ADDR_VAR 0 12
71097: PUSH
71098: CALL_OW 44
71102: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71103: LD_VAR 0 12
71107: PPUSH
71108: LD_VAR 0 8
71112: PPUSH
71113: LD_INT 0
71115: PPUSH
71116: CALL 73082 0 3
// end ;
71120: GO 71057
71122: POP
71123: POP
// if apemans then
71124: LD_VAR 0 3
71128: IFFALSE 71251
// for i = 1 to apemans do
71130: LD_ADDR_VAR 0 11
71134: PUSH
71135: DOUBLE
71136: LD_INT 1
71138: DEC
71139: ST_TO_ADDR
71140: LD_VAR 0 3
71144: PUSH
71145: FOR_TO
71146: IFFALSE 71249
// begin hc_class = class_apeman ;
71148: LD_ADDR_OWVAR 28
71152: PUSH
71153: LD_INT 12
71155: ST_TO_ADDR
// hc_gallery =  ;
71156: LD_ADDR_OWVAR 33
71160: PUSH
71161: LD_STRING 
71163: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71164: LD_ADDR_OWVAR 35
71168: PUSH
71169: LD_INT 2
71171: NEG
71172: PPUSH
71173: LD_INT 2
71175: PPUSH
71176: CALL_OW 12
71180: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71181: LD_ADDR_OWVAR 31
71185: PUSH
71186: LD_INT 1
71188: PPUSH
71189: LD_INT 3
71191: PPUSH
71192: CALL_OW 12
71196: PUSH
71197: LD_INT 1
71199: PPUSH
71200: LD_INT 3
71202: PPUSH
71203: CALL_OW 12
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: LD_INT 0
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: ST_TO_ADDR
// animal := CreateHuman ;
71220: LD_ADDR_VAR 0 12
71224: PUSH
71225: CALL_OW 44
71229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71230: LD_VAR 0 12
71234: PPUSH
71235: LD_VAR 0 8
71239: PPUSH
71240: LD_INT 0
71242: PPUSH
71243: CALL 73082 0 3
// end ;
71247: GO 71145
71249: POP
71250: POP
// if enchidnas then
71251: LD_VAR 0 4
71255: IFFALSE 71322
// for i = 1 to enchidnas do
71257: LD_ADDR_VAR 0 11
71261: PUSH
71262: DOUBLE
71263: LD_INT 1
71265: DEC
71266: ST_TO_ADDR
71267: LD_VAR 0 4
71271: PUSH
71272: FOR_TO
71273: IFFALSE 71320
// begin hc_class = 13 ;
71275: LD_ADDR_OWVAR 28
71279: PUSH
71280: LD_INT 13
71282: ST_TO_ADDR
// hc_gallery =  ;
71283: LD_ADDR_OWVAR 33
71287: PUSH
71288: LD_STRING 
71290: ST_TO_ADDR
// animal := CreateHuman ;
71291: LD_ADDR_VAR 0 12
71295: PUSH
71296: CALL_OW 44
71300: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71301: LD_VAR 0 12
71305: PPUSH
71306: LD_VAR 0 8
71310: PPUSH
71311: LD_INT 0
71313: PPUSH
71314: CALL 73082 0 3
// end ;
71318: GO 71272
71320: POP
71321: POP
// if fishes then
71322: LD_VAR 0 7
71326: IFFALSE 71393
// for i = 1 to fishes do
71328: LD_ADDR_VAR 0 11
71332: PUSH
71333: DOUBLE
71334: LD_INT 1
71336: DEC
71337: ST_TO_ADDR
71338: LD_VAR 0 7
71342: PUSH
71343: FOR_TO
71344: IFFALSE 71391
// begin hc_class = 20 ;
71346: LD_ADDR_OWVAR 28
71350: PUSH
71351: LD_INT 20
71353: ST_TO_ADDR
// hc_gallery =  ;
71354: LD_ADDR_OWVAR 33
71358: PUSH
71359: LD_STRING 
71361: ST_TO_ADDR
// animal := CreateHuman ;
71362: LD_ADDR_VAR 0 12
71366: PUSH
71367: CALL_OW 44
71371: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71372: LD_VAR 0 12
71376: PPUSH
71377: LD_VAR 0 9
71381: PPUSH
71382: LD_INT 0
71384: PPUSH
71385: CALL 73082 0 3
// end ;
71389: GO 71343
71391: POP
71392: POP
// end ;
71393: LD_VAR 0 10
71397: RET
// export function WantHeal ( sci , unit ) ; begin
71398: LD_INT 0
71400: PPUSH
// if GetTaskList ( sci ) > 0 then
71401: LD_VAR 0 1
71405: PPUSH
71406: CALL_OW 437
71410: PUSH
71411: LD_INT 0
71413: GREATER
71414: IFFALSE 71484
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71416: LD_VAR 0 1
71420: PPUSH
71421: CALL_OW 437
71425: PUSH
71426: LD_INT 1
71428: ARRAY
71429: PUSH
71430: LD_INT 1
71432: ARRAY
71433: PUSH
71434: LD_STRING l
71436: EQUAL
71437: PUSH
71438: LD_VAR 0 1
71442: PPUSH
71443: CALL_OW 437
71447: PUSH
71448: LD_INT 1
71450: ARRAY
71451: PUSH
71452: LD_INT 4
71454: ARRAY
71455: PUSH
71456: LD_VAR 0 2
71460: EQUAL
71461: AND
71462: IFFALSE 71474
// result := true else
71464: LD_ADDR_VAR 0 3
71468: PUSH
71469: LD_INT 1
71471: ST_TO_ADDR
71472: GO 71482
// result := false ;
71474: LD_ADDR_VAR 0 3
71478: PUSH
71479: LD_INT 0
71481: ST_TO_ADDR
// end else
71482: GO 71492
// result := false ;
71484: LD_ADDR_VAR 0 3
71488: PUSH
71489: LD_INT 0
71491: ST_TO_ADDR
// end ;
71492: LD_VAR 0 3
71496: RET
// export function HealTarget ( sci ) ; begin
71497: LD_INT 0
71499: PPUSH
// if not sci then
71500: LD_VAR 0 1
71504: NOT
71505: IFFALSE 71509
// exit ;
71507: GO 71574
// result := 0 ;
71509: LD_ADDR_VAR 0 2
71513: PUSH
71514: LD_INT 0
71516: ST_TO_ADDR
// if GetTaskList ( sci ) then
71517: LD_VAR 0 1
71521: PPUSH
71522: CALL_OW 437
71526: IFFALSE 71574
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71528: LD_VAR 0 1
71532: PPUSH
71533: CALL_OW 437
71537: PUSH
71538: LD_INT 1
71540: ARRAY
71541: PUSH
71542: LD_INT 1
71544: ARRAY
71545: PUSH
71546: LD_STRING l
71548: EQUAL
71549: IFFALSE 71574
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71551: LD_ADDR_VAR 0 2
71555: PUSH
71556: LD_VAR 0 1
71560: PPUSH
71561: CALL_OW 437
71565: PUSH
71566: LD_INT 1
71568: ARRAY
71569: PUSH
71570: LD_INT 4
71572: ARRAY
71573: ST_TO_ADDR
// end ;
71574: LD_VAR 0 2
71578: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71579: LD_INT 0
71581: PPUSH
71582: PPUSH
71583: PPUSH
71584: PPUSH
// if not base_units then
71585: LD_VAR 0 1
71589: NOT
71590: IFFALSE 71594
// exit ;
71592: GO 71681
// result := false ;
71594: LD_ADDR_VAR 0 2
71598: PUSH
71599: LD_INT 0
71601: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71602: LD_ADDR_VAR 0 5
71606: PUSH
71607: LD_VAR 0 1
71611: PPUSH
71612: LD_INT 21
71614: PUSH
71615: LD_INT 3
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PPUSH
71622: CALL_OW 72
71626: ST_TO_ADDR
// if not tmp then
71627: LD_VAR 0 5
71631: NOT
71632: IFFALSE 71636
// exit ;
71634: GO 71681
// for i in tmp do
71636: LD_ADDR_VAR 0 3
71640: PUSH
71641: LD_VAR 0 5
71645: PUSH
71646: FOR_IN
71647: IFFALSE 71679
// begin result := EnemyInRange ( i , 22 ) ;
71649: LD_ADDR_VAR 0 2
71653: PUSH
71654: LD_VAR 0 3
71658: PPUSH
71659: LD_INT 22
71661: PPUSH
71662: CALL 69917 0 2
71666: ST_TO_ADDR
// if result then
71667: LD_VAR 0 2
71671: IFFALSE 71677
// exit ;
71673: POP
71674: POP
71675: GO 71681
// end ;
71677: GO 71646
71679: POP
71680: POP
// end ;
71681: LD_VAR 0 2
71685: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
// if not units then
71690: LD_VAR 0 1
71694: NOT
71695: IFFALSE 71699
// exit ;
71697: GO 71769
// result := [ ] ;
71699: LD_ADDR_VAR 0 3
71703: PUSH
71704: EMPTY
71705: ST_TO_ADDR
// for i in units do
71706: LD_ADDR_VAR 0 4
71710: PUSH
71711: LD_VAR 0 1
71715: PUSH
71716: FOR_IN
71717: IFFALSE 71767
// if GetTag ( i ) = tag then
71719: LD_VAR 0 4
71723: PPUSH
71724: CALL_OW 110
71728: PUSH
71729: LD_VAR 0 2
71733: EQUAL
71734: IFFALSE 71765
// result := Replace ( result , result + 1 , i ) ;
71736: LD_ADDR_VAR 0 3
71740: PUSH
71741: LD_VAR 0 3
71745: PPUSH
71746: LD_VAR 0 3
71750: PUSH
71751: LD_INT 1
71753: PLUS
71754: PPUSH
71755: LD_VAR 0 4
71759: PPUSH
71760: CALL_OW 1
71764: ST_TO_ADDR
71765: GO 71716
71767: POP
71768: POP
// end ;
71769: LD_VAR 0 3
71773: RET
// export function IsDriver ( un ) ; begin
71774: LD_INT 0
71776: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71777: LD_ADDR_VAR 0 2
71781: PUSH
71782: LD_VAR 0 1
71786: PUSH
71787: LD_INT 55
71789: PUSH
71790: EMPTY
71791: LIST
71792: PPUSH
71793: CALL_OW 69
71797: IN
71798: ST_TO_ADDR
// end ;
71799: LD_VAR 0 2
71803: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71804: LD_INT 0
71806: PPUSH
71807: PPUSH
// list := [ ] ;
71808: LD_ADDR_VAR 0 5
71812: PUSH
71813: EMPTY
71814: ST_TO_ADDR
// case d of 0 :
71815: LD_VAR 0 3
71819: PUSH
71820: LD_INT 0
71822: DOUBLE
71823: EQUAL
71824: IFTRUE 71828
71826: GO 71961
71828: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71829: LD_ADDR_VAR 0 5
71833: PUSH
71834: LD_VAR 0 1
71838: PUSH
71839: LD_INT 4
71841: MINUS
71842: PUSH
71843: LD_VAR 0 2
71847: PUSH
71848: LD_INT 4
71850: MINUS
71851: PUSH
71852: LD_INT 2
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: LIST
71859: PUSH
71860: LD_VAR 0 1
71864: PUSH
71865: LD_INT 3
71867: MINUS
71868: PUSH
71869: LD_VAR 0 2
71873: PUSH
71874: LD_INT 1
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: LIST
71881: PUSH
71882: LD_VAR 0 1
71886: PUSH
71887: LD_INT 4
71889: PLUS
71890: PUSH
71891: LD_VAR 0 2
71895: PUSH
71896: LD_INT 4
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: LIST
71903: PUSH
71904: LD_VAR 0 1
71908: PUSH
71909: LD_INT 3
71911: PLUS
71912: PUSH
71913: LD_VAR 0 2
71917: PUSH
71918: LD_INT 3
71920: PLUS
71921: PUSH
71922: LD_INT 5
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: LIST
71929: PUSH
71930: LD_VAR 0 1
71934: PUSH
71935: LD_VAR 0 2
71939: PUSH
71940: LD_INT 4
71942: PLUS
71943: PUSH
71944: LD_INT 0
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: ST_TO_ADDR
// end ; 1 :
71959: GO 72659
71961: LD_INT 1
71963: DOUBLE
71964: EQUAL
71965: IFTRUE 71969
71967: GO 72102
71969: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71970: LD_ADDR_VAR 0 5
71974: PUSH
71975: LD_VAR 0 1
71979: PUSH
71980: LD_VAR 0 2
71984: PUSH
71985: LD_INT 4
71987: MINUS
71988: PUSH
71989: LD_INT 3
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: LIST
71996: PUSH
71997: LD_VAR 0 1
72001: PUSH
72002: LD_INT 3
72004: MINUS
72005: PUSH
72006: LD_VAR 0 2
72010: PUSH
72011: LD_INT 3
72013: MINUS
72014: PUSH
72015: LD_INT 2
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: LIST
72022: PUSH
72023: LD_VAR 0 1
72027: PUSH
72028: LD_INT 4
72030: MINUS
72031: PUSH
72032: LD_VAR 0 2
72036: PUSH
72037: LD_INT 1
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: LIST
72044: PUSH
72045: LD_VAR 0 1
72049: PUSH
72050: LD_VAR 0 2
72054: PUSH
72055: LD_INT 3
72057: PLUS
72058: PUSH
72059: LD_INT 0
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: PUSH
72067: LD_VAR 0 1
72071: PUSH
72072: LD_INT 4
72074: PLUS
72075: PUSH
72076: LD_VAR 0 2
72080: PUSH
72081: LD_INT 4
72083: PLUS
72084: PUSH
72085: LD_INT 5
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: LIST
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: ST_TO_ADDR
// end ; 2 :
72100: GO 72659
72102: LD_INT 2
72104: DOUBLE
72105: EQUAL
72106: IFTRUE 72110
72108: GO 72239
72110: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72111: LD_ADDR_VAR 0 5
72115: PUSH
72116: LD_VAR 0 1
72120: PUSH
72121: LD_VAR 0 2
72125: PUSH
72126: LD_INT 3
72128: MINUS
72129: PUSH
72130: LD_INT 3
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: LIST
72137: PUSH
72138: LD_VAR 0 1
72142: PUSH
72143: LD_INT 4
72145: PLUS
72146: PUSH
72147: LD_VAR 0 2
72151: PUSH
72152: LD_INT 4
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: PUSH
72160: LD_VAR 0 1
72164: PUSH
72165: LD_VAR 0 2
72169: PUSH
72170: LD_INT 4
72172: PLUS
72173: PUSH
72174: LD_INT 0
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: LIST
72181: PUSH
72182: LD_VAR 0 1
72186: PUSH
72187: LD_INT 3
72189: MINUS
72190: PUSH
72191: LD_VAR 0 2
72195: PUSH
72196: LD_INT 1
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: LIST
72203: PUSH
72204: LD_VAR 0 1
72208: PUSH
72209: LD_INT 4
72211: MINUS
72212: PUSH
72213: LD_VAR 0 2
72217: PUSH
72218: LD_INT 4
72220: MINUS
72221: PUSH
72222: LD_INT 2
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: LIST
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: ST_TO_ADDR
// end ; 3 :
72237: GO 72659
72239: LD_INT 3
72241: DOUBLE
72242: EQUAL
72243: IFTRUE 72247
72245: GO 72380
72247: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72248: LD_ADDR_VAR 0 5
72252: PUSH
72253: LD_VAR 0 1
72257: PUSH
72258: LD_INT 3
72260: PLUS
72261: PUSH
72262: LD_VAR 0 2
72266: PUSH
72267: LD_INT 4
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: PUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_INT 4
72282: PLUS
72283: PUSH
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 4
72291: PLUS
72292: PUSH
72293: LD_INT 5
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: LIST
72300: PUSH
72301: LD_VAR 0 1
72305: PUSH
72306: LD_INT 4
72308: MINUS
72309: PUSH
72310: LD_VAR 0 2
72314: PUSH
72315: LD_INT 1
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: LIST
72322: PUSH
72323: LD_VAR 0 1
72327: PUSH
72328: LD_VAR 0 2
72332: PUSH
72333: LD_INT 4
72335: MINUS
72336: PUSH
72337: LD_INT 3
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: LIST
72344: PUSH
72345: LD_VAR 0 1
72349: PUSH
72350: LD_INT 3
72352: MINUS
72353: PUSH
72354: LD_VAR 0 2
72358: PUSH
72359: LD_INT 3
72361: MINUS
72362: PUSH
72363: LD_INT 2
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: LIST
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: ST_TO_ADDR
// end ; 4 :
72378: GO 72659
72380: LD_INT 4
72382: DOUBLE
72383: EQUAL
72384: IFTRUE 72388
72386: GO 72521
72388: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72389: LD_ADDR_VAR 0 5
72393: PUSH
72394: LD_VAR 0 1
72398: PUSH
72399: LD_VAR 0 2
72403: PUSH
72404: LD_INT 4
72406: PLUS
72407: PUSH
72408: LD_INT 0
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: LIST
72415: PUSH
72416: LD_VAR 0 1
72420: PUSH
72421: LD_INT 3
72423: PLUS
72424: PUSH
72425: LD_VAR 0 2
72429: PUSH
72430: LD_INT 3
72432: PLUS
72433: PUSH
72434: LD_INT 5
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: LIST
72441: PUSH
72442: LD_VAR 0 1
72446: PUSH
72447: LD_INT 4
72449: PLUS
72450: PUSH
72451: LD_VAR 0 2
72455: PUSH
72456: LD_INT 4
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: PUSH
72464: LD_VAR 0 1
72468: PUSH
72469: LD_VAR 0 2
72473: PUSH
72474: LD_INT 3
72476: MINUS
72477: PUSH
72478: LD_INT 3
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: LIST
72485: PUSH
72486: LD_VAR 0 1
72490: PUSH
72491: LD_INT 4
72493: MINUS
72494: PUSH
72495: LD_VAR 0 2
72499: PUSH
72500: LD_INT 4
72502: MINUS
72503: PUSH
72504: LD_INT 2
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: LIST
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: ST_TO_ADDR
// end ; 5 :
72519: GO 72659
72521: LD_INT 5
72523: DOUBLE
72524: EQUAL
72525: IFTRUE 72529
72527: GO 72658
72529: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72530: LD_ADDR_VAR 0 5
72534: PUSH
72535: LD_VAR 0 1
72539: PUSH
72540: LD_INT 4
72542: MINUS
72543: PUSH
72544: LD_VAR 0 2
72548: PUSH
72549: LD_INT 1
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: PUSH
72557: LD_VAR 0 1
72561: PUSH
72562: LD_VAR 0 2
72566: PUSH
72567: LD_INT 4
72569: MINUS
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: PUSH
72579: LD_VAR 0 1
72583: PUSH
72584: LD_INT 4
72586: PLUS
72587: PUSH
72588: LD_VAR 0 2
72592: PUSH
72593: LD_INT 4
72595: PLUS
72596: PUSH
72597: LD_INT 5
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: LIST
72604: PUSH
72605: LD_VAR 0 1
72609: PUSH
72610: LD_INT 3
72612: PLUS
72613: PUSH
72614: LD_VAR 0 2
72618: PUSH
72619: LD_INT 4
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: LIST
72626: PUSH
72627: LD_VAR 0 1
72631: PUSH
72632: LD_VAR 0 2
72636: PUSH
72637: LD_INT 3
72639: PLUS
72640: PUSH
72641: LD_INT 0
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: LIST
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: ST_TO_ADDR
// end ; end ;
72656: GO 72659
72658: POP
// result := list ;
72659: LD_ADDR_VAR 0 4
72663: PUSH
72664: LD_VAR 0 5
72668: ST_TO_ADDR
// end ;
72669: LD_VAR 0 4
72673: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72674: LD_INT 0
72676: PPUSH
72677: PPUSH
72678: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72679: LD_VAR 0 1
72683: NOT
72684: PUSH
72685: LD_VAR 0 2
72689: PUSH
72690: LD_INT 1
72692: PUSH
72693: LD_INT 2
72695: PUSH
72696: LD_INT 3
72698: PUSH
72699: LD_INT 4
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: IN
72708: NOT
72709: OR
72710: IFFALSE 72714
// exit ;
72712: GO 72806
// tmp := [ ] ;
72714: LD_ADDR_VAR 0 5
72718: PUSH
72719: EMPTY
72720: ST_TO_ADDR
// for i in units do
72721: LD_ADDR_VAR 0 4
72725: PUSH
72726: LD_VAR 0 1
72730: PUSH
72731: FOR_IN
72732: IFFALSE 72775
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72734: LD_ADDR_VAR 0 5
72738: PUSH
72739: LD_VAR 0 5
72743: PPUSH
72744: LD_VAR 0 5
72748: PUSH
72749: LD_INT 1
72751: PLUS
72752: PPUSH
72753: LD_VAR 0 4
72757: PPUSH
72758: LD_VAR 0 2
72762: PPUSH
72763: CALL_OW 259
72767: PPUSH
72768: CALL_OW 2
72772: ST_TO_ADDR
72773: GO 72731
72775: POP
72776: POP
// if not tmp then
72777: LD_VAR 0 5
72781: NOT
72782: IFFALSE 72786
// exit ;
72784: GO 72806
// result := SortListByListDesc ( units , tmp ) ;
72786: LD_ADDR_VAR 0 3
72790: PUSH
72791: LD_VAR 0 1
72795: PPUSH
72796: LD_VAR 0 5
72800: PPUSH
72801: CALL_OW 77
72805: ST_TO_ADDR
// end ;
72806: LD_VAR 0 3
72810: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72811: LD_INT 0
72813: PPUSH
72814: PPUSH
72815: PPUSH
// result := false ;
72816: LD_ADDR_VAR 0 3
72820: PUSH
72821: LD_INT 0
72823: ST_TO_ADDR
// x := GetX ( building ) ;
72824: LD_ADDR_VAR 0 4
72828: PUSH
72829: LD_VAR 0 2
72833: PPUSH
72834: CALL_OW 250
72838: ST_TO_ADDR
// y := GetY ( building ) ;
72839: LD_ADDR_VAR 0 5
72843: PUSH
72844: LD_VAR 0 2
72848: PPUSH
72849: CALL_OW 251
72853: ST_TO_ADDR
// if not building or not x or not y then
72854: LD_VAR 0 2
72858: NOT
72859: PUSH
72860: LD_VAR 0 4
72864: NOT
72865: OR
72866: PUSH
72867: LD_VAR 0 5
72871: NOT
72872: OR
72873: IFFALSE 72877
// exit ;
72875: GO 72969
// if GetTaskList ( unit ) then
72877: LD_VAR 0 1
72881: PPUSH
72882: CALL_OW 437
72886: IFFALSE 72969
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72888: LD_STRING e
72890: PUSH
72891: LD_VAR 0 1
72895: PPUSH
72896: CALL_OW 437
72900: PUSH
72901: LD_INT 1
72903: ARRAY
72904: PUSH
72905: LD_INT 1
72907: ARRAY
72908: EQUAL
72909: PUSH
72910: LD_VAR 0 4
72914: PUSH
72915: LD_VAR 0 1
72919: PPUSH
72920: CALL_OW 437
72924: PUSH
72925: LD_INT 1
72927: ARRAY
72928: PUSH
72929: LD_INT 2
72931: ARRAY
72932: EQUAL
72933: AND
72934: PUSH
72935: LD_VAR 0 5
72939: PUSH
72940: LD_VAR 0 1
72944: PPUSH
72945: CALL_OW 437
72949: PUSH
72950: LD_INT 1
72952: ARRAY
72953: PUSH
72954: LD_INT 3
72956: ARRAY
72957: EQUAL
72958: AND
72959: IFFALSE 72969
// result := true end ;
72961: LD_ADDR_VAR 0 3
72965: PUSH
72966: LD_INT 1
72968: ST_TO_ADDR
// end ;
72969: LD_VAR 0 3
72973: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72974: LD_INT 0
72976: PPUSH
// result := false ;
72977: LD_ADDR_VAR 0 4
72981: PUSH
72982: LD_INT 0
72984: ST_TO_ADDR
// if GetTaskList ( unit ) then
72985: LD_VAR 0 1
72989: PPUSH
72990: CALL_OW 437
72994: IFFALSE 73077
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72996: LD_STRING M
72998: PUSH
72999: LD_VAR 0 1
73003: PPUSH
73004: CALL_OW 437
73008: PUSH
73009: LD_INT 1
73011: ARRAY
73012: PUSH
73013: LD_INT 1
73015: ARRAY
73016: EQUAL
73017: PUSH
73018: LD_VAR 0 2
73022: PUSH
73023: LD_VAR 0 1
73027: PPUSH
73028: CALL_OW 437
73032: PUSH
73033: LD_INT 1
73035: ARRAY
73036: PUSH
73037: LD_INT 2
73039: ARRAY
73040: EQUAL
73041: AND
73042: PUSH
73043: LD_VAR 0 3
73047: PUSH
73048: LD_VAR 0 1
73052: PPUSH
73053: CALL_OW 437
73057: PUSH
73058: LD_INT 1
73060: ARRAY
73061: PUSH
73062: LD_INT 3
73064: ARRAY
73065: EQUAL
73066: AND
73067: IFFALSE 73077
// result := true ;
73069: LD_ADDR_VAR 0 4
73073: PUSH
73074: LD_INT 1
73076: ST_TO_ADDR
// end ; end ;
73077: LD_VAR 0 4
73081: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73082: LD_INT 0
73084: PPUSH
73085: PPUSH
73086: PPUSH
73087: PPUSH
// if not unit or not area then
73088: LD_VAR 0 1
73092: NOT
73093: PUSH
73094: LD_VAR 0 2
73098: NOT
73099: OR
73100: IFFALSE 73104
// exit ;
73102: GO 73268
// tmp := AreaToList ( area , i ) ;
73104: LD_ADDR_VAR 0 6
73108: PUSH
73109: LD_VAR 0 2
73113: PPUSH
73114: LD_VAR 0 5
73118: PPUSH
73119: CALL_OW 517
73123: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73124: LD_ADDR_VAR 0 5
73128: PUSH
73129: DOUBLE
73130: LD_INT 1
73132: DEC
73133: ST_TO_ADDR
73134: LD_VAR 0 6
73138: PUSH
73139: LD_INT 1
73141: ARRAY
73142: PUSH
73143: FOR_TO
73144: IFFALSE 73266
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73146: LD_ADDR_VAR 0 7
73150: PUSH
73151: LD_VAR 0 6
73155: PUSH
73156: LD_INT 1
73158: ARRAY
73159: PUSH
73160: LD_VAR 0 5
73164: ARRAY
73165: PUSH
73166: LD_VAR 0 6
73170: PUSH
73171: LD_INT 2
73173: ARRAY
73174: PUSH
73175: LD_VAR 0 5
73179: ARRAY
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73185: LD_VAR 0 7
73189: PUSH
73190: LD_INT 1
73192: ARRAY
73193: PPUSH
73194: LD_VAR 0 7
73198: PUSH
73199: LD_INT 2
73201: ARRAY
73202: PPUSH
73203: CALL_OW 428
73207: PUSH
73208: LD_INT 0
73210: EQUAL
73211: IFFALSE 73264
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73213: LD_VAR 0 1
73217: PPUSH
73218: LD_VAR 0 7
73222: PUSH
73223: LD_INT 1
73225: ARRAY
73226: PPUSH
73227: LD_VAR 0 7
73231: PUSH
73232: LD_INT 2
73234: ARRAY
73235: PPUSH
73236: LD_VAR 0 3
73240: PPUSH
73241: CALL_OW 48
// result := IsPlaced ( unit ) ;
73245: LD_ADDR_VAR 0 4
73249: PUSH
73250: LD_VAR 0 1
73254: PPUSH
73255: CALL_OW 305
73259: ST_TO_ADDR
// exit ;
73260: POP
73261: POP
73262: GO 73268
// end ; end ;
73264: GO 73143
73266: POP
73267: POP
// end ;
73268: LD_VAR 0 4
73272: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73273: LD_INT 0
73275: PPUSH
73276: PPUSH
73277: PPUSH
// if not side or side > 8 then
73278: LD_VAR 0 1
73282: NOT
73283: PUSH
73284: LD_VAR 0 1
73288: PUSH
73289: LD_INT 8
73291: GREATER
73292: OR
73293: IFFALSE 73297
// exit ;
73295: GO 73484
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73297: LD_ADDR_VAR 0 4
73301: PUSH
73302: LD_INT 22
73304: PUSH
73305: LD_VAR 0 1
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_INT 21
73316: PUSH
73317: LD_INT 3
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PPUSH
73328: CALL_OW 69
73332: ST_TO_ADDR
// if not tmp then
73333: LD_VAR 0 4
73337: NOT
73338: IFFALSE 73342
// exit ;
73340: GO 73484
// enable_addtolog := true ;
73342: LD_ADDR_OWVAR 81
73346: PUSH
73347: LD_INT 1
73349: ST_TO_ADDR
// AddToLog ( [ ) ;
73350: LD_STRING [
73352: PPUSH
73353: CALL_OW 561
// for i in tmp do
73357: LD_ADDR_VAR 0 3
73361: PUSH
73362: LD_VAR 0 4
73366: PUSH
73367: FOR_IN
73368: IFFALSE 73475
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73370: LD_STRING [
73372: PUSH
73373: LD_VAR 0 3
73377: PPUSH
73378: CALL_OW 266
73382: STR
73383: PUSH
73384: LD_STRING , 
73386: STR
73387: PUSH
73388: LD_VAR 0 3
73392: PPUSH
73393: CALL_OW 250
73397: STR
73398: PUSH
73399: LD_STRING , 
73401: STR
73402: PUSH
73403: LD_VAR 0 3
73407: PPUSH
73408: CALL_OW 251
73412: STR
73413: PUSH
73414: LD_STRING , 
73416: STR
73417: PUSH
73418: LD_VAR 0 3
73422: PPUSH
73423: CALL_OW 254
73427: STR
73428: PUSH
73429: LD_STRING , 
73431: STR
73432: PUSH
73433: LD_VAR 0 3
73437: PPUSH
73438: LD_INT 1
73440: PPUSH
73441: CALL_OW 268
73445: STR
73446: PUSH
73447: LD_STRING , 
73449: STR
73450: PUSH
73451: LD_VAR 0 3
73455: PPUSH
73456: LD_INT 2
73458: PPUSH
73459: CALL_OW 268
73463: STR
73464: PUSH
73465: LD_STRING ],
73467: STR
73468: PPUSH
73469: CALL_OW 561
// end ;
73473: GO 73367
73475: POP
73476: POP
// AddToLog ( ]; ) ;
73477: LD_STRING ];
73479: PPUSH
73480: CALL_OW 561
// end ;
73484: LD_VAR 0 2
73488: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73489: LD_INT 0
73491: PPUSH
73492: PPUSH
73493: PPUSH
73494: PPUSH
73495: PPUSH
// if not area or not rate or not max then
73496: LD_VAR 0 1
73500: NOT
73501: PUSH
73502: LD_VAR 0 2
73506: NOT
73507: OR
73508: PUSH
73509: LD_VAR 0 4
73513: NOT
73514: OR
73515: IFFALSE 73519
// exit ;
73517: GO 73711
// while 1 do
73519: LD_INT 1
73521: IFFALSE 73711
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73523: LD_ADDR_VAR 0 9
73527: PUSH
73528: LD_VAR 0 1
73532: PPUSH
73533: LD_INT 1
73535: PPUSH
73536: CALL_OW 287
73540: PUSH
73541: LD_INT 10
73543: MUL
73544: ST_TO_ADDR
// r := rate / 10 ;
73545: LD_ADDR_VAR 0 7
73549: PUSH
73550: LD_VAR 0 2
73554: PUSH
73555: LD_INT 10
73557: DIVREAL
73558: ST_TO_ADDR
// time := 1 1$00 ;
73559: LD_ADDR_VAR 0 8
73563: PUSH
73564: LD_INT 2100
73566: ST_TO_ADDR
// if amount < min then
73567: LD_VAR 0 9
73571: PUSH
73572: LD_VAR 0 3
73576: LESS
73577: IFFALSE 73595
// r := r * 2 else
73579: LD_ADDR_VAR 0 7
73583: PUSH
73584: LD_VAR 0 7
73588: PUSH
73589: LD_INT 2
73591: MUL
73592: ST_TO_ADDR
73593: GO 73621
// if amount > max then
73595: LD_VAR 0 9
73599: PUSH
73600: LD_VAR 0 4
73604: GREATER
73605: IFFALSE 73621
// r := r / 2 ;
73607: LD_ADDR_VAR 0 7
73611: PUSH
73612: LD_VAR 0 7
73616: PUSH
73617: LD_INT 2
73619: DIVREAL
73620: ST_TO_ADDR
// time := time / r ;
73621: LD_ADDR_VAR 0 8
73625: PUSH
73626: LD_VAR 0 8
73630: PUSH
73631: LD_VAR 0 7
73635: DIVREAL
73636: ST_TO_ADDR
// if time < 0 then
73637: LD_VAR 0 8
73641: PUSH
73642: LD_INT 0
73644: LESS
73645: IFFALSE 73662
// time := time * - 1 ;
73647: LD_ADDR_VAR 0 8
73651: PUSH
73652: LD_VAR 0 8
73656: PUSH
73657: LD_INT 1
73659: NEG
73660: MUL
73661: ST_TO_ADDR
// wait ( time ) ;
73662: LD_VAR 0 8
73666: PPUSH
73667: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73671: LD_INT 35
73673: PPUSH
73674: LD_INT 875
73676: PPUSH
73677: CALL_OW 12
73681: PPUSH
73682: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73686: LD_INT 1
73688: PPUSH
73689: LD_INT 5
73691: PPUSH
73692: CALL_OW 12
73696: PPUSH
73697: LD_VAR 0 1
73701: PPUSH
73702: LD_INT 1
73704: PPUSH
73705: CALL_OW 55
// end ;
73709: GO 73519
// end ;
73711: LD_VAR 0 5
73715: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73716: LD_INT 0
73718: PPUSH
73719: PPUSH
73720: PPUSH
73721: PPUSH
73722: PPUSH
73723: PPUSH
73724: PPUSH
73725: PPUSH
// if not turrets or not factories then
73726: LD_VAR 0 1
73730: NOT
73731: PUSH
73732: LD_VAR 0 2
73736: NOT
73737: OR
73738: IFFALSE 73742
// exit ;
73740: GO 74049
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73742: LD_ADDR_VAR 0 10
73746: PUSH
73747: LD_INT 5
73749: PUSH
73750: LD_INT 6
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 2
73759: PUSH
73760: LD_INT 4
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: LD_INT 3
73769: PUSH
73770: LD_INT 5
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: LIST
73781: PUSH
73782: LD_INT 24
73784: PUSH
73785: LD_INT 25
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 23
73794: PUSH
73795: LD_INT 27
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 42
73808: PUSH
73809: LD_INT 43
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 44
73818: PUSH
73819: LD_INT 46
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 45
73828: PUSH
73829: LD_INT 47
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: LIST
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: LIST
73845: ST_TO_ADDR
// result := [ ] ;
73846: LD_ADDR_VAR 0 3
73850: PUSH
73851: EMPTY
73852: ST_TO_ADDR
// for i in turrets do
73853: LD_ADDR_VAR 0 4
73857: PUSH
73858: LD_VAR 0 1
73862: PUSH
73863: FOR_IN
73864: IFFALSE 74047
// begin nat := GetNation ( i ) ;
73866: LD_ADDR_VAR 0 7
73870: PUSH
73871: LD_VAR 0 4
73875: PPUSH
73876: CALL_OW 248
73880: ST_TO_ADDR
// weapon := 0 ;
73881: LD_ADDR_VAR 0 8
73885: PUSH
73886: LD_INT 0
73888: ST_TO_ADDR
// if not nat then
73889: LD_VAR 0 7
73893: NOT
73894: IFFALSE 73898
// continue ;
73896: GO 73863
// for j in list [ nat ] do
73898: LD_ADDR_VAR 0 5
73902: PUSH
73903: LD_VAR 0 10
73907: PUSH
73908: LD_VAR 0 7
73912: ARRAY
73913: PUSH
73914: FOR_IN
73915: IFFALSE 73956
// if GetBWeapon ( i ) = j [ 1 ] then
73917: LD_VAR 0 4
73921: PPUSH
73922: CALL_OW 269
73926: PUSH
73927: LD_VAR 0 5
73931: PUSH
73932: LD_INT 1
73934: ARRAY
73935: EQUAL
73936: IFFALSE 73954
// begin weapon := j [ 2 ] ;
73938: LD_ADDR_VAR 0 8
73942: PUSH
73943: LD_VAR 0 5
73947: PUSH
73948: LD_INT 2
73950: ARRAY
73951: ST_TO_ADDR
// break ;
73952: GO 73956
// end ;
73954: GO 73914
73956: POP
73957: POP
// if not weapon then
73958: LD_VAR 0 8
73962: NOT
73963: IFFALSE 73967
// continue ;
73965: GO 73863
// for k in factories do
73967: LD_ADDR_VAR 0 6
73971: PUSH
73972: LD_VAR 0 2
73976: PUSH
73977: FOR_IN
73978: IFFALSE 74043
// begin weapons := AvailableWeaponList ( k ) ;
73980: LD_ADDR_VAR 0 9
73984: PUSH
73985: LD_VAR 0 6
73989: PPUSH
73990: CALL_OW 478
73994: ST_TO_ADDR
// if not weapons then
73995: LD_VAR 0 9
73999: NOT
74000: IFFALSE 74004
// continue ;
74002: GO 73977
// if weapon in weapons then
74004: LD_VAR 0 8
74008: PUSH
74009: LD_VAR 0 9
74013: IN
74014: IFFALSE 74041
// begin result := [ i , weapon ] ;
74016: LD_ADDR_VAR 0 3
74020: PUSH
74021: LD_VAR 0 4
74025: PUSH
74026: LD_VAR 0 8
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: ST_TO_ADDR
// exit ;
74035: POP
74036: POP
74037: POP
74038: POP
74039: GO 74049
// end ; end ;
74041: GO 73977
74043: POP
74044: POP
// end ;
74045: GO 73863
74047: POP
74048: POP
// end ;
74049: LD_VAR 0 3
74053: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74054: LD_INT 0
74056: PPUSH
// if not side or side > 8 then
74057: LD_VAR 0 3
74061: NOT
74062: PUSH
74063: LD_VAR 0 3
74067: PUSH
74068: LD_INT 8
74070: GREATER
74071: OR
74072: IFFALSE 74076
// exit ;
74074: GO 74135
// if not range then
74076: LD_VAR 0 4
74080: NOT
74081: IFFALSE 74092
// range := - 12 ;
74083: LD_ADDR_VAR 0 4
74087: PUSH
74088: LD_INT 12
74090: NEG
74091: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74092: LD_VAR 0 1
74096: PPUSH
74097: LD_VAR 0 2
74101: PPUSH
74102: LD_VAR 0 3
74106: PPUSH
74107: LD_VAR 0 4
74111: PPUSH
74112: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74116: LD_VAR 0 1
74120: PPUSH
74121: LD_VAR 0 2
74125: PPUSH
74126: LD_VAR 0 3
74130: PPUSH
74131: CALL_OW 331
// end ;
74135: LD_VAR 0 5
74139: RET
// export function Video ( mode ) ; begin
74140: LD_INT 0
74142: PPUSH
// ingame_video = mode ;
74143: LD_ADDR_OWVAR 52
74147: PUSH
74148: LD_VAR 0 1
74152: ST_TO_ADDR
// interface_hidden = mode ;
74153: LD_ADDR_OWVAR 54
74157: PUSH
74158: LD_VAR 0 1
74162: ST_TO_ADDR
// end ;
74163: LD_VAR 0 2
74167: RET
// export function Join ( array , element ) ; begin
74168: LD_INT 0
74170: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74171: LD_ADDR_VAR 0 3
74175: PUSH
74176: LD_VAR 0 1
74180: PPUSH
74181: LD_VAR 0 1
74185: PUSH
74186: LD_INT 1
74188: PLUS
74189: PPUSH
74190: LD_VAR 0 2
74194: PPUSH
74195: CALL_OW 1
74199: ST_TO_ADDR
// end ;
74200: LD_VAR 0 3
74204: RET
// export function JoinUnion ( array , element ) ; begin
74205: LD_INT 0
74207: PPUSH
// result := array union element ;
74208: LD_ADDR_VAR 0 3
74212: PUSH
74213: LD_VAR 0 1
74217: PUSH
74218: LD_VAR 0 2
74222: UNION
74223: ST_TO_ADDR
// end ;
74224: LD_VAR 0 3
74228: RET
// export function GetBehemoths ( side ) ; begin
74229: LD_INT 0
74231: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74232: LD_ADDR_VAR 0 2
74236: PUSH
74237: LD_INT 22
74239: PUSH
74240: LD_VAR 0 1
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 31
74251: PUSH
74252: LD_INT 25
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PPUSH
74263: CALL_OW 69
74267: ST_TO_ADDR
// end ;
74268: LD_VAR 0 2
74272: RET
// export function Shuffle ( array ) ; var i , index ; begin
74273: LD_INT 0
74275: PPUSH
74276: PPUSH
74277: PPUSH
// result := [ ] ;
74278: LD_ADDR_VAR 0 2
74282: PUSH
74283: EMPTY
74284: ST_TO_ADDR
// if not array then
74285: LD_VAR 0 1
74289: NOT
74290: IFFALSE 74294
// exit ;
74292: GO 74393
// Randomize ;
74294: CALL_OW 10
// for i = array downto 1 do
74298: LD_ADDR_VAR 0 3
74302: PUSH
74303: DOUBLE
74304: LD_VAR 0 1
74308: INC
74309: ST_TO_ADDR
74310: LD_INT 1
74312: PUSH
74313: FOR_DOWNTO
74314: IFFALSE 74391
// begin index := rand ( 1 , array ) ;
74316: LD_ADDR_VAR 0 4
74320: PUSH
74321: LD_INT 1
74323: PPUSH
74324: LD_VAR 0 1
74328: PPUSH
74329: CALL_OW 12
74333: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74334: LD_ADDR_VAR 0 2
74338: PUSH
74339: LD_VAR 0 2
74343: PPUSH
74344: LD_VAR 0 2
74348: PUSH
74349: LD_INT 1
74351: PLUS
74352: PPUSH
74353: LD_VAR 0 1
74357: PUSH
74358: LD_VAR 0 4
74362: ARRAY
74363: PPUSH
74364: CALL_OW 2
74368: ST_TO_ADDR
// array := Delete ( array , index ) ;
74369: LD_ADDR_VAR 0 1
74373: PUSH
74374: LD_VAR 0 1
74378: PPUSH
74379: LD_VAR 0 4
74383: PPUSH
74384: CALL_OW 3
74388: ST_TO_ADDR
// end ;
74389: GO 74313
74391: POP
74392: POP
// end ;
74393: LD_VAR 0 2
74397: RET
// export function GetBaseMaterials ( base ) ; begin
74398: LD_INT 0
74400: PPUSH
// result := [ 0 , 0 , 0 ] ;
74401: LD_ADDR_VAR 0 2
74405: PUSH
74406: LD_INT 0
74408: PUSH
74409: LD_INT 0
74411: PUSH
74412: LD_INT 0
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: LIST
74419: ST_TO_ADDR
// if not base then
74420: LD_VAR 0 1
74424: NOT
74425: IFFALSE 74429
// exit ;
74427: GO 74478
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74429: LD_ADDR_VAR 0 2
74433: PUSH
74434: LD_VAR 0 1
74438: PPUSH
74439: LD_INT 1
74441: PPUSH
74442: CALL_OW 275
74446: PUSH
74447: LD_VAR 0 1
74451: PPUSH
74452: LD_INT 2
74454: PPUSH
74455: CALL_OW 275
74459: PUSH
74460: LD_VAR 0 1
74464: PPUSH
74465: LD_INT 3
74467: PPUSH
74468: CALL_OW 275
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: LIST
74477: ST_TO_ADDR
// end ;
74478: LD_VAR 0 2
74482: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74483: LD_INT 0
74485: PPUSH
74486: PPUSH
// result := array ;
74487: LD_ADDR_VAR 0 3
74491: PUSH
74492: LD_VAR 0 1
74496: ST_TO_ADDR
// if size > 0 then
74497: LD_VAR 0 2
74501: PUSH
74502: LD_INT 0
74504: GREATER
74505: IFFALSE 74551
// for i := array downto size do
74507: LD_ADDR_VAR 0 4
74511: PUSH
74512: DOUBLE
74513: LD_VAR 0 1
74517: INC
74518: ST_TO_ADDR
74519: LD_VAR 0 2
74523: PUSH
74524: FOR_DOWNTO
74525: IFFALSE 74549
// result := Delete ( result , result ) ;
74527: LD_ADDR_VAR 0 3
74531: PUSH
74532: LD_VAR 0 3
74536: PPUSH
74537: LD_VAR 0 3
74541: PPUSH
74542: CALL_OW 3
74546: ST_TO_ADDR
74547: GO 74524
74549: POP
74550: POP
// end ;
74551: LD_VAR 0 3
74555: RET
// export function ComExit ( unit ) ; var tmp ; begin
74556: LD_INT 0
74558: PPUSH
74559: PPUSH
// if not IsInUnit ( unit ) then
74560: LD_VAR 0 1
74564: PPUSH
74565: CALL_OW 310
74569: NOT
74570: IFFALSE 74574
// exit ;
74572: GO 74634
// tmp := IsInUnit ( unit ) ;
74574: LD_ADDR_VAR 0 3
74578: PUSH
74579: LD_VAR 0 1
74583: PPUSH
74584: CALL_OW 310
74588: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74589: LD_VAR 0 3
74593: PPUSH
74594: CALL_OW 247
74598: PUSH
74599: LD_INT 2
74601: EQUAL
74602: IFFALSE 74615
// ComExitVehicle ( unit ) else
74604: LD_VAR 0 1
74608: PPUSH
74609: CALL_OW 121
74613: GO 74624
// ComExitBuilding ( unit ) ;
74615: LD_VAR 0 1
74619: PPUSH
74620: CALL_OW 122
// result := tmp ;
74624: LD_ADDR_VAR 0 2
74628: PUSH
74629: LD_VAR 0 3
74633: ST_TO_ADDR
// end ;
74634: LD_VAR 0 2
74638: RET
// export function ComExitAll ( units ) ; var i ; begin
74639: LD_INT 0
74641: PPUSH
74642: PPUSH
// if not units then
74643: LD_VAR 0 1
74647: NOT
74648: IFFALSE 74652
// exit ;
74650: GO 74678
// for i in units do
74652: LD_ADDR_VAR 0 3
74656: PUSH
74657: LD_VAR 0 1
74661: PUSH
74662: FOR_IN
74663: IFFALSE 74676
// ComExit ( i ) ;
74665: LD_VAR 0 3
74669: PPUSH
74670: CALL 74556 0 1
74674: GO 74662
74676: POP
74677: POP
// end ;
74678: LD_VAR 0 2
74682: RET
// export function ResetHc ; begin
74683: LD_INT 0
74685: PPUSH
// InitHc ;
74686: CALL_OW 19
// hc_importance := 0 ;
74690: LD_ADDR_OWVAR 32
74694: PUSH
74695: LD_INT 0
74697: ST_TO_ADDR
// end ;
74698: LD_VAR 0 1
74702: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74703: LD_INT 0
74705: PPUSH
74706: PPUSH
74707: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74708: LD_ADDR_VAR 0 6
74712: PUSH
74713: LD_VAR 0 1
74717: PUSH
74718: LD_VAR 0 3
74722: PLUS
74723: PUSH
74724: LD_INT 2
74726: DIV
74727: ST_TO_ADDR
// if _x < 0 then
74728: LD_VAR 0 6
74732: PUSH
74733: LD_INT 0
74735: LESS
74736: IFFALSE 74753
// _x := _x * - 1 ;
74738: LD_ADDR_VAR 0 6
74742: PUSH
74743: LD_VAR 0 6
74747: PUSH
74748: LD_INT 1
74750: NEG
74751: MUL
74752: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74753: LD_ADDR_VAR 0 7
74757: PUSH
74758: LD_VAR 0 2
74762: PUSH
74763: LD_VAR 0 4
74767: PLUS
74768: PUSH
74769: LD_INT 2
74771: DIV
74772: ST_TO_ADDR
// if _y < 0 then
74773: LD_VAR 0 7
74777: PUSH
74778: LD_INT 0
74780: LESS
74781: IFFALSE 74798
// _y := _y * - 1 ;
74783: LD_ADDR_VAR 0 7
74787: PUSH
74788: LD_VAR 0 7
74792: PUSH
74793: LD_INT 1
74795: NEG
74796: MUL
74797: ST_TO_ADDR
// result := [ _x , _y ] ;
74798: LD_ADDR_VAR 0 5
74802: PUSH
74803: LD_VAR 0 6
74807: PUSH
74808: LD_VAR 0 7
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: ST_TO_ADDR
// end ;
74817: LD_VAR 0 5
74821: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74822: LD_INT 0
74824: PPUSH
74825: PPUSH
74826: PPUSH
74827: PPUSH
// task := GetTaskList ( unit ) ;
74828: LD_ADDR_VAR 0 7
74832: PUSH
74833: LD_VAR 0 1
74837: PPUSH
74838: CALL_OW 437
74842: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74843: LD_VAR 0 7
74847: NOT
74848: PUSH
74849: LD_VAR 0 1
74853: PPUSH
74854: LD_VAR 0 2
74858: PPUSH
74859: CALL_OW 308
74863: NOT
74864: AND
74865: IFFALSE 74869
// exit ;
74867: GO 74987
// if IsInArea ( unit , area ) then
74869: LD_VAR 0 1
74873: PPUSH
74874: LD_VAR 0 2
74878: PPUSH
74879: CALL_OW 308
74883: IFFALSE 74901
// begin ComMoveToArea ( unit , goAway ) ;
74885: LD_VAR 0 1
74889: PPUSH
74890: LD_VAR 0 3
74894: PPUSH
74895: CALL_OW 113
// exit ;
74899: GO 74987
// end ; if task [ 1 ] [ 1 ] <> M then
74901: LD_VAR 0 7
74905: PUSH
74906: LD_INT 1
74908: ARRAY
74909: PUSH
74910: LD_INT 1
74912: ARRAY
74913: PUSH
74914: LD_STRING M
74916: NONEQUAL
74917: IFFALSE 74921
// exit ;
74919: GO 74987
// x := task [ 1 ] [ 2 ] ;
74921: LD_ADDR_VAR 0 5
74925: PUSH
74926: LD_VAR 0 7
74930: PUSH
74931: LD_INT 1
74933: ARRAY
74934: PUSH
74935: LD_INT 2
74937: ARRAY
74938: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74939: LD_ADDR_VAR 0 6
74943: PUSH
74944: LD_VAR 0 7
74948: PUSH
74949: LD_INT 1
74951: ARRAY
74952: PUSH
74953: LD_INT 3
74955: ARRAY
74956: ST_TO_ADDR
// if InArea ( x , y , area ) then
74957: LD_VAR 0 5
74961: PPUSH
74962: LD_VAR 0 6
74966: PPUSH
74967: LD_VAR 0 2
74971: PPUSH
74972: CALL_OW 309
74976: IFFALSE 74987
// ComStop ( unit ) ;
74978: LD_VAR 0 1
74982: PPUSH
74983: CALL_OW 141
// end ;
74987: LD_VAR 0 4
74991: RET
// export function Abs ( value ) ; begin
74992: LD_INT 0
74994: PPUSH
// result := value ;
74995: LD_ADDR_VAR 0 2
74999: PUSH
75000: LD_VAR 0 1
75004: ST_TO_ADDR
// if value < 0 then
75005: LD_VAR 0 1
75009: PUSH
75010: LD_INT 0
75012: LESS
75013: IFFALSE 75030
// result := value * - 1 ;
75015: LD_ADDR_VAR 0 2
75019: PUSH
75020: LD_VAR 0 1
75024: PUSH
75025: LD_INT 1
75027: NEG
75028: MUL
75029: ST_TO_ADDR
// end ;
75030: LD_VAR 0 2
75034: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75035: LD_INT 0
75037: PPUSH
75038: PPUSH
75039: PPUSH
75040: PPUSH
75041: PPUSH
75042: PPUSH
75043: PPUSH
75044: PPUSH
// if not unit or not building then
75045: LD_VAR 0 1
75049: NOT
75050: PUSH
75051: LD_VAR 0 2
75055: NOT
75056: OR
75057: IFFALSE 75061
// exit ;
75059: GO 75287
// x := GetX ( building ) ;
75061: LD_ADDR_VAR 0 4
75065: PUSH
75066: LD_VAR 0 2
75070: PPUSH
75071: CALL_OW 250
75075: ST_TO_ADDR
// y := GetY ( building ) ;
75076: LD_ADDR_VAR 0 6
75080: PUSH
75081: LD_VAR 0 2
75085: PPUSH
75086: CALL_OW 251
75090: ST_TO_ADDR
// d := GetDir ( building ) ;
75091: LD_ADDR_VAR 0 8
75095: PUSH
75096: LD_VAR 0 2
75100: PPUSH
75101: CALL_OW 254
75105: ST_TO_ADDR
// r := 4 ;
75106: LD_ADDR_VAR 0 9
75110: PUSH
75111: LD_INT 4
75113: ST_TO_ADDR
// for i := 1 to 5 do
75114: LD_ADDR_VAR 0 10
75118: PUSH
75119: DOUBLE
75120: LD_INT 1
75122: DEC
75123: ST_TO_ADDR
75124: LD_INT 5
75126: PUSH
75127: FOR_TO
75128: IFFALSE 75285
// begin _x := ShiftX ( x , d , r + i ) ;
75130: LD_ADDR_VAR 0 5
75134: PUSH
75135: LD_VAR 0 4
75139: PPUSH
75140: LD_VAR 0 8
75144: PPUSH
75145: LD_VAR 0 9
75149: PUSH
75150: LD_VAR 0 10
75154: PLUS
75155: PPUSH
75156: CALL_OW 272
75160: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75161: LD_ADDR_VAR 0 7
75165: PUSH
75166: LD_VAR 0 6
75170: PPUSH
75171: LD_VAR 0 8
75175: PPUSH
75176: LD_VAR 0 9
75180: PUSH
75181: LD_VAR 0 10
75185: PLUS
75186: PPUSH
75187: CALL_OW 273
75191: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75192: LD_VAR 0 5
75196: PPUSH
75197: LD_VAR 0 7
75201: PPUSH
75202: CALL_OW 488
75206: PUSH
75207: LD_VAR 0 5
75211: PPUSH
75212: LD_VAR 0 7
75216: PPUSH
75217: CALL_OW 428
75221: PPUSH
75222: CALL_OW 247
75226: PUSH
75227: LD_INT 3
75229: PUSH
75230: LD_INT 2
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: IN
75237: NOT
75238: AND
75239: IFFALSE 75283
// begin ComMoveXY ( unit , _x , _y ) ;
75241: LD_VAR 0 1
75245: PPUSH
75246: LD_VAR 0 5
75250: PPUSH
75251: LD_VAR 0 7
75255: PPUSH
75256: CALL_OW 111
// result := [ _x , _y ] ;
75260: LD_ADDR_VAR 0 3
75264: PUSH
75265: LD_VAR 0 5
75269: PUSH
75270: LD_VAR 0 7
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: ST_TO_ADDR
// exit ;
75279: POP
75280: POP
75281: GO 75287
// end ; end ;
75283: GO 75127
75285: POP
75286: POP
// end ;
75287: LD_VAR 0 3
75291: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75292: LD_INT 0
75294: PPUSH
75295: PPUSH
75296: PPUSH
// result := 0 ;
75297: LD_ADDR_VAR 0 3
75301: PUSH
75302: LD_INT 0
75304: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75305: LD_VAR 0 1
75309: PUSH
75310: LD_INT 0
75312: LESS
75313: PUSH
75314: LD_VAR 0 1
75318: PUSH
75319: LD_INT 8
75321: GREATER
75322: OR
75323: PUSH
75324: LD_VAR 0 2
75328: PUSH
75329: LD_INT 0
75331: LESS
75332: OR
75333: PUSH
75334: LD_VAR 0 2
75338: PUSH
75339: LD_INT 8
75341: GREATER
75342: OR
75343: IFFALSE 75347
// exit ;
75345: GO 75422
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75347: LD_ADDR_VAR 0 4
75351: PUSH
75352: LD_INT 22
75354: PUSH
75355: LD_VAR 0 2
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PPUSH
75364: CALL_OW 69
75368: PUSH
75369: FOR_IN
75370: IFFALSE 75420
// begin un := UnitShoot ( i ) ;
75372: LD_ADDR_VAR 0 5
75376: PUSH
75377: LD_VAR 0 4
75381: PPUSH
75382: CALL_OW 504
75386: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75387: LD_VAR 0 5
75391: PPUSH
75392: CALL_OW 255
75396: PUSH
75397: LD_VAR 0 1
75401: EQUAL
75402: IFFALSE 75418
// begin result := un ;
75404: LD_ADDR_VAR 0 3
75408: PUSH
75409: LD_VAR 0 5
75413: ST_TO_ADDR
// exit ;
75414: POP
75415: POP
75416: GO 75422
// end ; end ;
75418: GO 75369
75420: POP
75421: POP
// end ;
75422: LD_VAR 0 3
75426: RET
// export function GetCargoBay ( units ) ; begin
75427: LD_INT 0
75429: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75430: LD_ADDR_VAR 0 2
75434: PUSH
75435: LD_VAR 0 1
75439: PPUSH
75440: LD_INT 2
75442: PUSH
75443: LD_INT 34
75445: PUSH
75446: LD_INT 12
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PUSH
75453: LD_INT 34
75455: PUSH
75456: LD_INT 51
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 34
75465: PUSH
75466: LD_INT 32
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: PUSH
75473: LD_INT 34
75475: PUSH
75476: LD_EXP 53
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: PPUSH
75492: CALL_OW 72
75496: ST_TO_ADDR
// end ;
75497: LD_VAR 0 2
75501: RET
// export function Negate ( value ) ; begin
75502: LD_INT 0
75504: PPUSH
// result := not value ;
75505: LD_ADDR_VAR 0 2
75509: PUSH
75510: LD_VAR 0 1
75514: NOT
75515: ST_TO_ADDR
// end ;
75516: LD_VAR 0 2
75520: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
75521: LD_INT 0
75523: PPUSH
// if x1 = x2 then
75524: LD_VAR 0 1
75528: PUSH
75529: LD_VAR 0 3
75533: EQUAL
75534: IFFALSE 75568
// begin if y1 > y2 then
75536: LD_VAR 0 2
75540: PUSH
75541: LD_VAR 0 4
75545: GREATER
75546: IFFALSE 75558
// result := 0 else
75548: LD_ADDR_VAR 0 5
75552: PUSH
75553: LD_INT 0
75555: ST_TO_ADDR
75556: GO 75566
// result := 3 ;
75558: LD_ADDR_VAR 0 5
75562: PUSH
75563: LD_INT 3
75565: ST_TO_ADDR
// exit ;
75566: GO 75654
// end ; if y1 = y2 then
75568: LD_VAR 0 2
75572: PUSH
75573: LD_VAR 0 4
75577: EQUAL
75578: IFFALSE 75612
// begin if x1 > x2 then
75580: LD_VAR 0 1
75584: PUSH
75585: LD_VAR 0 3
75589: GREATER
75590: IFFALSE 75602
// result := 1 else
75592: LD_ADDR_VAR 0 5
75596: PUSH
75597: LD_INT 1
75599: ST_TO_ADDR
75600: GO 75610
// result := 4 ;
75602: LD_ADDR_VAR 0 5
75606: PUSH
75607: LD_INT 4
75609: ST_TO_ADDR
// exit ;
75610: GO 75654
// end ; if x1 > x2 and y1 > y2 then
75612: LD_VAR 0 1
75616: PUSH
75617: LD_VAR 0 3
75621: GREATER
75622: PUSH
75623: LD_VAR 0 2
75627: PUSH
75628: LD_VAR 0 4
75632: GREATER
75633: AND
75634: IFFALSE 75646
// result := 2 else
75636: LD_ADDR_VAR 0 5
75640: PUSH
75641: LD_INT 2
75643: ST_TO_ADDR
75644: GO 75654
// result := 5 ;
75646: LD_ADDR_VAR 0 5
75650: PUSH
75651: LD_INT 5
75653: ST_TO_ADDR
// end ;
75654: LD_VAR 0 5
75658: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75659: LD_INT 0
75661: PPUSH
75662: PPUSH
// if not driver or not IsInUnit ( driver ) then
75663: LD_VAR 0 1
75667: NOT
75668: PUSH
75669: LD_VAR 0 1
75673: PPUSH
75674: CALL_OW 310
75678: NOT
75679: OR
75680: IFFALSE 75684
// exit ;
75682: GO 75774
// vehicle := IsInUnit ( driver ) ;
75684: LD_ADDR_VAR 0 3
75688: PUSH
75689: LD_VAR 0 1
75693: PPUSH
75694: CALL_OW 310
75698: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75699: LD_VAR 0 1
75703: PPUSH
75704: LD_STRING \
75706: PUSH
75707: LD_INT 0
75709: PUSH
75710: LD_INT 0
75712: PUSH
75713: LD_INT 0
75715: PUSH
75716: LD_INT 0
75718: PUSH
75719: LD_INT 0
75721: PUSH
75722: LD_INT 0
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: PUSH
75734: LD_STRING E
75736: PUSH
75737: LD_INT 0
75739: PUSH
75740: LD_INT 0
75742: PUSH
75743: LD_VAR 0 3
75747: PUSH
75748: LD_INT 0
75750: PUSH
75751: LD_INT 0
75753: PUSH
75754: LD_INT 0
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PPUSH
75770: CALL_OW 446
// end ;
75774: LD_VAR 0 2
75778: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75779: LD_INT 0
75781: PPUSH
75782: PPUSH
// if not driver or not IsInUnit ( driver ) then
75783: LD_VAR 0 1
75787: NOT
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 310
75798: NOT
75799: OR
75800: IFFALSE 75804
// exit ;
75802: GO 75894
// vehicle := IsInUnit ( driver ) ;
75804: LD_ADDR_VAR 0 3
75808: PUSH
75809: LD_VAR 0 1
75813: PPUSH
75814: CALL_OW 310
75818: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75819: LD_VAR 0 1
75823: PPUSH
75824: LD_STRING \
75826: PUSH
75827: LD_INT 0
75829: PUSH
75830: LD_INT 0
75832: PUSH
75833: LD_INT 0
75835: PUSH
75836: LD_INT 0
75838: PUSH
75839: LD_INT 0
75841: PUSH
75842: LD_INT 0
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: PUSH
75854: LD_STRING E
75856: PUSH
75857: LD_INT 0
75859: PUSH
75860: LD_INT 0
75862: PUSH
75863: LD_VAR 0 3
75867: PUSH
75868: LD_INT 0
75870: PUSH
75871: LD_INT 0
75873: PUSH
75874: LD_INT 0
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: PPUSH
75890: CALL_OW 447
// end ;
75894: LD_VAR 0 2
75898: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75899: LD_INT 0
75901: PPUSH
75902: PPUSH
75903: PPUSH
// tmp := [ ] ;
75904: LD_ADDR_VAR 0 5
75908: PUSH
75909: EMPTY
75910: ST_TO_ADDR
// for i in units do
75911: LD_ADDR_VAR 0 4
75915: PUSH
75916: LD_VAR 0 1
75920: PUSH
75921: FOR_IN
75922: IFFALSE 75960
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75924: LD_ADDR_VAR 0 5
75928: PUSH
75929: LD_VAR 0 5
75933: PPUSH
75934: LD_VAR 0 5
75938: PUSH
75939: LD_INT 1
75941: PLUS
75942: PPUSH
75943: LD_VAR 0 4
75947: PPUSH
75948: CALL_OW 256
75952: PPUSH
75953: CALL_OW 2
75957: ST_TO_ADDR
75958: GO 75921
75960: POP
75961: POP
// if not tmp then
75962: LD_VAR 0 5
75966: NOT
75967: IFFALSE 75971
// exit ;
75969: GO 76019
// if asc then
75971: LD_VAR 0 2
75975: IFFALSE 75999
// result := SortListByListAsc ( units , tmp ) else
75977: LD_ADDR_VAR 0 3
75981: PUSH
75982: LD_VAR 0 1
75986: PPUSH
75987: LD_VAR 0 5
75991: PPUSH
75992: CALL_OW 76
75996: ST_TO_ADDR
75997: GO 76019
// result := SortListByListDesc ( units , tmp ) ;
75999: LD_ADDR_VAR 0 3
76003: PUSH
76004: LD_VAR 0 1
76008: PPUSH
76009: LD_VAR 0 5
76013: PPUSH
76014: CALL_OW 77
76018: ST_TO_ADDR
// end ;
76019: LD_VAR 0 3
76023: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76024: LD_INT 0
76026: PPUSH
76027: PPUSH
// task := GetTaskList ( mech ) ;
76028: LD_ADDR_VAR 0 4
76032: PUSH
76033: LD_VAR 0 1
76037: PPUSH
76038: CALL_OW 437
76042: ST_TO_ADDR
// if not task then
76043: LD_VAR 0 4
76047: NOT
76048: IFFALSE 76052
// exit ;
76050: GO 76094
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76052: LD_ADDR_VAR 0 3
76056: PUSH
76057: LD_VAR 0 4
76061: PUSH
76062: LD_INT 1
76064: ARRAY
76065: PUSH
76066: LD_INT 1
76068: ARRAY
76069: PUSH
76070: LD_STRING r
76072: EQUAL
76073: PUSH
76074: LD_VAR 0 4
76078: PUSH
76079: LD_INT 1
76081: ARRAY
76082: PUSH
76083: LD_INT 4
76085: ARRAY
76086: PUSH
76087: LD_VAR 0 2
76091: EQUAL
76092: AND
76093: ST_TO_ADDR
// end ;
76094: LD_VAR 0 3
76098: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76099: LD_INT 0
76101: PPUSH
// SetDir ( unit , d ) ;
76102: LD_VAR 0 1
76106: PPUSH
76107: LD_VAR 0 4
76111: PPUSH
76112: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76116: LD_VAR 0 1
76120: PPUSH
76121: LD_VAR 0 2
76125: PPUSH
76126: LD_VAR 0 3
76130: PPUSH
76131: LD_VAR 0 5
76135: PPUSH
76136: CALL_OW 48
// end ;
76140: LD_VAR 0 6
76144: RET
// export function ToNaturalNumber ( number ) ; begin
76145: LD_INT 0
76147: PPUSH
// result := number div 1 ;
76148: LD_ADDR_VAR 0 2
76152: PUSH
76153: LD_VAR 0 1
76157: PUSH
76158: LD_INT 1
76160: DIV
76161: ST_TO_ADDR
// if number < 0 then
76162: LD_VAR 0 1
76166: PUSH
76167: LD_INT 0
76169: LESS
76170: IFFALSE 76180
// result := 0 ;
76172: LD_ADDR_VAR 0 2
76176: PUSH
76177: LD_INT 0
76179: ST_TO_ADDR
// end ;
76180: LD_VAR 0 2
76184: RET
// export function SortByClass ( units , class ) ; var un ; begin
76185: LD_INT 0
76187: PPUSH
76188: PPUSH
// if not units or not class then
76189: LD_VAR 0 1
76193: NOT
76194: PUSH
76195: LD_VAR 0 2
76199: NOT
76200: OR
76201: IFFALSE 76205
// exit ;
76203: GO 76300
// result := [ ] ;
76205: LD_ADDR_VAR 0 3
76209: PUSH
76210: EMPTY
76211: ST_TO_ADDR
// for un in units do
76212: LD_ADDR_VAR 0 4
76216: PUSH
76217: LD_VAR 0 1
76221: PUSH
76222: FOR_IN
76223: IFFALSE 76298
// if GetClass ( un ) = class then
76225: LD_VAR 0 4
76229: PPUSH
76230: CALL_OW 257
76234: PUSH
76235: LD_VAR 0 2
76239: EQUAL
76240: IFFALSE 76267
// result := Insert ( result , 1 , un ) else
76242: LD_ADDR_VAR 0 3
76246: PUSH
76247: LD_VAR 0 3
76251: PPUSH
76252: LD_INT 1
76254: PPUSH
76255: LD_VAR 0 4
76259: PPUSH
76260: CALL_OW 2
76264: ST_TO_ADDR
76265: GO 76296
// result := Replace ( result , result + 1 , un ) ;
76267: LD_ADDR_VAR 0 3
76271: PUSH
76272: LD_VAR 0 3
76276: PPUSH
76277: LD_VAR 0 3
76281: PUSH
76282: LD_INT 1
76284: PLUS
76285: PPUSH
76286: LD_VAR 0 4
76290: PPUSH
76291: CALL_OW 1
76295: ST_TO_ADDR
76296: GO 76222
76298: POP
76299: POP
// end ;
76300: LD_VAR 0 3
76304: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76305: LD_INT 0
76307: PPUSH
76308: PPUSH
76309: PPUSH
76310: PPUSH
76311: PPUSH
76312: PPUSH
76313: PPUSH
// result := [ ] ;
76314: LD_ADDR_VAR 0 4
76318: PUSH
76319: EMPTY
76320: ST_TO_ADDR
// if x - r < 0 then
76321: LD_VAR 0 1
76325: PUSH
76326: LD_VAR 0 3
76330: MINUS
76331: PUSH
76332: LD_INT 0
76334: LESS
76335: IFFALSE 76347
// min_x := 0 else
76337: LD_ADDR_VAR 0 8
76341: PUSH
76342: LD_INT 0
76344: ST_TO_ADDR
76345: GO 76363
// min_x := x - r ;
76347: LD_ADDR_VAR 0 8
76351: PUSH
76352: LD_VAR 0 1
76356: PUSH
76357: LD_VAR 0 3
76361: MINUS
76362: ST_TO_ADDR
// if y - r < 0 then
76363: LD_VAR 0 2
76367: PUSH
76368: LD_VAR 0 3
76372: MINUS
76373: PUSH
76374: LD_INT 0
76376: LESS
76377: IFFALSE 76389
// min_y := 0 else
76379: LD_ADDR_VAR 0 7
76383: PUSH
76384: LD_INT 0
76386: ST_TO_ADDR
76387: GO 76405
// min_y := y - r ;
76389: LD_ADDR_VAR 0 7
76393: PUSH
76394: LD_VAR 0 2
76398: PUSH
76399: LD_VAR 0 3
76403: MINUS
76404: ST_TO_ADDR
// max_x := x + r ;
76405: LD_ADDR_VAR 0 9
76409: PUSH
76410: LD_VAR 0 1
76414: PUSH
76415: LD_VAR 0 3
76419: PLUS
76420: ST_TO_ADDR
// max_y := y + r ;
76421: LD_ADDR_VAR 0 10
76425: PUSH
76426: LD_VAR 0 2
76430: PUSH
76431: LD_VAR 0 3
76435: PLUS
76436: ST_TO_ADDR
// for _x = min_x to max_x do
76437: LD_ADDR_VAR 0 5
76441: PUSH
76442: DOUBLE
76443: LD_VAR 0 8
76447: DEC
76448: ST_TO_ADDR
76449: LD_VAR 0 9
76453: PUSH
76454: FOR_TO
76455: IFFALSE 76556
// for _y = min_y to max_y do
76457: LD_ADDR_VAR 0 6
76461: PUSH
76462: DOUBLE
76463: LD_VAR 0 7
76467: DEC
76468: ST_TO_ADDR
76469: LD_VAR 0 10
76473: PUSH
76474: FOR_TO
76475: IFFALSE 76552
// begin if not ValidHex ( _x , _y ) then
76477: LD_VAR 0 5
76481: PPUSH
76482: LD_VAR 0 6
76486: PPUSH
76487: CALL_OW 488
76491: NOT
76492: IFFALSE 76496
// continue ;
76494: GO 76474
// if GetResourceTypeXY ( _x , _y ) then
76496: LD_VAR 0 5
76500: PPUSH
76501: LD_VAR 0 6
76505: PPUSH
76506: CALL_OW 283
76510: IFFALSE 76550
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76512: LD_ADDR_VAR 0 4
76516: PUSH
76517: LD_VAR 0 4
76521: PPUSH
76522: LD_VAR 0 4
76526: PUSH
76527: LD_INT 1
76529: PLUS
76530: PPUSH
76531: LD_VAR 0 5
76535: PUSH
76536: LD_VAR 0 6
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: PPUSH
76545: CALL_OW 1
76549: ST_TO_ADDR
// end ;
76550: GO 76474
76552: POP
76553: POP
76554: GO 76454
76556: POP
76557: POP
// end ;
76558: LD_VAR 0 4
76562: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
76563: LD_INT 0
76565: PPUSH
76566: PPUSH
76567: PPUSH
76568: PPUSH
76569: PPUSH
76570: PPUSH
// if not units then
76571: LD_VAR 0 1
76575: NOT
76576: IFFALSE 76580
// exit ;
76578: GO 76981
// result := UnitFilter ( units , [ f_ok ] ) ;
76580: LD_ADDR_VAR 0 3
76584: PUSH
76585: LD_VAR 0 1
76589: PPUSH
76590: LD_INT 50
76592: PUSH
76593: EMPTY
76594: LIST
76595: PPUSH
76596: CALL_OW 72
76600: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76601: LD_ADDR_VAR 0 7
76605: PUSH
76606: LD_VAR 0 1
76610: PUSH
76611: LD_INT 1
76613: ARRAY
76614: PPUSH
76615: CALL_OW 255
76619: ST_TO_ADDR
// if not result then
76620: LD_VAR 0 3
76624: NOT
76625: IFFALSE 76629
// exit ;
76627: GO 76981
// for i in result do
76629: LD_ADDR_VAR 0 4
76633: PUSH
76634: LD_VAR 0 3
76638: PUSH
76639: FOR_IN
76640: IFFALSE 76979
// begin tag := GetTag ( i ) + 1 ;
76642: LD_ADDR_VAR 0 8
76646: PUSH
76647: LD_VAR 0 4
76651: PPUSH
76652: CALL_OW 110
76656: PUSH
76657: LD_INT 1
76659: PLUS
76660: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76661: LD_ADDR_VAR 0 6
76665: PUSH
76666: LD_VAR 0 4
76670: PPUSH
76671: CALL_OW 250
76675: PPUSH
76676: LD_VAR 0 4
76680: PPUSH
76681: CALL_OW 251
76685: PPUSH
76686: LD_INT 6
76688: PPUSH
76689: CALL 76305 0 3
76693: ST_TO_ADDR
// if cr then
76694: LD_VAR 0 6
76698: IFFALSE 76737
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76700: LD_VAR 0 4
76704: PPUSH
76705: LD_VAR 0 6
76709: PUSH
76710: LD_INT 1
76712: ARRAY
76713: PUSH
76714: LD_INT 1
76716: ARRAY
76717: PPUSH
76718: LD_VAR 0 6
76722: PUSH
76723: LD_INT 1
76725: ARRAY
76726: PUSH
76727: LD_INT 2
76729: ARRAY
76730: PPUSH
76731: CALL_OW 116
76735: GO 76977
// if path > tag then
76737: LD_VAR 0 2
76741: PUSH
76742: LD_VAR 0 8
76746: GREATER
76747: IFFALSE 76925
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76749: LD_ADDR_VAR 0 5
76753: PUSH
76754: LD_INT 81
76756: PUSH
76757: LD_VAR 0 7
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PUSH
76766: LD_INT 91
76768: PUSH
76769: LD_VAR 0 4
76773: PUSH
76774: LD_INT 12
76776: PUSH
76777: EMPTY
76778: LIST
76779: LIST
76780: LIST
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PPUSH
76786: CALL_OW 69
76790: ST_TO_ADDR
// if enemy then
76791: LD_VAR 0 5
76795: IFFALSE 76823
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76797: LD_VAR 0 4
76801: PPUSH
76802: LD_VAR 0 5
76806: PPUSH
76807: LD_VAR 0 4
76811: PPUSH
76812: CALL_OW 74
76816: PPUSH
76817: CALL_OW 115
76821: GO 76923
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76823: LD_VAR 0 4
76827: PPUSH
76828: LD_VAR 0 2
76832: PUSH
76833: LD_VAR 0 8
76837: ARRAY
76838: PUSH
76839: LD_INT 1
76841: ARRAY
76842: PPUSH
76843: LD_VAR 0 2
76847: PUSH
76848: LD_VAR 0 8
76852: ARRAY
76853: PUSH
76854: LD_INT 2
76856: ARRAY
76857: PPUSH
76858: CALL_OW 297
76862: PUSH
76863: LD_INT 6
76865: GREATER
76866: IFFALSE 76909
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76868: LD_VAR 0 4
76872: PPUSH
76873: LD_VAR 0 2
76877: PUSH
76878: LD_VAR 0 8
76882: ARRAY
76883: PUSH
76884: LD_INT 1
76886: ARRAY
76887: PPUSH
76888: LD_VAR 0 2
76892: PUSH
76893: LD_VAR 0 8
76897: ARRAY
76898: PUSH
76899: LD_INT 2
76901: ARRAY
76902: PPUSH
76903: CALL_OW 114
76907: GO 76923
// SetTag ( i , tag ) ;
76909: LD_VAR 0 4
76913: PPUSH
76914: LD_VAR 0 8
76918: PPUSH
76919: CALL_OW 109
// end else
76923: GO 76977
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76925: LD_ADDR_VAR 0 5
76929: PUSH
76930: LD_INT 81
76932: PUSH
76933: LD_VAR 0 7
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PPUSH
76942: CALL_OW 69
76946: ST_TO_ADDR
// if enemy then
76947: LD_VAR 0 5
76951: IFFALSE 76977
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76953: LD_VAR 0 4
76957: PPUSH
76958: LD_VAR 0 5
76962: PPUSH
76963: LD_VAR 0 4
76967: PPUSH
76968: CALL_OW 74
76972: PPUSH
76973: CALL_OW 115
// end ; end ;
76977: GO 76639
76979: POP
76980: POP
// end ; end_of_file
76981: LD_VAR 0 3
76985: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76986: LD_VAR 0 1
76990: PUSH
76991: LD_INT 200
76993: DOUBLE
76994: GREATEREQUAL
76995: IFFALSE 77003
76997: LD_INT 299
76999: DOUBLE
77000: LESSEQUAL
77001: IFTRUE 77005
77003: GO 77037
77005: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77006: LD_VAR 0 1
77010: PPUSH
77011: LD_VAR 0 2
77015: PPUSH
77016: LD_VAR 0 3
77020: PPUSH
77021: LD_VAR 0 4
77025: PPUSH
77026: LD_VAR 0 5
77030: PPUSH
77031: CALL 33548 0 5
77035: GO 77114
77037: LD_INT 300
77039: DOUBLE
77040: GREATEREQUAL
77041: IFFALSE 77049
77043: LD_INT 399
77045: DOUBLE
77046: LESSEQUAL
77047: IFTRUE 77051
77049: GO 77113
77051: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77052: LD_VAR 0 1
77056: PPUSH
77057: LD_VAR 0 2
77061: PPUSH
77062: LD_VAR 0 3
77066: PPUSH
77067: LD_VAR 0 4
77071: PPUSH
77072: LD_VAR 0 5
77076: PPUSH
77077: LD_VAR 0 6
77081: PPUSH
77082: LD_VAR 0 7
77086: PPUSH
77087: LD_VAR 0 8
77091: PPUSH
77092: LD_VAR 0 9
77096: PPUSH
77097: LD_VAR 0 10
77101: PPUSH
77102: LD_VAR 0 11
77106: PPUSH
77107: CALL 31446 0 11
77111: GO 77114
77113: POP
// end ;
77114: PPOPN 11
77116: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77117: LD_VAR 0 1
77121: PPUSH
77122: LD_VAR 0 2
77126: PPUSH
77127: LD_VAR 0 3
77131: PPUSH
77132: LD_VAR 0 4
77136: PPUSH
77137: LD_VAR 0 5
77141: PPUSH
77142: CALL 33540 0 5
// end ; end_of_file
77146: PPOPN 5
77148: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77149: LD_VAR 0 1
77153: PPUSH
77154: LD_VAR 0 2
77158: PPUSH
77159: LD_VAR 0 3
77163: PPUSH
77164: LD_VAR 0 4
77168: PPUSH
77169: LD_VAR 0 5
77173: PPUSH
77174: LD_VAR 0 6
77178: PPUSH
77179: CALL 19641 0 6
// end ;
77183: PPOPN 6
77185: END
