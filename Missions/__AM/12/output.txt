// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// PrepareNature ;
 198: CALL 15936 0 0
// PrepareDifficulty ;
 202: CALL 12350 0 0
// PrepareVehicles ;
 206: CALL 1665 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 210: LD_INT 4
 212: PPUSH
 213: LD_INT 0
 215: PPUSH
 216: LD_INT 1
 218: PPUSH
 219: LD_INT 0
 221: PPUSH
 222: CALL 1239 0 4
// PrepareAmericanHeroes ;
 226: CALL 564 0 0
// PrepareRussianCommander ;
 230: CALL 3041 0 0
// PrepareWestBase ;
 234: CALL 3553 0 0
// PrepareEastBase ;
 238: CALL 3113 0 0
// PrepareOtherRussians ;
 242: CALL 3665 0 0
// end ;
 246: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 247: LD_EXP 48
 251: PUSH
 252: LD_INT 1
 254: EQUAL
 255: IFFALSE 561
 257: GO 259
 259: DISABLE
 260: LD_INT 0
 262: PPUSH
// begin enable ;
 263: ENABLE
// fogoff ( true ) ;
 264: LD_INT 1
 266: PPUSH
 267: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 21
 288: PUSH
 289: LD_INT 1
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: PUSH
 305: FOR_IN
 306: IFFALSE 322
// SetLives ( i , 1000 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: LD_INT 1000
 315: PPUSH
 316: CALL_OW 234
 320: GO 305
 322: POP
 323: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 324: LD_ADDR_VAR 0 1
 328: PUSH
 329: LD_INT 22
 331: PUSH
 332: LD_INT 1
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: LD_INT 2
 341: PUSH
 342: LD_INT 30
 344: PUSH
 345: LD_INT 0
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PUSH
 352: LD_INT 30
 354: PUSH
 355: LD_INT 1
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: LIST
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PPUSH
 371: CALL_OW 69
 375: PUSH
 376: FOR_IN
 377: IFFALSE 401
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 379: LD_VAR 0 1
 383: PPUSH
 384: CALL_OW 274
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 9999
 394: PPUSH
 395: CALL_OW 277
 399: GO 376
 401: POP
 402: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 403: LD_ADDR_VAR 0 1
 407: PUSH
 408: LD_INT 22
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: LD_INT 30
 423: PUSH
 424: LD_INT 0
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PUSH
 431: LD_INT 30
 433: PUSH
 434: LD_INT 1
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: FOR_IN
 456: IFFALSE 480
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 458: LD_VAR 0 1
 462: PPUSH
 463: CALL_OW 274
 467: PPUSH
 468: LD_INT 2
 470: PPUSH
 471: LD_INT 9999
 473: PPUSH
 474: CALL_OW 277
 478: GO 455
 480: POP
 481: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 482: LD_ADDR_VAR 0 1
 486: PUSH
 487: LD_INT 22
 489: PUSH
 490: LD_INT 1
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 2
 499: PUSH
 500: LD_INT 30
 502: PUSH
 503: LD_INT 0
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: LD_INT 30
 512: PUSH
 513: LD_INT 1
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PPUSH
 529: CALL_OW 69
 533: PUSH
 534: FOR_IN
 535: IFFALSE 559
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 537: LD_VAR 0 1
 541: PPUSH
 542: CALL_OW 274
 546: PPUSH
 547: LD_INT 3
 549: PPUSH
 550: LD_INT 9999
 552: PPUSH
 553: CALL_OW 277
 557: GO 534
 559: POP
 560: POP
// end ; end_of_file
 561: PPOPN 1
 563: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 564: LD_INT 0
 566: PPUSH
 567: PPUSH
 568: PPUSH
// uc_side = 1 ;
 569: LD_ADDR_OWVAR 20
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_STRING 11c_others
 584: PPUSH
 585: CALL_OW 31
 589: PUSH
 590: LD_STRING 11_others
 592: PPUSH
 593: CALL_OW 31
 597: UNION
 598: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING 11_JMM
 606: PPUSH
 607: LD_INT 1
 609: PPUSH
 610: CALL 12067 0 2
 614: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 615: LD_EXP 1
 619: PPUSH
 620: LD_INT 1
 622: PPUSH
 623: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 22
 634: PUSH
 635: LD_INT 1
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 21
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 58
 654: PUSH
 655: EMPTY
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: PUSH
 668: LD_INT 1
 670: ARRAY
 671: PPUSH
 672: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 676: LD_STRING 11_Lisa
 678: PPUSH
 679: CALL_OW 28
 683: PUSH
 684: LD_INT 1
 686: EQUAL
 687: IFFALSE 734
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 689: LD_ADDR_EXP 2
 693: PUSH
 694: LD_STRING 11_Lisa
 696: PPUSH
 697: LD_INT 1
 699: PPUSH
 700: CALL 12067 0 2
 704: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 705: LD_EXP 2
 709: PPUSH
 710: LD_INT 1
 712: PPUSH
 713: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 717: LD_EXP 2
 721: PPUSH
 722: LD_INT 4
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: CALL_OW 49
// end else
 732: GO 750
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 734: LD_INT 4
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 0
 745: PPUSH
 746: CALL 1239 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 750: LD_STRING 11_Donaldson
 752: PPUSH
 753: CALL_OW 28
 757: PUSH
 758: LD_INT 1
 760: EQUAL
 761: IFFALSE 808
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 763: LD_ADDR_EXP 3
 767: PUSH
 768: LD_STRING 11_Donaldson
 770: PPUSH
 771: LD_INT 1
 773: PPUSH
 774: CALL 12067 0 2
 778: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 779: LD_EXP 3
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 791: LD_EXP 3
 795: PPUSH
 796: LD_INT 4
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end else
 806: GO 824
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 808: LD_INT 4
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: LD_INT 1
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL 1239 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 824: LD_STRING 11_Cyrus
 826: PPUSH
 827: CALL_OW 28
 831: PUSH
 832: LD_INT 1
 834: EQUAL
 835: IFFALSE 882
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 837: LD_ADDR_EXP 5
 841: PUSH
 842: LD_STRING 11_Cyrus
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL 12067 0 2
 852: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 853: LD_EXP 5
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 865: LD_EXP 5
 869: PPUSH
 870: LD_INT 4
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
// end else
 880: GO 898
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 882: LD_INT 4
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_INT 1
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL 1239 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 898: LD_STRING 11_Denis
 900: PPUSH
 901: CALL_OW 28
 905: PUSH
 906: LD_INT 1
 908: EQUAL
 909: IFFALSE 956
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 911: LD_ADDR_EXP 6
 915: PUSH
 916: LD_STRING 11_Denis
 918: PPUSH
 919: LD_INT 1
 921: PPUSH
 922: CALL 12067 0 2
 926: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 927: LD_EXP 6
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 939: LD_EXP 6
 943: PPUSH
 944: LD_INT 4
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// end else
 954: GO 972
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 956: LD_INT 4
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: LD_INT 1
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL 1239 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 972: LD_STRING 11_Frank
 974: PPUSH
 975: CALL_OW 28
 979: PUSH
 980: LD_INT 1
 982: EQUAL
 983: IFFALSE 1030
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 985: LD_ADDR_EXP 12
 989: PUSH
 990: LD_STRING 11_Frank
 992: PPUSH
 993: LD_INT 1
 995: PPUSH
 996: CALL 12067 0 2
1000: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1001: LD_EXP 12
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1013: LD_EXP 12
1017: PPUSH
1018: LD_INT 4
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 49
// end else
1028: GO 1046
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1030: LD_INT 4
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: LD_INT 1
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: CALL 1239 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1046: LD_STRING 11_Cornell
1048: PPUSH
1049: CALL_OW 28
1053: PUSH
1054: LD_INT 1
1056: EQUAL
1057: IFFALSE 1104
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1059: LD_ADDR_EXP 10
1063: PUSH
1064: LD_STRING 11_Cornell
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: CALL 12067 0 2
1074: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1075: LD_EXP 10
1079: PPUSH
1080: LD_INT 1
1082: PPUSH
1083: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1087: LD_EXP 10
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// end else
1102: GO 1120
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: LD_INT 1
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL 1239 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_EXP 14
1129: PPUSH
1130: LD_INT 26
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: CALL_OW 72
1144: ST_TO_ADDR
// if not tmp then
1145: LD_VAR 0 2
1149: NOT
1150: IFFALSE 1179
// begin PrepareSoldier ( sex_male , 8 ) ;
1152: LD_INT 1
1154: PPUSH
1155: LD_INT 8
1157: PPUSH
1158: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_INT 4
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// end else
1177: GO 1218
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1179: LD_VAR 0 2
1183: PUSH
1184: LD_INT 1
1186: ARRAY
1187: PPUSH
1188: LD_INT 4
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1198: LD_ADDR_EXP 14
1202: PUSH
1203: LD_EXP 14
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_INT 1
1215: ARRAY
1216: DIFF
1217: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1218: LD_ADDR_EXP 22
1222: PUSH
1223: LD_STRING Powell
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL 12067 0 2
1233: ST_TO_ADDR
// end ;
1234: LD_VAR 0 1
1238: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
1245: PPUSH
// if mech = 1 then
1246: LD_VAR 0 4
1250: PUSH
1251: LD_INT 1
1253: EQUAL
1254: IFFALSE 1491
// begin if others11 > 0 then
1256: LD_EXP 14
1260: PUSH
1261: LD_INT 0
1263: GREATER
1264: IFFALSE 1431
// begin for i := 1 to others11 - 1 do
1266: LD_ADDR_VAR 0 6
1270: PUSH
1271: DOUBLE
1272: LD_INT 1
1274: DEC
1275: ST_TO_ADDR
1276: LD_EXP 14
1280: PUSH
1281: LD_INT 1
1283: MINUS
1284: PUSH
1285: FOR_TO
1286: IFFALSE 1368
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1288: LD_EXP 14
1292: PUSH
1293: LD_VAR 0 6
1297: ARRAY
1298: PPUSH
1299: LD_INT 3
1301: PPUSH
1302: CALL_OW 259
1306: PUSH
1307: LD_EXP 14
1311: PUSH
1312: LD_VAR 0 6
1316: PUSH
1317: LD_INT 1
1319: PLUS
1320: ARRAY
1321: PPUSH
1322: LD_INT 3
1324: PPUSH
1325: CALL_OW 259
1329: LESS
1330: IFFALSE 1366
// begin mecha = others11 [ i + 1 ] ;
1332: LD_ADDR_VAR 0 9
1336: PUSH
1337: LD_EXP 14
1341: PUSH
1342: LD_VAR 0 6
1346: PUSH
1347: LD_INT 1
1349: PLUS
1350: ARRAY
1351: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1352: LD_VAR 0 9
1356: PPUSH
1357: LD_INT 3
1359: PPUSH
1360: CALL_OW 336
// break ;
1364: GO 1368
// end ; end ;
1366: GO 1285
1368: POP
1369: POP
// if spawnMode = 1 then
1370: LD_VAR 0 3
1374: PUSH
1375: LD_INT 1
1377: EQUAL
1378: IFFALSE 1399
// PlaceUnitArea ( mecha , area , false ) else
1380: LD_VAR 0 9
1384: PPUSH
1385: LD_VAR 0 1
1389: PPUSH
1390: LD_INT 0
1392: PPUSH
1393: CALL_OW 49
1397: GO 1413
// PlaceHumanInUnit ( mecha , veh ) ;
1399: LD_VAR 0 9
1403: PPUSH
1404: LD_VAR 0 2
1408: PPUSH
1409: CALL_OW 52
// others11 = others11 diff mecha ;
1413: LD_ADDR_EXP 14
1417: PUSH
1418: LD_EXP 14
1422: PUSH
1423: LD_VAR 0 9
1427: DIFF
1428: ST_TO_ADDR
// end else
1429: GO 1489
// begin hc_name =  ;
1431: LD_ADDR_OWVAR 26
1435: PUSH
1436: LD_STRING 
1438: ST_TO_ADDR
// hc_gallery =  ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING 
1446: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1447: LD_INT 0
1449: PPUSH
1450: LD_INT 7
1452: PPUSH
1453: LD_INT 9
1455: PPUSH
1456: CALL_OW 12
1460: PPUSH
1461: CALL_OW 383
// un = CreateHuman ;
1465: LD_ADDR_VAR 0 7
1469: PUSH
1470: CALL_OW 44
1474: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1475: LD_VAR 0 7
1479: PPUSH
1480: LD_VAR 0 2
1484: PPUSH
1485: CALL_OW 52
// end ; end else
1489: GO 1660
// begin if others11 > 0 then
1491: LD_EXP 14
1495: PUSH
1496: LD_INT 0
1498: GREATER
1499: IFFALSE 1572
// begin if spawnMode = 1 then
1501: LD_VAR 0 3
1505: PUSH
1506: LD_INT 1
1508: EQUAL
1509: IFFALSE 1534
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1511: LD_EXP 14
1515: PUSH
1516: LD_INT 1
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 1
1524: PPUSH
1525: LD_INT 0
1527: PPUSH
1528: CALL_OW 49
1532: GO 1552
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1534: LD_EXP 14
1538: PUSH
1539: LD_INT 1
1541: ARRAY
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1552: LD_ADDR_EXP 14
1556: PUSH
1557: LD_EXP 14
1561: PPUSH
1562: LD_INT 1
1564: PPUSH
1565: CALL_OW 3
1569: ST_TO_ADDR
// end else
1570: GO 1660
// begin hc_name =  ;
1572: LD_ADDR_OWVAR 26
1576: PUSH
1577: LD_STRING 
1579: ST_TO_ADDR
// hc_gallery =  ;
1580: LD_ADDR_OWVAR 33
1584: PUSH
1585: LD_STRING 
1587: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1588: LD_INT 0
1590: PPUSH
1591: LD_INT 1
1593: PUSH
1594: LD_INT 2
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 1
1611: PPUSH
1612: LD_INT 4
1614: PPUSH
1615: CALL_OW 12
1619: ARRAY
1620: PPUSH
1621: LD_INT 7
1623: PPUSH
1624: LD_INT 9
1626: PPUSH
1627: CALL_OW 12
1631: PPUSH
1632: CALL_OW 380
// un = CreateHuman ;
1636: LD_ADDR_VAR 0 7
1640: PUSH
1641: CALL_OW 44
1645: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1646: LD_VAR 0 7
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ; end ; end ;
1660: LD_VAR 0 5
1664: RET
// export function PrepareVehicles ; var veh ; begin
1665: LD_INT 0
1667: PPUSH
1668: PPUSH
// uc_side = 1 ;
1669: LD_ADDR_OWVAR 20
1673: PUSH
1674: LD_INT 1
1676: ST_TO_ADDR
// uc_nation = 1 ;
1677: LD_ADDR_OWVAR 21
1681: PUSH
1682: LD_INT 1
1684: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1685: LD_ADDR_OWVAR 37
1689: PUSH
1690: LD_INT 3
1692: ST_TO_ADDR
// vc_engine = 3 ;
1693: LD_ADDR_OWVAR 39
1697: PUSH
1698: LD_INT 3
1700: ST_TO_ADDR
// vc_control = 3 ;
1701: LD_ADDR_OWVAR 38
1705: PUSH
1706: LD_INT 3
1708: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1709: LD_ADDR_OWVAR 40
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// veh = CreateVehicle ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: CALL_OW 45
1726: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1727: LD_VAR 0 2
1731: PPUSH
1732: LD_INT 4
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL_OW 49
// vc_weapon = us_double_gun ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_INT 5
1749: ST_TO_ADDR
// vc_control = 1 ;
1750: LD_ADDR_OWVAR 38
1754: PUSH
1755: LD_INT 1
1757: ST_TO_ADDR
// veh = CreateVehicle ;
1758: LD_ADDR_VAR 0 2
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1768: LD_VAR 0 2
1772: PPUSH
1773: LD_INT 4
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 49
// vc_weapon = us_light_gun ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 3
1790: ST_TO_ADDR
// vc_control = 3 ;
1791: LD_ADDR_OWVAR 38
1795: PUSH
1796: LD_INT 3
1798: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1799: LD_ADDR_OWVAR 37
1803: PUSH
1804: LD_INT 2
1806: ST_TO_ADDR
// veh = CreateVehicle ;
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: CALL_OW 45
1816: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1817: LD_VAR 0 2
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: LD_INT 0
1827: PPUSH
1828: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1832: LD_ADDR_OWVAR 40
1836: PUSH
1837: LD_INT 4
1839: ST_TO_ADDR
// veh = CreateVehicle ;
1840: LD_ADDR_VAR 0 2
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1850: LD_VAR 0 2
1854: PPUSH
1855: LD_INT 4
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL_OW 49
// end ;
1865: LD_VAR 0 1
1869: RET
// export function PowellSupport1 ; var veh , un ; begin
1870: LD_INT 0
1872: PPUSH
1873: PPUSH
1874: PPUSH
// uc_side = 1 ;
1875: LD_ADDR_OWVAR 20
1879: PUSH
1880: LD_INT 1
1882: ST_TO_ADDR
// uc_nation = 1 ;
1883: LD_ADDR_OWVAR 21
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1891: LD_STRING 11_Brown
1893: PPUSH
1894: CALL_OW 28
1898: PUSH
1899: LD_INT 1
1901: EQUAL
1902: IFFALSE 1949
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1904: LD_ADDR_EXP 7
1908: PUSH
1909: LD_STRING 11_Brown
1911: PPUSH
1912: LD_INT 1
1914: PPUSH
1915: CALL 12067 0 2
1919: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1920: LD_EXP 7
1924: PPUSH
1925: LD_INT 2
1927: PPUSH
1928: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1932: LD_EXP 7
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// end else
1947: GO 1965
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL 1239 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1965: LD_STRING 11_Gary
1967: PPUSH
1968: CALL_OW 28
1972: PUSH
1973: LD_INT 1
1975: EQUAL
1976: IFFALSE 2023
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1978: LD_ADDR_EXP 11
1982: PUSH
1983: LD_STRING 11_Gary
1985: PPUSH
1986: LD_INT 1
1988: PPUSH
1989: CALL 12067 0 2
1993: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1994: LD_EXP 11
1998: PPUSH
1999: LD_INT 2
2001: PPUSH
2002: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2006: LD_EXP 11
2010: PPUSH
2011: LD_INT 4
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 49
// end else
2021: GO 2039
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2023: LD_INT 4
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL 1239 0 4
// end ; vc_chassis = us_medium_tracked ;
2039: LD_ADDR_OWVAR 37
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// vc_engine = 3 ;
2047: LD_ADDR_OWVAR 39
2051: PUSH
2052: LD_INT 3
2054: ST_TO_ADDR
// vc_control = 1 ;
2055: LD_ADDR_OWVAR 38
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// vc_weapon = us_crane ;
2063: LD_ADDR_OWVAR 40
2067: PUSH
2068: LD_INT 13
2070: ST_TO_ADDR
// veh = CreateVehicle ;
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: CALL_OW 45
2080: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 4
2088: PPUSH
2089: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2093: LD_VAR 0 2
2097: PPUSH
2098: LD_INT 4
2100: PPUSH
2101: LD_INT 0
2103: PPUSH
2104: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2108: LD_INT 4
2110: PPUSH
2111: LD_VAR 0 2
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: LD_INT 1
2121: PPUSH
2122: CALL 1239 0 4
// vc_weapon = 9 ;
2126: LD_ADDR_OWVAR 40
2130: PUSH
2131: LD_INT 9
2133: ST_TO_ADDR
// veh = CreateVehicle ;
2134: LD_ADDR_VAR 0 2
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2144: LD_VAR 0 2
2148: PPUSH
2149: LD_INT 4
2151: PPUSH
2152: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2156: LD_VAR 0 2
2160: PPUSH
2161: LD_INT 4
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2171: LD_INT 4
2173: PPUSH
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 2
2181: PPUSH
2182: LD_INT 1
2184: PPUSH
2185: CALL 1239 0 4
// vc_control = 3 ;
2189: LD_ADDR_OWVAR 38
2193: PUSH
2194: LD_INT 3
2196: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2197: LD_ADDR_OWVAR 40
2201: PUSH
2202: LD_INT 12
2204: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2205: LD_ADDR_EXP 15
2209: PUSH
2210: CALL_OW 45
2214: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2215: LD_ADDR_EXP 16
2219: PUSH
2220: CALL_OW 45
2224: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2225: LD_EXP 15
2229: PPUSH
2230: LD_INT 4
2232: PPUSH
2233: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2237: LD_EXP 16
2241: PPUSH
2242: LD_INT 4
2244: PPUSH
2245: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2249: LD_EXP 15
2253: PPUSH
2254: LD_INT 4
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: LD_INT 0
2274: PPUSH
2275: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2279: LD_EXP 15
2283: PPUSH
2284: LD_INT 3
2286: PPUSH
2287: LD_INT 100
2289: PPUSH
2290: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2294: LD_EXP 16
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: LD_INT 80
2304: PPUSH
2305: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2309: LD_EXP 16
2313: PPUSH
2314: LD_INT 3
2316: PPUSH
2317: LD_INT 20
2319: PPUSH
2320: CALL_OW 291
// end ;
2324: LD_VAR 0 1
2328: RET
// export function PowellSupport2 ; var veh , un ; begin
2329: LD_INT 0
2331: PPUSH
2332: PPUSH
2333: PPUSH
// uc_side = 1 ;
2334: LD_ADDR_OWVAR 20
2338: PUSH
2339: LD_INT 1
2341: ST_TO_ADDR
// uc_nation = 1 ;
2342: LD_ADDR_OWVAR 21
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2350: LD_ADDR_OWVAR 37
2354: PUSH
2355: LD_INT 2
2357: ST_TO_ADDR
// vc_engine = 3 ;
2358: LD_ADDR_OWVAR 39
2362: PUSH
2363: LD_INT 3
2365: ST_TO_ADDR
// vc_control = 3 ;
2366: LD_ADDR_OWVAR 38
2370: PUSH
2371: LD_INT 3
2373: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2374: LD_ADDR_OWVAR 40
2378: PUSH
2379: LD_INT 3
2381: ST_TO_ADDR
// veh = CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 4
2399: PPUSH
2400: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: LD_INT 0
2414: PPUSH
2415: CALL_OW 49
// vc_control = 1 ;
2419: LD_ADDR_OWVAR 38
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2427: LD_ADDR_OWVAR 37
2431: PUSH
2432: LD_INT 2
2434: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2435: LD_ADDR_OWVAR 40
2439: PUSH
2440: LD_INT 5
2442: ST_TO_ADDR
// veh = CreateVehicle ;
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: CALL_OW 45
2452: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 4
2460: PPUSH
2461: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2465: LD_VAR 0 2
2469: PPUSH
2470: LD_INT 4
2472: PPUSH
2473: LD_INT 0
2475: PPUSH
2476: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2480: LD_STRING 11_Bobby
2482: PPUSH
2483: CALL_OW 28
2487: PUSH
2488: LD_INT 1
2490: EQUAL
2491: IFFALSE 2537
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2493: LD_ADDR_EXP 4
2497: PUSH
2498: LD_STRING 11_Bobby
2500: PPUSH
2501: LD_INT 1
2503: PPUSH
2504: CALL 12067 0 2
2508: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2509: LD_EXP 4
2513: PPUSH
2514: LD_INT 3
2516: PPUSH
2517: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2521: LD_EXP 4
2525: PPUSH
2526: LD_VAR 0 2
2530: PPUSH
2531: CALL_OW 52
// end else
2535: GO 2555
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2537: LD_INT 0
2539: PPUSH
2540: LD_VAR 0 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL 1239 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2555: LD_STRING 11_Houten
2557: PPUSH
2558: CALL_OW 28
2562: PUSH
2563: LD_INT 1
2565: EQUAL
2566: IFFALSE 2613
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2568: LD_ADDR_EXP 9
2572: PUSH
2573: LD_STRING 11_Houten
2575: PPUSH
2576: LD_INT 1
2578: PPUSH
2579: CALL 12067 0 2
2583: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2584: LD_EXP 9
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2596: LD_EXP 9
2600: PPUSH
2601: LD_INT 4
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: CALL_OW 49
// end else
2611: GO 2629
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2613: LD_INT 4
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: LD_INT 0
2624: PPUSH
2625: CALL 1239 0 4
// end ; vc_control = 3 ;
2629: LD_ADDR_OWVAR 38
2633: PUSH
2634: LD_INT 3
2636: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2637: LD_ADDR_OWVAR 40
2641: PUSH
2642: LD_INT 12
2644: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2645: LD_ADDR_EXP 17
2649: PUSH
2650: CALL_OW 45
2654: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2655: LD_EXP 17
2659: PPUSH
2660: LD_INT 4
2662: PPUSH
2663: CALL_OW 233
// amCargo4 = CreateVehicle ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: CALL_OW 45
2676: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2677: LD_EXP 18
2681: PPUSH
2682: LD_INT 4
2684: PPUSH
2685: CALL_OW 233
// amCargo5 = CreateVehicle ;
2689: LD_ADDR_EXP 19
2693: PUSH
2694: CALL_OW 45
2698: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2699: LD_EXP 19
2703: PPUSH
2704: LD_INT 4
2706: PPUSH
2707: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2711: LD_EXP 17
2715: PPUSH
2716: LD_INT 4
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2726: LD_EXP 18
2730: PPUSH
2731: LD_INT 4
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2741: LD_EXP 19
2745: PPUSH
2746: LD_INT 4
2748: PPUSH
2749: LD_INT 0
2751: PPUSH
2752: CALL_OW 49
// if kurtStatus > 0 then
2756: LD_EXP 26
2760: PUSH
2761: LD_INT 0
2763: GREATER
2764: IFFALSE 2813
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2766: LD_EXP 17
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: LD_INT 100
2776: PPUSH
2777: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2781: LD_EXP 18
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: LD_INT 100
2791: PPUSH
2792: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2796: LD_EXP 19
2800: PPUSH
2801: LD_INT 3
2803: PPUSH
2804: LD_INT 80
2806: PPUSH
2807: CALL_OW 291
// end else
2811: GO 2858
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2813: LD_EXP 17
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: LD_INT 100
2823: PPUSH
2824: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2828: LD_EXP 18
2832: PPUSH
2833: LD_INT 3
2835: PPUSH
2836: LD_INT 60
2838: PPUSH
2839: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2843: LD_EXP 19
2847: PPUSH
2848: LD_INT 3
2850: PPUSH
2851: LD_INT 100
2853: PPUSH
2854: CALL_OW 291
// end ; end ;
2858: LD_VAR 0 1
2862: RET
// export function PowellSupport3 ; var veh , un ; begin
2863: LD_INT 0
2865: PPUSH
2866: PPUSH
2867: PPUSH
// uc_side = 1 ;
2868: LD_ADDR_OWVAR 20
2872: PUSH
2873: LD_INT 1
2875: ST_TO_ADDR
// uc_nation = 1 ;
2876: LD_ADDR_OWVAR 21
2880: PUSH
2881: LD_INT 1
2883: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2884: LD_INT 4
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL 1239 0 4
// vc_chassis = us_medium_wheeled ;
2900: LD_ADDR_OWVAR 37
2904: PUSH
2905: LD_INT 2
2907: ST_TO_ADDR
// vc_engine = 3 ;
2908: LD_ADDR_OWVAR 39
2912: PUSH
2913: LD_INT 3
2915: ST_TO_ADDR
// vc_control = 3 ;
2916: LD_ADDR_OWVAR 38
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2924: LD_ADDR_OWVAR 40
2928: PUSH
2929: LD_INT 12
2931: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2932: LD_ADDR_EXP 20
2936: PUSH
2937: CALL_OW 45
2941: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2942: LD_ADDR_EXP 21
2946: PUSH
2947: CALL_OW 45
2951: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2952: LD_EXP 20
2956: PPUSH
2957: LD_INT 4
2959: PPUSH
2960: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2964: LD_EXP 21
2968: PPUSH
2969: LD_INT 4
2971: PPUSH
2972: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2976: LD_EXP 20
2980: PPUSH
2981: LD_INT 4
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2991: LD_EXP 21
2995: PPUSH
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3006: LD_EXP 20
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: LD_INT 100
3016: PPUSH
3017: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3021: LD_EXP 21
3025: PPUSH
3026: LD_INT 1
3028: PPUSH
3029: LD_INT 100
3031: PPUSH
3032: CALL_OW 291
// end ; end_of_file
3036: LD_VAR 0 1
3040: RET
// export function PrepareRussianCommander ; begin
3041: LD_INT 0
3043: PPUSH
// uc_side = 3 ;
3044: LD_ADDR_OWVAR 20
3048: PUSH
3049: LD_INT 3
3051: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3052: LD_ADDR_EXP 23
3056: PUSH
3057: LD_STRING Davidov
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL 12067 0 2
3067: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3068: LD_EXP 23
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3080: LD_ADDR_EXP 34
3084: PUSH
3085: LD_EXP 34
3089: PUSH
3090: LD_EXP 23
3094: ADD
3095: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3096: LD_EXP 34
3100: PPUSH
3101: LD_INT 4
3103: PPUSH
3104: CALL_OW 336
// end ;
3108: LD_VAR 0 1
3112: RET
// export function PrepareEastBase ; var i , un ; begin
3113: LD_INT 0
3115: PPUSH
3116: PPUSH
3117: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3118: LD_INT 3
3120: PPUSH
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 121
3126: PPUSH
3127: LD_EXP 36
3131: PPUSH
3132: LD_EXP 37
3136: PPUSH
3137: CALL_OW 12
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: LD_INT 3
3147: PPUSH
3148: CALL 12781 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 121
3160: PPUSH
3161: LD_EXP 36
3165: PPUSH
3166: LD_EXP 37
3170: PPUSH
3171: CALL_OW 12
3175: PPUSH
3176: LD_INT 9
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL 12781 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 4
3194: PPUSH
3195: LD_EXP 36
3199: PPUSH
3200: LD_EXP 37
3204: PPUSH
3205: CALL_OW 12
3209: PPUSH
3210: LD_INT 2
3212: PPUSH
3213: LD_INT 6
3215: PPUSH
3216: CALL 12781 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3220: LD_INT 3
3222: PPUSH
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 112
3228: PPUSH
3229: LD_EXP 36
3233: PPUSH
3234: LD_EXP 37
3238: PPUSH
3239: CALL_OW 12
3243: PPUSH
3244: LD_INT 3
3246: PPUSH
3247: LD_INT 6
3249: PPUSH
3250: CALL 12781 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3254: LD_INT 3
3256: PPUSH
3257: LD_INT 3
3259: PPUSH
3260: LD_INT 47
3262: PPUSH
3263: LD_EXP 36
3267: PPUSH
3268: LD_EXP 37
3272: PPUSH
3273: CALL_OW 12
3277: PPUSH
3278: LD_INT 4
3280: PPUSH
3281: LD_INT 6
3283: PPUSH
3284: CALL 12781 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3288: LD_INT 3
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: LD_INT 129
3296: PPUSH
3297: LD_EXP 36
3301: PPUSH
3302: LD_EXP 37
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 6
3317: PPUSH
3318: CALL 12781 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3322: LD_INT 3
3324: PPUSH
3325: LD_INT 3
3327: PPUSH
3328: LD_INT 135
3330: PPUSH
3331: LD_EXP 36
3335: PPUSH
3336: LD_EXP 37
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: LD_INT 4
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: CALL 12781 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3356: LD_ADDR_VAR 0 2
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 3
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 30
3373: PUSH
3374: LD_INT 32
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 69
3389: PUSH
3390: FOR_IN
3391: IFFALSE 3431
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: LD_VAR 0 2
3403: PPUSH
3404: LD_EXP 36
3408: PPUSH
3409: LD_EXP 37
3413: PPUSH
3414: CALL_OW 12
3418: PPUSH
3419: LD_INT 1
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: CALL 12781 0 6
3429: GO 3390
3431: POP
3432: POP
// for i = 1 to 5 do
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: DOUBLE
3439: LD_INT 1
3441: DEC
3442: ST_TO_ADDR
3443: LD_INT 5
3445: PUSH
3446: FOR_TO
3447: IFFALSE 3546
// begin uc_side = 3 ;
3449: LD_ADDR_OWVAR 20
3453: PUSH
3454: LD_INT 3
3456: ST_TO_ADDR
// uc_nation = 3 ;
3457: LD_ADDR_OWVAR 21
3461: PUSH
3462: LD_INT 3
3464: ST_TO_ADDR
// hc_gallery =  ;
3465: LD_ADDR_OWVAR 33
3469: PUSH
3470: LD_STRING 
3472: ST_TO_ADDR
// hc_name =  ;
3473: LD_ADDR_OWVAR 26
3477: PUSH
3478: LD_STRING 
3480: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3481: LD_INT 0
3483: PPUSH
3484: LD_INT 4
3486: PPUSH
3487: LD_EXP 36
3491: PPUSH
3492: LD_EXP 37
3496: PPUSH
3497: CALL_OW 12
3501: PPUSH
3502: CALL_OW 380
// un = CreateHuman ;
3506: LD_ADDR_VAR 0 3
3510: PUSH
3511: CALL_OW 44
3515: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3516: LD_VAR 0 3
3520: PPUSH
3521: LD_INT 3
3523: PPUSH
3524: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3528: LD_ADDR_EXP 34
3532: PUSH
3533: LD_EXP 34
3537: PUSH
3538: LD_VAR 0 3
3542: ADD
3543: ST_TO_ADDR
// end ;
3544: GO 3446
3546: POP
3547: POP
// end ;
3548: LD_VAR 0 1
3552: RET
// export function PrepareWestBase ; var i , un ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3558: LD_INT 3
3560: PPUSH
3561: LD_INT 3
3563: PPUSH
3564: LD_INT 6
3566: PPUSH
3567: LD_EXP 36
3571: PPUSH
3572: LD_EXP 37
3576: PPUSH
3577: CALL_OW 12
3581: PPUSH
3582: LD_INT 2
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: CALL 12781 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3592: LD_INT 3
3594: PPUSH
3595: LD_INT 3
3597: PPUSH
3598: LD_INT 91
3600: PPUSH
3601: LD_EXP 36
3605: PPUSH
3606: LD_EXP 37
3610: PPUSH
3611: CALL_OW 12
3615: PPUSH
3616: LD_INT 4
3618: PPUSH
3619: LD_INT 3
3621: PPUSH
3622: CALL 12781 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3626: LD_INT 3
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 21
3634: PPUSH
3635: LD_EXP 36
3639: PPUSH
3640: LD_EXP 37
3644: PPUSH
3645: CALL_OW 12
3649: PPUSH
3650: LD_INT 3
3652: PPUSH
3653: LD_INT 6
3655: PPUSH
3656: CALL 12781 0 6
// end ;
3660: LD_VAR 0 1
3664: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3665: LD_INT 0
3667: PPUSH
3668: PPUSH
3669: PPUSH
3670: PPUSH
// uc_side = 3 ;
3671: LD_ADDR_OWVAR 20
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// uc_nation = 3 ;
3679: LD_ADDR_OWVAR 21
3683: PUSH
3684: LD_INT 3
3686: ST_TO_ADDR
// for i = 1 to 5 do
3687: LD_ADDR_VAR 0 2
3691: PUSH
3692: DOUBLE
3693: LD_INT 1
3695: DEC
3696: ST_TO_ADDR
3697: LD_INT 5
3699: PUSH
3700: FOR_TO
3701: IFFALSE 3771
// begin hc_gallery =  ;
3703: LD_ADDR_OWVAR 33
3707: PUSH
3708: LD_STRING 
3710: ST_TO_ADDR
// hc_name =  ;
3711: LD_ADDR_OWVAR 26
3715: PUSH
3716: LD_STRING 
3718: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3719: LD_INT 0
3721: PPUSH
3722: LD_INT 9
3724: PPUSH
3725: LD_EXP 36
3729: PPUSH
3730: LD_EXP 37
3734: PPUSH
3735: CALL_OW 12
3739: PPUSH
3740: CALL_OW 380
// un = CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 8
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 49
// end ;
3769: GO 3700
3771: POP
3772: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_INT 2
3785: PUSH
3786: LD_INT 3
3788: PUSH
3789: LD_INT 4
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: ARRAY
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3874
// begin hc_gallery =  ;
3806: LD_ADDR_OWVAR 33
3810: PUSH
3811: LD_STRING 
3813: ST_TO_ADDR
// hc_name =  ;
3814: LD_ADDR_OWVAR 26
3818: PUSH
3819: LD_STRING 
3821: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3822: LD_INT 0
3824: PPUSH
3825: LD_INT 4
3827: PPUSH
3828: LD_EXP 36
3832: PPUSH
3833: LD_EXP 37
3837: PPUSH
3838: CALL_OW 12
3842: PPUSH
3843: CALL_OW 380
// un = CreateHuman ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: CALL_OW 44
3856: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3857: LD_VAR 0 3
3861: PPUSH
3862: LD_INT 8
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
// end ;
3872: GO 3803
3874: POP
3875: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_INT 3
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 5
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_OWVAR 67
3904: ARRAY
3905: PUSH
3906: FOR_TO
3907: IFFALSE 4103
// begin vc_engine = 3 ;
3909: LD_ADDR_OWVAR 39
3913: PUSH
3914: LD_INT 3
3916: ST_TO_ADDR
// vc_control = 1 ;
3917: LD_ADDR_OWVAR 38
3921: PUSH
3922: LD_INT 1
3924: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3925: LD_ADDR_OWVAR 40
3929: PUSH
3930: LD_INT 42
3932: PUSH
3933: LD_INT 43
3935: PUSH
3936: LD_INT 44
3938: PUSH
3939: LD_INT 45
3941: PUSH
3942: LD_INT 46
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 5
3957: PPUSH
3958: CALL_OW 12
3962: ARRAY
3963: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3964: LD_OWVAR 40
3968: PUSH
3969: LD_INT 46
3971: EQUAL
3972: IFFALSE 3984
// vc_chassis = ru_heavy_tracked else
3974: LD_ADDR_OWVAR 37
3978: PUSH
3979: LD_INT 24
3981: ST_TO_ADDR
3982: GO 4011
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3984: LD_ADDR_OWVAR 37
3988: PUSH
3989: LD_INT 22
3991: PUSH
3992: LD_INT 21
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 1
4001: PPUSH
4002: LD_INT 2
4004: PPUSH
4005: CALL_OW 12
4009: ARRAY
4010: ST_TO_ADDR
// veh = CreateVehicle ;
4011: LD_ADDR_VAR 0 4
4015: PUSH
4016: CALL_OW 45
4020: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4021: LD_VAR 0 4
4025: PPUSH
4026: LD_INT 3
4028: PPUSH
4029: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4033: LD_VAR 0 4
4037: PPUSH
4038: LD_INT 5
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
// hc_gallery =  ;
4048: LD_ADDR_OWVAR 33
4052: PUSH
4053: LD_STRING 
4055: ST_TO_ADDR
// hc_name =  ;
4056: LD_ADDR_OWVAR 26
4060: PUSH
4061: LD_STRING 
4063: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4064: LD_INT 0
4066: PPUSH
4067: LD_INT 3
4069: PPUSH
4070: LD_INT 10
4072: PPUSH
4073: CALL_OW 380
// un = CreateHuman ;
4077: LD_ADDR_VAR 0 3
4081: PUSH
4082: CALL_OW 44
4086: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_VAR 0 4
4096: PPUSH
4097: CALL_OW 52
// end ;
4101: GO 3906
4103: POP
4104: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4105: LD_ADDR_VAR 0 2
4109: PUSH
4110: DOUBLE
4111: LD_INT 1
4113: DEC
4114: ST_TO_ADDR
4115: LD_INT 3
4117: PUSH
4118: LD_INT 4
4120: PUSH
4121: LD_INT 5
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PUSH
4129: LD_OWVAR 67
4133: ARRAY
4134: PUSH
4135: FOR_TO
4136: IFFALSE 4283
// begin vc_engine = 3 ;
4138: LD_ADDR_OWVAR 39
4142: PUSH
4143: LD_INT 3
4145: ST_TO_ADDR
// vc_control = 3 ;
4146: LD_ADDR_OWVAR 38
4150: PUSH
4151: LD_INT 3
4153: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4154: LD_ADDR_OWVAR 40
4158: PUSH
4159: LD_INT 42
4161: PUSH
4162: LD_INT 43
4164: PUSH
4165: LD_INT 44
4167: PUSH
4168: LD_INT 45
4170: PUSH
4171: LD_INT 46
4173: PUSH
4174: LD_INT 49
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 1
4187: PPUSH
4188: LD_INT 5
4190: PPUSH
4191: CALL_OW 12
4195: ARRAY
4196: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4197: LD_OWVAR 40
4201: PUSH
4202: LD_INT 46
4204: EQUAL
4205: IFFALSE 4217
// vc_chassis = ru_heavy_tracked else
4207: LD_ADDR_OWVAR 37
4211: PUSH
4212: LD_INT 24
4214: ST_TO_ADDR
4215: GO 4244
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4217: LD_ADDR_OWVAR 37
4221: PUSH
4222: LD_INT 22
4224: PUSH
4225: LD_INT 21
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 2
4237: PPUSH
4238: CALL_OW 12
4242: ARRAY
4243: ST_TO_ADDR
// veh = CreateVehicle ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: CALL_OW 45
4253: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4254: LD_VAR 0 4
4258: PPUSH
4259: LD_INT 3
4261: PPUSH
4262: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4266: LD_VAR 0 4
4270: PPUSH
4271: LD_INT 6
4273: PPUSH
4274: LD_INT 0
4276: PPUSH
4277: CALL_OW 49
// end ;
4281: GO 4135
4283: POP
4284: POP
// end ; end_of_file
4285: LD_VAR 0 1
4289: RET
// export function PrepareKurt ; begin
4290: LD_INT 0
4292: PPUSH
// uc_side = 8 ;
4293: LD_ADDR_OWVAR 20
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// uc_nation = 2 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 2
4308: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4309: LD_ADDR_OWVAR 37
4313: PUSH
4314: LD_INT 13
4316: ST_TO_ADDR
// vc_engine = 1 ;
4317: LD_ADDR_OWVAR 39
4321: PUSH
4322: LD_INT 1
4324: ST_TO_ADDR
// vc_control = 1 ;
4325: LD_ADDR_OWVAR 38
4329: PUSH
4330: LD_INT 1
4332: ST_TO_ADDR
// vc_weapon = 24 ;
4333: LD_ADDR_OWVAR 40
4337: PUSH
4338: LD_INT 24
4340: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4341: LD_ADDR_EXP 25
4345: PUSH
4346: CALL_OW 45
4350: ST_TO_ADDR
// if kurtStatus > 0 then
4351: LD_EXP 26
4355: PUSH
4356: LD_INT 0
4358: GREATER
4359: IFFALSE 4408
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4361: LD_ADDR_EXP 24
4365: PUSH
4366: LD_STRING Kurt
4368: PPUSH
4369: LD_INT 0
4371: PPUSH
4372: CALL 12067 0 2
4376: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4377: LD_EXP 25
4381: PPUSH
4382: LD_INT 4
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4392: LD_EXP 24
4396: PPUSH
4397: LD_EXP 25
4401: PPUSH
4402: CALL_OW 52
// end else
4406: GO 4485
// begin hc_name =  ;
4408: LD_ADDR_OWVAR 26
4412: PUSH
4413: LD_STRING 
4415: ST_TO_ADDR
// hc_gallery =  ;
4416: LD_ADDR_OWVAR 33
4420: PUSH
4421: LD_STRING 
4423: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4424: LD_INT 1
4426: PPUSH
4427: LD_INT 10
4429: PPUSH
4430: CALL_OW 381
// Kurt = CreateHuman ;
4434: LD_ADDR_EXP 24
4438: PUSH
4439: CALL_OW 44
4443: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4444: LD_EXP 25
4448: PPUSH
4449: LD_INT 4
4451: PPUSH
4452: LD_INT 0
4454: PPUSH
4455: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4459: LD_EXP 24
4463: PPUSH
4464: LD_EXP 25
4468: PPUSH
4469: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4473: LD_EXP 24
4477: PPUSH
4478: LD_STRING AltKurt
4480: PPUSH
4481: CALL_OW 38
// end ; end ;
4485: LD_VAR 0 1
4489: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4490: LD_INT 0
4492: PPUSH
4493: PPUSH
4494: PPUSH
4495: PPUSH
// for i = 1 to 3 do
4496: LD_ADDR_VAR 0 2
4500: PUSH
4501: DOUBLE
4502: LD_INT 1
4504: DEC
4505: ST_TO_ADDR
4506: LD_INT 3
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4631
// begin uc_side = 1 ;
4512: LD_ADDR_OWVAR 20
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// uc_nation = 2 ;
4520: LD_ADDR_OWVAR 21
4524: PUSH
4525: LD_INT 2
4527: ST_TO_ADDR
// hc_gallery =  ;
4528: LD_ADDR_OWVAR 33
4532: PUSH
4533: LD_STRING 
4535: ST_TO_ADDR
// hc_name =  ;
4536: LD_ADDR_OWVAR 26
4540: PUSH
4541: LD_STRING 
4543: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4544: LD_EXP 26
4548: PUSH
4549: LD_INT 0
4551: EQUAL
4552: PUSH
4553: LD_EXP 26
4557: PUSH
4558: LD_INT 2
4560: EQUAL
4561: OR
4562: IFFALSE 4579
// PrepareHuman ( false , 1 , 6 ) else
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: LD_INT 6
4572: PPUSH
4573: CALL_OW 380
4577: GO 4592
// PrepareHuman ( false , 1 , 8 ) ;
4579: LD_INT 0
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 8
4587: PPUSH
4588: CALL_OW 380
// un = CreateHuman ;
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: CALL_OW 44
4601: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_INT 4
4609: PPUSH
4610: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: LD_INT 0
4624: PPUSH
4625: CALL_OW 49
// end ;
4629: GO 4509
4631: POP
4632: POP
// vc_chassis = 14 ;
4633: LD_ADDR_OWVAR 37
4637: PUSH
4638: LD_INT 14
4640: ST_TO_ADDR
// vc_engine = 3 ;
4641: LD_ADDR_OWVAR 39
4645: PUSH
4646: LD_INT 3
4648: ST_TO_ADDR
// vc_control = 1 ;
4649: LD_ADDR_OWVAR 38
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4657: LD_ADDR_OWVAR 40
4661: PUSH
4662: LD_INT 27
4664: PUSH
4665: LD_INT 26
4667: PUSH
4668: LD_INT 28
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 1
4678: PPUSH
4679: LD_INT 3
4681: PPUSH
4682: CALL_OW 12
4686: ARRAY
4687: ST_TO_ADDR
// veh = CreateVehicle ;
4688: LD_ADDR_VAR 0 4
4692: PUSH
4693: CALL_OW 45
4697: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4698: LD_VAR 0 4
4702: PPUSH
4703: LD_INT 4
4705: PPUSH
4706: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4710: LD_VAR 0 4
4714: PPUSH
4715: LD_INT 4
4717: PPUSH
4718: LD_INT 0
4720: PPUSH
4721: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4725: LD_EXP 26
4729: PUSH
4730: LD_INT 0
4732: EQUAL
4733: PUSH
4734: LD_EXP 26
4738: PUSH
4739: LD_INT 2
4741: EQUAL
4742: OR
4743: IFFALSE 4760
// PrepareHuman ( false , 3 , 6 ) else
4745: LD_INT 0
4747: PPUSH
4748: LD_INT 3
4750: PPUSH
4751: LD_INT 6
4753: PPUSH
4754: CALL_OW 380
4758: GO 4773
// PrepareHuman ( false , 3 , 8 ) ;
4760: LD_INT 0
4762: PPUSH
4763: LD_INT 3
4765: PPUSH
4766: LD_INT 8
4768: PPUSH
4769: CALL_OW 380
// un = CreateHuman ;
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: CALL_OW 44
4782: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4783: LD_VAR 0 3
4787: PPUSH
4788: LD_VAR 0 4
4792: PPUSH
4793: CALL_OW 52
// vc_chassis = 14 ;
4797: LD_ADDR_OWVAR 37
4801: PUSH
4802: LD_INT 14
4804: ST_TO_ADDR
// vc_engine = 3 ;
4805: LD_ADDR_OWVAR 39
4809: PUSH
4810: LD_INT 3
4812: ST_TO_ADDR
// vc_control = 1 ;
4813: LD_ADDR_OWVAR 38
4817: PUSH
4818: LD_INT 1
4820: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4821: LD_ADDR_OWVAR 40
4825: PUSH
4826: LD_INT 27
4828: PUSH
4829: LD_INT 26
4831: PUSH
4832: LD_INT 28
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 1
4842: PPUSH
4843: LD_INT 3
4845: PPUSH
4846: CALL_OW 12
4850: ARRAY
4851: ST_TO_ADDR
// veh = CreateVehicle ;
4852: LD_ADDR_VAR 0 4
4856: PUSH
4857: CALL_OW 45
4861: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4862: LD_VAR 0 4
4866: PPUSH
4867: LD_INT 4
4869: PPUSH
4870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4874: LD_VAR 0 4
4878: PPUSH
4879: LD_INT 4
4881: PPUSH
4882: LD_INT 0
4884: PPUSH
4885: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4889: LD_EXP 26
4893: PUSH
4894: LD_INT 0
4896: EQUAL
4897: PUSH
4898: LD_EXP 26
4902: PUSH
4903: LD_INT 2
4905: EQUAL
4906: OR
4907: IFFALSE 4924
// PrepareHuman ( false , 4 , 6 ) else
4909: LD_INT 0
4911: PPUSH
4912: LD_INT 4
4914: PPUSH
4915: LD_INT 6
4917: PPUSH
4918: CALL_OW 380
4922: GO 4937
// PrepareHuman ( false , 4 , 8 ) ;
4924: LD_INT 0
4926: PPUSH
4927: LD_INT 4
4929: PPUSH
4930: LD_INT 8
4932: PPUSH
4933: CALL_OW 380
// un = CreateHuman ;
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: CALL_OW 44
4946: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4947: LD_VAR 0 3
4951: PPUSH
4952: LD_INT 4
4954: PPUSH
4955: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: LD_VAR 0 4
4968: PPUSH
4969: CALL_OW 52
// vc_chassis = 14 ;
4973: LD_ADDR_OWVAR 37
4977: PUSH
4978: LD_INT 14
4980: ST_TO_ADDR
// vc_engine = 3 ;
4981: LD_ADDR_OWVAR 39
4985: PUSH
4986: LD_INT 3
4988: ST_TO_ADDR
// vc_control = 1 ;
4989: LD_ADDR_OWVAR 38
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4997: LD_ADDR_OWVAR 40
5001: PUSH
5002: LD_INT 27
5004: PUSH
5005: LD_INT 26
5007: PUSH
5008: LD_INT 28
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 1
5018: PPUSH
5019: LD_INT 3
5021: PPUSH
5022: CALL_OW 12
5026: ARRAY
5027: ST_TO_ADDR
// veh = CreateVehicle ;
5028: LD_ADDR_VAR 0 4
5032: PUSH
5033: CALL_OW 45
5037: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5038: LD_VAR 0 4
5042: PPUSH
5043: LD_INT 4
5045: PPUSH
5046: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5050: LD_VAR 0 4
5054: PPUSH
5055: LD_INT 4
5057: PPUSH
5058: LD_INT 0
5060: PPUSH
5061: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5065: LD_EXP 26
5069: PUSH
5070: LD_INT 0
5072: EQUAL
5073: PUSH
5074: LD_EXP 26
5078: PUSH
5079: LD_INT 2
5081: EQUAL
5082: OR
5083: IFFALSE 5100
// PrepareHuman ( false , 2 , 4 ) else
5085: LD_INT 0
5087: PPUSH
5088: LD_INT 2
5090: PPUSH
5091: LD_INT 4
5093: PPUSH
5094: CALL_OW 380
5098: GO 5113
// PrepareHuman ( false , 2 , 8 ) ;
5100: LD_INT 0
5102: PPUSH
5103: LD_INT 2
5105: PPUSH
5106: LD_INT 8
5108: PPUSH
5109: CALL_OW 380
// un = CreateHuman ;
5113: LD_ADDR_VAR 0 3
5117: PUSH
5118: CALL_OW 44
5122: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5123: LD_VAR 0 3
5127: PPUSH
5128: LD_INT 4
5130: PPUSH
5131: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5135: LD_VAR 0 3
5139: PPUSH
5140: LD_VAR 0 4
5144: PPUSH
5145: CALL_OW 52
// end ;
5149: LD_VAR 0 1
5153: RET
// export function PrepareAttackLegion ; var i , un ; begin
5154: LD_INT 0
5156: PPUSH
5157: PPUSH
5158: PPUSH
// for i = 1 to 4 do
5159: LD_ADDR_VAR 0 2
5163: PUSH
5164: DOUBLE
5165: LD_INT 1
5167: DEC
5168: ST_TO_ADDR
5169: LD_INT 4
5171: PUSH
5172: FOR_TO
5173: IFFALSE 5283
// begin uc_side = 8 ;
5175: LD_ADDR_OWVAR 20
5179: PUSH
5180: LD_INT 8
5182: ST_TO_ADDR
// uc_nation = 2 ;
5183: LD_ADDR_OWVAR 21
5187: PUSH
5188: LD_INT 2
5190: ST_TO_ADDR
// hc_gallery =  ;
5191: LD_ADDR_OWVAR 33
5195: PUSH
5196: LD_STRING 
5198: ST_TO_ADDR
// hc_name =  ;
5199: LD_ADDR_OWVAR 26
5203: PUSH
5204: LD_STRING 
5206: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5207: LD_INT 0
5209: PPUSH
5210: LD_INT 1
5212: PUSH
5213: LD_INT 8
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: LD_INT 1
5222: PPUSH
5223: LD_INT 2
5225: PPUSH
5226: CALL_OW 12
5230: ARRAY
5231: PPUSH
5232: LD_INT 6
5234: PPUSH
5235: LD_INT 8
5237: PPUSH
5238: CALL_OW 12
5242: PPUSH
5243: CALL_OW 380
// un = CreateHuman ;
5247: LD_ADDR_VAR 0 3
5251: PUSH
5252: CALL_OW 44
5256: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5257: LD_VAR 0 3
5261: PPUSH
5262: LD_INT 19
5264: PPUSH
5265: LD_INT 0
5267: PPUSH
5268: CALL_OW 49
// ComCrawl ( un ) ;
5272: LD_VAR 0 3
5276: PPUSH
5277: CALL_OW 137
// end ;
5281: GO 5172
5283: POP
5284: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5285: LD_INT 1
5287: PPUSH
5288: LD_INT 8
5290: PPUSH
5291: LD_INT 2
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5301: LD_INT 20
5303: PPUSH
5304: LD_INT 3
5306: PPUSH
5307: CALL 15448 0 2
// end ; end_of_file
5311: LD_VAR 0 1
5315: RET
// every 1 do var i ;
5316: GO 5318
5318: DISABLE
5319: LD_INT 0
5321: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5322: LD_INT 10
5324: PPUSH
5325: LD_INT 122
5327: PPUSH
5328: LD_INT 145
5330: PPUSH
5331: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5335: LD_INT 137
5337: PPUSH
5338: LD_INT 84
5340: PPUSH
5341: LD_INT 61
5343: PPUSH
5344: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5348: LD_EXP 1
5352: PPUSH
5353: CALL_OW 310
5357: PPUSH
5358: CALL_OW 87
// InGameOn ;
5362: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5366: LD_INT 22
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PPUSH
5376: CALL_OW 69
5380: PPUSH
5381: LD_INT 130
5383: PPUSH
5384: LD_INT 103
5386: PPUSH
5387: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_INT 114
5398: PPUSH
5399: LD_INT 102
5401: PPUSH
5402: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5406: LD_EXP 1
5410: PPUSH
5411: LD_STRING D1-JMM-1
5413: PPUSH
5414: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5418: LD_EXP 1
5422: PPUSH
5423: CALL_OW 310
5427: PPUSH
5428: CALL_OW 87
// if IsOk ( Donaldson ) then
5432: LD_EXP 3
5436: PPUSH
5437: CALL_OW 302
5441: IFFALSE 5521
// begin Say ( Donaldson , D1-Don-1 ) ;
5443: LD_EXP 3
5447: PPUSH
5448: LD_STRING D1-Don-1
5450: PPUSH
5451: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5455: LD_EXP 1
5459: PPUSH
5460: CALL_OW 310
5464: PPUSH
5465: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5469: LD_EXP 1
5473: PPUSH
5474: LD_STRING D1-JMM-2
5476: PPUSH
5477: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5481: LD_EXP 1
5485: PPUSH
5486: CALL_OW 310
5490: PPUSH
5491: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5495: LD_EXP 3
5499: PPUSH
5500: LD_STRING D1-Don-2
5502: PPUSH
5503: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5507: LD_EXP 1
5511: PPUSH
5512: CALL_OW 310
5516: PPUSH
5517: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5521: LD_INT 22
5523: PUSH
5524: LD_INT 1
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL_OW 69
5535: PPUSH
5536: LD_INT 110
5538: PPUSH
5539: LD_INT 101
5541: PPUSH
5542: CALL_OW 171
// wait ( 0 0$1 ) ;
5546: LD_INT 35
5548: PPUSH
5549: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5553: LD_EXP 1
5557: PPUSH
5558: CALL_OW 310
5562: PPUSH
5563: CALL_OW 87
// wait ( 0 0$1 ) ;
5567: LD_INT 35
5569: PPUSH
5570: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5574: LD_EXP 1
5578: PPUSH
5579: CALL_OW 310
5583: PPUSH
5584: CALL_OW 87
// wait ( 0 0$1 ) ;
5588: LD_INT 35
5590: PPUSH
5591: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5595: LD_EXP 1
5599: PPUSH
5600: CALL_OW 310
5604: PPUSH
5605: CALL_OW 87
// wait ( 0 0$1 ) ;
5609: LD_INT 35
5611: PPUSH
5612: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5616: LD_EXP 1
5620: PPUSH
5621: CALL_OW 310
5625: PPUSH
5626: CALL_OW 87
// end ;
5630: PPOPN 1
5632: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5633: LD_INT 1
5635: PPUSH
5636: LD_INT 102
5638: PPUSH
5639: LD_INT 94
5641: PPUSH
5642: CALL_OW 293
5646: IFFALSE 5837
5648: GO 5650
5650: DISABLE
5651: LD_INT 0
5653: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5654: LD_INT 102
5656: PPUSH
5657: LD_INT 94
5659: PPUSH
5660: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5664: LD_INT 22
5666: PUSH
5667: LD_INT 1
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 26
5676: PUSH
5677: LD_INT 1
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 2
5686: PUSH
5687: LD_INT 25
5689: PUSH
5690: LD_INT 1
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 25
5699: PUSH
5700: LD_INT 2
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 3
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 25
5719: PUSH
5720: LD_INT 4
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 25
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PUSH
5737: LD_INT 25
5739: PUSH
5740: LD_INT 8
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: LIST
5760: PPUSH
5761: CALL_OW 69
5765: PPUSH
5766: LD_STRING D1-Sol1-2
5768: PPUSH
5769: LD_STRING 
5771: PPUSH
5772: CALL 12164 0 3
// Say ( JMM , D1-JMM-3 ) ;
5776: LD_EXP 1
5780: PPUSH
5781: LD_STRING D1-JMM-3
5783: PPUSH
5784: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5788: LD_STRING M1
5790: PPUSH
5791: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5795: LD_ADDR_VAR 0 1
5799: PUSH
5800: LD_INT 22
5802: PUSH
5803: LD_INT 1
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PPUSH
5810: CALL_OW 69
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5835
// ComMoveXY ( i , 95 , 84 ) ;
5818: LD_VAR 0 1
5822: PPUSH
5823: LD_INT 95
5825: PPUSH
5826: LD_INT 84
5828: PPUSH
5829: CALL_OW 111
5833: GO 5815
5835: POP
5836: POP
// end ;
5837: PPOPN 1
5839: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5840: GO 5842
5842: DISABLE
5843: LD_INT 0
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_INT 8
5856: PPUSH
5857: LD_INT 22
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 25
5869: PUSH
5870: LD_INT 9
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PPUSH
5881: CALL_OW 70
5885: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: LD_INT 22
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: ST_TO_ADDR
// enable ;
5909: ENABLE
// for i in your_units do
5910: LD_ADDR_VAR 0 1
5914: PUSH
5915: LD_VAR 0 3
5919: PUSH
5920: FOR_IN
5921: IFFALSE 6576
// begin if See ( 3 , i ) then
5923: LD_INT 3
5925: PPUSH
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL_OW 292
5935: IFFALSE 6574
// begin disable ;
5937: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5938: LD_VAR 0 2
5942: PPUSH
5943: LD_INT 96
5945: PPUSH
5946: LD_INT 85
5948: PPUSH
5949: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5953: LD_VAR 0 2
5957: PPUSH
5958: LD_INT 96
5960: PPUSH
5961: LD_INT 85
5963: PPUSH
5964: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5968: LD_VAR 0 2
5972: PPUSH
5973: LD_INT 96
5975: PPUSH
5976: LD_INT 85
5978: PPUSH
5979: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 96
5990: PPUSH
5991: LD_INT 85
5993: PPUSH
5994: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5998: LD_VAR 0 2
6002: PPUSH
6003: LD_INT 96
6005: PPUSH
6006: LD_INT 85
6008: PPUSH
6009: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6013: LD_VAR 0 2
6017: PPUSH
6018: LD_INT 96
6020: PPUSH
6021: LD_INT 85
6023: PPUSH
6024: CALL_OW 214
// wait ( 0 0$2 ) ;
6028: LD_INT 70
6030: PPUSH
6031: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6035: LD_EXP 1
6039: PPUSH
6040: LD_STRING D1a-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6047: LD_EXP 3
6051: PPUSH
6052: LD_STRING D1a-Don-1
6054: PPUSH
6055: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6059: LD_ADDR_VAR 0 1
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: CALL_OW 69
6078: PUSH
6079: FOR_IN
6080: IFFALSE 6099
// ComMoveXY ( i , 109 , 102 ) ;
6082: LD_VAR 0 1
6086: PPUSH
6087: LD_INT 109
6089: PPUSH
6090: LD_INT 102
6092: PPUSH
6093: CALL_OW 111
6097: GO 6079
6099: POP
6100: POP
// Say ( JMM , D1a-JMM-2 ) ;
6101: LD_EXP 1
6105: PPUSH
6106: LD_STRING D1a-JMM-2
6108: PPUSH
6109: CALL_OW 88
// wait ( 0 0$10 ) ;
6113: LD_INT 350
6115: PPUSH
6116: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6120: LD_EXP 1
6124: PPUSH
6125: CALL_OW 310
6129: PPUSH
6130: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6134: LD_EXP 3
6138: PPUSH
6139: LD_STRING D1b-Don-1
6141: PPUSH
6142: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6146: LD_EXP 1
6150: PPUSH
6151: LD_STRING D1b-JMM-1
6153: PPUSH
6154: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6158: LD_INT 22
6160: PUSH
6161: LD_INT 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 26
6170: PUSH
6171: LD_INT 1
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 2
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 1
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 25
6193: PUSH
6194: LD_INT 2
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 25
6203: PUSH
6204: LD_INT 3
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 25
6213: PUSH
6214: LD_INT 4
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 25
6223: PUSH
6224: LD_INT 5
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 8
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: PPUSH
6260: LD_STRING D1b-Sol1-1
6262: PPUSH
6263: LD_STRING 
6265: PPUSH
6266: CALL 12164 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6270: LD_EXP 3
6274: PPUSH
6275: LD_STRING D1b-Don-2
6277: PPUSH
6278: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6282: LD_EXP 1
6286: PPUSH
6287: LD_STRING D1b-JMM-2
6289: PPUSH
6290: CALL_OW 88
// dec = ShowQuery1 ;
6294: LD_ADDR_VAR 0 4
6298: PUSH
6299: CALL 12633 0 0
6303: ST_TO_ADDR
// if dec = 1 then
6304: LD_VAR 0 4
6308: PUSH
6309: LD_INT 1
6311: EQUAL
6312: IFFALSE 6418
// begin Say ( JMM , D2-JMM-1 ) ;
6314: LD_EXP 1
6318: PPUSH
6319: LD_STRING D2-JMM-1
6321: PPUSH
6322: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6326: LD_EXP 22
6330: PPUSH
6331: LD_STRING D2-Pow-1
6333: PPUSH
6334: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6338: LD_EXP 1
6342: PPUSH
6343: LD_STRING D2a-JMM-1
6345: PPUSH
6346: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6350: LD_EXP 22
6354: PPUSH
6355: LD_STRING D2a-Pow-1
6357: PPUSH
6358: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6362: LD_EXP 1
6366: PPUSH
6367: LD_STRING D2a-JMM-2
6369: PPUSH
6370: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6374: LD_EXP 22
6378: PPUSH
6379: LD_STRING D2a-Pow-2
6381: PPUSH
6382: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6386: LD_EXP 1
6390: PPUSH
6391: LD_STRING D2a-JMM-3
6393: PPUSH
6394: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6398: LD_EXP 22
6402: PPUSH
6403: LD_STRING D2a-Pow-3
6405: PPUSH
6406: CALL_OW 94
// secondPass = 2 ;
6410: LD_ADDR_EXP 27
6414: PUSH
6415: LD_INT 2
6417: ST_TO_ADDR
// end ; if dec = 2 then
6418: LD_VAR 0 4
6422: PUSH
6423: LD_INT 2
6425: EQUAL
6426: IFFALSE 6520
// begin Say ( JMM , D2-JMM-1 ) ;
6428: LD_EXP 1
6432: PPUSH
6433: LD_STRING D2-JMM-1
6435: PPUSH
6436: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6440: LD_EXP 22
6444: PPUSH
6445: LD_STRING D2-Pow-1
6447: PPUSH
6448: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6452: LD_EXP 1
6456: PPUSH
6457: LD_STRING D2b-JMM-1
6459: PPUSH
6460: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6464: LD_EXP 22
6468: PPUSH
6469: LD_STRING D2b-Pow-1
6471: PPUSH
6472: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6476: LD_EXP 1
6480: PPUSH
6481: LD_STRING D2c-JMM-1
6483: PPUSH
6484: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6488: LD_EXP 22
6492: PPUSH
6493: LD_STRING D2c-Pow-1
6495: PPUSH
6496: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6500: LD_EXP 1
6504: PPUSH
6505: LD_STRING D2c-JMM-2
6507: PPUSH
6508: CALL_OW 88
// secondPass = 2 ;
6512: LD_ADDR_EXP 27
6516: PUSH
6517: LD_INT 2
6519: ST_TO_ADDR
// end ; if dec = 3 then
6520: LD_VAR 0 4
6524: PUSH
6525: LD_INT 3
6527: EQUAL
6528: IFFALSE 6538
// secondPass = 1 ;
6530: LD_ADDR_EXP 27
6534: PUSH
6535: LD_INT 1
6537: ST_TO_ADDR
// InGameOff ;
6538: CALL_OW 9
// ruAI = 1 ;
6542: LD_ADDR_EXP 41
6546: PUSH
6547: LD_INT 1
6549: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6550: LD_INT 1
6552: PPUSH
6553: LD_INT 3
6555: PPUSH
6556: LD_INT 2
6558: PPUSH
6559: LD_INT 1
6561: PPUSH
6562: CALL_OW 80
// SaveForQuickRestart ;
6566: CALL_OW 22
// exit ;
6570: POP
6571: POP
6572: GO 6578
// end ; end ;
6574: GO 5920
6576: POP
6577: POP
// end ;
6578: PPOPN 4
6580: END
// every 1 1$0 trigger secondPass = 2 do
6581: LD_EXP 27
6585: PUSH
6586: LD_INT 2
6588: EQUAL
6589: IFFALSE 6809
6591: GO 6593
6593: DISABLE
// begin PowellSupport1 ;
6594: CALL 1870 0 0
// DialogueOn ;
6598: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6602: LD_EXP 1
6606: PPUSH
6607: LD_STRING DC1-JMM-1
6609: PPUSH
6610: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6614: LD_EXP 22
6618: PPUSH
6619: LD_STRING DC1-Pow-1
6621: PPUSH
6622: CALL_OW 94
// DialogueOff ;
6626: CALL_OW 7
// wait ( 3 3$0 ) ;
6630: LD_INT 6300
6632: PPUSH
6633: CALL_OW 67
// PowellSupport2 ;
6637: CALL 2329 0 0
// DialogueOn ;
6641: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6645: LD_EXP 1
6649: PPUSH
6650: LD_STRING DC2-JMM-1
6652: PPUSH
6653: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6657: LD_EXP 22
6661: PPUSH
6662: LD_STRING DC2-Pow-1
6664: PPUSH
6665: CALL_OW 94
// DialogueOff ;
6669: CALL_OW 7
// wait ( 3 3$00 ) ;
6673: LD_INT 6300
6675: PPUSH
6676: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6680: LD_INT 35
6682: PPUSH
6683: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 30
6702: PUSH
6703: LD_INT 0
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: PUSH
6734: LD_INT 11
6736: PPUSH
6737: LD_INT 22
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PPUSH
6747: CALL_OW 70
6751: NOT
6752: AND
6753: IFFALSE 6680
// wait ( 0 0$10 ) ;
6755: LD_INT 350
6757: PPUSH
6758: CALL_OW 67
// Legion ;
6762: CALL 6810 0 0
// wait ( 6 6$0 ) ;
6766: LD_INT 12600
6768: PPUSH
6769: CALL_OW 67
// PowellSupport3 ;
6773: CALL 2863 0 0
// DialogueOn ;
6777: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6781: LD_EXP 22
6785: PPUSH
6786: LD_STRING DC3-Pow-1
6788: PPUSH
6789: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6793: LD_EXP 1
6797: PPUSH
6798: LD_STRING DC3-JMM-1
6800: PPUSH
6801: CALL_OW 88
// DialogueOff ;
6805: CALL_OW 7
// end ;
6809: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
6826: PPUSH
6827: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: ST_TO_ADDR
// crates := 0 ;
6891: LD_ADDR_VAR 0 8
6895: PUSH
6896: LD_INT 0
6898: ST_TO_ADDR
// oil := 0 ;
6899: LD_ADDR_VAR 0 9
6903: PUSH
6904: LD_INT 0
6906: ST_TO_ADDR
// siberite := 0 ;
6907: LD_ADDR_VAR 0 10
6911: PUSH
6912: LD_INT 0
6914: ST_TO_ADDR
// payForNeutral := false ;
6915: LD_ADDR_VAR 0 13
6919: PUSH
6920: LD_INT 0
6922: ST_TO_ADDR
// payForHelp := false ;
6923: LD_ADDR_VAR 0 14
6927: PUSH
6928: LD_INT 0
6930: ST_TO_ADDR
// for i in tmp do
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: LD_VAR 0 5
6940: PUSH
6941: FOR_IN
6942: IFFALSE 7033
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6944: LD_ADDR_VAR 0 8
6948: PUSH
6949: LD_VAR 0 8
6953: PUSH
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 274
6963: PPUSH
6964: LD_INT 1
6966: PPUSH
6967: CALL_OW 275
6971: PLUS
6972: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6973: LD_ADDR_VAR 0 9
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 274
6992: PPUSH
6993: LD_INT 2
6995: PPUSH
6996: CALL_OW 275
7000: PLUS
7001: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7002: LD_ADDR_VAR 0 10
7006: PUSH
7007: LD_VAR 0 10
7011: PUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: CALL_OW 274
7021: PPUSH
7022: LD_INT 3
7024: PPUSH
7025: CALL_OW 275
7029: PLUS
7030: ST_TO_ADDR
// end ;
7031: GO 6941
7033: POP
7034: POP
// PrepareKurt ;
7035: CALL 4290 0 0
// if not Kurt then
7039: LD_EXP 24
7043: NOT
7044: IFFALSE 7048
// exit ;
7046: GO 9091
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7048: LD_EXP 25
7052: PPUSH
7053: LD_INT 144
7055: PPUSH
7056: LD_INT 111
7058: PPUSH
7059: CALL_OW 111
// wait ( 0 0$2 ) ;
7063: LD_INT 70
7065: PPUSH
7066: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7070: LD_INT 167
7072: PPUSH
7073: LD_INT 121
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: LD_INT 10
7081: NEG
7082: PPUSH
7083: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7087: LD_EXP 24
7091: PPUSH
7092: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7096: LD_EXP 24
7100: PPUSH
7101: CALL_OW 87
// wait ( 0 0$1 ) ;
7105: LD_INT 35
7107: PPUSH
7108: CALL_OW 67
// DialogueOn ;
7112: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7116: LD_INT 22
7118: PUSH
7119: LD_INT 1
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 26
7128: PUSH
7129: LD_INT 1
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 2
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 25
7161: PUSH
7162: LD_INT 3
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 69
7217: PPUSH
7218: LD_STRING D3-Sol1-1
7220: PPUSH
7221: LD_STRING 
7223: PPUSH
7224: CALL 12164 0 3
// if KurtStatus then
7228: LD_EXP 26
7232: IFFALSE 7332
// begin Say ( Kurt , D3-Kurt-1 ) ;
7234: LD_EXP 24
7238: PPUSH
7239: LD_STRING D3-Kurt-1
7241: PPUSH
7242: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7246: LD_EXP 1
7250: PPUSH
7251: LD_STRING D3-JMM-1
7253: PPUSH
7254: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7258: LD_EXP 24
7262: PPUSH
7263: LD_STRING D3-Kurt-2
7265: PPUSH
7266: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7270: LD_EXP 1
7274: PPUSH
7275: LD_STRING D3-JMM-2
7277: PPUSH
7278: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7282: LD_EXP 24
7286: PPUSH
7287: LD_STRING D3-Kurt-4
7289: PPUSH
7290: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7294: LD_EXP 1
7298: PPUSH
7299: LD_STRING D3-JMM-4
7301: PPUSH
7302: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7306: LD_EXP 24
7310: PPUSH
7311: LD_STRING D3-Kurt-5
7313: PPUSH
7314: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7318: LD_EXP 24
7322: PPUSH
7323: LD_STRING D3-Kurt-5a
7325: PPUSH
7326: CALL_OW 88
// end else
7330: GO 7428
// begin Say ( Kurt , D3-Kurt-1 ) ;
7332: LD_EXP 24
7336: PPUSH
7337: LD_STRING D3-Kurt-1
7339: PPUSH
7340: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7344: LD_EXP 1
7348: PPUSH
7349: LD_STRING D3-JMM-1
7351: PPUSH
7352: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7356: LD_EXP 24
7360: PPUSH
7361: LD_STRING D3-Kurt-3
7363: PPUSH
7364: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7368: LD_EXP 1
7372: PPUSH
7373: LD_STRING D3-JMM-3
7375: PPUSH
7376: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7380: LD_EXP 24
7384: PPUSH
7385: LD_STRING D3-Kurt-4
7387: PPUSH
7388: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7392: LD_EXP 1
7396: PPUSH
7397: LD_STRING D3-JMM-4
7399: PPUSH
7400: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7404: LD_EXP 24
7408: PPUSH
7409: LD_STRING D3-Kurt-5
7411: PPUSH
7412: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7416: LD_EXP 24
7420: PPUSH
7421: LD_STRING D3-Kurt-5b
7423: PPUSH
7424: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7428: LD_VAR 0 8
7432: PUSH
7433: LD_INT 120
7435: PUSH
7436: LD_INT 60
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_EXP 26
7447: PUSH
7448: LD_INT 1
7450: PLUS
7451: ARRAY
7452: GREATEREQUAL
7453: PUSH
7454: LD_VAR 0 10
7458: PUSH
7459: LD_INT 120
7461: PUSH
7462: LD_INT 60
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_EXP 26
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ARRAY
7478: GREATEREQUAL
7479: AND
7480: IFFALSE 7532
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_STRING Q2
7489: PUSH
7490: LD_STRING Q2K
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_EXP 26
7501: PUSH
7502: LD_INT 1
7504: PLUS
7505: ARRAY
7506: PPUSH
7507: LD_INT 1
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 98
7529: ST_TO_ADDR
7530: GO 7576
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_STRING Q2
7539: PUSH
7540: LD_STRING Q2K
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_EXP 26
7551: PUSH
7552: LD_INT 1
7554: PLUS
7555: ARRAY
7556: PPUSH
7557: LD_INT 1
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 98
7575: ST_TO_ADDR
// if dec1 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7618
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7586: LD_EXP 1
7590: PPUSH
7591: LD_STRING D3Ka-JMM-1
7593: PPUSH
7594: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7598: LD_EXP 24
7602: PPUSH
7603: LD_STRING D3Ka-Kurt-1
7605: PPUSH
7606: CALL_OW 88
// warWithLegion = 1 ;
7610: LD_ADDR_EXP 30
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// end ; if dec1 = 2 then
7618: LD_VAR 0 3
7622: PUSH
7623: LD_INT 2
7625: EQUAL
7626: IFFALSE 7710
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7628: LD_EXP 1
7632: PPUSH
7633: LD_STRING D3Kb-JMM-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7640: LD_EXP 24
7644: PPUSH
7645: LD_STRING D3Kb-Kurt-1
7647: PPUSH
7648: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7652: LD_ADDR_VAR 0 11
7656: PUSH
7657: LD_INT 120
7659: PUSH
7660: LD_INT 60
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_EXP 26
7671: PUSH
7672: LD_INT 1
7674: PLUS
7675: ARRAY
7676: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7677: LD_ADDR_VAR 0 12
7681: PUSH
7682: LD_INT 120
7684: PUSH
7685: LD_INT 60
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_EXP 26
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: ARRAY
7701: ST_TO_ADDR
// payForNeutral := true ;
7702: LD_ADDR_VAR 0 13
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// end ; if dec1 = 3 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 3
7717: EQUAL
7718: IFFALSE 7953
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7720: LD_EXP 1
7724: PPUSH
7725: LD_STRING D3Kc1-JMM-1
7727: PPUSH
7728: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7732: LD_EXP 24
7736: PPUSH
7737: LD_STRING D3Kc1-Kurt-1
7739: PPUSH
7740: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7744: LD_EXP 1
7748: PPUSH
7749: LD_STRING D3Kc1-JMM-2
7751: PPUSH
7752: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7756: LD_EXP 24
7760: PPUSH
7761: LD_STRING D3Kc1-Kurt-2
7763: PPUSH
7764: CALL_OW 88
// askSiberite = 1 ;
7768: LD_ADDR_EXP 32
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_STRING Q2b
7783: PPUSH
7784: LD_INT 1
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 98
7802: ST_TO_ADDR
// if dec2 = 1 then
7803: LD_VAR 0 4
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: IFFALSE 7845
// begin Say ( JMM , D4a-JMM-1 ) ;
7813: LD_EXP 1
7817: PPUSH
7818: LD_STRING D4a-JMM-1
7820: PPUSH
7821: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7825: LD_EXP 24
7829: PPUSH
7830: LD_STRING D4b-Kurt-1
7832: PPUSH
7833: CALL_OW 88
// warWithLegion = 1 ;
7837: LD_ADDR_EXP 30
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// end ; if dec2 = 2 then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7887
// begin Say ( JMM , D4b-JMM-1 ) ;
7855: LD_EXP 1
7859: PPUSH
7860: LD_STRING D4b-JMM-1
7862: PPUSH
7863: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7867: LD_EXP 24
7871: PPUSH
7872: LD_STRING D4b-Kurt-1
7874: PPUSH
7875: CALL_OW 88
// warWithLegion = 1 ;
7879: LD_ADDR_EXP 30
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// end ; if dec2 = 3 then
7887: LD_VAR 0 4
7891: PUSH
7892: LD_INT 3
7894: EQUAL
7895: IFFALSE 7953
// begin Say ( JMM , D4c-JMM-1 ) ;
7897: LD_EXP 1
7901: PPUSH
7902: LD_STRING D4c-JMM-1
7904: PPUSH
7905: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7909: LD_EXP 24
7913: PPUSH
7914: LD_STRING D4c-Kurt-1
7916: PPUSH
7917: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7921: LD_EXP 1
7925: PPUSH
7926: LD_STRING D4c-JMM-2
7928: PPUSH
7929: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7933: LD_EXP 24
7937: PPUSH
7938: LD_STRING D4c-Kurt-2
7940: PPUSH
7941: CALL_OW 88
// fakeInfo = 1 ;
7945: LD_ADDR_EXP 31
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 4
7960: EQUAL
7961: IFFALSE 8999
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7963: LD_EXP 1
7967: PPUSH
7968: LD_STRING D3Kd-JMM-1
7970: PPUSH
7971: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
7975: LD_VAR 0 8
7979: PUSH
7980: LD_INT 200
7982: PUSH
7983: LD_INT 120
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_EXP 26
7994: PUSH
7995: LD_INT 1
7997: PLUS
7998: ARRAY
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 10
8005: PUSH
8006: LD_INT 200
8008: PUSH
8009: LD_INT 120
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_EXP 26
8020: PUSH
8021: LD_INT 1
8023: PLUS
8024: ARRAY
8025: GREATEREQUAL
8026: AND
8027: IFFALSE 8079
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8029: LD_ADDR_VAR 0 4
8033: PUSH
8034: LD_STRING Q2a
8036: PUSH
8037: LD_STRING Q2aK
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_EXP 26
8048: PUSH
8049: LD_INT 1
8051: PLUS
8052: ARRAY
8053: PPUSH
8054: LD_INT 1
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: LD_INT 3
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 98
8076: ST_TO_ADDR
8077: GO 8219
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8079: LD_VAR 0 8
8083: PUSH
8084: LD_INT 120
8086: PUSH
8087: LD_INT 60
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_EXP 26
8098: PUSH
8099: LD_INT 1
8101: PLUS
8102: ARRAY
8103: GREATEREQUAL
8104: PUSH
8105: LD_VAR 0 10
8109: PUSH
8110: LD_INT 120
8112: PUSH
8113: LD_INT 60
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_EXP 26
8124: PUSH
8125: LD_INT 1
8127: PLUS
8128: ARRAY
8129: GREATEREQUAL
8130: AND
8131: IFFALSE 8179
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_STRING Q2a
8140: PUSH
8141: LD_STRING Q2aK
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_EXP 26
8152: PUSH
8153: LD_INT 1
8155: PLUS
8156: ARRAY
8157: PPUSH
8158: LD_INT 1
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: LD_INT 4
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 98
8176: ST_TO_ADDR
8177: GO 8219
// begin dec2 := 0 ;
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: LD_INT 0
8186: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8187: LD_EXP 1
8191: PPUSH
8192: LD_STRING D3Kc1-JMM-1
8194: PPUSH
8195: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8199: LD_EXP 24
8203: PPUSH
8204: LD_STRING D3Kc2-Kurt-1
8206: PPUSH
8207: CALL_OW 88
// warWithLegion := 1 ;
8211: LD_ADDR_EXP 30
8215: PUSH
8216: LD_INT 1
8218: ST_TO_ADDR
// end ; if dec2 = 1 then
8219: LD_VAR 0 4
8223: PUSH
8224: LD_INT 1
8226: EQUAL
8227: IFFALSE 8261
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8229: LD_EXP 1
8233: PPUSH
8234: LD_STRING D5Ka-JMM-1
8236: PPUSH
8237: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8241: LD_EXP 24
8245: PPUSH
8246: LD_STRING D5Ka-Kurt-1
8248: PPUSH
8249: CALL_OW 88
// warWithLegion = 1 ;
8253: LD_ADDR_EXP 30
8257: PUSH
8258: LD_INT 1
8260: ST_TO_ADDR
// end ; if dec2 = 2 then
8261: LD_VAR 0 4
8265: PUSH
8266: LD_INT 2
8268: EQUAL
8269: IFFALSE 8353
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8271: LD_EXP 1
8275: PPUSH
8276: LD_STRING D3Kb-JMM-1
8278: PPUSH
8279: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8283: LD_EXP 24
8287: PPUSH
8288: LD_STRING D3Kb-Kurt-1
8290: PPUSH
8291: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8295: LD_ADDR_VAR 0 11
8299: PUSH
8300: LD_INT 120
8302: PUSH
8303: LD_INT 60
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_EXP 26
8314: PUSH
8315: LD_INT 1
8317: PLUS
8318: ARRAY
8319: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8320: LD_ADDR_VAR 0 12
8324: PUSH
8325: LD_INT 120
8327: PUSH
8328: LD_INT 60
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_EXP 26
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ARRAY
8344: ST_TO_ADDR
// payForNeutral := true ;
8345: LD_ADDR_VAR 0 13
8349: PUSH
8350: LD_INT 1
8352: ST_TO_ADDR
// end ; if dec2 = 3 then
8353: LD_VAR 0 4
8357: PUSH
8358: LD_INT 3
8360: EQUAL
8361: IFFALSE 8445
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8363: LD_EXP 1
8367: PPUSH
8368: LD_STRING D3Ke-JMM-1
8370: PPUSH
8371: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8375: LD_EXP 24
8379: PPUSH
8380: LD_STRING D3Ke-Kurt-1
8382: PPUSH
8383: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8387: LD_ADDR_VAR 0 11
8391: PUSH
8392: LD_INT 200
8394: PUSH
8395: LD_INT 120
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: LD_EXP 26
8406: PUSH
8407: LD_INT 1
8409: PLUS
8410: ARRAY
8411: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8412: LD_ADDR_VAR 0 12
8416: PUSH
8417: LD_INT 200
8419: PUSH
8420: LD_INT 120
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_EXP 26
8431: PUSH
8432: LD_INT 1
8434: PLUS
8435: ARRAY
8436: ST_TO_ADDR
// payForHelp := true ;
8437: LD_ADDR_VAR 0 14
8441: PUSH
8442: LD_INT 1
8444: ST_TO_ADDR
// end ; if dec2 = 4 then
8445: LD_VAR 0 4
8449: PUSH
8450: LD_INT 4
8452: EQUAL
8453: IFFALSE 8688
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8455: LD_EXP 1
8459: PPUSH
8460: LD_STRING D3Kc1-JMM-1
8462: PPUSH
8463: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8467: LD_EXP 24
8471: PPUSH
8472: LD_STRING D3Kc1-Kurt-1
8474: PPUSH
8475: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8479: LD_EXP 1
8483: PPUSH
8484: LD_STRING D3Kc1-JMM-2
8486: PPUSH
8487: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8491: LD_EXP 24
8495: PPUSH
8496: LD_STRING D3Kc1-Kurt-2
8498: PPUSH
8499: CALL_OW 88
// askSiberite = 1 ;
8503: LD_ADDR_EXP 32
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8511: LD_ADDR_VAR 0 4
8515: PUSH
8516: LD_STRING Q2b
8518: PPUSH
8519: LD_INT 1
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: LIST
8532: PPUSH
8533: CALL_OW 98
8537: ST_TO_ADDR
// if dec2 = 1 then
8538: LD_VAR 0 4
8542: PUSH
8543: LD_INT 1
8545: EQUAL
8546: IFFALSE 8580
// begin Say ( JMM , D4a-JMM-1 ) ;
8548: LD_EXP 1
8552: PPUSH
8553: LD_STRING D4a-JMM-1
8555: PPUSH
8556: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8560: LD_EXP 24
8564: PPUSH
8565: LD_STRING D4b-Kurt-1
8567: PPUSH
8568: CALL_OW 88
// warWithLegion = 1 ;
8572: LD_ADDR_EXP 30
8576: PUSH
8577: LD_INT 1
8579: ST_TO_ADDR
// end ; if dec2 = 2 then
8580: LD_VAR 0 4
8584: PUSH
8585: LD_INT 2
8587: EQUAL
8588: IFFALSE 8622
// begin Say ( JMM , D4b-JMM-1 ) ;
8590: LD_EXP 1
8594: PPUSH
8595: LD_STRING D4b-JMM-1
8597: PPUSH
8598: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8602: LD_EXP 24
8606: PPUSH
8607: LD_STRING D4b-Kurt-1
8609: PPUSH
8610: CALL_OW 88
// warWithLegion = 1 ;
8614: LD_ADDR_EXP 30
8618: PUSH
8619: LD_INT 1
8621: ST_TO_ADDR
// end ; if dec2 = 3 then
8622: LD_VAR 0 4
8626: PUSH
8627: LD_INT 3
8629: EQUAL
8630: IFFALSE 8688
// begin Say ( JMM , D4c-JMM-1 ) ;
8632: LD_EXP 1
8636: PPUSH
8637: LD_STRING D4c-JMM-1
8639: PPUSH
8640: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8644: LD_EXP 24
8648: PPUSH
8649: LD_STRING D4c-Kurt-1
8651: PPUSH
8652: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D4c-JMM-2
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8668: LD_EXP 24
8672: PPUSH
8673: LD_STRING D4c-Kurt-2
8675: PPUSH
8676: CALL_OW 88
// fakeInfo = 1 ;
8680: LD_ADDR_EXP 31
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8688: LD_VAR 0 13
8692: PUSH
8693: LD_VAR 0 14
8697: OR
8698: IFFALSE 8999
// begin for i in tmp do
8700: LD_ADDR_VAR 0 2
8704: PUSH
8705: LD_VAR 0 5
8709: PUSH
8710: FOR_IN
8711: IFFALSE 8997
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8713: LD_ADDR_VAR 0 6
8717: PUSH
8718: LD_VAR 0 2
8722: PPUSH
8723: CALL_OW 274
8727: PPUSH
8728: LD_INT 1
8730: PPUSH
8731: CALL_OW 275
8735: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8736: LD_ADDR_VAR 0 7
8740: PUSH
8741: LD_VAR 0 2
8745: PPUSH
8746: CALL_OW 274
8750: PPUSH
8751: LD_INT 3
8753: PPUSH
8754: CALL_OW 275
8758: ST_TO_ADDR
// if cr then
8759: LD_VAR 0 11
8763: IFFALSE 8877
// begin if tmp2 and tmp2 < cr then
8765: LD_VAR 0 6
8769: PUSH
8770: LD_VAR 0 6
8774: PUSH
8775: LD_VAR 0 11
8779: LESS
8780: AND
8781: IFFALSE 8829
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8783: LD_VAR 0 2
8787: PPUSH
8788: CALL_OW 274
8792: PPUSH
8793: LD_INT 1
8795: PPUSH
8796: LD_VAR 0 11
8800: PUSH
8801: LD_VAR 0 6
8805: MINUS
8806: PPUSH
8807: CALL_OW 277
// cr := cr - tmp2 ;
8811: LD_ADDR_VAR 0 11
8815: PUSH
8816: LD_VAR 0 11
8820: PUSH
8821: LD_VAR 0 6
8825: MINUS
8826: ST_TO_ADDR
// end else
8827: GO 8877
// if tmp2 > cr then
8829: LD_VAR 0 6
8833: PUSH
8834: LD_VAR 0 11
8838: GREATER
8839: IFFALSE 8877
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL_OW 274
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_VAR 0 6
8858: PUSH
8859: LD_VAR 0 11
8863: MINUS
8864: PPUSH
8865: CALL_OW 277
// cr := 0 ;
8869: LD_ADDR_VAR 0 11
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// end ; end ; if sb then
8877: LD_VAR 0 12
8881: IFFALSE 8995
// begin if tmp3 and tmp3 < sb then
8883: LD_VAR 0 7
8887: PUSH
8888: LD_VAR 0 7
8892: PUSH
8893: LD_VAR 0 12
8897: LESS
8898: AND
8899: IFFALSE 8947
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8901: LD_VAR 0 2
8905: PPUSH
8906: CALL_OW 274
8910: PPUSH
8911: LD_INT 3
8913: PPUSH
8914: LD_VAR 0 12
8918: PUSH
8919: LD_VAR 0 7
8923: MINUS
8924: PPUSH
8925: CALL_OW 277
// sb := sb - tmp3 ;
8929: LD_ADDR_VAR 0 12
8933: PUSH
8934: LD_VAR 0 12
8938: PUSH
8939: LD_VAR 0 7
8943: MINUS
8944: ST_TO_ADDR
// end else
8945: GO 8995
// if tmp3 > sb then
8947: LD_VAR 0 7
8951: PUSH
8952: LD_VAR 0 12
8956: GREATER
8957: IFFALSE 8995
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: CALL_OW 274
8968: PPUSH
8969: LD_INT 3
8971: PPUSH
8972: LD_VAR 0 7
8976: PUSH
8977: LD_VAR 0 12
8981: MINUS
8982: PPUSH
8983: CALL_OW 277
// sb := 0 ;
8987: LD_ADDR_VAR 0 12
8991: PUSH
8992: LD_INT 0
8994: ST_TO_ADDR
// end ; end ; end ;
8995: GO 8710
8997: POP
8998: POP
// end ; end ; DialogueOff ;
8999: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9003: LD_INT 167
9005: PPUSH
9006: LD_INT 121
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9016: LD_EXP 24
9020: PPUSH
9021: LD_EXP 25
9025: PPUSH
9026: CALL_OW 120
// wait ( 0 0$1 ) ;
9030: LD_INT 35
9032: PPUSH
9033: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9037: LD_EXP 25
9041: PPUSH
9042: LD_INT 4
9044: PPUSH
9045: CALL_OW 113
// wait ( 0 0$3 ) ;
9049: LD_INT 105
9051: PPUSH
9052: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9056: LD_EXP 24
9060: PPUSH
9061: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9065: LD_EXP 25
9069: PPUSH
9070: CALL_OW 64
// wait ( 0 0$3 ) ;
9074: LD_INT 105
9076: PPUSH
9077: CALL_OW 67
// if payForHelp then
9081: LD_VAR 0 14
9085: IFFALSE 9091
// PrepareLegionForPlayer ;
9087: CALL 4490 0 0
// end ;
9091: LD_VAR 0 1
9095: RET
// every 0 0$10 trigger warWithLegion = 1 do
9096: LD_EXP 30
9100: PUSH
9101: LD_INT 1
9103: EQUAL
9104: IFFALSE 9113
9106: GO 9108
9108: DISABLE
// PrepareAttackLegion ;
9109: CALL 5154 0 0
9113: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9114: LD_EXP 15
9118: PPUSH
9119: CALL_OW 305
9123: PUSH
9124: LD_EXP 15
9128: PPUSH
9129: LD_INT 1
9131: PPUSH
9132: CALL_OW 289
9136: NOT
9137: AND
9138: PUSH
9139: LD_EXP 15
9143: PPUSH
9144: LD_INT 2
9146: PPUSH
9147: CALL_OW 289
9151: NOT
9152: AND
9153: PUSH
9154: LD_EXP 15
9158: PPUSH
9159: LD_INT 3
9161: PPUSH
9162: CALL_OW 289
9166: NOT
9167: AND
9168: IFFALSE 9185
9170: GO 9172
9172: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9173: LD_EXP 15
9177: PPUSH
9178: LD_INT 4
9180: PPUSH
9181: CALL_OW 235
9185: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9186: LD_EXP 16
9190: PPUSH
9191: CALL_OW 305
9195: PUSH
9196: LD_EXP 16
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 289
9208: NOT
9209: AND
9210: PUSH
9211: LD_EXP 16
9215: PPUSH
9216: LD_INT 2
9218: PPUSH
9219: CALL_OW 289
9223: NOT
9224: AND
9225: PUSH
9226: LD_EXP 16
9230: PPUSH
9231: LD_INT 3
9233: PPUSH
9234: CALL_OW 289
9238: NOT
9239: AND
9240: IFFALSE 9257
9242: GO 9244
9244: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9245: LD_EXP 16
9249: PPUSH
9250: LD_INT 4
9252: PPUSH
9253: CALL_OW 235
9257: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9258: LD_EXP 17
9262: PPUSH
9263: CALL_OW 305
9267: PUSH
9268: LD_EXP 17
9272: PPUSH
9273: LD_INT 1
9275: PPUSH
9276: CALL_OW 289
9280: NOT
9281: AND
9282: PUSH
9283: LD_EXP 17
9287: PPUSH
9288: LD_INT 2
9290: PPUSH
9291: CALL_OW 289
9295: NOT
9296: AND
9297: PUSH
9298: LD_EXP 17
9302: PPUSH
9303: LD_INT 3
9305: PPUSH
9306: CALL_OW 289
9310: NOT
9311: AND
9312: IFFALSE 9329
9314: GO 9316
9316: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9317: LD_EXP 17
9321: PPUSH
9322: LD_INT 4
9324: PPUSH
9325: CALL_OW 235
9329: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9330: LD_EXP 18
9334: PPUSH
9335: CALL_OW 305
9339: PUSH
9340: LD_EXP 18
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 289
9352: NOT
9353: AND
9354: PUSH
9355: LD_EXP 18
9359: PPUSH
9360: LD_INT 2
9362: PPUSH
9363: CALL_OW 289
9367: NOT
9368: AND
9369: PUSH
9370: LD_EXP 18
9374: PPUSH
9375: LD_INT 3
9377: PPUSH
9378: CALL_OW 289
9382: NOT
9383: AND
9384: IFFALSE 9401
9386: GO 9388
9388: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9389: LD_EXP 18
9393: PPUSH
9394: LD_INT 4
9396: PPUSH
9397: CALL_OW 235
9401: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9402: LD_EXP 19
9406: PPUSH
9407: CALL_OW 305
9411: PUSH
9412: LD_EXP 19
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: CALL_OW 289
9424: NOT
9425: AND
9426: PUSH
9427: LD_EXP 19
9431: PPUSH
9432: LD_INT 2
9434: PPUSH
9435: CALL_OW 289
9439: NOT
9440: AND
9441: PUSH
9442: LD_EXP 19
9446: PPUSH
9447: LD_INT 3
9449: PPUSH
9450: CALL_OW 289
9454: NOT
9455: AND
9456: PUSH
9457: LD_EXP 19
9461: PPUSH
9462: LD_INT 2
9464: PPUSH
9465: CALL_OW 289
9469: NOT
9470: AND
9471: IFFALSE 9488
9473: GO 9475
9475: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9476: LD_EXP 19
9480: PPUSH
9481: LD_INT 4
9483: PPUSH
9484: CALL_OW 235
9488: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9489: LD_EXP 20
9493: PPUSH
9494: CALL_OW 305
9498: PUSH
9499: LD_EXP 20
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 289
9511: NOT
9512: AND
9513: PUSH
9514: LD_EXP 20
9518: PPUSH
9519: LD_INT 2
9521: PPUSH
9522: CALL_OW 289
9526: NOT
9527: AND
9528: PUSH
9529: LD_EXP 20
9533: PPUSH
9534: LD_INT 3
9536: PPUSH
9537: CALL_OW 289
9541: NOT
9542: AND
9543: IFFALSE 9560
9545: GO 9547
9547: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9548: LD_EXP 20
9552: PPUSH
9553: LD_INT 4
9555: PPUSH
9556: CALL_OW 235
9560: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9561: LD_EXP 21
9565: PPUSH
9566: CALL_OW 305
9570: PUSH
9571: LD_EXP 21
9575: PPUSH
9576: LD_INT 1
9578: PPUSH
9579: CALL_OW 289
9583: NOT
9584: AND
9585: PUSH
9586: LD_EXP 21
9590: PPUSH
9591: LD_INT 2
9593: PPUSH
9594: CALL_OW 289
9598: NOT
9599: AND
9600: PUSH
9601: LD_EXP 21
9605: PPUSH
9606: LD_INT 3
9608: PPUSH
9609: CALL_OW 289
9613: NOT
9614: AND
9615: IFFALSE 9632
9617: GO 9619
9619: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9620: LD_EXP 21
9624: PPUSH
9625: LD_INT 4
9627: PPUSH
9628: CALL_OW 235
9632: END
// every 0 0$1 do var i ;
9633: GO 9635
9635: DISABLE
9636: LD_INT 0
9638: PPUSH
// begin enable ;
9639: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9640: LD_ADDR_VAR 0 1
9644: PUSH
9645: LD_INT 22
9647: PUSH
9648: LD_INT 4
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PPUSH
9655: CALL_OW 69
9659: PUSH
9660: FOR_IN
9661: IFFALSE 9700
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9663: LD_VAR 0 1
9667: PPUSH
9668: LD_INT 4
9670: PPUSH
9671: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9675: LD_VAR 0 1
9679: PPUSH
9680: LD_INT 4
9682: PPUSH
9683: CALL_OW 308
9687: IFFALSE 9698
// RemoveUnit ( i ) ;
9689: LD_VAR 0 1
9693: PPUSH
9694: CALL_OW 64
// end ;
9698: GO 9660
9700: POP
9701: POP
// end ;
9702: PPOPN 1
9704: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9705: LD_EXP 27
9709: PUSH
9710: LD_INT 1
9712: EQUAL
9713: IFFALSE 10152
9715: GO 9717
9717: DISABLE
9718: LD_INT 0
9720: PPUSH
9721: PPUSH
9722: PPUSH
// begin enable ;
9723: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9724: LD_ADDR_VAR 0 2
9728: PUSH
9729: LD_INT 12
9731: PPUSH
9732: LD_INT 22
9734: PUSH
9735: LD_INT 3
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: LD_INT 21
9744: PUSH
9745: LD_INT 2
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PPUSH
9756: CALL_OW 70
9760: ST_TO_ADDR
// for i in enemyVehs do
9761: LD_ADDR_VAR 0 1
9765: PUSH
9766: LD_VAR 0 2
9770: PUSH
9771: FOR_IN
9772: IFFALSE 10150
// begin if See ( 1 , i ) then
9774: LD_INT 1
9776: PPUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 292
9786: IFFALSE 10148
// begin disable ;
9788: DISABLE
// DialogueOn ;
9789: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9793: LD_VAR 0 1
9797: PPUSH
9798: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9802: LD_INT 22
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 26
9814: PUSH
9815: LD_INT 1
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 2
9824: PUSH
9825: LD_INT 25
9827: PUSH
9828: LD_INT 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: LD_INT 25
9837: PUSH
9838: LD_INT 2
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 25
9847: PUSH
9848: LD_INT 3
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 25
9857: PUSH
9858: LD_INT 4
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 25
9867: PUSH
9868: LD_INT 5
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 25
9877: PUSH
9878: LD_INT 8
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 69
9903: PPUSH
9904: LD_STRING DT1-Sol1-1
9906: PPUSH
9907: LD_STRING DT1-FSol1-1
9909: PPUSH
9910: CALL 12164 0 3
// dec = ShowQuery2 ;
9914: LD_ADDR_VAR 0 3
9918: PUSH
9919: CALL 12707 0 0
9923: ST_TO_ADDR
// if dec = 1 then
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 1
9931: EQUAL
9932: IFFALSE 10038
// begin Say ( JMM , D2-JMM-1 ) ;
9934: LD_EXP 1
9938: PPUSH
9939: LD_STRING D2-JMM-1
9941: PPUSH
9942: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9946: LD_EXP 22
9950: PPUSH
9951: LD_STRING D2-Pow-1
9953: PPUSH
9954: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9958: LD_EXP 1
9962: PPUSH
9963: LD_STRING D2a-JMM-1
9965: PPUSH
9966: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9970: LD_EXP 22
9974: PPUSH
9975: LD_STRING D2a-Pow-1
9977: PPUSH
9978: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9982: LD_EXP 1
9986: PPUSH
9987: LD_STRING D2a-JMM-2
9989: PPUSH
9990: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9994: LD_EXP 22
9998: PPUSH
9999: LD_STRING D2a-Pow-2
10001: PPUSH
10002: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10006: LD_EXP 1
10010: PPUSH
10011: LD_STRING D2a-JMM-3
10013: PPUSH
10014: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10018: LD_EXP 22
10022: PPUSH
10023: LD_STRING D2a-Pow-3
10025: PPUSH
10026: CALL_OW 94
// secondPass = 2 ;
10030: LD_ADDR_EXP 27
10034: PUSH
10035: LD_INT 2
10037: ST_TO_ADDR
// end ; if dec = 2 then
10038: LD_VAR 0 3
10042: PUSH
10043: LD_INT 2
10045: EQUAL
10046: IFFALSE 10140
// begin Say ( JMM , D2-JMM-1 ) ;
10048: LD_EXP 1
10052: PPUSH
10053: LD_STRING D2-JMM-1
10055: PPUSH
10056: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10060: LD_EXP 22
10064: PPUSH
10065: LD_STRING D2-Pow-1
10067: PPUSH
10068: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10072: LD_EXP 1
10076: PPUSH
10077: LD_STRING D2b-JMM-1
10079: PPUSH
10080: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10084: LD_EXP 22
10088: PPUSH
10089: LD_STRING D2b-Pow-1
10091: PPUSH
10092: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10096: LD_EXP 1
10100: PPUSH
10101: LD_STRING D2c-JMM-1
10103: PPUSH
10104: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10108: LD_EXP 22
10112: PPUSH
10113: LD_STRING D2c-Pow-1
10115: PPUSH
10116: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10120: LD_EXP 1
10124: PPUSH
10125: LD_STRING D2c-JMM-2
10127: PPUSH
10128: CALL_OW 88
// secondPass = 2 ;
10132: LD_ADDR_EXP 27
10136: PUSH
10137: LD_INT 2
10139: ST_TO_ADDR
// end ; DialogueOff ;
10140: CALL_OW 7
// exit ;
10144: POP
10145: POP
10146: GO 10152
// end ; end ;
10148: GO 9771
10150: POP
10151: POP
// end ;
10152: PPOPN 3
10154: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10155: LD_EXP 28
10159: PUSH
10160: LD_INT 1
10162: EQUAL
10163: IFFALSE 10396
10165: GO 10167
10167: DISABLE
10168: LD_INT 0
10170: PPUSH
10171: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10172: LD_ADDR_VAR 0 2
10176: PUSH
10177: LD_INT 11
10179: PPUSH
10180: LD_INT 22
10182: PUSH
10183: LD_INT 3
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 24
10192: PUSH
10193: LD_INT 250
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PPUSH
10204: CALL_OW 70
10208: ST_TO_ADDR
// enable ;
10209: ENABLE
// for i in vehicles do
10210: LD_ADDR_VAR 0 1
10214: PUSH
10215: LD_VAR 0 2
10219: PUSH
10220: FOR_IN
10221: IFFALSE 10394
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10223: LD_INT 1
10225: PPUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: CALL_OW 292
10235: PUSH
10236: LD_EXP 28
10240: PUSH
10241: LD_INT 1
10243: EQUAL
10244: AND
10245: PUSH
10246: LD_EXP 29
10250: PUSH
10251: LD_INT 4
10253: LESSEQUAL
10254: AND
10255: IFFALSE 10392
// begin disable ;
10257: DISABLE
// DialogueOn ;
10258: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10262: LD_INT 22
10264: PUSH
10265: LD_INT 1
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 26
10274: PUSH
10275: LD_INT 1
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 2
10284: PUSH
10285: LD_INT 25
10287: PUSH
10288: LD_INT 1
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 25
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 25
10307: PUSH
10308: LD_INT 3
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 25
10317: PUSH
10318: LD_INT 4
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 25
10327: PUSH
10328: LD_INT 5
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 8
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 69
10363: PPUSH
10364: LD_STRING DT1-Sol1-1
10366: PPUSH
10367: LD_STRING DT1-FSol1-1
10369: PPUSH
10370: CALL 12164 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10374: LD_EXP 1
10378: PPUSH
10379: LD_STRING DT1-JMM-1
10381: PPUSH
10382: CALL_OW 88
// DialogueOff ;
10386: CALL_OW 7
// break ;
10390: GO 10394
// end ; end ;
10392: GO 10220
10394: POP
10395: POP
// end ;
10396: PPOPN 2
10398: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10399: LD_EXP 28
10403: PUSH
10404: LD_INT 1
10406: EQUAL
10407: PUSH
10408: LD_INT 11
10410: PPUSH
10411: LD_INT 22
10413: PUSH
10414: LD_INT 3
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 24
10423: PUSH
10424: LD_INT 251
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 2
10433: PUSH
10434: LD_INT 21
10436: PUSH
10437: LD_INT 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 21
10446: PUSH
10447: LD_INT 1
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: PPUSH
10464: CALL_OW 70
10468: PUSH
10469: LD_INT 0
10471: EQUAL
10472: AND
10473: PUSH
10474: LD_EXP 29
10478: AND
10479: IFFALSE 10636
10481: GO 10483
10483: DISABLE
// begin vehicleTeleported = 2 ;
10484: LD_ADDR_EXP 28
10488: PUSH
10489: LD_INT 2
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10496: LD_EXP 1
10500: PPUSH
10501: LD_STRING DT1a-JMM-1
10503: PPUSH
10504: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10508: LD_INT 22
10510: PUSH
10511: LD_INT 1
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 26
10520: PUSH
10521: LD_INT 1
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: LD_INT 25
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: LD_INT 25
10553: PUSH
10554: LD_INT 3
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 25
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 25
10573: PUSH
10574: LD_INT 5
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 25
10583: PUSH
10584: LD_INT 8
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 69
10609: PPUSH
10610: LD_STRING DT1a-Sol1-1
10612: PPUSH
10613: LD_STRING DT1a-FSol1-1
10615: PPUSH
10616: CALL 12164 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10620: LD_EXP 1
10624: PPUSH
10625: LD_STRING DT1a-JMM-2
10627: PPUSH
10628: CALL_OW 88
// DialogueOff ;
10632: CALL_OW 7
// end ;
10636: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10637: LD_EXP 28
10641: PUSH
10642: LD_INT 3
10644: EQUAL
10645: PUSH
10646: LD_INT 11
10648: PPUSH
10649: LD_INT 22
10651: PUSH
10652: LD_INT 3
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 101
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 70
10677: AND
10678: IFFALSE 10959
10680: GO 10682
10682: DISABLE
10683: LD_INT 0
10685: PPUSH
10686: PPUSH
10687: PPUSH
// begin wait ( 0 0$0.3 ) ;
10688: LD_INT 10
10690: PPUSH
10691: CALL_OW 67
// DialogueOn ;
10695: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10699: LD_ADDR_VAR 0 3
10703: PUSH
10704: LD_INT 22
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 26
10716: PUSH
10717: LD_INT 1
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 2
10726: PUSH
10727: LD_INT 25
10729: PUSH
10730: LD_INT 1
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 25
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 25
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 4
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 25
10769: PUSH
10770: LD_INT 5
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 25
10779: PUSH
10780: LD_INT 8
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: PPUSH
10806: LD_STRING DT2-Sol1-1
10808: PPUSH
10809: LD_STRING DT2-FSol1-1
10811: PPUSH
10812: CALL 12164 0 3
10816: ST_TO_ADDR
// DialogueOff ;
10817: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10821: LD_INT 35
10823: PPUSH
10824: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) = 0 ;
10828: LD_INT 11
10830: PPUSH
10831: LD_INT 22
10833: PUSH
10834: LD_INT 3
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 24
10843: PUSH
10844: LD_INT 250
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 70
10859: PUSH
10860: LD_INT 0
10862: EQUAL
10863: IFFALSE 10821
// wait ( 0 0$2 ) ;
10865: LD_INT 70
10867: PPUSH
10868: CALL_OW 67
// vehicleTeleported = 4 ;
10872: LD_ADDR_EXP 28
10876: PUSH
10877: LD_INT 4
10879: ST_TO_ADDR
// DialogueOn ;
10880: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10884: LD_EXP 1
10888: PPUSH
10889: LD_STRING DT2a-JMM-1
10891: PPUSH
10892: CALL_OW 88
// if speaker then
10896: LD_VAR 0 3
10900: IFFALSE 10943
// if GetSex ( speaker ) = 1 then
10902: LD_VAR 0 3
10906: PPUSH
10907: CALL_OW 258
10911: PUSH
10912: LD_INT 1
10914: EQUAL
10915: IFFALSE 10931
// Say ( speaker , DT2a-Sol1-1 ) else
10917: LD_VAR 0 3
10921: PPUSH
10922: LD_STRING DT2a-Sol1-1
10924: PPUSH
10925: CALL_OW 88
10929: GO 10943
// Say ( speaker , DT2a-FSol1-1 ) ;
10931: LD_VAR 0 3
10935: PPUSH
10936: LD_STRING DT2a-FSol1-1
10938: PPUSH
10939: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10943: LD_EXP 3
10947: PPUSH
10948: LD_STRING DT2a-Don-1
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// end ;
10959: PPOPN 3
10961: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10962: LD_INT 1
10964: PPUSH
10965: LD_INT 45
10967: PPUSH
10968: LD_INT 74
10970: PPUSH
10971: CALL_OW 293
10975: IFFALSE 11139
10977: GO 10979
10979: DISABLE
// begin DialogueOn ;
10980: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10984: LD_INT 36
10986: PPUSH
10987: LD_INT 55
10989: PPUSH
10990: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10994: LD_INT 22
10996: PUSH
10997: LD_INT 1
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 26
11006: PUSH
11007: LD_INT 1
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 2
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 1
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 25
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 25
11039: PUSH
11040: LD_INT 3
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 25
11049: PUSH
11050: LD_INT 4
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 25
11059: PUSH
11060: LD_INT 5
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: LD_INT 25
11069: PUSH
11070: LD_INT 8
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: PPUSH
11096: LD_STRING D5-Sol1-1
11098: PPUSH
11099: LD_STRING D5-FSol1-
11101: PPUSH
11102: CALL 12164 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11106: LD_EXP 30
11110: PUSH
11111: LD_EXP 3
11115: PPUSH
11116: CALL_OW 302
11120: AND
11121: IFFALSE 11135
// Say ( Donaldson , D5-Don-1 ) ;
11123: LD_EXP 3
11127: PPUSH
11128: LD_STRING D5-Don-1
11130: PPUSH
11131: CALL_OW 88
// DialogueOff ;
11135: CALL_OW 7
// end ;
11139: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11140: LD_INT 1
11142: PPUSH
11143: LD_INT 10
11145: PPUSH
11146: CALL_OW 292
11150: PUSH
11151: LD_INT 1
11153: PPUSH
11154: LD_INT 137
11156: PPUSH
11157: CALL_OW 292
11161: OR
11162: IFFALSE 11306
11164: GO 11166
11166: DISABLE
// begin DialogueOn ;
11167: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11171: LD_INT 22
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 26
11183: PUSH
11184: LD_INT 1
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 2
11193: PUSH
11194: LD_INT 25
11196: PUSH
11197: LD_INT 1
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 25
11206: PUSH
11207: LD_INT 2
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 25
11216: PUSH
11217: LD_INT 3
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 25
11226: PUSH
11227: LD_INT 4
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 25
11236: PUSH
11237: LD_INT 5
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 25
11246: PUSH
11247: LD_INT 8
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: PPUSH
11268: CALL_OW 69
11272: PPUSH
11273: LD_STRING DT3-Sol1-1
11275: PPUSH
11276: LD_STRING DT3-FSol1-1
11278: PPUSH
11279: CALL 12164 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11283: LD_EXP 1
11287: PPUSH
11288: LD_STRING DT3-JMM-1
11290: PPUSH
11291: CALL_OW 88
// DialogueOff ;
11295: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11299: LD_STRING M2
11301: PPUSH
11302: CALL_OW 337
// end ;
11306: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11307: LD_EXP 42
11311: PUSH
11312: LD_INT 0
11314: EQUAL
11315: IFFALSE 11398
11317: GO 11319
11319: DISABLE
11320: LD_INT 0
11322: PPUSH
// begin enable ;
11323: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11324: LD_ADDR_VAR 0 1
11328: PUSH
11329: LD_INT 10
11331: PPUSH
11332: LD_INT 22
11334: PUSH
11335: LD_INT 3
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 21
11344: PUSH
11345: LD_INT 2
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 58
11354: PUSH
11355: EMPTY
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 70
11367: PUSH
11368: FOR_IN
11369: IFFALSE 11396
// if GetLives ( i ) < 1000 then
11371: LD_VAR 0 1
11375: PPUSH
11376: CALL_OW 256
11380: PUSH
11381: LD_INT 1000
11383: LESS
11384: IFFALSE 11394
// ruEscape = 1 ;
11386: LD_ADDR_EXP 42
11390: PUSH
11391: LD_INT 1
11393: ST_TO_ADDR
11394: GO 11368
11396: POP
11397: POP
// end ;
11398: PPOPN 1
11400: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11401: LD_INT 3
11403: PPUSH
11404: CALL_OW 303
11408: PUSH
11409: LD_INT 4
11411: PPUSH
11412: CALL_OW 303
11416: OR
11417: PUSH
11418: LD_INT 22
11420: PPUSH
11421: LD_INT 22
11423: PUSH
11424: LD_INT 1
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PPUSH
11431: CALL_OW 70
11435: PUSH
11436: LD_INT 0
11438: GREATER
11439: OR
11440: PUSH
11441: LD_EXP 42
11445: PUSH
11446: LD_INT 1
11448: EQUAL
11449: OR
11450: IFFALSE 11681
11452: GO 11454
11454: DISABLE
11455: LD_INT 0
11457: PPUSH
11458: PPUSH
11459: PPUSH
// begin ruAI = 0 ;
11460: LD_ADDR_EXP 41
11464: PUSH
11465: LD_INT 0
11467: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11468: LD_ADDR_VAR 0 3
11472: PUSH
11473: LD_INT 10
11475: PPUSH
11476: LD_INT 22
11478: PUSH
11479: LD_INT 3
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 21
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 58
11498: PUSH
11499: EMPTY
11500: LIST
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: PPUSH
11507: CALL_OW 70
11511: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11512: LD_EXP 34
11516: PPUSH
11517: CALL_OW 122
// wait ( 0 0$1 ) ;
11521: LD_INT 35
11523: PPUSH
11524: CALL_OW 67
// DialogueOn ;
11528: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11532: LD_EXP 1
11536: PPUSH
11537: LD_STRING D6-JMM-1
11539: PPUSH
11540: CALL_OW 88
// DialogueOff ;
11544: CALL_OW 7
// if vehs > 0 then
11548: LD_VAR 0 3
11552: PUSH
11553: LD_INT 0
11555: GREATER
11556: IFFALSE 11626
// for i := 1 to RuScientists do
11558: LD_ADDR_VAR 0 1
11562: PUSH
11563: DOUBLE
11564: LD_INT 1
11566: DEC
11567: ST_TO_ADDR
11568: LD_EXP 34
11572: PUSH
11573: FOR_TO
11574: IFFALSE 11622
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11576: LD_EXP 34
11580: PUSH
11581: LD_VAR 0 1
11585: ARRAY
11586: PPUSH
11587: LD_INT 3
11589: PUSH
11590: LD_INT 60
11592: PUSH
11593: EMPTY
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PPUSH
11600: CALL_OW 72
11604: PPUSH
11605: LD_VAR 0 3
11609: PUSH
11610: LD_VAR 0 1
11614: ARRAY
11615: PPUSH
11616: CALL_OW 120
11620: GO 11573
11622: POP
11623: POP
11624: GO 11681
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11626: LD_EXP 34
11630: PUSH
11631: LD_VAR 0 1
11635: ARRAY
11636: PPUSH
11637: LD_INT 3
11639: PUSH
11640: LD_INT 60
11642: PUSH
11643: EMPTY
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PPUSH
11650: CALL_OW 72
11654: PPUSH
11655: LD_INT 13
11657: PUSH
11658: LD_INT 14
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 1
11667: PPUSH
11668: LD_INT 2
11670: PPUSH
11671: CALL_OW 12
11675: ARRAY
11676: PPUSH
11677: CALL_OW 113
// end ;
11681: PPOPN 3
11683: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11684: LD_EXP 41
11688: PUSH
11689: LD_INT 0
11691: EQUAL
11692: IFFALSE 12064
11694: GO 11696
11696: DISABLE
11697: LD_INT 0
11699: PPUSH
11700: PPUSH
11701: PPUSH
11702: PPUSH
// begin enable ;
11703: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11704: LD_EXP 34
11708: PPUSH
11709: LD_INT 2
11711: PUSH
11712: LD_INT 95
11714: PUSH
11715: LD_INT 13
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 95
11724: PUSH
11725: LD_INT 14
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 72
11741: PUSH
11742: LD_INT 33
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 23
11754: PUSH
11755: LD_INT 3
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 2
11764: PUSH
11765: LD_INT 95
11767: PUSH
11768: LD_INT 13
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 95
11777: PUSH
11778: LD_INT 14
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: PPUSH
11795: CALL_OW 69
11799: OR
11800: IFFALSE 11989
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
11802: LD_ADDR_VAR 0 2
11806: PUSH
11807: LD_EXP 34
11811: PPUSH
11812: LD_INT 2
11814: PUSH
11815: LD_INT 95
11817: PUSH
11818: LD_INT 13
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 95
11827: PUSH
11828: LD_INT 14
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 72
11844: PUSH
11845: LD_INT 1
11847: ARRAY
11848: ST_TO_ADDR
// if not unit then
11849: LD_VAR 0 2
11853: NOT
11854: IFFALSE 11989
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
11856: LD_ADDR_VAR 0 4
11860: PUSH
11861: LD_INT 2
11863: PUSH
11864: LD_INT 95
11866: PUSH
11867: LD_INT 13
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 95
11876: PUSH
11877: LD_INT 14
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 33
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 23
11901: PUSH
11902: LD_INT 3
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: PPUSH
11914: CALL_OW 69
11918: ST_TO_ADDR
// if not tmp then
11919: LD_VAR 0 4
11923: NOT
11924: IFFALSE 11928
// exit ;
11926: GO 12064
// for i in tmp do
11928: LD_ADDR_VAR 0 1
11932: PUSH
11933: LD_VAR 0 4
11937: PUSH
11938: FOR_IN
11939: IFFALSE 11987
// if IsDrivenBy ( i ) in RuScientists then
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 311
11950: PUSH
11951: LD_EXP 34
11955: IN
11956: IFFALSE 11985
// begin unit := IsDrivenBy ( i ) ;
11958: LD_ADDR_VAR 0 2
11962: PUSH
11963: LD_VAR 0 1
11967: PPUSH
11968: CALL_OW 311
11972: ST_TO_ADDR
// veh := i ;
11973: LD_ADDR_VAR 0 3
11977: PUSH
11978: LD_VAR 0 1
11982: ST_TO_ADDR
// break ;
11983: GO 11987
// end ;
11985: GO 11938
11987: POP
11988: POP
// end ; end ; if not unit then
11989: LD_VAR 0 2
11993: NOT
11994: IFFALSE 11998
// exit ;
11996: GO 12064
// RuScientists = RuScientists diff unit ;
11998: LD_ADDR_EXP 34
12002: PUSH
12003: LD_EXP 34
12007: PUSH
12008: LD_VAR 0 2
12012: DIFF
12013: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12014: LD_VAR 0 2
12018: PPUSH
12019: CALL_OW 64
// if veh then
12023: LD_VAR 0 3
12027: IFFALSE 12064
// begin if GetWeapon ( veh ) = 49 then
12029: LD_VAR 0 3
12033: PPUSH
12034: CALL_OW 264
12038: PUSH
12039: LD_INT 49
12041: EQUAL
12042: IFFALSE 12055
// KillUnit ( veh ) else
12044: LD_VAR 0 3
12048: PPUSH
12049: CALL_OW 66
12053: GO 12064
// RemoveUnit ( veh ) ;
12055: LD_VAR 0 3
12059: PPUSH
12060: CALL_OW 64
// end ; end ; end_of_file
12064: PPOPN 4
12066: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
// if exist_mode then
12071: LD_VAR 0 2
12075: IFFALSE 12094
// unit := CreateCharacter ( ident ) else
12077: LD_ADDR_VAR 0 4
12081: PUSH
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 34
12091: ST_TO_ADDR
12092: GO 12109
// unit := NewCharacter ( ident ) ;
12094: LD_ADDR_VAR 0 4
12098: PUSH
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 25
12108: ST_TO_ADDR
// result := unit ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_VAR 0 4
12118: ST_TO_ADDR
// end ;
12119: LD_VAR 0 3
12123: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12124: LD_INT 0
12126: PPUSH
12127: PPUSH
// for i in charactersList do
12128: LD_ADDR_VAR 0 4
12132: PUSH
12133: LD_VAR 0 1
12137: PUSH
12138: FOR_IN
12139: IFFALSE 12157
// SaveCharacters ( i , ident ) ;
12141: LD_VAR 0 4
12145: PPUSH
12146: LD_VAR 0 2
12150: PPUSH
12151: CALL_OW 38
12155: GO 12138
12157: POP
12158: POP
// end ;
12159: LD_VAR 0 3
12163: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12164: LD_INT 0
12166: PPUSH
12167: PPUSH
12168: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12169: LD_ADDR_VAR 0 1
12173: PUSH
12174: LD_VAR 0 1
12178: PUSH
12179: LD_EXP 1
12183: PUSH
12184: LD_EXP 7
12188: PUSH
12189: LD_EXP 3
12193: PUSH
12194: LD_EXP 4
12198: PUSH
12199: LD_EXP 5
12203: PUSH
12204: LD_EXP 2
12208: PUSH
12209: LD_EXP 12
12213: PUSH
12214: LD_EXP 13
12218: PUSH
12219: LD_EXP 9
12223: PUSH
12224: LD_EXP 11
12228: PUSH
12229: LD_EXP 6
12233: PUSH
12234: LD_EXP 8
12238: PUSH
12239: LD_EXP 10
12243: PUSH
12244: LD_EXP 22
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: DIFF
12265: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12266: LD_ADDR_VAR 0 6
12270: PUSH
12271: LD_VAR 0 1
12275: PUSH
12276: LD_INT 1
12278: PPUSH
12279: LD_VAR 0 1
12283: PPUSH
12284: CALL_OW 12
12288: ARRAY
12289: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12290: LD_VAR 0 6
12294: PPUSH
12295: CALL_OW 258
12299: PUSH
12300: LD_INT 1
12302: EQUAL
12303: IFFALSE 12321
// Say ( speaker , dialogMID ) else
12305: LD_VAR 0 6
12309: PPUSH
12310: LD_VAR 0 2
12314: PPUSH
12315: CALL_OW 88
12319: GO 12335
// Say ( speaker , dialogFID ) ;
12321: LD_VAR 0 6
12325: PPUSH
12326: LD_VAR 0 3
12330: PPUSH
12331: CALL_OW 88
// result := speaker ;
12335: LD_ADDR_VAR 0 4
12339: PUSH
12340: LD_VAR 0 6
12344: ST_TO_ADDR
// end ;
12345: LD_VAR 0 4
12349: RET
// export function PrepareDifficulty ; var tmp ; begin
12350: LD_INT 0
12352: PPUSH
12353: PPUSH
// if Difficulty = 1 then
12354: LD_OWVAR 67
12358: PUSH
12359: LD_INT 1
12361: EQUAL
12362: IFFALSE 12380
// begin RuSolMinLevel = 8 ;
12364: LD_ADDR_EXP 36
12368: PUSH
12369: LD_INT 8
12371: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12372: LD_ADDR_EXP 37
12376: PUSH
12377: LD_INT 10
12379: ST_TO_ADDR
// end ; if Difficulty = 2 then
12380: LD_OWVAR 67
12384: PUSH
12385: LD_INT 2
12387: EQUAL
12388: IFFALSE 12482
// begin RuSolMinLevel = 9 ;
12390: LD_ADDR_EXP 36
12394: PUSH
12395: LD_INT 9
12397: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12398: LD_ADDR_EXP 37
12402: PUSH
12403: LD_INT 10
12405: ST_TO_ADDR
// uc_nation = 3 ;
12406: LD_ADDR_OWVAR 21
12410: PUSH
12411: LD_INT 3
12413: ST_TO_ADDR
// uc_side = 3 ;
12414: LD_ADDR_OWVAR 20
12418: PUSH
12419: LD_INT 3
12421: ST_TO_ADDR
// bc_level = 10 ;
12422: LD_ADDR_OWVAR 43
12426: PUSH
12427: LD_INT 10
12429: ST_TO_ADDR
// bc_type = b_turret ;
12430: LD_ADDR_OWVAR 42
12434: PUSH
12435: LD_INT 33
12437: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12438: LD_ADDR_VAR 0 2
12442: PUSH
12443: LD_INT 86
12445: PPUSH
12446: LD_INT 34
12448: PPUSH
12449: LD_INT 2
12451: PPUSH
12452: CALL_OW 47
12456: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12457: LD_VAR 0 2
12461: PPUSH
12462: LD_INT 49
12464: PPUSH
12465: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12469: LD_INT 64
12471: PPUSH
12472: LD_INT 3
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 322
// end ; if Difficulty = 3 then
12482: LD_OWVAR 67
12486: PUSH
12487: LD_INT 3
12489: EQUAL
12490: IFFALSE 12628
// begin RuSolMinLevel = 10 ;
12492: LD_ADDR_EXP 36
12496: PUSH
12497: LD_INT 10
12499: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12500: LD_ADDR_EXP 37
12504: PUSH
12505: LD_INT 10
12507: ST_TO_ADDR
// uc_nation = 3 ;
12508: LD_ADDR_OWVAR 21
12512: PUSH
12513: LD_INT 3
12515: ST_TO_ADDR
// uc_side = 3 ;
12516: LD_ADDR_OWVAR 20
12520: PUSH
12521: LD_INT 3
12523: ST_TO_ADDR
// bc_level = 10 ;
12524: LD_ADDR_OWVAR 43
12528: PUSH
12529: LD_INT 10
12531: ST_TO_ADDR
// bc_type = b_turret ;
12532: LD_ADDR_OWVAR 42
12536: PUSH
12537: LD_INT 33
12539: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_INT 86
12547: PPUSH
12548: LD_INT 34
12550: PPUSH
12551: LD_INT 2
12553: PPUSH
12554: CALL_OW 47
12558: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12559: LD_VAR 0 2
12563: PPUSH
12564: LD_INT 49
12566: PPUSH
12567: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12571: LD_ADDR_VAR 0 2
12575: PUSH
12576: LD_INT 93
12578: PPUSH
12579: LD_INT 31
12581: PPUSH
12582: LD_INT 2
12584: PPUSH
12585: CALL_OW 47
12589: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12590: LD_VAR 0 2
12594: PPUSH
12595: LD_INT 49
12597: PPUSH
12598: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12602: LD_INT 64
12604: PPUSH
12605: LD_INT 3
12607: PPUSH
12608: LD_INT 1
12610: PPUSH
12611: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12615: LD_INT 65
12617: PPUSH
12618: LD_INT 3
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 322
// end ; end ;
12628: LD_VAR 0 1
12632: RET
// export function ShowQuery1 ; begin
12633: LD_INT 0
12635: PPUSH
// case query ( Q1 ) of 1 :
12636: LD_STRING Q1
12638: PPUSH
12639: CALL_OW 97
12643: PUSH
12644: LD_INT 1
12646: DOUBLE
12647: EQUAL
12648: IFTRUE 12652
12650: GO 12663
12652: POP
// result = 1 ; 2 :
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_INT 1
12660: ST_TO_ADDR
12661: GO 12702
12663: LD_INT 2
12665: DOUBLE
12666: EQUAL
12667: IFTRUE 12671
12669: GO 12682
12671: POP
// result = 2 ; 3 :
12672: LD_ADDR_VAR 0 1
12676: PUSH
12677: LD_INT 2
12679: ST_TO_ADDR
12680: GO 12702
12682: LD_INT 3
12684: DOUBLE
12685: EQUAL
12686: IFTRUE 12690
12688: GO 12701
12690: POP
// result = 3 ; end ;
12691: LD_ADDR_VAR 0 1
12695: PUSH
12696: LD_INT 3
12698: ST_TO_ADDR
12699: GO 12702
12701: POP
// end ;
12702: LD_VAR 0 1
12706: RET
// export function ShowQuery2 ; begin
12707: LD_INT 0
12709: PPUSH
// case query ( Q1a ) of 1 :
12710: LD_STRING Q1a
12712: PPUSH
12713: CALL_OW 97
12717: PUSH
12718: LD_INT 1
12720: DOUBLE
12721: EQUAL
12722: IFTRUE 12726
12724: GO 12737
12726: POP
// result = 1 ; 2 :
12727: LD_ADDR_VAR 0 1
12731: PUSH
12732: LD_INT 1
12734: ST_TO_ADDR
12735: GO 12776
12737: LD_INT 2
12739: DOUBLE
12740: EQUAL
12741: IFTRUE 12745
12743: GO 12756
12745: POP
// result = 2 ; 3 :
12746: LD_ADDR_VAR 0 1
12750: PUSH
12751: LD_INT 2
12753: ST_TO_ADDR
12754: GO 12776
12756: LD_INT 3
12758: DOUBLE
12759: EQUAL
12760: IFTRUE 12764
12762: GO 12775
12764: POP
// result = 3 ; end ;
12765: LD_ADDR_VAR 0 1
12769: PUSH
12770: LD_INT 3
12772: ST_TO_ADDR
12773: GO 12776
12775: POP
// end ;
12776: LD_VAR 0 1
12780: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
// for i = 1 to count do
12788: LD_ADDR_VAR 0 8
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_VAR 0 6
12802: PUSH
12803: FOR_TO
12804: IFFALSE 12885
// begin uc_side = side ;
12806: LD_ADDR_OWVAR 20
12810: PUSH
12811: LD_VAR 0 1
12815: ST_TO_ADDR
// uc_nation = nation ;
12816: LD_ADDR_OWVAR 21
12820: PUSH
12821: LD_VAR 0 2
12825: ST_TO_ADDR
// hc_gallery =  ;
12826: LD_ADDR_OWVAR 33
12830: PUSH
12831: LD_STRING 
12833: ST_TO_ADDR
// hc_name =  ;
12834: LD_ADDR_OWVAR 26
12838: PUSH
12839: LD_STRING 
12841: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12842: LD_INT 0
12844: PPUSH
12845: LD_VAR 0 5
12849: PPUSH
12850: LD_VAR 0 4
12854: PPUSH
12855: CALL_OW 380
// un = CreateHuman ;
12859: LD_ADDR_VAR 0 10
12863: PUSH
12864: CALL_OW 44
12868: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12869: LD_VAR 0 10
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: CALL_OW 52
// end ;
12883: GO 12803
12885: POP
12886: POP
// end ;
12887: LD_VAR 0 7
12891: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
12896: PPUSH
12897: PPUSH
12898: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12899: LD_ADDR_VAR 0 8
12903: PUSH
12904: LD_INT 48
12906: PUSH
12907: LD_INT 49
12909: PUSH
12910: LD_INT 50
12912: PUSH
12913: LD_INT 20
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: LD_INT 51
12921: PUSH
12922: LD_INT 52
12924: PUSH
12925: LD_INT 69
12927: PUSH
12928: LD_INT 39
12930: PUSH
12931: LD_INT 34
12933: PUSH
12934: LD_INT 40
12936: PUSH
12937: LD_INT 53
12939: PUSH
12940: LD_INT 71
12942: PUSH
12943: LD_INT 57
12945: PUSH
12946: LD_INT 58
12948: PUSH
12949: LD_INT 44
12951: PUSH
12952: LD_INT 32
12954: PUSH
12955: LD_INT 27
12957: PUSH
12958: LD_INT 23
12960: PUSH
12961: LD_INT 33
12963: PUSH
12964: LD_INT 59
12966: PUSH
12967: LD_INT 54
12969: PUSH
12970: LD_INT 55
12972: PUSH
12973: LD_INT 56
12975: PUSH
12976: LD_INT 63
12978: PUSH
12979: LD_INT 64
12981: PUSH
12982: LD_INT 65
12984: PUSH
12985: LD_INT 30
12987: PUSH
12988: LD_INT 31
12990: PUSH
12991: LD_INT 21
12993: PUSH
12994: LD_INT 22
12996: PUSH
12997: LD_INT 25
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: DOUBLE
13040: LD_INT 1
13042: DEC
13043: ST_TO_ADDR
13044: LD_VAR 0 8
13048: PUSH
13049: FOR_TO
13050: IFFALSE 13126
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13052: LD_VAR 0 8
13056: PUSH
13057: LD_VAR 0 5
13061: ARRAY
13062: PPUSH
13063: LD_VAR 0 1
13067: PPUSH
13068: CALL_OW 321
13072: PUSH
13073: LD_INT 1
13075: EQUAL
13076: PUSH
13077: LD_VAR 0 8
13081: PUSH
13082: LD_VAR 0 5
13086: ARRAY
13087: PPUSH
13088: LD_VAR 0 3
13092: PPUSH
13093: CALL_OW 482
13097: PUSH
13098: LD_INT 1
13100: EQUAL
13101: AND
13102: IFFALSE 13124
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13104: LD_VAR 0 2
13108: PPUSH
13109: LD_VAR 0 8
13113: PUSH
13114: LD_VAR 0 5
13118: ARRAY
13119: PPUSH
13120: CALL_OW 184
13124: GO 13049
13126: POP
13127: POP
// end ;
13128: LD_VAR 0 4
13132: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13133: LD_INT 0
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13141: LD_ADDR_VAR 0 8
13145: PUSH
13146: LD_VAR 0 2
13150: PPUSH
13151: CALL_OW 313
13155: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13156: LD_ADDR_VAR 0 9
13160: PUSH
13161: LD_VAR 0 3
13165: PPUSH
13166: LD_INT 22
13168: PUSH
13169: LD_VAR 0 1
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 24
13190: PUSH
13191: LD_INT 750
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 3
13200: PUSH
13201: LD_INT 54
13203: PUSH
13204: EMPTY
13205: LIST
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 70
13221: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13222: LD_ADDR_VAR 0 6
13226: PUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 22
13234: PUSH
13235: LD_VAR 0 1
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 21
13246: PUSH
13247: LD_INT 3
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: LD_INT 24
13259: PUSH
13260: LD_INT 1000
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: PPUSH
13279: CALL_OW 70
13283: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13284: LD_VAR 0 6
13288: NOT
13289: PUSH
13290: LD_INT 22
13292: PUSH
13293: LD_VAR 0 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 25
13304: PUSH
13305: LD_INT 2
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 24
13314: PUSH
13315: LD_INT 250
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: NOT
13332: AND
13333: IFFALSE 13337
// exit ;
13335: GO 13519
// if buildings_list > 0 and engineerOkInside then
13337: LD_VAR 0 6
13341: PUSH
13342: LD_INT 0
13344: GREATER
13345: PUSH
13346: LD_VAR 0 8
13350: AND
13351: IFFALSE 13362
// ComExitBuilding ( engineerOkInside ) ;
13353: LD_VAR 0 8
13357: PPUSH
13358: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13362: LD_VAR 0 6
13366: PUSH
13367: LD_INT 0
13369: GREATER
13370: PUSH
13371: LD_VAR 0 9
13375: PUSH
13376: LD_INT 0
13378: GREATER
13379: AND
13380: IFFALSE 13400
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13382: LD_VAR 0 9
13386: PPUSH
13387: LD_VAR 0 6
13391: PUSH
13392: LD_INT 1
13394: ARRAY
13395: PPUSH
13396: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13400: LD_VAR 0 6
13404: PUSH
13405: LD_INT 0
13407: EQUAL
13408: PUSH
13409: LD_VAR 0 4
13413: PUSH
13414: LD_INT 0
13416: EQUAL
13417: AND
13418: PUSH
13419: LD_VAR 0 9
13423: PUSH
13424: LD_INT 0
13426: GREATER
13427: AND
13428: IFFALSE 13444
// ComEnterUnit ( engineerOkOutside , building ) ;
13430: LD_VAR 0 9
13434: PPUSH
13435: LD_VAR 0 2
13439: PPUSH
13440: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13444: LD_VAR 0 9
13448: PUSH
13449: LD_INT 0
13451: GREATER
13452: PUSH
13453: LD_VAR 0 6
13457: PUSH
13458: LD_INT 0
13460: EQUAL
13461: AND
13462: PUSH
13463: LD_VAR 0 4
13467: PUSH
13468: LD_INT 0
13470: GREATER
13471: AND
13472: IFFALSE 13519
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13474: LD_VAR 0 9
13478: PPUSH
13479: LD_VAR 0 4
13483: PUSH
13484: LD_INT 1
13486: ARRAY
13487: PPUSH
13488: LD_VAR 0 4
13492: PUSH
13493: LD_INT 2
13495: ARRAY
13496: PPUSH
13497: LD_VAR 0 4
13501: PUSH
13502: LD_INT 3
13504: ARRAY
13505: PPUSH
13506: LD_VAR 0 4
13510: PUSH
13511: LD_INT 4
13513: ARRAY
13514: PPUSH
13515: CALL_OW 145
// end ;
13519: LD_VAR 0 5
13523: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13524: LD_INT 0
13526: PPUSH
13527: PPUSH
13528: PPUSH
13529: PPUSH
13530: PPUSH
13531: PPUSH
13532: PPUSH
13533: PPUSH
13534: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13535: LD_ADDR_VAR 0 6
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_VAR 0 1
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 25
13554: PUSH
13555: LD_INT 4
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 24
13564: PUSH
13565: LD_INT 251
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: LIST
13576: PPUSH
13577: CALL_OW 69
13581: PUSH
13582: LD_EXP 34
13586: PUSH
13587: EMPTY
13588: LIST
13589: DIFF
13590: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13591: LD_ADDR_VAR 0 7
13595: PUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: LD_INT 22
13603: PUSH
13604: LD_VAR 0 1
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 25
13615: PUSH
13616: LD_INT 4
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 50
13625: PUSH
13626: EMPTY
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 70
13638: PUSH
13639: LD_EXP 34
13643: PUSH
13644: EMPTY
13645: LIST
13646: DIFF
13647: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13648: LD_ADDR_VAR 0 10
13652: PUSH
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 22
13660: PUSH
13661: LD_VAR 0 1
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 21
13672: PUSH
13673: LD_INT 1
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 3
13682: PUSH
13683: LD_INT 24
13685: PUSH
13686: LD_INT 750
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 70
13706: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13707: LD_ADDR_VAR 0 11
13711: PUSH
13712: LD_VAR 0 2
13716: PPUSH
13717: LD_INT 22
13719: PUSH
13720: LD_VAR 0 1
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 21
13731: PUSH
13732: LD_INT 1
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 3
13741: PUSH
13742: LD_INT 24
13744: PUSH
13745: LD_INT 1000
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: PPUSH
13761: CALL_OW 70
13765: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13766: LD_VAR 0 10
13770: PUSH
13771: LD_INT 0
13773: GREATER
13774: PUSH
13775: LD_VAR 0 6
13779: PUSH
13780: LD_INT 0
13782: GREATER
13783: AND
13784: IFFALSE 13800
// ComMoveToArea ( damageUnits , healArea ) ;
13786: LD_VAR 0 10
13790: PPUSH
13791: LD_VAR 0 2
13795: PPUSH
13796: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13800: LD_VAR 0 11
13804: PUSH
13805: LD_INT 0
13807: GREATER
13808: PUSH
13809: LD_VAR 0 7
13813: PUSH
13814: LD_INT 0
13816: GREATER
13817: AND
13818: IFFALSE 13838
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13820: LD_VAR 0 7
13824: PPUSH
13825: LD_VAR 0 11
13829: PUSH
13830: LD_INT 1
13832: ARRAY
13833: PPUSH
13834: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13838: LD_VAR 0 10
13842: PUSH
13843: LD_INT 0
13845: EQUAL
13846: PUSH
13847: LD_VAR 0 11
13851: PUSH
13852: LD_INT 0
13854: EQUAL
13855: AND
13856: PUSH
13857: LD_VAR 0 7
13861: PUSH
13862: LD_INT 0
13864: GREATER
13865: AND
13866: IFFALSE 13971
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13868: LD_ADDR_VAR 0 12
13872: PUSH
13873: LD_INT 22
13875: PUSH
13876: LD_VAR 0 1
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: LD_INT 21
13887: PUSH
13888: LD_INT 3
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 30
13897: PUSH
13898: LD_INT 8
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: PPUSH
13910: CALL_OW 69
13914: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13915: LD_ADDR_VAR 0 13
13919: PUSH
13920: LD_INT 1
13922: PPUSH
13923: LD_VAR 0 12
13927: PPUSH
13928: CALL_OW 12
13932: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13933: LD_VAR 0 7
13937: PPUSH
13938: LD_INT 3
13940: PUSH
13941: LD_INT 60
13943: PUSH
13944: EMPTY
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PPUSH
13951: CALL_OW 72
13955: PPUSH
13956: LD_VAR 0 12
13960: PUSH
13961: LD_VAR 0 13
13965: ARRAY
13966: PPUSH
13967: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13971: LD_VAR 0 3
13975: PPUSH
13976: LD_INT 22
13978: PUSH
13979: LD_VAR 0 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 25
13990: PUSH
13991: LD_INT 3
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 24
14000: PUSH
14001: LD_INT 751
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 70
14017: PUSH
14018: LD_INT 0
14020: GREATER
14021: PUSH
14022: LD_INT 21
14024: PPUSH
14025: CALL_OW 302
14029: AND
14030: PUSH
14031: LD_INT 21
14033: PPUSH
14034: CALL_OW 255
14038: PUSH
14039: LD_INT 3
14041: EQUAL
14042: AND
14043: IFFALSE 14099
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14045: LD_VAR 0 3
14049: PPUSH
14050: LD_INT 22
14052: PUSH
14053: LD_VAR 0 1
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 24
14074: PUSH
14075: LD_INT 751
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 70
14091: PPUSH
14092: LD_INT 21
14094: PPUSH
14095: CALL_OW 120
// end ;
14099: LD_VAR 0 5
14103: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
14104: LD_INT 0
14106: PPUSH
14107: PPUSH
14108: PPUSH
14109: PPUSH
14110: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
14111: LD_ADDR_VAR 0 6
14115: PUSH
14116: LD_INT 22
14118: PUSH
14119: LD_VAR 0 1
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: LD_INT 30
14133: PUSH
14134: LD_INT 31
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 30
14143: PUSH
14144: LD_INT 32
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 30
14153: PUSH
14154: LD_INT 33
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 30
14163: PUSH
14164: LD_INT 4
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 30
14173: PUSH
14174: LD_INT 5
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 69
14197: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
14198: LD_ADDR_VAR 0 7
14202: PUSH
14203: LD_INT 22
14205: PUSH
14206: LD_VAR 0 2
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 21
14217: PUSH
14218: LD_INT 3
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 58
14227: PUSH
14228: EMPTY
14229: LIST
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 69
14240: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
14241: LD_VAR 0 6
14245: PUSH
14246: LD_INT 0
14248: GREATER
14249: PUSH
14250: LD_VAR 0 7
14254: PUSH
14255: LD_INT 0
14257: GREATER
14258: AND
14259: IFFALSE 14329
// begin for i in turretsList do
14261: LD_ADDR_VAR 0 4
14265: PUSH
14266: LD_VAR 0 6
14270: PUSH
14271: FOR_IN
14272: IFFALSE 14327
// begin for j in enemyBuildings do
14274: LD_ADDR_VAR 0 5
14278: PUSH
14279: LD_VAR 0 7
14283: PUSH
14284: FOR_IN
14285: IFFALSE 14323
// begin if GetDistUnits ( i , j ) < 20 then
14287: LD_VAR 0 4
14291: PPUSH
14292: LD_VAR 0 5
14296: PPUSH
14297: CALL_OW 296
14301: PUSH
14302: LD_INT 20
14304: LESS
14305: IFFALSE 14321
// begin ComAttackUnit ( i , j ) ;
14307: LD_VAR 0 4
14311: PPUSH
14312: LD_VAR 0 5
14316: PPUSH
14317: CALL_OW 115
// end ; end ;
14321: GO 14284
14323: POP
14324: POP
// end ;
14325: GO 14271
14327: POP
14328: POP
// end ; end ;
14329: LD_VAR 0 3
14333: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14334: LD_INT 0
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14342: LD_ADDR_VAR 0 7
14346: PUSH
14347: LD_VAR 0 2
14351: PPUSH
14352: LD_INT 22
14354: PUSH
14355: LD_VAR 0 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 34
14376: PUSH
14377: LD_INT 52
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: PPUSH
14389: CALL_OW 70
14393: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14394: LD_ADDR_VAR 0 8
14398: PUSH
14399: LD_VAR 0 2
14403: PPUSH
14404: LD_INT 22
14406: PUSH
14407: LD_VAR 0 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: LD_INT 1000
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: PPUSH
14451: CALL_OW 70
14455: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14456: LD_VAR 0 8
14460: PUSH
14461: LD_INT 0
14463: GREATER
14464: PUSH
14465: LD_VAR 0 7
14469: PPUSH
14470: LD_INT 24
14472: PUSH
14473: LD_INT 750
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PPUSH
14480: CALL_OW 72
14484: PUSH
14485: LD_INT 0
14487: GREATER
14488: AND
14489: IFFALSE 14509
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14491: LD_VAR 0 7
14495: PPUSH
14496: LD_VAR 0 8
14500: PUSH
14501: LD_INT 1
14503: ARRAY
14504: PPUSH
14505: CALL_OW 130
// end ;
14509: LD_VAR 0 3
14513: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14514: LD_INT 0
14516: PPUSH
14517: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14518: LD_INT 22
14520: PUSH
14521: LD_VAR 0 1
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 21
14532: PUSH
14533: LD_INT 2
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PPUSH
14544: CALL_OW 69
14548: PUSH
14549: LD_INT 18
14551: PPUSH
14552: LD_INT 22
14554: PUSH
14555: LD_VAR 0 1
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 21
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PPUSH
14578: CALL_OW 70
14582: PUSH
14583: LD_VAR 0 3
14587: LESSEQUAL
14588: DIFF
14589: IFFALSE 14656
// for i = 1 to vehCount do
14591: LD_ADDR_VAR 0 9
14595: PUSH
14596: DOUBLE
14597: LD_INT 1
14599: DEC
14600: ST_TO_ADDR
14601: LD_VAR 0 3
14605: PUSH
14606: FOR_TO
14607: IFFALSE 14654
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14609: LD_VAR 0 2
14613: PPUSH
14614: LD_VAR 0 7
14618: PPUSH
14619: LD_VAR 0 5
14623: PPUSH
14624: LD_VAR 0 6
14628: PPUSH
14629: LD_VAR 0 4
14633: PUSH
14634: LD_INT 1
14636: PPUSH
14637: LD_VAR 0 4
14641: PPUSH
14642: CALL_OW 12
14646: ARRAY
14647: PPUSH
14648: CALL_OW 185
14652: GO 14606
14654: POP
14655: POP
// end ;
14656: LD_VAR 0 8
14660: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14661: LD_INT 0
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
14667: PPUSH
14668: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14669: LD_EXP 39
14673: PUSH
14674: LD_INT 3
14676: PUSH
14677: LD_INT 4
14679: PUSH
14680: LD_INT 4
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: PUSH
14688: LD_OWVAR 67
14692: ARRAY
14693: GREATEREQUAL
14694: PUSH
14695: LD_EXP 40
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 2
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_OWVAR 67
14718: ARRAY
14719: GREATEREQUAL
14720: AND
14721: IFFALSE 14954
// begin repeat wait ( 0 0$3 ) ;
14723: LD_INT 105
14725: PPUSH
14726: CALL_OW 67
// for j in russianTanks do
14730: LD_ADDR_VAR 0 4
14734: PUSH
14735: LD_EXP 39
14739: PUSH
14740: FOR_IN
14741: IFFALSE 14942
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14743: LD_ADDR_VAR 0 6
14747: PUSH
14748: LD_INT 81
14750: PUSH
14751: LD_VAR 0 1
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 101
14762: PUSH
14763: LD_INT 1
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: PPUSH
14779: LD_VAR 0 4
14783: PPUSH
14784: CALL_OW 74
14788: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14789: LD_ADDR_VAR 0 7
14793: PUSH
14794: LD_INT 81
14796: PUSH
14797: LD_VAR 0 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 101
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: LD_INT 59
14821: PUSH
14822: EMPTY
14823: LIST
14824: PUSH
14825: LD_INT 21
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 21
14837: PUSH
14838: LD_INT 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: PPUSH
14864: LD_VAR 0 4
14868: PPUSH
14869: CALL_OW 74
14873: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14874: LD_VAR 0 4
14878: PPUSH
14879: LD_VAR 0 6
14883: PPUSH
14884: CALL_OW 296
14888: PUSH
14889: LD_INT 8
14891: PLUS
14892: PUSH
14893: LD_VAR 0 4
14897: PPUSH
14898: LD_VAR 0 7
14902: PPUSH
14903: CALL_OW 296
14907: LESS
14908: IFFALSE 14926
// ComAttackUnit ( j , target1 ) else
14910: LD_VAR 0 4
14914: PPUSH
14915: LD_VAR 0 6
14919: PPUSH
14920: CALL_OW 115
14924: GO 14940
// ComAttackUnit ( j , target2 ) ;
14926: LD_VAR 0 4
14930: PPUSH
14931: LD_VAR 0 7
14935: PPUSH
14936: CALL_OW 115
// end ;
14940: GO 14740
14942: POP
14943: POP
// until russianTanks = 0 ;
14944: LD_EXP 39
14948: PUSH
14949: LD_INT 0
14951: EQUAL
14952: IFFALSE 14723
// end ; end ;
14954: LD_VAR 0 2
14958: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14959: LD_INT 0
14961: PPUSH
14962: PPUSH
14963: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14964: LD_EXP 39
14968: PUSH
14969: LD_INT 1
14971: GREATEREQUAL
14972: PUSH
14973: LD_EXP 40
14977: PUSH
14978: LD_INT 1
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 2
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: PUSH
14992: LD_OWVAR 67
14996: ARRAY
14997: GREATEREQUAL
14998: AND
14999: IFFALSE 15115
// repeat wait ( 0 0$3 ) ;
15001: LD_INT 105
15003: PPUSH
15004: CALL_OW 67
// if russianTimeLapsers > 0 then
15008: LD_EXP 40
15012: PUSH
15013: LD_INT 0
15015: GREATER
15016: IFFALSE 15105
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
15018: LD_ADDR_VAR 0 3
15022: PUSH
15023: LD_EXP 40
15027: PPUSH
15028: LD_INT 3
15030: PUSH
15031: LD_INT 60
15033: PUSH
15034: EMPTY
15035: LIST
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PPUSH
15041: CALL_OW 72
15045: PUSH
15046: FOR_IN
15047: IFFALSE 15103
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , j ) ;
15049: LD_ADDR_VAR 0 4
15053: PUSH
15054: LD_INT 81
15056: PUSH
15057: LD_VAR 0 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PPUSH
15066: CALL_OW 69
15070: PPUSH
15071: LD_VAR 0 3
15075: PPUSH
15076: CALL_OW 74
15080: ST_TO_ADDR
// if nearUnit then
15081: LD_VAR 0 4
15085: IFFALSE 15101
// ComMoveUnit ( j , nearUnit ) ;
15087: LD_VAR 0 3
15091: PPUSH
15092: LD_VAR 0 4
15096: PPUSH
15097: CALL_OW 112
// end ;
15101: GO 15046
15103: POP
15104: POP
// until russianTimeLapsers = 0 ;
15105: LD_EXP 40
15109: PUSH
15110: LD_INT 0
15112: EQUAL
15113: IFFALSE 15001
// end ;
15115: LD_VAR 0 2
15119: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15120: LD_INT 0
15122: PPUSH
15123: PPUSH
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15128: LD_ADDR_VAR 0 6
15132: PUSH
15133: LD_INT 22
15135: PUSH
15136: LD_VAR 0 1
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 25
15147: PUSH
15148: LD_INT 9
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PPUSH
15159: CALL_OW 69
15163: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15164: LD_ADDR_VAR 0 7
15168: PUSH
15169: LD_INT 81
15171: PUSH
15172: LD_VAR 0 1
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 3
15183: PUSH
15184: LD_INT 21
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PPUSH
15202: CALL_OW 69
15206: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15207: LD_ADDR_VAR 0 4
15211: PUSH
15212: LD_INT 1
15214: PPUSH
15215: LD_INT 3
15217: PPUSH
15218: CALL_OW 12
15222: ST_TO_ADDR
// for i = 1 to list do
15223: LD_ADDR_VAR 0 5
15227: PUSH
15228: DOUBLE
15229: LD_INT 1
15231: DEC
15232: ST_TO_ADDR
15233: LD_VAR 0 6
15237: PUSH
15238: FOR_TO
15239: IFFALSE 15441
// for ta in filter do
15241: LD_ADDR_VAR 0 3
15245: PUSH
15246: LD_VAR 0 7
15250: PUSH
15251: FOR_IN
15252: IFFALSE 15437
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15254: LD_VAR 0 6
15258: PUSH
15259: LD_VAR 0 5
15263: ARRAY
15264: PPUSH
15265: LD_VAR 0 3
15269: PPUSH
15270: CALL_OW 296
15274: PUSH
15275: LD_INT 15
15277: LESSEQUAL
15278: IFFALSE 15435
// begin case c of 1 :
15280: LD_VAR 0 4
15284: PUSH
15285: LD_INT 1
15287: DOUBLE
15288: EQUAL
15289: IFTRUE 15293
15291: GO 15331
15293: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15294: LD_VAR 0 6
15298: PUSH
15299: LD_VAR 0 5
15303: ARRAY
15304: PPUSH
15305: LD_VAR 0 3
15309: PPUSH
15310: CALL_OW 250
15314: PPUSH
15315: LD_VAR 0 3
15319: PPUSH
15320: CALL_OW 251
15324: PPUSH
15325: CALL_OW 154
15329: GO 15435
15331: LD_INT 2
15333: DOUBLE
15334: EQUAL
15335: IFTRUE 15339
15337: GO 15403
15339: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15340: LD_VAR 0 6
15344: PUSH
15345: LD_VAR 0 5
15349: ARRAY
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: CALL_OW 250
15360: PUSH
15361: LD_INT 1
15363: NEG
15364: PPUSH
15365: LD_INT 1
15367: PPUSH
15368: CALL_OW 12
15372: PLUS
15373: PPUSH
15374: LD_VAR 0 3
15378: PPUSH
15379: CALL_OW 251
15383: PUSH
15384: LD_INT 1
15386: NEG
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 12
15395: PLUS
15396: PPUSH
15397: CALL_OW 153
15401: GO 15435
15403: LD_INT 3
15405: DOUBLE
15406: EQUAL
15407: IFTRUE 15411
15409: GO 15434
15411: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15412: LD_VAR 0 6
15416: PUSH
15417: LD_VAR 0 5
15421: ARRAY
15422: PPUSH
15423: LD_VAR 0 3
15427: PPUSH
15428: CALL_OW 115
15432: GO 15435
15434: POP
// end ; end ;
15435: GO 15251
15437: POP
15438: POP
15439: GO 15238
15441: POP
15442: POP
// end ;
15443: LD_VAR 0 2
15447: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15448: LD_INT 0
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
// r := 100 ;
15454: LD_ADDR_VAR 0 5
15458: PUSH
15459: LD_INT 100
15461: ST_TO_ADDR
// x := 0 ;
15462: LD_ADDR_VAR 0 6
15466: PUSH
15467: LD_INT 0
15469: ST_TO_ADDR
// while ( x < n ) do
15470: LD_VAR 0 6
15474: PUSH
15475: LD_VAR 0 2
15479: LESS
15480: IFFALSE 15767
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15482: LD_ADDR_VAR 0 4
15486: PUSH
15487: DOUBLE
15488: LD_INT 1
15490: DEC
15491: ST_TO_ADDR
15492: LD_VAR 0 1
15496: PPUSH
15497: LD_INT 0
15499: PPUSH
15500: CALL_OW 517
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PUSH
15509: FOR_TO
15510: IFFALSE 15763
// begin if r > 50 then
15512: LD_VAR 0 5
15516: PUSH
15517: LD_INT 50
15519: GREATER
15520: IFFALSE 15739
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15522: LD_VAR 0 1
15526: PPUSH
15527: LD_INT 0
15529: PPUSH
15530: CALL_OW 517
15534: PUSH
15535: LD_INT 1
15537: ARRAY
15538: PUSH
15539: LD_VAR 0 4
15543: ARRAY
15544: PPUSH
15545: LD_VAR 0 1
15549: PPUSH
15550: LD_INT 0
15552: PPUSH
15553: CALL_OW 517
15557: PUSH
15558: LD_INT 2
15560: ARRAY
15561: PUSH
15562: LD_VAR 0 4
15566: ARRAY
15567: PPUSH
15568: CALL_OW 458
15572: NOT
15573: IFFALSE 15723
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15575: LD_VAR 0 1
15579: PPUSH
15580: LD_INT 0
15582: PPUSH
15583: CALL_OW 517
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PUSH
15592: LD_VAR 0 4
15596: ARRAY
15597: PPUSH
15598: LD_VAR 0 1
15602: PPUSH
15603: LD_INT 0
15605: PPUSH
15606: CALL_OW 517
15610: PUSH
15611: LD_INT 2
15613: ARRAY
15614: PUSH
15615: LD_VAR 0 4
15619: ARRAY
15620: PPUSH
15621: LD_INT 8
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15631: LD_ADDR_EXP 44
15635: PUSH
15636: LD_EXP 44
15640: PPUSH
15641: LD_INT 1
15643: PPUSH
15644: LD_VAR 0 1
15648: PPUSH
15649: LD_INT 0
15651: PPUSH
15652: CALL_OW 517
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: PUSH
15661: LD_VAR 0 4
15665: ARRAY
15666: PUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: LD_INT 0
15674: PPUSH
15675: CALL_OW 517
15679: PUSH
15680: LD_INT 2
15682: ARRAY
15683: PUSH
15684: LD_VAR 0 4
15688: ARRAY
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 2
15698: ST_TO_ADDR
// r := 0 ;
15699: LD_ADDR_VAR 0 5
15703: PUSH
15704: LD_INT 0
15706: ST_TO_ADDR
// x := x + 1 ;
15707: LD_ADDR_VAR 0 6
15711: PUSH
15712: LD_VAR 0 6
15716: PUSH
15717: LD_INT 1
15719: PLUS
15720: ST_TO_ADDR
// end else
15721: GO 15737
// r := r + 35 ;
15723: LD_ADDR_VAR 0 5
15727: PUSH
15728: LD_VAR 0 5
15732: PUSH
15733: LD_INT 35
15735: PLUS
15736: ST_TO_ADDR
// end else
15737: GO 15761
// r := r + rand ( 10 , 25 ) ;
15739: LD_ADDR_VAR 0 5
15743: PUSH
15744: LD_VAR 0 5
15748: PUSH
15749: LD_INT 10
15751: PPUSH
15752: LD_INT 25
15754: PPUSH
15755: CALL_OW 12
15759: PLUS
15760: ST_TO_ADDR
// end ;
15761: GO 15509
15763: POP
15764: POP
15765: GO 15470
// end ;
15767: LD_VAR 0 3
15771: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
15776: PPUSH
15777: PPUSH
// tmpTab = [ ] ;
15778: LD_ADDR_VAR 0 6
15782: PUSH
15783: EMPTY
15784: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15785: LD_INT 22
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 30
15799: PUSH
15800: LD_INT 32
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PPUSH
15811: CALL_OW 69
15815: PUSH
15816: LD_INT 0
15818: GREATER
15819: IFFALSE 15902
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15821: LD_ADDR_VAR 0 4
15825: PUSH
15826: LD_INT 22
15828: PUSH
15829: LD_VAR 0 1
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 30
15840: PUSH
15841: LD_INT 32
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 69
15856: PUSH
15857: FOR_IN
15858: IFFALSE 15900
// begin for j in UnitsInside ( i ) do
15860: LD_ADDR_VAR 0 5
15864: PUSH
15865: LD_VAR 0 4
15869: PPUSH
15870: CALL_OW 313
15874: PUSH
15875: FOR_IN
15876: IFFALSE 15896
// tmpTab = tmpTab ^ j ;
15878: LD_ADDR_VAR 0 6
15882: PUSH
15883: LD_VAR 0 6
15887: PUSH
15888: LD_VAR 0 5
15892: ADD
15893: ST_TO_ADDR
15894: GO 15875
15896: POP
15897: POP
// end ;
15898: GO 15857
15900: POP
15901: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15902: LD_VAR 0 6
15906: PPUSH
15907: LD_VAR 0 2
15911: PPUSH
15912: CALL_OW 250
15916: PPUSH
15917: LD_VAR 0 2
15921: PPUSH
15922: CALL_OW 251
15926: PPUSH
15927: CALL_OW 114
// end ;
15931: LD_VAR 0 3
15935: RET
// export function PrepareNature ; var i , un ; begin
15936: LD_INT 0
15938: PPUSH
15939: PPUSH
15940: PPUSH
// uc_side := 0 ;
15941: LD_ADDR_OWVAR 20
15945: PUSH
15946: LD_INT 0
15948: ST_TO_ADDR
// uc_nation := 0 ;
15949: LD_ADDR_OWVAR 21
15953: PUSH
15954: LD_INT 0
15956: ST_TO_ADDR
// InitHc ;
15957: CALL_OW 19
// hc_class := class_fish ;
15961: LD_ADDR_OWVAR 28
15965: PUSH
15966: LD_INT 20
15968: ST_TO_ADDR
// for i = 1 to 6 do
15969: LD_ADDR_VAR 0 2
15973: PUSH
15974: DOUBLE
15975: LD_INT 1
15977: DEC
15978: ST_TO_ADDR
15979: LD_INT 6
15981: PUSH
15982: FOR_TO
15983: IFFALSE 16002
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15985: CALL_OW 44
15989: PPUSH
15990: LD_INT 23
15992: PPUSH
15993: LD_INT 0
15995: PPUSH
15996: CALL_OW 49
16000: GO 15982
16002: POP
16003: POP
// for i = 1 to Difficulty + 2 do
16004: LD_ADDR_VAR 0 2
16008: PUSH
16009: DOUBLE
16010: LD_INT 1
16012: DEC
16013: ST_TO_ADDR
16014: LD_OWVAR 67
16018: PUSH
16019: LD_INT 2
16021: PLUS
16022: PUSH
16023: FOR_TO
16024: IFFALSE 16133
// begin hc_sex = sex_male ;
16026: LD_ADDR_OWVAR 27
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// uc_side = 0 ;
16034: LD_ADDR_OWVAR 20
16038: PUSH
16039: LD_INT 0
16041: ST_TO_ADDR
// uc_nation = nation_nature ;
16042: LD_ADDR_OWVAR 21
16046: PUSH
16047: LD_INT 0
16049: ST_TO_ADDR
// hc_class = class_tiger ;
16050: LD_ADDR_OWVAR 28
16054: PUSH
16055: LD_INT 14
16057: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16058: LD_ADDR_OWVAR 31
16062: PUSH
16063: LD_EXP 37
16067: PUSH
16068: LD_INT 0
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: LD_INT 0
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16083: LD_ADDR_OWVAR 35
16087: PUSH
16088: LD_INT 5
16090: NEG
16091: PPUSH
16092: LD_INT 5
16094: PPUSH
16095: CALL_OW 12
16099: PUSH
16100: LD_OWVAR 67
16104: MUL
16105: ST_TO_ADDR
// un = CreateHuman ;
16106: LD_ADDR_VAR 0 3
16110: PUSH
16111: CALL_OW 44
16115: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16116: LD_VAR 0 3
16120: PPUSH
16121: LD_INT 24
16123: PPUSH
16124: LD_INT 0
16126: PPUSH
16127: CALL_OW 49
// end ;
16131: GO 16023
16133: POP
16134: POP
// for i = 1 to rand ( 3 , 4 ) do
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: DOUBLE
16141: LD_INT 1
16143: DEC
16144: ST_TO_ADDR
16145: LD_INT 3
16147: PPUSH
16148: LD_INT 4
16150: PPUSH
16151: CALL_OW 12
16155: PUSH
16156: FOR_TO
16157: IFFALSE 16249
// begin hc_sex = sex_male ;
16159: LD_ADDR_OWVAR 27
16163: PUSH
16164: LD_INT 1
16166: ST_TO_ADDR
// uc_side = 0 ;
16167: LD_ADDR_OWVAR 20
16171: PUSH
16172: LD_INT 0
16174: ST_TO_ADDR
// uc_nation = nation_nature ;
16175: LD_ADDR_OWVAR 21
16179: PUSH
16180: LD_INT 0
16182: ST_TO_ADDR
// hc_class = 18 ;
16183: LD_ADDR_OWVAR 28
16187: PUSH
16188: LD_INT 18
16190: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16191: LD_ADDR_OWVAR 31
16195: PUSH
16196: LD_INT 0
16198: PUSH
16199: LD_INT 0
16201: PUSH
16202: LD_INT 0
16204: PUSH
16205: LD_INT 0
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: ST_TO_ADDR
// hc_agressivity = 0 ;
16214: LD_ADDR_OWVAR 35
16218: PUSH
16219: LD_INT 0
16221: ST_TO_ADDR
// un = CreateHuman ;
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: CALL_OW 44
16231: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: LD_INT 24
16239: PPUSH
16240: LD_INT 0
16242: PPUSH
16243: CALL_OW 49
// end ;
16247: GO 16156
16249: POP
16250: POP
// for i = 1 to rand ( 1 , 3 ) do
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: DOUBLE
16257: LD_INT 1
16259: DEC
16260: ST_TO_ADDR
16261: LD_INT 1
16263: PPUSH
16264: LD_INT 3
16266: PPUSH
16267: CALL_OW 12
16271: PUSH
16272: FOR_TO
16273: IFFALSE 16421
// begin hc_sex = sex_male ;
16275: LD_ADDR_OWVAR 27
16279: PUSH
16280: LD_INT 1
16282: ST_TO_ADDR
// uc_side = 0 ;
16283: LD_ADDR_OWVAR 20
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// uc_nation = nation_nature ;
16291: LD_ADDR_OWVAR 21
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
// hc_class = class_apeman ;
16299: LD_ADDR_OWVAR 28
16303: PUSH
16304: LD_INT 12
16306: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16307: LD_ADDR_OWVAR 31
16311: PUSH
16312: LD_EXP 36
16316: PPUSH
16317: LD_EXP 37
16321: PPUSH
16322: CALL_OW 12
16326: PUSH
16327: LD_EXP 36
16331: PPUSH
16332: LD_EXP 37
16336: PPUSH
16337: CALL_OW 12
16341: PUSH
16342: LD_EXP 36
16346: PPUSH
16347: LD_EXP 37
16351: PPUSH
16352: CALL_OW 12
16356: PUSH
16357: LD_EXP 36
16361: PPUSH
16362: LD_EXP 37
16366: PPUSH
16367: CALL_OW 12
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16378: LD_ADDR_OWVAR 35
16382: PUSH
16383: LD_INT 1
16385: PPUSH
16386: LD_INT 20
16388: PPUSH
16389: CALL_OW 12
16393: ST_TO_ADDR
// un = CreateHuman ;
16394: LD_ADDR_VAR 0 3
16398: PUSH
16399: CALL_OW 44
16403: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_INT 24
16411: PPUSH
16412: LD_INT 0
16414: PPUSH
16415: CALL_OW 49
// end ;
16419: GO 16272
16421: POP
16422: POP
// end ; end_of_file
16423: LD_VAR 0 1
16427: RET
// on UnitDestroyed ( unit ) do var i ;
16428: LD_INT 0
16430: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16431: LD_VAR 0 1
16435: PPUSH
16436: CALL_OW 255
16440: PUSH
16441: LD_INT 3
16443: EQUAL
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 247
16454: PUSH
16455: LD_INT 1
16457: EQUAL
16458: AND
16459: IFFALSE 16523
// begin for i in RuScientists do
16461: LD_ADDR_VAR 0 2
16465: PUSH
16466: LD_EXP 34
16470: PUSH
16471: FOR_IN
16472: IFFALSE 16521
// if i = unit then
16474: LD_VAR 0 2
16478: PUSH
16479: LD_VAR 0 1
16483: EQUAL
16484: IFFALSE 16519
// begin RuScientists = RuScientists diff [ unit ] ;
16486: LD_ADDR_EXP 34
16490: PUSH
16491: LD_EXP 34
16495: PUSH
16496: LD_VAR 0 1
16500: PUSH
16501: EMPTY
16502: LIST
16503: DIFF
16504: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16505: LD_ADDR_EXP 35
16509: PUSH
16510: LD_EXP 35
16514: PUSH
16515: LD_INT 1
16517: PLUS
16518: ST_TO_ADDR
// end ;
16519: GO 16471
16521: POP
16522: POP
// end ; end ;
16523: PPOPN 2
16525: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16526: LD_VAR 0 1
16530: PUSH
16531: LD_INT 10
16533: EQUAL
16534: PUSH
16535: LD_VAR 0 2
16539: PPUSH
16540: CALL_OW 255
16544: PUSH
16545: LD_INT 1
16547: EQUAL
16548: AND
16549: PUSH
16550: LD_EXP 47
16554: PUSH
16555: LD_INT 0
16557: EQUAL
16558: AND
16559: IFFALSE 16671
// begin eventVar1 = 1 ;
16561: LD_ADDR_EXP 47
16565: PUSH
16566: LD_INT 1
16568: ST_TO_ADDR
// teleportExplored = 1 ;
16569: LD_ADDR_EXP 33
16573: PUSH
16574: LD_INT 1
16576: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16577: LD_STRING M2a
16579: PPUSH
16580: CALL_OW 337
// wait ( 0 0$2 ) ;
16584: LD_INT 70
16586: PPUSH
16587: CALL_OW 67
// DialogueOn ;
16591: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16595: LD_INT 22
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 21
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PPUSH
16619: CALL_OW 69
16623: PPUSH
16624: LD_STRING DT3a-Sol1-1
16626: PPUSH
16627: LD_STRING DT3a-FSol1-1
16629: PPUSH
16630: CALL 12164 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16634: LD_EXP 1
16638: PPUSH
16639: LD_STRING DT3a-JMM-1
16641: PPUSH
16642: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16646: LD_VAR 0 2
16650: PPUSH
16651: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16655: LD_EXP 1
16659: PPUSH
16660: LD_STRING DT3a-JMM-1a
16662: PPUSH
16663: CALL_OW 88
// DialogueOff ;
16667: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16671: LD_VAR 0 1
16675: PUSH
16676: LD_INT 10
16678: EQUAL
16679: PUSH
16680: LD_VAR 0 2
16684: PPUSH
16685: CALL_OW 247
16689: PUSH
16690: LD_INT 2
16692: EQUAL
16693: AND
16694: PUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: CALL_OW 255
16704: PUSH
16705: LD_INT 3
16707: EQUAL
16708: AND
16709: PUSH
16710: LD_EXP 28
16714: PUSH
16715: LD_INT 0
16717: EQUAL
16718: AND
16719: IFFALSE 16736
// begin wait ( 0 0$3 ) ;
16721: LD_INT 105
16723: PPUSH
16724: CALL_OW 67
// vehicleTeleported = 1 ;
16728: LD_ADDR_EXP 28
16732: PUSH
16733: LD_INT 1
16735: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16736: LD_VAR 0 1
16740: PUSH
16741: LD_INT 10
16743: EQUAL
16744: PUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: CALL_OW 247
16754: PUSH
16755: LD_INT 2
16757: EQUAL
16758: AND
16759: PUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: CALL_OW 255
16769: PUSH
16770: LD_INT 3
16772: EQUAL
16773: AND
16774: PUSH
16775: LD_EXP 28
16779: PUSH
16780: LD_INT 2
16782: EQUAL
16783: AND
16784: IFFALSE 16801
// begin wait ( 0 0$3 ) ;
16786: LD_INT 105
16788: PPUSH
16789: CALL_OW 67
// vehicleTeleported = 3 ;
16793: LD_ADDR_EXP 28
16797: PUSH
16798: LD_INT 3
16800: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16801: LD_VAR 0 1
16805: PUSH
16806: LD_INT 10
16808: EQUAL
16809: PUSH
16810: LD_VAR 0 2
16814: PPUSH
16815: CALL_OW 247
16819: PUSH
16820: LD_INT 2
16822: EQUAL
16823: AND
16824: PUSH
16825: LD_VAR 0 2
16829: PPUSH
16830: CALL_OW 255
16834: PUSH
16835: LD_INT 3
16837: EQUAL
16838: AND
16839: IFFALSE 16855
// tpCounter = tpCounter + 1 ;
16841: LD_ADDR_EXP 29
16845: PUSH
16846: LD_EXP 29
16850: PUSH
16851: LD_INT 1
16853: PLUS
16854: ST_TO_ADDR
// end ;
16855: PPOPN 2
16857: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16858: LD_VAR 0 2
16862: PUSH
16863: LD_INT 21
16865: EQUAL
16866: PUSH
16867: LD_VAR 0 2
16871: PUSH
16872: LD_INT 112
16874: EQUAL
16875: OR
16876: IFFALSE 17054
// if GetSide ( vehicle ) = 3 then
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 255
16887: PUSH
16888: LD_INT 3
16890: EQUAL
16891: IFFALSE 17054
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 264
16902: PUSH
16903: LD_INT 46
16905: EQUAL
16906: PUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 264
16916: PUSH
16917: LD_INT 45
16919: EQUAL
16920: OR
16921: PUSH
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 264
16931: PUSH
16932: LD_INT 44
16934: EQUAL
16935: OR
16936: IFFALSE 17011
// begin russianTanks = russianTanks ^ vehicle ;
16938: LD_ADDR_EXP 39
16942: PUSH
16943: LD_EXP 39
16947: PUSH
16948: LD_VAR 0 1
16952: ADD
16953: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
16954: LD_EXP 43
16958: PUSH
16959: LD_INT 1
16961: EQUAL
16962: PUSH
16963: LD_EXP 43
16967: PUSH
16968: LD_INT 0
16970: EQUAL
16971: OR
16972: IFFALSE 16986
// ComEnterUnit ( vehicle , ruteleprt ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_INT 10
16981: PPUSH
16982: CALL_OW 120
// if attackTactic = 2 then
16986: LD_EXP 43
16990: PUSH
16991: LD_INT 2
16993: EQUAL
16994: IFFALSE 17011
// ComMoveXY ( vehicle , 88 , 69 ) ;
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_INT 88
17003: PPUSH
17004: LD_INT 69
17006: PPUSH
17007: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 264
17020: PUSH
17021: LD_INT 49
17023: EQUAL
17024: IFFALSE 17054
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17026: LD_ADDR_EXP 40
17030: PUSH
17031: LD_EXP 40
17035: PUSH
17036: LD_VAR 0 1
17040: ADD
17041: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17042: LD_VAR 0 1
17046: PPUSH
17047: LD_INT 137
17049: PPUSH
17050: CALL_OW 120
// end ; end ; end ;
17054: PPOPN 2
17056: END
// on UnitGoesToRed ( unit ) do var i ;
17057: LD_INT 0
17059: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 255
17069: PUSH
17070: LD_INT 3
17072: EQUAL
17073: PUSH
17074: LD_VAR 0 1
17078: PPUSH
17079: CALL_OW 247
17083: PUSH
17084: LD_INT 2
17086: EQUAL
17087: AND
17088: IFFALSE 17206
// begin if russianTanks > 0 then
17090: LD_EXP 39
17094: PUSH
17095: LD_INT 0
17097: GREATER
17098: IFFALSE 17148
// for i in russianTanks do
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_EXP 39
17109: PUSH
17110: FOR_IN
17111: IFFALSE 17146
// if i = unit then
17113: LD_VAR 0 2
17117: PUSH
17118: LD_VAR 0 1
17122: EQUAL
17123: IFFALSE 17144
// russianTanks = russianTanks diff [ unit ] ;
17125: LD_ADDR_EXP 39
17129: PUSH
17130: LD_EXP 39
17134: PUSH
17135: LD_VAR 0 1
17139: PUSH
17140: EMPTY
17141: LIST
17142: DIFF
17143: ST_TO_ADDR
17144: GO 17110
17146: POP
17147: POP
// if russianTimeLapsers > 0 then
17148: LD_EXP 40
17152: PUSH
17153: LD_INT 0
17155: GREATER
17156: IFFALSE 17206
// for i in russianTimeLapsers do
17158: LD_ADDR_VAR 0 2
17162: PUSH
17163: LD_EXP 40
17167: PUSH
17168: FOR_IN
17169: IFFALSE 17204
// if i = unit then
17171: LD_VAR 0 2
17175: PUSH
17176: LD_VAR 0 1
17180: EQUAL
17181: IFFALSE 17202
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17183: LD_ADDR_EXP 40
17187: PUSH
17188: LD_EXP 40
17192: PUSH
17193: LD_VAR 0 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: DIFF
17201: ST_TO_ADDR
17202: GO 17168
17204: POP
17205: POP
// end ; end ;
17206: PPOPN 2
17208: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17209: LD_INT 0
17211: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17212: LD_VAR 0 2
17216: PPUSH
17217: CALL_OW 255
17221: PUSH
17222: LD_INT 3
17224: EQUAL
17225: PUSH
17226: LD_VAR 0 2
17230: PPUSH
17231: CALL_OW 257
17235: PUSH
17236: LD_INT 3
17238: EQUAL
17239: AND
17240: PUSH
17241: LD_INT 21
17243: PPUSH
17244: CALL_OW 255
17248: PUSH
17249: LD_INT 3
17251: EQUAL
17252: AND
17253: PUSH
17254: LD_INT 21
17256: PPUSH
17257: CALL_OW 302
17261: AND
17262: IFFALSE 17276
// ComEnterUnit ( human , ru_fact ) ;
17264: LD_VAR 0 2
17268: PPUSH
17269: LD_INT 21
17271: PPUSH
17272: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
17276: LD_VAR 0 2
17280: PPUSH
17281: CALL_OW 257
17285: PUSH
17286: LD_INT 4
17288: EQUAL
17289: PUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: CALL_OW 255
17299: PUSH
17300: LD_INT 3
17302: EQUAL
17303: AND
17304: PUSH
17305: LD_EXP 41
17309: PUSH
17310: LD_INT 0
17312: EQUAL
17313: AND
17314: IFFALSE 17376
// for i in RuScientists do
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_EXP 34
17325: PUSH
17326: FOR_IN
17327: IFFALSE 17374
// if i = human then
17329: LD_VAR 0 3
17333: PUSH
17334: LD_VAR 0 2
17338: EQUAL
17339: IFFALSE 17372
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17341: LD_VAR 0 3
17345: PPUSH
17346: LD_INT 13
17348: PUSH
17349: LD_INT 14
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 1
17358: PPUSH
17359: LD_INT 2
17361: PPUSH
17362: CALL_OW 12
17366: ARRAY
17367: PPUSH
17368: CALL_OW 113
17372: GO 17326
17374: POP
17375: POP
// end ;
17376: PPOPN 3
17378: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
17379: LD_INT 0
17381: PPUSH
17382: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
17383: LD_VAR 0 2
17387: PPUSH
17388: CALL_OW 255
17392: PUSH
17393: LD_INT 3
17395: EQUAL
17396: PUSH
17397: LD_VAR 0 2
17401: PPUSH
17402: CALL_OW 257
17406: PUSH
17407: LD_INT 4
17409: EQUAL
17410: AND
17411: IFFALSE 17553
// for i in RuScientists do
17413: LD_ADDR_VAR 0 3
17417: PUSH
17418: LD_EXP 34
17422: PUSH
17423: FOR_IN
17424: IFFALSE 17551
// if i = human then
17426: LD_VAR 0 3
17430: PUSH
17431: LD_VAR 0 2
17435: EQUAL
17436: IFFALSE 17549
// if IsOk ( rutp ) then
17438: LD_INT 137
17440: PPUSH
17441: CALL_OW 302
17445: IFFALSE 17518
// begin rnd = rand ( 1 , 2 ) ;
17447: LD_ADDR_VAR 0 4
17451: PUSH
17452: LD_INT 1
17454: PPUSH
17455: LD_INT 2
17457: PPUSH
17458: CALL_OW 12
17462: ST_TO_ADDR
// if rnd = 1 then
17463: LD_VAR 0 4
17467: PUSH
17468: LD_INT 1
17470: EQUAL
17471: IFFALSE 17485
// ComEnterUnit ( vehicle , rutp ) ;
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_INT 137
17480: PPUSH
17481: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17485: LD_VAR 0 1
17489: PPUSH
17490: LD_INT 13
17492: PUSH
17493: LD_INT 14
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 1
17502: PPUSH
17503: LD_INT 2
17505: PPUSH
17506: CALL_OW 12
17510: ARRAY
17511: PPUSH
17512: CALL_OW 173
// end else
17516: GO 17549
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17518: LD_VAR 0 1
17522: PPUSH
17523: LD_INT 13
17525: PUSH
17526: LD_INT 14
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 1
17535: PPUSH
17536: LD_INT 2
17538: PPUSH
17539: CALL_OW 12
17543: ARRAY
17544: PPUSH
17545: CALL_OW 113
// end ;
17549: GO 17423
17551: POP
17552: POP
// end ; end_of_file
17553: PPOPN 4
17555: END
// every 0 0$1 trigger ruAI = 1 do
17556: LD_EXP 41
17560: PUSH
17561: LD_INT 1
17563: EQUAL
17564: IFFALSE 17693
17566: GO 17568
17568: DISABLE
// begin enable ;
17569: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17570: LD_INT 3
17572: PPUSH
17573: LD_INT 6
17575: PPUSH
17576: LD_INT 9
17578: PPUSH
17579: LD_EXP 38
17583: PPUSH
17584: CALL 13133 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17588: LD_INT 3
17590: PPUSH
17591: LD_INT 4
17593: PPUSH
17594: LD_INT 10
17596: PPUSH
17597: LD_EXP 38
17601: PPUSH
17602: CALL 13133 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17606: LD_INT 3
17608: PPUSH
17609: LD_INT 9
17611: PPUSH
17612: CALL 14334 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17616: LD_INT 3
17618: PPUSH
17619: LD_INT 10
17621: PPUSH
17622: CALL 14334 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17626: LD_INT 3
17628: PPUSH
17629: LD_INT 16
17631: PPUSH
17632: LD_INT 9
17634: PPUSH
17635: LD_INT 91
17637: PPUSH
17638: CALL 13524 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17642: LD_INT 3
17644: PPUSH
17645: LD_INT 17
17647: PPUSH
17648: LD_INT 10
17650: PPUSH
17651: LD_INT 47
17653: PUSH
17654: LD_INT 129
17656: PUSH
17657: LD_INT 135
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: CALL 13524 0 4
// AttackVehicles ( 3 ) ;
17669: LD_INT 3
17671: PPUSH
17672: CALL 14661 0 1
// IntBazooka ( 3 ) ;
17676: LD_INT 3
17678: PPUSH
17679: CALL 15120 0 1
// AttackNearBuildings ( 3 , 1 ) ;
17683: LD_INT 3
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL 14104 0 2
// end ;
17693: END
// every 0 0$1 do
17694: GO 17696
17696: DISABLE
// begin enable ;
17697: ENABLE
// TimeLapsersAI ( 3 ) ;
17698: LD_INT 3
17700: PPUSH
17701: CALL 14959 0 1
// end ;
17705: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17706: LD_INT 4
17708: PPUSH
17709: CALL_OW 303
17713: IFFALSE 17728
17715: GO 17717
17717: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17718: LD_INT 3
17720: PPUSH
17721: LD_INT 4
17723: PPUSH
17724: CALL 15772 0 2
17728: END
// every 0 0$1 do
17729: GO 17731
17731: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17732: LD_INT 3
17734: PPUSH
17735: LD_INT 91
17737: PPUSH
17738: LD_INT 3
17740: PPUSH
17741: CALL 12892 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17745: LD_INT 3
17747: PPUSH
17748: LD_INT 47
17750: PPUSH
17751: LD_INT 3
17753: PPUSH
17754: CALL 12892 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17758: LD_INT 3
17760: PPUSH
17761: LD_INT 129
17763: PPUSH
17764: LD_INT 3
17766: PPUSH
17767: CALL 12892 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17771: LD_INT 3
17773: PPUSH
17774: LD_INT 3
17776: PPUSH
17777: LD_INT 3
17779: PPUSH
17780: CALL 12892 0 3
// end ;
17784: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17785: LD_EXP 27
17789: PUSH
17790: LD_INT 2
17792: EQUAL
17793: PUSH
17794: LD_INT 21
17796: PPUSH
17797: CALL_OW 255
17801: PUSH
17802: LD_INT 3
17804: EQUAL
17805: AND
17806: PUSH
17807: LD_INT 112
17809: PPUSH
17810: CALL_OW 255
17814: PUSH
17815: LD_INT 3
17817: EQUAL
17818: AND
17819: PUSH
17820: LD_INT 21
17822: PPUSH
17823: CALL_OW 302
17827: AND
17828: PUSH
17829: LD_INT 112
17831: PPUSH
17832: CALL_OW 302
17836: AND
17837: PUSH
17838: LD_INT 22
17840: PUSH
17841: LD_INT 3
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 21
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 50
17860: PUSH
17861: EMPTY
17862: LIST
17863: PUSH
17864: LD_INT 3
17866: PUSH
17867: LD_INT 58
17869: PUSH
17870: EMPTY
17871: LIST
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: PPUSH
17883: CALL_OW 69
17887: PUSH
17888: LD_INT 18
17890: PPUSH
17891: LD_INT 22
17893: PUSH
17894: LD_INT 3
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 21
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PPUSH
17915: CALL_OW 70
17919: PUSH
17920: LD_INT 0
17922: EQUAL
17923: DIFF
17924: AND
17925: IFFALSE 18043
17927: GO 17929
17929: DISABLE
// begin enable ;
17930: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17931: LD_INT 3
17933: PPUSH
17934: LD_INT 21
17936: PPUSH
17937: LD_INT 3
17939: PUSH
17940: LD_INT 4
17942: PUSH
17943: LD_INT 4
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: PUSH
17951: LD_OWVAR 67
17955: ARRAY
17956: PPUSH
17957: LD_INT 46
17959: PUSH
17960: LD_INT 45
17962: PUSH
17963: LD_INT 44
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: PPUSH
17971: LD_INT 3
17973: PPUSH
17974: LD_INT 3
17976: PPUSH
17977: LD_INT 24
17979: PPUSH
17980: CALL 14514 0 7
// if russianTimeLapsers = 0 then
17984: LD_EXP 40
17988: PUSH
17989: LD_INT 0
17991: EQUAL
17992: IFFALSE 18043
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17994: LD_INT 3
17996: PPUSH
17997: LD_INT 112
17999: PPUSH
18000: LD_INT 1
18002: PUSH
18003: LD_INT 2
18005: PUSH
18006: LD_INT 2
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: LIST
18013: PUSH
18014: LD_OWVAR 67
18018: ARRAY
18019: PPUSH
18020: LD_INT 49
18022: PUSH
18023: LD_INT 49
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PPUSH
18030: LD_INT 3
18032: PPUSH
18033: LD_INT 3
18035: PPUSH
18036: LD_INT 24
18038: PPUSH
18039: CALL 14514 0 7
// end ;
18043: END
// every 0 0$1 trigger arabianMines do var i ;
18044: LD_EXP 44
18048: IFFALSE 18169
18050: GO 18052
18052: DISABLE
18053: LD_INT 0
18055: PPUSH
// begin enable ;
18056: ENABLE
// for i in arabianMines do
18057: LD_ADDR_VAR 0 1
18061: PUSH
18062: LD_EXP 44
18066: PUSH
18067: FOR_IN
18068: IFFALSE 18167
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18070: LD_INT 22
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 92
18082: PUSH
18083: LD_VAR 0 1
18087: PUSH
18088: LD_INT 1
18090: ARRAY
18091: PUSH
18092: LD_VAR 0 1
18096: PUSH
18097: LD_INT 2
18099: ARRAY
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PPUSH
18114: CALL_OW 69
18118: IFFALSE 18165
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18120: LD_VAR 0 1
18124: PUSH
18125: LD_INT 1
18127: ARRAY
18128: PPUSH
18129: LD_VAR 0 1
18133: PUSH
18134: LD_INT 2
18136: ARRAY
18137: PPUSH
18138: LD_INT 5
18140: PPUSH
18141: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18145: LD_ADDR_EXP 44
18149: PUSH
18150: LD_EXP 44
18154: PPUSH
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 3
18164: ST_TO_ADDR
// end ; end ;
18165: GO 18067
18167: POP
18168: POP
// end ;
18169: PPOPN 1
18171: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18172: LD_EXP 28
18176: PUSH
18177: LD_INT 4
18179: EQUAL
18180: PUSH
18181: LD_EXP 29
18185: PUSH
18186: LD_INT 6
18188: PUSH
18189: LD_INT 8
18191: PUSH
18192: LD_INT 8
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: LIST
18199: PUSH
18200: LD_OWVAR 67
18204: ARRAY
18205: EQUAL
18206: AND
18207: IFFALSE 18225
18209: GO 18211
18211: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18212: LD_INT 10
18214: PPUSH
18215: LD_INT 47
18217: PPUSH
18218: LD_INT 82
18220: PPUSH
18221: CALL_OW 243
18225: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18226: LD_EXP 28
18230: PUSH
18231: LD_INT 4
18233: EQUAL
18234: IFFALSE 18256
18236: GO 18238
18238: DISABLE
// begin enable ;
18239: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18240: LD_ADDR_EXP 43
18244: PUSH
18245: LD_INT 1
18247: PPUSH
18248: LD_INT 2
18250: PPUSH
18251: CALL_OW 12
18255: ST_TO_ADDR
// end ; end_of_file
18256: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18257: LD_EXP 34
18261: PUSH
18262: EMPTY
18263: EQUAL
18264: PUSH
18265: LD_INT 3
18267: PPUSH
18268: CALL_OW 301
18272: AND
18273: IFFALSE 18478
18275: GO 18277
18277: DISABLE
// begin if sciCounter = 0 then
18278: LD_EXP 35
18282: PUSH
18283: LD_INT 0
18285: EQUAL
18286: IFFALSE 18312
// begin Say ( JMM , D7a-JMM-1 ) ;
18288: LD_EXP 1
18292: PPUSH
18293: LD_STRING D7a-JMM-1
18295: PPUSH
18296: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18300: LD_EXP 22
18304: PPUSH
18305: LD_STRING D7a-Pow-1
18307: PPUSH
18308: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18312: LD_EXP 35
18316: PUSH
18317: LD_INT 0
18319: GREATER
18320: PUSH
18321: LD_EXP 35
18325: PUSH
18326: LD_INT 6
18328: LESS
18329: AND
18330: IFFALSE 18356
// begin Say ( JMM , D7b-JMM-1 ) ;
18332: LD_EXP 1
18336: PPUSH
18337: LD_STRING D7b-JMM-1
18339: PPUSH
18340: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18344: LD_EXP 22
18348: PPUSH
18349: LD_STRING D7b-Pow-1
18351: PPUSH
18352: CALL_OW 94
// end ; if sciCounter = 6 then
18356: LD_EXP 35
18360: PUSH
18361: LD_INT 6
18363: EQUAL
18364: IFFALSE 18474
// begin Say ( JMM , D7c-JMM-1 ) ;
18366: LD_EXP 1
18370: PPUSH
18371: LD_STRING D7c-JMM-1
18373: PPUSH
18374: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18378: LD_EXP 22
18382: PPUSH
18383: LD_STRING D7c-Pow-1
18385: PPUSH
18386: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18390: LD_EXP 1
18394: PPUSH
18395: LD_STRING D7d-JMM-1
18397: PPUSH
18398: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18402: LD_EXP 22
18406: PPUSH
18407: LD_STRING D7d-Pow-1
18409: PPUSH
18410: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18414: LD_EXP 1
18418: PPUSH
18419: LD_STRING D7d-JMM-2
18421: PPUSH
18422: CALL_OW 88
// if askSiberite = 1 then
18426: LD_EXP 32
18430: PUSH
18431: LD_INT 1
18433: EQUAL
18434: IFFALSE 18450
// begin Say ( JMM , D7d-JMM-2a ) ;
18436: LD_EXP 1
18440: PPUSH
18441: LD_STRING D7d-JMM-2a
18443: PPUSH
18444: CALL_OW 88
// end else
18448: GO 18462
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18450: LD_EXP 22
18454: PPUSH
18455: LD_STRING D7d-Pow-2
18457: PPUSH
18458: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18462: LD_EXP 22
18466: PPUSH
18467: LD_STRING D7d-Pow-2a
18469: PPUSH
18470: CALL_OW 94
// end ; FinishMission ;
18474: CALL 18479 0 0
// end ;
18478: END
// export function FinishMission ; begin
18479: LD_INT 0
18481: PPUSH
// if teleportExplored = 1 then
18482: LD_EXP 33
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: IFFALSE 18504
// AddMedal ( Teleport , 1 ) else
18492: LD_STRING Teleport
18494: PPUSH
18495: LD_INT 1
18497: PPUSH
18498: CALL_OW 101
18502: GO 18515
// AddMedal ( Teleport , - 1 ) ;
18504: LD_STRING Teleport
18506: PPUSH
18507: LD_INT 1
18509: NEG
18510: PPUSH
18511: CALL_OW 101
// if sciCounter > 2 then
18515: LD_EXP 35
18519: PUSH
18520: LD_INT 2
18522: GREATER
18523: IFFALSE 18537
// AddMedal ( Materials , 1 ) else
18525: LD_STRING Materials
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: CALL_OW 101
18535: GO 18548
// AddMedal ( Materials , - 1 ) ;
18537: LD_STRING Materials
18539: PPUSH
18540: LD_INT 1
18542: NEG
18543: PPUSH
18544: CALL_OW 101
// if sciCounter = 6 then
18548: LD_EXP 35
18552: PUSH
18553: LD_INT 6
18555: EQUAL
18556: IFFALSE 18580
// begin AddMedal ( Scientists , 1 ) ;
18558: LD_STRING Scientists
18560: PPUSH
18561: LD_INT 1
18563: PPUSH
18564: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18568: LD_INT 1
18570: PPUSH
18571: LD_STRING 12_SciDed_1
18573: PPUSH
18574: CALL_OW 39
// end else
18578: GO 18601
// begin AddMedal ( Scientists , - 1 ) ;
18580: LD_STRING Scientists
18582: PPUSH
18583: LD_INT 1
18585: NEG
18586: PPUSH
18587: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18591: LD_INT 0
18593: PPUSH
18594: LD_STRING 12_SciDed_1
18596: PPUSH
18597: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18601: LD_EXP 31
18605: PPUSH
18606: LD_STRING 12_MainDepositFake_1
18608: PPUSH
18609: CALL_OW 39
// GiveMedals ( MAIN ) ;
18613: LD_STRING MAIN
18615: PPUSH
18616: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18620: LD_INT 22
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 21
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 2
18642: PUSH
18643: LD_INT 25
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 25
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 25
18665: PUSH
18666: LD_INT 3
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 25
18675: PUSH
18676: LD_INT 4
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 25
18685: PUSH
18686: LD_INT 5
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 25
18695: PUSH
18696: LD_INT 8
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: PPUSH
18717: CALL_OW 69
18721: PPUSH
18722: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18726: LD_EXP 1
18730: PPUSH
18731: LD_EXP 46
18735: PUSH
18736: LD_STRING JMM
18738: STR
18739: PPUSH
18740: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18744: LD_EXP 7
18748: PPUSH
18749: LD_EXP 46
18753: PUSH
18754: LD_STRING Brown
18756: STR
18757: PPUSH
18758: CALL 12124 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18762: LD_EXP 3
18766: PPUSH
18767: LD_EXP 46
18771: PUSH
18772: LD_STRING Donaldson
18774: STR
18775: PPUSH
18776: CALL 12124 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18780: LD_EXP 4
18784: PPUSH
18785: LD_EXP 46
18789: PUSH
18790: LD_STRING Bobby
18792: STR
18793: PPUSH
18794: CALL 12124 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18798: LD_EXP 5
18802: PPUSH
18803: LD_EXP 46
18807: PUSH
18808: LD_STRING Cyrus
18810: STR
18811: PPUSH
18812: CALL 12124 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18816: LD_EXP 2
18820: PPUSH
18821: LD_EXP 46
18825: PUSH
18826: LD_STRING Lisa
18828: STR
18829: PPUSH
18830: CALL 12124 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18834: LD_EXP 12
18838: PPUSH
18839: LD_EXP 46
18843: PUSH
18844: LD_STRING Frank
18846: STR
18847: PPUSH
18848: CALL 12124 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18852: LD_EXP 13
18856: PPUSH
18857: LD_EXP 46
18861: PUSH
18862: LD_STRING Kikuchi
18864: STR
18865: PPUSH
18866: CALL 12124 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18870: LD_EXP 9
18874: PPUSH
18875: LD_EXP 46
18879: PUSH
18880: LD_STRING Houten
18882: STR
18883: PPUSH
18884: CALL 12124 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18888: LD_EXP 11
18892: PPUSH
18893: LD_EXP 46
18897: PUSH
18898: LD_STRING Gary
18900: STR
18901: PPUSH
18902: CALL 12124 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18906: LD_EXP 10
18910: PPUSH
18911: LD_EXP 46
18915: PUSH
18916: LD_STRING Cornell
18918: STR
18919: PPUSH
18920: CALL 12124 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18924: LD_EXP 6
18928: PPUSH
18929: LD_EXP 46
18933: PUSH
18934: LD_STRING Denis
18936: STR
18937: PPUSH
18938: CALL 12124 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18942: LD_EXP 8
18946: PPUSH
18947: LD_EXP 46
18951: PUSH
18952: LD_STRING Gladstone
18954: STR
18955: PPUSH
18956: CALL 12124 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18960: LD_INT 22
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 23
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 21
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 25
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 25
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 25
19015: PUSH
19016: LD_INT 3
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 25
19025: PUSH
19026: LD_INT 4
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 25
19035: PUSH
19036: LD_INT 5
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 25
19045: PUSH
19046: LD_INT 8
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: PPUSH
19068: CALL_OW 69
19072: PUSH
19073: LD_EXP 1
19077: PUSH
19078: LD_EXP 7
19082: PUSH
19083: LD_EXP 3
19087: PUSH
19088: LD_EXP 4
19092: PUSH
19093: LD_EXP 5
19097: PUSH
19098: LD_EXP 2
19102: PUSH
19103: LD_EXP 12
19107: PUSH
19108: LD_EXP 8
19112: PUSH
19113: LD_EXP 13
19117: PUSH
19118: LD_EXP 6
19122: PUSH
19123: LD_EXP 9
19127: PUSH
19128: LD_EXP 11
19132: PUSH
19133: LD_EXP 10
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: DIFF
19153: PPUSH
19154: LD_STRING 12_other_survivors
19156: PPUSH
19157: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19161: LD_INT 22
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 23
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 21
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: LD_INT 25
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 25
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 25
19216: PUSH
19217: LD_INT 3
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 25
19226: PUSH
19227: LD_INT 4
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 25
19236: PUSH
19237: LD_INT 5
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 25
19246: PUSH
19247: LD_INT 8
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: PPUSH
19269: CALL_OW 69
19273: PPUSH
19274: LD_STRING 12_kurt_squad
19276: PPUSH
19277: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19281: LD_EXP 14
19285: PPUSH
19286: LD_STRING 12_others
19288: PPUSH
19289: CALL_OW 38
// YouWin ;
19293: CALL_OW 103
// end ; end_of_file
19297: LD_VAR 0 1
19301: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19302: LD_EXP 1
19306: PPUSH
19307: CALL_OW 301
19311: IFFALSE 19323
19313: GO 19315
19315: DISABLE
// YouLost ( JMM ) ; end_of_file
19316: LD_STRING JMM
19318: PPUSH
19319: CALL_OW 104
19323: END
// every 0 0$01 do
19324: GO 19326
19326: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19327: LD_INT 1050
19329: PPUSH
19330: CALL_OW 67
// if cratesSpawned < 6 then
19334: LD_EXP 45
19338: PUSH
19339: LD_INT 6
19341: LESS
19342: IFFALSE 19379
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19344: LD_INT 3
19346: PPUSH
19347: LD_INT 5
19349: PPUSH
19350: CALL_OW 12
19354: PPUSH
19355: LD_INT 21
19357: PPUSH
19358: LD_INT 1
19360: PPUSH
19361: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19365: LD_ADDR_EXP 45
19369: PUSH
19370: LD_EXP 45
19374: PUSH
19375: LD_INT 1
19377: PLUS
19378: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19379: LD_EXP 45
19383: PUSH
19384: LD_INT 6
19386: GREATEREQUAL
19387: PUSH
19388: LD_EXP 45
19392: PUSH
19393: LD_INT 12
19395: LESS
19396: AND
19397: IFFALSE 19441
// begin wait ( 0 0$50 ) ;
19399: LD_INT 1750
19401: PPUSH
19402: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19406: LD_INT 3
19408: PPUSH
19409: LD_INT 5
19411: PPUSH
19412: CALL_OW 12
19416: PPUSH
19417: LD_INT 21
19419: PPUSH
19420: LD_INT 1
19422: PPUSH
19423: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19427: LD_ADDR_EXP 45
19431: PUSH
19432: LD_EXP 45
19436: PUSH
19437: LD_INT 1
19439: PLUS
19440: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19441: LD_EXP 45
19445: PUSH
19446: LD_INT 12
19448: GREATEREQUAL
19449: IFFALSE 19493
// begin wait ( 1 1$40 ) ;
19451: LD_INT 3500
19453: PPUSH
19454: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19458: LD_INT 3
19460: PPUSH
19461: LD_INT 5
19463: PPUSH
19464: CALL_OW 12
19468: PPUSH
19469: LD_INT 21
19471: PPUSH
19472: LD_INT 1
19474: PPUSH
19475: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19479: LD_ADDR_EXP 45
19483: PUSH
19484: LD_EXP 45
19488: PUSH
19489: LD_INT 1
19491: PLUS
19492: ST_TO_ADDR
// end ; until false ;
19493: LD_INT 0
19495: IFFALSE 19327
// end ;
19497: END
