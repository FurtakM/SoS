// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded , cratesAllow ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 103 0 0
// InGameOn ;
  19: CALL_OW 8
// CenterNowOnXY ( 67 , 22 ) ;
  23: LD_INT 67
  25: PPUSH
  26: LD_INT 22
  28: PPUSH
  29: CALL_OW 86
// PlaceSeeing ( 67 , 22 , 1 , - 6 ) ;
  33: LD_INT 67
  35: PPUSH
  36: LD_INT 22
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: LD_INT 6
  44: NEG
  45: PPUSH
  46: CALL_OW 330
// RemoveSeeing ( 67 , 22 , 1 ) ;
  50: LD_INT 67
  52: PPUSH
  53: LD_INT 22
  55: PPUSH
  56: LD_INT 1
  58: PPUSH
  59: CALL_OW 331
// CreateNature ;
  63: CALL 16014 0 0
// RaiseSailEvent ( 1 ) ;
  67: LD_INT 1
  69: PPUSH
  70: CALL_OW 427
// PrepareVehicles ;
  74: CALL 1938 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL 1456 0 4
// PrepareAmericanHeroes ;
  94: CALL 671 0 0
// Action ;
  98: CALL 6297 0 0
// end ;
 102: END
// function Init ; begin
 103: LD_INT 0
 105: PPUSH
// RuScientists := [ ] ;
 106: LD_ADDR_EXP 27
 110: PUSH
 111: EMPTY
 112: ST_TO_ADDR
// sciCounter := 0 ;
 113: LD_ADDR_EXP 28
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 121: LD_ADDR_EXP 31
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// russianTanks := [ ] ;
 128: LD_ADDR_EXP 32
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 135: LD_ADDR_EXP 33
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// arabianMines := [ ] ;
 142: LD_ADDR_EXP 37
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 149: LD_ADDR_EXP 19
 153: PUSH
 154: LD_STRING 06_KurtStatus_1
 156: PPUSH
 157: LD_INT 0
 159: PPUSH
 160: CALL_OW 30
 164: ST_TO_ADDR
// secondPass := 0 ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// teleportExplored := 0 ;
 173: LD_ADDR_EXP 26
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// attackTactic := 0 ;
 181: LD_ADDR_EXP 36
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tpCounter := 0 ;
 189: LD_ADDR_EXP 22
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// askSiberite := 0 ;
 197: LD_ADDR_EXP 25
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// warWithLegion := 0 ;
 205: LD_ADDR_EXP 23
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// fakeInfo := 0 ;
 213: LD_ADDR_EXP 24
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// cratesSpawned := 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// ruAI := 0 ;
 229: LD_ADDR_EXP 34
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// ruEscape := 0 ;
 237: LD_ADDR_EXP 35
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// eventVar1 := 0 ;
 245: LD_ADDR_EXP 40
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// mission_prefix := 12_ ;
 253: LD_ADDR_EXP 39
 257: PUSH
 258: LD_STRING 12_
 260: ST_TO_ADDR
// debugMode := 0 ;
 261: LD_ADDR_EXP 41
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// westPathUsed := false ;
 269: LD_ADDR_EXP 42
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 277: LD_ADDR_EXP 43
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// rocketBuilded := false ;
 285: LD_ADDR_EXP 44
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// cratesAllow := false ;
 293: LD_ADDR_EXP 45
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// end ;
 301: LD_VAR 0 1
 305: RET
// every 0 0$1 trigger debugMode do var i ;
 306: LD_EXP 41
 310: IFFALSE 616
 312: GO 314
 314: DISABLE
 315: LD_INT 0
 317: PPUSH
// begin enable ;
 318: ENABLE
// FogOff ( true ) ;
 319: LD_INT 1
 321: PPUSH
 322: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 326: LD_ADDR_VAR 0 1
 330: PUSH
 331: LD_INT 22
 333: PUSH
 334: LD_INT 1
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 1
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PPUSH
 355: CALL_OW 69
 359: PUSH
 360: FOR_IN
 361: IFFALSE 377
// SetLives ( i , 1000 ) ;
 363: LD_VAR 0 1
 367: PPUSH
 368: LD_INT 1000
 370: PPUSH
 371: CALL_OW 234
 375: GO 360
 377: POP
 378: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 379: LD_ADDR_VAR 0 1
 383: PUSH
 384: LD_INT 22
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: LD_INT 2
 396: PUSH
 397: LD_INT 30
 399: PUSH
 400: LD_INT 0
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 456
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: CALL_OW 274
 443: PPUSH
 444: LD_INT 1
 446: PPUSH
 447: LD_INT 9999
 449: PPUSH
 450: CALL_OW 277
 454: GO 431
 456: POP
 457: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 458: LD_ADDR_VAR 0 1
 462: PUSH
 463: LD_INT 22
 465: PUSH
 466: LD_INT 1
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 30
 488: PUSH
 489: LD_INT 1
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PUSH
 510: FOR_IN
 511: IFFALSE 535
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 513: LD_VAR 0 1
 517: PPUSH
 518: CALL_OW 274
 522: PPUSH
 523: LD_INT 2
 525: PPUSH
 526: LD_INT 9999
 528: PPUSH
 529: CALL_OW 277
 533: GO 510
 535: POP
 536: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 537: LD_ADDR_VAR 0 1
 541: PUSH
 542: LD_INT 22
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 2
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: LD_INT 30
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: PPUSH
 584: CALL_OW 69
 588: PUSH
 589: FOR_IN
 590: IFFALSE 614
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 592: LD_VAR 0 1
 596: PPUSH
 597: CALL_OW 274
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 9999
 607: PPUSH
 608: CALL_OW 277
 612: GO 589
 614: POP
 615: POP
// end ;
 616: PPOPN 1
 618: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 619: LD_INT 24
 621: PPUSH
 622: LD_INT 22
 624: PUSH
 625: LD_INT 1
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: PPUSH
 632: CALL_OW 70
 636: IFFALSE 649
 638: GO 640
 640: DISABLE
// westPathUsed := true ;
 641: LD_ADDR_EXP 42
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
 649: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 650: LD_EXP 43
 654: PUSH
 655: LD_INT 3
 657: GREATEREQUAL
 658: IFFALSE 670
 660: GO 662
 662: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 663: LD_STRING ACH_LASER
 665: PPUSH
 666: CALL_OW 543
 670: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 671: LD_INT 0
 673: PPUSH
 674: PPUSH
 675: PPUSH
// uc_side := 1 ;
 676: LD_ADDR_OWVAR 20
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 684: LD_ADDR_EXP 14
 688: PUSH
 689: LD_STRING 11c_others
 691: PPUSH
 692: CALL_OW 31
 696: PUSH
 697: LD_STRING 11_others
 699: PPUSH
 700: CALL_OW 31
 704: UNION
 705: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 11_ ) ;
 706: LD_ADDR_EXP 1
 710: PUSH
 711: LD_STRING JMM
 713: PPUSH
 714: LD_EXP 41
 718: NOT
 719: PPUSH
 720: LD_STRING 11_
 722: PPUSH
 723: CALL 42606 0 3
 727: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 728: LD_EXP 1
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 740: LD_EXP 1
 744: PPUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 58
 767: PUSH
 768: EMPTY
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PPUSH
 776: CALL_OW 69
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 52
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 11_ ) ;
 789: LD_ADDR_EXP 2
 793: PUSH
 794: LD_STRING Lisa
 796: PPUSH
 797: LD_EXP 41
 801: NOT
 802: PPUSH
 803: LD_STRING 11_
 805: PPUSH
 806: CALL 42606 0 3
 810: ST_TO_ADDR
// if Lisa then
 811: LD_EXP 2
 815: IFFALSE 855
// begin SetClass ( Lisa , 1 ) ;
 817: LD_EXP 2
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: CALL_OW 336
// repeat wait ( 1 ) ;
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 67
// until PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 836: LD_EXP 2
 840: PPUSH
 841: LD_INT 4
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 49
 851: IFFALSE 829
// end else
 853: GO 871
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 855: LD_INT 4
 857: PPUSH
 858: LD_INT 0
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL 1456 0 4
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 11_ ) ;
 871: LD_ADDR_EXP 3
 875: PUSH
 876: LD_STRING Donaldson
 878: PPUSH
 879: LD_EXP 41
 883: NOT
 884: PPUSH
 885: LD_STRING 11_
 887: PPUSH
 888: CALL 42606 0 3
 892: ST_TO_ADDR
// if Donaldson then
 893: LD_EXP 3
 897: IFFALSE 937
// begin SetClass ( Donaldson , 1 ) ;
 899: LD_EXP 3
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL_OW 336
// repeat wait ( 1 ) ;
 911: LD_INT 1
 913: PPUSH
 914: CALL_OW 67
// until PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 918: LD_EXP 3
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
 933: IFFALSE 911
// end else
 935: GO 953
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL 1456 0 4
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 11_ ) ;
 953: LD_ADDR_EXP 5
 957: PUSH
 958: LD_STRING Cyrus
 960: PPUSH
 961: LD_EXP 41
 965: NOT
 966: PPUSH
 967: LD_STRING 11_
 969: PPUSH
 970: CALL 42606 0 3
 974: ST_TO_ADDR
// if Cyrus then
 975: LD_EXP 5
 979: IFFALSE 1019
// begin SetClass ( Cyrus , 1 ) ;
 981: LD_EXP 5
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL_OW 336
// repeat wait ( 1 ) ;
 993: LD_INT 1
 995: PPUSH
 996: CALL_OW 67
// until PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1000: LD_EXP 5
1004: PPUSH
1005: LD_INT 4
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 49
1015: IFFALSE 993
// end else
1017: GO 1035
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1019: LD_INT 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL 1456 0 4
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 11_ ) ;
1035: LD_ADDR_EXP 6
1039: PUSH
1040: LD_STRING Denis
1042: PPUSH
1043: LD_EXP 41
1047: NOT
1048: PPUSH
1049: LD_STRING 11_
1051: PPUSH
1052: CALL 42606 0 3
1056: ST_TO_ADDR
// if Denis then
1057: LD_EXP 6
1061: IFFALSE 1101
// begin SetClass ( Denis , 4 ) ;
1063: LD_EXP 6
1067: PPUSH
1068: LD_INT 4
1070: PPUSH
1071: CALL_OW 336
// repeat wait ( 1 ) ;
1075: LD_INT 1
1077: PPUSH
1078: CALL_OW 67
// until PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1082: LD_EXP 6
1086: PPUSH
1087: LD_INT 4
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
1097: IFFALSE 1075
// end else
1099: GO 1117
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1101: LD_INT 4
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: LD_INT 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL 1456 0 4
// Frank := PrepareUnit ( Frank , ( not debugMode ) , 11_ ) ;
1117: LD_ADDR_EXP 12
1121: PUSH
1122: LD_STRING Frank
1124: PPUSH
1125: LD_EXP 41
1129: NOT
1130: PPUSH
1131: LD_STRING 11_
1133: PPUSH
1134: CALL 42606 0 3
1138: ST_TO_ADDR
// if Frank then
1139: LD_EXP 12
1143: IFFALSE 1183
// begin SetClass ( Frank , 1 ) ;
1145: LD_EXP 12
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: CALL_OW 336
// repeat wait ( 1 ) ;
1157: LD_INT 1
1159: PPUSH
1160: CALL_OW 67
// until PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1164: LD_EXP 12
1168: PPUSH
1169: LD_INT 4
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
1179: IFFALSE 1157
// end else
1181: GO 1199
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1183: LD_INT 4
1185: PPUSH
1186: LD_INT 0
1188: PPUSH
1189: LD_INT 1
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL 1456 0 4
// Cornel := PrepareUnit ( Cornell , ( not debugMode ) , 11_ ) ;
1199: LD_ADDR_EXP 10
1203: PUSH
1204: LD_STRING Cornell
1206: PPUSH
1207: LD_EXP 41
1211: NOT
1212: PPUSH
1213: LD_STRING 11_
1215: PPUSH
1216: CALL 42606 0 3
1220: ST_TO_ADDR
// if Cornel then
1221: LD_EXP 10
1225: IFFALSE 1265
// begin SetClass ( Cornel , 1 ) ;
1227: LD_EXP 10
1231: PPUSH
1232: LD_INT 1
1234: PPUSH
1235: CALL_OW 336
// repeat wait ( 1 ) ;
1239: LD_INT 1
1241: PPUSH
1242: CALL_OW 67
// until PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1246: LD_EXP 10
1250: PPUSH
1251: LD_INT 4
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL_OW 49
1261: IFFALSE 1239
// end else
1263: GO 1281
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1265: LD_INT 4
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: LD_INT 1
1273: PPUSH
1274: LD_INT 0
1276: PPUSH
1277: CALL 1456 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1281: LD_ADDR_VAR 0 2
1285: PUSH
1286: LD_EXP 14
1290: PPUSH
1291: LD_INT 26
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PPUSH
1301: CALL_OW 72
1305: ST_TO_ADDR
// if not tmp then
1306: LD_VAR 0 2
1310: NOT
1311: IFFALSE 1349
// begin PrepareSoldier ( sex_male , 8 ) ;
1313: LD_INT 1
1315: PPUSH
1316: LD_INT 8
1318: PPUSH
1319: CALL_OW 381
// repeat wait ( 1 ) ;
1323: LD_INT 1
1325: PPUSH
1326: CALL_OW 67
// until PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1330: CALL_OW 44
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 49
1345: IFFALSE 1323
// end else
1347: GO 1432
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1349: LD_VAR 0 2
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: CALL_OW 257
1362: PUSH
1363: LD_INT 1
1365: NONEQUAL
1366: IFFALSE 1384
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1368: LD_VAR 0 2
1372: PUSH
1373: LD_INT 1
1375: ARRAY
1376: PPUSH
1377: LD_INT 1
1379: PPUSH
1380: CALL_OW 336
// repeat wait ( 1 ) ;
1384: LD_INT 1
1386: PPUSH
1387: CALL_OW 67
// until PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1391: LD_VAR 0 2
1395: PUSH
1396: LD_INT 1
1398: ARRAY
1399: PPUSH
1400: LD_INT 4
1402: PPUSH
1403: LD_INT 0
1405: PPUSH
1406: CALL_OW 49
1410: IFFALSE 1384
// others11 := others11 diff tmp [ 1 ] ;
1412: LD_ADDR_EXP 14
1416: PUSH
1417: LD_EXP 14
1421: PUSH
1422: LD_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: DIFF
1431: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1432: LD_ADDR_EXP 15
1436: PUSH
1437: LD_STRING Powell
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: LD_STRING 
1445: PPUSH
1446: CALL 42606 0 3
1450: ST_TO_ADDR
// end ;
1451: LD_VAR 0 1
1455: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1456: LD_INT 0
1458: PPUSH
1459: PPUSH
1460: PPUSH
1461: PPUSH
1462: PPUSH
// if mech = 1 then
1463: LD_VAR 0 4
1467: PUSH
1468: LD_INT 1
1470: EQUAL
1471: IFFALSE 1725
// begin if others11 then
1473: LD_EXP 14
1477: IFFALSE 1665
// begin for i := 1 to others11 - 1 do
1479: LD_ADDR_VAR 0 6
1483: PUSH
1484: DOUBLE
1485: LD_INT 1
1487: DEC
1488: ST_TO_ADDR
1489: LD_EXP 14
1493: PUSH
1494: LD_INT 1
1496: MINUS
1497: PUSH
1498: FOR_TO
1499: IFFALSE 1581
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1501: LD_EXP 14
1505: PUSH
1506: LD_VAR 0 6
1510: ARRAY
1511: PPUSH
1512: LD_INT 3
1514: PPUSH
1515: CALL_OW 259
1519: PUSH
1520: LD_EXP 14
1524: PUSH
1525: LD_VAR 0 6
1529: PUSH
1530: LD_INT 1
1532: PLUS
1533: ARRAY
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: CALL_OW 259
1542: LESS
1543: IFFALSE 1579
// begin mecha = others11 [ i + 1 ] ;
1545: LD_ADDR_VAR 0 9
1549: PUSH
1550: LD_EXP 14
1554: PUSH
1555: LD_VAR 0 6
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: ARRAY
1564: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1565: LD_VAR 0 9
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 336
// break ;
1577: GO 1581
// end ; end ;
1579: GO 1498
1581: POP
1582: POP
// if spawnMode = 1 then
1583: LD_VAR 0 3
1587: PUSH
1588: LD_INT 1
1590: EQUAL
1591: IFFALSE 1633
// begin SetClass ( mecha , class_soldier ) ;
1593: LD_VAR 0 9
1597: PPUSH
1598: LD_INT 1
1600: PPUSH
1601: CALL_OW 336
// repeat wait ( 1 ) ;
1605: LD_INT 1
1607: PPUSH
1608: CALL_OW 67
// until PlaceUnitArea ( mecha , area , false ) ;
1612: LD_VAR 0 9
1616: PPUSH
1617: LD_VAR 0 1
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 49
1629: IFFALSE 1605
// end else
1631: GO 1647
// PlaceHumanInUnit ( mecha , veh ) ;
1633: LD_VAR 0 9
1637: PPUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 52
// others11 := others11 diff mecha ;
1647: LD_ADDR_EXP 14
1651: PUSH
1652: LD_EXP 14
1656: PUSH
1657: LD_VAR 0 9
1661: DIFF
1662: ST_TO_ADDR
// end else
1663: GO 1723
// begin hc_name :=  ;
1665: LD_ADDR_OWVAR 26
1669: PUSH
1670: LD_STRING 
1672: ST_TO_ADDR
// hc_gallery :=  ;
1673: LD_ADDR_OWVAR 33
1677: PUSH
1678: LD_STRING 
1680: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1681: LD_INT 0
1683: PPUSH
1684: LD_INT 7
1686: PPUSH
1687: LD_INT 9
1689: PPUSH
1690: CALL_OW 12
1694: PPUSH
1695: CALL_OW 383
// un := CreateHuman ;
1699: LD_ADDR_VAR 0 7
1703: PUSH
1704: CALL_OW 44
1708: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1709: LD_VAR 0 7
1713: PPUSH
1714: LD_VAR 0 2
1718: PPUSH
1719: CALL_OW 52
// end ; end else
1723: GO 1933
// begin if others11 then
1725: LD_EXP 14
1729: IFFALSE 1827
// begin if spawnMode = 1 then
1731: LD_VAR 0 3
1735: PUSH
1736: LD_INT 1
1738: EQUAL
1739: IFFALSE 1789
// begin SetClass ( others11 [ 1 ] , class_soldier ) ;
1741: LD_EXP 14
1745: PUSH
1746: LD_INT 1
1748: ARRAY
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 336
// repeat wait ( 1 ) ;
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 67
// until PlaceUnitArea ( others11 [ 1 ] , area , false ) ;
1764: LD_EXP 14
1768: PUSH
1769: LD_INT 1
1771: ARRAY
1772: PPUSH
1773: LD_VAR 0 1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 49
1785: IFFALSE 1757
// end else
1787: GO 1807
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1789: LD_EXP 14
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_VAR 0 2
1802: PPUSH
1803: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1807: LD_ADDR_EXP 14
1811: PUSH
1812: LD_EXP 14
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 3
1824: ST_TO_ADDR
// end else
1825: GO 1933
// begin hc_name :=  ;
1827: LD_ADDR_OWVAR 26
1831: PUSH
1832: LD_STRING 
1834: ST_TO_ADDR
// hc_gallery :=  ;
1835: LD_ADDR_OWVAR 33
1839: PUSH
1840: LD_STRING 
1842: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 7 , 9 ) ) ;
1843: LD_INT 0
1845: PPUSH
1846: LD_INT 1
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL_OW 12
1856: PPUSH
1857: LD_INT 7
1859: PPUSH
1860: LD_INT 9
1862: PPUSH
1863: CALL_OW 12
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 7
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
1882: LD_VAR 0 7
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: CALL_OW 336
// if veh then
1894: LD_VAR 0 2
1898: IFFALSE 1916
// PlaceHumanInUnit ( un , veh ) else
1900: LD_VAR 0 7
1904: PPUSH
1905: LD_VAR 0 2
1909: PPUSH
1910: CALL_OW 52
1914: GO 1933
// PlaceUnitArea ( un , area , false ) ;
1916: LD_VAR 0 7
1920: PPUSH
1921: LD_VAR 0 1
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// end ; end ; end ;
1933: LD_VAR 0 5
1937: RET
// export function PrepareVehicles ; var veh ; begin
1938: LD_INT 0
1940: PPUSH
1941: PPUSH
// uc_side := 1 ;
1942: LD_ADDR_OWVAR 20
1946: PUSH
1947: LD_INT 1
1949: ST_TO_ADDR
// uc_nation := 1 ;
1950: LD_ADDR_OWVAR 21
1954: PUSH
1955: LD_INT 1
1957: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 3
1965: ST_TO_ADDR
// vc_engine := engine_siberite ;
1966: LD_ADDR_OWVAR 39
1970: PUSH
1971: LD_INT 3
1973: ST_TO_ADDR
// vc_control := control_computer ;
1974: LD_ADDR_OWVAR 38
1978: PUSH
1979: LD_INT 3
1981: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1982: LD_ADDR_OWVAR 40
1986: PUSH
1987: LD_INT 4
1989: ST_TO_ADDR
// veh := CreateVehicle ;
1990: LD_ADDR_VAR 0 2
1994: PUSH
1995: CALL_OW 45
1999: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2000: LD_VAR 0 2
2004: PPUSH
2005: LD_INT 4
2007: PPUSH
2008: CALL_OW 233
// repeat wait ( 1 ) ;
2012: LD_INT 1
2014: PPUSH
2015: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 4
2026: PPUSH
2027: LD_INT 0
2029: PPUSH
2030: CALL_OW 49
2034: IFFALSE 2012
// vc_weapon := us_double_gun ;
2036: LD_ADDR_OWVAR 40
2040: PUSH
2041: LD_INT 5
2043: ST_TO_ADDR
// vc_control := control_manual ;
2044: LD_ADDR_OWVAR 38
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// veh := CreateVehicle ;
2052: LD_ADDR_VAR 0 2
2056: PUSH
2057: CALL_OW 45
2061: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2062: LD_VAR 0 2
2066: PPUSH
2067: LD_INT 4
2069: PPUSH
2070: CALL_OW 233
// repeat wait ( 3 ) ;
2074: LD_INT 3
2076: PPUSH
2077: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 4
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: IFFALSE 2074
// vc_weapon := us_radar ;
2098: LD_ADDR_OWVAR 40
2102: PUSH
2103: LD_INT 11
2105: ST_TO_ADDR
// vc_control := control_computer ;
2106: LD_ADDR_OWVAR 38
2110: PUSH
2111: LD_INT 3
2113: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2114: LD_ADDR_OWVAR 37
2118: PUSH
2119: LD_INT 2
2121: ST_TO_ADDR
// veh := CreateVehicle ;
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: CALL_OW 45
2131: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2132: LD_VAR 0 2
2136: PPUSH
2137: LD_INT 4
2139: PPUSH
2140: CALL_OW 233
// repeat wait ( 1 ) ;
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_INT 4
2158: PPUSH
2159: LD_INT 0
2161: PPUSH
2162: CALL_OW 49
2166: IFFALSE 2144
// vc_weapon := us_double_gun ;
2168: LD_ADDR_OWVAR 40
2172: PUSH
2173: LD_INT 5
2175: ST_TO_ADDR
// veh := CreateVehicle ;
2176: LD_ADDR_VAR 0 2
2180: PUSH
2181: CALL_OW 45
2185: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2186: LD_VAR 0 2
2190: PPUSH
2191: LD_INT 4
2193: PPUSH
2194: CALL_OW 233
// repeat wait ( 1 ) ;
2198: LD_INT 1
2200: PPUSH
2201: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: LD_INT 4
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 49
2220: IFFALSE 2198
// end ;
2222: LD_VAR 0 1
2226: RET
// export function PowellSupport1 ; var veh , un ; begin
2227: LD_INT 0
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 1 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// uc_nation := 1 ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 11_ ) ;
2248: LD_ADDR_EXP 7
2252: PUSH
2253: LD_STRING Brown
2255: PPUSH
2256: LD_EXP 41
2260: NOT
2261: PPUSH
2262: LD_STRING 11_
2264: PPUSH
2265: CALL 42606 0 3
2269: ST_TO_ADDR
// if Brown then
2270: LD_EXP 7
2274: IFFALSE 2305
// begin SetClass ( Brown , class_engineer ) ;
2276: LD_EXP 7
2280: PPUSH
2281: LD_INT 2
2283: PPUSH
2284: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2288: LD_EXP 7
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
// end else
2303: GO 2321
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2305: LD_INT 4
2307: PPUSH
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: CALL 1456 0 4
// Gary := PrepareUnit ( Gary , ( not debugMode ) , 11_ ) ;
2321: LD_ADDR_EXP 11
2325: PUSH
2326: LD_STRING Gary
2328: PPUSH
2329: LD_EXP 41
2333: NOT
2334: PPUSH
2335: LD_STRING 11_
2337: PPUSH
2338: CALL 42606 0 3
2342: ST_TO_ADDR
// if Gary then
2343: LD_EXP 11
2347: IFFALSE 2378
// begin SetClass ( Gary , class_engineer ) ;
2349: LD_EXP 11
2353: PPUSH
2354: LD_INT 2
2356: PPUSH
2357: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2361: LD_EXP 11
2365: PPUSH
2366: LD_INT 4
2368: PPUSH
2369: LD_INT 0
2371: PPUSH
2372: CALL_OW 49
// end else
2376: GO 2394
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2378: LD_INT 4
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 0
2389: PPUSH
2390: CALL 1456 0 4
// vc_chassis := us_medium_tracked ;
2394: LD_ADDR_OWVAR 37
2398: PUSH
2399: LD_INT 3
2401: ST_TO_ADDR
// vc_engine := engine_siberite ;
2402: LD_ADDR_OWVAR 39
2406: PUSH
2407: LD_INT 3
2409: ST_TO_ADDR
// vc_control := control_manual ;
2410: LD_ADDR_OWVAR 38
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// vc_weapon := us_crane ;
2418: LD_ADDR_OWVAR 40
2422: PUSH
2423: LD_INT 13
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2436: LD_VAR 0 2
2440: PPUSH
2441: LD_INT 4
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2448: LD_VAR 0 2
2452: PPUSH
2453: LD_INT 4
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2463: LD_INT 4
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: LD_INT 2
2473: PPUSH
2474: LD_INT 1
2476: PPUSH
2477: CALL 1456 0 4
// vc_weapon := us_laser ;
2481: LD_ADDR_OWVAR 40
2485: PUSH
2486: LD_INT 9
2488: ST_TO_ADDR
// veh := CreateVehicle ;
2489: LD_ADDR_VAR 0 2
2493: PUSH
2494: CALL_OW 45
2498: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2499: LD_VAR 0 2
2503: PPUSH
2504: LD_INT 4
2506: PPUSH
2507: CALL_OW 233
// repeat wait ( 3 ) ;
2511: LD_INT 3
2513: PPUSH
2514: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2518: LD_VAR 0 2
2522: PPUSH
2523: LD_INT 4
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
2533: IFFALSE 2511
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2535: LD_INT 4
2537: PPUSH
2538: LD_VAR 0 2
2542: PPUSH
2543: LD_INT 2
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: CALL 1456 0 4
// vc_control := control_computer ;
2553: LD_ADDR_OWVAR 38
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2561: LD_ADDR_OWVAR 40
2565: PUSH
2566: LD_INT 12
2568: ST_TO_ADDR
// veh := CreateVehicle ;
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: CALL_OW 45
2578: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 17
2586: PPUSH
2587: CALL_OW 109
// SetDir ( veh , 4 ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_INT 4
2598: PPUSH
2599: CALL_OW 233
// repeat wait ( 1 ) ;
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2610: LD_VAR 0 2
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
2625: IFFALSE 2603
// AddCargo ( veh , mat_siberit , 100 ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 3
2634: PPUSH
2635: LD_INT 100
2637: PPUSH
2638: CALL_OW 291
// veh := CreateVehicle ;
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: CALL_OW 45
2651: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2652: LD_VAR 0 2
2656: PPUSH
2657: LD_INT 17
2659: PPUSH
2660: CALL_OW 109
// SetDir ( veh , 4 ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 4
2671: PPUSH
2672: CALL_OW 233
// repeat wait ( 1 ) ;
2676: LD_INT 1
2678: PPUSH
2679: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2683: LD_VAR 0 2
2687: PPUSH
2688: LD_INT 4
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
2698: IFFALSE 2676
// AddCargo ( veh , mat_siberit , 20 ) ;
2700: LD_VAR 0 2
2704: PPUSH
2705: LD_INT 3
2707: PPUSH
2708: LD_INT 20
2710: PPUSH
2711: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2715: LD_VAR 0 2
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: LD_INT 80
2725: PPUSH
2726: CALL_OW 291
// end ;
2730: LD_VAR 0 1
2734: RET
// export function PowellSupport2 ; var veh , un ; begin
2735: LD_INT 0
2737: PPUSH
2738: PPUSH
2739: PPUSH
// uc_side := 1 ;
2740: LD_ADDR_OWVAR 20
2744: PUSH
2745: LD_INT 1
2747: ST_TO_ADDR
// uc_nation := 1 ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// vc_engine := engine_siberite ;
2756: LD_ADDR_OWVAR 39
2760: PUSH
2761: LD_INT 3
2763: ST_TO_ADDR
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2772: LD_ADDR_OWVAR 37
2776: PUSH
2777: LD_INT 2
2779: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2780: LD_ADDR_OWVAR 40
2784: PUSH
2785: LD_INT 5
2787: ST_TO_ADDR
// veh := CreateVehicle ;
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: CALL_OW 45
2797: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2798: LD_VAR 0 2
2802: PPUSH
2803: LD_INT 4
2805: PPUSH
2806: CALL_OW 233
// repeat wait ( 1 ) ;
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 49
2832: IFFALSE 2810
// vc_chassis := us_heavy_tracked ;
2834: LD_ADDR_OWVAR 37
2838: PUSH
2839: LD_INT 4
2841: ST_TO_ADDR
// vc_engine := engine_siberite ;
2842: LD_ADDR_OWVAR 39
2846: PUSH
2847: LD_INT 3
2849: ST_TO_ADDR
// vc_control := control_manual ;
2850: LD_ADDR_OWVAR 38
2854: PUSH
2855: LD_INT 1
2857: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
2858: LD_ADDR_OWVAR 40
2862: PUSH
2863: LD_INT 6
2865: ST_TO_ADDR
// veh := CreateVehicle ;
2866: LD_ADDR_VAR 0 2
2870: PUSH
2871: CALL_OW 45
2875: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2876: LD_VAR 0 2
2880: PPUSH
2881: LD_INT 4
2883: PPUSH
2884: CALL_OW 233
// repeat wait ( 1 ) ;
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2895: LD_VAR 0 2
2899: PPUSH
2900: LD_INT 4
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
2910: IFFALSE 2888
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 11_ ) ;
2912: LD_ADDR_EXP 4
2916: PUSH
2917: LD_STRING Bobby
2919: PPUSH
2920: LD_EXP 41
2924: NOT
2925: PPUSH
2926: LD_STRING 11_
2928: PPUSH
2929: CALL 42606 0 3
2933: ST_TO_ADDR
// if Bobby then
2934: LD_EXP 4
2938: IFFALSE 2968
// begin SetClass ( Bobby , 3 ) ;
2940: LD_EXP 4
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2952: LD_EXP 4
2956: PPUSH
2957: LD_VAR 0 2
2961: PPUSH
2962: CALL_OW 52
// end else
2966: GO 2986
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2968: LD_INT 0
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: LD_INT 2
2978: PPUSH
2979: LD_INT 0
2981: PPUSH
2982: CALL 1456 0 4
// Houten := PrepareUnit ( Houten , ( not debugMode ) , 11_ ) ;
2986: LD_ADDR_EXP 9
2990: PUSH
2991: LD_STRING Houten
2993: PPUSH
2994: LD_EXP 41
2998: NOT
2999: PPUSH
3000: LD_STRING 11_
3002: PPUSH
3003: CALL 42606 0 3
3007: ST_TO_ADDR
// if Houten then
3008: LD_EXP 9
3012: IFFALSE 3052
// begin SetClass ( Houten , 1 ) ;
3014: LD_EXP 9
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: CALL_OW 336
// repeat wait ( 1 ) ;
3026: LD_INT 1
3028: PPUSH
3029: CALL_OW 67
// until PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
3033: LD_EXP 9
3037: PPUSH
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
3048: IFFALSE 3026
// end else
3050: GO 3068
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: LD_INT 1
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL 1456 0 4
// vc_chassis := us_medium_wheeled ;
3068: LD_ADDR_OWVAR 37
3072: PUSH
3073: LD_INT 2
3075: ST_TO_ADDR
// vc_control := control_computer ;
3076: LD_ADDR_OWVAR 38
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3084: LD_ADDR_OWVAR 40
3088: PUSH
3089: LD_INT 12
3091: ST_TO_ADDR
// veh := CreateVehicle ;
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: CALL_OW 45
3101: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3102: LD_VAR 0 2
3106: PPUSH
3107: LD_INT 4
3109: PPUSH
3110: CALL_OW 233
// SetTag ( veh , 17 ) ;
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_INT 17
3121: PPUSH
3122: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
3126: LD_VAR 0 2
3130: PPUSH
3131: LD_INT 1
3133: PPUSH
3134: LD_INT 100
3136: PPUSH
3137: CALL_OW 291
// veh := CreateVehicle ;
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3151: LD_VAR 0 2
3155: PPUSH
3156: LD_INT 4
3158: PPUSH
3159: CALL_OW 233
// SetTag ( veh , 17 ) ;
3163: LD_VAR 0 2
3167: PPUSH
3168: LD_INT 17
3170: PPUSH
3171: CALL_OW 109
// repeat wait ( 1 ) ;
3175: LD_INT 1
3177: PPUSH
3178: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: CALL_OW 49
3197: IFFALSE 3175
// AddCargo ( veh , mat_cans , 100 ) ;
3199: LD_VAR 0 2
3203: PPUSH
3204: LD_INT 1
3206: PPUSH
3207: LD_INT 100
3209: PPUSH
3210: CALL_OW 291
// veh := CreateVehicle ;
3214: LD_ADDR_VAR 0 2
3218: PUSH
3219: CALL_OW 45
3223: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 4
3231: PPUSH
3232: CALL_OW 233
// SetTag ( veh , 17 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 17
3243: PPUSH
3244: CALL_OW 109
// repeat wait ( 1 ) ;
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: LD_INT 0
3265: PPUSH
3266: CALL_OW 49
3270: IFFALSE 3248
// if kurtStatus = 1 then
3272: LD_EXP 19
3276: PUSH
3277: LD_INT 1
3279: EQUAL
3280: IFFALSE 3314
// begin AddCargo ( veh , mat_siberit , 60 ) ;
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_INT 3
3289: PPUSH
3290: LD_INT 60
3292: PPUSH
3293: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3297: LD_VAR 0 2
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: LD_INT 40
3307: PPUSH
3308: CALL_OW 291
// end else
3312: GO 3329
// AddCargo ( veh , mat_cans , 100 ) ;
3314: LD_VAR 0 2
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: LD_INT 100
3324: PPUSH
3325: CALL_OW 291
// veh := CreateVehicle ;
3329: LD_ADDR_VAR 0 2
3333: PUSH
3334: CALL_OW 45
3338: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3339: LD_VAR 0 2
3343: PPUSH
3344: LD_INT 4
3346: PPUSH
3347: CALL_OW 233
// SetTag ( veh , 17 ) ;
3351: LD_VAR 0 2
3355: PPUSH
3356: LD_INT 17
3358: PPUSH
3359: CALL_OW 109
// repeat wait ( 1 ) ;
3363: LD_INT 1
3365: PPUSH
3366: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3370: LD_VAR 0 2
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 49
3385: IFFALSE 3363
// AddCargo ( veh , mat_oil , 60 ) ;
3387: LD_VAR 0 2
3391: PPUSH
3392: LD_INT 2
3394: PPUSH
3395: LD_INT 60
3397: PPUSH
3398: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3402: LD_VAR 0 2
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: LD_INT 40
3412: PPUSH
3413: CALL_OW 291
// end ;
3417: LD_VAR 0 1
3421: RET
// export function PowellSupport3 ; var i , cargo ; begin
3422: LD_INT 0
3424: PPUSH
3425: PPUSH
3426: PPUSH
// uc_side := 1 ;
3427: LD_ADDR_OWVAR 20
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// uc_nation := 1 ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_INT 1
3442: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3443: LD_INT 4
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: LD_INT 1
3451: PPUSH
3452: LD_INT 0
3454: PPUSH
3455: CALL 1456 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3459: LD_INT 4
3461: PPUSH
3462: LD_INT 0
3464: PPUSH
3465: LD_INT 1
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL 1456 0 4
// for i := 1 to 2 do
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: DOUBLE
3481: LD_INT 1
3483: DEC
3484: ST_TO_ADDR
3485: LD_INT 2
3487: PUSH
3488: FOR_TO
3489: IFFALSE 3598
// begin vc_chassis := us_medium_wheeled ;
3491: LD_ADDR_OWVAR 37
3495: PUSH
3496: LD_INT 2
3498: ST_TO_ADDR
// vc_engine := engine_siberite ;
3499: LD_ADDR_OWVAR 39
3503: PUSH
3504: LD_INT 3
3506: ST_TO_ADDR
// vc_control = control_computer ;
3507: LD_ADDR_OWVAR 38
3511: PUSH
3512: LD_INT 3
3514: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3515: LD_ADDR_OWVAR 40
3519: PUSH
3520: LD_INT 12
3522: ST_TO_ADDR
// cargo := CreateVehicle ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: CALL_OW 45
3532: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3533: LD_VAR 0 3
3537: PPUSH
3538: LD_INT 4
3540: PPUSH
3541: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3545: LD_VAR 0 3
3549: PPUSH
3550: LD_INT 17
3552: PPUSH
3553: CALL_OW 109
// repeat wait ( 1 ) ;
3557: LD_INT 1
3559: PPUSH
3560: CALL_OW 67
// until PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3564: LD_VAR 0 3
3568: PPUSH
3569: LD_INT 4
3571: PPUSH
3572: LD_INT 0
3574: PPUSH
3575: CALL_OW 49
3579: IFFALSE 3557
// AddCargo ( cargo , mat_cans , 100 ) ;
3581: LD_VAR 0 3
3585: PPUSH
3586: LD_INT 1
3588: PPUSH
3589: LD_INT 100
3591: PPUSH
3592: CALL_OW 291
// end ;
3596: GO 3488
3598: POP
3599: POP
// end ; end_of_file
3600: LD_VAR 0 1
3604: RET
// export function PrepareRussian ; begin
3605: LD_INT 0
3607: PPUSH
// SetBName ( rueastdepot , ryutin ) ;
3608: LD_INT 4
3610: PPUSH
3611: LD_STRING ryutin
3613: PPUSH
3614: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
3618: LD_INT 6
3620: PPUSH
3621: LD_STRING yegorov
3623: PPUSH
3624: CALL_OW 500
// PrepareDifficulty ;
3628: CALL 13357 0 0
// PrepareRussianCommander ;
3632: CALL 3653 0 0
// PrepareWestBase ;
3636: CALL 4378 0 0
// PrepareEastBase ;
3640: CALL 3732 0 0
// PrepareOtherRussians ;
3644: CALL 4604 0 0
// end ;
3648: LD_VAR 0 1
3652: RET
// export function PrepareRussianCommander ; begin
3653: LD_INT 0
3655: PPUSH
// uc_side := 3 ;
3656: LD_ADDR_OWVAR 20
3660: PUSH
3661: LD_INT 3
3663: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3664: LD_ADDR_EXP 16
3668: PUSH
3669: LD_STRING Davidov
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: LD_STRING 
3677: PPUSH
3678: CALL 42606 0 3
3682: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_INT 3
3690: PPUSH
3691: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3695: LD_ADDR_EXP 27
3699: PUSH
3700: LD_EXP 27
3704: PPUSH
3705: LD_EXP 16
3709: PPUSH
3710: CALL 80806 0 2
3714: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3715: LD_EXP 27
3719: PPUSH
3720: LD_INT 4
3722: PPUSH
3723: CALL_OW 336
// end ;
3727: LD_VAR 0 1
3731: RET
// export function PrepareEastBase ; var i , un ; begin
3732: LD_INT 0
3734: PPUSH
3735: PPUSH
3736: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , [ 2 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3737: LD_INT 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_INT 121
3745: PPUSH
3746: LD_EXP 29
3750: PPUSH
3751: LD_EXP 30
3755: PPUSH
3756: CALL_OW 12
3760: PPUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PUSH
3767: LD_INT 2
3769: PUSH
3770: LD_INT 3
3772: PUSH
3773: LD_INT 3
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: LD_OWVAR 67
3786: ARRAY
3787: PPUSH
3788: CALL 13676 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3792: LD_INT 3
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: LD_INT 121
3800: PPUSH
3801: LD_EXP 29
3805: PPUSH
3806: LD_EXP 30
3810: PPUSH
3811: CALL_OW 12
3815: PPUSH
3816: LD_INT 9
3818: PPUSH
3819: LD_INT 1
3821: PUSH
3822: LD_INT 2
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: LD_INT 3
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: PUSH
3837: LD_OWVAR 67
3841: ARRAY
3842: PPUSH
3843: CALL 13676 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3847: LD_INT 3
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: LD_INT 226
3855: PPUSH
3856: LD_EXP 29
3860: PPUSH
3861: LD_EXP 30
3865: PPUSH
3866: CALL_OW 12
3870: PPUSH
3871: LD_INT 9
3873: PPUSH
3874: LD_INT 2
3876: PUSH
3877: LD_INT 3
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: PUSH
3892: LD_OWVAR 67
3896: ARRAY
3897: PPUSH
3898: CALL 13676 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3902: LD_INT 3
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: LD_INT 4
3910: PPUSH
3911: LD_EXP 29
3915: PPUSH
3916: LD_EXP 30
3920: PPUSH
3921: CALL_OW 12
3925: PPUSH
3926: LD_INT 2
3928: PPUSH
3929: LD_INT 3
3931: PUSH
3932: LD_INT 4
3934: PUSH
3935: LD_INT 5
3937: PUSH
3938: LD_INT 6
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: PUSH
3947: LD_OWVAR 67
3951: ARRAY
3952: PPUSH
3953: CALL 13676 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3957: LD_INT 3
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: LD_INT 112
3965: PPUSH
3966: LD_EXP 29
3970: PPUSH
3971: LD_EXP 30
3975: PPUSH
3976: CALL_OW 12
3980: PPUSH
3981: LD_INT 3
3983: PPUSH
3984: LD_INT 4
3986: PUSH
3987: LD_INT 4
3989: PUSH
3990: LD_INT 5
3992: PUSH
3993: LD_INT 6
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: PUSH
4002: LD_OWVAR 67
4006: ARRAY
4007: PPUSH
4008: CALL 13676 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4012: LD_INT 3
4014: PPUSH
4015: LD_INT 3
4017: PPUSH
4018: LD_INT 47
4020: PPUSH
4021: LD_EXP 29
4025: PPUSH
4026: LD_EXP 30
4030: PPUSH
4031: CALL_OW 12
4035: PPUSH
4036: LD_INT 4
4038: PPUSH
4039: LD_INT 2
4041: PUSH
4042: LD_INT 3
4044: PUSH
4045: LD_INT 4
4047: PUSH
4048: LD_INT 5
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: PUSH
4057: LD_OWVAR 67
4061: ARRAY
4062: PPUSH
4063: CALL 13676 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4067: LD_INT 3
4069: PPUSH
4070: LD_INT 3
4072: PPUSH
4073: LD_INT 129
4075: PPUSH
4076: LD_EXP 29
4080: PPUSH
4081: LD_EXP 30
4085: PPUSH
4086: CALL_OW 12
4090: PPUSH
4091: LD_INT 4
4093: PPUSH
4094: LD_INT 2
4096: PUSH
4097: LD_INT 3
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: LD_INT 5
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: PUSH
4112: LD_OWVAR 67
4116: ARRAY
4117: PPUSH
4118: CALL 13676 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4122: LD_INT 3
4124: PPUSH
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 135
4130: PPUSH
4131: LD_EXP 29
4135: PPUSH
4136: LD_EXP 30
4140: PPUSH
4141: CALL_OW 12
4145: PPUSH
4146: LD_INT 4
4148: PPUSH
4149: LD_INT 2
4151: PUSH
4152: LD_INT 3
4154: PUSH
4155: LD_INT 4
4157: PUSH
4158: LD_INT 5
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: PUSH
4167: LD_OWVAR 67
4171: ARRAY
4172: PPUSH
4173: CALL 13676 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
4177: LD_ADDR_VAR 0 2
4181: PUSH
4182: LD_INT 22
4184: PUSH
4185: LD_INT 3
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 30
4194: PUSH
4195: LD_INT 32
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PPUSH
4206: CALL_OW 69
4210: PUSH
4211: FOR_IN
4212: IFFALSE 4252
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_VAR 0 2
4224: PPUSH
4225: LD_EXP 29
4229: PPUSH
4230: LD_EXP 30
4234: PPUSH
4235: CALL_OW 12
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: CALL 13676 0 6
4250: GO 4211
4252: POP
4253: POP
// for i := 1 to 5 do
4254: LD_ADDR_VAR 0 2
4258: PUSH
4259: DOUBLE
4260: LD_INT 1
4262: DEC
4263: ST_TO_ADDR
4264: LD_INT 5
4266: PUSH
4267: FOR_TO
4268: IFFALSE 4371
// begin uc_side := 3 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 3
4277: ST_TO_ADDR
// uc_nation := 3 ;
4278: LD_ADDR_OWVAR 21
4282: PUSH
4283: LD_INT 3
4285: ST_TO_ADDR
// hc_gallery :=  ;
4286: LD_ADDR_OWVAR 33
4290: PUSH
4291: LD_STRING 
4293: ST_TO_ADDR
// hc_name :=  ;
4294: LD_ADDR_OWVAR 26
4298: PUSH
4299: LD_STRING 
4301: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 4
4307: PPUSH
4308: LD_EXP 29
4312: PPUSH
4313: LD_EXP 30
4317: PPUSH
4318: CALL_OW 12
4322: PPUSH
4323: CALL_OW 380
// un := CreateHuman ;
4327: LD_ADDR_VAR 0 3
4331: PUSH
4332: CALL_OW 44
4336: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
4337: LD_VAR 0 3
4341: PPUSH
4342: LD_INT 3
4344: PPUSH
4345: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
4349: LD_ADDR_EXP 27
4353: PUSH
4354: LD_EXP 27
4358: PPUSH
4359: LD_VAR 0 3
4363: PPUSH
4364: CALL 80806 0 2
4368: ST_TO_ADDR
// end ;
4369: GO 4267
4371: POP
4372: POP
// end ;
4373: LD_VAR 0 1
4377: RET
// export function PrepareWestBase ; var i , un ; begin
4378: LD_INT 0
4380: PPUSH
4381: PPUSH
4382: PPUSH
// if Difficulty = 1 then
4383: LD_OWVAR 67
4387: PUSH
4388: LD_INT 1
4390: EQUAL
4391: IFFALSE 4429
// for i in FilterAllUnits ( [ f_inarea , delBuildingsArea ] ) do
4393: LD_ADDR_VAR 0 2
4397: PUSH
4398: LD_INT 95
4400: PUSH
4401: LD_INT 28
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PPUSH
4408: CALL_OW 69
4412: PUSH
4413: FOR_IN
4414: IFFALSE 4427
// RemoveUnit ( i ) ;
4416: LD_VAR 0 2
4420: PPUSH
4421: CALL_OW 64
4425: GO 4413
4427: POP
4428: POP
// TeleportExit ( ruteleprt , 122 , 145 ) ;
4429: LD_INT 10
4431: PPUSH
4432: LD_INT 122
4434: PPUSH
4435: LD_INT 145
4437: PPUSH
4438: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4442: LD_INT 137
4444: PPUSH
4445: LD_INT 84
4447: PPUSH
4448: LD_INT 61
4450: PPUSH
4451: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ) ;
4455: LD_INT 3
4457: PPUSH
4458: LD_INT 3
4460: PPUSH
4461: LD_INT 6
4463: PPUSH
4464: LD_EXP 29
4468: PPUSH
4469: LD_EXP 30
4473: PPUSH
4474: CALL_OW 12
4478: PPUSH
4479: LD_INT 2
4481: PPUSH
4482: LD_INT 2
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: LD_INT 3
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: LD_OWVAR 67
4504: ARRAY
4505: PPUSH
4506: CALL 13676 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4510: LD_INT 3
4512: PPUSH
4513: LD_INT 3
4515: PPUSH
4516: LD_INT 91
4518: PPUSH
4519: LD_EXP 29
4523: PPUSH
4524: LD_EXP 30
4528: PPUSH
4529: CALL_OW 12
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 3
4539: PPUSH
4540: CALL 13676 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
4544: LD_INT 3
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: LD_INT 21
4552: PPUSH
4553: LD_EXP 29
4557: PPUSH
4558: LD_EXP 30
4562: PPUSH
4563: CALL_OW 12
4567: PPUSH
4568: LD_INT 3
4570: PPUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 5
4576: PUSH
4577: LD_INT 6
4579: PUSH
4580: LD_INT 6
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: PUSH
4589: LD_OWVAR 67
4593: ARRAY
4594: PPUSH
4595: CALL 13676 0 6
// end ;
4599: LD_VAR 0 1
4603: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4604: LD_INT 0
4606: PPUSH
4607: PPUSH
4608: PPUSH
4609: PPUSH
// uc_side := 3 ;
4610: LD_ADDR_OWVAR 20
4614: PUSH
4615: LD_INT 3
4617: ST_TO_ADDR
// uc_nation := 3 ;
4618: LD_ADDR_OWVAR 21
4622: PUSH
4623: LD_INT 3
4625: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: DOUBLE
4632: LD_INT 1
4634: DEC
4635: ST_TO_ADDR
4636: LD_INT 4
4638: PUSH
4639: LD_INT 5
4641: PUSH
4642: LD_INT 5
4644: PUSH
4645: LD_INT 5
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: ARRAY
4659: PUSH
4660: FOR_TO
4661: IFFALSE 4731
// begin hc_gallery :=  ;
4663: LD_ADDR_OWVAR 33
4667: PUSH
4668: LD_STRING 
4670: ST_TO_ADDR
// hc_name :=  ;
4671: LD_ADDR_OWVAR 26
4675: PUSH
4676: LD_STRING 
4678: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4679: LD_INT 0
4681: PPUSH
4682: LD_INT 9
4684: PPUSH
4685: LD_EXP 29
4689: PPUSH
4690: LD_EXP 30
4694: PPUSH
4695: CALL_OW 12
4699: PPUSH
4700: CALL_OW 380
// un := CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 8
4721: PPUSH
4722: LD_INT 0
4724: PPUSH
4725: CALL_OW 49
// end ;
4729: GO 4660
4731: POP
4732: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4733: LD_ADDR_VAR 0 2
4737: PUSH
4738: DOUBLE
4739: LD_INT 1
4741: DEC
4742: ST_TO_ADDR
4743: LD_INT 2
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: LD_INT 4
4751: PUSH
4752: LD_INT 4
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: PUSH
4761: LD_OWVAR 67
4765: ARRAY
4766: PUSH
4767: FOR_TO
4768: IFFALSE 4838
// begin hc_gallery :=  ;
4770: LD_ADDR_OWVAR 33
4774: PUSH
4775: LD_STRING 
4777: ST_TO_ADDR
// hc_name :=  ;
4778: LD_ADDR_OWVAR 26
4782: PUSH
4783: LD_STRING 
4785: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4786: LD_INT 0
4788: PPUSH
4789: LD_INT 4
4791: PPUSH
4792: LD_EXP 29
4796: PPUSH
4797: LD_EXP 30
4801: PPUSH
4802: CALL_OW 12
4806: PPUSH
4807: CALL_OW 380
// un := CreateHuman ;
4811: LD_ADDR_VAR 0 3
4815: PUSH
4816: CALL_OW 44
4820: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4821: LD_VAR 0 3
4825: PPUSH
4826: LD_INT 8
4828: PPUSH
4829: LD_INT 0
4831: PPUSH
4832: CALL_OW 49
// end ;
4836: GO 4767
4838: POP
4839: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4840: LD_ADDR_VAR 0 2
4844: PUSH
4845: DOUBLE
4846: LD_INT 1
4848: DEC
4849: ST_TO_ADDR
4850: LD_INT 3
4852: PUSH
4853: LD_INT 4
4855: PUSH
4856: LD_INT 5
4858: PUSH
4859: LD_INT 5
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_OWVAR 67
4872: ARRAY
4873: PUSH
4874: FOR_TO
4875: IFFALSE 5092
// begin vc_engine = 3 ;
4877: LD_ADDR_OWVAR 39
4881: PUSH
4882: LD_INT 3
4884: ST_TO_ADDR
// vc_control = 1 ;
4885: LD_ADDR_OWVAR 38
4889: PUSH
4890: LD_INT 1
4892: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4893: LD_ADDR_OWVAR 40
4897: PUSH
4898: LD_INT 42
4900: PUSH
4901: LD_INT 43
4903: PUSH
4904: LD_INT 44
4906: PUSH
4907: LD_INT 45
4909: PUSH
4910: LD_INT 46
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 1
4922: PPUSH
4923: LD_INT 5
4925: PPUSH
4926: CALL_OW 12
4930: ARRAY
4931: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4932: LD_OWVAR 40
4936: PUSH
4937: LD_INT 46
4939: EQUAL
4940: IFFALSE 4952
// vc_chassis := ru_heavy_tracked else
4942: LD_ADDR_OWVAR 37
4946: PUSH
4947: LD_INT 24
4949: ST_TO_ADDR
4950: GO 4979
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4952: LD_ADDR_OWVAR 37
4956: PUSH
4957: LD_INT 22
4959: PUSH
4960: LD_INT 21
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 1
4969: PPUSH
4970: LD_INT 2
4972: PPUSH
4973: CALL_OW 12
4977: ARRAY
4978: ST_TO_ADDR
// veh := CreateVehicle ;
4979: LD_ADDR_VAR 0 4
4983: PUSH
4984: CALL_OW 45
4988: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4989: LD_VAR 0 4
4993: PPUSH
4994: LD_INT 3
4996: PPUSH
4997: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
5001: LD_VAR 0 4
5005: PPUSH
5006: LD_INT 5
5008: PPUSH
5009: LD_INT 0
5011: PPUSH
5012: CALL_OW 49
// hc_gallery :=  ;
5016: LD_ADDR_OWVAR 33
5020: PUSH
5021: LD_STRING 
5023: ST_TO_ADDR
// hc_name :=  ;
5024: LD_ADDR_OWVAR 26
5028: PUSH
5029: LD_STRING 
5031: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_INT 3
5037: PPUSH
5038: LD_INT 6
5040: PUSH
5041: LD_INT 7
5043: PUSH
5044: LD_INT 8
5046: PUSH
5047: LD_INT 10
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: PUSH
5056: LD_OWVAR 67
5060: ARRAY
5061: PPUSH
5062: CALL_OW 380
// un = CreateHuman ;
5066: LD_ADDR_VAR 0 3
5070: PUSH
5071: CALL_OW 44
5075: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5076: LD_VAR 0 3
5080: PPUSH
5081: LD_VAR 0 4
5085: PPUSH
5086: CALL_OW 52
// end ;
5090: GO 4874
5092: POP
5093: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
5094: LD_ADDR_VAR 0 2
5098: PUSH
5099: DOUBLE
5100: LD_INT 1
5102: DEC
5103: ST_TO_ADDR
5104: LD_INT 3
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: LD_INT 5
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: PUSH
5122: LD_OWVAR 67
5126: ARRAY
5127: PUSH
5128: FOR_TO
5129: IFFALSE 5276
// begin vc_engine := 3 ;
5131: LD_ADDR_OWVAR 39
5135: PUSH
5136: LD_INT 3
5138: ST_TO_ADDR
// vc_control := 3 ;
5139: LD_ADDR_OWVAR 38
5143: PUSH
5144: LD_INT 3
5146: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
5147: LD_ADDR_OWVAR 40
5151: PUSH
5152: LD_INT 42
5154: PUSH
5155: LD_INT 43
5157: PUSH
5158: LD_INT 44
5160: PUSH
5161: LD_INT 45
5163: PUSH
5164: LD_INT 46
5166: PUSH
5167: LD_INT 49
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: PUSH
5178: LD_INT 1
5180: PPUSH
5181: LD_INT 5
5183: PPUSH
5184: CALL_OW 12
5188: ARRAY
5189: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
5190: LD_OWVAR 40
5194: PUSH
5195: LD_INT 46
5197: EQUAL
5198: IFFALSE 5210
// vc_chassis := ru_heavy_tracked else
5200: LD_ADDR_OWVAR 37
5204: PUSH
5205: LD_INT 24
5207: ST_TO_ADDR
5208: GO 5237
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
5210: LD_ADDR_OWVAR 37
5214: PUSH
5215: LD_INT 22
5217: PUSH
5218: LD_INT 21
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 2
5230: PPUSH
5231: CALL_OW 12
5235: ARRAY
5236: ST_TO_ADDR
// veh := CreateVehicle ;
5237: LD_ADDR_VAR 0 4
5241: PUSH
5242: CALL_OW 45
5246: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5247: LD_VAR 0 4
5251: PPUSH
5252: LD_INT 3
5254: PPUSH
5255: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
5259: LD_VAR 0 4
5263: PPUSH
5264: LD_INT 6
5266: PPUSH
5267: LD_INT 0
5269: PPUSH
5270: CALL_OW 49
// end ;
5274: GO 5128
5276: POP
5277: POP
// end ; end_of_file
5278: LD_VAR 0 1
5282: RET
// export function PrepareKurt ; begin
5283: LD_INT 0
5285: PPUSH
// uc_side := 8 ;
5286: LD_ADDR_OWVAR 20
5290: PUSH
5291: LD_INT 8
5293: ST_TO_ADDR
// uc_nation := 2 ;
5294: LD_ADDR_OWVAR 21
5298: PUSH
5299: LD_INT 2
5301: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
5302: LD_ADDR_OWVAR 37
5306: PUSH
5307: LD_INT 13
5309: ST_TO_ADDR
// vc_engine := 1 ;
5310: LD_ADDR_OWVAR 39
5314: PUSH
5315: LD_INT 1
5317: ST_TO_ADDR
// vc_control := 1 ;
5318: LD_ADDR_OWVAR 38
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// vc_weapon := 24 ;
5326: LD_ADDR_OWVAR 40
5330: PUSH
5331: LD_INT 24
5333: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
5334: LD_ADDR_EXP 18
5338: PUSH
5339: CALL_OW 45
5343: ST_TO_ADDR
// if kurtStatus > 0 then
5344: LD_EXP 19
5348: PUSH
5349: LD_INT 0
5351: GREATER
5352: IFFALSE 5404
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
5354: LD_ADDR_EXP 17
5358: PUSH
5359: LD_STRING Kurt
5361: PPUSH
5362: LD_INT 0
5364: PPUSH
5365: LD_STRING 
5367: PPUSH
5368: CALL 42606 0 3
5372: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5373: LD_EXP 18
5377: PPUSH
5378: LD_INT 4
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5388: LD_EXP 17
5392: PPUSH
5393: LD_EXP 18
5397: PPUSH
5398: CALL_OW 52
// end else
5402: GO 5481
// begin hc_name :=  ;
5404: LD_ADDR_OWVAR 26
5408: PUSH
5409: LD_STRING 
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
5420: LD_INT 1
5422: PPUSH
5423: LD_INT 10
5425: PPUSH
5426: CALL_OW 381
// Kurt := CreateHuman ;
5430: LD_ADDR_EXP 17
5434: PUSH
5435: CALL_OW 44
5439: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5440: LD_EXP 18
5444: PPUSH
5445: LD_INT 4
5447: PPUSH
5448: LD_INT 0
5450: PPUSH
5451: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5455: LD_EXP 17
5459: PPUSH
5460: LD_EXP 18
5464: PPUSH
5465: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
5469: LD_EXP 17
5473: PPUSH
5474: LD_STRING AltKurt
5476: PPUSH
5477: CALL_OW 38
// end ; end ;
5481: LD_VAR 0 1
5485: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
5486: LD_INT 0
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
// for i := 1 to 3 do
5492: LD_ADDR_VAR 0 2
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_INT 3
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5629
// begin uc_side := 1 ;
5508: LD_ADDR_OWVAR 20
5512: PUSH
5513: LD_INT 1
5515: ST_TO_ADDR
// uc_nation := 2 ;
5516: LD_ADDR_OWVAR 21
5520: PUSH
5521: LD_INT 2
5523: ST_TO_ADDR
// hc_gallery =  ;
5524: LD_ADDR_OWVAR 33
5528: PUSH
5529: LD_STRING 
5531: ST_TO_ADDR
// hc_name =  ;
5532: LD_ADDR_OWVAR 26
5536: PUSH
5537: LD_STRING 
5539: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
5540: LD_EXP 19
5544: PUSH
5545: LD_INT 0
5547: EQUAL
5548: IFTRUE 5560
5550: PUSH
5551: LD_EXP 19
5555: PUSH
5556: LD_INT 2
5558: EQUAL
5559: OR
5560: IFFALSE 5577
// PrepareHuman ( false , 1 , 6 ) else
5562: LD_INT 0
5564: PPUSH
5565: LD_INT 1
5567: PPUSH
5568: LD_INT 6
5570: PPUSH
5571: CALL_OW 380
5575: GO 5590
// PrepareHuman ( false , 1 , 8 ) ;
5577: LD_INT 0
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 8
5585: PPUSH
5586: CALL_OW 380
// un := CreateHuman ;
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: CALL_OW 44
5599: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5600: LD_VAR 0 3
5604: PPUSH
5605: LD_INT 4
5607: PPUSH
5608: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5612: LD_VAR 0 3
5616: PPUSH
5617: LD_INT 4
5619: PPUSH
5620: LD_INT 0
5622: PPUSH
5623: CALL_OW 49
// end ;
5627: GO 5505
5629: POP
5630: POP
// vc_chassis := 14 ;
5631: LD_ADDR_OWVAR 37
5635: PUSH
5636: LD_INT 14
5638: ST_TO_ADDR
// vc_engine := 3 ;
5639: LD_ADDR_OWVAR 39
5643: PUSH
5644: LD_INT 3
5646: ST_TO_ADDR
// vc_control := 1 ;
5647: LD_ADDR_OWVAR 38
5651: PUSH
5652: LD_INT 1
5654: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5655: LD_ADDR_OWVAR 40
5659: PUSH
5660: LD_INT 27
5662: PUSH
5663: LD_INT 26
5665: PUSH
5666: LD_INT 28
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 1
5676: PPUSH
5677: LD_INT 3
5679: PPUSH
5680: CALL_OW 12
5684: ARRAY
5685: ST_TO_ADDR
// veh := CreateVehicle ;
5686: LD_ADDR_VAR 0 4
5690: PUSH
5691: CALL_OW 45
5695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5696: LD_VAR 0 4
5700: PPUSH
5701: LD_INT 4
5703: PPUSH
5704: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5708: LD_VAR 0 4
5712: PPUSH
5713: LD_INT 4
5715: PPUSH
5716: LD_INT 0
5718: PPUSH
5719: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5723: LD_EXP 19
5727: PUSH
5728: LD_INT 0
5730: EQUAL
5731: IFTRUE 5743
5733: PUSH
5734: LD_EXP 19
5738: PUSH
5739: LD_INT 2
5741: EQUAL
5742: OR
5743: IFFALSE 5760
// PrepareHuman ( false , 3 , 6 ) else
5745: LD_INT 0
5747: PPUSH
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 6
5753: PPUSH
5754: CALL_OW 380
5758: GO 5773
// PrepareHuman ( false , 3 , 8 ) ;
5760: LD_INT 0
5762: PPUSH
5763: LD_INT 3
5765: PPUSH
5766: LD_INT 8
5768: PPUSH
5769: CALL_OW 380
// un := CreateHuman ;
5773: LD_ADDR_VAR 0 3
5777: PUSH
5778: CALL_OW 44
5782: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_VAR 0 4
5792: PPUSH
5793: CALL_OW 52
// vc_chassis := 14 ;
5797: LD_ADDR_OWVAR 37
5801: PUSH
5802: LD_INT 14
5804: ST_TO_ADDR
// vc_engine := 3 ;
5805: LD_ADDR_OWVAR 39
5809: PUSH
5810: LD_INT 3
5812: ST_TO_ADDR
// vc_control := 1 ;
5813: LD_ADDR_OWVAR 38
5817: PUSH
5818: LD_INT 1
5820: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5821: LD_ADDR_OWVAR 40
5825: PUSH
5826: LD_INT 27
5828: PUSH
5829: LD_INT 26
5831: PUSH
5832: LD_INT 28
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 3
5845: PPUSH
5846: CALL_OW 12
5850: ARRAY
5851: ST_TO_ADDR
// veh := CreateVehicle ;
5852: LD_ADDR_VAR 0 4
5856: PUSH
5857: CALL_OW 45
5861: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5862: LD_VAR 0 4
5866: PPUSH
5867: LD_INT 4
5869: PPUSH
5870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5874: LD_VAR 0 4
5878: PPUSH
5879: LD_INT 4
5881: PPUSH
5882: LD_INT 0
5884: PPUSH
5885: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5889: LD_EXP 19
5893: PUSH
5894: LD_INT 0
5896: EQUAL
5897: IFTRUE 5909
5899: PUSH
5900: LD_EXP 19
5904: PUSH
5905: LD_INT 2
5907: EQUAL
5908: OR
5909: IFFALSE 5926
// PrepareHuman ( false , 4 , 6 ) else
5911: LD_INT 0
5913: PPUSH
5914: LD_INT 4
5916: PPUSH
5917: LD_INT 6
5919: PPUSH
5920: CALL_OW 380
5924: GO 5939
// PrepareHuman ( false , 4 , 8 ) ;
5926: LD_INT 0
5928: PPUSH
5929: LD_INT 4
5931: PPUSH
5932: LD_INT 8
5934: PPUSH
5935: CALL_OW 380
// un := CreateHuman ;
5939: LD_ADDR_VAR 0 3
5943: PUSH
5944: CALL_OW 44
5948: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5949: LD_VAR 0 3
5953: PPUSH
5954: LD_INT 4
5956: PPUSH
5957: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5961: LD_VAR 0 3
5965: PPUSH
5966: LD_VAR 0 4
5970: PPUSH
5971: CALL_OW 52
// vc_chassis := 14 ;
5975: LD_ADDR_OWVAR 37
5979: PUSH
5980: LD_INT 14
5982: ST_TO_ADDR
// vc_engine := 3 ;
5983: LD_ADDR_OWVAR 39
5987: PUSH
5988: LD_INT 3
5990: ST_TO_ADDR
// vc_control := 1 ;
5991: LD_ADDR_OWVAR 38
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// vc_weapon := 26 ;
5999: LD_ADDR_OWVAR 40
6003: PUSH
6004: LD_INT 26
6006: ST_TO_ADDR
// veh := CreateVehicle ;
6007: LD_ADDR_VAR 0 4
6011: PUSH
6012: CALL_OW 45
6016: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6017: LD_VAR 0 4
6021: PPUSH
6022: LD_INT 4
6024: PPUSH
6025: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
6029: LD_VAR 0 4
6033: PPUSH
6034: LD_INT 4
6036: PPUSH
6037: LD_INT 0
6039: PPUSH
6040: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
6044: LD_EXP 19
6048: PUSH
6049: LD_INT 0
6051: EQUAL
6052: IFTRUE 6064
6054: PUSH
6055: LD_EXP 19
6059: PUSH
6060: LD_INT 2
6062: EQUAL
6063: OR
6064: IFFALSE 6081
// PrepareHuman ( false , 2 , 4 ) else
6066: LD_INT 0
6068: PPUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 4
6074: PPUSH
6075: CALL_OW 380
6079: GO 6094
// PrepareHuman ( false , 2 , 8 ) ;
6081: LD_INT 0
6083: PPUSH
6084: LD_INT 2
6086: PPUSH
6087: LD_INT 8
6089: PPUSH
6090: CALL_OW 380
// un := CreateHuman ;
6094: LD_ADDR_VAR 0 3
6098: PUSH
6099: CALL_OW 44
6103: ST_TO_ADDR
// SetDir ( un , 4 ) ;
6104: LD_VAR 0 3
6108: PPUSH
6109: LD_INT 4
6111: PPUSH
6112: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
6116: LD_VAR 0 3
6120: PPUSH
6121: LD_VAR 0 4
6125: PPUSH
6126: CALL_OW 52
// end ;
6130: LD_VAR 0 1
6134: RET
// export function PrepareAttackLegion ; var i , un ; begin
6135: LD_INT 0
6137: PPUSH
6138: PPUSH
6139: PPUSH
// for i := 1 to 4 do
6140: LD_ADDR_VAR 0 2
6144: PUSH
6145: DOUBLE
6146: LD_INT 1
6148: DEC
6149: ST_TO_ADDR
6150: LD_INT 4
6152: PUSH
6153: FOR_TO
6154: IFFALSE 6264
// begin uc_side := 8 ;
6156: LD_ADDR_OWVAR 20
6160: PUSH
6161: LD_INT 8
6163: ST_TO_ADDR
// uc_nation := 2 ;
6164: LD_ADDR_OWVAR 21
6168: PUSH
6169: LD_INT 2
6171: ST_TO_ADDR
// hc_gallery :=  ;
6172: LD_ADDR_OWVAR 33
6176: PUSH
6177: LD_STRING 
6179: ST_TO_ADDR
// hc_name :=  ;
6180: LD_ADDR_OWVAR 26
6184: PUSH
6185: LD_STRING 
6187: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
6188: LD_INT 0
6190: PPUSH
6191: LD_INT 1
6193: PUSH
6194: LD_INT 8
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 1
6203: PPUSH
6204: LD_INT 2
6206: PPUSH
6207: CALL_OW 12
6211: ARRAY
6212: PPUSH
6213: LD_INT 6
6215: PPUSH
6216: LD_INT 8
6218: PPUSH
6219: CALL_OW 12
6223: PPUSH
6224: CALL_OW 380
// un := CreateHuman ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: CALL_OW 44
6237: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
6238: LD_VAR 0 3
6242: PPUSH
6243: LD_INT 19
6245: PPUSH
6246: LD_INT 0
6248: PPUSH
6249: CALL_OW 49
// ComCrawl ( un ) ;
6253: LD_VAR 0 3
6257: PPUSH
6258: CALL_OW 137
// end ;
6262: GO 6153
6264: POP
6265: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
6266: LD_INT 1
6268: PPUSH
6269: LD_INT 8
6271: PPUSH
6272: LD_INT 2
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
6282: LD_INT 20
6284: PPUSH
6285: LD_INT 3
6287: PPUSH
6288: CALL 15541 0 2
// end ; end_of_file
6292: LD_VAR 0 1
6296: RET
// export function Action ; var i , tmp , group ; begin
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
6301: PPUSH
6302: PPUSH
// music_nat := 1 ;
6303: LD_ADDR_OWVAR 71
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
6311: LD_ADDR_VAR 0 4
6315: PUSH
6316: LD_INT 22
6318: PUSH
6319: LD_INT 1
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PPUSH
6326: CALL_OW 69
6330: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
6331: LD_ADDR_VAR 0 3
6335: PUSH
6336: LD_EXP 1
6340: PPUSH
6341: CALL_OW 310
6345: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
6346: LD_VAR 0 3
6350: PPUSH
6351: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
6355: LD_VAR 0 4
6359: PPUSH
6360: LD_INT 130
6362: PPUSH
6363: LD_INT 103
6365: PPUSH
6366: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
6370: LD_VAR 0 3
6374: PPUSH
6375: LD_INT 114
6377: PPUSH
6378: LD_INT 102
6380: PPUSH
6381: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
6385: LD_EXP 1
6389: PPUSH
6390: LD_STRING D1-JMM-1
6392: PPUSH
6393: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6397: LD_VAR 0 3
6401: PPUSH
6402: CALL_OW 87
// if IsOk ( Donaldson ) then
6406: LD_EXP 3
6410: PPUSH
6411: CALL_OW 302
6415: IFFALSE 6480
// begin Say ( Donaldson , D1-Don-1 ) ;
6417: LD_EXP 3
6421: PPUSH
6422: LD_STRING D1-Don-1
6424: PPUSH
6425: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6429: LD_VAR 0 3
6433: PPUSH
6434: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
6438: LD_EXP 1
6442: PPUSH
6443: LD_STRING D1-JMM-2
6445: PPUSH
6446: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6450: LD_VAR 0 3
6454: PPUSH
6455: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
6459: LD_EXP 3
6463: PPUSH
6464: LD_STRING D1-Don-2
6466: PPUSH
6467: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6471: LD_VAR 0 3
6475: PPUSH
6476: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
6480: LD_VAR 0 4
6484: PPUSH
6485: LD_INT 110
6487: PPUSH
6488: LD_INT 101
6490: PPUSH
6491: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6495: LD_INT 35
6497: PPUSH
6498: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
6502: LD_VAR 0 3
6506: PPUSH
6507: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
6511: LD_INT 1
6513: PPUSH
6514: LD_INT 102
6516: PPUSH
6517: LD_INT 94
6519: PPUSH
6520: CALL_OW 293
6524: IFFALSE 6495
// CenterOnXY ( 102 , 94 ) ;
6526: LD_INT 102
6528: PPUSH
6529: LD_INT 94
6531: PPUSH
6532: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
6536: LD_VAR 0 4
6540: PPUSH
6541: LD_INT 26
6543: PUSH
6544: LD_INT 1
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PPUSH
6551: CALL_OW 72
6555: PPUSH
6556: LD_STRING D1-Sol1-2
6558: PPUSH
6559: LD_STRING 
6561: PPUSH
6562: CALL 13171 0 3
// Say ( JMM , D1-JMM-3 ) ;
6566: LD_EXP 1
6570: PPUSH
6571: LD_STRING D1-JMM-3
6573: PPUSH
6574: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6578: LD_STRING M1
6580: PPUSH
6581: CALL_OW 337
// for i in group do
6585: LD_ADDR_VAR 0 2
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: FOR_IN
6596: IFFALSE 6615
// ComMoveXY ( i , 95 , 84 ) ;
6598: LD_VAR 0 2
6602: PPUSH
6603: LD_INT 95
6605: PPUSH
6606: LD_INT 84
6608: PPUSH
6609: CALL_OW 111
6613: GO 6595
6615: POP
6616: POP
// end ;
6617: LD_VAR 0 1
6621: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
6622: LD_INT 7
6624: PPUSH
6625: LD_INT 22
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PPUSH
6635: CALL_OW 70
6639: PUSH
6640: LD_INT 1
6642: GREATER
6643: IFFALSE 7346
6645: GO 6647
6647: DISABLE
6648: LD_INT 0
6650: PPUSH
6651: PPUSH
6652: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: LD_INT 8
6660: PPUSH
6661: LD_INT 22
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 25
6673: PUSH
6674: LD_INT 9
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 70
6689: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6690: LD_VAR 0 2
6694: PPUSH
6695: LD_INT 96
6697: PPUSH
6698: LD_INT 85
6700: PPUSH
6701: CALL_OW 154
// for i := 1 to 5 do
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: DOUBLE
6711: LD_INT 1
6713: DEC
6714: ST_TO_ADDR
6715: LD_INT 5
6717: PUSH
6718: FOR_TO
6719: IFFALSE 6738
// AddComTimeShift ( tmp , 96 , 85 ) ;
6721: LD_VAR 0 2
6725: PPUSH
6726: LD_INT 96
6728: PPUSH
6729: LD_INT 85
6731: PPUSH
6732: CALL_OW 214
6736: GO 6718
6738: POP
6739: POP
// wait ( 0 0$2 ) ;
6740: LD_INT 70
6742: PPUSH
6743: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6747: LD_EXP 1
6751: PPUSH
6752: LD_STRING D1a-JMM-1
6754: PPUSH
6755: CALL_OW 88
// if Donaldson then
6759: LD_EXP 3
6763: IFFALSE 6777
// Say ( Donaldson , D1a-Don-1 ) ;
6765: LD_EXP 3
6769: PPUSH
6770: LD_STRING D1a-Don-1
6772: PPUSH
6773: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6777: LD_ADDR_VAR 0 1
6781: PUSH
6782: LD_INT 22
6784: PUSH
6785: LD_INT 1
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PPUSH
6792: CALL_OW 69
6796: PUSH
6797: FOR_IN
6798: IFFALSE 6817
// ComMoveXY ( i , 109 , 102 ) ;
6800: LD_VAR 0 1
6804: PPUSH
6805: LD_INT 109
6807: PPUSH
6808: LD_INT 102
6810: PPUSH
6811: CALL_OW 111
6815: GO 6797
6817: POP
6818: POP
// Say ( JMM , D1a-JMM-2 ) ;
6819: LD_EXP 1
6823: PPUSH
6824: LD_STRING D1a-JMM-2
6826: PPUSH
6827: CALL_OW 88
// wait ( 0 0$10 ) ;
6831: LD_INT 350
6833: PPUSH
6834: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6838: LD_EXP 1
6842: PPUSH
6843: CALL_OW 310
6847: PPUSH
6848: CALL_OW 87
// if IsOk ( Donaldson ) then
6852: LD_EXP 3
6856: PPUSH
6857: CALL_OW 302
6861: IFFALSE 6887
// begin Say ( Donaldson , D1b-Don-1 ) ;
6863: LD_EXP 3
6867: PPUSH
6868: LD_STRING D1b-Don-1
6870: PPUSH
6871: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6875: LD_EXP 1
6879: PPUSH
6880: LD_STRING D1b-JMM-1
6882: PPUSH
6883: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6887: LD_INT 22
6889: PUSH
6890: LD_INT 1
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: LD_INT 26
6899: PUSH
6900: LD_INT 1
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 2
6909: PUSH
6910: LD_INT 25
6912: PUSH
6913: LD_INT 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 25
6922: PUSH
6923: LD_INT 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 25
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 25
6942: PUSH
6943: LD_INT 4
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 25
6952: PUSH
6953: LD_INT 5
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 8
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL_OW 69
6988: PPUSH
6989: LD_STRING D1b-Sol1-1
6991: PPUSH
6992: LD_STRING 
6994: PPUSH
6995: CALL 13171 0 3
// if IsOk ( Donaldson ) then
6999: LD_EXP 3
7003: PPUSH
7004: CALL_OW 302
7008: IFFALSE 7022
// Say ( Donaldson , D1b-Don-2 ) ;
7010: LD_EXP 3
7014: PPUSH
7015: LD_STRING D1b-Don-2
7017: PPUSH
7018: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
7022: LD_EXP 1
7026: PPUSH
7027: LD_STRING D1b-JMM-2
7029: PPUSH
7030: CALL_OW 88
// dec := ShowQuery1 ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL 13634 0 0
7043: ST_TO_ADDR
// if dec = 1 then
7044: LD_VAR 0 3
7048: PUSH
7049: LD_INT 1
7051: EQUAL
7052: IFFALSE 7194
// begin Say ( JMM , D2-JMM-1 ) ;
7054: LD_EXP 1
7058: PPUSH
7059: LD_STRING D2-JMM-1
7061: PPUSH
7062: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
7066: LD_EXP 15
7070: PPUSH
7071: LD_STRING D2-Pow-1
7073: PPUSH
7074: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
7078: LD_EXP 1
7082: PPUSH
7083: LD_STRING D2a-JMM-1
7085: PPUSH
7086: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
7090: LD_EXP 15
7094: PPUSH
7095: LD_STRING D2a-Pow-1
7097: PPUSH
7098: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
7102: LD_EXP 1
7106: PPUSH
7107: LD_STRING D2a-JMM-2
7109: PPUSH
7110: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
7114: LD_EXP 15
7118: PPUSH
7119: LD_STRING D2a-Pow-2
7121: PPUSH
7122: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
7126: LD_EXP 1
7130: PPUSH
7131: LD_STRING D2a-JMM-3
7133: PPUSH
7134: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
7138: LD_EXP 15
7142: PPUSH
7143: LD_STRING D2a-Pow-3
7145: PPUSH
7146: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
7150: LD_EXP 1
7154: PPUSH
7155: LD_STRING D2c-JMM-1
7157: PPUSH
7158: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
7162: LD_EXP 15
7166: PPUSH
7167: LD_STRING D2c-Pow-1
7169: PPUSH
7170: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
7174: LD_EXP 1
7178: PPUSH
7179: LD_STRING D2c-JMM-2
7181: PPUSH
7182: CALL_OW 88
// secondPass := 2 ;
7186: LD_ADDR_EXP 20
7190: PUSH
7191: LD_INT 2
7193: ST_TO_ADDR
// end ; if dec = 2 then
7194: LD_VAR 0 3
7198: PUSH
7199: LD_INT 2
7201: EQUAL
7202: IFFALSE 7296
// begin Say ( JMM , D2-JMM-1 ) ;
7204: LD_EXP 1
7208: PPUSH
7209: LD_STRING D2-JMM-1
7211: PPUSH
7212: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
7216: LD_EXP 15
7220: PPUSH
7221: LD_STRING D2-Pow-1
7223: PPUSH
7224: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
7228: LD_EXP 1
7232: PPUSH
7233: LD_STRING D2b-JMM-1
7235: PPUSH
7236: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
7240: LD_EXP 15
7244: PPUSH
7245: LD_STRING D2b-Pow-1
7247: PPUSH
7248: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
7252: LD_EXP 1
7256: PPUSH
7257: LD_STRING D2c-JMM-1
7259: PPUSH
7260: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
7264: LD_EXP 15
7268: PPUSH
7269: LD_STRING D2c-Pow-1
7271: PPUSH
7272: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
7276: LD_EXP 1
7280: PPUSH
7281: LD_STRING D2c-JMM-2
7283: PPUSH
7284: CALL_OW 88
// secondPass := 2 ;
7288: LD_ADDR_EXP 20
7292: PUSH
7293: LD_INT 2
7295: ST_TO_ADDR
// end ; if dec = 3 then
7296: LD_VAR 0 3
7300: PUSH
7301: LD_INT 3
7303: EQUAL
7304: IFFALSE 7314
// secondPass := 1 ;
7306: LD_ADDR_EXP 20
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// InGameOff ;
7314: CALL_OW 9
// ruAI := true ;
7318: LD_ADDR_EXP 34
7322: PUSH
7323: LD_INT 1
7325: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
7326: LD_INT 1
7328: PPUSH
7329: LD_INT 3
7331: PPUSH
7332: LD_INT 2
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: CALL_OW 80
// SaveForQuickRestart ;
7342: CALL_OW 22
// end ;
7346: PPOPN 3
7348: END
// every 1 1$0 trigger secondPass = 2 do
7349: LD_EXP 20
7353: PUSH
7354: LD_INT 2
7356: EQUAL
7357: IFFALSE 7587
7359: GO 7361
7361: DISABLE
// begin cratesAllow := true ;
7362: LD_ADDR_EXP 45
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// PowellSupport1 ;
7370: CALL 2227 0 0
// DialogueOn ;
7374: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
7378: LD_EXP 1
7382: PPUSH
7383: LD_STRING DC1-JMM-1
7385: PPUSH
7386: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
7390: LD_EXP 15
7394: PPUSH
7395: LD_STRING DC1-Pow-1
7397: PPUSH
7398: CALL_OW 94
// DialogueOff ;
7402: CALL_OW 7
// wait ( 3 3$0 ) ;
7406: LD_INT 6300
7408: PPUSH
7409: CALL_OW 67
// PowellSupport2 ;
7413: CALL 2735 0 0
// DialogueOn ;
7417: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
7421: LD_EXP 1
7425: PPUSH
7426: LD_STRING DC2-JMM-1
7428: PPUSH
7429: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
7433: LD_EXP 15
7437: PPUSH
7438: LD_STRING DC2-Pow-1
7440: PPUSH
7441: CALL_OW 94
// DialogueOff ;
7445: CALL_OW 7
// wait ( 3 3$00 ) ;
7449: LD_INT 6300
7451: PPUSH
7452: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7456: LD_INT 35
7458: PPUSH
7459: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
7463: LD_INT 22
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: LD_INT 30
7478: PUSH
7479: LD_INT 0
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 30
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: IFFALSE 7531
7511: PUSH
7512: LD_INT 11
7514: PPUSH
7515: LD_INT 22
7517: PUSH
7518: LD_INT 3
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 70
7529: NOT
7530: AND
7531: IFFALSE 7456
// wait ( 0 0$10 ) ;
7533: LD_INT 350
7535: PPUSH
7536: CALL_OW 67
// Legion ;
7540: CALL 7588 0 0
// wait ( 5 5$0 ) ;
7544: LD_INT 10500
7546: PPUSH
7547: CALL_OW 67
// PowellSupport3 ;
7551: CALL 3422 0 0
// DialogueOn ;
7555: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
7559: LD_EXP 15
7563: PPUSH
7564: LD_STRING DC3-Pow-1
7566: PPUSH
7567: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
7571: LD_EXP 1
7575: PPUSH
7576: LD_STRING DC3-JMM-1
7578: PPUSH
7579: CALL_OW 88
// DialogueOff ;
7583: CALL_OW 7
// end ;
7587: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
7588: LD_INT 0
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
7596: PPUSH
7597: PPUSH
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7606: LD_ADDR_VAR 0 5
7610: PUSH
7611: LD_INT 22
7613: PUSH
7614: LD_INT 1
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 21
7623: PUSH
7624: LD_INT 3
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 2
7633: PUSH
7634: LD_INT 30
7636: PUSH
7637: LD_INT 0
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 30
7646: PUSH
7647: LD_INT 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: LIST
7663: PPUSH
7664: CALL_OW 69
7668: ST_TO_ADDR
// crates := 0 ;
7669: LD_ADDR_VAR 0 8
7673: PUSH
7674: LD_INT 0
7676: ST_TO_ADDR
// oil := 0 ;
7677: LD_ADDR_VAR 0 9
7681: PUSH
7682: LD_INT 0
7684: ST_TO_ADDR
// siberite := 0 ;
7685: LD_ADDR_VAR 0 10
7689: PUSH
7690: LD_INT 0
7692: ST_TO_ADDR
// payForNeutral := false ;
7693: LD_ADDR_VAR 0 13
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// payForHelp := false ;
7701: LD_ADDR_VAR 0 14
7705: PUSH
7706: LD_INT 0
7708: ST_TO_ADDR
// for i in tmp do
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_VAR 0 5
7718: PUSH
7719: FOR_IN
7720: IFFALSE 7811
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7722: LD_ADDR_VAR 0 8
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_VAR 0 2
7736: PPUSH
7737: CALL_OW 274
7741: PPUSH
7742: LD_INT 1
7744: PPUSH
7745: CALL_OW 275
7749: PLUS
7750: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7751: LD_ADDR_VAR 0 9
7755: PUSH
7756: LD_VAR 0 9
7760: PUSH
7761: LD_VAR 0 2
7765: PPUSH
7766: CALL_OW 274
7770: PPUSH
7771: LD_INT 2
7773: PPUSH
7774: CALL_OW 275
7778: PLUS
7779: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7780: LD_ADDR_VAR 0 10
7784: PUSH
7785: LD_VAR 0 10
7789: PUSH
7790: LD_VAR 0 2
7794: PPUSH
7795: CALL_OW 274
7799: PPUSH
7800: LD_INT 3
7802: PPUSH
7803: CALL_OW 275
7807: PLUS
7808: ST_TO_ADDR
// end ;
7809: GO 7719
7811: POP
7812: POP
// PrepareKurt ;
7813: CALL 5283 0 0
// if not Kurt then
7817: LD_EXP 17
7821: NOT
7822: IFFALSE 7826
// exit ;
7824: GO 10029
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7826: LD_EXP 18
7830: PPUSH
7831: LD_INT 144
7833: PPUSH
7834: LD_INT 111
7836: PPUSH
7837: CALL_OW 111
// wait ( 0 0$2 ) ;
7841: LD_INT 70
7843: PPUSH
7844: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7848: LD_INT 167
7850: PPUSH
7851: LD_INT 121
7853: PPUSH
7854: LD_INT 1
7856: PPUSH
7857: LD_INT 10
7859: NEG
7860: PPUSH
7861: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7865: LD_EXP 17
7869: PPUSH
7870: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7874: LD_EXP 17
7878: PPUSH
7879: CALL_OW 87
// wait ( 0 0$1 ) ;
7883: LD_INT 35
7885: PPUSH
7886: CALL_OW 67
// DialogueOn ;
7890: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7894: LD_INT 22
7896: PUSH
7897: LD_INT 1
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 26
7906: PUSH
7907: LD_INT 1
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 2
7916: PUSH
7917: LD_INT 25
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 25
7929: PUSH
7930: LD_INT 2
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 25
7939: PUSH
7940: LD_INT 3
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 25
7949: PUSH
7950: LD_INT 4
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 25
7959: PUSH
7960: LD_INT 5
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 25
7969: PUSH
7970: LD_INT 8
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: PPUSH
7991: CALL_OW 69
7995: PPUSH
7996: LD_STRING D3-Sol1-1
7998: PPUSH
7999: LD_STRING 
8001: PPUSH
8002: CALL 13171 0 3
// if KurtStatus = 1 then
8006: LD_EXP 19
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: IFFALSE 8114
// begin Say ( Kurt , D3-Kurt-1 ) ;
8016: LD_EXP 17
8020: PPUSH
8021: LD_STRING D3-Kurt-1
8023: PPUSH
8024: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8028: LD_EXP 1
8032: PPUSH
8033: LD_STRING D3-JMM-1
8035: PPUSH
8036: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
8040: LD_EXP 17
8044: PPUSH
8045: LD_STRING D3-Kurt-2
8047: PPUSH
8048: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
8052: LD_EXP 1
8056: PPUSH
8057: LD_STRING D3-JMM-2
8059: PPUSH
8060: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
8064: LD_EXP 17
8068: PPUSH
8069: LD_STRING D3-Kurt-4
8071: PPUSH
8072: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8076: LD_EXP 1
8080: PPUSH
8081: LD_STRING D3-JMM-4
8083: PPUSH
8084: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
8088: LD_EXP 17
8092: PPUSH
8093: LD_STRING D3-Kurt-5
8095: PPUSH
8096: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
8100: LD_EXP 17
8104: PPUSH
8105: LD_STRING D3-Kurt-5a
8107: PPUSH
8108: CALL_OW 88
// end else
8112: GO 8210
// begin Say ( Kurt , D3-Kurt-1 ) ;
8114: LD_EXP 17
8118: PPUSH
8119: LD_STRING D3-Kurt-1
8121: PPUSH
8122: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8126: LD_EXP 1
8130: PPUSH
8131: LD_STRING D3-JMM-1
8133: PPUSH
8134: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
8138: LD_EXP 17
8142: PPUSH
8143: LD_STRING D3-Kurt-3
8145: PPUSH
8146: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8150: LD_EXP 1
8154: PPUSH
8155: LD_STRING D3-JMM-3
8157: PPUSH
8158: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
8162: LD_EXP 17
8166: PPUSH
8167: LD_STRING D3-Kurt-4
8169: PPUSH
8170: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8174: LD_EXP 1
8178: PPUSH
8179: LD_STRING D3-JMM-4
8181: PPUSH
8182: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
8186: LD_EXP 17
8190: PPUSH
8191: LD_STRING D3-Kurt-5
8193: PPUSH
8194: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
8198: LD_EXP 17
8202: PPUSH
8203: LD_STRING D3-Kurt-5b
8205: PPUSH
8206: CALL_OW 88
// end ; if crates >= [ 120 , 60 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 , 120 ] [ KurtStatus + 1 ] then
8210: LD_VAR 0 8
8214: PUSH
8215: LD_INT 120
8217: PUSH
8218: LD_INT 60
8220: PUSH
8221: LD_INT 120
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 19
8233: PUSH
8234: LD_INT 1
8236: PLUS
8237: ARRAY
8238: GREATEREQUAL
8239: IFFALSE 8272
8241: PUSH
8242: LD_VAR 0 10
8246: PUSH
8247: LD_INT 120
8249: PUSH
8250: LD_INT 60
8252: PUSH
8253: LD_INT 120
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: PUSH
8261: LD_EXP 19
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ARRAY
8270: GREATEREQUAL
8271: AND
8272: IFFALSE 8328
// dec1 = SelectiveQuery ( [ Q2 , Q2K , Q2 ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8274: LD_ADDR_VAR 0 3
8278: PUSH
8279: LD_STRING Q2
8281: PUSH
8282: LD_STRING Q2K
8284: PUSH
8285: LD_STRING Q2
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: LD_EXP 19
8297: PUSH
8298: LD_INT 1
8300: PLUS
8301: ARRAY
8302: PPUSH
8303: LD_INT 1
8305: PUSH
8306: LD_INT 2
8308: PUSH
8309: LD_INT 3
8311: PUSH
8312: LD_INT 4
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 98
8325: ST_TO_ADDR
8326: GO 8376
// dec1 = SelectiveQuery ( [ Q2 , Q2K , Q2 ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
8328: LD_ADDR_VAR 0 3
8332: PUSH
8333: LD_STRING Q2
8335: PUSH
8336: LD_STRING Q2K
8338: PUSH
8339: LD_STRING Q2
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: PUSH
8347: LD_EXP 19
8351: PUSH
8352: LD_INT 1
8354: PLUS
8355: ARRAY
8356: PPUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: LD_INT 4
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: PPUSH
8371: CALL_OW 98
8375: ST_TO_ADDR
// if dec1 = 1 then
8376: LD_VAR 0 3
8380: PUSH
8381: LD_INT 1
8383: EQUAL
8384: IFFALSE 8418
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8386: LD_EXP 1
8390: PPUSH
8391: LD_STRING D3Ka-JMM-1
8393: PPUSH
8394: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
8398: LD_EXP 17
8402: PPUSH
8403: LD_STRING D3Ka-Kurt-1
8405: PPUSH
8406: CALL_OW 88
// warWithLegion := 1 ;
8410: LD_ADDR_EXP 23
8414: PUSH
8415: LD_INT 1
8417: ST_TO_ADDR
// end ; if dec1 = 2 then
8418: LD_VAR 0 3
8422: PUSH
8423: LD_INT 2
8425: EQUAL
8426: IFFALSE 8518
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8428: LD_EXP 1
8432: PPUSH
8433: LD_STRING D3Kb-JMM-1
8435: PPUSH
8436: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8440: LD_EXP 17
8444: PPUSH
8445: LD_STRING D3Kb-Kurt-1
8447: PPUSH
8448: CALL_OW 88
// cr := [ 120 , 60 , 120 ] [ KurtStatus + 1 ] ;
8452: LD_ADDR_VAR 0 11
8456: PUSH
8457: LD_INT 120
8459: PUSH
8460: LD_INT 60
8462: PUSH
8463: LD_INT 120
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: PUSH
8471: LD_EXP 19
8475: PUSH
8476: LD_INT 1
8478: PLUS
8479: ARRAY
8480: ST_TO_ADDR
// sb := [ 120 , 60 , 120 ] [ KurtStatus + 1 ] ;
8481: LD_ADDR_VAR 0 12
8485: PUSH
8486: LD_INT 120
8488: PUSH
8489: LD_INT 60
8491: PUSH
8492: LD_INT 120
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_EXP 19
8504: PUSH
8505: LD_INT 1
8507: PLUS
8508: ARRAY
8509: ST_TO_ADDR
// payForNeutral := true ;
8510: LD_ADDR_VAR 0 13
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// end ; if dec1 = 3 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 3
8525: EQUAL
8526: IFFALSE 8761
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8528: LD_EXP 1
8532: PPUSH
8533: LD_STRING D3Kc1-JMM-1
8535: PPUSH
8536: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8540: LD_EXP 17
8544: PPUSH
8545: LD_STRING D3Kc1-Kurt-1
8547: PPUSH
8548: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8552: LD_EXP 1
8556: PPUSH
8557: LD_STRING D3Kc1-JMM-2
8559: PPUSH
8560: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8564: LD_EXP 17
8568: PPUSH
8569: LD_STRING D3Kc1-Kurt-2
8571: PPUSH
8572: CALL_OW 88
// askSiberite := 1 ;
8576: LD_ADDR_EXP 25
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8584: LD_ADDR_VAR 0 4
8588: PUSH
8589: LD_STRING Q2b
8591: PPUSH
8592: LD_INT 1
8594: PUSH
8595: LD_INT 2
8597: PUSH
8598: LD_INT 3
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 98
8610: ST_TO_ADDR
// if dec2 = 1 then
8611: LD_VAR 0 4
8615: PUSH
8616: LD_INT 1
8618: EQUAL
8619: IFFALSE 8653
// begin Say ( JMM , D4a-JMM-1 ) ;
8621: LD_EXP 1
8625: PPUSH
8626: LD_STRING D4a-JMM-1
8628: PPUSH
8629: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8633: LD_EXP 17
8637: PPUSH
8638: LD_STRING D4b-Kurt-1
8640: PPUSH
8641: CALL_OW 88
// warWithLegion := 1 ;
8645: LD_ADDR_EXP 23
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// end ; if dec2 = 2 then
8653: LD_VAR 0 4
8657: PUSH
8658: LD_INT 2
8660: EQUAL
8661: IFFALSE 8695
// begin Say ( JMM , D4b-JMM-1 ) ;
8663: LD_EXP 1
8667: PPUSH
8668: LD_STRING D4b-JMM-1
8670: PPUSH
8671: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8675: LD_EXP 17
8679: PPUSH
8680: LD_STRING D4b-Kurt-1
8682: PPUSH
8683: CALL_OW 88
// warWithLegion := 1 ;
8687: LD_ADDR_EXP 23
8691: PUSH
8692: LD_INT 1
8694: ST_TO_ADDR
// end ; if dec2 = 3 then
8695: LD_VAR 0 4
8699: PUSH
8700: LD_INT 3
8702: EQUAL
8703: IFFALSE 8761
// begin Say ( JMM , D4c-JMM-1 ) ;
8705: LD_EXP 1
8709: PPUSH
8710: LD_STRING D4c-JMM-1
8712: PPUSH
8713: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8717: LD_EXP 17
8721: PPUSH
8722: LD_STRING D4c-Kurt-1
8724: PPUSH
8725: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8729: LD_EXP 1
8733: PPUSH
8734: LD_STRING D4c-JMM-2
8736: PPUSH
8737: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8741: LD_EXP 17
8745: PPUSH
8746: LD_STRING D4c-Kurt-2
8748: PPUSH
8749: CALL_OW 88
// fakeInfo := 1 ;
8753: LD_ADDR_EXP 24
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8761: LD_VAR 0 3
8765: PUSH
8766: LD_INT 4
8768: EQUAL
8769: IFFALSE 9885
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8771: LD_EXP 1
8775: PPUSH
8776: LD_STRING D3Kd-JMM-1
8778: PPUSH
8779: CALL_OW 88
// if crates >= [ 200 , 120 , 200 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 , 200 ] [ KurtStatus + 1 ] then
8783: LD_VAR 0 8
8787: PUSH
8788: LD_INT 200
8790: PUSH
8791: LD_INT 120
8793: PUSH
8794: LD_INT 200
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: LD_EXP 19
8806: PUSH
8807: LD_INT 1
8809: PLUS
8810: ARRAY
8811: GREATEREQUAL
8812: IFFALSE 8845
8814: PUSH
8815: LD_VAR 0 10
8819: PUSH
8820: LD_INT 200
8822: PUSH
8823: LD_INT 120
8825: PUSH
8826: LD_INT 200
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: PUSH
8834: LD_EXP 19
8838: PUSH
8839: LD_INT 1
8841: PLUS
8842: ARRAY
8843: GREATEREQUAL
8844: AND
8845: IFFALSE 8901
// dec2 = SelectiveQuery ( [ Q2a , Q2aK , Q2a ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8847: LD_ADDR_VAR 0 4
8851: PUSH
8852: LD_STRING Q2a
8854: PUSH
8855: LD_STRING Q2aK
8857: PUSH
8858: LD_STRING Q2a
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_EXP 19
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ARRAY
8875: PPUSH
8876: LD_INT 1
8878: PUSH
8879: LD_INT 2
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: LD_INT 4
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 98
8898: ST_TO_ADDR
8899: GO 9083
// if crates >= [ 120 , 60 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 , 120 ] [ KurtStatus + 1 ] then
8901: LD_VAR 0 8
8905: PUSH
8906: LD_INT 120
8908: PUSH
8909: LD_INT 60
8911: PUSH
8912: LD_INT 120
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PUSH
8920: LD_EXP 19
8924: PUSH
8925: LD_INT 1
8927: PLUS
8928: ARRAY
8929: GREATEREQUAL
8930: IFFALSE 8963
8932: PUSH
8933: LD_VAR 0 10
8937: PUSH
8938: LD_INT 120
8940: PUSH
8941: LD_INT 60
8943: PUSH
8944: LD_INT 120
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: PUSH
8952: LD_EXP 19
8956: PUSH
8957: LD_INT 1
8959: PLUS
8960: ARRAY
8961: GREATEREQUAL
8962: AND
8963: IFFALSE 9015
// dec2 = SelectiveQuery ( [ Q2a , Q2aK , Q2a ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8965: LD_ADDR_VAR 0 4
8969: PUSH
8970: LD_STRING Q2a
8972: PUSH
8973: LD_STRING Q2aK
8975: PUSH
8976: LD_STRING Q2a
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: LD_EXP 19
8988: PUSH
8989: LD_INT 1
8991: PLUS
8992: ARRAY
8993: PPUSH
8994: LD_INT 1
8996: PUSH
8997: LD_INT 2
8999: PUSH
9000: LD_INT 4
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: PPUSH
9008: CALL_OW 98
9012: ST_TO_ADDR
9013: GO 9083
// begin Query ( [ Q2d , Q2dK , Q2d ] [ KurtStatus + 1 ] ) ;
9015: LD_STRING Q2d
9017: PUSH
9018: LD_STRING Q2dK
9020: PUSH
9021: LD_STRING Q2d
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: PUSH
9029: LD_EXP 19
9033: PUSH
9034: LD_INT 1
9036: PLUS
9037: ARRAY
9038: PPUSH
9039: CALL_OW 97
// dec2 := 0 ;
9043: LD_ADDR_VAR 0 4
9047: PUSH
9048: LD_INT 0
9050: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
9051: LD_EXP 1
9055: PPUSH
9056: LD_STRING D3Kc1-JMM-1
9058: PPUSH
9059: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
9063: LD_EXP 17
9067: PPUSH
9068: LD_STRING D3Kc2-Kurt-1
9070: PPUSH
9071: CALL_OW 88
// warWithLegion := 1 ;
9075: LD_ADDR_EXP 23
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// end ; if dec2 = 1 then
9083: LD_VAR 0 4
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: IFFALSE 9125
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9093: LD_EXP 1
9097: PPUSH
9098: LD_STRING D5Ka-JMM-1
9100: PPUSH
9101: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
9105: LD_EXP 17
9109: PPUSH
9110: LD_STRING D5Ka-Kurt-1
9112: PPUSH
9113: CALL_OW 88
// warWithLegion := 1 ;
9117: LD_ADDR_EXP 23
9121: PUSH
9122: LD_INT 1
9124: ST_TO_ADDR
// end ; if dec2 = 2 then
9125: LD_VAR 0 4
9129: PUSH
9130: LD_INT 2
9132: EQUAL
9133: IFFALSE 9225
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9135: LD_EXP 1
9139: PPUSH
9140: LD_STRING D3Kb-JMM-1
9142: PPUSH
9143: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
9147: LD_EXP 17
9151: PPUSH
9152: LD_STRING D3Kb-Kurt-1
9154: PPUSH
9155: CALL_OW 88
// cr := [ 120 , 60 , 120 ] [ KurtStatus + 1 ] ;
9159: LD_ADDR_VAR 0 11
9163: PUSH
9164: LD_INT 120
9166: PUSH
9167: LD_INT 60
9169: PUSH
9170: LD_INT 120
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: LIST
9177: PUSH
9178: LD_EXP 19
9182: PUSH
9183: LD_INT 1
9185: PLUS
9186: ARRAY
9187: ST_TO_ADDR
// sb := [ 120 , 60 , 120 ] [ KurtStatus + 1 ] ;
9188: LD_ADDR_VAR 0 12
9192: PUSH
9193: LD_INT 120
9195: PUSH
9196: LD_INT 60
9198: PUSH
9199: LD_INT 120
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: PUSH
9207: LD_EXP 19
9211: PUSH
9212: LD_INT 1
9214: PLUS
9215: ARRAY
9216: ST_TO_ADDR
// payForNeutral := true ;
9217: LD_ADDR_VAR 0 13
9221: PUSH
9222: LD_INT 1
9224: ST_TO_ADDR
// end ; if dec2 = 3 then
9225: LD_VAR 0 4
9229: PUSH
9230: LD_INT 3
9232: EQUAL
9233: IFFALSE 9325
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9235: LD_EXP 1
9239: PPUSH
9240: LD_STRING D3Ke-JMM-1
9242: PPUSH
9243: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
9247: LD_EXP 17
9251: PPUSH
9252: LD_STRING D3Ke-Kurt-1
9254: PPUSH
9255: CALL_OW 88
// cr := [ 200 , 120 , 200 ] [ KurtStatus + 1 ] ;
9259: LD_ADDR_VAR 0 11
9263: PUSH
9264: LD_INT 200
9266: PUSH
9267: LD_INT 120
9269: PUSH
9270: LD_INT 200
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: LIST
9277: PUSH
9278: LD_EXP 19
9282: PUSH
9283: LD_INT 1
9285: PLUS
9286: ARRAY
9287: ST_TO_ADDR
// sb := [ 200 , 120 , 200 ] [ KurtStatus + 1 ] ;
9288: LD_ADDR_VAR 0 12
9292: PUSH
9293: LD_INT 200
9295: PUSH
9296: LD_INT 120
9298: PUSH
9299: LD_INT 200
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: LD_EXP 19
9311: PUSH
9312: LD_INT 1
9314: PLUS
9315: ARRAY
9316: ST_TO_ADDR
// payForHelp := true ;
9317: LD_ADDR_VAR 0 14
9321: PUSH
9322: LD_INT 1
9324: ST_TO_ADDR
// end ; if dec2 = 4 then
9325: LD_VAR 0 4
9329: PUSH
9330: LD_INT 4
9332: EQUAL
9333: IFFALSE 9568
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9335: LD_EXP 1
9339: PPUSH
9340: LD_STRING D3Kc1-JMM-1
9342: PPUSH
9343: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
9347: LD_EXP 17
9351: PPUSH
9352: LD_STRING D3Kc1-Kurt-1
9354: PPUSH
9355: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9359: LD_EXP 1
9363: PPUSH
9364: LD_STRING D3Kc1-JMM-2
9366: PPUSH
9367: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
9371: LD_EXP 17
9375: PPUSH
9376: LD_STRING D3Kc1-Kurt-2
9378: PPUSH
9379: CALL_OW 88
// askSiberite := 1 ;
9383: LD_ADDR_EXP 25
9387: PUSH
9388: LD_INT 1
9390: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9391: LD_ADDR_VAR 0 4
9395: PUSH
9396: LD_STRING Q2b
9398: PPUSH
9399: LD_INT 1
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: LD_INT 3
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 98
9417: ST_TO_ADDR
// if dec2 = 1 then
9418: LD_VAR 0 4
9422: PUSH
9423: LD_INT 1
9425: EQUAL
9426: IFFALSE 9460
// begin Say ( JMM , D4a-JMM-1 ) ;
9428: LD_EXP 1
9432: PPUSH
9433: LD_STRING D4a-JMM-1
9435: PPUSH
9436: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9440: LD_EXP 17
9444: PPUSH
9445: LD_STRING D4b-Kurt-1
9447: PPUSH
9448: CALL_OW 88
// warWithLegion := 1 ;
9452: LD_ADDR_EXP 23
9456: PUSH
9457: LD_INT 1
9459: ST_TO_ADDR
// end ; if dec2 = 2 then
9460: LD_VAR 0 4
9464: PUSH
9465: LD_INT 2
9467: EQUAL
9468: IFFALSE 9502
// begin Say ( JMM , D4b-JMM-1 ) ;
9470: LD_EXP 1
9474: PPUSH
9475: LD_STRING D4b-JMM-1
9477: PPUSH
9478: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9482: LD_EXP 17
9486: PPUSH
9487: LD_STRING D4b-Kurt-1
9489: PPUSH
9490: CALL_OW 88
// warWithLegion := 1 ;
9494: LD_ADDR_EXP 23
9498: PUSH
9499: LD_INT 1
9501: ST_TO_ADDR
// end ; if dec2 = 3 then
9502: LD_VAR 0 4
9506: PUSH
9507: LD_INT 3
9509: EQUAL
9510: IFFALSE 9568
// begin Say ( JMM , D4c-JMM-1 ) ;
9512: LD_EXP 1
9516: PPUSH
9517: LD_STRING D4c-JMM-1
9519: PPUSH
9520: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
9524: LD_EXP 17
9528: PPUSH
9529: LD_STRING D4c-Kurt-1
9531: PPUSH
9532: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9536: LD_EXP 1
9540: PPUSH
9541: LD_STRING D4c-JMM-2
9543: PPUSH
9544: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
9548: LD_EXP 17
9552: PPUSH
9553: LD_STRING D4c-Kurt-2
9555: PPUSH
9556: CALL_OW 88
// fakeInfo := 1 ;
9560: LD_ADDR_EXP 24
9564: PUSH
9565: LD_INT 1
9567: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
9568: LD_VAR 0 13
9572: IFTRUE 9580
9574: PUSH
9575: LD_VAR 0 14
9579: OR
9580: IFFALSE 9885
// begin for i in tmp do
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_VAR 0 5
9591: PUSH
9592: FOR_IN
9593: IFFALSE 9883
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9595: LD_ADDR_VAR 0 6
9599: PUSH
9600: LD_VAR 0 2
9604: PPUSH
9605: CALL_OW 274
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 275
9617: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9618: LD_ADDR_VAR 0 7
9622: PUSH
9623: LD_VAR 0 2
9627: PPUSH
9628: CALL_OW 274
9632: PPUSH
9633: LD_INT 3
9635: PPUSH
9636: CALL_OW 275
9640: ST_TO_ADDR
// if cr then
9641: LD_VAR 0 11
9645: IFFALSE 9761
// begin if tmp2 and tmp2 < cr then
9647: LD_VAR 0 6
9651: IFFALSE 9665
9653: PUSH
9654: LD_VAR 0 6
9658: PUSH
9659: LD_VAR 0 11
9663: LESS
9664: AND
9665: IFFALSE 9713
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9667: LD_VAR 0 2
9671: PPUSH
9672: CALL_OW 274
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: LD_VAR 0 11
9684: PUSH
9685: LD_VAR 0 6
9689: MINUS
9690: PPUSH
9691: CALL_OW 277
// cr := cr - tmp2 ;
9695: LD_ADDR_VAR 0 11
9699: PUSH
9700: LD_VAR 0 11
9704: PUSH
9705: LD_VAR 0 6
9709: MINUS
9710: ST_TO_ADDR
// end else
9711: GO 9761
// if tmp2 > cr then
9713: LD_VAR 0 6
9717: PUSH
9718: LD_VAR 0 11
9722: GREATER
9723: IFFALSE 9761
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9725: LD_VAR 0 2
9729: PPUSH
9730: CALL_OW 274
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: LD_VAR 0 6
9742: PUSH
9743: LD_VAR 0 11
9747: MINUS
9748: PPUSH
9749: CALL_OW 277
// cr := 0 ;
9753: LD_ADDR_VAR 0 11
9757: PUSH
9758: LD_INT 0
9760: ST_TO_ADDR
// end ; end ; if sb then
9761: LD_VAR 0 12
9765: IFFALSE 9881
// begin if tmp3 and tmp3 < sb then
9767: LD_VAR 0 7
9771: IFFALSE 9785
9773: PUSH
9774: LD_VAR 0 7
9778: PUSH
9779: LD_VAR 0 12
9783: LESS
9784: AND
9785: IFFALSE 9833
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9787: LD_VAR 0 2
9791: PPUSH
9792: CALL_OW 274
9796: PPUSH
9797: LD_INT 3
9799: PPUSH
9800: LD_VAR 0 12
9804: PUSH
9805: LD_VAR 0 7
9809: MINUS
9810: PPUSH
9811: CALL_OW 277
// sb := sb - tmp3 ;
9815: LD_ADDR_VAR 0 12
9819: PUSH
9820: LD_VAR 0 12
9824: PUSH
9825: LD_VAR 0 7
9829: MINUS
9830: ST_TO_ADDR
// end else
9831: GO 9881
// if tmp3 > sb then
9833: LD_VAR 0 7
9837: PUSH
9838: LD_VAR 0 12
9842: GREATER
9843: IFFALSE 9881
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9845: LD_VAR 0 2
9849: PPUSH
9850: CALL_OW 274
9854: PPUSH
9855: LD_INT 3
9857: PPUSH
9858: LD_VAR 0 7
9862: PUSH
9863: LD_VAR 0 12
9867: MINUS
9868: PPUSH
9869: CALL_OW 277
// sb := 0 ;
9873: LD_ADDR_VAR 0 12
9877: PUSH
9878: LD_INT 0
9880: ST_TO_ADDR
// end ; end ; end ;
9881: GO 9592
9883: POP
9884: POP
// end ; end ; DialogueOff ;
9885: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9889: LD_INT 167
9891: PPUSH
9892: LD_INT 121
9894: PPUSH
9895: LD_INT 1
9897: PPUSH
9898: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9902: LD_EXP 17
9906: PPUSH
9907: LD_EXP 18
9911: PPUSH
9912: CALL_OW 120
// wait ( 0 0$1 ) ;
9916: LD_INT 35
9918: PPUSH
9919: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9923: LD_EXP 18
9927: PPUSH
9928: LD_INT 4
9930: PPUSH
9931: CALL_OW 113
// wait ( 0 0$3 ) ;
9935: LD_INT 105
9937: PPUSH
9938: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9942: LD_EXP 17
9946: PPUSH
9947: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9951: LD_EXP 18
9955: PPUSH
9956: CALL_OW 64
// wait ( 0 0$3 ) ;
9960: LD_INT 105
9962: PPUSH
9963: CALL_OW 67
// if payForHelp then
9967: LD_VAR 0 14
9971: IFFALSE 10029
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9973: LD_INT 36
9975: PPUSH
9976: LD_INT 57
9978: PPUSH
9979: LD_INT 1
9981: PPUSH
9982: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9986: LD_INT 51
9988: PPUSH
9989: LD_INT 63
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9999: LD_INT 93
10001: PPUSH
10002: LD_INT 65
10004: PPUSH
10005: LD_INT 1
10007: PPUSH
10008: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
10012: LD_INT 42
10014: PPUSH
10015: LD_INT 12
10017: PPUSH
10018: LD_INT 1
10020: PPUSH
10021: CALL_OW 244
// PrepareLegionForPlayer ;
10025: CALL 5486 0 0
// end ; end ;
10029: LD_VAR 0 1
10033: RET
// every 0 0$10 trigger warWithLegion = 1 do
10034: LD_EXP 23
10038: PUSH
10039: LD_INT 1
10041: EQUAL
10042: IFFALSE 10058
10044: GO 10046
10046: DISABLE
// begin wait ( 0 0$30 ) ;
10047: LD_INT 1050
10049: PPUSH
10050: CALL_OW 67
// PrepareAttackLegion ;
10054: CALL 6135 0 0
// end ;
10058: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
10059: LD_INT 120
10061: PUSH
10062: LD_INT 17
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 52
10071: PUSH
10072: EMPTY
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PPUSH
10079: CALL_OW 69
10083: IFFALSE 10230
10085: GO 10087
10087: DISABLE
10088: LD_INT 0
10090: PPUSH
// begin enable ;
10091: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
10092: LD_ADDR_VAR 0 1
10096: PUSH
10097: LD_INT 120
10099: PUSH
10100: LD_INT 17
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 52
10109: PUSH
10110: EMPTY
10111: LIST
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 69
10121: PUSH
10122: FOR_IN
10123: IFFALSE 10228
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
10125: LD_VAR 0 1
10129: PPUSH
10130: CALL 84545 0 1
10134: PUSH
10135: LD_INT 4
10137: ARRAY
10138: PUSH
10139: LD_INT 0
10141: EQUAL
10142: IFFALSE 10159
10144: PUSH
10145: LD_VAR 0 1
10149: PPUSH
10150: CALL_OW 255
10154: PUSH
10155: LD_INT 1
10157: EQUAL
10158: AND
10159: IFFALSE 10173
// SetSide ( i , 4 ) ;
10161: LD_VAR 0 1
10165: PPUSH
10166: LD_INT 4
10168: PPUSH
10169: CALL_OW 235
// if GetSide ( i ) = 4 then
10173: LD_VAR 0 1
10177: PPUSH
10178: CALL_OW 255
10182: PUSH
10183: LD_INT 4
10185: EQUAL
10186: IFFALSE 10226
// if not IsInArea ( i , PlayerSpawn ) then
10188: LD_VAR 0 1
10192: PPUSH
10193: LD_INT 4
10195: PPUSH
10196: CALL_OW 308
10200: NOT
10201: IFFALSE 10217
// ComMoveToArea ( i , PlayerSpawn ) else
10203: LD_VAR 0 1
10207: PPUSH
10208: LD_INT 4
10210: PPUSH
10211: CALL_OW 113
10215: GO 10226
// RemoveUnit ( i ) ;
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 64
// end ;
10226: GO 10122
10228: POP
10229: POP
// end ;
10230: PPOPN 1
10232: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
10233: LD_EXP 20
10237: PUSH
10238: LD_INT 1
10240: EQUAL
10241: IFFALSE 10287
10243: PUSH
10244: LD_INT 12
10246: PPUSH
10247: LD_INT 22
10249: PUSH
10250: LD_INT 3
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 101
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 21
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 70
10286: AND
10287: IFFALSE 10872
10289: GO 10291
10291: DISABLE
10292: LD_INT 0
10294: PPUSH
10295: PPUSH
10296: PPUSH
// begin DialogueOn ;
10297: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10301: LD_VAR 0 1
10305: PPUSH
10306: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10310: LD_INT 22
10312: PUSH
10313: LD_INT 1
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 26
10322: PUSH
10323: LD_INT 1
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 2
10332: PUSH
10333: LD_INT 25
10335: PUSH
10336: LD_INT 1
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 25
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 25
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 25
10365: PUSH
10366: LD_INT 4
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 25
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 25
10385: PUSH
10386: LD_INT 8
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 69
10411: PPUSH
10412: LD_STRING DT1-Sol1-1
10414: PPUSH
10415: LD_STRING DT1-FSol1-1
10417: PPUSH
10418: CALL 13171 0 3
// dec := ShowQuery2 ;
10422: LD_ADDR_VAR 0 3
10426: PUSH
10427: CALL 13655 0 0
10431: ST_TO_ADDR
// if dec = 1 then
10432: LD_VAR 0 3
10436: PUSH
10437: LD_INT 1
10439: EQUAL
10440: IFFALSE 10582
// begin Say ( JMM , D2-JMM-1 ) ;
10442: LD_EXP 1
10446: PPUSH
10447: LD_STRING D2-JMM-1
10449: PPUSH
10450: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10454: LD_EXP 15
10458: PPUSH
10459: LD_STRING D2-Pow-1
10461: PPUSH
10462: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10466: LD_EXP 1
10470: PPUSH
10471: LD_STRING D2a-JMM-1
10473: PPUSH
10474: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10478: LD_EXP 15
10482: PPUSH
10483: LD_STRING D2a-Pow-1
10485: PPUSH
10486: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10490: LD_EXP 1
10494: PPUSH
10495: LD_STRING D2a-JMM-2
10497: PPUSH
10498: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10502: LD_EXP 15
10506: PPUSH
10507: LD_STRING D2a-Pow-2
10509: PPUSH
10510: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10514: LD_EXP 1
10518: PPUSH
10519: LD_STRING D2a-JMM-3
10521: PPUSH
10522: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10526: LD_EXP 15
10530: PPUSH
10531: LD_STRING D2a-Pow-3
10533: PPUSH
10534: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10538: LD_EXP 1
10542: PPUSH
10543: LD_STRING D2c-JMM-1
10545: PPUSH
10546: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10550: LD_EXP 15
10554: PPUSH
10555: LD_STRING D2c-Pow-1
10557: PPUSH
10558: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10562: LD_EXP 1
10566: PPUSH
10567: LD_STRING D2c-JMM-2
10569: PPUSH
10570: CALL_OW 88
// secondPass := 2 ;
10574: LD_ADDR_EXP 20
10578: PUSH
10579: LD_INT 2
10581: ST_TO_ADDR
// end ; if dec = 2 then
10582: LD_VAR 0 3
10586: PUSH
10587: LD_INT 2
10589: EQUAL
10590: IFFALSE 10684
// begin Say ( JMM , D2-JMM-1 ) ;
10592: LD_EXP 1
10596: PPUSH
10597: LD_STRING D2-JMM-1
10599: PPUSH
10600: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10604: LD_EXP 15
10608: PPUSH
10609: LD_STRING D2-Pow-1
10611: PPUSH
10612: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10616: LD_EXP 1
10620: PPUSH
10621: LD_STRING D2b-JMM-1
10623: PPUSH
10624: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10628: LD_EXP 15
10632: PPUSH
10633: LD_STRING D2b-Pow-1
10635: PPUSH
10636: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10640: LD_EXP 1
10644: PPUSH
10645: LD_STRING D2c-JMM-1
10647: PPUSH
10648: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10652: LD_EXP 15
10656: PPUSH
10657: LD_STRING D2c-Pow-1
10659: PPUSH
10660: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10664: LD_EXP 1
10668: PPUSH
10669: LD_STRING D2c-JMM-2
10671: PPUSH
10672: CALL_OW 88
// secondPass := 2 ;
10676: LD_ADDR_EXP 20
10680: PUSH
10681: LD_INT 2
10683: ST_TO_ADDR
// end ; DialogueOff ;
10684: CALL_OW 7
// if secondPass = 2 then
10688: LD_EXP 20
10692: PUSH
10693: LD_INT 2
10695: EQUAL
10696: IFFALSE 10700
// exit ;
10698: GO 10872
// Query ( HelpRequest ) ;
10700: LD_STRING HelpRequest
10702: PPUSH
10703: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
10707: LD_INT 27
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
10717: LD_INT 35
10719: PPUSH
10720: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_INT 27
10731: PPUSH
10732: CALL_OW 308
10736: IFFALSE 10717
// SetAreaMapShow ( helpRequestArea , 0 ) ;
10738: LD_INT 27
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL_OW 424
// DialogueOn ;
10748: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
10752: LD_EXP 1
10756: PPUSH
10757: LD_STRING D2-JMM-1
10759: PPUSH
10760: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10764: LD_EXP 15
10768: PPUSH
10769: LD_STRING D2-Pow-1
10771: PPUSH
10772: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10776: LD_EXP 1
10780: PPUSH
10781: LD_STRING D2b-JMM-1
10783: PPUSH
10784: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10788: LD_EXP 15
10792: PPUSH
10793: LD_STRING D2a-Pow-2
10795: PPUSH
10796: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10800: LD_EXP 1
10804: PPUSH
10805: LD_STRING D2a-JMM-3
10807: PPUSH
10808: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10812: LD_EXP 15
10816: PPUSH
10817: LD_STRING D2a-Pow-3
10819: PPUSH
10820: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10824: LD_EXP 1
10828: PPUSH
10829: LD_STRING D2c-JMM-1
10831: PPUSH
10832: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10836: LD_EXP 15
10840: PPUSH
10841: LD_STRING D2c-Pow-1
10843: PPUSH
10844: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10848: LD_EXP 1
10852: PPUSH
10853: LD_STRING D2c-JMM-2
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// secondPass := 2 ;
10864: LD_ADDR_EXP 20
10868: PUSH
10869: LD_INT 2
10871: ST_TO_ADDR
// end ;
10872: PPOPN 3
10874: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10875: LD_EXP 21
10879: PUSH
10880: LD_INT 1
10882: EQUAL
10883: IFFALSE 10904
10885: PUSH
10886: LD_INT 11
10888: PPUSH
10889: LD_INT 22
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PPUSH
10899: CALL_OW 70
10903: AND
10904: IFFALSE 11387
10906: GO 10908
10908: DISABLE
10909: LD_INT 0
10911: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10912: LD_ADDR_VAR 0 1
10916: PUSH
10917: LD_INT 11
10919: PPUSH
10920: LD_INT 22
10922: PUSH
10923: LD_INT 3
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PPUSH
10930: CALL_OW 70
10934: ST_TO_ADDR
// if not vehicles then
10935: LD_VAR 0 1
10939: NOT
10940: IFFALSE 10944
// exit ;
10942: GO 11387
// repeat wait ( 0 0$1 ) ;
10944: LD_INT 35
10946: PPUSH
10947: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10951: LD_VAR 0 1
10955: PPUSH
10956: LD_INT 101
10958: PUSH
10959: LD_INT 1
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PPUSH
10966: CALL_OW 72
10970: IFFALSE 10944
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10972: LD_VAR 0 1
10976: PPUSH
10977: LD_INT 101
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 72
10991: PUSH
10992: LD_INT 1
10994: ARRAY
10995: PPUSH
10996: CALL_OW 87
// DialogueOn ;
11000: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11004: LD_INT 22
11006: PUSH
11007: LD_INT 1
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 26
11016: PUSH
11017: LD_INT 1
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 23
11026: PUSH
11027: LD_INT 1
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 2
11036: PUSH
11037: LD_INT 25
11039: PUSH
11040: LD_INT 1
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 25
11049: PUSH
11050: LD_INT 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 25
11059: PUSH
11060: LD_INT 3
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: LD_INT 25
11069: PUSH
11070: LD_INT 4
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 25
11079: PUSH
11080: LD_INT 5
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 8
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 69
11116: PPUSH
11117: LD_STRING DT1-Sol1-1
11119: PPUSH
11120: LD_STRING DT1-FSol1-1
11122: PPUSH
11123: CALL 13171 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11127: LD_EXP 1
11131: PPUSH
11132: LD_STRING DT1-JMM-1
11134: PPUSH
11135: CALL_OW 88
// DialogueOff ;
11139: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
11143: LD_INT 175
11145: PPUSH
11146: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
11150: LD_INT 11
11152: PPUSH
11153: LD_INT 22
11155: PUSH
11156: LD_INT 3
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 50
11165: PUSH
11166: EMPTY
11167: LIST
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: LD_INT 21
11174: PUSH
11175: LD_INT 2
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 21
11184: PUSH
11185: LD_INT 1
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 70
11206: PUSH
11207: LD_INT 0
11209: EQUAL
11210: IFFALSE 11222
11212: PUSH
11213: LD_EXP 22
11217: PUSH
11218: LD_INT 2
11220: GREATER
11221: AND
11222: IFFALSE 11143
// DialogueOn ;
11224: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11228: LD_EXP 1
11232: PPUSH
11233: LD_STRING DT1a-JMM-1
11235: PPUSH
11236: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11240: LD_INT 22
11242: PUSH
11243: LD_INT 1
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 26
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 23
11262: PUSH
11263: LD_INT 1
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 1
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 25
11285: PUSH
11286: LD_INT 2
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 3
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 25
11305: PUSH
11306: LD_INT 4
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 25
11315: PUSH
11316: LD_INT 5
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 25
11325: PUSH
11326: LD_INT 8
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PPUSH
11348: CALL_OW 69
11352: PPUSH
11353: LD_STRING DT1a-Sol1-1
11355: PPUSH
11356: LD_STRING DT1a-FSol1-1
11358: PPUSH
11359: CALL 13171 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11363: LD_EXP 1
11367: PPUSH
11368: LD_STRING DT1a-JMM-2
11370: PPUSH
11371: CALL_OW 88
// DialogueOff ;
11375: CALL_OW 7
// vehicleTeleported := 2 ;
11379: LD_ADDR_EXP 21
11383: PUSH
11384: LD_INT 2
11386: ST_TO_ADDR
// end ;
11387: PPOPN 1
11389: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
11390: LD_EXP 21
11394: PUSH
11395: LD_INT 3
11397: EQUAL
11398: IFFALSE 11433
11400: PUSH
11401: LD_INT 11
11403: PPUSH
11404: LD_INT 22
11406: PUSH
11407: LD_INT 3
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 101
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 70
11432: AND
11433: IFFALSE 11718
11435: GO 11437
11437: DISABLE
11438: LD_INT 0
11440: PPUSH
11441: PPUSH
11442: PPUSH
// begin wait ( 0 0$0.3 ) ;
11443: LD_INT 10
11445: PPUSH
11446: CALL_OW 67
// DialogueOn ;
11450: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11454: LD_ADDR_VAR 0 3
11458: PUSH
11459: LD_INT 22
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 23
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 26
11481: PUSH
11482: LD_INT 1
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: LD_INT 25
11494: PUSH
11495: LD_INT 1
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 25
11504: PUSH
11505: LD_INT 2
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 25
11514: PUSH
11515: LD_INT 3
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 25
11524: PUSH
11525: LD_INT 4
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 25
11534: PUSH
11535: LD_INT 5
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 25
11544: PUSH
11545: LD_INT 8
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: PPUSH
11567: CALL_OW 69
11571: PPUSH
11572: LD_STRING DT2-Sol1-1
11574: PPUSH
11575: LD_STRING DT2-FSol1-1
11577: PPUSH
11578: CALL 13171 0 3
11582: ST_TO_ADDR
// DialogueOff ;
11583: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
11587: LD_INT 175
11589: PPUSH
11590: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11594: LD_INT 11
11596: PPUSH
11597: LD_INT 22
11599: PUSH
11600: LD_INT 3
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 50
11609: PUSH
11610: EMPTY
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 70
11621: NOT
11622: IFFALSE 11587
// wait ( 0 0$2 ) ;
11624: LD_INT 70
11626: PPUSH
11627: CALL_OW 67
// vehicleTeleported := 4 ;
11631: LD_ADDR_EXP 21
11635: PUSH
11636: LD_INT 4
11638: ST_TO_ADDR
// DialogueOn ;
11639: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11643: LD_EXP 1
11647: PPUSH
11648: LD_STRING DT2a-JMM-1
11650: PPUSH
11651: CALL_OW 88
// if speaker then
11655: LD_VAR 0 3
11659: IFFALSE 11702
// if GetSex ( speaker ) = 1 then
11661: LD_VAR 0 3
11665: PPUSH
11666: CALL_OW 258
11670: PUSH
11671: LD_INT 1
11673: EQUAL
11674: IFFALSE 11690
// Say ( speaker , DT2a-Sol1-1 ) else
11676: LD_VAR 0 3
11680: PPUSH
11681: LD_STRING DT2a-Sol1-1
11683: PPUSH
11684: CALL_OW 88
11688: GO 11702
// Say ( speaker , DT2a-FSol1-1 ) ;
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_STRING DT2a-FSol1-1
11697: PPUSH
11698: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11702: LD_EXP 3
11706: PPUSH
11707: LD_STRING DT2a-Don-1
11709: PPUSH
11710: CALL_OW 88
// DialogueOff ;
11714: CALL_OW 7
// end ;
11718: PPOPN 3
11720: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 45
11726: PPUSH
11727: LD_INT 74
11729: PPUSH
11730: CALL_OW 293
11734: IFFALSE 11911
11736: GO 11738
11738: DISABLE
// begin DialogueOn ;
11739: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11743: LD_INT 36
11745: PPUSH
11746: LD_INT 55
11748: PPUSH
11749: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11753: LD_INT 22
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 23
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 26
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: LD_INT 25
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 25
11798: PUSH
11799: LD_INT 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 25
11808: PUSH
11809: LD_INT 3
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 25
11818: PUSH
11819: LD_INT 4
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 25
11828: PUSH
11829: LD_INT 5
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 25
11838: PUSH
11839: LD_INT 8
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 69
11865: PPUSH
11866: LD_STRING D5-Sol1-1
11868: PPUSH
11869: LD_STRING D5-FSol1-
11871: PPUSH
11872: CALL 13171 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11876: LD_EXP 23
11880: IFFALSE 11893
11882: PUSH
11883: LD_EXP 3
11887: PPUSH
11888: CALL_OW 302
11892: AND
11893: IFFALSE 11907
// Say ( Donaldson , D5-Don-1 ) ;
11895: LD_EXP 3
11899: PPUSH
11900: LD_STRING D5-Don-1
11902: PPUSH
11903: CALL_OW 88
// DialogueOff ;
11907: CALL_OW 7
// end ;
11911: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11912: LD_INT 1
11914: PPUSH
11915: LD_INT 10
11917: PPUSH
11918: CALL_OW 292
11922: IFTRUE 11936
11924: PUSH
11925: LD_INT 1
11927: PPUSH
11928: LD_INT 137
11930: PPUSH
11931: CALL_OW 292
11935: OR
11936: IFFALSE 12091
11938: GO 11940
11940: DISABLE
// begin DialogueOn ;
11941: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11945: LD_INT 22
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 23
11957: PUSH
11958: LD_INT 1
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 26
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 2
11977: PUSH
11978: LD_INT 25
11980: PUSH
11981: LD_INT 1
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 25
11990: PUSH
11991: LD_INT 2
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 25
12000: PUSH
12001: LD_INT 3
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 25
12010: PUSH
12011: LD_INT 4
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 5
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 25
12030: PUSH
12031: LD_INT 8
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: PPUSH
12058: LD_STRING DT3-Sol1-1
12060: PPUSH
12061: LD_STRING DT3-FSol1-1
12063: PPUSH
12064: CALL 13171 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12068: LD_EXP 1
12072: PPUSH
12073: LD_STRING DT3-JMM-1
12075: PPUSH
12076: CALL_OW 88
// DialogueOff ;
12080: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12084: LD_STRING M2
12086: PPUSH
12087: CALL_OW 337
// end ;
12091: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
12092: LD_EXP 35
12096: PUSH
12097: LD_INT 0
12099: EQUAL
12100: IFFALSE 12181
12102: PUSH
12103: LD_INT 10
12105: PPUSH
12106: LD_INT 22
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 70
12120: IFTRUE 12180
12122: PUSH
12123: LD_INT 10
12125: PPUSH
12126: LD_INT 22
12128: PUSH
12129: LD_INT 3
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 3
12138: PUSH
12139: LD_INT 24
12141: PUSH
12142: LD_INT 800
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 21
12155: PUSH
12156: LD_INT 2
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 58
12165: PUSH
12166: EMPTY
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: PPUSH
12175: CALL_OW 70
12179: OR
12180: AND
12181: IFTRUE 12196
12183: PUSH
12184: LD_INT 137
12186: PPUSH
12187: CALL_OW 256
12191: PUSH
12192: LD_INT 900
12194: LESS
12195: OR
12196: IFFALSE 12209
12198: GO 12200
12200: DISABLE
// ruEscape := 1 ;
12201: LD_ADDR_EXP 35
12205: PUSH
12206: LD_INT 1
12208: ST_TO_ADDR
12209: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
12210: LD_INT 3
12212: PPUSH
12213: CALL_OW 303
12217: IFTRUE 12228
12219: PUSH
12220: LD_INT 4
12222: PPUSH
12223: CALL_OW 303
12227: OR
12228: IFTRUE 12240
12230: PUSH
12231: LD_EXP 35
12235: PUSH
12236: LD_INT 1
12238: EQUAL
12239: OR
12240: IFFALSE 12835
12242: GO 12244
12244: DISABLE
12245: LD_INT 0
12247: PPUSH
12248: PPUSH
12249: PPUSH
// begin ruAI := 0 ;
12250: LD_ADDR_EXP 34
12254: PUSH
12255: LD_INT 0
12257: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12258: LD_EXP 27
12262: PPUSH
12263: CALL_OW 122
// wait ( 0 0$1 ) ;
12267: LD_INT 35
12269: PPUSH
12270: CALL_OW 67
// DialogueOn ;
12274: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
12278: LD_INT 75
12280: PPUSH
12281: LD_INT 21
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: LD_INT 12
12289: PPUSH
12290: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
12294: LD_INT 75
12296: PPUSH
12297: LD_INT 21
12299: PPUSH
12300: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
12304: LD_INT 10
12306: PPUSH
12307: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
12311: LD_EXP 1
12315: PPUSH
12316: LD_STRING D6-JMM-1
12318: PPUSH
12319: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
12323: LD_INT 75
12325: PPUSH
12326: LD_INT 21
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 331
// DialogueOff ;
12336: CALL_OW 7
// for i in RuScientists do
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: LD_EXP 27
12349: PUSH
12350: FOR_IN
12351: IFFALSE 12387
// begin SetSide ( i , 6 ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: LD_INT 6
12360: PPUSH
12361: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
12365: LD_VAR 0 1
12369: PPUSH
12370: LD_INT 1
12372: PPUSH
12373: LD_INT 3
12375: PPUSH
12376: CALL_OW 12
12380: PPUSH
12381: CALL_OW 109
// end ;
12385: GO 12350
12387: POP
12388: POP
// repeat wait ( 0 0$1 ) ;
12389: LD_INT 35
12391: PPUSH
12392: CALL_OW 67
// for i in RuScientists do
12396: LD_ADDR_VAR 0 1
12400: PUSH
12401: LD_EXP 27
12405: PUSH
12406: FOR_IN
12407: IFFALSE 12826
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12409: LD_ADDR_VAR 0 3
12413: PUSH
12414: LD_INT 22
12416: PUSH
12417: LD_INT 3
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 91
12426: PUSH
12427: LD_VAR 0 1
12431: PUSH
12432: LD_INT 10
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 21
12442: PUSH
12443: LD_INT 2
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 58
12452: PUSH
12453: EMPTY
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PPUSH
12462: CALL_OW 69
12466: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
12467: LD_VAR 0 3
12471: IFFALSE 12485
12473: PUSH
12474: LD_VAR 0 1
12478: PPUSH
12479: CALL_OW 310
12483: NOT
12484: AND
12485: IFFALSE 12513
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
12487: LD_VAR 0 1
12491: PPUSH
12492: LD_VAR 0 3
12496: PPUSH
12497: LD_VAR 0 1
12501: PPUSH
12502: CALL_OW 74
12506: PPUSH
12507: CALL_OW 120
// continue ;
12511: GO 12406
// end ; if IsInUnit ( i ) then
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 310
12522: IFFALSE 12541
// unit := IsInUnit ( i ) else
12524: LD_ADDR_VAR 0 2
12528: PUSH
12529: LD_VAR 0 1
12533: PPUSH
12534: CALL_OW 310
12538: ST_TO_ADDR
12539: GO 12551
// unit := i ;
12541: LD_ADDR_VAR 0 2
12545: PUSH
12546: LD_VAR 0 1
12550: ST_TO_ADDR
// case GetTag ( i ) of 1 :
12551: LD_VAR 0 1
12555: PPUSH
12556: CALL_OW 110
12560: PUSH
12561: LD_INT 1
12563: DOUBLE
12564: EQUAL
12565: IFTRUE 12569
12567: GO 12630
12569: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12570: LD_VAR 0 2
12574: PPUSH
12575: LD_INT 137
12577: PPUSH
12578: CALL_OW 296
12582: PUSH
12583: LD_INT 13
12585: LESS
12586: IFFALSE 12597
12588: PUSH
12589: LD_INT 137
12591: PPUSH
12592: CALL_OW 302
12596: AND
12597: IFFALSE 12613
// ComEnterUnit ( unit , rutp ) else
12599: LD_VAR 0 2
12603: PPUSH
12604: LD_INT 137
12606: PPUSH
12607: CALL_OW 120
12611: GO 12628
// ComMoveXY ( unit , 16 , 28 ) ;
12613: LD_VAR 0 2
12617: PPUSH
12618: LD_INT 16
12620: PPUSH
12621: LD_INT 28
12623: PPUSH
12624: CALL_OW 111
// end ; 2 :
12628: GO 12824
12630: LD_INT 2
12632: DOUBLE
12633: EQUAL
12634: IFTRUE 12638
12636: GO 12656
12638: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
12639: LD_VAR 0 2
12643: PPUSH
12644: LD_INT 97
12646: PPUSH
12647: LD_INT 2
12649: PPUSH
12650: CALL_OW 111
12654: GO 12824
12656: LD_INT 3
12658: DOUBLE
12659: EQUAL
12660: IFTRUE 12664
12662: GO 12725
12664: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12665: LD_VAR 0 2
12669: PPUSH
12670: LD_INT 137
12672: PPUSH
12673: CALL_OW 296
12677: PUSH
12678: LD_INT 13
12680: LESS
12681: IFFALSE 12692
12683: PUSH
12684: LD_INT 137
12686: PPUSH
12687: CALL_OW 302
12691: AND
12692: IFFALSE 12708
// ComEnterUnit ( unit , rutp ) else
12694: LD_VAR 0 2
12698: PPUSH
12699: LD_INT 137
12701: PPUSH
12702: CALL_OW 120
12706: GO 12723
// ComMoveXY ( unit , 128 , 155 ) ;
12708: LD_VAR 0 2
12712: PPUSH
12713: LD_INT 128
12715: PPUSH
12716: LD_INT 155
12718: PPUSH
12719: CALL_OW 111
// end ; 11 :
12723: GO 12824
12725: LD_INT 11
12727: DOUBLE
12728: EQUAL
12729: IFTRUE 12733
12731: GO 12751
12733: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
12734: LD_VAR 0 2
12738: PPUSH
12739: LD_INT 16
12741: PPUSH
12742: LD_INT 28
12744: PPUSH
12745: CALL_OW 111
12749: GO 12824
12751: LD_INT 13
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12797
12759: POP
// begin if IsOk ( ruteleprt ) then
12760: LD_INT 10
12762: PPUSH
12763: CALL_OW 302
12767: IFFALSE 12783
// ComEnterUnit ( unit , ruteleprt ) else
12769: LD_VAR 0 2
12773: PPUSH
12774: LD_INT 10
12776: PPUSH
12777: CALL_OW 120
12781: GO 12795
// SetTag ( unit , 23 ) ;
12783: LD_VAR 0 2
12787: PPUSH
12788: LD_INT 23
12790: PPUSH
12791: CALL_OW 109
// end ; 23 :
12795: GO 12824
12797: LD_INT 23
12799: DOUBLE
12800: EQUAL
12801: IFTRUE 12805
12803: GO 12823
12805: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
12806: LD_VAR 0 2
12810: PPUSH
12811: LD_INT 128
12813: PPUSH
12814: LD_INT 155
12816: PPUSH
12817: CALL_OW 111
12821: GO 12824
12823: POP
// end ;
12824: GO 12406
12826: POP
12827: POP
// until not RuScientists ;
12828: LD_EXP 27
12832: NOT
12833: IFFALSE 12389
// end ;
12835: PPOPN 3
12837: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
12838: LD_EXP 34
12842: PUSH
12843: LD_INT 0
12845: EQUAL
12846: IFFALSE 12854
12848: PUSH
12849: LD_EXP 27
12853: AND
12854: IFFALSE 12915
12856: PUSH
12857: LD_INT 22
12859: PUSH
12860: LD_INT 6
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 2
12869: PUSH
12870: LD_INT 95
12872: PUSH
12873: LD_INT 13
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 95
12882: PUSH
12883: LD_INT 14
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 95
12892: PUSH
12893: LD_INT 25
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: AND
12915: IFFALSE 13128
12917: GO 12919
12919: DISABLE
12920: LD_INT 0
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
// begin enable ;
12926: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12927: LD_ADDR_VAR 0 1
12931: PUSH
12932: LD_INT 22
12934: PUSH
12935: LD_INT 6
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 2
12944: PUSH
12945: LD_INT 95
12947: PUSH
12948: LD_INT 13
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 95
12957: PUSH
12958: LD_INT 14
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 95
12967: PUSH
12968: LD_INT 25
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 69
12989: PUSH
12990: FOR_IN
12991: IFFALSE 13126
// begin if i in RuScientists then
12993: LD_VAR 0 1
12997: PUSH
12998: LD_EXP 27
13002: IN
13003: IFFALSE 13032
// begin RuScientists = RuScientists diff i ;
13005: LD_ADDR_EXP 27
13009: PUSH
13010: LD_EXP 27
13014: PUSH
13015: LD_VAR 0 1
13019: DIFF
13020: ST_TO_ADDR
// RemoveUnit ( i ) ;
13021: LD_VAR 0 1
13025: PPUSH
13026: CALL_OW 64
// continue ;
13030: GO 12990
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
13032: LD_VAR 0 1
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 33
13049: PUSH
13050: LD_INT 1
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 69
13065: IN
13066: IFFALSE 13124
// begin if IsDrivenBy ( i ) in RuScientists then
13068: LD_VAR 0 1
13072: PPUSH
13073: CALL_OW 311
13077: PUSH
13078: LD_EXP 27
13082: IN
13083: IFFALSE 13101
// RuScientists = RuScientists diff i ;
13085: LD_ADDR_EXP 27
13089: PUSH
13090: LD_EXP 27
13094: PUSH
13095: LD_VAR 0 1
13099: DIFF
13100: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
13101: LD_VAR 0 1
13105: PPUSH
13106: CALL_OW 311
13110: PPUSH
13111: CALL_OW 64
// RemoveUnit ( i ) ;
13115: LD_VAR 0 1
13119: PPUSH
13120: CALL_OW 64
// end ; end ;
13124: GO 12990
13126: POP
13127: POP
// end ; end_of_file
13128: PPOPN 4
13130: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13131: LD_INT 0
13133: PPUSH
13134: PPUSH
// for i in charactersList do
13135: LD_ADDR_VAR 0 4
13139: PUSH
13140: LD_VAR 0 1
13144: PUSH
13145: FOR_IN
13146: IFFALSE 13164
// SaveCharacters ( i , ident ) ;
13148: LD_VAR 0 4
13152: PPUSH
13153: LD_VAR 0 2
13157: PPUSH
13158: CALL_OW 38
13162: GO 13145
13164: POP
13165: POP
// end ;
13166: LD_VAR 0 3
13170: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
13171: LD_INT 0
13173: PPUSH
13174: PPUSH
13175: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13176: LD_ADDR_VAR 0 1
13180: PUSH
13181: LD_VAR 0 1
13185: PUSH
13186: LD_EXP 1
13190: PUSH
13191: LD_EXP 7
13195: PUSH
13196: LD_EXP 3
13200: PUSH
13201: LD_EXP 4
13205: PUSH
13206: LD_EXP 5
13210: PUSH
13211: LD_EXP 2
13215: PUSH
13216: LD_EXP 12
13220: PUSH
13221: LD_EXP 13
13225: PUSH
13226: LD_EXP 9
13230: PUSH
13231: LD_EXP 11
13235: PUSH
13236: LD_EXP 6
13240: PUSH
13241: LD_EXP 8
13245: PUSH
13246: LD_EXP 10
13250: PUSH
13251: LD_EXP 15
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: DIFF
13272: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
13273: LD_ADDR_VAR 0 6
13277: PUSH
13278: LD_VAR 0 1
13282: PUSH
13283: LD_INT 1
13285: PPUSH
13286: LD_VAR 0 1
13290: PPUSH
13291: CALL_OW 12
13295: ARRAY
13296: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
13297: LD_VAR 0 6
13301: PPUSH
13302: CALL_OW 258
13306: PUSH
13307: LD_INT 1
13309: EQUAL
13310: IFFALSE 13328
// Say ( speaker , dialogMID ) else
13312: LD_VAR 0 6
13316: PPUSH
13317: LD_VAR 0 2
13321: PPUSH
13322: CALL_OW 88
13326: GO 13342
// Say ( speaker , dialogFID ) ;
13328: LD_VAR 0 6
13332: PPUSH
13333: LD_VAR 0 3
13337: PPUSH
13338: CALL_OW 88
// result := speaker ;
13342: LD_ADDR_VAR 0 4
13346: PUSH
13347: LD_VAR 0 6
13351: ST_TO_ADDR
// end ;
13352: LD_VAR 0 4
13356: RET
// export function PrepareDifficulty ; var tmp ; begin
13357: LD_INT 0
13359: PPUSH
13360: PPUSH
// if Difficulty = 1 then
13361: LD_OWVAR 67
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: IFFALSE 13389
// begin RuSolMinLevel = 6 ;
13371: LD_ADDR_EXP 29
13375: PUSH
13376: LD_INT 6
13378: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
13379: LD_ADDR_EXP 30
13383: PUSH
13384: LD_INT 8
13386: ST_TO_ADDR
// end else
13387: GO 13629
// if Difficulty = 2 then
13389: LD_OWVAR 67
13393: PUSH
13394: LD_INT 2
13396: EQUAL
13397: IFFALSE 13493
// begin RuSolMinLevel = 7 ;
13399: LD_ADDR_EXP 29
13403: PUSH
13404: LD_INT 7
13406: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
13407: LD_ADDR_EXP 30
13411: PUSH
13412: LD_INT 9
13414: ST_TO_ADDR
// uc_nation = 3 ;
13415: LD_ADDR_OWVAR 21
13419: PUSH
13420: LD_INT 3
13422: ST_TO_ADDR
// uc_side = 3 ;
13423: LD_ADDR_OWVAR 20
13427: PUSH
13428: LD_INT 3
13430: ST_TO_ADDR
// bc_level = 10 ;
13431: LD_ADDR_OWVAR 43
13435: PUSH
13436: LD_INT 10
13438: ST_TO_ADDR
// bc_type = b_turret ;
13439: LD_ADDR_OWVAR 42
13443: PUSH
13444: LD_INT 33
13446: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13447: LD_ADDR_VAR 0 2
13451: PUSH
13452: LD_INT 86
13454: PPUSH
13455: LD_INT 34
13457: PPUSH
13458: LD_INT 2
13460: PPUSH
13461: CALL_OW 47
13465: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13466: LD_VAR 0 2
13470: PPUSH
13471: LD_INT 49
13473: PPUSH
13474: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13478: LD_INT 64
13480: PPUSH
13481: LD_INT 3
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 322
// end else
13491: GO 13629
// begin RuSolMinLevel = 8 ;
13493: LD_ADDR_EXP 29
13497: PUSH
13498: LD_INT 8
13500: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13501: LD_ADDR_EXP 30
13505: PUSH
13506: LD_INT 10
13508: ST_TO_ADDR
// uc_nation = 3 ;
13509: LD_ADDR_OWVAR 21
13513: PUSH
13514: LD_INT 3
13516: ST_TO_ADDR
// uc_side = 3 ;
13517: LD_ADDR_OWVAR 20
13521: PUSH
13522: LD_INT 3
13524: ST_TO_ADDR
// bc_level = 10 ;
13525: LD_ADDR_OWVAR 43
13529: PUSH
13530: LD_INT 10
13532: ST_TO_ADDR
// bc_type = b_turret ;
13533: LD_ADDR_OWVAR 42
13537: PUSH
13538: LD_INT 33
13540: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13541: LD_ADDR_VAR 0 2
13545: PUSH
13546: LD_INT 86
13548: PPUSH
13549: LD_INT 34
13551: PPUSH
13552: LD_INT 2
13554: PPUSH
13555: CALL_OW 47
13559: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13560: LD_VAR 0 2
13564: PPUSH
13565: LD_INT 49
13567: PPUSH
13568: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13572: LD_ADDR_VAR 0 2
13576: PUSH
13577: LD_INT 93
13579: PPUSH
13580: LD_INT 31
13582: PPUSH
13583: LD_INT 2
13585: PPUSH
13586: CALL_OW 47
13590: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13591: LD_VAR 0 2
13595: PPUSH
13596: LD_INT 49
13598: PPUSH
13599: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13603: LD_INT 64
13605: PPUSH
13606: LD_INT 3
13608: PPUSH
13609: LD_INT 1
13611: PPUSH
13612: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13616: LD_INT 65
13618: PPUSH
13619: LD_INT 3
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: CALL_OW 322
// end ; end ;
13629: LD_VAR 0 1
13633: RET
// export function ShowQuery1 ; begin
13634: LD_INT 0
13636: PPUSH
// result := Query ( Q1 ) ;
13637: LD_ADDR_VAR 0 1
13641: PUSH
13642: LD_STRING Q1
13644: PPUSH
13645: CALL_OW 97
13649: ST_TO_ADDR
// end ;
13650: LD_VAR 0 1
13654: RET
// export function ShowQuery2 ; begin
13655: LD_INT 0
13657: PPUSH
// result := Query ( Q1a ) ;
13658: LD_ADDR_VAR 0 1
13662: PUSH
13663: LD_STRING Q1a
13665: PPUSH
13666: CALL_OW 97
13670: ST_TO_ADDR
// end ;
13671: LD_VAR 0 1
13675: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
13676: LD_INT 0
13678: PPUSH
13679: PPUSH
13680: PPUSH
13681: PPUSH
// for i = 1 to count do
13682: LD_ADDR_VAR 0 8
13686: PUSH
13687: DOUBLE
13688: LD_INT 1
13690: DEC
13691: ST_TO_ADDR
13692: LD_VAR 0 6
13696: PUSH
13697: FOR_TO
13698: IFFALSE 13779
// begin uc_side = side ;
13700: LD_ADDR_OWVAR 20
13704: PUSH
13705: LD_VAR 0 1
13709: ST_TO_ADDR
// uc_nation = nation ;
13710: LD_ADDR_OWVAR 21
13714: PUSH
13715: LD_VAR 0 2
13719: ST_TO_ADDR
// hc_gallery =  ;
13720: LD_ADDR_OWVAR 33
13724: PUSH
13725: LD_STRING 
13727: ST_TO_ADDR
// hc_name =  ;
13728: LD_ADDR_OWVAR 26
13732: PUSH
13733: LD_STRING 
13735: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13736: LD_INT 0
13738: PPUSH
13739: LD_VAR 0 5
13743: PPUSH
13744: LD_VAR 0 4
13748: PPUSH
13749: CALL_OW 380
// un = CreateHuman ;
13753: LD_ADDR_VAR 0 10
13757: PUSH
13758: CALL_OW 44
13762: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13763: LD_VAR 0 10
13767: PPUSH
13768: LD_VAR 0 3
13772: PPUSH
13773: CALL_OW 52
// end ;
13777: GO 13697
13779: POP
13780: POP
// end ;
13781: LD_VAR 0 7
13785: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
13786: LD_INT 0
13788: PPUSH
13789: PPUSH
13790: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13791: LD_ADDR_VAR 0 6
13795: PUSH
13796: LD_INT 48
13798: PUSH
13799: LD_INT 49
13801: PUSH
13802: LD_INT 50
13804: PUSH
13805: LD_INT 20
13807: PUSH
13808: LD_INT 1
13810: PUSH
13811: LD_INT 51
13813: PUSH
13814: LD_INT 52
13816: PUSH
13817: LD_INT 69
13819: PUSH
13820: LD_INT 39
13822: PUSH
13823: LD_INT 34
13825: PUSH
13826: LD_INT 40
13828: PUSH
13829: LD_INT 53
13831: PUSH
13832: LD_INT 71
13834: PUSH
13835: LD_INT 57
13837: PUSH
13838: LD_INT 58
13840: PUSH
13841: LD_INT 44
13843: PUSH
13844: LD_INT 32
13846: PUSH
13847: LD_INT 27
13849: PUSH
13850: LD_INT 23
13852: PUSH
13853: LD_INT 33
13855: PUSH
13856: LD_INT 59
13858: PUSH
13859: LD_INT 54
13861: PUSH
13862: LD_INT 55
13864: PUSH
13865: LD_INT 56
13867: PUSH
13868: LD_INT 63
13870: PUSH
13871: LD_INT 64
13873: PUSH
13874: LD_INT 65
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 31
13882: PUSH
13883: LD_INT 21
13885: PUSH
13886: LD_INT 22
13888: PUSH
13889: LD_INT 25
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: ST_TO_ADDR
// for i := 1 to list do
13926: LD_ADDR_VAR 0 5
13930: PUSH
13931: DOUBLE
13932: LD_INT 1
13934: DEC
13935: ST_TO_ADDR
13936: LD_VAR 0 6
13940: PUSH
13941: FOR_TO
13942: IFFALSE 14016
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13944: LD_VAR 0 6
13948: PUSH
13949: LD_VAR 0 5
13953: ARRAY
13954: PPUSH
13955: LD_VAR 0 1
13959: PPUSH
13960: CALL_OW 321
13964: PUSH
13965: LD_INT 1
13967: EQUAL
13968: IFFALSE 13992
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: LD_VAR 0 5
13980: ARRAY
13981: PPUSH
13982: LD_VAR 0 3
13986: PPUSH
13987: CALL_OW 482
13991: AND
13992: IFFALSE 14014
// AddComResearch ( lab , list [ i ] ) ;
13994: LD_VAR 0 2
13998: PPUSH
13999: LD_VAR 0 6
14003: PUSH
14004: LD_VAR 0 5
14008: ARRAY
14009: PPUSH
14010: CALL_OW 184
14014: GO 13941
14016: POP
14017: POP
// end ;
14018: LD_VAR 0 4
14022: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
14023: LD_INT 0
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
14031: LD_ADDR_VAR 0 8
14035: PUSH
14036: LD_VAR 0 2
14040: PPUSH
14041: CALL_OW 313
14045: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14046: LD_ADDR_VAR 0 9
14050: PUSH
14051: LD_VAR 0 3
14055: PPUSH
14056: LD_INT 22
14058: PUSH
14059: LD_VAR 0 1
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 25
14070: PUSH
14071: LD_INT 2
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 24
14080: PUSH
14081: LD_INT 750
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 3
14090: PUSH
14091: LD_INT 54
14093: PUSH
14094: EMPTY
14095: LIST
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 70
14111: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14112: LD_ADDR_VAR 0 6
14116: PUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: LD_INT 22
14124: PUSH
14125: LD_VAR 0 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 21
14136: PUSH
14137: LD_INT 3
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 3
14146: PUSH
14147: LD_INT 24
14149: PUSH
14150: LD_INT 1000
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: PPUSH
14169: CALL_OW 70
14173: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14174: LD_VAR 0 6
14178: NOT
14179: IFFALSE 14225
14181: PUSH
14182: LD_INT 22
14184: PUSH
14185: LD_VAR 0 1
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 25
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 24
14206: PUSH
14207: LD_INT 250
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: NOT
14224: AND
14225: IFFALSE 14229
// exit ;
14227: GO 14399
// if buildingsList and engineerOkInside then
14229: LD_VAR 0 6
14233: IFFALSE 14241
14235: PUSH
14236: LD_VAR 0 8
14240: AND
14241: IFFALSE 14252
// ComExitBuilding ( engineerOkInside ) ;
14243: LD_VAR 0 8
14247: PPUSH
14248: CALL_OW 122
// if buildingsList and engineerOkOutside then
14252: LD_VAR 0 6
14256: IFFALSE 14264
14258: PUSH
14259: LD_VAR 0 9
14263: AND
14264: IFFALSE 14284
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
14266: LD_VAR 0 9
14270: PPUSH
14271: LD_VAR 0 6
14275: PUSH
14276: LD_INT 1
14278: ARRAY
14279: PPUSH
14280: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
14284: LD_VAR 0 6
14288: PUSH
14289: LD_INT 0
14291: EQUAL
14292: IFFALSE 14304
14294: PUSH
14295: LD_VAR 0 4
14299: PUSH
14300: LD_INT 0
14302: EQUAL
14303: AND
14304: IFFALSE 14312
14306: PUSH
14307: LD_VAR 0 9
14311: AND
14312: IFFALSE 14328
// ComEnterUnit ( engineerOkOutside , depot ) ;
14314: LD_VAR 0 9
14318: PPUSH
14319: LD_VAR 0 2
14323: PPUSH
14324: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
14328: LD_VAR 0 9
14332: IFFALSE 14344
14334: PUSH
14335: LD_VAR 0 6
14339: PUSH
14340: LD_INT 0
14342: EQUAL
14343: AND
14344: IFFALSE 14352
14346: PUSH
14347: LD_VAR 0 4
14351: AND
14352: IFFALSE 14399
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14354: LD_VAR 0 9
14358: PPUSH
14359: LD_VAR 0 4
14363: PUSH
14364: LD_INT 1
14366: ARRAY
14367: PPUSH
14368: LD_VAR 0 4
14372: PUSH
14373: LD_INT 2
14375: ARRAY
14376: PPUSH
14377: LD_VAR 0 4
14381: PUSH
14382: LD_INT 3
14384: ARRAY
14385: PPUSH
14386: LD_VAR 0 4
14390: PUSH
14391: LD_INT 4
14393: ARRAY
14394: PPUSH
14395: CALL_OW 145
// end ;
14399: LD_VAR 0 5
14403: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14404: LD_INT 0
14406: PPUSH
14407: PPUSH
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14415: LD_ADDR_VAR 0 6
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_VAR 0 1
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 25
14434: PUSH
14435: LD_INT 4
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 24
14444: PUSH
14445: LD_INT 251
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: PPUSH
14457: CALL_OW 69
14461: PUSH
14462: LD_EXP 27
14466: PUSH
14467: EMPTY
14468: LIST
14469: DIFF
14470: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14471: LD_ADDR_VAR 0 7
14475: PUSH
14476: LD_VAR 0 3
14480: PPUSH
14481: LD_INT 22
14483: PUSH
14484: LD_VAR 0 1
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 56
14495: PUSH
14496: EMPTY
14497: LIST
14498: PUSH
14499: LD_INT 25
14501: PUSH
14502: LD_INT 4
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 50
14511: PUSH
14512: EMPTY
14513: LIST
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 70
14525: PUSH
14526: LD_EXP 27
14530: PUSH
14531: EMPTY
14532: LIST
14533: DIFF
14534: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14535: LD_ADDR_VAR 0 10
14539: PUSH
14540: LD_VAR 0 3
14544: PPUSH
14545: LD_INT 22
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 3
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 750
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: PPUSH
14589: CALL_OW 70
14593: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14594: LD_ADDR_VAR 0 11
14598: PUSH
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_INT 22
14606: PUSH
14607: LD_VAR 0 1
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 21
14618: PUSH
14619: LD_INT 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 3
14628: PUSH
14629: LD_INT 24
14631: PUSH
14632: LD_INT 1000
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 70
14652: ST_TO_ADDR
// if damageUnits and sciList then
14653: LD_VAR 0 10
14657: IFFALSE 14665
14659: PUSH
14660: LD_VAR 0 6
14664: AND
14665: IFFALSE 14681
// ComMoveToArea ( damageUnits , healArea ) ;
14667: LD_VAR 0 10
14671: PPUSH
14672: LD_VAR 0 2
14676: PPUSH
14677: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
14681: LD_VAR 0 11
14685: IFFALSE 14693
14687: PUSH
14688: LD_VAR 0 6
14692: AND
14693: IFFALSE 14705
14695: PUSH
14696: LD_VAR 0 7
14700: PUSH
14701: LD_INT 0
14703: EQUAL
14704: AND
14705: IFFALSE 14751
// for i in buildings do
14707: LD_ADDR_VAR 0 8
14711: PUSH
14712: LD_VAR 0 4
14716: PUSH
14717: FOR_IN
14718: IFFALSE 14749
// begin if UnitsInside ( i ) then
14720: LD_VAR 0 8
14724: PPUSH
14725: CALL_OW 313
14729: IFFALSE 14747
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
14731: LD_VAR 0 8
14735: PPUSH
14736: CALL_OW 313
14740: PPUSH
14741: CALL_OW 122
// break ;
14745: GO 14749
// end ; end ;
14747: GO 14717
14749: POP
14750: POP
// if unitsToHeal and sciListOutside then
14751: LD_VAR 0 11
14755: IFFALSE 14763
14757: PUSH
14758: LD_VAR 0 7
14762: AND
14763: IFFALSE 14783
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
14765: LD_VAR 0 7
14769: PPUSH
14770: LD_VAR 0 11
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PPUSH
14779: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
14783: LD_VAR 0 10
14787: PUSH
14788: LD_INT 0
14790: EQUAL
14791: IFFALSE 14803
14793: PUSH
14794: LD_VAR 0 11
14798: PUSH
14799: LD_INT 0
14801: EQUAL
14802: AND
14803: IFFALSE 14811
14805: PUSH
14806: LD_VAR 0 7
14810: AND
14811: IFFALSE 14879
// begin tmp := buildings ;
14813: LD_ADDR_VAR 0 12
14817: PUSH
14818: LD_VAR 0 4
14822: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
14823: LD_ADDR_VAR 0 13
14827: PUSH
14828: LD_INT 1
14830: PPUSH
14831: LD_VAR 0 12
14835: PPUSH
14836: CALL_OW 12
14840: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14841: LD_VAR 0 7
14845: PPUSH
14846: LD_INT 3
14848: PUSH
14849: LD_INT 60
14851: PUSH
14852: EMPTY
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 72
14863: PPUSH
14864: LD_VAR 0 12
14868: PUSH
14869: LD_VAR 0 13
14873: ARRAY
14874: PPUSH
14875: CALL_OW 120
// end ; end ;
14879: LD_VAR 0 5
14883: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
14890: PPUSH
14891: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14892: LD_ADDR_VAR 0 7
14896: PUSH
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_INT 22
14904: PUSH
14905: LD_VAR 0 1
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 2
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 34
14926: PUSH
14927: LD_INT 52
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL_OW 70
14943: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14944: LD_ADDR_VAR 0 8
14948: PUSH
14949: LD_VAR 0 2
14953: PPUSH
14954: LD_INT 22
14956: PUSH
14957: LD_VAR 0 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 21
14968: PUSH
14969: LD_INT 3
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 3
14978: PUSH
14979: LD_INT 24
14981: PUSH
14982: LD_INT 1000
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: PPUSH
15001: CALL_OW 70
15005: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15006: LD_VAR 0 8
15010: PUSH
15011: LD_INT 0
15013: GREATER
15014: IFFALSE 15041
15016: PUSH
15017: LD_VAR 0 7
15021: PPUSH
15022: LD_INT 24
15024: PUSH
15025: LD_INT 750
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 72
15036: PUSH
15037: LD_INT 0
15039: GREATER
15040: AND
15041: IFFALSE 15061
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15043: LD_VAR 0 7
15047: PPUSH
15048: LD_VAR 0 8
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PPUSH
15057: CALL_OW 130
// end ;
15061: LD_VAR 0 3
15065: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15066: LD_INT 0
15068: PPUSH
15069: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15070: LD_INT 22
15072: PUSH
15073: LD_VAR 0 1
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 21
15084: PUSH
15085: LD_INT 2
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PPUSH
15096: CALL_OW 69
15100: PUSH
15101: LD_INT 18
15103: PPUSH
15104: LD_INT 22
15106: PUSH
15107: LD_VAR 0 1
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 21
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PPUSH
15130: CALL_OW 70
15134: PUSH
15135: LD_VAR 0 3
15139: LESSEQUAL
15140: DIFF
15141: IFFALSE 15208
// for i := 1 to vehCount do
15143: LD_ADDR_VAR 0 9
15147: PUSH
15148: DOUBLE
15149: LD_INT 1
15151: DEC
15152: ST_TO_ADDR
15153: LD_VAR 0 3
15157: PUSH
15158: FOR_TO
15159: IFFALSE 15206
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15161: LD_VAR 0 2
15165: PPUSH
15166: LD_VAR 0 7
15170: PPUSH
15171: LD_VAR 0 5
15175: PPUSH
15176: LD_VAR 0 6
15180: PPUSH
15181: LD_VAR 0 4
15185: PUSH
15186: LD_INT 1
15188: PPUSH
15189: LD_VAR 0 4
15193: PPUSH
15194: CALL_OW 12
15198: ARRAY
15199: PPUSH
15200: CALL_OW 185
15204: GO 15158
15206: POP
15207: POP
// end ;
15208: LD_VAR 0 8
15212: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15213: LD_INT 0
15215: PPUSH
15216: PPUSH
15217: PPUSH
15218: PPUSH
15219: PPUSH
15220: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15221: LD_ADDR_VAR 0 6
15225: PUSH
15226: LD_INT 22
15228: PUSH
15229: LD_VAR 0 1
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 9
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PPUSH
15252: CALL_OW 69
15256: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15257: LD_ADDR_VAR 0 7
15261: PUSH
15262: LD_INT 81
15264: PUSH
15265: LD_VAR 0 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 3
15276: PUSH
15277: LD_INT 21
15279: PUSH
15280: LD_INT 3
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PPUSH
15295: CALL_OW 69
15299: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15300: LD_ADDR_VAR 0 4
15304: PUSH
15305: LD_INT 1
15307: PPUSH
15308: LD_INT 3
15310: PPUSH
15311: CALL_OW 12
15315: ST_TO_ADDR
// for i := 1 to list do
15316: LD_ADDR_VAR 0 5
15320: PUSH
15321: DOUBLE
15322: LD_INT 1
15324: DEC
15325: ST_TO_ADDR
15326: LD_VAR 0 6
15330: PUSH
15331: FOR_TO
15332: IFFALSE 15534
// for ta in filter do
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_VAR 0 7
15343: PUSH
15344: FOR_IN
15345: IFFALSE 15530
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15347: LD_VAR 0 6
15351: PUSH
15352: LD_VAR 0 5
15356: ARRAY
15357: PPUSH
15358: LD_VAR 0 3
15362: PPUSH
15363: CALL_OW 296
15367: PUSH
15368: LD_INT 15
15370: LESSEQUAL
15371: IFFALSE 15528
// begin case c of 1 :
15373: LD_VAR 0 4
15377: PUSH
15378: LD_INT 1
15380: DOUBLE
15381: EQUAL
15382: IFTRUE 15386
15384: GO 15424
15386: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15387: LD_VAR 0 6
15391: PUSH
15392: LD_VAR 0 5
15396: ARRAY
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: CALL_OW 250
15407: PPUSH
15408: LD_VAR 0 3
15412: PPUSH
15413: CALL_OW 251
15417: PPUSH
15418: CALL_OW 154
15422: GO 15528
15424: LD_INT 2
15426: DOUBLE
15427: EQUAL
15428: IFTRUE 15432
15430: GO 15496
15432: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15433: LD_VAR 0 6
15437: PUSH
15438: LD_VAR 0 5
15442: ARRAY
15443: PPUSH
15444: LD_VAR 0 3
15448: PPUSH
15449: CALL_OW 250
15453: PUSH
15454: LD_INT 1
15456: NEG
15457: PPUSH
15458: LD_INT 1
15460: PPUSH
15461: CALL_OW 12
15465: PLUS
15466: PPUSH
15467: LD_VAR 0 3
15471: PPUSH
15472: CALL_OW 251
15476: PUSH
15477: LD_INT 1
15479: NEG
15480: PPUSH
15481: LD_INT 1
15483: PPUSH
15484: CALL_OW 12
15488: PLUS
15489: PPUSH
15490: CALL_OW 153
15494: GO 15528
15496: LD_INT 3
15498: DOUBLE
15499: EQUAL
15500: IFTRUE 15504
15502: GO 15527
15504: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15505: LD_VAR 0 6
15509: PUSH
15510: LD_VAR 0 5
15514: ARRAY
15515: PPUSH
15516: LD_VAR 0 3
15520: PPUSH
15521: CALL_OW 115
15525: GO 15528
15527: POP
// end ; end ;
15528: GO 15344
15530: POP
15531: POP
15532: GO 15331
15534: POP
15535: POP
// end ;
15536: LD_VAR 0 2
15540: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15541: LD_INT 0
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
// r := 100 ;
15547: LD_ADDR_VAR 0 5
15551: PUSH
15552: LD_INT 100
15554: ST_TO_ADDR
// x := 0 ;
15555: LD_ADDR_VAR 0 6
15559: PUSH
15560: LD_INT 0
15562: ST_TO_ADDR
// while ( x < n ) do
15563: LD_VAR 0 6
15567: PUSH
15568: LD_VAR 0 2
15572: LESS
15573: IFFALSE 15836
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15575: LD_ADDR_VAR 0 4
15579: PUSH
15580: DOUBLE
15581: LD_INT 1
15583: DEC
15584: ST_TO_ADDR
15585: LD_VAR 0 1
15589: PPUSH
15590: LD_INT 0
15592: PPUSH
15593: CALL_OW 517
15597: PUSH
15598: LD_INT 1
15600: ARRAY
15601: PUSH
15602: FOR_TO
15603: IFFALSE 15832
// begin if r > 50 then
15605: LD_VAR 0 5
15609: PUSH
15610: LD_INT 50
15612: GREATER
15613: IFFALSE 15816
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15615: LD_VAR 0 1
15619: PPUSH
15620: LD_INT 0
15622: PPUSH
15623: CALL_OW 517
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: PUSH
15632: LD_VAR 0 4
15636: ARRAY
15637: PPUSH
15638: LD_VAR 0 1
15642: PPUSH
15643: LD_INT 0
15645: PPUSH
15646: CALL_OW 517
15650: PUSH
15651: LD_INT 2
15653: ARRAY
15654: PUSH
15655: LD_VAR 0 4
15659: ARRAY
15660: PPUSH
15661: CALL_OW 458
15665: NOT
15666: IFFALSE 15814
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15668: LD_VAR 0 1
15672: PPUSH
15673: LD_INT 0
15675: PPUSH
15676: CALL_OW 517
15680: PUSH
15681: LD_INT 1
15683: ARRAY
15684: PUSH
15685: LD_VAR 0 4
15689: ARRAY
15690: PPUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: LD_INT 0
15698: PPUSH
15699: CALL_OW 517
15703: PUSH
15704: LD_INT 2
15706: ARRAY
15707: PUSH
15708: LD_VAR 0 4
15712: ARRAY
15713: PPUSH
15714: LD_INT 8
15716: PPUSH
15717: LD_INT 0
15719: PPUSH
15720: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15724: LD_ADDR_EXP 37
15728: PUSH
15729: LD_EXP 37
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: LD_VAR 0 1
15741: PPUSH
15742: LD_INT 0
15744: PPUSH
15745: CALL_OW 517
15749: PUSH
15750: LD_INT 1
15752: ARRAY
15753: PUSH
15754: LD_VAR 0 4
15758: ARRAY
15759: PUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: LD_INT 0
15767: PPUSH
15768: CALL_OW 517
15772: PUSH
15773: LD_INT 2
15775: ARRAY
15776: PUSH
15777: LD_VAR 0 4
15781: ARRAY
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PPUSH
15787: CALL_OW 2
15791: ST_TO_ADDR
// r := 0 ;
15792: LD_ADDR_VAR 0 5
15796: PUSH
15797: LD_INT 0
15799: ST_TO_ADDR
// x := x + 1 ;
15800: LD_ADDR_VAR 0 6
15804: PUSH
15805: LD_VAR 0 6
15809: PUSH
15810: LD_INT 1
15812: PLUS
15813: ST_TO_ADDR
// end end else
15814: GO 15830
// r := r + 35 ;
15816: LD_ADDR_VAR 0 5
15820: PUSH
15821: LD_VAR 0 5
15825: PUSH
15826: LD_INT 35
15828: PLUS
15829: ST_TO_ADDR
// end end ;
15830: GO 15602
15832: POP
15833: POP
15834: GO 15563
15836: LD_VAR 0 3
15840: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
// tmp := [ ] ;
15848: LD_ADDR_VAR 0 6
15852: PUSH
15853: EMPTY
15854: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
15855: LD_ADDR_VAR 0 7
15859: PUSH
15860: LD_INT 22
15862: PUSH
15863: LD_VAR 0 1
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 30
15874: PUSH
15875: LD_INT 32
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: ST_TO_ADDR
// if bunkers then
15891: LD_VAR 0 7
15895: IFFALSE 15965
// for i in bunkers do
15897: LD_ADDR_VAR 0 4
15901: PUSH
15902: LD_VAR 0 7
15906: PUSH
15907: FOR_IN
15908: IFFALSE 15963
// for j in UnitsInside ( i ) do
15910: LD_ADDR_VAR 0 5
15914: PUSH
15915: LD_VAR 0 4
15919: PPUSH
15920: CALL_OW 313
15924: PUSH
15925: FOR_IN
15926: IFFALSE 15959
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15928: LD_ADDR_VAR 0 6
15932: PUSH
15933: LD_VAR 0 6
15937: PPUSH
15938: LD_VAR 0 6
15942: PUSH
15943: LD_INT 1
15945: PLUS
15946: PPUSH
15947: LD_VAR 0 5
15951: PPUSH
15952: CALL_OW 1
15956: ST_TO_ADDR
15957: GO 15925
15959: POP
15960: POP
15961: GO 15907
15963: POP
15964: POP
// if tmp then
15965: LD_VAR 0 6
15969: IFFALSE 16009
// begin ComExitBuilding ( tmp ) ;
15971: LD_VAR 0 6
15975: PPUSH
15976: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15980: LD_VAR 0 6
15984: PPUSH
15985: LD_VAR 0 2
15989: PPUSH
15990: CALL_OW 250
15994: PPUSH
15995: LD_VAR 0 2
15999: PPUSH
16000: CALL_OW 251
16004: PPUSH
16005: CALL_OW 174
// end ; end ;
16009: LD_VAR 0 3
16013: RET
// export function CreateNature ; var i , un ; begin
16014: LD_INT 0
16016: PPUSH
16017: PPUSH
16018: PPUSH
// uc_side := 0 ;
16019: LD_ADDR_OWVAR 20
16023: PUSH
16024: LD_INT 0
16026: ST_TO_ADDR
// uc_nation := 0 ;
16027: LD_ADDR_OWVAR 21
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// InitHc ;
16035: CALL_OW 19
// hc_class := class_fish ;
16039: LD_ADDR_OWVAR 28
16043: PUSH
16044: LD_INT 20
16046: ST_TO_ADDR
// for i := 1 to 6 do
16047: LD_ADDR_VAR 0 2
16051: PUSH
16052: DOUBLE
16053: LD_INT 1
16055: DEC
16056: ST_TO_ADDR
16057: LD_INT 6
16059: PUSH
16060: FOR_TO
16061: IFFALSE 16080
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
16063: CALL_OW 44
16067: PPUSH
16068: LD_INT 22
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: CALL_OW 49
16078: GO 16060
16080: POP
16081: POP
// for i := 1 to Difficulty + 2 do
16082: LD_ADDR_VAR 0 2
16086: PUSH
16087: DOUBLE
16088: LD_INT 1
16090: DEC
16091: ST_TO_ADDR
16092: LD_OWVAR 67
16096: PUSH
16097: LD_INT 2
16099: PLUS
16100: PUSH
16101: FOR_TO
16102: IFFALSE 16211
// begin hc_sex := sex_male ;
16104: LD_ADDR_OWVAR 27
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// uc_side := 0 ;
16112: LD_ADDR_OWVAR 20
16116: PUSH
16117: LD_INT 0
16119: ST_TO_ADDR
// uc_nation := nation_nature ;
16120: LD_ADDR_OWVAR 21
16124: PUSH
16125: LD_INT 0
16127: ST_TO_ADDR
// hc_class := class_tiger ;
16128: LD_ADDR_OWVAR 28
16132: PUSH
16133: LD_INT 14
16135: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16136: LD_ADDR_OWVAR 31
16140: PUSH
16141: LD_EXP 30
16145: PUSH
16146: LD_INT 0
16148: PUSH
16149: LD_INT 0
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
16161: LD_ADDR_OWVAR 35
16165: PUSH
16166: LD_INT 5
16168: NEG
16169: PPUSH
16170: LD_INT 5
16172: PPUSH
16173: CALL_OW 12
16177: PUSH
16178: LD_OWVAR 67
16182: MUL
16183: ST_TO_ADDR
// un := CreateHuman ;
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: CALL_OW 44
16193: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16194: LD_VAR 0 3
16198: PPUSH
16199: LD_INT 23
16201: PPUSH
16202: LD_INT 0
16204: PPUSH
16205: CALL_OW 49
// end ;
16209: GO 16101
16211: POP
16212: POP
// for i := 1 to rand ( 3 , 4 ) do
16213: LD_ADDR_VAR 0 2
16217: PUSH
16218: DOUBLE
16219: LD_INT 1
16221: DEC
16222: ST_TO_ADDR
16223: LD_INT 3
16225: PPUSH
16226: LD_INT 4
16228: PPUSH
16229: CALL_OW 12
16233: PUSH
16234: FOR_TO
16235: IFFALSE 16327
// begin hc_sex := sex_male ;
16237: LD_ADDR_OWVAR 27
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// uc_side := 0 ;
16245: LD_ADDR_OWVAR 20
16249: PUSH
16250: LD_INT 0
16252: ST_TO_ADDR
// uc_nation := nation_nature ;
16253: LD_ADDR_OWVAR 21
16257: PUSH
16258: LD_INT 0
16260: ST_TO_ADDR
// hc_class := 18 ;
16261: LD_ADDR_OWVAR 28
16265: PUSH
16266: LD_INT 18
16268: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
16269: LD_ADDR_OWVAR 31
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 0
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: LD_INT 0
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: ST_TO_ADDR
// hc_agressivity := 0 ;
16292: LD_ADDR_OWVAR 35
16296: PUSH
16297: LD_INT 0
16299: ST_TO_ADDR
// un := CreateHuman ;
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: CALL_OW 44
16309: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16310: LD_VAR 0 3
16314: PPUSH
16315: LD_INT 23
16317: PPUSH
16318: LD_INT 0
16320: PPUSH
16321: CALL_OW 49
// end ;
16325: GO 16234
16327: POP
16328: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
16329: LD_ADDR_VAR 0 2
16333: PUSH
16334: DOUBLE
16335: LD_INT 1
16337: DEC
16338: ST_TO_ADDR
16339: LD_INT 4
16341: PUSH
16342: LD_INT 3
16344: PUSH
16345: LD_INT 3
16347: PUSH
16348: LD_INT 3
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: PUSH
16357: LD_OWVAR 67
16361: ARRAY
16362: PUSH
16363: FOR_TO
16364: IFFALSE 16473
// begin hc_sex := sex_male ;
16366: LD_ADDR_OWVAR 27
16370: PUSH
16371: LD_INT 1
16373: ST_TO_ADDR
// uc_side := 0 ;
16374: LD_ADDR_OWVAR 20
16378: PUSH
16379: LD_INT 0
16381: ST_TO_ADDR
// uc_nation := nation_nature ;
16382: LD_ADDR_OWVAR 21
16386: PUSH
16387: LD_INT 0
16389: ST_TO_ADDR
// hc_class := class_apeman ;
16390: LD_ADDR_OWVAR 28
16394: PUSH
16395: LD_INT 12
16397: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
16398: LD_ADDR_OWVAR 31
16402: PUSH
16403: LD_INT 0
16405: PPUSH
16406: LD_INT 2
16408: PPUSH
16409: CALL_OW 12
16413: PUSH
16414: LD_INT 0
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: LD_INT 0
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
16429: LD_ADDR_OWVAR 35
16433: PUSH
16434: LD_INT 10
16436: NEG
16437: PPUSH
16438: LD_INT 10
16440: PPUSH
16441: CALL_OW 12
16445: ST_TO_ADDR
// un := CreateHuman ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: CALL_OW 44
16455: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 26
16463: PPUSH
16464: LD_INT 0
16466: PPUSH
16467: CALL_OW 49
// end ;
16471: GO 16363
16473: POP
16474: POP
// end ; end_of_file
16475: LD_VAR 0 1
16479: RET
// on UnitDestroyed ( unit ) do var i ;
16480: LD_INT 0
16482: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
16483: LD_VAR 0 1
16487: PPUSH
16488: CALL 36132 0 1
// if unit = JMM then
16492: LD_VAR 0 1
16496: PUSH
16497: LD_EXP 1
16501: EQUAL
16502: IFFALSE 16511
// YouLost ( JMM ) ;
16504: LD_STRING JMM
16506: PPUSH
16507: CALL_OW 104
// if unit in russianTanks then
16511: LD_VAR 0 1
16515: PUSH
16516: LD_EXP 32
16520: IN
16521: IFFALSE 16539
// russianTanks := russianTanks diff unit ;
16523: LD_ADDR_EXP 32
16527: PUSH
16528: LD_EXP 32
16532: PUSH
16533: LD_VAR 0 1
16537: DIFF
16538: ST_TO_ADDR
// if unit in russianTimeLapsers then
16539: LD_VAR 0 1
16543: PUSH
16544: LD_EXP 33
16548: IN
16549: IFFALSE 16567
// russianTimeLapsers := russianTimeLapsers diff unit ;
16551: LD_ADDR_EXP 33
16555: PUSH
16556: LD_EXP 33
16560: PUSH
16561: LD_VAR 0 1
16565: DIFF
16566: ST_TO_ADDR
// if unit in RuScientists then
16567: LD_VAR 0 1
16571: PUSH
16572: LD_EXP 27
16576: IN
16577: IFFALSE 16609
// begin RuScientists := RuScientists diff unit ;
16579: LD_ADDR_EXP 27
16583: PUSH
16584: LD_EXP 27
16588: PUSH
16589: LD_VAR 0 1
16593: DIFF
16594: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
16595: LD_ADDR_EXP 28
16599: PUSH
16600: LD_EXP 28
16604: PUSH
16605: LD_INT 1
16607: PLUS
16608: ST_TO_ADDR
// end ; end ;
16609: PPOPN 2
16611: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if killerUnit and GetWeapon ( killerUnit ) = us_laser then
16612: LD_VAR 0 3
16616: IFFALSE 16633
16618: PUSH
16619: LD_VAR 0 3
16623: PPUSH
16624: CALL_OW 264
16628: PUSH
16629: LD_INT 9
16631: EQUAL
16632: AND
16633: IFFALSE 16649
// laserCounterDestroy := laserCounterDestroy + 1 ;
16635: LD_ADDR_EXP 43
16639: PUSH
16640: LD_EXP 43
16644: PUSH
16645: LD_INT 1
16647: PLUS
16648: ST_TO_ADDR
// end ;
16649: PPOPN 3
16651: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 22
16659: PUSH
16660: LD_INT 6
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL_OW 69
16671: IN
16672: IFFALSE 16727
// begin if GetType ( human ) = unit_vehicle then
16674: LD_VAR 0 2
16678: PPUSH
16679: CALL_OW 247
16683: PUSH
16684: LD_INT 2
16686: EQUAL
16687: IFFALSE 16704
// human := IsDrivenBy ( human ) ;
16689: LD_ADDR_VAR 0 2
16693: PUSH
16694: LD_VAR 0 2
16698: PPUSH
16699: CALL_OW 311
16703: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
16704: LD_VAR 0 2
16708: PPUSH
16709: LD_VAR 0 2
16713: PPUSH
16714: CALL_OW 110
16718: PUSH
16719: LD_INT 10
16721: PLUS
16722: PPUSH
16723: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
16727: LD_VAR 0 2
16731: PPUSH
16732: CALL_OW 255
16736: PUSH
16737: LD_INT 1
16739: EQUAL
16740: IFFALSE 16752
16742: PUSH
16743: LD_EXP 40
16747: PUSH
16748: LD_INT 0
16750: EQUAL
16751: AND
16752: IFFALSE 16864
// begin eventVar1 = 1 ;
16754: LD_ADDR_EXP 40
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// teleportExplored = 1 ;
16762: LD_ADDR_EXP 26
16766: PUSH
16767: LD_INT 1
16769: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16770: LD_STRING M2a
16772: PPUSH
16773: CALL_OW 337
// wait ( 0 0$2 ) ;
16777: LD_INT 70
16779: PPUSH
16780: CALL_OW 67
// DialogueOn ;
16784: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16788: LD_INT 22
16790: PUSH
16791: LD_INT 1
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 21
16800: PUSH
16801: LD_INT 1
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 69
16816: PPUSH
16817: LD_STRING DT3a-Sol1-1
16819: PPUSH
16820: LD_STRING DT3a-FSol1-1
16822: PPUSH
16823: CALL 13171 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16827: LD_EXP 1
16831: PPUSH
16832: LD_STRING DT3a-JMM-1
16834: PPUSH
16835: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16839: LD_VAR 0 2
16843: PPUSH
16844: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16848: LD_EXP 1
16852: PPUSH
16853: LD_STRING DT3a-JMM-1a
16855: PPUSH
16856: CALL_OW 88
// DialogueOff ;
16860: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16864: LD_VAR 0 1
16868: PUSH
16869: LD_INT 10
16871: EQUAL
16872: IFFALSE 16889
16874: PUSH
16875: LD_VAR 0 2
16879: PPUSH
16880: CALL_OW 247
16884: PUSH
16885: LD_INT 2
16887: EQUAL
16888: AND
16889: IFFALSE 16906
16891: PUSH
16892: LD_VAR 0 2
16896: PPUSH
16897: CALL_OW 255
16901: PUSH
16902: LD_INT 3
16904: EQUAL
16905: AND
16906: IFFALSE 16972
// begin if vehicleTeleported = 0 then
16908: LD_EXP 21
16912: PUSH
16913: LD_INT 0
16915: EQUAL
16916: IFFALSE 16933
// begin wait ( 0 0$03 ) ;
16918: LD_INT 105
16920: PPUSH
16921: CALL_OW 67
// vehicleTeleported := 1 ;
16925: LD_ADDR_EXP 21
16929: PUSH
16930: LD_INT 1
16932: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16933: LD_EXP 21
16937: PUSH
16938: LD_INT 2
16940: EQUAL
16941: IFFALSE 16958
// begin wait ( 0 0$03 ) ;
16943: LD_INT 105
16945: PPUSH
16946: CALL_OW 67
// vehicleTeleported := 3 ;
16950: LD_ADDR_EXP 21
16954: PUSH
16955: LD_INT 3
16957: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16958: LD_ADDR_EXP 22
16962: PUSH
16963: LD_EXP 22
16967: PUSH
16968: LD_INT 1
16970: PLUS
16971: ST_TO_ADDR
// end ; end ;
16972: PPOPN 2
16974: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16975: LD_VAR 0 1
16979: PPUSH
16980: LD_VAR 0 2
16984: PPUSH
16985: CALL 36190 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 264
16998: PUSH
16999: LD_INT 7
17001: EQUAL
17002: IFFALSE 17012
// rocketBuilded := true ;
17004: LD_ADDR_EXP 44
17008: PUSH
17009: LD_INT 1
17011: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 255
17021: PUSH
17022: LD_INT 3
17024: NONEQUAL
17025: IFFALSE 17029
// exit ;
17027: GO 17146
// if factory in [ ru_fact , rufab2 ] then
17029: LD_VAR 0 2
17033: PUSH
17034: LD_INT 21
17036: PUSH
17037: LD_INT 112
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: IN
17044: IFFALSE 17146
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 264
17055: PUSH
17056: LD_INT 49
17058: EQUAL
17059: IFFALSE 17095
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
17061: LD_ADDR_EXP 33
17065: PUSH
17066: LD_EXP 33
17070: PPUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: CALL 80806 0 2
17080: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17081: LD_VAR 0 1
17085: PPUSH
17086: LD_INT 137
17088: PPUSH
17089: CALL_OW 120
// end else
17093: GO 17146
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 264
17104: PUSH
17105: LD_INT 51
17107: PUSH
17108: LD_INT 89
17110: PUSH
17111: LD_INT 52
17113: PUSH
17114: LD_INT 53
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: IN
17123: NOT
17124: IFFALSE 17146
// begin russianTanks := Join ( russianTanks , vehicle ) ;
17126: LD_ADDR_EXP 32
17130: PUSH
17131: LD_EXP 32
17135: PPUSH
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL 80806 0 2
17145: ST_TO_ADDR
// end ; end ; end ;
17146: PPOPN 2
17148: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17149: LD_INT 0
17151: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17152: LD_VAR 0 2
17156: PPUSH
17157: CALL_OW 255
17161: PUSH
17162: LD_INT 3
17164: EQUAL
17165: IFFALSE 17182
17167: PUSH
17168: LD_VAR 0 2
17172: PPUSH
17173: CALL_OW 257
17177: PUSH
17178: LD_INT 3
17180: EQUAL
17181: AND
17182: IFFALSE 17197
17184: PUSH
17185: LD_INT 21
17187: PPUSH
17188: CALL_OW 255
17192: PUSH
17193: LD_INT 3
17195: EQUAL
17196: AND
17197: IFFALSE 17208
17199: PUSH
17200: LD_INT 21
17202: PPUSH
17203: CALL_OW 302
17207: AND
17208: IFFALSE 17222
// ComEnterUnit ( human , ru_fact ) ;
17210: LD_VAR 0 2
17214: PPUSH
17215: LD_INT 21
17217: PPUSH
17218: CALL_OW 120
// end ;
17222: PPOPN 3
17224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL 36174 0 1
// end ;
17234: PPOPN 1
17236: END
// on SailEvent ( event ) do begin if event = 1 then
17237: LD_VAR 0 1
17241: PUSH
17242: LD_INT 1
17244: EQUAL
17245: IFFALSE 17251
// PrepareRussian ;
17247: CALL 3605 0 0
// end ; end_of_file
17251: PPOPN 1
17253: END
// every 0 0$1 trigger ruAI = 1 do
17254: LD_EXP 34
17258: PUSH
17259: LD_INT 1
17261: EQUAL
17262: IFFALSE 17374
17264: GO 17266
17266: DISABLE
// begin enable ;
17267: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17268: LD_INT 3
17270: PPUSH
17271: LD_INT 6
17273: PPUSH
17274: LD_INT 9
17276: PPUSH
17277: LD_EXP 31
17281: PPUSH
17282: CALL 14023 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17286: LD_INT 3
17288: PPUSH
17289: LD_INT 4
17291: PPUSH
17292: LD_INT 10
17294: PPUSH
17295: LD_EXP 31
17299: PPUSH
17300: CALL 14023 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17304: LD_INT 3
17306: PPUSH
17307: LD_INT 9
17309: PPUSH
17310: CALL 14884 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17314: LD_INT 3
17316: PPUSH
17317: LD_INT 10
17319: PPUSH
17320: CALL 14884 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17324: LD_INT 3
17326: PPUSH
17327: LD_INT 16
17329: PPUSH
17330: LD_INT 9
17332: PPUSH
17333: LD_INT 91
17335: PPUSH
17336: CALL 14404 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17340: LD_INT 3
17342: PPUSH
17343: LD_INT 17
17345: PPUSH
17346: LD_INT 10
17348: PPUSH
17349: LD_INT 47
17351: PUSH
17352: LD_INT 129
17354: PUSH
17355: LD_INT 135
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: PPUSH
17363: CALL 14404 0 4
// IntBazooka ( 3 ) ;
17367: LD_INT 3
17369: PPUSH
17370: CALL 15213 0 1
// end ;
17374: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
17375: LD_EXP 32
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: LD_INT 4
17385: PUSH
17386: LD_INT 5
17388: PUSH
17389: LD_INT 6
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_OWVAR 67
17402: ARRAY
17403: GREATEREQUAL
17404: IFFALSE 17778
17406: GO 17408
17408: DISABLE
17409: LD_INT 0
17411: PPUSH
17412: PPUSH
17413: PPUSH
17414: PPUSH
// begin enable ;
17415: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17416: LD_ADDR_VAR 0 2
17420: PUSH
17421: LD_EXP 32
17425: PUSH
17426: LD_EXP 33
17430: UNION
17431: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17432: LD_ADDR_EXP 32
17436: PUSH
17437: LD_EXP 32
17441: PUSH
17442: LD_VAR 0 2
17446: DIFF
17447: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17448: LD_ADDR_EXP 33
17452: PUSH
17453: LD_EXP 33
17457: PUSH
17458: LD_VAR 0 2
17462: DIFF
17463: ST_TO_ADDR
// if vehicleTeleported >= 4 then
17464: LD_EXP 21
17468: PUSH
17469: LD_INT 4
17471: GREATEREQUAL
17472: IFFALSE 17490
// attackTactic := rand ( 1 , 2 ) ;
17474: LD_ADDR_EXP 36
17478: PUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_INT 2
17484: PPUSH
17485: CALL_OW 12
17489: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
17490: LD_ADDR_VAR 0 4
17494: PUSH
17495: LD_INT 93
17497: PUSH
17498: LD_INT 77
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 107
17507: PUSH
17508: LD_INT 99
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 123
17517: PUSH
17518: LD_INT 112
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 140
17527: PUSH
17528: LD_INT 112
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: ST_TO_ADDR
// if attackTactic < 2 then
17541: LD_EXP 36
17545: PUSH
17546: LD_INT 2
17548: LESS
17549: IFFALSE 17580
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
17551: LD_ADDR_VAR 0 4
17555: PUSH
17556: LD_INT 131
17558: PUSH
17559: LD_INT 136
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 140
17568: PUSH
17569: LD_INT 112
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17580: LD_INT 10
17582: PPUSH
17583: CALL_OW 302
17587: IFFALSE 17705
// begin for i in tmp do
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_VAR 0 2
17598: PUSH
17599: FOR_IN
17600: IFFALSE 17643
// if attackTactic < 2 then
17602: LD_EXP 36
17606: PUSH
17607: LD_INT 2
17609: LESS
17610: IFFALSE 17626
// ComEnterUnit ( i , ruteleprt ) else
17612: LD_VAR 0 1
17616: PPUSH
17617: LD_INT 10
17619: PPUSH
17620: CALL_OW 120
17624: GO 17641
// ComMoveXY ( i , 88 , 69 ) ;
17626: LD_VAR 0 1
17630: PPUSH
17631: LD_INT 88
17633: PPUSH
17634: LD_INT 69
17636: PPUSH
17637: CALL_OW 111
17641: GO 17599
17643: POP
17644: POP
// p := 0 ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_INT 0
17652: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
17653: LD_INT 70
17655: PPUSH
17656: CALL_OW 67
// p := Inc ( p ) ;
17660: LD_ADDR_VAR 0 3
17664: PUSH
17665: LD_VAR 0 3
17669: PPUSH
17670: CALL 82179 0 1
17674: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
17675: LD_VAR 0 2
17679: PPUSH
17680: LD_INT 60
17682: PUSH
17683: EMPTY
17684: LIST
17685: PPUSH
17686: CALL_OW 72
17690: NOT
17691: IFTRUE 17703
17693: PUSH
17694: LD_VAR 0 3
17698: PUSH
17699: LD_INT 30
17701: GREATER
17702: OR
17703: IFFALSE 17653
// end ; repeat wait ( 0 0$1 ) ;
17705: LD_INT 35
17707: PPUSH
17708: CALL_OW 67
// for i in tmp do
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: LD_VAR 0 2
17721: PUSH
17722: FOR_IN
17723: IFFALSE 17755
// if not IsOk ( i ) then
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 302
17734: NOT
17735: IFFALSE 17753
// tmp := tmp diff i ;
17737: LD_ADDR_VAR 0 2
17741: PUSH
17742: LD_VAR 0 2
17746: PUSH
17747: LD_VAR 0 1
17751: DIFF
17752: ST_TO_ADDR
17753: GO 17722
17755: POP
17756: POP
// AgressiveMove ( tmp , path ) ;
17757: LD_VAR 0 2
17761: PPUSH
17762: LD_VAR 0 4
17766: PPUSH
17767: CALL 83572 0 2
// until not tmp ;
17771: LD_VAR 0 2
17775: NOT
17776: IFFALSE 17705
// end ;
17778: PPOPN 4
17780: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17781: LD_INT 4
17783: PPUSH
17784: CALL_OW 303
17788: IFFALSE 17803
17790: GO 17792
17792: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17793: LD_INT 3
17795: PPUSH
17796: LD_INT 4
17798: PPUSH
17799: CALL 15841 0 2
17803: END
// every 0 0$1 do
17804: GO 17806
17806: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17807: LD_INT 3
17809: PPUSH
17810: LD_INT 91
17812: PPUSH
17813: LD_INT 3
17815: PPUSH
17816: CALL 13786 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17820: LD_INT 3
17822: PPUSH
17823: LD_INT 47
17825: PPUSH
17826: LD_INT 3
17828: PPUSH
17829: CALL 13786 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17833: LD_INT 3
17835: PPUSH
17836: LD_INT 129
17838: PPUSH
17839: LD_INT 3
17841: PPUSH
17842: CALL 13786 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17846: LD_INT 3
17848: PPUSH
17849: LD_INT 3
17851: PPUSH
17852: LD_INT 3
17854: PPUSH
17855: CALL 13786 0 3
// end ;
17859: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17860: LD_INT 22
17862: PUSH
17863: LD_INT 1
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 21
17872: PUSH
17873: LD_INT 3
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PPUSH
17884: CALL_OW 69
17888: IFFALSE 17957
17890: GO 17892
17892: DISABLE
// begin wait ( 0 0$40 ) ;
17893: LD_INT 1400
17895: PPUSH
17896: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17900: LD_INT 3
17902: PPUSH
17903: LD_INT 21
17905: PPUSH
17906: LD_INT 3
17908: PUSH
17909: LD_INT 4
17911: PUSH
17912: LD_INT 5
17914: PUSH
17915: LD_INT 6
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: PUSH
17924: LD_OWVAR 67
17928: ARRAY
17929: PPUSH
17930: LD_INT 46
17932: PUSH
17933: LD_INT 45
17935: PUSH
17936: LD_INT 44
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: LIST
17943: PPUSH
17944: LD_INT 3
17946: PPUSH
17947: LD_INT 3
17949: PPUSH
17950: LD_INT 24
17952: PPUSH
17953: CALL 15066 0 7
// end ;
17957: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17958: LD_EXP 20
17962: PUSH
17963: LD_INT 2
17965: EQUAL
17966: IFFALSE 17981
17968: PUSH
17969: LD_INT 21
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: AND
17981: IFFALSE 17996
17983: PUSH
17984: LD_INT 112
17986: PPUSH
17987: CALL_OW 255
17991: PUSH
17992: LD_INT 3
17994: EQUAL
17995: AND
17996: IFFALSE 18007
17998: PUSH
17999: LD_INT 21
18001: PPUSH
18002: CALL_OW 302
18006: AND
18007: IFFALSE 18018
18009: PUSH
18010: LD_INT 112
18012: PPUSH
18013: CALL_OW 302
18017: AND
18018: IFFALSE 18108
18020: PUSH
18021: LD_INT 22
18023: PUSH
18024: LD_INT 3
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 21
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 50
18043: PUSH
18044: EMPTY
18045: LIST
18046: PUSH
18047: LD_INT 3
18049: PUSH
18050: LD_INT 58
18052: PUSH
18053: EMPTY
18054: LIST
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: PPUSH
18066: CALL_OW 69
18070: PUSH
18071: LD_INT 18
18073: PPUSH
18074: LD_INT 22
18076: PUSH
18077: LD_INT 3
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 21
18086: PUSH
18087: LD_INT 2
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PPUSH
18098: CALL_OW 70
18102: PUSH
18103: LD_INT 0
18105: EQUAL
18106: DIFF
18107: AND
18108: IFFALSE 18234
18110: GO 18112
18112: DISABLE
// begin enable ;
18113: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18114: LD_INT 3
18116: PPUSH
18117: LD_INT 21
18119: PPUSH
18120: LD_INT 3
18122: PUSH
18123: LD_INT 4
18125: PUSH
18126: LD_INT 5
18128: PUSH
18129: LD_INT 6
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: PUSH
18138: LD_OWVAR 67
18142: ARRAY
18143: PPUSH
18144: LD_INT 46
18146: PUSH
18147: LD_INT 45
18149: PUSH
18150: LD_INT 44
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: PPUSH
18158: LD_INT 3
18160: PPUSH
18161: LD_INT 3
18163: PPUSH
18164: LD_INT 24
18166: PPUSH
18167: CALL 15066 0 7
// if russianTimeLapsers = 0 then
18171: LD_EXP 33
18175: PUSH
18176: LD_INT 0
18178: EQUAL
18179: IFFALSE 18234
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18181: LD_INT 3
18183: PPUSH
18184: LD_INT 112
18186: PPUSH
18187: LD_INT 1
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: LD_INT 2
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: LD_OWVAR 67
18209: ARRAY
18210: PPUSH
18211: LD_INT 49
18213: PUSH
18214: LD_INT 49
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PPUSH
18221: LD_INT 3
18223: PPUSH
18224: LD_INT 3
18226: PPUSH
18227: LD_INT 24
18229: PPUSH
18230: CALL 15066 0 7
// end ;
18234: END
// every 0 0$1 trigger arabianMines do var i ;
18235: LD_EXP 37
18239: IFFALSE 18360
18241: GO 18243
18243: DISABLE
18244: LD_INT 0
18246: PPUSH
// begin enable ;
18247: ENABLE
// for i in arabianMines do
18248: LD_ADDR_VAR 0 1
18252: PUSH
18253: LD_EXP 37
18257: PUSH
18258: FOR_IN
18259: IFFALSE 18358
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18261: LD_INT 22
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 92
18273: PUSH
18274: LD_VAR 0 1
18278: PUSH
18279: LD_INT 1
18281: ARRAY
18282: PUSH
18283: LD_VAR 0 1
18287: PUSH
18288: LD_INT 2
18290: ARRAY
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: IFFALSE 18356
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18311: LD_VAR 0 1
18315: PUSH
18316: LD_INT 1
18318: ARRAY
18319: PPUSH
18320: LD_VAR 0 1
18324: PUSH
18325: LD_INT 2
18327: ARRAY
18328: PPUSH
18329: LD_INT 5
18331: PPUSH
18332: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18336: LD_ADDR_EXP 37
18340: PUSH
18341: LD_EXP 37
18345: PPUSH
18346: LD_VAR 0 1
18350: PPUSH
18351: CALL_OW 3
18355: ST_TO_ADDR
// end ; end ;
18356: GO 18258
18358: POP
18359: POP
// end ;
18360: PPOPN 1
18362: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
18363: LD_EXP 21
18367: PUSH
18368: LD_INT 4
18370: GREATEREQUAL
18371: IFFALSE 18387
18373: PUSH
18374: LD_EXP 22
18378: PUSH
18379: LD_INT 12
18381: MOD
18382: PUSH
18383: LD_INT 0
18385: EQUAL
18386: AND
18387: IFFALSE 18501
18389: GO 18391
18391: DISABLE
18392: LD_INT 0
18394: PPUSH
18395: PPUSH
// begin enable ;
18396: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
18397: LD_ADDR_VAR 0 2
18401: PUSH
18402: LD_INT 122
18404: PUSH
18405: LD_INT 142
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 101
18414: PUSH
18415: LD_INT 127
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 104
18424: PUSH
18425: LD_INT 104
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 46
18434: PUSH
18435: LD_INT 81
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
18448: LD_ADDR_VAR 0 1
18452: PUSH
18453: LD_INT 1
18455: PPUSH
18456: LD_INT 4
18458: PPUSH
18459: CALL_OW 12
18463: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18464: LD_INT 10
18466: PPUSH
18467: LD_VAR 0 2
18471: PUSH
18472: LD_VAR 0 1
18476: ARRAY
18477: PUSH
18478: LD_INT 1
18480: ARRAY
18481: PPUSH
18482: LD_VAR 0 2
18486: PUSH
18487: LD_VAR 0 1
18491: ARRAY
18492: PUSH
18493: LD_INT 2
18495: ARRAY
18496: PPUSH
18497: CALL_OW 243
// end ; end_of_file
18501: PPOPN 2
18503: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18504: LD_INT 3
18506: PPUSH
18507: CALL_OW 301
18511: IFFALSE 18732
18513: GO 18515
18515: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
18516: LD_EXP 27
18520: PPUSH
18521: LD_INT 50
18523: PUSH
18524: EMPTY
18525: LIST
18526: PPUSH
18527: CALL_OW 72
18531: IFFALSE 18540
// wait ( 0 0$10 ) ;
18533: LD_INT 350
18535: PPUSH
18536: CALL_OW 67
// DialogueOn ;
18540: CALL_OW 6
// if sciCounter = 0 then
18544: LD_EXP 28
18548: PUSH
18549: LD_INT 0
18551: EQUAL
18552: IFFALSE 18580
// begin Say ( JMM , D7a-JMM-1 ) ;
18554: LD_EXP 1
18558: PPUSH
18559: LD_STRING D7a-JMM-1
18561: PPUSH
18562: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18566: LD_EXP 15
18570: PPUSH
18571: LD_STRING D7a-Pow-1
18573: PPUSH
18574: CALL_OW 94
// end else
18578: GO 18724
// if sciCounter < 6 then
18580: LD_EXP 28
18584: PUSH
18585: LD_INT 6
18587: LESS
18588: IFFALSE 18616
// begin Say ( JMM , D7b-JMM-1 ) ;
18590: LD_EXP 1
18594: PPUSH
18595: LD_STRING D7b-JMM-1
18597: PPUSH
18598: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18602: LD_EXP 15
18606: PPUSH
18607: LD_STRING D7b-Pow-1
18609: PPUSH
18610: CALL_OW 94
// end else
18614: GO 18724
// begin Say ( JMM , D7c-JMM-1 ) ;
18616: LD_EXP 1
18620: PPUSH
18621: LD_STRING D7c-JMM-1
18623: PPUSH
18624: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18628: LD_EXP 15
18632: PPUSH
18633: LD_STRING D7c-Pow-1
18635: PPUSH
18636: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18640: LD_EXP 1
18644: PPUSH
18645: LD_STRING D7d-JMM-1
18647: PPUSH
18648: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18652: LD_EXP 15
18656: PPUSH
18657: LD_STRING D7d-Pow-1
18659: PPUSH
18660: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18664: LD_EXP 1
18668: PPUSH
18669: LD_STRING D7d-JMM-2
18671: PPUSH
18672: CALL_OW 88
// if askSiberite = 1 then
18676: LD_EXP 25
18680: PUSH
18681: LD_INT 1
18683: EQUAL
18684: IFFALSE 18700
// Say ( JMM , D7d-JMM-2a ) else
18686: LD_EXP 1
18690: PPUSH
18691: LD_STRING D7d-JMM-2a
18693: PPUSH
18694: CALL_OW 88
18698: GO 18712
// SayRadio ( Powell , D7d-Pow-2 ) ;
18700: LD_EXP 15
18704: PPUSH
18705: LD_STRING D7d-Pow-2
18707: PPUSH
18708: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18712: LD_EXP 15
18716: PPUSH
18717: LD_STRING D7d-Pow-2a
18719: PPUSH
18720: CALL_OW 94
// end ; DialogueOff ;
18724: CALL_OW 7
// FinishMission ;
18728: CALL 18733 0 0
// end ;
18732: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18733: LD_INT 0
18735: PPUSH
18736: PPUSH
18737: PPUSH
18738: PPUSH
// m1 := false ;
18739: LD_ADDR_VAR 0 2
18743: PUSH
18744: LD_INT 0
18746: ST_TO_ADDR
// m2 := false ;
18747: LD_ADDR_VAR 0 3
18751: PUSH
18752: LD_INT 0
18754: ST_TO_ADDR
// m3 := false ;
18755: LD_ADDR_VAR 0 4
18759: PUSH
18760: LD_INT 0
18762: ST_TO_ADDR
// if not westPathUsed then
18763: LD_EXP 42
18767: NOT
18768: IFFALSE 18777
// SetAchievement ( ACH_PATH ) ;
18770: LD_STRING ACH_PATH
18772: PPUSH
18773: CALL_OW 543
// if not rocketBuilded then
18777: LD_EXP 44
18781: NOT
18782: IFFALSE 18798
// begin wait ( 3 ) ;
18784: LD_INT 3
18786: PPUSH
18787: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18791: LD_STRING ACH_ROCKET
18793: PPUSH
18794: CALL_OW 543
// end ; if tick <= 40 40$00 then
18798: LD_OWVAR 1
18802: PUSH
18803: LD_INT 84000
18805: LESSEQUAL
18806: IFFALSE 18822
// begin wait ( 3 ) ;
18808: LD_INT 3
18810: PPUSH
18811: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18815: LD_STRING ACH_ASPEED_12
18817: PPUSH
18818: CALL_OW 543
// end ; if teleportExplored = 1 then
18822: LD_EXP 26
18826: PUSH
18827: LD_INT 1
18829: EQUAL
18830: IFFALSE 18852
// begin m1 := true ;
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: LD_INT 1
18839: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18840: LD_STRING Teleport
18842: PPUSH
18843: LD_INT 1
18845: PPUSH
18846: CALL_OW 101
// end else
18850: GO 18863
// AddMedal ( Teleport , - 1 ) ;
18852: LD_STRING Teleport
18854: PPUSH
18855: LD_INT 1
18857: NEG
18858: PPUSH
18859: CALL_OW 101
// if sciCounter > 2 then
18863: LD_EXP 28
18867: PUSH
18868: LD_INT 2
18870: GREATER
18871: IFFALSE 18893
// begin m2 := true ;
18873: LD_ADDR_VAR 0 3
18877: PUSH
18878: LD_INT 1
18880: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18881: LD_STRING Materials
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 101
// end else
18891: GO 18904
// AddMedal ( Materials , - 1 ) ;
18893: LD_STRING Materials
18895: PPUSH
18896: LD_INT 1
18898: NEG
18899: PPUSH
18900: CALL_OW 101
// if sciCounter >= 6 then
18904: LD_EXP 28
18908: PUSH
18909: LD_INT 6
18911: GREATEREQUAL
18912: IFFALSE 18944
// begin m3 := true ;
18914: LD_ADDR_VAR 0 4
18918: PUSH
18919: LD_INT 1
18921: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18922: LD_STRING Scientists
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18932: LD_INT 1
18934: PPUSH
18935: LD_STRING 12_SciDed_1
18937: PPUSH
18938: CALL_OW 39
// end else
18942: GO 18965
// begin AddMedal ( Scientists , - 1 ) ;
18944: LD_STRING Scientists
18946: PPUSH
18947: LD_INT 1
18949: NEG
18950: PPUSH
18951: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18955: LD_INT 0
18957: PPUSH
18958: LD_STRING 12_SciDed_1
18960: PPUSH
18961: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18965: LD_EXP 24
18969: PPUSH
18970: LD_STRING 12_MainDepositFake_1
18972: PPUSH
18973: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18977: LD_VAR 0 2
18981: IFFALSE 18989
18983: PUSH
18984: LD_VAR 0 3
18988: AND
18989: IFFALSE 18997
18991: PUSH
18992: LD_VAR 0 4
18996: AND
18997: IFFALSE 19009
18999: PUSH
19000: LD_OWVAR 67
19004: PUSH
19005: LD_INT 3
19007: GREATEREQUAL
19008: AND
19009: IFFALSE 19021
// SetAchievementEX ( ACH_AMER , 12 ) ;
19011: LD_STRING ACH_AMER
19013: PPUSH
19014: LD_INT 12
19016: PPUSH
19017: CALL_OW 564
// GiveMedals ( MAIN ) ;
19021: LD_STRING MAIN
19023: PPUSH
19024: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19028: LD_INT 22
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 23
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 21
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: LD_INT 25
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 25
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 25
19083: PUSH
19084: LD_INT 3
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 25
19093: PUSH
19094: LD_INT 4
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 25
19103: PUSH
19104: LD_INT 5
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 25
19113: PUSH
19114: LD_INT 8
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: PPUSH
19141: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19145: LD_EXP 1
19149: PPUSH
19150: LD_EXP 39
19154: PUSH
19155: LD_STRING JMM
19157: STR
19158: PPUSH
19159: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19163: LD_EXP 7
19167: PPUSH
19168: LD_EXP 39
19172: PUSH
19173: LD_STRING Brown
19175: STR
19176: PPUSH
19177: CALL 13131 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19181: LD_EXP 3
19185: PPUSH
19186: LD_EXP 39
19190: PUSH
19191: LD_STRING Donaldson
19193: STR
19194: PPUSH
19195: CALL 13131 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19199: LD_EXP 4
19203: PPUSH
19204: LD_EXP 39
19208: PUSH
19209: LD_STRING Bobby
19211: STR
19212: PPUSH
19213: CALL 13131 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19217: LD_EXP 5
19221: PPUSH
19222: LD_EXP 39
19226: PUSH
19227: LD_STRING Cyrus
19229: STR
19230: PPUSH
19231: CALL 13131 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19235: LD_EXP 2
19239: PPUSH
19240: LD_EXP 39
19244: PUSH
19245: LD_STRING Lisa
19247: STR
19248: PPUSH
19249: CALL 13131 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19253: LD_EXP 12
19257: PPUSH
19258: LD_EXP 39
19262: PUSH
19263: LD_STRING Frank
19265: STR
19266: PPUSH
19267: CALL 13131 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19271: LD_EXP 13
19275: PPUSH
19276: LD_EXP 39
19280: PUSH
19281: LD_STRING Kikuchi
19283: STR
19284: PPUSH
19285: CALL 13131 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19289: LD_EXP 9
19293: PPUSH
19294: LD_EXP 39
19298: PUSH
19299: LD_STRING Houten
19301: STR
19302: PPUSH
19303: CALL 13131 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19307: LD_EXP 11
19311: PPUSH
19312: LD_EXP 39
19316: PUSH
19317: LD_STRING Gary
19319: STR
19320: PPUSH
19321: CALL 13131 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19325: LD_EXP 10
19329: PPUSH
19330: LD_EXP 39
19334: PUSH
19335: LD_STRING Cornell
19337: STR
19338: PPUSH
19339: CALL 13131 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19343: LD_EXP 6
19347: PPUSH
19348: LD_EXP 39
19352: PUSH
19353: LD_STRING Denis
19355: STR
19356: PPUSH
19357: CALL 13131 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19361: LD_EXP 8
19365: PPUSH
19366: LD_EXP 39
19370: PUSH
19371: LD_STRING Gladstone
19373: STR
19374: PPUSH
19375: CALL 13131 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19379: LD_INT 22
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 23
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 25
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 25
19434: PUSH
19435: LD_INT 3
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 25
19444: PUSH
19445: LD_INT 4
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 25
19454: PUSH
19455: LD_INT 5
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 25
19464: PUSH
19465: LD_INT 8
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: PPUSH
19487: CALL_OW 69
19491: PUSH
19492: LD_EXP 1
19496: PUSH
19497: LD_EXP 7
19501: PUSH
19502: LD_EXP 3
19506: PUSH
19507: LD_EXP 4
19511: PUSH
19512: LD_EXP 5
19516: PUSH
19517: LD_EXP 2
19521: PUSH
19522: LD_EXP 12
19526: PUSH
19527: LD_EXP 8
19531: PUSH
19532: LD_EXP 13
19536: PUSH
19537: LD_EXP 6
19541: PUSH
19542: LD_EXP 9
19546: PUSH
19547: LD_EXP 11
19551: PUSH
19552: LD_EXP 10
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: DIFF
19572: PPUSH
19573: LD_STRING 12_other_survivors
19575: PPUSH
19576: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19580: LD_INT 22
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 23
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 21
19602: PUSH
19603: LD_INT 1
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: LD_INT 25
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 25
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 25
19635: PUSH
19636: LD_INT 3
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 25
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 25
19655: PUSH
19656: LD_INT 5
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 25
19665: PUSH
19666: LD_INT 8
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: PPUSH
19688: CALL_OW 69
19692: PPUSH
19693: LD_STRING 12_kurt_squad
19695: PPUSH
19696: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19700: LD_EXP 14
19704: PPUSH
19705: LD_STRING 12_others
19707: PPUSH
19708: CALL_OW 38
// YouWin ;
19712: CALL_OW 103
// end ; end_of_file
19716: LD_VAR 0 1
19720: RET
// every 0 0$01 trigger ruAI and cratesAllow do
19721: LD_EXP 34
19725: IFFALSE 19733
19727: PUSH
19728: LD_EXP 45
19732: AND
19733: IFFALSE 20045
19735: GO 19737
19737: DISABLE
// begin repeat wait ( 0 0$08 ) ;
19738: LD_INT 280
19740: PPUSH
19741: CALL_OW 67
// if cratesSpawned < 12 then
19745: LD_EXP 38
19749: PUSH
19750: LD_INT 12
19752: LESS
19753: IFFALSE 19805
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
19755: LD_INT 105
19757: PPUSH
19758: LD_INT 350
19760: PPUSH
19761: CALL_OW 12
19765: PPUSH
19766: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19770: LD_INT 3
19772: PPUSH
19773: LD_INT 5
19775: PPUSH
19776: CALL_OW 12
19780: PPUSH
19781: LD_INT 21
19783: PPUSH
19784: LD_INT 1
19786: PPUSH
19787: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19791: LD_ADDR_EXP 38
19795: PUSH
19796: LD_EXP 38
19800: PUSH
19801: LD_INT 1
19803: PLUS
19804: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
19805: LD_EXP 38
19809: PUSH
19810: LD_INT 12
19812: GREATEREQUAL
19813: IFFALSE 19825
19815: PUSH
19816: LD_EXP 38
19820: PUSH
19821: LD_INT 32
19823: LESS
19824: AND
19825: IFFALSE 19877
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
19827: LD_INT 420
19829: PPUSH
19830: LD_INT 700
19832: PPUSH
19833: CALL_OW 12
19837: PPUSH
19838: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19842: LD_INT 3
19844: PPUSH
19845: LD_INT 5
19847: PPUSH
19848: CALL_OW 12
19852: PPUSH
19853: LD_INT 21
19855: PPUSH
19856: LD_INT 1
19858: PPUSH
19859: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19863: LD_ADDR_EXP 38
19867: PUSH
19868: LD_EXP 38
19872: PUSH
19873: LD_INT 1
19875: PLUS
19876: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
19877: LD_EXP 38
19881: PUSH
19882: LD_INT 32
19884: GREATEREQUAL
19885: IFFALSE 19959
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19887: LD_INT 21
19889: PPUSH
19890: CALL_OW 435
19894: PUSH
19895: LD_INT 14
19897: LESS
19898: IFFALSE 19909
// wait ( 0 0$10 ) else
19900: LD_INT 350
19902: PPUSH
19903: CALL_OW 67
19907: GO 19924
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
19909: LD_INT 1750
19911: PPUSH
19912: LD_INT 3150
19914: PPUSH
19915: CALL_OW 12
19919: PPUSH
19920: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
19924: LD_INT 2
19926: PPUSH
19927: LD_INT 5
19929: PPUSH
19930: CALL_OW 12
19934: PPUSH
19935: LD_INT 21
19937: PPUSH
19938: LD_INT 1
19940: PPUSH
19941: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19945: LD_ADDR_EXP 38
19949: PUSH
19950: LD_EXP 38
19954: PUSH
19955: LD_INT 1
19957: PLUS
19958: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
19959: LD_EXP 38
19963: PUSH
19964: LD_INT 110
19966: GREATEREQUAL
19967: IFFALSE 20041
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19969: LD_INT 21
19971: PPUSH
19972: CALL_OW 435
19976: PUSH
19977: LD_INT 14
19979: LESS
19980: IFFALSE 19991
// wait ( 0 0$20 ) else
19982: LD_INT 700
19984: PPUSH
19985: CALL_OW 67
19989: GO 20006
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
19991: LD_INT 2450
19993: PPUSH
19994: LD_INT 3850
19996: PPUSH
19997: CALL_OW 12
20001: PPUSH
20002: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
20006: LD_INT 1
20008: PPUSH
20009: LD_INT 5
20011: PPUSH
20012: CALL_OW 12
20016: PPUSH
20017: LD_INT 21
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20027: LD_ADDR_EXP 38
20031: PUSH
20032: LD_EXP 38
20036: PUSH
20037: LD_INT 1
20039: PLUS
20040: ST_TO_ADDR
// end ; until false ;
20041: LD_INT 0
20043: IFFALSE 19738
// end ; end_of_file end_of_file
20045: END
// export globalGameSaveCounter ; every 0 0$1 do
20046: GO 20048
20048: DISABLE
// begin enable ;
20049: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20050: LD_STRING updateTimer(
20052: PUSH
20053: LD_OWVAR 1
20057: STR
20058: PUSH
20059: LD_STRING );
20061: STR
20062: PPUSH
20063: CALL_OW 559
// end ;
20067: END
// every 0 0$1 do
20068: GO 20070
20070: DISABLE
// begin globalGameSaveCounter := 0 ;
20071: LD_ADDR_EXP 46
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20079: LD_STRING setGameSaveCounter(0)
20081: PPUSH
20082: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20086: LD_STRING initStreamRollete();
20088: PPUSH
20089: CALL_OW 559
// InitStreamMode ;
20093: CALL 21445 0 0
// DefineStreamItems ( false ) ;
20097: LD_INT 0
20099: PPUSH
20100: CALL 21909 0 1
// end ;
20104: END
// export function SOS_MapStart ( ) ; begin
20105: LD_INT 0
20107: PPUSH
// if streamModeActive then
20108: LD_EXP 47
20112: IFFALSE 20121
// DefineStreamItems ( true ) ;
20114: LD_INT 1
20116: PPUSH
20117: CALL 21909 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
20121: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
20123: PPUSH
20124: CALL_OW 559
// UpdateLuaVariables ( ) ;
20128: CALL 20145 0 0
// UpdateFactoryWaypoints ( ) ;
20132: CALL 35031 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20136: CALL 35283 0 0
// end ;
20140: LD_VAR 0 1
20144: RET
// function UpdateLuaVariables ( ) ; begin
20145: LD_INT 0
20147: PPUSH
// if globalGameSaveCounter then
20148: LD_EXP 46
20152: IFFALSE 20186
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20154: LD_ADDR_EXP 46
20158: PUSH
20159: LD_EXP 46
20163: PPUSH
20164: CALL 82179 0 1
20168: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20169: LD_STRING setGameSaveCounter(
20171: PUSH
20172: LD_EXP 46
20176: STR
20177: PUSH
20178: LD_STRING )
20180: STR
20181: PPUSH
20182: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20186: LD_STRING setGameDifficulty(
20188: PUSH
20189: LD_OWVAR 67
20193: STR
20194: PUSH
20195: LD_STRING )
20197: STR
20198: PPUSH
20199: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20203: LD_STRING displayDifficulty(
20205: PUSH
20206: LD_OWVAR 67
20210: STR
20211: PUSH
20212: LD_STRING )
20214: STR
20215: PPUSH
20216: CALL_OW 559
// end ;
20220: LD_VAR 0 1
20224: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20225: LD_INT 0
20227: PPUSH
// if p2 = stream_mode then
20228: LD_VAR 0 2
20232: PUSH
20233: LD_INT 100
20235: EQUAL
20236: IFFALSE 21239
// begin if not StreamModeActive then
20238: LD_EXP 47
20242: NOT
20243: IFFALSE 20253
// StreamModeActive := true ;
20245: LD_ADDR_EXP 47
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 0 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 0
20260: EQUAL
20261: IFFALSE 20267
// InitStreamMode ;
20263: CALL 21445 0 0
// if p3 = 1 then
20267: LD_VAR 0 3
20271: PUSH
20272: LD_INT 1
20274: EQUAL
20275: IFFALSE 20285
// sRocket := true ;
20277: LD_ADDR_EXP 52
20281: PUSH
20282: LD_INT 1
20284: ST_TO_ADDR
// if p3 = 2 then
20285: LD_VAR 0 3
20289: PUSH
20290: LD_INT 2
20292: EQUAL
20293: IFFALSE 20303
// sSpeed := true ;
20295: LD_ADDR_EXP 51
20299: PUSH
20300: LD_INT 1
20302: ST_TO_ADDR
// if p3 = 3 then
20303: LD_VAR 0 3
20307: PUSH
20308: LD_INT 3
20310: EQUAL
20311: IFFALSE 20321
// sEngine := true ;
20313: LD_ADDR_EXP 53
20317: PUSH
20318: LD_INT 1
20320: ST_TO_ADDR
// if p3 = 4 then
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 4
20328: EQUAL
20329: IFFALSE 20339
// sSpec := true ;
20331: LD_ADDR_EXP 50
20335: PUSH
20336: LD_INT 1
20338: ST_TO_ADDR
// if p3 = 5 then
20339: LD_VAR 0 3
20343: PUSH
20344: LD_INT 5
20346: EQUAL
20347: IFFALSE 20357
// sLevel := true ;
20349: LD_ADDR_EXP 54
20353: PUSH
20354: LD_INT 1
20356: ST_TO_ADDR
// if p3 = 6 then
20357: LD_VAR 0 3
20361: PUSH
20362: LD_INT 6
20364: EQUAL
20365: IFFALSE 20375
// sArmoury := true ;
20367: LD_ADDR_EXP 55
20371: PUSH
20372: LD_INT 1
20374: ST_TO_ADDR
// if p3 = 7 then
20375: LD_VAR 0 3
20379: PUSH
20380: LD_INT 7
20382: EQUAL
20383: IFFALSE 20393
// sRadar := true ;
20385: LD_ADDR_EXP 56
20389: PUSH
20390: LD_INT 1
20392: ST_TO_ADDR
// if p3 = 8 then
20393: LD_VAR 0 3
20397: PUSH
20398: LD_INT 8
20400: EQUAL
20401: IFFALSE 20411
// sBunker := true ;
20403: LD_ADDR_EXP 57
20407: PUSH
20408: LD_INT 1
20410: ST_TO_ADDR
// if p3 = 9 then
20411: LD_VAR 0 3
20415: PUSH
20416: LD_INT 9
20418: EQUAL
20419: IFFALSE 20429
// sHack := true ;
20421: LD_ADDR_EXP 58
20425: PUSH
20426: LD_INT 1
20428: ST_TO_ADDR
// if p3 = 10 then
20429: LD_VAR 0 3
20433: PUSH
20434: LD_INT 10
20436: EQUAL
20437: IFFALSE 20447
// sFire := true ;
20439: LD_ADDR_EXP 59
20443: PUSH
20444: LD_INT 1
20446: ST_TO_ADDR
// if p3 = 11 then
20447: LD_VAR 0 3
20451: PUSH
20452: LD_INT 11
20454: EQUAL
20455: IFFALSE 20465
// sRefresh := true ;
20457: LD_ADDR_EXP 60
20461: PUSH
20462: LD_INT 1
20464: ST_TO_ADDR
// if p3 = 12 then
20465: LD_VAR 0 3
20469: PUSH
20470: LD_INT 12
20472: EQUAL
20473: IFFALSE 20483
// sExp := true ;
20475: LD_ADDR_EXP 61
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// if p3 = 13 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 13
20490: EQUAL
20491: IFFALSE 20501
// sDepot := true ;
20493: LD_ADDR_EXP 62
20497: PUSH
20498: LD_INT 1
20500: ST_TO_ADDR
// if p3 = 14 then
20501: LD_VAR 0 3
20505: PUSH
20506: LD_INT 14
20508: EQUAL
20509: IFFALSE 20519
// sFlag := true ;
20511: LD_ADDR_EXP 63
20515: PUSH
20516: LD_INT 1
20518: ST_TO_ADDR
// if p3 = 15 then
20519: LD_VAR 0 3
20523: PUSH
20524: LD_INT 15
20526: EQUAL
20527: IFFALSE 20537
// sKamikadze := true ;
20529: LD_ADDR_EXP 71
20533: PUSH
20534: LD_INT 1
20536: ST_TO_ADDR
// if p3 = 16 then
20537: LD_VAR 0 3
20541: PUSH
20542: LD_INT 16
20544: EQUAL
20545: IFFALSE 20555
// sTroll := true ;
20547: LD_ADDR_EXP 72
20551: PUSH
20552: LD_INT 1
20554: ST_TO_ADDR
// if p3 = 17 then
20555: LD_VAR 0 3
20559: PUSH
20560: LD_INT 17
20562: EQUAL
20563: IFFALSE 20573
// sSlow := true ;
20565: LD_ADDR_EXP 73
20569: PUSH
20570: LD_INT 1
20572: ST_TO_ADDR
// if p3 = 18 then
20573: LD_VAR 0 3
20577: PUSH
20578: LD_INT 18
20580: EQUAL
20581: IFFALSE 20591
// sLack := true ;
20583: LD_ADDR_EXP 74
20587: PUSH
20588: LD_INT 1
20590: ST_TO_ADDR
// if p3 = 19 then
20591: LD_VAR 0 3
20595: PUSH
20596: LD_INT 19
20598: EQUAL
20599: IFFALSE 20609
// sTank := true ;
20601: LD_ADDR_EXP 76
20605: PUSH
20606: LD_INT 1
20608: ST_TO_ADDR
// if p3 = 20 then
20609: LD_VAR 0 3
20613: PUSH
20614: LD_INT 20
20616: EQUAL
20617: IFFALSE 20627
// sRemote := true ;
20619: LD_ADDR_EXP 77
20623: PUSH
20624: LD_INT 1
20626: ST_TO_ADDR
// if p3 = 21 then
20627: LD_VAR 0 3
20631: PUSH
20632: LD_INT 21
20634: EQUAL
20635: IFFALSE 20645
// sPowell := true ;
20637: LD_ADDR_EXP 78
20641: PUSH
20642: LD_INT 1
20644: ST_TO_ADDR
// if p3 = 22 then
20645: LD_VAR 0 3
20649: PUSH
20650: LD_INT 22
20652: EQUAL
20653: IFFALSE 20663
// sTeleport := true ;
20655: LD_ADDR_EXP 81
20659: PUSH
20660: LD_INT 1
20662: ST_TO_ADDR
// if p3 = 23 then
20663: LD_VAR 0 3
20667: PUSH
20668: LD_INT 23
20670: EQUAL
20671: IFFALSE 20681
// sOilTower := true ;
20673: LD_ADDR_EXP 83
20677: PUSH
20678: LD_INT 1
20680: ST_TO_ADDR
// if p3 = 24 then
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 24
20688: EQUAL
20689: IFFALSE 20699
// sShovel := true ;
20691: LD_ADDR_EXP 84
20695: PUSH
20696: LD_INT 1
20698: ST_TO_ADDR
// if p3 = 25 then
20699: LD_VAR 0 3
20703: PUSH
20704: LD_INT 25
20706: EQUAL
20707: IFFALSE 20717
// sSheik := true ;
20709: LD_ADDR_EXP 85
20713: PUSH
20714: LD_INT 1
20716: ST_TO_ADDR
// if p3 = 26 then
20717: LD_VAR 0 3
20721: PUSH
20722: LD_INT 26
20724: EQUAL
20725: IFFALSE 20735
// sEarthquake := true ;
20727: LD_ADDR_EXP 87
20731: PUSH
20732: LD_INT 1
20734: ST_TO_ADDR
// if p3 = 27 then
20735: LD_VAR 0 3
20739: PUSH
20740: LD_INT 27
20742: EQUAL
20743: IFFALSE 20753
// sAI := true ;
20745: LD_ADDR_EXP 88
20749: PUSH
20750: LD_INT 1
20752: ST_TO_ADDR
// if p3 = 28 then
20753: LD_VAR 0 3
20757: PUSH
20758: LD_INT 28
20760: EQUAL
20761: IFFALSE 20771
// sCargo := true ;
20763: LD_ADDR_EXP 91
20767: PUSH
20768: LD_INT 1
20770: ST_TO_ADDR
// if p3 = 29 then
20771: LD_VAR 0 3
20775: PUSH
20776: LD_INT 29
20778: EQUAL
20779: IFFALSE 20789
// sDLaser := true ;
20781: LD_ADDR_EXP 92
20785: PUSH
20786: LD_INT 1
20788: ST_TO_ADDR
// if p3 = 30 then
20789: LD_VAR 0 3
20793: PUSH
20794: LD_INT 30
20796: EQUAL
20797: IFFALSE 20807
// sExchange := true ;
20799: LD_ADDR_EXP 93
20803: PUSH
20804: LD_INT 1
20806: ST_TO_ADDR
// if p3 = 31 then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_INT 31
20814: EQUAL
20815: IFFALSE 20825
// sFac := true ;
20817: LD_ADDR_EXP 94
20821: PUSH
20822: LD_INT 1
20824: ST_TO_ADDR
// if p3 = 32 then
20825: LD_VAR 0 3
20829: PUSH
20830: LD_INT 32
20832: EQUAL
20833: IFFALSE 20843
// sPower := true ;
20835: LD_ADDR_EXP 95
20839: PUSH
20840: LD_INT 1
20842: ST_TO_ADDR
// if p3 = 33 then
20843: LD_VAR 0 3
20847: PUSH
20848: LD_INT 33
20850: EQUAL
20851: IFFALSE 20861
// sRandom := true ;
20853: LD_ADDR_EXP 96
20857: PUSH
20858: LD_INT 1
20860: ST_TO_ADDR
// if p3 = 34 then
20861: LD_VAR 0 3
20865: PUSH
20866: LD_INT 34
20868: EQUAL
20869: IFFALSE 20879
// sShield := true ;
20871: LD_ADDR_EXP 97
20875: PUSH
20876: LD_INT 1
20878: ST_TO_ADDR
// if p3 = 35 then
20879: LD_VAR 0 3
20883: PUSH
20884: LD_INT 35
20886: EQUAL
20887: IFFALSE 20897
// sTime := true ;
20889: LD_ADDR_EXP 98
20893: PUSH
20894: LD_INT 1
20896: ST_TO_ADDR
// if p3 = 36 then
20897: LD_VAR 0 3
20901: PUSH
20902: LD_INT 36
20904: EQUAL
20905: IFFALSE 20915
// sTools := true ;
20907: LD_ADDR_EXP 99
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// if p3 = 101 then
20915: LD_VAR 0 3
20919: PUSH
20920: LD_INT 101
20922: EQUAL
20923: IFFALSE 20933
// sSold := true ;
20925: LD_ADDR_EXP 64
20929: PUSH
20930: LD_INT 1
20932: ST_TO_ADDR
// if p3 = 102 then
20933: LD_VAR 0 3
20937: PUSH
20938: LD_INT 102
20940: EQUAL
20941: IFFALSE 20951
// sDiff := true ;
20943: LD_ADDR_EXP 65
20947: PUSH
20948: LD_INT 1
20950: ST_TO_ADDR
// if p3 = 103 then
20951: LD_VAR 0 3
20955: PUSH
20956: LD_INT 103
20958: EQUAL
20959: IFFALSE 20969
// sFog := true ;
20961: LD_ADDR_EXP 68
20965: PUSH
20966: LD_INT 1
20968: ST_TO_ADDR
// if p3 = 104 then
20969: LD_VAR 0 3
20973: PUSH
20974: LD_INT 104
20976: EQUAL
20977: IFFALSE 20987
// sReset := true ;
20979: LD_ADDR_EXP 69
20983: PUSH
20984: LD_INT 1
20986: ST_TO_ADDR
// if p3 = 105 then
20987: LD_VAR 0 3
20991: PUSH
20992: LD_INT 105
20994: EQUAL
20995: IFFALSE 21005
// sSun := true ;
20997: LD_ADDR_EXP 70
21001: PUSH
21002: LD_INT 1
21004: ST_TO_ADDR
// if p3 = 106 then
21005: LD_VAR 0 3
21009: PUSH
21010: LD_INT 106
21012: EQUAL
21013: IFFALSE 21023
// sTiger := true ;
21015: LD_ADDR_EXP 66
21019: PUSH
21020: LD_INT 1
21022: ST_TO_ADDR
// if p3 = 107 then
21023: LD_VAR 0 3
21027: PUSH
21028: LD_INT 107
21030: EQUAL
21031: IFFALSE 21041
// sBomb := true ;
21033: LD_ADDR_EXP 67
21037: PUSH
21038: LD_INT 1
21040: ST_TO_ADDR
// if p3 = 108 then
21041: LD_VAR 0 3
21045: PUSH
21046: LD_INT 108
21048: EQUAL
21049: IFFALSE 21059
// sWound := true ;
21051: LD_ADDR_EXP 75
21055: PUSH
21056: LD_INT 1
21058: ST_TO_ADDR
// if p3 = 109 then
21059: LD_VAR 0 3
21063: PUSH
21064: LD_INT 109
21066: EQUAL
21067: IFFALSE 21077
// sBetray := true ;
21069: LD_ADDR_EXP 79
21073: PUSH
21074: LD_INT 1
21076: ST_TO_ADDR
// if p3 = 110 then
21077: LD_VAR 0 3
21081: PUSH
21082: LD_INT 110
21084: EQUAL
21085: IFFALSE 21095
// sContamin := true ;
21087: LD_ADDR_EXP 80
21091: PUSH
21092: LD_INT 1
21094: ST_TO_ADDR
// if p3 = 111 then
21095: LD_VAR 0 3
21099: PUSH
21100: LD_INT 111
21102: EQUAL
21103: IFFALSE 21113
// sOil := true ;
21105: LD_ADDR_EXP 82
21109: PUSH
21110: LD_INT 1
21112: ST_TO_ADDR
// if p3 = 112 then
21113: LD_VAR 0 3
21117: PUSH
21118: LD_INT 112
21120: EQUAL
21121: IFFALSE 21131
// sStu := true ;
21123: LD_ADDR_EXP 86
21127: PUSH
21128: LD_INT 1
21130: ST_TO_ADDR
// if p3 = 113 then
21131: LD_VAR 0 3
21135: PUSH
21136: LD_INT 113
21138: EQUAL
21139: IFFALSE 21149
// sBazooka := true ;
21141: LD_ADDR_EXP 89
21145: PUSH
21146: LD_INT 1
21148: ST_TO_ADDR
// if p3 = 114 then
21149: LD_VAR 0 3
21153: PUSH
21154: LD_INT 114
21156: EQUAL
21157: IFFALSE 21167
// sMortar := true ;
21159: LD_ADDR_EXP 90
21163: PUSH
21164: LD_INT 1
21166: ST_TO_ADDR
// if p3 = 115 then
21167: LD_VAR 0 3
21171: PUSH
21172: LD_INT 115
21174: EQUAL
21175: IFFALSE 21185
// sRanger := true ;
21177: LD_ADDR_EXP 100
21181: PUSH
21182: LD_INT 1
21184: ST_TO_ADDR
// if p3 = 116 then
21185: LD_VAR 0 3
21189: PUSH
21190: LD_INT 116
21192: EQUAL
21193: IFFALSE 21203
// sComputer := true ;
21195: LD_ADDR_EXP 101
21199: PUSH
21200: LD_INT 1
21202: ST_TO_ADDR
// if p3 = 117 then
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 117
21210: EQUAL
21211: IFFALSE 21221
// s30 := true ;
21213: LD_ADDR_EXP 102
21217: PUSH
21218: LD_INT 1
21220: ST_TO_ADDR
// if p3 = 118 then
21221: LD_VAR 0 3
21225: PUSH
21226: LD_INT 118
21228: EQUAL
21229: IFFALSE 21239
// s60 := true ;
21231: LD_ADDR_EXP 103
21235: PUSH
21236: LD_INT 1
21238: ST_TO_ADDR
// end ; if p2 = hack_mode then
21239: LD_VAR 0 2
21243: PUSH
21244: LD_INT 101
21246: EQUAL
21247: IFFALSE 21375
// begin case p3 of 1 :
21249: LD_VAR 0 3
21253: PUSH
21254: LD_INT 1
21256: DOUBLE
21257: EQUAL
21258: IFTRUE 21262
21260: GO 21269
21262: POP
// hHackUnlimitedResources ; 2 :
21263: CALL 33638 0 0
21267: GO 21375
21269: LD_INT 2
21271: DOUBLE
21272: EQUAL
21273: IFTRUE 21277
21275: GO 21284
21277: POP
// hHackSetLevel10 ; 3 :
21278: CALL 33771 0 0
21282: GO 21375
21284: LD_INT 3
21286: DOUBLE
21287: EQUAL
21288: IFTRUE 21292
21290: GO 21299
21292: POP
// hHackSetLevel10YourUnits ; 4 :
21293: CALL 33856 0 0
21297: GO 21375
21299: LD_INT 4
21301: DOUBLE
21302: EQUAL
21303: IFTRUE 21307
21305: GO 21314
21307: POP
// hHackInvincible ; 5 :
21308: CALL 34304 0 0
21312: GO 21375
21314: LD_INT 5
21316: DOUBLE
21317: EQUAL
21318: IFTRUE 21322
21320: GO 21329
21322: POP
// hHackInvisible ; 6 :
21323: CALL 34415 0 0
21327: GO 21375
21329: LD_INT 6
21331: DOUBLE
21332: EQUAL
21333: IFTRUE 21337
21335: GO 21344
21337: POP
// hHackChangeYourSide ; 7 :
21338: CALL 34472 0 0
21342: GO 21375
21344: LD_INT 7
21346: DOUBLE
21347: EQUAL
21348: IFTRUE 21352
21350: GO 21359
21352: POP
// hHackChangeUnitSide ; 8 :
21353: CALL 34514 0 0
21357: GO 21375
21359: LD_INT 8
21361: DOUBLE
21362: EQUAL
21363: IFTRUE 21367
21365: GO 21374
21367: POP
// hHackFog ; end ;
21368: CALL 34615 0 0
21372: GO 21375
21374: POP
// end ; if p2 = game_save_mode then
21375: LD_VAR 0 2
21379: PUSH
21380: LD_INT 102
21382: EQUAL
21383: IFFALSE 21440
// begin if p3 = 1 then
21385: LD_VAR 0 3
21389: PUSH
21390: LD_INT 1
21392: EQUAL
21393: IFFALSE 21405
// globalGameSaveCounter := p4 ;
21395: LD_ADDR_EXP 46
21399: PUSH
21400: LD_VAR 0 4
21404: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21405: LD_VAR 0 3
21409: PUSH
21410: LD_INT 2
21412: EQUAL
21413: IFFALSE 21421
21415: PUSH
21416: LD_EXP 46
21420: AND
21421: IFFALSE 21440
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21423: LD_STRING setGameSaveCounter(
21425: PUSH
21426: LD_EXP 46
21430: STR
21431: PUSH
21432: LD_STRING )
21434: STR
21435: PPUSH
21436: CALL_OW 559
// end ; end ;
21440: LD_VAR 0 7
21444: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21445: LD_INT 0
21447: PPUSH
// streamModeActive := false ;
21448: LD_ADDR_EXP 47
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// normalCounter := 36 ;
21456: LD_ADDR_EXP 48
21460: PUSH
21461: LD_INT 36
21463: ST_TO_ADDR
// hardcoreCounter := 18 ;
21464: LD_ADDR_EXP 49
21468: PUSH
21469: LD_INT 18
21471: ST_TO_ADDR
// sRocket := false ;
21472: LD_ADDR_EXP 52
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sSpeed := false ;
21480: LD_ADDR_EXP 51
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sEngine := false ;
21488: LD_ADDR_EXP 53
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sSpec := false ;
21496: LD_ADDR_EXP 50
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// sLevel := false ;
21504: LD_ADDR_EXP 54
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// sArmoury := false ;
21512: LD_ADDR_EXP 55
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// sRadar := false ;
21520: LD_ADDR_EXP 56
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
// sBunker := false ;
21528: LD_ADDR_EXP 57
21532: PUSH
21533: LD_INT 0
21535: ST_TO_ADDR
// sHack := false ;
21536: LD_ADDR_EXP 58
21540: PUSH
21541: LD_INT 0
21543: ST_TO_ADDR
// sFire := false ;
21544: LD_ADDR_EXP 59
21548: PUSH
21549: LD_INT 0
21551: ST_TO_ADDR
// sRefresh := false ;
21552: LD_ADDR_EXP 60
21556: PUSH
21557: LD_INT 0
21559: ST_TO_ADDR
// sExp := false ;
21560: LD_ADDR_EXP 61
21564: PUSH
21565: LD_INT 0
21567: ST_TO_ADDR
// sDepot := false ;
21568: LD_ADDR_EXP 62
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// sFlag := false ;
21576: LD_ADDR_EXP 63
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// sKamikadze := false ;
21584: LD_ADDR_EXP 71
21588: PUSH
21589: LD_INT 0
21591: ST_TO_ADDR
// sTroll := false ;
21592: LD_ADDR_EXP 72
21596: PUSH
21597: LD_INT 0
21599: ST_TO_ADDR
// sSlow := false ;
21600: LD_ADDR_EXP 73
21604: PUSH
21605: LD_INT 0
21607: ST_TO_ADDR
// sLack := false ;
21608: LD_ADDR_EXP 74
21612: PUSH
21613: LD_INT 0
21615: ST_TO_ADDR
// sTank := false ;
21616: LD_ADDR_EXP 76
21620: PUSH
21621: LD_INT 0
21623: ST_TO_ADDR
// sRemote := false ;
21624: LD_ADDR_EXP 77
21628: PUSH
21629: LD_INT 0
21631: ST_TO_ADDR
// sPowell := false ;
21632: LD_ADDR_EXP 78
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// sTeleport := false ;
21640: LD_ADDR_EXP 81
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// sOilTower := false ;
21648: LD_ADDR_EXP 83
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// sShovel := false ;
21656: LD_ADDR_EXP 84
21660: PUSH
21661: LD_INT 0
21663: ST_TO_ADDR
// sSheik := false ;
21664: LD_ADDR_EXP 85
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// sEarthquake := false ;
21672: LD_ADDR_EXP 87
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// sAI := false ;
21680: LD_ADDR_EXP 88
21684: PUSH
21685: LD_INT 0
21687: ST_TO_ADDR
// sCargo := false ;
21688: LD_ADDR_EXP 91
21692: PUSH
21693: LD_INT 0
21695: ST_TO_ADDR
// sDLaser := false ;
21696: LD_ADDR_EXP 92
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
// sExchange := false ;
21704: LD_ADDR_EXP 93
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// sFac := false ;
21712: LD_ADDR_EXP 94
21716: PUSH
21717: LD_INT 0
21719: ST_TO_ADDR
// sPower := false ;
21720: LD_ADDR_EXP 95
21724: PUSH
21725: LD_INT 0
21727: ST_TO_ADDR
// sRandom := false ;
21728: LD_ADDR_EXP 96
21732: PUSH
21733: LD_INT 0
21735: ST_TO_ADDR
// sShield := false ;
21736: LD_ADDR_EXP 97
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// sTime := false ;
21744: LD_ADDR_EXP 98
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// sTools := false ;
21752: LD_ADDR_EXP 99
21756: PUSH
21757: LD_INT 0
21759: ST_TO_ADDR
// sSold := false ;
21760: LD_ADDR_EXP 64
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
// sDiff := false ;
21768: LD_ADDR_EXP 65
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// sFog := false ;
21776: LD_ADDR_EXP 68
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// sReset := false ;
21784: LD_ADDR_EXP 69
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// sSun := false ;
21792: LD_ADDR_EXP 70
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// sTiger := false ;
21800: LD_ADDR_EXP 66
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// sBomb := false ;
21808: LD_ADDR_EXP 67
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// sWound := false ;
21816: LD_ADDR_EXP 75
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// sBetray := false ;
21824: LD_ADDR_EXP 79
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// sContamin := false ;
21832: LD_ADDR_EXP 80
21836: PUSH
21837: LD_INT 0
21839: ST_TO_ADDR
// sOil := false ;
21840: LD_ADDR_EXP 82
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
// sStu := false ;
21848: LD_ADDR_EXP 86
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// sBazooka := false ;
21856: LD_ADDR_EXP 89
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// sMortar := false ;
21864: LD_ADDR_EXP 90
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// sRanger := false ;
21872: LD_ADDR_EXP 100
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// sComputer := false ;
21880: LD_ADDR_EXP 101
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// s30 := false ;
21888: LD_ADDR_EXP 102
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// s60 := false ;
21896: LD_ADDR_EXP 103
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// end ;
21904: LD_VAR 0 1
21908: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21909: LD_INT 0
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
// result := [ ] ;
21918: LD_ADDR_VAR 0 2
21922: PUSH
21923: EMPTY
21924: ST_TO_ADDR
// if campaign_id = 1 then
21925: LD_OWVAR 69
21929: PUSH
21930: LD_INT 1
21932: EQUAL
21933: IFFALSE 25099
// begin case mission_number of 1 :
21935: LD_OWVAR 70
21939: PUSH
21940: LD_INT 1
21942: DOUBLE
21943: EQUAL
21944: IFTRUE 21948
21946: GO 22024
21948: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21949: LD_ADDR_VAR 0 2
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 4
21959: PUSH
21960: LD_INT 11
21962: PUSH
21963: LD_INT 12
21965: PUSH
21966: LD_INT 15
21968: PUSH
21969: LD_INT 16
21971: PUSH
21972: LD_INT 22
21974: PUSH
21975: LD_INT 23
21977: PUSH
21978: LD_INT 26
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 101
21994: PUSH
21995: LD_INT 102
21997: PUSH
21998: LD_INT 106
22000: PUSH
22001: LD_INT 116
22003: PUSH
22004: LD_INT 117
22006: PUSH
22007: LD_INT 118
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: ST_TO_ADDR
22022: GO 25097
22024: LD_INT 2
22026: DOUBLE
22027: EQUAL
22028: IFTRUE 22032
22030: GO 22116
22032: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22033: LD_ADDR_VAR 0 2
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: LD_INT 4
22043: PUSH
22044: LD_INT 11
22046: PUSH
22047: LD_INT 12
22049: PUSH
22050: LD_INT 15
22052: PUSH
22053: LD_INT 16
22055: PUSH
22056: LD_INT 22
22058: PUSH
22059: LD_INT 23
22061: PUSH
22062: LD_INT 26
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 101
22078: PUSH
22079: LD_INT 102
22081: PUSH
22082: LD_INT 105
22084: PUSH
22085: LD_INT 106
22087: PUSH
22088: LD_INT 108
22090: PUSH
22091: LD_INT 116
22093: PUSH
22094: LD_INT 117
22096: PUSH
22097: LD_INT 118
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: ST_TO_ADDR
22114: GO 25097
22116: LD_INT 3
22118: DOUBLE
22119: EQUAL
22120: IFTRUE 22124
22122: GO 22212
22124: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_INT 2
22132: PUSH
22133: LD_INT 4
22135: PUSH
22136: LD_INT 5
22138: PUSH
22139: LD_INT 11
22141: PUSH
22142: LD_INT 12
22144: PUSH
22145: LD_INT 15
22147: PUSH
22148: LD_INT 16
22150: PUSH
22151: LD_INT 22
22153: PUSH
22154: LD_INT 26
22156: PUSH
22157: LD_INT 36
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 101
22174: PUSH
22175: LD_INT 102
22177: PUSH
22178: LD_INT 105
22180: PUSH
22181: LD_INT 106
22183: PUSH
22184: LD_INT 108
22186: PUSH
22187: LD_INT 116
22189: PUSH
22190: LD_INT 117
22192: PUSH
22193: LD_INT 118
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 25097
22212: LD_INT 4
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22316
22220: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 8
22237: PUSH
22238: LD_INT 11
22240: PUSH
22241: LD_INT 12
22243: PUSH
22244: LD_INT 15
22246: PUSH
22247: LD_INT 16
22249: PUSH
22250: LD_INT 22
22252: PUSH
22253: LD_INT 23
22255: PUSH
22256: LD_INT 26
22258: PUSH
22259: LD_INT 36
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 101
22278: PUSH
22279: LD_INT 102
22281: PUSH
22282: LD_INT 105
22284: PUSH
22285: LD_INT 106
22287: PUSH
22288: LD_INT 108
22290: PUSH
22291: LD_INT 116
22293: PUSH
22294: LD_INT 117
22296: PUSH
22297: LD_INT 118
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: ST_TO_ADDR
22314: GO 25097
22316: LD_INT 5
22318: DOUBLE
22319: EQUAL
22320: IFTRUE 22324
22322: GO 22436
22324: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22325: LD_ADDR_VAR 0 2
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: LD_INT 4
22335: PUSH
22336: LD_INT 5
22338: PUSH
22339: LD_INT 6
22341: PUSH
22342: LD_INT 8
22344: PUSH
22345: LD_INT 11
22347: PUSH
22348: LD_INT 12
22350: PUSH
22351: LD_INT 15
22353: PUSH
22354: LD_INT 16
22356: PUSH
22357: LD_INT 22
22359: PUSH
22360: LD_INT 23
22362: PUSH
22363: LD_INT 25
22365: PUSH
22366: LD_INT 26
22368: PUSH
22369: LD_INT 36
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 101
22390: PUSH
22391: LD_INT 102
22393: PUSH
22394: LD_INT 105
22396: PUSH
22397: LD_INT 106
22399: PUSH
22400: LD_INT 108
22402: PUSH
22403: LD_INT 109
22405: PUSH
22406: LD_INT 112
22408: PUSH
22409: LD_INT 116
22411: PUSH
22412: LD_INT 117
22414: PUSH
22415: LD_INT 118
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: ST_TO_ADDR
22434: GO 25097
22436: LD_INT 6
22438: DOUBLE
22439: EQUAL
22440: IFTRUE 22444
22442: GO 22576
22444: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22445: LD_ADDR_VAR 0 2
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 4
22455: PUSH
22456: LD_INT 5
22458: PUSH
22459: LD_INT 6
22461: PUSH
22462: LD_INT 8
22464: PUSH
22465: LD_INT 11
22467: PUSH
22468: LD_INT 12
22470: PUSH
22471: LD_INT 15
22473: PUSH
22474: LD_INT 16
22476: PUSH
22477: LD_INT 20
22479: PUSH
22480: LD_INT 21
22482: PUSH
22483: LD_INT 22
22485: PUSH
22486: LD_INT 23
22488: PUSH
22489: LD_INT 25
22491: PUSH
22492: LD_INT 26
22494: PUSH
22495: LD_INT 30
22497: PUSH
22498: LD_INT 31
22500: PUSH
22501: LD_INT 32
22503: PUSH
22504: LD_INT 36
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 101
22530: PUSH
22531: LD_INT 102
22533: PUSH
22534: LD_INT 105
22536: PUSH
22537: LD_INT 106
22539: PUSH
22540: LD_INT 108
22542: PUSH
22543: LD_INT 109
22545: PUSH
22546: LD_INT 112
22548: PUSH
22549: LD_INT 116
22551: PUSH
22552: LD_INT 117
22554: PUSH
22555: LD_INT 118
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: ST_TO_ADDR
22574: GO 25097
22576: LD_INT 7
22578: DOUBLE
22579: EQUAL
22580: IFTRUE 22584
22582: GO 22696
22584: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: LD_INT 4
22595: PUSH
22596: LD_INT 5
22598: PUSH
22599: LD_INT 7
22601: PUSH
22602: LD_INT 11
22604: PUSH
22605: LD_INT 12
22607: PUSH
22608: LD_INT 15
22610: PUSH
22611: LD_INT 16
22613: PUSH
22614: LD_INT 20
22616: PUSH
22617: LD_INT 21
22619: PUSH
22620: LD_INT 22
22622: PUSH
22623: LD_INT 23
22625: PUSH
22626: LD_INT 25
22628: PUSH
22629: LD_INT 26
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 101
22650: PUSH
22651: LD_INT 102
22653: PUSH
22654: LD_INT 103
22656: PUSH
22657: LD_INT 105
22659: PUSH
22660: LD_INT 106
22662: PUSH
22663: LD_INT 108
22665: PUSH
22666: LD_INT 112
22668: PUSH
22669: LD_INT 116
22671: PUSH
22672: LD_INT 117
22674: PUSH
22675: LD_INT 118
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: ST_TO_ADDR
22694: GO 25097
22696: LD_INT 8
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22844
22704: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 4
22715: PUSH
22716: LD_INT 5
22718: PUSH
22719: LD_INT 6
22721: PUSH
22722: LD_INT 7
22724: PUSH
22725: LD_INT 8
22727: PUSH
22728: LD_INT 11
22730: PUSH
22731: LD_INT 12
22733: PUSH
22734: LD_INT 15
22736: PUSH
22737: LD_INT 16
22739: PUSH
22740: LD_INT 20
22742: PUSH
22743: LD_INT 21
22745: PUSH
22746: LD_INT 22
22748: PUSH
22749: LD_INT 23
22751: PUSH
22752: LD_INT 25
22754: PUSH
22755: LD_INT 26
22757: PUSH
22758: LD_INT 30
22760: PUSH
22761: LD_INT 31
22763: PUSH
22764: LD_INT 32
22766: PUSH
22767: LD_INT 36
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 101
22794: PUSH
22795: LD_INT 102
22797: PUSH
22798: LD_INT 103
22800: PUSH
22801: LD_INT 105
22803: PUSH
22804: LD_INT 106
22806: PUSH
22807: LD_INT 108
22809: PUSH
22810: LD_INT 109
22812: PUSH
22813: LD_INT 112
22815: PUSH
22816: LD_INT 116
22818: PUSH
22819: LD_INT 117
22821: PUSH
22822: LD_INT 118
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: ST_TO_ADDR
22842: GO 25097
22844: LD_INT 9
22846: DOUBLE
22847: EQUAL
22848: IFTRUE 22852
22850: GO 23000
22852: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22853: LD_ADDR_VAR 0 2
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: LD_INT 4
22863: PUSH
22864: LD_INT 5
22866: PUSH
22867: LD_INT 6
22869: PUSH
22870: LD_INT 7
22872: PUSH
22873: LD_INT 8
22875: PUSH
22876: LD_INT 11
22878: PUSH
22879: LD_INT 12
22881: PUSH
22882: LD_INT 15
22884: PUSH
22885: LD_INT 16
22887: PUSH
22888: LD_INT 20
22890: PUSH
22891: LD_INT 21
22893: PUSH
22894: LD_INT 22
22896: PUSH
22897: LD_INT 23
22899: PUSH
22900: LD_INT 25
22902: PUSH
22903: LD_INT 26
22905: PUSH
22906: LD_INT 28
22908: PUSH
22909: LD_INT 30
22911: PUSH
22912: LD_INT 31
22914: PUSH
22915: LD_INT 32
22917: PUSH
22918: LD_INT 36
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 101
22946: PUSH
22947: LD_INT 102
22949: PUSH
22950: LD_INT 103
22952: PUSH
22953: LD_INT 105
22955: PUSH
22956: LD_INT 106
22958: PUSH
22959: LD_INT 108
22961: PUSH
22962: LD_INT 109
22964: PUSH
22965: LD_INT 112
22967: PUSH
22968: LD_INT 114
22970: PUSH
22971: LD_INT 116
22973: PUSH
22974: LD_INT 117
22976: PUSH
22977: LD_INT 118
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: ST_TO_ADDR
22998: GO 25097
23000: LD_INT 10
23002: DOUBLE
23003: EQUAL
23004: IFTRUE 23008
23006: GO 23204
23008: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 4
23019: PUSH
23020: LD_INT 5
23022: PUSH
23023: LD_INT 6
23025: PUSH
23026: LD_INT 7
23028: PUSH
23029: LD_INT 8
23031: PUSH
23032: LD_INT 9
23034: PUSH
23035: LD_INT 10
23037: PUSH
23038: LD_INT 11
23040: PUSH
23041: LD_INT 12
23043: PUSH
23044: LD_INT 13
23046: PUSH
23047: LD_INT 14
23049: PUSH
23050: LD_INT 15
23052: PUSH
23053: LD_INT 16
23055: PUSH
23056: LD_INT 17
23058: PUSH
23059: LD_INT 18
23061: PUSH
23062: LD_INT 19
23064: PUSH
23065: LD_INT 20
23067: PUSH
23068: LD_INT 21
23070: PUSH
23071: LD_INT 22
23073: PUSH
23074: LD_INT 23
23076: PUSH
23077: LD_INT 24
23079: PUSH
23080: LD_INT 25
23082: PUSH
23083: LD_INT 26
23085: PUSH
23086: LD_INT 28
23088: PUSH
23089: LD_INT 30
23091: PUSH
23092: LD_INT 31
23094: PUSH
23095: LD_INT 32
23097: PUSH
23098: LD_INT 36
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 101
23134: PUSH
23135: LD_INT 102
23137: PUSH
23138: LD_INT 103
23140: PUSH
23141: LD_INT 104
23143: PUSH
23144: LD_INT 105
23146: PUSH
23147: LD_INT 106
23149: PUSH
23150: LD_INT 107
23152: PUSH
23153: LD_INT 108
23155: PUSH
23156: LD_INT 109
23158: PUSH
23159: LD_INT 110
23161: PUSH
23162: LD_INT 111
23164: PUSH
23165: LD_INT 112
23167: PUSH
23168: LD_INT 114
23170: PUSH
23171: LD_INT 116
23173: PUSH
23174: LD_INT 117
23176: PUSH
23177: LD_INT 118
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: ST_TO_ADDR
23202: GO 25097
23204: LD_INT 11
23206: DOUBLE
23207: EQUAL
23208: IFTRUE 23212
23210: GO 23416
23212: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23213: LD_ADDR_VAR 0 2
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: LD_INT 4
23226: PUSH
23227: LD_INT 5
23229: PUSH
23230: LD_INT 6
23232: PUSH
23233: LD_INT 7
23235: PUSH
23236: LD_INT 8
23238: PUSH
23239: LD_INT 9
23241: PUSH
23242: LD_INT 10
23244: PUSH
23245: LD_INT 11
23247: PUSH
23248: LD_INT 12
23250: PUSH
23251: LD_INT 13
23253: PUSH
23254: LD_INT 14
23256: PUSH
23257: LD_INT 15
23259: PUSH
23260: LD_INT 16
23262: PUSH
23263: LD_INT 17
23265: PUSH
23266: LD_INT 18
23268: PUSH
23269: LD_INT 19
23271: PUSH
23272: LD_INT 20
23274: PUSH
23275: LD_INT 21
23277: PUSH
23278: LD_INT 22
23280: PUSH
23281: LD_INT 23
23283: PUSH
23284: LD_INT 24
23286: PUSH
23287: LD_INT 25
23289: PUSH
23290: LD_INT 26
23292: PUSH
23293: LD_INT 28
23295: PUSH
23296: LD_INT 30
23298: PUSH
23299: LD_INT 31
23301: PUSH
23302: LD_INT 32
23304: PUSH
23305: LD_INT 34
23307: PUSH
23308: LD_INT 36
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 101
23346: PUSH
23347: LD_INT 102
23349: PUSH
23350: LD_INT 103
23352: PUSH
23353: LD_INT 104
23355: PUSH
23356: LD_INT 105
23358: PUSH
23359: LD_INT 106
23361: PUSH
23362: LD_INT 107
23364: PUSH
23365: LD_INT 108
23367: PUSH
23368: LD_INT 109
23370: PUSH
23371: LD_INT 110
23373: PUSH
23374: LD_INT 111
23376: PUSH
23377: LD_INT 112
23379: PUSH
23380: LD_INT 114
23382: PUSH
23383: LD_INT 116
23385: PUSH
23386: LD_INT 117
23388: PUSH
23389: LD_INT 118
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: ST_TO_ADDR
23414: GO 25097
23416: LD_INT 12
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23644
23424: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: LD_INT 2
23435: PUSH
23436: LD_INT 3
23438: PUSH
23439: LD_INT 4
23441: PUSH
23442: LD_INT 5
23444: PUSH
23445: LD_INT 6
23447: PUSH
23448: LD_INT 7
23450: PUSH
23451: LD_INT 8
23453: PUSH
23454: LD_INT 9
23456: PUSH
23457: LD_INT 10
23459: PUSH
23460: LD_INT 11
23462: PUSH
23463: LD_INT 12
23465: PUSH
23466: LD_INT 13
23468: PUSH
23469: LD_INT 14
23471: PUSH
23472: LD_INT 15
23474: PUSH
23475: LD_INT 16
23477: PUSH
23478: LD_INT 17
23480: PUSH
23481: LD_INT 18
23483: PUSH
23484: LD_INT 19
23486: PUSH
23487: LD_INT 20
23489: PUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 22
23495: PUSH
23496: LD_INT 23
23498: PUSH
23499: LD_INT 24
23501: PUSH
23502: LD_INT 25
23504: PUSH
23505: LD_INT 26
23507: PUSH
23508: LD_INT 27
23510: PUSH
23511: LD_INT 28
23513: PUSH
23514: LD_INT 30
23516: PUSH
23517: LD_INT 31
23519: PUSH
23520: LD_INT 32
23522: PUSH
23523: LD_INT 33
23525: PUSH
23526: LD_INT 34
23528: PUSH
23529: LD_INT 36
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 101
23570: PUSH
23571: LD_INT 102
23573: PUSH
23574: LD_INT 103
23576: PUSH
23577: LD_INT 104
23579: PUSH
23580: LD_INT 105
23582: PUSH
23583: LD_INT 106
23585: PUSH
23586: LD_INT 107
23588: PUSH
23589: LD_INT 108
23591: PUSH
23592: LD_INT 109
23594: PUSH
23595: LD_INT 110
23597: PUSH
23598: LD_INT 111
23600: PUSH
23601: LD_INT 112
23603: PUSH
23604: LD_INT 113
23606: PUSH
23607: LD_INT 114
23609: PUSH
23610: LD_INT 116
23612: PUSH
23613: LD_INT 117
23615: PUSH
23616: LD_INT 118
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: ST_TO_ADDR
23642: GO 25097
23644: LD_INT 13
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23860
23652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23653: LD_ADDR_VAR 0 2
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: LD_INT 3
23666: PUSH
23667: LD_INT 4
23669: PUSH
23670: LD_INT 5
23672: PUSH
23673: LD_INT 8
23675: PUSH
23676: LD_INT 9
23678: PUSH
23679: LD_INT 10
23681: PUSH
23682: LD_INT 11
23684: PUSH
23685: LD_INT 12
23687: PUSH
23688: LD_INT 14
23690: PUSH
23691: LD_INT 15
23693: PUSH
23694: LD_INT 16
23696: PUSH
23697: LD_INT 17
23699: PUSH
23700: LD_INT 18
23702: PUSH
23703: LD_INT 19
23705: PUSH
23706: LD_INT 20
23708: PUSH
23709: LD_INT 21
23711: PUSH
23712: LD_INT 22
23714: PUSH
23715: LD_INT 23
23717: PUSH
23718: LD_INT 24
23720: PUSH
23721: LD_INT 25
23723: PUSH
23724: LD_INT 26
23726: PUSH
23727: LD_INT 27
23729: PUSH
23730: LD_INT 28
23732: PUSH
23733: LD_INT 30
23735: PUSH
23736: LD_INT 31
23738: PUSH
23739: LD_INT 32
23741: PUSH
23742: LD_INT 33
23744: PUSH
23745: LD_INT 34
23747: PUSH
23748: LD_INT 36
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 101
23786: PUSH
23787: LD_INT 102
23789: PUSH
23790: LD_INT 103
23792: PUSH
23793: LD_INT 104
23795: PUSH
23796: LD_INT 105
23798: PUSH
23799: LD_INT 106
23801: PUSH
23802: LD_INT 107
23804: PUSH
23805: LD_INT 108
23807: PUSH
23808: LD_INT 109
23810: PUSH
23811: LD_INT 110
23813: PUSH
23814: LD_INT 111
23816: PUSH
23817: LD_INT 112
23819: PUSH
23820: LD_INT 113
23822: PUSH
23823: LD_INT 114
23825: PUSH
23826: LD_INT 116
23828: PUSH
23829: LD_INT 117
23831: PUSH
23832: LD_INT 118
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: ST_TO_ADDR
23858: GO 25097
23860: LD_INT 14
23862: DOUBLE
23863: EQUAL
23864: IFTRUE 23868
23866: GO 24092
23868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23869: LD_ADDR_VAR 0 2
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: LD_INT 3
23882: PUSH
23883: LD_INT 4
23885: PUSH
23886: LD_INT 5
23888: PUSH
23889: LD_INT 6
23891: PUSH
23892: LD_INT 7
23894: PUSH
23895: LD_INT 8
23897: PUSH
23898: LD_INT 9
23900: PUSH
23901: LD_INT 10
23903: PUSH
23904: LD_INT 11
23906: PUSH
23907: LD_INT 12
23909: PUSH
23910: LD_INT 13
23912: PUSH
23913: LD_INT 14
23915: PUSH
23916: LD_INT 15
23918: PUSH
23919: LD_INT 16
23921: PUSH
23922: LD_INT 17
23924: PUSH
23925: LD_INT 18
23927: PUSH
23928: LD_INT 19
23930: PUSH
23931: LD_INT 20
23933: PUSH
23934: LD_INT 21
23936: PUSH
23937: LD_INT 22
23939: PUSH
23940: LD_INT 23
23942: PUSH
23943: LD_INT 24
23945: PUSH
23946: LD_INT 25
23948: PUSH
23949: LD_INT 26
23951: PUSH
23952: LD_INT 27
23954: PUSH
23955: LD_INT 28
23957: PUSH
23958: LD_INT 29
23960: PUSH
23961: LD_INT 30
23963: PUSH
23964: LD_INT 31
23966: PUSH
23967: LD_INT 32
23969: PUSH
23970: LD_INT 33
23972: PUSH
23973: LD_INT 34
23975: PUSH
23976: LD_INT 36
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 101
24018: PUSH
24019: LD_INT 102
24021: PUSH
24022: LD_INT 103
24024: PUSH
24025: LD_INT 104
24027: PUSH
24028: LD_INT 105
24030: PUSH
24031: LD_INT 106
24033: PUSH
24034: LD_INT 107
24036: PUSH
24037: LD_INT 108
24039: PUSH
24040: LD_INT 109
24042: PUSH
24043: LD_INT 110
24045: PUSH
24046: LD_INT 111
24048: PUSH
24049: LD_INT 112
24051: PUSH
24052: LD_INT 113
24054: PUSH
24055: LD_INT 114
24057: PUSH
24058: LD_INT 116
24060: PUSH
24061: LD_INT 117
24063: PUSH
24064: LD_INT 118
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: ST_TO_ADDR
24090: GO 25097
24092: LD_INT 15
24094: DOUBLE
24095: EQUAL
24096: IFTRUE 24100
24098: GO 24324
24100: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24101: LD_ADDR_VAR 0 2
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: LD_INT 2
24111: PUSH
24112: LD_INT 3
24114: PUSH
24115: LD_INT 4
24117: PUSH
24118: LD_INT 5
24120: PUSH
24121: LD_INT 6
24123: PUSH
24124: LD_INT 7
24126: PUSH
24127: LD_INT 8
24129: PUSH
24130: LD_INT 9
24132: PUSH
24133: LD_INT 10
24135: PUSH
24136: LD_INT 11
24138: PUSH
24139: LD_INT 12
24141: PUSH
24142: LD_INT 13
24144: PUSH
24145: LD_INT 14
24147: PUSH
24148: LD_INT 15
24150: PUSH
24151: LD_INT 16
24153: PUSH
24154: LD_INT 17
24156: PUSH
24157: LD_INT 18
24159: PUSH
24160: LD_INT 19
24162: PUSH
24163: LD_INT 20
24165: PUSH
24166: LD_INT 21
24168: PUSH
24169: LD_INT 22
24171: PUSH
24172: LD_INT 23
24174: PUSH
24175: LD_INT 24
24177: PUSH
24178: LD_INT 25
24180: PUSH
24181: LD_INT 26
24183: PUSH
24184: LD_INT 27
24186: PUSH
24187: LD_INT 28
24189: PUSH
24190: LD_INT 29
24192: PUSH
24193: LD_INT 30
24195: PUSH
24196: LD_INT 31
24198: PUSH
24199: LD_INT 32
24201: PUSH
24202: LD_INT 33
24204: PUSH
24205: LD_INT 34
24207: PUSH
24208: LD_INT 36
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 101
24250: PUSH
24251: LD_INT 102
24253: PUSH
24254: LD_INT 103
24256: PUSH
24257: LD_INT 104
24259: PUSH
24260: LD_INT 105
24262: PUSH
24263: LD_INT 106
24265: PUSH
24266: LD_INT 107
24268: PUSH
24269: LD_INT 108
24271: PUSH
24272: LD_INT 109
24274: PUSH
24275: LD_INT 110
24277: PUSH
24278: LD_INT 111
24280: PUSH
24281: LD_INT 112
24283: PUSH
24284: LD_INT 113
24286: PUSH
24287: LD_INT 114
24289: PUSH
24290: LD_INT 116
24292: PUSH
24293: LD_INT 117
24295: PUSH
24296: LD_INT 118
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: ST_TO_ADDR
24322: GO 25097
24324: LD_INT 16
24326: DOUBLE
24327: EQUAL
24328: IFTRUE 24332
24330: GO 24468
24332: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_INT 2
24340: PUSH
24341: LD_INT 4
24343: PUSH
24344: LD_INT 5
24346: PUSH
24347: LD_INT 7
24349: PUSH
24350: LD_INT 11
24352: PUSH
24353: LD_INT 12
24355: PUSH
24356: LD_INT 15
24358: PUSH
24359: LD_INT 16
24361: PUSH
24362: LD_INT 20
24364: PUSH
24365: LD_INT 21
24367: PUSH
24368: LD_INT 22
24370: PUSH
24371: LD_INT 23
24373: PUSH
24374: LD_INT 25
24376: PUSH
24377: LD_INT 26
24379: PUSH
24380: LD_INT 30
24382: PUSH
24383: LD_INT 31
24385: PUSH
24386: LD_INT 32
24388: PUSH
24389: LD_INT 33
24391: PUSH
24392: LD_INT 34
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 101
24418: PUSH
24419: LD_INT 102
24421: PUSH
24422: LD_INT 103
24424: PUSH
24425: LD_INT 106
24427: PUSH
24428: LD_INT 108
24430: PUSH
24431: LD_INT 112
24433: PUSH
24434: LD_INT 113
24436: PUSH
24437: LD_INT 114
24439: PUSH
24440: LD_INT 116
24442: PUSH
24443: LD_INT 117
24445: PUSH
24446: LD_INT 118
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: ST_TO_ADDR
24466: GO 25097
24468: LD_INT 17
24470: DOUBLE
24471: EQUAL
24472: IFTRUE 24476
24474: GO 24700
24476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24477: LD_ADDR_VAR 0 2
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: LD_INT 2
24487: PUSH
24488: LD_INT 3
24490: PUSH
24491: LD_INT 4
24493: PUSH
24494: LD_INT 5
24496: PUSH
24497: LD_INT 6
24499: PUSH
24500: LD_INT 7
24502: PUSH
24503: LD_INT 8
24505: PUSH
24506: LD_INT 9
24508: PUSH
24509: LD_INT 10
24511: PUSH
24512: LD_INT 11
24514: PUSH
24515: LD_INT 12
24517: PUSH
24518: LD_INT 13
24520: PUSH
24521: LD_INT 14
24523: PUSH
24524: LD_INT 15
24526: PUSH
24527: LD_INT 16
24529: PUSH
24530: LD_INT 17
24532: PUSH
24533: LD_INT 18
24535: PUSH
24536: LD_INT 19
24538: PUSH
24539: LD_INT 20
24541: PUSH
24542: LD_INT 21
24544: PUSH
24545: LD_INT 22
24547: PUSH
24548: LD_INT 23
24550: PUSH
24551: LD_INT 24
24553: PUSH
24554: LD_INT 25
24556: PUSH
24557: LD_INT 26
24559: PUSH
24560: LD_INT 27
24562: PUSH
24563: LD_INT 28
24565: PUSH
24566: LD_INT 29
24568: PUSH
24569: LD_INT 30
24571: PUSH
24572: LD_INT 31
24574: PUSH
24575: LD_INT 32
24577: PUSH
24578: LD_INT 33
24580: PUSH
24581: LD_INT 34
24583: PUSH
24584: LD_INT 36
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 101
24626: PUSH
24627: LD_INT 102
24629: PUSH
24630: LD_INT 103
24632: PUSH
24633: LD_INT 104
24635: PUSH
24636: LD_INT 105
24638: PUSH
24639: LD_INT 106
24641: PUSH
24642: LD_INT 107
24644: PUSH
24645: LD_INT 108
24647: PUSH
24648: LD_INT 109
24650: PUSH
24651: LD_INT 110
24653: PUSH
24654: LD_INT 111
24656: PUSH
24657: LD_INT 112
24659: PUSH
24660: LD_INT 113
24662: PUSH
24663: LD_INT 114
24665: PUSH
24666: LD_INT 116
24668: PUSH
24669: LD_INT 117
24671: PUSH
24672: LD_INT 118
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: ST_TO_ADDR
24698: GO 25097
24700: LD_INT 18
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24856
24708: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24709: LD_ADDR_VAR 0 2
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: LD_INT 4
24719: PUSH
24720: LD_INT 5
24722: PUSH
24723: LD_INT 7
24725: PUSH
24726: LD_INT 11
24728: PUSH
24729: LD_INT 12
24731: PUSH
24732: LD_INT 15
24734: PUSH
24735: LD_INT 16
24737: PUSH
24738: LD_INT 20
24740: PUSH
24741: LD_INT 21
24743: PUSH
24744: LD_INT 22
24746: PUSH
24747: LD_INT 23
24749: PUSH
24750: LD_INT 25
24752: PUSH
24753: LD_INT 26
24755: PUSH
24756: LD_INT 30
24758: PUSH
24759: LD_INT 31
24761: PUSH
24762: LD_INT 32
24764: PUSH
24765: LD_INT 33
24767: PUSH
24768: LD_INT 34
24770: PUSH
24771: LD_INT 35
24773: PUSH
24774: LD_INT 36
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 101
24802: PUSH
24803: LD_INT 102
24805: PUSH
24806: LD_INT 103
24808: PUSH
24809: LD_INT 106
24811: PUSH
24812: LD_INT 108
24814: PUSH
24815: LD_INT 112
24817: PUSH
24818: LD_INT 113
24820: PUSH
24821: LD_INT 114
24823: PUSH
24824: LD_INT 115
24826: PUSH
24827: LD_INT 116
24829: PUSH
24830: LD_INT 117
24832: PUSH
24833: LD_INT 118
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: ST_TO_ADDR
24854: GO 25097
24856: LD_INT 19
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 25096
24864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24865: LD_ADDR_VAR 0 2
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: LD_INT 3
24878: PUSH
24879: LD_INT 4
24881: PUSH
24882: LD_INT 5
24884: PUSH
24885: LD_INT 6
24887: PUSH
24888: LD_INT 7
24890: PUSH
24891: LD_INT 8
24893: PUSH
24894: LD_INT 9
24896: PUSH
24897: LD_INT 10
24899: PUSH
24900: LD_INT 11
24902: PUSH
24903: LD_INT 12
24905: PUSH
24906: LD_INT 13
24908: PUSH
24909: LD_INT 14
24911: PUSH
24912: LD_INT 15
24914: PUSH
24915: LD_INT 16
24917: PUSH
24918: LD_INT 17
24920: PUSH
24921: LD_INT 18
24923: PUSH
24924: LD_INT 19
24926: PUSH
24927: LD_INT 20
24929: PUSH
24930: LD_INT 21
24932: PUSH
24933: LD_INT 22
24935: PUSH
24936: LD_INT 23
24938: PUSH
24939: LD_INT 24
24941: PUSH
24942: LD_INT 25
24944: PUSH
24945: LD_INT 26
24947: PUSH
24948: LD_INT 27
24950: PUSH
24951: LD_INT 28
24953: PUSH
24954: LD_INT 29
24956: PUSH
24957: LD_INT 30
24959: PUSH
24960: LD_INT 31
24962: PUSH
24963: LD_INT 32
24965: PUSH
24966: LD_INT 33
24968: PUSH
24969: LD_INT 34
24971: PUSH
24972: LD_INT 35
24974: PUSH
24975: LD_INT 36
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 101
25018: PUSH
25019: LD_INT 102
25021: PUSH
25022: LD_INT 103
25024: PUSH
25025: LD_INT 104
25027: PUSH
25028: LD_INT 105
25030: PUSH
25031: LD_INT 106
25033: PUSH
25034: LD_INT 107
25036: PUSH
25037: LD_INT 108
25039: PUSH
25040: LD_INT 109
25042: PUSH
25043: LD_INT 110
25045: PUSH
25046: LD_INT 111
25048: PUSH
25049: LD_INT 112
25051: PUSH
25052: LD_INT 113
25054: PUSH
25055: LD_INT 114
25057: PUSH
25058: LD_INT 115
25060: PUSH
25061: LD_INT 116
25063: PUSH
25064: LD_INT 117
25066: PUSH
25067: LD_INT 118
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: ST_TO_ADDR
25094: GO 25097
25096: POP
// end else
25097: GO 25328
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25099: LD_ADDR_VAR 0 2
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: LD_INT 2
25109: PUSH
25110: LD_INT 3
25112: PUSH
25113: LD_INT 4
25115: PUSH
25116: LD_INT 5
25118: PUSH
25119: LD_INT 6
25121: PUSH
25122: LD_INT 7
25124: PUSH
25125: LD_INT 8
25127: PUSH
25128: LD_INT 9
25130: PUSH
25131: LD_INT 10
25133: PUSH
25134: LD_INT 11
25136: PUSH
25137: LD_INT 12
25139: PUSH
25140: LD_INT 13
25142: PUSH
25143: LD_INT 14
25145: PUSH
25146: LD_INT 15
25148: PUSH
25149: LD_INT 16
25151: PUSH
25152: LD_INT 17
25154: PUSH
25155: LD_INT 18
25157: PUSH
25158: LD_INT 19
25160: PUSH
25161: LD_INT 20
25163: PUSH
25164: LD_INT 21
25166: PUSH
25167: LD_INT 22
25169: PUSH
25170: LD_INT 23
25172: PUSH
25173: LD_INT 24
25175: PUSH
25176: LD_INT 25
25178: PUSH
25179: LD_INT 26
25181: PUSH
25182: LD_INT 27
25184: PUSH
25185: LD_INT 28
25187: PUSH
25188: LD_INT 29
25190: PUSH
25191: LD_INT 30
25193: PUSH
25194: LD_INT 31
25196: PUSH
25197: LD_INT 32
25199: PUSH
25200: LD_INT 33
25202: PUSH
25203: LD_INT 34
25205: PUSH
25206: LD_INT 35
25208: PUSH
25209: LD_INT 36
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 101
25252: PUSH
25253: LD_INT 102
25255: PUSH
25256: LD_INT 103
25258: PUSH
25259: LD_INT 104
25261: PUSH
25262: LD_INT 105
25264: PUSH
25265: LD_INT 106
25267: PUSH
25268: LD_INT 107
25270: PUSH
25271: LD_INT 108
25273: PUSH
25274: LD_INT 109
25276: PUSH
25277: LD_INT 110
25279: PUSH
25280: LD_INT 111
25282: PUSH
25283: LD_INT 112
25285: PUSH
25286: LD_INT 113
25288: PUSH
25289: LD_INT 114
25291: PUSH
25292: LD_INT 115
25294: PUSH
25295: LD_INT 116
25297: PUSH
25298: LD_INT 117
25300: PUSH
25301: LD_INT 118
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: ST_TO_ADDR
// if result then
25328: LD_VAR 0 2
25332: IFFALSE 26118
// begin normal :=  ;
25334: LD_ADDR_VAR 0 5
25338: PUSH
25339: LD_STRING 
25341: ST_TO_ADDR
// hardcore :=  ;
25342: LD_ADDR_VAR 0 6
25346: PUSH
25347: LD_STRING 
25349: ST_TO_ADDR
// active :=  ;
25350: LD_ADDR_VAR 0 7
25354: PUSH
25355: LD_STRING 
25357: ST_TO_ADDR
// for i = 1 to normalCounter do
25358: LD_ADDR_VAR 0 8
25362: PUSH
25363: DOUBLE
25364: LD_INT 1
25366: DEC
25367: ST_TO_ADDR
25368: LD_EXP 48
25372: PUSH
25373: FOR_TO
25374: IFFALSE 25475
// begin tmp := 0 ;
25376: LD_ADDR_VAR 0 3
25380: PUSH
25381: LD_STRING 0
25383: ST_TO_ADDR
// if result [ 1 ] then
25384: LD_VAR 0 2
25388: PUSH
25389: LD_INT 1
25391: ARRAY
25392: IFFALSE 25457
// if result [ 1 ] [ 1 ] = i then
25394: LD_VAR 0 2
25398: PUSH
25399: LD_INT 1
25401: ARRAY
25402: PUSH
25403: LD_INT 1
25405: ARRAY
25406: PUSH
25407: LD_VAR 0 8
25411: EQUAL
25412: IFFALSE 25457
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25414: LD_ADDR_VAR 0 2
25418: PUSH
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_INT 1
25426: PPUSH
25427: LD_VAR 0 2
25431: PUSH
25432: LD_INT 1
25434: ARRAY
25435: PPUSH
25436: LD_INT 1
25438: PPUSH
25439: CALL_OW 3
25443: PPUSH
25444: CALL_OW 1
25448: ST_TO_ADDR
// tmp := 1 ;
25449: LD_ADDR_VAR 0 3
25453: PUSH
25454: LD_STRING 1
25456: ST_TO_ADDR
// end ; normal := normal & tmp ;
25457: LD_ADDR_VAR 0 5
25461: PUSH
25462: LD_VAR 0 5
25466: PUSH
25467: LD_VAR 0 3
25471: STR
25472: ST_TO_ADDR
// end ;
25473: GO 25373
25475: POP
25476: POP
// for i = 1 to hardcoreCounter do
25477: LD_ADDR_VAR 0 8
25481: PUSH
25482: DOUBLE
25483: LD_INT 1
25485: DEC
25486: ST_TO_ADDR
25487: LD_EXP 49
25491: PUSH
25492: FOR_TO
25493: IFFALSE 25598
// begin tmp := 0 ;
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_STRING 0
25502: ST_TO_ADDR
// if result [ 2 ] then
25503: LD_VAR 0 2
25507: PUSH
25508: LD_INT 2
25510: ARRAY
25511: IFFALSE 25580
// if result [ 2 ] [ 1 ] = 100 + i then
25513: LD_VAR 0 2
25517: PUSH
25518: LD_INT 2
25520: ARRAY
25521: PUSH
25522: LD_INT 1
25524: ARRAY
25525: PUSH
25526: LD_INT 100
25528: PUSH
25529: LD_VAR 0 8
25533: PLUS
25534: EQUAL
25535: IFFALSE 25580
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25537: LD_ADDR_VAR 0 2
25541: PUSH
25542: LD_VAR 0 2
25546: PPUSH
25547: LD_INT 2
25549: PPUSH
25550: LD_VAR 0 2
25554: PUSH
25555: LD_INT 2
25557: ARRAY
25558: PPUSH
25559: LD_INT 1
25561: PPUSH
25562: CALL_OW 3
25566: PPUSH
25567: CALL_OW 1
25571: ST_TO_ADDR
// tmp := 1 ;
25572: LD_ADDR_VAR 0 3
25576: PUSH
25577: LD_STRING 1
25579: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25580: LD_ADDR_VAR 0 6
25584: PUSH
25585: LD_VAR 0 6
25589: PUSH
25590: LD_VAR 0 3
25594: STR
25595: ST_TO_ADDR
// end ;
25596: GO 25492
25598: POP
25599: POP
// if isGameLoad then
25600: LD_VAR 0 1
25604: IFFALSE 26079
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25606: LD_ADDR_VAR 0 4
25610: PUSH
25611: LD_EXP 52
25615: PUSH
25616: LD_EXP 51
25620: PUSH
25621: LD_EXP 53
25625: PUSH
25626: LD_EXP 50
25630: PUSH
25631: LD_EXP 54
25635: PUSH
25636: LD_EXP 55
25640: PUSH
25641: LD_EXP 56
25645: PUSH
25646: LD_EXP 57
25650: PUSH
25651: LD_EXP 58
25655: PUSH
25656: LD_EXP 59
25660: PUSH
25661: LD_EXP 60
25665: PUSH
25666: LD_EXP 61
25670: PUSH
25671: LD_EXP 62
25675: PUSH
25676: LD_EXP 63
25680: PUSH
25681: LD_EXP 71
25685: PUSH
25686: LD_EXP 72
25690: PUSH
25691: LD_EXP 73
25695: PUSH
25696: LD_EXP 74
25700: PUSH
25701: LD_EXP 76
25705: PUSH
25706: LD_EXP 77
25710: PUSH
25711: LD_EXP 78
25715: PUSH
25716: LD_EXP 81
25720: PUSH
25721: LD_EXP 83
25725: PUSH
25726: LD_EXP 84
25730: PUSH
25731: LD_EXP 85
25735: PUSH
25736: LD_EXP 87
25740: PUSH
25741: LD_EXP 88
25745: PUSH
25746: LD_EXP 91
25750: PUSH
25751: LD_EXP 92
25755: PUSH
25756: LD_EXP 93
25760: PUSH
25761: LD_EXP 94
25765: PUSH
25766: LD_EXP 95
25770: PUSH
25771: LD_EXP 96
25775: PUSH
25776: LD_EXP 97
25780: PUSH
25781: LD_EXP 98
25785: PUSH
25786: LD_EXP 99
25790: PUSH
25791: LD_EXP 64
25795: PUSH
25796: LD_EXP 65
25800: PUSH
25801: LD_EXP 68
25805: PUSH
25806: LD_EXP 69
25810: PUSH
25811: LD_EXP 70
25815: PUSH
25816: LD_EXP 66
25820: PUSH
25821: LD_EXP 67
25825: PUSH
25826: LD_EXP 75
25830: PUSH
25831: LD_EXP 79
25835: PUSH
25836: LD_EXP 80
25840: PUSH
25841: LD_EXP 82
25845: PUSH
25846: LD_EXP 86
25850: PUSH
25851: LD_EXP 89
25855: PUSH
25856: LD_EXP 90
25860: PUSH
25861: LD_EXP 100
25865: PUSH
25866: LD_EXP 101
25870: PUSH
25871: LD_EXP 102
25875: PUSH
25876: LD_EXP 103
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: ST_TO_ADDR
// tmp :=  ;
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_STRING 
25944: ST_TO_ADDR
// for i = 1 to normalCounter do
25945: LD_ADDR_VAR 0 8
25949: PUSH
25950: DOUBLE
25951: LD_INT 1
25953: DEC
25954: ST_TO_ADDR
25955: LD_EXP 48
25959: PUSH
25960: FOR_TO
25961: IFFALSE 25997
// begin if flags [ i ] then
25963: LD_VAR 0 4
25967: PUSH
25968: LD_VAR 0 8
25972: ARRAY
25973: IFFALSE 25995
// tmp := tmp & i & ; ;
25975: LD_ADDR_VAR 0 3
25979: PUSH
25980: LD_VAR 0 3
25984: PUSH
25985: LD_VAR 0 8
25989: STR
25990: PUSH
25991: LD_STRING ;
25993: STR
25994: ST_TO_ADDR
// end ;
25995: GO 25960
25997: POP
25998: POP
// for i = 1 to hardcoreCounter do
25999: LD_ADDR_VAR 0 8
26003: PUSH
26004: DOUBLE
26005: LD_INT 1
26007: DEC
26008: ST_TO_ADDR
26009: LD_EXP 49
26013: PUSH
26014: FOR_TO
26015: IFFALSE 26061
// begin if flags [ normalCounter + i ] then
26017: LD_VAR 0 4
26021: PUSH
26022: LD_EXP 48
26026: PUSH
26027: LD_VAR 0 8
26031: PLUS
26032: ARRAY
26033: IFFALSE 26059
// tmp := tmp & ( 100 + i ) & ; ;
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_VAR 0 3
26044: PUSH
26045: LD_INT 100
26047: PUSH
26048: LD_VAR 0 8
26052: PLUS
26053: STR
26054: PUSH
26055: LD_STRING ;
26057: STR
26058: ST_TO_ADDR
// end ;
26059: GO 26014
26061: POP
26062: POP
// if tmp then
26063: LD_VAR 0 3
26067: IFFALSE 26079
// active := tmp ;
26069: LD_ADDR_VAR 0 7
26073: PUSH
26074: LD_VAR 0 3
26078: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26079: LD_STRING getStreamItemsFromMission("
26081: PUSH
26082: LD_VAR 0 5
26086: STR
26087: PUSH
26088: LD_STRING ","
26090: STR
26091: PUSH
26092: LD_VAR 0 6
26096: STR
26097: PUSH
26098: LD_STRING ","
26100: STR
26101: PUSH
26102: LD_VAR 0 7
26106: STR
26107: PUSH
26108: LD_STRING ")
26110: STR
26111: PPUSH
26112: CALL_OW 559
// end else
26116: GO 26125
// ToLua ( getStreamItemsFromMission("","","") ) ;
26118: LD_STRING getStreamItemsFromMission("","","")
26120: PPUSH
26121: CALL_OW 559
// end ;
26125: LD_VAR 0 2
26129: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26130: LD_EXP 47
26134: IFFALSE 26142
26136: PUSH
26137: LD_EXP 52
26141: AND
26142: IFFALSE 26266
26144: GO 26146
26146: DISABLE
26147: LD_INT 0
26149: PPUSH
26150: PPUSH
// begin enable ;
26151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26152: LD_ADDR_VAR 0 2
26156: PUSH
26157: LD_INT 22
26159: PUSH
26160: LD_OWVAR 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 2
26171: PUSH
26172: LD_INT 34
26174: PUSH
26175: LD_INT 7
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 34
26184: PUSH
26185: LD_INT 45
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 34
26194: PUSH
26195: LD_INT 28
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 34
26204: PUSH
26205: LD_INT 47
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PPUSH
26223: CALL_OW 69
26227: ST_TO_ADDR
// if not tmp then
26228: LD_VAR 0 2
26232: NOT
26233: IFFALSE 26237
// exit ;
26235: GO 26266
// for i in tmp do
26237: LD_ADDR_VAR 0 1
26241: PUSH
26242: LD_VAR 0 2
26246: PUSH
26247: FOR_IN
26248: IFFALSE 26264
// begin SetLives ( i , 0 ) ;
26250: LD_VAR 0 1
26254: PPUSH
26255: LD_INT 0
26257: PPUSH
26258: CALL_OW 234
// end ;
26262: GO 26247
26264: POP
26265: POP
// end ;
26266: PPOPN 2
26268: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26269: LD_EXP 47
26273: IFFALSE 26281
26275: PUSH
26276: LD_EXP 53
26280: AND
26281: IFFALSE 26365
26283: GO 26285
26285: DISABLE
26286: LD_INT 0
26288: PPUSH
26289: PPUSH
// begin enable ;
26290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: LD_INT 22
26298: PUSH
26299: LD_OWVAR 2
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 32
26310: PUSH
26311: LD_INT 3
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PPUSH
26322: CALL_OW 69
26326: ST_TO_ADDR
// if not tmp then
26327: LD_VAR 0 2
26331: NOT
26332: IFFALSE 26336
// exit ;
26334: GO 26365
// for i in tmp do
26336: LD_ADDR_VAR 0 1
26340: PUSH
26341: LD_VAR 0 2
26345: PUSH
26346: FOR_IN
26347: IFFALSE 26363
// begin SetLives ( i , 0 ) ;
26349: LD_VAR 0 1
26353: PPUSH
26354: LD_INT 0
26356: PPUSH
26357: CALL_OW 234
// end ;
26361: GO 26346
26363: POP
26364: POP
// end ;
26365: PPOPN 2
26367: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26368: LD_EXP 47
26372: IFFALSE 26380
26374: PUSH
26375: LD_EXP 50
26379: AND
26380: IFFALSE 26473
26382: GO 26384
26384: DISABLE
26385: LD_INT 0
26387: PPUSH
// begin enable ;
26388: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26389: LD_ADDR_VAR 0 1
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_OWVAR 2
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: LD_INT 25
26411: PUSH
26412: LD_INT 5
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 25
26421: PUSH
26422: LD_INT 9
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 25
26431: PUSH
26432: LD_INT 8
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PPUSH
26449: CALL_OW 69
26453: PUSH
26454: FOR_IN
26455: IFFALSE 26471
// begin SetClass ( i , 1 ) ;
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_INT 1
26464: PPUSH
26465: CALL_OW 336
// end ;
26469: GO 26454
26471: POP
26472: POP
// end ;
26473: PPOPN 1
26475: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26476: LD_EXP 47
26480: IFFALSE 26488
26482: PUSH
26483: LD_EXP 51
26487: AND
26488: IFFALSE 26500
26490: PUSH
26491: LD_OWVAR 65
26495: PUSH
26496: LD_INT 7
26498: LESS
26499: AND
26500: IFFALSE 26514
26502: GO 26504
26504: DISABLE
// begin enable ;
26505: ENABLE
// game_speed := 7 ;
26506: LD_ADDR_OWVAR 65
26510: PUSH
26511: LD_INT 7
26513: ST_TO_ADDR
// end ;
26514: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26515: LD_EXP 47
26519: IFFALSE 26527
26521: PUSH
26522: LD_EXP 54
26526: AND
26527: IFFALSE 26729
26529: GO 26531
26531: DISABLE
26532: LD_INT 0
26534: PPUSH
26535: PPUSH
26536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26537: LD_ADDR_VAR 0 3
26541: PUSH
26542: LD_INT 81
26544: PUSH
26545: LD_OWVAR 2
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 21
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PPUSH
26568: CALL_OW 69
26572: ST_TO_ADDR
// if not tmp then
26573: LD_VAR 0 3
26577: NOT
26578: IFFALSE 26582
// exit ;
26580: GO 26729
// if tmp > 5 then
26582: LD_VAR 0 3
26586: PUSH
26587: LD_INT 5
26589: GREATER
26590: IFFALSE 26602
// k := 5 else
26592: LD_ADDR_VAR 0 2
26596: PUSH
26597: LD_INT 5
26599: ST_TO_ADDR
26600: GO 26612
// k := tmp ;
26602: LD_ADDR_VAR 0 2
26606: PUSH
26607: LD_VAR 0 3
26611: ST_TO_ADDR
// for i := 1 to k do
26612: LD_ADDR_VAR 0 1
26616: PUSH
26617: DOUBLE
26618: LD_INT 1
26620: DEC
26621: ST_TO_ADDR
26622: LD_VAR 0 2
26626: PUSH
26627: FOR_TO
26628: IFFALSE 26727
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26630: LD_VAR 0 3
26634: PUSH
26635: LD_VAR 0 1
26639: ARRAY
26640: PPUSH
26641: LD_VAR 0 1
26645: PUSH
26646: LD_INT 4
26648: MOD
26649: PUSH
26650: LD_INT 1
26652: PLUS
26653: PPUSH
26654: CALL_OW 259
26658: PUSH
26659: LD_INT 10
26661: LESS
26662: IFFALSE 26725
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26664: LD_VAR 0 3
26668: PUSH
26669: LD_VAR 0 1
26673: ARRAY
26674: PPUSH
26675: LD_VAR 0 1
26679: PUSH
26680: LD_INT 4
26682: MOD
26683: PUSH
26684: LD_INT 1
26686: PLUS
26687: PPUSH
26688: LD_VAR 0 3
26692: PUSH
26693: LD_VAR 0 1
26697: ARRAY
26698: PPUSH
26699: LD_VAR 0 1
26703: PUSH
26704: LD_INT 4
26706: MOD
26707: PUSH
26708: LD_INT 1
26710: PLUS
26711: PPUSH
26712: CALL_OW 259
26716: PUSH
26717: LD_INT 1
26719: PLUS
26720: PPUSH
26721: CALL_OW 237
26725: GO 26627
26727: POP
26728: POP
// end ;
26729: PPOPN 3
26731: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26732: LD_EXP 47
26736: IFFALSE 26744
26738: PUSH
26739: LD_EXP 55
26743: AND
26744: IFFALSE 26764
26746: GO 26748
26748: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26749: LD_INT 4
26751: PPUSH
26752: LD_OWVAR 2
26756: PPUSH
26757: LD_INT 0
26759: PPUSH
26760: CALL_OW 324
26764: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26765: LD_EXP 47
26769: IFFALSE 26777
26771: PUSH
26772: LD_EXP 84
26776: AND
26777: IFFALSE 26797
26779: GO 26781
26781: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26782: LD_INT 19
26784: PPUSH
26785: LD_OWVAR 2
26789: PPUSH
26790: LD_INT 0
26792: PPUSH
26793: CALL_OW 324
26797: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26798: LD_EXP 47
26802: IFFALSE 26810
26804: PUSH
26805: LD_EXP 56
26809: AND
26810: IFFALSE 26912
26812: GO 26814
26814: DISABLE
26815: LD_INT 0
26817: PPUSH
26818: PPUSH
// begin enable ;
26819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26820: LD_ADDR_VAR 0 2
26824: PUSH
26825: LD_INT 22
26827: PUSH
26828: LD_OWVAR 2
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: LD_INT 34
26842: PUSH
26843: LD_INT 11
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 34
26852: PUSH
26853: LD_INT 30
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PPUSH
26869: CALL_OW 69
26873: ST_TO_ADDR
// if not tmp then
26874: LD_VAR 0 2
26878: NOT
26879: IFFALSE 26883
// exit ;
26881: GO 26912
// for i in tmp do
26883: LD_ADDR_VAR 0 1
26887: PUSH
26888: LD_VAR 0 2
26892: PUSH
26893: FOR_IN
26894: IFFALSE 26910
// begin SetLives ( i , 0 ) ;
26896: LD_VAR 0 1
26900: PPUSH
26901: LD_INT 0
26903: PPUSH
26904: CALL_OW 234
// end ;
26908: GO 26893
26910: POP
26911: POP
// end ;
26912: PPOPN 2
26914: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26915: LD_EXP 47
26919: IFFALSE 26927
26921: PUSH
26922: LD_EXP 57
26926: AND
26927: IFFALSE 26947
26929: GO 26931
26931: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26932: LD_INT 32
26934: PPUSH
26935: LD_OWVAR 2
26939: PPUSH
26940: LD_INT 0
26942: PPUSH
26943: CALL_OW 324
26947: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26948: LD_EXP 47
26952: IFFALSE 26960
26954: PUSH
26955: LD_EXP 58
26959: AND
26960: IFFALSE 27143
26962: GO 26964
26964: DISABLE
26965: LD_INT 0
26967: PPUSH
26968: PPUSH
26969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26970: LD_ADDR_VAR 0 2
26974: PUSH
26975: LD_INT 22
26977: PUSH
26978: LD_OWVAR 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 33
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PPUSH
27001: CALL_OW 69
27005: ST_TO_ADDR
// if not tmp then
27006: LD_VAR 0 2
27010: NOT
27011: IFFALSE 27015
// exit ;
27013: GO 27143
// side := 0 ;
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_INT 0
27022: ST_TO_ADDR
// for i := 1 to 8 do
27023: LD_ADDR_VAR 0 1
27027: PUSH
27028: DOUBLE
27029: LD_INT 1
27031: DEC
27032: ST_TO_ADDR
27033: LD_INT 8
27035: PUSH
27036: FOR_TO
27037: IFFALSE 27087
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27039: LD_OWVAR 2
27043: PUSH
27044: LD_VAR 0 1
27048: NONEQUAL
27049: IFFALSE 27071
27051: PUSH
27052: LD_OWVAR 2
27056: PPUSH
27057: LD_VAR 0 1
27061: PPUSH
27062: CALL_OW 81
27066: PUSH
27067: LD_INT 2
27069: EQUAL
27070: AND
27071: IFFALSE 27085
// begin side := i ;
27073: LD_ADDR_VAR 0 3
27077: PUSH
27078: LD_VAR 0 1
27082: ST_TO_ADDR
// break ;
27083: GO 27087
// end ;
27085: GO 27036
27087: POP
27088: POP
// if not side then
27089: LD_VAR 0 3
27093: NOT
27094: IFFALSE 27098
// exit ;
27096: GO 27143
// for i := 1 to tmp do
27098: LD_ADDR_VAR 0 1
27102: PUSH
27103: DOUBLE
27104: LD_INT 1
27106: DEC
27107: ST_TO_ADDR
27108: LD_VAR 0 2
27112: PUSH
27113: FOR_TO
27114: IFFALSE 27141
// if Prob ( 60 ) then
27116: LD_INT 60
27118: PPUSH
27119: CALL_OW 13
27123: IFFALSE 27139
// SetSide ( i , side ) ;
27125: LD_VAR 0 1
27129: PPUSH
27130: LD_VAR 0 3
27134: PPUSH
27135: CALL_OW 235
27139: GO 27113
27141: POP
27142: POP
// end ;
27143: PPOPN 3
27145: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27146: LD_EXP 47
27150: IFFALSE 27158
27152: PUSH
27153: LD_EXP 60
27157: AND
27158: IFFALSE 27277
27160: GO 27162
27162: DISABLE
27163: LD_INT 0
27165: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27166: LD_ADDR_VAR 0 1
27170: PUSH
27171: LD_INT 22
27173: PUSH
27174: LD_OWVAR 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 21
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 3
27195: PUSH
27196: LD_INT 23
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: LIST
27214: PPUSH
27215: CALL_OW 69
27219: PUSH
27220: FOR_IN
27221: IFFALSE 27275
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27223: LD_VAR 0 1
27227: PPUSH
27228: CALL_OW 257
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: LD_INT 4
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: IN
27251: IFFALSE 27273
// SetClass ( un , rand ( 1 , 4 ) ) ;
27253: LD_VAR 0 1
27257: PPUSH
27258: LD_INT 1
27260: PPUSH
27261: LD_INT 4
27263: PPUSH
27264: CALL_OW 12
27268: PPUSH
27269: CALL_OW 336
27273: GO 27220
27275: POP
27276: POP
// end ;
27277: PPOPN 1
27279: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27280: LD_EXP 47
27284: IFFALSE 27292
27286: PUSH
27287: LD_EXP 59
27291: AND
27292: IFFALSE 27371
27294: GO 27296
27296: DISABLE
27297: LD_INT 0
27299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_INT 22
27307: PUSH
27308: LD_OWVAR 2
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 21
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PPUSH
27331: CALL_OW 69
27335: ST_TO_ADDR
// if not tmp then
27336: LD_VAR 0 1
27340: NOT
27341: IFFALSE 27345
// exit ;
27343: GO 27371
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27345: LD_VAR 0 1
27349: PUSH
27350: LD_INT 1
27352: PPUSH
27353: LD_VAR 0 1
27357: PPUSH
27358: CALL_OW 12
27362: ARRAY
27363: PPUSH
27364: LD_INT 100
27366: PPUSH
27367: CALL_OW 234
// end ;
27371: PPOPN 1
27373: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27374: LD_EXP 47
27378: IFFALSE 27386
27380: PUSH
27381: LD_EXP 61
27385: AND
27386: IFFALSE 27484
27388: GO 27390
27390: DISABLE
27391: LD_INT 0
27393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27394: LD_ADDR_VAR 0 1
27398: PUSH
27399: LD_INT 22
27401: PUSH
27402: LD_OWVAR 2
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 21
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PPUSH
27425: CALL_OW 69
27429: ST_TO_ADDR
// if not tmp then
27430: LD_VAR 0 1
27434: NOT
27435: IFFALSE 27439
// exit ;
27437: GO 27484
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27439: LD_VAR 0 1
27443: PUSH
27444: LD_INT 1
27446: PPUSH
27447: LD_VAR 0 1
27451: PPUSH
27452: CALL_OW 12
27456: ARRAY
27457: PPUSH
27458: LD_INT 1
27460: PPUSH
27461: LD_INT 4
27463: PPUSH
27464: CALL_OW 12
27468: PPUSH
27469: LD_INT 3000
27471: PPUSH
27472: LD_INT 9000
27474: PPUSH
27475: CALL_OW 12
27479: PPUSH
27480: CALL_OW 492
// end ;
27484: PPOPN 1
27486: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27487: LD_EXP 47
27491: IFFALSE 27499
27493: PUSH
27494: LD_EXP 62
27498: AND
27499: IFFALSE 27519
27501: GO 27503
27503: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27504: LD_INT 1
27506: PPUSH
27507: LD_OWVAR 2
27511: PPUSH
27512: LD_INT 0
27514: PPUSH
27515: CALL_OW 324
27519: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27520: LD_EXP 47
27524: IFFALSE 27532
27526: PUSH
27527: LD_EXP 63
27531: AND
27532: IFFALSE 27615
27534: GO 27536
27536: DISABLE
27537: LD_INT 0
27539: PPUSH
27540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27541: LD_ADDR_VAR 0 2
27545: PUSH
27546: LD_INT 22
27548: PUSH
27549: LD_OWVAR 2
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 21
27560: PUSH
27561: LD_INT 3
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PPUSH
27572: CALL_OW 69
27576: ST_TO_ADDR
// if not tmp then
27577: LD_VAR 0 2
27581: NOT
27582: IFFALSE 27586
// exit ;
27584: GO 27615
// for i in tmp do
27586: LD_ADDR_VAR 0 1
27590: PUSH
27591: LD_VAR 0 2
27595: PUSH
27596: FOR_IN
27597: IFFALSE 27613
// SetBLevel ( i , 10 ) ;
27599: LD_VAR 0 1
27603: PPUSH
27604: LD_INT 10
27606: PPUSH
27607: CALL_OW 241
27611: GO 27596
27613: POP
27614: POP
// end ;
27615: PPOPN 2
27617: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27618: LD_EXP 47
27622: IFFALSE 27630
27624: PUSH
27625: LD_EXP 64
27629: AND
27630: IFFALSE 27741
27632: GO 27634
27634: DISABLE
27635: LD_INT 0
27637: PPUSH
27638: PPUSH
27639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27640: LD_ADDR_VAR 0 3
27644: PUSH
27645: LD_INT 22
27647: PUSH
27648: LD_OWVAR 2
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 25
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PPUSH
27671: CALL_OW 69
27675: ST_TO_ADDR
// if not tmp then
27676: LD_VAR 0 3
27680: NOT
27681: IFFALSE 27685
// exit ;
27683: GO 27741
// un := tmp [ rand ( 1 , tmp ) ] ;
27685: LD_ADDR_VAR 0 2
27689: PUSH
27690: LD_VAR 0 3
27694: PUSH
27695: LD_INT 1
27697: PPUSH
27698: LD_VAR 0 3
27702: PPUSH
27703: CALL_OW 12
27707: ARRAY
27708: ST_TO_ADDR
// if Crawls ( un ) then
27709: LD_VAR 0 2
27713: PPUSH
27714: CALL_OW 318
27718: IFFALSE 27729
// ComWalk ( un ) ;
27720: LD_VAR 0 2
27724: PPUSH
27725: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27729: LD_VAR 0 2
27733: PPUSH
27734: LD_INT 5
27736: PPUSH
27737: CALL_OW 336
// end ;
27741: PPOPN 3
27743: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27744: LD_EXP 47
27748: IFFALSE 27756
27750: PUSH
27751: LD_EXP 65
27755: AND
27756: IFFALSE 27768
27758: PUSH
27759: LD_OWVAR 67
27763: PUSH
27764: LD_INT 4
27766: LESS
27767: AND
27768: IFFALSE 27787
27770: GO 27772
27772: DISABLE
// begin Difficulty := Difficulty + 1 ;
27773: LD_ADDR_OWVAR 67
27777: PUSH
27778: LD_OWVAR 67
27782: PUSH
27783: LD_INT 1
27785: PLUS
27786: ST_TO_ADDR
// end ;
27787: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27788: LD_EXP 47
27792: IFFALSE 27800
27794: PUSH
27795: LD_EXP 66
27799: AND
27800: IFFALSE 27903
27802: GO 27804
27804: DISABLE
27805: LD_INT 0
27807: PPUSH
// begin for i := 1 to 5 do
27808: LD_ADDR_VAR 0 1
27812: PUSH
27813: DOUBLE
27814: LD_INT 1
27816: DEC
27817: ST_TO_ADDR
27818: LD_INT 5
27820: PUSH
27821: FOR_TO
27822: IFFALSE 27901
// begin uc_nation := nation_nature ;
27824: LD_ADDR_OWVAR 21
27828: PUSH
27829: LD_INT 0
27831: ST_TO_ADDR
// uc_side := 0 ;
27832: LD_ADDR_OWVAR 20
27836: PUSH
27837: LD_INT 0
27839: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27840: LD_ADDR_OWVAR 29
27844: PUSH
27845: LD_INT 12
27847: PUSH
27848: LD_INT 12
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: ST_TO_ADDR
// hc_agressivity := 20 ;
27855: LD_ADDR_OWVAR 35
27859: PUSH
27860: LD_INT 20
27862: ST_TO_ADDR
// hc_class := class_tiger ;
27863: LD_ADDR_OWVAR 28
27867: PUSH
27868: LD_INT 14
27870: ST_TO_ADDR
// hc_gallery :=  ;
27871: LD_ADDR_OWVAR 33
27875: PUSH
27876: LD_STRING 
27878: ST_TO_ADDR
// hc_name :=  ;
27879: LD_ADDR_OWVAR 26
27883: PUSH
27884: LD_STRING 
27886: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27887: CALL_OW 44
27891: PPUSH
27892: LD_INT 0
27894: PPUSH
27895: CALL_OW 51
// end ;
27899: GO 27821
27901: POP
27902: POP
// end ;
27903: PPOPN 1
27905: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27906: LD_EXP 47
27910: IFFALSE 27918
27912: PUSH
27913: LD_EXP 67
27917: AND
27918: IFFALSE 27927
27920: GO 27922
27922: DISABLE
// StreamSibBomb ;
27923: CALL 27928 0 0
27927: END
// export function StreamSibBomb ; var i , x , y ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
27932: PPUSH
27933: PPUSH
// result := false ;
27934: LD_ADDR_VAR 0 1
27938: PUSH
27939: LD_INT 0
27941: ST_TO_ADDR
// for i := 1 to 16 do
27942: LD_ADDR_VAR 0 2
27946: PUSH
27947: DOUBLE
27948: LD_INT 1
27950: DEC
27951: ST_TO_ADDR
27952: LD_INT 16
27954: PUSH
27955: FOR_TO
27956: IFFALSE 28155
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27958: LD_ADDR_VAR 0 3
27962: PUSH
27963: LD_INT 10
27965: PUSH
27966: LD_INT 20
27968: PUSH
27969: LD_INT 30
27971: PUSH
27972: LD_INT 40
27974: PUSH
27975: LD_INT 50
27977: PUSH
27978: LD_INT 60
27980: PUSH
27981: LD_INT 70
27983: PUSH
27984: LD_INT 80
27986: PUSH
27987: LD_INT 90
27989: PUSH
27990: LD_INT 100
27992: PUSH
27993: LD_INT 110
27995: PUSH
27996: LD_INT 120
27998: PUSH
27999: LD_INT 130
28001: PUSH
28002: LD_INT 140
28004: PUSH
28005: LD_INT 150
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: PPUSH
28028: LD_INT 15
28030: PPUSH
28031: CALL_OW 12
28035: ARRAY
28036: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28037: LD_ADDR_VAR 0 4
28041: PUSH
28042: LD_INT 10
28044: PUSH
28045: LD_INT 20
28047: PUSH
28048: LD_INT 30
28050: PUSH
28051: LD_INT 40
28053: PUSH
28054: LD_INT 50
28056: PUSH
28057: LD_INT 60
28059: PUSH
28060: LD_INT 70
28062: PUSH
28063: LD_INT 80
28065: PUSH
28066: LD_INT 90
28068: PUSH
28069: LD_INT 100
28071: PUSH
28072: LD_INT 110
28074: PUSH
28075: LD_INT 120
28077: PUSH
28078: LD_INT 130
28080: PUSH
28081: LD_INT 140
28083: PUSH
28084: LD_INT 150
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: PPUSH
28107: LD_INT 15
28109: PPUSH
28110: CALL_OW 12
28114: ARRAY
28115: ST_TO_ADDR
// if ValidHex ( x , y ) then
28116: LD_VAR 0 3
28120: PPUSH
28121: LD_VAR 0 4
28125: PPUSH
28126: CALL_OW 488
28130: IFFALSE 28153
// begin result := [ x , y ] ;
28132: LD_ADDR_VAR 0 1
28136: PUSH
28137: LD_VAR 0 3
28141: PUSH
28142: LD_VAR 0 4
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// break ;
28151: GO 28155
// end ; end ;
28153: GO 27955
28155: POP
28156: POP
// if result then
28157: LD_VAR 0 1
28161: IFFALSE 28221
// begin ToLua ( playSibBomb() ) ;
28163: LD_STRING playSibBomb()
28165: PPUSH
28166: CALL_OW 559
// wait ( 0 0$14 ) ;
28170: LD_INT 490
28172: PPUSH
28173: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28177: LD_VAR 0 1
28181: PUSH
28182: LD_INT 1
28184: ARRAY
28185: PPUSH
28186: LD_VAR 0 1
28190: PUSH
28191: LD_INT 2
28193: ARRAY
28194: PPUSH
28195: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28199: LD_VAR 0 1
28203: PUSH
28204: LD_INT 1
28206: ARRAY
28207: PPUSH
28208: LD_VAR 0 1
28212: PUSH
28213: LD_INT 2
28215: ARRAY
28216: PPUSH
28217: CALL_OW 429
// end ; end ;
28221: LD_VAR 0 1
28225: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28226: LD_EXP 47
28230: IFFALSE 28238
28232: PUSH
28233: LD_EXP 69
28237: AND
28238: IFFALSE 28250
28240: GO 28242
28242: DISABLE
// YouLost (  ) ;
28243: LD_STRING 
28245: PPUSH
28246: CALL_OW 104
28250: END
// every 0 0$1 trigger StreamModeActive and sFog do
28251: LD_EXP 47
28255: IFFALSE 28263
28257: PUSH
28258: LD_EXP 68
28262: AND
28263: IFFALSE 28277
28265: GO 28267
28267: DISABLE
// FogOff ( your_side ) ;
28268: LD_OWVAR 2
28272: PPUSH
28273: CALL_OW 344
28277: END
// every 0 0$1 trigger StreamModeActive and sSun do
28278: LD_EXP 47
28282: IFFALSE 28290
28284: PUSH
28285: LD_EXP 70
28289: AND
28290: IFFALSE 28318
28292: GO 28294
28294: DISABLE
// begin solar_recharge_percent := 0 ;
28295: LD_ADDR_OWVAR 79
28299: PUSH
28300: LD_INT 0
28302: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28303: LD_INT 10500
28305: PPUSH
28306: CALL_OW 67
// solar_recharge_percent := 100 ;
28310: LD_ADDR_OWVAR 79
28314: PUSH
28315: LD_INT 100
28317: ST_TO_ADDR
// end ;
28318: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28319: LD_EXP 47
28323: IFFALSE 28331
28325: PUSH
28326: LD_EXP 71
28330: AND
28331: IFFALSE 28570
28333: GO 28335
28335: DISABLE
28336: LD_INT 0
28338: PPUSH
28339: PPUSH
28340: PPUSH
// begin tmp := [ ] ;
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: EMPTY
28347: ST_TO_ADDR
// for i := 1 to 6 do
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: DOUBLE
28354: LD_INT 1
28356: DEC
28357: ST_TO_ADDR
28358: LD_INT 6
28360: PUSH
28361: FOR_TO
28362: IFFALSE 28467
// begin uc_nation := nation_nature ;
28364: LD_ADDR_OWVAR 21
28368: PUSH
28369: LD_INT 0
28371: ST_TO_ADDR
// uc_side := 0 ;
28372: LD_ADDR_OWVAR 20
28376: PUSH
28377: LD_INT 0
28379: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28380: LD_ADDR_OWVAR 29
28384: PUSH
28385: LD_INT 12
28387: PUSH
28388: LD_INT 12
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// hc_agressivity := 20 ;
28395: LD_ADDR_OWVAR 35
28399: PUSH
28400: LD_INT 20
28402: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28403: LD_ADDR_OWVAR 28
28407: PUSH
28408: LD_INT 17
28410: ST_TO_ADDR
// hc_gallery :=  ;
28411: LD_ADDR_OWVAR 33
28415: PUSH
28416: LD_STRING 
28418: ST_TO_ADDR
// hc_name :=  ;
28419: LD_ADDR_OWVAR 26
28423: PUSH
28424: LD_STRING 
28426: ST_TO_ADDR
// un := CreateHuman ;
28427: LD_ADDR_VAR 0 2
28431: PUSH
28432: CALL_OW 44
28436: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28437: LD_VAR 0 2
28441: PPUSH
28442: LD_INT 1
28444: PPUSH
28445: CALL_OW 51
// tmp := tmp ^ un ;
28449: LD_ADDR_VAR 0 3
28453: PUSH
28454: LD_VAR 0 3
28458: PUSH
28459: LD_VAR 0 2
28463: ADD
28464: ST_TO_ADDR
// end ;
28465: GO 28361
28467: POP
28468: POP
// repeat wait ( 0 0$1 ) ;
28469: LD_INT 35
28471: PPUSH
28472: CALL_OW 67
// for un in tmp do
28476: LD_ADDR_VAR 0 2
28480: PUSH
28481: LD_VAR 0 3
28485: PUSH
28486: FOR_IN
28487: IFFALSE 28561
// begin if IsDead ( un ) then
28489: LD_VAR 0 2
28493: PPUSH
28494: CALL_OW 301
28498: IFFALSE 28518
// begin tmp := tmp diff un ;
28500: LD_ADDR_VAR 0 3
28504: PUSH
28505: LD_VAR 0 3
28509: PUSH
28510: LD_VAR 0 2
28514: DIFF
28515: ST_TO_ADDR
// continue ;
28516: GO 28486
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28518: LD_VAR 0 2
28522: PPUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 22
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PPUSH
28540: CALL_OW 69
28544: PPUSH
28545: LD_VAR 0 2
28549: PPUSH
28550: CALL_OW 74
28554: PPUSH
28555: CALL_OW 115
// end ;
28559: GO 28486
28561: POP
28562: POP
// until not tmp ;
28563: LD_VAR 0 3
28567: NOT
28568: IFFALSE 28469
// end ;
28570: PPOPN 3
28572: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28573: LD_EXP 47
28577: IFFALSE 28585
28579: PUSH
28580: LD_EXP 72
28584: AND
28585: IFFALSE 28639
28587: GO 28589
28589: DISABLE
// begin ToLua ( displayTroll(); ) ;
28590: LD_STRING displayTroll();
28592: PPUSH
28593: CALL_OW 559
// wait ( 3 3$00 ) ;
28597: LD_INT 6300
28599: PPUSH
28600: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28604: LD_STRING hideTroll();
28606: PPUSH
28607: CALL_OW 559
// wait ( 1 1$00 ) ;
28611: LD_INT 2100
28613: PPUSH
28614: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28618: LD_STRING displayTroll();
28620: PPUSH
28621: CALL_OW 559
// wait ( 1 1$00 ) ;
28625: LD_INT 2100
28627: PPUSH
28628: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28632: LD_STRING hideTroll();
28634: PPUSH
28635: CALL_OW 559
// end ;
28639: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28640: LD_EXP 47
28644: IFFALSE 28652
28646: PUSH
28647: LD_EXP 73
28651: AND
28652: IFFALSE 28715
28654: GO 28656
28656: DISABLE
28657: LD_INT 0
28659: PPUSH
// begin p := 0 ;
28660: LD_ADDR_VAR 0 1
28664: PUSH
28665: LD_INT 0
28667: ST_TO_ADDR
// repeat game_speed := 1 ;
28668: LD_ADDR_OWVAR 65
28672: PUSH
28673: LD_INT 1
28675: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28676: LD_INT 35
28678: PPUSH
28679: CALL_OW 67
// p := p + 1 ;
28683: LD_ADDR_VAR 0 1
28687: PUSH
28688: LD_VAR 0 1
28692: PUSH
28693: LD_INT 1
28695: PLUS
28696: ST_TO_ADDR
// until p >= 60 ;
28697: LD_VAR 0 1
28701: PUSH
28702: LD_INT 60
28704: GREATEREQUAL
28705: IFFALSE 28668
// game_speed := 4 ;
28707: LD_ADDR_OWVAR 65
28711: PUSH
28712: LD_INT 4
28714: ST_TO_ADDR
// end ;
28715: PPOPN 1
28717: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28718: LD_EXP 47
28722: IFFALSE 28730
28724: PUSH
28725: LD_EXP 74
28729: AND
28730: IFFALSE 28876
28732: GO 28734
28734: DISABLE
28735: LD_INT 0
28737: PPUSH
28738: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28739: LD_ADDR_VAR 0 1
28743: PUSH
28744: LD_INT 22
28746: PUSH
28747: LD_OWVAR 2
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: LD_INT 30
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 30
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PPUSH
28788: CALL_OW 69
28792: ST_TO_ADDR
// if not depot then
28793: LD_VAR 0 1
28797: NOT
28798: IFFALSE 28802
// exit ;
28800: GO 28876
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28802: LD_ADDR_VAR 0 2
28806: PUSH
28807: LD_VAR 0 1
28811: PUSH
28812: LD_INT 1
28814: PPUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL_OW 12
28824: ARRAY
28825: PPUSH
28826: CALL_OW 274
28830: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28831: LD_VAR 0 2
28835: PPUSH
28836: LD_INT 1
28838: PPUSH
28839: LD_INT 0
28841: PPUSH
28842: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28846: LD_VAR 0 2
28850: PPUSH
28851: LD_INT 2
28853: PPUSH
28854: LD_INT 0
28856: PPUSH
28857: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28861: LD_VAR 0 2
28865: PPUSH
28866: LD_INT 3
28868: PPUSH
28869: LD_INT 0
28871: PPUSH
28872: CALL_OW 277
// end ;
28876: PPOPN 2
28878: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28879: LD_EXP 47
28883: IFFALSE 28891
28885: PUSH
28886: LD_EXP 75
28890: AND
28891: IFFALSE 28988
28893: GO 28895
28895: DISABLE
28896: LD_INT 0
28898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28899: LD_ADDR_VAR 0 1
28903: PUSH
28904: LD_INT 22
28906: PUSH
28907: LD_OWVAR 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 21
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 3
28928: PUSH
28929: LD_INT 23
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: PPUSH
28948: CALL_OW 69
28952: ST_TO_ADDR
// if not tmp then
28953: LD_VAR 0 1
28957: NOT
28958: IFFALSE 28962
// exit ;
28960: GO 28988
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28962: LD_VAR 0 1
28966: PUSH
28967: LD_INT 1
28969: PPUSH
28970: LD_VAR 0 1
28974: PPUSH
28975: CALL_OW 12
28979: ARRAY
28980: PPUSH
28981: LD_INT 200
28983: PPUSH
28984: CALL_OW 234
// end ;
28988: PPOPN 1
28990: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28991: LD_EXP 47
28995: IFFALSE 29003
28997: PUSH
28998: LD_EXP 76
29002: AND
29003: IFFALSE 29082
29005: GO 29007
29007: DISABLE
29008: LD_INT 0
29010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29011: LD_ADDR_VAR 0 1
29015: PUSH
29016: LD_INT 22
29018: PUSH
29019: LD_OWVAR 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 21
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PPUSH
29042: CALL_OW 69
29046: ST_TO_ADDR
// if not tmp then
29047: LD_VAR 0 1
29051: NOT
29052: IFFALSE 29056
// exit ;
29054: GO 29082
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29056: LD_VAR 0 1
29060: PUSH
29061: LD_INT 1
29063: PPUSH
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL_OW 12
29073: ARRAY
29074: PPUSH
29075: LD_INT 60
29077: PPUSH
29078: CALL_OW 234
// end ;
29082: PPOPN 1
29084: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29085: LD_EXP 47
29089: IFFALSE 29097
29091: PUSH
29092: LD_EXP 77
29096: AND
29097: IFFALSE 29196
29099: GO 29101
29101: DISABLE
29102: LD_INT 0
29104: PPUSH
29105: PPUSH
// begin enable ;
29106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29107: LD_ADDR_VAR 0 1
29111: PUSH
29112: LD_INT 22
29114: PUSH
29115: LD_OWVAR 2
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 61
29126: PUSH
29127: EMPTY
29128: LIST
29129: PUSH
29130: LD_INT 33
29132: PUSH
29133: LD_INT 2
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: ST_TO_ADDR
// if not tmp then
29150: LD_VAR 0 1
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29196
// for i in tmp do
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: LD_VAR 0 1
29168: PUSH
29169: FOR_IN
29170: IFFALSE 29194
// if IsControledBy ( i ) then
29172: LD_VAR 0 2
29176: PPUSH
29177: CALL_OW 312
29181: IFFALSE 29192
// ComUnlink ( i ) ;
29183: LD_VAR 0 2
29187: PPUSH
29188: CALL_OW 136
29192: GO 29169
29194: POP
29195: POP
// end ;
29196: PPOPN 2
29198: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29199: LD_EXP 47
29203: IFFALSE 29211
29205: PUSH
29206: LD_EXP 78
29210: AND
29211: IFFALSE 29351
29213: GO 29215
29215: DISABLE
29216: LD_INT 0
29218: PPUSH
29219: PPUSH
// begin ToLua ( displayPowell(); ) ;
29220: LD_STRING displayPowell();
29222: PPUSH
29223: CALL_OW 559
// uc_side := 0 ;
29227: LD_ADDR_OWVAR 20
29231: PUSH
29232: LD_INT 0
29234: ST_TO_ADDR
// uc_nation := 2 ;
29235: LD_ADDR_OWVAR 21
29239: PUSH
29240: LD_INT 2
29242: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29243: LD_ADDR_OWVAR 37
29247: PUSH
29248: LD_INT 14
29250: ST_TO_ADDR
// vc_engine := engine_siberite ;
29251: LD_ADDR_OWVAR 39
29255: PUSH
29256: LD_INT 3
29258: ST_TO_ADDR
// vc_control := control_apeman ;
29259: LD_ADDR_OWVAR 38
29263: PUSH
29264: LD_INT 5
29266: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29267: LD_ADDR_OWVAR 40
29271: PUSH
29272: LD_INT 29
29274: ST_TO_ADDR
// un := CreateVehicle ;
29275: LD_ADDR_VAR 0 2
29279: PUSH
29280: CALL_OW 45
29284: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29285: LD_VAR 0 2
29289: PPUSH
29290: LD_INT 1
29292: PPUSH
29293: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29297: LD_INT 35
29299: PPUSH
29300: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29304: LD_VAR 0 2
29308: PPUSH
29309: LD_INT 22
29311: PUSH
29312: LD_OWVAR 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PPUSH
29321: CALL_OW 69
29325: PPUSH
29326: LD_VAR 0 2
29330: PPUSH
29331: CALL_OW 74
29335: PPUSH
29336: CALL_OW 115
// until IsDead ( un ) ;
29340: LD_VAR 0 2
29344: PPUSH
29345: CALL_OW 301
29349: IFFALSE 29297
// end ;
29351: PPOPN 2
29353: END
// every 0 0$1 trigger StreamModeActive and sStu do
29354: LD_EXP 47
29358: IFFALSE 29366
29360: PUSH
29361: LD_EXP 86
29365: AND
29366: IFFALSE 29382
29368: GO 29370
29370: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29371: LD_STRING displayStucuk();
29373: PPUSH
29374: CALL_OW 559
// ResetFog ;
29378: CALL_OW 335
// end ;
29382: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29383: LD_EXP 47
29387: IFFALSE 29395
29389: PUSH
29390: LD_EXP 79
29394: AND
29395: IFFALSE 29536
29397: GO 29399
29399: DISABLE
29400: LD_INT 0
29402: PPUSH
29403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29404: LD_ADDR_VAR 0 2
29408: PUSH
29409: LD_INT 22
29411: PUSH
29412: LD_OWVAR 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 21
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PPUSH
29435: CALL_OW 69
29439: ST_TO_ADDR
// if not tmp then
29440: LD_VAR 0 2
29444: NOT
29445: IFFALSE 29449
// exit ;
29447: GO 29536
// un := tmp [ rand ( 1 , tmp ) ] ;
29449: LD_ADDR_VAR 0 1
29453: PUSH
29454: LD_VAR 0 2
29458: PUSH
29459: LD_INT 1
29461: PPUSH
29462: LD_VAR 0 2
29466: PPUSH
29467: CALL_OW 12
29471: ARRAY
29472: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29473: LD_VAR 0 1
29477: PPUSH
29478: LD_INT 0
29480: PPUSH
29481: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29485: LD_VAR 0 1
29489: PPUSH
29490: LD_OWVAR 3
29494: PUSH
29495: LD_VAR 0 1
29499: DIFF
29500: PPUSH
29501: LD_VAR 0 1
29505: PPUSH
29506: CALL_OW 74
29510: PPUSH
29511: CALL_OW 115
// wait ( 0 0$20 ) ;
29515: LD_INT 700
29517: PPUSH
29518: CALL_OW 67
// SetSide ( un , your_side ) ;
29522: LD_VAR 0 1
29526: PPUSH
29527: LD_OWVAR 2
29531: PPUSH
29532: CALL_OW 235
// end ;
29536: PPOPN 2
29538: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29539: LD_EXP 47
29543: IFFALSE 29551
29545: PUSH
29546: LD_EXP 80
29550: AND
29551: IFFALSE 29657
29553: GO 29555
29555: DISABLE
29556: LD_INT 0
29558: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29559: LD_ADDR_VAR 0 1
29563: PUSH
29564: LD_INT 22
29566: PUSH
29567: LD_OWVAR 2
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 30
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PPUSH
29608: CALL_OW 69
29612: ST_TO_ADDR
// if not depot then
29613: LD_VAR 0 1
29617: NOT
29618: IFFALSE 29622
// exit ;
29620: GO 29657
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29622: LD_VAR 0 1
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: PPUSH
29631: CALL_OW 250
29635: PPUSH
29636: LD_VAR 0 1
29640: PUSH
29641: LD_INT 1
29643: ARRAY
29644: PPUSH
29645: CALL_OW 251
29649: PPUSH
29650: LD_INT 70
29652: PPUSH
29653: CALL_OW 495
// end ;
29657: PPOPN 1
29659: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29660: LD_EXP 47
29664: IFFALSE 29672
29666: PUSH
29667: LD_EXP 81
29671: AND
29672: IFFALSE 29883
29674: GO 29676
29676: DISABLE
29677: LD_INT 0
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29684: LD_ADDR_VAR 0 5
29688: PUSH
29689: LD_INT 22
29691: PUSH
29692: LD_OWVAR 2
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 21
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PPUSH
29715: CALL_OW 69
29719: ST_TO_ADDR
// if not tmp then
29720: LD_VAR 0 5
29724: NOT
29725: IFFALSE 29729
// exit ;
29727: GO 29883
// for i in tmp do
29729: LD_ADDR_VAR 0 1
29733: PUSH
29734: LD_VAR 0 5
29738: PUSH
29739: FOR_IN
29740: IFFALSE 29881
// begin d := rand ( 0 , 5 ) ;
29742: LD_ADDR_VAR 0 4
29746: PUSH
29747: LD_INT 0
29749: PPUSH
29750: LD_INT 5
29752: PPUSH
29753: CALL_OW 12
29757: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29758: LD_ADDR_VAR 0 2
29762: PUSH
29763: LD_VAR 0 1
29767: PPUSH
29768: CALL_OW 250
29772: PPUSH
29773: LD_VAR 0 4
29777: PPUSH
29778: LD_INT 3
29780: PPUSH
29781: LD_INT 12
29783: PPUSH
29784: CALL_OW 12
29788: PPUSH
29789: CALL_OW 272
29793: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29794: LD_ADDR_VAR 0 3
29798: PUSH
29799: LD_VAR 0 1
29803: PPUSH
29804: CALL_OW 251
29808: PPUSH
29809: LD_VAR 0 4
29813: PPUSH
29814: LD_INT 3
29816: PPUSH
29817: LD_INT 12
29819: PPUSH
29820: CALL_OW 12
29824: PPUSH
29825: CALL_OW 273
29829: ST_TO_ADDR
// if ValidHex ( x , y ) then
29830: LD_VAR 0 2
29834: PPUSH
29835: LD_VAR 0 3
29839: PPUSH
29840: CALL_OW 488
29844: IFFALSE 29879
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29846: LD_VAR 0 1
29850: PPUSH
29851: LD_VAR 0 2
29855: PPUSH
29856: LD_VAR 0 3
29860: PPUSH
29861: LD_INT 3
29863: PPUSH
29864: LD_INT 6
29866: PPUSH
29867: CALL_OW 12
29871: PPUSH
29872: LD_INT 1
29874: PPUSH
29875: CALL_OW 483
// end ;
29879: GO 29739
29881: POP
29882: POP
// end ;
29883: PPOPN 5
29885: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29886: LD_EXP 47
29890: IFFALSE 29898
29892: PUSH
29893: LD_EXP 82
29897: AND
29898: IFFALSE 29992
29900: GO 29902
29902: DISABLE
29903: LD_INT 0
29905: PPUSH
29906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29907: LD_ADDR_VAR 0 2
29911: PUSH
29912: LD_INT 22
29914: PUSH
29915: LD_OWVAR 2
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 32
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 2
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: PPUSH
29949: CALL_OW 69
29953: ST_TO_ADDR
// if not tmp then
29954: LD_VAR 0 2
29958: NOT
29959: IFFALSE 29963
// exit ;
29961: GO 29992
// for i in tmp do
29963: LD_ADDR_VAR 0 1
29967: PUSH
29968: LD_VAR 0 2
29972: PUSH
29973: FOR_IN
29974: IFFALSE 29990
// SetFuel ( i , 0 ) ;
29976: LD_VAR 0 1
29980: PPUSH
29981: LD_INT 0
29983: PPUSH
29984: CALL_OW 240
29988: GO 29973
29990: POP
29991: POP
// end ;
29992: PPOPN 2
29994: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29995: LD_EXP 47
29999: IFFALSE 30007
30001: PUSH
30002: LD_EXP 83
30006: AND
30007: IFFALSE 30073
30009: GO 30011
30011: DISABLE
30012: LD_INT 0
30014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30015: LD_ADDR_VAR 0 1
30019: PUSH
30020: LD_INT 22
30022: PUSH
30023: LD_OWVAR 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 30
30034: PUSH
30035: LD_INT 29
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PPUSH
30046: CALL_OW 69
30050: ST_TO_ADDR
// if not tmp then
30051: LD_VAR 0 1
30055: NOT
30056: IFFALSE 30060
// exit ;
30058: GO 30073
// DestroyUnit ( tmp [ 1 ] ) ;
30060: LD_VAR 0 1
30064: PUSH
30065: LD_INT 1
30067: ARRAY
30068: PPUSH
30069: CALL_OW 65
// end ;
30073: PPOPN 1
30075: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30076: LD_EXP 47
30080: IFFALSE 30088
30082: PUSH
30083: LD_EXP 85
30087: AND
30088: IFFALSE 30217
30090: GO 30092
30092: DISABLE
30093: LD_INT 0
30095: PPUSH
// begin uc_side := 0 ;
30096: LD_ADDR_OWVAR 20
30100: PUSH
30101: LD_INT 0
30103: ST_TO_ADDR
// uc_nation := nation_arabian ;
30104: LD_ADDR_OWVAR 21
30108: PUSH
30109: LD_INT 2
30111: ST_TO_ADDR
// hc_gallery :=  ;
30112: LD_ADDR_OWVAR 33
30116: PUSH
30117: LD_STRING 
30119: ST_TO_ADDR
// hc_name :=  ;
30120: LD_ADDR_OWVAR 26
30124: PUSH
30125: LD_STRING 
30127: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30128: LD_INT 1
30130: PPUSH
30131: LD_INT 11
30133: PPUSH
30134: LD_INT 10
30136: PPUSH
30137: CALL_OW 380
// un := CreateHuman ;
30141: LD_ADDR_VAR 0 1
30145: PUSH
30146: CALL_OW 44
30150: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30151: LD_VAR 0 1
30155: PPUSH
30156: LD_INT 1
30158: PPUSH
30159: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30163: LD_INT 35
30165: PPUSH
30166: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30170: LD_VAR 0 1
30174: PPUSH
30175: LD_INT 22
30177: PUSH
30178: LD_OWVAR 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PPUSH
30187: CALL_OW 69
30191: PPUSH
30192: LD_VAR 0 1
30196: PPUSH
30197: CALL_OW 74
30201: PPUSH
30202: CALL_OW 115
// until IsDead ( un ) ;
30206: LD_VAR 0 1
30210: PPUSH
30211: CALL_OW 301
30215: IFFALSE 30163
// end ;
30217: PPOPN 1
30219: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30220: LD_EXP 47
30224: IFFALSE 30232
30226: PUSH
30227: LD_EXP 87
30231: AND
30232: IFFALSE 30244
30234: GO 30236
30236: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30237: LD_STRING earthquake(getX(game), 0, 32)
30239: PPUSH
30240: CALL_OW 559
30244: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30245: LD_EXP 47
30249: IFFALSE 30257
30251: PUSH
30252: LD_EXP 88
30256: AND
30257: IFFALSE 30348
30259: GO 30261
30261: DISABLE
30262: LD_INT 0
30264: PPUSH
// begin enable ;
30265: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30266: LD_ADDR_VAR 0 1
30270: PUSH
30271: LD_INT 22
30273: PUSH
30274: LD_OWVAR 2
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 21
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 33
30295: PUSH
30296: LD_INT 3
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: PPUSH
30308: CALL_OW 69
30312: ST_TO_ADDR
// if not tmp then
30313: LD_VAR 0 1
30317: NOT
30318: IFFALSE 30322
// exit ;
30320: GO 30348
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30322: LD_VAR 0 1
30326: PUSH
30327: LD_INT 1
30329: PPUSH
30330: LD_VAR 0 1
30334: PPUSH
30335: CALL_OW 12
30339: ARRAY
30340: PPUSH
30341: LD_INT 1
30343: PPUSH
30344: CALL_OW 234
// end ;
30348: PPOPN 1
30350: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30351: LD_EXP 47
30355: IFFALSE 30363
30357: PUSH
30358: LD_EXP 89
30362: AND
30363: IFFALSE 30504
30365: GO 30367
30367: DISABLE
30368: LD_INT 0
30370: PPUSH
30371: PPUSH
30372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30373: LD_ADDR_VAR 0 3
30377: PUSH
30378: LD_INT 22
30380: PUSH
30381: LD_OWVAR 2
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 25
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PPUSH
30404: CALL_OW 69
30408: ST_TO_ADDR
// if not tmp then
30409: LD_VAR 0 3
30413: NOT
30414: IFFALSE 30418
// exit ;
30416: GO 30504
// un := tmp [ rand ( 1 , tmp ) ] ;
30418: LD_ADDR_VAR 0 2
30422: PUSH
30423: LD_VAR 0 3
30427: PUSH
30428: LD_INT 1
30430: PPUSH
30431: LD_VAR 0 3
30435: PPUSH
30436: CALL_OW 12
30440: ARRAY
30441: ST_TO_ADDR
// if Crawls ( un ) then
30442: LD_VAR 0 2
30446: PPUSH
30447: CALL_OW 318
30451: IFFALSE 30462
// ComWalk ( un ) ;
30453: LD_VAR 0 2
30457: PPUSH
30458: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30462: LD_VAR 0 2
30466: PPUSH
30467: LD_INT 9
30469: PPUSH
30470: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30474: LD_INT 28
30476: PPUSH
30477: LD_OWVAR 2
30481: PPUSH
30482: LD_INT 2
30484: PPUSH
30485: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30489: LD_INT 29
30491: PPUSH
30492: LD_OWVAR 2
30496: PPUSH
30497: LD_INT 2
30499: PPUSH
30500: CALL_OW 322
// end ;
30504: PPOPN 3
30506: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30507: LD_EXP 47
30511: IFFALSE 30519
30513: PUSH
30514: LD_EXP 90
30518: AND
30519: IFFALSE 30630
30521: GO 30523
30523: DISABLE
30524: LD_INT 0
30526: PPUSH
30527: PPUSH
30528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30529: LD_ADDR_VAR 0 3
30533: PUSH
30534: LD_INT 22
30536: PUSH
30537: LD_OWVAR 2
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 25
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PPUSH
30560: CALL_OW 69
30564: ST_TO_ADDR
// if not tmp then
30565: LD_VAR 0 3
30569: NOT
30570: IFFALSE 30574
// exit ;
30572: GO 30630
// un := tmp [ rand ( 1 , tmp ) ] ;
30574: LD_ADDR_VAR 0 2
30578: PUSH
30579: LD_VAR 0 3
30583: PUSH
30584: LD_INT 1
30586: PPUSH
30587: LD_VAR 0 3
30591: PPUSH
30592: CALL_OW 12
30596: ARRAY
30597: ST_TO_ADDR
// if Crawls ( un ) then
30598: LD_VAR 0 2
30602: PPUSH
30603: CALL_OW 318
30607: IFFALSE 30618
// ComWalk ( un ) ;
30609: LD_VAR 0 2
30613: PPUSH
30614: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30618: LD_VAR 0 2
30622: PPUSH
30623: LD_INT 8
30625: PPUSH
30626: CALL_OW 336
// end ;
30630: PPOPN 3
30632: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30633: LD_EXP 47
30637: IFFALSE 30645
30639: PUSH
30640: LD_EXP 91
30644: AND
30645: IFFALSE 30789
30647: GO 30649
30649: DISABLE
30650: LD_INT 0
30652: PPUSH
30653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30654: LD_ADDR_VAR 0 2
30658: PUSH
30659: LD_INT 22
30661: PUSH
30662: LD_OWVAR 2
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 21
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 34
30686: PUSH
30687: LD_INT 12
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 34
30696: PUSH
30697: LD_INT 51
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 34
30706: PUSH
30707: LD_INT 32
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: PPUSH
30725: CALL_OW 69
30729: ST_TO_ADDR
// if not tmp then
30730: LD_VAR 0 2
30734: NOT
30735: IFFALSE 30739
// exit ;
30737: GO 30789
// for i in tmp do
30739: LD_ADDR_VAR 0 1
30743: PUSH
30744: LD_VAR 0 2
30748: PUSH
30749: FOR_IN
30750: IFFALSE 30787
// if GetCargo ( i , mat_artifact ) = 0 then
30752: LD_VAR 0 1
30756: PPUSH
30757: LD_INT 4
30759: PPUSH
30760: CALL_OW 289
30764: PUSH
30765: LD_INT 0
30767: EQUAL
30768: IFFALSE 30785
// SetCargo ( i , mat_siberit , 100 ) ;
30770: LD_VAR 0 1
30774: PPUSH
30775: LD_INT 3
30777: PPUSH
30778: LD_INT 100
30780: PPUSH
30781: CALL_OW 290
30785: GO 30749
30787: POP
30788: POP
// end ;
30789: PPOPN 2
30791: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30792: LD_EXP 47
30796: IFFALSE 30804
30798: PUSH
30799: LD_EXP 92
30803: AND
30804: IFFALSE 30987
30806: GO 30808
30808: DISABLE
30809: LD_INT 0
30811: PPUSH
30812: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30813: LD_ADDR_VAR 0 2
30817: PUSH
30818: LD_INT 22
30820: PUSH
30821: LD_OWVAR 2
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PPUSH
30830: CALL_OW 69
30834: ST_TO_ADDR
// if not tmp then
30835: LD_VAR 0 2
30839: NOT
30840: IFFALSE 30844
// exit ;
30842: GO 30987
// for i := 1 to 2 do
30844: LD_ADDR_VAR 0 1
30848: PUSH
30849: DOUBLE
30850: LD_INT 1
30852: DEC
30853: ST_TO_ADDR
30854: LD_INT 2
30856: PUSH
30857: FOR_TO
30858: IFFALSE 30985
// begin uc_side := your_side ;
30860: LD_ADDR_OWVAR 20
30864: PUSH
30865: LD_OWVAR 2
30869: ST_TO_ADDR
// uc_nation := nation_american ;
30870: LD_ADDR_OWVAR 21
30874: PUSH
30875: LD_INT 1
30877: ST_TO_ADDR
// vc_chassis := us_morphling ;
30878: LD_ADDR_OWVAR 37
30882: PUSH
30883: LD_INT 5
30885: ST_TO_ADDR
// vc_engine := engine_siberite ;
30886: LD_ADDR_OWVAR 39
30890: PUSH
30891: LD_INT 3
30893: ST_TO_ADDR
// vc_control := control_computer ;
30894: LD_ADDR_OWVAR 38
30898: PUSH
30899: LD_INT 3
30901: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30902: LD_ADDR_OWVAR 40
30906: PUSH
30907: LD_INT 10
30909: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30910: LD_VAR 0 2
30914: PUSH
30915: LD_INT 1
30917: ARRAY
30918: PPUSH
30919: CALL_OW 310
30923: NOT
30924: IFFALSE 30971
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30926: CALL_OW 45
30930: PPUSH
30931: LD_VAR 0 2
30935: PUSH
30936: LD_INT 1
30938: ARRAY
30939: PPUSH
30940: CALL_OW 250
30944: PPUSH
30945: LD_VAR 0 2
30949: PUSH
30950: LD_INT 1
30952: ARRAY
30953: PPUSH
30954: CALL_OW 251
30958: PPUSH
30959: LD_INT 12
30961: PPUSH
30962: LD_INT 1
30964: PPUSH
30965: CALL_OW 50
30969: GO 30983
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30971: CALL_OW 45
30975: PPUSH
30976: LD_INT 1
30978: PPUSH
30979: CALL_OW 51
// end ;
30983: GO 30857
30985: POP
30986: POP
// end ;
30987: PPOPN 2
30989: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30990: LD_EXP 47
30994: IFFALSE 31002
30996: PUSH
30997: LD_EXP 93
31001: AND
31002: IFFALSE 31224
31004: GO 31006
31006: DISABLE
31007: LD_INT 0
31009: PPUSH
31010: PPUSH
31011: PPUSH
31012: PPUSH
31013: PPUSH
31014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31015: LD_ADDR_VAR 0 6
31019: PUSH
31020: LD_INT 22
31022: PUSH
31023: LD_OWVAR 2
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 21
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 23
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 69
31068: ST_TO_ADDR
// if not tmp then
31069: LD_VAR 0 6
31073: NOT
31074: IFFALSE 31078
// exit ;
31076: GO 31224
// s1 := rand ( 1 , 4 ) ;
31078: LD_ADDR_VAR 0 2
31082: PUSH
31083: LD_INT 1
31085: PPUSH
31086: LD_INT 4
31088: PPUSH
31089: CALL_OW 12
31093: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31094: LD_ADDR_VAR 0 4
31098: PUSH
31099: LD_VAR 0 6
31103: PUSH
31104: LD_INT 1
31106: ARRAY
31107: PPUSH
31108: LD_VAR 0 2
31112: PPUSH
31113: CALL_OW 259
31117: ST_TO_ADDR
// if s1 = 1 then
31118: LD_VAR 0 2
31122: PUSH
31123: LD_INT 1
31125: EQUAL
31126: IFFALSE 31146
// s2 := rand ( 2 , 4 ) else
31128: LD_ADDR_VAR 0 3
31132: PUSH
31133: LD_INT 2
31135: PPUSH
31136: LD_INT 4
31138: PPUSH
31139: CALL_OW 12
31143: ST_TO_ADDR
31144: GO 31154
// s2 := 1 ;
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_INT 1
31153: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31154: LD_ADDR_VAR 0 5
31158: PUSH
31159: LD_VAR 0 6
31163: PUSH
31164: LD_INT 1
31166: ARRAY
31167: PPUSH
31168: LD_VAR 0 3
31172: PPUSH
31173: CALL_OW 259
31177: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31178: LD_VAR 0 6
31182: PUSH
31183: LD_INT 1
31185: ARRAY
31186: PPUSH
31187: LD_VAR 0 2
31191: PPUSH
31192: LD_VAR 0 5
31196: PPUSH
31197: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31201: LD_VAR 0 6
31205: PUSH
31206: LD_INT 1
31208: ARRAY
31209: PPUSH
31210: LD_VAR 0 3
31214: PPUSH
31215: LD_VAR 0 4
31219: PPUSH
31220: CALL_OW 237
// end ;
31224: PPOPN 6
31226: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31227: LD_EXP 47
31231: IFFALSE 31239
31233: PUSH
31234: LD_EXP 94
31238: AND
31239: IFFALSE 31318
31241: GO 31243
31243: DISABLE
31244: LD_INT 0
31246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31247: LD_ADDR_VAR 0 1
31251: PUSH
31252: LD_INT 22
31254: PUSH
31255: LD_OWVAR 2
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 30
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PPUSH
31278: CALL_OW 69
31282: ST_TO_ADDR
// if not tmp then
31283: LD_VAR 0 1
31287: NOT
31288: IFFALSE 31292
// exit ;
31290: GO 31318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31292: LD_VAR 0 1
31296: PUSH
31297: LD_INT 1
31299: PPUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 12
31309: ARRAY
31310: PPUSH
31311: LD_INT 1
31313: PPUSH
31314: CALL_OW 234
// end ;
31318: PPOPN 1
31320: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31321: LD_EXP 47
31325: IFFALSE 31333
31327: PUSH
31328: LD_EXP 95
31332: AND
31333: IFFALSE 31445
31335: GO 31337
31337: DISABLE
31338: LD_INT 0
31340: PPUSH
31341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31342: LD_ADDR_VAR 0 2
31346: PUSH
31347: LD_INT 22
31349: PUSH
31350: LD_OWVAR 2
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 30
31364: PUSH
31365: LD_INT 27
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 30
31374: PUSH
31375: LD_INT 26
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 30
31384: PUSH
31385: LD_INT 28
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PPUSH
31402: CALL_OW 69
31406: ST_TO_ADDR
// if not tmp then
31407: LD_VAR 0 2
31411: NOT
31412: IFFALSE 31416
// exit ;
31414: GO 31445
// for i in tmp do
31416: LD_ADDR_VAR 0 1
31420: PUSH
31421: LD_VAR 0 2
31425: PUSH
31426: FOR_IN
31427: IFFALSE 31443
// SetLives ( i , 1 ) ;
31429: LD_VAR 0 1
31433: PPUSH
31434: LD_INT 1
31436: PPUSH
31437: CALL_OW 234
31441: GO 31426
31443: POP
31444: POP
// end ;
31445: PPOPN 2
31447: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31448: LD_EXP 47
31452: IFFALSE 31460
31454: PUSH
31455: LD_EXP 96
31459: AND
31460: IFFALSE 31747
31462: GO 31464
31464: DISABLE
31465: LD_INT 0
31467: PPUSH
31468: PPUSH
31469: PPUSH
// begin i := rand ( 1 , 7 ) ;
31470: LD_ADDR_VAR 0 1
31474: PUSH
31475: LD_INT 1
31477: PPUSH
31478: LD_INT 7
31480: PPUSH
31481: CALL_OW 12
31485: ST_TO_ADDR
// case i of 1 :
31486: LD_VAR 0 1
31490: PUSH
31491: LD_INT 1
31493: DOUBLE
31494: EQUAL
31495: IFTRUE 31499
31497: GO 31509
31499: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31500: LD_STRING earthquake(getX(game), 0, 32)
31502: PPUSH
31503: CALL_OW 559
31507: GO 31747
31509: LD_INT 2
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31531
31517: POP
// begin ToLua ( displayStucuk(); ) ;
31518: LD_STRING displayStucuk();
31520: PPUSH
31521: CALL_OW 559
// ResetFog ;
31525: CALL_OW 335
// end ; 3 :
31529: GO 31747
31531: LD_INT 3
31533: DOUBLE
31534: EQUAL
31535: IFTRUE 31539
31537: GO 31643
31539: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31540: LD_ADDR_VAR 0 2
31544: PUSH
31545: LD_INT 22
31547: PUSH
31548: LD_OWVAR 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 25
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PPUSH
31571: CALL_OW 69
31575: ST_TO_ADDR
// if not tmp then
31576: LD_VAR 0 2
31580: NOT
31581: IFFALSE 31585
// exit ;
31583: GO 31747
// un := tmp [ rand ( 1 , tmp ) ] ;
31585: LD_ADDR_VAR 0 3
31589: PUSH
31590: LD_VAR 0 2
31594: PUSH
31595: LD_INT 1
31597: PPUSH
31598: LD_VAR 0 2
31602: PPUSH
31603: CALL_OW 12
31607: ARRAY
31608: ST_TO_ADDR
// if Crawls ( un ) then
31609: LD_VAR 0 3
31613: PPUSH
31614: CALL_OW 318
31618: IFFALSE 31629
// ComWalk ( un ) ;
31620: LD_VAR 0 3
31624: PPUSH
31625: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31629: LD_VAR 0 3
31633: PPUSH
31634: LD_INT 8
31636: PPUSH
31637: CALL_OW 336
// end ; 4 :
31641: GO 31747
31643: LD_INT 4
31645: DOUBLE
31646: EQUAL
31647: IFTRUE 31651
31649: GO 31725
31651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31652: LD_ADDR_VAR 0 2
31656: PUSH
31657: LD_INT 22
31659: PUSH
31660: LD_OWVAR 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 30
31671: PUSH
31672: LD_INT 29
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PPUSH
31683: CALL_OW 69
31687: ST_TO_ADDR
// if not tmp then
31688: LD_VAR 0 2
31692: NOT
31693: IFFALSE 31697
// exit ;
31695: GO 31747
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31697: LD_VAR 0 2
31701: PUSH
31702: LD_INT 1
31704: ARRAY
31705: PPUSH
31706: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31710: LD_VAR 0 2
31714: PUSH
31715: LD_INT 1
31717: ARRAY
31718: PPUSH
31719: CALL_OW 65
// end ; 5 .. 7 :
31723: GO 31747
31725: LD_INT 5
31727: DOUBLE
31728: GREATEREQUAL
31729: IFFALSE 31737
31731: LD_INT 7
31733: DOUBLE
31734: LESSEQUAL
31735: IFTRUE 31739
31737: GO 31746
31739: POP
// StreamSibBomb ; end ;
31740: CALL 27928 0 0
31744: GO 31747
31746: POP
// end ;
31747: PPOPN 3
31749: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31750: LD_EXP 47
31754: IFFALSE 31762
31756: PUSH
31757: LD_EXP 97
31761: AND
31762: IFFALSE 31918
31764: GO 31766
31766: DISABLE
31767: LD_INT 0
31769: PPUSH
31770: PPUSH
31771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31772: LD_ADDR_VAR 0 2
31776: PUSH
31777: LD_INT 81
31779: PUSH
31780: LD_OWVAR 2
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: PUSH
31792: LD_INT 21
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 21
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: LIST
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PPUSH
31821: CALL_OW 69
31825: ST_TO_ADDR
// if not tmp then
31826: LD_VAR 0 2
31830: NOT
31831: IFFALSE 31835
// exit ;
31833: GO 31918
// p := 0 ;
31835: LD_ADDR_VAR 0 3
31839: PUSH
31840: LD_INT 0
31842: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31843: LD_INT 35
31845: PPUSH
31846: CALL_OW 67
// p := p + 1 ;
31850: LD_ADDR_VAR 0 3
31854: PUSH
31855: LD_VAR 0 3
31859: PUSH
31860: LD_INT 1
31862: PLUS
31863: ST_TO_ADDR
// for i in tmp do
31864: LD_ADDR_VAR 0 1
31868: PUSH
31869: LD_VAR 0 2
31873: PUSH
31874: FOR_IN
31875: IFFALSE 31906
// if GetLives ( i ) < 1000 then
31877: LD_VAR 0 1
31881: PPUSH
31882: CALL_OW 256
31886: PUSH
31887: LD_INT 1000
31889: LESS
31890: IFFALSE 31904
// SetLives ( i , 1000 ) ;
31892: LD_VAR 0 1
31896: PPUSH
31897: LD_INT 1000
31899: PPUSH
31900: CALL_OW 234
31904: GO 31874
31906: POP
31907: POP
// until p > 20 ;
31908: LD_VAR 0 3
31912: PUSH
31913: LD_INT 20
31915: GREATER
31916: IFFALSE 31843
// end ;
31918: PPOPN 3
31920: END
// every 0 0$1 trigger StreamModeActive and sTime do
31921: LD_EXP 47
31925: IFFALSE 31933
31927: PUSH
31928: LD_EXP 98
31932: AND
31933: IFFALSE 31968
31935: GO 31937
31937: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31938: LD_INT 28
31940: PPUSH
31941: LD_OWVAR 2
31945: PPUSH
31946: LD_INT 2
31948: PPUSH
31949: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31953: LD_INT 30
31955: PPUSH
31956: LD_OWVAR 2
31960: PPUSH
31961: LD_INT 2
31963: PPUSH
31964: CALL_OW 322
// end ;
31968: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31969: LD_EXP 47
31973: IFFALSE 31981
31975: PUSH
31976: LD_EXP 99
31980: AND
31981: IFFALSE 32102
31983: GO 31985
31985: DISABLE
31986: LD_INT 0
31988: PPUSH
31989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31990: LD_ADDR_VAR 0 2
31994: PUSH
31995: LD_INT 22
31997: PUSH
31998: LD_OWVAR 2
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 21
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: LD_INT 23
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: PPUSH
32039: CALL_OW 69
32043: ST_TO_ADDR
// if not tmp then
32044: LD_VAR 0 2
32048: NOT
32049: IFFALSE 32053
// exit ;
32051: GO 32102
// for i in tmp do
32053: LD_ADDR_VAR 0 1
32057: PUSH
32058: LD_VAR 0 2
32062: PUSH
32063: FOR_IN
32064: IFFALSE 32100
// begin if Crawls ( i ) then
32066: LD_VAR 0 1
32070: PPUSH
32071: CALL_OW 318
32075: IFFALSE 32086
// ComWalk ( i ) ;
32077: LD_VAR 0 1
32081: PPUSH
32082: CALL_OW 138
// SetClass ( i , 2 ) ;
32086: LD_VAR 0 1
32090: PPUSH
32091: LD_INT 2
32093: PPUSH
32094: CALL_OW 336
// end ;
32098: GO 32063
32100: POP
32101: POP
// end ;
32102: PPOPN 2
32104: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32105: LD_EXP 47
32109: IFFALSE 32117
32111: PUSH
32112: LD_EXP 100
32116: AND
32117: IFFALSE 32407
32119: GO 32121
32121: DISABLE
32122: LD_INT 0
32124: PPUSH
32125: PPUSH
32126: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32127: LD_OWVAR 2
32131: PPUSH
32132: LD_INT 9
32134: PPUSH
32135: LD_INT 1
32137: PPUSH
32138: LD_INT 1
32140: PPUSH
32141: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32145: LD_INT 9
32147: PPUSH
32148: LD_OWVAR 2
32152: PPUSH
32153: CALL_OW 343
// uc_side := 9 ;
32157: LD_ADDR_OWVAR 20
32161: PUSH
32162: LD_INT 9
32164: ST_TO_ADDR
// uc_nation := 2 ;
32165: LD_ADDR_OWVAR 21
32169: PUSH
32170: LD_INT 2
32172: ST_TO_ADDR
// hc_name := Dark Warrior ;
32173: LD_ADDR_OWVAR 26
32177: PUSH
32178: LD_STRING Dark Warrior
32180: ST_TO_ADDR
// hc_gallery :=  ;
32181: LD_ADDR_OWVAR 33
32185: PUSH
32186: LD_STRING 
32188: ST_TO_ADDR
// hc_noskilllimit := true ;
32189: LD_ADDR_OWVAR 76
32193: PUSH
32194: LD_INT 1
32196: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32197: LD_ADDR_OWVAR 31
32201: PUSH
32202: LD_INT 30
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: LD_INT 30
32210: PUSH
32211: LD_INT 30
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// un := CreateHuman ;
32220: LD_ADDR_VAR 0 3
32224: PUSH
32225: CALL_OW 44
32229: ST_TO_ADDR
// hc_noskilllimit := false ;
32230: LD_ADDR_OWVAR 76
32234: PUSH
32235: LD_INT 0
32237: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32238: LD_VAR 0 3
32242: PPUSH
32243: LD_INT 1
32245: PPUSH
32246: CALL_OW 51
// ToLua ( playRanger() ) ;
32250: LD_STRING playRanger()
32252: PPUSH
32253: CALL_OW 559
// p := 0 ;
32257: LD_ADDR_VAR 0 2
32261: PUSH
32262: LD_INT 0
32264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32265: LD_INT 35
32267: PPUSH
32268: CALL_OW 67
// p := p + 1 ;
32272: LD_ADDR_VAR 0 2
32276: PUSH
32277: LD_VAR 0 2
32281: PUSH
32282: LD_INT 1
32284: PLUS
32285: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32286: LD_VAR 0 3
32290: PPUSH
32291: CALL_OW 256
32295: PUSH
32296: LD_INT 1000
32298: LESS
32299: IFFALSE 32313
// SetLives ( un , 1000 ) ;
32301: LD_VAR 0 3
32305: PPUSH
32306: LD_INT 1000
32308: PPUSH
32309: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32313: LD_VAR 0 3
32317: PPUSH
32318: LD_INT 81
32320: PUSH
32321: LD_OWVAR 2
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 91
32332: PUSH
32333: LD_VAR 0 3
32337: PUSH
32338: LD_INT 30
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PPUSH
32350: CALL_OW 69
32354: PPUSH
32355: LD_VAR 0 3
32359: PPUSH
32360: CALL_OW 74
32364: PPUSH
32365: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32369: LD_VAR 0 2
32373: PUSH
32374: LD_INT 80
32376: GREATER
32377: IFTRUE 32390
32379: PUSH
32380: LD_VAR 0 3
32384: PPUSH
32385: CALL_OW 301
32389: OR
32390: IFFALSE 32265
// if un then
32392: LD_VAR 0 3
32396: IFFALSE 32407
// RemoveUnit ( un ) ;
32398: LD_VAR 0 3
32402: PPUSH
32403: CALL_OW 64
// end ;
32407: PPOPN 3
32409: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32410: LD_EXP 101
32414: IFFALSE 32530
32416: GO 32418
32418: DISABLE
32419: LD_INT 0
32421: PPUSH
32422: PPUSH
32423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32424: LD_ADDR_VAR 0 2
32428: PUSH
32429: LD_INT 81
32431: PUSH
32432: LD_OWVAR 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 21
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PPUSH
32455: CALL_OW 69
32459: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32460: LD_STRING playComputer()
32462: PPUSH
32463: CALL_OW 559
// if not tmp then
32467: LD_VAR 0 2
32471: NOT
32472: IFFALSE 32476
// exit ;
32474: GO 32530
// for i in tmp do
32476: LD_ADDR_VAR 0 1
32480: PUSH
32481: LD_VAR 0 2
32485: PUSH
32486: FOR_IN
32487: IFFALSE 32528
// for j := 1 to 4 do
32489: LD_ADDR_VAR 0 3
32493: PUSH
32494: DOUBLE
32495: LD_INT 1
32497: DEC
32498: ST_TO_ADDR
32499: LD_INT 4
32501: PUSH
32502: FOR_TO
32503: IFFALSE 32524
// SetSkill ( i , j , 10 ) ;
32505: LD_VAR 0 1
32509: PPUSH
32510: LD_VAR 0 3
32514: PPUSH
32515: LD_INT 10
32517: PPUSH
32518: CALL_OW 237
32522: GO 32502
32524: POP
32525: POP
32526: GO 32486
32528: POP
32529: POP
// end ;
32530: PPOPN 3
32532: END
// every 0 0$1 trigger s30 do var i , tmp ;
32533: LD_EXP 102
32537: IFFALSE 32606
32539: GO 32541
32541: DISABLE
32542: LD_INT 0
32544: PPUSH
32545: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32546: LD_ADDR_VAR 0 2
32550: PUSH
32551: LD_INT 22
32553: PUSH
32554: LD_OWVAR 2
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PPUSH
32563: CALL_OW 69
32567: ST_TO_ADDR
// if not tmp then
32568: LD_VAR 0 2
32572: NOT
32573: IFFALSE 32577
// exit ;
32575: GO 32606
// for i in tmp do
32577: LD_ADDR_VAR 0 1
32581: PUSH
32582: LD_VAR 0 2
32586: PUSH
32587: FOR_IN
32588: IFFALSE 32604
// SetLives ( i , 300 ) ;
32590: LD_VAR 0 1
32594: PPUSH
32595: LD_INT 300
32597: PPUSH
32598: CALL_OW 234
32602: GO 32587
32604: POP
32605: POP
// end ;
32606: PPOPN 2
32608: END
// every 0 0$1 trigger s60 do var i , tmp ;
32609: LD_EXP 103
32613: IFFALSE 32682
32615: GO 32617
32617: DISABLE
32618: LD_INT 0
32620: PPUSH
32621: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32622: LD_ADDR_VAR 0 2
32626: PUSH
32627: LD_INT 22
32629: PUSH
32630: LD_OWVAR 2
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PPUSH
32639: CALL_OW 69
32643: ST_TO_ADDR
// if not tmp then
32644: LD_VAR 0 2
32648: NOT
32649: IFFALSE 32653
// exit ;
32651: GO 32682
// for i in tmp do
32653: LD_ADDR_VAR 0 1
32657: PUSH
32658: LD_VAR 0 2
32662: PUSH
32663: FOR_IN
32664: IFFALSE 32680
// SetLives ( i , 600 ) ;
32666: LD_VAR 0 1
32670: PPUSH
32671: LD_INT 600
32673: PPUSH
32674: CALL_OW 234
32678: GO 32663
32680: POP
32681: POP
// end ;
32682: PPOPN 2
32684: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32685: LD_INT 0
32687: PPUSH
// case cmd of 301 :
32688: LD_VAR 0 1
32692: PUSH
32693: LD_INT 301
32695: DOUBLE
32696: EQUAL
32697: IFTRUE 32701
32699: GO 32733
32701: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32702: LD_VAR 0 6
32706: PPUSH
32707: LD_VAR 0 7
32711: PPUSH
32712: LD_VAR 0 8
32716: PPUSH
32717: LD_VAR 0 4
32721: PPUSH
32722: LD_VAR 0 5
32726: PPUSH
32727: CALL 33946 0 5
32731: GO 32854
32733: LD_INT 302
32735: DOUBLE
32736: EQUAL
32737: IFTRUE 32741
32739: GO 32778
32741: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32742: LD_VAR 0 6
32746: PPUSH
32747: LD_VAR 0 7
32751: PPUSH
32752: LD_VAR 0 8
32756: PPUSH
32757: LD_VAR 0 9
32761: PPUSH
32762: LD_VAR 0 4
32766: PPUSH
32767: LD_VAR 0 5
32771: PPUSH
32772: CALL 34037 0 6
32776: GO 32854
32778: LD_INT 303
32780: DOUBLE
32781: EQUAL
32782: IFTRUE 32786
32784: GO 32823
32786: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32787: LD_VAR 0 6
32791: PPUSH
32792: LD_VAR 0 7
32796: PPUSH
32797: LD_VAR 0 8
32801: PPUSH
32802: LD_VAR 0 9
32806: PPUSH
32807: LD_VAR 0 4
32811: PPUSH
32812: LD_VAR 0 5
32816: PPUSH
32817: CALL 32859 0 6
32821: GO 32854
32823: LD_INT 304
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32831
32829: GO 32853
32831: POP
// hHackTeleport ( unit , x , y ) ; end ;
32832: LD_VAR 0 2
32836: PPUSH
32837: LD_VAR 0 4
32841: PPUSH
32842: LD_VAR 0 5
32846: PPUSH
32847: CALL 34630 0 3
32851: GO 32854
32853: POP
// end ;
32854: LD_VAR 0 12
32858: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32859: LD_INT 0
32861: PPUSH
32862: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32863: LD_VAR 0 1
32867: PUSH
32868: LD_INT 1
32870: LESS
32871: IFTRUE 32883
32873: PUSH
32874: LD_VAR 0 1
32878: PUSH
32879: LD_INT 3
32881: GREATER
32882: OR
32883: IFTRUE 32901
32885: PUSH
32886: LD_VAR 0 5
32890: PPUSH
32891: LD_VAR 0 6
32895: PPUSH
32896: CALL_OW 428
32900: OR
32901: IFFALSE 32905
// exit ;
32903: GO 33633
// uc_side := your_side ;
32905: LD_ADDR_OWVAR 20
32909: PUSH
32910: LD_OWVAR 2
32914: ST_TO_ADDR
// uc_nation := nation ;
32915: LD_ADDR_OWVAR 21
32919: PUSH
32920: LD_VAR 0 1
32924: ST_TO_ADDR
// bc_level = 1 ;
32925: LD_ADDR_OWVAR 43
32929: PUSH
32930: LD_INT 1
32932: ST_TO_ADDR
// case btype of 1 :
32933: LD_VAR 0 2
32937: PUSH
32938: LD_INT 1
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 32957
32946: POP
// bc_type := b_depot ; 2 :
32947: LD_ADDR_OWVAR 42
32951: PUSH
32952: LD_INT 0
32954: ST_TO_ADDR
32955: GO 33577
32957: LD_INT 2
32959: DOUBLE
32960: EQUAL
32961: IFTRUE 32965
32963: GO 32976
32965: POP
// bc_type := b_warehouse ; 3 :
32966: LD_ADDR_OWVAR 42
32970: PUSH
32971: LD_INT 1
32973: ST_TO_ADDR
32974: GO 33577
32976: LD_INT 3
32978: DOUBLE
32979: EQUAL
32980: IFTRUE 32984
32982: GO 32995
32984: POP
// bc_type := b_lab ; 4 .. 9 :
32985: LD_ADDR_OWVAR 42
32989: PUSH
32990: LD_INT 6
32992: ST_TO_ADDR
32993: GO 33577
32995: LD_INT 4
32997: DOUBLE
32998: GREATEREQUAL
32999: IFFALSE 33007
33001: LD_INT 9
33003: DOUBLE
33004: LESSEQUAL
33005: IFTRUE 33009
33007: GO 33069
33009: POP
// begin bc_type := b_lab_half ;
33010: LD_ADDR_OWVAR 42
33014: PUSH
33015: LD_INT 7
33017: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33018: LD_ADDR_OWVAR 44
33022: PUSH
33023: LD_INT 10
33025: PUSH
33026: LD_INT 11
33028: PUSH
33029: LD_INT 12
33031: PUSH
33032: LD_INT 15
33034: PUSH
33035: LD_INT 14
33037: PUSH
33038: LD_INT 13
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: PUSH
33049: LD_VAR 0 2
33053: PUSH
33054: LD_INT 3
33056: MINUS
33057: ARRAY
33058: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33059: LD_ADDR_OWVAR 45
33063: PUSH
33064: LD_INT 9
33066: ST_TO_ADDR
// end ; 10 .. 13 :
33067: GO 33577
33069: LD_INT 10
33071: DOUBLE
33072: GREATEREQUAL
33073: IFFALSE 33081
33075: LD_INT 13
33077: DOUBLE
33078: LESSEQUAL
33079: IFTRUE 33083
33081: GO 33160
33083: POP
// begin bc_type := b_lab_full ;
33084: LD_ADDR_OWVAR 42
33088: PUSH
33089: LD_INT 8
33091: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33092: LD_ADDR_OWVAR 44
33096: PUSH
33097: LD_INT 10
33099: PUSH
33100: LD_INT 12
33102: PUSH
33103: LD_INT 14
33105: PUSH
33106: LD_INT 13
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: PUSH
33115: LD_VAR 0 2
33119: PUSH
33120: LD_INT 9
33122: MINUS
33123: ARRAY
33124: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33125: LD_ADDR_OWVAR 45
33129: PUSH
33130: LD_INT 11
33132: PUSH
33133: LD_INT 15
33135: PUSH
33136: LD_INT 12
33138: PUSH
33139: LD_INT 15
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: PUSH
33148: LD_VAR 0 2
33152: PUSH
33153: LD_INT 9
33155: MINUS
33156: ARRAY
33157: ST_TO_ADDR
// end ; 14 :
33158: GO 33577
33160: LD_INT 14
33162: DOUBLE
33163: EQUAL
33164: IFTRUE 33168
33166: GO 33179
33168: POP
// bc_type := b_workshop ; 15 :
33169: LD_ADDR_OWVAR 42
33173: PUSH
33174: LD_INT 2
33176: ST_TO_ADDR
33177: GO 33577
33179: LD_INT 15
33181: DOUBLE
33182: EQUAL
33183: IFTRUE 33187
33185: GO 33198
33187: POP
// bc_type := b_factory ; 16 :
33188: LD_ADDR_OWVAR 42
33192: PUSH
33193: LD_INT 3
33195: ST_TO_ADDR
33196: GO 33577
33198: LD_INT 16
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33217
33206: POP
// bc_type := b_ext_gun ; 17 :
33207: LD_ADDR_OWVAR 42
33211: PUSH
33212: LD_INT 17
33214: ST_TO_ADDR
33215: GO 33577
33217: LD_INT 17
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33253
33225: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33226: LD_ADDR_OWVAR 42
33230: PUSH
33231: LD_INT 19
33233: PUSH
33234: LD_INT 23
33236: PUSH
33237: LD_INT 19
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: PUSH
33245: LD_VAR 0 1
33249: ARRAY
33250: ST_TO_ADDR
33251: GO 33577
33253: LD_INT 18
33255: DOUBLE
33256: EQUAL
33257: IFTRUE 33261
33259: GO 33272
33261: POP
// bc_type := b_ext_radar ; 19 :
33262: LD_ADDR_OWVAR 42
33266: PUSH
33267: LD_INT 20
33269: ST_TO_ADDR
33270: GO 33577
33272: LD_INT 19
33274: DOUBLE
33275: EQUAL
33276: IFTRUE 33280
33278: GO 33291
33280: POP
// bc_type := b_ext_radio ; 20 :
33281: LD_ADDR_OWVAR 42
33285: PUSH
33286: LD_INT 22
33288: ST_TO_ADDR
33289: GO 33577
33291: LD_INT 20
33293: DOUBLE
33294: EQUAL
33295: IFTRUE 33299
33297: GO 33310
33299: POP
// bc_type := b_ext_siberium ; 21 :
33300: LD_ADDR_OWVAR 42
33304: PUSH
33305: LD_INT 21
33307: ST_TO_ADDR
33308: GO 33577
33310: LD_INT 21
33312: DOUBLE
33313: EQUAL
33314: IFTRUE 33318
33316: GO 33329
33318: POP
// bc_type := b_ext_computer ; 22 :
33319: LD_ADDR_OWVAR 42
33323: PUSH
33324: LD_INT 24
33326: ST_TO_ADDR
33327: GO 33577
33329: LD_INT 22
33331: DOUBLE
33332: EQUAL
33333: IFTRUE 33337
33335: GO 33348
33337: POP
// bc_type := b_ext_track ; 23 :
33338: LD_ADDR_OWVAR 42
33342: PUSH
33343: LD_INT 16
33345: ST_TO_ADDR
33346: GO 33577
33348: LD_INT 23
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33356
33354: GO 33367
33356: POP
// bc_type := b_ext_laser ; 24 :
33357: LD_ADDR_OWVAR 42
33361: PUSH
33362: LD_INT 25
33364: ST_TO_ADDR
33365: GO 33577
33367: LD_INT 24
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33386
33375: POP
// bc_type := b_control_tower ; 25 :
33376: LD_ADDR_OWVAR 42
33380: PUSH
33381: LD_INT 36
33383: ST_TO_ADDR
33384: GO 33577
33386: LD_INT 25
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33394
33392: GO 33405
33394: POP
// bc_type := b_breastwork ; 26 :
33395: LD_ADDR_OWVAR 42
33399: PUSH
33400: LD_INT 31
33402: ST_TO_ADDR
33403: GO 33577
33405: LD_INT 26
33407: DOUBLE
33408: EQUAL
33409: IFTRUE 33413
33411: GO 33424
33413: POP
// bc_type := b_bunker ; 27 :
33414: LD_ADDR_OWVAR 42
33418: PUSH
33419: LD_INT 32
33421: ST_TO_ADDR
33422: GO 33577
33424: LD_INT 27
33426: DOUBLE
33427: EQUAL
33428: IFTRUE 33432
33430: GO 33443
33432: POP
// bc_type := b_turret ; 28 :
33433: LD_ADDR_OWVAR 42
33437: PUSH
33438: LD_INT 33
33440: ST_TO_ADDR
33441: GO 33577
33443: LD_INT 28
33445: DOUBLE
33446: EQUAL
33447: IFTRUE 33451
33449: GO 33462
33451: POP
// bc_type := b_armoury ; 29 :
33452: LD_ADDR_OWVAR 42
33456: PUSH
33457: LD_INT 4
33459: ST_TO_ADDR
33460: GO 33577
33462: LD_INT 29
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33481
33470: POP
// bc_type := b_barracks ; 30 :
33471: LD_ADDR_OWVAR 42
33475: PUSH
33476: LD_INT 5
33478: ST_TO_ADDR
33479: GO 33577
33481: LD_INT 30
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33500
33489: POP
// bc_type := b_solar_power ; 31 :
33490: LD_ADDR_OWVAR 42
33494: PUSH
33495: LD_INT 27
33497: ST_TO_ADDR
33498: GO 33577
33500: LD_INT 31
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33508
33506: GO 33519
33508: POP
// bc_type := b_oil_power ; 32 :
33509: LD_ADDR_OWVAR 42
33513: PUSH
33514: LD_INT 26
33516: ST_TO_ADDR
33517: GO 33577
33519: LD_INT 32
33521: DOUBLE
33522: EQUAL
33523: IFTRUE 33527
33525: GO 33538
33527: POP
// bc_type := b_siberite_power ; 33 :
33528: LD_ADDR_OWVAR 42
33532: PUSH
33533: LD_INT 28
33535: ST_TO_ADDR
33536: GO 33577
33538: LD_INT 33
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33546
33544: GO 33557
33546: POP
// bc_type := b_oil_mine ; 34 :
33547: LD_ADDR_OWVAR 42
33551: PUSH
33552: LD_INT 29
33554: ST_TO_ADDR
33555: GO 33577
33557: LD_INT 34
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 33576
33565: POP
// bc_type := b_siberite_mine ; end ;
33566: LD_ADDR_OWVAR 42
33570: PUSH
33571: LD_INT 30
33573: ST_TO_ADDR
33574: GO 33577
33576: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33577: LD_ADDR_VAR 0 8
33581: PUSH
33582: LD_VAR 0 5
33586: PPUSH
33587: LD_VAR 0 6
33591: PPUSH
33592: LD_VAR 0 3
33596: PPUSH
33597: CALL_OW 47
33601: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33602: LD_OWVAR 42
33606: PUSH
33607: LD_INT 32
33609: PUSH
33610: LD_INT 33
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: IN
33617: IFFALSE 33633
// PlaceWeaponTurret ( b , weapon ) ;
33619: LD_VAR 0 8
33623: PPUSH
33624: LD_VAR 0 4
33628: PPUSH
33629: CALL_OW 431
// end ;
33633: LD_VAR 0 7
33637: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33638: LD_INT 0
33640: PPUSH
33641: PPUSH
33642: PPUSH
33643: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33644: LD_ADDR_VAR 0 4
33648: PUSH
33649: LD_INT 22
33651: PUSH
33652: LD_OWVAR 2
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 30
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 30
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PPUSH
33693: CALL_OW 69
33697: ST_TO_ADDR
// if not tmp then
33698: LD_VAR 0 4
33702: NOT
33703: IFFALSE 33707
// exit ;
33705: GO 33766
// for i in tmp do
33707: LD_ADDR_VAR 0 2
33711: PUSH
33712: LD_VAR 0 4
33716: PUSH
33717: FOR_IN
33718: IFFALSE 33764
// for j = 1 to 3 do
33720: LD_ADDR_VAR 0 3
33724: PUSH
33725: DOUBLE
33726: LD_INT 1
33728: DEC
33729: ST_TO_ADDR
33730: LD_INT 3
33732: PUSH
33733: FOR_TO
33734: IFFALSE 33760
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33736: LD_VAR 0 2
33740: PPUSH
33741: CALL_OW 274
33745: PPUSH
33746: LD_VAR 0 3
33750: PPUSH
33751: LD_INT 99999
33753: PPUSH
33754: CALL_OW 277
33758: GO 33733
33760: POP
33761: POP
33762: GO 33717
33764: POP
33765: POP
// end ;
33766: LD_VAR 0 1
33770: RET
// export function hHackSetLevel10 ; var i , j ; begin
33771: LD_INT 0
33773: PPUSH
33774: PPUSH
33775: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33776: LD_ADDR_VAR 0 2
33780: PUSH
33781: LD_INT 21
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PPUSH
33791: CALL_OW 69
33795: PUSH
33796: FOR_IN
33797: IFFALSE 33849
// if IsSelected ( i ) then
33799: LD_VAR 0 2
33803: PPUSH
33804: CALL_OW 306
33808: IFFALSE 33847
// begin for j := 1 to 4 do
33810: LD_ADDR_VAR 0 3
33814: PUSH
33815: DOUBLE
33816: LD_INT 1
33818: DEC
33819: ST_TO_ADDR
33820: LD_INT 4
33822: PUSH
33823: FOR_TO
33824: IFFALSE 33845
// SetSkill ( i , j , 10 ) ;
33826: LD_VAR 0 2
33830: PPUSH
33831: LD_VAR 0 3
33835: PPUSH
33836: LD_INT 10
33838: PPUSH
33839: CALL_OW 237
33843: GO 33823
33845: POP
33846: POP
// end ;
33847: GO 33796
33849: POP
33850: POP
// end ;
33851: LD_VAR 0 1
33855: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33856: LD_INT 0
33858: PPUSH
33859: PPUSH
33860: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33861: LD_ADDR_VAR 0 2
33865: PUSH
33866: LD_INT 22
33868: PUSH
33869: LD_OWVAR 2
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 21
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PPUSH
33892: CALL_OW 69
33896: PUSH
33897: FOR_IN
33898: IFFALSE 33939
// begin for j := 1 to 4 do
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: DOUBLE
33906: LD_INT 1
33908: DEC
33909: ST_TO_ADDR
33910: LD_INT 4
33912: PUSH
33913: FOR_TO
33914: IFFALSE 33935
// SetSkill ( i , j , 10 ) ;
33916: LD_VAR 0 2
33920: PPUSH
33921: LD_VAR 0 3
33925: PPUSH
33926: LD_INT 10
33928: PPUSH
33929: CALL_OW 237
33933: GO 33913
33935: POP
33936: POP
// end ;
33937: GO 33897
33939: POP
33940: POP
// end ;
33941: LD_VAR 0 1
33945: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33946: LD_INT 0
33948: PPUSH
// uc_side := your_side ;
33949: LD_ADDR_OWVAR 20
33953: PUSH
33954: LD_OWVAR 2
33958: ST_TO_ADDR
// uc_nation := nation ;
33959: LD_ADDR_OWVAR 21
33963: PUSH
33964: LD_VAR 0 1
33968: ST_TO_ADDR
// InitHc ;
33969: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33973: LD_INT 0
33975: PPUSH
33976: LD_VAR 0 2
33980: PPUSH
33981: LD_VAR 0 3
33985: PPUSH
33986: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33990: LD_VAR 0 4
33994: PPUSH
33995: LD_VAR 0 5
33999: PPUSH
34000: CALL_OW 428
34004: PUSH
34005: LD_INT 0
34007: EQUAL
34008: IFFALSE 34032
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34010: CALL_OW 44
34014: PPUSH
34015: LD_VAR 0 4
34019: PPUSH
34020: LD_VAR 0 5
34024: PPUSH
34025: LD_INT 1
34027: PPUSH
34028: CALL_OW 48
// end ;
34032: LD_VAR 0 6
34036: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34037: LD_INT 0
34039: PPUSH
34040: PPUSH
// uc_side := your_side ;
34041: LD_ADDR_OWVAR 20
34045: PUSH
34046: LD_OWVAR 2
34050: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34051: LD_VAR 0 1
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 3
34064: PUSH
34065: LD_INT 4
34067: PUSH
34068: LD_INT 5
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: IN
34078: IFFALSE 34090
// uc_nation := nation_american else
34080: LD_ADDR_OWVAR 21
34084: PUSH
34085: LD_INT 1
34087: ST_TO_ADDR
34088: GO 34133
// if chassis in [ 11 , 12 , 13 , 14 ] then
34090: LD_VAR 0 1
34094: PUSH
34095: LD_INT 11
34097: PUSH
34098: LD_INT 12
34100: PUSH
34101: LD_INT 13
34103: PUSH
34104: LD_INT 14
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: IN
34113: IFFALSE 34125
// uc_nation := nation_arabian else
34115: LD_ADDR_OWVAR 21
34119: PUSH
34120: LD_INT 2
34122: ST_TO_ADDR
34123: GO 34133
// uc_nation := nation_russian ;
34125: LD_ADDR_OWVAR 21
34129: PUSH
34130: LD_INT 3
34132: ST_TO_ADDR
// vc_chassis := chassis ;
34133: LD_ADDR_OWVAR 37
34137: PUSH
34138: LD_VAR 0 1
34142: ST_TO_ADDR
// vc_engine := engine ;
34143: LD_ADDR_OWVAR 39
34147: PUSH
34148: LD_VAR 0 2
34152: ST_TO_ADDR
// vc_control := control ;
34153: LD_ADDR_OWVAR 38
34157: PUSH
34158: LD_VAR 0 3
34162: ST_TO_ADDR
// vc_weapon := weapon ;
34163: LD_ADDR_OWVAR 40
34167: PUSH
34168: LD_VAR 0 4
34172: ST_TO_ADDR
// un := CreateVehicle ;
34173: LD_ADDR_VAR 0 8
34177: PUSH
34178: CALL_OW 45
34182: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34183: LD_VAR 0 8
34187: PPUSH
34188: LD_INT 0
34190: PPUSH
34191: LD_INT 5
34193: PPUSH
34194: CALL_OW 12
34198: PPUSH
34199: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34203: LD_VAR 0 8
34207: PPUSH
34208: LD_VAR 0 5
34212: PPUSH
34213: LD_VAR 0 6
34217: PPUSH
34218: LD_INT 1
34220: PPUSH
34221: CALL_OW 48
// end ;
34225: LD_VAR 0 7
34229: RET
// export hInvincible ; every 1 do
34230: GO 34232
34232: DISABLE
// hInvincible := [ ] ;
34233: LD_ADDR_EXP 104
34237: PUSH
34238: EMPTY
34239: ST_TO_ADDR
34240: END
// every 10 do var i ;
34241: GO 34243
34243: DISABLE
34244: LD_INT 0
34246: PPUSH
// begin enable ;
34247: ENABLE
// if not hInvincible then
34248: LD_EXP 104
34252: NOT
34253: IFFALSE 34257
// exit ;
34255: GO 34301
// for i in hInvincible do
34257: LD_ADDR_VAR 0 1
34261: PUSH
34262: LD_EXP 104
34266: PUSH
34267: FOR_IN
34268: IFFALSE 34299
// if GetLives ( i ) < 1000 then
34270: LD_VAR 0 1
34274: PPUSH
34275: CALL_OW 256
34279: PUSH
34280: LD_INT 1000
34282: LESS
34283: IFFALSE 34297
// SetLives ( i , 1000 ) ;
34285: LD_VAR 0 1
34289: PPUSH
34290: LD_INT 1000
34292: PPUSH
34293: CALL_OW 234
34297: GO 34267
34299: POP
34300: POP
// end ;
34301: PPOPN 1
34303: END
// export function hHackInvincible ; var i ; begin
34304: LD_INT 0
34306: PPUSH
34307: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34308: LD_ADDR_VAR 0 2
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: LD_INT 21
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 21
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: PPUSH
34341: CALL_OW 69
34345: PUSH
34346: FOR_IN
34347: IFFALSE 34408
// if IsSelected ( i ) then
34349: LD_VAR 0 2
34353: PPUSH
34354: CALL_OW 306
34358: IFFALSE 34406
// begin if i in hInvincible then
34360: LD_VAR 0 2
34364: PUSH
34365: LD_EXP 104
34369: IN
34370: IFFALSE 34390
// hInvincible := hInvincible diff i else
34372: LD_ADDR_EXP 104
34376: PUSH
34377: LD_EXP 104
34381: PUSH
34382: LD_VAR 0 2
34386: DIFF
34387: ST_TO_ADDR
34388: GO 34406
// hInvincible := hInvincible union i ;
34390: LD_ADDR_EXP 104
34394: PUSH
34395: LD_EXP 104
34399: PUSH
34400: LD_VAR 0 2
34404: UNION
34405: ST_TO_ADDR
// end ;
34406: GO 34346
34408: POP
34409: POP
// end ;
34410: LD_VAR 0 1
34414: RET
// export function hHackInvisible ; var i , j ; begin
34415: LD_INT 0
34417: PPUSH
34418: PPUSH
34419: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34420: LD_ADDR_VAR 0 2
34424: PUSH
34425: LD_INT 21
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PPUSH
34435: CALL_OW 69
34439: PUSH
34440: FOR_IN
34441: IFFALSE 34465
// if IsSelected ( i ) then
34443: LD_VAR 0 2
34447: PPUSH
34448: CALL_OW 306
34452: IFFALSE 34463
// ComForceInvisible ( i ) ;
34454: LD_VAR 0 2
34458: PPUSH
34459: CALL_OW 496
34463: GO 34440
34465: POP
34466: POP
// end ;
34467: LD_VAR 0 1
34471: RET
// export function hHackChangeYourSide ; begin
34472: LD_INT 0
34474: PPUSH
// if your_side = 8 then
34475: LD_OWVAR 2
34479: PUSH
34480: LD_INT 8
34482: EQUAL
34483: IFFALSE 34495
// your_side := 0 else
34485: LD_ADDR_OWVAR 2
34489: PUSH
34490: LD_INT 0
34492: ST_TO_ADDR
34493: GO 34509
// your_side := your_side + 1 ;
34495: LD_ADDR_OWVAR 2
34499: PUSH
34500: LD_OWVAR 2
34504: PUSH
34505: LD_INT 1
34507: PLUS
34508: ST_TO_ADDR
// end ;
34509: LD_VAR 0 1
34513: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34514: LD_INT 0
34516: PPUSH
34517: PPUSH
34518: PPUSH
// for i in all_units do
34519: LD_ADDR_VAR 0 2
34523: PUSH
34524: LD_OWVAR 3
34528: PUSH
34529: FOR_IN
34530: IFFALSE 34608
// if IsSelected ( i ) then
34532: LD_VAR 0 2
34536: PPUSH
34537: CALL_OW 306
34541: IFFALSE 34606
// begin j := GetSide ( i ) ;
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_VAR 0 2
34552: PPUSH
34553: CALL_OW 255
34557: ST_TO_ADDR
// if j = 8 then
34558: LD_VAR 0 3
34562: PUSH
34563: LD_INT 8
34565: EQUAL
34566: IFFALSE 34578
// j := 0 else
34568: LD_ADDR_VAR 0 3
34572: PUSH
34573: LD_INT 0
34575: ST_TO_ADDR
34576: GO 34592
// j := j + 1 ;
34578: LD_ADDR_VAR 0 3
34582: PUSH
34583: LD_VAR 0 3
34587: PUSH
34588: LD_INT 1
34590: PLUS
34591: ST_TO_ADDR
// SetSide ( i , j ) ;
34592: LD_VAR 0 2
34596: PPUSH
34597: LD_VAR 0 3
34601: PPUSH
34602: CALL_OW 235
// end ;
34606: GO 34529
34608: POP
34609: POP
// end ;
34610: LD_VAR 0 1
34614: RET
// export function hHackFog ; begin
34615: LD_INT 0
34617: PPUSH
// FogOff ( true ) ;
34618: LD_INT 1
34620: PPUSH
34621: CALL_OW 344
// end ;
34625: LD_VAR 0 1
34629: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34630: LD_INT 0
34632: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34633: LD_VAR 0 1
34637: PPUSH
34638: LD_VAR 0 2
34642: PPUSH
34643: LD_VAR 0 3
34647: PPUSH
34648: LD_INT 1
34650: PPUSH
34651: LD_INT 1
34653: PPUSH
34654: CALL_OW 483
// CenterOnXY ( x , y ) ;
34658: LD_VAR 0 2
34662: PPUSH
34663: LD_VAR 0 3
34667: PPUSH
34668: CALL_OW 84
// end ;
34672: LD_VAR 0 4
34676: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34677: LD_INT 0
34679: PPUSH
34680: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34681: LD_VAR 0 1
34685: NOT
34686: IFTRUE 34705
34688: PUSH
34689: LD_VAR 0 2
34693: PPUSH
34694: LD_VAR 0 3
34698: PPUSH
34699: CALL_OW 488
34703: NOT
34704: OR
34705: IFTRUE 34740
34707: PUSH
34708: LD_VAR 0 1
34712: PPUSH
34713: CALL_OW 266
34717: PUSH
34718: LD_INT 3
34720: NONEQUAL
34721: IFFALSE 34739
34723: PUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: CALL_OW 247
34733: PUSH
34734: LD_INT 1
34736: EQUAL
34737: NOT
34738: AND
34739: OR
34740: IFFALSE 34744
// exit ;
34742: GO 35026
// if GetType ( factory ) = unit_human then
34744: LD_VAR 0 1
34748: PPUSH
34749: CALL_OW 247
34753: PUSH
34754: LD_INT 1
34756: EQUAL
34757: IFFALSE 34774
// factory := IsInUnit ( factory ) ;
34759: LD_ADDR_VAR 0 1
34763: PUSH
34764: LD_VAR 0 1
34768: PPUSH
34769: CALL_OW 310
34773: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34774: LD_VAR 0 1
34778: PPUSH
34779: CALL_OW 266
34783: PUSH
34784: LD_INT 3
34786: NONEQUAL
34787: IFFALSE 34791
// exit ;
34789: GO 35026
// for i := 1 to Count ( factoryWaypoints ) do
34791: LD_ADDR_VAR 0 5
34795: PUSH
34796: DOUBLE
34797: LD_INT 1
34799: DEC
34800: ST_TO_ADDR
34801: LD_EXP 105
34805: PPUSH
34806: CALL 44830 0 1
34810: PUSH
34811: FOR_TO
34812: IFFALSE 34974
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34814: LD_VAR 0 2
34818: PPUSH
34819: LD_VAR 0 3
34823: PPUSH
34824: CALL_OW 428
34828: PUSH
34829: LD_EXP 105
34833: PUSH
34834: LD_VAR 0 5
34838: ARRAY
34839: PUSH
34840: LD_INT 2
34842: ARRAY
34843: EQUAL
34844: IFFALSE 34876
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34846: LD_ADDR_EXP 105
34850: PUSH
34851: LD_EXP 105
34855: PPUSH
34856: LD_VAR 0 5
34860: PPUSH
34861: CALL_OW 3
34865: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34866: CALL 35031 0 0
// exit ;
34870: POP
34871: POP
34872: GO 35026
// end else
34874: GO 34972
// if factory = factoryWaypoints [ i ] [ 2 ] then
34876: LD_VAR 0 1
34880: PUSH
34881: LD_EXP 105
34885: PUSH
34886: LD_VAR 0 5
34890: ARRAY
34891: PUSH
34892: LD_INT 2
34894: ARRAY
34895: EQUAL
34896: IFFALSE 34972
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34898: LD_ADDR_EXP 105
34902: PUSH
34903: LD_EXP 105
34907: PPUSH
34908: LD_VAR 0 5
34912: PPUSH
34913: CALL_OW 3
34917: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34918: LD_ADDR_EXP 105
34922: PUSH
34923: LD_EXP 105
34927: PPUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL_OW 255
34937: PUSH
34938: LD_VAR 0 1
34942: PUSH
34943: LD_VAR 0 2
34947: PUSH
34948: LD_VAR 0 3
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: PPUSH
34959: CALL 80806 0 2
34963: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34964: CALL 35031 0 0
// exit ;
34968: POP
34969: POP
34970: GO 35026
// end ; end ;
34972: GO 34811
34974: POP
34975: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34976: LD_ADDR_EXP 105
34980: PUSH
34981: LD_EXP 105
34985: PPUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL_OW 255
34995: PUSH
34996: LD_VAR 0 1
35000: PUSH
35001: LD_VAR 0 2
35005: PUSH
35006: LD_VAR 0 3
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: PPUSH
35017: CALL 80806 0 2
35021: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35022: CALL 35031 0 0
// end ;
35026: LD_VAR 0 4
35030: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35031: LD_INT 0
35033: PPUSH
35034: PPUSH
35035: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35036: LD_STRING resetFactoryWaypoint();
35038: PPUSH
35039: CALL_OW 559
// if factoryWaypoints then
35043: LD_EXP 105
35047: IFFALSE 35168
// begin list := factoryWaypoints ;
35049: LD_ADDR_VAR 0 3
35053: PUSH
35054: LD_EXP 105
35058: ST_TO_ADDR
// for i := 1 to list do
35059: LD_ADDR_VAR 0 2
35063: PUSH
35064: DOUBLE
35065: LD_INT 1
35067: DEC
35068: ST_TO_ADDR
35069: LD_VAR 0 3
35073: PUSH
35074: FOR_TO
35075: IFFALSE 35166
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35077: LD_STRING setFactoryWaypointXY(
35079: PUSH
35080: LD_VAR 0 3
35084: PUSH
35085: LD_VAR 0 2
35089: ARRAY
35090: PUSH
35091: LD_INT 1
35093: ARRAY
35094: STR
35095: PUSH
35096: LD_STRING ,
35098: STR
35099: PUSH
35100: LD_VAR 0 3
35104: PUSH
35105: LD_VAR 0 2
35109: ARRAY
35110: PUSH
35111: LD_INT 2
35113: ARRAY
35114: STR
35115: PUSH
35116: LD_STRING ,
35118: STR
35119: PUSH
35120: LD_VAR 0 3
35124: PUSH
35125: LD_VAR 0 2
35129: ARRAY
35130: PUSH
35131: LD_INT 3
35133: ARRAY
35134: STR
35135: PUSH
35136: LD_STRING ,
35138: STR
35139: PUSH
35140: LD_VAR 0 3
35144: PUSH
35145: LD_VAR 0 2
35149: ARRAY
35150: PUSH
35151: LD_INT 4
35153: ARRAY
35154: STR
35155: PUSH
35156: LD_STRING )
35158: STR
35159: PPUSH
35160: CALL_OW 559
35164: GO 35074
35166: POP
35167: POP
// end ; end ;
35168: LD_VAR 0 1
35172: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35173: LD_INT 0
35175: PPUSH
// if HexInfo ( x , y ) = warehouse then
35176: LD_VAR 0 2
35180: PPUSH
35181: LD_VAR 0 3
35185: PPUSH
35186: CALL_OW 428
35190: PUSH
35191: LD_VAR 0 1
35195: EQUAL
35196: IFFALSE 35223
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35198: LD_ADDR_EXP 107
35202: PUSH
35203: LD_EXP 107
35207: PPUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: LD_INT 0
35215: PPUSH
35216: CALL_OW 1
35220: ST_TO_ADDR
35221: GO 35274
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35223: LD_ADDR_EXP 107
35227: PUSH
35228: LD_EXP 107
35232: PPUSH
35233: LD_VAR 0 1
35237: PPUSH
35238: LD_VAR 0 1
35242: PPUSH
35243: CALL_OW 255
35247: PUSH
35248: LD_VAR 0 1
35252: PUSH
35253: LD_VAR 0 2
35257: PUSH
35258: LD_VAR 0 3
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: PPUSH
35269: CALL_OW 1
35273: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35274: CALL 35283 0 0
// end ;
35278: LD_VAR 0 4
35282: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35283: LD_INT 0
35285: PPUSH
35286: PPUSH
35287: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35288: LD_STRING resetWarehouseGatheringPoints();
35290: PPUSH
35291: CALL_OW 559
// if warehouseGatheringPoints then
35295: LD_EXP 107
35299: IFFALSE 35425
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35301: LD_ADDR_VAR 0 3
35305: PUSH
35306: LD_EXP 107
35310: PPUSH
35311: CALL 84740 0 1
35315: ST_TO_ADDR
// for i := 1 to list do
35316: LD_ADDR_VAR 0 2
35320: PUSH
35321: DOUBLE
35322: LD_INT 1
35324: DEC
35325: ST_TO_ADDR
35326: LD_VAR 0 3
35330: PUSH
35331: FOR_TO
35332: IFFALSE 35423
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35334: LD_STRING setWarehouseGatheringPointXY(
35336: PUSH
35337: LD_VAR 0 3
35341: PUSH
35342: LD_VAR 0 2
35346: ARRAY
35347: PUSH
35348: LD_INT 1
35350: ARRAY
35351: STR
35352: PUSH
35353: LD_STRING ,
35355: STR
35356: PUSH
35357: LD_VAR 0 3
35361: PUSH
35362: LD_VAR 0 2
35366: ARRAY
35367: PUSH
35368: LD_INT 2
35370: ARRAY
35371: STR
35372: PUSH
35373: LD_STRING ,
35375: STR
35376: PUSH
35377: LD_VAR 0 3
35381: PUSH
35382: LD_VAR 0 2
35386: ARRAY
35387: PUSH
35388: LD_INT 3
35390: ARRAY
35391: STR
35392: PUSH
35393: LD_STRING ,
35395: STR
35396: PUSH
35397: LD_VAR 0 3
35401: PUSH
35402: LD_VAR 0 2
35406: ARRAY
35407: PUSH
35408: LD_INT 4
35410: ARRAY
35411: STR
35412: PUSH
35413: LD_STRING )
35415: STR
35416: PPUSH
35417: CALL_OW 559
35421: GO 35331
35423: POP
35424: POP
// end ; end ;
35425: LD_VAR 0 1
35429: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35430: LD_EXP 107
35434: IFFALSE 36129
35436: GO 35438
35438: DISABLE
35439: LD_INT 0
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
// begin enable ;
35450: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35451: LD_ADDR_VAR 0 3
35455: PUSH
35456: LD_EXP 107
35460: PPUSH
35461: CALL 84740 0 1
35465: ST_TO_ADDR
// if not list then
35466: LD_VAR 0 3
35470: NOT
35471: IFFALSE 35475
// exit ;
35473: GO 36129
// for i := 1 to list do
35475: LD_ADDR_VAR 0 1
35479: PUSH
35480: DOUBLE
35481: LD_INT 1
35483: DEC
35484: ST_TO_ADDR
35485: LD_VAR 0 3
35489: PUSH
35490: FOR_TO
35491: IFFALSE 36127
// begin depot := list [ i ] [ 2 ] ;
35493: LD_ADDR_VAR 0 8
35497: PUSH
35498: LD_VAR 0 3
35502: PUSH
35503: LD_VAR 0 1
35507: ARRAY
35508: PUSH
35509: LD_INT 2
35511: ARRAY
35512: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35513: LD_ADDR_VAR 0 5
35517: PUSH
35518: LD_VAR 0 3
35522: PUSH
35523: LD_VAR 0 1
35527: ARRAY
35528: PUSH
35529: LD_INT 1
35531: ARRAY
35532: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35533: LD_VAR 0 8
35537: PPUSH
35538: CALL_OW 301
35542: IFTRUE 35561
35544: PUSH
35545: LD_VAR 0 5
35549: PUSH
35550: LD_VAR 0 8
35554: PPUSH
35555: CALL_OW 255
35559: NONEQUAL
35560: OR
35561: IFFALSE 35590
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35563: LD_ADDR_EXP 107
35567: PUSH
35568: LD_EXP 107
35572: PPUSH
35573: LD_VAR 0 8
35577: PPUSH
35578: LD_INT 0
35580: PPUSH
35581: CALL_OW 1
35585: ST_TO_ADDR
// exit ;
35586: POP
35587: POP
35588: GO 36129
// end ; x := list [ i ] [ 3 ] ;
35590: LD_ADDR_VAR 0 6
35594: PUSH
35595: LD_VAR 0 3
35599: PUSH
35600: LD_VAR 0 1
35604: ARRAY
35605: PUSH
35606: LD_INT 3
35608: ARRAY
35609: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35610: LD_ADDR_VAR 0 7
35614: PUSH
35615: LD_VAR 0 3
35619: PUSH
35620: LD_VAR 0 1
35624: ARRAY
35625: PUSH
35626: LD_INT 4
35628: ARRAY
35629: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_VAR 0 6
35639: PPUSH
35640: LD_VAR 0 7
35644: PPUSH
35645: LD_INT 16
35647: PPUSH
35648: CALL 83314 0 3
35652: ST_TO_ADDR
// if not cratesNearbyPoint then
35653: LD_VAR 0 9
35657: NOT
35658: IFFALSE 35664
// exit ;
35660: POP
35661: POP
35662: GO 36129
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35664: LD_ADDR_VAR 0 4
35668: PUSH
35669: LD_INT 22
35671: PUSH
35672: LD_VAR 0 5
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 3
35683: PUSH
35684: LD_INT 60
35686: PUSH
35687: EMPTY
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 91
35696: PUSH
35697: LD_VAR 0 8
35701: PUSH
35702: LD_INT 6
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 25
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 25
35725: PUSH
35726: LD_INT 16
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: PPUSH
35744: CALL_OW 69
35748: PUSH
35749: LD_VAR 0 8
35753: PPUSH
35754: CALL_OW 313
35758: PPUSH
35759: LD_INT 3
35761: PUSH
35762: LD_INT 60
35764: PUSH
35765: EMPTY
35766: LIST
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 2
35774: PUSH
35775: LD_INT 25
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 25
35787: PUSH
35788: LD_INT 16
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PPUSH
35804: CALL_OW 72
35808: UNION
35809: ST_TO_ADDR
// if tmp then
35810: LD_VAR 0 4
35814: IFFALSE 35894
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35816: LD_ADDR_VAR 0 4
35820: PUSH
35821: LD_VAR 0 4
35825: PPUSH
35826: LD_INT 3
35828: PPUSH
35829: CALL 81121 0 2
35833: ST_TO_ADDR
// for j in tmp do
35834: LD_ADDR_VAR 0 2
35838: PUSH
35839: LD_VAR 0 4
35843: PUSH
35844: FOR_IN
35845: IFFALSE 35888
// begin if IsInUnit ( j ) then
35847: LD_VAR 0 2
35851: PPUSH
35852: CALL_OW 310
35856: IFFALSE 35867
// ComExit ( j ) ;
35858: LD_VAR 0 2
35862: PPUSH
35863: CALL 81204 0 1
// AddComCollect ( j , x , y ) ;
35867: LD_VAR 0 2
35871: PPUSH
35872: LD_VAR 0 6
35876: PPUSH
35877: LD_VAR 0 7
35881: PPUSH
35882: CALL_OW 177
// end ;
35886: GO 35844
35888: POP
35889: POP
// exit ;
35890: POP
35891: POP
35892: GO 36129
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35894: LD_ADDR_VAR 0 4
35898: PUSH
35899: LD_INT 22
35901: PUSH
35902: LD_VAR 0 5
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 91
35913: PUSH
35914: LD_VAR 0 8
35918: PUSH
35919: LD_INT 8
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: LD_INT 34
35932: PUSH
35933: LD_INT 12
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 34
35942: PUSH
35943: LD_INT 51
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 34
35952: PUSH
35953: LD_INT 32
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 34
35962: PUSH
35963: LD_INT 89
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: PPUSH
35982: CALL_OW 69
35986: ST_TO_ADDR
// if tmp then
35987: LD_VAR 0 4
35991: IFFALSE 36125
// begin for j in tmp do
35993: LD_ADDR_VAR 0 2
35997: PUSH
35998: LD_VAR 0 4
36002: PUSH
36003: FOR_IN
36004: IFFALSE 36123
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36006: LD_VAR 0 2
36010: PPUSH
36011: CALL_OW 262
36015: PUSH
36016: LD_INT 3
36018: EQUAL
36019: IFTRUE 36036
36021: PUSH
36022: LD_VAR 0 2
36026: PPUSH
36027: CALL_OW 261
36031: PUSH
36032: LD_INT 20
36034: GREATER
36035: OR
36036: IFFALSE 36050
36038: PUSH
36039: LD_VAR 0 2
36043: PPUSH
36044: CALL_OW 314
36048: NOT
36049: AND
36050: IFFALSE 36080
36052: PUSH
36053: LD_VAR 0 2
36057: PPUSH
36058: CALL_OW 263
36062: PUSH
36063: LD_INT 1
36065: NONEQUAL
36066: IFTRUE 36079
36068: PUSH
36069: LD_VAR 0 2
36073: PPUSH
36074: CALL_OW 311
36078: OR
36079: AND
36080: IFFALSE 36121
// begin ComCollect ( j , x , y ) ;
36082: LD_VAR 0 2
36086: PPUSH
36087: LD_VAR 0 6
36091: PPUSH
36092: LD_VAR 0 7
36096: PPUSH
36097: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36101: LD_VAR 0 2
36105: PPUSH
36106: LD_VAR 0 8
36110: PPUSH
36111: CALL_OW 172
// exit ;
36115: POP
36116: POP
36117: POP
36118: POP
36119: GO 36129
// end ;
36121: GO 36003
36123: POP
36124: POP
// end ; end ;
36125: GO 35490
36127: POP
36128: POP
// end ; end_of_file
36129: PPOPN 9
36131: END
// export function SOS_UnitDestroyed ( un ) ; begin
36132: LD_INT 0
36134: PPUSH
// ComRadiation ( un ) ;
36135: LD_VAR 0 1
36139: PPUSH
36140: CALL 37302 0 1
// end ;
36144: LD_VAR 0 2
36148: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36149: LD_INT 0
36151: PPUSH
// ComRadiation ( un ) ;
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL 37302 0 1
// end ;
36161: LD_VAR 0 2
36165: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36166: LD_INT 0
36168: PPUSH
// end ;
36169: LD_VAR 0 4
36173: RET
// export function SOS_Command ( cmd ) ; begin
36174: LD_INT 0
36176: PPUSH
// end ;
36177: LD_VAR 0 2
36181: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36182: LD_INT 0
36184: PPUSH
// end ;
36185: LD_VAR 0 6
36189: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
36190: LD_INT 0
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
// if not vehicle or not factory then
36197: LD_VAR 0 1
36201: NOT
36202: IFTRUE 36211
36204: PUSH
36205: LD_VAR 0 2
36209: NOT
36210: OR
36211: IFFALSE 36215
// exit ;
36213: GO 36877
// weapon := GetWeapon ( vehicle ) ;
36215: LD_ADDR_VAR 0 7
36219: PUSH
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL_OW 264
36229: ST_TO_ADDR
// if weapon = ar_miner then
36230: LD_VAR 0 7
36234: PUSH
36235: LD_INT 81
36237: EQUAL
36238: IFFALSE 36295
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
36240: LD_ADDR_EXP 116
36244: PUSH
36245: LD_EXP 116
36249: PPUSH
36250: LD_EXP 116
36254: PUSH
36255: LD_INT 1
36257: PLUS
36258: PPUSH
36259: LD_VAR 0 1
36263: PPUSH
36264: CALL_OW 1
36268: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36269: LD_ADDR_EXP 117
36273: PUSH
36274: LD_EXP 117
36278: PPUSH
36279: LD_EXP 117
36283: PUSH
36284: LD_INT 1
36286: PLUS
36287: PPUSH
36288: EMPTY
36289: PPUSH
36290: CALL_OW 1
36294: ST_TO_ADDR
// end ; if not factoryWaypoints then
36295: LD_EXP 105
36299: NOT
36300: IFFALSE 36304
// exit ;
36302: GO 36877
// for i := 1 to Count ( factoryWaypoints ) do
36304: LD_ADDR_VAR 0 4
36308: PUSH
36309: DOUBLE
36310: LD_INT 1
36312: DEC
36313: ST_TO_ADDR
36314: LD_EXP 105
36318: PPUSH
36319: CALL 44830 0 1
36323: PUSH
36324: FOR_TO
36325: IFFALSE 36875
// if factoryWaypoints [ i ] [ 2 ] = factory then
36327: LD_EXP 105
36331: PUSH
36332: LD_VAR 0 4
36336: ARRAY
36337: PUSH
36338: LD_INT 2
36340: ARRAY
36341: PUSH
36342: LD_VAR 0 2
36346: EQUAL
36347: IFFALSE 36873
// begin if GetControl ( vehicle ) = control_manual then
36349: LD_VAR 0 1
36353: PPUSH
36354: CALL_OW 263
36358: PUSH
36359: LD_INT 1
36361: EQUAL
36362: IFFALSE 36726
// begin driver := IsDrivenBy ( vehicle ) ;
36364: LD_ADDR_VAR 0 5
36368: PUSH
36369: LD_VAR 0 1
36373: PPUSH
36374: CALL_OW 311
36378: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36379: LD_VAR 0 5
36383: PUSH
36384: LD_EXP 106
36388: IN
36389: IFTRUE 36403
36391: PUSH
36392: LD_VAR 0 1
36396: PUSH
36397: LD_EXP 106
36401: IN
36402: OR
36403: IFFALSE 36409
// exit ;
36405: POP
36406: POP
36407: GO 36877
// if not HasTask ( driver ) then
36409: LD_VAR 0 5
36413: PPUSH
36414: CALL_OW 314
36418: NOT
36419: IFFALSE 36724
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36421: LD_ADDR_EXP 106
36425: PUSH
36426: LD_EXP 106
36430: PPUSH
36431: LD_VAR 0 5
36435: PPUSH
36436: CALL 80806 0 2
36440: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36441: LD_ADDR_EXP 106
36445: PUSH
36446: LD_EXP 106
36450: PPUSH
36451: LD_VAR 0 1
36455: PPUSH
36456: CALL 80806 0 2
36460: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36461: LD_ADDR_VAR 0 6
36465: PUSH
36466: LD_EXP 105
36470: PUSH
36471: LD_VAR 0 4
36475: ARRAY
36476: PUSH
36477: LD_INT 3
36479: ARRAY
36480: PPUSH
36481: LD_EXP 105
36485: PUSH
36486: LD_VAR 0 4
36490: ARRAY
36491: PUSH
36492: LD_INT 4
36494: ARRAY
36495: PPUSH
36496: CALL_OW 428
36500: ST_TO_ADDR
// if hex then
36501: LD_VAR 0 6
36505: IFFALSE 36523
// ComMoveUnit ( driver , hex ) else
36507: LD_VAR 0 5
36511: PPUSH
36512: LD_VAR 0 6
36516: PPUSH
36517: CALL_OW 112
36521: GO 36607
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36523: LD_VAR 0 1
36527: PPUSH
36528: LD_EXP 105
36532: PUSH
36533: LD_VAR 0 4
36537: ARRAY
36538: PUSH
36539: LD_INT 3
36541: ARRAY
36542: PPUSH
36543: LD_EXP 105
36547: PUSH
36548: LD_VAR 0 4
36552: ARRAY
36553: PUSH
36554: LD_INT 4
36556: ARRAY
36557: PPUSH
36558: CALL_OW 297
36562: PUSH
36563: LD_INT 0
36565: GREATER
36566: IFFALSE 36607
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36568: LD_VAR 0 5
36572: PPUSH
36573: LD_EXP 105
36577: PUSH
36578: LD_VAR 0 4
36582: ARRAY
36583: PUSH
36584: LD_INT 3
36586: ARRAY
36587: PPUSH
36588: LD_EXP 105
36592: PUSH
36593: LD_VAR 0 4
36597: ARRAY
36598: PUSH
36599: LD_INT 4
36601: ARRAY
36602: PPUSH
36603: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36607: LD_VAR 0 5
36611: PPUSH
36612: CALL_OW 181
// if Multiplayer then
36616: LD_OWVAR 4
36620: IFFALSE 36669
// begin repeat wait ( 10 ) ;
36622: LD_INT 10
36624: PPUSH
36625: CALL_OW 67
// until not IsInUnit ( driver ) ;
36629: LD_VAR 0 5
36633: PPUSH
36634: CALL_OW 310
36638: NOT
36639: IFFALSE 36622
// if not HasTask ( driver ) then
36641: LD_VAR 0 5
36645: PPUSH
36646: CALL_OW 314
36650: NOT
36651: IFFALSE 36667
// ComEnterUnit ( driver , factory ) ;
36653: LD_VAR 0 5
36657: PPUSH
36658: LD_VAR 0 2
36662: PPUSH
36663: CALL_OW 120
// end else
36667: GO 36683
// AddComEnterUnit ( driver , factory ) ;
36669: LD_VAR 0 5
36673: PPUSH
36674: LD_VAR 0 2
36678: PPUSH
36679: CALL_OW 180
// wait ( 0 0$1 ) ;
36683: LD_INT 35
36685: PPUSH
36686: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36690: LD_ADDR_EXP 106
36694: PUSH
36695: LD_EXP 106
36699: PUSH
36700: LD_VAR 0 5
36704: DIFF
36705: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36706: LD_ADDR_EXP 106
36710: PUSH
36711: LD_EXP 106
36715: PUSH
36716: LD_VAR 0 1
36720: DIFF
36721: ST_TO_ADDR
// break ;
36722: GO 36875
// end ; end else
36724: GO 36873
// if GetControl ( vehicle ) = control_remote then
36726: LD_VAR 0 1
36730: PPUSH
36731: CALL_OW 263
36735: PUSH
36736: LD_INT 2
36738: EQUAL
36739: IFFALSE 36825
// begin wait ( 0 0$2 ) ;
36741: LD_INT 70
36743: PPUSH
36744: CALL_OW 67
// repeat wait ( 10 ) ;
36748: LD_INT 10
36750: PPUSH
36751: CALL_OW 67
// Connect ( vehicle ) ;
36755: LD_VAR 0 1
36759: PPUSH
36760: CALL 51108 0 1
// until IsControledBy ( vehicle ) ;
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 312
36773: IFFALSE 36748
// wait ( 10 ) ;
36775: LD_INT 10
36777: PPUSH
36778: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36782: LD_VAR 0 1
36786: PPUSH
36787: LD_EXP 105
36791: PUSH
36792: LD_VAR 0 4
36796: ARRAY
36797: PUSH
36798: LD_INT 3
36800: ARRAY
36801: PPUSH
36802: LD_EXP 105
36806: PUSH
36807: LD_VAR 0 4
36811: ARRAY
36812: PUSH
36813: LD_INT 4
36815: ARRAY
36816: PPUSH
36817: CALL_OW 111
// break ;
36821: GO 36875
// end else
36823: GO 36873
// begin wait ( 0 0$3 ) ;
36825: LD_INT 105
36827: PPUSH
36828: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36832: LD_VAR 0 1
36836: PPUSH
36837: LD_EXP 105
36841: PUSH
36842: LD_VAR 0 4
36846: ARRAY
36847: PUSH
36848: LD_INT 3
36850: ARRAY
36851: PPUSH
36852: LD_EXP 105
36856: PUSH
36857: LD_VAR 0 4
36861: ARRAY
36862: PUSH
36863: LD_INT 4
36865: ARRAY
36866: PPUSH
36867: CALL_OW 111
// break ;
36871: GO 36875
// end ; end ;
36873: GO 36324
36875: POP
36876: POP
// end ;
36877: LD_VAR 0 3
36881: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36882: LD_INT 0
36884: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36885: LD_VAR 0 1
36889: PUSH
36890: LD_INT 250
36892: EQUAL
36893: IFFALSE 36910
36895: PUSH
36896: LD_VAR 0 2
36900: PPUSH
36901: CALL_OW 264
36905: PUSH
36906: LD_INT 81
36908: EQUAL
36909: AND
36910: IFFALSE 36931
// MinerPlaceMine ( unit , x , y ) ;
36912: LD_VAR 0 2
36916: PPUSH
36917: LD_VAR 0 4
36921: PPUSH
36922: LD_VAR 0 5
36926: PPUSH
36927: CALL 40277 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36931: LD_VAR 0 1
36935: PUSH
36936: LD_INT 251
36938: EQUAL
36939: IFFALSE 36956
36941: PUSH
36942: LD_VAR 0 2
36946: PPUSH
36947: CALL_OW 264
36951: PUSH
36952: LD_INT 81
36954: EQUAL
36955: AND
36956: IFFALSE 36977
// MinerDetonateMine ( unit , x , y ) ;
36958: LD_VAR 0 2
36962: PPUSH
36963: LD_VAR 0 4
36967: PPUSH
36968: LD_VAR 0 5
36972: PPUSH
36973: CALL 40684 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36977: LD_VAR 0 1
36981: PUSH
36982: LD_INT 252
36984: EQUAL
36985: IFFALSE 37002
36987: PUSH
36988: LD_VAR 0 2
36992: PPUSH
36993: CALL_OW 264
36997: PUSH
36998: LD_INT 81
37000: EQUAL
37001: AND
37002: IFFALSE 37023
// MinerCreateMinefield ( unit , x , y ) ;
37004: LD_VAR 0 2
37008: PPUSH
37009: LD_VAR 0 4
37013: PPUSH
37014: LD_VAR 0 5
37018: PPUSH
37019: CALL 40916 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37023: LD_VAR 0 1
37027: PUSH
37028: LD_INT 253
37030: EQUAL
37031: IFFALSE 37048
37033: PUSH
37034: LD_VAR 0 2
37038: PPUSH
37039: CALL_OW 257
37043: PUSH
37044: LD_INT 5
37046: EQUAL
37047: AND
37048: IFFALSE 37069
// ComBinocular ( unit , x , y ) ;
37050: LD_VAR 0 2
37054: PPUSH
37055: LD_VAR 0 4
37059: PPUSH
37060: LD_VAR 0 5
37064: PPUSH
37065: CALL 41291 0 3
// if selectedUnit then
37069: LD_VAR 0 3
37073: IFFALSE 37133
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37075: LD_VAR 0 1
37079: PUSH
37080: LD_INT 254
37082: EQUAL
37083: IFFALSE 37100
37085: PUSH
37086: LD_VAR 0 2
37090: PPUSH
37091: CALL_OW 264
37095: PUSH
37096: LD_INT 99
37098: EQUAL
37099: AND
37100: IFFALSE 37117
37102: PUSH
37103: LD_VAR 0 3
37107: PPUSH
37108: CALL_OW 263
37112: PUSH
37113: LD_INT 3
37115: EQUAL
37116: AND
37117: IFFALSE 37133
// HackDestroyVehicle ( unit , selectedUnit ) ;
37119: LD_VAR 0 2
37123: PPUSH
37124: LD_VAR 0 3
37128: PPUSH
37129: CALL 39467 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37133: LD_VAR 0 1
37137: PUSH
37138: LD_INT 255
37140: EQUAL
37141: IFFALSE 37165
37143: PUSH
37144: LD_VAR 0 2
37148: PPUSH
37149: CALL_OW 264
37153: PUSH
37154: LD_INT 14
37156: PUSH
37157: LD_INT 53
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: IN
37164: AND
37165: IFFALSE 37183
37167: PUSH
37168: LD_VAR 0 4
37172: PPUSH
37173: LD_VAR 0 5
37177: PPUSH
37178: CALL_OW 488
37182: AND
37183: IFFALSE 37207
// CutTreeXYR ( unit , x , y , 12 ) ;
37185: LD_VAR 0 2
37189: PPUSH
37190: LD_VAR 0 4
37194: PPUSH
37195: LD_VAR 0 5
37199: PPUSH
37200: LD_INT 12
37202: PPUSH
37203: CALL 37398 0 4
// if cmd = 256 then
37207: LD_VAR 0 1
37211: PUSH
37212: LD_INT 256
37214: EQUAL
37215: IFFALSE 37236
// SetFactoryWaypoint ( unit , x , y ) ;
37217: LD_VAR 0 2
37221: PPUSH
37222: LD_VAR 0 4
37226: PPUSH
37227: LD_VAR 0 5
37231: PPUSH
37232: CALL 34677 0 3
// if cmd = 257 then
37236: LD_VAR 0 1
37240: PUSH
37241: LD_INT 257
37243: EQUAL
37244: IFFALSE 37265
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37246: LD_VAR 0 2
37250: PPUSH
37251: LD_VAR 0 4
37255: PPUSH
37256: LD_VAR 0 5
37260: PPUSH
37261: CALL 35173 0 3
// if cmd = 258 then
37265: LD_VAR 0 1
37269: PUSH
37270: LD_INT 258
37272: EQUAL
37273: IFFALSE 37297
// BurnTreeXYR ( unit , x , y , 8 ) ;
37275: LD_VAR 0 2
37279: PPUSH
37280: LD_VAR 0 4
37284: PPUSH
37285: LD_VAR 0 5
37289: PPUSH
37290: LD_INT 8
37292: PPUSH
37293: CALL 37820 0 4
// end ;
37297: LD_VAR 0 6
37301: RET
// export function ComRadiation ( un ) ; var eff ; begin
37302: LD_INT 0
37304: PPUSH
37305: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 264
37315: PUSH
37316: LD_INT 91
37318: NONEQUAL
37319: IFFALSE 37323
// exit ;
37321: GO 37393
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37323: LD_INT 68
37325: PPUSH
37326: LD_VAR 0 1
37330: PPUSH
37331: CALL_OW 255
37335: PPUSH
37336: CALL_OW 321
37340: PUSH
37341: LD_INT 2
37343: EQUAL
37344: IFFALSE 37356
// eff := 50 else
37346: LD_ADDR_VAR 0 3
37350: PUSH
37351: LD_INT 50
37353: ST_TO_ADDR
37354: GO 37364
// eff := 25 ;
37356: LD_ADDR_VAR 0 3
37360: PUSH
37361: LD_INT 25
37363: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37364: LD_VAR 0 1
37368: PPUSH
37369: CALL_OW 250
37373: PPUSH
37374: LD_VAR 0 1
37378: PPUSH
37379: CALL_OW 251
37383: PPUSH
37384: LD_VAR 0 3
37388: PPUSH
37389: CALL_OW 495
// end ;
37393: LD_VAR 0 2
37397: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37398: LD_INT 0
37400: PPUSH
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
37405: PPUSH
37406: PPUSH
37407: PPUSH
37408: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37409: LD_VAR 0 1
37413: PPUSH
37414: CALL_OW 302
37418: NOT
37419: IFTRUE 37438
37421: PUSH
37422: LD_VAR 0 2
37426: PPUSH
37427: LD_VAR 0 3
37431: PPUSH
37432: CALL_OW 488
37436: NOT
37437: OR
37438: IFTRUE 37447
37440: PUSH
37441: LD_VAR 0 4
37445: NOT
37446: OR
37447: IFFALSE 37451
// exit ;
37449: GO 37815
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
37451: LD_VAR 0 1
37455: PPUSH
37456: CALL_OW 437
37460: PPUSH
37461: CALL 44830 0 1
37465: PUSH
37466: LD_INT 10
37468: GREATER
37469: IFFALSE 37473
// exit ;
37471: GO 37815
// list := [ ] ;
37473: LD_ADDR_VAR 0 13
37477: PUSH
37478: EMPTY
37479: ST_TO_ADDR
// if x - r < 0 then
37480: LD_VAR 0 2
37484: PUSH
37485: LD_VAR 0 4
37489: MINUS
37490: PUSH
37491: LD_INT 0
37493: LESS
37494: IFFALSE 37506
// min_x := 0 else
37496: LD_ADDR_VAR 0 7
37500: PUSH
37501: LD_INT 0
37503: ST_TO_ADDR
37504: GO 37522
// min_x := x - r ;
37506: LD_ADDR_VAR 0 7
37510: PUSH
37511: LD_VAR 0 2
37515: PUSH
37516: LD_VAR 0 4
37520: MINUS
37521: ST_TO_ADDR
// if y - r < 0 then
37522: LD_VAR 0 3
37526: PUSH
37527: LD_VAR 0 4
37531: MINUS
37532: PUSH
37533: LD_INT 0
37535: LESS
37536: IFFALSE 37548
// min_y := 0 else
37538: LD_ADDR_VAR 0 8
37542: PUSH
37543: LD_INT 0
37545: ST_TO_ADDR
37546: GO 37564
// min_y := y - r ;
37548: LD_ADDR_VAR 0 8
37552: PUSH
37553: LD_VAR 0 3
37557: PUSH
37558: LD_VAR 0 4
37562: MINUS
37563: ST_TO_ADDR
// max_x := x + r ;
37564: LD_ADDR_VAR 0 9
37568: PUSH
37569: LD_VAR 0 2
37573: PUSH
37574: LD_VAR 0 4
37578: PLUS
37579: ST_TO_ADDR
// max_y := y + r ;
37580: LD_ADDR_VAR 0 10
37584: PUSH
37585: LD_VAR 0 3
37589: PUSH
37590: LD_VAR 0 4
37594: PLUS
37595: ST_TO_ADDR
// for _x = min_x to max_x do
37596: LD_ADDR_VAR 0 11
37600: PUSH
37601: DOUBLE
37602: LD_VAR 0 7
37606: DEC
37607: ST_TO_ADDR
37608: LD_VAR 0 9
37612: PUSH
37613: FOR_TO
37614: IFFALSE 37733
// for _y = min_y to max_y do
37616: LD_ADDR_VAR 0 12
37620: PUSH
37621: DOUBLE
37622: LD_VAR 0 8
37626: DEC
37627: ST_TO_ADDR
37628: LD_VAR 0 10
37632: PUSH
37633: FOR_TO
37634: IFFALSE 37729
// begin if not ValidHex ( _x , _y ) then
37636: LD_VAR 0 11
37640: PPUSH
37641: LD_VAR 0 12
37645: PPUSH
37646: CALL_OW 488
37650: NOT
37651: IFFALSE 37655
// continue ;
37653: GO 37633
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37655: LD_VAR 0 11
37659: PPUSH
37660: LD_VAR 0 12
37664: PPUSH
37665: CALL_OW 351
37669: IFFALSE 37687
37671: PUSH
37672: LD_VAR 0 11
37676: PPUSH
37677: LD_VAR 0 12
37681: PPUSH
37682: CALL_OW 554
37686: AND
37687: IFFALSE 37727
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37689: LD_ADDR_VAR 0 13
37693: PUSH
37694: LD_VAR 0 13
37698: PPUSH
37699: LD_VAR 0 13
37703: PUSH
37704: LD_INT 1
37706: PLUS
37707: PPUSH
37708: LD_VAR 0 11
37712: PUSH
37713: LD_VAR 0 12
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PPUSH
37722: CALL_OW 2
37726: ST_TO_ADDR
// end ;
37727: GO 37633
37729: POP
37730: POP
37731: GO 37613
37733: POP
37734: POP
// if not list then
37735: LD_VAR 0 13
37739: NOT
37740: IFFALSE 37744
// exit ;
37742: GO 37815
// for i in list do
37744: LD_ADDR_VAR 0 6
37748: PUSH
37749: LD_VAR 0 13
37753: PUSH
37754: FOR_IN
37755: IFFALSE 37813
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37757: LD_VAR 0 1
37761: PPUSH
37762: LD_STRING M
37764: PUSH
37765: LD_VAR 0 6
37769: PUSH
37770: LD_INT 1
37772: ARRAY
37773: PUSH
37774: LD_VAR 0 6
37778: PUSH
37779: LD_INT 2
37781: ARRAY
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: PUSH
37804: EMPTY
37805: LIST
37806: PPUSH
37807: CALL_OW 447
37811: GO 37754
37813: POP
37814: POP
// end ;
37815: LD_VAR 0 5
37819: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37820: LD_INT 0
37822: PPUSH
37823: PPUSH
37824: PPUSH
37825: PPUSH
37826: PPUSH
37827: PPUSH
37828: PPUSH
37829: PPUSH
37830: PPUSH
37831: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37832: LD_VAR 0 1
37836: PPUSH
37837: CALL_OW 302
37841: NOT
37842: IFTRUE 37861
37844: PUSH
37845: LD_VAR 0 2
37849: PPUSH
37850: LD_VAR 0 3
37854: PPUSH
37855: CALL_OW 488
37859: NOT
37860: OR
37861: IFTRUE 37870
37863: PUSH
37864: LD_VAR 0 4
37868: NOT
37869: OR
37870: IFFALSE 37874
// exit ;
37872: GO 38413
// if Count ( GetTaskList ( flame ) ) > 10 then
37874: LD_VAR 0 1
37878: PPUSH
37879: CALL_OW 437
37883: PPUSH
37884: CALL 44830 0 1
37888: PUSH
37889: LD_INT 10
37891: GREATER
37892: IFFALSE 37896
// exit ;
37894: GO 38413
// list := [ ] ;
37896: LD_ADDR_VAR 0 13
37900: PUSH
37901: EMPTY
37902: ST_TO_ADDR
// if x - r < 0 then
37903: LD_VAR 0 2
37907: PUSH
37908: LD_VAR 0 4
37912: MINUS
37913: PUSH
37914: LD_INT 0
37916: LESS
37917: IFFALSE 37929
// min_x := 0 else
37919: LD_ADDR_VAR 0 7
37923: PUSH
37924: LD_INT 0
37926: ST_TO_ADDR
37927: GO 37945
// min_x := x - r ;
37929: LD_ADDR_VAR 0 7
37933: PUSH
37934: LD_VAR 0 2
37938: PUSH
37939: LD_VAR 0 4
37943: MINUS
37944: ST_TO_ADDR
// if y - r < 0 then
37945: LD_VAR 0 3
37949: PUSH
37950: LD_VAR 0 4
37954: MINUS
37955: PUSH
37956: LD_INT 0
37958: LESS
37959: IFFALSE 37971
// min_y := 0 else
37961: LD_ADDR_VAR 0 8
37965: PUSH
37966: LD_INT 0
37968: ST_TO_ADDR
37969: GO 37987
// min_y := y - r ;
37971: LD_ADDR_VAR 0 8
37975: PUSH
37976: LD_VAR 0 3
37980: PUSH
37981: LD_VAR 0 4
37985: MINUS
37986: ST_TO_ADDR
// max_x := x + r ;
37987: LD_ADDR_VAR 0 9
37991: PUSH
37992: LD_VAR 0 2
37996: PUSH
37997: LD_VAR 0 4
38001: PLUS
38002: ST_TO_ADDR
// max_y := y + r ;
38003: LD_ADDR_VAR 0 10
38007: PUSH
38008: LD_VAR 0 3
38012: PUSH
38013: LD_VAR 0 4
38017: PLUS
38018: ST_TO_ADDR
// for _x = min_x to max_x do
38019: LD_ADDR_VAR 0 11
38023: PUSH
38024: DOUBLE
38025: LD_VAR 0 7
38029: DEC
38030: ST_TO_ADDR
38031: LD_VAR 0 9
38035: PUSH
38036: FOR_TO
38037: IFFALSE 38156
// for _y = min_y to max_y do
38039: LD_ADDR_VAR 0 12
38043: PUSH
38044: DOUBLE
38045: LD_VAR 0 8
38049: DEC
38050: ST_TO_ADDR
38051: LD_VAR 0 10
38055: PUSH
38056: FOR_TO
38057: IFFALSE 38152
// begin if not ValidHex ( _x , _y ) then
38059: LD_VAR 0 11
38063: PPUSH
38064: LD_VAR 0 12
38068: PPUSH
38069: CALL_OW 488
38073: NOT
38074: IFFALSE 38078
// continue ;
38076: GO 38056
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38078: LD_VAR 0 11
38082: PPUSH
38083: LD_VAR 0 12
38087: PPUSH
38088: CALL_OW 351
38092: IFFALSE 38110
38094: PUSH
38095: LD_VAR 0 11
38099: PPUSH
38100: LD_VAR 0 12
38104: PPUSH
38105: CALL_OW 554
38109: AND
38110: IFFALSE 38150
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38112: LD_ADDR_VAR 0 13
38116: PUSH
38117: LD_VAR 0 13
38121: PPUSH
38122: LD_VAR 0 13
38126: PUSH
38127: LD_INT 1
38129: PLUS
38130: PPUSH
38131: LD_VAR 0 11
38135: PUSH
38136: LD_VAR 0 12
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PPUSH
38145: CALL_OW 2
38149: ST_TO_ADDR
// end ;
38150: GO 38056
38152: POP
38153: POP
38154: GO 38036
38156: POP
38157: POP
// if not list then
38158: LD_VAR 0 13
38162: NOT
38163: IFFALSE 38167
// exit ;
38165: GO 38413
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38167: LD_ADDR_VAR 0 13
38171: PUSH
38172: LD_VAR 0 1
38176: PPUSH
38177: LD_VAR 0 13
38181: PPUSH
38182: LD_INT 1
38184: PPUSH
38185: LD_INT 1
38187: PPUSH
38188: CALL 48236 0 4
38192: ST_TO_ADDR
// ComStop ( flame ) ;
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 141
// for i in list do
38202: LD_ADDR_VAR 0 6
38206: PUSH
38207: LD_VAR 0 13
38211: PUSH
38212: FOR_IN
38213: IFFALSE 38244
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38215: LD_VAR 0 1
38219: PPUSH
38220: LD_VAR 0 6
38224: PUSH
38225: LD_INT 1
38227: ARRAY
38228: PPUSH
38229: LD_VAR 0 6
38233: PUSH
38234: LD_INT 2
38236: ARRAY
38237: PPUSH
38238: CALL_OW 176
38242: GO 38212
38244: POP
38245: POP
// repeat wait ( 0 0$1 ) ;
38246: LD_INT 35
38248: PPUSH
38249: CALL_OW 67
// task := GetTaskList ( flame ) ;
38253: LD_ADDR_VAR 0 14
38257: PUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: CALL_OW 437
38267: ST_TO_ADDR
// if not task then
38268: LD_VAR 0 14
38272: NOT
38273: IFFALSE 38277
// exit ;
38275: GO 38413
// if task [ 1 ] [ 1 ] <> | then
38277: LD_VAR 0 14
38281: PUSH
38282: LD_INT 1
38284: ARRAY
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PUSH
38290: LD_STRING |
38292: NONEQUAL
38293: IFFALSE 38297
// exit ;
38295: GO 38413
// _x := task [ 1 ] [ 2 ] ;
38297: LD_ADDR_VAR 0 11
38301: PUSH
38302: LD_VAR 0 14
38306: PUSH
38307: LD_INT 1
38309: ARRAY
38310: PUSH
38311: LD_INT 2
38313: ARRAY
38314: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38315: LD_ADDR_VAR 0 12
38319: PUSH
38320: LD_VAR 0 14
38324: PUSH
38325: LD_INT 1
38327: ARRAY
38328: PUSH
38329: LD_INT 3
38331: ARRAY
38332: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38333: LD_VAR 0 11
38337: PPUSH
38338: LD_VAR 0 12
38342: PPUSH
38343: CALL_OW 351
38347: NOT
38348: IFTRUE 38367
38350: PUSH
38351: LD_VAR 0 11
38355: PPUSH
38356: LD_VAR 0 12
38360: PPUSH
38361: CALL_OW 554
38365: NOT
38366: OR
38367: IFFALSE 38401
// begin task := Delete ( task , 1 ) ;
38369: LD_ADDR_VAR 0 14
38373: PUSH
38374: LD_VAR 0 14
38378: PPUSH
38379: LD_INT 1
38381: PPUSH
38382: CALL_OW 3
38386: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38387: LD_VAR 0 1
38391: PPUSH
38392: LD_VAR 0 14
38396: PPUSH
38397: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 314
38410: NOT
38411: IFFALSE 38246
// end ;
38413: LD_VAR 0 5
38417: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38418: LD_EXP 109
38422: NOT
38423: IFFALSE 38473
38425: GO 38427
38427: DISABLE
// begin initHack := true ;
38428: LD_ADDR_EXP 109
38432: PUSH
38433: LD_INT 1
38435: ST_TO_ADDR
// hackTanks := [ ] ;
38436: LD_ADDR_EXP 110
38440: PUSH
38441: EMPTY
38442: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38443: LD_ADDR_EXP 111
38447: PUSH
38448: EMPTY
38449: ST_TO_ADDR
// hackLimit := 3 ;
38450: LD_ADDR_EXP 112
38454: PUSH
38455: LD_INT 3
38457: ST_TO_ADDR
// hackDist := 12 ;
38458: LD_ADDR_EXP 113
38462: PUSH
38463: LD_INT 12
38465: ST_TO_ADDR
// hackCounter := [ ] ;
38466: LD_ADDR_EXP 114
38470: PUSH
38471: EMPTY
38472: ST_TO_ADDR
// end ;
38473: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38474: LD_EXP 109
38478: IFFALSE 38496
38480: PUSH
38481: LD_INT 34
38483: PUSH
38484: LD_INT 99
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PPUSH
38491: CALL_OW 69
38495: AND
38496: IFFALSE 38749
38498: GO 38500
38500: DISABLE
38501: LD_INT 0
38503: PPUSH
38504: PPUSH
// begin enable ;
38505: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38506: LD_ADDR_VAR 0 1
38510: PUSH
38511: LD_INT 34
38513: PUSH
38514: LD_INT 99
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PPUSH
38521: CALL_OW 69
38525: PUSH
38526: FOR_IN
38527: IFFALSE 38747
// begin if not i in hackTanks then
38529: LD_VAR 0 1
38533: PUSH
38534: LD_EXP 110
38538: IN
38539: NOT
38540: IFFALSE 38623
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38542: LD_ADDR_EXP 110
38546: PUSH
38547: LD_EXP 110
38551: PPUSH
38552: LD_EXP 110
38556: PUSH
38557: LD_INT 1
38559: PLUS
38560: PPUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: CALL_OW 1
38570: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38571: LD_ADDR_EXP 111
38575: PUSH
38576: LD_EXP 111
38580: PPUSH
38581: LD_EXP 111
38585: PUSH
38586: LD_INT 1
38588: PLUS
38589: PPUSH
38590: EMPTY
38591: PPUSH
38592: CALL_OW 1
38596: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38597: LD_ADDR_EXP 114
38601: PUSH
38602: LD_EXP 114
38606: PPUSH
38607: LD_EXP 114
38611: PUSH
38612: LD_INT 1
38614: PLUS
38615: PPUSH
38616: EMPTY
38617: PPUSH
38618: CALL_OW 1
38622: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 302
38632: NOT
38633: IFFALSE 38646
// begin HackUnlinkAll ( i ) ;
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL 38752 0 1
// continue ;
38644: GO 38526
// end ; HackCheckCapturedStatus ( i ) ;
38646: LD_VAR 0 1
38650: PPUSH
38651: CALL 39197 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38655: LD_ADDR_VAR 0 2
38659: PUSH
38660: LD_INT 81
38662: PUSH
38663: LD_VAR 0 1
38667: PPUSH
38668: CALL_OW 255
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 33
38679: PUSH
38680: LD_INT 3
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 91
38689: PUSH
38690: LD_VAR 0 1
38694: PUSH
38695: LD_EXP 113
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 50
38707: PUSH
38708: EMPTY
38709: LIST
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: PPUSH
38717: CALL_OW 69
38721: ST_TO_ADDR
// if not tmp then
38722: LD_VAR 0 2
38726: NOT
38727: IFFALSE 38731
// continue ;
38729: GO 38526
// HackLink ( i , tmp ) ;
38731: LD_VAR 0 1
38735: PPUSH
38736: LD_VAR 0 2
38740: PPUSH
38741: CALL 38888 0 2
// end ;
38745: GO 38526
38747: POP
38748: POP
// end ;
38749: PPOPN 2
38751: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38752: LD_INT 0
38754: PPUSH
38755: PPUSH
38756: PPUSH
// if not hack in hackTanks then
38757: LD_VAR 0 1
38761: PUSH
38762: LD_EXP 110
38766: IN
38767: NOT
38768: IFFALSE 38772
// exit ;
38770: GO 38883
// index := GetElementIndex ( hackTanks , hack ) ;
38772: LD_ADDR_VAR 0 4
38776: PUSH
38777: LD_EXP 110
38781: PPUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: CALL 47531 0 2
38791: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38792: LD_EXP 111
38796: PUSH
38797: LD_VAR 0 4
38801: ARRAY
38802: IFFALSE 38883
// begin for i in hackTanksCaptured [ index ] do
38804: LD_ADDR_VAR 0 3
38808: PUSH
38809: LD_EXP 111
38813: PUSH
38814: LD_VAR 0 4
38818: ARRAY
38819: PUSH
38820: FOR_IN
38821: IFFALSE 38847
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38823: LD_VAR 0 3
38827: PUSH
38828: LD_INT 1
38830: ARRAY
38831: PPUSH
38832: LD_VAR 0 3
38836: PUSH
38837: LD_INT 2
38839: ARRAY
38840: PPUSH
38841: CALL_OW 235
38845: GO 38820
38847: POP
38848: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38849: LD_ADDR_EXP 111
38853: PUSH
38854: LD_EXP 111
38858: PPUSH
38859: LD_VAR 0 4
38863: PPUSH
38864: EMPTY
38865: PPUSH
38866: CALL_OW 1
38870: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38871: LD_VAR 0 1
38875: PPUSH
38876: LD_INT 0
38878: PPUSH
38879: CALL_OW 505
// end ; end ;
38883: LD_VAR 0 2
38887: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38888: LD_INT 0
38890: PPUSH
38891: PPUSH
38892: PPUSH
// if not hack in hackTanks or not vehicles then
38893: LD_VAR 0 1
38897: PUSH
38898: LD_EXP 110
38902: IN
38903: NOT
38904: IFTRUE 38913
38906: PUSH
38907: LD_VAR 0 2
38911: NOT
38912: OR
38913: IFFALSE 38917
// exit ;
38915: GO 39192
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38917: LD_ADDR_VAR 0 2
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: LD_VAR 0 2
38931: PPUSH
38932: LD_INT 1
38934: PPUSH
38935: LD_INT 1
38937: PPUSH
38938: CALL 48183 0 4
38942: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38943: LD_ADDR_VAR 0 5
38947: PUSH
38948: LD_EXP 110
38952: PPUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: CALL 47531 0 2
38962: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38963: LD_EXP 111
38967: PUSH
38968: LD_VAR 0 5
38972: ARRAY
38973: PUSH
38974: LD_EXP 112
38978: LESS
38979: IFFALSE 39168
// begin for i := 1 to vehicles do
38981: LD_ADDR_VAR 0 4
38985: PUSH
38986: DOUBLE
38987: LD_INT 1
38989: DEC
38990: ST_TO_ADDR
38991: LD_VAR 0 2
38995: PUSH
38996: FOR_TO
38997: IFFALSE 39166
// begin if hackTanksCaptured [ index ] = hackLimit then
38999: LD_EXP 111
39003: PUSH
39004: LD_VAR 0 5
39008: ARRAY
39009: PUSH
39010: LD_EXP 112
39014: EQUAL
39015: IFFALSE 39019
// break ;
39017: GO 39166
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39019: LD_ADDR_EXP 114
39023: PUSH
39024: LD_EXP 114
39028: PPUSH
39029: LD_VAR 0 5
39033: PPUSH
39034: LD_EXP 114
39038: PUSH
39039: LD_VAR 0 5
39043: ARRAY
39044: PUSH
39045: LD_INT 1
39047: PLUS
39048: PPUSH
39049: CALL_OW 1
39053: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39054: LD_ADDR_EXP 111
39058: PUSH
39059: LD_EXP 111
39063: PPUSH
39064: LD_VAR 0 5
39068: PUSH
39069: LD_EXP 111
39073: PUSH
39074: LD_VAR 0 5
39078: ARRAY
39079: PUSH
39080: LD_INT 1
39082: PLUS
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PPUSH
39088: LD_VAR 0 2
39092: PUSH
39093: LD_VAR 0 4
39097: ARRAY
39098: PUSH
39099: LD_VAR 0 2
39103: PUSH
39104: LD_VAR 0 4
39108: ARRAY
39109: PPUSH
39110: CALL_OW 255
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PPUSH
39119: CALL 47748 0 3
39123: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39124: LD_VAR 0 2
39128: PUSH
39129: LD_VAR 0 4
39133: ARRAY
39134: PPUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: CALL_OW 255
39144: PPUSH
39145: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39149: LD_VAR 0 2
39153: PUSH
39154: LD_VAR 0 4
39158: ARRAY
39159: PPUSH
39160: CALL_OW 141
// end ;
39164: GO 38996
39166: POP
39167: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39168: LD_VAR 0 1
39172: PPUSH
39173: LD_EXP 111
39177: PUSH
39178: LD_VAR 0 5
39182: ARRAY
39183: PUSH
39184: LD_INT 0
39186: PLUS
39187: PPUSH
39188: CALL_OW 505
// end ;
39192: LD_VAR 0 3
39196: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39197: LD_INT 0
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
// if not hack in hackTanks then
39203: LD_VAR 0 1
39207: PUSH
39208: LD_EXP 110
39212: IN
39213: NOT
39214: IFFALSE 39218
// exit ;
39216: GO 39462
// index := GetElementIndex ( hackTanks , hack ) ;
39218: LD_ADDR_VAR 0 4
39222: PUSH
39223: LD_EXP 110
39227: PPUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL 47531 0 2
39237: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39238: LD_ADDR_VAR 0 3
39242: PUSH
39243: DOUBLE
39244: LD_EXP 111
39248: PUSH
39249: LD_VAR 0 4
39253: ARRAY
39254: INC
39255: ST_TO_ADDR
39256: LD_INT 1
39258: PUSH
39259: FOR_DOWNTO
39260: IFFALSE 39436
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: LD_EXP 111
39271: PUSH
39272: LD_VAR 0 4
39276: ARRAY
39277: PUSH
39278: LD_VAR 0 3
39282: ARRAY
39283: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39284: LD_VAR 0 5
39288: PUSH
39289: LD_INT 1
39291: ARRAY
39292: PPUSH
39293: CALL_OW 302
39297: NOT
39298: IFTRUE 39326
39300: PUSH
39301: LD_VAR 0 5
39305: PUSH
39306: LD_INT 1
39308: ARRAY
39309: PPUSH
39310: CALL_OW 255
39314: PUSH
39315: LD_VAR 0 1
39319: PPUSH
39320: CALL_OW 255
39324: NONEQUAL
39325: OR
39326: IFFALSE 39434
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39328: LD_VAR 0 5
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PPUSH
39337: CALL_OW 305
39341: IFFALSE 39369
39343: PUSH
39344: LD_VAR 0 5
39348: PUSH
39349: LD_INT 1
39351: ARRAY
39352: PPUSH
39353: CALL_OW 255
39357: PUSH
39358: LD_VAR 0 1
39362: PPUSH
39363: CALL_OW 255
39367: EQUAL
39368: AND
39369: IFFALSE 39393
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39371: LD_VAR 0 5
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: PPUSH
39380: LD_VAR 0 5
39384: PUSH
39385: LD_INT 2
39387: ARRAY
39388: PPUSH
39389: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39393: LD_ADDR_EXP 111
39397: PUSH
39398: LD_EXP 111
39402: PPUSH
39403: LD_VAR 0 4
39407: PPUSH
39408: LD_EXP 111
39412: PUSH
39413: LD_VAR 0 4
39417: ARRAY
39418: PPUSH
39419: LD_VAR 0 3
39423: PPUSH
39424: CALL_OW 3
39428: PPUSH
39429: CALL_OW 1
39433: ST_TO_ADDR
// end ; end ;
39434: GO 39259
39436: POP
39437: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39438: LD_VAR 0 1
39442: PPUSH
39443: LD_EXP 111
39447: PUSH
39448: LD_VAR 0 4
39452: ARRAY
39453: PUSH
39454: LD_INT 0
39456: PLUS
39457: PPUSH
39458: CALL_OW 505
// end ;
39462: LD_VAR 0 2
39466: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39467: LD_INT 0
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
// if not hack in hackTanks then
39473: LD_VAR 0 1
39477: PUSH
39478: LD_EXP 110
39482: IN
39483: NOT
39484: IFFALSE 39488
// exit ;
39486: GO 39573
// index := GetElementIndex ( hackTanks , hack ) ;
39488: LD_ADDR_VAR 0 5
39492: PUSH
39493: LD_EXP 110
39497: PPUSH
39498: LD_VAR 0 1
39502: PPUSH
39503: CALL 47531 0 2
39507: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39508: LD_ADDR_VAR 0 4
39512: PUSH
39513: DOUBLE
39514: LD_INT 1
39516: DEC
39517: ST_TO_ADDR
39518: LD_EXP 111
39522: PUSH
39523: LD_VAR 0 5
39527: ARRAY
39528: PUSH
39529: FOR_TO
39530: IFFALSE 39571
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39532: LD_EXP 111
39536: PUSH
39537: LD_VAR 0 5
39541: ARRAY
39542: PUSH
39543: LD_VAR 0 4
39547: ARRAY
39548: PUSH
39549: LD_INT 1
39551: ARRAY
39552: PUSH
39553: LD_VAR 0 2
39557: EQUAL
39558: IFFALSE 39569
// KillUnit ( vehicle ) ;
39560: LD_VAR 0 2
39564: PPUSH
39565: CALL_OW 66
39569: GO 39529
39571: POP
39572: POP
// end ;
39573: LD_VAR 0 3
39577: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
39578: LD_EXP 115
39582: NOT
39583: IFFALSE 39716
39585: GO 39587
39587: DISABLE
39588: LD_INT 0
39590: PPUSH
// begin initMiner := true ;
39591: LD_ADDR_EXP 115
39595: PUSH
39596: LD_INT 1
39598: ST_TO_ADDR
// minersList := [ ] ;
39599: LD_ADDR_EXP 116
39603: PUSH
39604: EMPTY
39605: ST_TO_ADDR
// minerMinesList := [ ] ;
39606: LD_ADDR_EXP 117
39610: PUSH
39611: EMPTY
39612: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
39613: LD_ADDR_EXP 118
39617: PUSH
39618: LD_INT 10
39620: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39621: LD_ADDR_VAR 0 1
39625: PUSH
39626: LD_INT 34
39628: PUSH
39629: LD_INT 81
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PPUSH
39636: CALL_OW 69
39640: PUSH
39641: FOR_IN
39642: IFFALSE 39714
// begin if not i in minersList then
39644: LD_VAR 0 1
39648: PUSH
39649: LD_EXP 116
39653: IN
39654: NOT
39655: IFFALSE 39712
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39657: LD_ADDR_EXP 116
39661: PUSH
39662: LD_EXP 116
39666: PPUSH
39667: LD_EXP 116
39671: PUSH
39672: LD_INT 1
39674: PLUS
39675: PPUSH
39676: LD_VAR 0 1
39680: PPUSH
39681: CALL_OW 1
39685: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39686: LD_ADDR_EXP 117
39690: PUSH
39691: LD_EXP 117
39695: PPUSH
39696: LD_EXP 117
39700: PUSH
39701: LD_INT 1
39703: PLUS
39704: PPUSH
39705: EMPTY
39706: PPUSH
39707: CALL_OW 1
39711: ST_TO_ADDR
// end end ;
39712: GO 39641
39714: POP
39715: POP
// end ;
39716: PPOPN 1
39718: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
39719: LD_EXP 115
39723: IFFALSE 39754
39725: PUSH
39726: LD_EXP 117
39730: PPUSH
39731: CALL 44830 0 1
39735: IFTRUE 39753
39737: PUSH
39738: LD_INT 34
39740: PUSH
39741: LD_INT 81
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PPUSH
39748: CALL_OW 69
39752: OR
39753: AND
39754: IFFALSE 40274
39756: GO 39758
39758: DISABLE
39759: LD_INT 0
39761: PPUSH
39762: PPUSH
39763: PPUSH
39764: PPUSH
// begin enable ;
39765: ENABLE
// for i := minerMinesList downto 1 do
39766: LD_ADDR_VAR 0 1
39770: PUSH
39771: DOUBLE
39772: LD_EXP 117
39776: INC
39777: ST_TO_ADDR
39778: LD_INT 1
39780: PUSH
39781: FOR_DOWNTO
39782: IFFALSE 40272
// begin side := GetSide ( minersList [ i ] ) ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_EXP 116
39793: PUSH
39794: LD_VAR 0 1
39798: ARRAY
39799: PPUSH
39800: CALL_OW 255
39804: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
39805: LD_EXP 116
39809: PUSH
39810: LD_VAR 0 1
39814: ARRAY
39815: PPUSH
39816: CALL_OW 300
39820: IFFALSE 39841
39822: PUSH
39823: LD_VAR 0 3
39827: PUSH
39828: LD_OWVAR 2
39832: PUSH
39833: LD_INT 9
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: IN
39840: AND
39841: IFFALSE 39874
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
39843: LD_EXP 116
39847: PUSH
39848: LD_VAR 0 1
39852: ARRAY
39853: PPUSH
39854: LD_EXP 117
39858: PUSH
39859: LD_VAR 0 1
39863: ARRAY
39864: PPUSH
39865: CALL 44830 0 1
39869: PPUSH
39870: CALL_OW 505
// if not minerMinesList [ i ] then
39874: LD_EXP 117
39878: PUSH
39879: LD_VAR 0 1
39883: ARRAY
39884: NOT
39885: IFFALSE 39889
// continue ;
39887: GO 39781
// for j := minerMinesList [ i ] downto 1 do
39889: LD_ADDR_VAR 0 2
39893: PUSH
39894: DOUBLE
39895: LD_EXP 117
39899: PUSH
39900: LD_VAR 0 1
39904: ARRAY
39905: INC
39906: ST_TO_ADDR
39907: LD_INT 1
39909: PUSH
39910: FOR_DOWNTO
39911: IFFALSE 40268
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
39913: LD_EXP 116
39917: PUSH
39918: LD_VAR 0 1
39922: ARRAY
39923: PPUSH
39924: CALL_OW 301
39928: IFTRUE 39948
39930: PUSH
39931: LD_EXP 116
39935: PUSH
39936: LD_VAR 0 1
39940: ARRAY
39941: PPUSH
39942: CALL_OW 305
39946: NOT
39947: OR
39948: IFFALSE 40039
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39950: LD_EXP 117
39954: PUSH
39955: LD_VAR 0 1
39959: ARRAY
39960: PUSH
39961: LD_VAR 0 2
39965: ARRAY
39966: PUSH
39967: LD_INT 1
39969: ARRAY
39970: PPUSH
39971: LD_EXP 117
39975: PUSH
39976: LD_VAR 0 1
39980: ARRAY
39981: PUSH
39982: LD_VAR 0 2
39986: ARRAY
39987: PUSH
39988: LD_INT 2
39990: ARRAY
39991: PPUSH
39992: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39996: LD_ADDR_EXP 117
40000: PUSH
40001: LD_EXP 117
40005: PPUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: LD_EXP 117
40015: PUSH
40016: LD_VAR 0 1
40020: ARRAY
40021: PPUSH
40022: LD_VAR 0 2
40026: PPUSH
40027: CALL_OW 3
40031: PPUSH
40032: CALL_OW 1
40036: ST_TO_ADDR
// continue ;
40037: GO 39910
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40039: LD_ADDR_VAR 0 4
40043: PUSH
40044: LD_EXP 117
40048: PUSH
40049: LD_VAR 0 1
40053: ARRAY
40054: PUSH
40055: LD_VAR 0 2
40059: ARRAY
40060: PUSH
40061: LD_INT 1
40063: ARRAY
40064: PPUSH
40065: LD_EXP 117
40069: PUSH
40070: LD_VAR 0 1
40074: ARRAY
40075: PUSH
40076: LD_VAR 0 2
40080: ARRAY
40081: PUSH
40082: LD_INT 2
40084: ARRAY
40085: PPUSH
40086: CALL_OW 428
40090: ST_TO_ADDR
// if not tmp then
40091: LD_VAR 0 4
40095: NOT
40096: IFFALSE 40100
// continue ;
40098: GO 39910
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40100: LD_VAR 0 4
40104: PUSH
40105: LD_INT 81
40107: PUSH
40108: LD_VAR 0 3
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PPUSH
40117: CALL_OW 69
40121: IN
40122: IFFALSE 40172
40124: PUSH
40125: LD_EXP 117
40129: PUSH
40130: LD_VAR 0 1
40134: ARRAY
40135: PUSH
40136: LD_VAR 0 2
40140: ARRAY
40141: PUSH
40142: LD_INT 1
40144: ARRAY
40145: PPUSH
40146: LD_EXP 117
40150: PUSH
40151: LD_VAR 0 1
40155: ARRAY
40156: PUSH
40157: LD_VAR 0 2
40161: ARRAY
40162: PUSH
40163: LD_INT 2
40165: ARRAY
40166: PPUSH
40167: CALL_OW 458
40171: AND
40172: IFFALSE 40266
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40174: LD_EXP 117
40178: PUSH
40179: LD_VAR 0 1
40183: ARRAY
40184: PUSH
40185: LD_VAR 0 2
40189: ARRAY
40190: PUSH
40191: LD_INT 1
40193: ARRAY
40194: PPUSH
40195: LD_EXP 117
40199: PUSH
40200: LD_VAR 0 1
40204: ARRAY
40205: PUSH
40206: LD_VAR 0 2
40210: ARRAY
40211: PUSH
40212: LD_INT 2
40214: ARRAY
40215: PPUSH
40216: LD_VAR 0 3
40220: PPUSH
40221: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40225: LD_ADDR_EXP 117
40229: PUSH
40230: LD_EXP 117
40234: PPUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: LD_EXP 117
40244: PUSH
40245: LD_VAR 0 1
40249: ARRAY
40250: PPUSH
40251: LD_VAR 0 2
40255: PPUSH
40256: CALL_OW 3
40260: PPUSH
40261: CALL_OW 1
40265: ST_TO_ADDR
// end ; end ;
40266: GO 39910
40268: POP
40269: POP
// end ;
40270: GO 39781
40272: POP
40273: POP
// end ;
40274: PPOPN 4
40276: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
40277: LD_INT 0
40279: PPUSH
40280: PPUSH
40281: PPUSH
40282: PPUSH
// result := false ;
40283: LD_ADDR_VAR 0 4
40287: PUSH
40288: LD_INT 0
40290: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40291: LD_VAR 0 1
40295: PPUSH
40296: CALL_OW 264
40300: PUSH
40301: LD_INT 81
40303: EQUAL
40304: NOT
40305: IFFALSE 40309
// exit ;
40307: GO 40679
// side := GetSide ( unit ) ;
40309: LD_ADDR_VAR 0 6
40313: PUSH
40314: LD_VAR 0 1
40318: PPUSH
40319: CALL_OW 255
40323: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
40324: LD_ADDR_VAR 0 5
40328: PUSH
40329: LD_EXP 116
40333: PPUSH
40334: LD_VAR 0 1
40338: PPUSH
40339: CALL 47531 0 2
40343: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40344: LD_EXP 117
40348: PUSH
40349: LD_VAR 0 5
40353: ARRAY
40354: PUSH
40355: LD_EXP 118
40359: GREATEREQUAL
40360: IFFALSE 40364
// exit ;
40362: GO 40679
// ComMoveXY ( unit , x , y ) ;
40364: LD_VAR 0 1
40368: PPUSH
40369: LD_VAR 0 2
40373: PPUSH
40374: LD_VAR 0 3
40378: PPUSH
40379: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40383: LD_INT 35
40385: PPUSH
40386: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40390: LD_VAR 0 1
40394: PPUSH
40395: LD_VAR 0 2
40399: PPUSH
40400: LD_VAR 0 3
40404: PPUSH
40405: CALL 79587 0 3
40409: NOT
40410: IFFALSE 40423
40412: PUSH
40413: LD_VAR 0 1
40417: PPUSH
40418: CALL_OW 314
40422: AND
40423: IFFALSE 40427
// exit ;
40425: GO 40679
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40427: LD_VAR 0 2
40431: PPUSH
40432: LD_VAR 0 3
40436: PPUSH
40437: CALL_OW 428
40441: PUSH
40442: LD_VAR 0 1
40446: EQUAL
40447: IFFALSE 40461
40449: PUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL_OW 314
40459: NOT
40460: AND
40461: IFFALSE 40383
// if MineAtPos ( x , y ) then
40463: LD_VAR 0 2
40467: PPUSH
40468: LD_VAR 0 3
40472: PPUSH
40473: CALL_OW 458
40477: IFFALSE 40481
// exit ;
40479: GO 40679
// if your_side = side then
40481: LD_OWVAR 2
40485: PUSH
40486: LD_VAR 0 6
40490: EQUAL
40491: IFFALSE 40510
// PlaySoundXY ( x , y , PlantMine ) ;
40493: LD_VAR 0 2
40497: PPUSH
40498: LD_VAR 0 3
40502: PPUSH
40503: LD_STRING PlantMine
40505: PPUSH
40506: CALL_OW 366
// repeat wait ( 1 ) ;
40510: LD_INT 1
40512: PPUSH
40513: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
40517: LD_VAR 0 2
40521: PPUSH
40522: LD_VAR 0 3
40526: PPUSH
40527: LD_VAR 0 6
40531: PPUSH
40532: LD_INT 0
40534: PPUSH
40535: CALL_OW 454
40539: IFFALSE 40510
// if MineAtPos ( x , y ) then
40541: LD_VAR 0 2
40545: PPUSH
40546: LD_VAR 0 3
40550: PPUSH
40551: CALL_OW 458
40555: IFFALSE 40671
// begin for i in minerMinesList [ index ] do
40557: LD_ADDR_VAR 0 7
40561: PUSH
40562: LD_EXP 117
40566: PUSH
40567: LD_VAR 0 5
40571: ARRAY
40572: PUSH
40573: FOR_IN
40574: IFFALSE 40616
// if i [ 1 ] = x and i [ 2 ] = y then
40576: LD_VAR 0 7
40580: PUSH
40581: LD_INT 1
40583: ARRAY
40584: PUSH
40585: LD_VAR 0 2
40589: EQUAL
40590: IFFALSE 40608
40592: PUSH
40593: LD_VAR 0 7
40597: PUSH
40598: LD_INT 2
40600: ARRAY
40601: PUSH
40602: LD_VAR 0 3
40606: EQUAL
40607: AND
40608: IFFALSE 40614
// exit ;
40610: POP
40611: POP
40612: GO 40679
40614: GO 40573
40616: POP
40617: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40618: LD_ADDR_EXP 117
40622: PUSH
40623: LD_EXP 117
40627: PPUSH
40628: LD_VAR 0 5
40632: PUSH
40633: LD_EXP 117
40637: PUSH
40638: LD_VAR 0 5
40642: ARRAY
40643: PUSH
40644: LD_INT 1
40646: PLUS
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PPUSH
40652: LD_VAR 0 2
40656: PUSH
40657: LD_VAR 0 3
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PPUSH
40666: CALL 47748 0 3
40670: ST_TO_ADDR
// end ; result := true ;
40671: LD_ADDR_VAR 0 4
40675: PUSH
40676: LD_INT 1
40678: ST_TO_ADDR
// end ;
40679: LD_VAR 0 4
40683: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40684: LD_INT 0
40686: PPUSH
40687: PPUSH
40688: PPUSH
// if not unit in minersList then
40689: LD_VAR 0 1
40693: PUSH
40694: LD_EXP 116
40698: IN
40699: NOT
40700: IFFALSE 40704
// exit ;
40702: GO 40911
// index := GetElementIndex ( minersList , unit ) ;
40704: LD_ADDR_VAR 0 6
40708: PUSH
40709: LD_EXP 116
40713: PPUSH
40714: LD_VAR 0 1
40718: PPUSH
40719: CALL 47531 0 2
40723: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40724: LD_ADDR_VAR 0 5
40728: PUSH
40729: DOUBLE
40730: LD_EXP 117
40734: PUSH
40735: LD_VAR 0 6
40739: ARRAY
40740: INC
40741: ST_TO_ADDR
40742: LD_INT 1
40744: PUSH
40745: FOR_DOWNTO
40746: IFFALSE 40909
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40748: LD_EXP 117
40752: PUSH
40753: LD_VAR 0 6
40757: ARRAY
40758: PUSH
40759: LD_VAR 0 5
40763: ARRAY
40764: PUSH
40765: LD_INT 1
40767: ARRAY
40768: PPUSH
40769: LD_EXP 117
40773: PUSH
40774: LD_VAR 0 6
40778: ARRAY
40779: PUSH
40780: LD_VAR 0 5
40784: ARRAY
40785: PUSH
40786: LD_INT 2
40788: ARRAY
40789: PPUSH
40790: LD_VAR 0 2
40794: PPUSH
40795: LD_VAR 0 3
40799: PPUSH
40800: CALL_OW 298
40804: PUSH
40805: LD_INT 6
40807: LESS
40808: IFFALSE 40907
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40810: LD_EXP 117
40814: PUSH
40815: LD_VAR 0 6
40819: ARRAY
40820: PUSH
40821: LD_VAR 0 5
40825: ARRAY
40826: PUSH
40827: LD_INT 1
40829: ARRAY
40830: PPUSH
40831: LD_EXP 117
40835: PUSH
40836: LD_VAR 0 6
40840: ARRAY
40841: PUSH
40842: LD_VAR 0 5
40846: ARRAY
40847: PUSH
40848: LD_INT 2
40850: ARRAY
40851: PPUSH
40852: LD_VAR 0 1
40856: PPUSH
40857: CALL_OW 255
40861: PPUSH
40862: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40866: LD_ADDR_EXP 117
40870: PUSH
40871: LD_EXP 117
40875: PPUSH
40876: LD_VAR 0 6
40880: PPUSH
40881: LD_EXP 117
40885: PUSH
40886: LD_VAR 0 6
40890: ARRAY
40891: PPUSH
40892: LD_VAR 0 5
40896: PPUSH
40897: CALL_OW 3
40901: PPUSH
40902: CALL_OW 1
40906: ST_TO_ADDR
// end ; end ;
40907: GO 40745
40909: POP
40910: POP
// end ;
40911: LD_VAR 0 4
40915: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40916: LD_INT 0
40918: PPUSH
40919: PPUSH
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 264
40936: PUSH
40937: LD_INT 81
40939: EQUAL
40940: NOT
40941: IFTRUE 40956
40943: PUSH
40944: LD_VAR 0 1
40948: PUSH
40949: LD_EXP 116
40953: IN
40954: NOT
40955: OR
40956: IFFALSE 40960
// exit ;
40958: GO 41286
// index := GetElementIndex ( minersList , unit ) ;
40960: LD_ADDR_VAR 0 6
40964: PUSH
40965: LD_EXP 116
40969: PPUSH
40970: LD_VAR 0 1
40974: PPUSH
40975: CALL 47531 0 2
40979: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40980: LD_ADDR_VAR 0 8
40984: PUSH
40985: LD_EXP 118
40989: PUSH
40990: LD_EXP 117
40994: PUSH
40995: LD_VAR 0 6
40999: ARRAY
41000: MINUS
41001: ST_TO_ADDR
// if not minesFreeAmount then
41002: LD_VAR 0 8
41006: NOT
41007: IFFALSE 41011
// exit ;
41009: GO 41286
// tmp := [ ] ;
41011: LD_ADDR_VAR 0 7
41015: PUSH
41016: EMPTY
41017: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41018: LD_ADDR_VAR 0 5
41022: PUSH
41023: DOUBLE
41024: LD_INT 1
41026: DEC
41027: ST_TO_ADDR
41028: LD_VAR 0 8
41032: PUSH
41033: FOR_TO
41034: IFFALSE 41233
// begin _d := rand ( 0 , 5 ) ;
41036: LD_ADDR_VAR 0 11
41040: PUSH
41041: LD_INT 0
41043: PPUSH
41044: LD_INT 5
41046: PPUSH
41047: CALL_OW 12
41051: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41052: LD_ADDR_VAR 0 12
41056: PUSH
41057: LD_INT 2
41059: PPUSH
41060: LD_INT 6
41062: PPUSH
41063: CALL_OW 12
41067: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41068: LD_ADDR_VAR 0 9
41072: PUSH
41073: LD_VAR 0 2
41077: PPUSH
41078: LD_VAR 0 11
41082: PPUSH
41083: LD_VAR 0 12
41087: PPUSH
41088: CALL_OW 272
41092: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41093: LD_ADDR_VAR 0 10
41097: PUSH
41098: LD_VAR 0 3
41102: PPUSH
41103: LD_VAR 0 11
41107: PPUSH
41108: LD_VAR 0 12
41112: PPUSH
41113: CALL_OW 273
41117: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41118: LD_VAR 0 9
41122: PPUSH
41123: LD_VAR 0 10
41127: PPUSH
41128: CALL_OW 488
41132: IFFALSE 41156
41134: PUSH
41135: LD_VAR 0 9
41139: PUSH
41140: LD_VAR 0 10
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_VAR 0 7
41153: IN
41154: NOT
41155: AND
41156: IFFALSE 41175
41158: PUSH
41159: LD_VAR 0 9
41163: PPUSH
41164: LD_VAR 0 10
41168: PPUSH
41169: CALL_OW 458
41173: NOT
41174: AND
41175: IFFALSE 41217
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41177: LD_ADDR_VAR 0 7
41181: PUSH
41182: LD_VAR 0 7
41186: PPUSH
41187: LD_VAR 0 7
41191: PUSH
41192: LD_INT 1
41194: PLUS
41195: PPUSH
41196: LD_VAR 0 9
41200: PUSH
41201: LD_VAR 0 10
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PPUSH
41210: CALL_OW 1
41214: ST_TO_ADDR
41215: GO 41231
// i := i - 1 ;
41217: LD_ADDR_VAR 0 5
41221: PUSH
41222: LD_VAR 0 5
41226: PUSH
41227: LD_INT 1
41229: MINUS
41230: ST_TO_ADDR
// end ;
41231: GO 41033
41233: POP
41234: POP
// for i in tmp do
41235: LD_ADDR_VAR 0 5
41239: PUSH
41240: LD_VAR 0 7
41244: PUSH
41245: FOR_IN
41246: IFFALSE 41284
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41248: LD_VAR 0 1
41252: PPUSH
41253: LD_VAR 0 5
41257: PUSH
41258: LD_INT 1
41260: ARRAY
41261: PPUSH
41262: LD_VAR 0 5
41266: PUSH
41267: LD_INT 2
41269: ARRAY
41270: PPUSH
41271: CALL 40277 0 3
41275: NOT
41276: IFFALSE 41282
// exit ;
41278: POP
41279: POP
41280: GO 41286
41282: GO 41245
41284: POP
41285: POP
// end ;
41286: LD_VAR 0 4
41290: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41291: LD_INT 0
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
// if GetClass ( unit ) <> class_sniper then
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 257
41311: PUSH
41312: LD_INT 5
41314: NONEQUAL
41315: IFFALSE 41319
// exit ;
41317: GO 41789
// dist := 8 ;
41319: LD_ADDR_VAR 0 5
41323: PUSH
41324: LD_INT 8
41326: ST_TO_ADDR
// viewRange := 12 ;
41327: LD_ADDR_VAR 0 8
41331: PUSH
41332: LD_INT 12
41334: ST_TO_ADDR
// side := GetSide ( unit ) ;
41335: LD_ADDR_VAR 0 6
41339: PUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 255
41349: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41350: LD_INT 61
41352: PPUSH
41353: LD_VAR 0 6
41357: PPUSH
41358: CALL_OW 321
41362: PUSH
41363: LD_INT 2
41365: EQUAL
41366: IFFALSE 41376
// viewRange := 16 ;
41368: LD_ADDR_VAR 0 8
41372: PUSH
41373: LD_INT 16
41375: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41376: LD_VAR 0 1
41380: PPUSH
41381: LD_VAR 0 2
41385: PPUSH
41386: LD_VAR 0 3
41390: PPUSH
41391: CALL_OW 297
41395: PUSH
41396: LD_VAR 0 5
41400: GREATER
41401: IFFALSE 41480
// begin ComMoveXY ( unit , x , y ) ;
41403: LD_VAR 0 1
41407: PPUSH
41408: LD_VAR 0 2
41412: PPUSH
41413: LD_VAR 0 3
41417: PPUSH
41418: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41422: LD_INT 35
41424: PPUSH
41425: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41429: LD_VAR 0 1
41433: PPUSH
41434: LD_VAR 0 2
41438: PPUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: CALL 79587 0 3
41448: NOT
41449: IFFALSE 41453
// exit ;
41451: GO 41789
// until GetDistUnitXY ( unit , x , y ) < dist ;
41453: LD_VAR 0 1
41457: PPUSH
41458: LD_VAR 0 2
41462: PPUSH
41463: LD_VAR 0 3
41467: PPUSH
41468: CALL_OW 297
41472: PUSH
41473: LD_VAR 0 5
41477: LESS
41478: IFFALSE 41422
// end ; ComTurnXY ( unit , x , y ) ;
41480: LD_VAR 0 1
41484: PPUSH
41485: LD_VAR 0 2
41489: PPUSH
41490: LD_VAR 0 3
41494: PPUSH
41495: CALL_OW 118
// repeat if Multiplayer then
41499: LD_OWVAR 4
41503: IFFALSE 41514
// wait ( 35 ) else
41505: LD_INT 35
41507: PPUSH
41508: CALL_OW 67
41512: GO 41521
// wait ( 5 ) ;
41514: LD_INT 5
41516: PPUSH
41517: CALL_OW 67
// _d := GetDir ( unit ) ;
41521: LD_ADDR_VAR 0 11
41525: PUSH
41526: LD_VAR 0 1
41530: PPUSH
41531: CALL_OW 254
41535: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41536: LD_ADDR_VAR 0 7
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 250
41550: PPUSH
41551: LD_VAR 0 1
41555: PPUSH
41556: CALL_OW 251
41560: PPUSH
41561: LD_VAR 0 2
41565: PPUSH
41566: LD_VAR 0 3
41570: PPUSH
41571: CALL 82223 0 4
41575: ST_TO_ADDR
// until dir = _d ;
41576: LD_VAR 0 7
41580: PUSH
41581: LD_VAR 0 11
41585: EQUAL
41586: IFFALSE 41499
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41588: LD_ADDR_VAR 0 9
41592: PUSH
41593: LD_VAR 0 1
41597: PPUSH
41598: CALL_OW 250
41602: PPUSH
41603: LD_VAR 0 7
41607: PPUSH
41608: LD_VAR 0 5
41612: PPUSH
41613: CALL_OW 272
41617: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41618: LD_ADDR_VAR 0 10
41622: PUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 251
41632: PPUSH
41633: LD_VAR 0 7
41637: PPUSH
41638: LD_VAR 0 5
41642: PPUSH
41643: CALL_OW 273
41647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41648: LD_VAR 0 9
41652: PPUSH
41653: LD_VAR 0 10
41657: PPUSH
41658: CALL_OW 488
41662: NOT
41663: IFFALSE 41667
// exit ;
41665: GO 41789
// ComAnimCustom ( unit , 1 ) ;
41667: LD_VAR 0 1
41671: PPUSH
41672: LD_INT 1
41674: PPUSH
41675: CALL_OW 592
// p := 0 ;
41679: LD_ADDR_VAR 0 12
41683: PUSH
41684: LD_INT 0
41686: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41687: LD_VAR 0 9
41691: PPUSH
41692: LD_VAR 0 10
41696: PPUSH
41697: LD_VAR 0 6
41701: PPUSH
41702: LD_VAR 0 8
41706: PPUSH
41707: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41711: LD_INT 35
41713: PPUSH
41714: CALL_OW 67
// p := Inc ( p ) ;
41718: LD_ADDR_VAR 0 12
41722: PUSH
41723: LD_VAR 0 12
41727: PPUSH
41728: CALL 82179 0 1
41732: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41733: LD_VAR 0 12
41737: PUSH
41738: LD_INT 3
41740: EQUAL
41741: IFTRUE 41755
41743: PUSH
41744: LD_VAR 0 1
41748: PPUSH
41749: CALL_OW 302
41753: NOT
41754: OR
41755: IFTRUE 41768
41757: PUSH
41758: LD_VAR 0 1
41762: PPUSH
41763: CALL_OW 301
41767: OR
41768: IFFALSE 41711
// RemoveSeeing ( _x , _y , side ) ;
41770: LD_VAR 0 9
41774: PPUSH
41775: LD_VAR 0 10
41779: PPUSH
41780: LD_VAR 0 6
41784: PPUSH
41785: CALL_OW 331
// end ;
41789: LD_VAR 0 4
41793: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41794: LD_INT 0
41796: PPUSH
41797: PPUSH
41798: PPUSH
41799: PPUSH
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
// if not unit then
41807: LD_VAR 0 1
41811: NOT
41812: IFFALSE 41816
// exit ;
41814: GO 42087
// side := GetSide ( unit ) ;
41816: LD_ADDR_VAR 0 3
41820: PUSH
41821: LD_VAR 0 1
41825: PPUSH
41826: CALL_OW 255
41830: ST_TO_ADDR
// x := GetX ( unit ) ;
41831: LD_ADDR_VAR 0 5
41835: PUSH
41836: LD_VAR 0 1
41840: PPUSH
41841: CALL_OW 250
41845: ST_TO_ADDR
// y := GetY ( unit ) ;
41846: LD_ADDR_VAR 0 6
41850: PUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 251
41860: ST_TO_ADDR
// r := 8 ;
41861: LD_ADDR_VAR 0 4
41865: PUSH
41866: LD_INT 8
41868: ST_TO_ADDR
// if x - r < 0 then
41869: LD_VAR 0 5
41873: PUSH
41874: LD_VAR 0 4
41878: MINUS
41879: PUSH
41880: LD_INT 0
41882: LESS
41883: IFFALSE 41895
// min_x := 0 else
41885: LD_ADDR_VAR 0 7
41889: PUSH
41890: LD_INT 0
41892: ST_TO_ADDR
41893: GO 41911
// min_x := x - r ;
41895: LD_ADDR_VAR 0 7
41899: PUSH
41900: LD_VAR 0 5
41904: PUSH
41905: LD_VAR 0 4
41909: MINUS
41910: ST_TO_ADDR
// if y - r < 0 then
41911: LD_VAR 0 6
41915: PUSH
41916: LD_VAR 0 4
41920: MINUS
41921: PUSH
41922: LD_INT 0
41924: LESS
41925: IFFALSE 41937
// min_y := 0 else
41927: LD_ADDR_VAR 0 8
41931: PUSH
41932: LD_INT 0
41934: ST_TO_ADDR
41935: GO 41953
// min_y := y - r ;
41937: LD_ADDR_VAR 0 8
41941: PUSH
41942: LD_VAR 0 6
41946: PUSH
41947: LD_VAR 0 4
41951: MINUS
41952: ST_TO_ADDR
// max_x := x + r ;
41953: LD_ADDR_VAR 0 9
41957: PUSH
41958: LD_VAR 0 5
41962: PUSH
41963: LD_VAR 0 4
41967: PLUS
41968: ST_TO_ADDR
// max_y := y + r ;
41969: LD_ADDR_VAR 0 10
41973: PUSH
41974: LD_VAR 0 6
41978: PUSH
41979: LD_VAR 0 4
41983: PLUS
41984: ST_TO_ADDR
// for _x = min_x to max_x do
41985: LD_ADDR_VAR 0 11
41989: PUSH
41990: DOUBLE
41991: LD_VAR 0 7
41995: DEC
41996: ST_TO_ADDR
41997: LD_VAR 0 9
42001: PUSH
42002: FOR_TO
42003: IFFALSE 42085
// for _y = min_y to max_y do
42005: LD_ADDR_VAR 0 12
42009: PUSH
42010: DOUBLE
42011: LD_VAR 0 8
42015: DEC
42016: ST_TO_ADDR
42017: LD_VAR 0 10
42021: PUSH
42022: FOR_TO
42023: IFFALSE 42081
// begin if not ValidHex ( _x , _y ) then
42025: LD_VAR 0 11
42029: PPUSH
42030: LD_VAR 0 12
42034: PPUSH
42035: CALL_OW 488
42039: NOT
42040: IFFALSE 42044
// continue ;
42042: GO 42022
// if MineAtPos ( _x , _y ) then
42044: LD_VAR 0 11
42048: PPUSH
42049: LD_VAR 0 12
42053: PPUSH
42054: CALL_OW 458
42058: IFFALSE 42079
// ViewMineAtPos ( _x , _y , side ) ;
42060: LD_VAR 0 11
42064: PPUSH
42065: LD_VAR 0 12
42069: PPUSH
42070: LD_VAR 0 3
42074: PPUSH
42075: CALL_OW 457
// end ;
42079: GO 42022
42081: POP
42082: POP
42083: GO 42002
42085: POP
42086: POP
// end ;
42087: LD_VAR 0 2
42091: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
42092: LD_INT 0
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
// if not units then
42101: LD_VAR 0 1
42105: NOT
42106: IFFALSE 42110
// exit ;
42108: GO 42574
// scaners := [ ] ;
42110: LD_ADDR_VAR 0 6
42114: PUSH
42115: EMPTY
42116: ST_TO_ADDR
// for i in units do
42117: LD_ADDR_VAR 0 3
42121: PUSH
42122: LD_VAR 0 1
42126: PUSH
42127: FOR_IN
42128: IFFALSE 42285
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
42130: LD_VAR 0 3
42134: PPUSH
42135: CALL_OW 264
42139: PUSH
42140: LD_INT 11
42142: NONEQUAL
42143: IFTRUE 42157
42145: PUSH
42146: LD_VAR 0 3
42150: PPUSH
42151: CALL_OW 302
42155: NOT
42156: OR
42157: IFTRUE 42174
42159: PUSH
42160: LD_VAR 0 3
42164: PPUSH
42165: CALL_OW 110
42169: PUSH
42170: LD_INT 502
42172: EQUAL
42173: OR
42174: IFFALSE 42178
// continue ;
42176: GO 42127
// ComStop ( i ) ;
42178: LD_VAR 0 3
42182: PPUSH
42183: CALL_OW 141
// x := GetX ( i ) ;
42187: LD_ADDR_VAR 0 4
42191: PUSH
42192: LD_VAR 0 3
42196: PPUSH
42197: CALL_OW 250
42201: ST_TO_ADDR
// y := GetY ( i ) ;
42202: LD_ADDR_VAR 0 5
42206: PUSH
42207: LD_VAR 0 3
42211: PPUSH
42212: CALL_OW 251
42216: ST_TO_ADDR
// if GetSide ( i ) = your_side then
42217: LD_VAR 0 3
42221: PPUSH
42222: CALL_OW 255
42226: PUSH
42227: LD_OWVAR 2
42231: EQUAL
42232: IFFALSE 42251
// PlaySoundXY ( x , y , mineDetector ) ;
42234: LD_VAR 0 4
42238: PPUSH
42239: LD_VAR 0 5
42243: PPUSH
42244: LD_STRING mineDetector
42246: PPUSH
42247: CALL_OW 366
// scaners := Join ( scaners , i ) ;
42251: LD_ADDR_VAR 0 6
42255: PUSH
42256: LD_VAR 0 6
42260: PPUSH
42261: LD_VAR 0 3
42265: PPUSH
42266: CALL 80806 0 2
42270: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
42271: LD_VAR 0 3
42275: PPUSH
42276: LD_INT 502
42278: PPUSH
42279: CALL_OW 109
// end ;
42283: GO 42127
42285: POP
42286: POP
// if not scaners then
42287: LD_VAR 0 6
42291: NOT
42292: IFFALSE 42296
// exit ;
42294: GO 42574
// wait ( 3 ) ;
42296: LD_INT 3
42298: PPUSH
42299: CALL_OW 67
// timer := 6 ;
42303: LD_ADDR_VAR 0 7
42307: PUSH
42308: LD_INT 6
42310: ST_TO_ADDR
// repeat for i in scaners do
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_VAR 0 6
42320: PUSH
42321: FOR_IN
42322: IFFALSE 42472
// begin side := GetSide ( i ) ;
42324: LD_ADDR_VAR 0 8
42328: PUSH
42329: LD_VAR 0 3
42333: PPUSH
42334: CALL_OW 255
42338: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
42339: LD_VAR 0 3
42343: PPUSH
42344: CALL_OW 302
42348: NOT
42349: IFTRUE 42362
42351: PUSH
42352: LD_VAR 0 3
42356: PPUSH
42357: CALL_OW 314
42361: OR
42362: IFTRUE 42393
42364: PUSH
42365: LD_VAR 0 3
42369: PPUSH
42370: CALL_OW 263
42374: PUSH
42375: LD_INT 1
42377: EQUAL
42378: IFFALSE 42392
42380: PUSH
42381: LD_VAR 0 3
42385: PPUSH
42386: CALL_OW 311
42390: NOT
42391: AND
42392: OR
42393: IFFALSE 42437
// begin SetUnitDisplayNumber ( i , 0 ) ;
42395: LD_VAR 0 3
42399: PPUSH
42400: LD_INT 0
42402: PPUSH
42403: CALL_OW 505
// SetTag ( i , 0 ) ;
42407: LD_VAR 0 3
42411: PPUSH
42412: LD_INT 0
42414: PPUSH
42415: CALL_OW 109
// scaners := scaners diff i ;
42419: LD_ADDR_VAR 0 6
42423: PUSH
42424: LD_VAR 0 6
42428: PUSH
42429: LD_VAR 0 3
42433: DIFF
42434: ST_TO_ADDR
// continue ;
42435: GO 42321
// end ; if side in [ your_side , 9 ] then
42437: LD_VAR 0 8
42441: PUSH
42442: LD_OWVAR 2
42446: PUSH
42447: LD_INT 9
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: IN
42454: IFFALSE 42470
// SetUnitDisplayNumber ( i , timer ) ;
42456: LD_VAR 0 3
42460: PPUSH
42461: LD_VAR 0 7
42465: PPUSH
42466: CALL_OW 505
// end ;
42470: GO 42321
42472: POP
42473: POP
// if not scaners then
42474: LD_VAR 0 6
42478: NOT
42479: IFFALSE 42483
// exit ;
42481: GO 42574
// timer := Dec ( timer ) ;
42483: LD_ADDR_VAR 0 7
42487: PUSH
42488: LD_VAR 0 7
42492: PPUSH
42493: CALL 82201 0 1
42497: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42498: LD_INT 35
42500: PPUSH
42501: CALL_OW 67
// until timer = 0 ;
42505: LD_VAR 0 7
42509: PUSH
42510: LD_INT 0
42512: EQUAL
42513: IFFALSE 42311
// if not scaners then
42515: LD_VAR 0 6
42519: NOT
42520: IFFALSE 42524
// exit ;
42522: GO 42574
// for i in scaners do
42524: LD_ADDR_VAR 0 3
42528: PUSH
42529: LD_VAR 0 6
42533: PUSH
42534: FOR_IN
42535: IFFALSE 42572
// begin SetUnitDisplayNumber ( i , 0 ) ;
42537: LD_VAR 0 3
42541: PPUSH
42542: LD_INT 0
42544: PPUSH
42545: CALL_OW 505
// SetTag ( i , 0 ) ;
42549: LD_VAR 0 3
42553: PPUSH
42554: LD_INT 0
42556: PPUSH
42557: CALL_OW 109
// RevealDetectorMine ( i ) ;
42561: LD_VAR 0 3
42565: PPUSH
42566: CALL 41794 0 1
// end ;
42570: GO 42534
42572: POP
42573: POP
// end ;
42574: LD_VAR 0 2
42578: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
42579: LD_INT 0
42581: PPUSH
// if p1 = mine_detector_mode then
42582: LD_VAR 0 2
42586: PUSH
42587: LD_INT 103
42589: EQUAL
42590: IFFALSE 42601
// DetectMine ( units ) ;
42592: LD_VAR 0 1
42596: PPUSH
42597: CALL 42092 0 1
// end ; end_of_file
42601: LD_VAR 0 7
42605: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42606: LD_INT 0
42608: PPUSH
42609: PPUSH
// if exist_mode then
42610: LD_VAR 0 2
42614: IFFALSE 42660
// begin unit := CreateCharacter ( prefix & ident ) ;
42616: LD_ADDR_VAR 0 5
42620: PUSH
42621: LD_VAR 0 3
42625: PUSH
42626: LD_VAR 0 1
42630: STR
42631: PPUSH
42632: CALL_OW 34
42636: ST_TO_ADDR
// if unit then
42637: LD_VAR 0 5
42641: IFFALSE 42658
// DeleteCharacters ( prefix & ident ) ;
42643: LD_VAR 0 3
42647: PUSH
42648: LD_VAR 0 1
42652: STR
42653: PPUSH
42654: CALL_OW 40
// end else
42658: GO 42675
// unit := NewCharacter ( ident ) ;
42660: LD_ADDR_VAR 0 5
42664: PUSH
42665: LD_VAR 0 1
42669: PPUSH
42670: CALL_OW 25
42674: ST_TO_ADDR
// result := unit ;
42675: LD_ADDR_VAR 0 4
42679: PUSH
42680: LD_VAR 0 5
42684: ST_TO_ADDR
// end ;
42685: LD_VAR 0 4
42689: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42690: LD_INT 0
42692: PPUSH
42693: PPUSH
// if exist_mode then
42694: LD_VAR 0 2
42698: IFFALSE 42723
// unit := CreateCharacter ( prefix & ident ) else
42700: LD_ADDR_VAR 0 5
42704: PUSH
42705: LD_VAR 0 3
42709: PUSH
42710: LD_VAR 0 1
42714: STR
42715: PPUSH
42716: CALL_OW 34
42720: ST_TO_ADDR
42721: GO 42738
// unit := NewCharacter ( ident ) ;
42723: LD_ADDR_VAR 0 5
42727: PUSH
42728: LD_VAR 0 1
42732: PPUSH
42733: CALL_OW 25
42737: ST_TO_ADDR
// result := unit ;
42738: LD_ADDR_VAR 0 4
42742: PUSH
42743: LD_VAR 0 5
42747: ST_TO_ADDR
// end ;
42748: LD_VAR 0 4
42752: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42753: LD_INT 0
42755: PPUSH
42756: PPUSH
// if not side or not nation then
42757: LD_VAR 0 1
42761: NOT
42762: IFTRUE 42771
42764: PUSH
42765: LD_VAR 0 2
42769: NOT
42770: OR
42771: IFFALSE 42775
// exit ;
42773: GO 43569
// case nation of nation_american :
42775: LD_VAR 0 2
42779: PUSH
42780: LD_INT 1
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42788
42786: GO 43010
42788: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42789: LD_ADDR_VAR 0 4
42793: PUSH
42794: LD_INT 35
42796: PUSH
42797: LD_INT 45
42799: PUSH
42800: LD_INT 46
42802: PUSH
42803: LD_INT 47
42805: PUSH
42806: LD_INT 82
42808: PUSH
42809: LD_INT 83
42811: PUSH
42812: LD_INT 84
42814: PUSH
42815: LD_INT 85
42817: PUSH
42818: LD_INT 86
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 6
42829: PUSH
42830: LD_INT 15
42832: PUSH
42833: LD_INT 16
42835: PUSH
42836: LD_INT 7
42838: PUSH
42839: LD_INT 12
42841: PUSH
42842: LD_INT 13
42844: PUSH
42845: LD_INT 10
42847: PUSH
42848: LD_INT 14
42850: PUSH
42851: LD_INT 20
42853: PUSH
42854: LD_INT 21
42856: PUSH
42857: LD_INT 22
42859: PUSH
42860: LD_INT 25
42862: PUSH
42863: LD_INT 32
42865: PUSH
42866: LD_INT 27
42868: PUSH
42869: LD_INT 36
42871: PUSH
42872: LD_INT 69
42874: PUSH
42875: LD_INT 39
42877: PUSH
42878: LD_INT 34
42880: PUSH
42881: LD_INT 40
42883: PUSH
42884: LD_INT 48
42886: PUSH
42887: LD_INT 49
42889: PUSH
42890: LD_INT 50
42892: PUSH
42893: LD_INT 51
42895: PUSH
42896: LD_INT 52
42898: PUSH
42899: LD_INT 53
42901: PUSH
42902: LD_INT 54
42904: PUSH
42905: LD_INT 55
42907: PUSH
42908: LD_INT 56
42910: PUSH
42911: LD_INT 57
42913: PUSH
42914: LD_INT 58
42916: PUSH
42917: LD_INT 59
42919: PUSH
42920: LD_INT 60
42922: PUSH
42923: LD_INT 61
42925: PUSH
42926: LD_INT 62
42928: PUSH
42929: LD_INT 80
42931: PUSH
42932: LD_INT 82
42934: PUSH
42935: LD_INT 83
42937: PUSH
42938: LD_INT 84
42940: PUSH
42941: LD_INT 85
42943: PUSH
42944: LD_INT 86
42946: PUSH
42947: LD_INT 90
42949: PUSH
42950: LD_INT 93
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
43008: GO 43491
43010: LD_INT 2
43012: DOUBLE
43013: EQUAL
43014: IFTRUE 43018
43016: GO 43252
43018: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
43019: LD_ADDR_VAR 0 4
43023: PUSH
43024: LD_INT 35
43026: PUSH
43027: LD_INT 45
43029: PUSH
43030: LD_INT 46
43032: PUSH
43033: LD_INT 47
43035: PUSH
43036: LD_INT 82
43038: PUSH
43039: LD_INT 83
43041: PUSH
43042: LD_INT 84
43044: PUSH
43045: LD_INT 85
43047: PUSH
43048: LD_INT 87
43050: PUSH
43051: LD_INT 70
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 11
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: LD_INT 4
43065: PUSH
43066: LD_INT 5
43068: PUSH
43069: LD_INT 6
43071: PUSH
43072: LD_INT 15
43074: PUSH
43075: LD_INT 18
43077: PUSH
43078: LD_INT 7
43080: PUSH
43081: LD_INT 17
43083: PUSH
43084: LD_INT 8
43086: PUSH
43087: LD_INT 20
43089: PUSH
43090: LD_INT 21
43092: PUSH
43093: LD_INT 22
43095: PUSH
43096: LD_INT 72
43098: PUSH
43099: LD_INT 26
43101: PUSH
43102: LD_INT 69
43104: PUSH
43105: LD_INT 39
43107: PUSH
43108: LD_INT 40
43110: PUSH
43111: LD_INT 41
43113: PUSH
43114: LD_INT 42
43116: PUSH
43117: LD_INT 43
43119: PUSH
43120: LD_INT 48
43122: PUSH
43123: LD_INT 49
43125: PUSH
43126: LD_INT 50
43128: PUSH
43129: LD_INT 51
43131: PUSH
43132: LD_INT 52
43134: PUSH
43135: LD_INT 53
43137: PUSH
43138: LD_INT 54
43140: PUSH
43141: LD_INT 55
43143: PUSH
43144: LD_INT 56
43146: PUSH
43147: LD_INT 60
43149: PUSH
43150: LD_INT 61
43152: PUSH
43153: LD_INT 62
43155: PUSH
43156: LD_INT 66
43158: PUSH
43159: LD_INT 67
43161: PUSH
43162: LD_INT 68
43164: PUSH
43165: LD_INT 81
43167: PUSH
43168: LD_INT 82
43170: PUSH
43171: LD_INT 83
43173: PUSH
43174: LD_INT 84
43176: PUSH
43177: LD_INT 85
43179: PUSH
43180: LD_INT 87
43182: PUSH
43183: LD_INT 88
43185: PUSH
43186: LD_INT 92
43188: PUSH
43189: LD_INT 94
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: ST_TO_ADDR
43250: GO 43491
43252: LD_INT 3
43254: DOUBLE
43255: EQUAL
43256: IFTRUE 43260
43258: GO 43490
43260: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
43261: LD_ADDR_VAR 0 4
43265: PUSH
43266: LD_INT 46
43268: PUSH
43269: LD_INT 47
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: LD_INT 82
43280: PUSH
43281: LD_INT 83
43283: PUSH
43284: LD_INT 84
43286: PUSH
43287: LD_INT 85
43289: PUSH
43290: LD_INT 86
43292: PUSH
43293: LD_INT 11
43295: PUSH
43296: LD_INT 9
43298: PUSH
43299: LD_INT 20
43301: PUSH
43302: LD_INT 19
43304: PUSH
43305: LD_INT 21
43307: PUSH
43308: LD_INT 24
43310: PUSH
43311: LD_INT 22
43313: PUSH
43314: LD_INT 25
43316: PUSH
43317: LD_INT 28
43319: PUSH
43320: LD_INT 29
43322: PUSH
43323: LD_INT 30
43325: PUSH
43326: LD_INT 31
43328: PUSH
43329: LD_INT 37
43331: PUSH
43332: LD_INT 38
43334: PUSH
43335: LD_INT 32
43337: PUSH
43338: LD_INT 27
43340: PUSH
43341: LD_INT 33
43343: PUSH
43344: LD_INT 69
43346: PUSH
43347: LD_INT 39
43349: PUSH
43350: LD_INT 34
43352: PUSH
43353: LD_INT 40
43355: PUSH
43356: LD_INT 71
43358: PUSH
43359: LD_INT 23
43361: PUSH
43362: LD_INT 44
43364: PUSH
43365: LD_INT 48
43367: PUSH
43368: LD_INT 49
43370: PUSH
43371: LD_INT 50
43373: PUSH
43374: LD_INT 51
43376: PUSH
43377: LD_INT 52
43379: PUSH
43380: LD_INT 53
43382: PUSH
43383: LD_INT 54
43385: PUSH
43386: LD_INT 55
43388: PUSH
43389: LD_INT 56
43391: PUSH
43392: LD_INT 57
43394: PUSH
43395: LD_INT 58
43397: PUSH
43398: LD_INT 59
43400: PUSH
43401: LD_INT 63
43403: PUSH
43404: LD_INT 64
43406: PUSH
43407: LD_INT 65
43409: PUSH
43410: LD_INT 82
43412: PUSH
43413: LD_INT 83
43415: PUSH
43416: LD_INT 84
43418: PUSH
43419: LD_INT 85
43421: PUSH
43422: LD_INT 86
43424: PUSH
43425: LD_INT 89
43427: PUSH
43428: LD_INT 91
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
43488: GO 43491
43490: POP
// if state > - 1 and state < 3 then
43491: LD_VAR 0 3
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: GREATER
43500: IFFALSE 43512
43502: PUSH
43503: LD_VAR 0 3
43507: PUSH
43508: LD_INT 3
43510: LESS
43511: AND
43512: IFFALSE 43569
// for i in result do
43514: LD_ADDR_VAR 0 5
43518: PUSH
43519: LD_VAR 0 4
43523: PUSH
43524: FOR_IN
43525: IFFALSE 43567
// if GetTech ( i , side ) <> state then
43527: LD_VAR 0 5
43531: PPUSH
43532: LD_VAR 0 1
43536: PPUSH
43537: CALL_OW 321
43541: PUSH
43542: LD_VAR 0 3
43546: NONEQUAL
43547: IFFALSE 43565
// result := result diff i ;
43549: LD_ADDR_VAR 0 4
43553: PUSH
43554: LD_VAR 0 4
43558: PUSH
43559: LD_VAR 0 5
43563: DIFF
43564: ST_TO_ADDR
43565: GO 43524
43567: POP
43568: POP
// end ;
43569: LD_VAR 0 4
43573: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43574: LD_INT 0
43576: PPUSH
43577: PPUSH
43578: PPUSH
// result := true ;
43579: LD_ADDR_VAR 0 3
43583: PUSH
43584: LD_INT 1
43586: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43587: LD_ADDR_VAR 0 5
43591: PUSH
43592: LD_VAR 0 2
43596: PPUSH
43597: CALL_OW 480
43601: ST_TO_ADDR
// if not tmp then
43602: LD_VAR 0 5
43606: NOT
43607: IFFALSE 43611
// exit ;
43609: GO 43660
// for i in tmp do
43611: LD_ADDR_VAR 0 4
43615: PUSH
43616: LD_VAR 0 5
43620: PUSH
43621: FOR_IN
43622: IFFALSE 43658
// if GetTech ( i , side ) <> state_researched then
43624: LD_VAR 0 4
43628: PPUSH
43629: LD_VAR 0 1
43633: PPUSH
43634: CALL_OW 321
43638: PUSH
43639: LD_INT 2
43641: NONEQUAL
43642: IFFALSE 43656
// begin result := false ;
43644: LD_ADDR_VAR 0 3
43648: PUSH
43649: LD_INT 0
43651: ST_TO_ADDR
// exit ;
43652: POP
43653: POP
43654: GO 43660
// end ;
43656: GO 43621
43658: POP
43659: POP
// end ;
43660: LD_VAR 0 3
43664: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43665: LD_INT 0
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43680: LD_VAR 0 1
43684: NOT
43685: IFTRUE 43702
43687: PUSH
43688: LD_VAR 0 1
43692: PPUSH
43693: CALL_OW 257
43697: PUSH
43698: LD_INT 9
43700: NONEQUAL
43701: OR
43702: IFFALSE 43706
// exit ;
43704: GO 44285
// side := GetSide ( unit ) ;
43706: LD_ADDR_VAR 0 9
43710: PUSH
43711: LD_VAR 0 1
43715: PPUSH
43716: CALL_OW 255
43720: ST_TO_ADDR
// tech_space := tech_spacanom ;
43721: LD_ADDR_VAR 0 12
43725: PUSH
43726: LD_INT 29
43728: ST_TO_ADDR
// tech_time := tech_taurad ;
43729: LD_ADDR_VAR 0 13
43733: PUSH
43734: LD_INT 28
43736: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43737: LD_ADDR_VAR 0 11
43741: PUSH
43742: LD_VAR 0 1
43746: PPUSH
43747: CALL_OW 310
43751: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43752: LD_VAR 0 11
43756: PPUSH
43757: CALL_OW 247
43761: PUSH
43762: LD_INT 2
43764: EQUAL
43765: IFFALSE 43769
// exit ;
43767: GO 44285
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43769: LD_ADDR_VAR 0 8
43773: PUSH
43774: LD_INT 81
43776: PUSH
43777: LD_VAR 0 9
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 3
43788: PUSH
43789: LD_INT 21
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PPUSH
43807: CALL_OW 69
43811: ST_TO_ADDR
// if not tmp then
43812: LD_VAR 0 8
43816: NOT
43817: IFFALSE 43821
// exit ;
43819: GO 44285
// if in_unit then
43821: LD_VAR 0 11
43825: IFFALSE 43849
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43827: LD_ADDR_VAR 0 10
43831: PUSH
43832: LD_VAR 0 8
43836: PPUSH
43837: LD_VAR 0 11
43841: PPUSH
43842: CALL_OW 74
43846: ST_TO_ADDR
43847: GO 43869
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43849: LD_ADDR_VAR 0 10
43853: PUSH
43854: LD_VAR 0 8
43858: PPUSH
43859: LD_VAR 0 1
43863: PPUSH
43864: CALL_OW 74
43868: ST_TO_ADDR
// if not enemy then
43869: LD_VAR 0 10
43873: NOT
43874: IFFALSE 43878
// exit ;
43876: GO 44285
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43878: LD_VAR 0 11
43882: IFFALSE 43904
43884: PUSH
43885: LD_VAR 0 11
43889: PPUSH
43890: LD_VAR 0 10
43894: PPUSH
43895: CALL_OW 296
43899: PUSH
43900: LD_INT 13
43902: GREATER
43903: AND
43904: IFTRUE 43926
43906: PUSH
43907: LD_VAR 0 1
43911: PPUSH
43912: LD_VAR 0 10
43916: PPUSH
43917: CALL_OW 296
43921: PUSH
43922: LD_INT 12
43924: GREATER
43925: OR
43926: IFFALSE 43930
// exit ;
43928: GO 44285
// missile := [ 1 ] ;
43930: LD_ADDR_VAR 0 14
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43941: LD_VAR 0 9
43945: PPUSH
43946: LD_VAR 0 12
43950: PPUSH
43951: CALL_OW 325
43955: IFFALSE 43984
// missile := Replace ( missile , missile + 1 , 2 ) ;
43957: LD_ADDR_VAR 0 14
43961: PUSH
43962: LD_VAR 0 14
43966: PPUSH
43967: LD_VAR 0 14
43971: PUSH
43972: LD_INT 1
43974: PLUS
43975: PPUSH
43976: LD_INT 2
43978: PPUSH
43979: CALL_OW 1
43983: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43984: LD_VAR 0 9
43988: PPUSH
43989: LD_VAR 0 13
43993: PPUSH
43994: CALL_OW 325
43998: IFFALSE 44022
44000: PUSH
44001: LD_VAR 0 10
44005: PPUSH
44006: CALL_OW 255
44010: PPUSH
44011: LD_VAR 0 13
44015: PPUSH
44016: CALL_OW 325
44020: NOT
44021: AND
44022: IFFALSE 44051
// missile := Replace ( missile , missile + 1 , 3 ) ;
44024: LD_ADDR_VAR 0 14
44028: PUSH
44029: LD_VAR 0 14
44033: PPUSH
44034: LD_VAR 0 14
44038: PUSH
44039: LD_INT 1
44041: PLUS
44042: PPUSH
44043: LD_INT 3
44045: PPUSH
44046: CALL_OW 1
44050: ST_TO_ADDR
// if missile < 2 then
44051: LD_VAR 0 14
44055: PUSH
44056: LD_INT 2
44058: LESS
44059: IFFALSE 44063
// exit ;
44061: GO 44285
// x := GetX ( enemy ) ;
44063: LD_ADDR_VAR 0 4
44067: PUSH
44068: LD_VAR 0 10
44072: PPUSH
44073: CALL_OW 250
44077: ST_TO_ADDR
// y := GetY ( enemy ) ;
44078: LD_ADDR_VAR 0 5
44082: PUSH
44083: LD_VAR 0 10
44087: PPUSH
44088: CALL_OW 251
44092: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44093: LD_ADDR_VAR 0 6
44097: PUSH
44098: LD_VAR 0 4
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PPUSH
44107: LD_INT 1
44109: PPUSH
44110: CALL_OW 12
44114: PLUS
44115: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44116: LD_ADDR_VAR 0 7
44120: PUSH
44121: LD_VAR 0 5
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PPUSH
44130: LD_INT 1
44132: PPUSH
44133: CALL_OW 12
44137: PLUS
44138: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44139: LD_VAR 0 6
44143: PPUSH
44144: LD_VAR 0 7
44148: PPUSH
44149: CALL_OW 488
44153: NOT
44154: IFFALSE 44176
// begin _x := x ;
44156: LD_ADDR_VAR 0 6
44160: PUSH
44161: LD_VAR 0 4
44165: ST_TO_ADDR
// _y := y ;
44166: LD_ADDR_VAR 0 7
44170: PUSH
44171: LD_VAR 0 5
44175: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44176: LD_ADDR_VAR 0 3
44180: PUSH
44181: LD_INT 1
44183: PPUSH
44184: LD_VAR 0 14
44188: PPUSH
44189: CALL_OW 12
44193: ST_TO_ADDR
// case i of 1 :
44194: LD_VAR 0 3
44198: PUSH
44199: LD_INT 1
44201: DOUBLE
44202: EQUAL
44203: IFTRUE 44207
44205: GO 44224
44207: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44208: LD_VAR 0 1
44212: PPUSH
44213: LD_VAR 0 10
44217: PPUSH
44218: CALL_OW 115
44222: GO 44285
44224: LD_INT 2
44226: DOUBLE
44227: EQUAL
44228: IFTRUE 44232
44230: GO 44254
44232: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44233: LD_VAR 0 1
44237: PPUSH
44238: LD_VAR 0 6
44242: PPUSH
44243: LD_VAR 0 7
44247: PPUSH
44248: CALL_OW 153
44252: GO 44285
44254: LD_INT 3
44256: DOUBLE
44257: EQUAL
44258: IFTRUE 44262
44260: GO 44284
44262: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44263: LD_VAR 0 1
44267: PPUSH
44268: LD_VAR 0 6
44272: PPUSH
44273: LD_VAR 0 7
44277: PPUSH
44278: CALL_OW 154
44282: GO 44285
44284: POP
// end ;
44285: LD_VAR 0 2
44289: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44290: LD_INT 0
44292: PPUSH
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
// if not unit or not building then
44298: LD_VAR 0 1
44302: NOT
44303: IFTRUE 44312
44305: PUSH
44306: LD_VAR 0 2
44310: NOT
44311: OR
44312: IFFALSE 44316
// exit ;
44314: GO 44474
// x := GetX ( building ) ;
44316: LD_ADDR_VAR 0 5
44320: PUSH
44321: LD_VAR 0 2
44325: PPUSH
44326: CALL_OW 250
44330: ST_TO_ADDR
// y := GetY ( building ) ;
44331: LD_ADDR_VAR 0 6
44335: PUSH
44336: LD_VAR 0 2
44340: PPUSH
44341: CALL_OW 251
44345: ST_TO_ADDR
// for i := 0 to 5 do
44346: LD_ADDR_VAR 0 4
44350: PUSH
44351: DOUBLE
44352: LD_INT 0
44354: DEC
44355: ST_TO_ADDR
44356: LD_INT 5
44358: PUSH
44359: FOR_TO
44360: IFFALSE 44472
// begin _x := ShiftX ( x , i , 3 ) ;
44362: LD_ADDR_VAR 0 7
44366: PUSH
44367: LD_VAR 0 5
44371: PPUSH
44372: LD_VAR 0 4
44376: PPUSH
44377: LD_INT 3
44379: PPUSH
44380: CALL_OW 272
44384: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44385: LD_ADDR_VAR 0 8
44389: PUSH
44390: LD_VAR 0 6
44394: PPUSH
44395: LD_VAR 0 4
44399: PPUSH
44400: LD_INT 3
44402: PPUSH
44403: CALL_OW 273
44407: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44408: LD_VAR 0 7
44412: PPUSH
44413: LD_VAR 0 8
44417: PPUSH
44418: CALL_OW 488
44422: NOT
44423: IFFALSE 44427
// continue ;
44425: GO 44359
// if HexInfo ( _x , _y ) = 0 then
44427: LD_VAR 0 7
44431: PPUSH
44432: LD_VAR 0 8
44436: PPUSH
44437: CALL_OW 428
44441: PUSH
44442: LD_INT 0
44444: EQUAL
44445: IFFALSE 44470
// begin ComMoveXY ( unit , _x , _y ) ;
44447: LD_VAR 0 1
44451: PPUSH
44452: LD_VAR 0 7
44456: PPUSH
44457: LD_VAR 0 8
44461: PPUSH
44462: CALL_OW 111
// exit ;
44466: POP
44467: POP
44468: GO 44474
// end ; end ;
44470: GO 44359
44472: POP
44473: POP
// end ;
44474: LD_VAR 0 3
44478: RET
// export function ScanBase ( side , base_area ) ; begin
44479: LD_INT 0
44481: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44482: LD_ADDR_VAR 0 3
44486: PUSH
44487: LD_VAR 0 2
44491: PPUSH
44492: LD_INT 81
44494: PUSH
44495: LD_VAR 0 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PPUSH
44504: CALL_OW 70
44508: ST_TO_ADDR
// end ;
44509: LD_VAR 0 3
44513: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44514: LD_INT 0
44516: PPUSH
44517: PPUSH
44518: PPUSH
44519: PPUSH
// result := false ;
44520: LD_ADDR_VAR 0 2
44524: PUSH
44525: LD_INT 0
44527: ST_TO_ADDR
// side := GetSide ( unit ) ;
44528: LD_ADDR_VAR 0 3
44532: PUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: CALL_OW 255
44542: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44543: LD_ADDR_VAR 0 4
44547: PUSH
44548: LD_VAR 0 1
44552: PPUSH
44553: CALL_OW 248
44557: ST_TO_ADDR
// case nat of 1 :
44558: LD_VAR 0 4
44562: PUSH
44563: LD_INT 1
44565: DOUBLE
44566: EQUAL
44567: IFTRUE 44571
44569: GO 44582
44571: POP
// tech := tech_lassight ; 2 :
44572: LD_ADDR_VAR 0 5
44576: PUSH
44577: LD_INT 12
44579: ST_TO_ADDR
44580: GO 44621
44582: LD_INT 2
44584: DOUBLE
44585: EQUAL
44586: IFTRUE 44590
44588: GO 44601
44590: POP
// tech := tech_mortar ; 3 :
44591: LD_ADDR_VAR 0 5
44595: PUSH
44596: LD_INT 41
44598: ST_TO_ADDR
44599: GO 44621
44601: LD_INT 3
44603: DOUBLE
44604: EQUAL
44605: IFTRUE 44609
44607: GO 44620
44609: POP
// tech := tech_bazooka ; end ;
44610: LD_ADDR_VAR 0 5
44614: PUSH
44615: LD_INT 44
44617: ST_TO_ADDR
44618: GO 44621
44620: POP
// if Researched ( side , tech ) then
44621: LD_VAR 0 3
44625: PPUSH
44626: LD_VAR 0 5
44630: PPUSH
44631: CALL_OW 325
44635: IFFALSE 44662
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44637: LD_ADDR_VAR 0 2
44641: PUSH
44642: LD_INT 5
44644: PUSH
44645: LD_INT 8
44647: PUSH
44648: LD_INT 9
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: PUSH
44656: LD_VAR 0 4
44660: ARRAY
44661: ST_TO_ADDR
// end ;
44662: LD_VAR 0 2
44666: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44667: LD_INT 0
44669: PPUSH
44670: PPUSH
44671: PPUSH
// if not mines then
44672: LD_VAR 0 2
44676: NOT
44677: IFFALSE 44681
// exit ;
44679: GO 44825
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44681: LD_ADDR_VAR 0 5
44685: PUSH
44686: LD_INT 81
44688: PUSH
44689: LD_VAR 0 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: LD_INT 21
44703: PUSH
44704: LD_INT 3
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PPUSH
44719: CALL_OW 69
44723: ST_TO_ADDR
// for i in mines do
44724: LD_ADDR_VAR 0 4
44728: PUSH
44729: LD_VAR 0 2
44733: PUSH
44734: FOR_IN
44735: IFFALSE 44823
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44737: LD_VAR 0 4
44741: PUSH
44742: LD_INT 1
44744: ARRAY
44745: PPUSH
44746: LD_VAR 0 4
44750: PUSH
44751: LD_INT 2
44753: ARRAY
44754: PPUSH
44755: CALL_OW 458
44759: NOT
44760: IFFALSE 44764
// continue ;
44762: GO 44734
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44764: LD_VAR 0 4
44768: PUSH
44769: LD_INT 1
44771: ARRAY
44772: PPUSH
44773: LD_VAR 0 4
44777: PUSH
44778: LD_INT 2
44780: ARRAY
44781: PPUSH
44782: CALL_OW 428
44786: PUSH
44787: LD_VAR 0 5
44791: IN
44792: IFFALSE 44821
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44794: LD_VAR 0 4
44798: PUSH
44799: LD_INT 1
44801: ARRAY
44802: PPUSH
44803: LD_VAR 0 4
44807: PUSH
44808: LD_INT 2
44810: ARRAY
44811: PPUSH
44812: LD_VAR 0 1
44816: PPUSH
44817: CALL_OW 456
// end ;
44821: GO 44734
44823: POP
44824: POP
// end ;
44825: LD_VAR 0 3
44829: RET
// export function Count ( array ) ; begin
44830: LD_INT 0
44832: PPUSH
// result := array + 0 ;
44833: LD_ADDR_VAR 0 2
44837: PUSH
44838: LD_VAR 0 1
44842: PUSH
44843: LD_INT 0
44845: PLUS
44846: ST_TO_ADDR
// end ;
44847: LD_VAR 0 2
44851: RET
// export function IsEmpty ( building ) ; begin
44852: LD_INT 0
44854: PPUSH
// if not building then
44855: LD_VAR 0 1
44859: NOT
44860: IFFALSE 44864
// exit ;
44862: GO 44907
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44864: LD_ADDR_VAR 0 2
44868: PUSH
44869: LD_VAR 0 1
44873: PUSH
44874: LD_INT 22
44876: PUSH
44877: LD_VAR 0 1
44881: PPUSH
44882: CALL_OW 255
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 58
44893: PUSH
44894: EMPTY
44895: LIST
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PPUSH
44901: CALL_OW 69
44905: IN
44906: ST_TO_ADDR
// end ;
44907: LD_VAR 0 2
44911: RET
// export function IsNotFull ( building ) ; var places ; begin
44912: LD_INT 0
44914: PPUSH
44915: PPUSH
// if not building then
44916: LD_VAR 0 1
44920: NOT
44921: IFFALSE 44925
// exit ;
44923: GO 44953
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44925: LD_ADDR_VAR 0 2
44929: PUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: LD_INT 3
44937: PUSH
44938: LD_INT 62
44940: PUSH
44941: EMPTY
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PPUSH
44948: CALL_OW 72
44952: ST_TO_ADDR
// end ;
44953: LD_VAR 0 2
44957: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44958: LD_INT 0
44960: PPUSH
44961: PPUSH
44962: PPUSH
44963: PPUSH
// tmp := [ ] ;
44964: LD_ADDR_VAR 0 3
44968: PUSH
44969: EMPTY
44970: ST_TO_ADDR
// list := [ ] ;
44971: LD_ADDR_VAR 0 5
44975: PUSH
44976: EMPTY
44977: ST_TO_ADDR
// for i = 16 to 25 do
44978: LD_ADDR_VAR 0 4
44982: PUSH
44983: DOUBLE
44984: LD_INT 16
44986: DEC
44987: ST_TO_ADDR
44988: LD_INT 25
44990: PUSH
44991: FOR_TO
44992: IFFALSE 45065
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44994: LD_ADDR_VAR 0 3
44998: PUSH
44999: LD_VAR 0 3
45003: PUSH
45004: LD_INT 22
45006: PUSH
45007: LD_VAR 0 1
45011: PPUSH
45012: CALL_OW 255
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 91
45023: PUSH
45024: LD_VAR 0 1
45028: PUSH
45029: LD_INT 6
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 30
45039: PUSH
45040: LD_VAR 0 4
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: PPUSH
45057: CALL_OW 69
45061: ADD
45062: ST_TO_ADDR
45063: GO 44991
45065: POP
45066: POP
// for i = 1 to tmp do
45067: LD_ADDR_VAR 0 4
45071: PUSH
45072: DOUBLE
45073: LD_INT 1
45075: DEC
45076: ST_TO_ADDR
45077: LD_VAR 0 3
45081: PUSH
45082: FOR_TO
45083: IFFALSE 45171
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45085: LD_ADDR_VAR 0 5
45089: PUSH
45090: LD_VAR 0 5
45094: PUSH
45095: LD_VAR 0 3
45099: PUSH
45100: LD_VAR 0 4
45104: ARRAY
45105: PPUSH
45106: CALL_OW 266
45110: PUSH
45111: LD_VAR 0 3
45115: PUSH
45116: LD_VAR 0 4
45120: ARRAY
45121: PPUSH
45122: CALL_OW 250
45126: PUSH
45127: LD_VAR 0 3
45131: PUSH
45132: LD_VAR 0 4
45136: ARRAY
45137: PPUSH
45138: CALL_OW 251
45142: PUSH
45143: LD_VAR 0 3
45147: PUSH
45148: LD_VAR 0 4
45152: ARRAY
45153: PPUSH
45154: CALL_OW 254
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: PUSH
45165: EMPTY
45166: LIST
45167: ADD
45168: ST_TO_ADDR
45169: GO 45082
45171: POP
45172: POP
// result := list ;
45173: LD_ADDR_VAR 0 2
45177: PUSH
45178: LD_VAR 0 5
45182: ST_TO_ADDR
// end ;
45183: LD_VAR 0 2
45187: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45188: LD_INT 0
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
45196: PPUSH
// if not factory then
45197: LD_VAR 0 1
45201: NOT
45202: IFFALSE 45206
// exit ;
45204: GO 45809
// if control = control_apeman then
45206: LD_VAR 0 4
45210: PUSH
45211: LD_INT 5
45213: EQUAL
45214: IFFALSE 45323
// begin tmp := UnitsInside ( factory ) ;
45216: LD_ADDR_VAR 0 8
45220: PUSH
45221: LD_VAR 0 1
45225: PPUSH
45226: CALL_OW 313
45230: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45231: LD_VAR 0 8
45235: PPUSH
45236: LD_INT 25
45238: PUSH
45239: LD_INT 12
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PPUSH
45246: CALL_OW 72
45250: NOT
45251: IFFALSE 45261
// control := control_manual ;
45253: LD_ADDR_VAR 0 4
45257: PUSH
45258: LD_INT 1
45260: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45261: LD_ADDR_VAR 0 8
45265: PUSH
45266: LD_VAR 0 1
45270: PPUSH
45271: CALL 44958 0 1
45275: ST_TO_ADDR
// if tmp then
45276: LD_VAR 0 8
45280: IFFALSE 45323
// begin for i in tmp do
45282: LD_ADDR_VAR 0 7
45286: PUSH
45287: LD_VAR 0 8
45291: PUSH
45292: FOR_IN
45293: IFFALSE 45321
// if i [ 1 ] = b_ext_radio then
45295: LD_VAR 0 7
45299: PUSH
45300: LD_INT 1
45302: ARRAY
45303: PUSH
45304: LD_INT 22
45306: EQUAL
45307: IFFALSE 45319
// begin control := control_remote ;
45309: LD_ADDR_VAR 0 4
45313: PUSH
45314: LD_INT 2
45316: ST_TO_ADDR
// break ;
45317: GO 45321
// end ;
45319: GO 45292
45321: POP
45322: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45323: LD_VAR 0 1
45327: PPUSH
45328: LD_VAR 0 2
45332: PPUSH
45333: LD_VAR 0 3
45337: PPUSH
45338: LD_VAR 0 4
45342: PPUSH
45343: LD_VAR 0 5
45347: PPUSH
45348: CALL_OW 448
45352: IFFALSE 45387
// begin result := [ chassis , engine , control , weapon ] ;
45354: LD_ADDR_VAR 0 6
45358: PUSH
45359: LD_VAR 0 2
45363: PUSH
45364: LD_VAR 0 3
45368: PUSH
45369: LD_VAR 0 4
45373: PUSH
45374: LD_VAR 0 5
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: ST_TO_ADDR
// exit ;
45385: GO 45809
// end ; _chassis := AvailableChassisList ( factory ) ;
45387: LD_ADDR_VAR 0 9
45391: PUSH
45392: LD_VAR 0 1
45396: PPUSH
45397: CALL_OW 475
45401: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45402: LD_ADDR_VAR 0 11
45406: PUSH
45407: LD_VAR 0 1
45411: PPUSH
45412: CALL_OW 476
45416: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45417: LD_ADDR_VAR 0 12
45421: PUSH
45422: LD_VAR 0 1
45426: PPUSH
45427: CALL_OW 477
45431: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45432: LD_ADDR_VAR 0 10
45436: PUSH
45437: LD_VAR 0 1
45441: PPUSH
45442: CALL_OW 478
45446: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45447: LD_VAR 0 9
45451: NOT
45452: IFTRUE 45461
45454: PUSH
45455: LD_VAR 0 11
45459: NOT
45460: OR
45461: IFTRUE 45470
45463: PUSH
45464: LD_VAR 0 12
45468: NOT
45469: OR
45470: IFTRUE 45479
45472: PUSH
45473: LD_VAR 0 10
45477: NOT
45478: OR
45479: IFFALSE 45514
// begin result := [ chassis , engine , control , weapon ] ;
45481: LD_ADDR_VAR 0 6
45485: PUSH
45486: LD_VAR 0 2
45490: PUSH
45491: LD_VAR 0 3
45495: PUSH
45496: LD_VAR 0 4
45500: PUSH
45501: LD_VAR 0 5
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: ST_TO_ADDR
// exit ;
45512: GO 45809
// end ; if not chassis in _chassis then
45514: LD_VAR 0 2
45518: PUSH
45519: LD_VAR 0 9
45523: IN
45524: NOT
45525: IFFALSE 45551
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45527: LD_ADDR_VAR 0 2
45531: PUSH
45532: LD_VAR 0 9
45536: PUSH
45537: LD_INT 1
45539: PPUSH
45540: LD_VAR 0 9
45544: PPUSH
45545: CALL_OW 12
45549: ARRAY
45550: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45551: LD_VAR 0 2
45555: PPUSH
45556: LD_VAR 0 3
45560: PPUSH
45561: CALL 45814 0 2
45565: NOT
45566: IFFALSE 45627
// repeat engine := _engine [ 1 ] ;
45568: LD_ADDR_VAR 0 3
45572: PUSH
45573: LD_VAR 0 11
45577: PUSH
45578: LD_INT 1
45580: ARRAY
45581: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45582: LD_ADDR_VAR 0 11
45586: PUSH
45587: LD_VAR 0 11
45591: PPUSH
45592: LD_INT 1
45594: PPUSH
45595: CALL_OW 3
45599: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45600: LD_VAR 0 2
45604: PPUSH
45605: LD_VAR 0 3
45609: PPUSH
45610: CALL 45814 0 2
45614: IFTRUE 45625
45616: PUSH
45617: LD_VAR 0 11
45621: PUSH
45622: EMPTY
45623: EQUAL
45624: OR
45625: IFFALSE 45568
// if not control in _control then
45627: LD_VAR 0 4
45631: PUSH
45632: LD_VAR 0 12
45636: IN
45637: NOT
45638: IFFALSE 45664
// control := _control [ rand ( 1 , _control ) ] ;
45640: LD_ADDR_VAR 0 4
45644: PUSH
45645: LD_VAR 0 12
45649: PUSH
45650: LD_INT 1
45652: PPUSH
45653: LD_VAR 0 12
45657: PPUSH
45658: CALL_OW 12
45662: ARRAY
45663: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45664: LD_VAR 0 2
45668: PPUSH
45669: LD_VAR 0 5
45673: PPUSH
45674: CALL 46036 0 2
45678: NOT
45679: IFFALSE 45740
// repeat weapon := _weapon [ 1 ] ;
45681: LD_ADDR_VAR 0 5
45685: PUSH
45686: LD_VAR 0 10
45690: PUSH
45691: LD_INT 1
45693: ARRAY
45694: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45695: LD_ADDR_VAR 0 10
45699: PUSH
45700: LD_VAR 0 10
45704: PPUSH
45705: LD_INT 1
45707: PPUSH
45708: CALL_OW 3
45712: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45713: LD_VAR 0 2
45717: PPUSH
45718: LD_VAR 0 5
45722: PPUSH
45723: CALL 46036 0 2
45727: IFTRUE 45738
45729: PUSH
45730: LD_VAR 0 10
45734: PUSH
45735: EMPTY
45736: EQUAL
45737: OR
45738: IFFALSE 45681
// result := [ ] ;
45740: LD_ADDR_VAR 0 6
45744: PUSH
45745: EMPTY
45746: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45747: LD_VAR 0 1
45751: PPUSH
45752: LD_VAR 0 2
45756: PPUSH
45757: LD_VAR 0 3
45761: PPUSH
45762: LD_VAR 0 4
45766: PPUSH
45767: LD_VAR 0 5
45771: PPUSH
45772: CALL_OW 448
45776: IFFALSE 45809
// result := [ chassis , engine , control , weapon ] ;
45778: LD_ADDR_VAR 0 6
45782: PUSH
45783: LD_VAR 0 2
45787: PUSH
45788: LD_VAR 0 3
45792: PUSH
45793: LD_VAR 0 4
45797: PUSH
45798: LD_VAR 0 5
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: ST_TO_ADDR
// end ;
45809: LD_VAR 0 6
45813: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45814: LD_INT 0
45816: PPUSH
// if not chassis or not engine then
45817: LD_VAR 0 1
45821: NOT
45822: IFTRUE 45831
45824: PUSH
45825: LD_VAR 0 2
45829: NOT
45830: OR
45831: IFFALSE 45835
// exit ;
45833: GO 46031
// case engine of engine_solar :
45835: LD_VAR 0 2
45839: PUSH
45840: LD_INT 2
45842: DOUBLE
45843: EQUAL
45844: IFTRUE 45848
45846: GO 45886
45848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45849: LD_ADDR_VAR 0 3
45853: PUSH
45854: LD_INT 11
45856: PUSH
45857: LD_INT 12
45859: PUSH
45860: LD_INT 13
45862: PUSH
45863: LD_INT 14
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 3
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: ST_TO_ADDR
45884: GO 46015
45886: LD_INT 1
45888: DOUBLE
45889: EQUAL
45890: IFTRUE 45894
45892: GO 45956
45894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45895: LD_ADDR_VAR 0 3
45899: PUSH
45900: LD_INT 11
45902: PUSH
45903: LD_INT 12
45905: PUSH
45906: LD_INT 13
45908: PUSH
45909: LD_INT 14
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: LD_INT 4
45923: PUSH
45924: LD_INT 5
45926: PUSH
45927: LD_INT 21
45929: PUSH
45930: LD_INT 23
45932: PUSH
45933: LD_INT 22
45935: PUSH
45936: LD_INT 24
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
45954: GO 46015
45956: LD_INT 3
45958: DOUBLE
45959: EQUAL
45960: IFTRUE 45964
45962: GO 46014
45964: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45965: LD_ADDR_VAR 0 3
45969: PUSH
45970: LD_INT 13
45972: PUSH
45973: LD_INT 14
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 3
45981: PUSH
45982: LD_INT 4
45984: PUSH
45985: LD_INT 5
45987: PUSH
45988: LD_INT 21
45990: PUSH
45991: LD_INT 22
45993: PUSH
45994: LD_INT 23
45996: PUSH
45997: LD_INT 24
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: ST_TO_ADDR
46012: GO 46015
46014: POP
// result := ( chassis in result ) ;
46015: LD_ADDR_VAR 0 3
46019: PUSH
46020: LD_VAR 0 1
46024: PUSH
46025: LD_VAR 0 3
46029: IN
46030: ST_TO_ADDR
// end ;
46031: LD_VAR 0 3
46035: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46036: LD_INT 0
46038: PPUSH
// if not chassis or not weapon then
46039: LD_VAR 0 1
46043: NOT
46044: IFTRUE 46053
46046: PUSH
46047: LD_VAR 0 2
46051: NOT
46052: OR
46053: IFFALSE 46057
// exit ;
46055: GO 47151
// case weapon of us_machine_gun :
46057: LD_VAR 0 2
46061: PUSH
46062: LD_INT 2
46064: DOUBLE
46065: EQUAL
46066: IFTRUE 46070
46068: GO 46100
46070: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46071: LD_ADDR_VAR 0 3
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: LD_INT 4
46087: PUSH
46088: LD_INT 5
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
46098: GO 47135
46100: LD_INT 3
46102: DOUBLE
46103: EQUAL
46104: IFTRUE 46108
46106: GO 46138
46108: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46109: LD_ADDR_VAR 0 3
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: LD_INT 4
46125: PUSH
46126: LD_INT 5
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: ST_TO_ADDR
46136: GO 47135
46138: LD_INT 11
46140: DOUBLE
46141: EQUAL
46142: IFTRUE 46146
46144: GO 46176
46146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46147: LD_ADDR_VAR 0 3
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: LD_INT 4
46163: PUSH
46164: LD_INT 5
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: ST_TO_ADDR
46174: GO 47135
46176: LD_INT 4
46178: DOUBLE
46179: EQUAL
46180: IFTRUE 46184
46182: GO 46210
46184: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46185: LD_ADDR_VAR 0 3
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: LD_INT 3
46195: PUSH
46196: LD_INT 4
46198: PUSH
46199: LD_INT 5
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: ST_TO_ADDR
46208: GO 47135
46210: LD_INT 5
46212: DOUBLE
46213: EQUAL
46214: IFTRUE 46218
46216: GO 46244
46218: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46219: LD_ADDR_VAR 0 3
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: LD_INT 4
46232: PUSH
46233: LD_INT 5
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
46242: GO 47135
46244: LD_INT 9
46246: DOUBLE
46247: EQUAL
46248: IFTRUE 46252
46250: GO 46278
46252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46253: LD_ADDR_VAR 0 3
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: LD_INT 3
46263: PUSH
46264: LD_INT 4
46266: PUSH
46267: LD_INT 5
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
46276: GO 47135
46278: LD_INT 7
46280: DOUBLE
46281: EQUAL
46282: IFTRUE 46286
46284: GO 46312
46286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46287: LD_ADDR_VAR 0 3
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 4
46300: PUSH
46301: LD_INT 5
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: ST_TO_ADDR
46310: GO 47135
46312: LD_INT 12
46314: DOUBLE
46315: EQUAL
46316: IFTRUE 46320
46318: GO 46346
46320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46321: LD_ADDR_VAR 0 3
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 4
46334: PUSH
46335: LD_INT 5
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
46344: GO 47135
46346: LD_INT 13
46348: DOUBLE
46349: EQUAL
46350: IFTRUE 46354
46352: GO 46380
46354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46355: LD_ADDR_VAR 0 3
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: LD_INT 4
46368: PUSH
46369: LD_INT 5
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
46378: GO 47135
46380: LD_INT 14
46382: DOUBLE
46383: EQUAL
46384: IFTRUE 46388
46386: GO 46406
46388: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46389: LD_ADDR_VAR 0 3
46393: PUSH
46394: LD_INT 4
46396: PUSH
46397: LD_INT 5
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: ST_TO_ADDR
46404: GO 47135
46406: LD_INT 6
46408: DOUBLE
46409: EQUAL
46410: IFTRUE 46414
46412: GO 46432
46414: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46415: LD_ADDR_VAR 0 3
46419: PUSH
46420: LD_INT 4
46422: PUSH
46423: LD_INT 5
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: ST_TO_ADDR
46430: GO 47135
46432: LD_INT 10
46434: DOUBLE
46435: EQUAL
46436: IFTRUE 46440
46438: GO 46458
46440: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46441: LD_ADDR_VAR 0 3
46445: PUSH
46446: LD_INT 4
46448: PUSH
46449: LD_INT 5
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: ST_TO_ADDR
46456: GO 47135
46458: LD_INT 22
46460: DOUBLE
46461: EQUAL
46462: IFTRUE 46466
46464: GO 46492
46466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46467: LD_ADDR_VAR 0 3
46471: PUSH
46472: LD_INT 11
46474: PUSH
46475: LD_INT 12
46477: PUSH
46478: LD_INT 13
46480: PUSH
46481: LD_INT 14
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
46490: GO 47135
46492: LD_INT 23
46494: DOUBLE
46495: EQUAL
46496: IFTRUE 46500
46498: GO 46526
46500: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46501: LD_ADDR_VAR 0 3
46505: PUSH
46506: LD_INT 11
46508: PUSH
46509: LD_INT 12
46511: PUSH
46512: LD_INT 13
46514: PUSH
46515: LD_INT 14
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: ST_TO_ADDR
46524: GO 47135
46526: LD_INT 24
46528: DOUBLE
46529: EQUAL
46530: IFTRUE 46534
46532: GO 46560
46534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46535: LD_ADDR_VAR 0 3
46539: PUSH
46540: LD_INT 11
46542: PUSH
46543: LD_INT 12
46545: PUSH
46546: LD_INT 13
46548: PUSH
46549: LD_INT 14
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: ST_TO_ADDR
46558: GO 47135
46560: LD_INT 30
46562: DOUBLE
46563: EQUAL
46564: IFTRUE 46568
46566: GO 46594
46568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46569: LD_ADDR_VAR 0 3
46573: PUSH
46574: LD_INT 11
46576: PUSH
46577: LD_INT 12
46579: PUSH
46580: LD_INT 13
46582: PUSH
46583: LD_INT 14
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: ST_TO_ADDR
46592: GO 47135
46594: LD_INT 25
46596: DOUBLE
46597: EQUAL
46598: IFTRUE 46602
46600: GO 46620
46602: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46603: LD_ADDR_VAR 0 3
46607: PUSH
46608: LD_INT 13
46610: PUSH
46611: LD_INT 14
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: ST_TO_ADDR
46618: GO 47135
46620: LD_INT 27
46622: DOUBLE
46623: EQUAL
46624: IFTRUE 46628
46626: GO 46646
46628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46629: LD_ADDR_VAR 0 3
46633: PUSH
46634: LD_INT 13
46636: PUSH
46637: LD_INT 14
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: ST_TO_ADDR
46644: GO 47135
46646: LD_INT 92
46648: DOUBLE
46649: EQUAL
46650: IFTRUE 46654
46652: GO 46680
46654: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46655: LD_ADDR_VAR 0 3
46659: PUSH
46660: LD_INT 11
46662: PUSH
46663: LD_INT 12
46665: PUSH
46666: LD_INT 13
46668: PUSH
46669: LD_INT 14
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
46678: GO 47135
46680: LD_INT 28
46682: DOUBLE
46683: EQUAL
46684: IFTRUE 46688
46686: GO 46706
46688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46689: LD_ADDR_VAR 0 3
46693: PUSH
46694: LD_INT 13
46696: PUSH
46697: LD_INT 14
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: ST_TO_ADDR
46704: GO 47135
46706: LD_INT 29
46708: DOUBLE
46709: EQUAL
46710: IFTRUE 46714
46712: GO 46732
46714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46715: LD_ADDR_VAR 0 3
46719: PUSH
46720: LD_INT 13
46722: PUSH
46723: LD_INT 14
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: ST_TO_ADDR
46730: GO 47135
46732: LD_INT 31
46734: DOUBLE
46735: EQUAL
46736: IFTRUE 46740
46738: GO 46758
46740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46741: LD_ADDR_VAR 0 3
46745: PUSH
46746: LD_INT 13
46748: PUSH
46749: LD_INT 14
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: ST_TO_ADDR
46756: GO 47135
46758: LD_INT 26
46760: DOUBLE
46761: EQUAL
46762: IFTRUE 46766
46764: GO 46784
46766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46767: LD_ADDR_VAR 0 3
46771: PUSH
46772: LD_INT 13
46774: PUSH
46775: LD_INT 14
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: ST_TO_ADDR
46782: GO 47135
46784: LD_INT 42
46786: DOUBLE
46787: EQUAL
46788: IFTRUE 46792
46790: GO 46818
46792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46793: LD_ADDR_VAR 0 3
46797: PUSH
46798: LD_INT 21
46800: PUSH
46801: LD_INT 22
46803: PUSH
46804: LD_INT 23
46806: PUSH
46807: LD_INT 24
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
46816: GO 47135
46818: LD_INT 43
46820: DOUBLE
46821: EQUAL
46822: IFTRUE 46826
46824: GO 46852
46826: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46827: LD_ADDR_VAR 0 3
46831: PUSH
46832: LD_INT 21
46834: PUSH
46835: LD_INT 22
46837: PUSH
46838: LD_INT 23
46840: PUSH
46841: LD_INT 24
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
46850: GO 47135
46852: LD_INT 44
46854: DOUBLE
46855: EQUAL
46856: IFTRUE 46860
46858: GO 46886
46860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46861: LD_ADDR_VAR 0 3
46865: PUSH
46866: LD_INT 21
46868: PUSH
46869: LD_INT 22
46871: PUSH
46872: LD_INT 23
46874: PUSH
46875: LD_INT 24
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: ST_TO_ADDR
46884: GO 47135
46886: LD_INT 45
46888: DOUBLE
46889: EQUAL
46890: IFTRUE 46894
46892: GO 46920
46894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46895: LD_ADDR_VAR 0 3
46899: PUSH
46900: LD_INT 21
46902: PUSH
46903: LD_INT 22
46905: PUSH
46906: LD_INT 23
46908: PUSH
46909: LD_INT 24
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: ST_TO_ADDR
46918: GO 47135
46920: LD_INT 49
46922: DOUBLE
46923: EQUAL
46924: IFTRUE 46928
46926: GO 46954
46928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46929: LD_ADDR_VAR 0 3
46933: PUSH
46934: LD_INT 21
46936: PUSH
46937: LD_INT 22
46939: PUSH
46940: LD_INT 23
46942: PUSH
46943: LD_INT 24
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
46952: GO 47135
46954: LD_INT 51
46956: DOUBLE
46957: EQUAL
46958: IFTRUE 46962
46960: GO 46988
46962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46963: LD_ADDR_VAR 0 3
46967: PUSH
46968: LD_INT 21
46970: PUSH
46971: LD_INT 22
46973: PUSH
46974: LD_INT 23
46976: PUSH
46977: LD_INT 24
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: ST_TO_ADDR
46986: GO 47135
46988: LD_INT 52
46990: DOUBLE
46991: EQUAL
46992: IFTRUE 46996
46994: GO 47022
46996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46997: LD_ADDR_VAR 0 3
47001: PUSH
47002: LD_INT 21
47004: PUSH
47005: LD_INT 22
47007: PUSH
47008: LD_INT 23
47010: PUSH
47011: LD_INT 24
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
47020: GO 47135
47022: LD_INT 53
47024: DOUBLE
47025: EQUAL
47026: IFTRUE 47030
47028: GO 47048
47030: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47031: LD_ADDR_VAR 0 3
47035: PUSH
47036: LD_INT 23
47038: PUSH
47039: LD_INT 24
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: ST_TO_ADDR
47046: GO 47135
47048: LD_INT 46
47050: DOUBLE
47051: EQUAL
47052: IFTRUE 47056
47054: GO 47074
47056: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47057: LD_ADDR_VAR 0 3
47061: PUSH
47062: LD_INT 23
47064: PUSH
47065: LD_INT 24
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: ST_TO_ADDR
47072: GO 47135
47074: LD_INT 47
47076: DOUBLE
47077: EQUAL
47078: IFTRUE 47082
47080: GO 47100
47082: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
47083: LD_ADDR_VAR 0 3
47087: PUSH
47088: LD_INT 23
47090: PUSH
47091: LD_INT 24
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: ST_TO_ADDR
47098: GO 47135
47100: LD_INT 98
47102: DOUBLE
47103: EQUAL
47104: IFTRUE 47108
47106: GO 47134
47108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47109: LD_ADDR_VAR 0 3
47113: PUSH
47114: LD_INT 21
47116: PUSH
47117: LD_INT 22
47119: PUSH
47120: LD_INT 23
47122: PUSH
47123: LD_INT 24
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: ST_TO_ADDR
47132: GO 47135
47134: POP
// result := ( chassis in result ) ;
47135: LD_ADDR_VAR 0 3
47139: PUSH
47140: LD_VAR 0 1
47144: PUSH
47145: LD_VAR 0 3
47149: IN
47150: ST_TO_ADDR
// end ;
47151: LD_VAR 0 3
47155: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47156: LD_INT 0
47158: PPUSH
47159: PPUSH
47160: PPUSH
47161: PPUSH
47162: PPUSH
47163: PPUSH
47164: PPUSH
// result := array ;
47165: LD_ADDR_VAR 0 5
47169: PUSH
47170: LD_VAR 0 1
47174: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47175: LD_VAR 0 1
47179: NOT
47180: IFTRUE 47189
47182: PUSH
47183: LD_VAR 0 2
47187: NOT
47188: OR
47189: IFTRUE 47198
47191: PUSH
47192: LD_VAR 0 3
47196: NOT
47197: OR
47198: IFTRUE 47212
47200: PUSH
47201: LD_VAR 0 2
47205: PUSH
47206: LD_VAR 0 1
47210: GREATER
47211: OR
47212: IFTRUE 47226
47214: PUSH
47215: LD_VAR 0 3
47219: PUSH
47220: LD_VAR 0 1
47224: GREATER
47225: OR
47226: IFFALSE 47230
// exit ;
47228: GO 47526
// if direction then
47230: LD_VAR 0 4
47234: IFFALSE 47298
// begin d := 1 ;
47236: LD_ADDR_VAR 0 9
47240: PUSH
47241: LD_INT 1
47243: ST_TO_ADDR
// if i_from > i_to then
47244: LD_VAR 0 2
47248: PUSH
47249: LD_VAR 0 3
47253: GREATER
47254: IFFALSE 47280
// length := ( array - i_from ) + i_to else
47256: LD_ADDR_VAR 0 11
47260: PUSH
47261: LD_VAR 0 1
47265: PUSH
47266: LD_VAR 0 2
47270: MINUS
47271: PUSH
47272: LD_VAR 0 3
47276: PLUS
47277: ST_TO_ADDR
47278: GO 47296
// length := i_to - i_from ;
47280: LD_ADDR_VAR 0 11
47284: PUSH
47285: LD_VAR 0 3
47289: PUSH
47290: LD_VAR 0 2
47294: MINUS
47295: ST_TO_ADDR
// end else
47296: GO 47359
// begin d := - 1 ;
47298: LD_ADDR_VAR 0 9
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: ST_TO_ADDR
// if i_from > i_to then
47307: LD_VAR 0 2
47311: PUSH
47312: LD_VAR 0 3
47316: GREATER
47317: IFFALSE 47337
// length := i_from - i_to else
47319: LD_ADDR_VAR 0 11
47323: PUSH
47324: LD_VAR 0 2
47328: PUSH
47329: LD_VAR 0 3
47333: MINUS
47334: ST_TO_ADDR
47335: GO 47359
// length := ( array - i_to ) + i_from ;
47337: LD_ADDR_VAR 0 11
47341: PUSH
47342: LD_VAR 0 1
47346: PUSH
47347: LD_VAR 0 3
47351: MINUS
47352: PUSH
47353: LD_VAR 0 2
47357: PLUS
47358: ST_TO_ADDR
// end ; if not length then
47359: LD_VAR 0 11
47363: NOT
47364: IFFALSE 47368
// exit ;
47366: GO 47526
// tmp := array ;
47368: LD_ADDR_VAR 0 10
47372: PUSH
47373: LD_VAR 0 1
47377: ST_TO_ADDR
// for i = 1 to length do
47378: LD_ADDR_VAR 0 6
47382: PUSH
47383: DOUBLE
47384: LD_INT 1
47386: DEC
47387: ST_TO_ADDR
47388: LD_VAR 0 11
47392: PUSH
47393: FOR_TO
47394: IFFALSE 47514
// begin for j = 1 to array do
47396: LD_ADDR_VAR 0 7
47400: PUSH
47401: DOUBLE
47402: LD_INT 1
47404: DEC
47405: ST_TO_ADDR
47406: LD_VAR 0 1
47410: PUSH
47411: FOR_TO
47412: IFFALSE 47500
// begin k := j + d ;
47414: LD_ADDR_VAR 0 8
47418: PUSH
47419: LD_VAR 0 7
47423: PUSH
47424: LD_VAR 0 9
47428: PLUS
47429: ST_TO_ADDR
// if k > array then
47430: LD_VAR 0 8
47434: PUSH
47435: LD_VAR 0 1
47439: GREATER
47440: IFFALSE 47450
// k := 1 ;
47442: LD_ADDR_VAR 0 8
47446: PUSH
47447: LD_INT 1
47449: ST_TO_ADDR
// if not k then
47450: LD_VAR 0 8
47454: NOT
47455: IFFALSE 47467
// k := array ;
47457: LD_ADDR_VAR 0 8
47461: PUSH
47462: LD_VAR 0 1
47466: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47467: LD_ADDR_VAR 0 10
47471: PUSH
47472: LD_VAR 0 10
47476: PPUSH
47477: LD_VAR 0 8
47481: PPUSH
47482: LD_VAR 0 1
47486: PUSH
47487: LD_VAR 0 7
47491: ARRAY
47492: PPUSH
47493: CALL_OW 1
47497: ST_TO_ADDR
// end ;
47498: GO 47411
47500: POP
47501: POP
// array := tmp ;
47502: LD_ADDR_VAR 0 1
47506: PUSH
47507: LD_VAR 0 10
47511: ST_TO_ADDR
// end ;
47512: GO 47393
47514: POP
47515: POP
// result := array ;
47516: LD_ADDR_VAR 0 5
47520: PUSH
47521: LD_VAR 0 1
47525: ST_TO_ADDR
// end ;
47526: LD_VAR 0 5
47530: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47531: LD_INT 0
47533: PPUSH
47534: PPUSH
// result := 0 ;
47535: LD_ADDR_VAR 0 3
47539: PUSH
47540: LD_INT 0
47542: ST_TO_ADDR
// if not array or not value in array then
47543: LD_VAR 0 1
47547: NOT
47548: IFTRUE 47563
47550: PUSH
47551: LD_VAR 0 2
47555: PUSH
47556: LD_VAR 0 1
47560: IN
47561: NOT
47562: OR
47563: IFFALSE 47567
// exit ;
47565: GO 47621
// for i = 1 to array do
47567: LD_ADDR_VAR 0 4
47571: PUSH
47572: DOUBLE
47573: LD_INT 1
47575: DEC
47576: ST_TO_ADDR
47577: LD_VAR 0 1
47581: PUSH
47582: FOR_TO
47583: IFFALSE 47619
// if value = array [ i ] then
47585: LD_VAR 0 2
47589: PUSH
47590: LD_VAR 0 1
47594: PUSH
47595: LD_VAR 0 4
47599: ARRAY
47600: EQUAL
47601: IFFALSE 47617
// begin result := i ;
47603: LD_ADDR_VAR 0 3
47607: PUSH
47608: LD_VAR 0 4
47612: ST_TO_ADDR
// exit ;
47613: POP
47614: POP
47615: GO 47621
// end ;
47617: GO 47582
47619: POP
47620: POP
// end ;
47621: LD_VAR 0 3
47625: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47626: LD_INT 0
47628: PPUSH
// vc_chassis := chassis ;
47629: LD_ADDR_OWVAR 37
47633: PUSH
47634: LD_VAR 0 1
47638: ST_TO_ADDR
// vc_engine := engine ;
47639: LD_ADDR_OWVAR 39
47643: PUSH
47644: LD_VAR 0 2
47648: ST_TO_ADDR
// vc_control := control ;
47649: LD_ADDR_OWVAR 38
47653: PUSH
47654: LD_VAR 0 3
47658: ST_TO_ADDR
// vc_weapon := weapon ;
47659: LD_ADDR_OWVAR 40
47663: PUSH
47664: LD_VAR 0 4
47668: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47669: LD_ADDR_OWVAR 41
47673: PUSH
47674: LD_VAR 0 5
47678: ST_TO_ADDR
// end ;
47679: LD_VAR 0 6
47683: RET
// export function WantPlant ( unit ) ; var task ; begin
47684: LD_INT 0
47686: PPUSH
47687: PPUSH
// result := false ;
47688: LD_ADDR_VAR 0 2
47692: PUSH
47693: LD_INT 0
47695: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47696: LD_ADDR_VAR 0 3
47700: PUSH
47701: LD_VAR 0 1
47705: PPUSH
47706: CALL_OW 437
47710: ST_TO_ADDR
// if task then
47711: LD_VAR 0 3
47715: IFFALSE 47743
// if task [ 1 ] [ 1 ] = p then
47717: LD_VAR 0 3
47721: PUSH
47722: LD_INT 1
47724: ARRAY
47725: PUSH
47726: LD_INT 1
47728: ARRAY
47729: PUSH
47730: LD_STRING p
47732: EQUAL
47733: IFFALSE 47743
// result := true ;
47735: LD_ADDR_VAR 0 2
47739: PUSH
47740: LD_INT 1
47742: ST_TO_ADDR
// end ;
47743: LD_VAR 0 2
47747: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47748: LD_INT 0
47750: PPUSH
47751: PPUSH
47752: PPUSH
47753: PPUSH
// if pos < 1 then
47754: LD_VAR 0 2
47758: PUSH
47759: LD_INT 1
47761: LESS
47762: IFFALSE 47766
// exit ;
47764: GO 48069
// if pos = 1 then
47766: LD_VAR 0 2
47770: PUSH
47771: LD_INT 1
47773: EQUAL
47774: IFFALSE 47807
// result := Replace ( arr , pos [ 1 ] , value ) else
47776: LD_ADDR_VAR 0 4
47780: PUSH
47781: LD_VAR 0 1
47785: PPUSH
47786: LD_VAR 0 2
47790: PUSH
47791: LD_INT 1
47793: ARRAY
47794: PPUSH
47795: LD_VAR 0 3
47799: PPUSH
47800: CALL_OW 1
47804: ST_TO_ADDR
47805: GO 48069
// begin tmp := arr ;
47807: LD_ADDR_VAR 0 6
47811: PUSH
47812: LD_VAR 0 1
47816: ST_TO_ADDR
// s_arr := [ tmp ] ;
47817: LD_ADDR_VAR 0 7
47821: PUSH
47822: LD_VAR 0 6
47826: PUSH
47827: EMPTY
47828: LIST
47829: ST_TO_ADDR
// for i = 1 to pos - 1 do
47830: LD_ADDR_VAR 0 5
47834: PUSH
47835: DOUBLE
47836: LD_INT 1
47838: DEC
47839: ST_TO_ADDR
47840: LD_VAR 0 2
47844: PUSH
47845: LD_INT 1
47847: MINUS
47848: PUSH
47849: FOR_TO
47850: IFFALSE 47895
// begin tmp := tmp [ pos [ i ] ] ;
47852: LD_ADDR_VAR 0 6
47856: PUSH
47857: LD_VAR 0 6
47861: PUSH
47862: LD_VAR 0 2
47866: PUSH
47867: LD_VAR 0 5
47871: ARRAY
47872: ARRAY
47873: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47874: LD_ADDR_VAR 0 7
47878: PUSH
47879: LD_VAR 0 7
47883: PUSH
47884: LD_VAR 0 6
47888: PUSH
47889: EMPTY
47890: LIST
47891: ADD
47892: ST_TO_ADDR
// end ;
47893: GO 47849
47895: POP
47896: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47897: LD_ADDR_VAR 0 6
47901: PUSH
47902: LD_VAR 0 6
47906: PPUSH
47907: LD_VAR 0 2
47911: PUSH
47912: LD_VAR 0 2
47916: ARRAY
47917: PPUSH
47918: LD_VAR 0 3
47922: PPUSH
47923: CALL_OW 1
47927: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47928: LD_ADDR_VAR 0 7
47932: PUSH
47933: LD_VAR 0 7
47937: PPUSH
47938: LD_VAR 0 7
47942: PPUSH
47943: LD_VAR 0 6
47947: PPUSH
47948: CALL_OW 1
47952: ST_TO_ADDR
// for i = s_arr downto 2 do
47953: LD_ADDR_VAR 0 5
47957: PUSH
47958: DOUBLE
47959: LD_VAR 0 7
47963: INC
47964: ST_TO_ADDR
47965: LD_INT 2
47967: PUSH
47968: FOR_DOWNTO
47969: IFFALSE 48053
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47971: LD_ADDR_VAR 0 6
47975: PUSH
47976: LD_VAR 0 7
47980: PUSH
47981: LD_VAR 0 5
47985: PUSH
47986: LD_INT 1
47988: MINUS
47989: ARRAY
47990: PPUSH
47991: LD_VAR 0 2
47995: PUSH
47996: LD_VAR 0 5
48000: PUSH
48001: LD_INT 1
48003: MINUS
48004: ARRAY
48005: PPUSH
48006: LD_VAR 0 7
48010: PUSH
48011: LD_VAR 0 5
48015: ARRAY
48016: PPUSH
48017: CALL_OW 1
48021: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48022: LD_ADDR_VAR 0 7
48026: PUSH
48027: LD_VAR 0 7
48031: PPUSH
48032: LD_VAR 0 5
48036: PUSH
48037: LD_INT 1
48039: MINUS
48040: PPUSH
48041: LD_VAR 0 6
48045: PPUSH
48046: CALL_OW 1
48050: ST_TO_ADDR
// end ;
48051: GO 47968
48053: POP
48054: POP
// result := s_arr [ 1 ] ;
48055: LD_ADDR_VAR 0 4
48059: PUSH
48060: LD_VAR 0 7
48064: PUSH
48065: LD_INT 1
48067: ARRAY
48068: ST_TO_ADDR
// end ; end ;
48069: LD_VAR 0 4
48073: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48074: LD_INT 0
48076: PPUSH
48077: PPUSH
// if not list then
48078: LD_VAR 0 1
48082: NOT
48083: IFFALSE 48087
// exit ;
48085: GO 48178
// i := list [ pos1 ] ;
48087: LD_ADDR_VAR 0 5
48091: PUSH
48092: LD_VAR 0 1
48096: PUSH
48097: LD_VAR 0 2
48101: ARRAY
48102: ST_TO_ADDR
// if not i then
48103: LD_VAR 0 5
48107: NOT
48108: IFFALSE 48112
// exit ;
48110: GO 48178
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48112: LD_ADDR_VAR 0 1
48116: PUSH
48117: LD_VAR 0 1
48121: PPUSH
48122: LD_VAR 0 2
48126: PPUSH
48127: LD_VAR 0 1
48131: PUSH
48132: LD_VAR 0 3
48136: ARRAY
48137: PPUSH
48138: CALL_OW 1
48142: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48143: LD_ADDR_VAR 0 1
48147: PUSH
48148: LD_VAR 0 1
48152: PPUSH
48153: LD_VAR 0 3
48157: PPUSH
48158: LD_VAR 0 5
48162: PPUSH
48163: CALL_OW 1
48167: ST_TO_ADDR
// result := list ;
48168: LD_ADDR_VAR 0 4
48172: PUSH
48173: LD_VAR 0 1
48177: ST_TO_ADDR
// end ;
48178: LD_VAR 0 4
48182: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48183: LD_INT 0
48185: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48186: LD_ADDR_VAR 0 5
48190: PUSH
48191: LD_VAR 0 1
48195: PPUSH
48196: CALL_OW 250
48200: PPUSH
48201: LD_VAR 0 1
48205: PPUSH
48206: CALL_OW 251
48210: PPUSH
48211: LD_VAR 0 2
48215: PPUSH
48216: LD_VAR 0 3
48220: PPUSH
48221: LD_VAR 0 4
48225: PPUSH
48226: CALL 48608 0 5
48230: ST_TO_ADDR
// end ;
48231: LD_VAR 0 5
48235: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48236: LD_INT 0
48238: PPUSH
48239: PPUSH
48240: PPUSH
48241: PPUSH
// if not list or not unit then
48242: LD_VAR 0 2
48246: NOT
48247: IFTRUE 48256
48249: PUSH
48250: LD_VAR 0 1
48254: NOT
48255: OR
48256: IFFALSE 48260
// exit ;
48258: GO 48603
// result := [ ] ;
48260: LD_ADDR_VAR 0 5
48264: PUSH
48265: EMPTY
48266: ST_TO_ADDR
// for i in list do
48267: LD_ADDR_VAR 0 6
48271: PUSH
48272: LD_VAR 0 2
48276: PUSH
48277: FOR_IN
48278: IFFALSE 48496
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48280: LD_ADDR_VAR 0 8
48284: PUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: LD_VAR 0 6
48294: PUSH
48295: LD_INT 1
48297: ARRAY
48298: PPUSH
48299: LD_VAR 0 6
48303: PUSH
48304: LD_INT 2
48306: ARRAY
48307: PPUSH
48308: CALL_OW 297
48312: ST_TO_ADDR
// if not Count ( result ) then
48313: LD_VAR 0 5
48317: PPUSH
48318: CALL 44830 0 1
48322: NOT
48323: IFFALSE 48356
// begin result := Join ( result , [ i , tmp ] ) ;
48325: LD_ADDR_VAR 0 5
48329: PUSH
48330: LD_VAR 0 5
48334: PPUSH
48335: LD_VAR 0 6
48339: PUSH
48340: LD_VAR 0 8
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PPUSH
48349: CALL 80806 0 2
48353: ST_TO_ADDR
// continue ;
48354: GO 48277
// end ; if result [ result ] [ 2 ] <= tmp then
48356: LD_VAR 0 5
48360: PUSH
48361: LD_VAR 0 5
48365: ARRAY
48366: PUSH
48367: LD_INT 2
48369: ARRAY
48370: PUSH
48371: LD_VAR 0 8
48375: LESSEQUAL
48376: IFFALSE 48409
// result := Join ( result , [ i , tmp ] ) else
48378: LD_ADDR_VAR 0 5
48382: PUSH
48383: LD_VAR 0 5
48387: PPUSH
48388: LD_VAR 0 6
48392: PUSH
48393: LD_VAR 0 8
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PPUSH
48402: CALL 80806 0 2
48406: ST_TO_ADDR
48407: GO 48494
// begin for j := 1 to Count ( result ) do
48409: LD_ADDR_VAR 0 7
48413: PUSH
48414: DOUBLE
48415: LD_INT 1
48417: DEC
48418: ST_TO_ADDR
48419: LD_VAR 0 5
48423: PPUSH
48424: CALL 44830 0 1
48428: PUSH
48429: FOR_TO
48430: IFFALSE 48492
// begin if tmp < result [ j ] [ 2 ] then
48432: LD_VAR 0 8
48436: PUSH
48437: LD_VAR 0 5
48441: PUSH
48442: LD_VAR 0 7
48446: ARRAY
48447: PUSH
48448: LD_INT 2
48450: ARRAY
48451: LESS
48452: IFFALSE 48490
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48454: LD_ADDR_VAR 0 5
48458: PUSH
48459: LD_VAR 0 5
48463: PPUSH
48464: LD_VAR 0 7
48468: PPUSH
48469: LD_VAR 0 6
48473: PUSH
48474: LD_VAR 0 8
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PPUSH
48483: CALL_OW 2
48487: ST_TO_ADDR
// break ;
48488: GO 48492
// end ; end ;
48490: GO 48429
48492: POP
48493: POP
// end ; end ;
48494: GO 48277
48496: POP
48497: POP
// if result and not asc then
48498: LD_VAR 0 5
48502: IFFALSE 48511
48504: PUSH
48505: LD_VAR 0 3
48509: NOT
48510: AND
48511: IFFALSE 48528
// result := ReverseArray ( result ) ;
48513: LD_ADDR_VAR 0 5
48517: PUSH
48518: LD_VAR 0 5
48522: PPUSH
48523: CALL 75886 0 1
48527: ST_TO_ADDR
// tmp := [ ] ;
48528: LD_ADDR_VAR 0 8
48532: PUSH
48533: EMPTY
48534: ST_TO_ADDR
// if mode then
48535: LD_VAR 0 4
48539: IFFALSE 48603
// begin for i := 1 to result do
48541: LD_ADDR_VAR 0 6
48545: PUSH
48546: DOUBLE
48547: LD_INT 1
48549: DEC
48550: ST_TO_ADDR
48551: LD_VAR 0 5
48555: PUSH
48556: FOR_TO
48557: IFFALSE 48591
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48559: LD_ADDR_VAR 0 8
48563: PUSH
48564: LD_VAR 0 8
48568: PPUSH
48569: LD_VAR 0 5
48573: PUSH
48574: LD_VAR 0 6
48578: ARRAY
48579: PUSH
48580: LD_INT 1
48582: ARRAY
48583: PPUSH
48584: CALL 80806 0 2
48588: ST_TO_ADDR
48589: GO 48556
48591: POP
48592: POP
// result := tmp ;
48593: LD_ADDR_VAR 0 5
48597: PUSH
48598: LD_VAR 0 8
48602: ST_TO_ADDR
// end ; end ;
48603: LD_VAR 0 5
48607: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48608: LD_INT 0
48610: PPUSH
48611: PPUSH
48612: PPUSH
48613: PPUSH
// if not list then
48614: LD_VAR 0 3
48618: NOT
48619: IFFALSE 48623
// exit ;
48621: GO 49013
// result := [ ] ;
48623: LD_ADDR_VAR 0 6
48627: PUSH
48628: EMPTY
48629: ST_TO_ADDR
// for i in list do
48630: LD_ADDR_VAR 0 7
48634: PUSH
48635: LD_VAR 0 3
48639: PUSH
48640: FOR_IN
48641: IFFALSE 48843
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48643: LD_ADDR_VAR 0 9
48647: PUSH
48648: LD_VAR 0 7
48652: PPUSH
48653: LD_VAR 0 1
48657: PPUSH
48658: LD_VAR 0 2
48662: PPUSH
48663: CALL_OW 297
48667: ST_TO_ADDR
// if not result then
48668: LD_VAR 0 6
48672: NOT
48673: IFFALSE 48699
// result := [ [ i , tmp ] ] else
48675: LD_ADDR_VAR 0 6
48679: PUSH
48680: LD_VAR 0 7
48684: PUSH
48685: LD_VAR 0 9
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: ST_TO_ADDR
48697: GO 48841
// begin if result [ result ] [ 2 ] <= tmp then
48699: LD_VAR 0 6
48703: PUSH
48704: LD_VAR 0 6
48708: ARRAY
48709: PUSH
48710: LD_INT 2
48712: ARRAY
48713: PUSH
48714: LD_VAR 0 9
48718: LESSEQUAL
48719: IFFALSE 48761
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48721: LD_ADDR_VAR 0 6
48725: PUSH
48726: LD_VAR 0 6
48730: PPUSH
48731: LD_VAR 0 6
48735: PUSH
48736: LD_INT 1
48738: PLUS
48739: PPUSH
48740: LD_VAR 0 7
48744: PUSH
48745: LD_VAR 0 9
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PPUSH
48754: CALL_OW 2
48758: ST_TO_ADDR
48759: GO 48841
// for j := 1 to result do
48761: LD_ADDR_VAR 0 8
48765: PUSH
48766: DOUBLE
48767: LD_INT 1
48769: DEC
48770: ST_TO_ADDR
48771: LD_VAR 0 6
48775: PUSH
48776: FOR_TO
48777: IFFALSE 48839
// begin if tmp < result [ j ] [ 2 ] then
48779: LD_VAR 0 9
48783: PUSH
48784: LD_VAR 0 6
48788: PUSH
48789: LD_VAR 0 8
48793: ARRAY
48794: PUSH
48795: LD_INT 2
48797: ARRAY
48798: LESS
48799: IFFALSE 48837
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48801: LD_ADDR_VAR 0 6
48805: PUSH
48806: LD_VAR 0 6
48810: PPUSH
48811: LD_VAR 0 8
48815: PPUSH
48816: LD_VAR 0 7
48820: PUSH
48821: LD_VAR 0 9
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PPUSH
48830: CALL_OW 2
48834: ST_TO_ADDR
// break ;
48835: GO 48839
// end ; end ;
48837: GO 48776
48839: POP
48840: POP
// end ; end ;
48841: GO 48640
48843: POP
48844: POP
// if result and not asc then
48845: LD_VAR 0 6
48849: IFFALSE 48858
48851: PUSH
48852: LD_VAR 0 4
48856: NOT
48857: AND
48858: IFFALSE 48933
// begin tmp := result ;
48860: LD_ADDR_VAR 0 9
48864: PUSH
48865: LD_VAR 0 6
48869: ST_TO_ADDR
// for i = tmp downto 1 do
48870: LD_ADDR_VAR 0 7
48874: PUSH
48875: DOUBLE
48876: LD_VAR 0 9
48880: INC
48881: ST_TO_ADDR
48882: LD_INT 1
48884: PUSH
48885: FOR_DOWNTO
48886: IFFALSE 48931
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48888: LD_ADDR_VAR 0 6
48892: PUSH
48893: LD_VAR 0 6
48897: PPUSH
48898: LD_VAR 0 9
48902: PUSH
48903: LD_VAR 0 7
48907: MINUS
48908: PUSH
48909: LD_INT 1
48911: PLUS
48912: PPUSH
48913: LD_VAR 0 9
48917: PUSH
48918: LD_VAR 0 7
48922: ARRAY
48923: PPUSH
48924: CALL_OW 1
48928: ST_TO_ADDR
48929: GO 48885
48931: POP
48932: POP
// end ; tmp := [ ] ;
48933: LD_ADDR_VAR 0 9
48937: PUSH
48938: EMPTY
48939: ST_TO_ADDR
// if mode then
48940: LD_VAR 0 5
48944: IFFALSE 49013
// begin for i = 1 to result do
48946: LD_ADDR_VAR 0 7
48950: PUSH
48951: DOUBLE
48952: LD_INT 1
48954: DEC
48955: ST_TO_ADDR
48956: LD_VAR 0 6
48960: PUSH
48961: FOR_TO
48962: IFFALSE 49001
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48964: LD_ADDR_VAR 0 9
48968: PUSH
48969: LD_VAR 0 9
48973: PPUSH
48974: LD_VAR 0 7
48978: PPUSH
48979: LD_VAR 0 6
48983: PUSH
48984: LD_VAR 0 7
48988: ARRAY
48989: PUSH
48990: LD_INT 1
48992: ARRAY
48993: PPUSH
48994: CALL_OW 1
48998: ST_TO_ADDR
48999: GO 48961
49001: POP
49002: POP
// result := tmp ;
49003: LD_ADDR_VAR 0 6
49007: PUSH
49008: LD_VAR 0 9
49012: ST_TO_ADDR
// end ; end ;
49013: LD_VAR 0 6
49017: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49018: LD_INT 0
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
49025: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49026: LD_ADDR_VAR 0 5
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// if not x or not y then
49048: LD_VAR 0 2
49052: NOT
49053: IFTRUE 49062
49055: PUSH
49056: LD_VAR 0 3
49060: NOT
49061: OR
49062: IFFALSE 49066
// exit ;
49064: GO 50722
// if not range then
49066: LD_VAR 0 4
49070: NOT
49071: IFFALSE 49081
// range := 10 ;
49073: LD_ADDR_VAR 0 4
49077: PUSH
49078: LD_INT 10
49080: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49081: LD_ADDR_VAR 0 8
49085: PUSH
49086: LD_INT 81
49088: PUSH
49089: LD_VAR 0 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 92
49100: PUSH
49101: LD_VAR 0 2
49105: PUSH
49106: LD_VAR 0 3
49110: PUSH
49111: LD_VAR 0 4
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: LD_INT 21
49127: PUSH
49128: LD_INT 3
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: PPUSH
49144: CALL_OW 69
49148: ST_TO_ADDR
// if not tmp then
49149: LD_VAR 0 8
49153: NOT
49154: IFFALSE 49158
// exit ;
49156: GO 50722
// for i in tmp do
49158: LD_ADDR_VAR 0 6
49162: PUSH
49163: LD_VAR 0 8
49167: PUSH
49168: FOR_IN
49169: IFFALSE 50697
// begin points := [ 0 , 0 , 0 ] ;
49171: LD_ADDR_VAR 0 9
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: LIST
49189: ST_TO_ADDR
// bpoints := 1 ;
49190: LD_ADDR_VAR 0 10
49194: PUSH
49195: LD_INT 1
49197: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49198: LD_VAR 0 6
49202: PPUSH
49203: CALL_OW 247
49207: PUSH
49208: LD_INT 1
49210: DOUBLE
49211: EQUAL
49212: IFTRUE 49216
49214: GO 49798
49216: POP
// begin if GetClass ( i ) = 1 then
49217: LD_VAR 0 6
49221: PPUSH
49222: CALL_OW 257
49226: PUSH
49227: LD_INT 1
49229: EQUAL
49230: IFFALSE 49251
// points := [ 10 , 5 , 3 ] ;
49232: LD_ADDR_VAR 0 9
49236: PUSH
49237: LD_INT 10
49239: PUSH
49240: LD_INT 5
49242: PUSH
49243: LD_INT 3
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49251: LD_VAR 0 6
49255: PPUSH
49256: CALL_OW 257
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 4
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: IN
49275: IFFALSE 49296
// points := [ 3 , 2 , 1 ] ;
49277: LD_ADDR_VAR 0 9
49281: PUSH
49282: LD_INT 3
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49296: LD_VAR 0 6
49300: PPUSH
49301: CALL_OW 257
49305: PUSH
49306: LD_INT 5
49308: EQUAL
49309: IFFALSE 49330
// points := [ 130 , 5 , 2 ] ;
49311: LD_ADDR_VAR 0 9
49315: PUSH
49316: LD_INT 130
49318: PUSH
49319: LD_INT 5
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49330: LD_VAR 0 6
49334: PPUSH
49335: CALL_OW 257
49339: PUSH
49340: LD_INT 8
49342: EQUAL
49343: IFFALSE 49364
// points := [ 35 , 35 , 30 ] ;
49345: LD_ADDR_VAR 0 9
49349: PUSH
49350: LD_INT 35
49352: PUSH
49353: LD_INT 35
49355: PUSH
49356: LD_INT 30
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49364: LD_VAR 0 6
49368: PPUSH
49369: CALL_OW 257
49373: PUSH
49374: LD_INT 9
49376: EQUAL
49377: IFFALSE 49398
// points := [ 20 , 55 , 40 ] ;
49379: LD_ADDR_VAR 0 9
49383: PUSH
49384: LD_INT 20
49386: PUSH
49387: LD_INT 55
49389: PUSH
49390: LD_INT 40
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49398: LD_VAR 0 6
49402: PPUSH
49403: CALL_OW 257
49407: PUSH
49408: LD_INT 12
49410: PUSH
49411: LD_INT 16
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: IN
49418: IFFALSE 49439
// points := [ 5 , 3 , 2 ] ;
49420: LD_ADDR_VAR 0 9
49424: PUSH
49425: LD_INT 5
49427: PUSH
49428: LD_INT 3
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49439: LD_VAR 0 6
49443: PPUSH
49444: CALL_OW 257
49448: PUSH
49449: LD_INT 17
49451: EQUAL
49452: IFFALSE 49473
// points := [ 100 , 50 , 75 ] ;
49454: LD_ADDR_VAR 0 9
49458: PUSH
49459: LD_INT 100
49461: PUSH
49462: LD_INT 50
49464: PUSH
49465: LD_INT 75
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49473: LD_VAR 0 6
49477: PPUSH
49478: CALL_OW 257
49482: PUSH
49483: LD_INT 15
49485: EQUAL
49486: IFFALSE 49507
// points := [ 10 , 5 , 3 ] ;
49488: LD_ADDR_VAR 0 9
49492: PUSH
49493: LD_INT 10
49495: PUSH
49496: LD_INT 5
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49507: LD_VAR 0 6
49511: PPUSH
49512: CALL_OW 257
49516: PUSH
49517: LD_INT 14
49519: EQUAL
49520: IFFALSE 49541
// points := [ 10 , 0 , 0 ] ;
49522: LD_ADDR_VAR 0 9
49526: PUSH
49527: LD_INT 10
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49541: LD_VAR 0 6
49545: PPUSH
49546: CALL_OW 257
49550: PUSH
49551: LD_INT 11
49553: EQUAL
49554: IFFALSE 49575
// points := [ 30 , 10 , 5 ] ;
49556: LD_ADDR_VAR 0 9
49560: PUSH
49561: LD_INT 30
49563: PUSH
49564: LD_INT 10
49566: PUSH
49567: LD_INT 5
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49575: LD_VAR 0 1
49579: PPUSH
49580: LD_INT 5
49582: PPUSH
49583: CALL_OW 321
49587: PUSH
49588: LD_INT 2
49590: EQUAL
49591: IFFALSE 49608
// bpoints := bpoints * 1.8 ;
49593: LD_ADDR_VAR 0 10
49597: PUSH
49598: LD_VAR 0 10
49602: PUSH
49603: LD_REAL  1.80000000000000E+0000
49606: MUL
49607: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49608: LD_VAR 0 6
49612: PPUSH
49613: CALL_OW 257
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: LD_INT 4
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: IN
49636: IFFALSE 49656
49638: PUSH
49639: LD_VAR 0 1
49643: PPUSH
49644: LD_INT 51
49646: PPUSH
49647: CALL_OW 321
49651: PUSH
49652: LD_INT 2
49654: EQUAL
49655: AND
49656: IFFALSE 49673
// bpoints := bpoints * 1.2 ;
49658: LD_ADDR_VAR 0 10
49662: PUSH
49663: LD_VAR 0 10
49667: PUSH
49668: LD_REAL  1.20000000000000E+0000
49671: MUL
49672: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49673: LD_VAR 0 6
49677: PPUSH
49678: CALL_OW 257
49682: PUSH
49683: LD_INT 5
49685: PUSH
49686: LD_INT 7
49688: PUSH
49689: LD_INT 9
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: LIST
49696: IN
49697: IFFALSE 49717
49699: PUSH
49700: LD_VAR 0 1
49704: PPUSH
49705: LD_INT 52
49707: PPUSH
49708: CALL_OW 321
49712: PUSH
49713: LD_INT 2
49715: EQUAL
49716: AND
49717: IFFALSE 49734
// bpoints := bpoints * 1.5 ;
49719: LD_ADDR_VAR 0 10
49723: PUSH
49724: LD_VAR 0 10
49728: PUSH
49729: LD_REAL  1.50000000000000E+0000
49732: MUL
49733: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49734: LD_VAR 0 1
49738: PPUSH
49739: LD_INT 66
49741: PPUSH
49742: CALL_OW 321
49746: PUSH
49747: LD_INT 2
49749: EQUAL
49750: IFFALSE 49767
// bpoints := bpoints * 1.1 ;
49752: LD_ADDR_VAR 0 10
49756: PUSH
49757: LD_VAR 0 10
49761: PUSH
49762: LD_REAL  1.10000000000000E+0000
49765: MUL
49766: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49767: LD_ADDR_VAR 0 10
49771: PUSH
49772: LD_VAR 0 10
49776: PUSH
49777: LD_VAR 0 6
49781: PPUSH
49782: LD_INT 1
49784: PPUSH
49785: CALL_OW 259
49789: PUSH
49790: LD_REAL  1.15000000000000E+0000
49793: MUL
49794: MUL
49795: ST_TO_ADDR
// end ; unit_vehicle :
49796: GO 50626
49798: LD_INT 2
49800: DOUBLE
49801: EQUAL
49802: IFTRUE 49806
49804: GO 50614
49806: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49807: LD_VAR 0 6
49811: PPUSH
49812: CALL_OW 264
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 42
49822: PUSH
49823: LD_INT 24
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: IN
49831: IFFALSE 49852
// points := [ 25 , 5 , 3 ] ;
49833: LD_ADDR_VAR 0 9
49837: PUSH
49838: LD_INT 25
49840: PUSH
49841: LD_INT 5
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49852: LD_VAR 0 6
49856: PPUSH
49857: CALL_OW 264
49861: PUSH
49862: LD_INT 4
49864: PUSH
49865: LD_INT 43
49867: PUSH
49868: LD_INT 25
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: LIST
49875: IN
49876: IFFALSE 49897
// points := [ 40 , 15 , 5 ] ;
49878: LD_ADDR_VAR 0 9
49882: PUSH
49883: LD_INT 40
49885: PUSH
49886: LD_INT 15
49888: PUSH
49889: LD_INT 5
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49897: LD_VAR 0 6
49901: PPUSH
49902: CALL_OW 264
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 23
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: IN
49917: IFFALSE 49938
// points := [ 7 , 25 , 8 ] ;
49919: LD_ADDR_VAR 0 9
49923: PUSH
49924: LD_INT 7
49926: PUSH
49927: LD_INT 25
49929: PUSH
49930: LD_INT 8
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: LIST
49937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49938: LD_VAR 0 6
49942: PPUSH
49943: CALL_OW 264
49947: PUSH
49948: LD_INT 5
49950: PUSH
49951: LD_INT 27
49953: PUSH
49954: LD_INT 44
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: IN
49962: IFFALSE 49983
// points := [ 14 , 50 , 16 ] ;
49964: LD_ADDR_VAR 0 9
49968: PUSH
49969: LD_INT 14
49971: PUSH
49972: LD_INT 50
49974: PUSH
49975: LD_INT 16
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49983: LD_VAR 0 6
49987: PPUSH
49988: CALL_OW 264
49992: PUSH
49993: LD_INT 6
49995: PUSH
49996: LD_INT 46
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: IN
50003: IFFALSE 50024
// points := [ 32 , 120 , 70 ] ;
50005: LD_ADDR_VAR 0 9
50009: PUSH
50010: LD_INT 32
50012: PUSH
50013: LD_INT 120
50015: PUSH
50016: LD_INT 70
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50024: LD_VAR 0 6
50028: PPUSH
50029: CALL_OW 264
50033: PUSH
50034: LD_INT 7
50036: PUSH
50037: LD_INT 28
50039: PUSH
50040: LD_INT 45
50042: PUSH
50043: LD_INT 92
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: IN
50052: IFFALSE 50073
// points := [ 35 , 20 , 45 ] ;
50054: LD_ADDR_VAR 0 9
50058: PUSH
50059: LD_INT 35
50061: PUSH
50062: LD_INT 20
50064: PUSH
50065: LD_INT 45
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: LIST
50072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50073: LD_VAR 0 6
50077: PPUSH
50078: CALL_OW 264
50082: PUSH
50083: LD_INT 47
50085: PUSH
50086: EMPTY
50087: LIST
50088: IN
50089: IFFALSE 50110
// points := [ 67 , 45 , 75 ] ;
50091: LD_ADDR_VAR 0 9
50095: PUSH
50096: LD_INT 67
50098: PUSH
50099: LD_INT 45
50101: PUSH
50102: LD_INT 75
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50110: LD_VAR 0 6
50114: PPUSH
50115: CALL_OW 264
50119: PUSH
50120: LD_INT 26
50122: PUSH
50123: EMPTY
50124: LIST
50125: IN
50126: IFFALSE 50147
// points := [ 120 , 30 , 80 ] ;
50128: LD_ADDR_VAR 0 9
50132: PUSH
50133: LD_INT 120
50135: PUSH
50136: LD_INT 30
50138: PUSH
50139: LD_INT 80
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50147: LD_VAR 0 6
50151: PPUSH
50152: CALL_OW 264
50156: PUSH
50157: LD_INT 22
50159: PUSH
50160: EMPTY
50161: LIST
50162: IN
50163: IFFALSE 50184
// points := [ 40 , 1 , 1 ] ;
50165: LD_ADDR_VAR 0 9
50169: PUSH
50170: LD_INT 40
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50184: LD_VAR 0 6
50188: PPUSH
50189: CALL_OW 264
50193: PUSH
50194: LD_INT 29
50196: PUSH
50197: EMPTY
50198: LIST
50199: IN
50200: IFFALSE 50221
// points := [ 70 , 200 , 400 ] ;
50202: LD_ADDR_VAR 0 9
50206: PUSH
50207: LD_INT 70
50209: PUSH
50210: LD_INT 200
50212: PUSH
50213: LD_INT 400
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50221: LD_VAR 0 6
50225: PPUSH
50226: CALL_OW 264
50230: PUSH
50231: LD_INT 14
50233: PUSH
50234: LD_INT 53
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: IN
50241: IFFALSE 50262
// points := [ 40 , 10 , 20 ] ;
50243: LD_ADDR_VAR 0 9
50247: PUSH
50248: LD_INT 40
50250: PUSH
50251: LD_INT 10
50253: PUSH
50254: LD_INT 20
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50262: LD_VAR 0 6
50266: PPUSH
50267: CALL_OW 264
50271: PUSH
50272: LD_INT 9
50274: PUSH
50275: EMPTY
50276: LIST
50277: IN
50278: IFFALSE 50299
// points := [ 5 , 70 , 20 ] ;
50280: LD_ADDR_VAR 0 9
50284: PUSH
50285: LD_INT 5
50287: PUSH
50288: LD_INT 70
50290: PUSH
50291: LD_INT 20
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: LIST
50298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50299: LD_VAR 0 6
50303: PPUSH
50304: CALL_OW 264
50308: PUSH
50309: LD_INT 10
50311: PUSH
50312: EMPTY
50313: LIST
50314: IN
50315: IFFALSE 50336
// points := [ 35 , 110 , 70 ] ;
50317: LD_ADDR_VAR 0 9
50321: PUSH
50322: LD_INT 35
50324: PUSH
50325: LD_INT 110
50327: PUSH
50328: LD_INT 70
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50336: LD_VAR 0 6
50340: PPUSH
50341: CALL_OW 265
50345: PUSH
50346: LD_INT 25
50348: EQUAL
50349: IFFALSE 50370
// points := [ 80 , 65 , 100 ] ;
50351: LD_ADDR_VAR 0 9
50355: PUSH
50356: LD_INT 80
50358: PUSH
50359: LD_INT 65
50361: PUSH
50362: LD_INT 100
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: LIST
50369: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50370: LD_VAR 0 6
50374: PPUSH
50375: CALL_OW 263
50379: PUSH
50380: LD_INT 1
50382: EQUAL
50383: IFFALSE 50418
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50385: LD_ADDR_VAR 0 10
50389: PUSH
50390: LD_VAR 0 10
50394: PUSH
50395: LD_VAR 0 6
50399: PPUSH
50400: CALL_OW 311
50404: PPUSH
50405: LD_INT 3
50407: PPUSH
50408: CALL_OW 259
50412: PUSH
50413: LD_INT 4
50415: MUL
50416: MUL
50417: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50418: LD_VAR 0 6
50422: PPUSH
50423: CALL_OW 263
50427: PUSH
50428: LD_INT 2
50430: EQUAL
50431: IFFALSE 50482
// begin j := IsControledBy ( i ) ;
50433: LD_ADDR_VAR 0 7
50437: PUSH
50438: LD_VAR 0 6
50442: PPUSH
50443: CALL_OW 312
50447: ST_TO_ADDR
// if j then
50448: LD_VAR 0 7
50452: IFFALSE 50482
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50454: LD_ADDR_VAR 0 10
50458: PUSH
50459: LD_VAR 0 10
50463: PUSH
50464: LD_VAR 0 7
50468: PPUSH
50469: LD_INT 3
50471: PPUSH
50472: CALL_OW 259
50476: PUSH
50477: LD_INT 3
50479: MUL
50480: MUL
50481: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50482: LD_VAR 0 6
50486: PPUSH
50487: CALL_OW 264
50491: PUSH
50492: LD_INT 5
50494: PUSH
50495: LD_INT 6
50497: PUSH
50498: LD_INT 46
50500: PUSH
50501: LD_INT 44
50503: PUSH
50504: LD_INT 47
50506: PUSH
50507: LD_INT 45
50509: PUSH
50510: LD_INT 28
50512: PUSH
50513: LD_INT 7
50515: PUSH
50516: LD_INT 27
50518: PUSH
50519: LD_INT 29
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: IN
50534: IFFALSE 50554
50536: PUSH
50537: LD_VAR 0 1
50541: PPUSH
50542: LD_INT 52
50544: PPUSH
50545: CALL_OW 321
50549: PUSH
50550: LD_INT 2
50552: EQUAL
50553: AND
50554: IFFALSE 50571
// bpoints := bpoints * 1.2 ;
50556: LD_ADDR_VAR 0 10
50560: PUSH
50561: LD_VAR 0 10
50565: PUSH
50566: LD_REAL  1.20000000000000E+0000
50569: MUL
50570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50571: LD_VAR 0 6
50575: PPUSH
50576: CALL_OW 264
50580: PUSH
50581: LD_INT 6
50583: PUSH
50584: LD_INT 46
50586: PUSH
50587: LD_INT 47
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: IN
50595: IFFALSE 50612
// bpoints := bpoints * 1.2 ;
50597: LD_ADDR_VAR 0 10
50601: PUSH
50602: LD_VAR 0 10
50606: PUSH
50607: LD_REAL  1.20000000000000E+0000
50610: MUL
50611: ST_TO_ADDR
// end ; unit_building :
50612: GO 50626
50614: LD_INT 3
50616: DOUBLE
50617: EQUAL
50618: IFTRUE 50622
50620: GO 50625
50622: POP
// ; end ;
50623: GO 50626
50625: POP
// for j = 1 to 3 do
50626: LD_ADDR_VAR 0 7
50630: PUSH
50631: DOUBLE
50632: LD_INT 1
50634: DEC
50635: ST_TO_ADDR
50636: LD_INT 3
50638: PUSH
50639: FOR_TO
50640: IFFALSE 50693
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50642: LD_ADDR_VAR 0 5
50646: PUSH
50647: LD_VAR 0 5
50651: PPUSH
50652: LD_VAR 0 7
50656: PPUSH
50657: LD_VAR 0 5
50661: PUSH
50662: LD_VAR 0 7
50666: ARRAY
50667: PUSH
50668: LD_VAR 0 9
50672: PUSH
50673: LD_VAR 0 7
50677: ARRAY
50678: PUSH
50679: LD_VAR 0 10
50683: MUL
50684: PLUS
50685: PPUSH
50686: CALL_OW 1
50690: ST_TO_ADDR
50691: GO 50639
50693: POP
50694: POP
// end ;
50695: GO 49168
50697: POP
50698: POP
// result := Replace ( result , 4 , tmp ) ;
50699: LD_ADDR_VAR 0 5
50703: PUSH
50704: LD_VAR 0 5
50708: PPUSH
50709: LD_INT 4
50711: PPUSH
50712: LD_VAR 0 8
50716: PPUSH
50717: CALL_OW 1
50721: ST_TO_ADDR
// end ;
50722: LD_VAR 0 5
50726: RET
// export function DangerAtRange ( unit , range ) ; begin
50727: LD_INT 0
50729: PPUSH
// if not unit then
50730: LD_VAR 0 1
50734: NOT
50735: IFFALSE 50739
// exit ;
50737: GO 50784
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50739: LD_ADDR_VAR 0 3
50743: PUSH
50744: LD_VAR 0 1
50748: PPUSH
50749: CALL_OW 255
50753: PPUSH
50754: LD_VAR 0 1
50758: PPUSH
50759: CALL_OW 250
50763: PPUSH
50764: LD_VAR 0 1
50768: PPUSH
50769: CALL_OW 251
50773: PPUSH
50774: LD_VAR 0 2
50778: PPUSH
50779: CALL 49018 0 4
50783: ST_TO_ADDR
// end ;
50784: LD_VAR 0 3
50788: RET
// export function DangerInArea ( side , area ) ; begin
50789: LD_INT 0
50791: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50792: LD_ADDR_VAR 0 3
50796: PUSH
50797: LD_VAR 0 2
50801: PPUSH
50802: LD_INT 81
50804: PUSH
50805: LD_VAR 0 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PPUSH
50814: CALL_OW 70
50818: ST_TO_ADDR
// end ;
50819: LD_VAR 0 3
50823: RET
// export function IsExtension ( b ) ; begin
50824: LD_INT 0
50826: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50827: LD_ADDR_VAR 0 2
50831: PUSH
50832: LD_VAR 0 1
50836: PUSH
50837: LD_INT 23
50839: PUSH
50840: LD_INT 20
50842: PUSH
50843: LD_INT 22
50845: PUSH
50846: LD_INT 17
50848: PUSH
50849: LD_INT 24
50851: PUSH
50852: LD_INT 21
50854: PUSH
50855: LD_INT 19
50857: PUSH
50858: LD_INT 16
50860: PUSH
50861: LD_INT 25
50863: PUSH
50864: LD_INT 18
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: IN
50879: ST_TO_ADDR
// end ;
50880: LD_VAR 0 2
50884: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50885: LD_INT 0
50887: PPUSH
50888: PPUSH
50889: PPUSH
// result := [ ] ;
50890: LD_ADDR_VAR 0 4
50894: PUSH
50895: EMPTY
50896: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50897: LD_ADDR_VAR 0 5
50901: PUSH
50902: LD_VAR 0 2
50906: PPUSH
50907: LD_INT 21
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PPUSH
50917: CALL_OW 70
50921: ST_TO_ADDR
// if not tmp then
50922: LD_VAR 0 5
50926: NOT
50927: IFFALSE 50931
// exit ;
50929: GO 50995
// if checkLink then
50931: LD_VAR 0 3
50935: IFFALSE 50985
// begin for i in tmp do
50937: LD_ADDR_VAR 0 6
50941: PUSH
50942: LD_VAR 0 5
50946: PUSH
50947: FOR_IN
50948: IFFALSE 50983
// if GetBase ( i ) <> base then
50950: LD_VAR 0 6
50954: PPUSH
50955: CALL_OW 274
50959: PUSH
50960: LD_VAR 0 1
50964: NONEQUAL
50965: IFFALSE 50981
// ComLinkToBase ( base , i ) ;
50967: LD_VAR 0 1
50971: PPUSH
50972: LD_VAR 0 6
50976: PPUSH
50977: CALL_OW 169
50981: GO 50947
50983: POP
50984: POP
// end ; result := tmp ;
50985: LD_ADDR_VAR 0 4
50989: PUSH
50990: LD_VAR 0 5
50994: ST_TO_ADDR
// end ;
50995: LD_VAR 0 4
50999: RET
// export function ComComplete ( units , b ) ; var i ; begin
51000: LD_INT 0
51002: PPUSH
51003: PPUSH
// if not units then
51004: LD_VAR 0 1
51008: NOT
51009: IFFALSE 51013
// exit ;
51011: GO 51103
// for i in units do
51013: LD_ADDR_VAR 0 4
51017: PUSH
51018: LD_VAR 0 1
51022: PUSH
51023: FOR_IN
51024: IFFALSE 51101
// if BuildingStatus ( b ) = bs_build then
51026: LD_VAR 0 2
51030: PPUSH
51031: CALL_OW 461
51035: PUSH
51036: LD_INT 1
51038: EQUAL
51039: IFFALSE 51099
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51041: LD_VAR 0 4
51045: PPUSH
51046: LD_STRING h
51048: PUSH
51049: LD_VAR 0 2
51053: PPUSH
51054: CALL_OW 250
51058: PUSH
51059: LD_VAR 0 2
51063: PPUSH
51064: CALL_OW 251
51068: PUSH
51069: LD_VAR 0 2
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: PUSH
51092: EMPTY
51093: LIST
51094: PPUSH
51095: CALL_OW 446
51099: GO 51023
51101: POP
51102: POP
// end ;
51103: LD_VAR 0 3
51107: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51108: LD_INT 0
51110: PPUSH
51111: PPUSH
51112: PPUSH
51113: PPUSH
51114: PPUSH
51115: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51116: LD_VAR 0 1
51120: NOT
51121: IFTRUE 51138
51123: PUSH
51124: LD_VAR 0 1
51128: PPUSH
51129: CALL_OW 263
51133: PUSH
51134: LD_INT 2
51136: NONEQUAL
51137: OR
51138: IFFALSE 51142
// exit ;
51140: GO 51458
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51142: LD_ADDR_VAR 0 6
51146: PUSH
51147: LD_INT 22
51149: PUSH
51150: LD_VAR 0 1
51154: PPUSH
51155: CALL_OW 255
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: LD_INT 30
51169: PUSH
51170: LD_INT 36
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 34
51179: PUSH
51180: LD_INT 31
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PPUSH
51196: CALL_OW 69
51200: ST_TO_ADDR
// if not tmp then
51201: LD_VAR 0 6
51205: NOT
51206: IFFALSE 51210
// exit ;
51208: GO 51458
// result := [ ] ;
51210: LD_ADDR_VAR 0 2
51214: PUSH
51215: EMPTY
51216: ST_TO_ADDR
// for i in tmp do
51217: LD_ADDR_VAR 0 3
51221: PUSH
51222: LD_VAR 0 6
51226: PUSH
51227: FOR_IN
51228: IFFALSE 51299
// begin t := UnitsInside ( i ) ;
51230: LD_ADDR_VAR 0 4
51234: PUSH
51235: LD_VAR 0 3
51239: PPUSH
51240: CALL_OW 313
51244: ST_TO_ADDR
// if t then
51245: LD_VAR 0 4
51249: IFFALSE 51297
// for j in t do
51251: LD_ADDR_VAR 0 7
51255: PUSH
51256: LD_VAR 0 4
51260: PUSH
51261: FOR_IN
51262: IFFALSE 51295
// result := Replace ( result , result + 1 , j ) ;
51264: LD_ADDR_VAR 0 2
51268: PUSH
51269: LD_VAR 0 2
51273: PPUSH
51274: LD_VAR 0 2
51278: PUSH
51279: LD_INT 1
51281: PLUS
51282: PPUSH
51283: LD_VAR 0 7
51287: PPUSH
51288: CALL_OW 1
51292: ST_TO_ADDR
51293: GO 51261
51295: POP
51296: POP
// end ;
51297: GO 51227
51299: POP
51300: POP
// if not result then
51301: LD_VAR 0 2
51305: NOT
51306: IFFALSE 51310
// exit ;
51308: GO 51458
// mech := result [ 1 ] ;
51310: LD_ADDR_VAR 0 5
51314: PUSH
51315: LD_VAR 0 2
51319: PUSH
51320: LD_INT 1
51322: ARRAY
51323: ST_TO_ADDR
// if result > 1 then
51324: LD_VAR 0 2
51328: PUSH
51329: LD_INT 1
51331: GREATER
51332: IFFALSE 51444
// begin for i = 2 to result do
51334: LD_ADDR_VAR 0 3
51338: PUSH
51339: DOUBLE
51340: LD_INT 2
51342: DEC
51343: ST_TO_ADDR
51344: LD_VAR 0 2
51348: PUSH
51349: FOR_TO
51350: IFFALSE 51442
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51352: LD_ADDR_VAR 0 4
51356: PUSH
51357: LD_VAR 0 2
51361: PUSH
51362: LD_VAR 0 3
51366: ARRAY
51367: PPUSH
51368: LD_INT 3
51370: PPUSH
51371: CALL_OW 259
51375: PUSH
51376: LD_VAR 0 2
51380: PUSH
51381: LD_VAR 0 3
51385: ARRAY
51386: PPUSH
51387: CALL_OW 432
51391: MINUS
51392: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51393: LD_VAR 0 4
51397: PUSH
51398: LD_VAR 0 5
51402: PPUSH
51403: LD_INT 3
51405: PPUSH
51406: CALL_OW 259
51410: PUSH
51411: LD_VAR 0 5
51415: PPUSH
51416: CALL_OW 432
51420: MINUS
51421: GREATEREQUAL
51422: IFFALSE 51440
// mech := result [ i ] ;
51424: LD_ADDR_VAR 0 5
51428: PUSH
51429: LD_VAR 0 2
51433: PUSH
51434: LD_VAR 0 3
51438: ARRAY
51439: ST_TO_ADDR
// end ;
51440: GO 51349
51442: POP
51443: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51444: LD_VAR 0 1
51448: PPUSH
51449: LD_VAR 0 5
51453: PPUSH
51454: CALL_OW 135
// end ;
51458: LD_VAR 0 2
51462: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51463: LD_INT 0
51465: PPUSH
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
51472: PPUSH
51473: PPUSH
51474: PPUSH
51475: PPUSH
51476: PPUSH
51477: PPUSH
// result := [ ] ;
51478: LD_ADDR_VAR 0 7
51482: PUSH
51483: EMPTY
51484: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51485: LD_VAR 0 1
51489: PPUSH
51490: CALL_OW 266
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: IN
51505: NOT
51506: IFFALSE 51510
// exit ;
51508: GO 53150
// if name then
51510: LD_VAR 0 3
51514: IFFALSE 51530
// SetBName ( base_dep , name ) ;
51516: LD_VAR 0 1
51520: PPUSH
51521: LD_VAR 0 3
51525: PPUSH
51526: CALL_OW 500
// base := GetBase ( base_dep ) ;
51530: LD_ADDR_VAR 0 15
51534: PUSH
51535: LD_VAR 0 1
51539: PPUSH
51540: CALL_OW 274
51544: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51545: LD_ADDR_VAR 0 16
51549: PUSH
51550: LD_VAR 0 1
51554: PPUSH
51555: CALL_OW 255
51559: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51560: LD_ADDR_VAR 0 17
51564: PUSH
51565: LD_VAR 0 1
51569: PPUSH
51570: CALL_OW 248
51574: ST_TO_ADDR
// if sources then
51575: LD_VAR 0 5
51579: IFFALSE 51626
// for i = 1 to 3 do
51581: LD_ADDR_VAR 0 8
51585: PUSH
51586: DOUBLE
51587: LD_INT 1
51589: DEC
51590: ST_TO_ADDR
51591: LD_INT 3
51593: PUSH
51594: FOR_TO
51595: IFFALSE 51624
// AddResourceType ( base , i , sources [ i ] ) ;
51597: LD_VAR 0 15
51601: PPUSH
51602: LD_VAR 0 8
51606: PPUSH
51607: LD_VAR 0 5
51611: PUSH
51612: LD_VAR 0 8
51616: ARRAY
51617: PPUSH
51618: CALL_OW 276
51622: GO 51594
51624: POP
51625: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51626: LD_ADDR_VAR 0 18
51630: PUSH
51631: LD_VAR 0 15
51635: PPUSH
51636: LD_VAR 0 2
51640: PPUSH
51641: LD_INT 1
51643: PPUSH
51644: CALL 50885 0 3
51648: ST_TO_ADDR
// InitHc ;
51649: CALL_OW 19
// InitUc ;
51653: CALL_OW 18
// uc_side := side ;
51657: LD_ADDR_OWVAR 20
51661: PUSH
51662: LD_VAR 0 16
51666: ST_TO_ADDR
// uc_nation := nation ;
51667: LD_ADDR_OWVAR 21
51671: PUSH
51672: LD_VAR 0 17
51676: ST_TO_ADDR
// if buildings then
51677: LD_VAR 0 18
51681: IFFALSE 53009
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51683: LD_ADDR_VAR 0 19
51687: PUSH
51688: LD_VAR 0 18
51692: PPUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 30
51698: PUSH
51699: LD_INT 29
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 30
51708: PUSH
51709: LD_INT 30
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: PPUSH
51721: CALL_OW 72
51725: ST_TO_ADDR
// if tmp then
51726: LD_VAR 0 19
51730: IFFALSE 51778
// for i in tmp do
51732: LD_ADDR_VAR 0 8
51736: PUSH
51737: LD_VAR 0 19
51741: PUSH
51742: FOR_IN
51743: IFFALSE 51776
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51745: LD_VAR 0 8
51749: PPUSH
51750: CALL_OW 250
51754: PPUSH
51755: LD_VAR 0 8
51759: PPUSH
51760: CALL_OW 251
51764: PPUSH
51765: LD_VAR 0 16
51769: PPUSH
51770: CALL_OW 441
51774: GO 51742
51776: POP
51777: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51778: LD_VAR 0 18
51782: PPUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 30
51788: PUSH
51789: LD_INT 32
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 30
51798: PUSH
51799: LD_INT 33
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: LIST
51810: PPUSH
51811: CALL_OW 72
51815: IFFALSE 51903
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51817: LD_ADDR_VAR 0 8
51821: PUSH
51822: LD_VAR 0 18
51826: PPUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 30
51832: PUSH
51833: LD_INT 32
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 30
51842: PUSH
51843: LD_INT 33
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: LIST
51854: PPUSH
51855: CALL_OW 72
51859: PUSH
51860: FOR_IN
51861: IFFALSE 51901
// begin if not GetBWeapon ( i ) then
51863: LD_VAR 0 8
51867: PPUSH
51868: CALL_OW 269
51872: NOT
51873: IFFALSE 51899
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51875: LD_VAR 0 8
51879: PPUSH
51880: LD_VAR 0 8
51884: PPUSH
51885: LD_VAR 0 2
51889: PPUSH
51890: CALL 53155 0 2
51894: PPUSH
51895: CALL_OW 431
// end ;
51899: GO 51860
51901: POP
51902: POP
// end ; for i = 1 to personel do
51903: LD_ADDR_VAR 0 8
51907: PUSH
51908: DOUBLE
51909: LD_INT 1
51911: DEC
51912: ST_TO_ADDR
51913: LD_VAR 0 6
51917: PUSH
51918: FOR_TO
51919: IFFALSE 52989
// begin if i > 4 then
51921: LD_VAR 0 8
51925: PUSH
51926: LD_INT 4
51928: GREATER
51929: IFFALSE 51933
// break ;
51931: GO 52989
// case i of 1 :
51933: LD_VAR 0 8
51937: PUSH
51938: LD_INT 1
51940: DOUBLE
51941: EQUAL
51942: IFTRUE 51946
51944: GO 52026
51946: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51947: LD_ADDR_VAR 0 12
51951: PUSH
51952: LD_VAR 0 18
51956: PPUSH
51957: LD_INT 22
51959: PUSH
51960: LD_VAR 0 16
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 58
51971: PUSH
51972: EMPTY
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 30
51980: PUSH
51981: LD_INT 32
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 30
51990: PUSH
51991: LD_INT 4
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 30
52000: PUSH
52001: LD_INT 5
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: LIST
52018: PPUSH
52019: CALL_OW 72
52023: ST_TO_ADDR
52024: GO 52248
52026: LD_INT 2
52028: DOUBLE
52029: EQUAL
52030: IFTRUE 52034
52032: GO 52096
52034: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52035: LD_ADDR_VAR 0 12
52039: PUSH
52040: LD_VAR 0 18
52044: PPUSH
52045: LD_INT 22
52047: PUSH
52048: LD_VAR 0 16
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 30
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 30
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: LIST
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PPUSH
52089: CALL_OW 72
52093: ST_TO_ADDR
52094: GO 52248
52096: LD_INT 3
52098: DOUBLE
52099: EQUAL
52100: IFTRUE 52104
52102: GO 52166
52104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52105: LD_ADDR_VAR 0 12
52109: PUSH
52110: LD_VAR 0 18
52114: PPUSH
52115: LD_INT 22
52117: PUSH
52118: LD_VAR 0 16
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 30
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 30
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PPUSH
52159: CALL_OW 72
52163: ST_TO_ADDR
52164: GO 52248
52166: LD_INT 4
52168: DOUBLE
52169: EQUAL
52170: IFTRUE 52174
52172: GO 52247
52174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52175: LD_ADDR_VAR 0 12
52179: PUSH
52180: LD_VAR 0 18
52184: PPUSH
52185: LD_INT 22
52187: PUSH
52188: LD_VAR 0 16
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 30
52202: PUSH
52203: LD_INT 6
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 30
52212: PUSH
52213: LD_INT 7
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 30
52222: PUSH
52223: LD_INT 8
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PPUSH
52240: CALL_OW 72
52244: ST_TO_ADDR
52245: GO 52248
52247: POP
// if i = 1 then
52248: LD_VAR 0 8
52252: PUSH
52253: LD_INT 1
52255: EQUAL
52256: IFFALSE 52367
// begin tmp := [ ] ;
52258: LD_ADDR_VAR 0 19
52262: PUSH
52263: EMPTY
52264: ST_TO_ADDR
// for j in f do
52265: LD_ADDR_VAR 0 9
52269: PUSH
52270: LD_VAR 0 12
52274: PUSH
52275: FOR_IN
52276: IFFALSE 52349
// if GetBType ( j ) = b_bunker then
52278: LD_VAR 0 9
52282: PPUSH
52283: CALL_OW 266
52287: PUSH
52288: LD_INT 32
52290: EQUAL
52291: IFFALSE 52318
// tmp := Insert ( tmp , 1 , j ) else
52293: LD_ADDR_VAR 0 19
52297: PUSH
52298: LD_VAR 0 19
52302: PPUSH
52303: LD_INT 1
52305: PPUSH
52306: LD_VAR 0 9
52310: PPUSH
52311: CALL_OW 2
52315: ST_TO_ADDR
52316: GO 52347
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52318: LD_ADDR_VAR 0 19
52322: PUSH
52323: LD_VAR 0 19
52327: PPUSH
52328: LD_VAR 0 19
52332: PUSH
52333: LD_INT 1
52335: PLUS
52336: PPUSH
52337: LD_VAR 0 9
52341: PPUSH
52342: CALL_OW 2
52346: ST_TO_ADDR
52347: GO 52275
52349: POP
52350: POP
// if tmp then
52351: LD_VAR 0 19
52355: IFFALSE 52367
// f := tmp ;
52357: LD_ADDR_VAR 0 12
52361: PUSH
52362: LD_VAR 0 19
52366: ST_TO_ADDR
// end ; x := personel [ i ] ;
52367: LD_ADDR_VAR 0 13
52371: PUSH
52372: LD_VAR 0 6
52376: PUSH
52377: LD_VAR 0 8
52381: ARRAY
52382: ST_TO_ADDR
// if x = - 1 then
52383: LD_VAR 0 13
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: EQUAL
52392: IFFALSE 52603
// begin for j in f do
52394: LD_ADDR_VAR 0 9
52398: PUSH
52399: LD_VAR 0 12
52403: PUSH
52404: FOR_IN
52405: IFFALSE 52599
// repeat InitHc ;
52407: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52411: LD_VAR 0 9
52415: PPUSH
52416: CALL_OW 266
52420: PUSH
52421: LD_INT 5
52423: EQUAL
52424: IFFALSE 52494
// begin if UnitsInside ( j ) < 3 then
52426: LD_VAR 0 9
52430: PPUSH
52431: CALL_OW 313
52435: PUSH
52436: LD_INT 3
52438: LESS
52439: IFFALSE 52475
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52441: LD_INT 0
52443: PPUSH
52444: LD_INT 5
52446: PUSH
52447: LD_INT 8
52449: PUSH
52450: LD_INT 9
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: PUSH
52458: LD_VAR 0 17
52462: ARRAY
52463: PPUSH
52464: LD_VAR 0 4
52468: PPUSH
52469: CALL_OW 380
52473: GO 52492
// PrepareHuman ( false , i , skill ) ;
52475: LD_INT 0
52477: PPUSH
52478: LD_VAR 0 8
52482: PPUSH
52483: LD_VAR 0 4
52487: PPUSH
52488: CALL_OW 380
// end else
52492: GO 52511
// PrepareHuman ( false , i , skill ) ;
52494: LD_INT 0
52496: PPUSH
52497: LD_VAR 0 8
52501: PPUSH
52502: LD_VAR 0 4
52506: PPUSH
52507: CALL_OW 380
// un := CreateHuman ;
52511: LD_ADDR_VAR 0 14
52515: PUSH
52516: CALL_OW 44
52520: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52521: LD_ADDR_VAR 0 7
52525: PUSH
52526: LD_VAR 0 7
52530: PPUSH
52531: LD_INT 1
52533: PPUSH
52534: LD_VAR 0 14
52538: PPUSH
52539: CALL_OW 2
52543: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52544: LD_VAR 0 14
52548: PPUSH
52549: LD_VAR 0 9
52553: PPUSH
52554: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52558: LD_VAR 0 9
52562: PPUSH
52563: CALL_OW 313
52567: PUSH
52568: LD_INT 6
52570: EQUAL
52571: IFTRUE 52595
52573: PUSH
52574: LD_VAR 0 9
52578: PPUSH
52579: CALL_OW 266
52583: PUSH
52584: LD_INT 32
52586: PUSH
52587: LD_INT 31
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: IN
52594: OR
52595: IFFALSE 52407
52597: GO 52404
52599: POP
52600: POP
// end else
52601: GO 52987
// for j = 1 to x do
52603: LD_ADDR_VAR 0 9
52607: PUSH
52608: DOUBLE
52609: LD_INT 1
52611: DEC
52612: ST_TO_ADDR
52613: LD_VAR 0 13
52617: PUSH
52618: FOR_TO
52619: IFFALSE 52985
// begin InitHc ;
52621: CALL_OW 19
// if not f then
52625: LD_VAR 0 12
52629: NOT
52630: IFFALSE 52719
// begin PrepareHuman ( false , i , skill ) ;
52632: LD_INT 0
52634: PPUSH
52635: LD_VAR 0 8
52639: PPUSH
52640: LD_VAR 0 4
52644: PPUSH
52645: CALL_OW 380
// un := CreateHuman ;
52649: LD_ADDR_VAR 0 14
52653: PUSH
52654: CALL_OW 44
52658: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52659: LD_ADDR_VAR 0 7
52663: PUSH
52664: LD_VAR 0 7
52668: PPUSH
52669: LD_INT 1
52671: PPUSH
52672: LD_VAR 0 14
52676: PPUSH
52677: CALL_OW 2
52681: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52682: LD_VAR 0 14
52686: PPUSH
52687: LD_VAR 0 1
52691: PPUSH
52692: CALL_OW 250
52696: PPUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 251
52706: PPUSH
52707: LD_INT 10
52709: PPUSH
52710: LD_INT 0
52712: PPUSH
52713: CALL_OW 50
// continue ;
52717: GO 52618
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52719: LD_VAR 0 12
52723: PUSH
52724: LD_INT 1
52726: ARRAY
52727: PPUSH
52728: CALL_OW 313
52732: IFFALSE 52760
52734: PUSH
52735: LD_VAR 0 12
52739: PUSH
52740: LD_INT 1
52742: ARRAY
52743: PPUSH
52744: CALL_OW 266
52748: PUSH
52749: LD_INT 32
52751: PUSH
52752: LD_INT 31
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: IN
52759: AND
52760: IFTRUE 52781
52762: PUSH
52763: LD_VAR 0 12
52767: PUSH
52768: LD_INT 1
52770: ARRAY
52771: PPUSH
52772: CALL_OW 313
52776: PUSH
52777: LD_INT 6
52779: EQUAL
52780: OR
52781: IFFALSE 52801
// f := Delete ( f , 1 ) ;
52783: LD_ADDR_VAR 0 12
52787: PUSH
52788: LD_VAR 0 12
52792: PPUSH
52793: LD_INT 1
52795: PPUSH
52796: CALL_OW 3
52800: ST_TO_ADDR
// if not f then
52801: LD_VAR 0 12
52805: NOT
52806: IFFALSE 52824
// begin x := x + 2 ;
52808: LD_ADDR_VAR 0 13
52812: PUSH
52813: LD_VAR 0 13
52817: PUSH
52818: LD_INT 2
52820: PLUS
52821: ST_TO_ADDR
// continue ;
52822: GO 52618
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52824: LD_VAR 0 12
52828: PUSH
52829: LD_INT 1
52831: ARRAY
52832: PPUSH
52833: CALL_OW 266
52837: PUSH
52838: LD_INT 5
52840: EQUAL
52841: IFFALSE 52915
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52843: LD_VAR 0 12
52847: PUSH
52848: LD_INT 1
52850: ARRAY
52851: PPUSH
52852: CALL_OW 313
52856: PUSH
52857: LD_INT 3
52859: LESS
52860: IFFALSE 52896
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52862: LD_INT 0
52864: PPUSH
52865: LD_INT 5
52867: PUSH
52868: LD_INT 8
52870: PUSH
52871: LD_INT 9
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: PUSH
52879: LD_VAR 0 17
52883: ARRAY
52884: PPUSH
52885: LD_VAR 0 4
52889: PPUSH
52890: CALL_OW 380
52894: GO 52913
// PrepareHuman ( false , i , skill ) ;
52896: LD_INT 0
52898: PPUSH
52899: LD_VAR 0 8
52903: PPUSH
52904: LD_VAR 0 4
52908: PPUSH
52909: CALL_OW 380
// end else
52913: GO 52932
// PrepareHuman ( false , i , skill ) ;
52915: LD_INT 0
52917: PPUSH
52918: LD_VAR 0 8
52922: PPUSH
52923: LD_VAR 0 4
52927: PPUSH
52928: CALL_OW 380
// un := CreateHuman ;
52932: LD_ADDR_VAR 0 14
52936: PUSH
52937: CALL_OW 44
52941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52942: LD_ADDR_VAR 0 7
52946: PUSH
52947: LD_VAR 0 7
52951: PPUSH
52952: LD_INT 1
52954: PPUSH
52955: LD_VAR 0 14
52959: PPUSH
52960: CALL_OW 2
52964: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52965: LD_VAR 0 14
52969: PPUSH
52970: LD_VAR 0 12
52974: PUSH
52975: LD_INT 1
52977: ARRAY
52978: PPUSH
52979: CALL_OW 52
// end ;
52983: GO 52618
52985: POP
52986: POP
// end ;
52987: GO 51918
52989: POP
52990: POP
// result := result ^ buildings ;
52991: LD_ADDR_VAR 0 7
52995: PUSH
52996: LD_VAR 0 7
53000: PUSH
53001: LD_VAR 0 18
53005: ADD
53006: ST_TO_ADDR
// end else
53007: GO 53150
// begin for i = 1 to personel do
53009: LD_ADDR_VAR 0 8
53013: PUSH
53014: DOUBLE
53015: LD_INT 1
53017: DEC
53018: ST_TO_ADDR
53019: LD_VAR 0 6
53023: PUSH
53024: FOR_TO
53025: IFFALSE 53148
// begin if i > 4 then
53027: LD_VAR 0 8
53031: PUSH
53032: LD_INT 4
53034: GREATER
53035: IFFALSE 53039
// break ;
53037: GO 53148
// x := personel [ i ] ;
53039: LD_ADDR_VAR 0 13
53043: PUSH
53044: LD_VAR 0 6
53048: PUSH
53049: LD_VAR 0 8
53053: ARRAY
53054: ST_TO_ADDR
// if x = - 1 then
53055: LD_VAR 0 13
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: EQUAL
53064: IFFALSE 53068
// continue ;
53066: GO 53024
// PrepareHuman ( false , i , skill ) ;
53068: LD_INT 0
53070: PPUSH
53071: LD_VAR 0 8
53075: PPUSH
53076: LD_VAR 0 4
53080: PPUSH
53081: CALL_OW 380
// un := CreateHuman ;
53085: LD_ADDR_VAR 0 14
53089: PUSH
53090: CALL_OW 44
53094: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53095: LD_VAR 0 14
53099: PPUSH
53100: LD_VAR 0 1
53104: PPUSH
53105: CALL_OW 250
53109: PPUSH
53110: LD_VAR 0 1
53114: PPUSH
53115: CALL_OW 251
53119: PPUSH
53120: LD_INT 10
53122: PPUSH
53123: LD_INT 0
53125: PPUSH
53126: CALL_OW 50
// result := result ^ un ;
53130: LD_ADDR_VAR 0 7
53134: PUSH
53135: LD_VAR 0 7
53139: PUSH
53140: LD_VAR 0 14
53144: ADD
53145: ST_TO_ADDR
// end ;
53146: GO 53024
53148: POP
53149: POP
// end ; end ;
53150: LD_VAR 0 7
53154: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53155: LD_INT 0
53157: PPUSH
53158: PPUSH
53159: PPUSH
53160: PPUSH
53161: PPUSH
53162: PPUSH
53163: PPUSH
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
// result := false ;
53173: LD_ADDR_VAR 0 3
53177: PUSH
53178: LD_INT 0
53180: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53181: LD_VAR 0 1
53185: NOT
53186: IFTRUE 53211
53188: PUSH
53189: LD_VAR 0 1
53193: PPUSH
53194: CALL_OW 266
53198: PUSH
53199: LD_INT 32
53201: PUSH
53202: LD_INT 33
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: IN
53209: NOT
53210: OR
53211: IFFALSE 53215
// exit ;
53213: GO 54350
// nat := GetNation ( tower ) ;
53215: LD_ADDR_VAR 0 12
53219: PUSH
53220: LD_VAR 0 1
53224: PPUSH
53225: CALL_OW 248
53229: ST_TO_ADDR
// side := GetSide ( tower ) ;
53230: LD_ADDR_VAR 0 16
53234: PUSH
53235: LD_VAR 0 1
53239: PPUSH
53240: CALL_OW 255
53244: ST_TO_ADDR
// x := GetX ( tower ) ;
53245: LD_ADDR_VAR 0 10
53249: PUSH
53250: LD_VAR 0 1
53254: PPUSH
53255: CALL_OW 250
53259: ST_TO_ADDR
// y := GetY ( tower ) ;
53260: LD_ADDR_VAR 0 11
53264: PUSH
53265: LD_VAR 0 1
53269: PPUSH
53270: CALL_OW 251
53274: ST_TO_ADDR
// if not x or not y then
53275: LD_VAR 0 10
53279: NOT
53280: IFTRUE 53289
53282: PUSH
53283: LD_VAR 0 11
53287: NOT
53288: OR
53289: IFFALSE 53293
// exit ;
53291: GO 54350
// weapon := 0 ;
53293: LD_ADDR_VAR 0 18
53297: PUSH
53298: LD_INT 0
53300: ST_TO_ADDR
// fac_list := [ ] ;
53301: LD_ADDR_VAR 0 17
53305: PUSH
53306: EMPTY
53307: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53308: LD_ADDR_VAR 0 6
53312: PUSH
53313: LD_VAR 0 1
53317: PPUSH
53318: CALL_OW 274
53322: PPUSH
53323: LD_VAR 0 2
53327: PPUSH
53328: LD_INT 0
53330: PPUSH
53331: CALL 50885 0 3
53335: PPUSH
53336: LD_INT 30
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PPUSH
53346: CALL_OW 72
53350: ST_TO_ADDR
// if not factories then
53351: LD_VAR 0 6
53355: NOT
53356: IFFALSE 53360
// exit ;
53358: GO 54350
// for i in factories do
53360: LD_ADDR_VAR 0 8
53364: PUSH
53365: LD_VAR 0 6
53369: PUSH
53370: FOR_IN
53371: IFFALSE 53396
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53373: LD_ADDR_VAR 0 17
53377: PUSH
53378: LD_VAR 0 17
53382: PUSH
53383: LD_VAR 0 8
53387: PPUSH
53388: CALL_OW 478
53392: UNION
53393: ST_TO_ADDR
53394: GO 53370
53396: POP
53397: POP
// if not fac_list then
53398: LD_VAR 0 17
53402: NOT
53403: IFFALSE 53407
// exit ;
53405: GO 54350
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53407: LD_ADDR_VAR 0 5
53411: PUSH
53412: LD_INT 4
53414: PUSH
53415: LD_INT 5
53417: PUSH
53418: LD_INT 9
53420: PUSH
53421: LD_INT 10
53423: PUSH
53424: LD_INT 6
53426: PUSH
53427: LD_INT 7
53429: PUSH
53430: LD_INT 11
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 27
53444: PUSH
53445: LD_INT 28
53447: PUSH
53448: LD_INT 26
53450: PUSH
53451: LD_INT 30
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 43
53462: PUSH
53463: LD_INT 44
53465: PUSH
53466: LD_INT 46
53468: PUSH
53469: LD_INT 45
53471: PUSH
53472: LD_INT 47
53474: PUSH
53475: LD_INT 49
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: PUSH
53491: LD_VAR 0 12
53495: ARRAY
53496: ST_TO_ADDR
// list := list isect fac_list ;
53497: LD_ADDR_VAR 0 5
53501: PUSH
53502: LD_VAR 0 5
53506: PUSH
53507: LD_VAR 0 17
53511: ISECT
53512: ST_TO_ADDR
// if not list then
53513: LD_VAR 0 5
53517: NOT
53518: IFFALSE 53522
// exit ;
53520: GO 54350
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53522: LD_VAR 0 12
53526: PUSH
53527: LD_INT 3
53529: EQUAL
53530: IFFALSE 53542
53532: PUSH
53533: LD_INT 49
53535: PUSH
53536: LD_VAR 0 5
53540: IN
53541: AND
53542: IFFALSE 53562
53544: PUSH
53545: LD_INT 31
53547: PPUSH
53548: LD_VAR 0 16
53552: PPUSH
53553: CALL_OW 321
53557: PUSH
53558: LD_INT 2
53560: EQUAL
53561: AND
53562: IFFALSE 53622
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53564: LD_INT 22
53566: PUSH
53567: LD_VAR 0 16
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 35
53578: PUSH
53579: LD_INT 49
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 91
53588: PUSH
53589: LD_VAR 0 1
53593: PUSH
53594: LD_INT 10
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: PPUSH
53607: CALL_OW 69
53611: NOT
53612: IFFALSE 53622
// weapon := ru_time_lapser ;
53614: LD_ADDR_VAR 0 18
53618: PUSH
53619: LD_INT 49
53621: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53622: LD_VAR 0 12
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: IN
53637: IFFALSE 53661
53639: PUSH
53640: LD_INT 11
53642: PUSH
53643: LD_VAR 0 5
53647: IN
53648: IFTRUE 53660
53650: PUSH
53651: LD_INT 30
53653: PUSH
53654: LD_VAR 0 5
53658: IN
53659: OR
53660: AND
53661: IFFALSE 53681
53663: PUSH
53664: LD_INT 6
53666: PPUSH
53667: LD_VAR 0 16
53671: PPUSH
53672: CALL_OW 321
53676: PUSH
53677: LD_INT 2
53679: EQUAL
53680: AND
53681: IFFALSE 53848
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53683: LD_INT 22
53685: PUSH
53686: LD_VAR 0 16
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 35
53700: PUSH
53701: LD_INT 11
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 35
53710: PUSH
53711: LD_INT 30
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 91
53725: PUSH
53726: LD_VAR 0 1
53730: PUSH
53731: LD_INT 18
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: PPUSH
53744: CALL_OW 69
53748: NOT
53749: IFFALSE 53825
53751: PUSH
53752: LD_INT 22
53754: PUSH
53755: LD_VAR 0 16
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: LD_INT 30
53769: PUSH
53770: LD_INT 32
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 30
53779: PUSH
53780: LD_INT 33
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 91
53794: PUSH
53795: LD_VAR 0 1
53799: PUSH
53800: LD_INT 12
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: PPUSH
53816: CALL_OW 69
53820: PUSH
53821: LD_INT 2
53823: GREATER
53824: AND
53825: IFFALSE 53848
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53827: LD_ADDR_VAR 0 18
53831: PUSH
53832: LD_INT 11
53834: PUSH
53835: LD_INT 30
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_VAR 0 12
53846: ARRAY
53847: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53848: LD_VAR 0 18
53852: NOT
53853: IFFALSE 53873
53855: PUSH
53856: LD_INT 40
53858: PPUSH
53859: LD_VAR 0 16
53863: PPUSH
53864: CALL_OW 321
53868: PUSH
53869: LD_INT 2
53871: EQUAL
53872: AND
53873: IFFALSE 53909
53875: PUSH
53876: LD_INT 7
53878: PUSH
53879: LD_VAR 0 5
53883: IN
53884: IFTRUE 53896
53886: PUSH
53887: LD_INT 28
53889: PUSH
53890: LD_VAR 0 5
53894: IN
53895: OR
53896: IFTRUE 53908
53898: PUSH
53899: LD_INT 45
53901: PUSH
53902: LD_VAR 0 5
53906: IN
53907: OR
53908: AND
53909: IFFALSE 54163
// begin hex := GetHexInfo ( x , y ) ;
53911: LD_ADDR_VAR 0 4
53915: PUSH
53916: LD_VAR 0 10
53920: PPUSH
53921: LD_VAR 0 11
53925: PPUSH
53926: CALL_OW 546
53930: ST_TO_ADDR
// if hex [ 1 ] then
53931: LD_VAR 0 4
53935: PUSH
53936: LD_INT 1
53938: ARRAY
53939: IFFALSE 53943
// exit ;
53941: GO 54350
// height := hex [ 2 ] ;
53943: LD_ADDR_VAR 0 15
53947: PUSH
53948: LD_VAR 0 4
53952: PUSH
53953: LD_INT 2
53955: ARRAY
53956: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53957: LD_ADDR_VAR 0 14
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: LD_INT 5
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: ST_TO_ADDR
// for i in tmp do
53980: LD_ADDR_VAR 0 8
53984: PUSH
53985: LD_VAR 0 14
53989: PUSH
53990: FOR_IN
53991: IFFALSE 54161
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53993: LD_ADDR_VAR 0 9
53997: PUSH
53998: LD_VAR 0 10
54002: PPUSH
54003: LD_VAR 0 8
54007: PPUSH
54008: LD_INT 5
54010: PPUSH
54011: CALL_OW 272
54015: PUSH
54016: LD_VAR 0 11
54020: PPUSH
54021: LD_VAR 0 8
54025: PPUSH
54026: LD_INT 5
54028: PPUSH
54029: CALL_OW 273
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54038: LD_VAR 0 9
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: PPUSH
54047: LD_VAR 0 9
54051: PUSH
54052: LD_INT 2
54054: ARRAY
54055: PPUSH
54056: CALL_OW 488
54060: IFFALSE 54159
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54062: LD_ADDR_VAR 0 4
54066: PUSH
54067: LD_VAR 0 9
54071: PUSH
54072: LD_INT 1
54074: ARRAY
54075: PPUSH
54076: LD_VAR 0 9
54080: PUSH
54081: LD_INT 2
54083: ARRAY
54084: PPUSH
54085: CALL_OW 546
54089: ST_TO_ADDR
// if hex [ 1 ] then
54090: LD_VAR 0 4
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: IFFALSE 54102
// continue ;
54100: GO 53990
// h := hex [ 2 ] ;
54102: LD_ADDR_VAR 0 13
54106: PUSH
54107: LD_VAR 0 4
54111: PUSH
54112: LD_INT 2
54114: ARRAY
54115: ST_TO_ADDR
// if h + 7 < height then
54116: LD_VAR 0 13
54120: PUSH
54121: LD_INT 7
54123: PLUS
54124: PUSH
54125: LD_VAR 0 15
54129: LESS
54130: IFFALSE 54159
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54132: LD_ADDR_VAR 0 18
54136: PUSH
54137: LD_INT 7
54139: PUSH
54140: LD_INT 28
54142: PUSH
54143: LD_INT 45
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: LIST
54150: PUSH
54151: LD_VAR 0 12
54155: ARRAY
54156: ST_TO_ADDR
// break ;
54157: GO 54161
// end ; end ; end ;
54159: GO 53990
54161: POP
54162: POP
// end ; if not weapon then
54163: LD_VAR 0 18
54167: NOT
54168: IFFALSE 54228
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54170: LD_ADDR_VAR 0 5
54174: PUSH
54175: LD_VAR 0 5
54179: PUSH
54180: LD_INT 11
54182: PUSH
54183: LD_INT 30
54185: PUSH
54186: LD_INT 49
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: LIST
54193: DIFF
54194: ST_TO_ADDR
// if not list then
54195: LD_VAR 0 5
54199: NOT
54200: IFFALSE 54204
// exit ;
54202: GO 54350
// weapon := list [ rand ( 1 , list ) ] ;
54204: LD_ADDR_VAR 0 18
54208: PUSH
54209: LD_VAR 0 5
54213: PUSH
54214: LD_INT 1
54216: PPUSH
54217: LD_VAR 0 5
54221: PPUSH
54222: CALL_OW 12
54226: ARRAY
54227: ST_TO_ADDR
// end ; if weapon then
54228: LD_VAR 0 18
54232: IFFALSE 54350
// begin tmp := CostOfWeapon ( weapon ) ;
54234: LD_ADDR_VAR 0 14
54238: PUSH
54239: LD_VAR 0 18
54243: PPUSH
54244: CALL_OW 451
54248: ST_TO_ADDR
// j := GetBase ( tower ) ;
54249: LD_ADDR_VAR 0 9
54253: PUSH
54254: LD_VAR 0 1
54258: PPUSH
54259: CALL_OW 274
54263: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54264: LD_VAR 0 9
54268: PPUSH
54269: LD_INT 1
54271: PPUSH
54272: CALL_OW 275
54276: PUSH
54277: LD_VAR 0 14
54281: PUSH
54282: LD_INT 1
54284: ARRAY
54285: GREATEREQUAL
54286: IFFALSE 54312
54288: PUSH
54289: LD_VAR 0 9
54293: PPUSH
54294: LD_INT 2
54296: PPUSH
54297: CALL_OW 275
54301: PUSH
54302: LD_VAR 0 14
54306: PUSH
54307: LD_INT 2
54309: ARRAY
54310: GREATEREQUAL
54311: AND
54312: IFFALSE 54338
54314: PUSH
54315: LD_VAR 0 9
54319: PPUSH
54320: LD_INT 3
54322: PPUSH
54323: CALL_OW 275
54327: PUSH
54328: LD_VAR 0 14
54332: PUSH
54333: LD_INT 3
54335: ARRAY
54336: GREATEREQUAL
54337: AND
54338: IFFALSE 54350
// result := weapon ;
54340: LD_ADDR_VAR 0 3
54344: PUSH
54345: LD_VAR 0 18
54349: ST_TO_ADDR
// end ; end ;
54350: LD_VAR 0 3
54354: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54355: LD_INT 0
54357: PPUSH
54358: PPUSH
// result := true ;
54359: LD_ADDR_VAR 0 3
54363: PUSH
54364: LD_INT 1
54366: ST_TO_ADDR
// if array1 = array2 then
54367: LD_VAR 0 1
54371: PUSH
54372: LD_VAR 0 2
54376: EQUAL
54377: IFFALSE 54437
// begin for i = 1 to array1 do
54379: LD_ADDR_VAR 0 4
54383: PUSH
54384: DOUBLE
54385: LD_INT 1
54387: DEC
54388: ST_TO_ADDR
54389: LD_VAR 0 1
54393: PUSH
54394: FOR_TO
54395: IFFALSE 54433
// if array1 [ i ] <> array2 [ i ] then
54397: LD_VAR 0 1
54401: PUSH
54402: LD_VAR 0 4
54406: ARRAY
54407: PUSH
54408: LD_VAR 0 2
54412: PUSH
54413: LD_VAR 0 4
54417: ARRAY
54418: NONEQUAL
54419: IFFALSE 54431
// begin result := false ;
54421: LD_ADDR_VAR 0 3
54425: PUSH
54426: LD_INT 0
54428: ST_TO_ADDR
// break ;
54429: GO 54433
// end ;
54431: GO 54394
54433: POP
54434: POP
// end else
54435: GO 54445
// result := false ;
54437: LD_ADDR_VAR 0 3
54441: PUSH
54442: LD_INT 0
54444: ST_TO_ADDR
// end ;
54445: LD_VAR 0 3
54449: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54450: LD_INT 0
54452: PPUSH
54453: PPUSH
// if not array1 or not array2 then
54454: LD_VAR 0 1
54458: NOT
54459: IFTRUE 54468
54461: PUSH
54462: LD_VAR 0 2
54466: NOT
54467: OR
54468: IFFALSE 54472
// exit ;
54470: GO 54536
// result := true ;
54472: LD_ADDR_VAR 0 3
54476: PUSH
54477: LD_INT 1
54479: ST_TO_ADDR
// for i = 1 to array1 do
54480: LD_ADDR_VAR 0 4
54484: PUSH
54485: DOUBLE
54486: LD_INT 1
54488: DEC
54489: ST_TO_ADDR
54490: LD_VAR 0 1
54494: PUSH
54495: FOR_TO
54496: IFFALSE 54534
// if array1 [ i ] <> array2 [ i ] then
54498: LD_VAR 0 1
54502: PUSH
54503: LD_VAR 0 4
54507: ARRAY
54508: PUSH
54509: LD_VAR 0 2
54513: PUSH
54514: LD_VAR 0 4
54518: ARRAY
54519: NONEQUAL
54520: IFFALSE 54532
// begin result := false ;
54522: LD_ADDR_VAR 0 3
54526: PUSH
54527: LD_INT 0
54529: ST_TO_ADDR
// break ;
54530: GO 54534
// end ;
54532: GO 54495
54534: POP
54535: POP
// end ;
54536: LD_VAR 0 3
54540: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54541: LD_INT 0
54543: PPUSH
54544: PPUSH
54545: PPUSH
// pom := GetBase ( fac ) ;
54546: LD_ADDR_VAR 0 5
54550: PUSH
54551: LD_VAR 0 1
54555: PPUSH
54556: CALL_OW 274
54560: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54561: LD_ADDR_VAR 0 4
54565: PUSH
54566: LD_VAR 0 2
54570: PUSH
54571: LD_INT 1
54573: ARRAY
54574: PPUSH
54575: LD_VAR 0 2
54579: PUSH
54580: LD_INT 2
54582: ARRAY
54583: PPUSH
54584: LD_VAR 0 2
54588: PUSH
54589: LD_INT 3
54591: ARRAY
54592: PPUSH
54593: LD_VAR 0 2
54597: PUSH
54598: LD_INT 4
54600: ARRAY
54601: PPUSH
54602: CALL_OW 449
54606: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54607: LD_ADDR_VAR 0 3
54611: PUSH
54612: LD_VAR 0 5
54616: PPUSH
54617: LD_INT 1
54619: PPUSH
54620: CALL_OW 275
54624: PUSH
54625: LD_VAR 0 4
54629: PUSH
54630: LD_INT 1
54632: ARRAY
54633: GREATEREQUAL
54634: IFFALSE 54660
54636: PUSH
54637: LD_VAR 0 5
54641: PPUSH
54642: LD_INT 2
54644: PPUSH
54645: CALL_OW 275
54649: PUSH
54650: LD_VAR 0 4
54654: PUSH
54655: LD_INT 2
54657: ARRAY
54658: GREATEREQUAL
54659: AND
54660: IFFALSE 54686
54662: PUSH
54663: LD_VAR 0 5
54667: PPUSH
54668: LD_INT 3
54670: PPUSH
54671: CALL_OW 275
54675: PUSH
54676: LD_VAR 0 4
54680: PUSH
54681: LD_INT 3
54683: ARRAY
54684: GREATEREQUAL
54685: AND
54686: ST_TO_ADDR
// end ;
54687: LD_VAR 0 3
54691: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54692: LD_INT 0
54694: PPUSH
54695: PPUSH
54696: PPUSH
54697: PPUSH
// pom := GetBase ( building ) ;
54698: LD_ADDR_VAR 0 3
54702: PUSH
54703: LD_VAR 0 1
54707: PPUSH
54708: CALL_OW 274
54712: ST_TO_ADDR
// if not pom then
54713: LD_VAR 0 3
54717: NOT
54718: IFFALSE 54722
// exit ;
54720: GO 54896
// btype := GetBType ( building ) ;
54722: LD_ADDR_VAR 0 5
54726: PUSH
54727: LD_VAR 0 1
54731: PPUSH
54732: CALL_OW 266
54736: ST_TO_ADDR
// if btype = b_armoury then
54737: LD_VAR 0 5
54741: PUSH
54742: LD_INT 4
54744: EQUAL
54745: IFFALSE 54755
// btype := b_barracks ;
54747: LD_ADDR_VAR 0 5
54751: PUSH
54752: LD_INT 5
54754: ST_TO_ADDR
// if btype = b_depot then
54755: LD_VAR 0 5
54759: PUSH
54760: LD_INT 0
54762: EQUAL
54763: IFFALSE 54773
// btype := b_warehouse ;
54765: LD_ADDR_VAR 0 5
54769: PUSH
54770: LD_INT 1
54772: ST_TO_ADDR
// if btype = b_workshop then
54773: LD_VAR 0 5
54777: PUSH
54778: LD_INT 2
54780: EQUAL
54781: IFFALSE 54791
// btype := b_factory ;
54783: LD_ADDR_VAR 0 5
54787: PUSH
54788: LD_INT 3
54790: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54791: LD_ADDR_VAR 0 4
54795: PUSH
54796: LD_VAR 0 5
54800: PPUSH
54801: LD_VAR 0 1
54805: PPUSH
54806: CALL_OW 248
54810: PPUSH
54811: CALL_OW 450
54815: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54816: LD_ADDR_VAR 0 2
54820: PUSH
54821: LD_VAR 0 3
54825: PPUSH
54826: LD_INT 1
54828: PPUSH
54829: CALL_OW 275
54833: PUSH
54834: LD_VAR 0 4
54838: PUSH
54839: LD_INT 1
54841: ARRAY
54842: GREATEREQUAL
54843: IFFALSE 54869
54845: PUSH
54846: LD_VAR 0 3
54850: PPUSH
54851: LD_INT 2
54853: PPUSH
54854: CALL_OW 275
54858: PUSH
54859: LD_VAR 0 4
54863: PUSH
54864: LD_INT 2
54866: ARRAY
54867: GREATEREQUAL
54868: AND
54869: IFFALSE 54895
54871: PUSH
54872: LD_VAR 0 3
54876: PPUSH
54877: LD_INT 3
54879: PPUSH
54880: CALL_OW 275
54884: PUSH
54885: LD_VAR 0 4
54889: PUSH
54890: LD_INT 3
54892: ARRAY
54893: GREATEREQUAL
54894: AND
54895: ST_TO_ADDR
// end ;
54896: LD_VAR 0 2
54900: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54901: LD_INT 0
54903: PPUSH
54904: PPUSH
54905: PPUSH
// pom := GetBase ( building ) ;
54906: LD_ADDR_VAR 0 4
54910: PUSH
54911: LD_VAR 0 1
54915: PPUSH
54916: CALL_OW 274
54920: ST_TO_ADDR
// if not pom then
54921: LD_VAR 0 4
54925: NOT
54926: IFFALSE 54930
// exit ;
54928: GO 55035
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54930: LD_ADDR_VAR 0 5
54934: PUSH
54935: LD_VAR 0 2
54939: PPUSH
54940: LD_VAR 0 1
54944: PPUSH
54945: CALL_OW 248
54949: PPUSH
54950: CALL_OW 450
54954: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54955: LD_ADDR_VAR 0 3
54959: PUSH
54960: LD_VAR 0 4
54964: PPUSH
54965: LD_INT 1
54967: PPUSH
54968: CALL_OW 275
54972: PUSH
54973: LD_VAR 0 5
54977: PUSH
54978: LD_INT 1
54980: ARRAY
54981: GREATEREQUAL
54982: IFFALSE 55008
54984: PUSH
54985: LD_VAR 0 4
54989: PPUSH
54990: LD_INT 2
54992: PPUSH
54993: CALL_OW 275
54997: PUSH
54998: LD_VAR 0 5
55002: PUSH
55003: LD_INT 2
55005: ARRAY
55006: GREATEREQUAL
55007: AND
55008: IFFALSE 55034
55010: PUSH
55011: LD_VAR 0 4
55015: PPUSH
55016: LD_INT 3
55018: PPUSH
55019: CALL_OW 275
55023: PUSH
55024: LD_VAR 0 5
55028: PUSH
55029: LD_INT 3
55031: ARRAY
55032: GREATEREQUAL
55033: AND
55034: ST_TO_ADDR
// end ;
55035: LD_VAR 0 3
55039: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55040: LD_INT 0
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
55049: PPUSH
55050: PPUSH
55051: PPUSH
55052: PPUSH
// result := false ;
55053: LD_ADDR_VAR 0 8
55057: PUSH
55058: LD_INT 0
55060: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55061: LD_VAR 0 5
55065: NOT
55066: IFTRUE 55075
55068: PUSH
55069: LD_VAR 0 1
55073: NOT
55074: OR
55075: IFTRUE 55084
55077: PUSH
55078: LD_VAR 0 2
55082: NOT
55083: OR
55084: IFTRUE 55093
55086: PUSH
55087: LD_VAR 0 3
55091: NOT
55092: OR
55093: IFFALSE 55097
// exit ;
55095: GO 55923
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55097: LD_ADDR_VAR 0 14
55101: PUSH
55102: LD_VAR 0 1
55106: PPUSH
55107: LD_VAR 0 2
55111: PPUSH
55112: LD_VAR 0 3
55116: PPUSH
55117: LD_VAR 0 4
55121: PPUSH
55122: LD_VAR 0 5
55126: PUSH
55127: LD_INT 1
55129: ARRAY
55130: PPUSH
55131: CALL_OW 248
55135: PPUSH
55136: LD_INT 0
55138: PPUSH
55139: CALL 57204 0 6
55143: ST_TO_ADDR
// if not hexes then
55144: LD_VAR 0 14
55148: NOT
55149: IFFALSE 55153
// exit ;
55151: GO 55923
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55153: LD_ADDR_VAR 0 17
55157: PUSH
55158: LD_VAR 0 5
55162: PPUSH
55163: LD_INT 22
55165: PUSH
55166: LD_VAR 0 13
55170: PPUSH
55171: CALL_OW 255
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 30
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 30
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PPUSH
55212: CALL_OW 72
55216: ST_TO_ADDR
// for i = 1 to hexes do
55217: LD_ADDR_VAR 0 9
55221: PUSH
55222: DOUBLE
55223: LD_INT 1
55225: DEC
55226: ST_TO_ADDR
55227: LD_VAR 0 14
55231: PUSH
55232: FOR_TO
55233: IFFALSE 55921
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55235: LD_ADDR_VAR 0 13
55239: PUSH
55240: LD_VAR 0 14
55244: PUSH
55245: LD_VAR 0 9
55249: ARRAY
55250: PUSH
55251: LD_INT 1
55253: ARRAY
55254: PPUSH
55255: LD_VAR 0 14
55259: PUSH
55260: LD_VAR 0 9
55264: ARRAY
55265: PUSH
55266: LD_INT 2
55268: ARRAY
55269: PPUSH
55270: CALL_OW 428
55274: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55275: LD_VAR 0 14
55279: PUSH
55280: LD_VAR 0 9
55284: ARRAY
55285: PUSH
55286: LD_INT 1
55288: ARRAY
55289: PPUSH
55290: LD_VAR 0 14
55294: PUSH
55295: LD_VAR 0 9
55299: ARRAY
55300: PUSH
55301: LD_INT 2
55303: ARRAY
55304: PPUSH
55305: CALL_OW 351
55309: IFTRUE 55348
55311: PUSH
55312: LD_VAR 0 14
55316: PUSH
55317: LD_VAR 0 9
55321: ARRAY
55322: PUSH
55323: LD_INT 1
55325: ARRAY
55326: PPUSH
55327: LD_VAR 0 14
55331: PUSH
55332: LD_VAR 0 9
55336: ARRAY
55337: PUSH
55338: LD_INT 2
55340: ARRAY
55341: PPUSH
55342: CALL_OW 488
55346: NOT
55347: OR
55348: IFTRUE 55365
55350: PUSH
55351: LD_VAR 0 13
55355: PPUSH
55356: CALL_OW 247
55360: PUSH
55361: LD_INT 3
55363: EQUAL
55364: OR
55365: IFFALSE 55371
// exit ;
55367: POP
55368: POP
55369: GO 55923
// if not tmp then
55371: LD_VAR 0 13
55375: NOT
55376: IFFALSE 55380
// continue ;
55378: GO 55232
// result := true ;
55380: LD_ADDR_VAR 0 8
55384: PUSH
55385: LD_INT 1
55387: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55388: LD_VAR 0 6
55392: IFFALSE 55409
55394: PUSH
55395: LD_VAR 0 13
55399: PPUSH
55400: CALL_OW 247
55404: PUSH
55405: LD_INT 2
55407: EQUAL
55408: AND
55409: IFFALSE 55426
55411: PUSH
55412: LD_VAR 0 13
55416: PPUSH
55417: CALL_OW 263
55421: PUSH
55422: LD_INT 1
55424: EQUAL
55425: AND
55426: IFFALSE 55590
// begin if IsDrivenBy ( tmp ) then
55428: LD_VAR 0 13
55432: PPUSH
55433: CALL_OW 311
55437: IFFALSE 55441
// continue ;
55439: GO 55232
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55441: LD_VAR 0 6
55445: PPUSH
55446: LD_INT 3
55448: PUSH
55449: LD_INT 60
55451: PUSH
55452: EMPTY
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: LD_INT 55
55464: PUSH
55465: EMPTY
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PPUSH
55476: CALL_OW 72
55480: IFFALSE 55588
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55482: LD_ADDR_VAR 0 18
55486: PUSH
55487: LD_VAR 0 6
55491: PPUSH
55492: LD_INT 3
55494: PUSH
55495: LD_INT 60
55497: PUSH
55498: EMPTY
55499: LIST
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 55
55510: PUSH
55511: EMPTY
55512: LIST
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PPUSH
55522: CALL_OW 72
55526: PUSH
55527: LD_INT 1
55529: ARRAY
55530: ST_TO_ADDR
// if IsInUnit ( driver ) then
55531: LD_VAR 0 18
55535: PPUSH
55536: CALL_OW 310
55540: IFFALSE 55551
// ComExit ( driver ) ;
55542: LD_VAR 0 18
55546: PPUSH
55547: CALL 81204 0 1
// AddComEnterUnit ( driver , tmp ) ;
55551: LD_VAR 0 18
55555: PPUSH
55556: LD_VAR 0 13
55560: PPUSH
55561: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55565: LD_VAR 0 18
55569: PPUSH
55570: LD_VAR 0 7
55574: PPUSH
55575: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55579: LD_VAR 0 18
55583: PPUSH
55584: CALL_OW 181
// end ; continue ;
55588: GO 55232
// end ; if not cleaners or not tmp in cleaners then
55590: LD_VAR 0 6
55594: NOT
55595: IFTRUE 55610
55597: PUSH
55598: LD_VAR 0 13
55602: PUSH
55603: LD_VAR 0 6
55607: IN
55608: NOT
55609: OR
55610: IFFALSE 55919
// begin if dep then
55612: LD_VAR 0 17
55616: IFFALSE 55752
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55618: LD_ADDR_VAR 0 16
55622: PUSH
55623: LD_VAR 0 17
55627: PUSH
55628: LD_INT 1
55630: ARRAY
55631: PPUSH
55632: CALL_OW 250
55636: PPUSH
55637: LD_VAR 0 17
55641: PUSH
55642: LD_INT 1
55644: ARRAY
55645: PPUSH
55646: CALL_OW 254
55650: PPUSH
55651: LD_INT 5
55653: PPUSH
55654: CALL_OW 272
55658: PUSH
55659: LD_VAR 0 17
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PPUSH
55668: CALL_OW 251
55672: PPUSH
55673: LD_VAR 0 17
55677: PUSH
55678: LD_INT 1
55680: ARRAY
55681: PPUSH
55682: CALL_OW 254
55686: PPUSH
55687: LD_INT 5
55689: PPUSH
55690: CALL_OW 273
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55699: LD_VAR 0 16
55703: PUSH
55704: LD_INT 1
55706: ARRAY
55707: PPUSH
55708: LD_VAR 0 16
55712: PUSH
55713: LD_INT 2
55715: ARRAY
55716: PPUSH
55717: CALL_OW 488
55721: IFFALSE 55752
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55723: LD_VAR 0 13
55727: PPUSH
55728: LD_VAR 0 16
55732: PUSH
55733: LD_INT 1
55735: ARRAY
55736: PPUSH
55737: LD_VAR 0 16
55741: PUSH
55742: LD_INT 2
55744: ARRAY
55745: PPUSH
55746: CALL_OW 111
// continue ;
55750: GO 55232
// end ; end ; r := GetDir ( tmp ) ;
55752: LD_ADDR_VAR 0 15
55756: PUSH
55757: LD_VAR 0 13
55761: PPUSH
55762: CALL_OW 254
55766: ST_TO_ADDR
// if r = 5 then
55767: LD_VAR 0 15
55771: PUSH
55772: LD_INT 5
55774: EQUAL
55775: IFFALSE 55785
// r := 0 ;
55777: LD_ADDR_VAR 0 15
55781: PUSH
55782: LD_INT 0
55784: ST_TO_ADDR
// for j = r to 5 do
55785: LD_ADDR_VAR 0 10
55789: PUSH
55790: DOUBLE
55791: LD_VAR 0 15
55795: DEC
55796: ST_TO_ADDR
55797: LD_INT 5
55799: PUSH
55800: FOR_TO
55801: IFFALSE 55917
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55803: LD_ADDR_VAR 0 11
55807: PUSH
55808: LD_VAR 0 13
55812: PPUSH
55813: CALL_OW 250
55817: PPUSH
55818: LD_VAR 0 10
55822: PPUSH
55823: LD_INT 2
55825: PPUSH
55826: CALL_OW 272
55830: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55831: LD_ADDR_VAR 0 12
55835: PUSH
55836: LD_VAR 0 13
55840: PPUSH
55841: CALL_OW 251
55845: PPUSH
55846: LD_VAR 0 10
55850: PPUSH
55851: LD_INT 2
55853: PPUSH
55854: CALL_OW 273
55858: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55859: LD_VAR 0 11
55863: PPUSH
55864: LD_VAR 0 12
55868: PPUSH
55869: CALL_OW 488
55873: IFFALSE 55892
55875: PUSH
55876: LD_VAR 0 11
55880: PPUSH
55881: LD_VAR 0 12
55885: PPUSH
55886: CALL_OW 428
55890: NOT
55891: AND
55892: IFFALSE 55915
// begin ComMoveXY ( tmp , _x , _y ) ;
55894: LD_VAR 0 13
55898: PPUSH
55899: LD_VAR 0 11
55903: PPUSH
55904: LD_VAR 0 12
55908: PPUSH
55909: CALL_OW 111
// break ;
55913: GO 55917
// end ; end ;
55915: GO 55800
55917: POP
55918: POP
// end ; end ;
55919: GO 55232
55921: POP
55922: POP
// end ;
55923: LD_VAR 0 8
55927: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55928: LD_INT 0
55930: PPUSH
// result := true ;
55931: LD_ADDR_VAR 0 3
55935: PUSH
55936: LD_INT 1
55938: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55939: LD_VAR 0 2
55943: PUSH
55944: LD_INT 24
55946: DOUBLE
55947: EQUAL
55948: IFTRUE 55958
55950: LD_INT 33
55952: DOUBLE
55953: EQUAL
55954: IFTRUE 55958
55956: GO 55983
55958: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55959: LD_ADDR_VAR 0 3
55963: PUSH
55964: LD_INT 32
55966: PPUSH
55967: LD_VAR 0 1
55971: PPUSH
55972: CALL_OW 321
55976: PUSH
55977: LD_INT 2
55979: EQUAL
55980: ST_TO_ADDR
55981: GO 56299
55983: LD_INT 20
55985: DOUBLE
55986: EQUAL
55987: IFTRUE 55991
55989: GO 56016
55991: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55992: LD_ADDR_VAR 0 3
55996: PUSH
55997: LD_INT 6
55999: PPUSH
56000: LD_VAR 0 1
56004: PPUSH
56005: CALL_OW 321
56009: PUSH
56010: LD_INT 2
56012: EQUAL
56013: ST_TO_ADDR
56014: GO 56299
56016: LD_INT 22
56018: DOUBLE
56019: EQUAL
56020: IFTRUE 56030
56022: LD_INT 36
56024: DOUBLE
56025: EQUAL
56026: IFTRUE 56030
56028: GO 56055
56030: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56031: LD_ADDR_VAR 0 3
56035: PUSH
56036: LD_INT 15
56038: PPUSH
56039: LD_VAR 0 1
56043: PPUSH
56044: CALL_OW 321
56048: PUSH
56049: LD_INT 2
56051: EQUAL
56052: ST_TO_ADDR
56053: GO 56299
56055: LD_INT 30
56057: DOUBLE
56058: EQUAL
56059: IFTRUE 56063
56061: GO 56088
56063: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56064: LD_ADDR_VAR 0 3
56068: PUSH
56069: LD_INT 20
56071: PPUSH
56072: LD_VAR 0 1
56076: PPUSH
56077: CALL_OW 321
56081: PUSH
56082: LD_INT 2
56084: EQUAL
56085: ST_TO_ADDR
56086: GO 56299
56088: LD_INT 28
56090: DOUBLE
56091: EQUAL
56092: IFTRUE 56102
56094: LD_INT 21
56096: DOUBLE
56097: EQUAL
56098: IFTRUE 56102
56100: GO 56127
56102: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56103: LD_ADDR_VAR 0 3
56107: PUSH
56108: LD_INT 21
56110: PPUSH
56111: LD_VAR 0 1
56115: PPUSH
56116: CALL_OW 321
56120: PUSH
56121: LD_INT 2
56123: EQUAL
56124: ST_TO_ADDR
56125: GO 56299
56127: LD_INT 16
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56135
56133: GO 56160
56135: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56136: LD_ADDR_VAR 0 3
56140: PUSH
56141: LD_INT 84
56143: PPUSH
56144: LD_VAR 0 1
56148: PPUSH
56149: CALL_OW 321
56153: PUSH
56154: LD_INT 2
56156: EQUAL
56157: ST_TO_ADDR
56158: GO 56299
56160: LD_INT 19
56162: DOUBLE
56163: EQUAL
56164: IFTRUE 56174
56166: LD_INT 23
56168: DOUBLE
56169: EQUAL
56170: IFTRUE 56174
56172: GO 56199
56174: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56175: LD_ADDR_VAR 0 3
56179: PUSH
56180: LD_INT 83
56182: PPUSH
56183: LD_VAR 0 1
56187: PPUSH
56188: CALL_OW 321
56192: PUSH
56193: LD_INT 2
56195: EQUAL
56196: ST_TO_ADDR
56197: GO 56299
56199: LD_INT 17
56201: DOUBLE
56202: EQUAL
56203: IFTRUE 56207
56205: GO 56232
56207: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56208: LD_ADDR_VAR 0 3
56212: PUSH
56213: LD_INT 39
56215: PPUSH
56216: LD_VAR 0 1
56220: PPUSH
56221: CALL_OW 321
56225: PUSH
56226: LD_INT 2
56228: EQUAL
56229: ST_TO_ADDR
56230: GO 56299
56232: LD_INT 18
56234: DOUBLE
56235: EQUAL
56236: IFTRUE 56240
56238: GO 56265
56240: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56241: LD_ADDR_VAR 0 3
56245: PUSH
56246: LD_INT 40
56248: PPUSH
56249: LD_VAR 0 1
56253: PPUSH
56254: CALL_OW 321
56258: PUSH
56259: LD_INT 2
56261: EQUAL
56262: ST_TO_ADDR
56263: GO 56299
56265: LD_INT 27
56267: DOUBLE
56268: EQUAL
56269: IFTRUE 56273
56271: GO 56298
56273: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56274: LD_ADDR_VAR 0 3
56278: PUSH
56279: LD_INT 35
56281: PPUSH
56282: LD_VAR 0 1
56286: PPUSH
56287: CALL_OW 321
56291: PUSH
56292: LD_INT 2
56294: EQUAL
56295: ST_TO_ADDR
56296: GO 56299
56298: POP
// end ;
56299: LD_VAR 0 3
56303: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56304: LD_INT 0
56306: PPUSH
56307: PPUSH
56308: PPUSH
56309: PPUSH
56310: PPUSH
56311: PPUSH
56312: PPUSH
56313: PPUSH
56314: PPUSH
56315: PPUSH
56316: PPUSH
// result := false ;
56317: LD_ADDR_VAR 0 6
56321: PUSH
56322: LD_INT 0
56324: ST_TO_ADDR
// if btype = b_depot then
56325: LD_VAR 0 2
56329: PUSH
56330: LD_INT 0
56332: EQUAL
56333: IFFALSE 56345
// begin result := true ;
56335: LD_ADDR_VAR 0 6
56339: PUSH
56340: LD_INT 1
56342: ST_TO_ADDR
// exit ;
56343: GO 57199
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56345: LD_VAR 0 1
56349: NOT
56350: IFTRUE 56375
56352: PUSH
56353: LD_VAR 0 1
56357: PPUSH
56358: CALL_OW 266
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: IN
56373: NOT
56374: OR
56375: IFTRUE 56384
56377: PUSH
56378: LD_VAR 0 2
56382: NOT
56383: OR
56384: IFTRUE 56420
56386: PUSH
56387: LD_VAR 0 5
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: LD_INT 5
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: IN
56418: NOT
56419: OR
56420: IFTRUE 56439
56422: PUSH
56423: LD_VAR 0 3
56427: PPUSH
56428: LD_VAR 0 4
56432: PPUSH
56433: CALL_OW 488
56437: NOT
56438: OR
56439: IFFALSE 56443
// exit ;
56441: GO 57199
// side := GetSide ( depot ) ;
56443: LD_ADDR_VAR 0 9
56447: PUSH
56448: LD_VAR 0 1
56452: PPUSH
56453: CALL_OW 255
56457: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56458: LD_VAR 0 9
56462: PPUSH
56463: LD_VAR 0 2
56467: PPUSH
56468: CALL 55928 0 2
56472: NOT
56473: IFFALSE 56477
// exit ;
56475: GO 57199
// pom := GetBase ( depot ) ;
56477: LD_ADDR_VAR 0 10
56481: PUSH
56482: LD_VAR 0 1
56486: PPUSH
56487: CALL_OW 274
56491: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56492: LD_ADDR_VAR 0 11
56496: PUSH
56497: LD_VAR 0 2
56501: PPUSH
56502: LD_VAR 0 1
56506: PPUSH
56507: CALL_OW 248
56511: PPUSH
56512: CALL_OW 450
56516: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56517: LD_VAR 0 10
56521: PPUSH
56522: LD_INT 1
56524: PPUSH
56525: CALL_OW 275
56529: PUSH
56530: LD_VAR 0 11
56534: PUSH
56535: LD_INT 1
56537: ARRAY
56538: GREATEREQUAL
56539: IFFALSE 56565
56541: PUSH
56542: LD_VAR 0 10
56546: PPUSH
56547: LD_INT 2
56549: PPUSH
56550: CALL_OW 275
56554: PUSH
56555: LD_VAR 0 11
56559: PUSH
56560: LD_INT 2
56562: ARRAY
56563: GREATEREQUAL
56564: AND
56565: IFFALSE 56591
56567: PUSH
56568: LD_VAR 0 10
56572: PPUSH
56573: LD_INT 3
56575: PPUSH
56576: CALL_OW 275
56580: PUSH
56581: LD_VAR 0 11
56585: PUSH
56586: LD_INT 3
56588: ARRAY
56589: GREATEREQUAL
56590: AND
56591: NOT
56592: IFFALSE 56596
// exit ;
56594: GO 57199
// if GetBType ( depot ) = b_depot then
56596: LD_VAR 0 1
56600: PPUSH
56601: CALL_OW 266
56605: PUSH
56606: LD_INT 0
56608: EQUAL
56609: IFFALSE 56621
// dist := 28 else
56611: LD_ADDR_VAR 0 14
56615: PUSH
56616: LD_INT 28
56618: ST_TO_ADDR
56619: GO 56629
// dist := 36 ;
56621: LD_ADDR_VAR 0 14
56625: PUSH
56626: LD_INT 36
56628: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56629: LD_VAR 0 1
56633: PPUSH
56634: LD_VAR 0 3
56638: PPUSH
56639: LD_VAR 0 4
56643: PPUSH
56644: CALL_OW 297
56648: PUSH
56649: LD_VAR 0 14
56653: GREATER
56654: IFFALSE 56658
// exit ;
56656: GO 57199
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56658: LD_ADDR_VAR 0 12
56662: PUSH
56663: LD_VAR 0 2
56667: PPUSH
56668: LD_VAR 0 3
56672: PPUSH
56673: LD_VAR 0 4
56677: PPUSH
56678: LD_VAR 0 5
56682: PPUSH
56683: LD_VAR 0 1
56687: PPUSH
56688: CALL_OW 248
56692: PPUSH
56693: LD_INT 0
56695: PPUSH
56696: CALL 57204 0 6
56700: ST_TO_ADDR
// if not hexes then
56701: LD_VAR 0 12
56705: NOT
56706: IFFALSE 56710
// exit ;
56708: GO 57199
// hex := GetHexInfo ( x , y ) ;
56710: LD_ADDR_VAR 0 15
56714: PUSH
56715: LD_VAR 0 3
56719: PPUSH
56720: LD_VAR 0 4
56724: PPUSH
56725: CALL_OW 546
56729: ST_TO_ADDR
// if hex [ 1 ] then
56730: LD_VAR 0 15
56734: PUSH
56735: LD_INT 1
56737: ARRAY
56738: IFFALSE 56742
// exit ;
56740: GO 57199
// height := hex [ 2 ] ;
56742: LD_ADDR_VAR 0 13
56746: PUSH
56747: LD_VAR 0 15
56751: PUSH
56752: LD_INT 2
56754: ARRAY
56755: ST_TO_ADDR
// for i = 1 to hexes do
56756: LD_ADDR_VAR 0 7
56760: PUSH
56761: DOUBLE
56762: LD_INT 1
56764: DEC
56765: ST_TO_ADDR
56766: LD_VAR 0 12
56770: PUSH
56771: FOR_TO
56772: IFFALSE 57116
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56774: LD_VAR 0 12
56778: PUSH
56779: LD_VAR 0 7
56783: ARRAY
56784: PUSH
56785: LD_INT 1
56787: ARRAY
56788: PPUSH
56789: LD_VAR 0 12
56793: PUSH
56794: LD_VAR 0 7
56798: ARRAY
56799: PUSH
56800: LD_INT 2
56802: ARRAY
56803: PPUSH
56804: CALL_OW 488
56808: NOT
56809: IFTRUE 56851
56811: PUSH
56812: LD_VAR 0 12
56816: PUSH
56817: LD_VAR 0 7
56821: ARRAY
56822: PUSH
56823: LD_INT 1
56825: ARRAY
56826: PPUSH
56827: LD_VAR 0 12
56831: PUSH
56832: LD_VAR 0 7
56836: ARRAY
56837: PUSH
56838: LD_INT 2
56840: ARRAY
56841: PPUSH
56842: CALL_OW 428
56846: PUSH
56847: LD_INT 0
56849: GREATER
56850: OR
56851: IFTRUE 56889
56853: PUSH
56854: LD_VAR 0 12
56858: PUSH
56859: LD_VAR 0 7
56863: ARRAY
56864: PUSH
56865: LD_INT 1
56867: ARRAY
56868: PPUSH
56869: LD_VAR 0 12
56873: PUSH
56874: LD_VAR 0 7
56878: ARRAY
56879: PUSH
56880: LD_INT 2
56882: ARRAY
56883: PPUSH
56884: CALL_OW 351
56888: OR
56889: IFFALSE 56895
// exit ;
56891: POP
56892: POP
56893: GO 57199
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56895: LD_ADDR_VAR 0 8
56899: PUSH
56900: LD_VAR 0 12
56904: PUSH
56905: LD_VAR 0 7
56909: ARRAY
56910: PUSH
56911: LD_INT 1
56913: ARRAY
56914: PPUSH
56915: LD_VAR 0 12
56919: PUSH
56920: LD_VAR 0 7
56924: ARRAY
56925: PUSH
56926: LD_INT 2
56928: ARRAY
56929: PPUSH
56930: CALL_OW 546
56934: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56935: LD_VAR 0 8
56939: PUSH
56940: LD_INT 1
56942: ARRAY
56943: IFTRUE 56965
56945: PUSH
56946: LD_VAR 0 8
56950: PUSH
56951: LD_INT 2
56953: ARRAY
56954: PUSH
56955: LD_VAR 0 13
56959: PUSH
56960: LD_INT 2
56962: PLUS
56963: GREATER
56964: OR
56965: IFTRUE 56987
56967: PUSH
56968: LD_VAR 0 8
56972: PUSH
56973: LD_INT 2
56975: ARRAY
56976: PUSH
56977: LD_VAR 0 13
56981: PUSH
56982: LD_INT 2
56984: MINUS
56985: LESS
56986: OR
56987: IFTRUE 57055
56989: PUSH
56990: LD_VAR 0 8
56994: PUSH
56995: LD_INT 3
56997: ARRAY
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 8
57004: PUSH
57005: LD_INT 9
57007: PUSH
57008: LD_INT 10
57010: PUSH
57011: LD_INT 11
57013: PUSH
57014: LD_INT 12
57016: PUSH
57017: LD_INT 13
57019: PUSH
57020: LD_INT 16
57022: PUSH
57023: LD_INT 17
57025: PUSH
57026: LD_INT 18
57028: PUSH
57029: LD_INT 19
57031: PUSH
57032: LD_INT 20
57034: PUSH
57035: LD_INT 21
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: IN
57053: NOT
57054: OR
57055: IFTRUE 57068
57057: PUSH
57058: LD_VAR 0 8
57062: PUSH
57063: LD_INT 5
57065: ARRAY
57066: NOT
57067: OR
57068: IFTRUE 57108
57070: PUSH
57071: LD_VAR 0 8
57075: PUSH
57076: LD_INT 6
57078: ARRAY
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: LD_INT 7
57088: PUSH
57089: LD_INT 9
57091: PUSH
57092: LD_INT 10
57094: PUSH
57095: LD_INT 11
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: IN
57106: NOT
57107: OR
57108: IFFALSE 57114
// exit ;
57110: POP
57111: POP
57112: GO 57199
// end ;
57114: GO 56771
57116: POP
57117: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57118: LD_VAR 0 9
57122: PPUSH
57123: LD_VAR 0 3
57127: PPUSH
57128: LD_VAR 0 4
57132: PPUSH
57133: LD_INT 20
57135: PPUSH
57136: CALL 49018 0 4
57140: PUSH
57141: LD_INT 4
57143: ARRAY
57144: IFFALSE 57148
// exit ;
57146: GO 57199
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57148: LD_VAR 0 2
57152: PUSH
57153: LD_INT 29
57155: PUSH
57156: LD_INT 30
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: IN
57163: IFFALSE 57187
57165: PUSH
57166: LD_VAR 0 3
57170: PPUSH
57171: LD_VAR 0 4
57175: PPUSH
57176: LD_VAR 0 9
57180: PPUSH
57181: CALL_OW 440
57185: NOT
57186: AND
57187: IFFALSE 57191
// exit ;
57189: GO 57199
// result := true ;
57191: LD_ADDR_VAR 0 6
57195: PUSH
57196: LD_INT 1
57198: ST_TO_ADDR
// end ;
57199: LD_VAR 0 6
57203: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57204: LD_INT 0
57206: PPUSH
57207: PPUSH
57208: PPUSH
57209: PPUSH
57210: PPUSH
57211: PPUSH
57212: PPUSH
57213: PPUSH
57214: PPUSH
57215: PPUSH
57216: PPUSH
57217: PPUSH
57218: PPUSH
57219: PPUSH
57220: PPUSH
57221: PPUSH
57222: PPUSH
57223: PPUSH
57224: PPUSH
57225: PPUSH
57226: PPUSH
57227: PPUSH
57228: PPUSH
57229: PPUSH
57230: PPUSH
57231: PPUSH
57232: PPUSH
57233: PPUSH
57234: PPUSH
57235: PPUSH
57236: PPUSH
57237: PPUSH
57238: PPUSH
57239: PPUSH
57240: PPUSH
57241: PPUSH
57242: PPUSH
57243: PPUSH
57244: PPUSH
57245: PPUSH
57246: PPUSH
57247: PPUSH
57248: PPUSH
57249: PPUSH
57250: PPUSH
57251: PPUSH
57252: PPUSH
57253: PPUSH
57254: PPUSH
57255: PPUSH
57256: PPUSH
57257: PPUSH
57258: PPUSH
57259: PPUSH
57260: PPUSH
57261: PPUSH
57262: PPUSH
57263: PPUSH
// result = [ ] ;
57264: LD_ADDR_VAR 0 7
57268: PUSH
57269: EMPTY
57270: ST_TO_ADDR
// temp_list = [ ] ;
57271: LD_ADDR_VAR 0 9
57275: PUSH
57276: EMPTY
57277: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57278: LD_VAR 0 4
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: LD_INT 4
57297: PUSH
57298: LD_INT 5
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: IN
57309: NOT
57310: IFTRUE 57353
57312: PUSH
57313: LD_VAR 0 1
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: IN
57328: IFFALSE 57352
57330: PUSH
57331: LD_VAR 0 5
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: IN
57350: NOT
57351: AND
57352: OR
57353: IFFALSE 57357
// exit ;
57355: GO 75756
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57357: LD_VAR 0 1
57361: PUSH
57362: LD_INT 6
57364: PUSH
57365: LD_INT 7
57367: PUSH
57368: LD_INT 8
57370: PUSH
57371: LD_INT 13
57373: PUSH
57374: LD_INT 12
57376: PUSH
57377: LD_INT 15
57379: PUSH
57380: LD_INT 11
57382: PUSH
57383: LD_INT 14
57385: PUSH
57386: LD_INT 10
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: IN
57400: IFFALSE 57410
// btype = b_lab ;
57402: LD_ADDR_VAR 0 1
57406: PUSH
57407: LD_INT 6
57409: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57410: LD_VAR 0 6
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: IN
57429: NOT
57430: IFTRUE 57498
57432: PUSH
57433: LD_VAR 0 1
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: LD_INT 6
57452: PUSH
57453: LD_INT 36
57455: PUSH
57456: LD_INT 4
57458: PUSH
57459: LD_INT 5
57461: PUSH
57462: LD_INT 31
57464: PUSH
57465: LD_INT 32
57467: PUSH
57468: LD_INT 33
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: IN
57484: NOT
57485: IFFALSE 57497
57487: PUSH
57488: LD_VAR 0 6
57492: PUSH
57493: LD_INT 1
57495: EQUAL
57496: AND
57497: OR
57498: IFTRUE 57530
57500: PUSH
57501: LD_VAR 0 1
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: IN
57516: NOT
57517: IFFALSE 57529
57519: PUSH
57520: LD_VAR 0 6
57524: PUSH
57525: LD_INT 2
57527: EQUAL
57528: AND
57529: OR
57530: IFFALSE 57540
// mode = 0 ;
57532: LD_ADDR_VAR 0 6
57536: PUSH
57537: LD_INT 0
57539: ST_TO_ADDR
// case mode of 0 :
57540: LD_VAR 0 6
57544: PUSH
57545: LD_INT 0
57547: DOUBLE
57548: EQUAL
57549: IFTRUE 57553
57551: GO 69006
57553: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57554: LD_ADDR_VAR 0 11
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57747: LD_ADDR_VAR 0 12
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57943: LD_ADDR_VAR 0 13
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 3
58102: NEG
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58142: LD_ADDR_VAR 0 14
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58338: LD_ADDR_VAR 0 15
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58531: LD_ADDR_VAR 0 16
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58724: LD_ADDR_VAR 0 17
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58954: LD_ADDR_VAR 0 18
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: NEG
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59184: LD_ADDR_VAR 0 19
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59414: LD_ADDR_VAR 0 20
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59644: LD_ADDR_VAR 0 21
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59874: LD_ADDR_VAR 0 22
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: NEG
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60104: LD_ADDR_VAR 0 23
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60384: LD_ADDR_VAR 0 24
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 2
60560: NEG
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60660: LD_ADDR_VAR 0 25
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60934: LD_ADDR_VAR 0 26
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: NEG
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61210: LD_ADDR_VAR 0 27
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: NEG
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 3
61443: NEG
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 3
61455: NEG
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61490: LD_ADDR_VAR 0 28
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: LD_INT 2
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 3
61737: NEG
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61772: LD_ADDR_VAR 0 29
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 2
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: NEG
61963: PUSH
61964: LD_INT 3
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 3
62016: NEG
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62051: LD_ADDR_VAR 0 30
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: LD_INT 2
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 2
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 2
62228: NEG
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62329: LD_ADDR_VAR 0 31
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 2
62518: NEG
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 2
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 3
62572: NEG
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62607: LD_ADDR_VAR 0 32
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: LD_INT 2
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 2
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: LD_INT 3
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: LD_INT 2
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 3
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: LD_INT 3
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 2
62839: NEG
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 3
62850: NEG
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62885: LD_ADDR_VAR 0 33
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 2
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: NEG
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: NEG
63076: PUSH
63077: LD_INT 3
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 3
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63164: LD_ADDR_VAR 0 34
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 2
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 2
63320: NEG
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 2
63331: NEG
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: LD_INT 2
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 3
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: LD_INT 3
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 3
63409: NEG
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63444: LD_ADDR_VAR 0 35
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: LD_INT 1
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63556: LD_ADDR_VAR 0 36
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63668: LD_ADDR_VAR 0 37
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63780: LD_ADDR_VAR 0 38
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63892: LD_ADDR_VAR 0 39
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 1
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: LD_INT 2
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: PUSH
63986: LD_INT 2
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64004: LD_ADDR_VAR 0 40
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64116: LD_ADDR_VAR 0 41
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 2
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 2
64282: NEG
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 2
64294: NEG
64295: PUSH
64296: LD_INT 2
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 2
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 3
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 3
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 2
64379: NEG
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 3
64390: NEG
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 3
64401: NEG
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 3
64425: NEG
64426: PUSH
64427: LD_INT 3
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64466: LD_ADDR_VAR 0 42
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_INT 2
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 2
64591: PUSH
64592: LD_INT 2
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 2
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 2
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 2
64644: NEG
64645: PUSH
64646: LD_INT 2
64648: NEG
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: NEG
64657: PUSH
64658: LD_INT 3
64660: NEG
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 3
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 3
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: LD_INT 2
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 3
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: LD_INT 3
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 2
64722: PUSH
64723: LD_INT 3
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: LD_INT 3
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 3
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 3
64775: NEG
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64816: LD_ADDR_VAR 0 43
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 2
64982: NEG
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 2
64993: NEG
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 3
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 2
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 3
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: LD_INT 3
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: LD_INT 2
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 3
65112: NEG
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 3
65123: NEG
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65164: LD_ADDR_VAR 0 44
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: NEG
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 2
65319: NEG
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: NEG
65355: PUSH
65356: LD_INT 3
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 3
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: LD_INT 3
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: LD_INT 3
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 2
65427: NEG
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: LD_INT 0
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 3
65461: NEG
65462: PUSH
65463: LD_INT 2
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: LD_INT 3
65477: NEG
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65514: LD_ADDR_VAR 0 45
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 2
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 1
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 2
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 2
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: LD_INT 2
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 1
65669: NEG
65670: PUSH
65671: LD_INT 1
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 2
65680: NEG
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 2
65692: NEG
65693: PUSH
65694: LD_INT 2
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 2
65704: NEG
65705: PUSH
65706: LD_INT 3
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: LD_INT 3
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 3
65750: PUSH
65751: LD_INT 2
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 3
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 2
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 3
65811: NEG
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 3
65823: NEG
65824: PUSH
65825: LD_INT 3
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65864: LD_ADDR_VAR 0 46
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: LD_INT 1
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 1
65933: NEG
65934: PUSH
65935: LD_INT 1
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: LD_INT 2
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: LD_INT 2
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: LD_INT 1
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 2
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 2
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: LD_INT 2
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 2
66041: NEG
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: LD_INT 3
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: LD_INT 2
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 3
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 3
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: LD_INT 3
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 3
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: LD_INT 2
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 2
66149: NEG
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 3
66171: NEG
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66212: LD_ADDR_VAR 0 47
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 1
66293: NEG
66294: PUSH
66295: LD_INT 2
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: LD_INT 1
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66363: LD_ADDR_VAR 0 48
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 2
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 2
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 2
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66510: LD_ADDR_VAR 0 49
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: LD_INT 0
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: LD_INT 1
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 2
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 2
66612: PUSH
66613: LD_INT 1
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: LD_INT 2
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66654: LD_ADDR_VAR 0 50
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: NEG
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66798: LD_ADDR_VAR 0 51
66802: PUSH
66803: LD_INT 0
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: LD_INT 1
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: LD_INT 2
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: LD_INT 1
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 2
66910: NEG
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 2
66921: NEG
66922: PUSH
66923: LD_INT 1
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66945: LD_ADDR_VAR 0 52
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: LD_INT 2
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 2
67049: NEG
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 2
67060: NEG
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 2
67072: NEG
67073: PUSH
67074: LD_INT 2
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67096: LD_ADDR_VAR 0 53
67100: PUSH
67101: LD_INT 0
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 1
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: NEG
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: LD_INT 1
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: LD_INT 2
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: LD_INT 2
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 1
67200: PUSH
67201: LD_INT 1
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 2
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 2
67221: PUSH
67222: LD_INT 1
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: LD_INT 2
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: LD_INT 2
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: LD_INT 1
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 2
67272: NEG
67273: PUSH
67274: LD_INT 0
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: NEG
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 2
67295: NEG
67296: PUSH
67297: LD_INT 2
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67326: LD_ADDR_VAR 0 54
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: LD_INT 1
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 1
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: NEG
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 1
67407: NEG
67408: PUSH
67409: LD_INT 2
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: LD_INT 2
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 2
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 2
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 2
67461: PUSH
67462: LD_INT 2
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: PUSH
67472: LD_INT 2
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: LD_INT 1
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: LD_INT 0
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 2
67525: NEG
67526: PUSH
67527: LD_INT 2
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67556: LD_ADDR_VAR 0 55
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: LD_INT 1
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: LD_INT 1
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 1
67614: NEG
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 1
67637: NEG
67638: PUSH
67639: LD_INT 2
67641: NEG
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: LD_INT 2
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 1
67660: PUSH
67661: LD_INT 1
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 2
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 2
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: LD_INT 2
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 1
67721: NEG
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: NEG
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 2
67743: NEG
67744: PUSH
67745: LD_INT 1
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 2
67755: NEG
67756: PUSH
67757: LD_INT 2
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67786: LD_ADDR_VAR 0 56
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 1
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 1
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 1
67855: NEG
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: LD_INT 2
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: LD_INT 2
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: LD_INT 1
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 2
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 2
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 2
67921: PUSH
67922: LD_INT 2
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: LD_INT 2
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 2
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 1
67951: NEG
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 2
67962: NEG
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 2
67973: NEG
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 2
67985: NEG
67986: PUSH
67987: LD_INT 2
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68016: LD_ADDR_VAR 0 57
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 1
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 0
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 1
68074: NEG
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 1
68085: NEG
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: LD_INT 2
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: LD_INT 2
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 1
68120: PUSH
68121: LD_INT 1
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 2
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 2
68141: PUSH
68142: LD_INT 1
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 2
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: LD_INT 2
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: LD_INT 1
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 2
68192: NEG
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 2
68203: NEG
68204: PUSH
68205: LD_INT 1
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 2
68215: NEG
68216: PUSH
68217: LD_INT 2
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68246: LD_ADDR_VAR 0 58
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: LD_INT 1
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 1
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: NEG
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: LD_INT 1
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 1
68327: NEG
68328: PUSH
68329: LD_INT 2
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 0
68339: PUSH
68340: LD_INT 2
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: LD_INT 1
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 2
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 2
68371: PUSH
68372: LD_INT 1
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 2
68381: PUSH
68382: LD_INT 2
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 1
68391: PUSH
68392: LD_INT 2
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: LD_INT 2
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 1
68411: NEG
68412: PUSH
68413: LD_INT 1
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 2
68422: NEG
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 2
68433: NEG
68434: PUSH
68435: LD_INT 1
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 2
68445: NEG
68446: PUSH
68447: LD_INT 2
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68476: LD_ADDR_VAR 0 59
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 0
68524: PUSH
68525: LD_INT 1
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 1
68534: NEG
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 1
68545: NEG
68546: PUSH
68547: LD_INT 1
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68564: LD_ADDR_VAR 0 60
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 1
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 1
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 0
68612: PUSH
68613: LD_INT 1
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68652: LD_ADDR_VAR 0 61
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: LD_INT 1
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 1
68690: PUSH
68691: LD_INT 1
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: LD_INT 1
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 1
68710: NEG
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68740: LD_ADDR_VAR 0 62
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 0
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 1
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 1
68798: NEG
68799: PUSH
68800: LD_INT 0
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 1
68809: NEG
68810: PUSH
68811: LD_INT 1
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68828: LD_ADDR_VAR 0 63
68832: PUSH
68833: LD_INT 0
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: LD_INT 0
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 1
68886: NEG
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68916: LD_ADDR_VAR 0 64
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: LD_INT 0
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: LD_INT 1
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: LD_INT 1
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 1
68974: NEG
68975: PUSH
68976: LD_INT 0
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: NEG
68986: PUSH
68987: LD_INT 1
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: ST_TO_ADDR
// end ; 1 :
69004: GO 74901
69006: LD_INT 1
69008: DOUBLE
69009: EQUAL
69010: IFTRUE 69014
69012: GO 71637
69014: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69015: LD_ADDR_VAR 0 11
69019: PUSH
69020: LD_INT 1
69022: NEG
69023: PUSH
69024: LD_INT 3
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: LD_INT 3
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 1
69045: PUSH
69046: LD_INT 2
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69059: LD_ADDR_VAR 0 12
69063: PUSH
69064: LD_INT 2
69066: PUSH
69067: LD_INT 1
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 3
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 3
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: LIST
69099: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69100: LD_ADDR_VAR 0 13
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: PUSH
69118: LD_INT 3
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 2
69127: PUSH
69128: LD_INT 3
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: LIST
69139: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69140: LD_ADDR_VAR 0 14
69144: PUSH
69145: LD_INT 1
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 1
69167: NEG
69168: PUSH
69169: LD_INT 2
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: LIST
69180: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69181: LD_ADDR_VAR 0 15
69185: PUSH
69186: LD_INT 2
69188: NEG
69189: PUSH
69190: LD_INT 1
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 3
69199: NEG
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 3
69210: NEG
69211: PUSH
69212: LD_INT 1
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: LIST
69224: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69225: LD_ADDR_VAR 0 16
69229: PUSH
69230: LD_INT 2
69232: NEG
69233: PUSH
69234: LD_INT 3
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: NEG
69245: PUSH
69246: LD_INT 2
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 3
69256: NEG
69257: PUSH
69258: LD_INT 3
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: LIST
69270: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69271: LD_ADDR_VAR 0 17
69275: PUSH
69276: LD_INT 1
69278: NEG
69279: PUSH
69280: LD_INT 3
69282: NEG
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 3
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 1
69301: PUSH
69302: LD_INT 2
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: LIST
69314: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69315: LD_ADDR_VAR 0 18
69319: PUSH
69320: LD_INT 2
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 3
69333: PUSH
69334: LD_INT 0
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 3
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: LIST
69355: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69356: LD_ADDR_VAR 0 19
69360: PUSH
69361: LD_INT 3
69363: PUSH
69364: LD_INT 2
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: PUSH
69374: LD_INT 3
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: LD_INT 3
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: LIST
69395: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69396: LD_ADDR_VAR 0 20
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: LD_INT 3
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: PUSH
69425: LD_INT 2
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: LIST
69436: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69437: LD_ADDR_VAR 0 21
69441: PUSH
69442: LD_INT 2
69444: NEG
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 3
69455: NEG
69456: PUSH
69457: LD_INT 0
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 3
69466: NEG
69467: PUSH
69468: LD_INT 1
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: LIST
69480: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69481: LD_ADDR_VAR 0 22
69485: PUSH
69486: LD_INT 2
69488: NEG
69489: PUSH
69490: LD_INT 3
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 3
69500: NEG
69501: PUSH
69502: LD_INT 2
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 3
69512: NEG
69513: PUSH
69514: LD_INT 3
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: LIST
69526: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69527: LD_ADDR_VAR 0 23
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: LD_INT 3
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: LD_INT 4
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: PUSH
69558: LD_INT 3
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69571: LD_ADDR_VAR 0 24
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: LD_INT 0
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 4
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: LIST
69611: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69612: LD_ADDR_VAR 0 25
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: LD_INT 3
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 4
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 3
69639: PUSH
69640: LD_INT 4
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: LIST
69651: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69652: LD_ADDR_VAR 0 26
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: LD_INT 3
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 4
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: NEG
69680: PUSH
69681: LD_INT 3
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: LIST
69692: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69693: LD_ADDR_VAR 0 27
69697: PUSH
69698: LD_INT 3
69700: NEG
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 3
69711: NEG
69712: PUSH
69713: LD_INT 1
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 4
69722: NEG
69723: PUSH
69724: LD_INT 1
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: LIST
69736: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69737: LD_ADDR_VAR 0 28
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: LD_INT 3
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 3
69756: NEG
69757: PUSH
69758: LD_INT 4
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 4
69768: NEG
69769: PUSH
69770: LD_INT 3
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: LIST
69782: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69783: LD_ADDR_VAR 0 29
69787: PUSH
69788: LD_INT 1
69790: NEG
69791: PUSH
69792: LD_INT 3
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: LD_INT 3
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 1
69813: PUSH
69814: LD_INT 2
69816: NEG
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: PUSH
69826: LD_INT 4
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: LD_INT 4
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 1
69847: PUSH
69848: LD_INT 3
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: LD_INT 5
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: LD_INT 5
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 1
69881: PUSH
69882: LD_INT 4
69884: NEG
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 1
69892: NEG
69893: PUSH
69894: LD_INT 6
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: LD_INT 6
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 1
69915: PUSH
69916: LD_INT 5
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69938: LD_ADDR_VAR 0 30
69942: PUSH
69943: LD_INT 2
69945: PUSH
69946: LD_INT 1
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 3
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 3
69966: PUSH
69967: LD_INT 1
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 3
69976: PUSH
69977: LD_INT 1
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 4
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: LD_INT 1
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 4
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 5
70018: PUSH
70019: LD_INT 0
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 5
70028: PUSH
70029: LD_INT 1
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 5
70038: PUSH
70039: LD_INT 1
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 6
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 6
70059: PUSH
70060: LD_INT 1
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70081: LD_ADDR_VAR 0 31
70085: PUSH
70086: LD_INT 3
70088: PUSH
70089: LD_INT 2
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: LD_INT 3
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 2
70108: PUSH
70109: LD_INT 3
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 4
70118: PUSH
70119: LD_INT 3
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: LD_INT 4
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 5
70148: PUSH
70149: LD_INT 4
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 5
70158: PUSH
70159: LD_INT 5
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 4
70168: PUSH
70169: LD_INT 5
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 6
70178: PUSH
70179: LD_INT 5
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 6
70188: PUSH
70189: LD_INT 6
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 5
70198: PUSH
70199: LD_INT 6
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70220: LD_ADDR_VAR 0 32
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: LD_INT 3
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 1
70247: NEG
70248: PUSH
70249: LD_INT 2
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 1
70258: PUSH
70259: LD_INT 4
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: LD_INT 4
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 1
70278: NEG
70279: PUSH
70280: LD_INT 3
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 1
70289: PUSH
70290: LD_INT 5
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 0
70299: PUSH
70300: LD_INT 5
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 1
70309: NEG
70310: PUSH
70311: LD_INT 4
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 1
70320: PUSH
70321: LD_INT 6
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 6
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 1
70340: NEG
70341: PUSH
70342: LD_INT 5
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70363: LD_ADDR_VAR 0 33
70367: PUSH
70368: LD_INT 2
70370: NEG
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 3
70381: NEG
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 3
70392: NEG
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 3
70404: NEG
70405: PUSH
70406: LD_INT 1
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 4
70415: NEG
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 4
70426: NEG
70427: PUSH
70428: LD_INT 1
70430: NEG
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 4
70438: NEG
70439: PUSH
70440: LD_INT 1
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 5
70449: NEG
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 5
70460: NEG
70461: PUSH
70462: LD_INT 1
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 5
70472: NEG
70473: PUSH
70474: LD_INT 1
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 6
70483: NEG
70484: PUSH
70485: LD_INT 0
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 6
70494: NEG
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70518: LD_ADDR_VAR 0 34
70522: PUSH
70523: LD_INT 2
70525: NEG
70526: PUSH
70527: LD_INT 3
70529: NEG
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 3
70537: NEG
70538: PUSH
70539: LD_INT 2
70541: NEG
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 3
70549: NEG
70550: PUSH
70551: LD_INT 3
70553: NEG
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 3
70561: NEG
70562: PUSH
70563: LD_INT 4
70565: NEG
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 4
70573: NEG
70574: PUSH
70575: LD_INT 3
70577: NEG
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 4
70585: NEG
70586: PUSH
70587: LD_INT 4
70589: NEG
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 4
70597: NEG
70598: PUSH
70599: LD_INT 5
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 5
70609: NEG
70610: PUSH
70611: LD_INT 4
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 5
70621: NEG
70622: PUSH
70623: LD_INT 5
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 5
70633: NEG
70634: PUSH
70635: LD_INT 6
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 6
70645: NEG
70646: PUSH
70647: LD_INT 5
70649: NEG
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 6
70657: NEG
70658: PUSH
70659: LD_INT 6
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70681: LD_ADDR_VAR 0 41
70685: PUSH
70686: LD_INT 0
70688: PUSH
70689: LD_INT 2
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 1
70699: NEG
70700: PUSH
70701: LD_INT 3
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 1
70711: PUSH
70712: LD_INT 2
70714: NEG
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: LIST
70724: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70725: LD_ADDR_VAR 0 42
70729: PUSH
70730: LD_INT 2
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 2
70742: PUSH
70743: LD_INT 1
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 3
70753: PUSH
70754: LD_INT 1
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70766: LD_ADDR_VAR 0 43
70770: PUSH
70771: LD_INT 2
70773: PUSH
70774: LD_INT 2
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 3
70783: PUSH
70784: LD_INT 2
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 2
70793: PUSH
70794: LD_INT 3
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: LIST
70805: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70806: LD_ADDR_VAR 0 44
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: LD_INT 2
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 1
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 1
70833: NEG
70834: PUSH
70835: LD_INT 2
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: LIST
70846: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70847: LD_ADDR_VAR 0 45
70851: PUSH
70852: LD_INT 2
70854: NEG
70855: PUSH
70856: LD_INT 0
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 2
70865: NEG
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 3
70876: NEG
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: LIST
70890: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70891: LD_ADDR_VAR 0 46
70895: PUSH
70896: LD_INT 2
70898: NEG
70899: PUSH
70900: LD_INT 2
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 2
70910: NEG
70911: PUSH
70912: LD_INT 3
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 3
70922: NEG
70923: PUSH
70924: LD_INT 2
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70937: LD_ADDR_VAR 0 47
70941: PUSH
70942: LD_INT 2
70944: NEG
70945: PUSH
70946: LD_INT 3
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: NEG
70957: PUSH
70958: LD_INT 3
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70970: LD_ADDR_VAR 0 48
70974: PUSH
70975: LD_INT 1
70977: PUSH
70978: LD_INT 2
70980: NEG
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 2
70988: PUSH
70989: LD_INT 1
70991: NEG
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71001: LD_ADDR_VAR 0 49
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: LD_INT 1
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 3
71018: PUSH
71019: LD_INT 2
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71030: LD_ADDR_VAR 0 50
71034: PUSH
71035: LD_INT 2
71037: PUSH
71038: LD_INT 3
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 1
71047: PUSH
71048: LD_INT 3
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71059: LD_ADDR_VAR 0 51
71063: PUSH
71064: LD_INT 1
71066: NEG
71067: PUSH
71068: LD_INT 2
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 2
71077: NEG
71078: PUSH
71079: LD_INT 1
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71090: LD_ADDR_VAR 0 52
71094: PUSH
71095: LD_INT 3
71097: NEG
71098: PUSH
71099: LD_INT 1
71101: NEG
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 3
71109: NEG
71110: PUSH
71111: LD_INT 2
71113: NEG
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71123: LD_ADDR_VAR 0 53
71127: PUSH
71128: LD_INT 1
71130: NEG
71131: PUSH
71132: LD_INT 3
71134: NEG
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 0
71142: PUSH
71143: LD_INT 3
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 1
71153: PUSH
71154: LD_INT 2
71156: NEG
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: LIST
71166: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71167: LD_ADDR_VAR 0 54
71171: PUSH
71172: LD_INT 2
71174: PUSH
71175: LD_INT 1
71177: NEG
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 3
71185: PUSH
71186: LD_INT 0
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 3
71195: PUSH
71196: LD_INT 1
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: LIST
71207: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71208: LD_ADDR_VAR 0 55
71212: PUSH
71213: LD_INT 3
71215: PUSH
71216: LD_INT 2
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 3
71225: PUSH
71226: LD_INT 3
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 2
71235: PUSH
71236: LD_INT 3
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71248: LD_ADDR_VAR 0 56
71252: PUSH
71253: LD_INT 1
71255: PUSH
71256: LD_INT 3
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 0
71265: PUSH
71266: LD_INT 3
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: LD_INT 1
71275: NEG
71276: PUSH
71277: LD_INT 2
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: LIST
71288: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71289: LD_ADDR_VAR 0 57
71293: PUSH
71294: LD_INT 2
71296: NEG
71297: PUSH
71298: LD_INT 1
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 3
71307: NEG
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 3
71318: NEG
71319: PUSH
71320: LD_INT 1
71322: NEG
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: LIST
71332: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71333: LD_ADDR_VAR 0 58
71337: PUSH
71338: LD_INT 2
71340: NEG
71341: PUSH
71342: LD_INT 3
71344: NEG
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 3
71352: NEG
71353: PUSH
71354: LD_INT 2
71356: NEG
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 3
71364: NEG
71365: PUSH
71366: LD_INT 3
71368: NEG
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: LIST
71378: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71379: LD_ADDR_VAR 0 59
71383: PUSH
71384: LD_INT 1
71386: NEG
71387: PUSH
71388: LD_INT 2
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 2
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 1
71409: PUSH
71410: LD_INT 1
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: LIST
71422: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71423: LD_ADDR_VAR 0 60
71427: PUSH
71428: LD_INT 1
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 2
71441: PUSH
71442: LD_INT 0
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 2
71451: PUSH
71452: LD_INT 1
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: LIST
71463: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71464: LD_ADDR_VAR 0 61
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: LD_INT 1
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 2
71481: PUSH
71482: LD_INT 2
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: LD_INT 1
71491: PUSH
71492: LD_INT 2
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71504: LD_ADDR_VAR 0 62
71508: PUSH
71509: LD_INT 1
71511: PUSH
71512: LD_INT 2
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 0
71521: PUSH
71522: LD_INT 2
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: NEG
71532: PUSH
71533: LD_INT 1
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: LIST
71544: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71545: LD_ADDR_VAR 0 63
71549: PUSH
71550: LD_INT 1
71552: NEG
71553: PUSH
71554: LD_INT 1
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 2
71563: NEG
71564: PUSH
71565: LD_INT 0
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 2
71574: NEG
71575: PUSH
71576: LD_INT 1
71578: NEG
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: LIST
71588: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71589: LD_ADDR_VAR 0 64
71593: PUSH
71594: LD_INT 1
71596: NEG
71597: PUSH
71598: LD_INT 2
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 2
71608: NEG
71609: PUSH
71610: LD_INT 1
71612: NEG
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 2
71620: NEG
71621: PUSH
71622: LD_INT 2
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: ST_TO_ADDR
// end ; 2 :
71635: GO 74901
71637: LD_INT 2
71639: DOUBLE
71640: EQUAL
71641: IFTRUE 71645
71643: GO 74900
71645: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71646: LD_ADDR_VAR 0 29
71650: PUSH
71651: LD_INT 4
71653: PUSH
71654: LD_INT 0
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 4
71663: PUSH
71664: LD_INT 1
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 5
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 5
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 4
71694: PUSH
71695: LD_INT 1
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 3
71704: PUSH
71705: LD_INT 0
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 3
71714: PUSH
71715: LD_INT 1
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 3
71725: PUSH
71726: LD_INT 2
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 5
71736: PUSH
71737: LD_INT 2
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 3
71746: PUSH
71747: LD_INT 3
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 3
71756: PUSH
71757: LD_INT 2
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 4
71766: PUSH
71767: LD_INT 3
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 4
71776: PUSH
71777: LD_INT 4
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PUSH
71784: LD_INT 3
71786: PUSH
71787: LD_INT 4
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 2
71796: PUSH
71797: LD_INT 3
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 2
71806: PUSH
71807: LD_INT 2
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 4
71816: PUSH
71817: LD_INT 2
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 2
71826: PUSH
71827: LD_INT 4
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 0
71836: PUSH
71837: LD_INT 4
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 0
71846: PUSH
71847: LD_INT 3
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 1
71856: PUSH
71857: LD_INT 4
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: LD_INT 5
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_INT 0
71876: PUSH
71877: LD_INT 5
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 1
71886: NEG
71887: PUSH
71888: LD_INT 4
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 1
71897: NEG
71898: PUSH
71899: LD_INT 3
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 2
71908: PUSH
71909: LD_INT 5
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 2
71918: NEG
71919: PUSH
71920: LD_INT 3
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 3
71929: NEG
71930: PUSH
71931: LD_INT 0
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 3
71940: NEG
71941: PUSH
71942: LD_INT 1
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 2
71952: NEG
71953: PUSH
71954: LD_INT 0
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 2
71963: NEG
71964: PUSH
71965: LD_INT 1
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 3
71974: NEG
71975: PUSH
71976: LD_INT 1
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 4
71985: NEG
71986: PUSH
71987: LD_INT 0
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 4
71996: NEG
71997: PUSH
71998: LD_INT 1
72000: NEG
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 4
72008: NEG
72009: PUSH
72010: LD_INT 2
72012: NEG
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 2
72020: NEG
72021: PUSH
72022: LD_INT 2
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 4
72031: NEG
72032: PUSH
72033: LD_INT 4
72035: NEG
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 4
72043: NEG
72044: PUSH
72045: LD_INT 5
72047: NEG
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 3
72055: NEG
72056: PUSH
72057: LD_INT 4
72059: NEG
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 3
72067: NEG
72068: PUSH
72069: LD_INT 3
72071: NEG
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 4
72079: NEG
72080: PUSH
72081: LD_INT 3
72083: NEG
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 5
72091: NEG
72092: PUSH
72093: LD_INT 4
72095: NEG
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 5
72103: NEG
72104: PUSH
72105: LD_INT 5
72107: NEG
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 3
72115: NEG
72116: PUSH
72117: LD_INT 5
72119: NEG
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 5
72127: NEG
72128: PUSH
72129: LD_INT 3
72131: NEG
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72184: LD_ADDR_VAR 0 30
72188: PUSH
72189: LD_INT 4
72191: PUSH
72192: LD_INT 4
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 4
72201: PUSH
72202: LD_INT 3
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 5
72211: PUSH
72212: LD_INT 4
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 5
72221: PUSH
72222: LD_INT 5
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: LD_INT 4
72231: PUSH
72232: LD_INT 5
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 3
72241: PUSH
72242: LD_INT 4
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 3
72251: PUSH
72252: LD_INT 3
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 5
72261: PUSH
72262: LD_INT 3
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 3
72271: PUSH
72272: LD_INT 5
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 0
72281: PUSH
72282: LD_INT 3
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 0
72291: PUSH
72292: LD_INT 2
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 1
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 1
72311: PUSH
72312: LD_INT 4
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 0
72321: PUSH
72322: LD_INT 4
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 1
72331: NEG
72332: PUSH
72333: LD_INT 3
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: LD_INT 1
72342: NEG
72343: PUSH
72344: LD_INT 2
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 2
72353: PUSH
72354: LD_INT 4
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 2
72363: NEG
72364: PUSH
72365: LD_INT 2
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 4
72374: NEG
72375: PUSH
72376: LD_INT 0
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 4
72385: NEG
72386: PUSH
72387: LD_INT 1
72389: NEG
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 3
72397: NEG
72398: PUSH
72399: LD_INT 0
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 3
72408: NEG
72409: PUSH
72410: LD_INT 1
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 4
72419: NEG
72420: PUSH
72421: LD_INT 1
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 5
72430: NEG
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 5
72441: NEG
72442: PUSH
72443: LD_INT 1
72445: NEG
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 5
72453: NEG
72454: PUSH
72455: LD_INT 2
72457: NEG
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 3
72465: NEG
72466: PUSH
72467: LD_INT 2
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 3
72476: NEG
72477: PUSH
72478: LD_INT 3
72480: NEG
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 3
72488: NEG
72489: PUSH
72490: LD_INT 4
72492: NEG
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 2
72500: NEG
72501: PUSH
72502: LD_INT 3
72504: NEG
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 2
72512: NEG
72513: PUSH
72514: LD_INT 2
72516: NEG
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 3
72524: NEG
72525: PUSH
72526: LD_INT 2
72528: NEG
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 4
72536: NEG
72537: PUSH
72538: LD_INT 3
72540: NEG
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 4
72548: NEG
72549: PUSH
72550: LD_INT 4
72552: NEG
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 2
72560: NEG
72561: PUSH
72562: LD_INT 4
72564: NEG
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 4
72572: NEG
72573: PUSH
72574: LD_INT 2
72576: NEG
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 0
72584: PUSH
72585: LD_INT 4
72587: NEG
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 0
72595: PUSH
72596: LD_INT 5
72598: NEG
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 1
72606: PUSH
72607: LD_INT 4
72609: NEG
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 1
72617: PUSH
72618: LD_INT 3
72620: NEG
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 0
72628: PUSH
72629: LD_INT 3
72631: NEG
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 1
72639: NEG
72640: PUSH
72641: LD_INT 4
72643: NEG
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 1
72651: NEG
72652: PUSH
72653: LD_INT 5
72655: NEG
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 2
72663: PUSH
72664: LD_INT 3
72666: NEG
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 2
72674: NEG
72675: PUSH
72676: LD_INT 5
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72731: LD_ADDR_VAR 0 31
72735: PUSH
72736: LD_INT 0
72738: PUSH
72739: LD_INT 4
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: LD_INT 0
72748: PUSH
72749: LD_INT 3
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 1
72758: PUSH
72759: LD_INT 4
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 1
72768: PUSH
72769: LD_INT 5
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 0
72778: PUSH
72779: LD_INT 5
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 1
72788: NEG
72789: PUSH
72790: LD_INT 4
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 1
72799: NEG
72800: PUSH
72801: LD_INT 3
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 2
72810: PUSH
72811: LD_INT 5
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 2
72820: NEG
72821: PUSH
72822: LD_INT 3
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 3
72831: NEG
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 3
72842: NEG
72843: PUSH
72844: LD_INT 1
72846: NEG
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 2
72854: NEG
72855: PUSH
72856: LD_INT 0
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 2
72865: NEG
72866: PUSH
72867: LD_INT 1
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_INT 3
72876: NEG
72877: PUSH
72878: LD_INT 1
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 4
72887: NEG
72888: PUSH
72889: LD_INT 0
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 4
72898: NEG
72899: PUSH
72900: LD_INT 1
72902: NEG
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 4
72910: NEG
72911: PUSH
72912: LD_INT 2
72914: NEG
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 2
72922: NEG
72923: PUSH
72924: LD_INT 2
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 4
72933: NEG
72934: PUSH
72935: LD_INT 4
72937: NEG
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 4
72945: NEG
72946: PUSH
72947: LD_INT 5
72949: NEG
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 3
72957: NEG
72958: PUSH
72959: LD_INT 4
72961: NEG
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 3
72969: NEG
72970: PUSH
72971: LD_INT 3
72973: NEG
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 4
72981: NEG
72982: PUSH
72983: LD_INT 3
72985: NEG
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 5
72993: NEG
72994: PUSH
72995: LD_INT 4
72997: NEG
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: PUSH
73003: LD_INT 5
73005: NEG
73006: PUSH
73007: LD_INT 5
73009: NEG
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 3
73017: NEG
73018: PUSH
73019: LD_INT 5
73021: NEG
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 5
73029: NEG
73030: PUSH
73031: LD_INT 3
73033: NEG
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 0
73041: PUSH
73042: LD_INT 3
73044: NEG
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 0
73052: PUSH
73053: LD_INT 4
73055: NEG
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 1
73063: PUSH
73064: LD_INT 3
73066: NEG
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 1
73074: PUSH
73075: LD_INT 2
73077: NEG
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 0
73085: PUSH
73086: LD_INT 2
73088: NEG
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 1
73096: NEG
73097: PUSH
73098: LD_INT 3
73100: NEG
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 1
73108: NEG
73109: PUSH
73110: LD_INT 4
73112: NEG
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 2
73120: PUSH
73121: LD_INT 2
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 2
73131: NEG
73132: PUSH
73133: LD_INT 4
73135: NEG
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 4
73143: PUSH
73144: LD_INT 0
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 4
73153: PUSH
73154: LD_INT 1
73156: NEG
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 5
73164: PUSH
73165: LD_INT 0
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 5
73174: PUSH
73175: LD_INT 1
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 4
73184: PUSH
73185: LD_INT 1
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 3
73194: PUSH
73195: LD_INT 0
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 3
73204: PUSH
73205: LD_INT 1
73207: NEG
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: PUSH
73213: LD_INT 3
73215: PUSH
73216: LD_INT 2
73218: NEG
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 5
73226: PUSH
73227: LD_INT 2
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73281: LD_ADDR_VAR 0 32
73285: PUSH
73286: LD_INT 4
73288: NEG
73289: PUSH
73290: LD_INT 0
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 4
73299: NEG
73300: PUSH
73301: LD_INT 1
73303: NEG
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 3
73311: NEG
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 3
73322: NEG
73323: PUSH
73324: LD_INT 1
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: LD_INT 4
73333: NEG
73334: PUSH
73335: LD_INT 1
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 5
73344: NEG
73345: PUSH
73346: LD_INT 0
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: PUSH
73353: LD_INT 5
73355: NEG
73356: PUSH
73357: LD_INT 1
73359: NEG
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 5
73367: NEG
73368: PUSH
73369: LD_INT 2
73371: NEG
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PUSH
73377: LD_INT 3
73379: NEG
73380: PUSH
73381: LD_INT 2
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 3
73390: NEG
73391: PUSH
73392: LD_INT 3
73394: NEG
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 3
73402: NEG
73403: PUSH
73404: LD_INT 4
73406: NEG
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 2
73414: NEG
73415: PUSH
73416: LD_INT 3
73418: NEG
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: LD_INT 2
73426: NEG
73427: PUSH
73428: LD_INT 2
73430: NEG
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 3
73438: NEG
73439: PUSH
73440: LD_INT 2
73442: NEG
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 4
73450: NEG
73451: PUSH
73452: LD_INT 3
73454: NEG
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: PUSH
73460: LD_INT 4
73462: NEG
73463: PUSH
73464: LD_INT 4
73466: NEG
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 2
73474: NEG
73475: PUSH
73476: LD_INT 4
73478: NEG
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 4
73486: NEG
73487: PUSH
73488: LD_INT 2
73490: NEG
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 0
73498: PUSH
73499: LD_INT 4
73501: NEG
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 0
73509: PUSH
73510: LD_INT 5
73512: NEG
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 1
73520: PUSH
73521: LD_INT 4
73523: NEG
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 1
73531: PUSH
73532: LD_INT 3
73534: NEG
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 0
73542: PUSH
73543: LD_INT 3
73545: NEG
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: PUSH
73551: LD_INT 1
73553: NEG
73554: PUSH
73555: LD_INT 4
73557: NEG
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: LD_INT 1
73565: NEG
73566: PUSH
73567: LD_INT 5
73569: NEG
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 2
73577: PUSH
73578: LD_INT 3
73580: NEG
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 2
73588: NEG
73589: PUSH
73590: LD_INT 5
73592: NEG
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 3
73600: PUSH
73601: LD_INT 0
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 3
73610: PUSH
73611: LD_INT 1
73613: NEG
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 4
73621: PUSH
73622: LD_INT 0
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: PUSH
73629: LD_INT 4
73631: PUSH
73632: LD_INT 1
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 3
73641: PUSH
73642: LD_INT 1
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 2
73651: PUSH
73652: LD_INT 0
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 2
73661: PUSH
73662: LD_INT 1
73664: NEG
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 2
73672: PUSH
73673: LD_INT 2
73675: NEG
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 4
73683: PUSH
73684: LD_INT 2
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: PUSH
73691: LD_INT 4
73693: PUSH
73694: LD_INT 4
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_INT 4
73703: PUSH
73704: LD_INT 3
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: PUSH
73711: LD_INT 5
73713: PUSH
73714: LD_INT 4
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: PUSH
73721: LD_INT 5
73723: PUSH
73724: LD_INT 5
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PUSH
73731: LD_INT 4
73733: PUSH
73734: LD_INT 5
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 3
73743: PUSH
73744: LD_INT 4
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 3
73753: PUSH
73754: LD_INT 3
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 5
73763: PUSH
73764: LD_INT 3
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: LD_INT 3
73773: PUSH
73774: LD_INT 5
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73828: LD_ADDR_VAR 0 33
73832: PUSH
73833: LD_INT 4
73835: NEG
73836: PUSH
73837: LD_INT 4
73839: NEG
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 4
73847: NEG
73848: PUSH
73849: LD_INT 5
73851: NEG
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 3
73859: NEG
73860: PUSH
73861: LD_INT 4
73863: NEG
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 3
73871: NEG
73872: PUSH
73873: LD_INT 3
73875: NEG
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: PUSH
73881: LD_INT 4
73883: NEG
73884: PUSH
73885: LD_INT 3
73887: NEG
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: PUSH
73893: LD_INT 5
73895: NEG
73896: PUSH
73897: LD_INT 4
73899: NEG
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 5
73907: NEG
73908: PUSH
73909: LD_INT 5
73911: NEG
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 3
73919: NEG
73920: PUSH
73921: LD_INT 5
73923: NEG
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PUSH
73929: LD_INT 5
73931: NEG
73932: PUSH
73933: LD_INT 3
73935: NEG
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: LD_INT 0
73943: PUSH
73944: LD_INT 3
73946: NEG
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_INT 0
73954: PUSH
73955: LD_INT 4
73957: NEG
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: LD_INT 1
73965: PUSH
73966: LD_INT 3
73968: NEG
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 1
73976: PUSH
73977: LD_INT 2
73979: NEG
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: PUSH
73985: LD_INT 0
73987: PUSH
73988: LD_INT 2
73990: NEG
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 1
73998: NEG
73999: PUSH
74000: LD_INT 3
74002: NEG
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_INT 1
74010: NEG
74011: PUSH
74012: LD_INT 4
74014: NEG
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 2
74022: PUSH
74023: LD_INT 2
74025: NEG
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 2
74033: NEG
74034: PUSH
74035: LD_INT 4
74037: NEG
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 4
74045: PUSH
74046: LD_INT 0
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 4
74055: PUSH
74056: LD_INT 1
74058: NEG
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 5
74066: PUSH
74067: LD_INT 0
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 5
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 4
74086: PUSH
74087: LD_INT 1
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 3
74096: PUSH
74097: LD_INT 0
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 3
74106: PUSH
74107: LD_INT 1
74109: NEG
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 3
74117: PUSH
74118: LD_INT 2
74120: NEG
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: PUSH
74126: LD_INT 5
74128: PUSH
74129: LD_INT 2
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 3
74138: PUSH
74139: LD_INT 3
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 3
74148: PUSH
74149: LD_INT 2
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 4
74158: PUSH
74159: LD_INT 3
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 4
74168: PUSH
74169: LD_INT 4
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 3
74178: PUSH
74179: LD_INT 4
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 2
74188: PUSH
74189: LD_INT 3
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 2
74198: PUSH
74199: LD_INT 2
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 4
74208: PUSH
74209: LD_INT 2
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 2
74218: PUSH
74219: LD_INT 4
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 0
74228: PUSH
74229: LD_INT 4
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 0
74238: PUSH
74239: LD_INT 3
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 1
74248: PUSH
74249: LD_INT 4
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 1
74258: PUSH
74259: LD_INT 5
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 0
74268: PUSH
74269: LD_INT 5
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 1
74278: NEG
74279: PUSH
74280: LD_INT 4
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 1
74289: NEG
74290: PUSH
74291: LD_INT 3
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_INT 2
74300: PUSH
74301: LD_INT 5
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PUSH
74308: LD_INT 2
74310: NEG
74311: PUSH
74312: LD_INT 3
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74366: LD_ADDR_VAR 0 34
74370: PUSH
74371: LD_INT 0
74373: PUSH
74374: LD_INT 4
74376: NEG
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PUSH
74382: LD_INT 0
74384: PUSH
74385: LD_INT 5
74387: NEG
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: LD_INT 1
74395: PUSH
74396: LD_INT 4
74398: NEG
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 1
74406: PUSH
74407: LD_INT 3
74409: NEG
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 0
74417: PUSH
74418: LD_INT 3
74420: NEG
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 1
74428: NEG
74429: PUSH
74430: LD_INT 4
74432: NEG
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: PUSH
74438: LD_INT 1
74440: NEG
74441: PUSH
74442: LD_INT 5
74444: NEG
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: PUSH
74450: LD_INT 2
74452: PUSH
74453: LD_INT 3
74455: NEG
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: LD_INT 2
74463: NEG
74464: PUSH
74465: LD_INT 5
74467: NEG
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: LD_INT 3
74475: PUSH
74476: LD_INT 0
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 3
74485: PUSH
74486: LD_INT 1
74488: NEG
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 4
74496: PUSH
74497: LD_INT 0
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 4
74506: PUSH
74507: LD_INT 1
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_INT 3
74516: PUSH
74517: LD_INT 1
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: LD_INT 2
74526: PUSH
74527: LD_INT 0
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: PUSH
74534: LD_INT 2
74536: PUSH
74537: LD_INT 1
74539: NEG
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 2
74547: PUSH
74548: LD_INT 2
74550: NEG
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 4
74558: PUSH
74559: LD_INT 2
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: LD_INT 4
74568: PUSH
74569: LD_INT 4
74571: PUSH
74572: EMPTY
74573: LIST
74574: LIST
74575: PUSH
74576: LD_INT 4
74578: PUSH
74579: LD_INT 3
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 5
74588: PUSH
74589: LD_INT 4
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: PUSH
74596: LD_INT 5
74598: PUSH
74599: LD_INT 5
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 4
74608: PUSH
74609: LD_INT 5
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: LD_INT 3
74618: PUSH
74619: LD_INT 4
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_INT 3
74628: PUSH
74629: LD_INT 3
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: LD_INT 5
74638: PUSH
74639: LD_INT 3
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: PUSH
74646: LD_INT 3
74648: PUSH
74649: LD_INT 5
74651: PUSH
74652: EMPTY
74653: LIST
74654: LIST
74655: PUSH
74656: LD_INT 0
74658: PUSH
74659: LD_INT 3
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: PUSH
74666: LD_INT 0
74668: PUSH
74669: LD_INT 2
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_INT 1
74678: PUSH
74679: LD_INT 3
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 1
74688: PUSH
74689: LD_INT 4
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: LD_INT 0
74698: PUSH
74699: LD_INT 4
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: PUSH
74706: LD_INT 1
74708: NEG
74709: PUSH
74710: LD_INT 3
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 1
74719: NEG
74720: PUSH
74721: LD_INT 2
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 2
74730: PUSH
74731: LD_INT 4
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 2
74740: NEG
74741: PUSH
74742: LD_INT 2
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 4
74751: NEG
74752: PUSH
74753: LD_INT 0
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 4
74762: NEG
74763: PUSH
74764: LD_INT 1
74766: NEG
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: LD_INT 3
74774: NEG
74775: PUSH
74776: LD_INT 0
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: PUSH
74783: LD_INT 3
74785: NEG
74786: PUSH
74787: LD_INT 1
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 4
74796: NEG
74797: PUSH
74798: LD_INT 1
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 5
74807: NEG
74808: PUSH
74809: LD_INT 0
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 5
74818: NEG
74819: PUSH
74820: LD_INT 1
74822: NEG
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: PUSH
74828: LD_INT 5
74830: NEG
74831: PUSH
74832: LD_INT 2
74834: NEG
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 3
74842: NEG
74843: PUSH
74844: LD_INT 2
74846: PUSH
74847: EMPTY
74848: LIST
74849: LIST
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: ST_TO_ADDR
// end ; end ;
74898: GO 74901
74900: POP
// case btype of b_depot , b_warehouse :
74901: LD_VAR 0 1
74905: PUSH
74906: LD_INT 0
74908: DOUBLE
74909: EQUAL
74910: IFTRUE 74920
74912: LD_INT 1
74914: DOUBLE
74915: EQUAL
74916: IFTRUE 74920
74918: GO 75121
74920: POP
// case nation of nation_american :
74921: LD_VAR 0 5
74925: PUSH
74926: LD_INT 1
74928: DOUBLE
74929: EQUAL
74930: IFTRUE 74934
74932: GO 74990
74934: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74935: LD_ADDR_VAR 0 9
74939: PUSH
74940: LD_VAR 0 11
74944: PUSH
74945: LD_VAR 0 12
74949: PUSH
74950: LD_VAR 0 13
74954: PUSH
74955: LD_VAR 0 14
74959: PUSH
74960: LD_VAR 0 15
74964: PUSH
74965: LD_VAR 0 16
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: PUSH
74978: LD_VAR 0 4
74982: PUSH
74983: LD_INT 1
74985: PLUS
74986: ARRAY
74987: ST_TO_ADDR
74988: GO 75119
74990: LD_INT 2
74992: DOUBLE
74993: EQUAL
74994: IFTRUE 74998
74996: GO 75054
74998: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74999: LD_ADDR_VAR 0 9
75003: PUSH
75004: LD_VAR 0 17
75008: PUSH
75009: LD_VAR 0 18
75013: PUSH
75014: LD_VAR 0 19
75018: PUSH
75019: LD_VAR 0 20
75023: PUSH
75024: LD_VAR 0 21
75028: PUSH
75029: LD_VAR 0 22
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: PUSH
75042: LD_VAR 0 4
75046: PUSH
75047: LD_INT 1
75049: PLUS
75050: ARRAY
75051: ST_TO_ADDR
75052: GO 75119
75054: LD_INT 3
75056: DOUBLE
75057: EQUAL
75058: IFTRUE 75062
75060: GO 75118
75062: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75063: LD_ADDR_VAR 0 9
75067: PUSH
75068: LD_VAR 0 23
75072: PUSH
75073: LD_VAR 0 24
75077: PUSH
75078: LD_VAR 0 25
75082: PUSH
75083: LD_VAR 0 26
75087: PUSH
75088: LD_VAR 0 27
75092: PUSH
75093: LD_VAR 0 28
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: LIST
75102: LIST
75103: LIST
75104: LIST
75105: PUSH
75106: LD_VAR 0 4
75110: PUSH
75111: LD_INT 1
75113: PLUS
75114: ARRAY
75115: ST_TO_ADDR
75116: GO 75119
75118: POP
75119: GO 75674
75121: LD_INT 2
75123: DOUBLE
75124: EQUAL
75125: IFTRUE 75135
75127: LD_INT 3
75129: DOUBLE
75130: EQUAL
75131: IFTRUE 75135
75133: GO 75191
75135: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75136: LD_ADDR_VAR 0 9
75140: PUSH
75141: LD_VAR 0 29
75145: PUSH
75146: LD_VAR 0 30
75150: PUSH
75151: LD_VAR 0 31
75155: PUSH
75156: LD_VAR 0 32
75160: PUSH
75161: LD_VAR 0 33
75165: PUSH
75166: LD_VAR 0 34
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: PUSH
75179: LD_VAR 0 4
75183: PUSH
75184: LD_INT 1
75186: PLUS
75187: ARRAY
75188: ST_TO_ADDR
75189: GO 75674
75191: LD_INT 16
75193: DOUBLE
75194: EQUAL
75195: IFTRUE 75253
75197: LD_INT 17
75199: DOUBLE
75200: EQUAL
75201: IFTRUE 75253
75203: LD_INT 18
75205: DOUBLE
75206: EQUAL
75207: IFTRUE 75253
75209: LD_INT 19
75211: DOUBLE
75212: EQUAL
75213: IFTRUE 75253
75215: LD_INT 22
75217: DOUBLE
75218: EQUAL
75219: IFTRUE 75253
75221: LD_INT 20
75223: DOUBLE
75224: EQUAL
75225: IFTRUE 75253
75227: LD_INT 21
75229: DOUBLE
75230: EQUAL
75231: IFTRUE 75253
75233: LD_INT 23
75235: DOUBLE
75236: EQUAL
75237: IFTRUE 75253
75239: LD_INT 24
75241: DOUBLE
75242: EQUAL
75243: IFTRUE 75253
75245: LD_INT 25
75247: DOUBLE
75248: EQUAL
75249: IFTRUE 75253
75251: GO 75309
75253: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75254: LD_ADDR_VAR 0 9
75258: PUSH
75259: LD_VAR 0 35
75263: PUSH
75264: LD_VAR 0 36
75268: PUSH
75269: LD_VAR 0 37
75273: PUSH
75274: LD_VAR 0 38
75278: PUSH
75279: LD_VAR 0 39
75283: PUSH
75284: LD_VAR 0 40
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: LIST
75296: PUSH
75297: LD_VAR 0 4
75301: PUSH
75302: LD_INT 1
75304: PLUS
75305: ARRAY
75306: ST_TO_ADDR
75307: GO 75674
75309: LD_INT 6
75311: DOUBLE
75312: EQUAL
75313: IFTRUE 75365
75315: LD_INT 7
75317: DOUBLE
75318: EQUAL
75319: IFTRUE 75365
75321: LD_INT 8
75323: DOUBLE
75324: EQUAL
75325: IFTRUE 75365
75327: LD_INT 13
75329: DOUBLE
75330: EQUAL
75331: IFTRUE 75365
75333: LD_INT 12
75335: DOUBLE
75336: EQUAL
75337: IFTRUE 75365
75339: LD_INT 15
75341: DOUBLE
75342: EQUAL
75343: IFTRUE 75365
75345: LD_INT 11
75347: DOUBLE
75348: EQUAL
75349: IFTRUE 75365
75351: LD_INT 14
75353: DOUBLE
75354: EQUAL
75355: IFTRUE 75365
75357: LD_INT 10
75359: DOUBLE
75360: EQUAL
75361: IFTRUE 75365
75363: GO 75421
75365: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75366: LD_ADDR_VAR 0 9
75370: PUSH
75371: LD_VAR 0 41
75375: PUSH
75376: LD_VAR 0 42
75380: PUSH
75381: LD_VAR 0 43
75385: PUSH
75386: LD_VAR 0 44
75390: PUSH
75391: LD_VAR 0 45
75395: PUSH
75396: LD_VAR 0 46
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: PUSH
75409: LD_VAR 0 4
75413: PUSH
75414: LD_INT 1
75416: PLUS
75417: ARRAY
75418: ST_TO_ADDR
75419: GO 75674
75421: LD_INT 36
75423: DOUBLE
75424: EQUAL
75425: IFTRUE 75429
75427: GO 75485
75429: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75430: LD_ADDR_VAR 0 9
75434: PUSH
75435: LD_VAR 0 47
75439: PUSH
75440: LD_VAR 0 48
75444: PUSH
75445: LD_VAR 0 49
75449: PUSH
75450: LD_VAR 0 50
75454: PUSH
75455: LD_VAR 0 51
75459: PUSH
75460: LD_VAR 0 52
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: PUSH
75473: LD_VAR 0 4
75477: PUSH
75478: LD_INT 1
75480: PLUS
75481: ARRAY
75482: ST_TO_ADDR
75483: GO 75674
75485: LD_INT 4
75487: DOUBLE
75488: EQUAL
75489: IFTRUE 75511
75491: LD_INT 5
75493: DOUBLE
75494: EQUAL
75495: IFTRUE 75511
75497: LD_INT 34
75499: DOUBLE
75500: EQUAL
75501: IFTRUE 75511
75503: LD_INT 37
75505: DOUBLE
75506: EQUAL
75507: IFTRUE 75511
75509: GO 75567
75511: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75512: LD_ADDR_VAR 0 9
75516: PUSH
75517: LD_VAR 0 53
75521: PUSH
75522: LD_VAR 0 54
75526: PUSH
75527: LD_VAR 0 55
75531: PUSH
75532: LD_VAR 0 56
75536: PUSH
75537: LD_VAR 0 57
75541: PUSH
75542: LD_VAR 0 58
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: PUSH
75555: LD_VAR 0 4
75559: PUSH
75560: LD_INT 1
75562: PLUS
75563: ARRAY
75564: ST_TO_ADDR
75565: GO 75674
75567: LD_INT 31
75569: DOUBLE
75570: EQUAL
75571: IFTRUE 75617
75573: LD_INT 32
75575: DOUBLE
75576: EQUAL
75577: IFTRUE 75617
75579: LD_INT 33
75581: DOUBLE
75582: EQUAL
75583: IFTRUE 75617
75585: LD_INT 27
75587: DOUBLE
75588: EQUAL
75589: IFTRUE 75617
75591: LD_INT 26
75593: DOUBLE
75594: EQUAL
75595: IFTRUE 75617
75597: LD_INT 28
75599: DOUBLE
75600: EQUAL
75601: IFTRUE 75617
75603: LD_INT 29
75605: DOUBLE
75606: EQUAL
75607: IFTRUE 75617
75609: LD_INT 30
75611: DOUBLE
75612: EQUAL
75613: IFTRUE 75617
75615: GO 75673
75617: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75618: LD_ADDR_VAR 0 9
75622: PUSH
75623: LD_VAR 0 59
75627: PUSH
75628: LD_VAR 0 60
75632: PUSH
75633: LD_VAR 0 61
75637: PUSH
75638: LD_VAR 0 62
75642: PUSH
75643: LD_VAR 0 63
75647: PUSH
75648: LD_VAR 0 64
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: PUSH
75661: LD_VAR 0 4
75665: PUSH
75666: LD_INT 1
75668: PLUS
75669: ARRAY
75670: ST_TO_ADDR
75671: GO 75674
75673: POP
// temp_list2 = [ ] ;
75674: LD_ADDR_VAR 0 10
75678: PUSH
75679: EMPTY
75680: ST_TO_ADDR
// for i in temp_list do
75681: LD_ADDR_VAR 0 8
75685: PUSH
75686: LD_VAR 0 9
75690: PUSH
75691: FOR_IN
75692: IFFALSE 75744
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75694: LD_ADDR_VAR 0 10
75698: PUSH
75699: LD_VAR 0 10
75703: PUSH
75704: LD_VAR 0 8
75708: PUSH
75709: LD_INT 1
75711: ARRAY
75712: PUSH
75713: LD_VAR 0 2
75717: PLUS
75718: PUSH
75719: LD_VAR 0 8
75723: PUSH
75724: LD_INT 2
75726: ARRAY
75727: PUSH
75728: LD_VAR 0 3
75732: PLUS
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: EMPTY
75739: LIST
75740: ADD
75741: ST_TO_ADDR
75742: GO 75691
75744: POP
75745: POP
// result = temp_list2 ;
75746: LD_ADDR_VAR 0 7
75750: PUSH
75751: LD_VAR 0 10
75755: ST_TO_ADDR
// end ;
75756: LD_VAR 0 7
75760: RET
// export function EnemyInRange ( unit , dist ) ; begin
75761: LD_INT 0
75763: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75764: LD_ADDR_VAR 0 3
75768: PUSH
75769: LD_VAR 0 1
75773: PPUSH
75774: CALL_OW 255
75778: PPUSH
75779: LD_VAR 0 1
75783: PPUSH
75784: CALL_OW 250
75788: PPUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 251
75798: PPUSH
75799: LD_VAR 0 2
75803: PPUSH
75804: CALL 49018 0 4
75808: PUSH
75809: LD_INT 4
75811: ARRAY
75812: ST_TO_ADDR
// end ;
75813: LD_VAR 0 3
75817: RET
// export function PlayerSeeMe ( unit ) ; begin
75818: LD_INT 0
75820: PPUSH
// result := See ( your_side , unit ) ;
75821: LD_ADDR_VAR 0 2
75825: PUSH
75826: LD_OWVAR 2
75830: PPUSH
75831: LD_VAR 0 1
75835: PPUSH
75836: CALL_OW 292
75840: ST_TO_ADDR
// end ;
75841: LD_VAR 0 2
75845: RET
// export function ReverseDir ( unit ) ; begin
75846: LD_INT 0
75848: PPUSH
// if not unit then
75849: LD_VAR 0 1
75853: NOT
75854: IFFALSE 75858
// exit ;
75856: GO 75881
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75858: LD_ADDR_VAR 0 2
75862: PUSH
75863: LD_VAR 0 1
75867: PPUSH
75868: CALL_OW 254
75872: PUSH
75873: LD_INT 3
75875: PLUS
75876: PUSH
75877: LD_INT 6
75879: MOD
75880: ST_TO_ADDR
// end ;
75881: LD_VAR 0 2
75885: RET
// export function ReverseArray ( array ) ; var i ; begin
75886: LD_INT 0
75888: PPUSH
75889: PPUSH
// if not array then
75890: LD_VAR 0 1
75894: NOT
75895: IFFALSE 75899
// exit ;
75897: GO 75954
// result := [ ] ;
75899: LD_ADDR_VAR 0 2
75903: PUSH
75904: EMPTY
75905: ST_TO_ADDR
// for i := array downto 1 do
75906: LD_ADDR_VAR 0 3
75910: PUSH
75911: DOUBLE
75912: LD_VAR 0 1
75916: INC
75917: ST_TO_ADDR
75918: LD_INT 1
75920: PUSH
75921: FOR_DOWNTO
75922: IFFALSE 75952
// result := Join ( result , array [ i ] ) ;
75924: LD_ADDR_VAR 0 2
75928: PUSH
75929: LD_VAR 0 2
75933: PPUSH
75934: LD_VAR 0 1
75938: PUSH
75939: LD_VAR 0 3
75943: ARRAY
75944: PPUSH
75945: CALL 80806 0 2
75949: ST_TO_ADDR
75950: GO 75921
75952: POP
75953: POP
// end ;
75954: LD_VAR 0 2
75958: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75959: LD_INT 0
75961: PPUSH
75962: PPUSH
75963: PPUSH
75964: PPUSH
75965: PPUSH
75966: PPUSH
// if not unit or not hexes then
75967: LD_VAR 0 1
75971: NOT
75972: IFTRUE 75981
75974: PUSH
75975: LD_VAR 0 2
75979: NOT
75980: OR
75981: IFFALSE 75985
// exit ;
75983: GO 76108
// dist := 9999 ;
75985: LD_ADDR_VAR 0 5
75989: PUSH
75990: LD_INT 9999
75992: ST_TO_ADDR
// for i = 1 to hexes do
75993: LD_ADDR_VAR 0 4
75997: PUSH
75998: DOUBLE
75999: LD_INT 1
76001: DEC
76002: ST_TO_ADDR
76003: LD_VAR 0 2
76007: PUSH
76008: FOR_TO
76009: IFFALSE 76096
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76011: LD_ADDR_VAR 0 6
76015: PUSH
76016: LD_VAR 0 1
76020: PPUSH
76021: LD_VAR 0 2
76025: PUSH
76026: LD_VAR 0 4
76030: ARRAY
76031: PUSH
76032: LD_INT 1
76034: ARRAY
76035: PPUSH
76036: LD_VAR 0 2
76040: PUSH
76041: LD_VAR 0 4
76045: ARRAY
76046: PUSH
76047: LD_INT 2
76049: ARRAY
76050: PPUSH
76051: CALL_OW 297
76055: ST_TO_ADDR
// if tdist < dist then
76056: LD_VAR 0 6
76060: PUSH
76061: LD_VAR 0 5
76065: LESS
76066: IFFALSE 76094
// begin hex := hexes [ i ] ;
76068: LD_ADDR_VAR 0 8
76072: PUSH
76073: LD_VAR 0 2
76077: PUSH
76078: LD_VAR 0 4
76082: ARRAY
76083: ST_TO_ADDR
// dist := tdist ;
76084: LD_ADDR_VAR 0 5
76088: PUSH
76089: LD_VAR 0 6
76093: ST_TO_ADDR
// end ; end ;
76094: GO 76008
76096: POP
76097: POP
// result := hex ;
76098: LD_ADDR_VAR 0 3
76102: PUSH
76103: LD_VAR 0 8
76107: ST_TO_ADDR
// end ;
76108: LD_VAR 0 3
76112: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76113: LD_INT 0
76115: PPUSH
76116: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76117: LD_VAR 0 1
76121: NOT
76122: IFTRUE 76161
76124: PUSH
76125: LD_VAR 0 1
76129: PUSH
76130: LD_INT 21
76132: PUSH
76133: LD_INT 2
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: LD_INT 23
76142: PUSH
76143: LD_INT 2
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PPUSH
76154: CALL_OW 69
76158: IN
76159: NOT
76160: OR
76161: IFFALSE 76165
// exit ;
76163: GO 76212
// for i = 1 to 3 do
76165: LD_ADDR_VAR 0 3
76169: PUSH
76170: DOUBLE
76171: LD_INT 1
76173: DEC
76174: ST_TO_ADDR
76175: LD_INT 3
76177: PUSH
76178: FOR_TO
76179: IFFALSE 76210
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76181: LD_VAR 0 1
76185: PPUSH
76186: CALL_OW 250
76190: PPUSH
76191: LD_VAR 0 1
76195: PPUSH
76196: CALL_OW 251
76200: PPUSH
76201: LD_INT 1
76203: PPUSH
76204: CALL_OW 453
76208: GO 76178
76210: POP
76211: POP
// end ;
76212: LD_VAR 0 2
76216: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76217: LD_INT 0
76219: PPUSH
76220: PPUSH
76221: PPUSH
76222: PPUSH
76223: PPUSH
76224: PPUSH
// if not unit or not enemy_unit then
76225: LD_VAR 0 1
76229: NOT
76230: IFTRUE 76239
76232: PUSH
76233: LD_VAR 0 2
76237: NOT
76238: OR
76239: IFFALSE 76243
// exit ;
76241: GO 76724
// if GetLives ( i ) < 250 then
76243: LD_VAR 0 4
76247: PPUSH
76248: CALL_OW 256
76252: PUSH
76253: LD_INT 250
76255: LESS
76256: IFFALSE 76269
// begin ComAutodestruct ( i ) ;
76258: LD_VAR 0 4
76262: PPUSH
76263: CALL 76113 0 1
// exit ;
76267: GO 76724
// end ; x := GetX ( enemy_unit ) ;
76269: LD_ADDR_VAR 0 7
76273: PUSH
76274: LD_VAR 0 2
76278: PPUSH
76279: CALL_OW 250
76283: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76284: LD_ADDR_VAR 0 8
76288: PUSH
76289: LD_VAR 0 2
76293: PPUSH
76294: CALL_OW 251
76298: ST_TO_ADDR
// if not x or not y then
76299: LD_VAR 0 7
76303: NOT
76304: IFTRUE 76313
76306: PUSH
76307: LD_VAR 0 8
76311: NOT
76312: OR
76313: IFFALSE 76317
// exit ;
76315: GO 76724
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76317: LD_ADDR_VAR 0 6
76321: PUSH
76322: LD_VAR 0 7
76326: PPUSH
76327: LD_INT 0
76329: PPUSH
76330: LD_INT 4
76332: PPUSH
76333: CALL_OW 272
76337: PUSH
76338: LD_VAR 0 8
76342: PPUSH
76343: LD_INT 0
76345: PPUSH
76346: LD_INT 4
76348: PPUSH
76349: CALL_OW 273
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_VAR 0 7
76362: PPUSH
76363: LD_INT 1
76365: PPUSH
76366: LD_INT 4
76368: PPUSH
76369: CALL_OW 272
76373: PUSH
76374: LD_VAR 0 8
76378: PPUSH
76379: LD_INT 1
76381: PPUSH
76382: LD_INT 4
76384: PPUSH
76385: CALL_OW 273
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: PUSH
76394: LD_VAR 0 7
76398: PPUSH
76399: LD_INT 2
76401: PPUSH
76402: LD_INT 4
76404: PPUSH
76405: CALL_OW 272
76409: PUSH
76410: LD_VAR 0 8
76414: PPUSH
76415: LD_INT 2
76417: PPUSH
76418: LD_INT 4
76420: PPUSH
76421: CALL_OW 273
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_VAR 0 7
76434: PPUSH
76435: LD_INT 3
76437: PPUSH
76438: LD_INT 4
76440: PPUSH
76441: CALL_OW 272
76445: PUSH
76446: LD_VAR 0 8
76450: PPUSH
76451: LD_INT 3
76453: PPUSH
76454: LD_INT 4
76456: PPUSH
76457: CALL_OW 273
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: PUSH
76466: LD_VAR 0 7
76470: PPUSH
76471: LD_INT 4
76473: PPUSH
76474: LD_INT 4
76476: PPUSH
76477: CALL_OW 272
76481: PUSH
76482: LD_VAR 0 8
76486: PPUSH
76487: LD_INT 4
76489: PPUSH
76490: LD_INT 4
76492: PPUSH
76493: CALL_OW 273
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: PUSH
76502: LD_VAR 0 7
76506: PPUSH
76507: LD_INT 5
76509: PPUSH
76510: LD_INT 4
76512: PPUSH
76513: CALL_OW 272
76517: PUSH
76518: LD_VAR 0 8
76522: PPUSH
76523: LD_INT 5
76525: PPUSH
76526: LD_INT 4
76528: PPUSH
76529: CALL_OW 273
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: ST_TO_ADDR
// for i = tmp downto 1 do
76546: LD_ADDR_VAR 0 4
76550: PUSH
76551: DOUBLE
76552: LD_VAR 0 6
76556: INC
76557: ST_TO_ADDR
76558: LD_INT 1
76560: PUSH
76561: FOR_DOWNTO
76562: IFFALSE 76665
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76564: LD_VAR 0 6
76568: PUSH
76569: LD_VAR 0 4
76573: ARRAY
76574: PUSH
76575: LD_INT 1
76577: ARRAY
76578: PPUSH
76579: LD_VAR 0 6
76583: PUSH
76584: LD_VAR 0 4
76588: ARRAY
76589: PUSH
76590: LD_INT 2
76592: ARRAY
76593: PPUSH
76594: CALL_OW 488
76598: NOT
76599: IFTRUE 76641
76601: PUSH
76602: LD_VAR 0 6
76606: PUSH
76607: LD_VAR 0 4
76611: ARRAY
76612: PUSH
76613: LD_INT 1
76615: ARRAY
76616: PPUSH
76617: LD_VAR 0 6
76621: PUSH
76622: LD_VAR 0 4
76626: ARRAY
76627: PUSH
76628: LD_INT 2
76630: ARRAY
76631: PPUSH
76632: CALL_OW 428
76636: PUSH
76637: LD_INT 0
76639: NONEQUAL
76640: OR
76641: IFFALSE 76663
// tmp := Delete ( tmp , i ) ;
76643: LD_ADDR_VAR 0 6
76647: PUSH
76648: LD_VAR 0 6
76652: PPUSH
76653: LD_VAR 0 4
76657: PPUSH
76658: CALL_OW 3
76662: ST_TO_ADDR
76663: GO 76561
76665: POP
76666: POP
// j := GetClosestHex ( unit , tmp ) ;
76667: LD_ADDR_VAR 0 5
76671: PUSH
76672: LD_VAR 0 1
76676: PPUSH
76677: LD_VAR 0 6
76681: PPUSH
76682: CALL 75959 0 2
76686: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76687: LD_VAR 0 1
76691: PPUSH
76692: LD_VAR 0 5
76696: PUSH
76697: LD_INT 1
76699: ARRAY
76700: PPUSH
76701: LD_VAR 0 5
76705: PUSH
76706: LD_INT 2
76708: ARRAY
76709: PPUSH
76710: CALL_OW 111
// result := j ;
76714: LD_ADDR_VAR 0 3
76718: PUSH
76719: LD_VAR 0 5
76723: ST_TO_ADDR
// end ;
76724: LD_VAR 0 3
76728: RET
// export function PrepareApemanSoldier ( ) ; begin
76729: LD_INT 0
76731: PPUSH
// uc_nation := 0 ;
76732: LD_ADDR_OWVAR 21
76736: PUSH
76737: LD_INT 0
76739: ST_TO_ADDR
// hc_sex := sex_male ;
76740: LD_ADDR_OWVAR 27
76744: PUSH
76745: LD_INT 1
76747: ST_TO_ADDR
// hc_name :=  ;
76748: LD_ADDR_OWVAR 26
76752: PUSH
76753: LD_STRING 
76755: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76756: LD_ADDR_OWVAR 28
76760: PUSH
76761: LD_INT 15
76763: ST_TO_ADDR
// hc_gallery :=  ;
76764: LD_ADDR_OWVAR 33
76768: PUSH
76769: LD_STRING 
76771: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76772: LD_ADDR_OWVAR 31
76776: PUSH
76777: LD_INT 0
76779: PPUSH
76780: LD_INT 3
76782: PPUSH
76783: CALL_OW 12
76787: PUSH
76788: LD_INT 0
76790: PPUSH
76791: LD_INT 3
76793: PPUSH
76794: CALL_OW 12
76798: PUSH
76799: LD_INT 0
76801: PUSH
76802: LD_INT 0
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76811: LD_ADDR_OWVAR 29
76815: PUSH
76816: LD_INT 10
76818: PUSH
76819: LD_INT 12
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: ST_TO_ADDR
// end ;
76826: LD_VAR 0 1
76830: RET
// export function PrepareApemanEngineer ( ) ; begin
76831: LD_INT 0
76833: PPUSH
// uc_nation := 0 ;
76834: LD_ADDR_OWVAR 21
76838: PUSH
76839: LD_INT 0
76841: ST_TO_ADDR
// hc_sex := sex_male ;
76842: LD_ADDR_OWVAR 27
76846: PUSH
76847: LD_INT 1
76849: ST_TO_ADDR
// hc_name :=  ;
76850: LD_ADDR_OWVAR 26
76854: PUSH
76855: LD_STRING 
76857: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76858: LD_ADDR_OWVAR 28
76862: PUSH
76863: LD_INT 16
76865: ST_TO_ADDR
// hc_gallery :=  ;
76866: LD_ADDR_OWVAR 33
76870: PUSH
76871: LD_STRING 
76873: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76874: LD_ADDR_OWVAR 31
76878: PUSH
76879: LD_INT 0
76881: PPUSH
76882: LD_INT 3
76884: PPUSH
76885: CALL_OW 12
76889: PUSH
76890: LD_INT 0
76892: PPUSH
76893: LD_INT 3
76895: PPUSH
76896: CALL_OW 12
76900: PUSH
76901: LD_INT 0
76903: PUSH
76904: LD_INT 0
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76913: LD_ADDR_OWVAR 29
76917: PUSH
76918: LD_INT 10
76920: PUSH
76921: LD_INT 12
76923: PUSH
76924: EMPTY
76925: LIST
76926: LIST
76927: ST_TO_ADDR
// end ;
76928: LD_VAR 0 1
76932: RET
// export function PrepareApeman ( agressivity ) ; begin
76933: LD_INT 0
76935: PPUSH
// uc_side := 0 ;
76936: LD_ADDR_OWVAR 20
76940: PUSH
76941: LD_INT 0
76943: ST_TO_ADDR
// uc_nation := 0 ;
76944: LD_ADDR_OWVAR 21
76948: PUSH
76949: LD_INT 0
76951: ST_TO_ADDR
// hc_sex := sex_male ;
76952: LD_ADDR_OWVAR 27
76956: PUSH
76957: LD_INT 1
76959: ST_TO_ADDR
// hc_class := class_apeman ;
76960: LD_ADDR_OWVAR 28
76964: PUSH
76965: LD_INT 12
76967: ST_TO_ADDR
// hc_gallery :=  ;
76968: LD_ADDR_OWVAR 33
76972: PUSH
76973: LD_STRING 
76975: ST_TO_ADDR
// hc_name :=  ;
76976: LD_ADDR_OWVAR 26
76980: PUSH
76981: LD_STRING 
76983: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76984: LD_ADDR_OWVAR 29
76988: PUSH
76989: LD_INT 10
76991: PUSH
76992: LD_INT 12
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: ST_TO_ADDR
// if agressivity = 0 then
76999: LD_VAR 0 1
77003: PUSH
77004: LD_INT 0
77006: EQUAL
77007: IFFALSE 77019
// hc_agressivity := 0 else
77009: LD_ADDR_OWVAR 35
77013: PUSH
77014: LD_INT 0
77016: ST_TO_ADDR
77017: GO 77040
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77019: LD_ADDR_OWVAR 35
77023: PUSH
77024: LD_VAR 0 1
77028: NEG
77029: PPUSH
77030: LD_VAR 0 1
77034: PPUSH
77035: CALL_OW 12
77039: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77040: LD_ADDR_OWVAR 31
77044: PUSH
77045: LD_INT 0
77047: PPUSH
77048: LD_INT 3
77050: PPUSH
77051: CALL_OW 12
77055: PUSH
77056: LD_INT 0
77058: PPUSH
77059: LD_INT 3
77061: PPUSH
77062: CALL_OW 12
77066: PUSH
77067: LD_INT 0
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: ST_TO_ADDR
// end ;
77079: LD_VAR 0 2
77083: RET
// export function PrepareTiger ( agressivity ) ; begin
77084: LD_INT 0
77086: PPUSH
// uc_side := 0 ;
77087: LD_ADDR_OWVAR 20
77091: PUSH
77092: LD_INT 0
77094: ST_TO_ADDR
// uc_nation := 0 ;
77095: LD_ADDR_OWVAR 21
77099: PUSH
77100: LD_INT 0
77102: ST_TO_ADDR
// InitHc ;
77103: CALL_OW 19
// hc_class := class_tiger ;
77107: LD_ADDR_OWVAR 28
77111: PUSH
77112: LD_INT 14
77114: ST_TO_ADDR
// hc_gallery :=  ;
77115: LD_ADDR_OWVAR 33
77119: PUSH
77120: LD_STRING 
77122: ST_TO_ADDR
// hc_name :=  ;
77123: LD_ADDR_OWVAR 26
77127: PUSH
77128: LD_STRING 
77130: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77131: LD_ADDR_OWVAR 35
77135: PUSH
77136: LD_VAR 0 1
77140: NEG
77141: PPUSH
77142: LD_VAR 0 1
77146: PPUSH
77147: CALL_OW 12
77151: ST_TO_ADDR
// end ;
77152: LD_VAR 0 2
77156: RET
// export function PrepareEnchidna ( ) ; begin
77157: LD_INT 0
77159: PPUSH
// uc_side := 0 ;
77160: LD_ADDR_OWVAR 20
77164: PUSH
77165: LD_INT 0
77167: ST_TO_ADDR
// uc_nation := 0 ;
77168: LD_ADDR_OWVAR 21
77172: PUSH
77173: LD_INT 0
77175: ST_TO_ADDR
// InitHc ;
77176: CALL_OW 19
// hc_class := class_baggie ;
77180: LD_ADDR_OWVAR 28
77184: PUSH
77185: LD_INT 13
77187: ST_TO_ADDR
// hc_gallery :=  ;
77188: LD_ADDR_OWVAR 33
77192: PUSH
77193: LD_STRING 
77195: ST_TO_ADDR
// hc_name :=  ;
77196: LD_ADDR_OWVAR 26
77200: PUSH
77201: LD_STRING 
77203: ST_TO_ADDR
// end ;
77204: LD_VAR 0 1
77208: RET
// export function PrepareFrog ( ) ; begin
77209: LD_INT 0
77211: PPUSH
// uc_side := 0 ;
77212: LD_ADDR_OWVAR 20
77216: PUSH
77217: LD_INT 0
77219: ST_TO_ADDR
// uc_nation := 0 ;
77220: LD_ADDR_OWVAR 21
77224: PUSH
77225: LD_INT 0
77227: ST_TO_ADDR
// InitHc ;
77228: CALL_OW 19
// hc_class := class_frog ;
77232: LD_ADDR_OWVAR 28
77236: PUSH
77237: LD_INT 19
77239: ST_TO_ADDR
// hc_gallery :=  ;
77240: LD_ADDR_OWVAR 33
77244: PUSH
77245: LD_STRING 
77247: ST_TO_ADDR
// hc_name :=  ;
77248: LD_ADDR_OWVAR 26
77252: PUSH
77253: LD_STRING 
77255: ST_TO_ADDR
// end ;
77256: LD_VAR 0 1
77260: RET
// export function PrepareFish ( ) ; begin
77261: LD_INT 0
77263: PPUSH
// uc_side := 0 ;
77264: LD_ADDR_OWVAR 20
77268: PUSH
77269: LD_INT 0
77271: ST_TO_ADDR
// uc_nation := 0 ;
77272: LD_ADDR_OWVAR 21
77276: PUSH
77277: LD_INT 0
77279: ST_TO_ADDR
// InitHc ;
77280: CALL_OW 19
// hc_class := class_fish ;
77284: LD_ADDR_OWVAR 28
77288: PUSH
77289: LD_INT 20
77291: ST_TO_ADDR
// hc_gallery :=  ;
77292: LD_ADDR_OWVAR 33
77296: PUSH
77297: LD_STRING 
77299: ST_TO_ADDR
// hc_name :=  ;
77300: LD_ADDR_OWVAR 26
77304: PUSH
77305: LD_STRING 
77307: ST_TO_ADDR
// end ;
77308: LD_VAR 0 1
77312: RET
// export function PrepareBird ( ) ; begin
77313: LD_INT 0
77315: PPUSH
// uc_side := 0 ;
77316: LD_ADDR_OWVAR 20
77320: PUSH
77321: LD_INT 0
77323: ST_TO_ADDR
// uc_nation := 0 ;
77324: LD_ADDR_OWVAR 21
77328: PUSH
77329: LD_INT 0
77331: ST_TO_ADDR
// InitHc ;
77332: CALL_OW 19
// hc_class := class_phororhacos ;
77336: LD_ADDR_OWVAR 28
77340: PUSH
77341: LD_INT 18
77343: ST_TO_ADDR
// hc_gallery :=  ;
77344: LD_ADDR_OWVAR 33
77348: PUSH
77349: LD_STRING 
77351: ST_TO_ADDR
// hc_name :=  ;
77352: LD_ADDR_OWVAR 26
77356: PUSH
77357: LD_STRING 
77359: ST_TO_ADDR
// end ;
77360: LD_VAR 0 1
77364: RET
// export function PrepareHorse ( ) ; begin
77365: LD_INT 0
77367: PPUSH
// uc_side := 0 ;
77368: LD_ADDR_OWVAR 20
77372: PUSH
77373: LD_INT 0
77375: ST_TO_ADDR
// uc_nation := 0 ;
77376: LD_ADDR_OWVAR 21
77380: PUSH
77381: LD_INT 0
77383: ST_TO_ADDR
// InitHc ;
77384: CALL_OW 19
// hc_class := class_horse ;
77388: LD_ADDR_OWVAR 28
77392: PUSH
77393: LD_INT 21
77395: ST_TO_ADDR
// hc_gallery :=  ;
77396: LD_ADDR_OWVAR 33
77400: PUSH
77401: LD_STRING 
77403: ST_TO_ADDR
// hc_name :=  ;
77404: LD_ADDR_OWVAR 26
77408: PUSH
77409: LD_STRING 
77411: ST_TO_ADDR
// end ;
77412: LD_VAR 0 1
77416: RET
// export function PrepareMastodont ( ) ; begin
77417: LD_INT 0
77419: PPUSH
// uc_side := 0 ;
77420: LD_ADDR_OWVAR 20
77424: PUSH
77425: LD_INT 0
77427: ST_TO_ADDR
// uc_nation := 0 ;
77428: LD_ADDR_OWVAR 21
77432: PUSH
77433: LD_INT 0
77435: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77436: LD_ADDR_OWVAR 37
77440: PUSH
77441: LD_INT 31
77443: ST_TO_ADDR
// vc_control := control_rider ;
77444: LD_ADDR_OWVAR 38
77448: PUSH
77449: LD_INT 4
77451: ST_TO_ADDR
// end ;
77452: LD_VAR 0 1
77456: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77457: LD_INT 0
77459: PPUSH
77460: PPUSH
77461: PPUSH
// uc_side = 0 ;
77462: LD_ADDR_OWVAR 20
77466: PUSH
77467: LD_INT 0
77469: ST_TO_ADDR
// uc_nation = 0 ;
77470: LD_ADDR_OWVAR 21
77474: PUSH
77475: LD_INT 0
77477: ST_TO_ADDR
// InitHc_All ( ) ;
77478: CALL_OW 584
// InitVc ;
77482: CALL_OW 20
// if mastodonts then
77486: LD_VAR 0 6
77490: IFFALSE 77557
// for i = 1 to mastodonts do
77492: LD_ADDR_VAR 0 11
77496: PUSH
77497: DOUBLE
77498: LD_INT 1
77500: DEC
77501: ST_TO_ADDR
77502: LD_VAR 0 6
77506: PUSH
77507: FOR_TO
77508: IFFALSE 77555
// begin vc_chassis := 31 ;
77510: LD_ADDR_OWVAR 37
77514: PUSH
77515: LD_INT 31
77517: ST_TO_ADDR
// vc_control := control_rider ;
77518: LD_ADDR_OWVAR 38
77522: PUSH
77523: LD_INT 4
77525: ST_TO_ADDR
// animal := CreateVehicle ;
77526: LD_ADDR_VAR 0 12
77530: PUSH
77531: CALL_OW 45
77535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77536: LD_VAR 0 12
77540: PPUSH
77541: LD_VAR 0 8
77545: PPUSH
77546: LD_INT 0
77548: PPUSH
77549: CALL 79699 0 3
// end ;
77553: GO 77507
77555: POP
77556: POP
// if horses then
77557: LD_VAR 0 5
77561: IFFALSE 77628
// for i = 1 to horses do
77563: LD_ADDR_VAR 0 11
77567: PUSH
77568: DOUBLE
77569: LD_INT 1
77571: DEC
77572: ST_TO_ADDR
77573: LD_VAR 0 5
77577: PUSH
77578: FOR_TO
77579: IFFALSE 77626
// begin hc_class := 21 ;
77581: LD_ADDR_OWVAR 28
77585: PUSH
77586: LD_INT 21
77588: ST_TO_ADDR
// hc_gallery :=  ;
77589: LD_ADDR_OWVAR 33
77593: PUSH
77594: LD_STRING 
77596: ST_TO_ADDR
// animal := CreateHuman ;
77597: LD_ADDR_VAR 0 12
77601: PUSH
77602: CALL_OW 44
77606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77607: LD_VAR 0 12
77611: PPUSH
77612: LD_VAR 0 8
77616: PPUSH
77617: LD_INT 0
77619: PPUSH
77620: CALL 79699 0 3
// end ;
77624: GO 77578
77626: POP
77627: POP
// if birds then
77628: LD_VAR 0 1
77632: IFFALSE 77699
// for i = 1 to birds do
77634: LD_ADDR_VAR 0 11
77638: PUSH
77639: DOUBLE
77640: LD_INT 1
77642: DEC
77643: ST_TO_ADDR
77644: LD_VAR 0 1
77648: PUSH
77649: FOR_TO
77650: IFFALSE 77697
// begin hc_class := 18 ;
77652: LD_ADDR_OWVAR 28
77656: PUSH
77657: LD_INT 18
77659: ST_TO_ADDR
// hc_gallery =  ;
77660: LD_ADDR_OWVAR 33
77664: PUSH
77665: LD_STRING 
77667: ST_TO_ADDR
// animal := CreateHuman ;
77668: LD_ADDR_VAR 0 12
77672: PUSH
77673: CALL_OW 44
77677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77678: LD_VAR 0 12
77682: PPUSH
77683: LD_VAR 0 8
77687: PPUSH
77688: LD_INT 0
77690: PPUSH
77691: CALL 79699 0 3
// end ;
77695: GO 77649
77697: POP
77698: POP
// if tigers then
77699: LD_VAR 0 2
77703: IFFALSE 77787
// for i = 1 to tigers do
77705: LD_ADDR_VAR 0 11
77709: PUSH
77710: DOUBLE
77711: LD_INT 1
77713: DEC
77714: ST_TO_ADDR
77715: LD_VAR 0 2
77719: PUSH
77720: FOR_TO
77721: IFFALSE 77785
// begin hc_class = class_tiger ;
77723: LD_ADDR_OWVAR 28
77727: PUSH
77728: LD_INT 14
77730: ST_TO_ADDR
// hc_gallery =  ;
77731: LD_ADDR_OWVAR 33
77735: PUSH
77736: LD_STRING 
77738: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77739: LD_ADDR_OWVAR 35
77743: PUSH
77744: LD_INT 7
77746: NEG
77747: PPUSH
77748: LD_INT 7
77750: PPUSH
77751: CALL_OW 12
77755: ST_TO_ADDR
// animal := CreateHuman ;
77756: LD_ADDR_VAR 0 12
77760: PUSH
77761: CALL_OW 44
77765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77766: LD_VAR 0 12
77770: PPUSH
77771: LD_VAR 0 8
77775: PPUSH
77776: LD_INT 0
77778: PPUSH
77779: CALL 79699 0 3
// end ;
77783: GO 77720
77785: POP
77786: POP
// if apemans then
77787: LD_VAR 0 3
77791: IFFALSE 77914
// for i = 1 to apemans do
77793: LD_ADDR_VAR 0 11
77797: PUSH
77798: DOUBLE
77799: LD_INT 1
77801: DEC
77802: ST_TO_ADDR
77803: LD_VAR 0 3
77807: PUSH
77808: FOR_TO
77809: IFFALSE 77912
// begin hc_class = class_apeman ;
77811: LD_ADDR_OWVAR 28
77815: PUSH
77816: LD_INT 12
77818: ST_TO_ADDR
// hc_gallery =  ;
77819: LD_ADDR_OWVAR 33
77823: PUSH
77824: LD_STRING 
77826: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77827: LD_ADDR_OWVAR 35
77831: PUSH
77832: LD_INT 2
77834: NEG
77835: PPUSH
77836: LD_INT 2
77838: PPUSH
77839: CALL_OW 12
77843: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77844: LD_ADDR_OWVAR 31
77848: PUSH
77849: LD_INT 1
77851: PPUSH
77852: LD_INT 3
77854: PPUSH
77855: CALL_OW 12
77859: PUSH
77860: LD_INT 1
77862: PPUSH
77863: LD_INT 3
77865: PPUSH
77866: CALL_OW 12
77870: PUSH
77871: LD_INT 0
77873: PUSH
77874: LD_INT 0
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: ST_TO_ADDR
// animal := CreateHuman ;
77883: LD_ADDR_VAR 0 12
77887: PUSH
77888: CALL_OW 44
77892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77893: LD_VAR 0 12
77897: PPUSH
77898: LD_VAR 0 8
77902: PPUSH
77903: LD_INT 0
77905: PPUSH
77906: CALL 79699 0 3
// end ;
77910: GO 77808
77912: POP
77913: POP
// if enchidnas then
77914: LD_VAR 0 4
77918: IFFALSE 77985
// for i = 1 to enchidnas do
77920: LD_ADDR_VAR 0 11
77924: PUSH
77925: DOUBLE
77926: LD_INT 1
77928: DEC
77929: ST_TO_ADDR
77930: LD_VAR 0 4
77934: PUSH
77935: FOR_TO
77936: IFFALSE 77983
// begin hc_class = 13 ;
77938: LD_ADDR_OWVAR 28
77942: PUSH
77943: LD_INT 13
77945: ST_TO_ADDR
// hc_gallery =  ;
77946: LD_ADDR_OWVAR 33
77950: PUSH
77951: LD_STRING 
77953: ST_TO_ADDR
// animal := CreateHuman ;
77954: LD_ADDR_VAR 0 12
77958: PUSH
77959: CALL_OW 44
77963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77964: LD_VAR 0 12
77968: PPUSH
77969: LD_VAR 0 8
77973: PPUSH
77974: LD_INT 0
77976: PPUSH
77977: CALL 79699 0 3
// end ;
77981: GO 77935
77983: POP
77984: POP
// if fishes then
77985: LD_VAR 0 7
77989: IFFALSE 78056
// for i = 1 to fishes do
77991: LD_ADDR_VAR 0 11
77995: PUSH
77996: DOUBLE
77997: LD_INT 1
77999: DEC
78000: ST_TO_ADDR
78001: LD_VAR 0 7
78005: PUSH
78006: FOR_TO
78007: IFFALSE 78054
// begin hc_class = 20 ;
78009: LD_ADDR_OWVAR 28
78013: PUSH
78014: LD_INT 20
78016: ST_TO_ADDR
// hc_gallery =  ;
78017: LD_ADDR_OWVAR 33
78021: PUSH
78022: LD_STRING 
78024: ST_TO_ADDR
// animal := CreateHuman ;
78025: LD_ADDR_VAR 0 12
78029: PUSH
78030: CALL_OW 44
78034: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78035: LD_VAR 0 12
78039: PPUSH
78040: LD_VAR 0 9
78044: PPUSH
78045: LD_INT 0
78047: PPUSH
78048: CALL 79699 0 3
// end ;
78052: GO 78006
78054: POP
78055: POP
// end ;
78056: LD_VAR 0 10
78060: RET
// export function WantHeal ( sci , unit ) ; begin
78061: LD_INT 0
78063: PPUSH
// if GetTaskList ( sci ) > 0 then
78064: LD_VAR 0 1
78068: PPUSH
78069: CALL_OW 437
78073: PUSH
78074: LD_INT 0
78076: GREATER
78077: IFFALSE 78149
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78079: LD_VAR 0 1
78083: PPUSH
78084: CALL_OW 437
78088: PUSH
78089: LD_INT 1
78091: ARRAY
78092: PUSH
78093: LD_INT 1
78095: ARRAY
78096: PUSH
78097: LD_STRING l
78099: EQUAL
78100: IFFALSE 78127
78102: PUSH
78103: LD_VAR 0 1
78107: PPUSH
78108: CALL_OW 437
78112: PUSH
78113: LD_INT 1
78115: ARRAY
78116: PUSH
78117: LD_INT 4
78119: ARRAY
78120: PUSH
78121: LD_VAR 0 2
78125: EQUAL
78126: AND
78127: IFFALSE 78139
// result := true else
78129: LD_ADDR_VAR 0 3
78133: PUSH
78134: LD_INT 1
78136: ST_TO_ADDR
78137: GO 78147
// result := false ;
78139: LD_ADDR_VAR 0 3
78143: PUSH
78144: LD_INT 0
78146: ST_TO_ADDR
// end else
78147: GO 78157
// result := false ;
78149: LD_ADDR_VAR 0 3
78153: PUSH
78154: LD_INT 0
78156: ST_TO_ADDR
// end ;
78157: LD_VAR 0 3
78161: RET
// export function HealTarget ( sci ) ; begin
78162: LD_INT 0
78164: PPUSH
// if not sci then
78165: LD_VAR 0 1
78169: NOT
78170: IFFALSE 78174
// exit ;
78172: GO 78239
// result := 0 ;
78174: LD_ADDR_VAR 0 2
78178: PUSH
78179: LD_INT 0
78181: ST_TO_ADDR
// if GetTaskList ( sci ) then
78182: LD_VAR 0 1
78186: PPUSH
78187: CALL_OW 437
78191: IFFALSE 78239
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78193: LD_VAR 0 1
78197: PPUSH
78198: CALL_OW 437
78202: PUSH
78203: LD_INT 1
78205: ARRAY
78206: PUSH
78207: LD_INT 1
78209: ARRAY
78210: PUSH
78211: LD_STRING l
78213: EQUAL
78214: IFFALSE 78239
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78216: LD_ADDR_VAR 0 2
78220: PUSH
78221: LD_VAR 0 1
78225: PPUSH
78226: CALL_OW 437
78230: PUSH
78231: LD_INT 1
78233: ARRAY
78234: PUSH
78235: LD_INT 4
78237: ARRAY
78238: ST_TO_ADDR
// end ;
78239: LD_VAR 0 2
78243: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78244: LD_INT 0
78246: PPUSH
78247: PPUSH
78248: PPUSH
78249: PPUSH
// if not base_units then
78250: LD_VAR 0 1
78254: NOT
78255: IFFALSE 78259
// exit ;
78257: GO 78346
// result := false ;
78259: LD_ADDR_VAR 0 2
78263: PUSH
78264: LD_INT 0
78266: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78267: LD_ADDR_VAR 0 5
78271: PUSH
78272: LD_VAR 0 1
78276: PPUSH
78277: LD_INT 21
78279: PUSH
78280: LD_INT 3
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: PPUSH
78287: CALL_OW 72
78291: ST_TO_ADDR
// if not tmp then
78292: LD_VAR 0 5
78296: NOT
78297: IFFALSE 78301
// exit ;
78299: GO 78346
// for i in tmp do
78301: LD_ADDR_VAR 0 3
78305: PUSH
78306: LD_VAR 0 5
78310: PUSH
78311: FOR_IN
78312: IFFALSE 78344
// begin result := EnemyInRange ( i , 22 ) ;
78314: LD_ADDR_VAR 0 2
78318: PUSH
78319: LD_VAR 0 3
78323: PPUSH
78324: LD_INT 22
78326: PPUSH
78327: CALL 75761 0 2
78331: ST_TO_ADDR
// if result then
78332: LD_VAR 0 2
78336: IFFALSE 78342
// exit ;
78338: POP
78339: POP
78340: GO 78346
// end ;
78342: GO 78311
78344: POP
78345: POP
// end ;
78346: LD_VAR 0 2
78350: RET
// export function FilterByTag ( units , tag ) ; begin
78351: LD_INT 0
78353: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78354: LD_ADDR_VAR 0 3
78358: PUSH
78359: LD_VAR 0 1
78363: PPUSH
78364: LD_INT 120
78366: PUSH
78367: LD_VAR 0 2
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PPUSH
78376: CALL_OW 72
78380: ST_TO_ADDR
// end ;
78381: LD_VAR 0 3
78385: RET
// export function IsDriver ( un ) ; begin
78386: LD_INT 0
78388: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78389: LD_ADDR_VAR 0 2
78393: PUSH
78394: LD_VAR 0 1
78398: PUSH
78399: LD_INT 55
78401: PUSH
78402: EMPTY
78403: LIST
78404: PPUSH
78405: CALL_OW 69
78409: IN
78410: ST_TO_ADDR
// end ;
78411: LD_VAR 0 2
78415: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78416: LD_INT 0
78418: PPUSH
78419: PPUSH
// list := [ ] ;
78420: LD_ADDR_VAR 0 5
78424: PUSH
78425: EMPTY
78426: ST_TO_ADDR
// case d of 0 :
78427: LD_VAR 0 3
78431: PUSH
78432: LD_INT 0
78434: DOUBLE
78435: EQUAL
78436: IFTRUE 78440
78438: GO 78573
78440: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78441: LD_ADDR_VAR 0 5
78445: PUSH
78446: LD_VAR 0 1
78450: PUSH
78451: LD_INT 4
78453: MINUS
78454: PUSH
78455: LD_VAR 0 2
78459: PUSH
78460: LD_INT 4
78462: MINUS
78463: PUSH
78464: LD_INT 2
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: LIST
78471: PUSH
78472: LD_VAR 0 1
78476: PUSH
78477: LD_INT 3
78479: MINUS
78480: PUSH
78481: LD_VAR 0 2
78485: PUSH
78486: LD_INT 1
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: LIST
78493: PUSH
78494: LD_VAR 0 1
78498: PUSH
78499: LD_INT 4
78501: PLUS
78502: PUSH
78503: LD_VAR 0 2
78507: PUSH
78508: LD_INT 4
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: LIST
78515: PUSH
78516: LD_VAR 0 1
78520: PUSH
78521: LD_INT 3
78523: PLUS
78524: PUSH
78525: LD_VAR 0 2
78529: PUSH
78530: LD_INT 3
78532: PLUS
78533: PUSH
78534: LD_INT 5
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: LIST
78541: PUSH
78542: LD_VAR 0 1
78546: PUSH
78547: LD_VAR 0 2
78551: PUSH
78552: LD_INT 4
78554: PLUS
78555: PUSH
78556: LD_INT 0
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: LIST
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: LIST
78568: LIST
78569: LIST
78570: ST_TO_ADDR
// end ; 1 :
78571: GO 79271
78573: LD_INT 1
78575: DOUBLE
78576: EQUAL
78577: IFTRUE 78581
78579: GO 78714
78581: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78582: LD_ADDR_VAR 0 5
78586: PUSH
78587: LD_VAR 0 1
78591: PUSH
78592: LD_VAR 0 2
78596: PUSH
78597: LD_INT 4
78599: MINUS
78600: PUSH
78601: LD_INT 3
78603: PUSH
78604: EMPTY
78605: LIST
78606: LIST
78607: LIST
78608: PUSH
78609: LD_VAR 0 1
78613: PUSH
78614: LD_INT 3
78616: MINUS
78617: PUSH
78618: LD_VAR 0 2
78622: PUSH
78623: LD_INT 3
78625: MINUS
78626: PUSH
78627: LD_INT 2
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: LIST
78634: PUSH
78635: LD_VAR 0 1
78639: PUSH
78640: LD_INT 4
78642: MINUS
78643: PUSH
78644: LD_VAR 0 2
78648: PUSH
78649: LD_INT 1
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: LIST
78656: PUSH
78657: LD_VAR 0 1
78661: PUSH
78662: LD_VAR 0 2
78666: PUSH
78667: LD_INT 3
78669: PLUS
78670: PUSH
78671: LD_INT 0
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: LIST
78678: PUSH
78679: LD_VAR 0 1
78683: PUSH
78684: LD_INT 4
78686: PLUS
78687: PUSH
78688: LD_VAR 0 2
78692: PUSH
78693: LD_INT 4
78695: PLUS
78696: PUSH
78697: LD_INT 5
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: LIST
78704: PUSH
78705: EMPTY
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: ST_TO_ADDR
// end ; 2 :
78712: GO 79271
78714: LD_INT 2
78716: DOUBLE
78717: EQUAL
78718: IFTRUE 78722
78720: GO 78851
78722: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78723: LD_ADDR_VAR 0 5
78727: PUSH
78728: LD_VAR 0 1
78732: PUSH
78733: LD_VAR 0 2
78737: PUSH
78738: LD_INT 3
78740: MINUS
78741: PUSH
78742: LD_INT 3
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: LIST
78749: PUSH
78750: LD_VAR 0 1
78754: PUSH
78755: LD_INT 4
78757: PLUS
78758: PUSH
78759: LD_VAR 0 2
78763: PUSH
78764: LD_INT 4
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: LIST
78771: PUSH
78772: LD_VAR 0 1
78776: PUSH
78777: LD_VAR 0 2
78781: PUSH
78782: LD_INT 4
78784: PLUS
78785: PUSH
78786: LD_INT 0
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: LIST
78793: PUSH
78794: LD_VAR 0 1
78798: PUSH
78799: LD_INT 3
78801: MINUS
78802: PUSH
78803: LD_VAR 0 2
78807: PUSH
78808: LD_INT 1
78810: PUSH
78811: EMPTY
78812: LIST
78813: LIST
78814: LIST
78815: PUSH
78816: LD_VAR 0 1
78820: PUSH
78821: LD_INT 4
78823: MINUS
78824: PUSH
78825: LD_VAR 0 2
78829: PUSH
78830: LD_INT 4
78832: MINUS
78833: PUSH
78834: LD_INT 2
78836: PUSH
78837: EMPTY
78838: LIST
78839: LIST
78840: LIST
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: ST_TO_ADDR
// end ; 3 :
78849: GO 79271
78851: LD_INT 3
78853: DOUBLE
78854: EQUAL
78855: IFTRUE 78859
78857: GO 78992
78859: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78860: LD_ADDR_VAR 0 5
78864: PUSH
78865: LD_VAR 0 1
78869: PUSH
78870: LD_INT 3
78872: PLUS
78873: PUSH
78874: LD_VAR 0 2
78878: PUSH
78879: LD_INT 4
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: LIST
78886: PUSH
78887: LD_VAR 0 1
78891: PUSH
78892: LD_INT 4
78894: PLUS
78895: PUSH
78896: LD_VAR 0 2
78900: PUSH
78901: LD_INT 4
78903: PLUS
78904: PUSH
78905: LD_INT 5
78907: PUSH
78908: EMPTY
78909: LIST
78910: LIST
78911: LIST
78912: PUSH
78913: LD_VAR 0 1
78917: PUSH
78918: LD_INT 4
78920: MINUS
78921: PUSH
78922: LD_VAR 0 2
78926: PUSH
78927: LD_INT 1
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: LIST
78934: PUSH
78935: LD_VAR 0 1
78939: PUSH
78940: LD_VAR 0 2
78944: PUSH
78945: LD_INT 4
78947: MINUS
78948: PUSH
78949: LD_INT 3
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: LIST
78956: PUSH
78957: LD_VAR 0 1
78961: PUSH
78962: LD_INT 3
78964: MINUS
78965: PUSH
78966: LD_VAR 0 2
78970: PUSH
78971: LD_INT 3
78973: MINUS
78974: PUSH
78975: LD_INT 2
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: LIST
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: LIST
78987: LIST
78988: LIST
78989: ST_TO_ADDR
// end ; 4 :
78990: GO 79271
78992: LD_INT 4
78994: DOUBLE
78995: EQUAL
78996: IFTRUE 79000
78998: GO 79133
79000: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79001: LD_ADDR_VAR 0 5
79005: PUSH
79006: LD_VAR 0 1
79010: PUSH
79011: LD_VAR 0 2
79015: PUSH
79016: LD_INT 4
79018: PLUS
79019: PUSH
79020: LD_INT 0
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: LIST
79027: PUSH
79028: LD_VAR 0 1
79032: PUSH
79033: LD_INT 3
79035: PLUS
79036: PUSH
79037: LD_VAR 0 2
79041: PUSH
79042: LD_INT 3
79044: PLUS
79045: PUSH
79046: LD_INT 5
79048: PUSH
79049: EMPTY
79050: LIST
79051: LIST
79052: LIST
79053: PUSH
79054: LD_VAR 0 1
79058: PUSH
79059: LD_INT 4
79061: PLUS
79062: PUSH
79063: LD_VAR 0 2
79067: PUSH
79068: LD_INT 4
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: LIST
79075: PUSH
79076: LD_VAR 0 1
79080: PUSH
79081: LD_VAR 0 2
79085: PUSH
79086: LD_INT 3
79088: MINUS
79089: PUSH
79090: LD_INT 3
79092: PUSH
79093: EMPTY
79094: LIST
79095: LIST
79096: LIST
79097: PUSH
79098: LD_VAR 0 1
79102: PUSH
79103: LD_INT 4
79105: MINUS
79106: PUSH
79107: LD_VAR 0 2
79111: PUSH
79112: LD_INT 4
79114: MINUS
79115: PUSH
79116: LD_INT 2
79118: PUSH
79119: EMPTY
79120: LIST
79121: LIST
79122: LIST
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: LIST
79128: LIST
79129: LIST
79130: ST_TO_ADDR
// end ; 5 :
79131: GO 79271
79133: LD_INT 5
79135: DOUBLE
79136: EQUAL
79137: IFTRUE 79141
79139: GO 79270
79141: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79142: LD_ADDR_VAR 0 5
79146: PUSH
79147: LD_VAR 0 1
79151: PUSH
79152: LD_INT 4
79154: MINUS
79155: PUSH
79156: LD_VAR 0 2
79160: PUSH
79161: LD_INT 1
79163: PUSH
79164: EMPTY
79165: LIST
79166: LIST
79167: LIST
79168: PUSH
79169: LD_VAR 0 1
79173: PUSH
79174: LD_VAR 0 2
79178: PUSH
79179: LD_INT 4
79181: MINUS
79182: PUSH
79183: LD_INT 3
79185: PUSH
79186: EMPTY
79187: LIST
79188: LIST
79189: LIST
79190: PUSH
79191: LD_VAR 0 1
79195: PUSH
79196: LD_INT 4
79198: PLUS
79199: PUSH
79200: LD_VAR 0 2
79204: PUSH
79205: LD_INT 4
79207: PLUS
79208: PUSH
79209: LD_INT 5
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: LIST
79216: PUSH
79217: LD_VAR 0 1
79221: PUSH
79222: LD_INT 3
79224: PLUS
79225: PUSH
79226: LD_VAR 0 2
79230: PUSH
79231: LD_INT 4
79233: PUSH
79234: EMPTY
79235: LIST
79236: LIST
79237: LIST
79238: PUSH
79239: LD_VAR 0 1
79243: PUSH
79244: LD_VAR 0 2
79248: PUSH
79249: LD_INT 3
79251: PLUS
79252: PUSH
79253: LD_INT 0
79255: PUSH
79256: EMPTY
79257: LIST
79258: LIST
79259: LIST
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: LIST
79265: LIST
79266: LIST
79267: ST_TO_ADDR
// end ; end ;
79268: GO 79271
79270: POP
// result := list ;
79271: LD_ADDR_VAR 0 4
79275: PUSH
79276: LD_VAR 0 5
79280: ST_TO_ADDR
// end ;
79281: LD_VAR 0 4
79285: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79286: LD_INT 0
79288: PPUSH
79289: PPUSH
79290: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79291: LD_VAR 0 1
79295: NOT
79296: IFTRUE 79324
79298: PUSH
79299: LD_VAR 0 2
79303: PUSH
79304: LD_INT 1
79306: PUSH
79307: LD_INT 2
79309: PUSH
79310: LD_INT 3
79312: PUSH
79313: LD_INT 4
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: IN
79322: NOT
79323: OR
79324: IFFALSE 79328
// exit ;
79326: GO 79411
// tmp := [ ] ;
79328: LD_ADDR_VAR 0 5
79332: PUSH
79333: EMPTY
79334: ST_TO_ADDR
// for i in units do
79335: LD_ADDR_VAR 0 4
79339: PUSH
79340: LD_VAR 0 1
79344: PUSH
79345: FOR_IN
79346: IFFALSE 79380
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79348: LD_ADDR_VAR 0 5
79352: PUSH
79353: LD_VAR 0 5
79357: PPUSH
79358: LD_VAR 0 4
79362: PPUSH
79363: LD_VAR 0 2
79367: PPUSH
79368: CALL_OW 259
79372: PPUSH
79373: CALL 80806 0 2
79377: ST_TO_ADDR
79378: GO 79345
79380: POP
79381: POP
// if not tmp then
79382: LD_VAR 0 5
79386: NOT
79387: IFFALSE 79391
// exit ;
79389: GO 79411
// result := SortListByListDesc ( units , tmp ) ;
79391: LD_ADDR_VAR 0 3
79395: PUSH
79396: LD_VAR 0 1
79400: PPUSH
79401: LD_VAR 0 5
79405: PPUSH
79406: CALL_OW 77
79410: ST_TO_ADDR
// end ;
79411: LD_VAR 0 3
79415: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79416: LD_INT 0
79418: PPUSH
79419: PPUSH
79420: PPUSH
// result := false ;
79421: LD_ADDR_VAR 0 3
79425: PUSH
79426: LD_INT 0
79428: ST_TO_ADDR
// if not building then
79429: LD_VAR 0 2
79433: NOT
79434: IFFALSE 79438
// exit ;
79436: GO 79582
// x := GetX ( building ) ;
79438: LD_ADDR_VAR 0 4
79442: PUSH
79443: LD_VAR 0 2
79447: PPUSH
79448: CALL_OW 250
79452: ST_TO_ADDR
// y := GetY ( building ) ;
79453: LD_ADDR_VAR 0 5
79457: PUSH
79458: LD_VAR 0 2
79462: PPUSH
79463: CALL_OW 251
79467: ST_TO_ADDR
// if not x or not y then
79468: LD_VAR 0 4
79472: NOT
79473: IFTRUE 79482
79475: PUSH
79476: LD_VAR 0 5
79480: NOT
79481: OR
79482: IFFALSE 79486
// exit ;
79484: GO 79582
// if GetTaskList ( unit ) then
79486: LD_VAR 0 1
79490: PPUSH
79491: CALL_OW 437
79495: IFFALSE 79582
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79497: LD_STRING e
79499: PUSH
79500: LD_VAR 0 1
79504: PPUSH
79505: CALL_OW 437
79509: PUSH
79510: LD_INT 1
79512: ARRAY
79513: PUSH
79514: LD_INT 1
79516: ARRAY
79517: EQUAL
79518: IFFALSE 79545
79520: PUSH
79521: LD_VAR 0 4
79525: PUSH
79526: LD_VAR 0 1
79530: PPUSH
79531: CALL_OW 437
79535: PUSH
79536: LD_INT 1
79538: ARRAY
79539: PUSH
79540: LD_INT 2
79542: ARRAY
79543: EQUAL
79544: AND
79545: IFFALSE 79572
79547: PUSH
79548: LD_VAR 0 5
79552: PUSH
79553: LD_VAR 0 1
79557: PPUSH
79558: CALL_OW 437
79562: PUSH
79563: LD_INT 1
79565: ARRAY
79566: PUSH
79567: LD_INT 3
79569: ARRAY
79570: EQUAL
79571: AND
79572: IFFALSE 79582
// result := true end ;
79574: LD_ADDR_VAR 0 3
79578: PUSH
79579: LD_INT 1
79581: ST_TO_ADDR
// end ;
79582: LD_VAR 0 3
79586: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79587: LD_INT 0
79589: PPUSH
// result := false ;
79590: LD_ADDR_VAR 0 4
79594: PUSH
79595: LD_INT 0
79597: ST_TO_ADDR
// if GetTaskList ( unit ) then
79598: LD_VAR 0 1
79602: PPUSH
79603: CALL_OW 437
79607: IFFALSE 79694
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79609: LD_STRING M
79611: PUSH
79612: LD_VAR 0 1
79616: PPUSH
79617: CALL_OW 437
79621: PUSH
79622: LD_INT 1
79624: ARRAY
79625: PUSH
79626: LD_INT 1
79628: ARRAY
79629: EQUAL
79630: IFFALSE 79657
79632: PUSH
79633: LD_VAR 0 2
79637: PUSH
79638: LD_VAR 0 1
79642: PPUSH
79643: CALL_OW 437
79647: PUSH
79648: LD_INT 1
79650: ARRAY
79651: PUSH
79652: LD_INT 2
79654: ARRAY
79655: EQUAL
79656: AND
79657: IFFALSE 79684
79659: PUSH
79660: LD_VAR 0 3
79664: PUSH
79665: LD_VAR 0 1
79669: PPUSH
79670: CALL_OW 437
79674: PUSH
79675: LD_INT 1
79677: ARRAY
79678: PUSH
79679: LD_INT 3
79681: ARRAY
79682: EQUAL
79683: AND
79684: IFFALSE 79694
// result := true ;
79686: LD_ADDR_VAR 0 4
79690: PUSH
79691: LD_INT 1
79693: ST_TO_ADDR
// end ; end ;
79694: LD_VAR 0 4
79698: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79699: LD_INT 0
79701: PPUSH
79702: PPUSH
79703: PPUSH
79704: PPUSH
// if not unit or not area then
79705: LD_VAR 0 1
79709: NOT
79710: IFTRUE 79719
79712: PUSH
79713: LD_VAR 0 2
79717: NOT
79718: OR
79719: IFFALSE 79723
// exit ;
79721: GO 79899
// tmp := AreaToList ( area , i ) ;
79723: LD_ADDR_VAR 0 6
79727: PUSH
79728: LD_VAR 0 2
79732: PPUSH
79733: LD_VAR 0 5
79737: PPUSH
79738: CALL_OW 517
79742: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79743: LD_ADDR_VAR 0 5
79747: PUSH
79748: DOUBLE
79749: LD_INT 1
79751: DEC
79752: ST_TO_ADDR
79753: LD_VAR 0 6
79757: PUSH
79758: LD_INT 1
79760: ARRAY
79761: PUSH
79762: FOR_TO
79763: IFFALSE 79897
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79765: LD_ADDR_VAR 0 7
79769: PUSH
79770: LD_VAR 0 6
79774: PUSH
79775: LD_INT 1
79777: ARRAY
79778: PUSH
79779: LD_VAR 0 5
79783: ARRAY
79784: PUSH
79785: LD_VAR 0 6
79789: PUSH
79790: LD_INT 2
79792: ARRAY
79793: PUSH
79794: LD_VAR 0 5
79798: ARRAY
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79804: LD_INT 92
79806: PUSH
79807: LD_VAR 0 7
79811: PUSH
79812: LD_INT 1
79814: ARRAY
79815: PUSH
79816: LD_VAR 0 7
79820: PUSH
79821: LD_INT 2
79823: ARRAY
79824: PUSH
79825: LD_INT 2
79827: PUSH
79828: EMPTY
79829: LIST
79830: LIST
79831: LIST
79832: LIST
79833: PPUSH
79834: CALL_OW 69
79838: PUSH
79839: LD_INT 0
79841: EQUAL
79842: IFFALSE 79895
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79844: LD_VAR 0 1
79848: PPUSH
79849: LD_VAR 0 7
79853: PUSH
79854: LD_INT 1
79856: ARRAY
79857: PPUSH
79858: LD_VAR 0 7
79862: PUSH
79863: LD_INT 2
79865: ARRAY
79866: PPUSH
79867: LD_VAR 0 3
79871: PPUSH
79872: CALL_OW 48
// result := IsPlaced ( unit ) ;
79876: LD_ADDR_VAR 0 4
79880: PUSH
79881: LD_VAR 0 1
79885: PPUSH
79886: CALL_OW 305
79890: ST_TO_ADDR
// exit ;
79891: POP
79892: POP
79893: GO 79899
// end ; end ;
79895: GO 79762
79897: POP
79898: POP
// end ;
79899: LD_VAR 0 4
79903: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79904: LD_INT 0
79906: PPUSH
79907: PPUSH
79908: PPUSH
// if not side or side > 8 then
79909: LD_VAR 0 1
79913: NOT
79914: IFTRUE 79926
79916: PUSH
79917: LD_VAR 0 1
79921: PUSH
79922: LD_INT 8
79924: GREATER
79925: OR
79926: IFFALSE 79930
// exit ;
79928: GO 80117
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79930: LD_ADDR_VAR 0 4
79934: PUSH
79935: LD_INT 22
79937: PUSH
79938: LD_VAR 0 1
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: PUSH
79947: LD_INT 21
79949: PUSH
79950: LD_INT 3
79952: PUSH
79953: EMPTY
79954: LIST
79955: LIST
79956: PUSH
79957: EMPTY
79958: LIST
79959: LIST
79960: PPUSH
79961: CALL_OW 69
79965: ST_TO_ADDR
// if not tmp then
79966: LD_VAR 0 4
79970: NOT
79971: IFFALSE 79975
// exit ;
79973: GO 80117
// enable_addtolog := true ;
79975: LD_ADDR_OWVAR 81
79979: PUSH
79980: LD_INT 1
79982: ST_TO_ADDR
// AddToLog ( [ ) ;
79983: LD_STRING [
79985: PPUSH
79986: CALL_OW 561
// for i in tmp do
79990: LD_ADDR_VAR 0 3
79994: PUSH
79995: LD_VAR 0 4
79999: PUSH
80000: FOR_IN
80001: IFFALSE 80108
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80003: LD_STRING [
80005: PUSH
80006: LD_VAR 0 3
80010: PPUSH
80011: CALL_OW 266
80015: STR
80016: PUSH
80017: LD_STRING , 
80019: STR
80020: PUSH
80021: LD_VAR 0 3
80025: PPUSH
80026: CALL_OW 250
80030: STR
80031: PUSH
80032: LD_STRING , 
80034: STR
80035: PUSH
80036: LD_VAR 0 3
80040: PPUSH
80041: CALL_OW 251
80045: STR
80046: PUSH
80047: LD_STRING , 
80049: STR
80050: PUSH
80051: LD_VAR 0 3
80055: PPUSH
80056: CALL_OW 254
80060: STR
80061: PUSH
80062: LD_STRING , 
80064: STR
80065: PUSH
80066: LD_VAR 0 3
80070: PPUSH
80071: LD_INT 1
80073: PPUSH
80074: CALL_OW 268
80078: STR
80079: PUSH
80080: LD_STRING , 
80082: STR
80083: PUSH
80084: LD_VAR 0 3
80088: PPUSH
80089: LD_INT 2
80091: PPUSH
80092: CALL_OW 268
80096: STR
80097: PUSH
80098: LD_STRING ],
80100: STR
80101: PPUSH
80102: CALL_OW 561
// end ;
80106: GO 80000
80108: POP
80109: POP
// AddToLog ( ]; ) ;
80110: LD_STRING ];
80112: PPUSH
80113: CALL_OW 561
// end ;
80117: LD_VAR 0 2
80121: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80122: LD_INT 0
80124: PPUSH
80125: PPUSH
80126: PPUSH
80127: PPUSH
80128: PPUSH
// if not area or not rate or not max then
80129: LD_VAR 0 1
80133: NOT
80134: IFTRUE 80143
80136: PUSH
80137: LD_VAR 0 2
80141: NOT
80142: OR
80143: IFTRUE 80152
80145: PUSH
80146: LD_VAR 0 4
80150: NOT
80151: OR
80152: IFFALSE 80156
// exit ;
80154: GO 80345
// while 1 do
80156: LD_INT 1
80158: IFFALSE 80345
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80160: LD_ADDR_VAR 0 9
80164: PUSH
80165: LD_VAR 0 1
80169: PPUSH
80170: LD_INT 1
80172: PPUSH
80173: CALL_OW 287
80177: PUSH
80178: LD_INT 10
80180: MUL
80181: ST_TO_ADDR
// r := rate / 10 ;
80182: LD_ADDR_VAR 0 7
80186: PUSH
80187: LD_VAR 0 2
80191: PUSH
80192: LD_INT 10
80194: DIVREAL
80195: ST_TO_ADDR
// time := 1 1$00 ;
80196: LD_ADDR_VAR 0 8
80200: PUSH
80201: LD_INT 2100
80203: ST_TO_ADDR
// if amount < min then
80204: LD_VAR 0 9
80208: PUSH
80209: LD_VAR 0 3
80213: LESS
80214: IFFALSE 80232
// r := r * 2 else
80216: LD_ADDR_VAR 0 7
80220: PUSH
80221: LD_VAR 0 7
80225: PUSH
80226: LD_INT 2
80228: MUL
80229: ST_TO_ADDR
80230: GO 80258
// if amount > max then
80232: LD_VAR 0 9
80236: PUSH
80237: LD_VAR 0 4
80241: GREATER
80242: IFFALSE 80258
// r := r / 2 ;
80244: LD_ADDR_VAR 0 7
80248: PUSH
80249: LD_VAR 0 7
80253: PUSH
80254: LD_INT 2
80256: DIVREAL
80257: ST_TO_ADDR
// time := time / r ;
80258: LD_ADDR_VAR 0 8
80262: PUSH
80263: LD_VAR 0 8
80267: PUSH
80268: LD_VAR 0 7
80272: DIVREAL
80273: ST_TO_ADDR
// if time < 0 then
80274: LD_VAR 0 8
80278: PUSH
80279: LD_INT 0
80281: LESS
80282: IFFALSE 80299
// time := time * - 1 ;
80284: LD_ADDR_VAR 0 8
80288: PUSH
80289: LD_VAR 0 8
80293: PUSH
80294: LD_INT 1
80296: NEG
80297: MUL
80298: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80299: LD_VAR 0 8
80303: PUSH
80304: LD_INT 35
80306: PPUSH
80307: LD_INT 875
80309: PPUSH
80310: CALL_OW 12
80314: PLUS
80315: PPUSH
80316: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80320: LD_INT 1
80322: PPUSH
80323: LD_INT 5
80325: PPUSH
80326: CALL_OW 12
80330: PPUSH
80331: LD_VAR 0 1
80335: PPUSH
80336: LD_INT 1
80338: PPUSH
80339: CALL_OW 55
// end ;
80343: GO 80156
// end ;
80345: LD_VAR 0 5
80349: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80350: LD_INT 0
80352: PPUSH
80353: PPUSH
80354: PPUSH
80355: PPUSH
80356: PPUSH
80357: PPUSH
80358: PPUSH
80359: PPUSH
// if not turrets or not factories then
80360: LD_VAR 0 1
80364: NOT
80365: IFTRUE 80374
80367: PUSH
80368: LD_VAR 0 2
80372: NOT
80373: OR
80374: IFFALSE 80378
// exit ;
80376: GO 80685
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80378: LD_ADDR_VAR 0 10
80382: PUSH
80383: LD_INT 5
80385: PUSH
80386: LD_INT 6
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: PUSH
80393: LD_INT 2
80395: PUSH
80396: LD_INT 4
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: PUSH
80403: LD_INT 3
80405: PUSH
80406: LD_INT 5
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: LIST
80417: PUSH
80418: LD_INT 24
80420: PUSH
80421: LD_INT 25
80423: PUSH
80424: EMPTY
80425: LIST
80426: LIST
80427: PUSH
80428: LD_INT 23
80430: PUSH
80431: LD_INT 27
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: PUSH
80442: LD_INT 42
80444: PUSH
80445: LD_INT 43
80447: PUSH
80448: EMPTY
80449: LIST
80450: LIST
80451: PUSH
80452: LD_INT 44
80454: PUSH
80455: LD_INT 46
80457: PUSH
80458: EMPTY
80459: LIST
80460: LIST
80461: PUSH
80462: LD_INT 45
80464: PUSH
80465: LD_INT 47
80467: PUSH
80468: EMPTY
80469: LIST
80470: LIST
80471: PUSH
80472: EMPTY
80473: LIST
80474: LIST
80475: LIST
80476: PUSH
80477: EMPTY
80478: LIST
80479: LIST
80480: LIST
80481: ST_TO_ADDR
// result := [ ] ;
80482: LD_ADDR_VAR 0 3
80486: PUSH
80487: EMPTY
80488: ST_TO_ADDR
// for i in turrets do
80489: LD_ADDR_VAR 0 4
80493: PUSH
80494: LD_VAR 0 1
80498: PUSH
80499: FOR_IN
80500: IFFALSE 80683
// begin nat := GetNation ( i ) ;
80502: LD_ADDR_VAR 0 7
80506: PUSH
80507: LD_VAR 0 4
80511: PPUSH
80512: CALL_OW 248
80516: ST_TO_ADDR
// weapon := 0 ;
80517: LD_ADDR_VAR 0 8
80521: PUSH
80522: LD_INT 0
80524: ST_TO_ADDR
// if not nat then
80525: LD_VAR 0 7
80529: NOT
80530: IFFALSE 80534
// continue ;
80532: GO 80499
// for j in list [ nat ] do
80534: LD_ADDR_VAR 0 5
80538: PUSH
80539: LD_VAR 0 10
80543: PUSH
80544: LD_VAR 0 7
80548: ARRAY
80549: PUSH
80550: FOR_IN
80551: IFFALSE 80592
// if GetBWeapon ( i ) = j [ 1 ] then
80553: LD_VAR 0 4
80557: PPUSH
80558: CALL_OW 269
80562: PUSH
80563: LD_VAR 0 5
80567: PUSH
80568: LD_INT 1
80570: ARRAY
80571: EQUAL
80572: IFFALSE 80590
// begin weapon := j [ 2 ] ;
80574: LD_ADDR_VAR 0 8
80578: PUSH
80579: LD_VAR 0 5
80583: PUSH
80584: LD_INT 2
80586: ARRAY
80587: ST_TO_ADDR
// break ;
80588: GO 80592
// end ;
80590: GO 80550
80592: POP
80593: POP
// if not weapon then
80594: LD_VAR 0 8
80598: NOT
80599: IFFALSE 80603
// continue ;
80601: GO 80499
// for k in factories do
80603: LD_ADDR_VAR 0 6
80607: PUSH
80608: LD_VAR 0 2
80612: PUSH
80613: FOR_IN
80614: IFFALSE 80679
// begin weapons := AvailableWeaponList ( k ) ;
80616: LD_ADDR_VAR 0 9
80620: PUSH
80621: LD_VAR 0 6
80625: PPUSH
80626: CALL_OW 478
80630: ST_TO_ADDR
// if not weapons then
80631: LD_VAR 0 9
80635: NOT
80636: IFFALSE 80640
// continue ;
80638: GO 80613
// if weapon in weapons then
80640: LD_VAR 0 8
80644: PUSH
80645: LD_VAR 0 9
80649: IN
80650: IFFALSE 80677
// begin result := [ i , weapon ] ;
80652: LD_ADDR_VAR 0 3
80656: PUSH
80657: LD_VAR 0 4
80661: PUSH
80662: LD_VAR 0 8
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: ST_TO_ADDR
// exit ;
80671: POP
80672: POP
80673: POP
80674: POP
80675: GO 80685
// end ; end ;
80677: GO 80613
80679: POP
80680: POP
// end ;
80681: GO 80499
80683: POP
80684: POP
// end ;
80685: LD_VAR 0 3
80689: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80690: LD_INT 0
80692: PPUSH
// if not side or side > 8 then
80693: LD_VAR 0 3
80697: NOT
80698: IFTRUE 80710
80700: PUSH
80701: LD_VAR 0 3
80705: PUSH
80706: LD_INT 8
80708: GREATER
80709: OR
80710: IFFALSE 80714
// exit ;
80712: GO 80773
// if not range then
80714: LD_VAR 0 4
80718: NOT
80719: IFFALSE 80730
// range := - 12 ;
80721: LD_ADDR_VAR 0 4
80725: PUSH
80726: LD_INT 12
80728: NEG
80729: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80730: LD_VAR 0 1
80734: PPUSH
80735: LD_VAR 0 2
80739: PPUSH
80740: LD_VAR 0 3
80744: PPUSH
80745: LD_VAR 0 4
80749: PPUSH
80750: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80754: LD_VAR 0 1
80758: PPUSH
80759: LD_VAR 0 2
80763: PPUSH
80764: LD_VAR 0 3
80768: PPUSH
80769: CALL_OW 331
// end ;
80773: LD_VAR 0 5
80777: RET
// export function Video ( mode ) ; begin
80778: LD_INT 0
80780: PPUSH
// ingame_video = mode ;
80781: LD_ADDR_OWVAR 52
80785: PUSH
80786: LD_VAR 0 1
80790: ST_TO_ADDR
// interface_hidden = mode ;
80791: LD_ADDR_OWVAR 54
80795: PUSH
80796: LD_VAR 0 1
80800: ST_TO_ADDR
// end ;
80801: LD_VAR 0 2
80805: RET
// export function Join ( array , element ) ; begin
80806: LD_INT 0
80808: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80809: LD_ADDR_VAR 0 3
80813: PUSH
80814: LD_VAR 0 1
80818: PPUSH
80819: LD_VAR 0 1
80823: PUSH
80824: LD_INT 1
80826: PLUS
80827: PPUSH
80828: LD_VAR 0 2
80832: PPUSH
80833: CALL_OW 1
80837: ST_TO_ADDR
// end ;
80838: LD_VAR 0 3
80842: RET
// export function JoinUnion ( array , element ) ; begin
80843: LD_INT 0
80845: PPUSH
// result := array union element ;
80846: LD_ADDR_VAR 0 3
80850: PUSH
80851: LD_VAR 0 1
80855: PUSH
80856: LD_VAR 0 2
80860: UNION
80861: ST_TO_ADDR
// end ;
80862: LD_VAR 0 3
80866: RET
// export function GetBehemoths ( side ) ; begin
80867: LD_INT 0
80869: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80870: LD_ADDR_VAR 0 2
80874: PUSH
80875: LD_INT 22
80877: PUSH
80878: LD_VAR 0 1
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 31
80889: PUSH
80890: LD_INT 25
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: EMPTY
80898: LIST
80899: LIST
80900: PPUSH
80901: CALL_OW 69
80905: ST_TO_ADDR
// end ;
80906: LD_VAR 0 2
80910: RET
// export function Shuffle ( array ) ; var i , index ; begin
80911: LD_INT 0
80913: PPUSH
80914: PPUSH
80915: PPUSH
// result := [ ] ;
80916: LD_ADDR_VAR 0 2
80920: PUSH
80921: EMPTY
80922: ST_TO_ADDR
// if not array then
80923: LD_VAR 0 1
80927: NOT
80928: IFFALSE 80932
// exit ;
80930: GO 81031
// Randomize ;
80932: CALL_OW 10
// for i = array downto 1 do
80936: LD_ADDR_VAR 0 3
80940: PUSH
80941: DOUBLE
80942: LD_VAR 0 1
80946: INC
80947: ST_TO_ADDR
80948: LD_INT 1
80950: PUSH
80951: FOR_DOWNTO
80952: IFFALSE 81029
// begin index := rand ( 1 , array ) ;
80954: LD_ADDR_VAR 0 4
80958: PUSH
80959: LD_INT 1
80961: PPUSH
80962: LD_VAR 0 1
80966: PPUSH
80967: CALL_OW 12
80971: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80972: LD_ADDR_VAR 0 2
80976: PUSH
80977: LD_VAR 0 2
80981: PPUSH
80982: LD_VAR 0 2
80986: PUSH
80987: LD_INT 1
80989: PLUS
80990: PPUSH
80991: LD_VAR 0 1
80995: PUSH
80996: LD_VAR 0 4
81000: ARRAY
81001: PPUSH
81002: CALL_OW 2
81006: ST_TO_ADDR
// array := Delete ( array , index ) ;
81007: LD_ADDR_VAR 0 1
81011: PUSH
81012: LD_VAR 0 1
81016: PPUSH
81017: LD_VAR 0 4
81021: PPUSH
81022: CALL_OW 3
81026: ST_TO_ADDR
// end ;
81027: GO 80951
81029: POP
81030: POP
// end ;
81031: LD_VAR 0 2
81035: RET
// export function GetBaseMaterials ( base ) ; begin
81036: LD_INT 0
81038: PPUSH
// result := [ 0 , 0 , 0 ] ;
81039: LD_ADDR_VAR 0 2
81043: PUSH
81044: LD_INT 0
81046: PUSH
81047: LD_INT 0
81049: PUSH
81050: LD_INT 0
81052: PUSH
81053: EMPTY
81054: LIST
81055: LIST
81056: LIST
81057: ST_TO_ADDR
// if not base then
81058: LD_VAR 0 1
81062: NOT
81063: IFFALSE 81067
// exit ;
81065: GO 81116
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81067: LD_ADDR_VAR 0 2
81071: PUSH
81072: LD_VAR 0 1
81076: PPUSH
81077: LD_INT 1
81079: PPUSH
81080: CALL_OW 275
81084: PUSH
81085: LD_VAR 0 1
81089: PPUSH
81090: LD_INT 2
81092: PPUSH
81093: CALL_OW 275
81097: PUSH
81098: LD_VAR 0 1
81102: PPUSH
81103: LD_INT 3
81105: PPUSH
81106: CALL_OW 275
81110: PUSH
81111: EMPTY
81112: LIST
81113: LIST
81114: LIST
81115: ST_TO_ADDR
// end ;
81116: LD_VAR 0 2
81120: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81121: LD_INT 0
81123: PPUSH
81124: PPUSH
// result := array ;
81125: LD_ADDR_VAR 0 3
81129: PUSH
81130: LD_VAR 0 1
81134: ST_TO_ADDR
// if size >= result then
81135: LD_VAR 0 2
81139: PUSH
81140: LD_VAR 0 3
81144: GREATEREQUAL
81145: IFFALSE 81149
// exit ;
81147: GO 81199
// if size then
81149: LD_VAR 0 2
81153: IFFALSE 81199
// for i := array downto size do
81155: LD_ADDR_VAR 0 4
81159: PUSH
81160: DOUBLE
81161: LD_VAR 0 1
81165: INC
81166: ST_TO_ADDR
81167: LD_VAR 0 2
81171: PUSH
81172: FOR_DOWNTO
81173: IFFALSE 81197
// result := Delete ( result , result ) ;
81175: LD_ADDR_VAR 0 3
81179: PUSH
81180: LD_VAR 0 3
81184: PPUSH
81185: LD_VAR 0 3
81189: PPUSH
81190: CALL_OW 3
81194: ST_TO_ADDR
81195: GO 81172
81197: POP
81198: POP
// end ;
81199: LD_VAR 0 3
81203: RET
// export function ComExit ( unit ) ; var tmp ; begin
81204: LD_INT 0
81206: PPUSH
81207: PPUSH
// if not IsInUnit ( unit ) then
81208: LD_VAR 0 1
81212: PPUSH
81213: CALL_OW 310
81217: NOT
81218: IFFALSE 81222
// exit ;
81220: GO 81282
// tmp := IsInUnit ( unit ) ;
81222: LD_ADDR_VAR 0 3
81226: PUSH
81227: LD_VAR 0 1
81231: PPUSH
81232: CALL_OW 310
81236: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81237: LD_VAR 0 3
81241: PPUSH
81242: CALL_OW 247
81246: PUSH
81247: LD_INT 2
81249: EQUAL
81250: IFFALSE 81263
// ComExitVehicle ( unit ) else
81252: LD_VAR 0 1
81256: PPUSH
81257: CALL_OW 121
81261: GO 81272
// ComExitBuilding ( unit ) ;
81263: LD_VAR 0 1
81267: PPUSH
81268: CALL_OW 122
// result := tmp ;
81272: LD_ADDR_VAR 0 2
81276: PUSH
81277: LD_VAR 0 3
81281: ST_TO_ADDR
// end ;
81282: LD_VAR 0 2
81286: RET
// export function ComExitAll ( units ) ; var i ; begin
81287: LD_INT 0
81289: PPUSH
81290: PPUSH
// if not units then
81291: LD_VAR 0 1
81295: NOT
81296: IFFALSE 81300
// exit ;
81298: GO 81326
// for i in units do
81300: LD_ADDR_VAR 0 3
81304: PUSH
81305: LD_VAR 0 1
81309: PUSH
81310: FOR_IN
81311: IFFALSE 81324
// ComExit ( i ) ;
81313: LD_VAR 0 3
81317: PPUSH
81318: CALL 81204 0 1
81322: GO 81310
81324: POP
81325: POP
// end ;
81326: LD_VAR 0 2
81330: RET
// export function ResetHc ; begin
81331: LD_INT 0
81333: PPUSH
// InitHc ;
81334: CALL_OW 19
// hc_importance := 0 ;
81338: LD_ADDR_OWVAR 32
81342: PUSH
81343: LD_INT 0
81345: ST_TO_ADDR
// end ;
81346: LD_VAR 0 1
81350: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81351: LD_INT 0
81353: PPUSH
81354: PPUSH
81355: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81356: LD_ADDR_VAR 0 6
81360: PUSH
81361: LD_VAR 0 1
81365: PUSH
81366: LD_VAR 0 3
81370: PLUS
81371: PUSH
81372: LD_INT 2
81374: DIV
81375: ST_TO_ADDR
// if _x < 0 then
81376: LD_VAR 0 6
81380: PUSH
81381: LD_INT 0
81383: LESS
81384: IFFALSE 81401
// _x := _x * - 1 ;
81386: LD_ADDR_VAR 0 6
81390: PUSH
81391: LD_VAR 0 6
81395: PUSH
81396: LD_INT 1
81398: NEG
81399: MUL
81400: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81401: LD_ADDR_VAR 0 7
81405: PUSH
81406: LD_VAR 0 2
81410: PUSH
81411: LD_VAR 0 4
81415: PLUS
81416: PUSH
81417: LD_INT 2
81419: DIV
81420: ST_TO_ADDR
// if _y < 0 then
81421: LD_VAR 0 7
81425: PUSH
81426: LD_INT 0
81428: LESS
81429: IFFALSE 81446
// _y := _y * - 1 ;
81431: LD_ADDR_VAR 0 7
81435: PUSH
81436: LD_VAR 0 7
81440: PUSH
81441: LD_INT 1
81443: NEG
81444: MUL
81445: ST_TO_ADDR
// result := [ _x , _y ] ;
81446: LD_ADDR_VAR 0 5
81450: PUSH
81451: LD_VAR 0 6
81455: PUSH
81456: LD_VAR 0 7
81460: PUSH
81461: EMPTY
81462: LIST
81463: LIST
81464: ST_TO_ADDR
// end ;
81465: LD_VAR 0 5
81469: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81470: LD_INT 0
81472: PPUSH
81473: PPUSH
81474: PPUSH
81475: PPUSH
// task := GetTaskList ( unit ) ;
81476: LD_ADDR_VAR 0 7
81480: PUSH
81481: LD_VAR 0 1
81485: PPUSH
81486: CALL_OW 437
81490: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81491: LD_VAR 0 7
81495: NOT
81496: IFFALSE 81515
81498: PUSH
81499: LD_VAR 0 1
81503: PPUSH
81504: LD_VAR 0 2
81508: PPUSH
81509: CALL_OW 308
81513: NOT
81514: AND
81515: IFFALSE 81519
// exit ;
81517: GO 81637
// if IsInArea ( unit , area ) then
81519: LD_VAR 0 1
81523: PPUSH
81524: LD_VAR 0 2
81528: PPUSH
81529: CALL_OW 308
81533: IFFALSE 81551
// begin ComMoveToArea ( unit , goAway ) ;
81535: LD_VAR 0 1
81539: PPUSH
81540: LD_VAR 0 3
81544: PPUSH
81545: CALL_OW 113
// exit ;
81549: GO 81637
// end ; if task [ 1 ] [ 1 ] <> M then
81551: LD_VAR 0 7
81555: PUSH
81556: LD_INT 1
81558: ARRAY
81559: PUSH
81560: LD_INT 1
81562: ARRAY
81563: PUSH
81564: LD_STRING M
81566: NONEQUAL
81567: IFFALSE 81571
// exit ;
81569: GO 81637
// x := task [ 1 ] [ 2 ] ;
81571: LD_ADDR_VAR 0 5
81575: PUSH
81576: LD_VAR 0 7
81580: PUSH
81581: LD_INT 1
81583: ARRAY
81584: PUSH
81585: LD_INT 2
81587: ARRAY
81588: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81589: LD_ADDR_VAR 0 6
81593: PUSH
81594: LD_VAR 0 7
81598: PUSH
81599: LD_INT 1
81601: ARRAY
81602: PUSH
81603: LD_INT 3
81605: ARRAY
81606: ST_TO_ADDR
// if InArea ( x , y , area ) then
81607: LD_VAR 0 5
81611: PPUSH
81612: LD_VAR 0 6
81616: PPUSH
81617: LD_VAR 0 2
81621: PPUSH
81622: CALL_OW 309
81626: IFFALSE 81637
// ComStop ( unit ) ;
81628: LD_VAR 0 1
81632: PPUSH
81633: CALL_OW 141
// end ;
81637: LD_VAR 0 4
81641: RET
// export function Abs ( value ) ; begin
81642: LD_INT 0
81644: PPUSH
// result := value ;
81645: LD_ADDR_VAR 0 2
81649: PUSH
81650: LD_VAR 0 1
81654: ST_TO_ADDR
// if value < 0 then
81655: LD_VAR 0 1
81659: PUSH
81660: LD_INT 0
81662: LESS
81663: IFFALSE 81680
// result := value * - 1 ;
81665: LD_ADDR_VAR 0 2
81669: PUSH
81670: LD_VAR 0 1
81674: PUSH
81675: LD_INT 1
81677: NEG
81678: MUL
81679: ST_TO_ADDR
// end ;
81680: LD_VAR 0 2
81684: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81685: LD_INT 0
81687: PPUSH
81688: PPUSH
81689: PPUSH
81690: PPUSH
81691: PPUSH
81692: PPUSH
81693: PPUSH
81694: PPUSH
// if not unit or not building then
81695: LD_VAR 0 1
81699: NOT
81700: IFTRUE 81709
81702: PUSH
81703: LD_VAR 0 2
81707: NOT
81708: OR
81709: IFFALSE 81713
// exit ;
81711: GO 81941
// x := GetX ( building ) ;
81713: LD_ADDR_VAR 0 4
81717: PUSH
81718: LD_VAR 0 2
81722: PPUSH
81723: CALL_OW 250
81727: ST_TO_ADDR
// y := GetY ( building ) ;
81728: LD_ADDR_VAR 0 6
81732: PUSH
81733: LD_VAR 0 2
81737: PPUSH
81738: CALL_OW 251
81742: ST_TO_ADDR
// d := GetDir ( building ) ;
81743: LD_ADDR_VAR 0 8
81747: PUSH
81748: LD_VAR 0 2
81752: PPUSH
81753: CALL_OW 254
81757: ST_TO_ADDR
// r := 4 ;
81758: LD_ADDR_VAR 0 9
81762: PUSH
81763: LD_INT 4
81765: ST_TO_ADDR
// for i := 1 to 5 do
81766: LD_ADDR_VAR 0 10
81770: PUSH
81771: DOUBLE
81772: LD_INT 1
81774: DEC
81775: ST_TO_ADDR
81776: LD_INT 5
81778: PUSH
81779: FOR_TO
81780: IFFALSE 81939
// begin _x := ShiftX ( x , d , r + i ) ;
81782: LD_ADDR_VAR 0 5
81786: PUSH
81787: LD_VAR 0 4
81791: PPUSH
81792: LD_VAR 0 8
81796: PPUSH
81797: LD_VAR 0 9
81801: PUSH
81802: LD_VAR 0 10
81806: PLUS
81807: PPUSH
81808: CALL_OW 272
81812: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81813: LD_ADDR_VAR 0 7
81817: PUSH
81818: LD_VAR 0 6
81822: PPUSH
81823: LD_VAR 0 8
81827: PPUSH
81828: LD_VAR 0 9
81832: PUSH
81833: LD_VAR 0 10
81837: PLUS
81838: PPUSH
81839: CALL_OW 273
81843: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81844: LD_VAR 0 5
81848: PPUSH
81849: LD_VAR 0 7
81853: PPUSH
81854: CALL_OW 488
81858: IFFALSE 81893
81860: PUSH
81861: LD_VAR 0 5
81865: PPUSH
81866: LD_VAR 0 7
81870: PPUSH
81871: CALL_OW 428
81875: PPUSH
81876: CALL_OW 247
81880: PUSH
81881: LD_INT 3
81883: PUSH
81884: LD_INT 2
81886: PUSH
81887: EMPTY
81888: LIST
81889: LIST
81890: IN
81891: NOT
81892: AND
81893: IFFALSE 81937
// begin ComMoveXY ( unit , _x , _y ) ;
81895: LD_VAR 0 1
81899: PPUSH
81900: LD_VAR 0 5
81904: PPUSH
81905: LD_VAR 0 7
81909: PPUSH
81910: CALL_OW 111
// result := [ _x , _y ] ;
81914: LD_ADDR_VAR 0 3
81918: PUSH
81919: LD_VAR 0 5
81923: PUSH
81924: LD_VAR 0 7
81928: PUSH
81929: EMPTY
81930: LIST
81931: LIST
81932: ST_TO_ADDR
// exit ;
81933: POP
81934: POP
81935: GO 81941
// end ; end ;
81937: GO 81779
81939: POP
81940: POP
// end ;
81941: LD_VAR 0 3
81945: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81946: LD_INT 0
81948: PPUSH
81949: PPUSH
81950: PPUSH
// result := 0 ;
81951: LD_ADDR_VAR 0 3
81955: PUSH
81956: LD_INT 0
81958: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81959: LD_VAR 0 1
81963: PUSH
81964: LD_INT 0
81966: LESS
81967: IFTRUE 81979
81969: PUSH
81970: LD_VAR 0 1
81974: PUSH
81975: LD_INT 8
81977: GREATER
81978: OR
81979: IFTRUE 81991
81981: PUSH
81982: LD_VAR 0 2
81986: PUSH
81987: LD_INT 0
81989: LESS
81990: OR
81991: IFTRUE 82003
81993: PUSH
81994: LD_VAR 0 2
81998: PUSH
81999: LD_INT 8
82001: GREATER
82002: OR
82003: IFFALSE 82007
// exit ;
82005: GO 82082
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82007: LD_ADDR_VAR 0 4
82011: PUSH
82012: LD_INT 22
82014: PUSH
82015: LD_VAR 0 2
82019: PUSH
82020: EMPTY
82021: LIST
82022: LIST
82023: PPUSH
82024: CALL_OW 69
82028: PUSH
82029: FOR_IN
82030: IFFALSE 82080
// begin un := UnitShoot ( i ) ;
82032: LD_ADDR_VAR 0 5
82036: PUSH
82037: LD_VAR 0 4
82041: PPUSH
82042: CALL_OW 504
82046: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82047: LD_VAR 0 5
82051: PPUSH
82052: CALL_OW 255
82056: PUSH
82057: LD_VAR 0 1
82061: EQUAL
82062: IFFALSE 82078
// begin result := un ;
82064: LD_ADDR_VAR 0 3
82068: PUSH
82069: LD_VAR 0 5
82073: ST_TO_ADDR
// exit ;
82074: POP
82075: POP
82076: GO 82082
// end ; end ;
82078: GO 82029
82080: POP
82081: POP
// end ;
82082: LD_VAR 0 3
82086: RET
// export function GetCargoBay ( units ) ; begin
82087: LD_INT 0
82089: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82090: LD_ADDR_VAR 0 2
82094: PUSH
82095: LD_VAR 0 1
82099: PPUSH
82100: LD_INT 2
82102: PUSH
82103: LD_INT 34
82105: PUSH
82106: LD_INT 12
82108: PUSH
82109: EMPTY
82110: LIST
82111: LIST
82112: PUSH
82113: LD_INT 34
82115: PUSH
82116: LD_INT 51
82118: PUSH
82119: EMPTY
82120: LIST
82121: LIST
82122: PUSH
82123: LD_INT 34
82125: PUSH
82126: LD_INT 32
82128: PUSH
82129: EMPTY
82130: LIST
82131: LIST
82132: PUSH
82133: LD_INT 34
82135: PUSH
82136: LD_INT 89
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: PUSH
82143: EMPTY
82144: LIST
82145: LIST
82146: LIST
82147: LIST
82148: LIST
82149: PPUSH
82150: CALL_OW 72
82154: ST_TO_ADDR
// end ;
82155: LD_VAR 0 2
82159: RET
// export function Negate ( value ) ; begin
82160: LD_INT 0
82162: PPUSH
// result := not value ;
82163: LD_ADDR_VAR 0 2
82167: PUSH
82168: LD_VAR 0 1
82172: NOT
82173: ST_TO_ADDR
// end ;
82174: LD_VAR 0 2
82178: RET
// export function Inc ( value ) ; begin
82179: LD_INT 0
82181: PPUSH
// result := value + 1 ;
82182: LD_ADDR_VAR 0 2
82186: PUSH
82187: LD_VAR 0 1
82191: PUSH
82192: LD_INT 1
82194: PLUS
82195: ST_TO_ADDR
// end ;
82196: LD_VAR 0 2
82200: RET
// export function Dec ( value ) ; begin
82201: LD_INT 0
82203: PPUSH
// result := value - 1 ;
82204: LD_ADDR_VAR 0 2
82208: PUSH
82209: LD_VAR 0 1
82213: PUSH
82214: LD_INT 1
82216: MINUS
82217: ST_TO_ADDR
// end ;
82218: LD_VAR 0 2
82222: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82223: LD_INT 0
82225: PPUSH
82226: PPUSH
82227: PPUSH
82228: PPUSH
82229: PPUSH
82230: PPUSH
82231: PPUSH
82232: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82233: LD_VAR 0 1
82237: PPUSH
82238: LD_VAR 0 2
82242: PPUSH
82243: CALL_OW 488
82247: NOT
82248: IFTRUE 82267
82250: PUSH
82251: LD_VAR 0 3
82255: PPUSH
82256: LD_VAR 0 4
82260: PPUSH
82261: CALL_OW 488
82265: NOT
82266: OR
82267: IFFALSE 82280
// begin result := - 1 ;
82269: LD_ADDR_VAR 0 5
82273: PUSH
82274: LD_INT 1
82276: NEG
82277: ST_TO_ADDR
// exit ;
82278: GO 82515
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82280: LD_ADDR_VAR 0 12
82284: PUSH
82285: LD_VAR 0 1
82289: PPUSH
82290: LD_VAR 0 2
82294: PPUSH
82295: LD_VAR 0 3
82299: PPUSH
82300: LD_VAR 0 4
82304: PPUSH
82305: CALL 81351 0 4
82309: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82310: LD_ADDR_VAR 0 11
82314: PUSH
82315: LD_VAR 0 1
82319: PPUSH
82320: LD_VAR 0 2
82324: PPUSH
82325: LD_VAR 0 12
82329: PUSH
82330: LD_INT 1
82332: ARRAY
82333: PPUSH
82334: LD_VAR 0 12
82338: PUSH
82339: LD_INT 2
82341: ARRAY
82342: PPUSH
82343: CALL_OW 298
82347: ST_TO_ADDR
// distance := 9999 ;
82348: LD_ADDR_VAR 0 10
82352: PUSH
82353: LD_INT 9999
82355: ST_TO_ADDR
// for i := 0 to 5 do
82356: LD_ADDR_VAR 0 6
82360: PUSH
82361: DOUBLE
82362: LD_INT 0
82364: DEC
82365: ST_TO_ADDR
82366: LD_INT 5
82368: PUSH
82369: FOR_TO
82370: IFFALSE 82513
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82372: LD_ADDR_VAR 0 7
82376: PUSH
82377: LD_VAR 0 1
82381: PPUSH
82382: LD_VAR 0 6
82386: PPUSH
82387: LD_VAR 0 11
82391: PPUSH
82392: CALL_OW 272
82396: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82397: LD_ADDR_VAR 0 8
82401: PUSH
82402: LD_VAR 0 2
82406: PPUSH
82407: LD_VAR 0 6
82411: PPUSH
82412: LD_VAR 0 11
82416: PPUSH
82417: CALL_OW 273
82421: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82422: LD_VAR 0 7
82426: PPUSH
82427: LD_VAR 0 8
82431: PPUSH
82432: CALL_OW 488
82436: NOT
82437: IFFALSE 82441
// continue ;
82439: GO 82369
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82441: LD_ADDR_VAR 0 9
82445: PUSH
82446: LD_VAR 0 12
82450: PUSH
82451: LD_INT 1
82453: ARRAY
82454: PPUSH
82455: LD_VAR 0 12
82459: PUSH
82460: LD_INT 2
82462: ARRAY
82463: PPUSH
82464: LD_VAR 0 7
82468: PPUSH
82469: LD_VAR 0 8
82473: PPUSH
82474: CALL_OW 298
82478: ST_TO_ADDR
// if tmp < distance then
82479: LD_VAR 0 9
82483: PUSH
82484: LD_VAR 0 10
82488: LESS
82489: IFFALSE 82511
// begin result := i ;
82491: LD_ADDR_VAR 0 5
82495: PUSH
82496: LD_VAR 0 6
82500: ST_TO_ADDR
// distance := tmp ;
82501: LD_ADDR_VAR 0 10
82505: PUSH
82506: LD_VAR 0 9
82510: ST_TO_ADDR
// end ; end ;
82511: GO 82369
82513: POP
82514: POP
// end ;
82515: LD_VAR 0 5
82519: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82520: LD_INT 0
82522: PPUSH
82523: PPUSH
// if not driver or not IsInUnit ( driver ) then
82524: LD_VAR 0 1
82528: NOT
82529: IFTRUE 82543
82531: PUSH
82532: LD_VAR 0 1
82536: PPUSH
82537: CALL_OW 310
82541: NOT
82542: OR
82543: IFFALSE 82547
// exit ;
82545: GO 82637
// vehicle := IsInUnit ( driver ) ;
82547: LD_ADDR_VAR 0 3
82551: PUSH
82552: LD_VAR 0 1
82556: PPUSH
82557: CALL_OW 310
82561: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82562: LD_VAR 0 1
82566: PPUSH
82567: LD_STRING \
82569: PUSH
82570: LD_INT 0
82572: PUSH
82573: LD_INT 0
82575: PUSH
82576: LD_INT 0
82578: PUSH
82579: LD_INT 0
82581: PUSH
82582: LD_INT 0
82584: PUSH
82585: LD_INT 0
82587: PUSH
82588: EMPTY
82589: LIST
82590: LIST
82591: LIST
82592: LIST
82593: LIST
82594: LIST
82595: LIST
82596: PUSH
82597: LD_STRING E
82599: PUSH
82600: LD_INT 0
82602: PUSH
82603: LD_INT 0
82605: PUSH
82606: LD_VAR 0 3
82610: PUSH
82611: LD_INT 0
82613: PUSH
82614: LD_INT 0
82616: PUSH
82617: LD_INT 0
82619: PUSH
82620: EMPTY
82621: LIST
82622: LIST
82623: LIST
82624: LIST
82625: LIST
82626: LIST
82627: LIST
82628: PUSH
82629: EMPTY
82630: LIST
82631: LIST
82632: PPUSH
82633: CALL_OW 446
// end ;
82637: LD_VAR 0 2
82641: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82642: LD_INT 0
82644: PPUSH
82645: PPUSH
// if not driver or not IsInUnit ( driver ) then
82646: LD_VAR 0 1
82650: NOT
82651: IFTRUE 82665
82653: PUSH
82654: LD_VAR 0 1
82658: PPUSH
82659: CALL_OW 310
82663: NOT
82664: OR
82665: IFFALSE 82669
// exit ;
82667: GO 82759
// vehicle := IsInUnit ( driver ) ;
82669: LD_ADDR_VAR 0 3
82673: PUSH
82674: LD_VAR 0 1
82678: PPUSH
82679: CALL_OW 310
82683: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82684: LD_VAR 0 1
82688: PPUSH
82689: LD_STRING \
82691: PUSH
82692: LD_INT 0
82694: PUSH
82695: LD_INT 0
82697: PUSH
82698: LD_INT 0
82700: PUSH
82701: LD_INT 0
82703: PUSH
82704: LD_INT 0
82706: PUSH
82707: LD_INT 0
82709: PUSH
82710: EMPTY
82711: LIST
82712: LIST
82713: LIST
82714: LIST
82715: LIST
82716: LIST
82717: LIST
82718: PUSH
82719: LD_STRING E
82721: PUSH
82722: LD_INT 0
82724: PUSH
82725: LD_INT 0
82727: PUSH
82728: LD_VAR 0 3
82732: PUSH
82733: LD_INT 0
82735: PUSH
82736: LD_INT 0
82738: PUSH
82739: LD_INT 0
82741: PUSH
82742: EMPTY
82743: LIST
82744: LIST
82745: LIST
82746: LIST
82747: LIST
82748: LIST
82749: LIST
82750: PUSH
82751: EMPTY
82752: LIST
82753: LIST
82754: PPUSH
82755: CALL_OW 447
// end ;
82759: LD_VAR 0 2
82763: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82764: LD_INT 0
82766: PPUSH
82767: PPUSH
82768: PPUSH
// tmp := [ ] ;
82769: LD_ADDR_VAR 0 5
82773: PUSH
82774: EMPTY
82775: ST_TO_ADDR
// for i in units do
82776: LD_ADDR_VAR 0 4
82780: PUSH
82781: LD_VAR 0 1
82785: PUSH
82786: FOR_IN
82787: IFFALSE 82825
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82789: LD_ADDR_VAR 0 5
82793: PUSH
82794: LD_VAR 0 5
82798: PPUSH
82799: LD_VAR 0 5
82803: PUSH
82804: LD_INT 1
82806: PLUS
82807: PPUSH
82808: LD_VAR 0 4
82812: PPUSH
82813: CALL_OW 256
82817: PPUSH
82818: CALL_OW 2
82822: ST_TO_ADDR
82823: GO 82786
82825: POP
82826: POP
// if not tmp then
82827: LD_VAR 0 5
82831: NOT
82832: IFFALSE 82836
// exit ;
82834: GO 82884
// if asc then
82836: LD_VAR 0 2
82840: IFFALSE 82864
// result := SortListByListAsc ( units , tmp ) else
82842: LD_ADDR_VAR 0 3
82846: PUSH
82847: LD_VAR 0 1
82851: PPUSH
82852: LD_VAR 0 5
82856: PPUSH
82857: CALL_OW 76
82861: ST_TO_ADDR
82862: GO 82884
// result := SortListByListDesc ( units , tmp ) ;
82864: LD_ADDR_VAR 0 3
82868: PUSH
82869: LD_VAR 0 1
82873: PPUSH
82874: LD_VAR 0 5
82878: PPUSH
82879: CALL_OW 77
82883: ST_TO_ADDR
// end ;
82884: LD_VAR 0 3
82888: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82889: LD_INT 0
82891: PPUSH
82892: PPUSH
// task := GetTaskList ( mech ) ;
82893: LD_ADDR_VAR 0 4
82897: PUSH
82898: LD_VAR 0 1
82902: PPUSH
82903: CALL_OW 437
82907: ST_TO_ADDR
// if not task then
82908: LD_VAR 0 4
82912: NOT
82913: IFFALSE 82917
// exit ;
82915: GO 82961
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82917: LD_ADDR_VAR 0 3
82921: PUSH
82922: LD_VAR 0 4
82926: PUSH
82927: LD_INT 1
82929: ARRAY
82930: PUSH
82931: LD_INT 1
82933: ARRAY
82934: PUSH
82935: LD_STRING r
82937: EQUAL
82938: IFFALSE 82960
82940: PUSH
82941: LD_VAR 0 4
82945: PUSH
82946: LD_INT 1
82948: ARRAY
82949: PUSH
82950: LD_INT 4
82952: ARRAY
82953: PUSH
82954: LD_VAR 0 2
82958: EQUAL
82959: AND
82960: ST_TO_ADDR
// end ;
82961: LD_VAR 0 3
82965: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82966: LD_INT 0
82968: PPUSH
// SetDir ( unit , d ) ;
82969: LD_VAR 0 1
82973: PPUSH
82974: LD_VAR 0 4
82978: PPUSH
82979: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82983: LD_ADDR_VAR 0 6
82987: PUSH
82988: LD_VAR 0 1
82992: PPUSH
82993: LD_VAR 0 2
82997: PPUSH
82998: LD_VAR 0 3
83002: PPUSH
83003: LD_VAR 0 5
83007: PPUSH
83008: CALL_OW 48
83012: ST_TO_ADDR
// end ;
83013: LD_VAR 0 6
83017: RET
// export function ToNaturalNumber ( number ) ; begin
83018: LD_INT 0
83020: PPUSH
// result := number div 1 ;
83021: LD_ADDR_VAR 0 2
83025: PUSH
83026: LD_VAR 0 1
83030: PUSH
83031: LD_INT 1
83033: DIV
83034: ST_TO_ADDR
// if number < 0 then
83035: LD_VAR 0 1
83039: PUSH
83040: LD_INT 0
83042: LESS
83043: IFFALSE 83053
// result := 0 ;
83045: LD_ADDR_VAR 0 2
83049: PUSH
83050: LD_INT 0
83052: ST_TO_ADDR
// end ;
83053: LD_VAR 0 2
83057: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
83058: LD_INT 0
83060: PPUSH
83061: PPUSH
83062: PPUSH
// if not buildings then
83063: LD_VAR 0 1
83067: NOT
83068: IFFALSE 83072
// exit ;
83070: GO 83187
// tmp := [ ] ;
83072: LD_ADDR_VAR 0 5
83076: PUSH
83077: EMPTY
83078: ST_TO_ADDR
// for b in buildings do
83079: LD_ADDR_VAR 0 4
83083: PUSH
83084: LD_VAR 0 1
83088: PUSH
83089: FOR_IN
83090: IFFALSE 83128
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
83092: LD_ADDR_VAR 0 5
83096: PUSH
83097: LD_VAR 0 5
83101: PPUSH
83102: LD_VAR 0 5
83106: PUSH
83107: LD_INT 1
83109: PLUS
83110: PPUSH
83111: LD_VAR 0 4
83115: PPUSH
83116: CALL_OW 266
83120: PPUSH
83121: CALL_OW 1
83125: ST_TO_ADDR
83126: GO 83089
83128: POP
83129: POP
// if not tmp then
83130: LD_VAR 0 5
83134: NOT
83135: IFFALSE 83139
// exit ;
83137: GO 83187
// if asc then
83139: LD_VAR 0 2
83143: IFFALSE 83167
// result := SortListByListAsc ( buildings , tmp ) else
83145: LD_ADDR_VAR 0 3
83149: PUSH
83150: LD_VAR 0 1
83154: PPUSH
83155: LD_VAR 0 5
83159: PPUSH
83160: CALL_OW 76
83164: ST_TO_ADDR
83165: GO 83187
// result := SortListByListDesc ( buildings , tmp ) ;
83167: LD_ADDR_VAR 0 3
83171: PUSH
83172: LD_VAR 0 1
83176: PPUSH
83177: LD_VAR 0 5
83181: PPUSH
83182: CALL_OW 77
83186: ST_TO_ADDR
// end ;
83187: LD_VAR 0 3
83191: RET
// export function SortByClass ( units , class ) ; var un ; begin
83192: LD_INT 0
83194: PPUSH
83195: PPUSH
// if not units or not class then
83196: LD_VAR 0 1
83200: NOT
83201: IFTRUE 83210
83203: PUSH
83204: LD_VAR 0 2
83208: NOT
83209: OR
83210: IFFALSE 83214
// exit ;
83212: GO 83309
// result := [ ] ;
83214: LD_ADDR_VAR 0 3
83218: PUSH
83219: EMPTY
83220: ST_TO_ADDR
// for un in units do
83221: LD_ADDR_VAR 0 4
83225: PUSH
83226: LD_VAR 0 1
83230: PUSH
83231: FOR_IN
83232: IFFALSE 83307
// if GetClass ( un ) = class then
83234: LD_VAR 0 4
83238: PPUSH
83239: CALL_OW 257
83243: PUSH
83244: LD_VAR 0 2
83248: EQUAL
83249: IFFALSE 83276
// result := Insert ( result , 1 , un ) else
83251: LD_ADDR_VAR 0 3
83255: PUSH
83256: LD_VAR 0 3
83260: PPUSH
83261: LD_INT 1
83263: PPUSH
83264: LD_VAR 0 4
83268: PPUSH
83269: CALL_OW 2
83273: ST_TO_ADDR
83274: GO 83305
// result := Replace ( result , result + 1 , un ) ;
83276: LD_ADDR_VAR 0 3
83280: PUSH
83281: LD_VAR 0 3
83285: PPUSH
83286: LD_VAR 0 3
83290: PUSH
83291: LD_INT 1
83293: PLUS
83294: PPUSH
83295: LD_VAR 0 4
83299: PPUSH
83300: CALL_OW 1
83304: ST_TO_ADDR
83305: GO 83231
83307: POP
83308: POP
// end ;
83309: LD_VAR 0 3
83313: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83314: LD_INT 0
83316: PPUSH
83317: PPUSH
83318: PPUSH
83319: PPUSH
83320: PPUSH
83321: PPUSH
83322: PPUSH
// result := [ ] ;
83323: LD_ADDR_VAR 0 4
83327: PUSH
83328: EMPTY
83329: ST_TO_ADDR
// if x - r < 0 then
83330: LD_VAR 0 1
83334: PUSH
83335: LD_VAR 0 3
83339: MINUS
83340: PUSH
83341: LD_INT 0
83343: LESS
83344: IFFALSE 83356
// min_x := 0 else
83346: LD_ADDR_VAR 0 8
83350: PUSH
83351: LD_INT 0
83353: ST_TO_ADDR
83354: GO 83372
// min_x := x - r ;
83356: LD_ADDR_VAR 0 8
83360: PUSH
83361: LD_VAR 0 1
83365: PUSH
83366: LD_VAR 0 3
83370: MINUS
83371: ST_TO_ADDR
// if y - r < 0 then
83372: LD_VAR 0 2
83376: PUSH
83377: LD_VAR 0 3
83381: MINUS
83382: PUSH
83383: LD_INT 0
83385: LESS
83386: IFFALSE 83398
// min_y := 0 else
83388: LD_ADDR_VAR 0 7
83392: PUSH
83393: LD_INT 0
83395: ST_TO_ADDR
83396: GO 83414
// min_y := y - r ;
83398: LD_ADDR_VAR 0 7
83402: PUSH
83403: LD_VAR 0 2
83407: PUSH
83408: LD_VAR 0 3
83412: MINUS
83413: ST_TO_ADDR
// max_x := x + r ;
83414: LD_ADDR_VAR 0 9
83418: PUSH
83419: LD_VAR 0 1
83423: PUSH
83424: LD_VAR 0 3
83428: PLUS
83429: ST_TO_ADDR
// max_y := y + r ;
83430: LD_ADDR_VAR 0 10
83434: PUSH
83435: LD_VAR 0 2
83439: PUSH
83440: LD_VAR 0 3
83444: PLUS
83445: ST_TO_ADDR
// for _x = min_x to max_x do
83446: LD_ADDR_VAR 0 5
83450: PUSH
83451: DOUBLE
83452: LD_VAR 0 8
83456: DEC
83457: ST_TO_ADDR
83458: LD_VAR 0 9
83462: PUSH
83463: FOR_TO
83464: IFFALSE 83565
// for _y = min_y to max_y do
83466: LD_ADDR_VAR 0 6
83470: PUSH
83471: DOUBLE
83472: LD_VAR 0 7
83476: DEC
83477: ST_TO_ADDR
83478: LD_VAR 0 10
83482: PUSH
83483: FOR_TO
83484: IFFALSE 83561
// begin if not ValidHex ( _x , _y ) then
83486: LD_VAR 0 5
83490: PPUSH
83491: LD_VAR 0 6
83495: PPUSH
83496: CALL_OW 488
83500: NOT
83501: IFFALSE 83505
// continue ;
83503: GO 83483
// if GetResourceTypeXY ( _x , _y ) then
83505: LD_VAR 0 5
83509: PPUSH
83510: LD_VAR 0 6
83514: PPUSH
83515: CALL_OW 283
83519: IFFALSE 83559
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83521: LD_ADDR_VAR 0 4
83525: PUSH
83526: LD_VAR 0 4
83530: PPUSH
83531: LD_VAR 0 4
83535: PUSH
83536: LD_INT 1
83538: PLUS
83539: PPUSH
83540: LD_VAR 0 5
83544: PUSH
83545: LD_VAR 0 6
83549: PUSH
83550: EMPTY
83551: LIST
83552: LIST
83553: PPUSH
83554: CALL_OW 1
83558: ST_TO_ADDR
// end ;
83559: GO 83483
83561: POP
83562: POP
83563: GO 83463
83565: POP
83566: POP
// end ;
83567: LD_VAR 0 4
83571: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83572: LD_INT 0
83574: PPUSH
83575: PPUSH
83576: PPUSH
83577: PPUSH
83578: PPUSH
83579: PPUSH
83580: PPUSH
83581: PPUSH
// if not units then
83582: LD_VAR 0 1
83586: NOT
83587: IFFALSE 83591
// exit ;
83589: GO 84123
// result := UnitFilter ( units , [ f_ok ] ) ;
83591: LD_ADDR_VAR 0 3
83595: PUSH
83596: LD_VAR 0 1
83600: PPUSH
83601: LD_INT 50
83603: PUSH
83604: EMPTY
83605: LIST
83606: PPUSH
83607: CALL_OW 72
83611: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83612: LD_ADDR_VAR 0 8
83616: PUSH
83617: LD_VAR 0 1
83621: PUSH
83622: LD_INT 1
83624: ARRAY
83625: PPUSH
83626: CALL_OW 255
83630: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83631: LD_ADDR_VAR 0 10
83635: PUSH
83636: LD_INT 29
83638: PUSH
83639: LD_INT 91
83641: PUSH
83642: LD_INT 49
83644: PUSH
83645: EMPTY
83646: LIST
83647: LIST
83648: LIST
83649: ST_TO_ADDR
// if not result then
83650: LD_VAR 0 3
83654: NOT
83655: IFFALSE 83659
// exit ;
83657: GO 84123
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83659: LD_ADDR_VAR 0 5
83663: PUSH
83664: LD_INT 81
83666: PUSH
83667: LD_VAR 0 8
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PPUSH
83676: CALL_OW 69
83680: ST_TO_ADDR
// for i in result do
83681: LD_ADDR_VAR 0 4
83685: PUSH
83686: LD_VAR 0 3
83690: PUSH
83691: FOR_IN
83692: IFFALSE 84121
// begin tag := GetTag ( i ) + 1 ;
83694: LD_ADDR_VAR 0 9
83698: PUSH
83699: LD_VAR 0 4
83703: PPUSH
83704: CALL_OW 110
83708: PUSH
83709: LD_INT 1
83711: PLUS
83712: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83713: LD_ADDR_VAR 0 7
83717: PUSH
83718: LD_VAR 0 4
83722: PPUSH
83723: CALL_OW 250
83727: PPUSH
83728: LD_VAR 0 4
83732: PPUSH
83733: CALL_OW 251
83737: PPUSH
83738: LD_INT 4
83740: PPUSH
83741: CALL 83314 0 3
83745: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83746: LD_VAR 0 4
83750: PPUSH
83751: CALL_OW 247
83755: PUSH
83756: LD_INT 2
83758: EQUAL
83759: IFFALSE 83771
83761: PUSH
83762: LD_VAR 0 7
83766: PUSH
83767: LD_INT 2
83769: GREATER
83770: AND
83771: IFFALSE 83791
83773: PUSH
83774: LD_VAR 0 4
83778: PPUSH
83779: CALL_OW 264
83783: PUSH
83784: LD_VAR 0 10
83788: IN
83789: NOT
83790: AND
83791: IFFALSE 83830
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83793: LD_VAR 0 4
83797: PPUSH
83798: LD_VAR 0 7
83802: PUSH
83803: LD_INT 1
83805: ARRAY
83806: PUSH
83807: LD_INT 1
83809: ARRAY
83810: PPUSH
83811: LD_VAR 0 7
83815: PUSH
83816: LD_INT 1
83818: ARRAY
83819: PUSH
83820: LD_INT 2
83822: ARRAY
83823: PPUSH
83824: CALL_OW 116
83828: GO 84119
// if path > tag then
83830: LD_VAR 0 2
83834: PUSH
83835: LD_VAR 0 9
83839: GREATER
83840: IFFALSE 84048
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83842: LD_ADDR_VAR 0 6
83846: PUSH
83847: LD_VAR 0 5
83851: PPUSH
83852: LD_INT 91
83854: PUSH
83855: LD_VAR 0 4
83859: PUSH
83860: LD_INT 8
83862: PUSH
83863: EMPTY
83864: LIST
83865: LIST
83866: LIST
83867: PPUSH
83868: CALL_OW 72
83872: ST_TO_ADDR
// if nearEnemy then
83873: LD_VAR 0 6
83877: IFFALSE 83946
// begin if GetWeapon ( i ) = ru_time_lapser then
83879: LD_VAR 0 4
83883: PPUSH
83884: CALL_OW 264
83888: PUSH
83889: LD_INT 49
83891: EQUAL
83892: IFFALSE 83920
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83894: LD_VAR 0 4
83898: PPUSH
83899: LD_VAR 0 6
83903: PPUSH
83904: LD_VAR 0 4
83908: PPUSH
83909: CALL_OW 74
83913: PPUSH
83914: CALL_OW 112
83918: GO 83944
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83920: LD_VAR 0 4
83924: PPUSH
83925: LD_VAR 0 6
83929: PPUSH
83930: LD_VAR 0 4
83934: PPUSH
83935: CALL_OW 74
83939: PPUSH
83940: CALL 85204 0 2
// end else
83944: GO 84046
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83946: LD_VAR 0 4
83950: PPUSH
83951: LD_VAR 0 2
83955: PUSH
83956: LD_VAR 0 9
83960: ARRAY
83961: PUSH
83962: LD_INT 1
83964: ARRAY
83965: PPUSH
83966: LD_VAR 0 2
83970: PUSH
83971: LD_VAR 0 9
83975: ARRAY
83976: PUSH
83977: LD_INT 2
83979: ARRAY
83980: PPUSH
83981: CALL_OW 297
83985: PUSH
83986: LD_INT 6
83988: GREATER
83989: IFFALSE 84032
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83991: LD_VAR 0 4
83995: PPUSH
83996: LD_VAR 0 2
84000: PUSH
84001: LD_VAR 0 9
84005: ARRAY
84006: PUSH
84007: LD_INT 1
84009: ARRAY
84010: PPUSH
84011: LD_VAR 0 2
84015: PUSH
84016: LD_VAR 0 9
84020: ARRAY
84021: PUSH
84022: LD_INT 2
84024: ARRAY
84025: PPUSH
84026: CALL_OW 114
84030: GO 84046
// SetTag ( i , tag ) ;
84032: LD_VAR 0 4
84036: PPUSH
84037: LD_VAR 0 9
84041: PPUSH
84042: CALL_OW 109
// end else
84046: GO 84119
// if enemy then
84048: LD_VAR 0 5
84052: IFFALSE 84119
// begin if GetWeapon ( i ) = ru_time_lapser then
84054: LD_VAR 0 4
84058: PPUSH
84059: CALL_OW 264
84063: PUSH
84064: LD_INT 49
84066: EQUAL
84067: IFFALSE 84095
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84069: LD_VAR 0 4
84073: PPUSH
84074: LD_VAR 0 5
84078: PPUSH
84079: LD_VAR 0 4
84083: PPUSH
84084: CALL_OW 74
84088: PPUSH
84089: CALL_OW 112
84093: GO 84119
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84095: LD_VAR 0 4
84099: PPUSH
84100: LD_VAR 0 5
84104: PPUSH
84105: LD_VAR 0 4
84109: PPUSH
84110: CALL_OW 74
84114: PPUSH
84115: CALL 85204 0 2
// end ; end ;
84119: GO 83691
84121: POP
84122: POP
// end ;
84123: LD_VAR 0 3
84127: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84128: LD_INT 0
84130: PPUSH
84131: PPUSH
84132: PPUSH
// if not unit or IsInUnit ( unit ) then
84133: LD_VAR 0 1
84137: NOT
84138: IFTRUE 84151
84140: PUSH
84141: LD_VAR 0 1
84145: PPUSH
84146: CALL_OW 310
84150: OR
84151: IFFALSE 84155
// exit ;
84153: GO 84246
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84155: LD_ADDR_VAR 0 4
84159: PUSH
84160: LD_VAR 0 1
84164: PPUSH
84165: CALL_OW 250
84169: PPUSH
84170: LD_VAR 0 2
84174: PPUSH
84175: LD_INT 1
84177: PPUSH
84178: CALL_OW 272
84182: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84183: LD_ADDR_VAR 0 5
84187: PUSH
84188: LD_VAR 0 1
84192: PPUSH
84193: CALL_OW 251
84197: PPUSH
84198: LD_VAR 0 2
84202: PPUSH
84203: LD_INT 1
84205: PPUSH
84206: CALL_OW 273
84210: ST_TO_ADDR
// if ValidHex ( x , y ) then
84211: LD_VAR 0 4
84215: PPUSH
84216: LD_VAR 0 5
84220: PPUSH
84221: CALL_OW 488
84225: IFFALSE 84246
// ComTurnXY ( unit , x , y ) ;
84227: LD_VAR 0 1
84231: PPUSH
84232: LD_VAR 0 4
84236: PPUSH
84237: LD_VAR 0 5
84241: PPUSH
84242: CALL_OW 118
// end ;
84246: LD_VAR 0 3
84250: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84251: LD_INT 0
84253: PPUSH
84254: PPUSH
// result := false ;
84255: LD_ADDR_VAR 0 3
84259: PUSH
84260: LD_INT 0
84262: ST_TO_ADDR
// if not units then
84263: LD_VAR 0 2
84267: NOT
84268: IFFALSE 84272
// exit ;
84270: GO 84317
// for i in units do
84272: LD_ADDR_VAR 0 4
84276: PUSH
84277: LD_VAR 0 2
84281: PUSH
84282: FOR_IN
84283: IFFALSE 84315
// if See ( side , i ) then
84285: LD_VAR 0 1
84289: PPUSH
84290: LD_VAR 0 4
84294: PPUSH
84295: CALL_OW 292
84299: IFFALSE 84313
// begin result := true ;
84301: LD_ADDR_VAR 0 3
84305: PUSH
84306: LD_INT 1
84308: ST_TO_ADDR
// exit ;
84309: POP
84310: POP
84311: GO 84317
// end ;
84313: GO 84282
84315: POP
84316: POP
// end ;
84317: LD_VAR 0 3
84321: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84322: LD_INT 0
84324: PPUSH
84325: PPUSH
84326: PPUSH
84327: PPUSH
// if not unit or not points then
84328: LD_VAR 0 1
84332: NOT
84333: IFTRUE 84342
84335: PUSH
84336: LD_VAR 0 2
84340: NOT
84341: OR
84342: IFFALSE 84346
// exit ;
84344: GO 84436
// dist := 99999 ;
84346: LD_ADDR_VAR 0 5
84350: PUSH
84351: LD_INT 99999
84353: ST_TO_ADDR
// for i in points do
84354: LD_ADDR_VAR 0 4
84358: PUSH
84359: LD_VAR 0 2
84363: PUSH
84364: FOR_IN
84365: IFFALSE 84434
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84367: LD_ADDR_VAR 0 6
84371: PUSH
84372: LD_VAR 0 1
84376: PPUSH
84377: LD_VAR 0 4
84381: PUSH
84382: LD_INT 1
84384: ARRAY
84385: PPUSH
84386: LD_VAR 0 4
84390: PUSH
84391: LD_INT 2
84393: ARRAY
84394: PPUSH
84395: CALL_OW 297
84399: ST_TO_ADDR
// if tmpDist < dist then
84400: LD_VAR 0 6
84404: PUSH
84405: LD_VAR 0 5
84409: LESS
84410: IFFALSE 84432
// begin result := i ;
84412: LD_ADDR_VAR 0 3
84416: PUSH
84417: LD_VAR 0 4
84421: ST_TO_ADDR
// dist := tmpDist ;
84422: LD_ADDR_VAR 0 5
84426: PUSH
84427: LD_VAR 0 6
84431: ST_TO_ADDR
// end ; end ;
84432: GO 84364
84434: POP
84435: POP
// end ;
84436: LD_VAR 0 3
84440: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84441: LD_INT 0
84443: PPUSH
// uc_side := side ;
84444: LD_ADDR_OWVAR 20
84448: PUSH
84449: LD_VAR 0 1
84453: ST_TO_ADDR
// uc_nation := 3 ;
84454: LD_ADDR_OWVAR 21
84458: PUSH
84459: LD_INT 3
84461: ST_TO_ADDR
// vc_chassis := 25 ;
84462: LD_ADDR_OWVAR 37
84466: PUSH
84467: LD_INT 25
84469: ST_TO_ADDR
// vc_engine := engine_siberite ;
84470: LD_ADDR_OWVAR 39
84474: PUSH
84475: LD_INT 3
84477: ST_TO_ADDR
// vc_control := control_computer ;
84478: LD_ADDR_OWVAR 38
84482: PUSH
84483: LD_INT 3
84485: ST_TO_ADDR
// vc_weapon := 59 ;
84486: LD_ADDR_OWVAR 40
84490: PUSH
84491: LD_INT 59
84493: ST_TO_ADDR
// result := CreateVehicle ;
84494: LD_ADDR_VAR 0 5
84498: PUSH
84499: CALL_OW 45
84503: ST_TO_ADDR
// SetDir ( result , d ) ;
84504: LD_VAR 0 5
84508: PPUSH
84509: LD_VAR 0 4
84513: PPUSH
84514: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84518: LD_VAR 0 5
84522: PPUSH
84523: LD_VAR 0 2
84527: PPUSH
84528: LD_VAR 0 3
84532: PPUSH
84533: LD_INT 0
84535: PPUSH
84536: CALL_OW 48
// end ;
84540: LD_VAR 0 5
84544: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84545: LD_INT 0
84547: PPUSH
84548: PPUSH
84549: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84550: LD_ADDR_VAR 0 2
84554: PUSH
84555: LD_INT 0
84557: PUSH
84558: LD_INT 0
84560: PUSH
84561: LD_INT 0
84563: PUSH
84564: LD_INT 0
84566: PUSH
84567: EMPTY
84568: LIST
84569: LIST
84570: LIST
84571: LIST
84572: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84573: LD_VAR 0 1
84577: NOT
84578: IFTRUE 84611
84580: PUSH
84581: LD_VAR 0 1
84585: PPUSH
84586: CALL_OW 264
84590: PUSH
84591: LD_INT 12
84593: PUSH
84594: LD_INT 51
84596: PUSH
84597: LD_INT 32
84599: PUSH
84600: LD_INT 89
84602: PUSH
84603: EMPTY
84604: LIST
84605: LIST
84606: LIST
84607: LIST
84608: IN
84609: NOT
84610: OR
84611: IFFALSE 84615
// exit ;
84613: GO 84713
// for i := 1 to 3 do
84615: LD_ADDR_VAR 0 3
84619: PUSH
84620: DOUBLE
84621: LD_INT 1
84623: DEC
84624: ST_TO_ADDR
84625: LD_INT 3
84627: PUSH
84628: FOR_TO
84629: IFFALSE 84711
// begin tmp := GetCargo ( cargo , i ) ;
84631: LD_ADDR_VAR 0 4
84635: PUSH
84636: LD_VAR 0 1
84640: PPUSH
84641: LD_VAR 0 3
84645: PPUSH
84646: CALL_OW 289
84650: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84651: LD_ADDR_VAR 0 2
84655: PUSH
84656: LD_VAR 0 2
84660: PPUSH
84661: LD_VAR 0 3
84665: PPUSH
84666: LD_VAR 0 4
84670: PPUSH
84671: CALL_OW 1
84675: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84676: LD_ADDR_VAR 0 2
84680: PUSH
84681: LD_VAR 0 2
84685: PPUSH
84686: LD_INT 4
84688: PPUSH
84689: LD_VAR 0 2
84693: PUSH
84694: LD_INT 4
84696: ARRAY
84697: PUSH
84698: LD_VAR 0 4
84702: PLUS
84703: PPUSH
84704: CALL_OW 1
84708: ST_TO_ADDR
// end ;
84709: GO 84628
84711: POP
84712: POP
// end ;
84713: LD_VAR 0 2
84717: RET
// export function Length ( array ) ; begin
84718: LD_INT 0
84720: PPUSH
// result := array + 0 ;
84721: LD_ADDR_VAR 0 2
84725: PUSH
84726: LD_VAR 0 1
84730: PUSH
84731: LD_INT 0
84733: PLUS
84734: ST_TO_ADDR
// end ;
84735: LD_VAR 0 2
84739: RET
// export function PrepareArray ( array ) ; begin
84740: LD_INT 0
84742: PPUSH
// result := array diff 0 ;
84743: LD_ADDR_VAR 0 2
84747: PUSH
84748: LD_VAR 0 1
84752: PUSH
84753: LD_INT 0
84755: DIFF
84756: ST_TO_ADDR
// if not result [ 1 ] then
84757: LD_VAR 0 2
84761: PUSH
84762: LD_INT 1
84764: ARRAY
84765: NOT
84766: IFFALSE 84786
// result := Delete ( result , 1 ) ;
84768: LD_ADDR_VAR 0 2
84772: PUSH
84773: LD_VAR 0 2
84777: PPUSH
84778: LD_INT 1
84780: PPUSH
84781: CALL_OW 3
84785: ST_TO_ADDR
// end ;
84786: LD_VAR 0 2
84790: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84791: LD_INT 0
84793: PPUSH
84794: PPUSH
84795: PPUSH
84796: PPUSH
// sibRocketRange := 25 ;
84797: LD_ADDR_VAR 0 6
84801: PUSH
84802: LD_INT 25
84804: ST_TO_ADDR
// result := false ;
84805: LD_ADDR_VAR 0 4
84809: PUSH
84810: LD_INT 0
84812: ST_TO_ADDR
// for i := 0 to 5 do
84813: LD_ADDR_VAR 0 5
84817: PUSH
84818: DOUBLE
84819: LD_INT 0
84821: DEC
84822: ST_TO_ADDR
84823: LD_INT 5
84825: PUSH
84826: FOR_TO
84827: IFFALSE 84894
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84829: LD_VAR 0 1
84833: PPUSH
84834: LD_VAR 0 5
84838: PPUSH
84839: LD_VAR 0 6
84843: PPUSH
84844: CALL_OW 272
84848: PPUSH
84849: LD_VAR 0 2
84853: PPUSH
84854: LD_VAR 0 5
84858: PPUSH
84859: LD_VAR 0 6
84863: PPUSH
84864: CALL_OW 273
84868: PPUSH
84869: LD_VAR 0 3
84873: PPUSH
84874: CALL_OW 309
84878: IFFALSE 84892
// begin result := true ;
84880: LD_ADDR_VAR 0 4
84884: PUSH
84885: LD_INT 1
84887: ST_TO_ADDR
// exit ;
84888: POP
84889: POP
84890: GO 84896
// end ;
84892: GO 84826
84894: POP
84895: POP
// end ;
84896: LD_VAR 0 4
84900: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84901: LD_INT 0
84903: PPUSH
84904: PPUSH
84905: PPUSH
// if btype = b_depot then
84906: LD_VAR 0 2
84910: PUSH
84911: LD_INT 0
84913: EQUAL
84914: IFFALSE 84926
// begin result := true ;
84916: LD_ADDR_VAR 0 3
84920: PUSH
84921: LD_INT 1
84923: ST_TO_ADDR
// exit ;
84924: GO 85046
// end ; pom := GetBase ( depot ) ;
84926: LD_ADDR_VAR 0 4
84930: PUSH
84931: LD_VAR 0 1
84935: PPUSH
84936: CALL_OW 274
84940: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84941: LD_ADDR_VAR 0 5
84945: PUSH
84946: LD_VAR 0 2
84950: PPUSH
84951: LD_VAR 0 1
84955: PPUSH
84956: CALL_OW 248
84960: PPUSH
84961: CALL_OW 450
84965: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84966: LD_ADDR_VAR 0 3
84970: PUSH
84971: LD_VAR 0 4
84975: PPUSH
84976: LD_INT 1
84978: PPUSH
84979: CALL_OW 275
84983: PUSH
84984: LD_VAR 0 5
84988: PUSH
84989: LD_INT 1
84991: ARRAY
84992: GREATEREQUAL
84993: IFFALSE 85019
84995: PUSH
84996: LD_VAR 0 4
85000: PPUSH
85001: LD_INT 2
85003: PPUSH
85004: CALL_OW 275
85008: PUSH
85009: LD_VAR 0 5
85013: PUSH
85014: LD_INT 2
85016: ARRAY
85017: GREATEREQUAL
85018: AND
85019: IFFALSE 85045
85021: PUSH
85022: LD_VAR 0 4
85026: PPUSH
85027: LD_INT 3
85029: PPUSH
85030: CALL_OW 275
85034: PUSH
85035: LD_VAR 0 5
85039: PUSH
85040: LD_INT 3
85042: ARRAY
85043: GREATEREQUAL
85044: AND
85045: ST_TO_ADDR
// end ;
85046: LD_VAR 0 3
85050: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
85051: LD_INT 0
85053: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
85054: LD_VAR 0 1
85058: PPUSH
85059: LD_VAR 0 2
85063: PPUSH
85064: LD_INT 0
85066: PPUSH
85067: LD_INT 0
85069: PPUSH
85070: LD_INT 1
85072: PPUSH
85073: LD_INT 0
85075: PPUSH
85076: CALL_OW 587
// end ;
85080: LD_VAR 0 3
85084: RET
// export function CenterOnNow ( unit ) ; begin
85085: LD_INT 0
85087: PPUSH
// result := IsInUnit ( unit ) ;
85088: LD_ADDR_VAR 0 2
85092: PUSH
85093: LD_VAR 0 1
85097: PPUSH
85098: CALL_OW 310
85102: ST_TO_ADDR
// if not result then
85103: LD_VAR 0 2
85107: NOT
85108: IFFALSE 85120
// result := unit ;
85110: LD_ADDR_VAR 0 2
85114: PUSH
85115: LD_VAR 0 1
85119: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85120: LD_VAR 0 1
85124: PPUSH
85125: CALL_OW 87
// end ;
85129: LD_VAR 0 2
85133: RET
// export function ComMoveHex ( unit , hex ) ; begin
85134: LD_INT 0
85136: PPUSH
// if not hex then
85137: LD_VAR 0 2
85141: NOT
85142: IFFALSE 85146
// exit ;
85144: GO 85199
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85146: LD_VAR 0 2
85150: PUSH
85151: LD_INT 1
85153: ARRAY
85154: PPUSH
85155: LD_VAR 0 2
85159: PUSH
85160: LD_INT 2
85162: ARRAY
85163: PPUSH
85164: CALL_OW 428
85168: IFFALSE 85172
// exit ;
85170: GO 85199
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85172: LD_VAR 0 1
85176: PPUSH
85177: LD_VAR 0 2
85181: PUSH
85182: LD_INT 1
85184: ARRAY
85185: PPUSH
85186: LD_VAR 0 2
85190: PUSH
85191: LD_INT 2
85193: ARRAY
85194: PPUSH
85195: CALL_OW 111
// end ;
85199: LD_VAR 0 3
85203: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85204: LD_INT 0
85206: PPUSH
85207: PPUSH
85208: PPUSH
// if not unit or not enemy then
85209: LD_VAR 0 1
85213: NOT
85214: IFTRUE 85223
85216: PUSH
85217: LD_VAR 0 2
85221: NOT
85222: OR
85223: IFFALSE 85227
// exit ;
85225: GO 85353
// x := GetX ( enemy ) ;
85227: LD_ADDR_VAR 0 4
85231: PUSH
85232: LD_VAR 0 2
85236: PPUSH
85237: CALL_OW 250
85241: ST_TO_ADDR
// y := GetY ( enemy ) ;
85242: LD_ADDR_VAR 0 5
85246: PUSH
85247: LD_VAR 0 2
85251: PPUSH
85252: CALL_OW 251
85256: ST_TO_ADDR
// if ValidHex ( x , y ) then
85257: LD_VAR 0 4
85261: PPUSH
85262: LD_VAR 0 5
85266: PPUSH
85267: CALL_OW 488
85271: IFFALSE 85353
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85273: LD_VAR 0 2
85277: PPUSH
85278: CALL_OW 247
85282: PUSH
85283: LD_INT 3
85285: PUSH
85286: LD_INT 2
85288: PUSH
85289: EMPTY
85290: LIST
85291: LIST
85292: IN
85293: IFTRUE 85316
85295: PUSH
85296: LD_VAR 0 1
85300: PPUSH
85301: CALL_OW 255
85305: PPUSH
85306: LD_VAR 0 2
85310: PPUSH
85311: CALL_OW 292
85315: OR
85316: IFFALSE 85334
// ComAttackUnit ( unit , enemy ) else
85318: LD_VAR 0 1
85322: PPUSH
85323: LD_VAR 0 2
85327: PPUSH
85328: CALL_OW 115
85332: GO 85353
// ComAgressiveMove ( unit , x , y ) ;
85334: LD_VAR 0 1
85338: PPUSH
85339: LD_VAR 0 4
85343: PPUSH
85344: LD_VAR 0 5
85348: PPUSH
85349: CALL_OW 114
// end ;
85353: LD_VAR 0 3
85357: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85358: LD_INT 0
85360: PPUSH
85361: PPUSH
85362: PPUSH
// list := AreaToList ( area , 0 ) ;
85363: LD_ADDR_VAR 0 5
85367: PUSH
85368: LD_VAR 0 1
85372: PPUSH
85373: LD_INT 0
85375: PPUSH
85376: CALL_OW 517
85380: ST_TO_ADDR
// if not list then
85381: LD_VAR 0 5
85385: NOT
85386: IFFALSE 85390
// exit ;
85388: GO 85520
// if all then
85390: LD_VAR 0 2
85394: IFFALSE 85482
// begin for i := 1 to list [ 1 ] do
85396: LD_ADDR_VAR 0 4
85400: PUSH
85401: DOUBLE
85402: LD_INT 1
85404: DEC
85405: ST_TO_ADDR
85406: LD_VAR 0 5
85410: PUSH
85411: LD_INT 1
85413: ARRAY
85414: PUSH
85415: FOR_TO
85416: IFFALSE 85478
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85418: LD_ADDR_VAR 0 3
85422: PUSH
85423: LD_VAR 0 3
85427: PPUSH
85428: LD_VAR 0 3
85432: PUSH
85433: LD_INT 1
85435: PLUS
85436: PPUSH
85437: LD_VAR 0 5
85441: PUSH
85442: LD_INT 1
85444: ARRAY
85445: PUSH
85446: LD_VAR 0 4
85450: ARRAY
85451: PUSH
85452: LD_VAR 0 5
85456: PUSH
85457: LD_INT 2
85459: ARRAY
85460: PUSH
85461: LD_VAR 0 4
85465: ARRAY
85466: PUSH
85467: EMPTY
85468: LIST
85469: LIST
85470: PPUSH
85471: CALL_OW 1
85475: ST_TO_ADDR
85476: GO 85415
85478: POP
85479: POP
// exit ;
85480: GO 85520
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85482: LD_ADDR_VAR 0 3
85486: PUSH
85487: LD_VAR 0 5
85491: PUSH
85492: LD_INT 1
85494: ARRAY
85495: PUSH
85496: LD_INT 1
85498: ARRAY
85499: PUSH
85500: LD_VAR 0 5
85504: PUSH
85505: LD_INT 2
85507: ARRAY
85508: PUSH
85509: LD_INT 1
85511: ARRAY
85512: PUSH
85513: EMPTY
85514: LIST
85515: LIST
85516: PUSH
85517: EMPTY
85518: LIST
85519: ST_TO_ADDR
// end ;
85520: LD_VAR 0 3
85524: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85525: LD_INT 0
85527: PPUSH
85528: PPUSH
// list := AreaToList ( area , 0 ) ;
85529: LD_ADDR_VAR 0 4
85533: PUSH
85534: LD_VAR 0 1
85538: PPUSH
85539: LD_INT 0
85541: PPUSH
85542: CALL_OW 517
85546: ST_TO_ADDR
// if not list then
85547: LD_VAR 0 4
85551: NOT
85552: IFFALSE 85556
// exit ;
85554: GO 85597
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85556: LD_ADDR_VAR 0 3
85560: PUSH
85561: LD_VAR 0 4
85565: PUSH
85566: LD_INT 1
85568: ARRAY
85569: PUSH
85570: LD_INT 1
85572: ARRAY
85573: PUSH
85574: LD_VAR 0 4
85578: PUSH
85579: LD_INT 2
85581: ARRAY
85582: PUSH
85583: LD_INT 1
85585: ARRAY
85586: PUSH
85587: LD_VAR 0 2
85591: PUSH
85592: EMPTY
85593: LIST
85594: LIST
85595: LIST
85596: ST_TO_ADDR
// end ;
85597: LD_VAR 0 3
85601: RET
// export function First ( array ) ; begin
85602: LD_INT 0
85604: PPUSH
// if not array then
85605: LD_VAR 0 1
85609: NOT
85610: IFFALSE 85614
// exit ;
85612: GO 85628
// result := array [ 1 ] ;
85614: LD_ADDR_VAR 0 2
85618: PUSH
85619: LD_VAR 0 1
85623: PUSH
85624: LD_INT 1
85626: ARRAY
85627: ST_TO_ADDR
// end ;
85628: LD_VAR 0 2
85632: RET
// export function Last ( array ) ; begin
85633: LD_INT 0
85635: PPUSH
// if not array then
85636: LD_VAR 0 1
85640: NOT
85641: IFFALSE 85645
// exit ;
85643: GO 85661
// result := array [ array ] ;
85645: LD_ADDR_VAR 0 2
85649: PUSH
85650: LD_VAR 0 1
85654: PUSH
85655: LD_VAR 0 1
85659: ARRAY
85660: ST_TO_ADDR
// end ;
85661: LD_VAR 0 2
85665: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85666: LD_INT 0
85668: PPUSH
85669: PPUSH
// result := [ ] ;
85670: LD_ADDR_VAR 0 5
85674: PUSH
85675: EMPTY
85676: ST_TO_ADDR
// if not array then
85677: LD_VAR 0 1
85681: NOT
85682: IFFALSE 85686
// exit ;
85684: GO 85798
// for i := 1 to array do
85686: LD_ADDR_VAR 0 6
85690: PUSH
85691: DOUBLE
85692: LD_INT 1
85694: DEC
85695: ST_TO_ADDR
85696: LD_VAR 0 1
85700: PUSH
85701: FOR_TO
85702: IFFALSE 85796
// if array [ i ] [ index ] = value then
85704: LD_VAR 0 1
85708: PUSH
85709: LD_VAR 0 6
85713: ARRAY
85714: PUSH
85715: LD_VAR 0 2
85719: ARRAY
85720: PUSH
85721: LD_VAR 0 3
85725: EQUAL
85726: IFFALSE 85794
// begin if indexColumn then
85728: LD_VAR 0 4
85732: IFFALSE 85768
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85734: LD_ADDR_VAR 0 5
85738: PUSH
85739: LD_VAR 0 5
85743: PPUSH
85744: LD_VAR 0 1
85748: PUSH
85749: LD_VAR 0 6
85753: ARRAY
85754: PUSH
85755: LD_VAR 0 4
85759: ARRAY
85760: PPUSH
85761: CALL 80806 0 2
85765: ST_TO_ADDR
85766: GO 85794
// result := Join ( result , array [ i ] ) ;
85768: LD_ADDR_VAR 0 5
85772: PUSH
85773: LD_VAR 0 5
85777: PPUSH
85778: LD_VAR 0 1
85782: PUSH
85783: LD_VAR 0 6
85787: ARRAY
85788: PPUSH
85789: CALL 80806 0 2
85793: ST_TO_ADDR
// end ;
85794: GO 85701
85796: POP
85797: POP
// end ;
85798: LD_VAR 0 5
85802: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85803: LD_INT 0
85805: PPUSH
// if not vehicles or not parkingPoint then
85806: LD_VAR 0 1
85810: NOT
85811: IFTRUE 85820
85813: PUSH
85814: LD_VAR 0 2
85818: NOT
85819: OR
85820: IFFALSE 85824
// exit ;
85822: GO 85922
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85824: LD_ADDR_VAR 0 1
85828: PUSH
85829: LD_VAR 0 1
85833: PPUSH
85834: LD_INT 50
85836: PUSH
85837: EMPTY
85838: LIST
85839: PUSH
85840: LD_INT 3
85842: PUSH
85843: LD_INT 92
85845: PUSH
85846: LD_VAR 0 2
85850: PUSH
85851: LD_INT 1
85853: ARRAY
85854: PUSH
85855: LD_VAR 0 2
85859: PUSH
85860: LD_INT 2
85862: ARRAY
85863: PUSH
85864: LD_INT 8
85866: PUSH
85867: EMPTY
85868: LIST
85869: LIST
85870: LIST
85871: LIST
85872: PUSH
85873: EMPTY
85874: LIST
85875: LIST
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PPUSH
85881: CALL_OW 72
85885: ST_TO_ADDR
// if not vehicles then
85886: LD_VAR 0 1
85890: NOT
85891: IFFALSE 85895
// exit ;
85893: GO 85922
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85895: LD_VAR 0 1
85899: PPUSH
85900: LD_VAR 0 2
85904: PUSH
85905: LD_INT 1
85907: ARRAY
85908: PPUSH
85909: LD_VAR 0 2
85913: PUSH
85914: LD_INT 2
85916: ARRAY
85917: PPUSH
85918: CALL_OW 111
// end ;
85922: LD_VAR 0 3
85926: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85927: LD_INT 0
85929: PPUSH
85930: PPUSH
85931: PPUSH
// if not side or not area then
85932: LD_VAR 0 1
85936: NOT
85937: IFTRUE 85946
85939: PUSH
85940: LD_VAR 0 2
85944: NOT
85945: OR
85946: IFFALSE 85950
// exit ;
85948: GO 86069
// tmp := AreaToList ( area , 0 ) ;
85950: LD_ADDR_VAR 0 5
85954: PUSH
85955: LD_VAR 0 2
85959: PPUSH
85960: LD_INT 0
85962: PPUSH
85963: CALL_OW 517
85967: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85968: LD_ADDR_VAR 0 4
85972: PUSH
85973: DOUBLE
85974: LD_INT 1
85976: DEC
85977: ST_TO_ADDR
85978: LD_VAR 0 5
85982: PUSH
85983: LD_INT 1
85985: ARRAY
85986: PUSH
85987: FOR_TO
85988: IFFALSE 86067
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85990: LD_VAR 0 5
85994: PUSH
85995: LD_INT 1
85997: ARRAY
85998: PUSH
85999: LD_VAR 0 4
86003: ARRAY
86004: PPUSH
86005: LD_VAR 0 5
86009: PUSH
86010: LD_INT 2
86012: ARRAY
86013: PUSH
86014: LD_VAR 0 4
86018: ARRAY
86019: PPUSH
86020: CALL_OW 351
86024: IFFALSE 86065
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
86026: LD_VAR 0 5
86030: PUSH
86031: LD_INT 1
86033: ARRAY
86034: PUSH
86035: LD_VAR 0 4
86039: ARRAY
86040: PPUSH
86041: LD_VAR 0 5
86045: PUSH
86046: LD_INT 2
86048: ARRAY
86049: PUSH
86050: LD_VAR 0 4
86054: ARRAY
86055: PPUSH
86056: LD_VAR 0 1
86060: PPUSH
86061: CALL_OW 244
// end ;
86065: GO 85987
86067: POP
86068: POP
// end ;
86069: LD_VAR 0 3
86073: RET
// export function UniqueArray ( array ) ; var i ; begin
86074: LD_INT 0
86076: PPUSH
86077: PPUSH
// result := [ ] ;
86078: LD_ADDR_VAR 0 2
86082: PUSH
86083: EMPTY
86084: ST_TO_ADDR
// if not array then
86085: LD_VAR 0 1
86089: NOT
86090: IFFALSE 86094
// exit ;
86092: GO 86155
// for i := 1 to array do
86094: LD_ADDR_VAR 0 3
86098: PUSH
86099: DOUBLE
86100: LD_INT 1
86102: DEC
86103: ST_TO_ADDR
86104: LD_VAR 0 1
86108: PUSH
86109: FOR_TO
86110: IFFALSE 86153
// if not array [ i ] in result then
86112: LD_VAR 0 1
86116: PUSH
86117: LD_VAR 0 3
86121: ARRAY
86122: PUSH
86123: LD_VAR 0 2
86127: IN
86128: NOT
86129: IFFALSE 86151
// result := Join ( result , i ) ;
86131: LD_ADDR_VAR 0 2
86135: PUSH
86136: LD_VAR 0 2
86140: PPUSH
86141: LD_VAR 0 3
86145: PPUSH
86146: CALL 80806 0 2
86150: ST_TO_ADDR
86151: GO 86109
86153: POP
86154: POP
// end ; end_of_file
86155: LD_VAR 0 2
86159: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86160: LD_VAR 0 1
86164: PUSH
86165: LD_INT 200
86167: DOUBLE
86168: GREATEREQUAL
86169: IFFALSE 86177
86171: LD_INT 299
86173: DOUBLE
86174: LESSEQUAL
86175: IFTRUE 86179
86177: GO 86211
86179: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86180: LD_VAR 0 1
86184: PPUSH
86185: LD_VAR 0 2
86189: PPUSH
86190: LD_VAR 0 3
86194: PPUSH
86195: LD_VAR 0 4
86199: PPUSH
86200: LD_VAR 0 5
86204: PPUSH
86205: CALL 36882 0 5
86209: GO 86288
86211: LD_INT 300
86213: DOUBLE
86214: GREATEREQUAL
86215: IFFALSE 86223
86217: LD_INT 399
86219: DOUBLE
86220: LESSEQUAL
86221: IFTRUE 86225
86223: GO 86287
86225: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86226: LD_VAR 0 1
86230: PPUSH
86231: LD_VAR 0 2
86235: PPUSH
86236: LD_VAR 0 3
86240: PPUSH
86241: LD_VAR 0 4
86245: PPUSH
86246: LD_VAR 0 5
86250: PPUSH
86251: LD_VAR 0 6
86255: PPUSH
86256: LD_VAR 0 7
86260: PPUSH
86261: LD_VAR 0 8
86265: PPUSH
86266: LD_VAR 0 9
86270: PPUSH
86271: LD_VAR 0 10
86275: PPUSH
86276: LD_VAR 0 11
86280: PPUSH
86281: CALL 32685 0 11
86285: GO 86288
86287: POP
// end ;
86288: PPOPN 11
86290: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86291: LD_VAR 0 1
86295: PPUSH
86296: LD_VAR 0 2
86300: PPUSH
86301: LD_VAR 0 3
86305: PPUSH
86306: LD_VAR 0 4
86310: PPUSH
86311: LD_VAR 0 5
86315: PPUSH
86316: CALL 36182 0 5
// end ; end_of_file
86320: PPOPN 5
86322: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86323: LD_VAR 0 1
86327: PPUSH
86328: LD_VAR 0 2
86332: PPUSH
86333: LD_VAR 0 3
86337: PPUSH
86338: LD_VAR 0 4
86342: PPUSH
86343: LD_VAR 0 5
86347: PPUSH
86348: LD_VAR 0 6
86352: PPUSH
86353: CALL 20225 0 6
// end ;
86357: PPOPN 6
86359: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86360: LD_INT 0
86362: PPUSH
// begin if not units then
86363: LD_VAR 0 1
86367: NOT
86368: IFFALSE 86372
// exit ;
86370: GO 86406
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
86372: LD_VAR 0 1
86376: PPUSH
86377: LD_VAR 0 2
86381: PPUSH
86382: LD_VAR 0 3
86386: PPUSH
86387: LD_VAR 0 4
86391: PPUSH
86392: LD_VAR 0 5
86396: PPUSH
86397: LD_VAR 0 6
86401: PPUSH
86402: CALL 42579 0 6
// end ;
86406: PPOPN 7
86408: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86409: CALL 20105 0 0
// end ;
86413: PPOPN 1
86415: END
