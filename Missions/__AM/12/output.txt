// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15311 0 0
// PrepareDifficulty ;
 226: CALL 12526 0 0
// PrepareVehicles ;
 230: CALL 1765 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1339 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3153 0 0
// PrepareWestBase ;
 258: CALL 3668 0 0
// PrepareEastBase ;
 262: CALL 3228 0 0
// PrepareOtherRussians ;
 266: CALL 3780 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_STRING 11_
 688: PPUSH
 689: CALL 38610 0 3
 693: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 694: LD_EXP 1
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 21
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 58
 733: PUSH
 734: EMPTY
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 755: LD_STRING 11_Lisa
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: IFFALSE 816
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_STRING Lisa
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 11_
 781: PPUSH
 782: CALL 38610 0 3
 786: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 787: LD_EXP 2
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 799: LD_EXP 2
 803: PPUSH
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end else
 814: GO 832
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL 1339 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 832: LD_STRING 11_Donaldson
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 893
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 845: LD_ADDR_EXP 3
 849: PUSH
 850: LD_STRING Donaldson
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_STRING 11_
 858: PPUSH
 859: CALL 38610 0 3
 863: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 4
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// end else
 891: GO 909
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 909: LD_STRING 11_Cyrus
 911: PPUSH
 912: CALL_OW 28
 916: PUSH
 917: LD_INT 1
 919: EQUAL
 920: IFFALSE 970
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 38610 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1339 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: PUSH
 994: LD_INT 1
 996: EQUAL
 997: IFFALSE 1047
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
 999: LD_ADDR_EXP 6
1003: PUSH
1004: LD_STRING Denis
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_STRING 11_
1012: PPUSH
1013: CALL 38610 0 3
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1063
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1047: LD_INT 4
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 1339 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1063: LD_STRING 11_Frank
1065: PPUSH
1066: CALL_OW 28
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1124
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 38610 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1201
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING Cornell
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_STRING 11_
1166: PPUSH
1167: CALL 38610 0 3
1171: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1184: LD_EXP 10
1188: PPUSH
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// end else
1199: GO 1217
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1201: LD_INT 4
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL 1339 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_EXP 14
1226: PPUSH
1227: LD_INT 26
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: ST_TO_ADDR
// if not tmp then
1242: LD_VAR 0 2
1246: NOT
1247: IFFALSE 1276
// begin PrepareSoldier ( sex_male , 8 ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 8
1254: PPUSH
1255: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// end else
1274: GO 1315
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1276: LD_VAR 0 2
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: DIFF
1314: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1315: LD_ADDR_EXP 22
1319: PUSH
1320: LD_STRING Powell
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: LD_STRING 
1328: PPUSH
1329: CALL 38610 0 3
1333: ST_TO_ADDR
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// if mech = 1 then
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1591
// begin if others11 > 0 then
1356: LD_EXP 14
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1531
// begin for i := 1 to others11 - 1 do
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 14
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1468
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1388: LD_EXP 14
1392: PUSH
1393: LD_VAR 0 6
1397: ARRAY
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: CALL_OW 259
1406: PUSH
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL_OW 259
1429: LESS
1430: IFFALSE 1466
// begin mecha = others11 [ i + 1 ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_EXP 14
1441: PUSH
1442: LD_VAR 0 6
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1452: LD_VAR 0 9
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL_OW 336
// break ;
1464: GO 1468
// end ; end ;
1466: GO 1385
1468: POP
1469: POP
// if spawnMode = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1499
// PlaceUnitArea ( mecha , area , false ) else
1480: LD_VAR 0 9
1484: PPUSH
1485: LD_VAR 0 1
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
1497: GO 1513
// PlaceHumanInUnit ( mecha , veh ) ;
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 52
// others11 = others11 diff mecha ;
1513: LD_ADDR_EXP 14
1517: PUSH
1518: LD_EXP 14
1522: PUSH
1523: LD_VAR 0 9
1527: DIFF
1528: ST_TO_ADDR
// end else
1529: GO 1589
// begin hc_name =  ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING 
1538: ST_TO_ADDR
// hc_gallery =  ;
1539: LD_ADDR_OWVAR 33
1543: PUSH
1544: LD_STRING 
1546: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1547: LD_INT 0
1549: PPUSH
1550: LD_INT 7
1552: PPUSH
1553: LD_INT 9
1555: PPUSH
1556: CALL_OW 12
1560: PPUSH
1561: CALL_OW 383
// un = CreateHuman ;
1565: LD_ADDR_VAR 0 7
1569: PUSH
1570: CALL_OW 44
1574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1575: LD_VAR 0 7
1579: PPUSH
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 52
// end ; end else
1589: GO 1760
// begin if others11 > 0 then
1591: LD_EXP 14
1595: PUSH
1596: LD_INT 0
1598: GREATER
1599: IFFALSE 1672
// begin if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1634
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1611: LD_EXP 14
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
1632: GO 1652
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1634: LD_EXP 14
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_VAR 0 2
1647: PPUSH
1648: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1652: LD_ADDR_EXP 14
1656: PUSH
1657: LD_EXP 14
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 3
1669: ST_TO_ADDR
// end else
1670: GO 1760
// begin hc_name =  ;
1672: LD_ADDR_OWVAR 26
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 3
1699: PUSH
1700: LD_INT 4
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: ARRAY
1720: PPUSH
1721: LD_INT 7
1723: PPUSH
1724: LD_INT 9
1726: PPUSH
1727: CALL_OW 12
1731: PPUSH
1732: CALL_OW 380
// un = CreateHuman ;
1736: LD_ADDR_VAR 0 7
1740: PUSH
1741: CALL_OW 44
1745: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1746: LD_VAR 0 7
1750: PPUSH
1751: LD_VAR 0 2
1755: PPUSH
1756: CALL_OW 52
// end ; end ; end ;
1760: LD_VAR 0 5
1764: RET
// export function PrepareVehicles ; var veh ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1785: LD_ADDR_OWVAR 37
1789: PUSH
1790: LD_INT 3
1792: ST_TO_ADDR
// vc_engine = 3 ;
1793: LD_ADDR_OWVAR 39
1797: PUSH
1798: LD_INT 3
1800: ST_TO_ADDR
// vc_control = 3 ;
1801: LD_ADDR_OWVAR 38
1805: PUSH
1806: LD_INT 3
1808: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// veh = CreateVehicle ;
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: CALL_OW 45
1826: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1827: LD_VAR 0 2
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// vc_weapon = us_double_gun ;
1842: LD_ADDR_OWVAR 40
1846: PUSH
1847: LD_INT 5
1849: ST_TO_ADDR
// vc_control = 1 ;
1850: LD_ADDR_OWVAR 38
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// veh = CreateVehicle ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: CALL_OW 45
1867: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// vc_weapon = us_light_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// vc_control = 3 ;
1891: LD_ADDR_OWVAR 38
1895: PUSH
1896: LD_INT 3
1898: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1899: LD_ADDR_OWVAR 37
1903: PUSH
1904: LD_INT 2
1906: ST_TO_ADDR
// veh = CreateVehicle ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1932: LD_ADDR_OWVAR 40
1936: PUSH
1937: LD_INT 4
1939: ST_TO_ADDR
// veh = CreateVehicle ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: CALL_OW 45
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: LD_INT 4
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PowellSupport1 ; var veh , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
// uc_side = 1 ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// uc_nation = 1 ;
1983: LD_ADDR_OWVAR 21
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1991: LD_STRING 11_Brown
1993: PPUSH
1994: CALL_OW 28
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: IFFALSE 2052
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2004: LD_ADDR_EXP 7
2008: PUSH
2009: LD_STRING Brown
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_STRING 11_
2017: PPUSH
2018: CALL 38610 0 3
2022: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2023: LD_EXP 7
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2035: LD_EXP 7
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL_OW 49
// end else
2050: GO 2068
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2052: LD_INT 4
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL 1339 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2068: LD_STRING 11_Gary
2070: PPUSH
2071: CALL_OW 28
2075: PUSH
2076: LD_INT 1
2078: EQUAL
2079: IFFALSE 2129
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2081: LD_ADDR_EXP 11
2085: PUSH
2086: LD_STRING Gary
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_STRING 11_
2094: PPUSH
2095: CALL 38610 0 3
2099: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2100: LD_EXP 11
2104: PPUSH
2105: LD_INT 2
2107: PPUSH
2108: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2112: LD_EXP 11
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 49
// end else
2127: GO 2145
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 1339 0 4
// end ; vc_chassis = us_medium_tracked ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 3
2152: ST_TO_ADDR
// vc_engine = 3 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 3
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = us_crane ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 13
2176: ST_TO_ADDR
// veh = CreateVehicle ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: CALL_OW 45
2186: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2214: LD_INT 4
2216: PPUSH
2217: LD_VAR 0 2
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL 1339 0 4
// vc_weapon = 9 ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 9
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2277: LD_INT 4
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 2
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: CALL 1339 0 4
// vc_control = 3 ;
2295: LD_ADDR_OWVAR 38
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2303: LD_ADDR_OWVAR 40
2307: PUSH
2308: LD_INT 12
2310: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2311: LD_ADDR_EXP 15
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2321: LD_ADDR_EXP 16
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2331: LD_EXP 15
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2343: LD_EXP 16
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 4
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2385: LD_EXP 15
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 100
2395: PPUSH
2396: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2400: LD_EXP 16
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_INT 80
2410: PPUSH
2411: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2415: LD_EXP 16
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_INT 20
2425: PPUSH
2426: CALL_OW 291
// end ;
2430: LD_VAR 0 1
2434: RET
// export function PowellSupport2 ; var veh , un ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// uc_side = 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 2
2463: ST_TO_ADDR
// vc_engine = 3 ;
2464: LD_ADDR_OWVAR 39
2468: PUSH
2469: LD_INT 3
2471: ST_TO_ADDR
// vc_control = 3 ;
2472: LD_ADDR_OWVAR 38
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2480: LD_ADDR_OWVAR 40
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// veh = CreateVehicle ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: CALL_OW 45
2497: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 4
2505: PPUSH
2506: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// vc_control = 1 ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2533: LD_ADDR_OWVAR 37
2537: PUSH
2538: LD_INT 2
2540: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2559: LD_VAR 0 2
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2571: LD_VAR 0 2
2575: PPUSH
2576: LD_INT 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2586: LD_STRING 11_Bobby
2588: PPUSH
2589: CALL_OW 28
2593: PUSH
2594: LD_INT 1
2596: EQUAL
2597: IFFALSE 2646
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2599: LD_ADDR_EXP 4
2603: PUSH
2604: LD_STRING Bobby
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_STRING 11_
2612: PPUSH
2613: CALL 38610 0 3
2617: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2618: LD_EXP 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2630: LD_EXP 4
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 52
// end else
2644: GO 2664
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 1339 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2664: LD_STRING 11_Houten
2666: PPUSH
2667: CALL_OW 28
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: IFFALSE 2725
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2677: LD_ADDR_EXP 9
2681: PUSH
2682: LD_STRING Houten
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 11_
2690: PPUSH
2691: CALL 38610 0 3
2695: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2696: LD_EXP 9
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2708: LD_EXP 9
2712: PPUSH
2713: LD_INT 4
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 49
// end else
2723: GO 2741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2725: LD_INT 4
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL 1339 0 4
// end ; vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2757: LD_ADDR_EXP 17
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2767: LD_EXP 17
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: CALL_OW 233
// amCargo4 = CreateVehicle ;
2779: LD_ADDR_EXP 18
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2789: LD_EXP 18
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// amCargo5 = CreateVehicle ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: CALL_OW 45
2810: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2811: LD_EXP 19
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2823: LD_EXP 17
2827: PPUSH
2828: LD_INT 4
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2838: LD_EXP 18
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 49
// if kurtStatus > 0 then
2868: LD_EXP 26
2872: PUSH
2873: LD_INT 0
2875: GREATER
2876: IFFALSE 2925
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2878: LD_EXP 17
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2893: LD_EXP 18
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2908: LD_EXP 19
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_INT 80
2918: PPUSH
2919: CALL_OW 291
// end else
2923: GO 2970
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2925: LD_EXP 17
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2940: LD_EXP 18
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: LD_INT 60
2950: PPUSH
2951: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2955: LD_EXP 19
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 100
2965: PPUSH
2966: CALL_OW 291
// end ; end ;
2970: LD_VAR 0 1
2974: RET
// export function PowellSupport3 ; var veh , un ; begin
2975: LD_INT 0
2977: PPUSH
2978: PPUSH
2979: PPUSH
// uc_side = 1 ;
2980: LD_ADDR_OWVAR 20
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// uc_nation = 1 ;
2988: LD_ADDR_OWVAR 21
2992: PUSH
2993: LD_INT 1
2995: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL 1339 0 4
// vc_chassis = us_medium_wheeled ;
3012: LD_ADDR_OWVAR 37
3016: PUSH
3017: LD_INT 2
3019: ST_TO_ADDR
// vc_engine = 3 ;
3020: LD_ADDR_OWVAR 39
3024: PUSH
3025: LD_INT 3
3027: ST_TO_ADDR
// vc_control = 3 ;
3028: LD_ADDR_OWVAR 38
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3036: LD_ADDR_OWVAR 40
3040: PUSH
3041: LD_INT 12
3043: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3044: LD_ADDR_EXP 20
3048: PUSH
3049: CALL_OW 45
3053: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3054: LD_ADDR_EXP 21
3058: PUSH
3059: CALL_OW 45
3063: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3064: LD_EXP 20
3068: PPUSH
3069: LD_INT 4
3071: PPUSH
3072: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3076: LD_EXP 21
3080: PPUSH
3081: LD_INT 4
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3088: LD_EXP 20
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3103: LD_EXP 21
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3118: LD_EXP 20
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 100
3128: PPUSH
3129: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3133: LD_EXP 21
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 100
3143: PPUSH
3144: CALL_OW 291
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareRussianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 3 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3164: LD_ADDR_EXP 23
3168: PUSH
3169: LD_STRING Davidov
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_STRING 
3177: PPUSH
3178: CALL 38610 0 3
3182: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3183: LD_EXP 23
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3195: LD_ADDR_EXP 34
3199: PUSH
3200: LD_EXP 34
3204: PUSH
3205: LD_EXP 23
3209: ADD
3210: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3211: LD_EXP 34
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 336
// end ;
3223: LD_VAR 0 1
3227: RET
// export function PrepareEastBase ; var i , un ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: LD_INT 121
3241: PPUSH
3242: LD_EXP 36
3246: PPUSH
3247: LD_EXP 37
3251: PPUSH
3252: CALL_OW 12
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 121
3275: PPUSH
3276: LD_EXP 36
3280: PPUSH
3281: LD_EXP 37
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 9
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_EXP 36
3314: PPUSH
3315: LD_EXP 37
3319: PPUSH
3320: CALL_OW 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3335: LD_INT 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: LD_INT 112
3343: PPUSH
3344: LD_EXP 36
3348: PPUSH
3349: LD_EXP 37
3353: PPUSH
3354: CALL_OW 12
3358: PPUSH
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 6
3364: PPUSH
3365: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3369: LD_INT 3
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 47
3377: PPUSH
3378: LD_EXP 36
3382: PPUSH
3383: LD_EXP 37
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: LD_INT 4
3395: PPUSH
3396: LD_INT 6
3398: PPUSH
3399: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_INT 129
3411: PPUSH
3412: LD_EXP 36
3416: PPUSH
3417: LD_EXP 37
3421: PPUSH
3422: CALL_OW 12
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 6
3432: PPUSH
3433: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 135
3445: PPUSH
3446: LD_EXP 36
3450: PPUSH
3451: LD_EXP 37
3455: PPUSH
3456: CALL_OW 12
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 6
3466: PPUSH
3467: CALL 12845 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 30
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3546
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_EXP 36
3523: PPUSH
3524: LD_EXP 37
3528: PPUSH
3529: CALL_OW 12
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL 12845 0 6
3544: GO 3505
3546: POP
3547: POP
// for i = 1 to 5 do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 5
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3661
// begin uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// hc_gallery =  ;
3580: LD_ADDR_OWVAR 33
3584: PUSH
3585: LD_STRING 
3587: ST_TO_ADDR
// hc_name =  ;
3588: LD_ADDR_OWVAR 26
3592: PUSH
3593: LD_STRING 
3595: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_EXP 36
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: CALL_OW 12
3616: PPUSH
3617: CALL_OW 380
// un = CreateHuman ;
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3643: LD_ADDR_EXP 34
3647: PUSH
3648: LD_EXP 34
3652: PUSH
3653: LD_VAR 0 3
3657: ADD
3658: ST_TO_ADDR
// end ;
3659: GO 3561
3661: POP
3662: POP
// end ;
3663: LD_VAR 0 1
3667: RET
// export function PrepareWestBase ; var i , un ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: LD_INT 6
3681: PPUSH
3682: LD_EXP 36
3686: PPUSH
3687: LD_EXP 37
3691: PPUSH
3692: CALL_OW 12
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 91
3715: PPUSH
3716: LD_EXP 36
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: CALL_OW 12
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL 12845 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 21
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 6
3770: PPUSH
3771: CALL 12845 0 6
// end ;
3775: LD_VAR 0 1
3779: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side = 3 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// uc_nation = 3 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// for i = 1 to 5 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 5
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3886
// begin hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_EXP 36
3844: PPUSH
3845: LD_EXP 37
3849: PPUSH
3850: CALL_OW 12
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// end ;
3884: GO 3815
3886: POP
3887: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
3888: LD_ADDR_VAR 0 2
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PUSH
3916: LD_OWVAR 67
3920: ARRAY
3921: PUSH
3922: FOR_TO
3923: IFFALSE 3993
// begin hc_gallery =  ;
3925: LD_ADDR_OWVAR 33
3929: PUSH
3930: LD_STRING 
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 4
3946: PPUSH
3947: LD_EXP 36
3951: PPUSH
3952: LD_EXP 37
3956: PPUSH
3957: CALL_OW 12
3961: PPUSH
3962: CALL_OW 380
// un = CreateHuman ;
3966: LD_ADDR_VAR 0 3
3970: PUSH
3971: CALL_OW 44
3975: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3976: LD_VAR 0 3
3980: PPUSH
3981: LD_INT 8
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 49
// end ;
3991: GO 3922
3993: POP
3994: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: DOUBLE
4001: LD_INT 1
4003: DEC
4004: ST_TO_ADDR
4005: LD_INT 3
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: LD_OWVAR 67
4027: ARRAY
4028: PUSH
4029: FOR_TO
4030: IFFALSE 4226
// begin vc_engine = 3 ;
4032: LD_ADDR_OWVAR 39
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// vc_control = 1 ;
4040: LD_ADDR_OWVAR 38
4044: PUSH
4045: LD_INT 1
4047: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4048: LD_ADDR_OWVAR 40
4052: PUSH
4053: LD_INT 42
4055: PUSH
4056: LD_INT 43
4058: PUSH
4059: LD_INT 44
4061: PUSH
4062: LD_INT 45
4064: PUSH
4065: LD_INT 46
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 5
4080: PPUSH
4081: CALL_OW 12
4085: ARRAY
4086: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4087: LD_OWVAR 40
4091: PUSH
4092: LD_INT 46
4094: EQUAL
4095: IFFALSE 4107
// vc_chassis = ru_heavy_tracked else
4097: LD_ADDR_OWVAR 37
4101: PUSH
4102: LD_INT 24
4104: ST_TO_ADDR
4105: GO 4134
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4107: LD_ADDR_OWVAR 37
4111: PUSH
4112: LD_INT 22
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 12
4132: ARRAY
4133: ST_TO_ADDR
// veh = CreateVehicle ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: CALL_OW 45
4143: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4144: LD_VAR 0 4
4148: PPUSH
4149: LD_INT 3
4151: PPUSH
4152: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4156: LD_VAR 0 4
4160: PPUSH
4161: LD_INT 5
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// hc_gallery =  ;
4171: LD_ADDR_OWVAR 33
4175: PUSH
4176: LD_STRING 
4178: ST_TO_ADDR
// hc_name =  ;
4179: LD_ADDR_OWVAR 26
4183: PUSH
4184: LD_STRING 
4186: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4187: LD_INT 0
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 10
4195: PPUSH
4196: CALL_OW 380
// un = CreateHuman ;
4200: LD_ADDR_VAR 0 3
4204: PUSH
4205: CALL_OW 44
4209: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4210: LD_VAR 0 3
4214: PPUSH
4215: LD_VAR 0 4
4219: PPUSH
4220: CALL_OW 52
// end ;
4224: GO 4029
4226: POP
4227: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_OWVAR 67
4260: ARRAY
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4410
// begin vc_engine = 3 ;
4265: LD_ADDR_OWVAR 39
4269: PUSH
4270: LD_INT 3
4272: ST_TO_ADDR
// vc_control = 3 ;
4273: LD_ADDR_OWVAR 38
4277: PUSH
4278: LD_INT 3
4280: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 42
4288: PUSH
4289: LD_INT 43
4291: PUSH
4292: LD_INT 44
4294: PUSH
4295: LD_INT 45
4297: PUSH
4298: LD_INT 46
4300: PUSH
4301: LD_INT 49
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 5
4317: PPUSH
4318: CALL_OW 12
4322: ARRAY
4323: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4324: LD_OWVAR 40
4328: PUSH
4329: LD_INT 46
4331: EQUAL
4332: IFFALSE 4344
// vc_chassis = ru_heavy_tracked else
4334: LD_ADDR_OWVAR 37
4338: PUSH
4339: LD_INT 24
4341: ST_TO_ADDR
4342: GO 4371
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4344: LD_ADDR_OWVAR 37
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 21
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_INT 2
4364: PPUSH
4365: CALL_OW 12
4369: ARRAY
4370: ST_TO_ADDR
// veh = CreateVehicle ;
4371: LD_ADDR_VAR 0 4
4375: PUSH
4376: CALL_OW 45
4380: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_INT 3
4388: PPUSH
4389: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4393: LD_VAR 0 4
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: LD_INT 0
4403: PPUSH
4404: CALL_OW 49
// end ;
4408: GO 4262
4410: POP
4411: POP
// end ; end_of_file
4412: LD_VAR 0 1
4416: RET
// export function PrepareKurt ; begin
4417: LD_INT 0
4419: PPUSH
// uc_side = 8 ;
4420: LD_ADDR_OWVAR 20
4424: PUSH
4425: LD_INT 8
4427: ST_TO_ADDR
// uc_nation = 2 ;
4428: LD_ADDR_OWVAR 21
4432: PUSH
4433: LD_INT 2
4435: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4436: LD_ADDR_OWVAR 37
4440: PUSH
4441: LD_INT 13
4443: ST_TO_ADDR
// vc_engine = 1 ;
4444: LD_ADDR_OWVAR 39
4448: PUSH
4449: LD_INT 1
4451: ST_TO_ADDR
// vc_control = 1 ;
4452: LD_ADDR_OWVAR 38
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// vc_weapon = 24 ;
4460: LD_ADDR_OWVAR 40
4464: PUSH
4465: LD_INT 24
4467: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4468: LD_ADDR_EXP 25
4472: PUSH
4473: CALL_OW 45
4477: ST_TO_ADDR
// if kurtStatus > 0 then
4478: LD_EXP 26
4482: PUSH
4483: LD_INT 0
4485: GREATER
4486: IFFALSE 4538
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4488: LD_ADDR_EXP 24
4492: PUSH
4493: LD_STRING Kurt
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: LD_STRING 
4501: PPUSH
4502: CALL 38610 0 3
4506: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4507: LD_EXP 25
4511: PPUSH
4512: LD_INT 4
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4522: LD_EXP 24
4526: PPUSH
4527: LD_EXP 25
4531: PPUSH
4532: CALL_OW 52
// end else
4536: GO 4615
// begin hc_name =  ;
4538: LD_ADDR_OWVAR 26
4542: PUSH
4543: LD_STRING 
4545: ST_TO_ADDR
// hc_gallery =  ;
4546: LD_ADDR_OWVAR 33
4550: PUSH
4551: LD_STRING 
4553: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 10
4559: PPUSH
4560: CALL_OW 381
// Kurt = CreateHuman ;
4564: LD_ADDR_EXP 24
4568: PUSH
4569: CALL_OW 44
4573: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4574: LD_EXP 25
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4589: LD_EXP 24
4593: PPUSH
4594: LD_EXP 25
4598: PPUSH
4599: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4603: LD_EXP 24
4607: PPUSH
4608: LD_STRING AltKurt
4610: PPUSH
4611: CALL_OW 38
// end ; end ;
4615: LD_VAR 0 1
4619: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4620: LD_INT 0
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
// for i = 1 to 3 do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: DOUBLE
4632: LD_INT 1
4634: DEC
4635: ST_TO_ADDR
4636: LD_INT 3
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4761
// begin uc_side = 1 ;
4642: LD_ADDR_OWVAR 20
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// uc_nation = 2 ;
4650: LD_ADDR_OWVAR 21
4654: PUSH
4655: LD_INT 2
4657: ST_TO_ADDR
// hc_gallery =  ;
4658: LD_ADDR_OWVAR 33
4662: PUSH
4663: LD_STRING 
4665: ST_TO_ADDR
// hc_name =  ;
4666: LD_ADDR_OWVAR 26
4670: PUSH
4671: LD_STRING 
4673: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4674: LD_EXP 26
4678: PUSH
4679: LD_INT 0
4681: EQUAL
4682: PUSH
4683: LD_EXP 26
4687: PUSH
4688: LD_INT 2
4690: EQUAL
4691: OR
4692: IFFALSE 4709
// PrepareHuman ( false , 1 , 6 ) else
4694: LD_INT 0
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 6
4702: PPUSH
4703: CALL_OW 380
4707: GO 4722
// PrepareHuman ( false , 1 , 8 ) ;
4709: LD_INT 0
4711: PPUSH
4712: LD_INT 1
4714: PPUSH
4715: LD_INT 8
4717: PPUSH
4718: CALL_OW 380
// un = CreateHuman ;
4722: LD_ADDR_VAR 0 3
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 4
4739: PPUSH
4740: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4744: LD_VAR 0 3
4748: PPUSH
4749: LD_INT 4
4751: PPUSH
4752: LD_INT 0
4754: PPUSH
4755: CALL_OW 49
// end ;
4759: GO 4639
4761: POP
4762: POP
// vc_chassis = 14 ;
4763: LD_ADDR_OWVAR 37
4767: PUSH
4768: LD_INT 14
4770: ST_TO_ADDR
// vc_engine = 3 ;
4771: LD_ADDR_OWVAR 39
4775: PUSH
4776: LD_INT 3
4778: ST_TO_ADDR
// vc_control = 1 ;
4779: LD_ADDR_OWVAR 38
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4787: LD_ADDR_OWVAR 40
4791: PUSH
4792: LD_INT 27
4794: PUSH
4795: LD_INT 26
4797: PUSH
4798: LD_INT 28
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 1
4808: PPUSH
4809: LD_INT 3
4811: PPUSH
4812: CALL_OW 12
4816: ARRAY
4817: ST_TO_ADDR
// veh = CreateVehicle ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: CALL_OW 45
4827: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4828: LD_VAR 0 4
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4840: LD_VAR 0 4
4844: PPUSH
4845: LD_INT 4
4847: PPUSH
4848: LD_INT 0
4850: PPUSH
4851: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4855: LD_EXP 26
4859: PUSH
4860: LD_INT 0
4862: EQUAL
4863: PUSH
4864: LD_EXP 26
4868: PUSH
4869: LD_INT 2
4871: EQUAL
4872: OR
4873: IFFALSE 4890
// PrepareHuman ( false , 3 , 6 ) else
4875: LD_INT 0
4877: PPUSH
4878: LD_INT 3
4880: PPUSH
4881: LD_INT 6
4883: PPUSH
4884: CALL_OW 380
4888: GO 4903
// PrepareHuman ( false , 3 , 8 ) ;
4890: LD_INT 0
4892: PPUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 8
4898: PPUSH
4899: CALL_OW 380
// un = CreateHuman ;
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: CALL_OW 44
4912: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4913: LD_VAR 0 3
4917: PPUSH
4918: LD_VAR 0 4
4922: PPUSH
4923: CALL_OW 52
// vc_chassis = 14 ;
4927: LD_ADDR_OWVAR 37
4931: PUSH
4932: LD_INT 14
4934: ST_TO_ADDR
// vc_engine = 3 ;
4935: LD_ADDR_OWVAR 39
4939: PUSH
4940: LD_INT 3
4942: ST_TO_ADDR
// vc_control = 1 ;
4943: LD_ADDR_OWVAR 38
4947: PUSH
4948: LD_INT 1
4950: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4951: LD_ADDR_OWVAR 40
4955: PUSH
4956: LD_INT 27
4958: PUSH
4959: LD_INT 26
4961: PUSH
4962: LD_INT 28
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: CALL_OW 12
4980: ARRAY
4981: ST_TO_ADDR
// veh = CreateVehicle ;
4982: LD_ADDR_VAR 0 4
4986: PUSH
4987: CALL_OW 45
4991: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4992: LD_VAR 0 4
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5004: LD_VAR 0 4
5008: PPUSH
5009: LD_INT 4
5011: PPUSH
5012: LD_INT 0
5014: PPUSH
5015: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5019: LD_EXP 26
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: PUSH
5028: LD_EXP 26
5032: PUSH
5033: LD_INT 2
5035: EQUAL
5036: OR
5037: IFFALSE 5054
// PrepareHuman ( false , 4 , 6 ) else
5039: LD_INT 0
5041: PPUSH
5042: LD_INT 4
5044: PPUSH
5045: LD_INT 6
5047: PPUSH
5048: CALL_OW 380
5052: GO 5067
// PrepareHuman ( false , 4 , 8 ) ;
5054: LD_INT 0
5056: PPUSH
5057: LD_INT 4
5059: PPUSH
5060: LD_INT 8
5062: PPUSH
5063: CALL_OW 380
// un = CreateHuman ;
5067: LD_ADDR_VAR 0 3
5071: PUSH
5072: CALL_OW 44
5076: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5089: LD_VAR 0 3
5093: PPUSH
5094: LD_VAR 0 4
5098: PPUSH
5099: CALL_OW 52
// vc_chassis = 14 ;
5103: LD_ADDR_OWVAR 37
5107: PUSH
5108: LD_INT 14
5110: ST_TO_ADDR
// vc_engine = 3 ;
5111: LD_ADDR_OWVAR 39
5115: PUSH
5116: LD_INT 3
5118: ST_TO_ADDR
// vc_control = 1 ;
5119: LD_ADDR_OWVAR 38
5123: PUSH
5124: LD_INT 1
5126: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5127: LD_ADDR_OWVAR 40
5131: PUSH
5132: LD_INT 27
5134: PUSH
5135: LD_INT 26
5137: PUSH
5138: LD_INT 28
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 1
5148: PPUSH
5149: LD_INT 3
5151: PPUSH
5152: CALL_OW 12
5156: ARRAY
5157: ST_TO_ADDR
// veh = CreateVehicle ;
5158: LD_ADDR_VAR 0 4
5162: PUSH
5163: CALL_OW 45
5167: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 4
5175: PPUSH
5176: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5180: LD_VAR 0 4
5184: PPUSH
5185: LD_INT 4
5187: PPUSH
5188: LD_INT 0
5190: PPUSH
5191: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5195: LD_EXP 26
5199: PUSH
5200: LD_INT 0
5202: EQUAL
5203: PUSH
5204: LD_EXP 26
5208: PUSH
5209: LD_INT 2
5211: EQUAL
5212: OR
5213: IFFALSE 5230
// PrepareHuman ( false , 2 , 4 ) else
5215: LD_INT 0
5217: PPUSH
5218: LD_INT 2
5220: PPUSH
5221: LD_INT 4
5223: PPUSH
5224: CALL_OW 380
5228: GO 5243
// PrepareHuman ( false , 2 , 8 ) ;
5230: LD_INT 0
5232: PPUSH
5233: LD_INT 2
5235: PPUSH
5236: LD_INT 8
5238: PPUSH
5239: CALL_OW 380
// un = CreateHuman ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: CALL_OW 44
5252: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_INT 4
5260: PPUSH
5261: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: LD_VAR 0 4
5274: PPUSH
5275: CALL_OW 52
// end ;
5279: LD_VAR 0 1
5283: RET
// export function PrepareAttackLegion ; var i , un ; begin
5284: LD_INT 0
5286: PPUSH
5287: PPUSH
5288: PPUSH
// for i = 1 to 4 do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 4
5301: PUSH
5302: FOR_TO
5303: IFFALSE 5413
// begin uc_side = 8 ;
5305: LD_ADDR_OWVAR 20
5309: PUSH
5310: LD_INT 8
5312: ST_TO_ADDR
// uc_nation = 2 ;
5313: LD_ADDR_OWVAR 21
5317: PUSH
5318: LD_INT 2
5320: ST_TO_ADDR
// hc_gallery =  ;
5321: LD_ADDR_OWVAR 33
5325: PUSH
5326: LD_STRING 
5328: ST_TO_ADDR
// hc_name =  ;
5329: LD_ADDR_OWVAR 26
5333: PUSH
5334: LD_STRING 
5336: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5337: LD_INT 0
5339: PPUSH
5340: LD_INT 1
5342: PUSH
5343: LD_INT 8
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 1
5352: PPUSH
5353: LD_INT 2
5355: PPUSH
5356: CALL_OW 12
5360: ARRAY
5361: PPUSH
5362: LD_INT 6
5364: PPUSH
5365: LD_INT 8
5367: PPUSH
5368: CALL_OW 12
5372: PPUSH
5373: CALL_OW 380
// un = CreateHuman ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: CALL_OW 44
5386: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_INT 19
5394: PPUSH
5395: LD_INT 0
5397: PPUSH
5398: CALL_OW 49
// ComCrawl ( un ) ;
5402: LD_VAR 0 3
5406: PPUSH
5407: CALL_OW 137
// end ;
5411: GO 5302
5413: POP
5414: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5415: LD_INT 1
5417: PPUSH
5418: LD_INT 8
5420: PPUSH
5421: LD_INT 2
5423: PPUSH
5424: LD_INT 1
5426: PPUSH
5427: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5431: LD_INT 20
5433: PPUSH
5434: LD_INT 3
5436: PPUSH
5437: CALL 14823 0 2
// end ; end_of_file
5441: LD_VAR 0 1
5445: RET
// every 1 do var i ;
5446: GO 5448
5448: DISABLE
5449: LD_INT 0
5451: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5452: LD_INT 10
5454: PPUSH
5455: LD_INT 122
5457: PPUSH
5458: LD_INT 145
5460: PPUSH
5461: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5465: LD_INT 137
5467: PPUSH
5468: LD_INT 84
5470: PPUSH
5471: LD_INT 61
5473: PPUSH
5474: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5478: LD_EXP 1
5482: PPUSH
5483: CALL_OW 310
5487: PPUSH
5488: CALL_OW 87
// InGameOn ;
5492: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5496: LD_INT 22
5498: PUSH
5499: LD_INT 1
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: PPUSH
5511: LD_INT 130
5513: PPUSH
5514: LD_INT 103
5516: PPUSH
5517: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5521: LD_VAR 0 1
5525: PPUSH
5526: LD_INT 114
5528: PPUSH
5529: LD_INT 102
5531: PPUSH
5532: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5536: LD_EXP 1
5540: PPUSH
5541: LD_STRING D1-JMM-1
5543: PPUSH
5544: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5548: LD_EXP 1
5552: PPUSH
5553: CALL_OW 310
5557: PPUSH
5558: CALL_OW 87
// if IsOk ( Donaldson ) then
5562: LD_EXP 3
5566: PPUSH
5567: CALL_OW 302
5571: IFFALSE 5651
// begin Say ( Donaldson , D1-Don-1 ) ;
5573: LD_EXP 3
5577: PPUSH
5578: LD_STRING D1-Don-1
5580: PPUSH
5581: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5585: LD_EXP 1
5589: PPUSH
5590: CALL_OW 310
5594: PPUSH
5595: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5599: LD_EXP 1
5603: PPUSH
5604: LD_STRING D1-JMM-2
5606: PPUSH
5607: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5611: LD_EXP 1
5615: PPUSH
5616: CALL_OW 310
5620: PPUSH
5621: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5625: LD_EXP 3
5629: PPUSH
5630: LD_STRING D1-Don-2
5632: PPUSH
5633: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5637: LD_EXP 1
5641: PPUSH
5642: CALL_OW 310
5646: PPUSH
5647: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: CALL_OW 69
5665: PPUSH
5666: LD_INT 110
5668: PPUSH
5669: LD_INT 101
5671: PPUSH
5672: CALL_OW 171
// wait ( 0 0$1 ) ;
5676: LD_INT 35
5678: PPUSH
5679: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 310
5692: PPUSH
5693: CALL_OW 87
// wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5704: LD_EXP 1
5708: PPUSH
5709: CALL_OW 310
5713: PPUSH
5714: CALL_OW 87
// wait ( 0 0$1 ) ;
5718: LD_INT 35
5720: PPUSH
5721: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5725: LD_EXP 1
5729: PPUSH
5730: CALL_OW 310
5734: PPUSH
5735: CALL_OW 87
// wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5746: LD_EXP 1
5750: PPUSH
5751: CALL_OW 310
5755: PPUSH
5756: CALL_OW 87
// end ;
5760: PPOPN 1
5762: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 102
5768: PPUSH
5769: LD_INT 94
5771: PPUSH
5772: CALL_OW 293
5776: IFFALSE 5967
5778: GO 5780
5780: DISABLE
5781: LD_INT 0
5783: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5784: LD_INT 102
5786: PPUSH
5787: LD_INT 94
5789: PPUSH
5790: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5794: LD_INT 22
5796: PUSH
5797: LD_INT 1
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 26
5806: PUSH
5807: LD_INT 1
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 2
5816: PUSH
5817: LD_INT 25
5819: PUSH
5820: LD_INT 1
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 25
5829: PUSH
5830: LD_INT 2
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: LD_INT 25
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 25
5849: PUSH
5850: LD_INT 4
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 25
5869: PUSH
5870: LD_INT 8
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PPUSH
5891: CALL_OW 69
5895: PPUSH
5896: LD_STRING D1-Sol1-2
5898: PPUSH
5899: LD_STRING 
5901: PPUSH
5902: CALL 12340 0 3
// Say ( JMM , D1-JMM-3 ) ;
5906: LD_EXP 1
5910: PPUSH
5911: LD_STRING D1-JMM-3
5913: PPUSH
5914: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5918: LD_STRING M1
5920: PPUSH
5921: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5925: LD_ADDR_VAR 0 1
5929: PUSH
5930: LD_INT 22
5932: PUSH
5933: LD_INT 1
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PPUSH
5940: CALL_OW 69
5944: PUSH
5945: FOR_IN
5946: IFFALSE 5965
// ComMoveXY ( i , 95 , 84 ) ;
5948: LD_VAR 0 1
5952: PPUSH
5953: LD_INT 95
5955: PPUSH
5956: LD_INT 84
5958: PPUSH
5959: CALL_OW 111
5963: GO 5945
5965: POP
5966: POP
// end ;
5967: PPOPN 1
5969: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5979: LD_ADDR_VAR 0 2
5983: PUSH
5984: LD_INT 8
5986: PPUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 25
5999: PUSH
6000: LD_INT 9
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: CALL_OW 70
6015: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: PPUSH
6034: CALL_OW 69
6038: ST_TO_ADDR
// enable ;
6039: ENABLE
// for i in your_units do
6040: LD_ADDR_VAR 0 1
6044: PUSH
6045: LD_VAR 0 3
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6717
// begin if See ( 3 , i ) then
6053: LD_INT 3
6055: PPUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 292
6065: IFFALSE 6715
// begin disable ;
6067: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 96
6075: PPUSH
6076: LD_INT 85
6078: PPUSH
6079: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 96
6090: PPUSH
6091: LD_INT 85
6093: PPUSH
6094: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 96
6105: PPUSH
6106: LD_INT 85
6108: PPUSH
6109: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: LD_INT 96
6120: PPUSH
6121: LD_INT 85
6123: PPUSH
6124: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6128: LD_VAR 0 2
6132: PPUSH
6133: LD_INT 96
6135: PPUSH
6136: LD_INT 85
6138: PPUSH
6139: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6143: LD_VAR 0 2
6147: PPUSH
6148: LD_INT 96
6150: PPUSH
6151: LD_INT 85
6153: PPUSH
6154: CALL_OW 214
// wait ( 0 0$2 ) ;
6158: LD_INT 70
6160: PPUSH
6161: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6165: LD_EXP 1
6169: PPUSH
6170: LD_STRING D1a-JMM-1
6172: PPUSH
6173: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6177: LD_EXP 3
6181: PPUSH
6182: LD_STRING D1a-Don-1
6184: PPUSH
6185: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6189: LD_ADDR_VAR 0 1
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: PUSH
6209: FOR_IN
6210: IFFALSE 6229
// ComMoveXY ( i , 109 , 102 ) ;
6212: LD_VAR 0 1
6216: PPUSH
6217: LD_INT 109
6219: PPUSH
6220: LD_INT 102
6222: PPUSH
6223: CALL_OW 111
6227: GO 6209
6229: POP
6230: POP
// Say ( JMM , D1a-JMM-2 ) ;
6231: LD_EXP 1
6235: PPUSH
6236: LD_STRING D1a-JMM-2
6238: PPUSH
6239: CALL_OW 88
// wait ( 0 0$10 ) ;
6243: LD_INT 350
6245: PPUSH
6246: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6250: LD_EXP 1
6254: PPUSH
6255: CALL_OW 310
6259: PPUSH
6260: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6264: LD_EXP 3
6268: PPUSH
6269: LD_STRING D1b-Don-1
6271: PPUSH
6272: CALL_OW 88
// if IsOk ( Donaldson ) then
6276: LD_EXP 3
6280: PPUSH
6281: CALL_OW 302
6285: IFFALSE 6299
// Say ( JMM , D1b-JMM-1 ) ;
6287: LD_EXP 1
6291: PPUSH
6292: LD_STRING D1b-JMM-1
6294: PPUSH
6295: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6299: LD_INT 22
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 26
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 25
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 25
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 25
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 25
6364: PUSH
6365: LD_INT 5
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 25
6374: PUSH
6375: LD_INT 8
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: PPUSH
6401: LD_STRING D1b-Sol1-1
6403: PPUSH
6404: LD_STRING 
6406: PPUSH
6407: CALL 12340 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6411: LD_EXP 3
6415: PPUSH
6416: LD_STRING D1b-Don-2
6418: PPUSH
6419: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6423: LD_EXP 1
6427: PPUSH
6428: LD_STRING D1b-JMM-2
6430: PPUSH
6431: CALL_OW 88
// dec = ShowQuery1 ;
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: CALL 12803 0 0
6444: ST_TO_ADDR
// if dec = 1 then
6445: LD_VAR 0 4
6449: PUSH
6450: LD_INT 1
6452: EQUAL
6453: IFFALSE 6559
// begin Say ( JMM , D2-JMM-1 ) ;
6455: LD_EXP 1
6459: PPUSH
6460: LD_STRING D2-JMM-1
6462: PPUSH
6463: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6467: LD_EXP 22
6471: PPUSH
6472: LD_STRING D2-Pow-1
6474: PPUSH
6475: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6479: LD_EXP 1
6483: PPUSH
6484: LD_STRING D2a-JMM-1
6486: PPUSH
6487: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6491: LD_EXP 22
6495: PPUSH
6496: LD_STRING D2a-Pow-1
6498: PPUSH
6499: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6503: LD_EXP 1
6507: PPUSH
6508: LD_STRING D2a-JMM-2
6510: PPUSH
6511: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6515: LD_EXP 22
6519: PPUSH
6520: LD_STRING D2a-Pow-2
6522: PPUSH
6523: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D2a-JMM-3
6534: PPUSH
6535: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6539: LD_EXP 22
6543: PPUSH
6544: LD_STRING D2a-Pow-3
6546: PPUSH
6547: CALL_OW 94
// secondPass = 2 ;
6551: LD_ADDR_EXP 27
6555: PUSH
6556: LD_INT 2
6558: ST_TO_ADDR
// end ; if dec = 2 then
6559: LD_VAR 0 4
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: IFFALSE 6661
// begin Say ( JMM , D2-JMM-1 ) ;
6569: LD_EXP 1
6573: PPUSH
6574: LD_STRING D2-JMM-1
6576: PPUSH
6577: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6581: LD_EXP 22
6585: PPUSH
6586: LD_STRING D2-Pow-1
6588: PPUSH
6589: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6593: LD_EXP 1
6597: PPUSH
6598: LD_STRING D2b-JMM-1
6600: PPUSH
6601: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6605: LD_EXP 22
6609: PPUSH
6610: LD_STRING D2b-Pow-1
6612: PPUSH
6613: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6617: LD_EXP 1
6621: PPUSH
6622: LD_STRING D2c-JMM-1
6624: PPUSH
6625: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6629: LD_EXP 22
6633: PPUSH
6634: LD_STRING D2c-Pow-1
6636: PPUSH
6637: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6641: LD_EXP 1
6645: PPUSH
6646: LD_STRING D2c-JMM-2
6648: PPUSH
6649: CALL_OW 88
// secondPass = 2 ;
6653: LD_ADDR_EXP 27
6657: PUSH
6658: LD_INT 2
6660: ST_TO_ADDR
// end ; if dec = 3 then
6661: LD_VAR 0 4
6665: PUSH
6666: LD_INT 3
6668: EQUAL
6669: IFFALSE 6679
// secondPass = 1 ;
6671: LD_ADDR_EXP 27
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// InGameOff ;
6679: CALL_OW 9
// ruAI = 1 ;
6683: LD_ADDR_EXP 41
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 2
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: CALL_OW 80
// SaveForQuickRestart ;
6707: CALL_OW 22
// exit ;
6711: POP
6712: POP
6713: GO 6719
// end ; end ;
6715: GO 6050
6717: POP
6718: POP
// end ;
6719: PPOPN 4
6721: END
// every 1 1$0 trigger secondPass = 2 do
6722: LD_EXP 27
6726: PUSH
6727: LD_INT 2
6729: EQUAL
6730: IFFALSE 6950
6732: GO 6734
6734: DISABLE
// begin PowellSupport1 ;
6735: CALL 1970 0 0
// DialogueOn ;
6739: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6743: LD_EXP 1
6747: PPUSH
6748: LD_STRING DC1-JMM-1
6750: PPUSH
6751: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6755: LD_EXP 22
6759: PPUSH
6760: LD_STRING DC1-Pow-1
6762: PPUSH
6763: CALL_OW 94
// DialogueOff ;
6767: CALL_OW 7
// wait ( 3 3$0 ) ;
6771: LD_INT 6300
6773: PPUSH
6774: CALL_OW 67
// PowellSupport2 ;
6778: CALL 2435 0 0
// DialogueOn ;
6782: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6786: LD_EXP 1
6790: PPUSH
6791: LD_STRING DC2-JMM-1
6793: PPUSH
6794: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6798: LD_EXP 22
6802: PPUSH
6803: LD_STRING DC2-Pow-1
6805: PPUSH
6806: CALL_OW 94
// DialogueOff ;
6810: CALL_OW 7
// wait ( 3 3$00 ) ;
6814: LD_INT 6300
6816: PPUSH
6817: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6828: LD_INT 22
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: LD_INT 30
6843: PUSH
6844: LD_INT 0
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 30
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: PUSH
6875: LD_INT 11
6877: PPUSH
6878: LD_INT 22
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 70
6892: NOT
6893: AND
6894: IFFALSE 6821
// wait ( 0 0$10 ) ;
6896: LD_INT 350
6898: PPUSH
6899: CALL_OW 67
// Legion ;
6903: CALL 6951 0 0
// wait ( 6 6$0 ) ;
6907: LD_INT 12600
6909: PPUSH
6910: CALL_OW 67
// PowellSupport3 ;
6914: CALL 2975 0 0
// DialogueOn ;
6918: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6922: LD_EXP 22
6926: PPUSH
6927: LD_STRING DC3-Pow-1
6929: PPUSH
6930: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6934: LD_EXP 1
6938: PPUSH
6939: LD_STRING DC3-JMM-1
6941: PPUSH
6942: CALL_OW 88
// DialogueOff ;
6946: CALL_OW 7
// end ;
6950: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6951: LD_INT 0
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6969: LD_ADDR_VAR 0 5
6973: PUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 21
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 30
6999: PUSH
7000: LD_INT 0
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 30
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: ST_TO_ADDR
// crates := 0 ;
7032: LD_ADDR_VAR 0 8
7036: PUSH
7037: LD_INT 0
7039: ST_TO_ADDR
// oil := 0 ;
7040: LD_ADDR_VAR 0 9
7044: PUSH
7045: LD_INT 0
7047: ST_TO_ADDR
// siberite := 0 ;
7048: LD_ADDR_VAR 0 10
7052: PUSH
7053: LD_INT 0
7055: ST_TO_ADDR
// payForNeutral := false ;
7056: LD_ADDR_VAR 0 13
7060: PUSH
7061: LD_INT 0
7063: ST_TO_ADDR
// payForHelp := false ;
7064: LD_ADDR_VAR 0 14
7068: PUSH
7069: LD_INT 0
7071: ST_TO_ADDR
// for i in tmp do
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: LD_VAR 0 5
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7174
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7085: LD_ADDR_VAR 0 8
7089: PUSH
7090: LD_VAR 0 8
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 274
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: CALL_OW 275
7112: PLUS
7113: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7114: LD_ADDR_VAR 0 9
7118: PUSH
7119: LD_VAR 0 9
7123: PUSH
7124: LD_VAR 0 2
7128: PPUSH
7129: CALL_OW 274
7133: PPUSH
7134: LD_INT 2
7136: PPUSH
7137: CALL_OW 275
7141: PLUS
7142: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7143: LD_ADDR_VAR 0 10
7147: PUSH
7148: LD_VAR 0 10
7152: PUSH
7153: LD_VAR 0 2
7157: PPUSH
7158: CALL_OW 274
7162: PPUSH
7163: LD_INT 3
7165: PPUSH
7166: CALL_OW 275
7170: PLUS
7171: ST_TO_ADDR
// end ;
7172: GO 7082
7174: POP
7175: POP
// PrepareKurt ;
7176: CALL 4417 0 0
// if not Kurt then
7180: LD_EXP 24
7184: NOT
7185: IFFALSE 7189
// exit ;
7187: GO 9321
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7189: LD_EXP 25
7193: PPUSH
7194: LD_INT 144
7196: PPUSH
7197: LD_INT 111
7199: PPUSH
7200: CALL_OW 111
// wait ( 0 0$2 ) ;
7204: LD_INT 70
7206: PPUSH
7207: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7211: LD_INT 167
7213: PPUSH
7214: LD_INT 121
7216: PPUSH
7217: LD_INT 1
7219: PPUSH
7220: LD_INT 10
7222: NEG
7223: PPUSH
7224: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7228: LD_EXP 24
7232: PPUSH
7233: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7237: LD_EXP 24
7241: PPUSH
7242: CALL_OW 87
// wait ( 0 0$1 ) ;
7246: LD_INT 35
7248: PPUSH
7249: CALL_OW 67
// DialogueOn ;
7253: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7257: LD_INT 22
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 26
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 2
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 25
7302: PUSH
7303: LD_INT 3
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 25
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 25
7322: PUSH
7323: LD_INT 5
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 25
7332: PUSH
7333: LD_INT 8
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: PPUSH
7354: CALL_OW 69
7358: PPUSH
7359: LD_STRING D3-Sol1-1
7361: PPUSH
7362: LD_STRING 
7364: PPUSH
7365: CALL 12340 0 3
// if KurtStatus then
7369: LD_EXP 26
7373: IFFALSE 7473
// begin Say ( Kurt , D3-Kurt-1 ) ;
7375: LD_EXP 24
7379: PPUSH
7380: LD_STRING D3-Kurt-1
7382: PPUSH
7383: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7387: LD_EXP 1
7391: PPUSH
7392: LD_STRING D3-JMM-1
7394: PPUSH
7395: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7399: LD_EXP 24
7403: PPUSH
7404: LD_STRING D3-Kurt-2
7406: PPUSH
7407: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7411: LD_EXP 1
7415: PPUSH
7416: LD_STRING D3-JMM-2
7418: PPUSH
7419: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7423: LD_EXP 24
7427: PPUSH
7428: LD_STRING D3-Kurt-4
7430: PPUSH
7431: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7435: LD_EXP 1
7439: PPUSH
7440: LD_STRING D3-JMM-4
7442: PPUSH
7443: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-5
7454: PPUSH
7455: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7459: LD_EXP 24
7463: PPUSH
7464: LD_STRING D3-Kurt-5a
7466: PPUSH
7467: CALL_OW 88
// end else
7471: GO 7569
// begin Say ( Kurt , D3-Kurt-1 ) ;
7473: LD_EXP 24
7477: PPUSH
7478: LD_STRING D3-Kurt-1
7480: PPUSH
7481: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7485: LD_EXP 1
7489: PPUSH
7490: LD_STRING D3-JMM-1
7492: PPUSH
7493: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7497: LD_EXP 24
7501: PPUSH
7502: LD_STRING D3-Kurt-3
7504: PPUSH
7505: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7509: LD_EXP 1
7513: PPUSH
7514: LD_STRING D3-JMM-3
7516: PPUSH
7517: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7521: LD_EXP 24
7525: PPUSH
7526: LD_STRING D3-Kurt-4
7528: PPUSH
7529: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7533: LD_EXP 1
7537: PPUSH
7538: LD_STRING D3-JMM-4
7540: PPUSH
7541: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7545: LD_EXP 24
7549: PPUSH
7550: LD_STRING D3-Kurt-5
7552: PPUSH
7553: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7557: LD_EXP 24
7561: PPUSH
7562: LD_STRING D3-Kurt-5b
7564: PPUSH
7565: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7569: LD_VAR 0 8
7573: PUSH
7574: LD_INT 120
7576: PUSH
7577: LD_INT 60
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: ARRAY
7593: GREATEREQUAL
7594: PUSH
7595: LD_VAR 0 10
7599: PUSH
7600: LD_INT 120
7602: PUSH
7603: LD_INT 60
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_EXP 26
7614: PUSH
7615: LD_INT 1
7617: PLUS
7618: ARRAY
7619: GREATEREQUAL
7620: AND
7621: IFFALSE 7673
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_STRING Q2
7630: PUSH
7631: LD_STRING Q2K
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_EXP 26
7642: PUSH
7643: LD_INT 1
7645: PLUS
7646: ARRAY
7647: PPUSH
7648: LD_INT 1
7650: PUSH
7651: LD_INT 2
7653: PUSH
7654: LD_INT 3
7656: PUSH
7657: LD_INT 4
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 98
7670: ST_TO_ADDR
7671: GO 7717
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7673: LD_ADDR_VAR 0 3
7677: PUSH
7678: LD_STRING Q2
7680: PUSH
7681: LD_STRING Q2K
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_EXP 26
7692: PUSH
7693: LD_INT 1
7695: PLUS
7696: ARRAY
7697: PPUSH
7698: LD_INT 1
7700: PUSH
7701: LD_INT 3
7703: PUSH
7704: LD_INT 4
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: PPUSH
7712: CALL_OW 98
7716: ST_TO_ADDR
// if dec1 = 1 then
7717: LD_VAR 0 3
7721: PUSH
7722: LD_INT 1
7724: EQUAL
7725: IFFALSE 7759
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7727: LD_EXP 1
7731: PPUSH
7732: LD_STRING D3Ka-JMM-1
7734: PPUSH
7735: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7739: LD_EXP 24
7743: PPUSH
7744: LD_STRING D3Ka-Kurt-1
7746: PPUSH
7747: CALL_OW 88
// warWithLegion = 1 ;
7751: LD_ADDR_EXP 30
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// end ; if dec1 = 2 then
7759: LD_VAR 0 3
7763: PUSH
7764: LD_INT 2
7766: EQUAL
7767: IFFALSE 7851
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7769: LD_EXP 1
7773: PPUSH
7774: LD_STRING D3Kb-JMM-1
7776: PPUSH
7777: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7781: LD_EXP 24
7785: PPUSH
7786: LD_STRING D3Kb-Kurt-1
7788: PPUSH
7789: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7793: LD_ADDR_VAR 0 11
7797: PUSH
7798: LD_INT 120
7800: PUSH
7801: LD_INT 60
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_EXP 26
7812: PUSH
7813: LD_INT 1
7815: PLUS
7816: ARRAY
7817: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7818: LD_ADDR_VAR 0 12
7822: PUSH
7823: LD_INT 120
7825: PUSH
7826: LD_INT 60
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_EXP 26
7837: PUSH
7838: LD_INT 1
7840: PLUS
7841: ARRAY
7842: ST_TO_ADDR
// payForNeutral := true ;
7843: LD_ADDR_VAR 0 13
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// end ; if dec1 = 3 then
7851: LD_VAR 0 3
7855: PUSH
7856: LD_INT 3
7858: EQUAL
7859: IFFALSE 8094
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7861: LD_EXP 1
7865: PPUSH
7866: LD_STRING D3Kc1-JMM-1
7868: PPUSH
7869: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7873: LD_EXP 24
7877: PPUSH
7878: LD_STRING D3Kc1-Kurt-1
7880: PPUSH
7881: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7885: LD_EXP 1
7889: PPUSH
7890: LD_STRING D3Kc1-JMM-2
7892: PPUSH
7893: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7897: LD_EXP 24
7901: PPUSH
7902: LD_STRING D3Kc1-Kurt-2
7904: PPUSH
7905: CALL_OW 88
// askSiberite = 1 ;
7909: LD_ADDR_EXP 32
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7917: LD_ADDR_VAR 0 4
7921: PUSH
7922: LD_STRING Q2b
7924: PPUSH
7925: LD_INT 1
7927: PUSH
7928: LD_INT 2
7930: PUSH
7931: LD_INT 3
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 98
7943: ST_TO_ADDR
// if dec2 = 1 then
7944: LD_VAR 0 4
7948: PUSH
7949: LD_INT 1
7951: EQUAL
7952: IFFALSE 7986
// begin Say ( JMM , D4a-JMM-1 ) ;
7954: LD_EXP 1
7958: PPUSH
7959: LD_STRING D4a-JMM-1
7961: PPUSH
7962: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7966: LD_EXP 24
7970: PPUSH
7971: LD_STRING D4b-Kurt-1
7973: PPUSH
7974: CALL_OW 88
// warWithLegion = 1 ;
7978: LD_ADDR_EXP 30
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// end ; if dec2 = 2 then
7986: LD_VAR 0 4
7990: PUSH
7991: LD_INT 2
7993: EQUAL
7994: IFFALSE 8028
// begin Say ( JMM , D4b-JMM-1 ) ;
7996: LD_EXP 1
8000: PPUSH
8001: LD_STRING D4b-JMM-1
8003: PPUSH
8004: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8008: LD_EXP 24
8012: PPUSH
8013: LD_STRING D4b-Kurt-1
8015: PPUSH
8016: CALL_OW 88
// warWithLegion = 1 ;
8020: LD_ADDR_EXP 30
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// end ; if dec2 = 3 then
8028: LD_VAR 0 4
8032: PUSH
8033: LD_INT 3
8035: EQUAL
8036: IFFALSE 8094
// begin Say ( JMM , D4c-JMM-1 ) ;
8038: LD_EXP 1
8042: PPUSH
8043: LD_STRING D4c-JMM-1
8045: PPUSH
8046: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8050: LD_EXP 24
8054: PPUSH
8055: LD_STRING D4c-Kurt-1
8057: PPUSH
8058: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8062: LD_EXP 1
8066: PPUSH
8067: LD_STRING D4c-JMM-2
8069: PPUSH
8070: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8074: LD_EXP 24
8078: PPUSH
8079: LD_STRING D4c-Kurt-2
8081: PPUSH
8082: CALL_OW 88
// fakeInfo = 1 ;
8086: LD_ADDR_EXP 31
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8094: LD_VAR 0 3
8098: PUSH
8099: LD_INT 4
8101: EQUAL
8102: IFFALSE 9177
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8104: LD_EXP 1
8108: PPUSH
8109: LD_STRING D3Kd-JMM-1
8111: PPUSH
8112: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8116: LD_VAR 0 8
8120: PUSH
8121: LD_INT 200
8123: PUSH
8124: LD_INT 120
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: GREATEREQUAL
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_INT 200
8149: PUSH
8150: LD_INT 120
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_EXP 26
8161: PUSH
8162: LD_INT 1
8164: PLUS
8165: ARRAY
8166: GREATEREQUAL
8167: AND
8168: IFFALSE 8220
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8170: LD_ADDR_VAR 0 4
8174: PUSH
8175: LD_STRING Q2a
8177: PUSH
8178: LD_STRING Q2aK
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_EXP 26
8189: PUSH
8190: LD_INT 1
8192: PLUS
8193: ARRAY
8194: PPUSH
8195: LD_INT 1
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 3
8203: PUSH
8204: LD_INT 4
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 98
8217: ST_TO_ADDR
8218: GO 8397
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8220: LD_VAR 0 8
8224: PUSH
8225: LD_INT 120
8227: PUSH
8228: LD_INT 60
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_EXP 26
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: ARRAY
8244: GREATEREQUAL
8245: PUSH
8246: LD_VAR 0 10
8250: PUSH
8251: LD_INT 120
8253: PUSH
8254: LD_INT 60
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_EXP 26
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ARRAY
8270: GREATEREQUAL
8271: AND
8272: IFFALSE 8320
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8274: LD_ADDR_VAR 0 4
8278: PUSH
8279: LD_STRING Q2a
8281: PUSH
8282: LD_STRING Q2aK
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_EXP 26
8293: PUSH
8294: LD_INT 1
8296: PLUS
8297: ARRAY
8298: PPUSH
8299: LD_INT 1
8301: PUSH
8302: LD_INT 2
8304: PUSH
8305: LD_INT 4
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 98
8317: ST_TO_ADDR
8318: GO 8397
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8320: LD_STRING Q2d
8322: PUSH
8323: LD_STRING Q2dK
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_EXP 26
8334: PUSH
8335: LD_INT 1
8337: PLUS
8338: ARRAY
8339: PPUSH
8340: CALL_OW 97
8344: PUSH
8345: LD_INT 1
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8356
8353: POP
// ; end ;
8354: GO 8357
8356: POP
// dec2 := 0 ;
8357: LD_ADDR_VAR 0 4
8361: PUSH
8362: LD_INT 0
8364: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8365: LD_EXP 1
8369: PPUSH
8370: LD_STRING D3Kc1-JMM-1
8372: PPUSH
8373: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8377: LD_EXP 24
8381: PPUSH
8382: LD_STRING D3Kc2-Kurt-1
8384: PPUSH
8385: CALL_OW 88
// warWithLegion := 1 ;
8389: LD_ADDR_EXP 30
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// end ; if dec2 = 1 then
8397: LD_VAR 0 4
8401: PUSH
8402: LD_INT 1
8404: EQUAL
8405: IFFALSE 8439
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8407: LD_EXP 1
8411: PPUSH
8412: LD_STRING D5Ka-JMM-1
8414: PPUSH
8415: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8419: LD_EXP 24
8423: PPUSH
8424: LD_STRING D5Ka-Kurt-1
8426: PPUSH
8427: CALL_OW 88
// warWithLegion = 1 ;
8431: LD_ADDR_EXP 30
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// end ; if dec2 = 2 then
8439: LD_VAR 0 4
8443: PUSH
8444: LD_INT 2
8446: EQUAL
8447: IFFALSE 8531
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8449: LD_EXP 1
8453: PPUSH
8454: LD_STRING D3Kb-JMM-1
8456: PPUSH
8457: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8461: LD_EXP 24
8465: PPUSH
8466: LD_STRING D3Kb-Kurt-1
8468: PPUSH
8469: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8473: LD_ADDR_VAR 0 11
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: LD_INT 60
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_EXP 26
8492: PUSH
8493: LD_INT 1
8495: PLUS
8496: ARRAY
8497: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8498: LD_ADDR_VAR 0 12
8502: PUSH
8503: LD_INT 120
8505: PUSH
8506: LD_INT 60
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_EXP 26
8517: PUSH
8518: LD_INT 1
8520: PLUS
8521: ARRAY
8522: ST_TO_ADDR
// payForNeutral := true ;
8523: LD_ADDR_VAR 0 13
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// end ; if dec2 = 3 then
8531: LD_VAR 0 4
8535: PUSH
8536: LD_INT 3
8538: EQUAL
8539: IFFALSE 8623
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8541: LD_EXP 1
8545: PPUSH
8546: LD_STRING D3Ke-JMM-1
8548: PPUSH
8549: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8553: LD_EXP 24
8557: PPUSH
8558: LD_STRING D3Ke-Kurt-1
8560: PPUSH
8561: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8565: LD_ADDR_VAR 0 11
8569: PUSH
8570: LD_INT 200
8572: PUSH
8573: LD_INT 120
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_EXP 26
8584: PUSH
8585: LD_INT 1
8587: PLUS
8588: ARRAY
8589: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8590: LD_ADDR_VAR 0 12
8594: PUSH
8595: LD_INT 200
8597: PUSH
8598: LD_INT 120
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 26
8609: PUSH
8610: LD_INT 1
8612: PLUS
8613: ARRAY
8614: ST_TO_ADDR
// payForHelp := true ;
8615: LD_ADDR_VAR 0 14
8619: PUSH
8620: LD_INT 1
8622: ST_TO_ADDR
// end ; if dec2 = 4 then
8623: LD_VAR 0 4
8627: PUSH
8628: LD_INT 4
8630: EQUAL
8631: IFFALSE 8866
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8633: LD_EXP 1
8637: PPUSH
8638: LD_STRING D3Kc1-JMM-1
8640: PPUSH
8641: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8645: LD_EXP 24
8649: PPUSH
8650: LD_STRING D3Kc1-Kurt-1
8652: PPUSH
8653: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8657: LD_EXP 1
8661: PPUSH
8662: LD_STRING D3Kc1-JMM-2
8664: PPUSH
8665: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8669: LD_EXP 24
8673: PPUSH
8674: LD_STRING D3Kc1-Kurt-2
8676: PPUSH
8677: CALL_OW 88
// askSiberite = 1 ;
8681: LD_ADDR_EXP 32
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8689: LD_ADDR_VAR 0 4
8693: PUSH
8694: LD_STRING Q2b
8696: PPUSH
8697: LD_INT 1
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL_OW 98
8715: ST_TO_ADDR
// if dec2 = 1 then
8716: LD_VAR 0 4
8720: PUSH
8721: LD_INT 1
8723: EQUAL
8724: IFFALSE 8758
// begin Say ( JMM , D4a-JMM-1 ) ;
8726: LD_EXP 1
8730: PPUSH
8731: LD_STRING D4a-JMM-1
8733: PPUSH
8734: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8738: LD_EXP 24
8742: PPUSH
8743: LD_STRING D4b-Kurt-1
8745: PPUSH
8746: CALL_OW 88
// warWithLegion = 1 ;
8750: LD_ADDR_EXP 30
8754: PUSH
8755: LD_INT 1
8757: ST_TO_ADDR
// end ; if dec2 = 2 then
8758: LD_VAR 0 4
8762: PUSH
8763: LD_INT 2
8765: EQUAL
8766: IFFALSE 8800
// begin Say ( JMM , D4b-JMM-1 ) ;
8768: LD_EXP 1
8772: PPUSH
8773: LD_STRING D4b-JMM-1
8775: PPUSH
8776: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8780: LD_EXP 24
8784: PPUSH
8785: LD_STRING D4b-Kurt-1
8787: PPUSH
8788: CALL_OW 88
// warWithLegion = 1 ;
8792: LD_ADDR_EXP 30
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// end ; if dec2 = 3 then
8800: LD_VAR 0 4
8804: PUSH
8805: LD_INT 3
8807: EQUAL
8808: IFFALSE 8866
// begin Say ( JMM , D4c-JMM-1 ) ;
8810: LD_EXP 1
8814: PPUSH
8815: LD_STRING D4c-JMM-1
8817: PPUSH
8818: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8822: LD_EXP 24
8826: PPUSH
8827: LD_STRING D4c-Kurt-1
8829: PPUSH
8830: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8834: LD_EXP 1
8838: PPUSH
8839: LD_STRING D4c-JMM-2
8841: PPUSH
8842: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8846: LD_EXP 24
8850: PPUSH
8851: LD_STRING D4c-Kurt-2
8853: PPUSH
8854: CALL_OW 88
// fakeInfo = 1 ;
8858: LD_ADDR_EXP 31
8862: PUSH
8863: LD_INT 1
8865: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8866: LD_VAR 0 13
8870: PUSH
8871: LD_VAR 0 14
8875: OR
8876: IFFALSE 9177
// begin for i in tmp do
8878: LD_ADDR_VAR 0 2
8882: PUSH
8883: LD_VAR 0 5
8887: PUSH
8888: FOR_IN
8889: IFFALSE 9175
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 274
8905: PPUSH
8906: LD_INT 1
8908: PPUSH
8909: CALL_OW 275
8913: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8914: LD_ADDR_VAR 0 7
8918: PUSH
8919: LD_VAR 0 2
8923: PPUSH
8924: CALL_OW 274
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: CALL_OW 275
8936: ST_TO_ADDR
// if cr then
8937: LD_VAR 0 11
8941: IFFALSE 9055
// begin if tmp2 and tmp2 < cr then
8943: LD_VAR 0 6
8947: PUSH
8948: LD_VAR 0 6
8952: PUSH
8953: LD_VAR 0 11
8957: LESS
8958: AND
8959: IFFALSE 9007
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL_OW 274
8970: PPUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 11
8978: PUSH
8979: LD_VAR 0 6
8983: MINUS
8984: PPUSH
8985: CALL_OW 277
// cr := cr - tmp2 ;
8989: LD_ADDR_VAR 0 11
8993: PUSH
8994: LD_VAR 0 11
8998: PUSH
8999: LD_VAR 0 6
9003: MINUS
9004: ST_TO_ADDR
// end else
9005: GO 9055
// if tmp2 > cr then
9007: LD_VAR 0 6
9011: PUSH
9012: LD_VAR 0 11
9016: GREATER
9017: IFFALSE 9055
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9019: LD_VAR 0 2
9023: PPUSH
9024: CALL_OW 274
9028: PPUSH
9029: LD_INT 1
9031: PPUSH
9032: LD_VAR 0 6
9036: PUSH
9037: LD_VAR 0 11
9041: MINUS
9042: PPUSH
9043: CALL_OW 277
// cr := 0 ;
9047: LD_ADDR_VAR 0 11
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// end ; end ; if sb then
9055: LD_VAR 0 12
9059: IFFALSE 9173
// begin if tmp3 and tmp3 < sb then
9061: LD_VAR 0 7
9065: PUSH
9066: LD_VAR 0 7
9070: PUSH
9071: LD_VAR 0 12
9075: LESS
9076: AND
9077: IFFALSE 9125
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9079: LD_VAR 0 2
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: LD_VAR 0 12
9096: PUSH
9097: LD_VAR 0 7
9101: MINUS
9102: PPUSH
9103: CALL_OW 277
// sb := sb - tmp3 ;
9107: LD_ADDR_VAR 0 12
9111: PUSH
9112: LD_VAR 0 12
9116: PUSH
9117: LD_VAR 0 7
9121: MINUS
9122: ST_TO_ADDR
// end else
9123: GO 9173
// if tmp3 > sb then
9125: LD_VAR 0 7
9129: PUSH
9130: LD_VAR 0 12
9134: GREATER
9135: IFFALSE 9173
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9137: LD_VAR 0 2
9141: PPUSH
9142: CALL_OW 274
9146: PPUSH
9147: LD_INT 3
9149: PPUSH
9150: LD_VAR 0 7
9154: PUSH
9155: LD_VAR 0 12
9159: MINUS
9160: PPUSH
9161: CALL_OW 277
// sb := 0 ;
9165: LD_ADDR_VAR 0 12
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// end ; end ; end ;
9173: GO 8888
9175: POP
9176: POP
// end ; end ; DialogueOff ;
9177: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9181: LD_INT 167
9183: PPUSH
9184: LD_INT 121
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9194: LD_EXP 24
9198: PPUSH
9199: LD_EXP 25
9203: PPUSH
9204: CALL_OW 120
// wait ( 0 0$1 ) ;
9208: LD_INT 35
9210: PPUSH
9211: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9215: LD_EXP 25
9219: PPUSH
9220: LD_INT 4
9222: PPUSH
9223: CALL_OW 113
// wait ( 0 0$3 ) ;
9227: LD_INT 105
9229: PPUSH
9230: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9234: LD_EXP 24
9238: PPUSH
9239: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9243: LD_EXP 25
9247: PPUSH
9248: CALL_OW 64
// wait ( 0 0$3 ) ;
9252: LD_INT 105
9254: PPUSH
9255: CALL_OW 67
// if payForHelp then
9259: LD_VAR 0 14
9263: IFFALSE 9321
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9265: LD_INT 36
9267: PPUSH
9268: LD_INT 57
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9278: LD_INT 51
9280: PPUSH
9281: LD_INT 63
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9291: LD_INT 93
9293: PPUSH
9294: LD_INT 65
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9304: LD_INT 42
9306: PPUSH
9307: LD_INT 12
9309: PPUSH
9310: LD_INT 1
9312: PPUSH
9313: CALL_OW 244
// PrepareLegionForPlayer ;
9317: CALL 4620 0 0
// end ; end ;
9321: LD_VAR 0 1
9325: RET
// every 0 0$10 trigger warWithLegion = 1 do
9326: LD_EXP 30
9330: PUSH
9331: LD_INT 1
9333: EQUAL
9334: IFFALSE 9343
9336: GO 9338
9338: DISABLE
// PrepareAttackLegion ;
9339: CALL 5284 0 0
9343: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9344: LD_EXP 15
9348: PPUSH
9349: CALL_OW 305
9353: PUSH
9354: LD_EXP 15
9358: PPUSH
9359: LD_INT 1
9361: PPUSH
9362: CALL_OW 289
9366: NOT
9367: AND
9368: PUSH
9369: LD_EXP 15
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: CALL_OW 289
9381: NOT
9382: AND
9383: PUSH
9384: LD_EXP 15
9388: PPUSH
9389: LD_INT 3
9391: PPUSH
9392: CALL_OW 289
9396: NOT
9397: AND
9398: IFFALSE 9415
9400: GO 9402
9402: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9403: LD_EXP 15
9407: PPUSH
9408: LD_INT 4
9410: PPUSH
9411: CALL_OW 235
9415: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9416: LD_EXP 16
9420: PPUSH
9421: CALL_OW 305
9425: PUSH
9426: LD_EXP 16
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 289
9438: NOT
9439: AND
9440: PUSH
9441: LD_EXP 16
9445: PPUSH
9446: LD_INT 2
9448: PPUSH
9449: CALL_OW 289
9453: NOT
9454: AND
9455: PUSH
9456: LD_EXP 16
9460: PPUSH
9461: LD_INT 3
9463: PPUSH
9464: CALL_OW 289
9468: NOT
9469: AND
9470: IFFALSE 9487
9472: GO 9474
9474: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9475: LD_EXP 16
9479: PPUSH
9480: LD_INT 4
9482: PPUSH
9483: CALL_OW 235
9487: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9488: LD_EXP 17
9492: PPUSH
9493: CALL_OW 305
9497: PUSH
9498: LD_EXP 17
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: CALL_OW 289
9510: NOT
9511: AND
9512: PUSH
9513: LD_EXP 17
9517: PPUSH
9518: LD_INT 2
9520: PPUSH
9521: CALL_OW 289
9525: NOT
9526: AND
9527: PUSH
9528: LD_EXP 17
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: CALL_OW 289
9540: NOT
9541: AND
9542: IFFALSE 9559
9544: GO 9546
9546: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9547: LD_EXP 17
9551: PPUSH
9552: LD_INT 4
9554: PPUSH
9555: CALL_OW 235
9559: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9560: LD_EXP 18
9564: PPUSH
9565: CALL_OW 305
9569: PUSH
9570: LD_EXP 18
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 289
9582: NOT
9583: AND
9584: PUSH
9585: LD_EXP 18
9589: PPUSH
9590: LD_INT 2
9592: PPUSH
9593: CALL_OW 289
9597: NOT
9598: AND
9599: PUSH
9600: LD_EXP 18
9604: PPUSH
9605: LD_INT 3
9607: PPUSH
9608: CALL_OW 289
9612: NOT
9613: AND
9614: IFFALSE 9631
9616: GO 9618
9618: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9619: LD_EXP 18
9623: PPUSH
9624: LD_INT 4
9626: PPUSH
9627: CALL_OW 235
9631: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9632: LD_EXP 19
9636: PPUSH
9637: CALL_OW 305
9641: PUSH
9642: LD_EXP 19
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 289
9654: NOT
9655: AND
9656: PUSH
9657: LD_EXP 19
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: CALL_OW 289
9669: NOT
9670: AND
9671: PUSH
9672: LD_EXP 19
9676: PPUSH
9677: LD_INT 3
9679: PPUSH
9680: CALL_OW 289
9684: NOT
9685: AND
9686: PUSH
9687: LD_EXP 19
9691: PPUSH
9692: LD_INT 2
9694: PPUSH
9695: CALL_OW 289
9699: NOT
9700: AND
9701: IFFALSE 9718
9703: GO 9705
9705: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9706: LD_EXP 19
9710: PPUSH
9711: LD_INT 4
9713: PPUSH
9714: CALL_OW 235
9718: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9719: LD_EXP 20
9723: PPUSH
9724: CALL_OW 305
9728: PUSH
9729: LD_EXP 20
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 289
9741: NOT
9742: AND
9743: PUSH
9744: LD_EXP 20
9748: PPUSH
9749: LD_INT 2
9751: PPUSH
9752: CALL_OW 289
9756: NOT
9757: AND
9758: PUSH
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 3
9766: PPUSH
9767: CALL_OW 289
9771: NOT
9772: AND
9773: IFFALSE 9790
9775: GO 9777
9777: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9778: LD_EXP 20
9782: PPUSH
9783: LD_INT 4
9785: PPUSH
9786: CALL_OW 235
9790: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9791: LD_EXP 21
9795: PPUSH
9796: CALL_OW 305
9800: PUSH
9801: LD_EXP 21
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL_OW 289
9813: NOT
9814: AND
9815: PUSH
9816: LD_EXP 21
9820: PPUSH
9821: LD_INT 2
9823: PPUSH
9824: CALL_OW 289
9828: NOT
9829: AND
9830: PUSH
9831: LD_EXP 21
9835: PPUSH
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 289
9843: NOT
9844: AND
9845: IFFALSE 9862
9847: GO 9849
9849: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9850: LD_EXP 21
9854: PPUSH
9855: LD_INT 4
9857: PPUSH
9858: CALL_OW 235
9862: END
// every 0 0$1 do var i ;
9863: GO 9865
9865: DISABLE
9866: LD_INT 0
9868: PPUSH
// begin enable ;
9869: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9870: LD_ADDR_VAR 0 1
9874: PUSH
9875: LD_INT 22
9877: PUSH
9878: LD_INT 4
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: PUSH
9890: FOR_IN
9891: IFFALSE 9930
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9893: LD_VAR 0 1
9897: PPUSH
9898: LD_INT 4
9900: PPUSH
9901: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9905: LD_VAR 0 1
9909: PPUSH
9910: LD_INT 4
9912: PPUSH
9913: CALL_OW 308
9917: IFFALSE 9928
// RemoveUnit ( i ) ;
9919: LD_VAR 0 1
9923: PPUSH
9924: CALL_OW 64
// end ;
9928: GO 9890
9930: POP
9931: POP
// end ;
9932: PPOPN 1
9934: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9935: LD_EXP 27
9939: PUSH
9940: LD_INT 1
9942: EQUAL
9943: IFFALSE 10382
9945: GO 9947
9947: DISABLE
9948: LD_INT 0
9950: PPUSH
9951: PPUSH
9952: PPUSH
// begin enable ;
9953: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: LD_INT 12
9961: PPUSH
9962: LD_INT 22
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 70
9990: ST_TO_ADDR
// for i in enemyVehs do
9991: LD_ADDR_VAR 0 1
9995: PUSH
9996: LD_VAR 0 2
10000: PUSH
10001: FOR_IN
10002: IFFALSE 10380
// begin if See ( 1 , i ) then
10004: LD_INT 1
10006: PPUSH
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 292
10016: IFFALSE 10378
// begin disable ;
10018: DISABLE
// DialogueOn ;
10019: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10023: LD_VAR 0 1
10027: PPUSH
10028: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10032: LD_INT 22
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 26
10044: PUSH
10045: LD_INT 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: LD_INT 25
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 25
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 25
10077: PUSH
10078: LD_INT 3
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 4
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 25
10107: PUSH
10108: LD_INT 8
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 69
10133: PPUSH
10134: LD_STRING DT1-Sol1-1
10136: PPUSH
10137: LD_STRING DT1-FSol1-1
10139: PPUSH
10140: CALL 12340 0 3
// dec = ShowQuery2 ;
10144: LD_ADDR_VAR 0 3
10148: PUSH
10149: CALL 12824 0 0
10153: ST_TO_ADDR
// if dec = 1 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 1
10161: EQUAL
10162: IFFALSE 10268
// begin Say ( JMM , D2-JMM-1 ) ;
10164: LD_EXP 1
10168: PPUSH
10169: LD_STRING D2-JMM-1
10171: PPUSH
10172: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10176: LD_EXP 22
10180: PPUSH
10181: LD_STRING D2-Pow-1
10183: PPUSH
10184: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10188: LD_EXP 1
10192: PPUSH
10193: LD_STRING D2a-JMM-1
10195: PPUSH
10196: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10200: LD_EXP 22
10204: PPUSH
10205: LD_STRING D2a-Pow-1
10207: PPUSH
10208: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10212: LD_EXP 1
10216: PPUSH
10217: LD_STRING D2a-JMM-2
10219: PPUSH
10220: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10224: LD_EXP 22
10228: PPUSH
10229: LD_STRING D2a-Pow-2
10231: PPUSH
10232: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10236: LD_EXP 1
10240: PPUSH
10241: LD_STRING D2a-JMM-3
10243: PPUSH
10244: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10248: LD_EXP 22
10252: PPUSH
10253: LD_STRING D2a-Pow-3
10255: PPUSH
10256: CALL_OW 94
// secondPass = 2 ;
10260: LD_ADDR_EXP 27
10264: PUSH
10265: LD_INT 2
10267: ST_TO_ADDR
// end ; if dec = 2 then
10268: LD_VAR 0 3
10272: PUSH
10273: LD_INT 2
10275: EQUAL
10276: IFFALSE 10370
// begin Say ( JMM , D2-JMM-1 ) ;
10278: LD_EXP 1
10282: PPUSH
10283: LD_STRING D2-JMM-1
10285: PPUSH
10286: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10290: LD_EXP 22
10294: PPUSH
10295: LD_STRING D2-Pow-1
10297: PPUSH
10298: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10302: LD_EXP 1
10306: PPUSH
10307: LD_STRING D2b-JMM-1
10309: PPUSH
10310: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10314: LD_EXP 22
10318: PPUSH
10319: LD_STRING D2b-Pow-1
10321: PPUSH
10322: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10326: LD_EXP 1
10330: PPUSH
10331: LD_STRING D2c-JMM-1
10333: PPUSH
10334: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10338: LD_EXP 22
10342: PPUSH
10343: LD_STRING D2c-Pow-1
10345: PPUSH
10346: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10350: LD_EXP 1
10354: PPUSH
10355: LD_STRING D2c-JMM-2
10357: PPUSH
10358: CALL_OW 88
// secondPass = 2 ;
10362: LD_ADDR_EXP 27
10366: PUSH
10367: LD_INT 2
10369: ST_TO_ADDR
// end ; DialogueOff ;
10370: CALL_OW 7
// exit ;
10374: POP
10375: POP
10376: GO 10382
// end ; end ;
10378: GO 10001
10380: POP
10381: POP
// end ;
10382: PPOPN 3
10384: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10385: LD_EXP 28
10389: PUSH
10390: LD_INT 1
10392: EQUAL
10393: PUSH
10394: LD_INT 11
10396: PPUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 70
10411: AND
10412: IFFALSE 10640
10414: GO 10416
10416: DISABLE
10417: LD_INT 0
10419: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10420: LD_ADDR_VAR 0 1
10424: PUSH
10425: LD_INT 11
10427: PPUSH
10428: LD_INT 22
10430: PUSH
10431: LD_INT 3
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 70
10442: ST_TO_ADDR
// if not vehicles then
10443: LD_VAR 0 1
10447: NOT
10448: IFFALSE 10452
// exit ;
10450: GO 10640
// repeat wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_INT 101
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PPUSH
10474: CALL_OW 72
10478: IFFALSE 10452
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 101
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PPUSH
10495: CALL_OW 72
10499: PUSH
10500: LD_INT 1
10502: ARRAY
10503: PPUSH
10504: CALL_OW 87
// DialogueOn ;
10508: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10512: LD_INT 22
10514: PUSH
10515: LD_INT 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 26
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 1
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 25
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 25
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: LD_INT 4
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 25
10577: PUSH
10578: LD_INT 5
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 25
10587: PUSH
10588: LD_INT 8
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 69
10613: PPUSH
10614: LD_STRING DT1-Sol1-1
10616: PPUSH
10617: LD_STRING DT1-FSol1-1
10619: PPUSH
10620: CALL 12340 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10624: LD_EXP 1
10628: PPUSH
10629: LD_STRING DT1-JMM-1
10631: PPUSH
10632: CALL_OW 88
// DialogueOff ;
10636: CALL_OW 7
// end ;
10640: PPOPN 1
10642: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10643: LD_EXP 28
10647: PUSH
10648: LD_INT 1
10650: EQUAL
10651: PUSH
10652: LD_INT 11
10654: PPUSH
10655: LD_INT 22
10657: PUSH
10658: LD_INT 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 50
10667: PUSH
10668: EMPTY
10669: LIST
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: LD_INT 21
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 21
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 70
10708: PUSH
10709: LD_INT 0
10711: EQUAL
10712: AND
10713: PUSH
10714: LD_EXP 29
10718: AND
10719: IFFALSE 10876
10721: GO 10723
10723: DISABLE
// begin vehicleTeleported = 2 ;
10724: LD_ADDR_EXP 28
10728: PUSH
10729: LD_INT 2
10731: ST_TO_ADDR
// DialogueOn ;
10732: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10736: LD_EXP 1
10740: PPUSH
10741: LD_STRING DT1a-JMM-1
10743: PPUSH
10744: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 26
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 3
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 4
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 5
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 8
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_STRING DT1a-Sol1-1
10852: PPUSH
10853: LD_STRING DT1a-FSol1-1
10855: PPUSH
10856: CALL 12340 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING DT1a-JMM-2
10867: PPUSH
10868: CALL_OW 88
// DialogueOff ;
10872: CALL_OW 7
// end ;
10876: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10877: LD_EXP 28
10881: PUSH
10882: LD_INT 3
10884: EQUAL
10885: PUSH
10886: LD_INT 11
10888: PPUSH
10889: LD_INT 22
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 101
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 70
10917: AND
10918: IFFALSE 11192
10920: GO 10922
10922: DISABLE
10923: LD_INT 0
10925: PPUSH
10926: PPUSH
10927: PPUSH
// begin wait ( 0 0$0.3 ) ;
10928: LD_INT 10
10930: PPUSH
10931: CALL_OW 67
// DialogueOn ;
10935: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10939: LD_ADDR_VAR 0 3
10943: PUSH
10944: LD_INT 22
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 26
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 2
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 4
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 5
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 8
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PPUSH
11041: CALL_OW 69
11045: PPUSH
11046: LD_STRING DT2-Sol1-1
11048: PPUSH
11049: LD_STRING DT2-FSol1-1
11051: PPUSH
11052: CALL 12340 0 3
11056: ST_TO_ADDR
// DialogueOff ;
11057: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11061: LD_INT 35
11063: PPUSH
11064: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11068: LD_INT 11
11070: PPUSH
11071: LD_INT 22
11073: PUSH
11074: LD_INT 3
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 50
11083: PUSH
11084: EMPTY
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 70
11095: NOT
11096: IFFALSE 11061
// wait ( 0 0$2 ) ;
11098: LD_INT 70
11100: PPUSH
11101: CALL_OW 67
// vehicleTeleported = 4 ;
11105: LD_ADDR_EXP 28
11109: PUSH
11110: LD_INT 4
11112: ST_TO_ADDR
// DialogueOn ;
11113: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11117: LD_EXP 1
11121: PPUSH
11122: LD_STRING DT2a-JMM-1
11124: PPUSH
11125: CALL_OW 88
// if speaker then
11129: LD_VAR 0 3
11133: IFFALSE 11176
// if GetSex ( speaker ) = 1 then
11135: LD_VAR 0 3
11139: PPUSH
11140: CALL_OW 258
11144: PUSH
11145: LD_INT 1
11147: EQUAL
11148: IFFALSE 11164
// Say ( speaker , DT2a-Sol1-1 ) else
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_STRING DT2a-Sol1-1
11157: PPUSH
11158: CALL_OW 88
11162: GO 11176
// Say ( speaker , DT2a-FSol1-1 ) ;
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_STRING DT2a-FSol1-1
11171: PPUSH
11172: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11176: LD_EXP 3
11180: PPUSH
11181: LD_STRING DT2a-Don-1
11183: PPUSH
11184: CALL_OW 88
// DialogueOff ;
11188: CALL_OW 7
// end ;
11192: PPOPN 3
11194: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11195: LD_INT 1
11197: PPUSH
11198: LD_INT 45
11200: PPUSH
11201: LD_INT 74
11203: PPUSH
11204: CALL_OW 293
11208: IFFALSE 11372
11210: GO 11212
11212: DISABLE
// begin DialogueOn ;
11213: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11217: LD_INT 36
11219: PPUSH
11220: LD_INT 55
11222: PPUSH
11223: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11227: LD_INT 22
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 26
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: LD_INT 25
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 25
11262: PUSH
11263: LD_INT 2
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 25
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 25
11282: PUSH
11283: LD_INT 4
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 25
11292: PUSH
11293: LD_INT 5
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 25
11302: PUSH
11303: LD_INT 8
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: PPUSH
11329: LD_STRING D5-Sol1-1
11331: PPUSH
11332: LD_STRING D5-FSol1-
11334: PPUSH
11335: CALL 12340 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11339: LD_EXP 30
11343: PUSH
11344: LD_EXP 3
11348: PPUSH
11349: CALL_OW 302
11353: AND
11354: IFFALSE 11368
// Say ( Donaldson , D5-Don-1 ) ;
11356: LD_EXP 3
11360: PPUSH
11361: LD_STRING D5-Don-1
11363: PPUSH
11364: CALL_OW 88
// DialogueOff ;
11368: CALL_OW 7
// end ;
11372: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11373: LD_INT 1
11375: PPUSH
11376: LD_INT 10
11378: PPUSH
11379: CALL_OW 292
11383: PUSH
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 137
11389: PPUSH
11390: CALL_OW 292
11394: OR
11395: IFFALSE 11539
11397: GO 11399
11399: DISABLE
// begin DialogueOn ;
11400: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11404: LD_INT 22
11406: PUSH
11407: LD_INT 1
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 26
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: LD_INT 25
11429: PUSH
11430: LD_INT 1
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 25
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 3
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 25
11459: PUSH
11460: LD_INT 4
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 25
11479: PUSH
11480: LD_INT 8
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 69
11505: PPUSH
11506: LD_STRING DT3-Sol1-1
11508: PPUSH
11509: LD_STRING DT3-FSol1-1
11511: PPUSH
11512: CALL 12340 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11516: LD_EXP 1
11520: PPUSH
11521: LD_STRING DT3-JMM-1
11523: PPUSH
11524: CALL_OW 88
// DialogueOff ;
11528: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11532: LD_STRING M2
11534: PPUSH
11535: CALL_OW 337
// end ;
11539: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11540: LD_EXP 42
11544: PUSH
11545: LD_INT 0
11547: EQUAL
11548: IFFALSE 11631
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
// begin enable ;
11556: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: LD_INT 10
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 58
11587: PUSH
11588: EMPTY
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 70
11600: PUSH
11601: FOR_IN
11602: IFFALSE 11629
// if GetLives ( i ) < 1000 then
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 256
11613: PUSH
11614: LD_INT 1000
11616: LESS
11617: IFFALSE 11627
// ruEscape = 1 ;
11619: LD_ADDR_EXP 42
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
11627: GO 11601
11629: POP
11630: POP
// end ;
11631: PPOPN 1
11633: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11634: LD_INT 3
11636: PPUSH
11637: CALL_OW 303
11641: PUSH
11642: LD_INT 4
11644: PPUSH
11645: CALL_OW 303
11649: OR
11650: PUSH
11651: LD_INT 22
11653: PPUSH
11654: LD_INT 22
11656: PUSH
11657: LD_INT 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 70
11668: PUSH
11669: LD_INT 0
11671: GREATER
11672: OR
11673: PUSH
11674: LD_EXP 42
11678: PUSH
11679: LD_INT 1
11681: EQUAL
11682: OR
11683: IFFALSE 11914
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
// begin ruAI = 0 ;
11693: LD_ADDR_EXP 41
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11701: LD_ADDR_VAR 0 3
11705: PUSH
11706: LD_INT 10
11708: PPUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 3
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 21
11721: PUSH
11722: LD_INT 2
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 58
11731: PUSH
11732: EMPTY
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: PPUSH
11740: CALL_OW 70
11744: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11745: LD_EXP 34
11749: PPUSH
11750: CALL_OW 122
// wait ( 0 0$1 ) ;
11754: LD_INT 35
11756: PPUSH
11757: CALL_OW 67
// DialogueOn ;
11761: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11765: LD_EXP 1
11769: PPUSH
11770: LD_STRING D6-JMM-1
11772: PPUSH
11773: CALL_OW 88
// DialogueOff ;
11777: CALL_OW 7
// if vehs > 0 then
11781: LD_VAR 0 3
11785: PUSH
11786: LD_INT 0
11788: GREATER
11789: IFFALSE 11859
// for i := 1 to RuScientists do
11791: LD_ADDR_VAR 0 1
11795: PUSH
11796: DOUBLE
11797: LD_INT 1
11799: DEC
11800: ST_TO_ADDR
11801: LD_EXP 34
11805: PUSH
11806: FOR_TO
11807: IFFALSE 11855
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11809: LD_EXP 34
11813: PUSH
11814: LD_VAR 0 1
11818: ARRAY
11819: PPUSH
11820: LD_INT 3
11822: PUSH
11823: LD_INT 60
11825: PUSH
11826: EMPTY
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 72
11837: PPUSH
11838: LD_VAR 0 3
11842: PUSH
11843: LD_VAR 0 1
11847: ARRAY
11848: PPUSH
11849: CALL_OW 120
11853: GO 11806
11855: POP
11856: POP
11857: GO 11914
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11859: LD_EXP 34
11863: PUSH
11864: LD_VAR 0 1
11868: ARRAY
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 60
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_INT 13
11890: PUSH
11891: LD_INT 14
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 2
11903: PPUSH
11904: CALL_OW 12
11908: ARRAY
11909: PPUSH
11910: CALL_OW 113
// end ;
11914: PPOPN 3
11916: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11917: LD_EXP 41
11921: PUSH
11922: LD_INT 0
11924: EQUAL
11925: IFFALSE 12297
11927: GO 11929
11929: DISABLE
11930: LD_INT 0
11932: PPUSH
11933: PPUSH
11934: PPUSH
11935: PPUSH
// begin enable ;
11936: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11937: LD_EXP 34
11941: PPUSH
11942: LD_INT 2
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 13
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 95
11957: PUSH
11958: LD_INT 14
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 72
11974: PUSH
11975: LD_INT 33
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 23
11987: PUSH
11988: LD_INT 3
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 95
12000: PUSH
12001: LD_INT 13
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 95
12010: PUSH
12011: LD_INT 14
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: OR
12033: IFFALSE 12222
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12035: LD_ADDR_VAR 0 2
12039: PUSH
12040: LD_EXP 34
12044: PPUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 95
12050: PUSH
12051: LD_INT 13
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 95
12060: PUSH
12061: LD_INT 14
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 72
12077: PUSH
12078: LD_INT 1
12080: ARRAY
12081: ST_TO_ADDR
// if not unit then
12082: LD_VAR 0 2
12086: NOT
12087: IFFALSE 12222
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12089: LD_ADDR_VAR 0 4
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: LD_INT 95
12099: PUSH
12100: LD_INT 13
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 95
12109: PUSH
12110: LD_INT 14
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 33
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 23
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 69
12151: ST_TO_ADDR
// if not tmp then
12152: LD_VAR 0 4
12156: NOT
12157: IFFALSE 12161
// exit ;
12159: GO 12297
// for i in tmp do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_VAR 0 4
12170: PUSH
12171: FOR_IN
12172: IFFALSE 12220
// if IsDrivenBy ( i ) in RuScientists then
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 311
12183: PUSH
12184: LD_EXP 34
12188: IN
12189: IFFALSE 12218
// begin unit := IsDrivenBy ( i ) ;
12191: LD_ADDR_VAR 0 2
12195: PUSH
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL_OW 311
12205: ST_TO_ADDR
// veh := i ;
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: LD_VAR 0 1
12215: ST_TO_ADDR
// break ;
12216: GO 12220
// end ;
12218: GO 12171
12220: POP
12221: POP
// end ; end ; if not unit then
12222: LD_VAR 0 2
12226: NOT
12227: IFFALSE 12231
// exit ;
12229: GO 12297
// RuScientists = RuScientists diff unit ;
12231: LD_ADDR_EXP 34
12235: PUSH
12236: LD_EXP 34
12240: PUSH
12241: LD_VAR 0 2
12245: DIFF
12246: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12247: LD_VAR 0 2
12251: PPUSH
12252: CALL_OW 64
// if veh then
12256: LD_VAR 0 3
12260: IFFALSE 12297
// begin if GetWeapon ( veh ) = 49 then
12262: LD_VAR 0 3
12266: PPUSH
12267: CALL_OW 264
12271: PUSH
12272: LD_INT 49
12274: EQUAL
12275: IFFALSE 12288
// KillUnit ( veh ) else
12277: LD_VAR 0 3
12281: PPUSH
12282: CALL_OW 66
12286: GO 12297
// RemoveUnit ( veh ) ;
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 64
// end ; end ; end_of_file
12297: PPOPN 4
12299: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12300: LD_INT 0
12302: PPUSH
12303: PPUSH
// for i in charactersList do
12304: LD_ADDR_VAR 0 4
12308: PUSH
12309: LD_VAR 0 1
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12333
// SaveCharacters ( i , ident ) ;
12317: LD_VAR 0 4
12321: PPUSH
12322: LD_VAR 0 2
12326: PPUSH
12327: CALL_OW 38
12331: GO 12314
12333: POP
12334: POP
// end ;
12335: LD_VAR 0 3
12339: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 1
12354: PUSH
12355: LD_EXP 1
12359: PUSH
12360: LD_EXP 7
12364: PUSH
12365: LD_EXP 3
12369: PUSH
12370: LD_EXP 4
12374: PUSH
12375: LD_EXP 5
12379: PUSH
12380: LD_EXP 2
12384: PUSH
12385: LD_EXP 12
12389: PUSH
12390: LD_EXP 13
12394: PUSH
12395: LD_EXP 9
12399: PUSH
12400: LD_EXP 11
12404: PUSH
12405: LD_EXP 6
12409: PUSH
12410: LD_EXP 8
12414: PUSH
12415: LD_EXP 10
12419: PUSH
12420: LD_EXP 22
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: DIFF
12441: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12442: LD_ADDR_VAR 0 6
12446: PUSH
12447: LD_VAR 0 1
12451: PUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 12
12464: ARRAY
12465: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12466: LD_VAR 0 6
12470: PPUSH
12471: CALL_OW 258
12475: PUSH
12476: LD_INT 1
12478: EQUAL
12479: IFFALSE 12497
// Say ( speaker , dialogMID ) else
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL_OW 88
12495: GO 12511
// Say ( speaker , dialogFID ) ;
12497: LD_VAR 0 6
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: CALL_OW 88
// result := speaker ;
12511: LD_ADDR_VAR 0 4
12515: PUSH
12516: LD_VAR 0 6
12520: ST_TO_ADDR
// end ;
12521: LD_VAR 0 4
12525: RET
// export function PrepareDifficulty ; var tmp ; begin
12526: LD_INT 0
12528: PPUSH
12529: PPUSH
// if Difficulty = 1 then
12530: LD_OWVAR 67
12534: PUSH
12535: LD_INT 1
12537: EQUAL
12538: IFFALSE 12558
// begin RuSolMinLevel = 8 ;
12540: LD_ADDR_EXP 36
12544: PUSH
12545: LD_INT 8
12547: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12548: LD_ADDR_EXP 37
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// end else
12556: GO 12798
// if Difficulty = 2 then
12558: LD_OWVAR 67
12562: PUSH
12563: LD_INT 2
12565: EQUAL
12566: IFFALSE 12662
// begin RuSolMinLevel = 9 ;
12568: LD_ADDR_EXP 36
12572: PUSH
12573: LD_INT 9
12575: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12576: LD_ADDR_EXP 37
12580: PUSH
12581: LD_INT 10
12583: ST_TO_ADDR
// uc_nation = 3 ;
12584: LD_ADDR_OWVAR 21
12588: PUSH
12589: LD_INT 3
12591: ST_TO_ADDR
// uc_side = 3 ;
12592: LD_ADDR_OWVAR 20
12596: PUSH
12597: LD_INT 3
12599: ST_TO_ADDR
// bc_level = 10 ;
12600: LD_ADDR_OWVAR 43
12604: PUSH
12605: LD_INT 10
12607: ST_TO_ADDR
// bc_type = b_turret ;
12608: LD_ADDR_OWVAR 42
12612: PUSH
12613: LD_INT 33
12615: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12616: LD_ADDR_VAR 0 2
12620: PUSH
12621: LD_INT 86
12623: PPUSH
12624: LD_INT 34
12626: PPUSH
12627: LD_INT 2
12629: PPUSH
12630: CALL_OW 47
12634: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12635: LD_VAR 0 2
12639: PPUSH
12640: LD_INT 49
12642: PPUSH
12643: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12647: LD_INT 64
12649: PPUSH
12650: LD_INT 3
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 322
// end else
12660: GO 12798
// begin RuSolMinLevel = 10 ;
12662: LD_ADDR_EXP 36
12666: PUSH
12667: LD_INT 10
12669: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12670: LD_ADDR_EXP 37
12674: PUSH
12675: LD_INT 10
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// uc_side = 3 ;
12686: LD_ADDR_OWVAR 20
12690: PUSH
12691: LD_INT 3
12693: ST_TO_ADDR
// bc_level = 10 ;
12694: LD_ADDR_OWVAR 43
12698: PUSH
12699: LD_INT 10
12701: ST_TO_ADDR
// bc_type = b_turret ;
12702: LD_ADDR_OWVAR 42
12706: PUSH
12707: LD_INT 33
12709: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 86
12717: PPUSH
12718: LD_INT 34
12720: PPUSH
12721: LD_INT 2
12723: PPUSH
12724: CALL_OW 47
12728: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12729: LD_VAR 0 2
12733: PPUSH
12734: LD_INT 49
12736: PPUSH
12737: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12741: LD_ADDR_VAR 0 2
12745: PUSH
12746: LD_INT 93
12748: PPUSH
12749: LD_INT 31
12751: PPUSH
12752: LD_INT 2
12754: PPUSH
12755: CALL_OW 47
12759: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12760: LD_VAR 0 2
12764: PPUSH
12765: LD_INT 49
12767: PPUSH
12768: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12772: LD_INT 64
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12785: LD_INT 65
12787: PPUSH
12788: LD_INT 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// end ; end ;
12798: LD_VAR 0 1
12802: RET
// export function ShowQuery1 ; begin
12803: LD_INT 0
12805: PPUSH
// result := Query ( Q1 ) ;
12806: LD_ADDR_VAR 0 1
12810: PUSH
12811: LD_STRING Q1
12813: PPUSH
12814: CALL_OW 97
12818: ST_TO_ADDR
// end ;
12819: LD_VAR 0 1
12823: RET
// export function ShowQuery2 ; begin
12824: LD_INT 0
12826: PPUSH
// result := Query ( Q1a ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_STRING Q1a
12834: PPUSH
12835: CALL_OW 97
12839: ST_TO_ADDR
// end ;
12840: LD_VAR 0 1
12844: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12845: LD_INT 0
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
// for i = 1 to count do
12852: LD_ADDR_VAR 0 8
12856: PUSH
12857: DOUBLE
12858: LD_INT 1
12860: DEC
12861: ST_TO_ADDR
12862: LD_VAR 0 6
12866: PUSH
12867: FOR_TO
12868: IFFALSE 12949
// begin uc_side = side ;
12870: LD_ADDR_OWVAR 20
12874: PUSH
12875: LD_VAR 0 1
12879: ST_TO_ADDR
// uc_nation = nation ;
12880: LD_ADDR_OWVAR 21
12884: PUSH
12885: LD_VAR 0 2
12889: ST_TO_ADDR
// hc_gallery =  ;
12890: LD_ADDR_OWVAR 33
12894: PUSH
12895: LD_STRING 
12897: ST_TO_ADDR
// hc_name =  ;
12898: LD_ADDR_OWVAR 26
12902: PUSH
12903: LD_STRING 
12905: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12906: LD_INT 0
12908: PPUSH
12909: LD_VAR 0 5
12913: PPUSH
12914: LD_VAR 0 4
12918: PPUSH
12919: CALL_OW 380
// un = CreateHuman ;
12923: LD_ADDR_VAR 0 10
12927: PUSH
12928: CALL_OW 44
12932: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12933: LD_VAR 0 10
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: CALL_OW 52
// end ;
12947: GO 12867
12949: POP
12950: POP
// end ;
12951: LD_VAR 0 7
12955: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12956: LD_INT 0
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12963: LD_ADDR_VAR 0 8
12967: PUSH
12968: LD_INT 48
12970: PUSH
12971: LD_INT 49
12973: PUSH
12974: LD_INT 50
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: LD_INT 51
12985: PUSH
12986: LD_INT 52
12988: PUSH
12989: LD_INT 69
12991: PUSH
12992: LD_INT 39
12994: PUSH
12995: LD_INT 34
12997: PUSH
12998: LD_INT 40
13000: PUSH
13001: LD_INT 53
13003: PUSH
13004: LD_INT 71
13006: PUSH
13007: LD_INT 57
13009: PUSH
13010: LD_INT 58
13012: PUSH
13013: LD_INT 44
13015: PUSH
13016: LD_INT 32
13018: PUSH
13019: LD_INT 27
13021: PUSH
13022: LD_INT 23
13024: PUSH
13025: LD_INT 33
13027: PUSH
13028: LD_INT 59
13030: PUSH
13031: LD_INT 54
13033: PUSH
13034: LD_INT 55
13036: PUSH
13037: LD_INT 56
13039: PUSH
13040: LD_INT 63
13042: PUSH
13043: LD_INT 64
13045: PUSH
13046: LD_INT 65
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 31
13054: PUSH
13055: LD_INT 21
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_INT 25
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13098: LD_ADDR_VAR 0 5
13102: PUSH
13103: DOUBLE
13104: LD_INT 1
13106: DEC
13107: ST_TO_ADDR
13108: LD_VAR 0 8
13112: PUSH
13113: FOR_TO
13114: IFFALSE 13190
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13116: LD_VAR 0 8
13120: PUSH
13121: LD_VAR 0 5
13125: ARRAY
13126: PPUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 321
13136: PUSH
13137: LD_INT 1
13139: EQUAL
13140: PUSH
13141: LD_VAR 0 8
13145: PUSH
13146: LD_VAR 0 5
13150: ARRAY
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: CALL_OW 482
13161: PUSH
13162: LD_INT 1
13164: EQUAL
13165: AND
13166: IFFALSE 13188
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13168: LD_VAR 0 2
13172: PPUSH
13173: LD_VAR 0 8
13177: PUSH
13178: LD_VAR 0 5
13182: ARRAY
13183: PPUSH
13184: CALL_OW 184
13188: GO 13113
13190: POP
13191: POP
// end ;
13192: LD_VAR 0 4
13196: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13197: LD_INT 0
13199: PPUSH
13200: PPUSH
13201: PPUSH
13202: PPUSH
13203: PPUSH
13204: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13205: LD_ADDR_VAR 0 8
13209: PUSH
13210: LD_VAR 0 2
13214: PPUSH
13215: CALL_OW 313
13219: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13220: LD_ADDR_VAR 0 9
13224: PUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 22
13232: PUSH
13233: LD_VAR 0 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 24
13254: PUSH
13255: LD_INT 750
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: LD_INT 54
13267: PUSH
13268: EMPTY
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 70
13285: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13286: LD_ADDR_VAR 0 6
13290: PUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_INT 22
13298: PUSH
13299: LD_VAR 0 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 3
13320: PUSH
13321: LD_INT 24
13323: PUSH
13324: LD_INT 1000
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: PPUSH
13343: CALL_OW 70
13347: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13348: LD_VAR 0 6
13352: NOT
13353: PUSH
13354: LD_INT 22
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 24
13378: PUSH
13379: LD_INT 250
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 69
13395: NOT
13396: AND
13397: IFFALSE 13401
// exit ;
13399: GO 13583
// if buildings_list > 0 and engineerOkInside then
13401: LD_VAR 0 6
13405: PUSH
13406: LD_INT 0
13408: GREATER
13409: PUSH
13410: LD_VAR 0 8
13414: AND
13415: IFFALSE 13426
// ComExitBuilding ( engineerOkInside ) ;
13417: LD_VAR 0 8
13421: PPUSH
13422: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13426: LD_VAR 0 6
13430: PUSH
13431: LD_INT 0
13433: GREATER
13434: PUSH
13435: LD_VAR 0 9
13439: PUSH
13440: LD_INT 0
13442: GREATER
13443: AND
13444: IFFALSE 13464
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13446: LD_VAR 0 9
13450: PPUSH
13451: LD_VAR 0 6
13455: PUSH
13456: LD_INT 1
13458: ARRAY
13459: PPUSH
13460: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13464: LD_VAR 0 6
13468: PUSH
13469: LD_INT 0
13471: EQUAL
13472: PUSH
13473: LD_VAR 0 4
13477: PUSH
13478: LD_INT 0
13480: EQUAL
13481: AND
13482: PUSH
13483: LD_VAR 0 9
13487: PUSH
13488: LD_INT 0
13490: GREATER
13491: AND
13492: IFFALSE 13508
// ComEnterUnit ( engineerOkOutside , building ) ;
13494: LD_VAR 0 9
13498: PPUSH
13499: LD_VAR 0 2
13503: PPUSH
13504: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13508: LD_VAR 0 9
13512: PUSH
13513: LD_INT 0
13515: GREATER
13516: PUSH
13517: LD_VAR 0 6
13521: PUSH
13522: LD_INT 0
13524: EQUAL
13525: AND
13526: PUSH
13527: LD_VAR 0 4
13531: PUSH
13532: LD_INT 0
13534: GREATER
13535: AND
13536: IFFALSE 13583
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13538: LD_VAR 0 9
13542: PPUSH
13543: LD_VAR 0 4
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: LD_VAR 0 4
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 4
13565: PUSH
13566: LD_INT 3
13568: ARRAY
13569: PPUSH
13570: LD_VAR 0 4
13574: PUSH
13575: LD_INT 4
13577: ARRAY
13578: PPUSH
13579: CALL_OW 145
// end ;
13583: LD_VAR 0 5
13587: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13588: LD_INT 0
13590: PPUSH
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
13597: PPUSH
13598: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13599: LD_ADDR_VAR 0 6
13603: PUSH
13604: LD_INT 22
13606: PUSH
13607: LD_VAR 0 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 25
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 24
13628: PUSH
13629: LD_INT 251
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 69
13645: PUSH
13646: LD_EXP 34
13650: PUSH
13651: EMPTY
13652: LIST
13653: DIFF
13654: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13655: LD_ADDR_VAR 0 7
13659: PUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: LD_INT 22
13667: PUSH
13668: LD_VAR 0 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 25
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 50
13689: PUSH
13690: EMPTY
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 70
13702: PUSH
13703: LD_EXP 34
13707: PUSH
13708: EMPTY
13709: LIST
13710: DIFF
13711: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13712: LD_ADDR_VAR 0 10
13716: PUSH
13717: LD_VAR 0 3
13721: PPUSH
13722: LD_INT 22
13724: PUSH
13725: LD_VAR 0 1
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 21
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 3
13746: PUSH
13747: LD_INT 24
13749: PUSH
13750: LD_INT 750
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 70
13770: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13771: LD_ADDR_VAR 0 11
13775: PUSH
13776: LD_VAR 0 2
13780: PPUSH
13781: LD_INT 22
13783: PUSH
13784: LD_VAR 0 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 21
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 3
13805: PUSH
13806: LD_INT 24
13808: PUSH
13809: LD_INT 1000
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: PPUSH
13825: CALL_OW 70
13829: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13830: LD_VAR 0 10
13834: PUSH
13835: LD_INT 0
13837: GREATER
13838: PUSH
13839: LD_VAR 0 6
13843: PUSH
13844: LD_INT 0
13846: GREATER
13847: AND
13848: IFFALSE 13864
// ComMoveToArea ( damageUnits , healArea ) ;
13850: LD_VAR 0 10
13854: PPUSH
13855: LD_VAR 0 2
13859: PPUSH
13860: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13864: LD_VAR 0 11
13868: PUSH
13869: LD_INT 0
13871: GREATER
13872: PUSH
13873: LD_VAR 0 7
13877: PUSH
13878: LD_INT 0
13880: GREATER
13881: AND
13882: IFFALSE 13902
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13884: LD_VAR 0 7
13888: PPUSH
13889: LD_VAR 0 11
13893: PUSH
13894: LD_INT 1
13896: ARRAY
13897: PPUSH
13898: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13902: LD_VAR 0 10
13906: PUSH
13907: LD_INT 0
13909: EQUAL
13910: PUSH
13911: LD_VAR 0 11
13915: PUSH
13916: LD_INT 0
13918: EQUAL
13919: AND
13920: PUSH
13921: LD_VAR 0 7
13925: PUSH
13926: LD_INT 0
13928: GREATER
13929: AND
13930: IFFALSE 14035
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13932: LD_ADDR_VAR 0 12
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_VAR 0 1
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 3
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 30
13961: PUSH
13962: LD_INT 8
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 69
13978: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13979: LD_ADDR_VAR 0 13
13983: PUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_VAR 0 12
13991: PPUSH
13992: CALL_OW 12
13996: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13997: LD_VAR 0 7
14001: PPUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 60
14007: PUSH
14008: EMPTY
14009: LIST
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 72
14019: PPUSH
14020: LD_VAR 0 12
14024: PUSH
14025: LD_VAR 0 13
14029: ARRAY
14030: PPUSH
14031: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14035: LD_VAR 0 3
14039: PPUSH
14040: LD_INT 22
14042: PUSH
14043: LD_VAR 0 1
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 24
14064: PUSH
14065: LD_INT 751
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 70
14081: PUSH
14082: LD_INT 0
14084: GREATER
14085: PUSH
14086: LD_INT 21
14088: PPUSH
14089: CALL_OW 302
14093: AND
14094: PUSH
14095: LD_INT 21
14097: PPUSH
14098: CALL_OW 255
14102: PUSH
14103: LD_INT 3
14105: EQUAL
14106: AND
14107: IFFALSE 14163
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 22
14116: PUSH
14117: LD_VAR 0 1
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 25
14128: PUSH
14129: LD_INT 3
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 24
14138: PUSH
14139: LD_INT 751
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 70
14155: PPUSH
14156: LD_INT 21
14158: PPUSH
14159: CALL_OW 120
// end ;
14163: LD_VAR 0 5
14167: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14168: LD_INT 0
14170: PPUSH
14171: PPUSH
14172: PPUSH
14173: PPUSH
14174: PPUSH
14175: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14176: LD_ADDR_VAR 0 7
14180: PUSH
14181: LD_VAR 0 2
14185: PPUSH
14186: LD_INT 22
14188: PUSH
14189: LD_VAR 0 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 34
14210: PUSH
14211: LD_INT 52
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 70
14227: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14228: LD_ADDR_VAR 0 8
14232: PUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_INT 22
14240: PUSH
14241: LD_VAR 0 1
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 3
14262: PUSH
14263: LD_INT 24
14265: PUSH
14266: LD_INT 1000
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 70
14289: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14290: LD_VAR 0 8
14294: PUSH
14295: LD_INT 0
14297: GREATER
14298: PUSH
14299: LD_VAR 0 7
14303: PPUSH
14304: LD_INT 24
14306: PUSH
14307: LD_INT 750
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 72
14318: PUSH
14319: LD_INT 0
14321: GREATER
14322: AND
14323: IFFALSE 14343
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14325: LD_VAR 0 7
14329: PPUSH
14330: LD_VAR 0 8
14334: PUSH
14335: LD_INT 1
14337: ARRAY
14338: PPUSH
14339: CALL_OW 130
// end ;
14343: LD_VAR 0 3
14347: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14348: LD_INT 0
14350: PPUSH
14351: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14352: LD_INT 22
14354: PUSH
14355: LD_VAR 0 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: PUSH
14383: LD_INT 18
14385: PPUSH
14386: LD_INT 22
14388: PUSH
14389: LD_VAR 0 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 70
14416: PUSH
14417: LD_VAR 0 3
14421: LESSEQUAL
14422: DIFF
14423: IFFALSE 14490
// for i = 1 to vehCount do
14425: LD_ADDR_VAR 0 9
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_VAR 0 3
14439: PUSH
14440: FOR_TO
14441: IFFALSE 14488
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_VAR 0 7
14452: PPUSH
14453: LD_VAR 0 5
14457: PPUSH
14458: LD_VAR 0 6
14462: PPUSH
14463: LD_VAR 0 4
14467: PUSH
14468: LD_INT 1
14470: PPUSH
14471: LD_VAR 0 4
14475: PPUSH
14476: CALL_OW 12
14480: ARRAY
14481: PPUSH
14482: CALL_OW 185
14486: GO 14440
14488: POP
14489: POP
// end ;
14490: LD_VAR 0 8
14494: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14503: LD_ADDR_VAR 0 6
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_VAR 0 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 25
14522: PUSH
14523: LD_INT 9
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14539: LD_ADDR_VAR 0 7
14543: PUSH
14544: LD_INT 81
14546: PUSH
14547: LD_VAR 0 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 69
14581: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14582: LD_ADDR_VAR 0 4
14586: PUSH
14587: LD_INT 1
14589: PPUSH
14590: LD_INT 3
14592: PPUSH
14593: CALL_OW 12
14597: ST_TO_ADDR
// for i = 1 to list do
14598: LD_ADDR_VAR 0 5
14602: PUSH
14603: DOUBLE
14604: LD_INT 1
14606: DEC
14607: ST_TO_ADDR
14608: LD_VAR 0 6
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14816
// for ta in filter do
14616: LD_ADDR_VAR 0 3
14620: PUSH
14621: LD_VAR 0 7
14625: PUSH
14626: FOR_IN
14627: IFFALSE 14812
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14629: LD_VAR 0 6
14633: PUSH
14634: LD_VAR 0 5
14638: ARRAY
14639: PPUSH
14640: LD_VAR 0 3
14644: PPUSH
14645: CALL_OW 296
14649: PUSH
14650: LD_INT 15
14652: LESSEQUAL
14653: IFFALSE 14810
// begin case c of 1 :
14655: LD_VAR 0 4
14659: PUSH
14660: LD_INT 1
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14706
14668: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14669: LD_VAR 0 6
14673: PUSH
14674: LD_VAR 0 5
14678: ARRAY
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: CALL_OW 250
14689: PPUSH
14690: LD_VAR 0 3
14694: PPUSH
14695: CALL_OW 251
14699: PPUSH
14700: CALL_OW 154
14704: GO 14810
14706: LD_INT 2
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14778
14714: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14715: LD_VAR 0 6
14719: PUSH
14720: LD_VAR 0 5
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 3
14730: PPUSH
14731: CALL_OW 250
14735: PUSH
14736: LD_INT 1
14738: NEG
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 12
14747: PLUS
14748: PPUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: CALL_OW 251
14758: PUSH
14759: LD_INT 1
14761: NEG
14762: PPUSH
14763: LD_INT 1
14765: PPUSH
14766: CALL_OW 12
14770: PLUS
14771: PPUSH
14772: CALL_OW 153
14776: GO 14810
14778: LD_INT 3
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14809
14786: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14787: LD_VAR 0 6
14791: PUSH
14792: LD_VAR 0 5
14796: ARRAY
14797: PPUSH
14798: LD_VAR 0 3
14802: PPUSH
14803: CALL_OW 115
14807: GO 14810
14809: POP
// end ; end ;
14810: GO 14626
14812: POP
14813: POP
14814: GO 14613
14816: POP
14817: POP
// end ;
14818: LD_VAR 0 2
14822: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
// r := 100 ;
14829: LD_ADDR_VAR 0 5
14833: PUSH
14834: LD_INT 100
14836: ST_TO_ADDR
// x := 0 ;
14837: LD_ADDR_VAR 0 6
14841: PUSH
14842: LD_INT 0
14844: ST_TO_ADDR
// while ( x < n ) do
14845: LD_VAR 0 6
14849: PUSH
14850: LD_VAR 0 2
14854: LESS
14855: IFFALSE 15142
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14857: LD_ADDR_VAR 0 4
14861: PUSH
14862: DOUBLE
14863: LD_INT 1
14865: DEC
14866: ST_TO_ADDR
14867: LD_VAR 0 1
14871: PPUSH
14872: LD_INT 0
14874: PPUSH
14875: CALL_OW 517
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PUSH
14884: FOR_TO
14885: IFFALSE 15138
// begin if r > 50 then
14887: LD_VAR 0 5
14891: PUSH
14892: LD_INT 50
14894: GREATER
14895: IFFALSE 15114
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 0
14904: PPUSH
14905: CALL_OW 517
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PUSH
14914: LD_VAR 0 4
14918: ARRAY
14919: PPUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: LD_INT 0
14927: PPUSH
14928: CALL_OW 517
14932: PUSH
14933: LD_INT 2
14935: ARRAY
14936: PUSH
14937: LD_VAR 0 4
14941: ARRAY
14942: PPUSH
14943: CALL_OW 458
14947: NOT
14948: IFFALSE 15098
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: LD_INT 0
14957: PPUSH
14958: CALL_OW 517
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PUSH
14967: LD_VAR 0 4
14971: ARRAY
14972: PPUSH
14973: LD_VAR 0 1
14977: PPUSH
14978: LD_INT 0
14980: PPUSH
14981: CALL_OW 517
14985: PUSH
14986: LD_INT 2
14988: ARRAY
14989: PUSH
14990: LD_VAR 0 4
14994: ARRAY
14995: PPUSH
14996: LD_INT 8
14998: PPUSH
14999: LD_INT 0
15001: PPUSH
15002: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15006: LD_ADDR_EXP 44
15010: PUSH
15011: LD_EXP 44
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: LD_INT 0
15026: PPUSH
15027: CALL_OW 517
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PUSH
15036: LD_VAR 0 4
15040: ARRAY
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_INT 0
15049: PPUSH
15050: CALL_OW 517
15054: PUSH
15055: LD_INT 2
15057: ARRAY
15058: PUSH
15059: LD_VAR 0 4
15063: ARRAY
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 2
15073: ST_TO_ADDR
// r := 0 ;
15074: LD_ADDR_VAR 0 5
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// x := x + 1 ;
15082: LD_ADDR_VAR 0 6
15086: PUSH
15087: LD_VAR 0 6
15091: PUSH
15092: LD_INT 1
15094: PLUS
15095: ST_TO_ADDR
// end else
15096: GO 15112
// r := r + 35 ;
15098: LD_ADDR_VAR 0 5
15102: PUSH
15103: LD_VAR 0 5
15107: PUSH
15108: LD_INT 35
15110: PLUS
15111: ST_TO_ADDR
// end else
15112: GO 15136
// r := r + rand ( 10 , 25 ) ;
15114: LD_ADDR_VAR 0 5
15118: PUSH
15119: LD_VAR 0 5
15123: PUSH
15124: LD_INT 10
15126: PPUSH
15127: LD_INT 25
15129: PPUSH
15130: CALL_OW 12
15134: PLUS
15135: ST_TO_ADDR
// end ;
15136: GO 14884
15138: POP
15139: POP
15140: GO 14845
// end ;
15142: LD_VAR 0 3
15146: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
// tmpTab = [ ] ;
15153: LD_ADDR_VAR 0 6
15157: PUSH
15158: EMPTY
15159: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15160: LD_INT 22
15162: PUSH
15163: LD_VAR 0 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 30
15174: PUSH
15175: LD_INT 32
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PUSH
15191: LD_INT 0
15193: GREATER
15194: IFFALSE 15277
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15196: LD_ADDR_VAR 0 4
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_VAR 0 1
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 30
15215: PUSH
15216: LD_INT 32
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL_OW 69
15231: PUSH
15232: FOR_IN
15233: IFFALSE 15275
// begin for j in UnitsInside ( i ) do
15235: LD_ADDR_VAR 0 5
15239: PUSH
15240: LD_VAR 0 4
15244: PPUSH
15245: CALL_OW 313
15249: PUSH
15250: FOR_IN
15251: IFFALSE 15271
// tmpTab = tmpTab ^ j ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: LD_VAR 0 6
15262: PUSH
15263: LD_VAR 0 5
15267: ADD
15268: ST_TO_ADDR
15269: GO 15250
15271: POP
15272: POP
// end ;
15273: GO 15232
15275: POP
15276: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15277: LD_VAR 0 6
15281: PPUSH
15282: LD_VAR 0 2
15286: PPUSH
15287: CALL_OW 250
15291: PPUSH
15292: LD_VAR 0 2
15296: PPUSH
15297: CALL_OW 251
15301: PPUSH
15302: CALL_OW 114
// end ;
15306: LD_VAR 0 3
15310: RET
// export function CreateNature ; var i , un ; begin
15311: LD_INT 0
15313: PPUSH
15314: PPUSH
15315: PPUSH
// uc_side := 0 ;
15316: LD_ADDR_OWVAR 20
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// uc_nation := 0 ;
15324: LD_ADDR_OWVAR 21
15328: PUSH
15329: LD_INT 0
15331: ST_TO_ADDR
// InitHc ;
15332: CALL_OW 19
// hc_class := class_fish ;
15336: LD_ADDR_OWVAR 28
15340: PUSH
15341: LD_INT 20
15343: ST_TO_ADDR
// for i = 1 to 6 do
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_INT 6
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15377
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15360: CALL_OW 44
15364: PPUSH
15365: LD_INT 23
15367: PPUSH
15368: LD_INT 0
15370: PPUSH
15371: CALL_OW 49
15375: GO 15357
15377: POP
15378: POP
// for i = 1 to Difficulty + 2 do
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: DOUBLE
15385: LD_INT 1
15387: DEC
15388: ST_TO_ADDR
15389: LD_OWVAR 67
15393: PUSH
15394: LD_INT 2
15396: PLUS
15397: PUSH
15398: FOR_TO
15399: IFFALSE 15508
// begin hc_sex = sex_male ;
15401: LD_ADDR_OWVAR 27
15405: PUSH
15406: LD_INT 1
15408: ST_TO_ADDR
// uc_side = 0 ;
15409: LD_ADDR_OWVAR 20
15413: PUSH
15414: LD_INT 0
15416: ST_TO_ADDR
// uc_nation = nation_nature ;
15417: LD_ADDR_OWVAR 21
15421: PUSH
15422: LD_INT 0
15424: ST_TO_ADDR
// hc_class = class_tiger ;
15425: LD_ADDR_OWVAR 28
15429: PUSH
15430: LD_INT 14
15432: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15433: LD_ADDR_OWVAR 31
15437: PUSH
15438: LD_EXP 37
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: LD_INT 0
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15458: LD_ADDR_OWVAR 35
15462: PUSH
15463: LD_INT 5
15465: NEG
15466: PPUSH
15467: LD_INT 5
15469: PPUSH
15470: CALL_OW 12
15474: PUSH
15475: LD_OWVAR 67
15479: MUL
15480: ST_TO_ADDR
// un = CreateHuman ;
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: CALL_OW 44
15490: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_INT 24
15498: PPUSH
15499: LD_INT 0
15501: PPUSH
15502: CALL_OW 49
// end ;
15506: GO 15398
15508: POP
15509: POP
// for i = 1 to rand ( 3 , 4 ) do
15510: LD_ADDR_VAR 0 2
15514: PUSH
15515: DOUBLE
15516: LD_INT 1
15518: DEC
15519: ST_TO_ADDR
15520: LD_INT 3
15522: PPUSH
15523: LD_INT 4
15525: PPUSH
15526: CALL_OW 12
15530: PUSH
15531: FOR_TO
15532: IFFALSE 15624
// begin hc_sex = sex_male ;
15534: LD_ADDR_OWVAR 27
15538: PUSH
15539: LD_INT 1
15541: ST_TO_ADDR
// uc_side = 0 ;
15542: LD_ADDR_OWVAR 20
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// uc_nation = nation_nature ;
15550: LD_ADDR_OWVAR 21
15554: PUSH
15555: LD_INT 0
15557: ST_TO_ADDR
// hc_class = 18 ;
15558: LD_ADDR_OWVAR 28
15562: PUSH
15563: LD_INT 18
15565: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15566: LD_ADDR_OWVAR 31
15570: PUSH
15571: LD_INT 0
15573: PUSH
15574: LD_INT 0
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: LD_INT 0
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: ST_TO_ADDR
// hc_agressivity = 0 ;
15589: LD_ADDR_OWVAR 35
15593: PUSH
15594: LD_INT 0
15596: ST_TO_ADDR
// un = CreateHuman ;
15597: LD_ADDR_VAR 0 3
15601: PUSH
15602: CALL_OW 44
15606: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_INT 24
15614: PPUSH
15615: LD_INT 0
15617: PPUSH
15618: CALL_OW 49
// end ;
15622: GO 15531
15624: POP
15625: POP
// for i = 1 to rand ( 1 , 3 ) do
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: DOUBLE
15632: LD_INT 1
15634: DEC
15635: ST_TO_ADDR
15636: LD_INT 1
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 12
15646: PUSH
15647: FOR_TO
15648: IFFALSE 15796
// begin hc_sex = sex_male ;
15650: LD_ADDR_OWVAR 27
15654: PUSH
15655: LD_INT 1
15657: ST_TO_ADDR
// uc_side = 0 ;
15658: LD_ADDR_OWVAR 20
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// uc_nation = nation_nature ;
15666: LD_ADDR_OWVAR 21
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// hc_class = class_apeman ;
15674: LD_ADDR_OWVAR 28
15678: PUSH
15679: LD_INT 12
15681: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15682: LD_ADDR_OWVAR 31
15686: PUSH
15687: LD_EXP 36
15691: PPUSH
15692: LD_EXP 37
15696: PPUSH
15697: CALL_OW 12
15701: PUSH
15702: LD_EXP 36
15706: PPUSH
15707: LD_EXP 37
15711: PPUSH
15712: CALL_OW 12
15716: PUSH
15717: LD_EXP 36
15721: PPUSH
15722: LD_EXP 37
15726: PPUSH
15727: CALL_OW 12
15731: PUSH
15732: LD_EXP 36
15736: PPUSH
15737: LD_EXP 37
15741: PPUSH
15742: CALL_OW 12
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15753: LD_ADDR_OWVAR 35
15757: PUSH
15758: LD_INT 1
15760: PPUSH
15761: LD_INT 20
15763: PPUSH
15764: CALL_OW 12
15768: ST_TO_ADDR
// un = CreateHuman ;
15769: LD_ADDR_VAR 0 3
15773: PUSH
15774: CALL_OW 44
15778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15779: LD_VAR 0 3
15783: PPUSH
15784: LD_INT 24
15786: PPUSH
15787: LD_INT 0
15789: PPUSH
15790: CALL_OW 49
// end ;
15794: GO 15647
15796: POP
15797: POP
// end ; end_of_file
15798: LD_VAR 0 1
15802: RET
// on UnitDestroyed ( unit ) do var i ;
15803: LD_INT 0
15805: PPUSH
// begin if unit in russianTanks then
15806: LD_VAR 0 1
15810: PUSH
15811: LD_EXP 39
15815: IN
15816: IFFALSE 15834
// russianTanks := russianTanks diff unit ;
15818: LD_ADDR_EXP 39
15822: PUSH
15823: LD_EXP 39
15827: PUSH
15828: LD_VAR 0 1
15832: DIFF
15833: ST_TO_ADDR
// if unit in russianTimeLapsers then
15834: LD_VAR 0 1
15838: PUSH
15839: LD_EXP 40
15843: IN
15844: IFFALSE 15862
// russianTimeLapsers := russianTimeLapsers diff unit ;
15846: LD_ADDR_EXP 40
15850: PUSH
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 1
15860: DIFF
15861: ST_TO_ADDR
// if unit in RuScientists then
15862: LD_VAR 0 1
15866: PUSH
15867: LD_EXP 34
15871: IN
15872: IFFALSE 15904
// begin RuScientists = RuScientists diff unit ;
15874: LD_ADDR_EXP 34
15878: PUSH
15879: LD_EXP 34
15883: PUSH
15884: LD_VAR 0 1
15888: DIFF
15889: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15890: LD_ADDR_EXP 35
15894: PUSH
15895: LD_EXP 35
15899: PUSH
15900: LD_INT 1
15902: PLUS
15903: ST_TO_ADDR
// end ; end ;
15904: PPOPN 2
15906: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15907: LD_VAR 0 3
15911: PPUSH
15912: CALL_OW 264
15916: PUSH
15917: LD_INT 9
15919: EQUAL
15920: IFFALSE 15936
// laserCounterDestroy := laserCounterDestroy + 1 ;
15922: LD_ADDR_EXP 50
15926: PUSH
15927: LD_EXP 50
15931: PUSH
15932: LD_INT 1
15934: PLUS
15935: ST_TO_ADDR
// end ;
15936: PPOPN 3
15938: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15939: LD_VAR 0 1
15943: PUSH
15944: LD_INT 10
15946: EQUAL
15947: PUSH
15948: LD_VAR 0 2
15952: PPUSH
15953: CALL_OW 255
15957: PUSH
15958: LD_INT 1
15960: EQUAL
15961: AND
15962: PUSH
15963: LD_EXP 47
15967: PUSH
15968: LD_INT 0
15970: EQUAL
15971: AND
15972: IFFALSE 16084
// begin eventVar1 = 1 ;
15974: LD_ADDR_EXP 47
15978: PUSH
15979: LD_INT 1
15981: ST_TO_ADDR
// teleportExplored = 1 ;
15982: LD_ADDR_EXP 33
15986: PUSH
15987: LD_INT 1
15989: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15990: LD_STRING M2a
15992: PPUSH
15993: CALL_OW 337
// wait ( 0 0$2 ) ;
15997: LD_INT 70
15999: PPUSH
16000: CALL_OW 67
// DialogueOn ;
16004: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16008: LD_INT 22
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 21
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PPUSH
16032: CALL_OW 69
16036: PPUSH
16037: LD_STRING DT3a-Sol1-1
16039: PPUSH
16040: LD_STRING DT3a-FSol1-1
16042: PPUSH
16043: CALL 12340 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16047: LD_EXP 1
16051: PPUSH
16052: LD_STRING DT3a-JMM-1
16054: PPUSH
16055: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16068: LD_EXP 1
16072: PPUSH
16073: LD_STRING DT3a-JMM-1a
16075: PPUSH
16076: CALL_OW 88
// DialogueOff ;
16080: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 10
16091: EQUAL
16092: PUSH
16093: LD_VAR 0 2
16097: PPUSH
16098: CALL_OW 247
16102: PUSH
16103: LD_INT 2
16105: EQUAL
16106: AND
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 255
16117: PUSH
16118: LD_INT 3
16120: EQUAL
16121: AND
16122: PUSH
16123: LD_EXP 28
16127: PUSH
16128: LD_INT 0
16130: EQUAL
16131: AND
16132: IFFALSE 16149
// begin wait ( 0 0$3 ) ;
16134: LD_INT 105
16136: PPUSH
16137: CALL_OW 67
// vehicleTeleported = 1 ;
16141: LD_ADDR_EXP 28
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16149: LD_VAR 0 1
16153: PUSH
16154: LD_INT 10
16156: EQUAL
16157: PUSH
16158: LD_VAR 0 2
16162: PPUSH
16163: CALL_OW 247
16167: PUSH
16168: LD_INT 2
16170: EQUAL
16171: AND
16172: PUSH
16173: LD_VAR 0 2
16177: PPUSH
16178: CALL_OW 255
16182: PUSH
16183: LD_INT 3
16185: EQUAL
16186: AND
16187: PUSH
16188: LD_EXP 28
16192: PUSH
16193: LD_INT 2
16195: EQUAL
16196: AND
16197: IFFALSE 16214
// begin wait ( 0 0$3 ) ;
16199: LD_INT 105
16201: PPUSH
16202: CALL_OW 67
// vehicleTeleported = 3 ;
16206: LD_ADDR_EXP 28
16210: PUSH
16211: LD_INT 3
16213: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16214: LD_VAR 0 1
16218: PUSH
16219: LD_INT 10
16221: EQUAL
16222: PUSH
16223: LD_VAR 0 2
16227: PPUSH
16228: CALL_OW 247
16232: PUSH
16233: LD_INT 2
16235: EQUAL
16236: AND
16237: PUSH
16238: LD_VAR 0 2
16242: PPUSH
16243: CALL_OW 255
16247: PUSH
16248: LD_INT 3
16250: EQUAL
16251: AND
16252: IFFALSE 16268
// tpCounter = tpCounter + 1 ;
16254: LD_ADDR_EXP 29
16258: PUSH
16259: LD_EXP 29
16263: PUSH
16264: LD_INT 1
16266: PLUS
16267: ST_TO_ADDR
// end ;
16268: PPOPN 2
16270: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 264
16280: PUSH
16281: LD_INT 7
16283: EQUAL
16284: IFFALSE 16294
// rocketBuilded := true ;
16286: LD_ADDR_EXP 51
16290: PUSH
16291: LD_INT 1
16293: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16294: LD_VAR 0 2
16298: PUSH
16299: LD_INT 21
16301: EQUAL
16302: PUSH
16303: LD_VAR 0 2
16307: PUSH
16308: LD_INT 112
16310: EQUAL
16311: OR
16312: IFFALSE 16433
// if GetSide ( vehicle ) = 3 then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 255
16323: PUSH
16324: LD_INT 3
16326: EQUAL
16327: IFFALSE 16433
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 264
16338: PUSH
16339: LD_INT 46
16341: EQUAL
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 264
16352: PUSH
16353: LD_INT 45
16355: EQUAL
16356: OR
16357: PUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 264
16367: PUSH
16368: LD_INT 44
16370: EQUAL
16371: OR
16372: IFFALSE 16390
// begin russianTanks = russianTanks ^ vehicle ;
16374: LD_ADDR_EXP 39
16378: PUSH
16379: LD_EXP 39
16383: PUSH
16384: LD_VAR 0 1
16388: ADD
16389: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 264
16399: PUSH
16400: LD_INT 49
16402: EQUAL
16403: IFFALSE 16433
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16405: LD_ADDR_EXP 40
16409: PUSH
16410: LD_EXP 40
16414: PUSH
16415: LD_VAR 0 1
16419: ADD
16420: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 137
16428: PPUSH
16429: CALL_OW 120
// end ; end ; end ;
16433: PPOPN 2
16435: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16436: LD_INT 0
16438: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL_OW 255
16448: PUSH
16449: LD_INT 3
16451: EQUAL
16452: PUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: CALL_OW 257
16462: PUSH
16463: LD_INT 3
16465: EQUAL
16466: AND
16467: PUSH
16468: LD_INT 21
16470: PPUSH
16471: CALL_OW 255
16475: PUSH
16476: LD_INT 3
16478: EQUAL
16479: AND
16480: PUSH
16481: LD_INT 21
16483: PPUSH
16484: CALL_OW 302
16488: AND
16489: IFFALSE 16503
// ComEnterUnit ( human , ru_fact ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_INT 21
16498: PPUSH
16499: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16503: LD_VAR 0 2
16507: PPUSH
16508: CALL_OW 257
16512: PUSH
16513: LD_INT 4
16515: EQUAL
16516: PUSH
16517: LD_VAR 0 2
16521: PPUSH
16522: CALL_OW 255
16526: PUSH
16527: LD_INT 3
16529: EQUAL
16530: AND
16531: PUSH
16532: LD_EXP 41
16536: PUSH
16537: LD_INT 0
16539: EQUAL
16540: AND
16541: IFFALSE 16603
// for i in RuScientists do
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_EXP 34
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16601
// if i = human then
16556: LD_VAR 0 3
16560: PUSH
16561: LD_VAR 0 2
16565: EQUAL
16566: IFFALSE 16599
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16568: LD_VAR 0 3
16572: PPUSH
16573: LD_INT 13
16575: PUSH
16576: LD_INT 14
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 1
16585: PPUSH
16586: LD_INT 2
16588: PPUSH
16589: CALL_OW 12
16593: ARRAY
16594: PPUSH
16595: CALL_OW 113
16599: GO 16553
16601: POP
16602: POP
// end ;
16603: PPOPN 3
16605: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16606: LD_INT 0
16608: PPUSH
16609: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 255
16619: PUSH
16620: LD_INT 3
16622: EQUAL
16623: PUSH
16624: LD_VAR 0 2
16628: PPUSH
16629: CALL_OW 257
16633: PUSH
16634: LD_INT 4
16636: EQUAL
16637: AND
16638: IFFALSE 16780
// for i in RuScientists do
16640: LD_ADDR_VAR 0 3
16644: PUSH
16645: LD_EXP 34
16649: PUSH
16650: FOR_IN
16651: IFFALSE 16778
// if i = human then
16653: LD_VAR 0 3
16657: PUSH
16658: LD_VAR 0 2
16662: EQUAL
16663: IFFALSE 16776
// if IsOk ( rutp ) then
16665: LD_INT 137
16667: PPUSH
16668: CALL_OW 302
16672: IFFALSE 16745
// begin rnd = rand ( 1 , 2 ) ;
16674: LD_ADDR_VAR 0 4
16678: PUSH
16679: LD_INT 1
16681: PPUSH
16682: LD_INT 2
16684: PPUSH
16685: CALL_OW 12
16689: ST_TO_ADDR
// if rnd = 1 then
16690: LD_VAR 0 4
16694: PUSH
16695: LD_INT 1
16697: EQUAL
16698: IFFALSE 16712
// ComEnterUnit ( vehicle , rutp ) ;
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_INT 137
16707: PPUSH
16708: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_INT 13
16719: PUSH
16720: LD_INT 14
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 1
16729: PPUSH
16730: LD_INT 2
16732: PPUSH
16733: CALL_OW 12
16737: ARRAY
16738: PPUSH
16739: CALL_OW 173
// end else
16743: GO 16776
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 13
16752: PUSH
16753: LD_INT 14
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PPUSH
16763: LD_INT 2
16765: PPUSH
16766: CALL_OW 12
16770: ARRAY
16771: PPUSH
16772: CALL_OW 113
// end ;
16776: GO 16650
16778: POP
16779: POP
// end ;
16780: PPOPN 4
16782: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL 34076 0 1
// end ; end_of_file
16792: PPOPN 1
16794: END
// every 0 0$1 trigger ruAI = 1 do
16795: LD_EXP 41
16799: PUSH
16800: LD_INT 1
16802: EQUAL
16803: IFFALSE 16915
16805: GO 16807
16807: DISABLE
// begin enable ;
16808: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16809: LD_INT 3
16811: PPUSH
16812: LD_INT 6
16814: PPUSH
16815: LD_INT 9
16817: PPUSH
16818: LD_EXP 38
16822: PPUSH
16823: CALL 13197 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16827: LD_INT 3
16829: PPUSH
16830: LD_INT 4
16832: PPUSH
16833: LD_INT 10
16835: PPUSH
16836: LD_EXP 38
16840: PPUSH
16841: CALL 13197 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16845: LD_INT 3
16847: PPUSH
16848: LD_INT 9
16850: PPUSH
16851: CALL 14168 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16855: LD_INT 3
16857: PPUSH
16858: LD_INT 10
16860: PPUSH
16861: CALL 14168 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16865: LD_INT 3
16867: PPUSH
16868: LD_INT 16
16870: PPUSH
16871: LD_INT 9
16873: PPUSH
16874: LD_INT 91
16876: PPUSH
16877: CALL 13588 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16881: LD_INT 3
16883: PPUSH
16884: LD_INT 17
16886: PPUSH
16887: LD_INT 10
16889: PPUSH
16890: LD_INT 47
16892: PUSH
16893: LD_INT 129
16895: PUSH
16896: LD_INT 135
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL 13588 0 4
// IntBazooka ( 3 ) ;
16908: LD_INT 3
16910: PPUSH
16911: CALL 14495 0 1
// end ;
16915: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 , 5 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16916: LD_EXP 39
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: LD_INT 4
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_OWVAR 67
16943: ARRAY
16944: GREATEREQUAL
16945: IFFALSE 17445
16947: GO 16949
16949: DISABLE
16950: LD_INT 0
16952: PPUSH
16953: PPUSH
16954: PPUSH
16955: PPUSH
// begin enable ;
16956: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16957: LD_ADDR_VAR 0 2
16961: PUSH
16962: LD_EXP 39
16966: PUSH
16967: LD_EXP 40
16971: UNION
16972: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16973: LD_ADDR_EXP 39
16977: PUSH
16978: LD_EXP 39
16982: PUSH
16983: LD_VAR 0 2
16987: DIFF
16988: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16989: LD_ADDR_EXP 40
16993: PUSH
16994: LD_EXP 40
16998: PUSH
16999: LD_VAR 0 2
17003: DIFF
17004: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17005: LD_INT 10
17007: PPUSH
17008: CALL_OW 302
17012: IFFALSE 17095
// begin for j in tmp do
17014: LD_ADDR_VAR 0 1
17018: PUSH
17019: LD_VAR 0 2
17023: PUSH
17024: FOR_IN
17025: IFFALSE 17068
// if attackTactic < 2 then
17027: LD_EXP 43
17031: PUSH
17032: LD_INT 2
17034: LESS
17035: IFFALSE 17051
// ComEnterUnit ( j , ruteleprt ) else
17037: LD_VAR 0 1
17041: PPUSH
17042: LD_INT 10
17044: PPUSH
17045: CALL_OW 120
17049: GO 17066
// ComMoveXY ( j , 88 , 69 ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 88
17058: PPUSH
17059: LD_INT 69
17061: PPUSH
17062: CALL_OW 111
17066: GO 17024
17068: POP
17069: POP
// repeat wait ( 0 0$1 ) ;
17070: LD_INT 35
17072: PPUSH
17073: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17077: LD_VAR 0 2
17081: PPUSH
17082: LD_INT 60
17084: PUSH
17085: EMPTY
17086: LIST
17087: PPUSH
17088: CALL_OW 72
17092: NOT
17093: IFFALSE 17070
// end ; repeat wait ( 0 0$1 ) ;
17095: LD_INT 35
17097: PPUSH
17098: CALL_OW 67
// for j in tmp do
17102: LD_ADDR_VAR 0 1
17106: PUSH
17107: LD_VAR 0 2
17111: PUSH
17112: FOR_IN
17113: IFFALSE 17436
// begin if IsDead ( j ) then
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 301
17124: IFFALSE 17142
// tmp := tmp diff j ;
17126: LD_ADDR_VAR 0 2
17130: PUSH
17131: LD_VAR 0 2
17135: PUSH
17136: LD_VAR 0 1
17140: DIFF
17141: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: LD_INT 81
17149: PUSH
17150: LD_INT 3
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: PPUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 74
17171: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17172: LD_ADDR_VAR 0 4
17176: PUSH
17177: LD_INT 81
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: PPUSH
17204: CALL_OW 69
17208: PPUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 74
17218: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 264
17228: PUSH
17229: LD_INT 49
17231: EQUAL
17232: IFFALSE 17368
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
17234: LD_VAR 0 2
17238: PPUSH
17239: LD_INT 3
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 49
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 72
17260: PUSH
17261: LD_INT 1
17263: GREATER
17264: PUSH
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_INT 3
17272: PUSH
17273: LD_INT 34
17275: PUSH
17276: LD_INT 49
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PPUSH
17287: CALL_OW 72
17291: AND
17292: IFFALSE 17342
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_VAR 0 2
17303: PPUSH
17304: LD_INT 3
17306: PUSH
17307: LD_INT 34
17309: PUSH
17310: LD_INT 49
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 72
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 74
17335: PPUSH
17336: CALL_OW 112
17340: GO 17366
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17342: LD_VAR 0 1
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 74
17361: PPUSH
17362: CALL_OW 112
// end else
17366: GO 17434
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_VAR 0 4
17377: PPUSH
17378: CALL_OW 296
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: CALL_OW 296
17397: PUSH
17398: LD_INT 2
17400: PLUS
17401: LESS
17402: IFFALSE 17420
// ComAttackUnit ( j , target2 ) else
17404: LD_VAR 0 1
17408: PPUSH
17409: LD_VAR 0 4
17413: PPUSH
17414: CALL_OW 115
17418: GO 17434
// ComAttackUnit ( j , target1 ) ;
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: CALL_OW 115
// end ; end ;
17434: GO 17112
17436: POP
17437: POP
// until not tmp ;
17438: LD_VAR 0 2
17442: NOT
17443: IFFALSE 17095
// end ;
17445: PPOPN 4
17447: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17448: LD_INT 4
17450: PPUSH
17451: CALL_OW 303
17455: IFFALSE 17470
17457: GO 17459
17459: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17460: LD_INT 3
17462: PPUSH
17463: LD_INT 4
17465: PPUSH
17466: CALL 15147 0 2
17470: END
// every 0 0$1 do
17471: GO 17473
17473: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17474: LD_INT 3
17476: PPUSH
17477: LD_INT 91
17479: PPUSH
17480: LD_INT 3
17482: PPUSH
17483: CALL 12956 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17487: LD_INT 3
17489: PPUSH
17490: LD_INT 47
17492: PPUSH
17493: LD_INT 3
17495: PPUSH
17496: CALL 12956 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17500: LD_INT 3
17502: PPUSH
17503: LD_INT 129
17505: PPUSH
17506: LD_INT 3
17508: PPUSH
17509: CALL 12956 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17513: LD_INT 3
17515: PPUSH
17516: LD_INT 3
17518: PPUSH
17519: LD_INT 3
17521: PPUSH
17522: CALL 12956 0 3
// end ;
17526: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17527: LD_INT 22
17529: PUSH
17530: LD_INT 1
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 21
17539: PUSH
17540: LD_INT 3
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 69
17555: IFFALSE 17624
17557: GO 17559
17559: DISABLE
// begin wait ( 0 0$40 ) ;
17560: LD_INT 1400
17562: PPUSH
17563: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17567: LD_INT 3
17569: PPUSH
17570: LD_INT 21
17572: PPUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 4
17578: PUSH
17579: LD_INT 4
17581: PUSH
17582: LD_INT 5
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: PUSH
17591: LD_OWVAR 67
17595: ARRAY
17596: PPUSH
17597: LD_INT 46
17599: PUSH
17600: LD_INT 45
17602: PUSH
17603: LD_INT 44
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PPUSH
17611: LD_INT 3
17613: PPUSH
17614: LD_INT 3
17616: PPUSH
17617: LD_INT 24
17619: PPUSH
17620: CALL 14348 0 7
// end ;
17624: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17625: LD_EXP 27
17629: PUSH
17630: LD_INT 2
17632: EQUAL
17633: PUSH
17634: LD_INT 21
17636: PPUSH
17637: CALL_OW 255
17641: PUSH
17642: LD_INT 3
17644: EQUAL
17645: AND
17646: PUSH
17647: LD_INT 112
17649: PPUSH
17650: CALL_OW 255
17654: PUSH
17655: LD_INT 3
17657: EQUAL
17658: AND
17659: PUSH
17660: LD_INT 21
17662: PPUSH
17663: CALL_OW 302
17667: AND
17668: PUSH
17669: LD_INT 112
17671: PPUSH
17672: CALL_OW 302
17676: AND
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 21
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 50
17700: PUSH
17701: EMPTY
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 58
17709: PUSH
17710: EMPTY
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: PUSH
17728: LD_INT 18
17730: PPUSH
17731: LD_INT 22
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 70
17759: PUSH
17760: LD_INT 0
17762: EQUAL
17763: DIFF
17764: AND
17765: IFFALSE 17891
17767: GO 17769
17769: DISABLE
// begin enable ;
17770: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17771: LD_INT 3
17773: PPUSH
17774: LD_INT 21
17776: PPUSH
17777: LD_INT 3
17779: PUSH
17780: LD_INT 4
17782: PUSH
17783: LD_INT 4
17785: PUSH
17786: LD_INT 5
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: PUSH
17795: LD_OWVAR 67
17799: ARRAY
17800: PPUSH
17801: LD_INT 46
17803: PUSH
17804: LD_INT 45
17806: PUSH
17807: LD_INT 44
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: PPUSH
17815: LD_INT 3
17817: PPUSH
17818: LD_INT 3
17820: PPUSH
17821: LD_INT 24
17823: PPUSH
17824: CALL 14348 0 7
// if russianTimeLapsers = 0 then
17828: LD_EXP 40
17832: PUSH
17833: LD_INT 0
17835: EQUAL
17836: IFFALSE 17891
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17838: LD_INT 3
17840: PPUSH
17841: LD_INT 112
17843: PPUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: PUSH
17862: LD_OWVAR 67
17866: ARRAY
17867: PPUSH
17868: LD_INT 49
17870: PUSH
17871: LD_INT 49
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 3
17883: PPUSH
17884: LD_INT 24
17886: PPUSH
17887: CALL 14348 0 7
// end ;
17891: END
// every 0 0$1 trigger arabianMines do var i ;
17892: LD_EXP 44
17896: IFFALSE 18017
17898: GO 17900
17900: DISABLE
17901: LD_INT 0
17903: PPUSH
// begin enable ;
17904: ENABLE
// for i in arabianMines do
17905: LD_ADDR_VAR 0 1
17909: PUSH
17910: LD_EXP 44
17914: PUSH
17915: FOR_IN
17916: IFFALSE 18015
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17918: LD_INT 22
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 92
17930: PUSH
17931: LD_VAR 0 1
17935: PUSH
17936: LD_INT 1
17938: ARRAY
17939: PUSH
17940: LD_VAR 0 1
17944: PUSH
17945: LD_INT 2
17947: ARRAY
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PPUSH
17962: CALL_OW 69
17966: IFFALSE 18013
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17968: LD_VAR 0 1
17972: PUSH
17973: LD_INT 1
17975: ARRAY
17976: PPUSH
17977: LD_VAR 0 1
17981: PUSH
17982: LD_INT 2
17984: ARRAY
17985: PPUSH
17986: LD_INT 5
17988: PPUSH
17989: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17993: LD_ADDR_EXP 44
17997: PUSH
17998: LD_EXP 44
18002: PPUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 3
18012: ST_TO_ADDR
// end ; end ;
18013: GO 17915
18015: POP
18016: POP
// end ;
18017: PPOPN 1
18019: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 , 8 ] [ Difficulty ] do
18020: LD_EXP 28
18024: PUSH
18025: LD_INT 4
18027: EQUAL
18028: PUSH
18029: LD_EXP 29
18033: PUSH
18034: LD_INT 6
18036: PUSH
18037: LD_INT 8
18039: PUSH
18040: LD_INT 8
18042: PUSH
18043: LD_INT 8
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: LD_OWVAR 67
18056: ARRAY
18057: EQUAL
18058: AND
18059: IFFALSE 18077
18061: GO 18063
18063: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18064: LD_INT 10
18066: PPUSH
18067: LD_INT 47
18069: PPUSH
18070: LD_INT 82
18072: PPUSH
18073: CALL_OW 243
18077: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18078: LD_EXP 28
18082: PUSH
18083: LD_INT 4
18085: EQUAL
18086: IFFALSE 18108
18088: GO 18090
18090: DISABLE
// begin enable ;
18091: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18092: LD_ADDR_EXP 43
18096: PUSH
18097: LD_INT 1
18099: PPUSH
18100: LD_INT 2
18102: PPUSH
18103: CALL_OW 12
18107: ST_TO_ADDR
// end ; end_of_file
18108: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18109: LD_INT 3
18111: PPUSH
18112: CALL_OW 301
18116: IFFALSE 18305
18118: GO 18120
18120: DISABLE
// begin if sciCounter = 0 then
18121: LD_EXP 35
18125: PUSH
18126: LD_INT 0
18128: EQUAL
18129: IFFALSE 18157
// begin Say ( JMM , D7a-JMM-1 ) ;
18131: LD_EXP 1
18135: PPUSH
18136: LD_STRING D7a-JMM-1
18138: PPUSH
18139: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18143: LD_EXP 22
18147: PPUSH
18148: LD_STRING D7a-Pow-1
18150: PPUSH
18151: CALL_OW 94
// end else
18155: GO 18301
// if sciCounter < 6 then
18157: LD_EXP 35
18161: PUSH
18162: LD_INT 6
18164: LESS
18165: IFFALSE 18193
// begin Say ( JMM , D7b-JMM-1 ) ;
18167: LD_EXP 1
18171: PPUSH
18172: LD_STRING D7b-JMM-1
18174: PPUSH
18175: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18179: LD_EXP 22
18183: PPUSH
18184: LD_STRING D7b-Pow-1
18186: PPUSH
18187: CALL_OW 94
// end else
18191: GO 18301
// begin Say ( JMM , D7c-JMM-1 ) ;
18193: LD_EXP 1
18197: PPUSH
18198: LD_STRING D7c-JMM-1
18200: PPUSH
18201: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18205: LD_EXP 22
18209: PPUSH
18210: LD_STRING D7c-Pow-1
18212: PPUSH
18213: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18217: LD_EXP 1
18221: PPUSH
18222: LD_STRING D7d-JMM-1
18224: PPUSH
18225: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18229: LD_EXP 22
18233: PPUSH
18234: LD_STRING D7d-Pow-1
18236: PPUSH
18237: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18241: LD_EXP 1
18245: PPUSH
18246: LD_STRING D7d-JMM-2
18248: PPUSH
18249: CALL_OW 88
// if askSiberite = 1 then
18253: LD_EXP 32
18257: PUSH
18258: LD_INT 1
18260: EQUAL
18261: IFFALSE 18277
// Say ( JMM , D7d-JMM-2a ) else
18263: LD_EXP 1
18267: PPUSH
18268: LD_STRING D7d-JMM-2a
18270: PPUSH
18271: CALL_OW 88
18275: GO 18289
// SayRadio ( Powell , D7d-Pow-2 ) ;
18277: LD_EXP 22
18281: PPUSH
18282: LD_STRING D7d-Pow-2
18284: PPUSH
18285: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18289: LD_EXP 22
18293: PPUSH
18294: LD_STRING D7d-Pow-2a
18296: PPUSH
18297: CALL_OW 94
// end ; FinishMission ;
18301: CALL 18306 0 0
// end ;
18305: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18306: LD_INT 0
18308: PPUSH
18309: PPUSH
18310: PPUSH
18311: PPUSH
// m1 := false ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// m2 := false ;
18320: LD_ADDR_VAR 0 3
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// m3 := false ;
18328: LD_ADDR_VAR 0 4
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// if not westPathUsed then
18336: LD_EXP 49
18340: NOT
18341: IFFALSE 18350
// SetAchievement ( ACH_PATH ) ;
18343: LD_STRING ACH_PATH
18345: PPUSH
18346: CALL_OW 543
// if not rocketBuilded then
18350: LD_EXP 51
18354: NOT
18355: IFFALSE 18371
// begin wait ( 3 ) ;
18357: LD_INT 3
18359: PPUSH
18360: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18364: LD_STRING ACH_ROCKET
18366: PPUSH
18367: CALL_OW 543
// end ; if tick <= 40 40$00 then
18371: LD_OWVAR 1
18375: PUSH
18376: LD_INT 84000
18378: LESSEQUAL
18379: IFFALSE 18395
// begin wait ( 3 ) ;
18381: LD_INT 3
18383: PPUSH
18384: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18388: LD_STRING ACH_ASPEED_12
18390: PPUSH
18391: CALL_OW 543
// end ; if teleportExplored = 1 then
18395: LD_EXP 33
18399: PUSH
18400: LD_INT 1
18402: EQUAL
18403: IFFALSE 18425
// begin m1 := true ;
18405: LD_ADDR_VAR 0 2
18409: PUSH
18410: LD_INT 1
18412: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18413: LD_STRING Teleport
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL_OW 101
// end else
18423: GO 18436
// AddMedal ( Teleport , - 1 ) ;
18425: LD_STRING Teleport
18427: PPUSH
18428: LD_INT 1
18430: NEG
18431: PPUSH
18432: CALL_OW 101
// if sciCounter > 2 then
18436: LD_EXP 35
18440: PUSH
18441: LD_INT 2
18443: GREATER
18444: IFFALSE 18466
// begin m2 := true ;
18446: LD_ADDR_VAR 0 3
18450: PUSH
18451: LD_INT 1
18453: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18454: LD_STRING Materials
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 101
// end else
18464: GO 18477
// AddMedal ( Materials , - 1 ) ;
18466: LD_STRING Materials
18468: PPUSH
18469: LD_INT 1
18471: NEG
18472: PPUSH
18473: CALL_OW 101
// if sciCounter >= 6 then
18477: LD_EXP 35
18481: PUSH
18482: LD_INT 6
18484: GREATEREQUAL
18485: IFFALSE 18517
// begin m3 := true ;
18487: LD_ADDR_VAR 0 4
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18495: LD_STRING Scientists
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18505: LD_INT 1
18507: PPUSH
18508: LD_STRING 12_SciDed_1
18510: PPUSH
18511: CALL_OW 39
// end else
18515: GO 18538
// begin AddMedal ( Scientists , - 1 ) ;
18517: LD_STRING Scientists
18519: PPUSH
18520: LD_INT 1
18522: NEG
18523: PPUSH
18524: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18528: LD_INT 0
18530: PPUSH
18531: LD_STRING 12_SciDed_1
18533: PPUSH
18534: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18538: LD_EXP 31
18542: PPUSH
18543: LD_STRING 12_MainDepositFake_1
18545: PPUSH
18546: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18550: LD_VAR 0 2
18554: PUSH
18555: LD_VAR 0 3
18559: AND
18560: PUSH
18561: LD_VAR 0 4
18565: AND
18566: PUSH
18567: LD_OWVAR 67
18571: PUSH
18572: LD_INT 3
18574: GREATEREQUAL
18575: AND
18576: IFFALSE 18588
// SetAchievementEX ( ACH_AMER , 12 ) ;
18578: LD_STRING ACH_AMER
18580: PPUSH
18581: LD_INT 12
18583: PPUSH
18584: CALL_OW 564
// GiveMedals ( MAIN ) ;
18588: LD_STRING MAIN
18590: PPUSH
18591: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18595: LD_INT 22
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 25
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 25
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 25
18650: PUSH
18651: LD_INT 4
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 5
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 8
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: PPUSH
18692: CALL_OW 69
18696: PPUSH
18697: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18701: LD_EXP 1
18705: PPUSH
18706: LD_EXP 46
18710: PUSH
18711: LD_STRING JMM
18713: STR
18714: PPUSH
18715: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18719: LD_EXP 7
18723: PPUSH
18724: LD_EXP 46
18728: PUSH
18729: LD_STRING Brown
18731: STR
18732: PPUSH
18733: CALL 12300 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18737: LD_EXP 3
18741: PPUSH
18742: LD_EXP 46
18746: PUSH
18747: LD_STRING Donaldson
18749: STR
18750: PPUSH
18751: CALL 12300 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18755: LD_EXP 4
18759: PPUSH
18760: LD_EXP 46
18764: PUSH
18765: LD_STRING Bobby
18767: STR
18768: PPUSH
18769: CALL 12300 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18773: LD_EXP 5
18777: PPUSH
18778: LD_EXP 46
18782: PUSH
18783: LD_STRING Cyrus
18785: STR
18786: PPUSH
18787: CALL 12300 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18791: LD_EXP 2
18795: PPUSH
18796: LD_EXP 46
18800: PUSH
18801: LD_STRING Lisa
18803: STR
18804: PPUSH
18805: CALL 12300 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18809: LD_EXP 12
18813: PPUSH
18814: LD_EXP 46
18818: PUSH
18819: LD_STRING Frank
18821: STR
18822: PPUSH
18823: CALL 12300 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18827: LD_EXP 13
18831: PPUSH
18832: LD_EXP 46
18836: PUSH
18837: LD_STRING Kikuchi
18839: STR
18840: PPUSH
18841: CALL 12300 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18845: LD_EXP 9
18849: PPUSH
18850: LD_EXP 46
18854: PUSH
18855: LD_STRING Houten
18857: STR
18858: PPUSH
18859: CALL 12300 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18863: LD_EXP 11
18867: PPUSH
18868: LD_EXP 46
18872: PUSH
18873: LD_STRING Gary
18875: STR
18876: PPUSH
18877: CALL 12300 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18881: LD_EXP 10
18885: PPUSH
18886: LD_EXP 46
18890: PUSH
18891: LD_STRING Cornell
18893: STR
18894: PPUSH
18895: CALL 12300 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18899: LD_EXP 6
18903: PPUSH
18904: LD_EXP 46
18908: PUSH
18909: LD_STRING Denis
18911: STR
18912: PPUSH
18913: CALL 12300 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18917: LD_EXP 8
18921: PPUSH
18922: LD_EXP 46
18926: PUSH
18927: LD_STRING Gladstone
18929: STR
18930: PPUSH
18931: CALL 12300 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18935: LD_INT 22
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 23
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 21
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 25
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 25
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 25
19000: PUSH
19001: LD_INT 4
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 25
19010: PUSH
19011: LD_INT 5
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 25
19020: PUSH
19021: LD_INT 8
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: PUSH
19048: LD_EXP 1
19052: PUSH
19053: LD_EXP 7
19057: PUSH
19058: LD_EXP 3
19062: PUSH
19063: LD_EXP 4
19067: PUSH
19068: LD_EXP 5
19072: PUSH
19073: LD_EXP 2
19077: PUSH
19078: LD_EXP 12
19082: PUSH
19083: LD_EXP 8
19087: PUSH
19088: LD_EXP 13
19092: PUSH
19093: LD_EXP 6
19097: PUSH
19098: LD_EXP 9
19102: PUSH
19103: LD_EXP 11
19107: PUSH
19108: LD_EXP 10
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: DIFF
19128: PPUSH
19129: LD_STRING 12_other_survivors
19131: PPUSH
19132: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19136: LD_INT 22
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 23
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: LD_INT 25
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 25
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 25
19201: PUSH
19202: LD_INT 4
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 25
19211: PUSH
19212: LD_INT 5
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 25
19221: PUSH
19222: LD_INT 8
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: PPUSH
19244: CALL_OW 69
19248: PPUSH
19249: LD_STRING 12_kurt_squad
19251: PPUSH
19252: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19256: LD_EXP 14
19260: PPUSH
19261: LD_STRING 12_others
19263: PPUSH
19264: CALL_OW 38
// YouWin ;
19268: CALL_OW 103
// end ; end_of_file
19272: LD_VAR 0 1
19276: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19277: LD_EXP 1
19281: PPUSH
19282: CALL_OW 301
19286: IFFALSE 19298
19288: GO 19290
19290: DISABLE
// YouLost ( JMM ) ; end_of_file
19291: LD_STRING JMM
19293: PPUSH
19294: CALL_OW 104
19298: END
// every 0 0$01 do
19299: GO 19301
19301: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19302: LD_INT 1050
19304: PPUSH
19305: CALL_OW 67
// if cratesSpawned < 6 then
19309: LD_EXP 45
19313: PUSH
19314: LD_INT 6
19316: LESS
19317: IFFALSE 19354
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19319: LD_INT 3
19321: PPUSH
19322: LD_INT 5
19324: PPUSH
19325: CALL_OW 12
19329: PPUSH
19330: LD_INT 21
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19340: LD_ADDR_EXP 45
19344: PUSH
19345: LD_EXP 45
19349: PUSH
19350: LD_INT 1
19352: PLUS
19353: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19354: LD_EXP 45
19358: PUSH
19359: LD_INT 6
19361: GREATEREQUAL
19362: PUSH
19363: LD_EXP 45
19367: PUSH
19368: LD_INT 12
19370: LESS
19371: AND
19372: IFFALSE 19416
// begin wait ( 0 0$50 ) ;
19374: LD_INT 1750
19376: PPUSH
19377: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19381: LD_INT 3
19383: PPUSH
19384: LD_INT 5
19386: PPUSH
19387: CALL_OW 12
19391: PPUSH
19392: LD_INT 21
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19402: LD_ADDR_EXP 45
19406: PUSH
19407: LD_EXP 45
19411: PUSH
19412: LD_INT 1
19414: PLUS
19415: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19416: LD_EXP 45
19420: PUSH
19421: LD_INT 12
19423: GREATEREQUAL
19424: IFFALSE 19468
// begin wait ( 1 1$40 ) ;
19426: LD_INT 3500
19428: PPUSH
19429: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19433: LD_INT 3
19435: PPUSH
19436: LD_INT 5
19438: PPUSH
19439: CALL_OW 12
19443: PPUSH
19444: LD_INT 21
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19454: LD_ADDR_EXP 45
19458: PUSH
19459: LD_EXP 45
19463: PUSH
19464: LD_INT 1
19466: PLUS
19467: ST_TO_ADDR
// end ; until false ;
19468: LD_INT 0
19470: IFFALSE 19302
// end ; end_of_file
19472: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19473: LD_INT 0
19475: PPUSH
// ar_miner := 81 ;
19476: LD_ADDR_EXP 59
19480: PUSH
19481: LD_INT 81
19483: ST_TO_ADDR
// ar_crane := 88 ;
19484: LD_ADDR_EXP 58
19488: PUSH
19489: LD_INT 88
19491: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19492: LD_ADDR_EXP 53
19496: PUSH
19497: LD_INT 89
19499: ST_TO_ADDR
// us_hack := 99 ;
19500: LD_ADDR_EXP 54
19504: PUSH
19505: LD_INT 99
19507: ST_TO_ADDR
// us_artillery := 97 ;
19508: LD_ADDR_EXP 55
19512: PUSH
19513: LD_INT 97
19515: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19516: LD_ADDR_EXP 56
19520: PUSH
19521: LD_INT 91
19523: ST_TO_ADDR
// ar_mortar := 92 ;
19524: LD_ADDR_EXP 57
19528: PUSH
19529: LD_INT 92
19531: ST_TO_ADDR
// ru_radar := 98 ;
19532: LD_ADDR_EXP 52
19536: PUSH
19537: LD_INT 98
19539: ST_TO_ADDR
// tech_Artillery := 80 ;
19540: LD_ADDR_EXP 60
19544: PUSH
19545: LD_INT 80
19547: ST_TO_ADDR
// tech_RadMat := 81 ;
19548: LD_ADDR_EXP 61
19552: PUSH
19553: LD_INT 81
19555: ST_TO_ADDR
// tech_BasicTools := 82 ;
19556: LD_ADDR_EXP 62
19560: PUSH
19561: LD_INT 82
19563: ST_TO_ADDR
// tech_Cargo := 83 ;
19564: LD_ADDR_EXP 63
19568: PUSH
19569: LD_INT 83
19571: ST_TO_ADDR
// tech_Track := 84 ;
19572: LD_ADDR_EXP 64
19576: PUSH
19577: LD_INT 84
19579: ST_TO_ADDR
// tech_Crane := 85 ;
19580: LD_ADDR_EXP 65
19584: PUSH
19585: LD_INT 85
19587: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19588: LD_ADDR_EXP 66
19592: PUSH
19593: LD_INT 86
19595: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19596: LD_ADDR_EXP 67
19600: PUSH
19601: LD_INT 87
19603: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19604: LD_ADDR_EXP 68
19608: PUSH
19609: LD_INT 88
19611: ST_TO_ADDR
// class_mastodont := 31 ;
19612: LD_ADDR_EXP 69
19616: PUSH
19617: LD_INT 31
19619: ST_TO_ADDR
// class_horse := 21 ;
19620: LD_ADDR_EXP 70
19624: PUSH
19625: LD_INT 21
19627: ST_TO_ADDR
// end ;
19628: LD_VAR 0 1
19632: RET
// every 1 do
19633: GO 19635
19635: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19636: CALL 19473 0 0
19640: END
// every 0 0$1 do
19641: GO 19643
19643: DISABLE
// begin enable ;
19644: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19645: LD_STRING updateTimer(
19647: PUSH
19648: LD_OWVAR 1
19652: STR
19653: PUSH
19654: LD_STRING );
19656: STR
19657: PPUSH
19658: CALL_OW 559
// end ;
19662: END
// on MapStart ( p ) do begin if streamModeActive then
19663: LD_EXP 71
19667: IFFALSE 19676
// DefineStreamItems ( true ) ;
19669: LD_INT 1
19671: PPUSH
19672: CALL 21324 0 1
// UpdateFactoryWaypoints ( ) ;
19676: CALL 34908 0 0
// end ;
19680: PPOPN 1
19682: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19683: LD_INT 0
19685: PPUSH
// if p2 = 100 then
19686: LD_VAR 0 2
19690: PUSH
19691: LD_INT 100
19693: EQUAL
19694: IFFALSE 20697
// begin if not StreamModeActive then
19696: LD_EXP 71
19700: NOT
19701: IFFALSE 19711
// StreamModeActive := true ;
19703: LD_ADDR_EXP 71
19707: PUSH
19708: LD_INT 1
19710: ST_TO_ADDR
// if p3 = 0 then
19711: LD_VAR 0 3
19715: PUSH
19716: LD_INT 0
19718: EQUAL
19719: IFFALSE 19725
// InitStreamMode ;
19721: CALL 20860 0 0
// if p3 = 1 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 1
19732: EQUAL
19733: IFFALSE 19743
// sRocket := true ;
19735: LD_ADDR_EXP 76
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// if p3 = 2 then
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 2
19750: EQUAL
19751: IFFALSE 19761
// sSpeed := true ;
19753: LD_ADDR_EXP 75
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// if p3 = 3 then
19761: LD_VAR 0 3
19765: PUSH
19766: LD_INT 3
19768: EQUAL
19769: IFFALSE 19779
// sEngine := true ;
19771: LD_ADDR_EXP 77
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// if p3 = 4 then
19779: LD_VAR 0 3
19783: PUSH
19784: LD_INT 4
19786: EQUAL
19787: IFFALSE 19797
// sSpec := true ;
19789: LD_ADDR_EXP 74
19793: PUSH
19794: LD_INT 1
19796: ST_TO_ADDR
// if p3 = 5 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 5
19804: EQUAL
19805: IFFALSE 19815
// sLevel := true ;
19807: LD_ADDR_EXP 78
19811: PUSH
19812: LD_INT 1
19814: ST_TO_ADDR
// if p3 = 6 then
19815: LD_VAR 0 3
19819: PUSH
19820: LD_INT 6
19822: EQUAL
19823: IFFALSE 19833
// sArmoury := true ;
19825: LD_ADDR_EXP 79
19829: PUSH
19830: LD_INT 1
19832: ST_TO_ADDR
// if p3 = 7 then
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 7
19840: EQUAL
19841: IFFALSE 19851
// sRadar := true ;
19843: LD_ADDR_EXP 80
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// if p3 = 8 then
19851: LD_VAR 0 3
19855: PUSH
19856: LD_INT 8
19858: EQUAL
19859: IFFALSE 19869
// sBunker := true ;
19861: LD_ADDR_EXP 81
19865: PUSH
19866: LD_INT 1
19868: ST_TO_ADDR
// if p3 = 9 then
19869: LD_VAR 0 3
19873: PUSH
19874: LD_INT 9
19876: EQUAL
19877: IFFALSE 19887
// sHack := true ;
19879: LD_ADDR_EXP 82
19883: PUSH
19884: LD_INT 1
19886: ST_TO_ADDR
// if p3 = 10 then
19887: LD_VAR 0 3
19891: PUSH
19892: LD_INT 10
19894: EQUAL
19895: IFFALSE 19905
// sFire := true ;
19897: LD_ADDR_EXP 83
19901: PUSH
19902: LD_INT 1
19904: ST_TO_ADDR
// if p3 = 11 then
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 11
19912: EQUAL
19913: IFFALSE 19923
// sRefresh := true ;
19915: LD_ADDR_EXP 84
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// if p3 = 12 then
19923: LD_VAR 0 3
19927: PUSH
19928: LD_INT 12
19930: EQUAL
19931: IFFALSE 19941
// sExp := true ;
19933: LD_ADDR_EXP 85
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// if p3 = 13 then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 13
19948: EQUAL
19949: IFFALSE 19959
// sDepot := true ;
19951: LD_ADDR_EXP 86
19955: PUSH
19956: LD_INT 1
19958: ST_TO_ADDR
// if p3 = 14 then
19959: LD_VAR 0 3
19963: PUSH
19964: LD_INT 14
19966: EQUAL
19967: IFFALSE 19977
// sFlag := true ;
19969: LD_ADDR_EXP 87
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// if p3 = 15 then
19977: LD_VAR 0 3
19981: PUSH
19982: LD_INT 15
19984: EQUAL
19985: IFFALSE 19995
// sKamikadze := true ;
19987: LD_ADDR_EXP 95
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// if p3 = 16 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 16
20002: EQUAL
20003: IFFALSE 20013
// sTroll := true ;
20005: LD_ADDR_EXP 96
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 17 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 17
20020: EQUAL
20021: IFFALSE 20031
// sSlow := true ;
20023: LD_ADDR_EXP 97
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 18 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 18
20038: EQUAL
20039: IFFALSE 20049
// sLack := true ;
20041: LD_ADDR_EXP 98
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 19 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 19
20056: EQUAL
20057: IFFALSE 20067
// sTank := true ;
20059: LD_ADDR_EXP 100
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 20 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 20
20074: EQUAL
20075: IFFALSE 20085
// sRemote := true ;
20077: LD_ADDR_EXP 101
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 21 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 21
20092: EQUAL
20093: IFFALSE 20103
// sPowell := true ;
20095: LD_ADDR_EXP 102
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 22 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 22
20110: EQUAL
20111: IFFALSE 20121
// sTeleport := true ;
20113: LD_ADDR_EXP 105
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 23 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 23
20128: EQUAL
20129: IFFALSE 20139
// sOilTower := true ;
20131: LD_ADDR_EXP 107
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 24 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 24
20146: EQUAL
20147: IFFALSE 20157
// sShovel := true ;
20149: LD_ADDR_EXP 108
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 25 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 25
20164: EQUAL
20165: IFFALSE 20175
// sSheik := true ;
20167: LD_ADDR_EXP 109
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 26 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 26
20182: EQUAL
20183: IFFALSE 20193
// sEarthquake := true ;
20185: LD_ADDR_EXP 111
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 27 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 27
20200: EQUAL
20201: IFFALSE 20211
// sAI := true ;
20203: LD_ADDR_EXP 112
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 28 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 28
20218: EQUAL
20219: IFFALSE 20229
// sCargo := true ;
20221: LD_ADDR_EXP 115
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 29 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 29
20236: EQUAL
20237: IFFALSE 20247
// sDLaser := true ;
20239: LD_ADDR_EXP 116
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 30 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 30
20254: EQUAL
20255: IFFALSE 20265
// sExchange := true ;
20257: LD_ADDR_EXP 117
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 31 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 31
20272: EQUAL
20273: IFFALSE 20283
// sFac := true ;
20275: LD_ADDR_EXP 118
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 32 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 32
20290: EQUAL
20291: IFFALSE 20301
// sPower := true ;
20293: LD_ADDR_EXP 119
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 33 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 33
20308: EQUAL
20309: IFFALSE 20319
// sRandom := true ;
20311: LD_ADDR_EXP 120
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 34 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 34
20326: EQUAL
20327: IFFALSE 20337
// sShield := true ;
20329: LD_ADDR_EXP 121
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// if p3 = 35 then
20337: LD_VAR 0 3
20341: PUSH
20342: LD_INT 35
20344: EQUAL
20345: IFFALSE 20355
// sTime := true ;
20347: LD_ADDR_EXP 122
20351: PUSH
20352: LD_INT 1
20354: ST_TO_ADDR
// if p3 = 36 then
20355: LD_VAR 0 3
20359: PUSH
20360: LD_INT 36
20362: EQUAL
20363: IFFALSE 20373
// sTools := true ;
20365: LD_ADDR_EXP 123
20369: PUSH
20370: LD_INT 1
20372: ST_TO_ADDR
// if p3 = 101 then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 101
20380: EQUAL
20381: IFFALSE 20391
// sSold := true ;
20383: LD_ADDR_EXP 88
20387: PUSH
20388: LD_INT 1
20390: ST_TO_ADDR
// if p3 = 102 then
20391: LD_VAR 0 3
20395: PUSH
20396: LD_INT 102
20398: EQUAL
20399: IFFALSE 20409
// sDiff := true ;
20401: LD_ADDR_EXP 89
20405: PUSH
20406: LD_INT 1
20408: ST_TO_ADDR
// if p3 = 103 then
20409: LD_VAR 0 3
20413: PUSH
20414: LD_INT 103
20416: EQUAL
20417: IFFALSE 20427
// sFog := true ;
20419: LD_ADDR_EXP 92
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// if p3 = 104 then
20427: LD_VAR 0 3
20431: PUSH
20432: LD_INT 104
20434: EQUAL
20435: IFFALSE 20445
// sReset := true ;
20437: LD_ADDR_EXP 93
20441: PUSH
20442: LD_INT 1
20444: ST_TO_ADDR
// if p3 = 105 then
20445: LD_VAR 0 3
20449: PUSH
20450: LD_INT 105
20452: EQUAL
20453: IFFALSE 20463
// sSun := true ;
20455: LD_ADDR_EXP 94
20459: PUSH
20460: LD_INT 1
20462: ST_TO_ADDR
// if p3 = 106 then
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 106
20470: EQUAL
20471: IFFALSE 20481
// sTiger := true ;
20473: LD_ADDR_EXP 90
20477: PUSH
20478: LD_INT 1
20480: ST_TO_ADDR
// if p3 = 107 then
20481: LD_VAR 0 3
20485: PUSH
20486: LD_INT 107
20488: EQUAL
20489: IFFALSE 20499
// sBomb := true ;
20491: LD_ADDR_EXP 91
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// if p3 = 108 then
20499: LD_VAR 0 3
20503: PUSH
20504: LD_INT 108
20506: EQUAL
20507: IFFALSE 20517
// sWound := true ;
20509: LD_ADDR_EXP 99
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// if p3 = 109 then
20517: LD_VAR 0 3
20521: PUSH
20522: LD_INT 109
20524: EQUAL
20525: IFFALSE 20535
// sBetray := true ;
20527: LD_ADDR_EXP 103
20531: PUSH
20532: LD_INT 1
20534: ST_TO_ADDR
// if p3 = 110 then
20535: LD_VAR 0 3
20539: PUSH
20540: LD_INT 110
20542: EQUAL
20543: IFFALSE 20553
// sContamin := true ;
20545: LD_ADDR_EXP 104
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// if p3 = 111 then
20553: LD_VAR 0 3
20557: PUSH
20558: LD_INT 111
20560: EQUAL
20561: IFFALSE 20571
// sOil := true ;
20563: LD_ADDR_EXP 106
20567: PUSH
20568: LD_INT 1
20570: ST_TO_ADDR
// if p3 = 112 then
20571: LD_VAR 0 3
20575: PUSH
20576: LD_INT 112
20578: EQUAL
20579: IFFALSE 20589
// sStu := true ;
20581: LD_ADDR_EXP 110
20585: PUSH
20586: LD_INT 1
20588: ST_TO_ADDR
// if p3 = 113 then
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 113
20596: EQUAL
20597: IFFALSE 20607
// sBazooka := true ;
20599: LD_ADDR_EXP 113
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// if p3 = 114 then
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 114
20614: EQUAL
20615: IFFALSE 20625
// sMortar := true ;
20617: LD_ADDR_EXP 114
20621: PUSH
20622: LD_INT 1
20624: ST_TO_ADDR
// if p3 = 115 then
20625: LD_VAR 0 3
20629: PUSH
20630: LD_INT 115
20632: EQUAL
20633: IFFALSE 20643
// sRanger := true ;
20635: LD_ADDR_EXP 124
20639: PUSH
20640: LD_INT 1
20642: ST_TO_ADDR
// if p3 = 116 then
20643: LD_VAR 0 3
20647: PUSH
20648: LD_INT 116
20650: EQUAL
20651: IFFALSE 20661
// sComputer := true ;
20653: LD_ADDR_EXP 125
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// if p3 = 117 then
20661: LD_VAR 0 3
20665: PUSH
20666: LD_INT 117
20668: EQUAL
20669: IFFALSE 20679
// s30 := true ;
20671: LD_ADDR_EXP 126
20675: PUSH
20676: LD_INT 1
20678: ST_TO_ADDR
// if p3 = 118 then
20679: LD_VAR 0 3
20683: PUSH
20684: LD_INT 118
20686: EQUAL
20687: IFFALSE 20697
// s60 := true ;
20689: LD_ADDR_EXP 127
20693: PUSH
20694: LD_INT 1
20696: ST_TO_ADDR
// end ; if p2 = 101 then
20697: LD_VAR 0 2
20701: PUSH
20702: LD_INT 101
20704: EQUAL
20705: IFFALSE 20833
// begin case p3 of 1 :
20707: LD_VAR 0 3
20711: PUSH
20712: LD_INT 1
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20720
20718: GO 20727
20720: POP
// hHackUnlimitedResources ; 2 :
20721: CALL 32931 0 0
20725: GO 20833
20727: LD_INT 2
20729: DOUBLE
20730: EQUAL
20731: IFTRUE 20735
20733: GO 20742
20735: POP
// hHackSetLevel10 ; 3 :
20736: CALL 33064 0 0
20740: GO 20833
20742: LD_INT 3
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20757
20750: POP
// hHackSetLevel10YourUnits ; 4 :
20751: CALL 33149 0 0
20755: GO 20833
20757: LD_INT 4
20759: DOUBLE
20760: EQUAL
20761: IFTRUE 20765
20763: GO 20772
20765: POP
// hHackInvincible ; 5 :
20766: CALL 33597 0 0
20770: GO 20833
20772: LD_INT 5
20774: DOUBLE
20775: EQUAL
20776: IFTRUE 20780
20778: GO 20787
20780: POP
// hHackInvisible ; 6 :
20781: CALL 33708 0 0
20785: GO 20833
20787: LD_INT 6
20789: DOUBLE
20790: EQUAL
20791: IFTRUE 20795
20793: GO 20802
20795: POP
// hHackChangeYourSide ; 7 :
20796: CALL 33765 0 0
20800: GO 20833
20802: LD_INT 7
20804: DOUBLE
20805: EQUAL
20806: IFTRUE 20810
20808: GO 20817
20810: POP
// hHackChangeUnitSide ; 8 :
20811: CALL 33807 0 0
20815: GO 20833
20817: LD_INT 8
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20832
20825: POP
// hHackFog ; end ;
20826: CALL 33908 0 0
20830: GO 20833
20832: POP
// end ; end ;
20833: LD_VAR 0 7
20837: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20838: GO 20840
20840: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20841: LD_STRING initStreamRollete();
20843: PPUSH
20844: CALL_OW 559
// InitStreamMode ;
20848: CALL 20860 0 0
// DefineStreamItems ( false ) ;
20852: LD_INT 0
20854: PPUSH
20855: CALL 21324 0 1
// end ;
20859: END
// function InitStreamMode ; begin
20860: LD_INT 0
20862: PPUSH
// streamModeActive := false ;
20863: LD_ADDR_EXP 71
20867: PUSH
20868: LD_INT 0
20870: ST_TO_ADDR
// normalCounter := 36 ;
20871: LD_ADDR_EXP 72
20875: PUSH
20876: LD_INT 36
20878: ST_TO_ADDR
// hardcoreCounter := 18 ;
20879: LD_ADDR_EXP 73
20883: PUSH
20884: LD_INT 18
20886: ST_TO_ADDR
// sRocket := false ;
20887: LD_ADDR_EXP 76
20891: PUSH
20892: LD_INT 0
20894: ST_TO_ADDR
// sSpeed := false ;
20895: LD_ADDR_EXP 75
20899: PUSH
20900: LD_INT 0
20902: ST_TO_ADDR
// sEngine := false ;
20903: LD_ADDR_EXP 77
20907: PUSH
20908: LD_INT 0
20910: ST_TO_ADDR
// sSpec := false ;
20911: LD_ADDR_EXP 74
20915: PUSH
20916: LD_INT 0
20918: ST_TO_ADDR
// sLevel := false ;
20919: LD_ADDR_EXP 78
20923: PUSH
20924: LD_INT 0
20926: ST_TO_ADDR
// sArmoury := false ;
20927: LD_ADDR_EXP 79
20931: PUSH
20932: LD_INT 0
20934: ST_TO_ADDR
// sRadar := false ;
20935: LD_ADDR_EXP 80
20939: PUSH
20940: LD_INT 0
20942: ST_TO_ADDR
// sBunker := false ;
20943: LD_ADDR_EXP 81
20947: PUSH
20948: LD_INT 0
20950: ST_TO_ADDR
// sHack := false ;
20951: LD_ADDR_EXP 82
20955: PUSH
20956: LD_INT 0
20958: ST_TO_ADDR
// sFire := false ;
20959: LD_ADDR_EXP 83
20963: PUSH
20964: LD_INT 0
20966: ST_TO_ADDR
// sRefresh := false ;
20967: LD_ADDR_EXP 84
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
// sExp := false ;
20975: LD_ADDR_EXP 85
20979: PUSH
20980: LD_INT 0
20982: ST_TO_ADDR
// sDepot := false ;
20983: LD_ADDR_EXP 86
20987: PUSH
20988: LD_INT 0
20990: ST_TO_ADDR
// sFlag := false ;
20991: LD_ADDR_EXP 87
20995: PUSH
20996: LD_INT 0
20998: ST_TO_ADDR
// sKamikadze := false ;
20999: LD_ADDR_EXP 95
21003: PUSH
21004: LD_INT 0
21006: ST_TO_ADDR
// sTroll := false ;
21007: LD_ADDR_EXP 96
21011: PUSH
21012: LD_INT 0
21014: ST_TO_ADDR
// sSlow := false ;
21015: LD_ADDR_EXP 97
21019: PUSH
21020: LD_INT 0
21022: ST_TO_ADDR
// sLack := false ;
21023: LD_ADDR_EXP 98
21027: PUSH
21028: LD_INT 0
21030: ST_TO_ADDR
// sTank := false ;
21031: LD_ADDR_EXP 100
21035: PUSH
21036: LD_INT 0
21038: ST_TO_ADDR
// sRemote := false ;
21039: LD_ADDR_EXP 101
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// sPowell := false ;
21047: LD_ADDR_EXP 102
21051: PUSH
21052: LD_INT 0
21054: ST_TO_ADDR
// sTeleport := false ;
21055: LD_ADDR_EXP 105
21059: PUSH
21060: LD_INT 0
21062: ST_TO_ADDR
// sOilTower := false ;
21063: LD_ADDR_EXP 107
21067: PUSH
21068: LD_INT 0
21070: ST_TO_ADDR
// sShovel := false ;
21071: LD_ADDR_EXP 108
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// sSheik := false ;
21079: LD_ADDR_EXP 109
21083: PUSH
21084: LD_INT 0
21086: ST_TO_ADDR
// sEarthquake := false ;
21087: LD_ADDR_EXP 111
21091: PUSH
21092: LD_INT 0
21094: ST_TO_ADDR
// sAI := false ;
21095: LD_ADDR_EXP 112
21099: PUSH
21100: LD_INT 0
21102: ST_TO_ADDR
// sCargo := false ;
21103: LD_ADDR_EXP 115
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// sDLaser := false ;
21111: LD_ADDR_EXP 116
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// sExchange := false ;
21119: LD_ADDR_EXP 117
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// sFac := false ;
21127: LD_ADDR_EXP 118
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// sPower := false ;
21135: LD_ADDR_EXP 119
21139: PUSH
21140: LD_INT 0
21142: ST_TO_ADDR
// sRandom := false ;
21143: LD_ADDR_EXP 120
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// sShield := false ;
21151: LD_ADDR_EXP 121
21155: PUSH
21156: LD_INT 0
21158: ST_TO_ADDR
// sTime := false ;
21159: LD_ADDR_EXP 122
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// sTools := false ;
21167: LD_ADDR_EXP 123
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
// sSold := false ;
21175: LD_ADDR_EXP 88
21179: PUSH
21180: LD_INT 0
21182: ST_TO_ADDR
// sDiff := false ;
21183: LD_ADDR_EXP 89
21187: PUSH
21188: LD_INT 0
21190: ST_TO_ADDR
// sFog := false ;
21191: LD_ADDR_EXP 92
21195: PUSH
21196: LD_INT 0
21198: ST_TO_ADDR
// sReset := false ;
21199: LD_ADDR_EXP 93
21203: PUSH
21204: LD_INT 0
21206: ST_TO_ADDR
// sSun := false ;
21207: LD_ADDR_EXP 94
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// sTiger := false ;
21215: LD_ADDR_EXP 90
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// sBomb := false ;
21223: LD_ADDR_EXP 91
21227: PUSH
21228: LD_INT 0
21230: ST_TO_ADDR
// sWound := false ;
21231: LD_ADDR_EXP 99
21235: PUSH
21236: LD_INT 0
21238: ST_TO_ADDR
// sBetray := false ;
21239: LD_ADDR_EXP 103
21243: PUSH
21244: LD_INT 0
21246: ST_TO_ADDR
// sContamin := false ;
21247: LD_ADDR_EXP 104
21251: PUSH
21252: LD_INT 0
21254: ST_TO_ADDR
// sOil := false ;
21255: LD_ADDR_EXP 106
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// sStu := false ;
21263: LD_ADDR_EXP 110
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// sBazooka := false ;
21271: LD_ADDR_EXP 113
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// sMortar := false ;
21279: LD_ADDR_EXP 114
21283: PUSH
21284: LD_INT 0
21286: ST_TO_ADDR
// sRanger := false ;
21287: LD_ADDR_EXP 124
21291: PUSH
21292: LD_INT 0
21294: ST_TO_ADDR
// sComputer := false ;
21295: LD_ADDR_EXP 125
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// s30 := false ;
21303: LD_ADDR_EXP 126
21307: PUSH
21308: LD_INT 0
21310: ST_TO_ADDR
// s60 := false ;
21311: LD_ADDR_EXP 127
21315: PUSH
21316: LD_INT 0
21318: ST_TO_ADDR
// end ;
21319: LD_VAR 0 1
21323: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21324: LD_INT 0
21326: PPUSH
21327: PPUSH
21328: PPUSH
21329: PPUSH
21330: PPUSH
21331: PPUSH
21332: PPUSH
// result := [ ] ;
21333: LD_ADDR_VAR 0 2
21337: PUSH
21338: EMPTY
21339: ST_TO_ADDR
// if campaign_id = 1 then
21340: LD_OWVAR 69
21344: PUSH
21345: LD_INT 1
21347: EQUAL
21348: IFFALSE 24514
// begin case mission_number of 1 :
21350: LD_OWVAR 70
21354: PUSH
21355: LD_INT 1
21357: DOUBLE
21358: EQUAL
21359: IFTRUE 21363
21361: GO 21439
21363: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21364: LD_ADDR_VAR 0 2
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: LD_INT 4
21374: PUSH
21375: LD_INT 11
21377: PUSH
21378: LD_INT 12
21380: PUSH
21381: LD_INT 15
21383: PUSH
21384: LD_INT 16
21386: PUSH
21387: LD_INT 22
21389: PUSH
21390: LD_INT 23
21392: PUSH
21393: LD_INT 26
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 101
21409: PUSH
21410: LD_INT 102
21412: PUSH
21413: LD_INT 106
21415: PUSH
21416: LD_INT 116
21418: PUSH
21419: LD_INT 117
21421: PUSH
21422: LD_INT 118
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: ST_TO_ADDR
21437: GO 24512
21439: LD_INT 2
21441: DOUBLE
21442: EQUAL
21443: IFTRUE 21447
21445: GO 21531
21447: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21448: LD_ADDR_VAR 0 2
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: LD_INT 4
21458: PUSH
21459: LD_INT 11
21461: PUSH
21462: LD_INT 12
21464: PUSH
21465: LD_INT 15
21467: PUSH
21468: LD_INT 16
21470: PUSH
21471: LD_INT 22
21473: PUSH
21474: LD_INT 23
21476: PUSH
21477: LD_INT 26
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 101
21493: PUSH
21494: LD_INT 102
21496: PUSH
21497: LD_INT 105
21499: PUSH
21500: LD_INT 106
21502: PUSH
21503: LD_INT 108
21505: PUSH
21506: LD_INT 116
21508: PUSH
21509: LD_INT 117
21511: PUSH
21512: LD_INT 118
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: ST_TO_ADDR
21529: GO 24512
21531: LD_INT 3
21533: DOUBLE
21534: EQUAL
21535: IFTRUE 21539
21537: GO 21627
21539: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21540: LD_ADDR_VAR 0 2
21544: PUSH
21545: LD_INT 2
21547: PUSH
21548: LD_INT 4
21550: PUSH
21551: LD_INT 5
21553: PUSH
21554: LD_INT 11
21556: PUSH
21557: LD_INT 12
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 16
21565: PUSH
21566: LD_INT 22
21568: PUSH
21569: LD_INT 26
21571: PUSH
21572: LD_INT 36
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 101
21589: PUSH
21590: LD_INT 102
21592: PUSH
21593: LD_INT 105
21595: PUSH
21596: LD_INT 106
21598: PUSH
21599: LD_INT 108
21601: PUSH
21602: LD_INT 116
21604: PUSH
21605: LD_INT 117
21607: PUSH
21608: LD_INT 118
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: ST_TO_ADDR
21625: GO 24512
21627: LD_INT 4
21629: DOUBLE
21630: EQUAL
21631: IFTRUE 21635
21633: GO 21731
21635: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21636: LD_ADDR_VAR 0 2
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: LD_INT 4
21646: PUSH
21647: LD_INT 5
21649: PUSH
21650: LD_INT 8
21652: PUSH
21653: LD_INT 11
21655: PUSH
21656: LD_INT 12
21658: PUSH
21659: LD_INT 15
21661: PUSH
21662: LD_INT 16
21664: PUSH
21665: LD_INT 22
21667: PUSH
21668: LD_INT 23
21670: PUSH
21671: LD_INT 26
21673: PUSH
21674: LD_INT 36
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 101
21693: PUSH
21694: LD_INT 102
21696: PUSH
21697: LD_INT 105
21699: PUSH
21700: LD_INT 106
21702: PUSH
21703: LD_INT 108
21705: PUSH
21706: LD_INT 116
21708: PUSH
21709: LD_INT 117
21711: PUSH
21712: LD_INT 118
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: ST_TO_ADDR
21729: GO 24512
21731: LD_INT 5
21733: DOUBLE
21734: EQUAL
21735: IFTRUE 21739
21737: GO 21851
21739: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21740: LD_ADDR_VAR 0 2
21744: PUSH
21745: LD_INT 2
21747: PUSH
21748: LD_INT 4
21750: PUSH
21751: LD_INT 5
21753: PUSH
21754: LD_INT 6
21756: PUSH
21757: LD_INT 8
21759: PUSH
21760: LD_INT 11
21762: PUSH
21763: LD_INT 12
21765: PUSH
21766: LD_INT 15
21768: PUSH
21769: LD_INT 16
21771: PUSH
21772: LD_INT 22
21774: PUSH
21775: LD_INT 23
21777: PUSH
21778: LD_INT 25
21780: PUSH
21781: LD_INT 26
21783: PUSH
21784: LD_INT 36
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 101
21805: PUSH
21806: LD_INT 102
21808: PUSH
21809: LD_INT 105
21811: PUSH
21812: LD_INT 106
21814: PUSH
21815: LD_INT 108
21817: PUSH
21818: LD_INT 109
21820: PUSH
21821: LD_INT 112
21823: PUSH
21824: LD_INT 116
21826: PUSH
21827: LD_INT 117
21829: PUSH
21830: LD_INT 118
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: ST_TO_ADDR
21849: GO 24512
21851: LD_INT 6
21853: DOUBLE
21854: EQUAL
21855: IFTRUE 21859
21857: GO 21991
21859: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21860: LD_ADDR_VAR 0 2
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: LD_INT 4
21870: PUSH
21871: LD_INT 5
21873: PUSH
21874: LD_INT 6
21876: PUSH
21877: LD_INT 8
21879: PUSH
21880: LD_INT 11
21882: PUSH
21883: LD_INT 12
21885: PUSH
21886: LD_INT 15
21888: PUSH
21889: LD_INT 16
21891: PUSH
21892: LD_INT 20
21894: PUSH
21895: LD_INT 21
21897: PUSH
21898: LD_INT 22
21900: PUSH
21901: LD_INT 23
21903: PUSH
21904: LD_INT 25
21906: PUSH
21907: LD_INT 26
21909: PUSH
21910: LD_INT 30
21912: PUSH
21913: LD_INT 31
21915: PUSH
21916: LD_INT 32
21918: PUSH
21919: LD_INT 36
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 101
21945: PUSH
21946: LD_INT 102
21948: PUSH
21949: LD_INT 105
21951: PUSH
21952: LD_INT 106
21954: PUSH
21955: LD_INT 108
21957: PUSH
21958: LD_INT 109
21960: PUSH
21961: LD_INT 112
21963: PUSH
21964: LD_INT 116
21966: PUSH
21967: LD_INT 117
21969: PUSH
21970: LD_INT 118
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: ST_TO_ADDR
21989: GO 24512
21991: LD_INT 7
21993: DOUBLE
21994: EQUAL
21995: IFTRUE 21999
21997: GO 22111
21999: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22000: LD_ADDR_VAR 0 2
22004: PUSH
22005: LD_INT 2
22007: PUSH
22008: LD_INT 4
22010: PUSH
22011: LD_INT 5
22013: PUSH
22014: LD_INT 7
22016: PUSH
22017: LD_INT 11
22019: PUSH
22020: LD_INT 12
22022: PUSH
22023: LD_INT 15
22025: PUSH
22026: LD_INT 16
22028: PUSH
22029: LD_INT 20
22031: PUSH
22032: LD_INT 21
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_INT 23
22040: PUSH
22041: LD_INT 25
22043: PUSH
22044: LD_INT 26
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 101
22065: PUSH
22066: LD_INT 102
22068: PUSH
22069: LD_INT 103
22071: PUSH
22072: LD_INT 105
22074: PUSH
22075: LD_INT 106
22077: PUSH
22078: LD_INT 108
22080: PUSH
22081: LD_INT 112
22083: PUSH
22084: LD_INT 116
22086: PUSH
22087: LD_INT 117
22089: PUSH
22090: LD_INT 118
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: ST_TO_ADDR
22109: GO 24512
22111: LD_INT 8
22113: DOUBLE
22114: EQUAL
22115: IFTRUE 22119
22117: GO 22259
22119: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22120: LD_ADDR_VAR 0 2
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: LD_INT 4
22130: PUSH
22131: LD_INT 5
22133: PUSH
22134: LD_INT 6
22136: PUSH
22137: LD_INT 7
22139: PUSH
22140: LD_INT 8
22142: PUSH
22143: LD_INT 11
22145: PUSH
22146: LD_INT 12
22148: PUSH
22149: LD_INT 15
22151: PUSH
22152: LD_INT 16
22154: PUSH
22155: LD_INT 20
22157: PUSH
22158: LD_INT 21
22160: PUSH
22161: LD_INT 22
22163: PUSH
22164: LD_INT 23
22166: PUSH
22167: LD_INT 25
22169: PUSH
22170: LD_INT 26
22172: PUSH
22173: LD_INT 30
22175: PUSH
22176: LD_INT 31
22178: PUSH
22179: LD_INT 32
22181: PUSH
22182: LD_INT 36
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 101
22209: PUSH
22210: LD_INT 102
22212: PUSH
22213: LD_INT 103
22215: PUSH
22216: LD_INT 105
22218: PUSH
22219: LD_INT 106
22221: PUSH
22222: LD_INT 108
22224: PUSH
22225: LD_INT 109
22227: PUSH
22228: LD_INT 112
22230: PUSH
22231: LD_INT 116
22233: PUSH
22234: LD_INT 117
22236: PUSH
22237: LD_INT 118
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: ST_TO_ADDR
22257: GO 24512
22259: LD_INT 9
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22415
22267: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22268: LD_ADDR_VAR 0 2
22272: PUSH
22273: LD_INT 2
22275: PUSH
22276: LD_INT 4
22278: PUSH
22279: LD_INT 5
22281: PUSH
22282: LD_INT 6
22284: PUSH
22285: LD_INT 7
22287: PUSH
22288: LD_INT 8
22290: PUSH
22291: LD_INT 11
22293: PUSH
22294: LD_INT 12
22296: PUSH
22297: LD_INT 15
22299: PUSH
22300: LD_INT 16
22302: PUSH
22303: LD_INT 20
22305: PUSH
22306: LD_INT 21
22308: PUSH
22309: LD_INT 22
22311: PUSH
22312: LD_INT 23
22314: PUSH
22315: LD_INT 25
22317: PUSH
22318: LD_INT 26
22320: PUSH
22321: LD_INT 28
22323: PUSH
22324: LD_INT 30
22326: PUSH
22327: LD_INT 31
22329: PUSH
22330: LD_INT 32
22332: PUSH
22333: LD_INT 36
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 101
22361: PUSH
22362: LD_INT 102
22364: PUSH
22365: LD_INT 103
22367: PUSH
22368: LD_INT 105
22370: PUSH
22371: LD_INT 106
22373: PUSH
22374: LD_INT 108
22376: PUSH
22377: LD_INT 109
22379: PUSH
22380: LD_INT 112
22382: PUSH
22383: LD_INT 114
22385: PUSH
22386: LD_INT 116
22388: PUSH
22389: LD_INT 117
22391: PUSH
22392: LD_INT 118
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: ST_TO_ADDR
22413: GO 24512
22415: LD_INT 10
22417: DOUBLE
22418: EQUAL
22419: IFTRUE 22423
22421: GO 22619
22423: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22424: LD_ADDR_VAR 0 2
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: LD_INT 4
22434: PUSH
22435: LD_INT 5
22437: PUSH
22438: LD_INT 6
22440: PUSH
22441: LD_INT 7
22443: PUSH
22444: LD_INT 8
22446: PUSH
22447: LD_INT 9
22449: PUSH
22450: LD_INT 10
22452: PUSH
22453: LD_INT 11
22455: PUSH
22456: LD_INT 12
22458: PUSH
22459: LD_INT 13
22461: PUSH
22462: LD_INT 14
22464: PUSH
22465: LD_INT 15
22467: PUSH
22468: LD_INT 16
22470: PUSH
22471: LD_INT 17
22473: PUSH
22474: LD_INT 18
22476: PUSH
22477: LD_INT 19
22479: PUSH
22480: LD_INT 20
22482: PUSH
22483: LD_INT 21
22485: PUSH
22486: LD_INT 22
22488: PUSH
22489: LD_INT 23
22491: PUSH
22492: LD_INT 24
22494: PUSH
22495: LD_INT 25
22497: PUSH
22498: LD_INT 26
22500: PUSH
22501: LD_INT 28
22503: PUSH
22504: LD_INT 30
22506: PUSH
22507: LD_INT 31
22509: PUSH
22510: LD_INT 32
22512: PUSH
22513: LD_INT 36
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 101
22549: PUSH
22550: LD_INT 102
22552: PUSH
22553: LD_INT 103
22555: PUSH
22556: LD_INT 104
22558: PUSH
22559: LD_INT 105
22561: PUSH
22562: LD_INT 106
22564: PUSH
22565: LD_INT 107
22567: PUSH
22568: LD_INT 108
22570: PUSH
22571: LD_INT 109
22573: PUSH
22574: LD_INT 110
22576: PUSH
22577: LD_INT 111
22579: PUSH
22580: LD_INT 112
22582: PUSH
22583: LD_INT 114
22585: PUSH
22586: LD_INT 116
22588: PUSH
22589: LD_INT 117
22591: PUSH
22592: LD_INT 118
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: ST_TO_ADDR
22617: GO 24512
22619: LD_INT 11
22621: DOUBLE
22622: EQUAL
22623: IFTRUE 22627
22625: GO 22831
22627: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22628: LD_ADDR_VAR 0 2
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: LD_INT 4
22641: PUSH
22642: LD_INT 5
22644: PUSH
22645: LD_INT 6
22647: PUSH
22648: LD_INT 7
22650: PUSH
22651: LD_INT 8
22653: PUSH
22654: LD_INT 9
22656: PUSH
22657: LD_INT 10
22659: PUSH
22660: LD_INT 11
22662: PUSH
22663: LD_INT 12
22665: PUSH
22666: LD_INT 13
22668: PUSH
22669: LD_INT 14
22671: PUSH
22672: LD_INT 15
22674: PUSH
22675: LD_INT 16
22677: PUSH
22678: LD_INT 17
22680: PUSH
22681: LD_INT 18
22683: PUSH
22684: LD_INT 19
22686: PUSH
22687: LD_INT 20
22689: PUSH
22690: LD_INT 21
22692: PUSH
22693: LD_INT 22
22695: PUSH
22696: LD_INT 23
22698: PUSH
22699: LD_INT 24
22701: PUSH
22702: LD_INT 25
22704: PUSH
22705: LD_INT 26
22707: PUSH
22708: LD_INT 28
22710: PUSH
22711: LD_INT 30
22713: PUSH
22714: LD_INT 31
22716: PUSH
22717: LD_INT 32
22719: PUSH
22720: LD_INT 34
22722: PUSH
22723: LD_INT 36
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 101
22761: PUSH
22762: LD_INT 102
22764: PUSH
22765: LD_INT 103
22767: PUSH
22768: LD_INT 104
22770: PUSH
22771: LD_INT 105
22773: PUSH
22774: LD_INT 106
22776: PUSH
22777: LD_INT 107
22779: PUSH
22780: LD_INT 108
22782: PUSH
22783: LD_INT 109
22785: PUSH
22786: LD_INT 110
22788: PUSH
22789: LD_INT 111
22791: PUSH
22792: LD_INT 112
22794: PUSH
22795: LD_INT 114
22797: PUSH
22798: LD_INT 116
22800: PUSH
22801: LD_INT 117
22803: PUSH
22804: LD_INT 118
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: ST_TO_ADDR
22829: GO 24512
22831: LD_INT 12
22833: DOUBLE
22834: EQUAL
22835: IFTRUE 22839
22837: GO 23059
22839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22840: LD_ADDR_VAR 0 2
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 4
22856: PUSH
22857: LD_INT 5
22859: PUSH
22860: LD_INT 6
22862: PUSH
22863: LD_INT 7
22865: PUSH
22866: LD_INT 8
22868: PUSH
22869: LD_INT 9
22871: PUSH
22872: LD_INT 10
22874: PUSH
22875: LD_INT 11
22877: PUSH
22878: LD_INT 12
22880: PUSH
22881: LD_INT 13
22883: PUSH
22884: LD_INT 14
22886: PUSH
22887: LD_INT 15
22889: PUSH
22890: LD_INT 16
22892: PUSH
22893: LD_INT 17
22895: PUSH
22896: LD_INT 18
22898: PUSH
22899: LD_INT 19
22901: PUSH
22902: LD_INT 20
22904: PUSH
22905: LD_INT 21
22907: PUSH
22908: LD_INT 22
22910: PUSH
22911: LD_INT 23
22913: PUSH
22914: LD_INT 24
22916: PUSH
22917: LD_INT 25
22919: PUSH
22920: LD_INT 26
22922: PUSH
22923: LD_INT 27
22925: PUSH
22926: LD_INT 28
22928: PUSH
22929: LD_INT 30
22931: PUSH
22932: LD_INT 31
22934: PUSH
22935: LD_INT 32
22937: PUSH
22938: LD_INT 33
22940: PUSH
22941: LD_INT 34
22943: PUSH
22944: LD_INT 36
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 101
22985: PUSH
22986: LD_INT 102
22988: PUSH
22989: LD_INT 103
22991: PUSH
22992: LD_INT 104
22994: PUSH
22995: LD_INT 105
22997: PUSH
22998: LD_INT 106
23000: PUSH
23001: LD_INT 107
23003: PUSH
23004: LD_INT 108
23006: PUSH
23007: LD_INT 109
23009: PUSH
23010: LD_INT 110
23012: PUSH
23013: LD_INT 111
23015: PUSH
23016: LD_INT 112
23018: PUSH
23019: LD_INT 113
23021: PUSH
23022: LD_INT 114
23024: PUSH
23025: LD_INT 116
23027: PUSH
23028: LD_INT 117
23030: PUSH
23031: LD_INT 118
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: ST_TO_ADDR
23057: GO 24512
23059: LD_INT 13
23061: DOUBLE
23062: EQUAL
23063: IFTRUE 23067
23065: GO 23275
23067: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23068: LD_ADDR_VAR 0 2
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: LD_INT 2
23078: PUSH
23079: LD_INT 3
23081: PUSH
23082: LD_INT 4
23084: PUSH
23085: LD_INT 5
23087: PUSH
23088: LD_INT 8
23090: PUSH
23091: LD_INT 9
23093: PUSH
23094: LD_INT 10
23096: PUSH
23097: LD_INT 11
23099: PUSH
23100: LD_INT 12
23102: PUSH
23103: LD_INT 14
23105: PUSH
23106: LD_INT 15
23108: PUSH
23109: LD_INT 16
23111: PUSH
23112: LD_INT 17
23114: PUSH
23115: LD_INT 18
23117: PUSH
23118: LD_INT 19
23120: PUSH
23121: LD_INT 20
23123: PUSH
23124: LD_INT 21
23126: PUSH
23127: LD_INT 22
23129: PUSH
23130: LD_INT 23
23132: PUSH
23133: LD_INT 24
23135: PUSH
23136: LD_INT 25
23138: PUSH
23139: LD_INT 26
23141: PUSH
23142: LD_INT 27
23144: PUSH
23145: LD_INT 28
23147: PUSH
23148: LD_INT 30
23150: PUSH
23151: LD_INT 31
23153: PUSH
23154: LD_INT 32
23156: PUSH
23157: LD_INT 33
23159: PUSH
23160: LD_INT 34
23162: PUSH
23163: LD_INT 36
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 101
23201: PUSH
23202: LD_INT 102
23204: PUSH
23205: LD_INT 103
23207: PUSH
23208: LD_INT 104
23210: PUSH
23211: LD_INT 105
23213: PUSH
23214: LD_INT 106
23216: PUSH
23217: LD_INT 107
23219: PUSH
23220: LD_INT 108
23222: PUSH
23223: LD_INT 109
23225: PUSH
23226: LD_INT 110
23228: PUSH
23229: LD_INT 111
23231: PUSH
23232: LD_INT 112
23234: PUSH
23235: LD_INT 113
23237: PUSH
23238: LD_INT 114
23240: PUSH
23241: LD_INT 116
23243: PUSH
23244: LD_INT 117
23246: PUSH
23247: LD_INT 118
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: ST_TO_ADDR
23273: GO 24512
23275: LD_INT 14
23277: DOUBLE
23278: EQUAL
23279: IFTRUE 23283
23281: GO 23507
23283: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 3
23297: PUSH
23298: LD_INT 4
23300: PUSH
23301: LD_INT 5
23303: PUSH
23304: LD_INT 6
23306: PUSH
23307: LD_INT 7
23309: PUSH
23310: LD_INT 8
23312: PUSH
23313: LD_INT 9
23315: PUSH
23316: LD_INT 10
23318: PUSH
23319: LD_INT 11
23321: PUSH
23322: LD_INT 12
23324: PUSH
23325: LD_INT 13
23327: PUSH
23328: LD_INT 14
23330: PUSH
23331: LD_INT 15
23333: PUSH
23334: LD_INT 16
23336: PUSH
23337: LD_INT 17
23339: PUSH
23340: LD_INT 18
23342: PUSH
23343: LD_INT 19
23345: PUSH
23346: LD_INT 20
23348: PUSH
23349: LD_INT 21
23351: PUSH
23352: LD_INT 22
23354: PUSH
23355: LD_INT 23
23357: PUSH
23358: LD_INT 24
23360: PUSH
23361: LD_INT 25
23363: PUSH
23364: LD_INT 26
23366: PUSH
23367: LD_INT 27
23369: PUSH
23370: LD_INT 28
23372: PUSH
23373: LD_INT 29
23375: PUSH
23376: LD_INT 30
23378: PUSH
23379: LD_INT 31
23381: PUSH
23382: LD_INT 32
23384: PUSH
23385: LD_INT 33
23387: PUSH
23388: LD_INT 34
23390: PUSH
23391: LD_INT 36
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 101
23433: PUSH
23434: LD_INT 102
23436: PUSH
23437: LD_INT 103
23439: PUSH
23440: LD_INT 104
23442: PUSH
23443: LD_INT 105
23445: PUSH
23446: LD_INT 106
23448: PUSH
23449: LD_INT 107
23451: PUSH
23452: LD_INT 108
23454: PUSH
23455: LD_INT 109
23457: PUSH
23458: LD_INT 110
23460: PUSH
23461: LD_INT 111
23463: PUSH
23464: LD_INT 112
23466: PUSH
23467: LD_INT 113
23469: PUSH
23470: LD_INT 114
23472: PUSH
23473: LD_INT 116
23475: PUSH
23476: LD_INT 117
23478: PUSH
23479: LD_INT 118
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: ST_TO_ADDR
23505: GO 24512
23507: LD_INT 15
23509: DOUBLE
23510: EQUAL
23511: IFTRUE 23515
23513: GO 23739
23515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23516: LD_ADDR_VAR 0 2
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 3
23529: PUSH
23530: LD_INT 4
23532: PUSH
23533: LD_INT 5
23535: PUSH
23536: LD_INT 6
23538: PUSH
23539: LD_INT 7
23541: PUSH
23542: LD_INT 8
23544: PUSH
23545: LD_INT 9
23547: PUSH
23548: LD_INT 10
23550: PUSH
23551: LD_INT 11
23553: PUSH
23554: LD_INT 12
23556: PUSH
23557: LD_INT 13
23559: PUSH
23560: LD_INT 14
23562: PUSH
23563: LD_INT 15
23565: PUSH
23566: LD_INT 16
23568: PUSH
23569: LD_INT 17
23571: PUSH
23572: LD_INT 18
23574: PUSH
23575: LD_INT 19
23577: PUSH
23578: LD_INT 20
23580: PUSH
23581: LD_INT 21
23583: PUSH
23584: LD_INT 22
23586: PUSH
23587: LD_INT 23
23589: PUSH
23590: LD_INT 24
23592: PUSH
23593: LD_INT 25
23595: PUSH
23596: LD_INT 26
23598: PUSH
23599: LD_INT 27
23601: PUSH
23602: LD_INT 28
23604: PUSH
23605: LD_INT 29
23607: PUSH
23608: LD_INT 30
23610: PUSH
23611: LD_INT 31
23613: PUSH
23614: LD_INT 32
23616: PUSH
23617: LD_INT 33
23619: PUSH
23620: LD_INT 34
23622: PUSH
23623: LD_INT 36
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 101
23665: PUSH
23666: LD_INT 102
23668: PUSH
23669: LD_INT 103
23671: PUSH
23672: LD_INT 104
23674: PUSH
23675: LD_INT 105
23677: PUSH
23678: LD_INT 106
23680: PUSH
23681: LD_INT 107
23683: PUSH
23684: LD_INT 108
23686: PUSH
23687: LD_INT 109
23689: PUSH
23690: LD_INT 110
23692: PUSH
23693: LD_INT 111
23695: PUSH
23696: LD_INT 112
23698: PUSH
23699: LD_INT 113
23701: PUSH
23702: LD_INT 114
23704: PUSH
23705: LD_INT 116
23707: PUSH
23708: LD_INT 117
23710: PUSH
23711: LD_INT 118
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: ST_TO_ADDR
23737: GO 24512
23739: LD_INT 16
23741: DOUBLE
23742: EQUAL
23743: IFTRUE 23747
23745: GO 23883
23747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23748: LD_ADDR_VAR 0 2
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: LD_INT 4
23758: PUSH
23759: LD_INT 5
23761: PUSH
23762: LD_INT 7
23764: PUSH
23765: LD_INT 11
23767: PUSH
23768: LD_INT 12
23770: PUSH
23771: LD_INT 15
23773: PUSH
23774: LD_INT 16
23776: PUSH
23777: LD_INT 20
23779: PUSH
23780: LD_INT 21
23782: PUSH
23783: LD_INT 22
23785: PUSH
23786: LD_INT 23
23788: PUSH
23789: LD_INT 25
23791: PUSH
23792: LD_INT 26
23794: PUSH
23795: LD_INT 30
23797: PUSH
23798: LD_INT 31
23800: PUSH
23801: LD_INT 32
23803: PUSH
23804: LD_INT 33
23806: PUSH
23807: LD_INT 34
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 101
23833: PUSH
23834: LD_INT 102
23836: PUSH
23837: LD_INT 103
23839: PUSH
23840: LD_INT 106
23842: PUSH
23843: LD_INT 108
23845: PUSH
23846: LD_INT 112
23848: PUSH
23849: LD_INT 113
23851: PUSH
23852: LD_INT 114
23854: PUSH
23855: LD_INT 116
23857: PUSH
23858: LD_INT 117
23860: PUSH
23861: LD_INT 118
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: ST_TO_ADDR
23881: GO 24512
23883: LD_INT 17
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 24115
23891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23892: LD_ADDR_VAR 0 2
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 2
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: LD_INT 4
23908: PUSH
23909: LD_INT 5
23911: PUSH
23912: LD_INT 6
23914: PUSH
23915: LD_INT 7
23917: PUSH
23918: LD_INT 8
23920: PUSH
23921: LD_INT 9
23923: PUSH
23924: LD_INT 10
23926: PUSH
23927: LD_INT 11
23929: PUSH
23930: LD_INT 12
23932: PUSH
23933: LD_INT 13
23935: PUSH
23936: LD_INT 14
23938: PUSH
23939: LD_INT 15
23941: PUSH
23942: LD_INT 16
23944: PUSH
23945: LD_INT 17
23947: PUSH
23948: LD_INT 18
23950: PUSH
23951: LD_INT 19
23953: PUSH
23954: LD_INT 20
23956: PUSH
23957: LD_INT 21
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_INT 23
23965: PUSH
23966: LD_INT 24
23968: PUSH
23969: LD_INT 25
23971: PUSH
23972: LD_INT 26
23974: PUSH
23975: LD_INT 27
23977: PUSH
23978: LD_INT 28
23980: PUSH
23981: LD_INT 29
23983: PUSH
23984: LD_INT 30
23986: PUSH
23987: LD_INT 31
23989: PUSH
23990: LD_INT 32
23992: PUSH
23993: LD_INT 33
23995: PUSH
23996: LD_INT 34
23998: PUSH
23999: LD_INT 36
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 101
24041: PUSH
24042: LD_INT 102
24044: PUSH
24045: LD_INT 103
24047: PUSH
24048: LD_INT 104
24050: PUSH
24051: LD_INT 105
24053: PUSH
24054: LD_INT 106
24056: PUSH
24057: LD_INT 107
24059: PUSH
24060: LD_INT 108
24062: PUSH
24063: LD_INT 109
24065: PUSH
24066: LD_INT 110
24068: PUSH
24069: LD_INT 111
24071: PUSH
24072: LD_INT 112
24074: PUSH
24075: LD_INT 113
24077: PUSH
24078: LD_INT 114
24080: PUSH
24081: LD_INT 116
24083: PUSH
24084: LD_INT 117
24086: PUSH
24087: LD_INT 118
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: ST_TO_ADDR
24113: GO 24512
24115: LD_INT 18
24117: DOUBLE
24118: EQUAL
24119: IFTRUE 24123
24121: GO 24271
24123: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24124: LD_ADDR_VAR 0 2
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: LD_INT 7
24140: PUSH
24141: LD_INT 11
24143: PUSH
24144: LD_INT 12
24146: PUSH
24147: LD_INT 15
24149: PUSH
24150: LD_INT 16
24152: PUSH
24153: LD_INT 20
24155: PUSH
24156: LD_INT 21
24158: PUSH
24159: LD_INT 22
24161: PUSH
24162: LD_INT 23
24164: PUSH
24165: LD_INT 25
24167: PUSH
24168: LD_INT 26
24170: PUSH
24171: LD_INT 30
24173: PUSH
24174: LD_INT 31
24176: PUSH
24177: LD_INT 32
24179: PUSH
24180: LD_INT 33
24182: PUSH
24183: LD_INT 34
24185: PUSH
24186: LD_INT 35
24188: PUSH
24189: LD_INT 36
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 101
24217: PUSH
24218: LD_INT 102
24220: PUSH
24221: LD_INT 103
24223: PUSH
24224: LD_INT 106
24226: PUSH
24227: LD_INT 108
24229: PUSH
24230: LD_INT 112
24232: PUSH
24233: LD_INT 113
24235: PUSH
24236: LD_INT 114
24238: PUSH
24239: LD_INT 115
24241: PUSH
24242: LD_INT 116
24244: PUSH
24245: LD_INT 117
24247: PUSH
24248: LD_INT 118
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: ST_TO_ADDR
24269: GO 24512
24271: LD_INT 19
24273: DOUBLE
24274: EQUAL
24275: IFTRUE 24279
24277: GO 24511
24279: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: LD_INT 3
24293: PUSH
24294: LD_INT 4
24296: PUSH
24297: LD_INT 5
24299: PUSH
24300: LD_INT 6
24302: PUSH
24303: LD_INT 7
24305: PUSH
24306: LD_INT 8
24308: PUSH
24309: LD_INT 9
24311: PUSH
24312: LD_INT 10
24314: PUSH
24315: LD_INT 11
24317: PUSH
24318: LD_INT 12
24320: PUSH
24321: LD_INT 13
24323: PUSH
24324: LD_INT 14
24326: PUSH
24327: LD_INT 15
24329: PUSH
24330: LD_INT 16
24332: PUSH
24333: LD_INT 17
24335: PUSH
24336: LD_INT 18
24338: PUSH
24339: LD_INT 19
24341: PUSH
24342: LD_INT 20
24344: PUSH
24345: LD_INT 21
24347: PUSH
24348: LD_INT 22
24350: PUSH
24351: LD_INT 23
24353: PUSH
24354: LD_INT 24
24356: PUSH
24357: LD_INT 25
24359: PUSH
24360: LD_INT 26
24362: PUSH
24363: LD_INT 27
24365: PUSH
24366: LD_INT 28
24368: PUSH
24369: LD_INT 29
24371: PUSH
24372: LD_INT 30
24374: PUSH
24375: LD_INT 31
24377: PUSH
24378: LD_INT 32
24380: PUSH
24381: LD_INT 33
24383: PUSH
24384: LD_INT 34
24386: PUSH
24387: LD_INT 35
24389: PUSH
24390: LD_INT 36
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 101
24433: PUSH
24434: LD_INT 102
24436: PUSH
24437: LD_INT 103
24439: PUSH
24440: LD_INT 104
24442: PUSH
24443: LD_INT 105
24445: PUSH
24446: LD_INT 106
24448: PUSH
24449: LD_INT 107
24451: PUSH
24452: LD_INT 108
24454: PUSH
24455: LD_INT 109
24457: PUSH
24458: LD_INT 110
24460: PUSH
24461: LD_INT 111
24463: PUSH
24464: LD_INT 112
24466: PUSH
24467: LD_INT 113
24469: PUSH
24470: LD_INT 114
24472: PUSH
24473: LD_INT 115
24475: PUSH
24476: LD_INT 116
24478: PUSH
24479: LD_INT 117
24481: PUSH
24482: LD_INT 118
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: ST_TO_ADDR
24509: GO 24512
24511: POP
// end else
24512: GO 24743
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: LD_INT 4
24530: PUSH
24531: LD_INT 5
24533: PUSH
24534: LD_INT 6
24536: PUSH
24537: LD_INT 7
24539: PUSH
24540: LD_INT 8
24542: PUSH
24543: LD_INT 9
24545: PUSH
24546: LD_INT 10
24548: PUSH
24549: LD_INT 11
24551: PUSH
24552: LD_INT 12
24554: PUSH
24555: LD_INT 13
24557: PUSH
24558: LD_INT 14
24560: PUSH
24561: LD_INT 15
24563: PUSH
24564: LD_INT 16
24566: PUSH
24567: LD_INT 17
24569: PUSH
24570: LD_INT 18
24572: PUSH
24573: LD_INT 19
24575: PUSH
24576: LD_INT 20
24578: PUSH
24579: LD_INT 21
24581: PUSH
24582: LD_INT 22
24584: PUSH
24585: LD_INT 23
24587: PUSH
24588: LD_INT 24
24590: PUSH
24591: LD_INT 25
24593: PUSH
24594: LD_INT 26
24596: PUSH
24597: LD_INT 27
24599: PUSH
24600: LD_INT 28
24602: PUSH
24603: LD_INT 29
24605: PUSH
24606: LD_INT 30
24608: PUSH
24609: LD_INT 31
24611: PUSH
24612: LD_INT 32
24614: PUSH
24615: LD_INT 33
24617: PUSH
24618: LD_INT 34
24620: PUSH
24621: LD_INT 35
24623: PUSH
24624: LD_INT 36
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 101
24667: PUSH
24668: LD_INT 102
24670: PUSH
24671: LD_INT 103
24673: PUSH
24674: LD_INT 104
24676: PUSH
24677: LD_INT 105
24679: PUSH
24680: LD_INT 106
24682: PUSH
24683: LD_INT 107
24685: PUSH
24686: LD_INT 108
24688: PUSH
24689: LD_INT 109
24691: PUSH
24692: LD_INT 110
24694: PUSH
24695: LD_INT 111
24697: PUSH
24698: LD_INT 112
24700: PUSH
24701: LD_INT 113
24703: PUSH
24704: LD_INT 114
24706: PUSH
24707: LD_INT 115
24709: PUSH
24710: LD_INT 116
24712: PUSH
24713: LD_INT 117
24715: PUSH
24716: LD_INT 118
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: ST_TO_ADDR
// if result then
24743: LD_VAR 0 2
24747: IFFALSE 25533
// begin normal :=  ;
24749: LD_ADDR_VAR 0 5
24753: PUSH
24754: LD_STRING 
24756: ST_TO_ADDR
// hardcore :=  ;
24757: LD_ADDR_VAR 0 6
24761: PUSH
24762: LD_STRING 
24764: ST_TO_ADDR
// active :=  ;
24765: LD_ADDR_VAR 0 7
24769: PUSH
24770: LD_STRING 
24772: ST_TO_ADDR
// for i = 1 to normalCounter do
24773: LD_ADDR_VAR 0 8
24777: PUSH
24778: DOUBLE
24779: LD_INT 1
24781: DEC
24782: ST_TO_ADDR
24783: LD_EXP 72
24787: PUSH
24788: FOR_TO
24789: IFFALSE 24890
// begin tmp := 0 ;
24791: LD_ADDR_VAR 0 3
24795: PUSH
24796: LD_STRING 0
24798: ST_TO_ADDR
// if result [ 1 ] then
24799: LD_VAR 0 2
24803: PUSH
24804: LD_INT 1
24806: ARRAY
24807: IFFALSE 24872
// if result [ 1 ] [ 1 ] = i then
24809: LD_VAR 0 2
24813: PUSH
24814: LD_INT 1
24816: ARRAY
24817: PUSH
24818: LD_INT 1
24820: ARRAY
24821: PUSH
24822: LD_VAR 0 8
24826: EQUAL
24827: IFFALSE 24872
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24829: LD_ADDR_VAR 0 2
24833: PUSH
24834: LD_VAR 0 2
24838: PPUSH
24839: LD_INT 1
24841: PPUSH
24842: LD_VAR 0 2
24846: PUSH
24847: LD_INT 1
24849: ARRAY
24850: PPUSH
24851: LD_INT 1
24853: PPUSH
24854: CALL_OW 3
24858: PPUSH
24859: CALL_OW 1
24863: ST_TO_ADDR
// tmp := 1 ;
24864: LD_ADDR_VAR 0 3
24868: PUSH
24869: LD_STRING 1
24871: ST_TO_ADDR
// end ; normal := normal & tmp ;
24872: LD_ADDR_VAR 0 5
24876: PUSH
24877: LD_VAR 0 5
24881: PUSH
24882: LD_VAR 0 3
24886: STR
24887: ST_TO_ADDR
// end ;
24888: GO 24788
24890: POP
24891: POP
// for i = 1 to hardcoreCounter do
24892: LD_ADDR_VAR 0 8
24896: PUSH
24897: DOUBLE
24898: LD_INT 1
24900: DEC
24901: ST_TO_ADDR
24902: LD_EXP 73
24906: PUSH
24907: FOR_TO
24908: IFFALSE 25013
// begin tmp := 0 ;
24910: LD_ADDR_VAR 0 3
24914: PUSH
24915: LD_STRING 0
24917: ST_TO_ADDR
// if result [ 2 ] then
24918: LD_VAR 0 2
24922: PUSH
24923: LD_INT 2
24925: ARRAY
24926: IFFALSE 24995
// if result [ 2 ] [ 1 ] = 100 + i then
24928: LD_VAR 0 2
24932: PUSH
24933: LD_INT 2
24935: ARRAY
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: PUSH
24941: LD_INT 100
24943: PUSH
24944: LD_VAR 0 8
24948: PLUS
24949: EQUAL
24950: IFFALSE 24995
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24952: LD_ADDR_VAR 0 2
24956: PUSH
24957: LD_VAR 0 2
24961: PPUSH
24962: LD_INT 2
24964: PPUSH
24965: LD_VAR 0 2
24969: PUSH
24970: LD_INT 2
24972: ARRAY
24973: PPUSH
24974: LD_INT 1
24976: PPUSH
24977: CALL_OW 3
24981: PPUSH
24982: CALL_OW 1
24986: ST_TO_ADDR
// tmp := 1 ;
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_STRING 1
24994: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24995: LD_ADDR_VAR 0 6
24999: PUSH
25000: LD_VAR 0 6
25004: PUSH
25005: LD_VAR 0 3
25009: STR
25010: ST_TO_ADDR
// end ;
25011: GO 24907
25013: POP
25014: POP
// if isGameLoad then
25015: LD_VAR 0 1
25019: IFFALSE 25494
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25021: LD_ADDR_VAR 0 4
25025: PUSH
25026: LD_EXP 76
25030: PUSH
25031: LD_EXP 75
25035: PUSH
25036: LD_EXP 77
25040: PUSH
25041: LD_EXP 74
25045: PUSH
25046: LD_EXP 78
25050: PUSH
25051: LD_EXP 79
25055: PUSH
25056: LD_EXP 80
25060: PUSH
25061: LD_EXP 81
25065: PUSH
25066: LD_EXP 82
25070: PUSH
25071: LD_EXP 83
25075: PUSH
25076: LD_EXP 84
25080: PUSH
25081: LD_EXP 85
25085: PUSH
25086: LD_EXP 86
25090: PUSH
25091: LD_EXP 87
25095: PUSH
25096: LD_EXP 95
25100: PUSH
25101: LD_EXP 96
25105: PUSH
25106: LD_EXP 97
25110: PUSH
25111: LD_EXP 98
25115: PUSH
25116: LD_EXP 100
25120: PUSH
25121: LD_EXP 101
25125: PUSH
25126: LD_EXP 102
25130: PUSH
25131: LD_EXP 105
25135: PUSH
25136: LD_EXP 107
25140: PUSH
25141: LD_EXP 108
25145: PUSH
25146: LD_EXP 109
25150: PUSH
25151: LD_EXP 111
25155: PUSH
25156: LD_EXP 112
25160: PUSH
25161: LD_EXP 115
25165: PUSH
25166: LD_EXP 116
25170: PUSH
25171: LD_EXP 117
25175: PUSH
25176: LD_EXP 118
25180: PUSH
25181: LD_EXP 119
25185: PUSH
25186: LD_EXP 120
25190: PUSH
25191: LD_EXP 121
25195: PUSH
25196: LD_EXP 122
25200: PUSH
25201: LD_EXP 123
25205: PUSH
25206: LD_EXP 88
25210: PUSH
25211: LD_EXP 89
25215: PUSH
25216: LD_EXP 92
25220: PUSH
25221: LD_EXP 93
25225: PUSH
25226: LD_EXP 94
25230: PUSH
25231: LD_EXP 90
25235: PUSH
25236: LD_EXP 91
25240: PUSH
25241: LD_EXP 99
25245: PUSH
25246: LD_EXP 103
25250: PUSH
25251: LD_EXP 104
25255: PUSH
25256: LD_EXP 106
25260: PUSH
25261: LD_EXP 110
25265: PUSH
25266: LD_EXP 113
25270: PUSH
25271: LD_EXP 114
25275: PUSH
25276: LD_EXP 124
25280: PUSH
25281: LD_EXP 125
25285: PUSH
25286: LD_EXP 126
25290: PUSH
25291: LD_EXP 127
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: ST_TO_ADDR
// tmp :=  ;
25352: LD_ADDR_VAR 0 3
25356: PUSH
25357: LD_STRING 
25359: ST_TO_ADDR
// for i = 1 to normalCounter do
25360: LD_ADDR_VAR 0 8
25364: PUSH
25365: DOUBLE
25366: LD_INT 1
25368: DEC
25369: ST_TO_ADDR
25370: LD_EXP 72
25374: PUSH
25375: FOR_TO
25376: IFFALSE 25412
// begin if flags [ i ] then
25378: LD_VAR 0 4
25382: PUSH
25383: LD_VAR 0 8
25387: ARRAY
25388: IFFALSE 25410
// tmp := tmp & i & ; ;
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_VAR 0 3
25399: PUSH
25400: LD_VAR 0 8
25404: STR
25405: PUSH
25406: LD_STRING ;
25408: STR
25409: ST_TO_ADDR
// end ;
25410: GO 25375
25412: POP
25413: POP
// for i = 1 to hardcoreCounter do
25414: LD_ADDR_VAR 0 8
25418: PUSH
25419: DOUBLE
25420: LD_INT 1
25422: DEC
25423: ST_TO_ADDR
25424: LD_EXP 73
25428: PUSH
25429: FOR_TO
25430: IFFALSE 25476
// begin if flags [ normalCounter + i ] then
25432: LD_VAR 0 4
25436: PUSH
25437: LD_EXP 72
25441: PUSH
25442: LD_VAR 0 8
25446: PLUS
25447: ARRAY
25448: IFFALSE 25474
// tmp := tmp & ( 100 + i ) & ; ;
25450: LD_ADDR_VAR 0 3
25454: PUSH
25455: LD_VAR 0 3
25459: PUSH
25460: LD_INT 100
25462: PUSH
25463: LD_VAR 0 8
25467: PLUS
25468: STR
25469: PUSH
25470: LD_STRING ;
25472: STR
25473: ST_TO_ADDR
// end ;
25474: GO 25429
25476: POP
25477: POP
// if tmp then
25478: LD_VAR 0 3
25482: IFFALSE 25494
// active := tmp ;
25484: LD_ADDR_VAR 0 7
25488: PUSH
25489: LD_VAR 0 3
25493: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25494: LD_STRING getStreamItemsFromMission("
25496: PUSH
25497: LD_VAR 0 5
25501: STR
25502: PUSH
25503: LD_STRING ","
25505: STR
25506: PUSH
25507: LD_VAR 0 6
25511: STR
25512: PUSH
25513: LD_STRING ","
25515: STR
25516: PUSH
25517: LD_VAR 0 7
25521: STR
25522: PUSH
25523: LD_STRING ")
25525: STR
25526: PPUSH
25527: CALL_OW 559
// end else
25531: GO 25540
// ToLua ( getStreamItemsFromMission("","","") ) ;
25533: LD_STRING getStreamItemsFromMission("","","")
25535: PPUSH
25536: CALL_OW 559
// end ;
25540: LD_VAR 0 2
25544: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25545: LD_EXP 71
25549: PUSH
25550: LD_EXP 76
25554: AND
25555: IFFALSE 25679
25557: GO 25559
25559: DISABLE
25560: LD_INT 0
25562: PPUSH
25563: PPUSH
// begin enable ;
25564: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25565: LD_ADDR_VAR 0 2
25569: PUSH
25570: LD_INT 22
25572: PUSH
25573: LD_OWVAR 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 34
25587: PUSH
25588: LD_INT 7
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 34
25597: PUSH
25598: LD_INT 45
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 34
25607: PUSH
25608: LD_INT 28
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 34
25617: PUSH
25618: LD_INT 47
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PPUSH
25636: CALL_OW 69
25640: ST_TO_ADDR
// if not tmp then
25641: LD_VAR 0 2
25645: NOT
25646: IFFALSE 25650
// exit ;
25648: GO 25679
// for i in tmp do
25650: LD_ADDR_VAR 0 1
25654: PUSH
25655: LD_VAR 0 2
25659: PUSH
25660: FOR_IN
25661: IFFALSE 25677
// begin SetLives ( i , 0 ) ;
25663: LD_VAR 0 1
25667: PPUSH
25668: LD_INT 0
25670: PPUSH
25671: CALL_OW 234
// end ;
25675: GO 25660
25677: POP
25678: POP
// end ;
25679: PPOPN 2
25681: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25682: LD_EXP 71
25686: PUSH
25687: LD_EXP 77
25691: AND
25692: IFFALSE 25776
25694: GO 25696
25696: DISABLE
25697: LD_INT 0
25699: PPUSH
25700: PPUSH
// begin enable ;
25701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25702: LD_ADDR_VAR 0 2
25706: PUSH
25707: LD_INT 22
25709: PUSH
25710: LD_OWVAR 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 32
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PPUSH
25733: CALL_OW 69
25737: ST_TO_ADDR
// if not tmp then
25738: LD_VAR 0 2
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25776
// for i in tmp do
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: LD_VAR 0 2
25756: PUSH
25757: FOR_IN
25758: IFFALSE 25774
// begin SetLives ( i , 0 ) ;
25760: LD_VAR 0 1
25764: PPUSH
25765: LD_INT 0
25767: PPUSH
25768: CALL_OW 234
// end ;
25772: GO 25757
25774: POP
25775: POP
// end ;
25776: PPOPN 2
25778: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25779: LD_EXP 71
25783: PUSH
25784: LD_EXP 74
25788: AND
25789: IFFALSE 25882
25791: GO 25793
25793: DISABLE
25794: LD_INT 0
25796: PPUSH
// begin enable ;
25797: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25798: LD_ADDR_VAR 0 1
25802: PUSH
25803: LD_INT 22
25805: PUSH
25806: LD_OWVAR 2
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 25
25820: PUSH
25821: LD_INT 5
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 25
25830: PUSH
25831: LD_INT 9
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 25
25840: PUSH
25841: LD_INT 8
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PPUSH
25858: CALL_OW 69
25862: PUSH
25863: FOR_IN
25864: IFFALSE 25880
// begin SetClass ( i , 1 ) ;
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_INT 1
25873: PPUSH
25874: CALL_OW 336
// end ;
25878: GO 25863
25880: POP
25881: POP
// end ;
25882: PPOPN 1
25884: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25885: LD_EXP 71
25889: PUSH
25890: LD_EXP 75
25894: AND
25895: PUSH
25896: LD_OWVAR 65
25900: PUSH
25901: LD_INT 7
25903: LESS
25904: AND
25905: IFFALSE 25919
25907: GO 25909
25909: DISABLE
// begin enable ;
25910: ENABLE
// game_speed := 7 ;
25911: LD_ADDR_OWVAR 65
25915: PUSH
25916: LD_INT 7
25918: ST_TO_ADDR
// end ;
25919: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25920: LD_EXP 71
25924: PUSH
25925: LD_EXP 78
25929: AND
25930: IFFALSE 26132
25932: GO 25934
25934: DISABLE
25935: LD_INT 0
25937: PPUSH
25938: PPUSH
25939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25940: LD_ADDR_VAR 0 3
25944: PUSH
25945: LD_INT 81
25947: PUSH
25948: LD_OWVAR 2
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 21
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PPUSH
25971: CALL_OW 69
25975: ST_TO_ADDR
// if not tmp then
25976: LD_VAR 0 3
25980: NOT
25981: IFFALSE 25985
// exit ;
25983: GO 26132
// if tmp > 5 then
25985: LD_VAR 0 3
25989: PUSH
25990: LD_INT 5
25992: GREATER
25993: IFFALSE 26005
// k := 5 else
25995: LD_ADDR_VAR 0 2
25999: PUSH
26000: LD_INT 5
26002: ST_TO_ADDR
26003: GO 26015
// k := tmp ;
26005: LD_ADDR_VAR 0 2
26009: PUSH
26010: LD_VAR 0 3
26014: ST_TO_ADDR
// for i := 1 to k do
26015: LD_ADDR_VAR 0 1
26019: PUSH
26020: DOUBLE
26021: LD_INT 1
26023: DEC
26024: ST_TO_ADDR
26025: LD_VAR 0 2
26029: PUSH
26030: FOR_TO
26031: IFFALSE 26130
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26033: LD_VAR 0 3
26037: PUSH
26038: LD_VAR 0 1
26042: ARRAY
26043: PPUSH
26044: LD_VAR 0 1
26048: PUSH
26049: LD_INT 4
26051: MOD
26052: PUSH
26053: LD_INT 1
26055: PLUS
26056: PPUSH
26057: CALL_OW 259
26061: PUSH
26062: LD_INT 10
26064: LESS
26065: IFFALSE 26128
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26067: LD_VAR 0 3
26071: PUSH
26072: LD_VAR 0 1
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 1
26082: PUSH
26083: LD_INT 4
26085: MOD
26086: PUSH
26087: LD_INT 1
26089: PLUS
26090: PPUSH
26091: LD_VAR 0 3
26095: PUSH
26096: LD_VAR 0 1
26100: ARRAY
26101: PPUSH
26102: LD_VAR 0 1
26106: PUSH
26107: LD_INT 4
26109: MOD
26110: PUSH
26111: LD_INT 1
26113: PLUS
26114: PPUSH
26115: CALL_OW 259
26119: PUSH
26120: LD_INT 1
26122: PLUS
26123: PPUSH
26124: CALL_OW 237
26128: GO 26030
26130: POP
26131: POP
// end ;
26132: PPOPN 3
26134: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26135: LD_EXP 71
26139: PUSH
26140: LD_EXP 79
26144: AND
26145: IFFALSE 26165
26147: GO 26149
26149: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26150: LD_INT 4
26152: PPUSH
26153: LD_OWVAR 2
26157: PPUSH
26158: LD_INT 0
26160: PPUSH
26161: CALL_OW 324
26165: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26166: LD_EXP 71
26170: PUSH
26171: LD_EXP 108
26175: AND
26176: IFFALSE 26196
26178: GO 26180
26180: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26181: LD_INT 19
26183: PPUSH
26184: LD_OWVAR 2
26188: PPUSH
26189: LD_INT 0
26191: PPUSH
26192: CALL_OW 324
26196: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26197: LD_EXP 71
26201: PUSH
26202: LD_EXP 80
26206: AND
26207: IFFALSE 26309
26209: GO 26211
26211: DISABLE
26212: LD_INT 0
26214: PPUSH
26215: PPUSH
// begin enable ;
26216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26217: LD_ADDR_VAR 0 2
26221: PUSH
26222: LD_INT 22
26224: PUSH
26225: LD_OWVAR 2
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 34
26239: PUSH
26240: LD_INT 11
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 34
26249: PUSH
26250: LD_INT 30
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PPUSH
26266: CALL_OW 69
26270: ST_TO_ADDR
// if not tmp then
26271: LD_VAR 0 2
26275: NOT
26276: IFFALSE 26280
// exit ;
26278: GO 26309
// for i in tmp do
26280: LD_ADDR_VAR 0 1
26284: PUSH
26285: LD_VAR 0 2
26289: PUSH
26290: FOR_IN
26291: IFFALSE 26307
// begin SetLives ( i , 0 ) ;
26293: LD_VAR 0 1
26297: PPUSH
26298: LD_INT 0
26300: PPUSH
26301: CALL_OW 234
// end ;
26305: GO 26290
26307: POP
26308: POP
// end ;
26309: PPOPN 2
26311: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26312: LD_EXP 71
26316: PUSH
26317: LD_EXP 81
26321: AND
26322: IFFALSE 26342
26324: GO 26326
26326: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26327: LD_INT 32
26329: PPUSH
26330: LD_OWVAR 2
26334: PPUSH
26335: LD_INT 0
26337: PPUSH
26338: CALL_OW 324
26342: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26343: LD_EXP 71
26347: PUSH
26348: LD_EXP 82
26352: AND
26353: IFFALSE 26534
26355: GO 26357
26357: DISABLE
26358: LD_INT 0
26360: PPUSH
26361: PPUSH
26362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26363: LD_ADDR_VAR 0 2
26367: PUSH
26368: LD_INT 22
26370: PUSH
26371: LD_OWVAR 2
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 33
26382: PUSH
26383: LD_INT 3
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 69
26398: ST_TO_ADDR
// if not tmp then
26399: LD_VAR 0 2
26403: NOT
26404: IFFALSE 26408
// exit ;
26406: GO 26534
// side := 0 ;
26408: LD_ADDR_VAR 0 3
26412: PUSH
26413: LD_INT 0
26415: ST_TO_ADDR
// for i := 1 to 8 do
26416: LD_ADDR_VAR 0 1
26420: PUSH
26421: DOUBLE
26422: LD_INT 1
26424: DEC
26425: ST_TO_ADDR
26426: LD_INT 8
26428: PUSH
26429: FOR_TO
26430: IFFALSE 26478
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26432: LD_OWVAR 2
26436: PUSH
26437: LD_VAR 0 1
26441: NONEQUAL
26442: PUSH
26443: LD_OWVAR 2
26447: PPUSH
26448: LD_VAR 0 1
26452: PPUSH
26453: CALL_OW 81
26457: PUSH
26458: LD_INT 2
26460: EQUAL
26461: AND
26462: IFFALSE 26476
// begin side := i ;
26464: LD_ADDR_VAR 0 3
26468: PUSH
26469: LD_VAR 0 1
26473: ST_TO_ADDR
// break ;
26474: GO 26478
// end ;
26476: GO 26429
26478: POP
26479: POP
// if not side then
26480: LD_VAR 0 3
26484: NOT
26485: IFFALSE 26489
// exit ;
26487: GO 26534
// for i := 1 to tmp do
26489: LD_ADDR_VAR 0 1
26493: PUSH
26494: DOUBLE
26495: LD_INT 1
26497: DEC
26498: ST_TO_ADDR
26499: LD_VAR 0 2
26503: PUSH
26504: FOR_TO
26505: IFFALSE 26532
// if Prob ( 60 ) then
26507: LD_INT 60
26509: PPUSH
26510: CALL_OW 13
26514: IFFALSE 26530
// SetSide ( i , side ) ;
26516: LD_VAR 0 1
26520: PPUSH
26521: LD_VAR 0 3
26525: PPUSH
26526: CALL_OW 235
26530: GO 26504
26532: POP
26533: POP
// end ;
26534: PPOPN 3
26536: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26537: LD_EXP 71
26541: PUSH
26542: LD_EXP 84
26546: AND
26547: IFFALSE 26666
26549: GO 26551
26551: DISABLE
26552: LD_INT 0
26554: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26555: LD_ADDR_VAR 0 1
26559: PUSH
26560: LD_INT 22
26562: PUSH
26563: LD_OWVAR 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 21
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 3
26584: PUSH
26585: LD_INT 23
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: PPUSH
26604: CALL_OW 69
26608: PUSH
26609: FOR_IN
26610: IFFALSE 26664
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 257
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: LD_INT 4
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: IN
26640: IFFALSE 26662
// SetClass ( un , rand ( 1 , 4 ) ) ;
26642: LD_VAR 0 1
26646: PPUSH
26647: LD_INT 1
26649: PPUSH
26650: LD_INT 4
26652: PPUSH
26653: CALL_OW 12
26657: PPUSH
26658: CALL_OW 336
26662: GO 26609
26664: POP
26665: POP
// end ;
26666: PPOPN 1
26668: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26669: LD_EXP 71
26673: PUSH
26674: LD_EXP 83
26678: AND
26679: IFFALSE 26758
26681: GO 26683
26683: DISABLE
26684: LD_INT 0
26686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26687: LD_ADDR_VAR 0 1
26691: PUSH
26692: LD_INT 22
26694: PUSH
26695: LD_OWVAR 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 21
26706: PUSH
26707: LD_INT 3
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PPUSH
26718: CALL_OW 69
26722: ST_TO_ADDR
// if not tmp then
26723: LD_VAR 0 1
26727: NOT
26728: IFFALSE 26732
// exit ;
26730: GO 26758
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26732: LD_VAR 0 1
26736: PUSH
26737: LD_INT 1
26739: PPUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 12
26749: ARRAY
26750: PPUSH
26751: LD_INT 100
26753: PPUSH
26754: CALL_OW 234
// end ;
26758: PPOPN 1
26760: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26761: LD_EXP 71
26765: PUSH
26766: LD_EXP 85
26770: AND
26771: IFFALSE 26869
26773: GO 26775
26775: DISABLE
26776: LD_INT 0
26778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26779: LD_ADDR_VAR 0 1
26783: PUSH
26784: LD_INT 22
26786: PUSH
26787: LD_OWVAR 2
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 21
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PPUSH
26810: CALL_OW 69
26814: ST_TO_ADDR
// if not tmp then
26815: LD_VAR 0 1
26819: NOT
26820: IFFALSE 26824
// exit ;
26822: GO 26869
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26824: LD_VAR 0 1
26828: PUSH
26829: LD_INT 1
26831: PPUSH
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 12
26841: ARRAY
26842: PPUSH
26843: LD_INT 1
26845: PPUSH
26846: LD_INT 4
26848: PPUSH
26849: CALL_OW 12
26853: PPUSH
26854: LD_INT 3000
26856: PPUSH
26857: LD_INT 9000
26859: PPUSH
26860: CALL_OW 12
26864: PPUSH
26865: CALL_OW 492
// end ;
26869: PPOPN 1
26871: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26872: LD_EXP 71
26876: PUSH
26877: LD_EXP 86
26881: AND
26882: IFFALSE 26902
26884: GO 26886
26886: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26887: LD_INT 1
26889: PPUSH
26890: LD_OWVAR 2
26894: PPUSH
26895: LD_INT 0
26897: PPUSH
26898: CALL_OW 324
26902: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26903: LD_EXP 71
26907: PUSH
26908: LD_EXP 87
26912: AND
26913: IFFALSE 26996
26915: GO 26917
26917: DISABLE
26918: LD_INT 0
26920: PPUSH
26921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26922: LD_ADDR_VAR 0 2
26926: PUSH
26927: LD_INT 22
26929: PUSH
26930: LD_OWVAR 2
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 21
26941: PUSH
26942: LD_INT 3
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PPUSH
26953: CALL_OW 69
26957: ST_TO_ADDR
// if not tmp then
26958: LD_VAR 0 2
26962: NOT
26963: IFFALSE 26967
// exit ;
26965: GO 26996
// for i in tmp do
26967: LD_ADDR_VAR 0 1
26971: PUSH
26972: LD_VAR 0 2
26976: PUSH
26977: FOR_IN
26978: IFFALSE 26994
// SetBLevel ( i , 10 ) ;
26980: LD_VAR 0 1
26984: PPUSH
26985: LD_INT 10
26987: PPUSH
26988: CALL_OW 241
26992: GO 26977
26994: POP
26995: POP
// end ;
26996: PPOPN 2
26998: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26999: LD_EXP 71
27003: PUSH
27004: LD_EXP 88
27008: AND
27009: IFFALSE 27120
27011: GO 27013
27013: DISABLE
27014: LD_INT 0
27016: PPUSH
27017: PPUSH
27018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27019: LD_ADDR_VAR 0 3
27023: PUSH
27024: LD_INT 22
27026: PUSH
27027: LD_OWVAR 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 25
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PPUSH
27050: CALL_OW 69
27054: ST_TO_ADDR
// if not tmp then
27055: LD_VAR 0 3
27059: NOT
27060: IFFALSE 27064
// exit ;
27062: GO 27120
// un := tmp [ rand ( 1 , tmp ) ] ;
27064: LD_ADDR_VAR 0 2
27068: PUSH
27069: LD_VAR 0 3
27073: PUSH
27074: LD_INT 1
27076: PPUSH
27077: LD_VAR 0 3
27081: PPUSH
27082: CALL_OW 12
27086: ARRAY
27087: ST_TO_ADDR
// if Crawls ( un ) then
27088: LD_VAR 0 2
27092: PPUSH
27093: CALL_OW 318
27097: IFFALSE 27108
// ComWalk ( un ) ;
27099: LD_VAR 0 2
27103: PPUSH
27104: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27108: LD_VAR 0 2
27112: PPUSH
27113: LD_INT 5
27115: PPUSH
27116: CALL_OW 336
// end ;
27120: PPOPN 3
27122: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27123: LD_EXP 71
27127: PUSH
27128: LD_EXP 89
27132: AND
27133: PUSH
27134: LD_OWVAR 67
27138: PUSH
27139: LD_INT 4
27141: LESS
27142: AND
27143: IFFALSE 27162
27145: GO 27147
27147: DISABLE
// begin Difficulty := Difficulty + 1 ;
27148: LD_ADDR_OWVAR 67
27152: PUSH
27153: LD_OWVAR 67
27157: PUSH
27158: LD_INT 1
27160: PLUS
27161: ST_TO_ADDR
// end ;
27162: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27163: LD_EXP 71
27167: PUSH
27168: LD_EXP 90
27172: AND
27173: IFFALSE 27276
27175: GO 27177
27177: DISABLE
27178: LD_INT 0
27180: PPUSH
// begin for i := 1 to 5 do
27181: LD_ADDR_VAR 0 1
27185: PUSH
27186: DOUBLE
27187: LD_INT 1
27189: DEC
27190: ST_TO_ADDR
27191: LD_INT 5
27193: PUSH
27194: FOR_TO
27195: IFFALSE 27274
// begin uc_nation := nation_nature ;
27197: LD_ADDR_OWVAR 21
27201: PUSH
27202: LD_INT 0
27204: ST_TO_ADDR
// uc_side := 0 ;
27205: LD_ADDR_OWVAR 20
27209: PUSH
27210: LD_INT 0
27212: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27213: LD_ADDR_OWVAR 29
27217: PUSH
27218: LD_INT 12
27220: PUSH
27221: LD_INT 12
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: ST_TO_ADDR
// hc_agressivity := 20 ;
27228: LD_ADDR_OWVAR 35
27232: PUSH
27233: LD_INT 20
27235: ST_TO_ADDR
// hc_class := class_tiger ;
27236: LD_ADDR_OWVAR 28
27240: PUSH
27241: LD_INT 14
27243: ST_TO_ADDR
// hc_gallery :=  ;
27244: LD_ADDR_OWVAR 33
27248: PUSH
27249: LD_STRING 
27251: ST_TO_ADDR
// hc_name :=  ;
27252: LD_ADDR_OWVAR 26
27256: PUSH
27257: LD_STRING 
27259: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27260: CALL_OW 44
27264: PPUSH
27265: LD_INT 0
27267: PPUSH
27268: CALL_OW 51
// end ;
27272: GO 27194
27274: POP
27275: POP
// end ;
27276: PPOPN 1
27278: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27279: LD_EXP 71
27283: PUSH
27284: LD_EXP 91
27288: AND
27289: IFFALSE 27298
27291: GO 27293
27293: DISABLE
// StreamSibBomb ;
27294: CALL 27299 0 0
27298: END
// export function StreamSibBomb ; var i , x , y ; begin
27299: LD_INT 0
27301: PPUSH
27302: PPUSH
27303: PPUSH
27304: PPUSH
// result := false ;
27305: LD_ADDR_VAR 0 1
27309: PUSH
27310: LD_INT 0
27312: ST_TO_ADDR
// for i := 1 to 16 do
27313: LD_ADDR_VAR 0 2
27317: PUSH
27318: DOUBLE
27319: LD_INT 1
27321: DEC
27322: ST_TO_ADDR
27323: LD_INT 16
27325: PUSH
27326: FOR_TO
27327: IFFALSE 27526
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27329: LD_ADDR_VAR 0 3
27333: PUSH
27334: LD_INT 10
27336: PUSH
27337: LD_INT 20
27339: PUSH
27340: LD_INT 30
27342: PUSH
27343: LD_INT 40
27345: PUSH
27346: LD_INT 50
27348: PUSH
27349: LD_INT 60
27351: PUSH
27352: LD_INT 70
27354: PUSH
27355: LD_INT 80
27357: PUSH
27358: LD_INT 90
27360: PUSH
27361: LD_INT 100
27363: PUSH
27364: LD_INT 110
27366: PUSH
27367: LD_INT 120
27369: PUSH
27370: LD_INT 130
27372: PUSH
27373: LD_INT 140
27375: PUSH
27376: LD_INT 150
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PPUSH
27399: LD_INT 15
27401: PPUSH
27402: CALL_OW 12
27406: ARRAY
27407: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27408: LD_ADDR_VAR 0 4
27412: PUSH
27413: LD_INT 10
27415: PUSH
27416: LD_INT 20
27418: PUSH
27419: LD_INT 30
27421: PUSH
27422: LD_INT 40
27424: PUSH
27425: LD_INT 50
27427: PUSH
27428: LD_INT 60
27430: PUSH
27431: LD_INT 70
27433: PUSH
27434: LD_INT 80
27436: PUSH
27437: LD_INT 90
27439: PUSH
27440: LD_INT 100
27442: PUSH
27443: LD_INT 110
27445: PUSH
27446: LD_INT 120
27448: PUSH
27449: LD_INT 130
27451: PUSH
27452: LD_INT 140
27454: PUSH
27455: LD_INT 150
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PPUSH
27478: LD_INT 15
27480: PPUSH
27481: CALL_OW 12
27485: ARRAY
27486: ST_TO_ADDR
// if ValidHex ( x , y ) then
27487: LD_VAR 0 3
27491: PPUSH
27492: LD_VAR 0 4
27496: PPUSH
27497: CALL_OW 488
27501: IFFALSE 27524
// begin result := [ x , y ] ;
27503: LD_ADDR_VAR 0 1
27507: PUSH
27508: LD_VAR 0 3
27512: PUSH
27513: LD_VAR 0 4
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: ST_TO_ADDR
// break ;
27522: GO 27526
// end ; end ;
27524: GO 27326
27526: POP
27527: POP
// if result then
27528: LD_VAR 0 1
27532: IFFALSE 27592
// begin ToLua ( playSibBomb() ) ;
27534: LD_STRING playSibBomb()
27536: PPUSH
27537: CALL_OW 559
// wait ( 0 0$14 ) ;
27541: LD_INT 490
27543: PPUSH
27544: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27548: LD_VAR 0 1
27552: PUSH
27553: LD_INT 1
27555: ARRAY
27556: PPUSH
27557: LD_VAR 0 1
27561: PUSH
27562: LD_INT 2
27564: ARRAY
27565: PPUSH
27566: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27570: LD_VAR 0 1
27574: PUSH
27575: LD_INT 1
27577: ARRAY
27578: PPUSH
27579: LD_VAR 0 1
27583: PUSH
27584: LD_INT 2
27586: ARRAY
27587: PPUSH
27588: CALL_OW 429
// end ; end ;
27592: LD_VAR 0 1
27596: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27597: LD_EXP 71
27601: PUSH
27602: LD_EXP 93
27606: AND
27607: IFFALSE 27619
27609: GO 27611
27611: DISABLE
// YouLost (  ) ;
27612: LD_STRING 
27614: PPUSH
27615: CALL_OW 104
27619: END
// every 0 0$1 trigger StreamModeActive and sFog do
27620: LD_EXP 71
27624: PUSH
27625: LD_EXP 92
27629: AND
27630: IFFALSE 27644
27632: GO 27634
27634: DISABLE
// FogOff ( your_side ) ;
27635: LD_OWVAR 2
27639: PPUSH
27640: CALL_OW 344
27644: END
// every 0 0$1 trigger StreamModeActive and sSun do
27645: LD_EXP 71
27649: PUSH
27650: LD_EXP 94
27654: AND
27655: IFFALSE 27683
27657: GO 27659
27659: DISABLE
// begin solar_recharge_percent := 0 ;
27660: LD_ADDR_OWVAR 79
27664: PUSH
27665: LD_INT 0
27667: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27668: LD_INT 10500
27670: PPUSH
27671: CALL_OW 67
// solar_recharge_percent := 100 ;
27675: LD_ADDR_OWVAR 79
27679: PUSH
27680: LD_INT 100
27682: ST_TO_ADDR
// end ;
27683: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27684: LD_EXP 71
27688: PUSH
27689: LD_EXP 95
27693: AND
27694: IFFALSE 27933
27696: GO 27698
27698: DISABLE
27699: LD_INT 0
27701: PPUSH
27702: PPUSH
27703: PPUSH
// begin tmp := [ ] ;
27704: LD_ADDR_VAR 0 3
27708: PUSH
27709: EMPTY
27710: ST_TO_ADDR
// for i := 1 to 6 do
27711: LD_ADDR_VAR 0 1
27715: PUSH
27716: DOUBLE
27717: LD_INT 1
27719: DEC
27720: ST_TO_ADDR
27721: LD_INT 6
27723: PUSH
27724: FOR_TO
27725: IFFALSE 27830
// begin uc_nation := nation_nature ;
27727: LD_ADDR_OWVAR 21
27731: PUSH
27732: LD_INT 0
27734: ST_TO_ADDR
// uc_side := 0 ;
27735: LD_ADDR_OWVAR 20
27739: PUSH
27740: LD_INT 0
27742: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27743: LD_ADDR_OWVAR 29
27747: PUSH
27748: LD_INT 12
27750: PUSH
27751: LD_INT 12
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: ST_TO_ADDR
// hc_agressivity := 20 ;
27758: LD_ADDR_OWVAR 35
27762: PUSH
27763: LD_INT 20
27765: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27766: LD_ADDR_OWVAR 28
27770: PUSH
27771: LD_INT 17
27773: ST_TO_ADDR
// hc_gallery :=  ;
27774: LD_ADDR_OWVAR 33
27778: PUSH
27779: LD_STRING 
27781: ST_TO_ADDR
// hc_name :=  ;
27782: LD_ADDR_OWVAR 26
27786: PUSH
27787: LD_STRING 
27789: ST_TO_ADDR
// un := CreateHuman ;
27790: LD_ADDR_VAR 0 2
27794: PUSH
27795: CALL_OW 44
27799: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27800: LD_VAR 0 2
27804: PPUSH
27805: LD_INT 1
27807: PPUSH
27808: CALL_OW 51
// tmp := tmp ^ un ;
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_VAR 0 3
27821: PUSH
27822: LD_VAR 0 2
27826: ADD
27827: ST_TO_ADDR
// end ;
27828: GO 27724
27830: POP
27831: POP
// repeat wait ( 0 0$1 ) ;
27832: LD_INT 35
27834: PPUSH
27835: CALL_OW 67
// for un in tmp do
27839: LD_ADDR_VAR 0 2
27843: PUSH
27844: LD_VAR 0 3
27848: PUSH
27849: FOR_IN
27850: IFFALSE 27924
// begin if IsDead ( un ) then
27852: LD_VAR 0 2
27856: PPUSH
27857: CALL_OW 301
27861: IFFALSE 27881
// begin tmp := tmp diff un ;
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_VAR 0 3
27872: PUSH
27873: LD_VAR 0 2
27877: DIFF
27878: ST_TO_ADDR
// continue ;
27879: GO 27849
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27881: LD_VAR 0 2
27885: PPUSH
27886: LD_INT 3
27888: PUSH
27889: LD_INT 22
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PPUSH
27903: CALL_OW 69
27907: PPUSH
27908: LD_VAR 0 2
27912: PPUSH
27913: CALL_OW 74
27917: PPUSH
27918: CALL_OW 115
// end ;
27922: GO 27849
27924: POP
27925: POP
// until not tmp ;
27926: LD_VAR 0 3
27930: NOT
27931: IFFALSE 27832
// end ;
27933: PPOPN 3
27935: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27936: LD_EXP 71
27940: PUSH
27941: LD_EXP 96
27945: AND
27946: IFFALSE 28000
27948: GO 27950
27950: DISABLE
// begin ToLua ( displayTroll(); ) ;
27951: LD_STRING displayTroll();
27953: PPUSH
27954: CALL_OW 559
// wait ( 3 3$00 ) ;
27958: LD_INT 6300
27960: PPUSH
27961: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27965: LD_STRING hideTroll();
27967: PPUSH
27968: CALL_OW 559
// wait ( 1 1$00 ) ;
27972: LD_INT 2100
27974: PPUSH
27975: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27979: LD_STRING displayTroll();
27981: PPUSH
27982: CALL_OW 559
// wait ( 1 1$00 ) ;
27986: LD_INT 2100
27988: PPUSH
27989: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27993: LD_STRING hideTroll();
27995: PPUSH
27996: CALL_OW 559
// end ;
28000: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28001: LD_EXP 71
28005: PUSH
28006: LD_EXP 97
28010: AND
28011: IFFALSE 28074
28013: GO 28015
28015: DISABLE
28016: LD_INT 0
28018: PPUSH
// begin p := 0 ;
28019: LD_ADDR_VAR 0 1
28023: PUSH
28024: LD_INT 0
28026: ST_TO_ADDR
// repeat game_speed := 1 ;
28027: LD_ADDR_OWVAR 65
28031: PUSH
28032: LD_INT 1
28034: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28035: LD_INT 35
28037: PPUSH
28038: CALL_OW 67
// p := p + 1 ;
28042: LD_ADDR_VAR 0 1
28046: PUSH
28047: LD_VAR 0 1
28051: PUSH
28052: LD_INT 1
28054: PLUS
28055: ST_TO_ADDR
// until p >= 60 ;
28056: LD_VAR 0 1
28060: PUSH
28061: LD_INT 60
28063: GREATEREQUAL
28064: IFFALSE 28027
// game_speed := 4 ;
28066: LD_ADDR_OWVAR 65
28070: PUSH
28071: LD_INT 4
28073: ST_TO_ADDR
// end ;
28074: PPOPN 1
28076: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28077: LD_EXP 71
28081: PUSH
28082: LD_EXP 98
28086: AND
28087: IFFALSE 28233
28089: GO 28091
28091: DISABLE
28092: LD_INT 0
28094: PPUSH
28095: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28096: LD_ADDR_VAR 0 1
28100: PUSH
28101: LD_INT 22
28103: PUSH
28104: LD_OWVAR 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: LD_INT 30
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 30
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: ST_TO_ADDR
// if not depot then
28150: LD_VAR 0 1
28154: NOT
28155: IFFALSE 28159
// exit ;
28157: GO 28233
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28159: LD_ADDR_VAR 0 2
28163: PUSH
28164: LD_VAR 0 1
28168: PUSH
28169: LD_INT 1
28171: PPUSH
28172: LD_VAR 0 1
28176: PPUSH
28177: CALL_OW 12
28181: ARRAY
28182: PPUSH
28183: CALL_OW 274
28187: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28188: LD_VAR 0 2
28192: PPUSH
28193: LD_INT 1
28195: PPUSH
28196: LD_INT 0
28198: PPUSH
28199: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28203: LD_VAR 0 2
28207: PPUSH
28208: LD_INT 2
28210: PPUSH
28211: LD_INT 0
28213: PPUSH
28214: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28218: LD_VAR 0 2
28222: PPUSH
28223: LD_INT 3
28225: PPUSH
28226: LD_INT 0
28228: PPUSH
28229: CALL_OW 277
// end ;
28233: PPOPN 2
28235: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28236: LD_EXP 71
28240: PUSH
28241: LD_EXP 99
28245: AND
28246: IFFALSE 28343
28248: GO 28250
28250: DISABLE
28251: LD_INT 0
28253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28254: LD_ADDR_VAR 0 1
28258: PUSH
28259: LD_INT 22
28261: PUSH
28262: LD_OWVAR 2
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 21
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 3
28283: PUSH
28284: LD_INT 23
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: PPUSH
28303: CALL_OW 69
28307: ST_TO_ADDR
// if not tmp then
28308: LD_VAR 0 1
28312: NOT
28313: IFFALSE 28317
// exit ;
28315: GO 28343
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28317: LD_VAR 0 1
28321: PUSH
28322: LD_INT 1
28324: PPUSH
28325: LD_VAR 0 1
28329: PPUSH
28330: CALL_OW 12
28334: ARRAY
28335: PPUSH
28336: LD_INT 200
28338: PPUSH
28339: CALL_OW 234
// end ;
28343: PPOPN 1
28345: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28346: LD_EXP 71
28350: PUSH
28351: LD_EXP 100
28355: AND
28356: IFFALSE 28435
28358: GO 28360
28360: DISABLE
28361: LD_INT 0
28363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28364: LD_ADDR_VAR 0 1
28368: PUSH
28369: LD_INT 22
28371: PUSH
28372: LD_OWVAR 2
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 21
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PPUSH
28395: CALL_OW 69
28399: ST_TO_ADDR
// if not tmp then
28400: LD_VAR 0 1
28404: NOT
28405: IFFALSE 28409
// exit ;
28407: GO 28435
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28409: LD_VAR 0 1
28413: PUSH
28414: LD_INT 1
28416: PPUSH
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL_OW 12
28426: ARRAY
28427: PPUSH
28428: LD_INT 60
28430: PPUSH
28431: CALL_OW 234
// end ;
28435: PPOPN 1
28437: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28438: LD_EXP 71
28442: PUSH
28443: LD_EXP 101
28447: AND
28448: IFFALSE 28547
28450: GO 28452
28452: DISABLE
28453: LD_INT 0
28455: PPUSH
28456: PPUSH
// begin enable ;
28457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28458: LD_ADDR_VAR 0 1
28462: PUSH
28463: LD_INT 22
28465: PUSH
28466: LD_OWVAR 2
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 61
28477: PUSH
28478: EMPTY
28479: LIST
28480: PUSH
28481: LD_INT 33
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: PPUSH
28496: CALL_OW 69
28500: ST_TO_ADDR
// if not tmp then
28501: LD_VAR 0 1
28505: NOT
28506: IFFALSE 28510
// exit ;
28508: GO 28547
// for i in tmp do
28510: LD_ADDR_VAR 0 2
28514: PUSH
28515: LD_VAR 0 1
28519: PUSH
28520: FOR_IN
28521: IFFALSE 28545
// if IsControledBy ( i ) then
28523: LD_VAR 0 2
28527: PPUSH
28528: CALL_OW 312
28532: IFFALSE 28543
// ComUnlink ( i ) ;
28534: LD_VAR 0 2
28538: PPUSH
28539: CALL_OW 136
28543: GO 28520
28545: POP
28546: POP
// end ;
28547: PPOPN 2
28549: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28550: LD_EXP 71
28554: PUSH
28555: LD_EXP 102
28559: AND
28560: IFFALSE 28700
28562: GO 28564
28564: DISABLE
28565: LD_INT 0
28567: PPUSH
28568: PPUSH
// begin ToLua ( displayPowell(); ) ;
28569: LD_STRING displayPowell();
28571: PPUSH
28572: CALL_OW 559
// uc_side := 0 ;
28576: LD_ADDR_OWVAR 20
28580: PUSH
28581: LD_INT 0
28583: ST_TO_ADDR
// uc_nation := 2 ;
28584: LD_ADDR_OWVAR 21
28588: PUSH
28589: LD_INT 2
28591: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28592: LD_ADDR_OWVAR 37
28596: PUSH
28597: LD_INT 14
28599: ST_TO_ADDR
// vc_engine := engine_siberite ;
28600: LD_ADDR_OWVAR 39
28604: PUSH
28605: LD_INT 3
28607: ST_TO_ADDR
// vc_control := control_apeman ;
28608: LD_ADDR_OWVAR 38
28612: PUSH
28613: LD_INT 5
28615: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28616: LD_ADDR_OWVAR 40
28620: PUSH
28621: LD_INT 29
28623: ST_TO_ADDR
// un := CreateVehicle ;
28624: LD_ADDR_VAR 0 2
28628: PUSH
28629: CALL_OW 45
28633: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28634: LD_VAR 0 2
28638: PPUSH
28639: LD_INT 1
28641: PPUSH
28642: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28646: LD_INT 35
28648: PPUSH
28649: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28653: LD_VAR 0 2
28657: PPUSH
28658: LD_INT 22
28660: PUSH
28661: LD_OWVAR 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PPUSH
28670: CALL_OW 69
28674: PPUSH
28675: LD_VAR 0 2
28679: PPUSH
28680: CALL_OW 74
28684: PPUSH
28685: CALL_OW 115
// until IsDead ( un ) ;
28689: LD_VAR 0 2
28693: PPUSH
28694: CALL_OW 301
28698: IFFALSE 28646
// end ;
28700: PPOPN 2
28702: END
// every 0 0$1 trigger StreamModeActive and sStu do
28703: LD_EXP 71
28707: PUSH
28708: LD_EXP 110
28712: AND
28713: IFFALSE 28729
28715: GO 28717
28717: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28718: LD_STRING displayStucuk();
28720: PPUSH
28721: CALL_OW 559
// ResetFog ;
28725: CALL_OW 335
// end ;
28729: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28730: LD_EXP 71
28734: PUSH
28735: LD_EXP 103
28739: AND
28740: IFFALSE 28881
28742: GO 28744
28744: DISABLE
28745: LD_INT 0
28747: PPUSH
28748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28749: LD_ADDR_VAR 0 2
28753: PUSH
28754: LD_INT 22
28756: PUSH
28757: LD_OWVAR 2
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 21
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: ST_TO_ADDR
// if not tmp then
28785: LD_VAR 0 2
28789: NOT
28790: IFFALSE 28794
// exit ;
28792: GO 28881
// un := tmp [ rand ( 1 , tmp ) ] ;
28794: LD_ADDR_VAR 0 1
28798: PUSH
28799: LD_VAR 0 2
28803: PUSH
28804: LD_INT 1
28806: PPUSH
28807: LD_VAR 0 2
28811: PPUSH
28812: CALL_OW 12
28816: ARRAY
28817: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28818: LD_VAR 0 1
28822: PPUSH
28823: LD_INT 0
28825: PPUSH
28826: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28830: LD_VAR 0 1
28834: PPUSH
28835: LD_OWVAR 3
28839: PUSH
28840: LD_VAR 0 1
28844: DIFF
28845: PPUSH
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL_OW 74
28855: PPUSH
28856: CALL_OW 115
// wait ( 0 0$20 ) ;
28860: LD_INT 700
28862: PPUSH
28863: CALL_OW 67
// SetSide ( un , your_side ) ;
28867: LD_VAR 0 1
28871: PPUSH
28872: LD_OWVAR 2
28876: PPUSH
28877: CALL_OW 235
// end ;
28881: PPOPN 2
28883: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28884: LD_EXP 71
28888: PUSH
28889: LD_EXP 104
28893: AND
28894: IFFALSE 29000
28896: GO 28898
28898: DISABLE
28899: LD_INT 0
28901: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28902: LD_ADDR_VAR 0 1
28906: PUSH
28907: LD_INT 22
28909: PUSH
28910: LD_OWVAR 2
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 2
28921: PUSH
28922: LD_INT 30
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 30
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PPUSH
28951: CALL_OW 69
28955: ST_TO_ADDR
// if not depot then
28956: LD_VAR 0 1
28960: NOT
28961: IFFALSE 28965
// exit ;
28963: GO 29000
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28965: LD_VAR 0 1
28969: PUSH
28970: LD_INT 1
28972: ARRAY
28973: PPUSH
28974: CALL_OW 250
28978: PPUSH
28979: LD_VAR 0 1
28983: PUSH
28984: LD_INT 1
28986: ARRAY
28987: PPUSH
28988: CALL_OW 251
28992: PPUSH
28993: LD_INT 70
28995: PPUSH
28996: CALL_OW 495
// end ;
29000: PPOPN 1
29002: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29003: LD_EXP 71
29007: PUSH
29008: LD_EXP 105
29012: AND
29013: IFFALSE 29224
29015: GO 29017
29017: DISABLE
29018: LD_INT 0
29020: PPUSH
29021: PPUSH
29022: PPUSH
29023: PPUSH
29024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29025: LD_ADDR_VAR 0 5
29029: PUSH
29030: LD_INT 22
29032: PUSH
29033: LD_OWVAR 2
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 21
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PPUSH
29056: CALL_OW 69
29060: ST_TO_ADDR
// if not tmp then
29061: LD_VAR 0 5
29065: NOT
29066: IFFALSE 29070
// exit ;
29068: GO 29224
// for i in tmp do
29070: LD_ADDR_VAR 0 1
29074: PUSH
29075: LD_VAR 0 5
29079: PUSH
29080: FOR_IN
29081: IFFALSE 29222
// begin d := rand ( 0 , 5 ) ;
29083: LD_ADDR_VAR 0 4
29087: PUSH
29088: LD_INT 0
29090: PPUSH
29091: LD_INT 5
29093: PPUSH
29094: CALL_OW 12
29098: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29099: LD_ADDR_VAR 0 2
29103: PUSH
29104: LD_VAR 0 1
29108: PPUSH
29109: CALL_OW 250
29113: PPUSH
29114: LD_VAR 0 4
29118: PPUSH
29119: LD_INT 3
29121: PPUSH
29122: LD_INT 12
29124: PPUSH
29125: CALL_OW 12
29129: PPUSH
29130: CALL_OW 272
29134: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29135: LD_ADDR_VAR 0 3
29139: PUSH
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL_OW 251
29149: PPUSH
29150: LD_VAR 0 4
29154: PPUSH
29155: LD_INT 3
29157: PPUSH
29158: LD_INT 12
29160: PPUSH
29161: CALL_OW 12
29165: PPUSH
29166: CALL_OW 273
29170: ST_TO_ADDR
// if ValidHex ( x , y ) then
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_VAR 0 3
29180: PPUSH
29181: CALL_OW 488
29185: IFFALSE 29220
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29187: LD_VAR 0 1
29191: PPUSH
29192: LD_VAR 0 2
29196: PPUSH
29197: LD_VAR 0 3
29201: PPUSH
29202: LD_INT 3
29204: PPUSH
29205: LD_INT 6
29207: PPUSH
29208: CALL_OW 12
29212: PPUSH
29213: LD_INT 1
29215: PPUSH
29216: CALL_OW 483
// end ;
29220: GO 29080
29222: POP
29223: POP
// end ;
29224: PPOPN 5
29226: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29227: LD_EXP 71
29231: PUSH
29232: LD_EXP 106
29236: AND
29237: IFFALSE 29331
29239: GO 29241
29241: DISABLE
29242: LD_INT 0
29244: PPUSH
29245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29246: LD_ADDR_VAR 0 2
29250: PUSH
29251: LD_INT 22
29253: PUSH
29254: LD_OWVAR 2
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 32
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 21
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: PPUSH
29288: CALL_OW 69
29292: ST_TO_ADDR
// if not tmp then
29293: LD_VAR 0 2
29297: NOT
29298: IFFALSE 29302
// exit ;
29300: GO 29331
// for i in tmp do
29302: LD_ADDR_VAR 0 1
29306: PUSH
29307: LD_VAR 0 2
29311: PUSH
29312: FOR_IN
29313: IFFALSE 29329
// SetFuel ( i , 0 ) ;
29315: LD_VAR 0 1
29319: PPUSH
29320: LD_INT 0
29322: PPUSH
29323: CALL_OW 240
29327: GO 29312
29329: POP
29330: POP
// end ;
29331: PPOPN 2
29333: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29334: LD_EXP 71
29338: PUSH
29339: LD_EXP 107
29343: AND
29344: IFFALSE 29410
29346: GO 29348
29348: DISABLE
29349: LD_INT 0
29351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29352: LD_ADDR_VAR 0 1
29356: PUSH
29357: LD_INT 22
29359: PUSH
29360: LD_OWVAR 2
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 30
29371: PUSH
29372: LD_INT 29
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PPUSH
29383: CALL_OW 69
29387: ST_TO_ADDR
// if not tmp then
29388: LD_VAR 0 1
29392: NOT
29393: IFFALSE 29397
// exit ;
29395: GO 29410
// DestroyUnit ( tmp [ 1 ] ) ;
29397: LD_VAR 0 1
29401: PUSH
29402: LD_INT 1
29404: ARRAY
29405: PPUSH
29406: CALL_OW 65
// end ;
29410: PPOPN 1
29412: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29413: LD_EXP 71
29417: PUSH
29418: LD_EXP 109
29422: AND
29423: IFFALSE 29552
29425: GO 29427
29427: DISABLE
29428: LD_INT 0
29430: PPUSH
// begin uc_side := 0 ;
29431: LD_ADDR_OWVAR 20
29435: PUSH
29436: LD_INT 0
29438: ST_TO_ADDR
// uc_nation := nation_arabian ;
29439: LD_ADDR_OWVAR 21
29443: PUSH
29444: LD_INT 2
29446: ST_TO_ADDR
// hc_gallery :=  ;
29447: LD_ADDR_OWVAR 33
29451: PUSH
29452: LD_STRING 
29454: ST_TO_ADDR
// hc_name :=  ;
29455: LD_ADDR_OWVAR 26
29459: PUSH
29460: LD_STRING 
29462: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29463: LD_INT 1
29465: PPUSH
29466: LD_INT 11
29468: PPUSH
29469: LD_INT 10
29471: PPUSH
29472: CALL_OW 380
// un := CreateHuman ;
29476: LD_ADDR_VAR 0 1
29480: PUSH
29481: CALL_OW 44
29485: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29486: LD_VAR 0 1
29490: PPUSH
29491: LD_INT 1
29493: PPUSH
29494: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29498: LD_INT 35
29500: PPUSH
29501: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29505: LD_VAR 0 1
29509: PPUSH
29510: LD_INT 22
29512: PUSH
29513: LD_OWVAR 2
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PPUSH
29522: CALL_OW 69
29526: PPUSH
29527: LD_VAR 0 1
29531: PPUSH
29532: CALL_OW 74
29536: PPUSH
29537: CALL_OW 115
// until IsDead ( un ) ;
29541: LD_VAR 0 1
29545: PPUSH
29546: CALL_OW 301
29550: IFFALSE 29498
// end ;
29552: PPOPN 1
29554: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29555: LD_EXP 71
29559: PUSH
29560: LD_EXP 111
29564: AND
29565: IFFALSE 29577
29567: GO 29569
29569: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29570: LD_STRING earthquake(getX(game), 0, 32)
29572: PPUSH
29573: CALL_OW 559
29577: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29578: LD_EXP 71
29582: PUSH
29583: LD_EXP 112
29587: AND
29588: IFFALSE 29679
29590: GO 29592
29592: DISABLE
29593: LD_INT 0
29595: PPUSH
// begin enable ;
29596: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29597: LD_ADDR_VAR 0 1
29601: PUSH
29602: LD_INT 22
29604: PUSH
29605: LD_OWVAR 2
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 21
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 33
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: PPUSH
29639: CALL_OW 69
29643: ST_TO_ADDR
// if not tmp then
29644: LD_VAR 0 1
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 29679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29653: LD_VAR 0 1
29657: PUSH
29658: LD_INT 1
29660: PPUSH
29661: LD_VAR 0 1
29665: PPUSH
29666: CALL_OW 12
29670: ARRAY
29671: PPUSH
29672: LD_INT 1
29674: PPUSH
29675: CALL_OW 234
// end ;
29679: PPOPN 1
29681: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29682: LD_EXP 71
29686: PUSH
29687: LD_EXP 113
29691: AND
29692: IFFALSE 29833
29694: GO 29696
29696: DISABLE
29697: LD_INT 0
29699: PPUSH
29700: PPUSH
29701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29702: LD_ADDR_VAR 0 3
29706: PUSH
29707: LD_INT 22
29709: PUSH
29710: LD_OWVAR 2
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 25
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PPUSH
29733: CALL_OW 69
29737: ST_TO_ADDR
// if not tmp then
29738: LD_VAR 0 3
29742: NOT
29743: IFFALSE 29747
// exit ;
29745: GO 29833
// un := tmp [ rand ( 1 , tmp ) ] ;
29747: LD_ADDR_VAR 0 2
29751: PUSH
29752: LD_VAR 0 3
29756: PUSH
29757: LD_INT 1
29759: PPUSH
29760: LD_VAR 0 3
29764: PPUSH
29765: CALL_OW 12
29769: ARRAY
29770: ST_TO_ADDR
// if Crawls ( un ) then
29771: LD_VAR 0 2
29775: PPUSH
29776: CALL_OW 318
29780: IFFALSE 29791
// ComWalk ( un ) ;
29782: LD_VAR 0 2
29786: PPUSH
29787: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29791: LD_VAR 0 2
29795: PPUSH
29796: LD_INT 9
29798: PPUSH
29799: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29803: LD_INT 28
29805: PPUSH
29806: LD_OWVAR 2
29810: PPUSH
29811: LD_INT 2
29813: PPUSH
29814: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29818: LD_INT 29
29820: PPUSH
29821: LD_OWVAR 2
29825: PPUSH
29826: LD_INT 2
29828: PPUSH
29829: CALL_OW 322
// end ;
29833: PPOPN 3
29835: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29836: LD_EXP 71
29840: PUSH
29841: LD_EXP 114
29845: AND
29846: IFFALSE 29957
29848: GO 29850
29850: DISABLE
29851: LD_INT 0
29853: PPUSH
29854: PPUSH
29855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29856: LD_ADDR_VAR 0 3
29860: PUSH
29861: LD_INT 22
29863: PUSH
29864: LD_OWVAR 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 25
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PPUSH
29887: CALL_OW 69
29891: ST_TO_ADDR
// if not tmp then
29892: LD_VAR 0 3
29896: NOT
29897: IFFALSE 29901
// exit ;
29899: GO 29957
// un := tmp [ rand ( 1 , tmp ) ] ;
29901: LD_ADDR_VAR 0 2
29905: PUSH
29906: LD_VAR 0 3
29910: PUSH
29911: LD_INT 1
29913: PPUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: CALL_OW 12
29923: ARRAY
29924: ST_TO_ADDR
// if Crawls ( un ) then
29925: LD_VAR 0 2
29929: PPUSH
29930: CALL_OW 318
29934: IFFALSE 29945
// ComWalk ( un ) ;
29936: LD_VAR 0 2
29940: PPUSH
29941: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29945: LD_VAR 0 2
29949: PPUSH
29950: LD_INT 8
29952: PPUSH
29953: CALL_OW 336
// end ;
29957: PPOPN 3
29959: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29960: LD_EXP 71
29964: PUSH
29965: LD_EXP 115
29969: AND
29970: IFFALSE 30114
29972: GO 29974
29974: DISABLE
29975: LD_INT 0
29977: PPUSH
29978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29979: LD_ADDR_VAR 0 2
29983: PUSH
29984: LD_INT 22
29986: PUSH
29987: LD_OWVAR 2
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 21
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 34
30011: PUSH
30012: LD_INT 12
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 34
30021: PUSH
30022: LD_INT 51
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 34
30031: PUSH
30032: LD_INT 32
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: PPUSH
30050: CALL_OW 69
30054: ST_TO_ADDR
// if not tmp then
30055: LD_VAR 0 2
30059: NOT
30060: IFFALSE 30064
// exit ;
30062: GO 30114
// for i in tmp do
30064: LD_ADDR_VAR 0 1
30068: PUSH
30069: LD_VAR 0 2
30073: PUSH
30074: FOR_IN
30075: IFFALSE 30112
// if GetCargo ( i , mat_artifact ) = 0 then
30077: LD_VAR 0 1
30081: PPUSH
30082: LD_INT 4
30084: PPUSH
30085: CALL_OW 289
30089: PUSH
30090: LD_INT 0
30092: EQUAL
30093: IFFALSE 30110
// SetCargo ( i , mat_siberit , 100 ) ;
30095: LD_VAR 0 1
30099: PPUSH
30100: LD_INT 3
30102: PPUSH
30103: LD_INT 100
30105: PPUSH
30106: CALL_OW 290
30110: GO 30074
30112: POP
30113: POP
// end ;
30114: PPOPN 2
30116: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30117: LD_EXP 71
30121: PUSH
30122: LD_EXP 116
30126: AND
30127: IFFALSE 30310
30129: GO 30131
30131: DISABLE
30132: LD_INT 0
30134: PPUSH
30135: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30136: LD_ADDR_VAR 0 2
30140: PUSH
30141: LD_INT 22
30143: PUSH
30144: LD_OWVAR 2
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PPUSH
30153: CALL_OW 69
30157: ST_TO_ADDR
// if not tmp then
30158: LD_VAR 0 2
30162: NOT
30163: IFFALSE 30167
// exit ;
30165: GO 30310
// for i := 1 to 2 do
30167: LD_ADDR_VAR 0 1
30171: PUSH
30172: DOUBLE
30173: LD_INT 1
30175: DEC
30176: ST_TO_ADDR
30177: LD_INT 2
30179: PUSH
30180: FOR_TO
30181: IFFALSE 30308
// begin uc_side := your_side ;
30183: LD_ADDR_OWVAR 20
30187: PUSH
30188: LD_OWVAR 2
30192: ST_TO_ADDR
// uc_nation := nation_american ;
30193: LD_ADDR_OWVAR 21
30197: PUSH
30198: LD_INT 1
30200: ST_TO_ADDR
// vc_chassis := us_morphling ;
30201: LD_ADDR_OWVAR 37
30205: PUSH
30206: LD_INT 5
30208: ST_TO_ADDR
// vc_engine := engine_siberite ;
30209: LD_ADDR_OWVAR 39
30213: PUSH
30214: LD_INT 3
30216: ST_TO_ADDR
// vc_control := control_computer ;
30217: LD_ADDR_OWVAR 38
30221: PUSH
30222: LD_INT 3
30224: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30225: LD_ADDR_OWVAR 40
30229: PUSH
30230: LD_INT 10
30232: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30233: LD_VAR 0 2
30237: PUSH
30238: LD_INT 1
30240: ARRAY
30241: PPUSH
30242: CALL_OW 310
30246: NOT
30247: IFFALSE 30294
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30249: CALL_OW 45
30253: PPUSH
30254: LD_VAR 0 2
30258: PUSH
30259: LD_INT 1
30261: ARRAY
30262: PPUSH
30263: CALL_OW 250
30267: PPUSH
30268: LD_VAR 0 2
30272: PUSH
30273: LD_INT 1
30275: ARRAY
30276: PPUSH
30277: CALL_OW 251
30281: PPUSH
30282: LD_INT 12
30284: PPUSH
30285: LD_INT 1
30287: PPUSH
30288: CALL_OW 50
30292: GO 30306
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30294: CALL_OW 45
30298: PPUSH
30299: LD_INT 1
30301: PPUSH
30302: CALL_OW 51
// end ;
30306: GO 30180
30308: POP
30309: POP
// end ;
30310: PPOPN 2
30312: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30313: LD_EXP 71
30317: PUSH
30318: LD_EXP 117
30322: AND
30323: IFFALSE 30545
30325: GO 30327
30327: DISABLE
30328: LD_INT 0
30330: PPUSH
30331: PPUSH
30332: PPUSH
30333: PPUSH
30334: PPUSH
30335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30336: LD_ADDR_VAR 0 6
30340: PUSH
30341: LD_INT 22
30343: PUSH
30344: LD_OWVAR 2
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 21
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 3
30365: PUSH
30366: LD_INT 23
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: PPUSH
30385: CALL_OW 69
30389: ST_TO_ADDR
// if not tmp then
30390: LD_VAR 0 6
30394: NOT
30395: IFFALSE 30399
// exit ;
30397: GO 30545
// s1 := rand ( 1 , 4 ) ;
30399: LD_ADDR_VAR 0 2
30403: PUSH
30404: LD_INT 1
30406: PPUSH
30407: LD_INT 4
30409: PPUSH
30410: CALL_OW 12
30414: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30415: LD_ADDR_VAR 0 4
30419: PUSH
30420: LD_VAR 0 6
30424: PUSH
30425: LD_INT 1
30427: ARRAY
30428: PPUSH
30429: LD_VAR 0 2
30433: PPUSH
30434: CALL_OW 259
30438: ST_TO_ADDR
// if s1 = 1 then
30439: LD_VAR 0 2
30443: PUSH
30444: LD_INT 1
30446: EQUAL
30447: IFFALSE 30467
// s2 := rand ( 2 , 4 ) else
30449: LD_ADDR_VAR 0 3
30453: PUSH
30454: LD_INT 2
30456: PPUSH
30457: LD_INT 4
30459: PPUSH
30460: CALL_OW 12
30464: ST_TO_ADDR
30465: GO 30475
// s2 := 1 ;
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 1
30474: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30475: LD_ADDR_VAR 0 5
30479: PUSH
30480: LD_VAR 0 6
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: PPUSH
30489: LD_VAR 0 3
30493: PPUSH
30494: CALL_OW 259
30498: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30499: LD_VAR 0 6
30503: PUSH
30504: LD_INT 1
30506: ARRAY
30507: PPUSH
30508: LD_VAR 0 2
30512: PPUSH
30513: LD_VAR 0 5
30517: PPUSH
30518: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30522: LD_VAR 0 6
30526: PUSH
30527: LD_INT 1
30529: ARRAY
30530: PPUSH
30531: LD_VAR 0 3
30535: PPUSH
30536: LD_VAR 0 4
30540: PPUSH
30541: CALL_OW 237
// end ;
30545: PPOPN 6
30547: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30548: LD_EXP 71
30552: PUSH
30553: LD_EXP 118
30557: AND
30558: IFFALSE 30637
30560: GO 30562
30562: DISABLE
30563: LD_INT 0
30565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30566: LD_ADDR_VAR 0 1
30570: PUSH
30571: LD_INT 22
30573: PUSH
30574: LD_OWVAR 2
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 30
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PPUSH
30597: CALL_OW 69
30601: ST_TO_ADDR
// if not tmp then
30602: LD_VAR 0 1
30606: NOT
30607: IFFALSE 30611
// exit ;
30609: GO 30637
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30611: LD_VAR 0 1
30615: PUSH
30616: LD_INT 1
30618: PPUSH
30619: LD_VAR 0 1
30623: PPUSH
30624: CALL_OW 12
30628: ARRAY
30629: PPUSH
30630: LD_INT 1
30632: PPUSH
30633: CALL_OW 234
// end ;
30637: PPOPN 1
30639: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30640: LD_EXP 71
30644: PUSH
30645: LD_EXP 119
30649: AND
30650: IFFALSE 30762
30652: GO 30654
30654: DISABLE
30655: LD_INT 0
30657: PPUSH
30658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30659: LD_ADDR_VAR 0 2
30663: PUSH
30664: LD_INT 22
30666: PUSH
30667: LD_OWVAR 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 30
30681: PUSH
30682: LD_INT 27
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 30
30691: PUSH
30692: LD_INT 26
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 30
30701: PUSH
30702: LD_INT 28
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PPUSH
30719: CALL_OW 69
30723: ST_TO_ADDR
// if not tmp then
30724: LD_VAR 0 2
30728: NOT
30729: IFFALSE 30733
// exit ;
30731: GO 30762
// for i in tmp do
30733: LD_ADDR_VAR 0 1
30737: PUSH
30738: LD_VAR 0 2
30742: PUSH
30743: FOR_IN
30744: IFFALSE 30760
// SetLives ( i , 1 ) ;
30746: LD_VAR 0 1
30750: PPUSH
30751: LD_INT 1
30753: PPUSH
30754: CALL_OW 234
30758: GO 30743
30760: POP
30761: POP
// end ;
30762: PPOPN 2
30764: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30765: LD_EXP 71
30769: PUSH
30770: LD_EXP 120
30774: AND
30775: IFFALSE 31062
30777: GO 30779
30779: DISABLE
30780: LD_INT 0
30782: PPUSH
30783: PPUSH
30784: PPUSH
// begin i := rand ( 1 , 7 ) ;
30785: LD_ADDR_VAR 0 1
30789: PUSH
30790: LD_INT 1
30792: PPUSH
30793: LD_INT 7
30795: PPUSH
30796: CALL_OW 12
30800: ST_TO_ADDR
// case i of 1 :
30801: LD_VAR 0 1
30805: PUSH
30806: LD_INT 1
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30824
30814: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30815: LD_STRING earthquake(getX(game), 0, 32)
30817: PPUSH
30818: CALL_OW 559
30822: GO 31062
30824: LD_INT 2
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 30846
30832: POP
// begin ToLua ( displayStucuk(); ) ;
30833: LD_STRING displayStucuk();
30835: PPUSH
30836: CALL_OW 559
// ResetFog ;
30840: CALL_OW 335
// end ; 3 :
30844: GO 31062
30846: LD_INT 3
30848: DOUBLE
30849: EQUAL
30850: IFTRUE 30854
30852: GO 30958
30854: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30855: LD_ADDR_VAR 0 2
30859: PUSH
30860: LD_INT 22
30862: PUSH
30863: LD_OWVAR 2
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 25
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PPUSH
30886: CALL_OW 69
30890: ST_TO_ADDR
// if not tmp then
30891: LD_VAR 0 2
30895: NOT
30896: IFFALSE 30900
// exit ;
30898: GO 31062
// un := tmp [ rand ( 1 , tmp ) ] ;
30900: LD_ADDR_VAR 0 3
30904: PUSH
30905: LD_VAR 0 2
30909: PUSH
30910: LD_INT 1
30912: PPUSH
30913: LD_VAR 0 2
30917: PPUSH
30918: CALL_OW 12
30922: ARRAY
30923: ST_TO_ADDR
// if Crawls ( un ) then
30924: LD_VAR 0 3
30928: PPUSH
30929: CALL_OW 318
30933: IFFALSE 30944
// ComWalk ( un ) ;
30935: LD_VAR 0 3
30939: PPUSH
30940: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30944: LD_VAR 0 3
30948: PPUSH
30949: LD_INT 8
30951: PPUSH
30952: CALL_OW 336
// end ; 4 :
30956: GO 31062
30958: LD_INT 4
30960: DOUBLE
30961: EQUAL
30962: IFTRUE 30966
30964: GO 31040
30966: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30967: LD_ADDR_VAR 0 2
30971: PUSH
30972: LD_INT 22
30974: PUSH
30975: LD_OWVAR 2
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: LD_INT 29
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PPUSH
30998: CALL_OW 69
31002: ST_TO_ADDR
// if not tmp then
31003: LD_VAR 0 2
31007: NOT
31008: IFFALSE 31012
// exit ;
31010: GO 31062
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31012: LD_VAR 0 2
31016: PUSH
31017: LD_INT 1
31019: ARRAY
31020: PPUSH
31021: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31025: LD_VAR 0 2
31029: PUSH
31030: LD_INT 1
31032: ARRAY
31033: PPUSH
31034: CALL_OW 65
// end ; 5 .. 7 :
31038: GO 31062
31040: LD_INT 5
31042: DOUBLE
31043: GREATEREQUAL
31044: IFFALSE 31052
31046: LD_INT 7
31048: DOUBLE
31049: LESSEQUAL
31050: IFTRUE 31054
31052: GO 31061
31054: POP
// StreamSibBomb ; end ;
31055: CALL 27299 0 0
31059: GO 31062
31061: POP
// end ;
31062: PPOPN 3
31064: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31065: LD_EXP 71
31069: PUSH
31070: LD_EXP 121
31074: AND
31075: IFFALSE 31231
31077: GO 31079
31079: DISABLE
31080: LD_INT 0
31082: PPUSH
31083: PPUSH
31084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31085: LD_ADDR_VAR 0 2
31089: PUSH
31090: LD_INT 81
31092: PUSH
31093: LD_OWVAR 2
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: LD_INT 21
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 21
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PPUSH
31134: CALL_OW 69
31138: ST_TO_ADDR
// if not tmp then
31139: LD_VAR 0 2
31143: NOT
31144: IFFALSE 31148
// exit ;
31146: GO 31231
// p := 0 ;
31148: LD_ADDR_VAR 0 3
31152: PUSH
31153: LD_INT 0
31155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31156: LD_INT 35
31158: PPUSH
31159: CALL_OW 67
// p := p + 1 ;
31163: LD_ADDR_VAR 0 3
31167: PUSH
31168: LD_VAR 0 3
31172: PUSH
31173: LD_INT 1
31175: PLUS
31176: ST_TO_ADDR
// for i in tmp do
31177: LD_ADDR_VAR 0 1
31181: PUSH
31182: LD_VAR 0 2
31186: PUSH
31187: FOR_IN
31188: IFFALSE 31219
// if GetLives ( i ) < 1000 then
31190: LD_VAR 0 1
31194: PPUSH
31195: CALL_OW 256
31199: PUSH
31200: LD_INT 1000
31202: LESS
31203: IFFALSE 31217
// SetLives ( i , 1000 ) ;
31205: LD_VAR 0 1
31209: PPUSH
31210: LD_INT 1000
31212: PPUSH
31213: CALL_OW 234
31217: GO 31187
31219: POP
31220: POP
// until p > 20 ;
31221: LD_VAR 0 3
31225: PUSH
31226: LD_INT 20
31228: GREATER
31229: IFFALSE 31156
// end ;
31231: PPOPN 3
31233: END
// every 0 0$1 trigger StreamModeActive and sTime do
31234: LD_EXP 71
31238: PUSH
31239: LD_EXP 122
31243: AND
31244: IFFALSE 31279
31246: GO 31248
31248: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31249: LD_INT 28
31251: PPUSH
31252: LD_OWVAR 2
31256: PPUSH
31257: LD_INT 2
31259: PPUSH
31260: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31264: LD_INT 30
31266: PPUSH
31267: LD_OWVAR 2
31271: PPUSH
31272: LD_INT 2
31274: PPUSH
31275: CALL_OW 322
// end ;
31279: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31280: LD_EXP 71
31284: PUSH
31285: LD_EXP 123
31289: AND
31290: IFFALSE 31411
31292: GO 31294
31294: DISABLE
31295: LD_INT 0
31297: PPUSH
31298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31299: LD_ADDR_VAR 0 2
31303: PUSH
31304: LD_INT 22
31306: PUSH
31307: LD_OWVAR 2
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 21
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 3
31328: PUSH
31329: LD_INT 23
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: PPUSH
31348: CALL_OW 69
31352: ST_TO_ADDR
// if not tmp then
31353: LD_VAR 0 2
31357: NOT
31358: IFFALSE 31362
// exit ;
31360: GO 31411
// for i in tmp do
31362: LD_ADDR_VAR 0 1
31366: PUSH
31367: LD_VAR 0 2
31371: PUSH
31372: FOR_IN
31373: IFFALSE 31409
// begin if Crawls ( i ) then
31375: LD_VAR 0 1
31379: PPUSH
31380: CALL_OW 318
31384: IFFALSE 31395
// ComWalk ( i ) ;
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 138
// SetClass ( i , 2 ) ;
31395: LD_VAR 0 1
31399: PPUSH
31400: LD_INT 2
31402: PPUSH
31403: CALL_OW 336
// end ;
31407: GO 31372
31409: POP
31410: POP
// end ;
31411: PPOPN 2
31413: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31414: LD_EXP 71
31418: PUSH
31419: LD_EXP 124
31423: AND
31424: IFFALSE 31712
31426: GO 31428
31428: DISABLE
31429: LD_INT 0
31431: PPUSH
31432: PPUSH
31433: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31434: LD_OWVAR 2
31438: PPUSH
31439: LD_INT 9
31441: PPUSH
31442: LD_INT 1
31444: PPUSH
31445: LD_INT 1
31447: PPUSH
31448: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31452: LD_INT 9
31454: PPUSH
31455: LD_OWVAR 2
31459: PPUSH
31460: CALL_OW 343
// uc_side := 9 ;
31464: LD_ADDR_OWVAR 20
31468: PUSH
31469: LD_INT 9
31471: ST_TO_ADDR
// uc_nation := 2 ;
31472: LD_ADDR_OWVAR 21
31476: PUSH
31477: LD_INT 2
31479: ST_TO_ADDR
// hc_name := Dark Warrior ;
31480: LD_ADDR_OWVAR 26
31484: PUSH
31485: LD_STRING Dark Warrior
31487: ST_TO_ADDR
// hc_gallery :=  ;
31488: LD_ADDR_OWVAR 33
31492: PUSH
31493: LD_STRING 
31495: ST_TO_ADDR
// hc_noskilllimit := true ;
31496: LD_ADDR_OWVAR 76
31500: PUSH
31501: LD_INT 1
31503: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31504: LD_ADDR_OWVAR 31
31508: PUSH
31509: LD_INT 30
31511: PUSH
31512: LD_INT 30
31514: PUSH
31515: LD_INT 30
31517: PUSH
31518: LD_INT 30
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: ST_TO_ADDR
// un := CreateHuman ;
31527: LD_ADDR_VAR 0 3
31531: PUSH
31532: CALL_OW 44
31536: ST_TO_ADDR
// hc_noskilllimit := false ;
31537: LD_ADDR_OWVAR 76
31541: PUSH
31542: LD_INT 0
31544: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31545: LD_VAR 0 3
31549: PPUSH
31550: LD_INT 1
31552: PPUSH
31553: CALL_OW 51
// ToLua ( playRanger() ) ;
31557: LD_STRING playRanger()
31559: PPUSH
31560: CALL_OW 559
// p := 0 ;
31564: LD_ADDR_VAR 0 2
31568: PUSH
31569: LD_INT 0
31571: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31572: LD_INT 35
31574: PPUSH
31575: CALL_OW 67
// p := p + 1 ;
31579: LD_ADDR_VAR 0 2
31583: PUSH
31584: LD_VAR 0 2
31588: PUSH
31589: LD_INT 1
31591: PLUS
31592: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31593: LD_VAR 0 3
31597: PPUSH
31598: CALL_OW 256
31602: PUSH
31603: LD_INT 1000
31605: LESS
31606: IFFALSE 31620
// SetLives ( un , 1000 ) ;
31608: LD_VAR 0 3
31612: PPUSH
31613: LD_INT 1000
31615: PPUSH
31616: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31620: LD_VAR 0 3
31624: PPUSH
31625: LD_INT 81
31627: PUSH
31628: LD_OWVAR 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 91
31639: PUSH
31640: LD_VAR 0 3
31644: PUSH
31645: LD_INT 30
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PPUSH
31657: CALL_OW 69
31661: PPUSH
31662: LD_VAR 0 3
31666: PPUSH
31667: CALL_OW 74
31671: PPUSH
31672: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31676: LD_VAR 0 2
31680: PUSH
31681: LD_INT 80
31683: GREATER
31684: PUSH
31685: LD_VAR 0 3
31689: PPUSH
31690: CALL_OW 301
31694: OR
31695: IFFALSE 31572
// if un then
31697: LD_VAR 0 3
31701: IFFALSE 31712
// RemoveUnit ( un ) ;
31703: LD_VAR 0 3
31707: PPUSH
31708: CALL_OW 64
// end ;
31712: PPOPN 3
31714: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31715: LD_EXP 125
31719: IFFALSE 31835
31721: GO 31723
31723: DISABLE
31724: LD_INT 0
31726: PPUSH
31727: PPUSH
31728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31729: LD_ADDR_VAR 0 2
31733: PUSH
31734: LD_INT 81
31736: PUSH
31737: LD_OWVAR 2
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 21
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PPUSH
31760: CALL_OW 69
31764: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31765: LD_STRING playComputer()
31767: PPUSH
31768: CALL_OW 559
// if not tmp then
31772: LD_VAR 0 2
31776: NOT
31777: IFFALSE 31781
// exit ;
31779: GO 31835
// for i in tmp do
31781: LD_ADDR_VAR 0 1
31785: PUSH
31786: LD_VAR 0 2
31790: PUSH
31791: FOR_IN
31792: IFFALSE 31833
// for j := 1 to 4 do
31794: LD_ADDR_VAR 0 3
31798: PUSH
31799: DOUBLE
31800: LD_INT 1
31802: DEC
31803: ST_TO_ADDR
31804: LD_INT 4
31806: PUSH
31807: FOR_TO
31808: IFFALSE 31829
// SetSkill ( i , j , 10 ) ;
31810: LD_VAR 0 1
31814: PPUSH
31815: LD_VAR 0 3
31819: PPUSH
31820: LD_INT 10
31822: PPUSH
31823: CALL_OW 237
31827: GO 31807
31829: POP
31830: POP
31831: GO 31791
31833: POP
31834: POP
// end ;
31835: PPOPN 3
31837: END
// every 0 0$1 trigger s30 do var i , tmp ;
31838: LD_EXP 126
31842: IFFALSE 31911
31844: GO 31846
31846: DISABLE
31847: LD_INT 0
31849: PPUSH
31850: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31851: LD_ADDR_VAR 0 2
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_OWVAR 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PPUSH
31868: CALL_OW 69
31872: ST_TO_ADDR
// if not tmp then
31873: LD_VAR 0 2
31877: NOT
31878: IFFALSE 31882
// exit ;
31880: GO 31911
// for i in tmp do
31882: LD_ADDR_VAR 0 1
31886: PUSH
31887: LD_VAR 0 2
31891: PUSH
31892: FOR_IN
31893: IFFALSE 31909
// SetLives ( i , 300 ) ;
31895: LD_VAR 0 1
31899: PPUSH
31900: LD_INT 300
31902: PPUSH
31903: CALL_OW 234
31907: GO 31892
31909: POP
31910: POP
// end ;
31911: PPOPN 2
31913: END
// every 0 0$1 trigger s60 do var i , tmp ;
31914: LD_EXP 127
31918: IFFALSE 31987
31920: GO 31922
31922: DISABLE
31923: LD_INT 0
31925: PPUSH
31926: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31927: LD_ADDR_VAR 0 2
31931: PUSH
31932: LD_INT 22
31934: PUSH
31935: LD_OWVAR 2
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PPUSH
31944: CALL_OW 69
31948: ST_TO_ADDR
// if not tmp then
31949: LD_VAR 0 2
31953: NOT
31954: IFFALSE 31958
// exit ;
31956: GO 31987
// for i in tmp do
31958: LD_ADDR_VAR 0 1
31962: PUSH
31963: LD_VAR 0 2
31967: PUSH
31968: FOR_IN
31969: IFFALSE 31985
// SetLives ( i , 600 ) ;
31971: LD_VAR 0 1
31975: PPUSH
31976: LD_INT 600
31978: PPUSH
31979: CALL_OW 234
31983: GO 31968
31985: POP
31986: POP
// end ;
31987: PPOPN 2
31989: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31990: LD_INT 0
31992: PPUSH
// case cmd of 301 :
31993: LD_VAR 0 1
31997: PUSH
31998: LD_INT 301
32000: DOUBLE
32001: EQUAL
32002: IFTRUE 32006
32004: GO 32038
32006: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32007: LD_VAR 0 6
32011: PPUSH
32012: LD_VAR 0 7
32016: PPUSH
32017: LD_VAR 0 8
32021: PPUSH
32022: LD_VAR 0 4
32026: PPUSH
32027: LD_VAR 0 5
32031: PPUSH
32032: CALL 33239 0 5
32036: GO 32159
32038: LD_INT 302
32040: DOUBLE
32041: EQUAL
32042: IFTRUE 32046
32044: GO 32083
32046: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32047: LD_VAR 0 6
32051: PPUSH
32052: LD_VAR 0 7
32056: PPUSH
32057: LD_VAR 0 8
32061: PPUSH
32062: LD_VAR 0 9
32066: PPUSH
32067: LD_VAR 0 4
32071: PPUSH
32072: LD_VAR 0 5
32076: PPUSH
32077: CALL 33330 0 6
32081: GO 32159
32083: LD_INT 303
32085: DOUBLE
32086: EQUAL
32087: IFTRUE 32091
32089: GO 32128
32091: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32092: LD_VAR 0 6
32096: PPUSH
32097: LD_VAR 0 7
32101: PPUSH
32102: LD_VAR 0 8
32106: PPUSH
32107: LD_VAR 0 9
32111: PPUSH
32112: LD_VAR 0 4
32116: PPUSH
32117: LD_VAR 0 5
32121: PPUSH
32122: CALL 32164 0 6
32126: GO 32159
32128: LD_INT 304
32130: DOUBLE
32131: EQUAL
32132: IFTRUE 32136
32134: GO 32158
32136: POP
// hHackTeleport ( unit , x , y ) ; end ;
32137: LD_VAR 0 2
32141: PPUSH
32142: LD_VAR 0 4
32146: PPUSH
32147: LD_VAR 0 5
32151: PPUSH
32152: CALL 33923 0 3
32156: GO 32159
32158: POP
// end ;
32159: LD_VAR 0 12
32163: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32164: LD_INT 0
32166: PPUSH
32167: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32168: LD_VAR 0 1
32172: PUSH
32173: LD_INT 1
32175: LESS
32176: PUSH
32177: LD_VAR 0 1
32181: PUSH
32182: LD_INT 3
32184: GREATER
32185: OR
32186: PUSH
32187: LD_VAR 0 5
32191: PPUSH
32192: LD_VAR 0 6
32196: PPUSH
32197: CALL_OW 428
32201: OR
32202: IFFALSE 32206
// exit ;
32204: GO 32926
// uc_side := your_side ;
32206: LD_ADDR_OWVAR 20
32210: PUSH
32211: LD_OWVAR 2
32215: ST_TO_ADDR
// uc_nation := nation ;
32216: LD_ADDR_OWVAR 21
32220: PUSH
32221: LD_VAR 0 1
32225: ST_TO_ADDR
// bc_level = 1 ;
32226: LD_ADDR_OWVAR 43
32230: PUSH
32231: LD_INT 1
32233: ST_TO_ADDR
// case btype of 1 :
32234: LD_VAR 0 2
32238: PUSH
32239: LD_INT 1
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32258
32247: POP
// bc_type := b_depot ; 2 :
32248: LD_ADDR_OWVAR 42
32252: PUSH
32253: LD_INT 0
32255: ST_TO_ADDR
32256: GO 32870
32258: LD_INT 2
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32277
32266: POP
// bc_type := b_warehouse ; 3 :
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 1
32274: ST_TO_ADDR
32275: GO 32870
32277: LD_INT 3
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// bc_type := b_lab ; 4 .. 9 :
32286: LD_ADDR_OWVAR 42
32290: PUSH
32291: LD_INT 6
32293: ST_TO_ADDR
32294: GO 32870
32296: LD_INT 4
32298: DOUBLE
32299: GREATEREQUAL
32300: IFFALSE 32308
32302: LD_INT 9
32304: DOUBLE
32305: LESSEQUAL
32306: IFTRUE 32310
32308: GO 32362
32310: POP
// begin bc_type := b_lab_half ;
32311: LD_ADDR_OWVAR 42
32315: PUSH
32316: LD_INT 7
32318: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32319: LD_ADDR_OWVAR 44
32323: PUSH
32324: LD_INT 10
32326: PUSH
32327: LD_INT 11
32329: PUSH
32330: LD_INT 12
32332: PUSH
32333: LD_INT 15
32335: PUSH
32336: LD_INT 14
32338: PUSH
32339: LD_INT 13
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: PUSH
32350: LD_VAR 0 2
32354: PUSH
32355: LD_INT 3
32357: MINUS
32358: ARRAY
32359: ST_TO_ADDR
// end ; 10 .. 13 :
32360: GO 32870
32362: LD_INT 10
32364: DOUBLE
32365: GREATEREQUAL
32366: IFFALSE 32374
32368: LD_INT 13
32370: DOUBLE
32371: LESSEQUAL
32372: IFTRUE 32376
32374: GO 32453
32376: POP
// begin bc_type := b_lab_full ;
32377: LD_ADDR_OWVAR 42
32381: PUSH
32382: LD_INT 8
32384: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32385: LD_ADDR_OWVAR 44
32389: PUSH
32390: LD_INT 10
32392: PUSH
32393: LD_INT 12
32395: PUSH
32396: LD_INT 14
32398: PUSH
32399: LD_INT 13
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: PUSH
32408: LD_VAR 0 2
32412: PUSH
32413: LD_INT 9
32415: MINUS
32416: ARRAY
32417: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32418: LD_ADDR_OWVAR 45
32422: PUSH
32423: LD_INT 11
32425: PUSH
32426: LD_INT 15
32428: PUSH
32429: LD_INT 12
32431: PUSH
32432: LD_INT 15
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: PUSH
32441: LD_VAR 0 2
32445: PUSH
32446: LD_INT 9
32448: MINUS
32449: ARRAY
32450: ST_TO_ADDR
// end ; 14 :
32451: GO 32870
32453: LD_INT 14
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32472
32461: POP
// bc_type := b_workshop ; 15 :
32462: LD_ADDR_OWVAR 42
32466: PUSH
32467: LD_INT 2
32469: ST_TO_ADDR
32470: GO 32870
32472: LD_INT 15
32474: DOUBLE
32475: EQUAL
32476: IFTRUE 32480
32478: GO 32491
32480: POP
// bc_type := b_factory ; 16 :
32481: LD_ADDR_OWVAR 42
32485: PUSH
32486: LD_INT 3
32488: ST_TO_ADDR
32489: GO 32870
32491: LD_INT 16
32493: DOUBLE
32494: EQUAL
32495: IFTRUE 32499
32497: GO 32510
32499: POP
// bc_type := b_ext_gun ; 17 :
32500: LD_ADDR_OWVAR 42
32504: PUSH
32505: LD_INT 17
32507: ST_TO_ADDR
32508: GO 32870
32510: LD_INT 17
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32546
32518: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32519: LD_ADDR_OWVAR 42
32523: PUSH
32524: LD_INT 19
32526: PUSH
32527: LD_INT 23
32529: PUSH
32530: LD_INT 19
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: PUSH
32538: LD_VAR 0 1
32542: ARRAY
32543: ST_TO_ADDR
32544: GO 32870
32546: LD_INT 18
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32565
32554: POP
// bc_type := b_ext_radar ; 19 :
32555: LD_ADDR_OWVAR 42
32559: PUSH
32560: LD_INT 20
32562: ST_TO_ADDR
32563: GO 32870
32565: LD_INT 19
32567: DOUBLE
32568: EQUAL
32569: IFTRUE 32573
32571: GO 32584
32573: POP
// bc_type := b_ext_radio ; 20 :
32574: LD_ADDR_OWVAR 42
32578: PUSH
32579: LD_INT 22
32581: ST_TO_ADDR
32582: GO 32870
32584: LD_INT 20
32586: DOUBLE
32587: EQUAL
32588: IFTRUE 32592
32590: GO 32603
32592: POP
// bc_type := b_ext_siberium ; 21 :
32593: LD_ADDR_OWVAR 42
32597: PUSH
32598: LD_INT 21
32600: ST_TO_ADDR
32601: GO 32870
32603: LD_INT 21
32605: DOUBLE
32606: EQUAL
32607: IFTRUE 32611
32609: GO 32622
32611: POP
// bc_type := b_ext_computer ; 22 :
32612: LD_ADDR_OWVAR 42
32616: PUSH
32617: LD_INT 24
32619: ST_TO_ADDR
32620: GO 32870
32622: LD_INT 22
32624: DOUBLE
32625: EQUAL
32626: IFTRUE 32630
32628: GO 32641
32630: POP
// bc_type := b_ext_track ; 23 :
32631: LD_ADDR_OWVAR 42
32635: PUSH
32636: LD_INT 16
32638: ST_TO_ADDR
32639: GO 32870
32641: LD_INT 23
32643: DOUBLE
32644: EQUAL
32645: IFTRUE 32649
32647: GO 32660
32649: POP
// bc_type := b_ext_laser ; 24 :
32650: LD_ADDR_OWVAR 42
32654: PUSH
32655: LD_INT 25
32657: ST_TO_ADDR
32658: GO 32870
32660: LD_INT 24
32662: DOUBLE
32663: EQUAL
32664: IFTRUE 32668
32666: GO 32679
32668: POP
// bc_type := b_control_tower ; 25 :
32669: LD_ADDR_OWVAR 42
32673: PUSH
32674: LD_INT 36
32676: ST_TO_ADDR
32677: GO 32870
32679: LD_INT 25
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32698
32687: POP
// bc_type := b_breastwork ; 26 :
32688: LD_ADDR_OWVAR 42
32692: PUSH
32693: LD_INT 31
32695: ST_TO_ADDR
32696: GO 32870
32698: LD_INT 26
32700: DOUBLE
32701: EQUAL
32702: IFTRUE 32706
32704: GO 32717
32706: POP
// bc_type := b_bunker ; 27 :
32707: LD_ADDR_OWVAR 42
32711: PUSH
32712: LD_INT 32
32714: ST_TO_ADDR
32715: GO 32870
32717: LD_INT 27
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32725
32723: GO 32736
32725: POP
// bc_type := b_turret ; 28 :
32726: LD_ADDR_OWVAR 42
32730: PUSH
32731: LD_INT 33
32733: ST_TO_ADDR
32734: GO 32870
32736: LD_INT 28
32738: DOUBLE
32739: EQUAL
32740: IFTRUE 32744
32742: GO 32755
32744: POP
// bc_type := b_armoury ; 29 :
32745: LD_ADDR_OWVAR 42
32749: PUSH
32750: LD_INT 4
32752: ST_TO_ADDR
32753: GO 32870
32755: LD_INT 29
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32774
32763: POP
// bc_type := b_barracks ; 30 :
32764: LD_ADDR_OWVAR 42
32768: PUSH
32769: LD_INT 5
32771: ST_TO_ADDR
32772: GO 32870
32774: LD_INT 30
32776: DOUBLE
32777: EQUAL
32778: IFTRUE 32782
32780: GO 32793
32782: POP
// bc_type := b_solar_power ; 31 :
32783: LD_ADDR_OWVAR 42
32787: PUSH
32788: LD_INT 27
32790: ST_TO_ADDR
32791: GO 32870
32793: LD_INT 31
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 32812
32801: POP
// bc_type := b_oil_power ; 32 :
32802: LD_ADDR_OWVAR 42
32806: PUSH
32807: LD_INT 26
32809: ST_TO_ADDR
32810: GO 32870
32812: LD_INT 32
32814: DOUBLE
32815: EQUAL
32816: IFTRUE 32820
32818: GO 32831
32820: POP
// bc_type := b_siberite_power ; 33 :
32821: LD_ADDR_OWVAR 42
32825: PUSH
32826: LD_INT 28
32828: ST_TO_ADDR
32829: GO 32870
32831: LD_INT 33
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32839
32837: GO 32850
32839: POP
// bc_type := b_oil_mine ; 34 :
32840: LD_ADDR_OWVAR 42
32844: PUSH
32845: LD_INT 29
32847: ST_TO_ADDR
32848: GO 32870
32850: LD_INT 34
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32858
32856: GO 32869
32858: POP
// bc_type := b_siberite_mine ; end ;
32859: LD_ADDR_OWVAR 42
32863: PUSH
32864: LD_INT 30
32866: ST_TO_ADDR
32867: GO 32870
32869: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32870: LD_ADDR_VAR 0 8
32874: PUSH
32875: LD_VAR 0 5
32879: PPUSH
32880: LD_VAR 0 6
32884: PPUSH
32885: LD_VAR 0 3
32889: PPUSH
32890: CALL_OW 47
32894: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32895: LD_OWVAR 42
32899: PUSH
32900: LD_INT 32
32902: PUSH
32903: LD_INT 33
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: IN
32910: IFFALSE 32926
// PlaceWeaponTurret ( b , weapon ) ;
32912: LD_VAR 0 8
32916: PPUSH
32917: LD_VAR 0 4
32921: PPUSH
32922: CALL_OW 431
// end ;
32926: LD_VAR 0 7
32930: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32931: LD_INT 0
32933: PPUSH
32934: PPUSH
32935: PPUSH
32936: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32937: LD_ADDR_VAR 0 4
32941: PUSH
32942: LD_INT 22
32944: PUSH
32945: LD_OWVAR 2
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 30
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 30
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PPUSH
32986: CALL_OW 69
32990: ST_TO_ADDR
// if not tmp then
32991: LD_VAR 0 4
32995: NOT
32996: IFFALSE 33000
// exit ;
32998: GO 33059
// for i in tmp do
33000: LD_ADDR_VAR 0 2
33004: PUSH
33005: LD_VAR 0 4
33009: PUSH
33010: FOR_IN
33011: IFFALSE 33057
// for j = 1 to 3 do
33013: LD_ADDR_VAR 0 3
33017: PUSH
33018: DOUBLE
33019: LD_INT 1
33021: DEC
33022: ST_TO_ADDR
33023: LD_INT 3
33025: PUSH
33026: FOR_TO
33027: IFFALSE 33053
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33029: LD_VAR 0 2
33033: PPUSH
33034: CALL_OW 274
33038: PPUSH
33039: LD_VAR 0 3
33043: PPUSH
33044: LD_INT 99999
33046: PPUSH
33047: CALL_OW 277
33051: GO 33026
33053: POP
33054: POP
33055: GO 33010
33057: POP
33058: POP
// end ;
33059: LD_VAR 0 1
33063: RET
// export function hHackSetLevel10 ; var i , j ; begin
33064: LD_INT 0
33066: PPUSH
33067: PPUSH
33068: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33069: LD_ADDR_VAR 0 2
33073: PUSH
33074: LD_INT 21
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PPUSH
33084: CALL_OW 69
33088: PUSH
33089: FOR_IN
33090: IFFALSE 33142
// if IsSelected ( i ) then
33092: LD_VAR 0 2
33096: PPUSH
33097: CALL_OW 306
33101: IFFALSE 33140
// begin for j := 1 to 4 do
33103: LD_ADDR_VAR 0 3
33107: PUSH
33108: DOUBLE
33109: LD_INT 1
33111: DEC
33112: ST_TO_ADDR
33113: LD_INT 4
33115: PUSH
33116: FOR_TO
33117: IFFALSE 33138
// SetSkill ( i , j , 10 ) ;
33119: LD_VAR 0 2
33123: PPUSH
33124: LD_VAR 0 3
33128: PPUSH
33129: LD_INT 10
33131: PPUSH
33132: CALL_OW 237
33136: GO 33116
33138: POP
33139: POP
// end ;
33140: GO 33089
33142: POP
33143: POP
// end ;
33144: LD_VAR 0 1
33148: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33149: LD_INT 0
33151: PPUSH
33152: PPUSH
33153: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33154: LD_ADDR_VAR 0 2
33158: PUSH
33159: LD_INT 22
33161: PUSH
33162: LD_OWVAR 2
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 21
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PPUSH
33185: CALL_OW 69
33189: PUSH
33190: FOR_IN
33191: IFFALSE 33232
// begin for j := 1 to 4 do
33193: LD_ADDR_VAR 0 3
33197: PUSH
33198: DOUBLE
33199: LD_INT 1
33201: DEC
33202: ST_TO_ADDR
33203: LD_INT 4
33205: PUSH
33206: FOR_TO
33207: IFFALSE 33228
// SetSkill ( i , j , 10 ) ;
33209: LD_VAR 0 2
33213: PPUSH
33214: LD_VAR 0 3
33218: PPUSH
33219: LD_INT 10
33221: PPUSH
33222: CALL_OW 237
33226: GO 33206
33228: POP
33229: POP
// end ;
33230: GO 33190
33232: POP
33233: POP
// end ;
33234: LD_VAR 0 1
33238: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33239: LD_INT 0
33241: PPUSH
// uc_side := your_side ;
33242: LD_ADDR_OWVAR 20
33246: PUSH
33247: LD_OWVAR 2
33251: ST_TO_ADDR
// uc_nation := nation ;
33252: LD_ADDR_OWVAR 21
33256: PUSH
33257: LD_VAR 0 1
33261: ST_TO_ADDR
// InitHc ;
33262: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33266: LD_INT 0
33268: PPUSH
33269: LD_VAR 0 2
33273: PPUSH
33274: LD_VAR 0 3
33278: PPUSH
33279: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33283: LD_VAR 0 4
33287: PPUSH
33288: LD_VAR 0 5
33292: PPUSH
33293: CALL_OW 428
33297: PUSH
33298: LD_INT 0
33300: EQUAL
33301: IFFALSE 33325
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33303: CALL_OW 44
33307: PPUSH
33308: LD_VAR 0 4
33312: PPUSH
33313: LD_VAR 0 5
33317: PPUSH
33318: LD_INT 1
33320: PPUSH
33321: CALL_OW 48
// end ;
33325: LD_VAR 0 6
33329: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33330: LD_INT 0
33332: PPUSH
33333: PPUSH
// uc_side := your_side ;
33334: LD_ADDR_OWVAR 20
33338: PUSH
33339: LD_OWVAR 2
33343: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33344: LD_VAR 0 1
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 3
33357: PUSH
33358: LD_INT 4
33360: PUSH
33361: LD_INT 5
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: IN
33371: IFFALSE 33383
// uc_nation := nation_american else
33373: LD_ADDR_OWVAR 21
33377: PUSH
33378: LD_INT 1
33380: ST_TO_ADDR
33381: GO 33426
// if chassis in [ 11 , 12 , 13 , 14 ] then
33383: LD_VAR 0 1
33387: PUSH
33388: LD_INT 11
33390: PUSH
33391: LD_INT 12
33393: PUSH
33394: LD_INT 13
33396: PUSH
33397: LD_INT 14
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: IN
33406: IFFALSE 33418
// uc_nation := nation_arabian else
33408: LD_ADDR_OWVAR 21
33412: PUSH
33413: LD_INT 2
33415: ST_TO_ADDR
33416: GO 33426
// uc_nation := nation_russian ;
33418: LD_ADDR_OWVAR 21
33422: PUSH
33423: LD_INT 3
33425: ST_TO_ADDR
// vc_chassis := chassis ;
33426: LD_ADDR_OWVAR 37
33430: PUSH
33431: LD_VAR 0 1
33435: ST_TO_ADDR
// vc_engine := engine ;
33436: LD_ADDR_OWVAR 39
33440: PUSH
33441: LD_VAR 0 2
33445: ST_TO_ADDR
// vc_control := control ;
33446: LD_ADDR_OWVAR 38
33450: PUSH
33451: LD_VAR 0 3
33455: ST_TO_ADDR
// vc_weapon := weapon ;
33456: LD_ADDR_OWVAR 40
33460: PUSH
33461: LD_VAR 0 4
33465: ST_TO_ADDR
// un := CreateVehicle ;
33466: LD_ADDR_VAR 0 8
33470: PUSH
33471: CALL_OW 45
33475: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33476: LD_VAR 0 8
33480: PPUSH
33481: LD_INT 0
33483: PPUSH
33484: LD_INT 5
33486: PPUSH
33487: CALL_OW 12
33491: PPUSH
33492: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33496: LD_VAR 0 8
33500: PPUSH
33501: LD_VAR 0 5
33505: PPUSH
33506: LD_VAR 0 6
33510: PPUSH
33511: LD_INT 1
33513: PPUSH
33514: CALL_OW 48
// end ;
33518: LD_VAR 0 7
33522: RET
// export hInvincible ; every 1 do
33523: GO 33525
33525: DISABLE
// hInvincible := [ ] ;
33526: LD_ADDR_EXP 128
33530: PUSH
33531: EMPTY
33532: ST_TO_ADDR
33533: END
// every 10 do var i ;
33534: GO 33536
33536: DISABLE
33537: LD_INT 0
33539: PPUSH
// begin enable ;
33540: ENABLE
// if not hInvincible then
33541: LD_EXP 128
33545: NOT
33546: IFFALSE 33550
// exit ;
33548: GO 33594
// for i in hInvincible do
33550: LD_ADDR_VAR 0 1
33554: PUSH
33555: LD_EXP 128
33559: PUSH
33560: FOR_IN
33561: IFFALSE 33592
// if GetLives ( i ) < 1000 then
33563: LD_VAR 0 1
33567: PPUSH
33568: CALL_OW 256
33572: PUSH
33573: LD_INT 1000
33575: LESS
33576: IFFALSE 33590
// SetLives ( i , 1000 ) ;
33578: LD_VAR 0 1
33582: PPUSH
33583: LD_INT 1000
33585: PPUSH
33586: CALL_OW 234
33590: GO 33560
33592: POP
33593: POP
// end ;
33594: PPOPN 1
33596: END
// export function hHackInvincible ; var i ; begin
33597: LD_INT 0
33599: PPUSH
33600: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33601: LD_ADDR_VAR 0 2
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 21
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 21
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: PPUSH
33634: CALL_OW 69
33638: PUSH
33639: FOR_IN
33640: IFFALSE 33701
// if IsSelected ( i ) then
33642: LD_VAR 0 2
33646: PPUSH
33647: CALL_OW 306
33651: IFFALSE 33699
// begin if i in hInvincible then
33653: LD_VAR 0 2
33657: PUSH
33658: LD_EXP 128
33662: IN
33663: IFFALSE 33683
// hInvincible := hInvincible diff i else
33665: LD_ADDR_EXP 128
33669: PUSH
33670: LD_EXP 128
33674: PUSH
33675: LD_VAR 0 2
33679: DIFF
33680: ST_TO_ADDR
33681: GO 33699
// hInvincible := hInvincible union i ;
33683: LD_ADDR_EXP 128
33687: PUSH
33688: LD_EXP 128
33692: PUSH
33693: LD_VAR 0 2
33697: UNION
33698: ST_TO_ADDR
// end ;
33699: GO 33639
33701: POP
33702: POP
// end ;
33703: LD_VAR 0 1
33707: RET
// export function hHackInvisible ; var i , j ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
33712: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33713: LD_ADDR_VAR 0 2
33717: PUSH
33718: LD_INT 21
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PPUSH
33728: CALL_OW 69
33732: PUSH
33733: FOR_IN
33734: IFFALSE 33758
// if IsSelected ( i ) then
33736: LD_VAR 0 2
33740: PPUSH
33741: CALL_OW 306
33745: IFFALSE 33756
// ComForceInvisible ( i ) ;
33747: LD_VAR 0 2
33751: PPUSH
33752: CALL_OW 496
33756: GO 33733
33758: POP
33759: POP
// end ;
33760: LD_VAR 0 1
33764: RET
// export function hHackChangeYourSide ; begin
33765: LD_INT 0
33767: PPUSH
// if your_side = 8 then
33768: LD_OWVAR 2
33772: PUSH
33773: LD_INT 8
33775: EQUAL
33776: IFFALSE 33788
// your_side := 0 else
33778: LD_ADDR_OWVAR 2
33782: PUSH
33783: LD_INT 0
33785: ST_TO_ADDR
33786: GO 33802
// your_side := your_side + 1 ;
33788: LD_ADDR_OWVAR 2
33792: PUSH
33793: LD_OWVAR 2
33797: PUSH
33798: LD_INT 1
33800: PLUS
33801: ST_TO_ADDR
// end ;
33802: LD_VAR 0 1
33806: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33807: LD_INT 0
33809: PPUSH
33810: PPUSH
33811: PPUSH
// for i in all_units do
33812: LD_ADDR_VAR 0 2
33816: PUSH
33817: LD_OWVAR 3
33821: PUSH
33822: FOR_IN
33823: IFFALSE 33901
// if IsSelected ( i ) then
33825: LD_VAR 0 2
33829: PPUSH
33830: CALL_OW 306
33834: IFFALSE 33899
// begin j := GetSide ( i ) ;
33836: LD_ADDR_VAR 0 3
33840: PUSH
33841: LD_VAR 0 2
33845: PPUSH
33846: CALL_OW 255
33850: ST_TO_ADDR
// if j = 8 then
33851: LD_VAR 0 3
33855: PUSH
33856: LD_INT 8
33858: EQUAL
33859: IFFALSE 33871
// j := 0 else
33861: LD_ADDR_VAR 0 3
33865: PUSH
33866: LD_INT 0
33868: ST_TO_ADDR
33869: GO 33885
// j := j + 1 ;
33871: LD_ADDR_VAR 0 3
33875: PUSH
33876: LD_VAR 0 3
33880: PUSH
33881: LD_INT 1
33883: PLUS
33884: ST_TO_ADDR
// SetSide ( i , j ) ;
33885: LD_VAR 0 2
33889: PPUSH
33890: LD_VAR 0 3
33894: PPUSH
33895: CALL_OW 235
// end ;
33899: GO 33822
33901: POP
33902: POP
// end ;
33903: LD_VAR 0 1
33907: RET
// export function hHackFog ; begin
33908: LD_INT 0
33910: PPUSH
// FogOff ( true ) ;
33911: LD_INT 1
33913: PPUSH
33914: CALL_OW 344
// end ;
33918: LD_VAR 0 1
33922: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33923: LD_INT 0
33925: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33926: LD_VAR 0 1
33930: PPUSH
33931: LD_VAR 0 2
33935: PPUSH
33936: LD_VAR 0 3
33940: PPUSH
33941: LD_INT 1
33943: PPUSH
33944: LD_INT 1
33946: PPUSH
33947: CALL_OW 483
// CenterOnXY ( x , y ) ;
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 3
33960: PPUSH
33961: CALL_OW 84
// end ; end_of_file
33965: LD_VAR 0 4
33969: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33976: LD_VAR 0 1
33980: PPUSH
33981: CALL_OW 264
33985: PUSH
33986: LD_EXP 56
33990: EQUAL
33991: IFFALSE 34063
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33993: LD_INT 68
33995: PPUSH
33996: LD_VAR 0 1
34000: PPUSH
34001: CALL_OW 255
34005: PPUSH
34006: CALL_OW 321
34010: PUSH
34011: LD_INT 2
34013: EQUAL
34014: IFFALSE 34026
// eff := 70 else
34016: LD_ADDR_VAR 0 4
34020: PUSH
34021: LD_INT 70
34023: ST_TO_ADDR
34024: GO 34034
// eff := 30 ;
34026: LD_ADDR_VAR 0 4
34030: PUSH
34031: LD_INT 30
34033: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34034: LD_VAR 0 1
34038: PPUSH
34039: CALL_OW 250
34043: PPUSH
34044: LD_VAR 0 1
34048: PPUSH
34049: CALL_OW 251
34053: PPUSH
34054: LD_VAR 0 4
34058: PPUSH
34059: CALL_OW 495
// end ; end ;
34063: LD_VAR 0 2
34067: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34068: LD_INT 0
34070: PPUSH
// end ;
34071: LD_VAR 0 4
34075: RET
// export function SOS_Command ( cmd ) ; begin
34076: LD_INT 0
34078: PPUSH
// end ;
34079: LD_VAR 0 2
34083: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34084: LD_INT 0
34086: PPUSH
// end ;
34087: LD_VAR 0 6
34091: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34092: LD_INT 0
34094: PPUSH
34095: PPUSH
// if not vehicle or not factory then
34096: LD_VAR 0 1
34100: NOT
34101: PUSH
34102: LD_VAR 0 2
34106: NOT
34107: OR
34108: IFFALSE 34112
// exit ;
34110: GO 34343
// if factoryWaypoints >= factory then
34112: LD_EXP 129
34116: PUSH
34117: LD_VAR 0 2
34121: GREATEREQUAL
34122: IFFALSE 34343
// if factoryWaypoints [ factory ] then
34124: LD_EXP 129
34128: PUSH
34129: LD_VAR 0 2
34133: ARRAY
34134: IFFALSE 34343
// begin if GetControl ( vehicle ) = control_manual then
34136: LD_VAR 0 1
34140: PPUSH
34141: CALL_OW 263
34145: PUSH
34146: LD_INT 1
34148: EQUAL
34149: IFFALSE 34230
// begin driver := IsDrivenBy ( vehicle ) ;
34151: LD_ADDR_VAR 0 4
34155: PUSH
34156: LD_VAR 0 1
34160: PPUSH
34161: CALL_OW 311
34165: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34166: LD_VAR 0 4
34170: PPUSH
34171: LD_EXP 129
34175: PUSH
34176: LD_VAR 0 2
34180: ARRAY
34181: PUSH
34182: LD_INT 1
34184: ARRAY
34185: PPUSH
34186: LD_EXP 129
34190: PUSH
34191: LD_VAR 0 2
34195: ARRAY
34196: PUSH
34197: LD_INT 2
34199: ARRAY
34200: PPUSH
34201: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34205: LD_VAR 0 4
34209: PPUSH
34210: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34214: LD_VAR 0 4
34218: PPUSH
34219: LD_VAR 0 2
34223: PPUSH
34224: CALL_OW 180
// end else
34228: GO 34343
// if GetControl ( vehicle ) = control_remote then
34230: LD_VAR 0 1
34234: PPUSH
34235: CALL_OW 263
34239: PUSH
34240: LD_INT 2
34242: EQUAL
34243: IFFALSE 34304
// begin wait ( 0 0$2 ) ;
34245: LD_INT 70
34247: PPUSH
34248: CALL_OW 67
// if Connect ( vehicle ) then
34252: LD_VAR 0 1
34256: PPUSH
34257: CALL 46567 0 1
34261: IFFALSE 34302
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34263: LD_VAR 0 1
34267: PPUSH
34268: LD_EXP 129
34272: PUSH
34273: LD_VAR 0 2
34277: ARRAY
34278: PUSH
34279: LD_INT 1
34281: ARRAY
34282: PPUSH
34283: LD_EXP 129
34287: PUSH
34288: LD_VAR 0 2
34292: ARRAY
34293: PUSH
34294: LD_INT 2
34296: ARRAY
34297: PPUSH
34298: CALL_OW 171
// end else
34302: GO 34343
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34304: LD_VAR 0 1
34308: PPUSH
34309: LD_EXP 129
34313: PUSH
34314: LD_VAR 0 2
34318: ARRAY
34319: PUSH
34320: LD_INT 1
34322: ARRAY
34323: PPUSH
34324: LD_EXP 129
34328: PUSH
34329: LD_VAR 0 2
34333: ARRAY
34334: PUSH
34335: LD_INT 2
34337: ARRAY
34338: PPUSH
34339: CALL_OW 171
// end ; end ;
34343: LD_VAR 0 3
34347: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34348: LD_INT 0
34350: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34351: LD_VAR 0 1
34355: PUSH
34356: LD_INT 250
34358: EQUAL
34359: PUSH
34360: LD_VAR 0 2
34364: PPUSH
34365: CALL_OW 264
34369: PUSH
34370: LD_EXP 59
34374: EQUAL
34375: AND
34376: IFFALSE 34397
// MinerPlaceMine ( unit , x , y ) ;
34378: LD_VAR 0 2
34382: PPUSH
34383: LD_VAR 0 4
34387: PPUSH
34388: LD_VAR 0 5
34392: PPUSH
34393: CALL 37125 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34397: LD_VAR 0 1
34401: PUSH
34402: LD_INT 251
34404: EQUAL
34405: PUSH
34406: LD_VAR 0 2
34410: PPUSH
34411: CALL_OW 264
34415: PUSH
34416: LD_EXP 59
34420: EQUAL
34421: AND
34422: IFFALSE 34443
// MinerDetonateMine ( unit , x , y ) ;
34424: LD_VAR 0 2
34428: PPUSH
34429: LD_VAR 0 4
34433: PPUSH
34434: LD_VAR 0 5
34438: PPUSH
34439: CALL 37402 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34443: LD_VAR 0 1
34447: PUSH
34448: LD_INT 252
34450: EQUAL
34451: PUSH
34452: LD_VAR 0 2
34456: PPUSH
34457: CALL_OW 264
34461: PUSH
34462: LD_EXP 59
34466: EQUAL
34467: AND
34468: IFFALSE 34489
// MinerCreateMinefield ( unit , x , y ) ;
34470: LD_VAR 0 2
34474: PPUSH
34475: LD_VAR 0 4
34479: PPUSH
34480: LD_VAR 0 5
34484: PPUSH
34485: CALL 37819 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34489: LD_VAR 0 1
34493: PUSH
34494: LD_INT 253
34496: EQUAL
34497: PUSH
34498: LD_VAR 0 2
34502: PPUSH
34503: CALL_OW 257
34507: PUSH
34508: LD_INT 5
34510: EQUAL
34511: AND
34512: IFFALSE 34533
// ComBinocular ( unit , x , y ) ;
34514: LD_VAR 0 2
34518: PPUSH
34519: LD_VAR 0 4
34523: PPUSH
34524: LD_VAR 0 5
34528: PPUSH
34529: CALL 38190 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34533: LD_VAR 0 1
34537: PUSH
34538: LD_INT 254
34540: EQUAL
34541: PUSH
34542: LD_VAR 0 2
34546: PPUSH
34547: CALL_OW 264
34551: PUSH
34552: LD_EXP 54
34556: EQUAL
34557: AND
34558: PUSH
34559: LD_VAR 0 3
34563: PPUSH
34564: CALL_OW 263
34568: PUSH
34569: LD_INT 3
34571: EQUAL
34572: AND
34573: IFFALSE 34589
// HackDestroyVehicle ( unit , selectedUnit ) ;
34575: LD_VAR 0 2
34579: PPUSH
34580: LD_VAR 0 3
34584: PPUSH
34585: CALL 36485 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34589: LD_VAR 0 1
34593: PUSH
34594: LD_INT 255
34596: EQUAL
34597: PUSH
34598: LD_VAR 0 2
34602: PPUSH
34603: CALL_OW 264
34607: PUSH
34608: LD_INT 14
34610: PUSH
34611: LD_INT 53
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: IN
34618: AND
34619: PUSH
34620: LD_VAR 0 4
34624: PPUSH
34625: LD_VAR 0 5
34629: PPUSH
34630: CALL_OW 488
34634: AND
34635: IFFALSE 34659
// CutTreeXYR ( unit , x , y , 12 ) ;
34637: LD_VAR 0 2
34641: PPUSH
34642: LD_VAR 0 4
34646: PPUSH
34647: LD_VAR 0 5
34651: PPUSH
34652: LD_INT 12
34654: PPUSH
34655: CALL 35051 0 4
// if cmd = 256 then
34659: LD_VAR 0 1
34663: PUSH
34664: LD_INT 256
34666: EQUAL
34667: IFFALSE 34688
// SetFactoryWaypoint ( unit , x , y ) ;
34669: LD_VAR 0 2
34673: PPUSH
34674: LD_VAR 0 4
34678: PPUSH
34679: LD_VAR 0 5
34683: PPUSH
34684: CALL 34693 0 3
// end ;
34688: LD_VAR 0 6
34692: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34693: LD_INT 0
34695: PPUSH
34696: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34697: LD_VAR 0 1
34701: NOT
34702: PUSH
34703: LD_VAR 0 2
34707: PPUSH
34708: LD_VAR 0 3
34712: PPUSH
34713: CALL_OW 488
34717: NOT
34718: OR
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 266
34729: PUSH
34730: LD_INT 3
34732: NONEQUAL
34733: PUSH
34734: LD_VAR 0 1
34738: PPUSH
34739: CALL_OW 247
34743: PUSH
34744: LD_INT 1
34746: EQUAL
34747: NOT
34748: AND
34749: OR
34750: IFFALSE 34754
// exit ;
34752: GO 34903
// if GetType ( factory ) = unit_human then
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 247
34763: PUSH
34764: LD_INT 1
34766: EQUAL
34767: IFFALSE 34784
// factory := IsInUnit ( factory ) ;
34769: LD_ADDR_VAR 0 1
34773: PUSH
34774: LD_VAR 0 1
34778: PPUSH
34779: CALL_OW 310
34783: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34784: LD_VAR 0 1
34788: PPUSH
34789: CALL_OW 266
34793: PUSH
34794: LD_INT 3
34796: NONEQUAL
34797: IFFALSE 34801
// exit ;
34799: GO 34903
// if HexInfo ( x , y ) = factory then
34801: LD_VAR 0 2
34805: PPUSH
34806: LD_VAR 0 3
34810: PPUSH
34811: CALL_OW 428
34815: PUSH
34816: LD_VAR 0 1
34820: EQUAL
34821: IFFALSE 34848
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34823: LD_ADDR_EXP 129
34827: PUSH
34828: LD_EXP 129
34832: PPUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: LD_INT 0
34840: PPUSH
34841: CALL_OW 1
34845: ST_TO_ADDR
34846: GO 34899
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34848: LD_ADDR_EXP 129
34852: PUSH
34853: LD_EXP 129
34857: PPUSH
34858: LD_VAR 0 1
34862: PPUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: CALL_OW 255
34872: PUSH
34873: LD_VAR 0 1
34877: PUSH
34878: LD_VAR 0 2
34882: PUSH
34883: LD_VAR 0 3
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: PPUSH
34894: CALL_OW 1
34898: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34899: CALL 34908 0 0
// end ;
34903: LD_VAR 0 4
34907: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34908: LD_INT 0
34910: PPUSH
34911: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34912: LD_STRING resetFactoryWaypoint();
34914: PPUSH
34915: CALL_OW 559
// if factoryWaypoints then
34919: LD_EXP 129
34923: IFFALSE 35046
// begin for i := 1 to factoryWaypoints do
34925: LD_ADDR_VAR 0 2
34929: PUSH
34930: DOUBLE
34931: LD_INT 1
34933: DEC
34934: ST_TO_ADDR
34935: LD_EXP 129
34939: PUSH
34940: FOR_TO
34941: IFFALSE 35044
// if factoryWaypoints [ i ] then
34943: LD_EXP 129
34947: PUSH
34948: LD_VAR 0 2
34952: ARRAY
34953: IFFALSE 35042
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34955: LD_STRING setFactoryWaypointXY(
34957: PUSH
34958: LD_EXP 129
34962: PUSH
34963: LD_VAR 0 2
34967: ARRAY
34968: PUSH
34969: LD_INT 1
34971: ARRAY
34972: STR
34973: PUSH
34974: LD_STRING ,
34976: STR
34977: PUSH
34978: LD_EXP 129
34982: PUSH
34983: LD_VAR 0 2
34987: ARRAY
34988: PUSH
34989: LD_INT 2
34991: ARRAY
34992: STR
34993: PUSH
34994: LD_STRING ,
34996: STR
34997: PUSH
34998: LD_EXP 129
35002: PUSH
35003: LD_VAR 0 2
35007: ARRAY
35008: PUSH
35009: LD_INT 3
35011: ARRAY
35012: STR
35013: PUSH
35014: LD_STRING ,
35016: STR
35017: PUSH
35018: LD_EXP 129
35022: PUSH
35023: LD_VAR 0 2
35027: ARRAY
35028: PUSH
35029: LD_INT 4
35031: ARRAY
35032: STR
35033: PUSH
35034: LD_STRING )
35036: STR
35037: PPUSH
35038: CALL_OW 559
35042: GO 34940
35044: POP
35045: POP
// end ; end ;
35046: LD_VAR 0 1
35050: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35051: LD_INT 0
35053: PPUSH
35054: PPUSH
35055: PPUSH
35056: PPUSH
35057: PPUSH
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35062: LD_VAR 0 1
35066: NOT
35067: PUSH
35068: LD_VAR 0 2
35072: PPUSH
35073: LD_VAR 0 3
35077: PPUSH
35078: CALL_OW 488
35082: NOT
35083: OR
35084: PUSH
35085: LD_VAR 0 4
35089: NOT
35090: OR
35091: IFFALSE 35095
// exit ;
35093: GO 35435
// list := [ ] ;
35095: LD_ADDR_VAR 0 13
35099: PUSH
35100: EMPTY
35101: ST_TO_ADDR
// if x - r < 0 then
35102: LD_VAR 0 2
35106: PUSH
35107: LD_VAR 0 4
35111: MINUS
35112: PUSH
35113: LD_INT 0
35115: LESS
35116: IFFALSE 35128
// min_x := 0 else
35118: LD_ADDR_VAR 0 7
35122: PUSH
35123: LD_INT 0
35125: ST_TO_ADDR
35126: GO 35144
// min_x := x - r ;
35128: LD_ADDR_VAR 0 7
35132: PUSH
35133: LD_VAR 0 2
35137: PUSH
35138: LD_VAR 0 4
35142: MINUS
35143: ST_TO_ADDR
// if y - r < 0 then
35144: LD_VAR 0 3
35148: PUSH
35149: LD_VAR 0 4
35153: MINUS
35154: PUSH
35155: LD_INT 0
35157: LESS
35158: IFFALSE 35170
// min_y := 0 else
35160: LD_ADDR_VAR 0 8
35164: PUSH
35165: LD_INT 0
35167: ST_TO_ADDR
35168: GO 35186
// min_y := y - r ;
35170: LD_ADDR_VAR 0 8
35174: PUSH
35175: LD_VAR 0 3
35179: PUSH
35180: LD_VAR 0 4
35184: MINUS
35185: ST_TO_ADDR
// max_x := x + r ;
35186: LD_ADDR_VAR 0 9
35190: PUSH
35191: LD_VAR 0 2
35195: PUSH
35196: LD_VAR 0 4
35200: PLUS
35201: ST_TO_ADDR
// max_y := y + r ;
35202: LD_ADDR_VAR 0 10
35206: PUSH
35207: LD_VAR 0 3
35211: PUSH
35212: LD_VAR 0 4
35216: PLUS
35217: ST_TO_ADDR
// for _x = min_x to max_x do
35218: LD_ADDR_VAR 0 11
35222: PUSH
35223: DOUBLE
35224: LD_VAR 0 7
35228: DEC
35229: ST_TO_ADDR
35230: LD_VAR 0 9
35234: PUSH
35235: FOR_TO
35236: IFFALSE 35353
// for _y = min_y to max_y do
35238: LD_ADDR_VAR 0 12
35242: PUSH
35243: DOUBLE
35244: LD_VAR 0 8
35248: DEC
35249: ST_TO_ADDR
35250: LD_VAR 0 10
35254: PUSH
35255: FOR_TO
35256: IFFALSE 35349
// begin if not ValidHex ( _x , _y ) then
35258: LD_VAR 0 11
35262: PPUSH
35263: LD_VAR 0 12
35267: PPUSH
35268: CALL_OW 488
35272: NOT
35273: IFFALSE 35277
// continue ;
35275: GO 35255
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35277: LD_VAR 0 11
35281: PPUSH
35282: LD_VAR 0 12
35286: PPUSH
35287: CALL_OW 351
35291: PUSH
35292: LD_VAR 0 11
35296: PPUSH
35297: LD_VAR 0 12
35301: PPUSH
35302: CALL_OW 554
35306: AND
35307: IFFALSE 35347
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35309: LD_ADDR_VAR 0 13
35313: PUSH
35314: LD_VAR 0 13
35318: PPUSH
35319: LD_VAR 0 13
35323: PUSH
35324: LD_INT 1
35326: PLUS
35327: PPUSH
35328: LD_VAR 0 11
35332: PUSH
35333: LD_VAR 0 12
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PPUSH
35342: CALL_OW 2
35346: ST_TO_ADDR
// end ;
35347: GO 35255
35349: POP
35350: POP
35351: GO 35235
35353: POP
35354: POP
// if not list then
35355: LD_VAR 0 13
35359: NOT
35360: IFFALSE 35364
// exit ;
35362: GO 35435
// for i in list do
35364: LD_ADDR_VAR 0 6
35368: PUSH
35369: LD_VAR 0 13
35373: PUSH
35374: FOR_IN
35375: IFFALSE 35433
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35377: LD_VAR 0 1
35381: PPUSH
35382: LD_STRING M
35384: PUSH
35385: LD_VAR 0 6
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: PUSH
35394: LD_VAR 0 6
35398: PUSH
35399: LD_INT 2
35401: ARRAY
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: PPUSH
35427: CALL_OW 447
35431: GO 35374
35433: POP
35434: POP
// end ;
35435: LD_VAR 0 5
35439: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35440: LD_EXP 130
35444: NOT
35445: IFFALSE 35495
35447: GO 35449
35449: DISABLE
// begin initHack := true ;
35450: LD_ADDR_EXP 130
35454: PUSH
35455: LD_INT 1
35457: ST_TO_ADDR
// hackTanks := [ ] ;
35458: LD_ADDR_EXP 131
35462: PUSH
35463: EMPTY
35464: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35465: LD_ADDR_EXP 132
35469: PUSH
35470: EMPTY
35471: ST_TO_ADDR
// hackLimit := 3 ;
35472: LD_ADDR_EXP 133
35476: PUSH
35477: LD_INT 3
35479: ST_TO_ADDR
// hackDist := 12 ;
35480: LD_ADDR_EXP 134
35484: PUSH
35485: LD_INT 12
35487: ST_TO_ADDR
// hackCounter := [ ] ;
35488: LD_ADDR_EXP 135
35492: PUSH
35493: EMPTY
35494: ST_TO_ADDR
// end ;
35495: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35496: LD_EXP 130
35500: PUSH
35501: LD_INT 34
35503: PUSH
35504: LD_EXP 54
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PPUSH
35513: CALL_OW 69
35517: AND
35518: IFFALSE 35773
35520: GO 35522
35522: DISABLE
35523: LD_INT 0
35525: PPUSH
35526: PPUSH
// begin enable ;
35527: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35528: LD_ADDR_VAR 0 1
35532: PUSH
35533: LD_INT 34
35535: PUSH
35536: LD_EXP 54
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PPUSH
35545: CALL_OW 69
35549: PUSH
35550: FOR_IN
35551: IFFALSE 35771
// begin if not i in hackTanks then
35553: LD_VAR 0 1
35557: PUSH
35558: LD_EXP 131
35562: IN
35563: NOT
35564: IFFALSE 35647
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35566: LD_ADDR_EXP 131
35570: PUSH
35571: LD_EXP 131
35575: PPUSH
35576: LD_EXP 131
35580: PUSH
35581: LD_INT 1
35583: PLUS
35584: PPUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 1
35594: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35595: LD_ADDR_EXP 132
35599: PUSH
35600: LD_EXP 132
35604: PPUSH
35605: LD_EXP 132
35609: PUSH
35610: LD_INT 1
35612: PLUS
35613: PPUSH
35614: EMPTY
35615: PPUSH
35616: CALL_OW 1
35620: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35621: LD_ADDR_EXP 135
35625: PUSH
35626: LD_EXP 135
35630: PPUSH
35631: LD_EXP 135
35635: PUSH
35636: LD_INT 1
35638: PLUS
35639: PPUSH
35640: EMPTY
35641: PPUSH
35642: CALL_OW 1
35646: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 302
35656: NOT
35657: IFFALSE 35670
// begin HackUnlinkAll ( i ) ;
35659: LD_VAR 0 1
35663: PPUSH
35664: CALL 35776 0 1
// continue ;
35668: GO 35550
// end ; HackCheckCapturedStatus ( i ) ;
35670: LD_VAR 0 1
35674: PPUSH
35675: CALL 36219 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35679: LD_ADDR_VAR 0 2
35683: PUSH
35684: LD_INT 81
35686: PUSH
35687: LD_VAR 0 1
35691: PPUSH
35692: CALL_OW 255
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 33
35703: PUSH
35704: LD_INT 3
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 91
35713: PUSH
35714: LD_VAR 0 1
35718: PUSH
35719: LD_EXP 134
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 50
35731: PUSH
35732: EMPTY
35733: LIST
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: PPUSH
35741: CALL_OW 69
35745: ST_TO_ADDR
// if not tmp then
35746: LD_VAR 0 2
35750: NOT
35751: IFFALSE 35755
// continue ;
35753: GO 35550
// HackLink ( i , tmp ) ;
35755: LD_VAR 0 1
35759: PPUSH
35760: LD_VAR 0 2
35764: PPUSH
35765: CALL 35912 0 2
// end ;
35769: GO 35550
35771: POP
35772: POP
// end ;
35773: PPOPN 2
35775: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35776: LD_INT 0
35778: PPUSH
35779: PPUSH
35780: PPUSH
// if not hack in hackTanks then
35781: LD_VAR 0 1
35785: PUSH
35786: LD_EXP 131
35790: IN
35791: NOT
35792: IFFALSE 35796
// exit ;
35794: GO 35907
// index := GetElementIndex ( hackTanks , hack ) ;
35796: LD_ADDR_VAR 0 4
35800: PUSH
35801: LD_EXP 131
35805: PPUSH
35806: LD_VAR 0 1
35810: PPUSH
35811: CALL 43381 0 2
35815: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35816: LD_EXP 132
35820: PUSH
35821: LD_VAR 0 4
35825: ARRAY
35826: IFFALSE 35907
// begin for i in hackTanksCaptured [ index ] do
35828: LD_ADDR_VAR 0 3
35832: PUSH
35833: LD_EXP 132
35837: PUSH
35838: LD_VAR 0 4
35842: ARRAY
35843: PUSH
35844: FOR_IN
35845: IFFALSE 35871
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35847: LD_VAR 0 3
35851: PUSH
35852: LD_INT 1
35854: ARRAY
35855: PPUSH
35856: LD_VAR 0 3
35860: PUSH
35861: LD_INT 2
35863: ARRAY
35864: PPUSH
35865: CALL_OW 235
35869: GO 35844
35871: POP
35872: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35873: LD_ADDR_EXP 132
35877: PUSH
35878: LD_EXP 132
35882: PPUSH
35883: LD_VAR 0 4
35887: PPUSH
35888: EMPTY
35889: PPUSH
35890: CALL_OW 1
35894: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35895: LD_VAR 0 1
35899: PPUSH
35900: LD_INT 0
35902: PPUSH
35903: CALL_OW 505
// end ; end ;
35907: LD_VAR 0 2
35911: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35912: LD_INT 0
35914: PPUSH
35915: PPUSH
35916: PPUSH
// if not hack in hackTanks or not vehicles then
35917: LD_VAR 0 1
35921: PUSH
35922: LD_EXP 131
35926: IN
35927: NOT
35928: PUSH
35929: LD_VAR 0 2
35933: NOT
35934: OR
35935: IFFALSE 35939
// exit ;
35937: GO 36214
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35939: LD_ADDR_VAR 0 2
35943: PUSH
35944: LD_VAR 0 1
35948: PPUSH
35949: LD_VAR 0 2
35953: PPUSH
35954: LD_INT 1
35956: PPUSH
35957: LD_INT 1
35959: PPUSH
35960: CALL 44031 0 4
35964: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35965: LD_ADDR_VAR 0 5
35969: PUSH
35970: LD_EXP 131
35974: PPUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL 43381 0 2
35984: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35985: LD_EXP 132
35989: PUSH
35990: LD_VAR 0 5
35994: ARRAY
35995: PUSH
35996: LD_EXP 133
36000: LESS
36001: IFFALSE 36190
// begin for i := 1 to vehicles do
36003: LD_ADDR_VAR 0 4
36007: PUSH
36008: DOUBLE
36009: LD_INT 1
36011: DEC
36012: ST_TO_ADDR
36013: LD_VAR 0 2
36017: PUSH
36018: FOR_TO
36019: IFFALSE 36188
// begin if hackTanksCaptured [ index ] = hackLimit then
36021: LD_EXP 132
36025: PUSH
36026: LD_VAR 0 5
36030: ARRAY
36031: PUSH
36032: LD_EXP 133
36036: EQUAL
36037: IFFALSE 36041
// break ;
36039: GO 36188
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36041: LD_ADDR_EXP 135
36045: PUSH
36046: LD_EXP 135
36050: PPUSH
36051: LD_VAR 0 5
36055: PPUSH
36056: LD_EXP 135
36060: PUSH
36061: LD_VAR 0 5
36065: ARRAY
36066: PUSH
36067: LD_INT 1
36069: PLUS
36070: PPUSH
36071: CALL_OW 1
36075: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36076: LD_ADDR_EXP 132
36080: PUSH
36081: LD_EXP 132
36085: PPUSH
36086: LD_VAR 0 5
36090: PUSH
36091: LD_EXP 132
36095: PUSH
36096: LD_VAR 0 5
36100: ARRAY
36101: PUSH
36102: LD_INT 1
36104: PLUS
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PPUSH
36110: LD_VAR 0 2
36114: PUSH
36115: LD_VAR 0 4
36119: ARRAY
36120: PUSH
36121: LD_VAR 0 2
36125: PUSH
36126: LD_VAR 0 4
36130: ARRAY
36131: PPUSH
36132: CALL_OW 255
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PPUSH
36141: CALL 43596 0 3
36145: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36146: LD_VAR 0 2
36150: PUSH
36151: LD_VAR 0 4
36155: ARRAY
36156: PPUSH
36157: LD_VAR 0 1
36161: PPUSH
36162: CALL_OW 255
36166: PPUSH
36167: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36171: LD_VAR 0 2
36175: PUSH
36176: LD_VAR 0 4
36180: ARRAY
36181: PPUSH
36182: CALL_OW 141
// end ;
36186: GO 36018
36188: POP
36189: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36190: LD_VAR 0 1
36194: PPUSH
36195: LD_EXP 132
36199: PUSH
36200: LD_VAR 0 5
36204: ARRAY
36205: PUSH
36206: LD_INT 0
36208: PLUS
36209: PPUSH
36210: CALL_OW 505
// end ;
36214: LD_VAR 0 3
36218: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36219: LD_INT 0
36221: PPUSH
36222: PPUSH
36223: PPUSH
36224: PPUSH
// if not hack in hackTanks then
36225: LD_VAR 0 1
36229: PUSH
36230: LD_EXP 131
36234: IN
36235: NOT
36236: IFFALSE 36240
// exit ;
36238: GO 36480
// index := GetElementIndex ( hackTanks , hack ) ;
36240: LD_ADDR_VAR 0 4
36244: PUSH
36245: LD_EXP 131
36249: PPUSH
36250: LD_VAR 0 1
36254: PPUSH
36255: CALL 43381 0 2
36259: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: DOUBLE
36266: LD_EXP 132
36270: PUSH
36271: LD_VAR 0 4
36275: ARRAY
36276: INC
36277: ST_TO_ADDR
36278: LD_INT 1
36280: PUSH
36281: FOR_DOWNTO
36282: IFFALSE 36454
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36284: LD_ADDR_VAR 0 5
36288: PUSH
36289: LD_EXP 132
36293: PUSH
36294: LD_VAR 0 4
36298: ARRAY
36299: PUSH
36300: LD_VAR 0 3
36304: ARRAY
36305: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36306: LD_VAR 0 5
36310: PUSH
36311: LD_INT 1
36313: ARRAY
36314: PPUSH
36315: CALL_OW 302
36319: NOT
36320: PUSH
36321: LD_VAR 0 5
36325: PUSH
36326: LD_INT 1
36328: ARRAY
36329: PPUSH
36330: CALL_OW 255
36334: PUSH
36335: LD_VAR 0 1
36339: PPUSH
36340: CALL_OW 255
36344: NONEQUAL
36345: OR
36346: IFFALSE 36452
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36348: LD_VAR 0 5
36352: PUSH
36353: LD_INT 1
36355: ARRAY
36356: PPUSH
36357: CALL_OW 305
36361: PUSH
36362: LD_VAR 0 5
36366: PUSH
36367: LD_INT 1
36369: ARRAY
36370: PPUSH
36371: CALL_OW 255
36375: PUSH
36376: LD_VAR 0 1
36380: PPUSH
36381: CALL_OW 255
36385: EQUAL
36386: AND
36387: IFFALSE 36411
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36389: LD_VAR 0 5
36393: PUSH
36394: LD_INT 1
36396: ARRAY
36397: PPUSH
36398: LD_VAR 0 5
36402: PUSH
36403: LD_INT 2
36405: ARRAY
36406: PPUSH
36407: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36411: LD_ADDR_EXP 132
36415: PUSH
36416: LD_EXP 132
36420: PPUSH
36421: LD_VAR 0 4
36425: PPUSH
36426: LD_EXP 132
36430: PUSH
36431: LD_VAR 0 4
36435: ARRAY
36436: PPUSH
36437: LD_VAR 0 3
36441: PPUSH
36442: CALL_OW 3
36446: PPUSH
36447: CALL_OW 1
36451: ST_TO_ADDR
// end ; end ;
36452: GO 36281
36454: POP
36455: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36456: LD_VAR 0 1
36460: PPUSH
36461: LD_EXP 132
36465: PUSH
36466: LD_VAR 0 4
36470: ARRAY
36471: PUSH
36472: LD_INT 0
36474: PLUS
36475: PPUSH
36476: CALL_OW 505
// end ;
36480: LD_VAR 0 2
36484: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36485: LD_INT 0
36487: PPUSH
36488: PPUSH
36489: PPUSH
36490: PPUSH
// if not hack in hackTanks then
36491: LD_VAR 0 1
36495: PUSH
36496: LD_EXP 131
36500: IN
36501: NOT
36502: IFFALSE 36506
// exit ;
36504: GO 36591
// index := GetElementIndex ( hackTanks , hack ) ;
36506: LD_ADDR_VAR 0 5
36510: PUSH
36511: LD_EXP 131
36515: PPUSH
36516: LD_VAR 0 1
36520: PPUSH
36521: CALL 43381 0 2
36525: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36526: LD_ADDR_VAR 0 4
36530: PUSH
36531: DOUBLE
36532: LD_INT 1
36534: DEC
36535: ST_TO_ADDR
36536: LD_EXP 132
36540: PUSH
36541: LD_VAR 0 5
36545: ARRAY
36546: PUSH
36547: FOR_TO
36548: IFFALSE 36589
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36550: LD_EXP 132
36554: PUSH
36555: LD_VAR 0 5
36559: ARRAY
36560: PUSH
36561: LD_VAR 0 4
36565: ARRAY
36566: PUSH
36567: LD_INT 1
36569: ARRAY
36570: PUSH
36571: LD_VAR 0 2
36575: EQUAL
36576: IFFALSE 36587
// KillUnit ( vehicle ) ;
36578: LD_VAR 0 2
36582: PPUSH
36583: CALL_OW 66
36587: GO 36547
36589: POP
36590: POP
// end ;
36591: LD_VAR 0 3
36595: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36596: LD_EXP 136
36600: NOT
36601: IFFALSE 36636
36603: GO 36605
36605: DISABLE
// begin initMiner := true ;
36606: LD_ADDR_EXP 136
36610: PUSH
36611: LD_INT 1
36613: ST_TO_ADDR
// minersList := [ ] ;
36614: LD_ADDR_EXP 137
36618: PUSH
36619: EMPTY
36620: ST_TO_ADDR
// minerMinesList := [ ] ;
36621: LD_ADDR_EXP 138
36625: PUSH
36626: EMPTY
36627: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36628: LD_ADDR_EXP 139
36632: PUSH
36633: LD_INT 5
36635: ST_TO_ADDR
// end ;
36636: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36637: LD_EXP 136
36641: PUSH
36642: LD_INT 34
36644: PUSH
36645: LD_EXP 59
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PPUSH
36654: CALL_OW 69
36658: AND
36659: IFFALSE 37122
36661: GO 36663
36663: DISABLE
36664: LD_INT 0
36666: PPUSH
36667: PPUSH
36668: PPUSH
36669: PPUSH
// begin enable ;
36670: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36671: LD_ADDR_VAR 0 1
36675: PUSH
36676: LD_INT 34
36678: PUSH
36679: LD_EXP 59
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PPUSH
36688: CALL_OW 69
36692: PUSH
36693: FOR_IN
36694: IFFALSE 36766
// begin if not i in minersList then
36696: LD_VAR 0 1
36700: PUSH
36701: LD_EXP 137
36705: IN
36706: NOT
36707: IFFALSE 36764
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36709: LD_ADDR_EXP 137
36713: PUSH
36714: LD_EXP 137
36718: PPUSH
36719: LD_EXP 137
36723: PUSH
36724: LD_INT 1
36726: PLUS
36727: PPUSH
36728: LD_VAR 0 1
36732: PPUSH
36733: CALL_OW 1
36737: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36738: LD_ADDR_EXP 138
36742: PUSH
36743: LD_EXP 138
36747: PPUSH
36748: LD_EXP 138
36752: PUSH
36753: LD_INT 1
36755: PLUS
36756: PPUSH
36757: EMPTY
36758: PPUSH
36759: CALL_OW 1
36763: ST_TO_ADDR
// end end ;
36764: GO 36693
36766: POP
36767: POP
// for i := minerMinesList downto 1 do
36768: LD_ADDR_VAR 0 1
36772: PUSH
36773: DOUBLE
36774: LD_EXP 138
36778: INC
36779: ST_TO_ADDR
36780: LD_INT 1
36782: PUSH
36783: FOR_DOWNTO
36784: IFFALSE 37120
// begin if IsLive ( minersList [ i ] ) then
36786: LD_EXP 137
36790: PUSH
36791: LD_VAR 0 1
36795: ARRAY
36796: PPUSH
36797: CALL_OW 300
36801: IFFALSE 36829
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36803: LD_EXP 137
36807: PUSH
36808: LD_VAR 0 1
36812: ARRAY
36813: PPUSH
36814: LD_EXP 138
36818: PUSH
36819: LD_VAR 0 1
36823: ARRAY
36824: PPUSH
36825: CALL_OW 505
// if not minerMinesList [ i ] then
36829: LD_EXP 138
36833: PUSH
36834: LD_VAR 0 1
36838: ARRAY
36839: NOT
36840: IFFALSE 36844
// continue ;
36842: GO 36783
// for j := minerMinesList [ i ] downto 1 do
36844: LD_ADDR_VAR 0 2
36848: PUSH
36849: DOUBLE
36850: LD_EXP 138
36854: PUSH
36855: LD_VAR 0 1
36859: ARRAY
36860: INC
36861: ST_TO_ADDR
36862: LD_INT 1
36864: PUSH
36865: FOR_DOWNTO
36866: IFFALSE 37116
// begin side := GetSide ( minersList [ i ] ) ;
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: LD_EXP 137
36877: PUSH
36878: LD_VAR 0 1
36882: ARRAY
36883: PPUSH
36884: CALL_OW 255
36888: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36889: LD_ADDR_VAR 0 4
36893: PUSH
36894: LD_EXP 138
36898: PUSH
36899: LD_VAR 0 1
36903: ARRAY
36904: PUSH
36905: LD_VAR 0 2
36909: ARRAY
36910: PUSH
36911: LD_INT 1
36913: ARRAY
36914: PPUSH
36915: LD_EXP 138
36919: PUSH
36920: LD_VAR 0 1
36924: ARRAY
36925: PUSH
36926: LD_VAR 0 2
36930: ARRAY
36931: PUSH
36932: LD_INT 2
36934: ARRAY
36935: PPUSH
36936: CALL_OW 428
36940: ST_TO_ADDR
// if not tmp then
36941: LD_VAR 0 4
36945: NOT
36946: IFFALSE 36950
// continue ;
36948: GO 36865
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36950: LD_VAR 0 4
36954: PUSH
36955: LD_INT 81
36957: PUSH
36958: LD_VAR 0 3
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PPUSH
36967: CALL_OW 69
36971: IN
36972: PUSH
36973: LD_EXP 138
36977: PUSH
36978: LD_VAR 0 1
36982: ARRAY
36983: PUSH
36984: LD_VAR 0 2
36988: ARRAY
36989: PUSH
36990: LD_INT 1
36992: ARRAY
36993: PPUSH
36994: LD_EXP 138
36998: PUSH
36999: LD_VAR 0 1
37003: ARRAY
37004: PUSH
37005: LD_VAR 0 2
37009: ARRAY
37010: PUSH
37011: LD_INT 2
37013: ARRAY
37014: PPUSH
37015: CALL_OW 458
37019: AND
37020: IFFALSE 37114
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37022: LD_EXP 138
37026: PUSH
37027: LD_VAR 0 1
37031: ARRAY
37032: PUSH
37033: LD_VAR 0 2
37037: ARRAY
37038: PUSH
37039: LD_INT 1
37041: ARRAY
37042: PPUSH
37043: LD_EXP 138
37047: PUSH
37048: LD_VAR 0 1
37052: ARRAY
37053: PUSH
37054: LD_VAR 0 2
37058: ARRAY
37059: PUSH
37060: LD_INT 2
37062: ARRAY
37063: PPUSH
37064: LD_VAR 0 3
37068: PPUSH
37069: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37073: LD_ADDR_EXP 138
37077: PUSH
37078: LD_EXP 138
37082: PPUSH
37083: LD_VAR 0 1
37087: PPUSH
37088: LD_EXP 138
37092: PUSH
37093: LD_VAR 0 1
37097: ARRAY
37098: PPUSH
37099: LD_VAR 0 2
37103: PPUSH
37104: CALL_OW 3
37108: PPUSH
37109: CALL_OW 1
37113: ST_TO_ADDR
// end ; end ;
37114: GO 36865
37116: POP
37117: POP
// end ;
37118: GO 36783
37120: POP
37121: POP
// end ;
37122: PPOPN 4
37124: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37125: LD_INT 0
37127: PPUSH
37128: PPUSH
// result := false ;
37129: LD_ADDR_VAR 0 4
37133: PUSH
37134: LD_INT 0
37136: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL_OW 264
37146: PUSH
37147: LD_EXP 59
37151: EQUAL
37152: NOT
37153: IFFALSE 37157
// exit ;
37155: GO 37397
// index := GetElementIndex ( minersList , unit ) ;
37157: LD_ADDR_VAR 0 5
37161: PUSH
37162: LD_EXP 137
37166: PPUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL 43381 0 2
37176: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37177: LD_EXP 138
37181: PUSH
37182: LD_VAR 0 5
37186: ARRAY
37187: PUSH
37188: LD_EXP 139
37192: GREATEREQUAL
37193: IFFALSE 37197
// exit ;
37195: GO 37397
// ComMoveXY ( unit , x , y ) ;
37197: LD_VAR 0 1
37201: PPUSH
37202: LD_VAR 0 2
37206: PPUSH
37207: LD_VAR 0 3
37211: PPUSH
37212: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37216: LD_INT 35
37218: PPUSH
37219: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37223: LD_VAR 0 1
37227: PPUSH
37228: LD_VAR 0 2
37232: PPUSH
37233: LD_VAR 0 3
37237: PPUSH
37238: CALL 74153 0 3
37242: NOT
37243: PUSH
37244: LD_VAR 0 1
37248: PPUSH
37249: CALL_OW 314
37253: AND
37254: IFFALSE 37258
// exit ;
37256: GO 37397
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37258: LD_VAR 0 2
37262: PPUSH
37263: LD_VAR 0 3
37267: PPUSH
37268: CALL_OW 428
37272: PUSH
37273: LD_VAR 0 1
37277: EQUAL
37278: PUSH
37279: LD_VAR 0 1
37283: PPUSH
37284: CALL_OW 314
37288: NOT
37289: AND
37290: IFFALSE 37216
// PlaySoundXY ( x , y , PlantMine ) ;
37292: LD_VAR 0 2
37296: PPUSH
37297: LD_VAR 0 3
37301: PPUSH
37302: LD_STRING PlantMine
37304: PPUSH
37305: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37309: LD_VAR 0 2
37313: PPUSH
37314: LD_VAR 0 3
37318: PPUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL_OW 255
37328: PPUSH
37329: LD_INT 0
37331: PPUSH
37332: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37336: LD_ADDR_EXP 138
37340: PUSH
37341: LD_EXP 138
37345: PPUSH
37346: LD_VAR 0 5
37350: PUSH
37351: LD_EXP 138
37355: PUSH
37356: LD_VAR 0 5
37360: ARRAY
37361: PUSH
37362: LD_INT 1
37364: PLUS
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PPUSH
37370: LD_VAR 0 2
37374: PUSH
37375: LD_VAR 0 3
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PPUSH
37384: CALL 43596 0 3
37388: ST_TO_ADDR
// result := true ;
37389: LD_ADDR_VAR 0 4
37393: PUSH
37394: LD_INT 1
37396: ST_TO_ADDR
// end ;
37397: LD_VAR 0 4
37401: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37402: LD_INT 0
37404: PPUSH
37405: PPUSH
37406: PPUSH
// if not unit in minersList then
37407: LD_VAR 0 1
37411: PUSH
37412: LD_EXP 137
37416: IN
37417: NOT
37418: IFFALSE 37422
// exit ;
37420: GO 37814
// index := GetElementIndex ( minersList , unit ) ;
37422: LD_ADDR_VAR 0 6
37426: PUSH
37427: LD_EXP 137
37431: PPUSH
37432: LD_VAR 0 1
37436: PPUSH
37437: CALL 43381 0 2
37441: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37442: LD_ADDR_VAR 0 5
37446: PUSH
37447: DOUBLE
37448: LD_EXP 138
37452: PUSH
37453: LD_VAR 0 6
37457: ARRAY
37458: INC
37459: ST_TO_ADDR
37460: LD_INT 1
37462: PUSH
37463: FOR_DOWNTO
37464: IFFALSE 37625
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37466: LD_EXP 138
37470: PUSH
37471: LD_VAR 0 6
37475: ARRAY
37476: PUSH
37477: LD_VAR 0 5
37481: ARRAY
37482: PUSH
37483: LD_INT 1
37485: ARRAY
37486: PUSH
37487: LD_VAR 0 2
37491: EQUAL
37492: PUSH
37493: LD_EXP 138
37497: PUSH
37498: LD_VAR 0 6
37502: ARRAY
37503: PUSH
37504: LD_VAR 0 5
37508: ARRAY
37509: PUSH
37510: LD_INT 2
37512: ARRAY
37513: PUSH
37514: LD_VAR 0 3
37518: EQUAL
37519: AND
37520: IFFALSE 37623
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37522: LD_EXP 138
37526: PUSH
37527: LD_VAR 0 6
37531: ARRAY
37532: PUSH
37533: LD_VAR 0 5
37537: ARRAY
37538: PUSH
37539: LD_INT 1
37541: ARRAY
37542: PPUSH
37543: LD_EXP 138
37547: PUSH
37548: LD_VAR 0 6
37552: ARRAY
37553: PUSH
37554: LD_VAR 0 5
37558: ARRAY
37559: PUSH
37560: LD_INT 2
37562: ARRAY
37563: PPUSH
37564: LD_VAR 0 1
37568: PPUSH
37569: CALL_OW 255
37573: PPUSH
37574: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37578: LD_ADDR_EXP 138
37582: PUSH
37583: LD_EXP 138
37587: PPUSH
37588: LD_VAR 0 6
37592: PPUSH
37593: LD_EXP 138
37597: PUSH
37598: LD_VAR 0 6
37602: ARRAY
37603: PPUSH
37604: LD_VAR 0 5
37608: PPUSH
37609: CALL_OW 3
37613: PPUSH
37614: CALL_OW 1
37618: ST_TO_ADDR
// exit ;
37619: POP
37620: POP
37621: GO 37814
// end ; end ;
37623: GO 37463
37625: POP
37626: POP
// for i := minerMinesList [ index ] downto 1 do
37627: LD_ADDR_VAR 0 5
37631: PUSH
37632: DOUBLE
37633: LD_EXP 138
37637: PUSH
37638: LD_VAR 0 6
37642: ARRAY
37643: INC
37644: ST_TO_ADDR
37645: LD_INT 1
37647: PUSH
37648: FOR_DOWNTO
37649: IFFALSE 37812
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37651: LD_EXP 138
37655: PUSH
37656: LD_VAR 0 6
37660: ARRAY
37661: PUSH
37662: LD_VAR 0 5
37666: ARRAY
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: PPUSH
37672: LD_EXP 138
37676: PUSH
37677: LD_VAR 0 6
37681: ARRAY
37682: PUSH
37683: LD_VAR 0 5
37687: ARRAY
37688: PUSH
37689: LD_INT 2
37691: ARRAY
37692: PPUSH
37693: LD_VAR 0 2
37697: PPUSH
37698: LD_VAR 0 3
37702: PPUSH
37703: CALL_OW 298
37707: PUSH
37708: LD_INT 6
37710: LESS
37711: IFFALSE 37810
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37713: LD_EXP 138
37717: PUSH
37718: LD_VAR 0 6
37722: ARRAY
37723: PUSH
37724: LD_VAR 0 5
37728: ARRAY
37729: PUSH
37730: LD_INT 1
37732: ARRAY
37733: PPUSH
37734: LD_EXP 138
37738: PUSH
37739: LD_VAR 0 6
37743: ARRAY
37744: PUSH
37745: LD_VAR 0 5
37749: ARRAY
37750: PUSH
37751: LD_INT 2
37753: ARRAY
37754: PPUSH
37755: LD_VAR 0 1
37759: PPUSH
37760: CALL_OW 255
37764: PPUSH
37765: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37769: LD_ADDR_EXP 138
37773: PUSH
37774: LD_EXP 138
37778: PPUSH
37779: LD_VAR 0 6
37783: PPUSH
37784: LD_EXP 138
37788: PUSH
37789: LD_VAR 0 6
37793: ARRAY
37794: PPUSH
37795: LD_VAR 0 5
37799: PPUSH
37800: CALL_OW 3
37804: PPUSH
37805: CALL_OW 1
37809: ST_TO_ADDR
// end ; end ;
37810: GO 37648
37812: POP
37813: POP
// end ;
37814: LD_VAR 0 4
37818: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37819: LD_INT 0
37821: PPUSH
37822: PPUSH
37823: PPUSH
37824: PPUSH
37825: PPUSH
37826: PPUSH
37827: PPUSH
37828: PPUSH
37829: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37830: LD_VAR 0 1
37834: PPUSH
37835: CALL_OW 264
37839: PUSH
37840: LD_EXP 59
37844: EQUAL
37845: NOT
37846: PUSH
37847: LD_VAR 0 1
37851: PUSH
37852: LD_EXP 137
37856: IN
37857: NOT
37858: OR
37859: IFFALSE 37863
// exit ;
37861: GO 38185
// index := GetElementIndex ( minersList , unit ) ;
37863: LD_ADDR_VAR 0 6
37867: PUSH
37868: LD_EXP 137
37872: PPUSH
37873: LD_VAR 0 1
37877: PPUSH
37878: CALL 43381 0 2
37882: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37883: LD_ADDR_VAR 0 8
37887: PUSH
37888: LD_EXP 139
37892: PUSH
37893: LD_EXP 138
37897: PUSH
37898: LD_VAR 0 6
37902: ARRAY
37903: MINUS
37904: ST_TO_ADDR
// if not minesFreeAmount then
37905: LD_VAR 0 8
37909: NOT
37910: IFFALSE 37914
// exit ;
37912: GO 38185
// tmp := [ ] ;
37914: LD_ADDR_VAR 0 7
37918: PUSH
37919: EMPTY
37920: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37921: LD_ADDR_VAR 0 5
37925: PUSH
37926: DOUBLE
37927: LD_INT 1
37929: DEC
37930: ST_TO_ADDR
37931: LD_VAR 0 8
37935: PUSH
37936: FOR_TO
37937: IFFALSE 38132
// begin _d := rand ( 0 , 5 ) ;
37939: LD_ADDR_VAR 0 11
37943: PUSH
37944: LD_INT 0
37946: PPUSH
37947: LD_INT 5
37949: PPUSH
37950: CALL_OW 12
37954: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37955: LD_ADDR_VAR 0 12
37959: PUSH
37960: LD_INT 2
37962: PPUSH
37963: LD_INT 6
37965: PPUSH
37966: CALL_OW 12
37970: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37971: LD_ADDR_VAR 0 9
37975: PUSH
37976: LD_VAR 0 2
37980: PPUSH
37981: LD_VAR 0 11
37985: PPUSH
37986: LD_VAR 0 12
37990: PPUSH
37991: CALL_OW 272
37995: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37996: LD_ADDR_VAR 0 10
38000: PUSH
38001: LD_VAR 0 3
38005: PPUSH
38006: LD_VAR 0 11
38010: PPUSH
38011: LD_VAR 0 12
38015: PPUSH
38016: CALL_OW 273
38020: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38021: LD_VAR 0 9
38025: PPUSH
38026: LD_VAR 0 10
38030: PPUSH
38031: CALL_OW 488
38035: PUSH
38036: LD_VAR 0 9
38040: PUSH
38041: LD_VAR 0 10
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_VAR 0 7
38054: IN
38055: NOT
38056: AND
38057: PUSH
38058: LD_VAR 0 9
38062: PPUSH
38063: LD_VAR 0 10
38067: PPUSH
38068: CALL_OW 458
38072: NOT
38073: AND
38074: IFFALSE 38116
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38076: LD_ADDR_VAR 0 7
38080: PUSH
38081: LD_VAR 0 7
38085: PPUSH
38086: LD_VAR 0 7
38090: PUSH
38091: LD_INT 1
38093: PLUS
38094: PPUSH
38095: LD_VAR 0 9
38099: PUSH
38100: LD_VAR 0 10
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PPUSH
38109: CALL_OW 1
38113: ST_TO_ADDR
38114: GO 38130
// i := i - 1 ;
38116: LD_ADDR_VAR 0 5
38120: PUSH
38121: LD_VAR 0 5
38125: PUSH
38126: LD_INT 1
38128: MINUS
38129: ST_TO_ADDR
// end ;
38130: GO 37936
38132: POP
38133: POP
// for i in tmp do
38134: LD_ADDR_VAR 0 5
38138: PUSH
38139: LD_VAR 0 7
38143: PUSH
38144: FOR_IN
38145: IFFALSE 38183
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38147: LD_VAR 0 1
38151: PPUSH
38152: LD_VAR 0 5
38156: PUSH
38157: LD_INT 1
38159: ARRAY
38160: PPUSH
38161: LD_VAR 0 5
38165: PUSH
38166: LD_INT 2
38168: ARRAY
38169: PPUSH
38170: CALL 37125 0 3
38174: NOT
38175: IFFALSE 38181
// exit ;
38177: POP
38178: POP
38179: GO 38185
38181: GO 38144
38183: POP
38184: POP
// end ;
38185: LD_VAR 0 4
38189: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38190: LD_INT 0
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
38198: PPUSH
// if not GetClass ( unit ) = class_sniper then
38199: LD_VAR 0 1
38203: PPUSH
38204: CALL_OW 257
38208: PUSH
38209: LD_INT 5
38211: EQUAL
38212: NOT
38213: IFFALSE 38217
// exit ;
38215: GO 38605
// dist := 8 ;
38217: LD_ADDR_VAR 0 5
38221: PUSH
38222: LD_INT 8
38224: ST_TO_ADDR
// viewRange := 12 ;
38225: LD_ADDR_VAR 0 7
38229: PUSH
38230: LD_INT 12
38232: ST_TO_ADDR
// side := GetSide ( unit ) ;
38233: LD_ADDR_VAR 0 6
38237: PUSH
38238: LD_VAR 0 1
38242: PPUSH
38243: CALL_OW 255
38247: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38248: LD_INT 61
38250: PPUSH
38251: LD_VAR 0 6
38255: PPUSH
38256: CALL_OW 321
38260: PUSH
38261: LD_INT 2
38263: EQUAL
38264: IFFALSE 38274
// viewRange := 16 ;
38266: LD_ADDR_VAR 0 7
38270: PUSH
38271: LD_INT 16
38273: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38274: LD_VAR 0 1
38278: PPUSH
38279: LD_VAR 0 2
38283: PPUSH
38284: LD_VAR 0 3
38288: PPUSH
38289: CALL_OW 297
38293: PUSH
38294: LD_VAR 0 5
38298: GREATER
38299: IFFALSE 38378
// begin ComMoveXY ( unit , x , y ) ;
38301: LD_VAR 0 1
38305: PPUSH
38306: LD_VAR 0 2
38310: PPUSH
38311: LD_VAR 0 3
38315: PPUSH
38316: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38320: LD_INT 35
38322: PPUSH
38323: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38327: LD_VAR 0 1
38331: PPUSH
38332: LD_VAR 0 2
38336: PPUSH
38337: LD_VAR 0 3
38341: PPUSH
38342: CALL 74153 0 3
38346: NOT
38347: IFFALSE 38351
// exit ;
38349: GO 38605
// until GetDistUnitXY ( unit , x , y ) < dist ;
38351: LD_VAR 0 1
38355: PPUSH
38356: LD_VAR 0 2
38360: PPUSH
38361: LD_VAR 0 3
38365: PPUSH
38366: CALL_OW 297
38370: PUSH
38371: LD_VAR 0 5
38375: LESS
38376: IFFALSE 38320
// end ; ComTurnXY ( unit , x , y ) ;
38378: LD_VAR 0 1
38382: PPUSH
38383: LD_VAR 0 2
38387: PPUSH
38388: LD_VAR 0 3
38392: PPUSH
38393: CALL_OW 118
// wait ( 5 ) ;
38397: LD_INT 5
38399: PPUSH
38400: CALL_OW 67
// _d := GetDir ( unit ) ;
38404: LD_ADDR_VAR 0 10
38408: PUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL_OW 254
38418: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38419: LD_ADDR_VAR 0 8
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 250
38433: PPUSH
38434: LD_VAR 0 10
38438: PPUSH
38439: LD_VAR 0 5
38443: PPUSH
38444: CALL_OW 272
38448: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38449: LD_ADDR_VAR 0 9
38453: PUSH
38454: LD_VAR 0 1
38458: PPUSH
38459: CALL_OW 251
38463: PPUSH
38464: LD_VAR 0 10
38468: PPUSH
38469: LD_VAR 0 5
38473: PPUSH
38474: CALL_OW 273
38478: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38479: LD_VAR 0 8
38483: PPUSH
38484: LD_VAR 0 9
38488: PPUSH
38489: CALL_OW 488
38493: NOT
38494: IFFALSE 38498
// exit ;
38496: GO 38605
// ComAnimCustom ( unit , 1 ) ;
38498: LD_VAR 0 1
38502: PPUSH
38503: LD_INT 1
38505: PPUSH
38506: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38510: LD_VAR 0 8
38514: PPUSH
38515: LD_VAR 0 9
38519: PPUSH
38520: LD_VAR 0 6
38524: PPUSH
38525: LD_VAR 0 7
38529: PPUSH
38530: CALL_OW 330
// repeat wait ( 1 ) ;
38534: LD_INT 1
38536: PPUSH
38537: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38541: LD_VAR 0 1
38545: PPUSH
38546: CALL_OW 316
38550: PUSH
38551: LD_VAR 0 1
38555: PPUSH
38556: CALL_OW 314
38560: OR
38561: PUSH
38562: LD_VAR 0 1
38566: PPUSH
38567: CALL_OW 302
38571: NOT
38572: OR
38573: PUSH
38574: LD_VAR 0 1
38578: PPUSH
38579: CALL_OW 301
38583: OR
38584: IFFALSE 38534
// RemoveSeeing ( _x , _y , side ) ;
38586: LD_VAR 0 8
38590: PPUSH
38591: LD_VAR 0 9
38595: PPUSH
38596: LD_VAR 0 6
38600: PPUSH
38601: CALL_OW 331
// end ; end_of_file
38605: LD_VAR 0 4
38609: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38610: LD_INT 0
38612: PPUSH
38613: PPUSH
// if exist_mode then
38614: LD_VAR 0 2
38618: IFFALSE 38643
// unit := CreateCharacter ( prefix & ident ) else
38620: LD_ADDR_VAR 0 5
38624: PUSH
38625: LD_VAR 0 3
38629: PUSH
38630: LD_VAR 0 1
38634: STR
38635: PPUSH
38636: CALL_OW 34
38640: ST_TO_ADDR
38641: GO 38658
// unit := NewCharacter ( ident ) ;
38643: LD_ADDR_VAR 0 5
38647: PUSH
38648: LD_VAR 0 1
38652: PPUSH
38653: CALL_OW 25
38657: ST_TO_ADDR
// result := unit ;
38658: LD_ADDR_VAR 0 4
38662: PUSH
38663: LD_VAR 0 5
38667: ST_TO_ADDR
// end ;
38668: LD_VAR 0 4
38672: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38673: LD_INT 0
38675: PPUSH
38676: PPUSH
// if not side or not nation then
38677: LD_VAR 0 1
38681: NOT
38682: PUSH
38683: LD_VAR 0 2
38687: NOT
38688: OR
38689: IFFALSE 38693
// exit ;
38691: GO 39461
// case nation of nation_american :
38693: LD_VAR 0 2
38697: PUSH
38698: LD_INT 1
38700: DOUBLE
38701: EQUAL
38702: IFTRUE 38706
38704: GO 38920
38706: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38707: LD_ADDR_VAR 0 4
38711: PUSH
38712: LD_INT 35
38714: PUSH
38715: LD_INT 45
38717: PUSH
38718: LD_INT 46
38720: PUSH
38721: LD_INT 47
38723: PUSH
38724: LD_INT 82
38726: PUSH
38727: LD_INT 83
38729: PUSH
38730: LD_INT 84
38732: PUSH
38733: LD_INT 85
38735: PUSH
38736: LD_INT 86
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: LD_INT 2
38744: PUSH
38745: LD_INT 6
38747: PUSH
38748: LD_INT 15
38750: PUSH
38751: LD_INT 16
38753: PUSH
38754: LD_INT 7
38756: PUSH
38757: LD_INT 12
38759: PUSH
38760: LD_INT 13
38762: PUSH
38763: LD_INT 10
38765: PUSH
38766: LD_INT 14
38768: PUSH
38769: LD_INT 20
38771: PUSH
38772: LD_INT 21
38774: PUSH
38775: LD_INT 22
38777: PUSH
38778: LD_INT 25
38780: PUSH
38781: LD_INT 32
38783: PUSH
38784: LD_INT 27
38786: PUSH
38787: LD_INT 36
38789: PUSH
38790: LD_INT 69
38792: PUSH
38793: LD_INT 39
38795: PUSH
38796: LD_INT 34
38798: PUSH
38799: LD_INT 40
38801: PUSH
38802: LD_INT 48
38804: PUSH
38805: LD_INT 49
38807: PUSH
38808: LD_INT 50
38810: PUSH
38811: LD_INT 51
38813: PUSH
38814: LD_INT 52
38816: PUSH
38817: LD_INT 53
38819: PUSH
38820: LD_INT 54
38822: PUSH
38823: LD_INT 55
38825: PUSH
38826: LD_INT 56
38828: PUSH
38829: LD_INT 57
38831: PUSH
38832: LD_INT 58
38834: PUSH
38835: LD_INT 59
38837: PUSH
38838: LD_INT 60
38840: PUSH
38841: LD_INT 61
38843: PUSH
38844: LD_INT 62
38846: PUSH
38847: LD_INT 80
38849: PUSH
38850: LD_INT 82
38852: PUSH
38853: LD_INT 83
38855: PUSH
38856: LD_INT 84
38858: PUSH
38859: LD_INT 85
38861: PUSH
38862: LD_INT 86
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
38918: GO 39385
38920: LD_INT 2
38922: DOUBLE
38923: EQUAL
38924: IFTRUE 38928
38926: GO 39154
38928: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38929: LD_ADDR_VAR 0 4
38933: PUSH
38934: LD_INT 35
38936: PUSH
38937: LD_INT 45
38939: PUSH
38940: LD_INT 46
38942: PUSH
38943: LD_INT 47
38945: PUSH
38946: LD_INT 82
38948: PUSH
38949: LD_INT 83
38951: PUSH
38952: LD_INT 84
38954: PUSH
38955: LD_INT 85
38957: PUSH
38958: LD_INT 87
38960: PUSH
38961: LD_INT 70
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 11
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: LD_INT 4
38975: PUSH
38976: LD_INT 5
38978: PUSH
38979: LD_INT 6
38981: PUSH
38982: LD_INT 15
38984: PUSH
38985: LD_INT 18
38987: PUSH
38988: LD_INT 7
38990: PUSH
38991: LD_INT 17
38993: PUSH
38994: LD_INT 8
38996: PUSH
38997: LD_INT 20
38999: PUSH
39000: LD_INT 21
39002: PUSH
39003: LD_INT 22
39005: PUSH
39006: LD_INT 72
39008: PUSH
39009: LD_INT 26
39011: PUSH
39012: LD_INT 69
39014: PUSH
39015: LD_INT 39
39017: PUSH
39018: LD_INT 40
39020: PUSH
39021: LD_INT 41
39023: PUSH
39024: LD_INT 42
39026: PUSH
39027: LD_INT 43
39029: PUSH
39030: LD_INT 48
39032: PUSH
39033: LD_INT 49
39035: PUSH
39036: LD_INT 50
39038: PUSH
39039: LD_INT 51
39041: PUSH
39042: LD_INT 52
39044: PUSH
39045: LD_INT 53
39047: PUSH
39048: LD_INT 54
39050: PUSH
39051: LD_INT 55
39053: PUSH
39054: LD_INT 56
39056: PUSH
39057: LD_INT 60
39059: PUSH
39060: LD_INT 61
39062: PUSH
39063: LD_INT 62
39065: PUSH
39066: LD_INT 66
39068: PUSH
39069: LD_INT 67
39071: PUSH
39072: LD_INT 68
39074: PUSH
39075: LD_INT 81
39077: PUSH
39078: LD_INT 82
39080: PUSH
39081: LD_INT 83
39083: PUSH
39084: LD_INT 84
39086: PUSH
39087: LD_INT 85
39089: PUSH
39090: LD_INT 87
39092: PUSH
39093: LD_INT 88
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
39152: GO 39385
39154: LD_INT 3
39156: DOUBLE
39157: EQUAL
39158: IFTRUE 39162
39160: GO 39384
39162: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39163: LD_ADDR_VAR 0 4
39167: PUSH
39168: LD_INT 46
39170: PUSH
39171: LD_INT 47
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 82
39182: PUSH
39183: LD_INT 83
39185: PUSH
39186: LD_INT 84
39188: PUSH
39189: LD_INT 85
39191: PUSH
39192: LD_INT 86
39194: PUSH
39195: LD_INT 11
39197: PUSH
39198: LD_INT 9
39200: PUSH
39201: LD_INT 20
39203: PUSH
39204: LD_INT 19
39206: PUSH
39207: LD_INT 21
39209: PUSH
39210: LD_INT 24
39212: PUSH
39213: LD_INT 22
39215: PUSH
39216: LD_INT 25
39218: PUSH
39219: LD_INT 28
39221: PUSH
39222: LD_INT 29
39224: PUSH
39225: LD_INT 30
39227: PUSH
39228: LD_INT 31
39230: PUSH
39231: LD_INT 37
39233: PUSH
39234: LD_INT 38
39236: PUSH
39237: LD_INT 32
39239: PUSH
39240: LD_INT 27
39242: PUSH
39243: LD_INT 33
39245: PUSH
39246: LD_INT 69
39248: PUSH
39249: LD_INT 39
39251: PUSH
39252: LD_INT 34
39254: PUSH
39255: LD_INT 40
39257: PUSH
39258: LD_INT 71
39260: PUSH
39261: LD_INT 23
39263: PUSH
39264: LD_INT 44
39266: PUSH
39267: LD_INT 48
39269: PUSH
39270: LD_INT 49
39272: PUSH
39273: LD_INT 50
39275: PUSH
39276: LD_INT 51
39278: PUSH
39279: LD_INT 52
39281: PUSH
39282: LD_INT 53
39284: PUSH
39285: LD_INT 54
39287: PUSH
39288: LD_INT 55
39290: PUSH
39291: LD_INT 56
39293: PUSH
39294: LD_INT 57
39296: PUSH
39297: LD_INT 58
39299: PUSH
39300: LD_INT 59
39302: PUSH
39303: LD_INT 63
39305: PUSH
39306: LD_INT 64
39308: PUSH
39309: LD_INT 65
39311: PUSH
39312: LD_INT 82
39314: PUSH
39315: LD_INT 83
39317: PUSH
39318: LD_INT 84
39320: PUSH
39321: LD_INT 85
39323: PUSH
39324: LD_INT 86
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: ST_TO_ADDR
39382: GO 39385
39384: POP
// if state > - 1 and state < 3 then
39385: LD_VAR 0 3
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: GREATER
39394: PUSH
39395: LD_VAR 0 3
39399: PUSH
39400: LD_INT 3
39402: LESS
39403: AND
39404: IFFALSE 39461
// for i in result do
39406: LD_ADDR_VAR 0 5
39410: PUSH
39411: LD_VAR 0 4
39415: PUSH
39416: FOR_IN
39417: IFFALSE 39459
// if GetTech ( i , side ) <> state then
39419: LD_VAR 0 5
39423: PPUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 321
39433: PUSH
39434: LD_VAR 0 3
39438: NONEQUAL
39439: IFFALSE 39457
// result := result diff i ;
39441: LD_ADDR_VAR 0 4
39445: PUSH
39446: LD_VAR 0 4
39450: PUSH
39451: LD_VAR 0 5
39455: DIFF
39456: ST_TO_ADDR
39457: GO 39416
39459: POP
39460: POP
// end ;
39461: LD_VAR 0 4
39465: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39466: LD_INT 0
39468: PPUSH
39469: PPUSH
39470: PPUSH
// result := true ;
39471: LD_ADDR_VAR 0 3
39475: PUSH
39476: LD_INT 1
39478: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39479: LD_ADDR_VAR 0 5
39483: PUSH
39484: LD_VAR 0 2
39488: PPUSH
39489: CALL_OW 480
39493: ST_TO_ADDR
// if not tmp then
39494: LD_VAR 0 5
39498: NOT
39499: IFFALSE 39503
// exit ;
39501: GO 39552
// for i in tmp do
39503: LD_ADDR_VAR 0 4
39507: PUSH
39508: LD_VAR 0 5
39512: PUSH
39513: FOR_IN
39514: IFFALSE 39550
// if GetTech ( i , side ) <> state_researched then
39516: LD_VAR 0 4
39520: PPUSH
39521: LD_VAR 0 1
39525: PPUSH
39526: CALL_OW 321
39530: PUSH
39531: LD_INT 2
39533: NONEQUAL
39534: IFFALSE 39548
// begin result := false ;
39536: LD_ADDR_VAR 0 3
39540: PUSH
39541: LD_INT 0
39543: ST_TO_ADDR
// exit ;
39544: POP
39545: POP
39546: GO 39552
// end ;
39548: GO 39513
39550: POP
39551: POP
// end ;
39552: LD_VAR 0 3
39556: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39557: LD_INT 0
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
39570: PPUSH
39571: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39572: LD_VAR 0 1
39576: NOT
39577: PUSH
39578: LD_VAR 0 1
39582: PPUSH
39583: CALL_OW 257
39587: PUSH
39588: LD_INT 9
39590: NONEQUAL
39591: OR
39592: IFFALSE 39596
// exit ;
39594: GO 40169
// side := GetSide ( unit ) ;
39596: LD_ADDR_VAR 0 9
39600: PUSH
39601: LD_VAR 0 1
39605: PPUSH
39606: CALL_OW 255
39610: ST_TO_ADDR
// tech_space := tech_spacanom ;
39611: LD_ADDR_VAR 0 12
39615: PUSH
39616: LD_INT 29
39618: ST_TO_ADDR
// tech_time := tech_taurad ;
39619: LD_ADDR_VAR 0 13
39623: PUSH
39624: LD_INT 28
39626: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39627: LD_ADDR_VAR 0 11
39631: PUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: CALL_OW 310
39641: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39642: LD_VAR 0 11
39646: PPUSH
39647: CALL_OW 247
39651: PUSH
39652: LD_INT 2
39654: EQUAL
39655: IFFALSE 39659
// exit ;
39657: GO 40169
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39659: LD_ADDR_VAR 0 8
39663: PUSH
39664: LD_INT 81
39666: PUSH
39667: LD_VAR 0 9
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 3
39678: PUSH
39679: LD_INT 21
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PPUSH
39697: CALL_OW 69
39701: ST_TO_ADDR
// if not tmp then
39702: LD_VAR 0 8
39706: NOT
39707: IFFALSE 39711
// exit ;
39709: GO 40169
// if in_unit then
39711: LD_VAR 0 11
39715: IFFALSE 39739
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39717: LD_ADDR_VAR 0 10
39721: PUSH
39722: LD_VAR 0 8
39726: PPUSH
39727: LD_VAR 0 11
39731: PPUSH
39732: CALL_OW 74
39736: ST_TO_ADDR
39737: GO 39759
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39739: LD_ADDR_VAR 0 10
39743: PUSH
39744: LD_VAR 0 8
39748: PPUSH
39749: LD_VAR 0 1
39753: PPUSH
39754: CALL_OW 74
39758: ST_TO_ADDR
// if not enemy then
39759: LD_VAR 0 10
39763: NOT
39764: IFFALSE 39768
// exit ;
39766: GO 40169
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39768: LD_VAR 0 11
39772: PUSH
39773: LD_VAR 0 11
39777: PPUSH
39778: LD_VAR 0 10
39782: PPUSH
39783: CALL_OW 296
39787: PUSH
39788: LD_INT 13
39790: GREATER
39791: AND
39792: PUSH
39793: LD_VAR 0 1
39797: PPUSH
39798: LD_VAR 0 10
39802: PPUSH
39803: CALL_OW 296
39807: PUSH
39808: LD_INT 12
39810: GREATER
39811: OR
39812: IFFALSE 39816
// exit ;
39814: GO 40169
// missile := [ 1 ] ;
39816: LD_ADDR_VAR 0 14
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39827: LD_VAR 0 9
39831: PPUSH
39832: LD_VAR 0 12
39836: PPUSH
39837: CALL_OW 325
39841: IFFALSE 39870
// missile := Insert ( missile , missile + 1 , 2 ) ;
39843: LD_ADDR_VAR 0 14
39847: PUSH
39848: LD_VAR 0 14
39852: PPUSH
39853: LD_VAR 0 14
39857: PUSH
39858: LD_INT 1
39860: PLUS
39861: PPUSH
39862: LD_INT 2
39864: PPUSH
39865: CALL_OW 2
39869: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39870: LD_VAR 0 9
39874: PPUSH
39875: LD_VAR 0 13
39879: PPUSH
39880: CALL_OW 325
39884: PUSH
39885: LD_VAR 0 10
39889: PPUSH
39890: CALL_OW 255
39894: PPUSH
39895: LD_VAR 0 13
39899: PPUSH
39900: CALL_OW 325
39904: NOT
39905: AND
39906: IFFALSE 39935
// missile := Insert ( missile , missile + 1 , 3 ) ;
39908: LD_ADDR_VAR 0 14
39912: PUSH
39913: LD_VAR 0 14
39917: PPUSH
39918: LD_VAR 0 14
39922: PUSH
39923: LD_INT 1
39925: PLUS
39926: PPUSH
39927: LD_INT 3
39929: PPUSH
39930: CALL_OW 2
39934: ST_TO_ADDR
// if missile < 2 then
39935: LD_VAR 0 14
39939: PUSH
39940: LD_INT 2
39942: LESS
39943: IFFALSE 39947
// exit ;
39945: GO 40169
// x := GetX ( enemy ) ;
39947: LD_ADDR_VAR 0 4
39951: PUSH
39952: LD_VAR 0 10
39956: PPUSH
39957: CALL_OW 250
39961: ST_TO_ADDR
// y := GetY ( enemy ) ;
39962: LD_ADDR_VAR 0 5
39966: PUSH
39967: LD_VAR 0 10
39971: PPUSH
39972: CALL_OW 251
39976: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39977: LD_ADDR_VAR 0 6
39981: PUSH
39982: LD_VAR 0 4
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PPUSH
39991: LD_INT 1
39993: PPUSH
39994: CALL_OW 12
39998: PLUS
39999: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40000: LD_ADDR_VAR 0 7
40004: PUSH
40005: LD_VAR 0 5
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PPUSH
40014: LD_INT 1
40016: PPUSH
40017: CALL_OW 12
40021: PLUS
40022: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40023: LD_VAR 0 6
40027: PPUSH
40028: LD_VAR 0 7
40032: PPUSH
40033: CALL_OW 488
40037: NOT
40038: IFFALSE 40060
// begin _x := x ;
40040: LD_ADDR_VAR 0 6
40044: PUSH
40045: LD_VAR 0 4
40049: ST_TO_ADDR
// _y := y ;
40050: LD_ADDR_VAR 0 7
40054: PUSH
40055: LD_VAR 0 5
40059: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40060: LD_ADDR_VAR 0 3
40064: PUSH
40065: LD_INT 1
40067: PPUSH
40068: LD_VAR 0 14
40072: PPUSH
40073: CALL_OW 12
40077: ST_TO_ADDR
// case i of 1 :
40078: LD_VAR 0 3
40082: PUSH
40083: LD_INT 1
40085: DOUBLE
40086: EQUAL
40087: IFTRUE 40091
40089: GO 40108
40091: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40092: LD_VAR 0 1
40096: PPUSH
40097: LD_VAR 0 10
40101: PPUSH
40102: CALL_OW 115
40106: GO 40169
40108: LD_INT 2
40110: DOUBLE
40111: EQUAL
40112: IFTRUE 40116
40114: GO 40138
40116: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40117: LD_VAR 0 1
40121: PPUSH
40122: LD_VAR 0 6
40126: PPUSH
40127: LD_VAR 0 7
40131: PPUSH
40132: CALL_OW 153
40136: GO 40169
40138: LD_INT 3
40140: DOUBLE
40141: EQUAL
40142: IFTRUE 40146
40144: GO 40168
40146: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40147: LD_VAR 0 1
40151: PPUSH
40152: LD_VAR 0 6
40156: PPUSH
40157: LD_VAR 0 7
40161: PPUSH
40162: CALL_OW 154
40166: GO 40169
40168: POP
// end ;
40169: LD_VAR 0 2
40173: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40174: LD_INT 0
40176: PPUSH
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
// if not unit or not building then
40182: LD_VAR 0 1
40186: NOT
40187: PUSH
40188: LD_VAR 0 2
40192: NOT
40193: OR
40194: IFFALSE 40198
// exit ;
40196: GO 40356
// x := GetX ( building ) ;
40198: LD_ADDR_VAR 0 5
40202: PUSH
40203: LD_VAR 0 2
40207: PPUSH
40208: CALL_OW 250
40212: ST_TO_ADDR
// y := GetY ( building ) ;
40213: LD_ADDR_VAR 0 6
40217: PUSH
40218: LD_VAR 0 2
40222: PPUSH
40223: CALL_OW 251
40227: ST_TO_ADDR
// for i = 0 to 5 do
40228: LD_ADDR_VAR 0 4
40232: PUSH
40233: DOUBLE
40234: LD_INT 0
40236: DEC
40237: ST_TO_ADDR
40238: LD_INT 5
40240: PUSH
40241: FOR_TO
40242: IFFALSE 40354
// begin _x := ShiftX ( x , i , 3 ) ;
40244: LD_ADDR_VAR 0 7
40248: PUSH
40249: LD_VAR 0 5
40253: PPUSH
40254: LD_VAR 0 4
40258: PPUSH
40259: LD_INT 3
40261: PPUSH
40262: CALL_OW 272
40266: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40267: LD_ADDR_VAR 0 8
40271: PUSH
40272: LD_VAR 0 6
40276: PPUSH
40277: LD_VAR 0 4
40281: PPUSH
40282: LD_INT 3
40284: PPUSH
40285: CALL_OW 273
40289: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40290: LD_VAR 0 7
40294: PPUSH
40295: LD_VAR 0 8
40299: PPUSH
40300: CALL_OW 488
40304: NOT
40305: IFFALSE 40309
// continue ;
40307: GO 40241
// if HexInfo ( _x , _y ) = 0 then
40309: LD_VAR 0 7
40313: PPUSH
40314: LD_VAR 0 8
40318: PPUSH
40319: CALL_OW 428
40323: PUSH
40324: LD_INT 0
40326: EQUAL
40327: IFFALSE 40352
// begin ComMoveXY ( unit , _x , _y ) ;
40329: LD_VAR 0 1
40333: PPUSH
40334: LD_VAR 0 7
40338: PPUSH
40339: LD_VAR 0 8
40343: PPUSH
40344: CALL_OW 111
// exit ;
40348: POP
40349: POP
40350: GO 40356
// end ; end ;
40352: GO 40241
40354: POP
40355: POP
// end ;
40356: LD_VAR 0 3
40360: RET
// export function ScanBase ( side , base_area ) ; begin
40361: LD_INT 0
40363: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40364: LD_ADDR_VAR 0 3
40368: PUSH
40369: LD_VAR 0 2
40373: PPUSH
40374: LD_INT 81
40376: PUSH
40377: LD_VAR 0 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PPUSH
40386: CALL_OW 70
40390: ST_TO_ADDR
// end ;
40391: LD_VAR 0 3
40395: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40396: LD_INT 0
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
// result := false ;
40402: LD_ADDR_VAR 0 2
40406: PUSH
40407: LD_INT 0
40409: ST_TO_ADDR
// side := GetSide ( unit ) ;
40410: LD_ADDR_VAR 0 3
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 255
40424: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40425: LD_ADDR_VAR 0 4
40429: PUSH
40430: LD_VAR 0 1
40434: PPUSH
40435: CALL_OW 248
40439: ST_TO_ADDR
// case nat of 1 :
40440: LD_VAR 0 4
40444: PUSH
40445: LD_INT 1
40447: DOUBLE
40448: EQUAL
40449: IFTRUE 40453
40451: GO 40464
40453: POP
// tech := tech_lassight ; 2 :
40454: LD_ADDR_VAR 0 5
40458: PUSH
40459: LD_INT 12
40461: ST_TO_ADDR
40462: GO 40503
40464: LD_INT 2
40466: DOUBLE
40467: EQUAL
40468: IFTRUE 40472
40470: GO 40483
40472: POP
// tech := tech_mortar ; 3 :
40473: LD_ADDR_VAR 0 5
40477: PUSH
40478: LD_INT 41
40480: ST_TO_ADDR
40481: GO 40503
40483: LD_INT 3
40485: DOUBLE
40486: EQUAL
40487: IFTRUE 40491
40489: GO 40502
40491: POP
// tech := tech_bazooka ; end ;
40492: LD_ADDR_VAR 0 5
40496: PUSH
40497: LD_INT 44
40499: ST_TO_ADDR
40500: GO 40503
40502: POP
// if Researched ( side , tech ) then
40503: LD_VAR 0 3
40507: PPUSH
40508: LD_VAR 0 5
40512: PPUSH
40513: CALL_OW 325
40517: IFFALSE 40544
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40519: LD_ADDR_VAR 0 2
40523: PUSH
40524: LD_INT 5
40526: PUSH
40527: LD_INT 8
40529: PUSH
40530: LD_INT 9
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: LIST
40537: PUSH
40538: LD_VAR 0 4
40542: ARRAY
40543: ST_TO_ADDR
// end ;
40544: LD_VAR 0 2
40548: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40549: LD_INT 0
40551: PPUSH
40552: PPUSH
40553: PPUSH
// if not mines then
40554: LD_VAR 0 2
40558: NOT
40559: IFFALSE 40563
// exit ;
40561: GO 40707
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40563: LD_ADDR_VAR 0 5
40567: PUSH
40568: LD_INT 81
40570: PUSH
40571: LD_VAR 0 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: LD_INT 21
40585: PUSH
40586: LD_INT 3
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PPUSH
40601: CALL_OW 69
40605: ST_TO_ADDR
// for i in mines do
40606: LD_ADDR_VAR 0 4
40610: PUSH
40611: LD_VAR 0 2
40615: PUSH
40616: FOR_IN
40617: IFFALSE 40705
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40619: LD_VAR 0 4
40623: PUSH
40624: LD_INT 1
40626: ARRAY
40627: PPUSH
40628: LD_VAR 0 4
40632: PUSH
40633: LD_INT 2
40635: ARRAY
40636: PPUSH
40637: CALL_OW 458
40641: NOT
40642: IFFALSE 40646
// continue ;
40644: GO 40616
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40646: LD_VAR 0 4
40650: PUSH
40651: LD_INT 1
40653: ARRAY
40654: PPUSH
40655: LD_VAR 0 4
40659: PUSH
40660: LD_INT 2
40662: ARRAY
40663: PPUSH
40664: CALL_OW 428
40668: PUSH
40669: LD_VAR 0 5
40673: IN
40674: IFFALSE 40703
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40676: LD_VAR 0 4
40680: PUSH
40681: LD_INT 1
40683: ARRAY
40684: PPUSH
40685: LD_VAR 0 4
40689: PUSH
40690: LD_INT 2
40692: ARRAY
40693: PPUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: CALL_OW 456
// end ;
40703: GO 40616
40705: POP
40706: POP
// end ;
40707: LD_VAR 0 3
40711: RET
// export function Count ( array ) ; var i ; begin
40712: LD_INT 0
40714: PPUSH
40715: PPUSH
// result := 0 ;
40716: LD_ADDR_VAR 0 2
40720: PUSH
40721: LD_INT 0
40723: ST_TO_ADDR
// for i in array do
40724: LD_ADDR_VAR 0 3
40728: PUSH
40729: LD_VAR 0 1
40733: PUSH
40734: FOR_IN
40735: IFFALSE 40759
// if i then
40737: LD_VAR 0 3
40741: IFFALSE 40757
// result := result + 1 ;
40743: LD_ADDR_VAR 0 2
40747: PUSH
40748: LD_VAR 0 2
40752: PUSH
40753: LD_INT 1
40755: PLUS
40756: ST_TO_ADDR
40757: GO 40734
40759: POP
40760: POP
// end ;
40761: LD_VAR 0 2
40765: RET
// export function IsEmpty ( building ) ; begin
40766: LD_INT 0
40768: PPUSH
// if not building then
40769: LD_VAR 0 1
40773: NOT
40774: IFFALSE 40778
// exit ;
40776: GO 40821
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40778: LD_ADDR_VAR 0 2
40782: PUSH
40783: LD_VAR 0 1
40787: PUSH
40788: LD_INT 22
40790: PUSH
40791: LD_VAR 0 1
40795: PPUSH
40796: CALL_OW 255
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 58
40807: PUSH
40808: EMPTY
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PPUSH
40815: CALL_OW 69
40819: IN
40820: ST_TO_ADDR
// end ;
40821: LD_VAR 0 2
40825: RET
// export function IsNotFull ( building ) ; begin
40826: LD_INT 0
40828: PPUSH
// if not building then
40829: LD_VAR 0 1
40833: NOT
40834: IFFALSE 40838
// exit ;
40836: GO 40857
// result := UnitsInside ( building ) < 6 ;
40838: LD_ADDR_VAR 0 2
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL_OW 313
40852: PUSH
40853: LD_INT 6
40855: LESS
40856: ST_TO_ADDR
// end ;
40857: LD_VAR 0 2
40861: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40862: LD_INT 0
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
// tmp := [ ] ;
40868: LD_ADDR_VAR 0 3
40872: PUSH
40873: EMPTY
40874: ST_TO_ADDR
// list := [ ] ;
40875: LD_ADDR_VAR 0 5
40879: PUSH
40880: EMPTY
40881: ST_TO_ADDR
// for i = 16 to 25 do
40882: LD_ADDR_VAR 0 4
40886: PUSH
40887: DOUBLE
40888: LD_INT 16
40890: DEC
40891: ST_TO_ADDR
40892: LD_INT 25
40894: PUSH
40895: FOR_TO
40896: IFFALSE 40969
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40898: LD_ADDR_VAR 0 3
40902: PUSH
40903: LD_VAR 0 3
40907: PUSH
40908: LD_INT 22
40910: PUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: CALL_OW 255
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 91
40927: PUSH
40928: LD_VAR 0 1
40932: PUSH
40933: LD_INT 6
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 30
40943: PUSH
40944: LD_VAR 0 4
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: PPUSH
40961: CALL_OW 69
40965: ADD
40966: ST_TO_ADDR
40967: GO 40895
40969: POP
40970: POP
// for i = 1 to tmp do
40971: LD_ADDR_VAR 0 4
40975: PUSH
40976: DOUBLE
40977: LD_INT 1
40979: DEC
40980: ST_TO_ADDR
40981: LD_VAR 0 3
40985: PUSH
40986: FOR_TO
40987: IFFALSE 41075
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40989: LD_ADDR_VAR 0 5
40993: PUSH
40994: LD_VAR 0 5
40998: PUSH
40999: LD_VAR 0 3
41003: PUSH
41004: LD_VAR 0 4
41008: ARRAY
41009: PPUSH
41010: CALL_OW 266
41014: PUSH
41015: LD_VAR 0 3
41019: PUSH
41020: LD_VAR 0 4
41024: ARRAY
41025: PPUSH
41026: CALL_OW 250
41030: PUSH
41031: LD_VAR 0 3
41035: PUSH
41036: LD_VAR 0 4
41040: ARRAY
41041: PPUSH
41042: CALL_OW 251
41046: PUSH
41047: LD_VAR 0 3
41051: PUSH
41052: LD_VAR 0 4
41056: ARRAY
41057: PPUSH
41058: CALL_OW 254
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: PUSH
41069: EMPTY
41070: LIST
41071: ADD
41072: ST_TO_ADDR
41073: GO 40986
41075: POP
41076: POP
// result := list ;
41077: LD_ADDR_VAR 0 2
41081: PUSH
41082: LD_VAR 0 5
41086: ST_TO_ADDR
// end ;
41087: LD_VAR 0 2
41091: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41092: LD_INT 0
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
// if not factory then
41101: LD_VAR 0 1
41105: NOT
41106: IFFALSE 41110
// exit ;
41108: GO 41703
// if control = control_apeman then
41110: LD_VAR 0 4
41114: PUSH
41115: LD_INT 5
41117: EQUAL
41118: IFFALSE 41227
// begin tmp := UnitsInside ( factory ) ;
41120: LD_ADDR_VAR 0 8
41124: PUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: CALL_OW 313
41134: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41135: LD_VAR 0 8
41139: PPUSH
41140: LD_INT 25
41142: PUSH
41143: LD_INT 12
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PPUSH
41150: CALL_OW 72
41154: NOT
41155: IFFALSE 41165
// control := control_manual ;
41157: LD_ADDR_VAR 0 4
41161: PUSH
41162: LD_INT 1
41164: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41165: LD_ADDR_VAR 0 8
41169: PUSH
41170: LD_VAR 0 1
41174: PPUSH
41175: CALL 40862 0 1
41179: ST_TO_ADDR
// if tmp then
41180: LD_VAR 0 8
41184: IFFALSE 41227
// begin for i in tmp do
41186: LD_ADDR_VAR 0 7
41190: PUSH
41191: LD_VAR 0 8
41195: PUSH
41196: FOR_IN
41197: IFFALSE 41225
// if i [ 1 ] = b_ext_radio then
41199: LD_VAR 0 7
41203: PUSH
41204: LD_INT 1
41206: ARRAY
41207: PUSH
41208: LD_INT 22
41210: EQUAL
41211: IFFALSE 41223
// begin control := control_remote ;
41213: LD_ADDR_VAR 0 4
41217: PUSH
41218: LD_INT 2
41220: ST_TO_ADDR
// break ;
41221: GO 41225
// end ;
41223: GO 41196
41225: POP
41226: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41227: LD_VAR 0 1
41231: PPUSH
41232: LD_VAR 0 2
41236: PPUSH
41237: LD_VAR 0 3
41241: PPUSH
41242: LD_VAR 0 4
41246: PPUSH
41247: LD_VAR 0 5
41251: PPUSH
41252: CALL_OW 448
41256: IFFALSE 41291
// begin result := [ chassis , engine , control , weapon ] ;
41258: LD_ADDR_VAR 0 6
41262: PUSH
41263: LD_VAR 0 2
41267: PUSH
41268: LD_VAR 0 3
41272: PUSH
41273: LD_VAR 0 4
41277: PUSH
41278: LD_VAR 0 5
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
// exit ;
41289: GO 41703
// end ; _chassis := AvailableChassisList ( factory ) ;
41291: LD_ADDR_VAR 0 9
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 475
41305: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41306: LD_ADDR_VAR 0 11
41310: PUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: CALL_OW 476
41320: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41321: LD_ADDR_VAR 0 12
41325: PUSH
41326: LD_VAR 0 1
41330: PPUSH
41331: CALL_OW 477
41335: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41336: LD_ADDR_VAR 0 10
41340: PUSH
41341: LD_VAR 0 1
41345: PPUSH
41346: CALL_OW 478
41350: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41351: LD_VAR 0 9
41355: NOT
41356: PUSH
41357: LD_VAR 0 11
41361: NOT
41362: OR
41363: PUSH
41364: LD_VAR 0 12
41368: NOT
41369: OR
41370: PUSH
41371: LD_VAR 0 10
41375: NOT
41376: OR
41377: IFFALSE 41412
// begin result := [ chassis , engine , control , weapon ] ;
41379: LD_ADDR_VAR 0 6
41383: PUSH
41384: LD_VAR 0 2
41388: PUSH
41389: LD_VAR 0 3
41393: PUSH
41394: LD_VAR 0 4
41398: PUSH
41399: LD_VAR 0 5
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: ST_TO_ADDR
// exit ;
41410: GO 41703
// end ; if not chassis in _chassis then
41412: LD_VAR 0 2
41416: PUSH
41417: LD_VAR 0 9
41421: IN
41422: NOT
41423: IFFALSE 41449
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41425: LD_ADDR_VAR 0 2
41429: PUSH
41430: LD_VAR 0 9
41434: PUSH
41435: LD_INT 1
41437: PPUSH
41438: LD_VAR 0 9
41442: PPUSH
41443: CALL_OW 12
41447: ARRAY
41448: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41449: LD_VAR 0 2
41453: PPUSH
41454: LD_VAR 0 3
41458: PPUSH
41459: CALL 41708 0 2
41463: NOT
41464: IFFALSE 41523
// repeat engine := _engine [ 1 ] ;
41466: LD_ADDR_VAR 0 3
41470: PUSH
41471: LD_VAR 0 11
41475: PUSH
41476: LD_INT 1
41478: ARRAY
41479: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41480: LD_ADDR_VAR 0 11
41484: PUSH
41485: LD_VAR 0 11
41489: PPUSH
41490: LD_INT 1
41492: PPUSH
41493: CALL_OW 3
41497: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41498: LD_VAR 0 2
41502: PPUSH
41503: LD_VAR 0 3
41507: PPUSH
41508: CALL 41708 0 2
41512: PUSH
41513: LD_VAR 0 11
41517: PUSH
41518: EMPTY
41519: EQUAL
41520: OR
41521: IFFALSE 41466
// if not control in _control then
41523: LD_VAR 0 4
41527: PUSH
41528: LD_VAR 0 12
41532: IN
41533: NOT
41534: IFFALSE 41560
// control := _control [ rand ( 1 , _control ) ] ;
41536: LD_ADDR_VAR 0 4
41540: PUSH
41541: LD_VAR 0 12
41545: PUSH
41546: LD_INT 1
41548: PPUSH
41549: LD_VAR 0 12
41553: PPUSH
41554: CALL_OW 12
41558: ARRAY
41559: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41560: LD_VAR 0 2
41564: PPUSH
41565: LD_VAR 0 5
41569: PPUSH
41570: CALL 41928 0 2
41574: NOT
41575: IFFALSE 41634
// repeat weapon := _weapon [ 1 ] ;
41577: LD_ADDR_VAR 0 5
41581: PUSH
41582: LD_VAR 0 10
41586: PUSH
41587: LD_INT 1
41589: ARRAY
41590: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41591: LD_ADDR_VAR 0 10
41595: PUSH
41596: LD_VAR 0 10
41600: PPUSH
41601: LD_INT 1
41603: PPUSH
41604: CALL_OW 3
41608: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41609: LD_VAR 0 2
41613: PPUSH
41614: LD_VAR 0 5
41618: PPUSH
41619: CALL 41928 0 2
41623: PUSH
41624: LD_VAR 0 10
41628: PUSH
41629: EMPTY
41630: EQUAL
41631: OR
41632: IFFALSE 41577
// result := [ ] ;
41634: LD_ADDR_VAR 0 6
41638: PUSH
41639: EMPTY
41640: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41641: LD_VAR 0 1
41645: PPUSH
41646: LD_VAR 0 2
41650: PPUSH
41651: LD_VAR 0 3
41655: PPUSH
41656: LD_VAR 0 4
41660: PPUSH
41661: LD_VAR 0 5
41665: PPUSH
41666: CALL_OW 448
41670: IFFALSE 41703
// result := [ chassis , engine , control , weapon ] ;
41672: LD_ADDR_VAR 0 6
41676: PUSH
41677: LD_VAR 0 2
41681: PUSH
41682: LD_VAR 0 3
41686: PUSH
41687: LD_VAR 0 4
41691: PUSH
41692: LD_VAR 0 5
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: ST_TO_ADDR
// end ;
41703: LD_VAR 0 6
41707: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41708: LD_INT 0
41710: PPUSH
// if not chassis or not engine then
41711: LD_VAR 0 1
41715: NOT
41716: PUSH
41717: LD_VAR 0 2
41721: NOT
41722: OR
41723: IFFALSE 41727
// exit ;
41725: GO 41923
// case engine of engine_solar :
41727: LD_VAR 0 2
41731: PUSH
41732: LD_INT 2
41734: DOUBLE
41735: EQUAL
41736: IFTRUE 41740
41738: GO 41778
41740: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41741: LD_ADDR_VAR 0 3
41745: PUSH
41746: LD_INT 11
41748: PUSH
41749: LD_INT 12
41751: PUSH
41752: LD_INT 13
41754: PUSH
41755: LD_INT 14
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: ST_TO_ADDR
41776: GO 41907
41778: LD_INT 1
41780: DOUBLE
41781: EQUAL
41782: IFTRUE 41786
41784: GO 41848
41786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41787: LD_ADDR_VAR 0 3
41791: PUSH
41792: LD_INT 11
41794: PUSH
41795: LD_INT 12
41797: PUSH
41798: LD_INT 13
41800: PUSH
41801: LD_INT 14
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: LD_INT 3
41812: PUSH
41813: LD_INT 4
41815: PUSH
41816: LD_INT 5
41818: PUSH
41819: LD_INT 21
41821: PUSH
41822: LD_INT 23
41824: PUSH
41825: LD_INT 22
41827: PUSH
41828: LD_INT 24
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: ST_TO_ADDR
41846: GO 41907
41848: LD_INT 3
41850: DOUBLE
41851: EQUAL
41852: IFTRUE 41856
41854: GO 41906
41856: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41857: LD_ADDR_VAR 0 3
41861: PUSH
41862: LD_INT 13
41864: PUSH
41865: LD_INT 14
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: LD_INT 3
41873: PUSH
41874: LD_INT 4
41876: PUSH
41877: LD_INT 5
41879: PUSH
41880: LD_INT 21
41882: PUSH
41883: LD_INT 22
41885: PUSH
41886: LD_INT 23
41888: PUSH
41889: LD_INT 24
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: ST_TO_ADDR
41904: GO 41907
41906: POP
// result := ( chassis in result ) ;
41907: LD_ADDR_VAR 0 3
41911: PUSH
41912: LD_VAR 0 1
41916: PUSH
41917: LD_VAR 0 3
41921: IN
41922: ST_TO_ADDR
// end ;
41923: LD_VAR 0 3
41927: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41928: LD_INT 0
41930: PPUSH
// if not chassis or not weapon then
41931: LD_VAR 0 1
41935: NOT
41936: PUSH
41937: LD_VAR 0 2
41941: NOT
41942: OR
41943: IFFALSE 41947
// exit ;
41945: GO 43009
// case weapon of us_machine_gun :
41947: LD_VAR 0 2
41951: PUSH
41952: LD_INT 2
41954: DOUBLE
41955: EQUAL
41956: IFTRUE 41960
41958: GO 41990
41960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41961: LD_ADDR_VAR 0 3
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: LD_INT 4
41977: PUSH
41978: LD_INT 5
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: ST_TO_ADDR
41988: GO 42993
41990: LD_INT 3
41992: DOUBLE
41993: EQUAL
41994: IFTRUE 41998
41996: GO 42028
41998: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41999: LD_ADDR_VAR 0 3
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: LD_INT 4
42015: PUSH
42016: LD_INT 5
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
42026: GO 42993
42028: LD_INT 11
42030: DOUBLE
42031: EQUAL
42032: IFTRUE 42036
42034: GO 42066
42036: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42037: LD_ADDR_VAR 0 3
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: LD_INT 4
42053: PUSH
42054: LD_INT 5
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
42064: GO 42993
42066: LD_INT 4
42068: DOUBLE
42069: EQUAL
42070: IFTRUE 42074
42072: GO 42100
42074: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42075: LD_ADDR_VAR 0 3
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: LD_INT 4
42088: PUSH
42089: LD_INT 5
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: ST_TO_ADDR
42098: GO 42993
42100: LD_INT 5
42102: DOUBLE
42103: EQUAL
42104: IFTRUE 42108
42106: GO 42134
42108: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: LD_INT 4
42122: PUSH
42123: LD_INT 5
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: ST_TO_ADDR
42132: GO 42993
42134: LD_INT 9
42136: DOUBLE
42137: EQUAL
42138: IFTRUE 42142
42140: GO 42168
42142: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42143: LD_ADDR_VAR 0 3
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 3
42153: PUSH
42154: LD_INT 4
42156: PUSH
42157: LD_INT 5
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
42166: GO 42993
42168: LD_INT 7
42170: DOUBLE
42171: EQUAL
42172: IFTRUE 42176
42174: GO 42202
42176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: LD_INT 4
42190: PUSH
42191: LD_INT 5
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: ST_TO_ADDR
42200: GO 42993
42202: LD_INT 12
42204: DOUBLE
42205: EQUAL
42206: IFTRUE 42210
42208: GO 42236
42210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42211: LD_ADDR_VAR 0 3
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: LD_INT 3
42221: PUSH
42222: LD_INT 4
42224: PUSH
42225: LD_INT 5
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
42234: GO 42993
42236: LD_INT 13
42238: DOUBLE
42239: EQUAL
42240: IFTRUE 42244
42242: GO 42270
42244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42245: LD_ADDR_VAR 0 3
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: LD_INT 4
42258: PUSH
42259: LD_INT 5
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: ST_TO_ADDR
42268: GO 42993
42270: LD_INT 14
42272: DOUBLE
42273: EQUAL
42274: IFTRUE 42278
42276: GO 42296
42278: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42279: LD_ADDR_VAR 0 3
42283: PUSH
42284: LD_INT 4
42286: PUSH
42287: LD_INT 5
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: ST_TO_ADDR
42294: GO 42993
42296: LD_INT 6
42298: DOUBLE
42299: EQUAL
42300: IFTRUE 42304
42302: GO 42322
42304: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42305: LD_ADDR_VAR 0 3
42309: PUSH
42310: LD_INT 4
42312: PUSH
42313: LD_INT 5
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: ST_TO_ADDR
42320: GO 42993
42322: LD_INT 10
42324: DOUBLE
42325: EQUAL
42326: IFTRUE 42330
42328: GO 42348
42330: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42331: LD_ADDR_VAR 0 3
42335: PUSH
42336: LD_INT 4
42338: PUSH
42339: LD_INT 5
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: ST_TO_ADDR
42346: GO 42993
42348: LD_INT 22
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42356
42354: GO 42382
42356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42357: LD_ADDR_VAR 0 3
42361: PUSH
42362: LD_INT 11
42364: PUSH
42365: LD_INT 12
42367: PUSH
42368: LD_INT 13
42370: PUSH
42371: LD_INT 14
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: ST_TO_ADDR
42380: GO 42993
42382: LD_INT 23
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42390
42388: GO 42416
42390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_INT 11
42398: PUSH
42399: LD_INT 12
42401: PUSH
42402: LD_INT 13
42404: PUSH
42405: LD_INT 14
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: ST_TO_ADDR
42414: GO 42993
42416: LD_INT 24
42418: DOUBLE
42419: EQUAL
42420: IFTRUE 42424
42422: GO 42450
42424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42425: LD_ADDR_VAR 0 3
42429: PUSH
42430: LD_INT 11
42432: PUSH
42433: LD_INT 12
42435: PUSH
42436: LD_INT 13
42438: PUSH
42439: LD_INT 14
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: ST_TO_ADDR
42448: GO 42993
42450: LD_INT 30
42452: DOUBLE
42453: EQUAL
42454: IFTRUE 42458
42456: GO 42484
42458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: LD_INT 11
42466: PUSH
42467: LD_INT 12
42469: PUSH
42470: LD_INT 13
42472: PUSH
42473: LD_INT 14
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: ST_TO_ADDR
42482: GO 42993
42484: LD_INT 25
42486: DOUBLE
42487: EQUAL
42488: IFTRUE 42492
42490: GO 42510
42492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: LD_INT 13
42500: PUSH
42501: LD_INT 14
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: ST_TO_ADDR
42508: GO 42993
42510: LD_INT 27
42512: DOUBLE
42513: EQUAL
42514: IFTRUE 42518
42516: GO 42536
42518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_INT 13
42526: PUSH
42527: LD_INT 14
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: ST_TO_ADDR
42534: GO 42993
42536: LD_EXP 57
42540: DOUBLE
42541: EQUAL
42542: IFTRUE 42546
42544: GO 42572
42546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42547: LD_ADDR_VAR 0 3
42551: PUSH
42552: LD_INT 11
42554: PUSH
42555: LD_INT 12
42557: PUSH
42558: LD_INT 13
42560: PUSH
42561: LD_INT 14
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: ST_TO_ADDR
42570: GO 42993
42572: LD_INT 28
42574: DOUBLE
42575: EQUAL
42576: IFTRUE 42580
42578: GO 42598
42580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42581: LD_ADDR_VAR 0 3
42585: PUSH
42586: LD_INT 13
42588: PUSH
42589: LD_INT 14
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: ST_TO_ADDR
42596: GO 42993
42598: LD_INT 29
42600: DOUBLE
42601: EQUAL
42602: IFTRUE 42606
42604: GO 42624
42606: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42607: LD_ADDR_VAR 0 3
42611: PUSH
42612: LD_INT 13
42614: PUSH
42615: LD_INT 14
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: ST_TO_ADDR
42622: GO 42993
42624: LD_INT 31
42626: DOUBLE
42627: EQUAL
42628: IFTRUE 42632
42630: GO 42650
42632: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42633: LD_ADDR_VAR 0 3
42637: PUSH
42638: LD_INT 13
42640: PUSH
42641: LD_INT 14
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: ST_TO_ADDR
42648: GO 42993
42650: LD_INT 26
42652: DOUBLE
42653: EQUAL
42654: IFTRUE 42658
42656: GO 42676
42658: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42659: LD_ADDR_VAR 0 3
42663: PUSH
42664: LD_INT 13
42666: PUSH
42667: LD_INT 14
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: ST_TO_ADDR
42674: GO 42993
42676: LD_INT 42
42678: DOUBLE
42679: EQUAL
42680: IFTRUE 42684
42682: GO 42710
42684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42685: LD_ADDR_VAR 0 3
42689: PUSH
42690: LD_INT 21
42692: PUSH
42693: LD_INT 22
42695: PUSH
42696: LD_INT 23
42698: PUSH
42699: LD_INT 24
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: ST_TO_ADDR
42708: GO 42993
42710: LD_INT 43
42712: DOUBLE
42713: EQUAL
42714: IFTRUE 42718
42716: GO 42744
42718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42719: LD_ADDR_VAR 0 3
42723: PUSH
42724: LD_INT 21
42726: PUSH
42727: LD_INT 22
42729: PUSH
42730: LD_INT 23
42732: PUSH
42733: LD_INT 24
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: ST_TO_ADDR
42742: GO 42993
42744: LD_INT 44
42746: DOUBLE
42747: EQUAL
42748: IFTRUE 42752
42750: GO 42778
42752: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42753: LD_ADDR_VAR 0 3
42757: PUSH
42758: LD_INT 21
42760: PUSH
42761: LD_INT 22
42763: PUSH
42764: LD_INT 23
42766: PUSH
42767: LD_INT 24
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
42776: GO 42993
42778: LD_INT 45
42780: DOUBLE
42781: EQUAL
42782: IFTRUE 42786
42784: GO 42812
42786: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_INT 21
42794: PUSH
42795: LD_INT 22
42797: PUSH
42798: LD_INT 23
42800: PUSH
42801: LD_INT 24
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: ST_TO_ADDR
42810: GO 42993
42812: LD_INT 49
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42846
42820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_INT 21
42828: PUSH
42829: LD_INT 22
42831: PUSH
42832: LD_INT 23
42834: PUSH
42835: LD_INT 24
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: ST_TO_ADDR
42844: GO 42993
42846: LD_INT 51
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42854
42852: GO 42880
42854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_INT 21
42862: PUSH
42863: LD_INT 22
42865: PUSH
42866: LD_INT 23
42868: PUSH
42869: LD_INT 24
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
42878: GO 42993
42880: LD_INT 52
42882: DOUBLE
42883: EQUAL
42884: IFTRUE 42888
42886: GO 42914
42888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42889: LD_ADDR_VAR 0 3
42893: PUSH
42894: LD_INT 21
42896: PUSH
42897: LD_INT 22
42899: PUSH
42900: LD_INT 23
42902: PUSH
42903: LD_INT 24
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
42912: GO 42993
42914: LD_INT 53
42916: DOUBLE
42917: EQUAL
42918: IFTRUE 42922
42920: GO 42940
42922: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_INT 23
42930: PUSH
42931: LD_INT 24
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: ST_TO_ADDR
42938: GO 42993
42940: LD_INT 46
42942: DOUBLE
42943: EQUAL
42944: IFTRUE 42948
42946: GO 42966
42948: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42949: LD_ADDR_VAR 0 3
42953: PUSH
42954: LD_INT 23
42956: PUSH
42957: LD_INT 24
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: ST_TO_ADDR
42964: GO 42993
42966: LD_INT 47
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 42992
42974: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42975: LD_ADDR_VAR 0 3
42979: PUSH
42980: LD_INT 23
42982: PUSH
42983: LD_INT 24
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: ST_TO_ADDR
42990: GO 42993
42992: POP
// result := ( chassis in result ) ;
42993: LD_ADDR_VAR 0 3
42997: PUSH
42998: LD_VAR 0 1
43002: PUSH
43003: LD_VAR 0 3
43007: IN
43008: ST_TO_ADDR
// end ;
43009: LD_VAR 0 3
43013: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43014: LD_INT 0
43016: PPUSH
43017: PPUSH
43018: PPUSH
43019: PPUSH
43020: PPUSH
43021: PPUSH
43022: PPUSH
// result := array ;
43023: LD_ADDR_VAR 0 5
43027: PUSH
43028: LD_VAR 0 1
43032: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43033: LD_VAR 0 1
43037: NOT
43038: PUSH
43039: LD_VAR 0 2
43043: NOT
43044: OR
43045: PUSH
43046: LD_VAR 0 3
43050: NOT
43051: OR
43052: PUSH
43053: LD_VAR 0 2
43057: PUSH
43058: LD_VAR 0 1
43062: GREATER
43063: OR
43064: PUSH
43065: LD_VAR 0 3
43069: PUSH
43070: LD_VAR 0 1
43074: GREATER
43075: OR
43076: IFFALSE 43080
// exit ;
43078: GO 43376
// if direction then
43080: LD_VAR 0 4
43084: IFFALSE 43148
// begin d := 1 ;
43086: LD_ADDR_VAR 0 9
43090: PUSH
43091: LD_INT 1
43093: ST_TO_ADDR
// if i_from > i_to then
43094: LD_VAR 0 2
43098: PUSH
43099: LD_VAR 0 3
43103: GREATER
43104: IFFALSE 43130
// length := ( array - i_from ) + i_to else
43106: LD_ADDR_VAR 0 11
43110: PUSH
43111: LD_VAR 0 1
43115: PUSH
43116: LD_VAR 0 2
43120: MINUS
43121: PUSH
43122: LD_VAR 0 3
43126: PLUS
43127: ST_TO_ADDR
43128: GO 43146
// length := i_to - i_from ;
43130: LD_ADDR_VAR 0 11
43134: PUSH
43135: LD_VAR 0 3
43139: PUSH
43140: LD_VAR 0 2
43144: MINUS
43145: ST_TO_ADDR
// end else
43146: GO 43209
// begin d := - 1 ;
43148: LD_ADDR_VAR 0 9
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: ST_TO_ADDR
// if i_from > i_to then
43157: LD_VAR 0 2
43161: PUSH
43162: LD_VAR 0 3
43166: GREATER
43167: IFFALSE 43187
// length := i_from - i_to else
43169: LD_ADDR_VAR 0 11
43173: PUSH
43174: LD_VAR 0 2
43178: PUSH
43179: LD_VAR 0 3
43183: MINUS
43184: ST_TO_ADDR
43185: GO 43209
// length := ( array - i_to ) + i_from ;
43187: LD_ADDR_VAR 0 11
43191: PUSH
43192: LD_VAR 0 1
43196: PUSH
43197: LD_VAR 0 3
43201: MINUS
43202: PUSH
43203: LD_VAR 0 2
43207: PLUS
43208: ST_TO_ADDR
// end ; if not length then
43209: LD_VAR 0 11
43213: NOT
43214: IFFALSE 43218
// exit ;
43216: GO 43376
// tmp := array ;
43218: LD_ADDR_VAR 0 10
43222: PUSH
43223: LD_VAR 0 1
43227: ST_TO_ADDR
// for i = 1 to length do
43228: LD_ADDR_VAR 0 6
43232: PUSH
43233: DOUBLE
43234: LD_INT 1
43236: DEC
43237: ST_TO_ADDR
43238: LD_VAR 0 11
43242: PUSH
43243: FOR_TO
43244: IFFALSE 43364
// begin for j = 1 to array do
43246: LD_ADDR_VAR 0 7
43250: PUSH
43251: DOUBLE
43252: LD_INT 1
43254: DEC
43255: ST_TO_ADDR
43256: LD_VAR 0 1
43260: PUSH
43261: FOR_TO
43262: IFFALSE 43350
// begin k := j + d ;
43264: LD_ADDR_VAR 0 8
43268: PUSH
43269: LD_VAR 0 7
43273: PUSH
43274: LD_VAR 0 9
43278: PLUS
43279: ST_TO_ADDR
// if k > array then
43280: LD_VAR 0 8
43284: PUSH
43285: LD_VAR 0 1
43289: GREATER
43290: IFFALSE 43300
// k := 1 ;
43292: LD_ADDR_VAR 0 8
43296: PUSH
43297: LD_INT 1
43299: ST_TO_ADDR
// if not k then
43300: LD_VAR 0 8
43304: NOT
43305: IFFALSE 43317
// k := array ;
43307: LD_ADDR_VAR 0 8
43311: PUSH
43312: LD_VAR 0 1
43316: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43317: LD_ADDR_VAR 0 10
43321: PUSH
43322: LD_VAR 0 10
43326: PPUSH
43327: LD_VAR 0 8
43331: PPUSH
43332: LD_VAR 0 1
43336: PUSH
43337: LD_VAR 0 7
43341: ARRAY
43342: PPUSH
43343: CALL_OW 1
43347: ST_TO_ADDR
// end ;
43348: GO 43261
43350: POP
43351: POP
// array := tmp ;
43352: LD_ADDR_VAR 0 1
43356: PUSH
43357: LD_VAR 0 10
43361: ST_TO_ADDR
// end ;
43362: GO 43243
43364: POP
43365: POP
// result := array ;
43366: LD_ADDR_VAR 0 5
43370: PUSH
43371: LD_VAR 0 1
43375: ST_TO_ADDR
// end ;
43376: LD_VAR 0 5
43380: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43381: LD_INT 0
43383: PPUSH
43384: PPUSH
// result := 0 ;
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: LD_INT 0
43392: ST_TO_ADDR
// if not array or not value in array then
43393: LD_VAR 0 1
43397: NOT
43398: PUSH
43399: LD_VAR 0 2
43403: PUSH
43404: LD_VAR 0 1
43408: IN
43409: NOT
43410: OR
43411: IFFALSE 43415
// exit ;
43413: GO 43469
// for i = 1 to array do
43415: LD_ADDR_VAR 0 4
43419: PUSH
43420: DOUBLE
43421: LD_INT 1
43423: DEC
43424: ST_TO_ADDR
43425: LD_VAR 0 1
43429: PUSH
43430: FOR_TO
43431: IFFALSE 43467
// if value = array [ i ] then
43433: LD_VAR 0 2
43437: PUSH
43438: LD_VAR 0 1
43442: PUSH
43443: LD_VAR 0 4
43447: ARRAY
43448: EQUAL
43449: IFFALSE 43465
// begin result := i ;
43451: LD_ADDR_VAR 0 3
43455: PUSH
43456: LD_VAR 0 4
43460: ST_TO_ADDR
// exit ;
43461: POP
43462: POP
43463: GO 43469
// end ;
43465: GO 43430
43467: POP
43468: POP
// end ;
43469: LD_VAR 0 3
43473: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43474: LD_INT 0
43476: PPUSH
// vc_chassis := chassis ;
43477: LD_ADDR_OWVAR 37
43481: PUSH
43482: LD_VAR 0 1
43486: ST_TO_ADDR
// vc_engine := engine ;
43487: LD_ADDR_OWVAR 39
43491: PUSH
43492: LD_VAR 0 2
43496: ST_TO_ADDR
// vc_control := control ;
43497: LD_ADDR_OWVAR 38
43501: PUSH
43502: LD_VAR 0 3
43506: ST_TO_ADDR
// vc_weapon := weapon ;
43507: LD_ADDR_OWVAR 40
43511: PUSH
43512: LD_VAR 0 4
43516: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43517: LD_ADDR_OWVAR 41
43521: PUSH
43522: LD_VAR 0 5
43526: ST_TO_ADDR
// end ;
43527: LD_VAR 0 6
43531: RET
// export function WantPlant ( unit ) ; var task ; begin
43532: LD_INT 0
43534: PPUSH
43535: PPUSH
// result := false ;
43536: LD_ADDR_VAR 0 2
43540: PUSH
43541: LD_INT 0
43543: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43544: LD_ADDR_VAR 0 3
43548: PUSH
43549: LD_VAR 0 1
43553: PPUSH
43554: CALL_OW 437
43558: ST_TO_ADDR
// if task then
43559: LD_VAR 0 3
43563: IFFALSE 43591
// if task [ 1 ] [ 1 ] = p then
43565: LD_VAR 0 3
43569: PUSH
43570: LD_INT 1
43572: ARRAY
43573: PUSH
43574: LD_INT 1
43576: ARRAY
43577: PUSH
43578: LD_STRING p
43580: EQUAL
43581: IFFALSE 43591
// result := true ;
43583: LD_ADDR_VAR 0 2
43587: PUSH
43588: LD_INT 1
43590: ST_TO_ADDR
// end ;
43591: LD_VAR 0 2
43595: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43596: LD_INT 0
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
// if pos < 1 then
43602: LD_VAR 0 2
43606: PUSH
43607: LD_INT 1
43609: LESS
43610: IFFALSE 43614
// exit ;
43612: GO 43917
// if pos = 1 then
43614: LD_VAR 0 2
43618: PUSH
43619: LD_INT 1
43621: EQUAL
43622: IFFALSE 43655
// result := Replace ( arr , pos [ 1 ] , value ) else
43624: LD_ADDR_VAR 0 4
43628: PUSH
43629: LD_VAR 0 1
43633: PPUSH
43634: LD_VAR 0 2
43638: PUSH
43639: LD_INT 1
43641: ARRAY
43642: PPUSH
43643: LD_VAR 0 3
43647: PPUSH
43648: CALL_OW 1
43652: ST_TO_ADDR
43653: GO 43917
// begin tmp := arr ;
43655: LD_ADDR_VAR 0 6
43659: PUSH
43660: LD_VAR 0 1
43664: ST_TO_ADDR
// s_arr := [ tmp ] ;
43665: LD_ADDR_VAR 0 7
43669: PUSH
43670: LD_VAR 0 6
43674: PUSH
43675: EMPTY
43676: LIST
43677: ST_TO_ADDR
// for i = 1 to pos - 1 do
43678: LD_ADDR_VAR 0 5
43682: PUSH
43683: DOUBLE
43684: LD_INT 1
43686: DEC
43687: ST_TO_ADDR
43688: LD_VAR 0 2
43692: PUSH
43693: LD_INT 1
43695: MINUS
43696: PUSH
43697: FOR_TO
43698: IFFALSE 43743
// begin tmp := tmp [ pos [ i ] ] ;
43700: LD_ADDR_VAR 0 6
43704: PUSH
43705: LD_VAR 0 6
43709: PUSH
43710: LD_VAR 0 2
43714: PUSH
43715: LD_VAR 0 5
43719: ARRAY
43720: ARRAY
43721: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43722: LD_ADDR_VAR 0 7
43726: PUSH
43727: LD_VAR 0 7
43731: PUSH
43732: LD_VAR 0 6
43736: PUSH
43737: EMPTY
43738: LIST
43739: ADD
43740: ST_TO_ADDR
// end ;
43741: GO 43697
43743: POP
43744: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43745: LD_ADDR_VAR 0 6
43749: PUSH
43750: LD_VAR 0 6
43754: PPUSH
43755: LD_VAR 0 2
43759: PUSH
43760: LD_VAR 0 2
43764: ARRAY
43765: PPUSH
43766: LD_VAR 0 3
43770: PPUSH
43771: CALL_OW 1
43775: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43776: LD_ADDR_VAR 0 7
43780: PUSH
43781: LD_VAR 0 7
43785: PPUSH
43786: LD_VAR 0 7
43790: PPUSH
43791: LD_VAR 0 6
43795: PPUSH
43796: CALL_OW 1
43800: ST_TO_ADDR
// for i = s_arr downto 2 do
43801: LD_ADDR_VAR 0 5
43805: PUSH
43806: DOUBLE
43807: LD_VAR 0 7
43811: INC
43812: ST_TO_ADDR
43813: LD_INT 2
43815: PUSH
43816: FOR_DOWNTO
43817: IFFALSE 43901
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43819: LD_ADDR_VAR 0 6
43823: PUSH
43824: LD_VAR 0 7
43828: PUSH
43829: LD_VAR 0 5
43833: PUSH
43834: LD_INT 1
43836: MINUS
43837: ARRAY
43838: PPUSH
43839: LD_VAR 0 2
43843: PUSH
43844: LD_VAR 0 5
43848: PUSH
43849: LD_INT 1
43851: MINUS
43852: ARRAY
43853: PPUSH
43854: LD_VAR 0 7
43858: PUSH
43859: LD_VAR 0 5
43863: ARRAY
43864: PPUSH
43865: CALL_OW 1
43869: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43870: LD_ADDR_VAR 0 7
43874: PUSH
43875: LD_VAR 0 7
43879: PPUSH
43880: LD_VAR 0 5
43884: PUSH
43885: LD_INT 1
43887: MINUS
43888: PPUSH
43889: LD_VAR 0 6
43893: PPUSH
43894: CALL_OW 1
43898: ST_TO_ADDR
// end ;
43899: GO 43816
43901: POP
43902: POP
// result := s_arr [ 1 ] ;
43903: LD_ADDR_VAR 0 4
43907: PUSH
43908: LD_VAR 0 7
43912: PUSH
43913: LD_INT 1
43915: ARRAY
43916: ST_TO_ADDR
// end ; end ;
43917: LD_VAR 0 4
43921: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43922: LD_INT 0
43924: PPUSH
43925: PPUSH
// if not list then
43926: LD_VAR 0 1
43930: NOT
43931: IFFALSE 43935
// exit ;
43933: GO 44026
// i := list [ pos1 ] ;
43935: LD_ADDR_VAR 0 5
43939: PUSH
43940: LD_VAR 0 1
43944: PUSH
43945: LD_VAR 0 2
43949: ARRAY
43950: ST_TO_ADDR
// if not i then
43951: LD_VAR 0 5
43955: NOT
43956: IFFALSE 43960
// exit ;
43958: GO 44026
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43960: LD_ADDR_VAR 0 1
43964: PUSH
43965: LD_VAR 0 1
43969: PPUSH
43970: LD_VAR 0 2
43974: PPUSH
43975: LD_VAR 0 1
43979: PUSH
43980: LD_VAR 0 3
43984: ARRAY
43985: PPUSH
43986: CALL_OW 1
43990: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43991: LD_ADDR_VAR 0 1
43995: PUSH
43996: LD_VAR 0 1
44000: PPUSH
44001: LD_VAR 0 3
44005: PPUSH
44006: LD_VAR 0 5
44010: PPUSH
44011: CALL_OW 1
44015: ST_TO_ADDR
// result := list ;
44016: LD_ADDR_VAR 0 4
44020: PUSH
44021: LD_VAR 0 1
44025: ST_TO_ADDR
// end ;
44026: LD_VAR 0 4
44030: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44031: LD_INT 0
44033: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44034: LD_ADDR_VAR 0 5
44038: PUSH
44039: LD_VAR 0 1
44043: PPUSH
44044: CALL_OW 250
44048: PPUSH
44049: LD_VAR 0 1
44053: PPUSH
44054: CALL_OW 251
44058: PPUSH
44059: LD_VAR 0 2
44063: PPUSH
44064: LD_VAR 0 3
44068: PPUSH
44069: LD_VAR 0 4
44073: PPUSH
44074: CALL 44084 0 5
44078: ST_TO_ADDR
// end ;
44079: LD_VAR 0 5
44083: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44084: LD_INT 0
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
// if not list then
44090: LD_VAR 0 3
44094: NOT
44095: IFFALSE 44099
// exit ;
44097: GO 44487
// result := [ ] ;
44099: LD_ADDR_VAR 0 6
44103: PUSH
44104: EMPTY
44105: ST_TO_ADDR
// for i in list do
44106: LD_ADDR_VAR 0 7
44110: PUSH
44111: LD_VAR 0 3
44115: PUSH
44116: FOR_IN
44117: IFFALSE 44319
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44119: LD_ADDR_VAR 0 9
44123: PUSH
44124: LD_VAR 0 7
44128: PPUSH
44129: LD_VAR 0 1
44133: PPUSH
44134: LD_VAR 0 2
44138: PPUSH
44139: CALL_OW 297
44143: ST_TO_ADDR
// if not result then
44144: LD_VAR 0 6
44148: NOT
44149: IFFALSE 44175
// result := [ [ i , tmp ] ] else
44151: LD_ADDR_VAR 0 6
44155: PUSH
44156: LD_VAR 0 7
44160: PUSH
44161: LD_VAR 0 9
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: EMPTY
44171: LIST
44172: ST_TO_ADDR
44173: GO 44317
// begin if result [ result ] [ 2 ] < tmp then
44175: LD_VAR 0 6
44179: PUSH
44180: LD_VAR 0 6
44184: ARRAY
44185: PUSH
44186: LD_INT 2
44188: ARRAY
44189: PUSH
44190: LD_VAR 0 9
44194: LESS
44195: IFFALSE 44237
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44197: LD_ADDR_VAR 0 6
44201: PUSH
44202: LD_VAR 0 6
44206: PPUSH
44207: LD_VAR 0 6
44211: PUSH
44212: LD_INT 1
44214: PLUS
44215: PPUSH
44216: LD_VAR 0 7
44220: PUSH
44221: LD_VAR 0 9
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PPUSH
44230: CALL_OW 2
44234: ST_TO_ADDR
44235: GO 44317
// for j = 1 to result do
44237: LD_ADDR_VAR 0 8
44241: PUSH
44242: DOUBLE
44243: LD_INT 1
44245: DEC
44246: ST_TO_ADDR
44247: LD_VAR 0 6
44251: PUSH
44252: FOR_TO
44253: IFFALSE 44315
// begin if tmp < result [ j ] [ 2 ] then
44255: LD_VAR 0 9
44259: PUSH
44260: LD_VAR 0 6
44264: PUSH
44265: LD_VAR 0 8
44269: ARRAY
44270: PUSH
44271: LD_INT 2
44273: ARRAY
44274: LESS
44275: IFFALSE 44313
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44277: LD_ADDR_VAR 0 6
44281: PUSH
44282: LD_VAR 0 6
44286: PPUSH
44287: LD_VAR 0 8
44291: PPUSH
44292: LD_VAR 0 7
44296: PUSH
44297: LD_VAR 0 9
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PPUSH
44306: CALL_OW 2
44310: ST_TO_ADDR
// break ;
44311: GO 44315
// end ; end ;
44313: GO 44252
44315: POP
44316: POP
// end ; end ;
44317: GO 44116
44319: POP
44320: POP
// if result and not asc then
44321: LD_VAR 0 6
44325: PUSH
44326: LD_VAR 0 4
44330: NOT
44331: AND
44332: IFFALSE 44407
// begin tmp := result ;
44334: LD_ADDR_VAR 0 9
44338: PUSH
44339: LD_VAR 0 6
44343: ST_TO_ADDR
// for i = tmp downto 1 do
44344: LD_ADDR_VAR 0 7
44348: PUSH
44349: DOUBLE
44350: LD_VAR 0 9
44354: INC
44355: ST_TO_ADDR
44356: LD_INT 1
44358: PUSH
44359: FOR_DOWNTO
44360: IFFALSE 44405
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44362: LD_ADDR_VAR 0 6
44366: PUSH
44367: LD_VAR 0 6
44371: PPUSH
44372: LD_VAR 0 9
44376: PUSH
44377: LD_VAR 0 7
44381: MINUS
44382: PUSH
44383: LD_INT 1
44385: PLUS
44386: PPUSH
44387: LD_VAR 0 9
44391: PUSH
44392: LD_VAR 0 7
44396: ARRAY
44397: PPUSH
44398: CALL_OW 1
44402: ST_TO_ADDR
44403: GO 44359
44405: POP
44406: POP
// end ; tmp := [ ] ;
44407: LD_ADDR_VAR 0 9
44411: PUSH
44412: EMPTY
44413: ST_TO_ADDR
// if mode then
44414: LD_VAR 0 5
44418: IFFALSE 44487
// begin for i = 1 to result do
44420: LD_ADDR_VAR 0 7
44424: PUSH
44425: DOUBLE
44426: LD_INT 1
44428: DEC
44429: ST_TO_ADDR
44430: LD_VAR 0 6
44434: PUSH
44435: FOR_TO
44436: IFFALSE 44475
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44438: LD_ADDR_VAR 0 9
44442: PUSH
44443: LD_VAR 0 9
44447: PPUSH
44448: LD_VAR 0 7
44452: PPUSH
44453: LD_VAR 0 6
44457: PUSH
44458: LD_VAR 0 7
44462: ARRAY
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: PPUSH
44468: CALL_OW 1
44472: ST_TO_ADDR
44473: GO 44435
44475: POP
44476: POP
// result := tmp ;
44477: LD_ADDR_VAR 0 6
44481: PUSH
44482: LD_VAR 0 9
44486: ST_TO_ADDR
// end ; end ;
44487: LD_VAR 0 6
44491: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44492: LD_INT 0
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
44498: PPUSH
44499: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44500: LD_ADDR_VAR 0 5
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// if not x or not y then
44522: LD_VAR 0 2
44526: NOT
44527: PUSH
44528: LD_VAR 0 3
44532: NOT
44533: OR
44534: IFFALSE 44538
// exit ;
44536: GO 46190
// if not range then
44538: LD_VAR 0 4
44542: NOT
44543: IFFALSE 44553
// range := 10 ;
44545: LD_ADDR_VAR 0 4
44549: PUSH
44550: LD_INT 10
44552: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44553: LD_ADDR_VAR 0 8
44557: PUSH
44558: LD_INT 81
44560: PUSH
44561: LD_VAR 0 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 92
44572: PUSH
44573: LD_VAR 0 2
44577: PUSH
44578: LD_VAR 0 3
44582: PUSH
44583: LD_VAR 0 4
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 3
44596: PUSH
44597: LD_INT 21
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: PPUSH
44616: CALL_OW 69
44620: ST_TO_ADDR
// if not tmp then
44621: LD_VAR 0 8
44625: NOT
44626: IFFALSE 44630
// exit ;
44628: GO 46190
// for i in tmp do
44630: LD_ADDR_VAR 0 6
44634: PUSH
44635: LD_VAR 0 8
44639: PUSH
44640: FOR_IN
44641: IFFALSE 46165
// begin points := [ 0 , 0 , 0 ] ;
44643: LD_ADDR_VAR 0 9
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: ST_TO_ADDR
// bpoints := 1 ;
44662: LD_ADDR_VAR 0 10
44666: PUSH
44667: LD_INT 1
44669: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44670: LD_VAR 0 6
44674: PPUSH
44675: CALL_OW 247
44679: PUSH
44680: LD_INT 1
44682: DOUBLE
44683: EQUAL
44684: IFTRUE 44688
44686: GO 45266
44688: POP
// begin if GetClass ( i ) = 1 then
44689: LD_VAR 0 6
44693: PPUSH
44694: CALL_OW 257
44698: PUSH
44699: LD_INT 1
44701: EQUAL
44702: IFFALSE 44723
// points := [ 10 , 5 , 3 ] ;
44704: LD_ADDR_VAR 0 9
44708: PUSH
44709: LD_INT 10
44711: PUSH
44712: LD_INT 5
44714: PUSH
44715: LD_INT 3
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44723: LD_VAR 0 6
44727: PPUSH
44728: CALL_OW 257
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: LD_INT 4
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: IN
44747: IFFALSE 44768
// points := [ 3 , 2 , 1 ] ;
44749: LD_ADDR_VAR 0 9
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44768: LD_VAR 0 6
44772: PPUSH
44773: CALL_OW 257
44777: PUSH
44778: LD_INT 5
44780: EQUAL
44781: IFFALSE 44802
// points := [ 130 , 5 , 2 ] ;
44783: LD_ADDR_VAR 0 9
44787: PUSH
44788: LD_INT 130
44790: PUSH
44791: LD_INT 5
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44802: LD_VAR 0 6
44806: PPUSH
44807: CALL_OW 257
44811: PUSH
44812: LD_INT 8
44814: EQUAL
44815: IFFALSE 44836
// points := [ 35 , 35 , 30 ] ;
44817: LD_ADDR_VAR 0 9
44821: PUSH
44822: LD_INT 35
44824: PUSH
44825: LD_INT 35
44827: PUSH
44828: LD_INT 30
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44836: LD_VAR 0 6
44840: PPUSH
44841: CALL_OW 257
44845: PUSH
44846: LD_INT 9
44848: EQUAL
44849: IFFALSE 44870
// points := [ 20 , 55 , 40 ] ;
44851: LD_ADDR_VAR 0 9
44855: PUSH
44856: LD_INT 20
44858: PUSH
44859: LD_INT 55
44861: PUSH
44862: LD_INT 40
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44870: LD_VAR 0 6
44874: PPUSH
44875: CALL_OW 257
44879: PUSH
44880: LD_INT 12
44882: PUSH
44883: LD_INT 16
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: IN
44890: IFFALSE 44911
// points := [ 5 , 3 , 2 ] ;
44892: LD_ADDR_VAR 0 9
44896: PUSH
44897: LD_INT 5
44899: PUSH
44900: LD_INT 3
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44911: LD_VAR 0 6
44915: PPUSH
44916: CALL_OW 257
44920: PUSH
44921: LD_INT 17
44923: EQUAL
44924: IFFALSE 44945
// points := [ 100 , 50 , 75 ] ;
44926: LD_ADDR_VAR 0 9
44930: PUSH
44931: LD_INT 100
44933: PUSH
44934: LD_INT 50
44936: PUSH
44937: LD_INT 75
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44945: LD_VAR 0 6
44949: PPUSH
44950: CALL_OW 257
44954: PUSH
44955: LD_INT 15
44957: EQUAL
44958: IFFALSE 44979
// points := [ 10 , 5 , 3 ] ;
44960: LD_ADDR_VAR 0 9
44964: PUSH
44965: LD_INT 10
44967: PUSH
44968: LD_INT 5
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44979: LD_VAR 0 6
44983: PPUSH
44984: CALL_OW 257
44988: PUSH
44989: LD_INT 14
44991: EQUAL
44992: IFFALSE 45013
// points := [ 10 , 0 , 0 ] ;
44994: LD_ADDR_VAR 0 9
44998: PUSH
44999: LD_INT 10
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45013: LD_VAR 0 6
45017: PPUSH
45018: CALL_OW 257
45022: PUSH
45023: LD_INT 11
45025: EQUAL
45026: IFFALSE 45047
// points := [ 30 , 10 , 5 ] ;
45028: LD_ADDR_VAR 0 9
45032: PUSH
45033: LD_INT 30
45035: PUSH
45036: LD_INT 10
45038: PUSH
45039: LD_INT 5
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45047: LD_VAR 0 1
45051: PPUSH
45052: LD_INT 5
45054: PPUSH
45055: CALL_OW 321
45059: PUSH
45060: LD_INT 2
45062: EQUAL
45063: IFFALSE 45080
// bpoints := bpoints * 1.8 ;
45065: LD_ADDR_VAR 0 10
45069: PUSH
45070: LD_VAR 0 10
45074: PUSH
45075: LD_REAL  1.80000000000000E+0000
45078: MUL
45079: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45080: LD_VAR 0 6
45084: PPUSH
45085: CALL_OW 257
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 3
45098: PUSH
45099: LD_INT 4
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: IN
45108: PUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: LD_INT 51
45116: PPUSH
45117: CALL_OW 321
45121: PUSH
45122: LD_INT 2
45124: EQUAL
45125: AND
45126: IFFALSE 45143
// bpoints := bpoints * 1.2 ;
45128: LD_ADDR_VAR 0 10
45132: PUSH
45133: LD_VAR 0 10
45137: PUSH
45138: LD_REAL  1.20000000000000E+0000
45141: MUL
45142: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45143: LD_VAR 0 6
45147: PPUSH
45148: CALL_OW 257
45152: PUSH
45153: LD_INT 5
45155: PUSH
45156: LD_INT 7
45158: PUSH
45159: LD_INT 9
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: LIST
45166: IN
45167: PUSH
45168: LD_VAR 0 1
45172: PPUSH
45173: LD_INT 52
45175: PPUSH
45176: CALL_OW 321
45180: PUSH
45181: LD_INT 2
45183: EQUAL
45184: AND
45185: IFFALSE 45202
// bpoints := bpoints * 1.5 ;
45187: LD_ADDR_VAR 0 10
45191: PUSH
45192: LD_VAR 0 10
45196: PUSH
45197: LD_REAL  1.50000000000000E+0000
45200: MUL
45201: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45202: LD_VAR 0 1
45206: PPUSH
45207: LD_INT 66
45209: PPUSH
45210: CALL_OW 321
45214: PUSH
45215: LD_INT 2
45217: EQUAL
45218: IFFALSE 45235
// bpoints := bpoints * 1.1 ;
45220: LD_ADDR_VAR 0 10
45224: PUSH
45225: LD_VAR 0 10
45229: PUSH
45230: LD_REAL  1.10000000000000E+0000
45233: MUL
45234: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45235: LD_ADDR_VAR 0 10
45239: PUSH
45240: LD_VAR 0 10
45244: PUSH
45245: LD_VAR 0 6
45249: PPUSH
45250: LD_INT 1
45252: PPUSH
45253: CALL_OW 259
45257: PUSH
45258: LD_REAL  1.15000000000000E+0000
45261: MUL
45262: MUL
45263: ST_TO_ADDR
// end ; unit_vehicle :
45264: GO 46094
45266: LD_INT 2
45268: DOUBLE
45269: EQUAL
45270: IFTRUE 45274
45272: GO 46082
45274: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45275: LD_VAR 0 6
45279: PPUSH
45280: CALL_OW 264
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 42
45290: PUSH
45291: LD_INT 24
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: LIST
45298: IN
45299: IFFALSE 45320
// points := [ 25 , 5 , 3 ] ;
45301: LD_ADDR_VAR 0 9
45305: PUSH
45306: LD_INT 25
45308: PUSH
45309: LD_INT 5
45311: PUSH
45312: LD_INT 3
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45320: LD_VAR 0 6
45324: PPUSH
45325: CALL_OW 264
45329: PUSH
45330: LD_INT 4
45332: PUSH
45333: LD_INT 43
45335: PUSH
45336: LD_INT 25
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: IN
45344: IFFALSE 45365
// points := [ 40 , 15 , 5 ] ;
45346: LD_ADDR_VAR 0 9
45350: PUSH
45351: LD_INT 40
45353: PUSH
45354: LD_INT 15
45356: PUSH
45357: LD_INT 5
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45365: LD_VAR 0 6
45369: PPUSH
45370: CALL_OW 264
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 23
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: IN
45385: IFFALSE 45406
// points := [ 7 , 25 , 8 ] ;
45387: LD_ADDR_VAR 0 9
45391: PUSH
45392: LD_INT 7
45394: PUSH
45395: LD_INT 25
45397: PUSH
45398: LD_INT 8
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45406: LD_VAR 0 6
45410: PPUSH
45411: CALL_OW 264
45415: PUSH
45416: LD_INT 5
45418: PUSH
45419: LD_INT 27
45421: PUSH
45422: LD_INT 44
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: IN
45430: IFFALSE 45451
// points := [ 14 , 50 , 16 ] ;
45432: LD_ADDR_VAR 0 9
45436: PUSH
45437: LD_INT 14
45439: PUSH
45440: LD_INT 50
45442: PUSH
45443: LD_INT 16
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45451: LD_VAR 0 6
45455: PPUSH
45456: CALL_OW 264
45460: PUSH
45461: LD_INT 6
45463: PUSH
45464: LD_INT 46
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: IN
45471: IFFALSE 45492
// points := [ 32 , 120 , 70 ] ;
45473: LD_ADDR_VAR 0 9
45477: PUSH
45478: LD_INT 32
45480: PUSH
45481: LD_INT 120
45483: PUSH
45484: LD_INT 70
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: LIST
45491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45492: LD_VAR 0 6
45496: PPUSH
45497: CALL_OW 264
45501: PUSH
45502: LD_INT 7
45504: PUSH
45505: LD_INT 28
45507: PUSH
45508: LD_INT 45
45510: PUSH
45511: LD_EXP 57
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: IN
45522: IFFALSE 45543
// points := [ 35 , 20 , 45 ] ;
45524: LD_ADDR_VAR 0 9
45528: PUSH
45529: LD_INT 35
45531: PUSH
45532: LD_INT 20
45534: PUSH
45535: LD_INT 45
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45543: LD_VAR 0 6
45547: PPUSH
45548: CALL_OW 264
45552: PUSH
45553: LD_INT 47
45555: PUSH
45556: EMPTY
45557: LIST
45558: IN
45559: IFFALSE 45580
// points := [ 67 , 45 , 75 ] ;
45561: LD_ADDR_VAR 0 9
45565: PUSH
45566: LD_INT 67
45568: PUSH
45569: LD_INT 45
45571: PUSH
45572: LD_INT 75
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45580: LD_VAR 0 6
45584: PPUSH
45585: CALL_OW 264
45589: PUSH
45590: LD_INT 26
45592: PUSH
45593: EMPTY
45594: LIST
45595: IN
45596: IFFALSE 45617
// points := [ 120 , 30 , 80 ] ;
45598: LD_ADDR_VAR 0 9
45602: PUSH
45603: LD_INT 120
45605: PUSH
45606: LD_INT 30
45608: PUSH
45609: LD_INT 80
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45617: LD_VAR 0 6
45621: PPUSH
45622: CALL_OW 264
45626: PUSH
45627: LD_INT 22
45629: PUSH
45630: EMPTY
45631: LIST
45632: IN
45633: IFFALSE 45654
// points := [ 40 , 1 , 1 ] ;
45635: LD_ADDR_VAR 0 9
45639: PUSH
45640: LD_INT 40
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45654: LD_VAR 0 6
45658: PPUSH
45659: CALL_OW 264
45663: PUSH
45664: LD_INT 29
45666: PUSH
45667: EMPTY
45668: LIST
45669: IN
45670: IFFALSE 45691
// points := [ 70 , 200 , 400 ] ;
45672: LD_ADDR_VAR 0 9
45676: PUSH
45677: LD_INT 70
45679: PUSH
45680: LD_INT 200
45682: PUSH
45683: LD_INT 400
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45691: LD_VAR 0 6
45695: PPUSH
45696: CALL_OW 264
45700: PUSH
45701: LD_INT 14
45703: PUSH
45704: LD_INT 53
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: IN
45711: IFFALSE 45732
// points := [ 40 , 10 , 20 ] ;
45713: LD_ADDR_VAR 0 9
45717: PUSH
45718: LD_INT 40
45720: PUSH
45721: LD_INT 10
45723: PUSH
45724: LD_INT 20
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45732: LD_VAR 0 6
45736: PPUSH
45737: CALL_OW 264
45741: PUSH
45742: LD_INT 9
45744: PUSH
45745: EMPTY
45746: LIST
45747: IN
45748: IFFALSE 45769
// points := [ 5 , 70 , 20 ] ;
45750: LD_ADDR_VAR 0 9
45754: PUSH
45755: LD_INT 5
45757: PUSH
45758: LD_INT 70
45760: PUSH
45761: LD_INT 20
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45769: LD_VAR 0 6
45773: PPUSH
45774: CALL_OW 264
45778: PUSH
45779: LD_INT 10
45781: PUSH
45782: EMPTY
45783: LIST
45784: IN
45785: IFFALSE 45806
// points := [ 35 , 110 , 70 ] ;
45787: LD_ADDR_VAR 0 9
45791: PUSH
45792: LD_INT 35
45794: PUSH
45795: LD_INT 110
45797: PUSH
45798: LD_INT 70
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: LIST
45805: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45806: LD_VAR 0 6
45810: PPUSH
45811: CALL_OW 265
45815: PUSH
45816: LD_INT 25
45818: EQUAL
45819: IFFALSE 45840
// points := [ 80 , 65 , 100 ] ;
45821: LD_ADDR_VAR 0 9
45825: PUSH
45826: LD_INT 80
45828: PUSH
45829: LD_INT 65
45831: PUSH
45832: LD_INT 100
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45840: LD_VAR 0 6
45844: PPUSH
45845: CALL_OW 263
45849: PUSH
45850: LD_INT 1
45852: EQUAL
45853: IFFALSE 45888
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45855: LD_ADDR_VAR 0 10
45859: PUSH
45860: LD_VAR 0 10
45864: PUSH
45865: LD_VAR 0 6
45869: PPUSH
45870: CALL_OW 311
45874: PPUSH
45875: LD_INT 3
45877: PPUSH
45878: CALL_OW 259
45882: PUSH
45883: LD_INT 4
45885: MUL
45886: MUL
45887: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45888: LD_VAR 0 6
45892: PPUSH
45893: CALL_OW 263
45897: PUSH
45898: LD_INT 2
45900: EQUAL
45901: IFFALSE 45952
// begin j := IsControledBy ( i ) ;
45903: LD_ADDR_VAR 0 7
45907: PUSH
45908: LD_VAR 0 6
45912: PPUSH
45913: CALL_OW 312
45917: ST_TO_ADDR
// if j then
45918: LD_VAR 0 7
45922: IFFALSE 45952
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45924: LD_ADDR_VAR 0 10
45928: PUSH
45929: LD_VAR 0 10
45933: PUSH
45934: LD_VAR 0 7
45938: PPUSH
45939: LD_INT 3
45941: PPUSH
45942: CALL_OW 259
45946: PUSH
45947: LD_INT 3
45949: MUL
45950: MUL
45951: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45952: LD_VAR 0 6
45956: PPUSH
45957: CALL_OW 264
45961: PUSH
45962: LD_INT 5
45964: PUSH
45965: LD_INT 6
45967: PUSH
45968: LD_INT 46
45970: PUSH
45971: LD_INT 44
45973: PUSH
45974: LD_INT 47
45976: PUSH
45977: LD_INT 45
45979: PUSH
45980: LD_INT 28
45982: PUSH
45983: LD_INT 7
45985: PUSH
45986: LD_INT 27
45988: PUSH
45989: LD_INT 29
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: IN
46004: PUSH
46005: LD_VAR 0 1
46009: PPUSH
46010: LD_INT 52
46012: PPUSH
46013: CALL_OW 321
46017: PUSH
46018: LD_INT 2
46020: EQUAL
46021: AND
46022: IFFALSE 46039
// bpoints := bpoints * 1.2 ;
46024: LD_ADDR_VAR 0 10
46028: PUSH
46029: LD_VAR 0 10
46033: PUSH
46034: LD_REAL  1.20000000000000E+0000
46037: MUL
46038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46039: LD_VAR 0 6
46043: PPUSH
46044: CALL_OW 264
46048: PUSH
46049: LD_INT 6
46051: PUSH
46052: LD_INT 46
46054: PUSH
46055: LD_INT 47
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: IN
46063: IFFALSE 46080
// bpoints := bpoints * 1.2 ;
46065: LD_ADDR_VAR 0 10
46069: PUSH
46070: LD_VAR 0 10
46074: PUSH
46075: LD_REAL  1.20000000000000E+0000
46078: MUL
46079: ST_TO_ADDR
// end ; unit_building :
46080: GO 46094
46082: LD_INT 3
46084: DOUBLE
46085: EQUAL
46086: IFTRUE 46090
46088: GO 46093
46090: POP
// ; end ;
46091: GO 46094
46093: POP
// for j = 1 to 3 do
46094: LD_ADDR_VAR 0 7
46098: PUSH
46099: DOUBLE
46100: LD_INT 1
46102: DEC
46103: ST_TO_ADDR
46104: LD_INT 3
46106: PUSH
46107: FOR_TO
46108: IFFALSE 46161
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46110: LD_ADDR_VAR 0 5
46114: PUSH
46115: LD_VAR 0 5
46119: PPUSH
46120: LD_VAR 0 7
46124: PPUSH
46125: LD_VAR 0 5
46129: PUSH
46130: LD_VAR 0 7
46134: ARRAY
46135: PUSH
46136: LD_VAR 0 9
46140: PUSH
46141: LD_VAR 0 7
46145: ARRAY
46146: PUSH
46147: LD_VAR 0 10
46151: MUL
46152: PLUS
46153: PPUSH
46154: CALL_OW 1
46158: ST_TO_ADDR
46159: GO 46107
46161: POP
46162: POP
// end ;
46163: GO 44640
46165: POP
46166: POP
// result := Replace ( result , 4 , tmp ) ;
46167: LD_ADDR_VAR 0 5
46171: PUSH
46172: LD_VAR 0 5
46176: PPUSH
46177: LD_INT 4
46179: PPUSH
46180: LD_VAR 0 8
46184: PPUSH
46185: CALL_OW 1
46189: ST_TO_ADDR
// end ;
46190: LD_VAR 0 5
46194: RET
// export function DangerAtRange ( unit , range ) ; begin
46195: LD_INT 0
46197: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46198: LD_ADDR_VAR 0 3
46202: PUSH
46203: LD_VAR 0 1
46207: PPUSH
46208: CALL_OW 255
46212: PPUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 250
46222: PPUSH
46223: LD_VAR 0 1
46227: PPUSH
46228: CALL_OW 251
46232: PPUSH
46233: LD_VAR 0 2
46237: PPUSH
46238: CALL 44492 0 4
46242: ST_TO_ADDR
// end ;
46243: LD_VAR 0 3
46247: RET
// export function DangerInArea ( side , area ) ; begin
46248: LD_INT 0
46250: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46251: LD_ADDR_VAR 0 3
46255: PUSH
46256: LD_VAR 0 2
46260: PPUSH
46261: LD_INT 81
46263: PUSH
46264: LD_VAR 0 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PPUSH
46273: CALL_OW 70
46277: ST_TO_ADDR
// end ;
46278: LD_VAR 0 3
46282: RET
// export function IsExtension ( b ) ; begin
46283: LD_INT 0
46285: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46286: LD_ADDR_VAR 0 2
46290: PUSH
46291: LD_VAR 0 1
46295: PUSH
46296: LD_INT 23
46298: PUSH
46299: LD_INT 20
46301: PUSH
46302: LD_INT 22
46304: PUSH
46305: LD_INT 17
46307: PUSH
46308: LD_INT 24
46310: PUSH
46311: LD_INT 21
46313: PUSH
46314: LD_INT 19
46316: PUSH
46317: LD_INT 16
46319: PUSH
46320: LD_INT 25
46322: PUSH
46323: LD_INT 18
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: IN
46338: ST_TO_ADDR
// end ;
46339: LD_VAR 0 2
46343: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46344: LD_INT 0
46346: PPUSH
46347: PPUSH
46348: PPUSH
// result := [ ] ;
46349: LD_ADDR_VAR 0 4
46353: PUSH
46354: EMPTY
46355: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46356: LD_ADDR_VAR 0 5
46360: PUSH
46361: LD_VAR 0 2
46365: PPUSH
46366: LD_INT 21
46368: PUSH
46369: LD_INT 3
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PPUSH
46376: CALL_OW 70
46380: ST_TO_ADDR
// if not tmp then
46381: LD_VAR 0 5
46385: NOT
46386: IFFALSE 46390
// exit ;
46388: GO 46454
// if checkLink then
46390: LD_VAR 0 3
46394: IFFALSE 46444
// begin for i in tmp do
46396: LD_ADDR_VAR 0 6
46400: PUSH
46401: LD_VAR 0 5
46405: PUSH
46406: FOR_IN
46407: IFFALSE 46442
// if GetBase ( i ) <> base then
46409: LD_VAR 0 6
46413: PPUSH
46414: CALL_OW 274
46418: PUSH
46419: LD_VAR 0 1
46423: NONEQUAL
46424: IFFALSE 46440
// ComLinkToBase ( base , i ) ;
46426: LD_VAR 0 1
46430: PPUSH
46431: LD_VAR 0 6
46435: PPUSH
46436: CALL_OW 169
46440: GO 46406
46442: POP
46443: POP
// end ; result := tmp ;
46444: LD_ADDR_VAR 0 4
46448: PUSH
46449: LD_VAR 0 5
46453: ST_TO_ADDR
// end ;
46454: LD_VAR 0 4
46458: RET
// export function ComComplete ( units , b ) ; var i ; begin
46459: LD_INT 0
46461: PPUSH
46462: PPUSH
// if not units then
46463: LD_VAR 0 1
46467: NOT
46468: IFFALSE 46472
// exit ;
46470: GO 46562
// for i in units do
46472: LD_ADDR_VAR 0 4
46476: PUSH
46477: LD_VAR 0 1
46481: PUSH
46482: FOR_IN
46483: IFFALSE 46560
// if BuildingStatus ( b ) = bs_build then
46485: LD_VAR 0 2
46489: PPUSH
46490: CALL_OW 461
46494: PUSH
46495: LD_INT 1
46497: EQUAL
46498: IFFALSE 46558
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46500: LD_VAR 0 4
46504: PPUSH
46505: LD_STRING h
46507: PUSH
46508: LD_VAR 0 2
46512: PPUSH
46513: CALL_OW 250
46517: PUSH
46518: LD_VAR 0 2
46522: PPUSH
46523: CALL_OW 251
46527: PUSH
46528: LD_VAR 0 2
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: PPUSH
46554: CALL_OW 446
46558: GO 46482
46560: POP
46561: POP
// end ;
46562: LD_VAR 0 3
46566: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46567: LD_INT 0
46569: PPUSH
46570: PPUSH
46571: PPUSH
46572: PPUSH
46573: PPUSH
46574: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46575: LD_VAR 0 1
46579: NOT
46580: PUSH
46581: LD_VAR 0 1
46585: PPUSH
46586: CALL_OW 263
46590: PUSH
46591: LD_INT 2
46593: NONEQUAL
46594: OR
46595: IFFALSE 46599
// exit ;
46597: GO 46915
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46599: LD_ADDR_VAR 0 6
46603: PUSH
46604: LD_INT 22
46606: PUSH
46607: LD_VAR 0 1
46611: PPUSH
46612: CALL_OW 255
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 30
46626: PUSH
46627: LD_INT 36
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 34
46636: PUSH
46637: LD_INT 31
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: LIST
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PPUSH
46653: CALL_OW 69
46657: ST_TO_ADDR
// if not tmp then
46658: LD_VAR 0 6
46662: NOT
46663: IFFALSE 46667
// exit ;
46665: GO 46915
// result := [ ] ;
46667: LD_ADDR_VAR 0 2
46671: PUSH
46672: EMPTY
46673: ST_TO_ADDR
// for i in tmp do
46674: LD_ADDR_VAR 0 3
46678: PUSH
46679: LD_VAR 0 6
46683: PUSH
46684: FOR_IN
46685: IFFALSE 46756
// begin t := UnitsInside ( i ) ;
46687: LD_ADDR_VAR 0 4
46691: PUSH
46692: LD_VAR 0 3
46696: PPUSH
46697: CALL_OW 313
46701: ST_TO_ADDR
// if t then
46702: LD_VAR 0 4
46706: IFFALSE 46754
// for j in t do
46708: LD_ADDR_VAR 0 7
46712: PUSH
46713: LD_VAR 0 4
46717: PUSH
46718: FOR_IN
46719: IFFALSE 46752
// result := Replace ( result , result + 1 , j ) ;
46721: LD_ADDR_VAR 0 2
46725: PUSH
46726: LD_VAR 0 2
46730: PPUSH
46731: LD_VAR 0 2
46735: PUSH
46736: LD_INT 1
46738: PLUS
46739: PPUSH
46740: LD_VAR 0 7
46744: PPUSH
46745: CALL_OW 1
46749: ST_TO_ADDR
46750: GO 46718
46752: POP
46753: POP
// end ;
46754: GO 46684
46756: POP
46757: POP
// if not result then
46758: LD_VAR 0 2
46762: NOT
46763: IFFALSE 46767
// exit ;
46765: GO 46915
// mech := result [ 1 ] ;
46767: LD_ADDR_VAR 0 5
46771: PUSH
46772: LD_VAR 0 2
46776: PUSH
46777: LD_INT 1
46779: ARRAY
46780: ST_TO_ADDR
// if result > 1 then
46781: LD_VAR 0 2
46785: PUSH
46786: LD_INT 1
46788: GREATER
46789: IFFALSE 46901
// begin for i = 2 to result do
46791: LD_ADDR_VAR 0 3
46795: PUSH
46796: DOUBLE
46797: LD_INT 2
46799: DEC
46800: ST_TO_ADDR
46801: LD_VAR 0 2
46805: PUSH
46806: FOR_TO
46807: IFFALSE 46899
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46809: LD_ADDR_VAR 0 4
46813: PUSH
46814: LD_VAR 0 2
46818: PUSH
46819: LD_VAR 0 3
46823: ARRAY
46824: PPUSH
46825: LD_INT 3
46827: PPUSH
46828: CALL_OW 259
46832: PUSH
46833: LD_VAR 0 2
46837: PUSH
46838: LD_VAR 0 3
46842: ARRAY
46843: PPUSH
46844: CALL_OW 432
46848: MINUS
46849: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46850: LD_VAR 0 4
46854: PUSH
46855: LD_VAR 0 5
46859: PPUSH
46860: LD_INT 3
46862: PPUSH
46863: CALL_OW 259
46867: PUSH
46868: LD_VAR 0 5
46872: PPUSH
46873: CALL_OW 432
46877: MINUS
46878: GREATEREQUAL
46879: IFFALSE 46897
// mech := result [ i ] ;
46881: LD_ADDR_VAR 0 5
46885: PUSH
46886: LD_VAR 0 2
46890: PUSH
46891: LD_VAR 0 3
46895: ARRAY
46896: ST_TO_ADDR
// end ;
46897: GO 46806
46899: POP
46900: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46901: LD_VAR 0 1
46905: PPUSH
46906: LD_VAR 0 5
46910: PPUSH
46911: CALL_OW 135
// end ;
46915: LD_VAR 0 2
46919: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46920: LD_INT 0
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
// result := [ ] ;
46935: LD_ADDR_VAR 0 7
46939: PUSH
46940: EMPTY
46941: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46942: LD_VAR 0 1
46946: PPUSH
46947: CALL_OW 266
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: IN
46962: NOT
46963: IFFALSE 46967
// exit ;
46965: GO 48601
// if name then
46967: LD_VAR 0 3
46971: IFFALSE 46987
// SetBName ( base_dep , name ) ;
46973: LD_VAR 0 1
46977: PPUSH
46978: LD_VAR 0 3
46982: PPUSH
46983: CALL_OW 500
// base := GetBase ( base_dep ) ;
46987: LD_ADDR_VAR 0 15
46991: PUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: CALL_OW 274
47001: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47002: LD_ADDR_VAR 0 16
47006: PUSH
47007: LD_VAR 0 1
47011: PPUSH
47012: CALL_OW 255
47016: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47017: LD_ADDR_VAR 0 17
47021: PUSH
47022: LD_VAR 0 1
47026: PPUSH
47027: CALL_OW 248
47031: ST_TO_ADDR
// if sources then
47032: LD_VAR 0 5
47036: IFFALSE 47083
// for i = 1 to 3 do
47038: LD_ADDR_VAR 0 8
47042: PUSH
47043: DOUBLE
47044: LD_INT 1
47046: DEC
47047: ST_TO_ADDR
47048: LD_INT 3
47050: PUSH
47051: FOR_TO
47052: IFFALSE 47081
// AddResourceType ( base , i , sources [ i ] ) ;
47054: LD_VAR 0 15
47058: PPUSH
47059: LD_VAR 0 8
47063: PPUSH
47064: LD_VAR 0 5
47068: PUSH
47069: LD_VAR 0 8
47073: ARRAY
47074: PPUSH
47075: CALL_OW 276
47079: GO 47051
47081: POP
47082: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47083: LD_ADDR_VAR 0 18
47087: PUSH
47088: LD_VAR 0 15
47092: PPUSH
47093: LD_VAR 0 2
47097: PPUSH
47098: LD_INT 1
47100: PPUSH
47101: CALL 46344 0 3
47105: ST_TO_ADDR
// InitHc ;
47106: CALL_OW 19
// InitUc ;
47110: CALL_OW 18
// uc_side := side ;
47114: LD_ADDR_OWVAR 20
47118: PUSH
47119: LD_VAR 0 16
47123: ST_TO_ADDR
// uc_nation := nation ;
47124: LD_ADDR_OWVAR 21
47128: PUSH
47129: LD_VAR 0 17
47133: ST_TO_ADDR
// if buildings then
47134: LD_VAR 0 18
47138: IFFALSE 48460
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47140: LD_ADDR_VAR 0 19
47144: PUSH
47145: LD_VAR 0 18
47149: PPUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 30
47155: PUSH
47156: LD_INT 29
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 30
47165: PUSH
47166: LD_INT 30
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: PPUSH
47178: CALL_OW 72
47182: ST_TO_ADDR
// if tmp then
47183: LD_VAR 0 19
47187: IFFALSE 47235
// for i in tmp do
47189: LD_ADDR_VAR 0 8
47193: PUSH
47194: LD_VAR 0 19
47198: PUSH
47199: FOR_IN
47200: IFFALSE 47233
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47202: LD_VAR 0 8
47206: PPUSH
47207: CALL_OW 250
47211: PPUSH
47212: LD_VAR 0 8
47216: PPUSH
47217: CALL_OW 251
47221: PPUSH
47222: LD_VAR 0 16
47226: PPUSH
47227: CALL_OW 441
47231: GO 47199
47233: POP
47234: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47235: LD_VAR 0 18
47239: PPUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 30
47245: PUSH
47246: LD_INT 32
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 30
47255: PUSH
47256: LD_INT 33
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: PPUSH
47268: CALL_OW 72
47272: IFFALSE 47360
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47274: LD_ADDR_VAR 0 8
47278: PUSH
47279: LD_VAR 0 18
47283: PPUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 30
47289: PUSH
47290: LD_INT 32
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 30
47299: PUSH
47300: LD_INT 33
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: PPUSH
47312: CALL_OW 72
47316: PUSH
47317: FOR_IN
47318: IFFALSE 47358
// begin if not GetBWeapon ( i ) then
47320: LD_VAR 0 8
47324: PPUSH
47325: CALL_OW 269
47329: NOT
47330: IFFALSE 47356
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47332: LD_VAR 0 8
47336: PPUSH
47337: LD_VAR 0 8
47341: PPUSH
47342: LD_VAR 0 2
47346: PPUSH
47347: CALL 48606 0 2
47351: PPUSH
47352: CALL_OW 431
// end ;
47356: GO 47317
47358: POP
47359: POP
// end ; for i = 1 to personel do
47360: LD_ADDR_VAR 0 8
47364: PUSH
47365: DOUBLE
47366: LD_INT 1
47368: DEC
47369: ST_TO_ADDR
47370: LD_VAR 0 6
47374: PUSH
47375: FOR_TO
47376: IFFALSE 48440
// begin if i > 4 then
47378: LD_VAR 0 8
47382: PUSH
47383: LD_INT 4
47385: GREATER
47386: IFFALSE 47390
// break ;
47388: GO 48440
// case i of 1 :
47390: LD_VAR 0 8
47394: PUSH
47395: LD_INT 1
47397: DOUBLE
47398: EQUAL
47399: IFTRUE 47403
47401: GO 47483
47403: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47404: LD_ADDR_VAR 0 12
47408: PUSH
47409: LD_VAR 0 18
47413: PPUSH
47414: LD_INT 22
47416: PUSH
47417: LD_VAR 0 16
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 58
47428: PUSH
47429: EMPTY
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: LD_INT 30
47437: PUSH
47438: LD_INT 32
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 30
47447: PUSH
47448: LD_INT 4
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 30
47457: PUSH
47458: LD_INT 5
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: LIST
47475: PPUSH
47476: CALL_OW 72
47480: ST_TO_ADDR
47481: GO 47705
47483: LD_INT 2
47485: DOUBLE
47486: EQUAL
47487: IFTRUE 47491
47489: GO 47553
47491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47492: LD_ADDR_VAR 0 12
47496: PUSH
47497: LD_VAR 0 18
47501: PPUSH
47502: LD_INT 22
47504: PUSH
47505: LD_VAR 0 16
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 30
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 30
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PPUSH
47546: CALL_OW 72
47550: ST_TO_ADDR
47551: GO 47705
47553: LD_INT 3
47555: DOUBLE
47556: EQUAL
47557: IFTRUE 47561
47559: GO 47623
47561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47562: LD_ADDR_VAR 0 12
47566: PUSH
47567: LD_VAR 0 18
47571: PPUSH
47572: LD_INT 22
47574: PUSH
47575: LD_VAR 0 16
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 30
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 30
47599: PUSH
47600: LD_INT 3
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PPUSH
47616: CALL_OW 72
47620: ST_TO_ADDR
47621: GO 47705
47623: LD_INT 4
47625: DOUBLE
47626: EQUAL
47627: IFTRUE 47631
47629: GO 47704
47631: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47632: LD_ADDR_VAR 0 12
47636: PUSH
47637: LD_VAR 0 18
47641: PPUSH
47642: LD_INT 22
47644: PUSH
47645: LD_VAR 0 16
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 30
47659: PUSH
47660: LD_INT 6
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 30
47669: PUSH
47670: LD_INT 7
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 30
47679: PUSH
47680: LD_INT 8
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PPUSH
47697: CALL_OW 72
47701: ST_TO_ADDR
47702: GO 47705
47704: POP
// if i = 1 then
47705: LD_VAR 0 8
47709: PUSH
47710: LD_INT 1
47712: EQUAL
47713: IFFALSE 47824
// begin tmp := [ ] ;
47715: LD_ADDR_VAR 0 19
47719: PUSH
47720: EMPTY
47721: ST_TO_ADDR
// for j in f do
47722: LD_ADDR_VAR 0 9
47726: PUSH
47727: LD_VAR 0 12
47731: PUSH
47732: FOR_IN
47733: IFFALSE 47806
// if GetBType ( j ) = b_bunker then
47735: LD_VAR 0 9
47739: PPUSH
47740: CALL_OW 266
47744: PUSH
47745: LD_INT 32
47747: EQUAL
47748: IFFALSE 47775
// tmp := Insert ( tmp , 1 , j ) else
47750: LD_ADDR_VAR 0 19
47754: PUSH
47755: LD_VAR 0 19
47759: PPUSH
47760: LD_INT 1
47762: PPUSH
47763: LD_VAR 0 9
47767: PPUSH
47768: CALL_OW 2
47772: ST_TO_ADDR
47773: GO 47804
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47775: LD_ADDR_VAR 0 19
47779: PUSH
47780: LD_VAR 0 19
47784: PPUSH
47785: LD_VAR 0 19
47789: PUSH
47790: LD_INT 1
47792: PLUS
47793: PPUSH
47794: LD_VAR 0 9
47798: PPUSH
47799: CALL_OW 2
47803: ST_TO_ADDR
47804: GO 47732
47806: POP
47807: POP
// if tmp then
47808: LD_VAR 0 19
47812: IFFALSE 47824
// f := tmp ;
47814: LD_ADDR_VAR 0 12
47818: PUSH
47819: LD_VAR 0 19
47823: ST_TO_ADDR
// end ; x := personel [ i ] ;
47824: LD_ADDR_VAR 0 13
47828: PUSH
47829: LD_VAR 0 6
47833: PUSH
47834: LD_VAR 0 8
47838: ARRAY
47839: ST_TO_ADDR
// if x = - 1 then
47840: LD_VAR 0 13
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: EQUAL
47849: IFFALSE 48058
// begin for j in f do
47851: LD_ADDR_VAR 0 9
47855: PUSH
47856: LD_VAR 0 12
47860: PUSH
47861: FOR_IN
47862: IFFALSE 48054
// repeat InitHc ;
47864: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47868: LD_VAR 0 9
47872: PPUSH
47873: CALL_OW 266
47877: PUSH
47878: LD_INT 5
47880: EQUAL
47881: IFFALSE 47951
// begin if UnitsInside ( j ) < 3 then
47883: LD_VAR 0 9
47887: PPUSH
47888: CALL_OW 313
47892: PUSH
47893: LD_INT 3
47895: LESS
47896: IFFALSE 47932
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47898: LD_INT 0
47900: PPUSH
47901: LD_INT 5
47903: PUSH
47904: LD_INT 8
47906: PUSH
47907: LD_INT 9
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: PUSH
47915: LD_VAR 0 17
47919: ARRAY
47920: PPUSH
47921: LD_VAR 0 4
47925: PPUSH
47926: CALL_OW 380
47930: GO 47949
// PrepareHuman ( false , i , skill ) ;
47932: LD_INT 0
47934: PPUSH
47935: LD_VAR 0 8
47939: PPUSH
47940: LD_VAR 0 4
47944: PPUSH
47945: CALL_OW 380
// end else
47949: GO 47968
// PrepareHuman ( false , i , skill ) ;
47951: LD_INT 0
47953: PPUSH
47954: LD_VAR 0 8
47958: PPUSH
47959: LD_VAR 0 4
47963: PPUSH
47964: CALL_OW 380
// un := CreateHuman ;
47968: LD_ADDR_VAR 0 14
47972: PUSH
47973: CALL_OW 44
47977: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47978: LD_ADDR_VAR 0 7
47982: PUSH
47983: LD_VAR 0 7
47987: PPUSH
47988: LD_INT 1
47990: PPUSH
47991: LD_VAR 0 14
47995: PPUSH
47996: CALL_OW 2
48000: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48001: LD_VAR 0 14
48005: PPUSH
48006: LD_VAR 0 9
48010: PPUSH
48011: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48015: LD_VAR 0 9
48019: PPUSH
48020: CALL_OW 313
48024: PUSH
48025: LD_INT 6
48027: EQUAL
48028: PUSH
48029: LD_VAR 0 9
48033: PPUSH
48034: CALL_OW 266
48038: PUSH
48039: LD_INT 32
48041: PUSH
48042: LD_INT 31
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: IN
48049: OR
48050: IFFALSE 47864
48052: GO 47861
48054: POP
48055: POP
// end else
48056: GO 48438
// for j = 1 to x do
48058: LD_ADDR_VAR 0 9
48062: PUSH
48063: DOUBLE
48064: LD_INT 1
48066: DEC
48067: ST_TO_ADDR
48068: LD_VAR 0 13
48072: PUSH
48073: FOR_TO
48074: IFFALSE 48436
// begin InitHc ;
48076: CALL_OW 19
// if not f then
48080: LD_VAR 0 12
48084: NOT
48085: IFFALSE 48174
// begin PrepareHuman ( false , i , skill ) ;
48087: LD_INT 0
48089: PPUSH
48090: LD_VAR 0 8
48094: PPUSH
48095: LD_VAR 0 4
48099: PPUSH
48100: CALL_OW 380
// un := CreateHuman ;
48104: LD_ADDR_VAR 0 14
48108: PUSH
48109: CALL_OW 44
48113: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48114: LD_ADDR_VAR 0 7
48118: PUSH
48119: LD_VAR 0 7
48123: PPUSH
48124: LD_INT 1
48126: PPUSH
48127: LD_VAR 0 14
48131: PPUSH
48132: CALL_OW 2
48136: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48137: LD_VAR 0 14
48141: PPUSH
48142: LD_VAR 0 1
48146: PPUSH
48147: CALL_OW 250
48151: PPUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 251
48161: PPUSH
48162: LD_INT 10
48164: PPUSH
48165: LD_INT 0
48167: PPUSH
48168: CALL_OW 50
// continue ;
48172: GO 48073
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48174: LD_VAR 0 12
48178: PUSH
48179: LD_INT 1
48181: ARRAY
48182: PPUSH
48183: CALL_OW 313
48187: PUSH
48188: LD_VAR 0 12
48192: PUSH
48193: LD_INT 1
48195: ARRAY
48196: PPUSH
48197: CALL_OW 266
48201: PUSH
48202: LD_INT 32
48204: PUSH
48205: LD_INT 31
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: IN
48212: AND
48213: PUSH
48214: LD_VAR 0 12
48218: PUSH
48219: LD_INT 1
48221: ARRAY
48222: PPUSH
48223: CALL_OW 313
48227: PUSH
48228: LD_INT 6
48230: EQUAL
48231: OR
48232: IFFALSE 48252
// f := Delete ( f , 1 ) ;
48234: LD_ADDR_VAR 0 12
48238: PUSH
48239: LD_VAR 0 12
48243: PPUSH
48244: LD_INT 1
48246: PPUSH
48247: CALL_OW 3
48251: ST_TO_ADDR
// if not f then
48252: LD_VAR 0 12
48256: NOT
48257: IFFALSE 48275
// begin x := x + 2 ;
48259: LD_ADDR_VAR 0 13
48263: PUSH
48264: LD_VAR 0 13
48268: PUSH
48269: LD_INT 2
48271: PLUS
48272: ST_TO_ADDR
// continue ;
48273: GO 48073
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48275: LD_VAR 0 12
48279: PUSH
48280: LD_INT 1
48282: ARRAY
48283: PPUSH
48284: CALL_OW 266
48288: PUSH
48289: LD_INT 5
48291: EQUAL
48292: IFFALSE 48366
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48294: LD_VAR 0 12
48298: PUSH
48299: LD_INT 1
48301: ARRAY
48302: PPUSH
48303: CALL_OW 313
48307: PUSH
48308: LD_INT 3
48310: LESS
48311: IFFALSE 48347
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48313: LD_INT 0
48315: PPUSH
48316: LD_INT 5
48318: PUSH
48319: LD_INT 8
48321: PUSH
48322: LD_INT 9
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: PUSH
48330: LD_VAR 0 17
48334: ARRAY
48335: PPUSH
48336: LD_VAR 0 4
48340: PPUSH
48341: CALL_OW 380
48345: GO 48364
// PrepareHuman ( false , i , skill ) ;
48347: LD_INT 0
48349: PPUSH
48350: LD_VAR 0 8
48354: PPUSH
48355: LD_VAR 0 4
48359: PPUSH
48360: CALL_OW 380
// end else
48364: GO 48383
// PrepareHuman ( false , i , skill ) ;
48366: LD_INT 0
48368: PPUSH
48369: LD_VAR 0 8
48373: PPUSH
48374: LD_VAR 0 4
48378: PPUSH
48379: CALL_OW 380
// un := CreateHuman ;
48383: LD_ADDR_VAR 0 14
48387: PUSH
48388: CALL_OW 44
48392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48393: LD_ADDR_VAR 0 7
48397: PUSH
48398: LD_VAR 0 7
48402: PPUSH
48403: LD_INT 1
48405: PPUSH
48406: LD_VAR 0 14
48410: PPUSH
48411: CALL_OW 2
48415: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48416: LD_VAR 0 14
48420: PPUSH
48421: LD_VAR 0 12
48425: PUSH
48426: LD_INT 1
48428: ARRAY
48429: PPUSH
48430: CALL_OW 52
// end ;
48434: GO 48073
48436: POP
48437: POP
// end ;
48438: GO 47375
48440: POP
48441: POP
// result := result ^ buildings ;
48442: LD_ADDR_VAR 0 7
48446: PUSH
48447: LD_VAR 0 7
48451: PUSH
48452: LD_VAR 0 18
48456: ADD
48457: ST_TO_ADDR
// end else
48458: GO 48601
// begin for i = 1 to personel do
48460: LD_ADDR_VAR 0 8
48464: PUSH
48465: DOUBLE
48466: LD_INT 1
48468: DEC
48469: ST_TO_ADDR
48470: LD_VAR 0 6
48474: PUSH
48475: FOR_TO
48476: IFFALSE 48599
// begin if i > 4 then
48478: LD_VAR 0 8
48482: PUSH
48483: LD_INT 4
48485: GREATER
48486: IFFALSE 48490
// break ;
48488: GO 48599
// x := personel [ i ] ;
48490: LD_ADDR_VAR 0 13
48494: PUSH
48495: LD_VAR 0 6
48499: PUSH
48500: LD_VAR 0 8
48504: ARRAY
48505: ST_TO_ADDR
// if x = - 1 then
48506: LD_VAR 0 13
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: EQUAL
48515: IFFALSE 48519
// continue ;
48517: GO 48475
// PrepareHuman ( false , i , skill ) ;
48519: LD_INT 0
48521: PPUSH
48522: LD_VAR 0 8
48526: PPUSH
48527: LD_VAR 0 4
48531: PPUSH
48532: CALL_OW 380
// un := CreateHuman ;
48536: LD_ADDR_VAR 0 14
48540: PUSH
48541: CALL_OW 44
48545: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48546: LD_VAR 0 14
48550: PPUSH
48551: LD_VAR 0 1
48555: PPUSH
48556: CALL_OW 250
48560: PPUSH
48561: LD_VAR 0 1
48565: PPUSH
48566: CALL_OW 251
48570: PPUSH
48571: LD_INT 10
48573: PPUSH
48574: LD_INT 0
48576: PPUSH
48577: CALL_OW 50
// result := result ^ un ;
48581: LD_ADDR_VAR 0 7
48585: PUSH
48586: LD_VAR 0 7
48590: PUSH
48591: LD_VAR 0 14
48595: ADD
48596: ST_TO_ADDR
// end ;
48597: GO 48475
48599: POP
48600: POP
// end ; end ;
48601: LD_VAR 0 7
48605: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48606: LD_INT 0
48608: PPUSH
48609: PPUSH
48610: PPUSH
48611: PPUSH
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
48616: PPUSH
48617: PPUSH
48618: PPUSH
48619: PPUSH
48620: PPUSH
48621: PPUSH
48622: PPUSH
48623: PPUSH
// result := false ;
48624: LD_ADDR_VAR 0 3
48628: PUSH
48629: LD_INT 0
48631: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48632: LD_VAR 0 1
48636: NOT
48637: PUSH
48638: LD_VAR 0 1
48642: PPUSH
48643: CALL_OW 266
48647: PUSH
48648: LD_INT 32
48650: PUSH
48651: LD_INT 33
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: IN
48658: NOT
48659: OR
48660: IFFALSE 48664
// exit ;
48662: GO 49773
// nat := GetNation ( tower ) ;
48664: LD_ADDR_VAR 0 12
48668: PUSH
48669: LD_VAR 0 1
48673: PPUSH
48674: CALL_OW 248
48678: ST_TO_ADDR
// side := GetSide ( tower ) ;
48679: LD_ADDR_VAR 0 16
48683: PUSH
48684: LD_VAR 0 1
48688: PPUSH
48689: CALL_OW 255
48693: ST_TO_ADDR
// x := GetX ( tower ) ;
48694: LD_ADDR_VAR 0 10
48698: PUSH
48699: LD_VAR 0 1
48703: PPUSH
48704: CALL_OW 250
48708: ST_TO_ADDR
// y := GetY ( tower ) ;
48709: LD_ADDR_VAR 0 11
48713: PUSH
48714: LD_VAR 0 1
48718: PPUSH
48719: CALL_OW 251
48723: ST_TO_ADDR
// if not x or not y then
48724: LD_VAR 0 10
48728: NOT
48729: PUSH
48730: LD_VAR 0 11
48734: NOT
48735: OR
48736: IFFALSE 48740
// exit ;
48738: GO 49773
// weapon := 0 ;
48740: LD_ADDR_VAR 0 18
48744: PUSH
48745: LD_INT 0
48747: ST_TO_ADDR
// fac_list := [ ] ;
48748: LD_ADDR_VAR 0 17
48752: PUSH
48753: EMPTY
48754: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48755: LD_ADDR_VAR 0 6
48759: PUSH
48760: LD_VAR 0 1
48764: PPUSH
48765: CALL_OW 274
48769: PPUSH
48770: LD_VAR 0 2
48774: PPUSH
48775: LD_INT 0
48777: PPUSH
48778: CALL 46344 0 3
48782: PPUSH
48783: LD_INT 30
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PPUSH
48793: CALL_OW 72
48797: ST_TO_ADDR
// if not factories then
48798: LD_VAR 0 6
48802: NOT
48803: IFFALSE 48807
// exit ;
48805: GO 49773
// for i in factories do
48807: LD_ADDR_VAR 0 8
48811: PUSH
48812: LD_VAR 0 6
48816: PUSH
48817: FOR_IN
48818: IFFALSE 48843
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48820: LD_ADDR_VAR 0 17
48824: PUSH
48825: LD_VAR 0 17
48829: PUSH
48830: LD_VAR 0 8
48834: PPUSH
48835: CALL_OW 478
48839: UNION
48840: ST_TO_ADDR
48841: GO 48817
48843: POP
48844: POP
// if not fac_list then
48845: LD_VAR 0 17
48849: NOT
48850: IFFALSE 48854
// exit ;
48852: GO 49773
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48854: LD_ADDR_VAR 0 5
48858: PUSH
48859: LD_INT 4
48861: PUSH
48862: LD_INT 5
48864: PUSH
48865: LD_INT 9
48867: PUSH
48868: LD_INT 10
48870: PUSH
48871: LD_INT 6
48873: PUSH
48874: LD_INT 7
48876: PUSH
48877: LD_INT 11
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 27
48891: PUSH
48892: LD_INT 28
48894: PUSH
48895: LD_INT 26
48897: PUSH
48898: LD_INT 30
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 43
48909: PUSH
48910: LD_INT 44
48912: PUSH
48913: LD_INT 46
48915: PUSH
48916: LD_INT 45
48918: PUSH
48919: LD_INT 47
48921: PUSH
48922: LD_INT 49
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: LIST
48937: PUSH
48938: LD_VAR 0 12
48942: ARRAY
48943: ST_TO_ADDR
// list := list isect fac_list ;
48944: LD_ADDR_VAR 0 5
48948: PUSH
48949: LD_VAR 0 5
48953: PUSH
48954: LD_VAR 0 17
48958: ISECT
48959: ST_TO_ADDR
// if not list then
48960: LD_VAR 0 5
48964: NOT
48965: IFFALSE 48969
// exit ;
48967: GO 49773
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48969: LD_VAR 0 12
48973: PUSH
48974: LD_INT 3
48976: EQUAL
48977: PUSH
48978: LD_INT 49
48980: PUSH
48981: LD_VAR 0 5
48985: IN
48986: AND
48987: PUSH
48988: LD_INT 31
48990: PPUSH
48991: LD_VAR 0 16
48995: PPUSH
48996: CALL_OW 321
49000: PUSH
49001: LD_INT 2
49003: EQUAL
49004: AND
49005: IFFALSE 49065
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49007: LD_INT 22
49009: PUSH
49010: LD_VAR 0 16
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 35
49021: PUSH
49022: LD_INT 49
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 91
49031: PUSH
49032: LD_VAR 0 1
49036: PUSH
49037: LD_INT 10
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: LIST
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: LIST
49049: PPUSH
49050: CALL_OW 69
49054: NOT
49055: IFFALSE 49065
// weapon := ru_time_lapser ;
49057: LD_ADDR_VAR 0 18
49061: PUSH
49062: LD_INT 49
49064: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49065: LD_VAR 0 12
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: IN
49080: PUSH
49081: LD_INT 11
49083: PUSH
49084: LD_VAR 0 5
49088: IN
49089: PUSH
49090: LD_INT 30
49092: PUSH
49093: LD_VAR 0 5
49097: IN
49098: OR
49099: AND
49100: PUSH
49101: LD_INT 6
49103: PPUSH
49104: LD_VAR 0 16
49108: PPUSH
49109: CALL_OW 321
49113: PUSH
49114: LD_INT 2
49116: EQUAL
49117: AND
49118: IFFALSE 49283
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49120: LD_INT 22
49122: PUSH
49123: LD_VAR 0 16
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: LD_INT 35
49137: PUSH
49138: LD_INT 11
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 35
49147: PUSH
49148: LD_INT 30
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 91
49162: PUSH
49163: LD_VAR 0 1
49167: PUSH
49168: LD_INT 18
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: PPUSH
49181: CALL_OW 69
49185: NOT
49186: PUSH
49187: LD_INT 22
49189: PUSH
49190: LD_VAR 0 16
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 30
49204: PUSH
49205: LD_INT 32
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 30
49214: PUSH
49215: LD_INT 33
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 91
49229: PUSH
49230: LD_VAR 0 1
49234: PUSH
49235: LD_INT 12
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: LIST
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: LIST
49247: PUSH
49248: EMPTY
49249: LIST
49250: PPUSH
49251: CALL_OW 69
49255: PUSH
49256: LD_INT 2
49258: GREATER
49259: AND
49260: IFFALSE 49283
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49262: LD_ADDR_VAR 0 18
49266: PUSH
49267: LD_INT 11
49269: PUSH
49270: LD_INT 30
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_VAR 0 12
49281: ARRAY
49282: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49283: LD_VAR 0 18
49287: NOT
49288: PUSH
49289: LD_INT 40
49291: PPUSH
49292: LD_VAR 0 16
49296: PPUSH
49297: CALL_OW 321
49301: PUSH
49302: LD_INT 2
49304: EQUAL
49305: AND
49306: PUSH
49307: LD_INT 7
49309: PUSH
49310: LD_VAR 0 5
49314: IN
49315: PUSH
49316: LD_INT 28
49318: PUSH
49319: LD_VAR 0 5
49323: IN
49324: OR
49325: PUSH
49326: LD_INT 45
49328: PUSH
49329: LD_VAR 0 5
49333: IN
49334: OR
49335: AND
49336: IFFALSE 49590
// begin hex := GetHexInfo ( x , y ) ;
49338: LD_ADDR_VAR 0 4
49342: PUSH
49343: LD_VAR 0 10
49347: PPUSH
49348: LD_VAR 0 11
49352: PPUSH
49353: CALL_OW 546
49357: ST_TO_ADDR
// if hex [ 1 ] then
49358: LD_VAR 0 4
49362: PUSH
49363: LD_INT 1
49365: ARRAY
49366: IFFALSE 49370
// exit ;
49368: GO 49773
// height := hex [ 2 ] ;
49370: LD_ADDR_VAR 0 15
49374: PUSH
49375: LD_VAR 0 4
49379: PUSH
49380: LD_INT 2
49382: ARRAY
49383: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49384: LD_ADDR_VAR 0 14
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: LD_INT 5
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: ST_TO_ADDR
// for i in tmp do
49407: LD_ADDR_VAR 0 8
49411: PUSH
49412: LD_VAR 0 14
49416: PUSH
49417: FOR_IN
49418: IFFALSE 49588
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49420: LD_ADDR_VAR 0 9
49424: PUSH
49425: LD_VAR 0 10
49429: PPUSH
49430: LD_VAR 0 8
49434: PPUSH
49435: LD_INT 5
49437: PPUSH
49438: CALL_OW 272
49442: PUSH
49443: LD_VAR 0 11
49447: PPUSH
49448: LD_VAR 0 8
49452: PPUSH
49453: LD_INT 5
49455: PPUSH
49456: CALL_OW 273
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49465: LD_VAR 0 9
49469: PUSH
49470: LD_INT 1
49472: ARRAY
49473: PPUSH
49474: LD_VAR 0 9
49478: PUSH
49479: LD_INT 2
49481: ARRAY
49482: PPUSH
49483: CALL_OW 488
49487: IFFALSE 49586
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49489: LD_ADDR_VAR 0 4
49493: PUSH
49494: LD_VAR 0 9
49498: PUSH
49499: LD_INT 1
49501: ARRAY
49502: PPUSH
49503: LD_VAR 0 9
49507: PUSH
49508: LD_INT 2
49510: ARRAY
49511: PPUSH
49512: CALL_OW 546
49516: ST_TO_ADDR
// if hex [ 1 ] then
49517: LD_VAR 0 4
49521: PUSH
49522: LD_INT 1
49524: ARRAY
49525: IFFALSE 49529
// continue ;
49527: GO 49417
// h := hex [ 2 ] ;
49529: LD_ADDR_VAR 0 13
49533: PUSH
49534: LD_VAR 0 4
49538: PUSH
49539: LD_INT 2
49541: ARRAY
49542: ST_TO_ADDR
// if h + 7 < height then
49543: LD_VAR 0 13
49547: PUSH
49548: LD_INT 7
49550: PLUS
49551: PUSH
49552: LD_VAR 0 15
49556: LESS
49557: IFFALSE 49586
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49559: LD_ADDR_VAR 0 18
49563: PUSH
49564: LD_INT 7
49566: PUSH
49567: LD_INT 28
49569: PUSH
49570: LD_INT 45
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: LIST
49577: PUSH
49578: LD_VAR 0 12
49582: ARRAY
49583: ST_TO_ADDR
// break ;
49584: GO 49588
// end ; end ; end ;
49586: GO 49417
49588: POP
49589: POP
// end ; if not weapon then
49590: LD_VAR 0 18
49594: NOT
49595: IFFALSE 49655
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49597: LD_ADDR_VAR 0 5
49601: PUSH
49602: LD_VAR 0 5
49606: PUSH
49607: LD_INT 11
49609: PUSH
49610: LD_INT 30
49612: PUSH
49613: LD_INT 49
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: DIFF
49621: ST_TO_ADDR
// if not list then
49622: LD_VAR 0 5
49626: NOT
49627: IFFALSE 49631
// exit ;
49629: GO 49773
// weapon := list [ rand ( 1 , list ) ] ;
49631: LD_ADDR_VAR 0 18
49635: PUSH
49636: LD_VAR 0 5
49640: PUSH
49641: LD_INT 1
49643: PPUSH
49644: LD_VAR 0 5
49648: PPUSH
49649: CALL_OW 12
49653: ARRAY
49654: ST_TO_ADDR
// end ; if weapon then
49655: LD_VAR 0 18
49659: IFFALSE 49773
// begin tmp := CostOfWeapon ( weapon ) ;
49661: LD_ADDR_VAR 0 14
49665: PUSH
49666: LD_VAR 0 18
49670: PPUSH
49671: CALL_OW 451
49675: ST_TO_ADDR
// j := GetBase ( tower ) ;
49676: LD_ADDR_VAR 0 9
49680: PUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 274
49690: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49691: LD_VAR 0 9
49695: PPUSH
49696: LD_INT 1
49698: PPUSH
49699: CALL_OW 275
49703: PUSH
49704: LD_VAR 0 14
49708: PUSH
49709: LD_INT 1
49711: ARRAY
49712: GREATEREQUAL
49713: PUSH
49714: LD_VAR 0 9
49718: PPUSH
49719: LD_INT 2
49721: PPUSH
49722: CALL_OW 275
49726: PUSH
49727: LD_VAR 0 14
49731: PUSH
49732: LD_INT 2
49734: ARRAY
49735: GREATEREQUAL
49736: AND
49737: PUSH
49738: LD_VAR 0 9
49742: PPUSH
49743: LD_INT 3
49745: PPUSH
49746: CALL_OW 275
49750: PUSH
49751: LD_VAR 0 14
49755: PUSH
49756: LD_INT 3
49758: ARRAY
49759: GREATEREQUAL
49760: AND
49761: IFFALSE 49773
// result := weapon ;
49763: LD_ADDR_VAR 0 3
49767: PUSH
49768: LD_VAR 0 18
49772: ST_TO_ADDR
// end ; end ;
49773: LD_VAR 0 3
49777: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49778: LD_INT 0
49780: PPUSH
49781: PPUSH
// result := true ;
49782: LD_ADDR_VAR 0 3
49786: PUSH
49787: LD_INT 1
49789: ST_TO_ADDR
// if array1 = array2 then
49790: LD_VAR 0 1
49794: PUSH
49795: LD_VAR 0 2
49799: EQUAL
49800: IFFALSE 49860
// begin for i = 1 to array1 do
49802: LD_ADDR_VAR 0 4
49806: PUSH
49807: DOUBLE
49808: LD_INT 1
49810: DEC
49811: ST_TO_ADDR
49812: LD_VAR 0 1
49816: PUSH
49817: FOR_TO
49818: IFFALSE 49856
// if array1 [ i ] <> array2 [ i ] then
49820: LD_VAR 0 1
49824: PUSH
49825: LD_VAR 0 4
49829: ARRAY
49830: PUSH
49831: LD_VAR 0 2
49835: PUSH
49836: LD_VAR 0 4
49840: ARRAY
49841: NONEQUAL
49842: IFFALSE 49854
// begin result := false ;
49844: LD_ADDR_VAR 0 3
49848: PUSH
49849: LD_INT 0
49851: ST_TO_ADDR
// break ;
49852: GO 49856
// end ;
49854: GO 49817
49856: POP
49857: POP
// end else
49858: GO 49868
// result := false ;
49860: LD_ADDR_VAR 0 3
49864: PUSH
49865: LD_INT 0
49867: ST_TO_ADDR
// end ;
49868: LD_VAR 0 3
49872: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49873: LD_INT 0
49875: PPUSH
49876: PPUSH
// if not array1 or not array2 then
49877: LD_VAR 0 1
49881: NOT
49882: PUSH
49883: LD_VAR 0 2
49887: NOT
49888: OR
49889: IFFALSE 49893
// exit ;
49891: GO 49957
// result := true ;
49893: LD_ADDR_VAR 0 3
49897: PUSH
49898: LD_INT 1
49900: ST_TO_ADDR
// for i = 1 to array1 do
49901: LD_ADDR_VAR 0 4
49905: PUSH
49906: DOUBLE
49907: LD_INT 1
49909: DEC
49910: ST_TO_ADDR
49911: LD_VAR 0 1
49915: PUSH
49916: FOR_TO
49917: IFFALSE 49955
// if array1 [ i ] <> array2 [ i ] then
49919: LD_VAR 0 1
49923: PUSH
49924: LD_VAR 0 4
49928: ARRAY
49929: PUSH
49930: LD_VAR 0 2
49934: PUSH
49935: LD_VAR 0 4
49939: ARRAY
49940: NONEQUAL
49941: IFFALSE 49953
// begin result := false ;
49943: LD_ADDR_VAR 0 3
49947: PUSH
49948: LD_INT 0
49950: ST_TO_ADDR
// break ;
49951: GO 49955
// end ;
49953: GO 49916
49955: POP
49956: POP
// end ;
49957: LD_VAR 0 3
49961: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49962: LD_INT 0
49964: PPUSH
49965: PPUSH
49966: PPUSH
// pom := GetBase ( fac ) ;
49967: LD_ADDR_VAR 0 5
49971: PUSH
49972: LD_VAR 0 1
49976: PPUSH
49977: CALL_OW 274
49981: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49982: LD_ADDR_VAR 0 4
49986: PUSH
49987: LD_VAR 0 2
49991: PUSH
49992: LD_INT 1
49994: ARRAY
49995: PPUSH
49996: LD_VAR 0 2
50000: PUSH
50001: LD_INT 2
50003: ARRAY
50004: PPUSH
50005: LD_VAR 0 2
50009: PUSH
50010: LD_INT 3
50012: ARRAY
50013: PPUSH
50014: LD_VAR 0 2
50018: PUSH
50019: LD_INT 4
50021: ARRAY
50022: PPUSH
50023: CALL_OW 449
50027: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50028: LD_ADDR_VAR 0 3
50032: PUSH
50033: LD_VAR 0 5
50037: PPUSH
50038: LD_INT 1
50040: PPUSH
50041: CALL_OW 275
50045: PUSH
50046: LD_VAR 0 4
50050: PUSH
50051: LD_INT 1
50053: ARRAY
50054: GREATEREQUAL
50055: PUSH
50056: LD_VAR 0 5
50060: PPUSH
50061: LD_INT 2
50063: PPUSH
50064: CALL_OW 275
50068: PUSH
50069: LD_VAR 0 4
50073: PUSH
50074: LD_INT 2
50076: ARRAY
50077: GREATEREQUAL
50078: AND
50079: PUSH
50080: LD_VAR 0 5
50084: PPUSH
50085: LD_INT 3
50087: PPUSH
50088: CALL_OW 275
50092: PUSH
50093: LD_VAR 0 4
50097: PUSH
50098: LD_INT 3
50100: ARRAY
50101: GREATEREQUAL
50102: AND
50103: ST_TO_ADDR
// end ;
50104: LD_VAR 0 3
50108: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50109: LD_INT 0
50111: PPUSH
50112: PPUSH
50113: PPUSH
50114: PPUSH
// pom := GetBase ( building ) ;
50115: LD_ADDR_VAR 0 3
50119: PUSH
50120: LD_VAR 0 1
50124: PPUSH
50125: CALL_OW 274
50129: ST_TO_ADDR
// if not pom then
50130: LD_VAR 0 3
50134: NOT
50135: IFFALSE 50139
// exit ;
50137: GO 50309
// btype := GetBType ( building ) ;
50139: LD_ADDR_VAR 0 5
50143: PUSH
50144: LD_VAR 0 1
50148: PPUSH
50149: CALL_OW 266
50153: ST_TO_ADDR
// if btype = b_armoury then
50154: LD_VAR 0 5
50158: PUSH
50159: LD_INT 4
50161: EQUAL
50162: IFFALSE 50172
// btype := b_barracks ;
50164: LD_ADDR_VAR 0 5
50168: PUSH
50169: LD_INT 5
50171: ST_TO_ADDR
// if btype = b_depot then
50172: LD_VAR 0 5
50176: PUSH
50177: LD_INT 0
50179: EQUAL
50180: IFFALSE 50190
// btype := b_warehouse ;
50182: LD_ADDR_VAR 0 5
50186: PUSH
50187: LD_INT 1
50189: ST_TO_ADDR
// if btype = b_workshop then
50190: LD_VAR 0 5
50194: PUSH
50195: LD_INT 2
50197: EQUAL
50198: IFFALSE 50208
// btype := b_factory ;
50200: LD_ADDR_VAR 0 5
50204: PUSH
50205: LD_INT 3
50207: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50208: LD_ADDR_VAR 0 4
50212: PUSH
50213: LD_VAR 0 5
50217: PPUSH
50218: LD_VAR 0 1
50222: PPUSH
50223: CALL_OW 248
50227: PPUSH
50228: CALL_OW 450
50232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50233: LD_ADDR_VAR 0 2
50237: PUSH
50238: LD_VAR 0 3
50242: PPUSH
50243: LD_INT 1
50245: PPUSH
50246: CALL_OW 275
50250: PUSH
50251: LD_VAR 0 4
50255: PUSH
50256: LD_INT 1
50258: ARRAY
50259: GREATEREQUAL
50260: PUSH
50261: LD_VAR 0 3
50265: PPUSH
50266: LD_INT 2
50268: PPUSH
50269: CALL_OW 275
50273: PUSH
50274: LD_VAR 0 4
50278: PUSH
50279: LD_INT 2
50281: ARRAY
50282: GREATEREQUAL
50283: AND
50284: PUSH
50285: LD_VAR 0 3
50289: PPUSH
50290: LD_INT 3
50292: PPUSH
50293: CALL_OW 275
50297: PUSH
50298: LD_VAR 0 4
50302: PUSH
50303: LD_INT 3
50305: ARRAY
50306: GREATEREQUAL
50307: AND
50308: ST_TO_ADDR
// end ;
50309: LD_VAR 0 2
50313: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50314: LD_INT 0
50316: PPUSH
50317: PPUSH
50318: PPUSH
// pom := GetBase ( building ) ;
50319: LD_ADDR_VAR 0 4
50323: PUSH
50324: LD_VAR 0 1
50328: PPUSH
50329: CALL_OW 274
50333: ST_TO_ADDR
// if not pom then
50334: LD_VAR 0 4
50338: NOT
50339: IFFALSE 50343
// exit ;
50341: GO 50444
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50343: LD_ADDR_VAR 0 5
50347: PUSH
50348: LD_VAR 0 2
50352: PPUSH
50353: LD_VAR 0 1
50357: PPUSH
50358: CALL_OW 248
50362: PPUSH
50363: CALL_OW 450
50367: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50368: LD_ADDR_VAR 0 3
50372: PUSH
50373: LD_VAR 0 4
50377: PPUSH
50378: LD_INT 1
50380: PPUSH
50381: CALL_OW 275
50385: PUSH
50386: LD_VAR 0 5
50390: PUSH
50391: LD_INT 1
50393: ARRAY
50394: GREATEREQUAL
50395: PUSH
50396: LD_VAR 0 4
50400: PPUSH
50401: LD_INT 2
50403: PPUSH
50404: CALL_OW 275
50408: PUSH
50409: LD_VAR 0 5
50413: PUSH
50414: LD_INT 2
50416: ARRAY
50417: GREATEREQUAL
50418: AND
50419: PUSH
50420: LD_VAR 0 4
50424: PPUSH
50425: LD_INT 3
50427: PPUSH
50428: CALL_OW 275
50432: PUSH
50433: LD_VAR 0 5
50437: PUSH
50438: LD_INT 3
50440: ARRAY
50441: GREATEREQUAL
50442: AND
50443: ST_TO_ADDR
// end ;
50444: LD_VAR 0 3
50448: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50449: LD_INT 0
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
50456: PPUSH
50457: PPUSH
50458: PPUSH
50459: PPUSH
50460: PPUSH
50461: PPUSH
// result := false ;
50462: LD_ADDR_VAR 0 8
50466: PUSH
50467: LD_INT 0
50469: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50470: LD_VAR 0 5
50474: NOT
50475: PUSH
50476: LD_VAR 0 1
50480: NOT
50481: OR
50482: PUSH
50483: LD_VAR 0 2
50487: NOT
50488: OR
50489: PUSH
50490: LD_VAR 0 3
50494: NOT
50495: OR
50496: IFFALSE 50500
// exit ;
50498: GO 51314
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50500: LD_ADDR_VAR 0 14
50504: PUSH
50505: LD_VAR 0 1
50509: PPUSH
50510: LD_VAR 0 2
50514: PPUSH
50515: LD_VAR 0 3
50519: PPUSH
50520: LD_VAR 0 4
50524: PPUSH
50525: LD_VAR 0 5
50529: PUSH
50530: LD_INT 1
50532: ARRAY
50533: PPUSH
50534: CALL_OW 248
50538: PPUSH
50539: LD_INT 0
50541: PPUSH
50542: CALL 52551 0 6
50546: ST_TO_ADDR
// if not hexes then
50547: LD_VAR 0 14
50551: NOT
50552: IFFALSE 50556
// exit ;
50554: GO 51314
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50556: LD_ADDR_VAR 0 17
50560: PUSH
50561: LD_VAR 0 5
50565: PPUSH
50566: LD_INT 22
50568: PUSH
50569: LD_VAR 0 13
50573: PPUSH
50574: CALL_OW 255
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 30
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 30
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PPUSH
50615: CALL_OW 72
50619: ST_TO_ADDR
// for i = 1 to hexes do
50620: LD_ADDR_VAR 0 9
50624: PUSH
50625: DOUBLE
50626: LD_INT 1
50628: DEC
50629: ST_TO_ADDR
50630: LD_VAR 0 14
50634: PUSH
50635: FOR_TO
50636: IFFALSE 51312
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50638: LD_ADDR_VAR 0 13
50642: PUSH
50643: LD_VAR 0 14
50647: PUSH
50648: LD_VAR 0 9
50652: ARRAY
50653: PUSH
50654: LD_INT 1
50656: ARRAY
50657: PPUSH
50658: LD_VAR 0 14
50662: PUSH
50663: LD_VAR 0 9
50667: ARRAY
50668: PUSH
50669: LD_INT 2
50671: ARRAY
50672: PPUSH
50673: CALL_OW 428
50677: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50678: LD_VAR 0 14
50682: PUSH
50683: LD_VAR 0 9
50687: ARRAY
50688: PUSH
50689: LD_INT 1
50691: ARRAY
50692: PPUSH
50693: LD_VAR 0 14
50697: PUSH
50698: LD_VAR 0 9
50702: ARRAY
50703: PUSH
50704: LD_INT 2
50706: ARRAY
50707: PPUSH
50708: CALL_OW 351
50712: PUSH
50713: LD_VAR 0 14
50717: PUSH
50718: LD_VAR 0 9
50722: ARRAY
50723: PUSH
50724: LD_INT 1
50726: ARRAY
50727: PPUSH
50728: LD_VAR 0 14
50732: PUSH
50733: LD_VAR 0 9
50737: ARRAY
50738: PUSH
50739: LD_INT 2
50741: ARRAY
50742: PPUSH
50743: CALL_OW 488
50747: NOT
50748: OR
50749: PUSH
50750: LD_VAR 0 13
50754: PPUSH
50755: CALL_OW 247
50759: PUSH
50760: LD_INT 3
50762: EQUAL
50763: OR
50764: IFFALSE 50770
// exit ;
50766: POP
50767: POP
50768: GO 51314
// if not tmp then
50770: LD_VAR 0 13
50774: NOT
50775: IFFALSE 50779
// continue ;
50777: GO 50635
// result := true ;
50779: LD_ADDR_VAR 0 8
50783: PUSH
50784: LD_INT 1
50786: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50787: LD_VAR 0 6
50791: PUSH
50792: LD_VAR 0 13
50796: PPUSH
50797: CALL_OW 247
50801: PUSH
50802: LD_INT 2
50804: EQUAL
50805: AND
50806: PUSH
50807: LD_VAR 0 13
50811: PPUSH
50812: CALL_OW 263
50816: PUSH
50817: LD_INT 1
50819: EQUAL
50820: AND
50821: IFFALSE 50985
// begin if IsDrivenBy ( tmp ) then
50823: LD_VAR 0 13
50827: PPUSH
50828: CALL_OW 311
50832: IFFALSE 50836
// continue ;
50834: GO 50635
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50836: LD_VAR 0 6
50840: PPUSH
50841: LD_INT 3
50843: PUSH
50844: LD_INT 60
50846: PUSH
50847: EMPTY
50848: LIST
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: LD_INT 55
50859: PUSH
50860: EMPTY
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PPUSH
50871: CALL_OW 72
50875: IFFALSE 50983
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50877: LD_ADDR_VAR 0 18
50881: PUSH
50882: LD_VAR 0 6
50886: PPUSH
50887: LD_INT 3
50889: PUSH
50890: LD_INT 60
50892: PUSH
50893: EMPTY
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: LD_INT 55
50905: PUSH
50906: EMPTY
50907: LIST
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PPUSH
50917: CALL_OW 72
50921: PUSH
50922: LD_INT 1
50924: ARRAY
50925: ST_TO_ADDR
// if IsInUnit ( driver ) then
50926: LD_VAR 0 18
50930: PPUSH
50931: CALL_OW 310
50935: IFFALSE 50946
// ComExit ( driver ) ;
50937: LD_VAR 0 18
50941: PPUSH
50942: CALL 75735 0 1
// AddComEnterUnit ( driver , tmp ) ;
50946: LD_VAR 0 18
50950: PPUSH
50951: LD_VAR 0 13
50955: PPUSH
50956: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50960: LD_VAR 0 18
50964: PPUSH
50965: LD_VAR 0 7
50969: PPUSH
50970: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50974: LD_VAR 0 18
50978: PPUSH
50979: CALL_OW 181
// end ; continue ;
50983: GO 50635
// end ; if not cleaners or not tmp in cleaners then
50985: LD_VAR 0 6
50989: NOT
50990: PUSH
50991: LD_VAR 0 13
50995: PUSH
50996: LD_VAR 0 6
51000: IN
51001: NOT
51002: OR
51003: IFFALSE 51310
// begin if dep then
51005: LD_VAR 0 17
51009: IFFALSE 51145
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51011: LD_ADDR_VAR 0 16
51015: PUSH
51016: LD_VAR 0 17
51020: PUSH
51021: LD_INT 1
51023: ARRAY
51024: PPUSH
51025: CALL_OW 250
51029: PPUSH
51030: LD_VAR 0 17
51034: PUSH
51035: LD_INT 1
51037: ARRAY
51038: PPUSH
51039: CALL_OW 254
51043: PPUSH
51044: LD_INT 5
51046: PPUSH
51047: CALL_OW 272
51051: PUSH
51052: LD_VAR 0 17
51056: PUSH
51057: LD_INT 1
51059: ARRAY
51060: PPUSH
51061: CALL_OW 251
51065: PPUSH
51066: LD_VAR 0 17
51070: PUSH
51071: LD_INT 1
51073: ARRAY
51074: PPUSH
51075: CALL_OW 254
51079: PPUSH
51080: LD_INT 5
51082: PPUSH
51083: CALL_OW 273
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51092: LD_VAR 0 16
51096: PUSH
51097: LD_INT 1
51099: ARRAY
51100: PPUSH
51101: LD_VAR 0 16
51105: PUSH
51106: LD_INT 2
51108: ARRAY
51109: PPUSH
51110: CALL_OW 488
51114: IFFALSE 51145
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51116: LD_VAR 0 13
51120: PPUSH
51121: LD_VAR 0 16
51125: PUSH
51126: LD_INT 1
51128: ARRAY
51129: PPUSH
51130: LD_VAR 0 16
51134: PUSH
51135: LD_INT 2
51137: ARRAY
51138: PPUSH
51139: CALL_OW 111
// continue ;
51143: GO 50635
// end ; end ; r := GetDir ( tmp ) ;
51145: LD_ADDR_VAR 0 15
51149: PUSH
51150: LD_VAR 0 13
51154: PPUSH
51155: CALL_OW 254
51159: ST_TO_ADDR
// if r = 5 then
51160: LD_VAR 0 15
51164: PUSH
51165: LD_INT 5
51167: EQUAL
51168: IFFALSE 51178
// r := 0 ;
51170: LD_ADDR_VAR 0 15
51174: PUSH
51175: LD_INT 0
51177: ST_TO_ADDR
// for j = r to 5 do
51178: LD_ADDR_VAR 0 10
51182: PUSH
51183: DOUBLE
51184: LD_VAR 0 15
51188: DEC
51189: ST_TO_ADDR
51190: LD_INT 5
51192: PUSH
51193: FOR_TO
51194: IFFALSE 51308
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51196: LD_ADDR_VAR 0 11
51200: PUSH
51201: LD_VAR 0 13
51205: PPUSH
51206: CALL_OW 250
51210: PPUSH
51211: LD_VAR 0 10
51215: PPUSH
51216: LD_INT 2
51218: PPUSH
51219: CALL_OW 272
51223: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51224: LD_ADDR_VAR 0 12
51228: PUSH
51229: LD_VAR 0 13
51233: PPUSH
51234: CALL_OW 251
51238: PPUSH
51239: LD_VAR 0 10
51243: PPUSH
51244: LD_INT 2
51246: PPUSH
51247: CALL_OW 273
51251: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51252: LD_VAR 0 11
51256: PPUSH
51257: LD_VAR 0 12
51261: PPUSH
51262: CALL_OW 488
51266: PUSH
51267: LD_VAR 0 11
51271: PPUSH
51272: LD_VAR 0 12
51276: PPUSH
51277: CALL_OW 428
51281: NOT
51282: AND
51283: IFFALSE 51306
// begin ComMoveXY ( tmp , _x , _y ) ;
51285: LD_VAR 0 13
51289: PPUSH
51290: LD_VAR 0 11
51294: PPUSH
51295: LD_VAR 0 12
51299: PPUSH
51300: CALL_OW 111
// break ;
51304: GO 51308
// end ; end ;
51306: GO 51193
51308: POP
51309: POP
// end ; end ;
51310: GO 50635
51312: POP
51313: POP
// end ;
51314: LD_VAR 0 8
51318: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51319: LD_INT 0
51321: PPUSH
// result := true ;
51322: LD_ADDR_VAR 0 3
51326: PUSH
51327: LD_INT 1
51329: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51330: LD_VAR 0 2
51334: PUSH
51335: LD_INT 24
51337: DOUBLE
51338: EQUAL
51339: IFTRUE 51349
51341: LD_INT 33
51343: DOUBLE
51344: EQUAL
51345: IFTRUE 51349
51347: GO 51374
51349: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51350: LD_ADDR_VAR 0 3
51354: PUSH
51355: LD_INT 32
51357: PPUSH
51358: LD_VAR 0 1
51362: PPUSH
51363: CALL_OW 321
51367: PUSH
51368: LD_INT 2
51370: EQUAL
51371: ST_TO_ADDR
51372: GO 51694
51374: LD_INT 20
51376: DOUBLE
51377: EQUAL
51378: IFTRUE 51382
51380: GO 51407
51382: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51383: LD_ADDR_VAR 0 3
51387: PUSH
51388: LD_INT 6
51390: PPUSH
51391: LD_VAR 0 1
51395: PPUSH
51396: CALL_OW 321
51400: PUSH
51401: LD_INT 2
51403: EQUAL
51404: ST_TO_ADDR
51405: GO 51694
51407: LD_INT 22
51409: DOUBLE
51410: EQUAL
51411: IFTRUE 51421
51413: LD_INT 36
51415: DOUBLE
51416: EQUAL
51417: IFTRUE 51421
51419: GO 51446
51421: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: LD_INT 15
51429: PPUSH
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 321
51439: PUSH
51440: LD_INT 2
51442: EQUAL
51443: ST_TO_ADDR
51444: GO 51694
51446: LD_INT 30
51448: DOUBLE
51449: EQUAL
51450: IFTRUE 51454
51452: GO 51479
51454: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51455: LD_ADDR_VAR 0 3
51459: PUSH
51460: LD_INT 20
51462: PPUSH
51463: LD_VAR 0 1
51467: PPUSH
51468: CALL_OW 321
51472: PUSH
51473: LD_INT 2
51475: EQUAL
51476: ST_TO_ADDR
51477: GO 51694
51479: LD_INT 28
51481: DOUBLE
51482: EQUAL
51483: IFTRUE 51493
51485: LD_INT 21
51487: DOUBLE
51488: EQUAL
51489: IFTRUE 51493
51491: GO 51518
51493: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51494: LD_ADDR_VAR 0 3
51498: PUSH
51499: LD_INT 21
51501: PPUSH
51502: LD_VAR 0 1
51506: PPUSH
51507: CALL_OW 321
51511: PUSH
51512: LD_INT 2
51514: EQUAL
51515: ST_TO_ADDR
51516: GO 51694
51518: LD_INT 16
51520: DOUBLE
51521: EQUAL
51522: IFTRUE 51526
51524: GO 51553
51526: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51527: LD_ADDR_VAR 0 3
51531: PUSH
51532: LD_EXP 64
51536: PPUSH
51537: LD_VAR 0 1
51541: PPUSH
51542: CALL_OW 321
51546: PUSH
51547: LD_INT 2
51549: EQUAL
51550: ST_TO_ADDR
51551: GO 51694
51553: LD_INT 19
51555: DOUBLE
51556: EQUAL
51557: IFTRUE 51567
51559: LD_INT 23
51561: DOUBLE
51562: EQUAL
51563: IFTRUE 51567
51565: GO 51594
51567: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51568: LD_ADDR_VAR 0 3
51572: PUSH
51573: LD_EXP 63
51577: PPUSH
51578: LD_VAR 0 1
51582: PPUSH
51583: CALL_OW 321
51587: PUSH
51588: LD_INT 2
51590: EQUAL
51591: ST_TO_ADDR
51592: GO 51694
51594: LD_INT 17
51596: DOUBLE
51597: EQUAL
51598: IFTRUE 51602
51600: GO 51627
51602: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51603: LD_ADDR_VAR 0 3
51607: PUSH
51608: LD_INT 39
51610: PPUSH
51611: LD_VAR 0 1
51615: PPUSH
51616: CALL_OW 321
51620: PUSH
51621: LD_INT 2
51623: EQUAL
51624: ST_TO_ADDR
51625: GO 51694
51627: LD_INT 18
51629: DOUBLE
51630: EQUAL
51631: IFTRUE 51635
51633: GO 51660
51635: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51636: LD_ADDR_VAR 0 3
51640: PUSH
51641: LD_INT 40
51643: PPUSH
51644: LD_VAR 0 1
51648: PPUSH
51649: CALL_OW 321
51653: PUSH
51654: LD_INT 2
51656: EQUAL
51657: ST_TO_ADDR
51658: GO 51694
51660: LD_INT 27
51662: DOUBLE
51663: EQUAL
51664: IFTRUE 51668
51666: GO 51693
51668: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51669: LD_ADDR_VAR 0 3
51673: PUSH
51674: LD_INT 35
51676: PPUSH
51677: LD_VAR 0 1
51681: PPUSH
51682: CALL_OW 321
51686: PUSH
51687: LD_INT 2
51689: EQUAL
51690: ST_TO_ADDR
51691: GO 51694
51693: POP
// end ;
51694: LD_VAR 0 3
51698: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51699: LD_INT 0
51701: PPUSH
51702: PPUSH
51703: PPUSH
51704: PPUSH
51705: PPUSH
51706: PPUSH
51707: PPUSH
51708: PPUSH
51709: PPUSH
51710: PPUSH
51711: PPUSH
// result := false ;
51712: LD_ADDR_VAR 0 6
51716: PUSH
51717: LD_INT 0
51719: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51720: LD_VAR 0 1
51724: NOT
51725: PUSH
51726: LD_VAR 0 1
51730: PPUSH
51731: CALL_OW 266
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: IN
51746: NOT
51747: OR
51748: PUSH
51749: LD_VAR 0 2
51753: NOT
51754: OR
51755: PUSH
51756: LD_VAR 0 5
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: LD_INT 4
51775: PUSH
51776: LD_INT 5
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: IN
51787: NOT
51788: OR
51789: PUSH
51790: LD_VAR 0 3
51794: PPUSH
51795: LD_VAR 0 4
51799: PPUSH
51800: CALL_OW 488
51804: NOT
51805: OR
51806: IFFALSE 51810
// exit ;
51808: GO 52546
// side := GetSide ( depot ) ;
51810: LD_ADDR_VAR 0 9
51814: PUSH
51815: LD_VAR 0 1
51819: PPUSH
51820: CALL_OW 255
51824: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51825: LD_VAR 0 9
51829: PPUSH
51830: LD_VAR 0 2
51834: PPUSH
51835: CALL 51319 0 2
51839: NOT
51840: IFFALSE 51844
// exit ;
51842: GO 52546
// pom := GetBase ( depot ) ;
51844: LD_ADDR_VAR 0 10
51848: PUSH
51849: LD_VAR 0 1
51853: PPUSH
51854: CALL_OW 274
51858: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51859: LD_ADDR_VAR 0 11
51863: PUSH
51864: LD_VAR 0 2
51868: PPUSH
51869: LD_VAR 0 1
51873: PPUSH
51874: CALL_OW 248
51878: PPUSH
51879: CALL_OW 450
51883: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51884: LD_VAR 0 10
51888: PPUSH
51889: LD_INT 1
51891: PPUSH
51892: CALL_OW 275
51896: PUSH
51897: LD_VAR 0 11
51901: PUSH
51902: LD_INT 1
51904: ARRAY
51905: GREATEREQUAL
51906: PUSH
51907: LD_VAR 0 10
51911: PPUSH
51912: LD_INT 2
51914: PPUSH
51915: CALL_OW 275
51919: PUSH
51920: LD_VAR 0 11
51924: PUSH
51925: LD_INT 2
51927: ARRAY
51928: GREATEREQUAL
51929: AND
51930: PUSH
51931: LD_VAR 0 10
51935: PPUSH
51936: LD_INT 3
51938: PPUSH
51939: CALL_OW 275
51943: PUSH
51944: LD_VAR 0 11
51948: PUSH
51949: LD_INT 3
51951: ARRAY
51952: GREATEREQUAL
51953: AND
51954: NOT
51955: IFFALSE 51959
// exit ;
51957: GO 52546
// if GetBType ( depot ) = b_depot then
51959: LD_VAR 0 1
51963: PPUSH
51964: CALL_OW 266
51968: PUSH
51969: LD_INT 0
51971: EQUAL
51972: IFFALSE 51984
// dist := 28 else
51974: LD_ADDR_VAR 0 14
51978: PUSH
51979: LD_INT 28
51981: ST_TO_ADDR
51982: GO 51992
// dist := 36 ;
51984: LD_ADDR_VAR 0 14
51988: PUSH
51989: LD_INT 36
51991: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51992: LD_VAR 0 1
51996: PPUSH
51997: LD_VAR 0 3
52001: PPUSH
52002: LD_VAR 0 4
52006: PPUSH
52007: CALL_OW 297
52011: PUSH
52012: LD_VAR 0 14
52016: GREATER
52017: IFFALSE 52021
// exit ;
52019: GO 52546
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52021: LD_ADDR_VAR 0 12
52025: PUSH
52026: LD_VAR 0 2
52030: PPUSH
52031: LD_VAR 0 3
52035: PPUSH
52036: LD_VAR 0 4
52040: PPUSH
52041: LD_VAR 0 5
52045: PPUSH
52046: LD_VAR 0 1
52050: PPUSH
52051: CALL_OW 248
52055: PPUSH
52056: LD_INT 0
52058: PPUSH
52059: CALL 52551 0 6
52063: ST_TO_ADDR
// if not hexes then
52064: LD_VAR 0 12
52068: NOT
52069: IFFALSE 52073
// exit ;
52071: GO 52546
// hex := GetHexInfo ( x , y ) ;
52073: LD_ADDR_VAR 0 15
52077: PUSH
52078: LD_VAR 0 3
52082: PPUSH
52083: LD_VAR 0 4
52087: PPUSH
52088: CALL_OW 546
52092: ST_TO_ADDR
// if hex [ 1 ] then
52093: LD_VAR 0 15
52097: PUSH
52098: LD_INT 1
52100: ARRAY
52101: IFFALSE 52105
// exit ;
52103: GO 52546
// height := hex [ 2 ] ;
52105: LD_ADDR_VAR 0 13
52109: PUSH
52110: LD_VAR 0 15
52114: PUSH
52115: LD_INT 2
52117: ARRAY
52118: ST_TO_ADDR
// for i = 1 to hexes do
52119: LD_ADDR_VAR 0 7
52123: PUSH
52124: DOUBLE
52125: LD_INT 1
52127: DEC
52128: ST_TO_ADDR
52129: LD_VAR 0 12
52133: PUSH
52134: FOR_TO
52135: IFFALSE 52465
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52137: LD_VAR 0 12
52141: PUSH
52142: LD_VAR 0 7
52146: ARRAY
52147: PUSH
52148: LD_INT 1
52150: ARRAY
52151: PPUSH
52152: LD_VAR 0 12
52156: PUSH
52157: LD_VAR 0 7
52161: ARRAY
52162: PUSH
52163: LD_INT 2
52165: ARRAY
52166: PPUSH
52167: CALL_OW 488
52171: NOT
52172: PUSH
52173: LD_VAR 0 12
52177: PUSH
52178: LD_VAR 0 7
52182: ARRAY
52183: PUSH
52184: LD_INT 1
52186: ARRAY
52187: PPUSH
52188: LD_VAR 0 12
52192: PUSH
52193: LD_VAR 0 7
52197: ARRAY
52198: PUSH
52199: LD_INT 2
52201: ARRAY
52202: PPUSH
52203: CALL_OW 428
52207: PUSH
52208: LD_INT 0
52210: GREATER
52211: OR
52212: PUSH
52213: LD_VAR 0 12
52217: PUSH
52218: LD_VAR 0 7
52222: ARRAY
52223: PUSH
52224: LD_INT 1
52226: ARRAY
52227: PPUSH
52228: LD_VAR 0 12
52232: PUSH
52233: LD_VAR 0 7
52237: ARRAY
52238: PUSH
52239: LD_INT 2
52241: ARRAY
52242: PPUSH
52243: CALL_OW 351
52247: OR
52248: IFFALSE 52254
// exit ;
52250: POP
52251: POP
52252: GO 52546
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52254: LD_ADDR_VAR 0 8
52258: PUSH
52259: LD_VAR 0 12
52263: PUSH
52264: LD_VAR 0 7
52268: ARRAY
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: PPUSH
52274: LD_VAR 0 12
52278: PUSH
52279: LD_VAR 0 7
52283: ARRAY
52284: PUSH
52285: LD_INT 2
52287: ARRAY
52288: PPUSH
52289: CALL_OW 546
52293: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52294: LD_VAR 0 8
52298: PUSH
52299: LD_INT 1
52301: ARRAY
52302: PUSH
52303: LD_VAR 0 8
52307: PUSH
52308: LD_INT 2
52310: ARRAY
52311: PUSH
52312: LD_VAR 0 13
52316: PUSH
52317: LD_INT 2
52319: PLUS
52320: GREATER
52321: OR
52322: PUSH
52323: LD_VAR 0 8
52327: PUSH
52328: LD_INT 2
52330: ARRAY
52331: PUSH
52332: LD_VAR 0 13
52336: PUSH
52337: LD_INT 2
52339: MINUS
52340: LESS
52341: OR
52342: PUSH
52343: LD_VAR 0 8
52347: PUSH
52348: LD_INT 3
52350: ARRAY
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 8
52357: PUSH
52358: LD_INT 9
52360: PUSH
52361: LD_INT 10
52363: PUSH
52364: LD_INT 11
52366: PUSH
52367: LD_INT 12
52369: PUSH
52370: LD_INT 13
52372: PUSH
52373: LD_INT 16
52375: PUSH
52376: LD_INT 17
52378: PUSH
52379: LD_INT 18
52381: PUSH
52382: LD_INT 19
52384: PUSH
52385: LD_INT 20
52387: PUSH
52388: LD_INT 21
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: IN
52406: NOT
52407: OR
52408: PUSH
52409: LD_VAR 0 8
52413: PUSH
52414: LD_INT 5
52416: ARRAY
52417: NOT
52418: OR
52419: PUSH
52420: LD_VAR 0 8
52424: PUSH
52425: LD_INT 6
52427: ARRAY
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 7
52437: PUSH
52438: LD_INT 9
52440: PUSH
52441: LD_INT 10
52443: PUSH
52444: LD_INT 11
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: IN
52455: NOT
52456: OR
52457: IFFALSE 52463
// exit ;
52459: POP
52460: POP
52461: GO 52546
// end ;
52463: GO 52134
52465: POP
52466: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52467: LD_VAR 0 9
52471: PPUSH
52472: LD_VAR 0 3
52476: PPUSH
52477: LD_VAR 0 4
52481: PPUSH
52482: LD_INT 20
52484: PPUSH
52485: CALL 44492 0 4
52489: PUSH
52490: LD_INT 4
52492: ARRAY
52493: IFFALSE 52497
// exit ;
52495: GO 52546
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52497: LD_VAR 0 2
52501: PUSH
52502: LD_INT 29
52504: PUSH
52505: LD_INT 30
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: IN
52512: PUSH
52513: LD_VAR 0 3
52517: PPUSH
52518: LD_VAR 0 4
52522: PPUSH
52523: LD_VAR 0 9
52527: PPUSH
52528: CALL_OW 440
52532: NOT
52533: AND
52534: IFFALSE 52538
// exit ;
52536: GO 52546
// result := true ;
52538: LD_ADDR_VAR 0 6
52542: PUSH
52543: LD_INT 1
52545: ST_TO_ADDR
// end ;
52546: LD_VAR 0 6
52550: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52551: LD_INT 0
52553: PPUSH
52554: PPUSH
52555: PPUSH
52556: PPUSH
52557: PPUSH
52558: PPUSH
52559: PPUSH
52560: PPUSH
52561: PPUSH
52562: PPUSH
52563: PPUSH
52564: PPUSH
52565: PPUSH
52566: PPUSH
52567: PPUSH
52568: PPUSH
52569: PPUSH
52570: PPUSH
52571: PPUSH
52572: PPUSH
52573: PPUSH
52574: PPUSH
52575: PPUSH
52576: PPUSH
52577: PPUSH
52578: PPUSH
52579: PPUSH
52580: PPUSH
52581: PPUSH
52582: PPUSH
52583: PPUSH
52584: PPUSH
52585: PPUSH
52586: PPUSH
52587: PPUSH
52588: PPUSH
52589: PPUSH
52590: PPUSH
52591: PPUSH
52592: PPUSH
52593: PPUSH
52594: PPUSH
52595: PPUSH
52596: PPUSH
52597: PPUSH
52598: PPUSH
52599: PPUSH
52600: PPUSH
52601: PPUSH
52602: PPUSH
52603: PPUSH
52604: PPUSH
52605: PPUSH
52606: PPUSH
52607: PPUSH
52608: PPUSH
52609: PPUSH
52610: PPUSH
// result = [ ] ;
52611: LD_ADDR_VAR 0 7
52615: PUSH
52616: EMPTY
52617: ST_TO_ADDR
// temp_list = [ ] ;
52618: LD_ADDR_VAR 0 9
52622: PUSH
52623: EMPTY
52624: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52625: LD_VAR 0 4
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: LD_INT 3
52641: PUSH
52642: LD_INT 4
52644: PUSH
52645: LD_INT 5
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: IN
52656: NOT
52657: PUSH
52658: LD_VAR 0 1
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: IN
52673: PUSH
52674: LD_VAR 0 5
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: IN
52693: NOT
52694: AND
52695: OR
52696: IFFALSE 52700
// exit ;
52698: GO 71091
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52700: LD_VAR 0 1
52704: PUSH
52705: LD_INT 6
52707: PUSH
52708: LD_INT 7
52710: PUSH
52711: LD_INT 8
52713: PUSH
52714: LD_INT 13
52716: PUSH
52717: LD_INT 12
52719: PUSH
52720: LD_INT 15
52722: PUSH
52723: LD_INT 11
52725: PUSH
52726: LD_INT 14
52728: PUSH
52729: LD_INT 10
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: IN
52743: IFFALSE 52753
// btype = b_lab ;
52745: LD_ADDR_VAR 0 1
52749: PUSH
52750: LD_INT 6
52752: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52753: LD_VAR 0 6
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: IN
52772: NOT
52773: PUSH
52774: LD_VAR 0 1
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 3
52790: PUSH
52791: LD_INT 6
52793: PUSH
52794: LD_INT 36
52796: PUSH
52797: LD_INT 4
52799: PUSH
52800: LD_INT 5
52802: PUSH
52803: LD_INT 31
52805: PUSH
52806: LD_INT 32
52808: PUSH
52809: LD_INT 33
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: IN
52825: NOT
52826: PUSH
52827: LD_VAR 0 6
52831: PUSH
52832: LD_INT 1
52834: EQUAL
52835: AND
52836: OR
52837: PUSH
52838: LD_VAR 0 1
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 3
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: IN
52853: NOT
52854: PUSH
52855: LD_VAR 0 6
52859: PUSH
52860: LD_INT 2
52862: EQUAL
52863: AND
52864: OR
52865: IFFALSE 52875
// mode = 0 ;
52867: LD_ADDR_VAR 0 6
52871: PUSH
52872: LD_INT 0
52874: ST_TO_ADDR
// case mode of 0 :
52875: LD_VAR 0 6
52879: PUSH
52880: LD_INT 0
52882: DOUBLE
52883: EQUAL
52884: IFTRUE 52888
52886: GO 64341
52888: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52889: LD_ADDR_VAR 0 11
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 3
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53082: LD_ADDR_VAR 0 12
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53278: LD_ADDR_VAR 0 13
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 3
53449: NEG
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53477: LD_ADDR_VAR 0 14
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53673: LD_ADDR_VAR 0 15
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53866: LD_ADDR_VAR 0 16
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54059: LD_ADDR_VAR 0 17
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54289: LD_ADDR_VAR 0 18
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54519: LD_ADDR_VAR 0 19
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54749: LD_ADDR_VAR 0 20
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54979: LD_ADDR_VAR 0 21
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55209: LD_ADDR_VAR 0 22
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55439: LD_ADDR_VAR 0 23
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: LD_INT 3
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55719: LD_ADDR_VAR 0 24
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55995: LD_ADDR_VAR 0 25
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56269: LD_ADDR_VAR 0 26
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56545: LD_ADDR_VAR 0 27
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56825: LD_ADDR_VAR 0 28
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57107: LD_ADDR_VAR 0 29
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57386: LD_ADDR_VAR 0 30
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57664: LD_ADDR_VAR 0 31
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57942: LD_ADDR_VAR 0 32
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58220: LD_ADDR_VAR 0 33
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 2
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58499: LD_ADDR_VAR 0 34
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 3
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: LD_INT 3
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58779: LD_ADDR_VAR 0 35
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58891: LD_ADDR_VAR 0 36
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59003: LD_ADDR_VAR 0 37
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59115: LD_ADDR_VAR 0 38
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59227: LD_ADDR_VAR 0 39
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59339: LD_ADDR_VAR 0 40
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59451: LD_ADDR_VAR 0 41
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 3
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 3
59725: NEG
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: LD_INT 3
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59801: LD_ADDR_VAR 0 42
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: LD_INT 2
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: LD_INT 3
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 3
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 3
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60151: LD_ADDR_VAR 0 43
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 3
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: NEG
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60499: LD_ADDR_VAR 0 44
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 2
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: LD_INT 2
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: NEG
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60849: LD_ADDR_VAR 0 45
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 3
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 3
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: NEG
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 3
61158: NEG
61159: PUSH
61160: LD_INT 3
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61199: LD_ADDR_VAR 0 46
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 3
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 3
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 3
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: NEG
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61547: LD_ADDR_VAR 0 47
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61698: LD_ADDR_VAR 0 48
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61845: LD_ADDR_VAR 0 49
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61989: LD_ADDR_VAR 0 50
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62133: LD_ADDR_VAR 0 51
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62280: LD_ADDR_VAR 0 52
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: LD_INT 2
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 2
62384: NEG
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62431: LD_ADDR_VAR 0 53
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 2
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: NEG
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62661: LD_ADDR_VAR 0 54
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 2
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 2
62860: NEG
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62891: LD_ADDR_VAR 0 55
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 2
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 2
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63121: LD_ADDR_VAR 0 56
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: LD_INT 2
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: LD_INT 2
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: NEG
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 2
63320: NEG
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63351: LD_ADDR_VAR 0 57
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: LD_INT 2
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 2
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 2
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 2
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: LD_INT 2
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 2
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 2
63527: NEG
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 2
63550: NEG
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63581: LD_ADDR_VAR 0 58
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: NEG
63663: PUSH
63664: LD_INT 2
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 2
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 2
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 2
63757: NEG
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: LD_INT 1
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: LD_INT 2
63784: NEG
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63811: LD_ADDR_VAR 0 59
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63899: LD_ADDR_VAR 0 60
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63987: LD_ADDR_VAR 0 61
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64075: LD_ADDR_VAR 0 62
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: NEG
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64163: LD_ADDR_VAR 0 63
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 1
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64251: LD_ADDR_VAR 0 64
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: ST_TO_ADDR
// end ; 1 :
64339: GO 70236
64341: LD_INT 1
64343: DOUBLE
64344: EQUAL
64345: IFTRUE 64349
64347: GO 66972
64349: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64350: LD_ADDR_VAR 0 11
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: LD_INT 3
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 3
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: LD_INT 2
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: LIST
64393: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64394: LD_ADDR_VAR 0 12
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 3
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 3
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64435: LD_ADDR_VAR 0 13
64439: PUSH
64440: LD_INT 3
64442: PUSH
64443: LD_INT 2
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 3
64452: PUSH
64453: LD_INT 3
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: LD_INT 3
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64475: LD_ADDR_VAR 0 14
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: LD_INT 3
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: LIST
64515: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64516: LD_ADDR_VAR 0 15
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 3
64545: NEG
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64560: LD_ADDR_VAR 0 16
64564: PUSH
64565: LD_INT 2
64567: NEG
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 3
64579: NEG
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 3
64591: NEG
64592: PUSH
64593: LD_INT 3
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64606: LD_ADDR_VAR 0 17
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 3
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 3
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: LD_INT 2
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64650: LD_ADDR_VAR 0 18
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 3
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64691: LD_ADDR_VAR 0 19
64695: PUSH
64696: LD_INT 3
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: LD_INT 3
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 2
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64731: LD_ADDR_VAR 0 20
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: LD_INT 3
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: LD_INT 3
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: NEG
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64772: LD_ADDR_VAR 0 21
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 3
64801: NEG
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64816: LD_ADDR_VAR 0 22
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: LD_INT 3
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 3
64835: NEG
64836: PUSH
64837: LD_INT 2
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 3
64847: NEG
64848: PUSH
64849: LD_INT 3
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64862: LD_ADDR_VAR 0 23
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 3
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: LD_INT 4
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64906: LD_ADDR_VAR 0 24
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: LD_INT 1
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 4
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64947: LD_ADDR_VAR 0 25
64951: PUSH
64952: LD_INT 3
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 4
64964: PUSH
64965: LD_INT 3
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: LD_INT 4
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: LIST
64986: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64987: LD_ADDR_VAR 0 26
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65028: LD_ADDR_VAR 0 27
65032: PUSH
65033: LD_INT 3
65035: NEG
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 3
65046: NEG
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: NEG
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65072: LD_ADDR_VAR 0 28
65076: PUSH
65077: LD_INT 3
65079: NEG
65080: PUSH
65081: LD_INT 3
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: NEG
65092: PUSH
65093: LD_INT 4
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 4
65103: NEG
65104: PUSH
65105: LD_INT 3
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65118: LD_ADDR_VAR 0 29
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: LD_INT 3
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: LD_INT 3
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 4
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: LD_INT 4
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: LD_INT 3
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: LD_INT 5
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: LD_INT 5
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: LD_INT 4
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: LD_INT 6
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: LD_INT 6
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 5
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65273: LD_ADDR_VAR 0 30
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 3
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 3
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 4
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 4
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 4
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 5
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 5
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 5
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 6
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 6
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65416: LD_ADDR_VAR 0 31
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 3
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: LD_INT 3
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 4
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 4
65463: PUSH
65464: LD_INT 4
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 3
65473: PUSH
65474: LD_INT 4
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 5
65483: PUSH
65484: LD_INT 4
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 5
65493: PUSH
65494: LD_INT 5
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 4
65503: PUSH
65504: LD_INT 5
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 6
65513: PUSH
65514: LD_INT 5
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 6
65523: PUSH
65524: LD_INT 6
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 5
65533: PUSH
65534: LD_INT 6
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65555: LD_ADDR_VAR 0 32
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 3
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: LD_INT 4
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: LD_INT 4
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: LD_INT 3
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: LD_INT 5
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 5
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: LD_INT 4
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 6
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 6
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: LD_INT 5
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65698: LD_ADDR_VAR 0 33
65702: PUSH
65703: LD_INT 2
65705: NEG
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: NEG
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: LD_INT 1
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 3
65739: NEG
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 4
65750: NEG
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 4
65761: NEG
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 4
65773: NEG
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 5
65784: NEG
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 5
65795: NEG
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 5
65807: NEG
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 6
65818: NEG
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 6
65829: NEG
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65853: LD_ADDR_VAR 0 34
65857: PUSH
65858: LD_INT 2
65860: NEG
65861: PUSH
65862: LD_INT 3
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 3
65872: NEG
65873: PUSH
65874: LD_INT 2
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 3
65884: NEG
65885: PUSH
65886: LD_INT 3
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: LD_INT 4
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 4
65908: NEG
65909: PUSH
65910: LD_INT 3
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 4
65920: NEG
65921: PUSH
65922: LD_INT 4
65924: NEG
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 4
65932: NEG
65933: PUSH
65934: LD_INT 5
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 5
65944: NEG
65945: PUSH
65946: LD_INT 4
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 5
65956: NEG
65957: PUSH
65958: LD_INT 5
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 5
65968: NEG
65969: PUSH
65970: LD_INT 6
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 6
65980: NEG
65981: PUSH
65982: LD_INT 5
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 6
65992: NEG
65993: PUSH
65994: LD_INT 6
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66016: LD_ADDR_VAR 0 41
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: PUSH
66047: LD_INT 2
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: LIST
66059: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66060: LD_ADDR_VAR 0 42
66064: PUSH
66065: LD_INT 2
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 3
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66101: LD_ADDR_VAR 0 43
66105: PUSH
66106: LD_INT 2
66108: PUSH
66109: LD_INT 2
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 2
66128: PUSH
66129: LD_INT 3
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66141: LD_ADDR_VAR 0 44
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 2
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: LD_INT 3
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: LD_INT 2
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66182: LD_ADDR_VAR 0 45
66186: PUSH
66187: LD_INT 2
66189: NEG
66190: PUSH
66191: LD_INT 0
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 2
66200: NEG
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 3
66211: NEG
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66226: LD_ADDR_VAR 0 46
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 2
66245: NEG
66246: PUSH
66247: LD_INT 3
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 3
66257: NEG
66258: PUSH
66259: LD_INT 2
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: LIST
66271: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66272: LD_ADDR_VAR 0 47
66276: PUSH
66277: LD_INT 2
66279: NEG
66280: PUSH
66281: LD_INT 3
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: NEG
66292: PUSH
66293: LD_INT 3
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66305: LD_ADDR_VAR 0 48
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: LD_INT 2
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: LD_INT 1
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66336: LD_ADDR_VAR 0 49
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 3
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66365: LD_ADDR_VAR 0 50
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: LD_INT 3
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: LD_INT 3
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66394: LD_ADDR_VAR 0 51
66398: PUSH
66399: LD_INT 1
66401: NEG
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 2
66412: NEG
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66425: LD_ADDR_VAR 0 52
66429: PUSH
66430: LD_INT 3
66432: NEG
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 3
66444: NEG
66445: PUSH
66446: LD_INT 2
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66458: LD_ADDR_VAR 0 53
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: LD_INT 3
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 3
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: LIST
66501: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66502: LD_ADDR_VAR 0 54
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: LD_INT 1
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 3
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: LIST
66542: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66543: LD_ADDR_VAR 0 55
66547: PUSH
66548: LD_INT 3
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 3
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 2
66570: PUSH
66571: LD_INT 3
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: LIST
66582: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66583: LD_ADDR_VAR 0 56
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_INT 3
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66624: LD_ADDR_VAR 0 57
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 3
66642: NEG
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 3
66653: NEG
66654: PUSH
66655: LD_INT 1
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66668: LD_ADDR_VAR 0 58
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: LD_INT 3
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 3
66687: NEG
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: NEG
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: LIST
66713: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66714: LD_ADDR_VAR 0 59
66718: PUSH
66719: LD_INT 1
66721: NEG
66722: PUSH
66723: LD_INT 2
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 2
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66758: LD_ADDR_VAR 0 60
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: LD_INT 1
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 2
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 2
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: LIST
66798: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66799: LD_ADDR_VAR 0 61
66803: PUSH
66804: LD_INT 2
66806: PUSH
66807: LD_INT 1
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 2
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66839: LD_ADDR_VAR 0 62
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: LD_INT 2
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: LIST
66879: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66880: LD_ADDR_VAR 0 63
66884: PUSH
66885: LD_INT 1
66887: NEG
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 2
66898: NEG
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 2
66909: NEG
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66924: LD_ADDR_VAR 0 64
66928: PUSH
66929: LD_INT 1
66931: NEG
66932: PUSH
66933: LD_INT 2
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 2
66955: NEG
66956: PUSH
66957: LD_INT 2
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: ST_TO_ADDR
// end ; 2 :
66970: GO 70236
66972: LD_INT 2
66974: DOUBLE
66975: EQUAL
66976: IFTRUE 66980
66978: GO 70235
66980: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66981: LD_ADDR_VAR 0 29
66985: PUSH
66986: LD_INT 4
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 4
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 5
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 5
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 4
67029: PUSH
67030: LD_INT 1
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 3
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 3
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 5
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 3
67081: PUSH
67082: LD_INT 3
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 3
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 4
67101: PUSH
67102: LD_INT 3
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 4
67111: PUSH
67112: LD_INT 4
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 3
67121: PUSH
67122: LD_INT 4
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 2
67141: PUSH
67142: LD_INT 2
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 4
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: LD_INT 4
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: LD_INT 4
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 0
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 1
67191: PUSH
67192: LD_INT 4
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: LD_INT 5
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: LD_INT 5
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: LD_INT 4
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: LD_INT 3
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 2
67243: PUSH
67244: LD_INT 5
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: LD_INT 3
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 2
67287: NEG
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: LD_INT 1
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: NEG
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 4
67320: NEG
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 4
67331: NEG
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 4
67343: NEG
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 2
67355: NEG
67356: PUSH
67357: LD_INT 2
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 4
67366: NEG
67367: PUSH
67368: LD_INT 4
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 4
67378: NEG
67379: PUSH
67380: LD_INT 5
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 3
67390: NEG
67391: PUSH
67392: LD_INT 4
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: LD_INT 3
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 4
67414: NEG
67415: PUSH
67416: LD_INT 3
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 5
67426: NEG
67427: PUSH
67428: LD_INT 4
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 5
67438: NEG
67439: PUSH
67440: LD_INT 5
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: LD_INT 5
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 5
67462: NEG
67463: PUSH
67464: LD_INT 3
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67519: LD_ADDR_VAR 0 30
67523: PUSH
67524: LD_INT 4
67526: PUSH
67527: LD_INT 4
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 4
67536: PUSH
67537: LD_INT 3
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 5
67546: PUSH
67547: LD_INT 4
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 5
67556: PUSH
67557: LD_INT 5
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: LD_INT 5
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: LD_INT 4
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 3
67586: PUSH
67587: LD_INT 3
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 5
67596: PUSH
67597: LD_INT 3
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: PUSH
67607: LD_INT 5
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: LD_INT 3
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 0
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: LD_INT 4
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 0
67656: PUSH
67657: LD_INT 4
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 1
67677: NEG
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: LD_INT 4
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 2
67698: NEG
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 4
67709: NEG
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 4
67720: NEG
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 3
67732: NEG
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: NEG
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 4
67754: NEG
67755: PUSH
67756: LD_INT 1
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 5
67765: NEG
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 5
67776: NEG
67777: PUSH
67778: LD_INT 1
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 5
67788: NEG
67789: PUSH
67790: LD_INT 2
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 3
67800: NEG
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 3
67811: NEG
67812: PUSH
67813: LD_INT 3
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 3
67823: NEG
67824: PUSH
67825: LD_INT 4
67827: NEG
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: LD_INT 3
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 2
67847: NEG
67848: PUSH
67849: LD_INT 2
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 3
67859: NEG
67860: PUSH
67861: LD_INT 2
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 4
67871: NEG
67872: PUSH
67873: LD_INT 3
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 4
67883: NEG
67884: PUSH
67885: LD_INT 4
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 2
67895: NEG
67896: PUSH
67897: LD_INT 4
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 4
67907: NEG
67908: PUSH
67909: LD_INT 2
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: LD_INT 4
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: LD_INT 5
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: LD_INT 4
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 1
67952: PUSH
67953: LD_INT 3
67955: NEG
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 0
67963: PUSH
67964: LD_INT 3
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 1
67974: NEG
67975: PUSH
67976: LD_INT 4
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: PUSH
67988: LD_INT 5
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 2
67998: PUSH
67999: LD_INT 3
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 2
68009: NEG
68010: PUSH
68011: LD_INT 5
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68066: LD_ADDR_VAR 0 31
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 4
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: PUSH
68094: LD_INT 4
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: LD_INT 5
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: LD_INT 5
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 1
68123: NEG
68124: PUSH
68125: LD_INT 4
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 1
68134: NEG
68135: PUSH
68136: LD_INT 3
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: LD_INT 5
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 2
68155: NEG
68156: PUSH
68157: LD_INT 3
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 3
68166: NEG
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 2
68189: NEG
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 3
68211: NEG
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 4
68222: NEG
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 4
68233: NEG
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 4
68245: NEG
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: LD_INT 2
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 4
68268: NEG
68269: PUSH
68270: LD_INT 4
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 4
68280: NEG
68281: PUSH
68282: LD_INT 5
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: NEG
68293: PUSH
68294: LD_INT 4
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 3
68304: NEG
68305: PUSH
68306: LD_INT 3
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 4
68316: NEG
68317: PUSH
68318: LD_INT 3
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 5
68328: NEG
68329: PUSH
68330: LD_INT 4
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 5
68340: NEG
68341: PUSH
68342: LD_INT 5
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 3
68352: NEG
68353: PUSH
68354: LD_INT 5
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 5
68364: NEG
68365: PUSH
68366: LD_INT 3
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: LD_INT 3
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: LD_INT 4
68390: NEG
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 1
68409: PUSH
68410: LD_INT 2
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: LD_INT 2
68423: NEG
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 1
68431: NEG
68432: PUSH
68433: LD_INT 3
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 1
68443: NEG
68444: PUSH
68445: LD_INT 4
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 2
68455: PUSH
68456: LD_INT 2
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 2
68466: NEG
68467: PUSH
68468: LD_INT 4
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 4
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 4
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 5
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 5
68509: PUSH
68510: LD_INT 1
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 3
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 3
68539: PUSH
68540: LD_INT 1
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: LD_INT 2
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 5
68561: PUSH
68562: LD_INT 2
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68616: LD_ADDR_VAR 0 32
68620: PUSH
68621: LD_INT 4
68623: NEG
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 4
68634: NEG
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 3
68646: NEG
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 3
68657: NEG
68658: PUSH
68659: LD_INT 1
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 4
68668: NEG
68669: PUSH
68670: LD_INT 1
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 5
68679: NEG
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 5
68690: NEG
68691: PUSH
68692: LD_INT 1
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 5
68702: NEG
68703: PUSH
68704: LD_INT 2
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 3
68714: NEG
68715: PUSH
68716: LD_INT 2
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 3
68725: NEG
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 3
68737: NEG
68738: PUSH
68739: LD_INT 4
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 2
68761: NEG
68762: PUSH
68763: LD_INT 2
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 3
68773: NEG
68774: PUSH
68775: LD_INT 2
68777: NEG
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 4
68785: NEG
68786: PUSH
68787: LD_INT 3
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 4
68797: NEG
68798: PUSH
68799: LD_INT 4
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 2
68809: NEG
68810: PUSH
68811: LD_INT 4
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 4
68821: NEG
68822: PUSH
68823: LD_INT 2
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: LD_INT 4
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: LD_INT 5
68847: NEG
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 1
68855: PUSH
68856: LD_INT 4
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: LD_INT 3
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: LD_INT 3
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 1
68888: NEG
68889: PUSH
68890: LD_INT 4
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 1
68900: NEG
68901: PUSH
68902: LD_INT 5
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 2
68923: NEG
68924: PUSH
68925: LD_INT 5
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 3
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 4
68956: PUSH
68957: LD_INT 0
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 4
68966: PUSH
68967: LD_INT 1
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 3
68976: PUSH
68977: LD_INT 1
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 2
68996: PUSH
68997: LD_INT 1
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 2
69007: PUSH
69008: LD_INT 2
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 4
69018: PUSH
69019: LD_INT 2
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 4
69028: PUSH
69029: LD_INT 4
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 4
69038: PUSH
69039: LD_INT 3
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 5
69048: PUSH
69049: LD_INT 4
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 5
69058: PUSH
69059: LD_INT 5
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 4
69068: PUSH
69069: LD_INT 5
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 3
69078: PUSH
69079: LD_INT 4
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 3
69088: PUSH
69089: LD_INT 3
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 5
69098: PUSH
69099: LD_INT 3
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 3
69108: PUSH
69109: LD_INT 5
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69163: LD_ADDR_VAR 0 33
69167: PUSH
69168: LD_INT 4
69170: NEG
69171: PUSH
69172: LD_INT 4
69174: NEG
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 4
69182: NEG
69183: PUSH
69184: LD_INT 5
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 3
69194: NEG
69195: PUSH
69196: LD_INT 4
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 3
69206: NEG
69207: PUSH
69208: LD_INT 3
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 4
69218: NEG
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 5
69230: NEG
69231: PUSH
69232: LD_INT 4
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 5
69242: NEG
69243: PUSH
69244: LD_INT 5
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 3
69254: NEG
69255: PUSH
69256: LD_INT 5
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: LD_INT 3
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: LD_INT 3
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: LD_INT 4
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: LD_INT 3
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: LD_INT 2
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: LD_INT 2
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: LD_INT 3
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 1
69345: NEG
69346: PUSH
69347: LD_INT 4
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 2
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 2
69368: NEG
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: LD_INT 0
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: LD_INT 1
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 5
69401: PUSH
69402: LD_INT 0
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 5
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 4
69421: PUSH
69422: LD_INT 1
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: LD_INT 1
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 3
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 5
69463: PUSH
69464: LD_INT 2
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 3
69473: PUSH
69474: LD_INT 3
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 3
69483: PUSH
69484: LD_INT 2
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 4
69493: PUSH
69494: LD_INT 3
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 4
69503: PUSH
69504: LD_INT 4
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 3
69513: PUSH
69514: LD_INT 4
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: LD_INT 3
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: LD_INT 2
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 4
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 2
69553: PUSH
69554: LD_INT 4
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: LD_INT 4
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: LD_INT 3
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 1
69583: PUSH
69584: LD_INT 4
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 1
69593: PUSH
69594: LD_INT 5
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: LD_INT 5
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 1
69613: NEG
69614: PUSH
69615: LD_INT 4
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 1
69624: NEG
69625: PUSH
69626: LD_INT 3
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: LD_INT 5
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 2
69645: NEG
69646: PUSH
69647: LD_INT 3
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69701: LD_ADDR_VAR 0 34
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 4
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 0
69719: PUSH
69720: LD_INT 5
69722: NEG
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 1
69730: PUSH
69731: LD_INT 4
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 1
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 0
69752: PUSH
69753: LD_INT 3
69755: NEG
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 1
69763: NEG
69764: PUSH
69765: LD_INT 4
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 1
69775: NEG
69776: PUSH
69777: LD_INT 5
69779: NEG
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 2
69787: PUSH
69788: LD_INT 3
69790: NEG
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 2
69798: NEG
69799: PUSH
69800: LD_INT 5
69802: NEG
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 3
69810: PUSH
69811: LD_INT 0
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 3
69820: PUSH
69821: LD_INT 1
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 4
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 4
69841: PUSH
69842: LD_INT 1
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 3
69851: PUSH
69852: LD_INT 1
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 2
69861: PUSH
69862: LD_INT 0
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 2
69871: PUSH
69872: LD_INT 1
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: LD_INT 2
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 4
69893: PUSH
69894: LD_INT 2
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 4
69903: PUSH
69904: LD_INT 4
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 4
69913: PUSH
69914: LD_INT 3
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 5
69923: PUSH
69924: LD_INT 4
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 5
69933: PUSH
69934: LD_INT 5
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 4
69943: PUSH
69944: LD_INT 5
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 3
69953: PUSH
69954: LD_INT 4
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 3
69963: PUSH
69964: LD_INT 3
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 5
69973: PUSH
69974: LD_INT 3
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 3
69983: PUSH
69984: LD_INT 5
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: LD_INT 3
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: LD_INT 2
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 1
70013: PUSH
70014: LD_INT 3
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 1
70023: PUSH
70024: LD_INT 4
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 0
70033: PUSH
70034: LD_INT 4
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 1
70043: NEG
70044: PUSH
70045: LD_INT 3
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 1
70054: NEG
70055: PUSH
70056: LD_INT 2
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 2
70065: PUSH
70066: LD_INT 4
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 2
70075: NEG
70076: PUSH
70077: LD_INT 2
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 4
70086: NEG
70087: PUSH
70088: LD_INT 0
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 4
70097: NEG
70098: PUSH
70099: LD_INT 1
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 3
70109: NEG
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 3
70120: NEG
70121: PUSH
70122: LD_INT 1
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 4
70131: NEG
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 5
70142: NEG
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 5
70153: NEG
70154: PUSH
70155: LD_INT 1
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 5
70165: NEG
70166: PUSH
70167: LD_INT 2
70169: NEG
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 3
70177: NEG
70178: PUSH
70179: LD_INT 2
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: ST_TO_ADDR
// end ; end ;
70233: GO 70236
70235: POP
// case btype of b_depot , b_warehouse :
70236: LD_VAR 0 1
70240: PUSH
70241: LD_INT 0
70243: DOUBLE
70244: EQUAL
70245: IFTRUE 70255
70247: LD_INT 1
70249: DOUBLE
70250: EQUAL
70251: IFTRUE 70255
70253: GO 70456
70255: POP
// case nation of nation_american :
70256: LD_VAR 0 5
70260: PUSH
70261: LD_INT 1
70263: DOUBLE
70264: EQUAL
70265: IFTRUE 70269
70267: GO 70325
70269: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70270: LD_ADDR_VAR 0 9
70274: PUSH
70275: LD_VAR 0 11
70279: PUSH
70280: LD_VAR 0 12
70284: PUSH
70285: LD_VAR 0 13
70289: PUSH
70290: LD_VAR 0 14
70294: PUSH
70295: LD_VAR 0 15
70299: PUSH
70300: LD_VAR 0 16
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: PUSH
70313: LD_VAR 0 4
70317: PUSH
70318: LD_INT 1
70320: PLUS
70321: ARRAY
70322: ST_TO_ADDR
70323: GO 70454
70325: LD_INT 2
70327: DOUBLE
70328: EQUAL
70329: IFTRUE 70333
70331: GO 70389
70333: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70334: LD_ADDR_VAR 0 9
70338: PUSH
70339: LD_VAR 0 17
70343: PUSH
70344: LD_VAR 0 18
70348: PUSH
70349: LD_VAR 0 19
70353: PUSH
70354: LD_VAR 0 20
70358: PUSH
70359: LD_VAR 0 21
70363: PUSH
70364: LD_VAR 0 22
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: PUSH
70377: LD_VAR 0 4
70381: PUSH
70382: LD_INT 1
70384: PLUS
70385: ARRAY
70386: ST_TO_ADDR
70387: GO 70454
70389: LD_INT 3
70391: DOUBLE
70392: EQUAL
70393: IFTRUE 70397
70395: GO 70453
70397: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70398: LD_ADDR_VAR 0 9
70402: PUSH
70403: LD_VAR 0 23
70407: PUSH
70408: LD_VAR 0 24
70412: PUSH
70413: LD_VAR 0 25
70417: PUSH
70418: LD_VAR 0 26
70422: PUSH
70423: LD_VAR 0 27
70427: PUSH
70428: LD_VAR 0 28
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: PUSH
70441: LD_VAR 0 4
70445: PUSH
70446: LD_INT 1
70448: PLUS
70449: ARRAY
70450: ST_TO_ADDR
70451: GO 70454
70453: POP
70454: GO 71009
70456: LD_INT 2
70458: DOUBLE
70459: EQUAL
70460: IFTRUE 70470
70462: LD_INT 3
70464: DOUBLE
70465: EQUAL
70466: IFTRUE 70470
70468: GO 70526
70470: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70471: LD_ADDR_VAR 0 9
70475: PUSH
70476: LD_VAR 0 29
70480: PUSH
70481: LD_VAR 0 30
70485: PUSH
70486: LD_VAR 0 31
70490: PUSH
70491: LD_VAR 0 32
70495: PUSH
70496: LD_VAR 0 33
70500: PUSH
70501: LD_VAR 0 34
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: PUSH
70514: LD_VAR 0 4
70518: PUSH
70519: LD_INT 1
70521: PLUS
70522: ARRAY
70523: ST_TO_ADDR
70524: GO 71009
70526: LD_INT 16
70528: DOUBLE
70529: EQUAL
70530: IFTRUE 70588
70532: LD_INT 17
70534: DOUBLE
70535: EQUAL
70536: IFTRUE 70588
70538: LD_INT 18
70540: DOUBLE
70541: EQUAL
70542: IFTRUE 70588
70544: LD_INT 19
70546: DOUBLE
70547: EQUAL
70548: IFTRUE 70588
70550: LD_INT 22
70552: DOUBLE
70553: EQUAL
70554: IFTRUE 70588
70556: LD_INT 20
70558: DOUBLE
70559: EQUAL
70560: IFTRUE 70588
70562: LD_INT 21
70564: DOUBLE
70565: EQUAL
70566: IFTRUE 70588
70568: LD_INT 23
70570: DOUBLE
70571: EQUAL
70572: IFTRUE 70588
70574: LD_INT 24
70576: DOUBLE
70577: EQUAL
70578: IFTRUE 70588
70580: LD_INT 25
70582: DOUBLE
70583: EQUAL
70584: IFTRUE 70588
70586: GO 70644
70588: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70589: LD_ADDR_VAR 0 9
70593: PUSH
70594: LD_VAR 0 35
70598: PUSH
70599: LD_VAR 0 36
70603: PUSH
70604: LD_VAR 0 37
70608: PUSH
70609: LD_VAR 0 38
70613: PUSH
70614: LD_VAR 0 39
70618: PUSH
70619: LD_VAR 0 40
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: PUSH
70632: LD_VAR 0 4
70636: PUSH
70637: LD_INT 1
70639: PLUS
70640: ARRAY
70641: ST_TO_ADDR
70642: GO 71009
70644: LD_INT 6
70646: DOUBLE
70647: EQUAL
70648: IFTRUE 70700
70650: LD_INT 7
70652: DOUBLE
70653: EQUAL
70654: IFTRUE 70700
70656: LD_INT 8
70658: DOUBLE
70659: EQUAL
70660: IFTRUE 70700
70662: LD_INT 13
70664: DOUBLE
70665: EQUAL
70666: IFTRUE 70700
70668: LD_INT 12
70670: DOUBLE
70671: EQUAL
70672: IFTRUE 70700
70674: LD_INT 15
70676: DOUBLE
70677: EQUAL
70678: IFTRUE 70700
70680: LD_INT 11
70682: DOUBLE
70683: EQUAL
70684: IFTRUE 70700
70686: LD_INT 14
70688: DOUBLE
70689: EQUAL
70690: IFTRUE 70700
70692: LD_INT 10
70694: DOUBLE
70695: EQUAL
70696: IFTRUE 70700
70698: GO 70756
70700: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70701: LD_ADDR_VAR 0 9
70705: PUSH
70706: LD_VAR 0 41
70710: PUSH
70711: LD_VAR 0 42
70715: PUSH
70716: LD_VAR 0 43
70720: PUSH
70721: LD_VAR 0 44
70725: PUSH
70726: LD_VAR 0 45
70730: PUSH
70731: LD_VAR 0 46
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: PUSH
70744: LD_VAR 0 4
70748: PUSH
70749: LD_INT 1
70751: PLUS
70752: ARRAY
70753: ST_TO_ADDR
70754: GO 71009
70756: LD_INT 36
70758: DOUBLE
70759: EQUAL
70760: IFTRUE 70764
70762: GO 70820
70764: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70765: LD_ADDR_VAR 0 9
70769: PUSH
70770: LD_VAR 0 47
70774: PUSH
70775: LD_VAR 0 48
70779: PUSH
70780: LD_VAR 0 49
70784: PUSH
70785: LD_VAR 0 50
70789: PUSH
70790: LD_VAR 0 51
70794: PUSH
70795: LD_VAR 0 52
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: PUSH
70808: LD_VAR 0 4
70812: PUSH
70813: LD_INT 1
70815: PLUS
70816: ARRAY
70817: ST_TO_ADDR
70818: GO 71009
70820: LD_INT 4
70822: DOUBLE
70823: EQUAL
70824: IFTRUE 70846
70826: LD_INT 5
70828: DOUBLE
70829: EQUAL
70830: IFTRUE 70846
70832: LD_INT 34
70834: DOUBLE
70835: EQUAL
70836: IFTRUE 70846
70838: LD_INT 37
70840: DOUBLE
70841: EQUAL
70842: IFTRUE 70846
70844: GO 70902
70846: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70847: LD_ADDR_VAR 0 9
70851: PUSH
70852: LD_VAR 0 53
70856: PUSH
70857: LD_VAR 0 54
70861: PUSH
70862: LD_VAR 0 55
70866: PUSH
70867: LD_VAR 0 56
70871: PUSH
70872: LD_VAR 0 57
70876: PUSH
70877: LD_VAR 0 58
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: PUSH
70890: LD_VAR 0 4
70894: PUSH
70895: LD_INT 1
70897: PLUS
70898: ARRAY
70899: ST_TO_ADDR
70900: GO 71009
70902: LD_INT 31
70904: DOUBLE
70905: EQUAL
70906: IFTRUE 70952
70908: LD_INT 32
70910: DOUBLE
70911: EQUAL
70912: IFTRUE 70952
70914: LD_INT 33
70916: DOUBLE
70917: EQUAL
70918: IFTRUE 70952
70920: LD_INT 27
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70952
70926: LD_INT 26
70928: DOUBLE
70929: EQUAL
70930: IFTRUE 70952
70932: LD_INT 28
70934: DOUBLE
70935: EQUAL
70936: IFTRUE 70952
70938: LD_INT 29
70940: DOUBLE
70941: EQUAL
70942: IFTRUE 70952
70944: LD_INT 30
70946: DOUBLE
70947: EQUAL
70948: IFTRUE 70952
70950: GO 71008
70952: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70953: LD_ADDR_VAR 0 9
70957: PUSH
70958: LD_VAR 0 59
70962: PUSH
70963: LD_VAR 0 60
70967: PUSH
70968: LD_VAR 0 61
70972: PUSH
70973: LD_VAR 0 62
70977: PUSH
70978: LD_VAR 0 63
70982: PUSH
70983: LD_VAR 0 64
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: PUSH
70996: LD_VAR 0 4
71000: PUSH
71001: LD_INT 1
71003: PLUS
71004: ARRAY
71005: ST_TO_ADDR
71006: GO 71009
71008: POP
// temp_list2 = [ ] ;
71009: LD_ADDR_VAR 0 10
71013: PUSH
71014: EMPTY
71015: ST_TO_ADDR
// for i in temp_list do
71016: LD_ADDR_VAR 0 8
71020: PUSH
71021: LD_VAR 0 9
71025: PUSH
71026: FOR_IN
71027: IFFALSE 71079
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71029: LD_ADDR_VAR 0 10
71033: PUSH
71034: LD_VAR 0 10
71038: PUSH
71039: LD_VAR 0 8
71043: PUSH
71044: LD_INT 1
71046: ARRAY
71047: PUSH
71048: LD_VAR 0 2
71052: PLUS
71053: PUSH
71054: LD_VAR 0 8
71058: PUSH
71059: LD_INT 2
71061: ARRAY
71062: PUSH
71063: LD_VAR 0 3
71067: PLUS
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: EMPTY
71074: LIST
71075: ADD
71076: ST_TO_ADDR
71077: GO 71026
71079: POP
71080: POP
// result = temp_list2 ;
71081: LD_ADDR_VAR 0 7
71085: PUSH
71086: LD_VAR 0 10
71090: ST_TO_ADDR
// end ;
71091: LD_VAR 0 7
71095: RET
// export function EnemyInRange ( unit , dist ) ; begin
71096: LD_INT 0
71098: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71099: LD_ADDR_VAR 0 3
71103: PUSH
71104: LD_VAR 0 1
71108: PPUSH
71109: CALL_OW 255
71113: PPUSH
71114: LD_VAR 0 1
71118: PPUSH
71119: CALL_OW 250
71123: PPUSH
71124: LD_VAR 0 1
71128: PPUSH
71129: CALL_OW 251
71133: PPUSH
71134: LD_VAR 0 2
71138: PPUSH
71139: CALL 44492 0 4
71143: PUSH
71144: LD_INT 4
71146: ARRAY
71147: ST_TO_ADDR
// end ;
71148: LD_VAR 0 3
71152: RET
// export function PlayerSeeMe ( unit ) ; begin
71153: LD_INT 0
71155: PPUSH
// result := See ( your_side , unit ) ;
71156: LD_ADDR_VAR 0 2
71160: PUSH
71161: LD_OWVAR 2
71165: PPUSH
71166: LD_VAR 0 1
71170: PPUSH
71171: CALL_OW 292
71175: ST_TO_ADDR
// end ;
71176: LD_VAR 0 2
71180: RET
// export function ReverseDir ( unit ) ; begin
71181: LD_INT 0
71183: PPUSH
// if not unit then
71184: LD_VAR 0 1
71188: NOT
71189: IFFALSE 71193
// exit ;
71191: GO 71216
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71193: LD_ADDR_VAR 0 2
71197: PUSH
71198: LD_VAR 0 1
71202: PPUSH
71203: CALL_OW 254
71207: PUSH
71208: LD_INT 3
71210: PLUS
71211: PUSH
71212: LD_INT 6
71214: MOD
71215: ST_TO_ADDR
// end ;
71216: LD_VAR 0 2
71220: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71221: LD_INT 0
71223: PPUSH
71224: PPUSH
71225: PPUSH
71226: PPUSH
71227: PPUSH
// if not hexes then
71228: LD_VAR 0 2
71232: NOT
71233: IFFALSE 71237
// exit ;
71235: GO 71385
// dist := 9999 ;
71237: LD_ADDR_VAR 0 5
71241: PUSH
71242: LD_INT 9999
71244: ST_TO_ADDR
// for i = 1 to hexes do
71245: LD_ADDR_VAR 0 4
71249: PUSH
71250: DOUBLE
71251: LD_INT 1
71253: DEC
71254: ST_TO_ADDR
71255: LD_VAR 0 2
71259: PUSH
71260: FOR_TO
71261: IFFALSE 71373
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71263: LD_VAR 0 1
71267: PPUSH
71268: LD_VAR 0 2
71272: PUSH
71273: LD_VAR 0 4
71277: ARRAY
71278: PUSH
71279: LD_INT 1
71281: ARRAY
71282: PPUSH
71283: LD_VAR 0 2
71287: PUSH
71288: LD_VAR 0 4
71292: ARRAY
71293: PUSH
71294: LD_INT 2
71296: ARRAY
71297: PPUSH
71298: CALL_OW 297
71302: PUSH
71303: LD_VAR 0 5
71307: LESS
71308: IFFALSE 71371
// begin hex := hexes [ i ] ;
71310: LD_ADDR_VAR 0 7
71314: PUSH
71315: LD_VAR 0 2
71319: PUSH
71320: LD_VAR 0 4
71324: ARRAY
71325: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71326: LD_ADDR_VAR 0 5
71330: PUSH
71331: LD_VAR 0 1
71335: PPUSH
71336: LD_VAR 0 2
71340: PUSH
71341: LD_VAR 0 4
71345: ARRAY
71346: PUSH
71347: LD_INT 1
71349: ARRAY
71350: PPUSH
71351: LD_VAR 0 2
71355: PUSH
71356: LD_VAR 0 4
71360: ARRAY
71361: PUSH
71362: LD_INT 2
71364: ARRAY
71365: PPUSH
71366: CALL_OW 297
71370: ST_TO_ADDR
// end ; end ;
71371: GO 71260
71373: POP
71374: POP
// result := hex ;
71375: LD_ADDR_VAR 0 3
71379: PUSH
71380: LD_VAR 0 7
71384: ST_TO_ADDR
// end ;
71385: LD_VAR 0 3
71389: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71390: LD_INT 0
71392: PPUSH
71393: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71394: LD_VAR 0 1
71398: NOT
71399: PUSH
71400: LD_VAR 0 1
71404: PUSH
71405: LD_INT 21
71407: PUSH
71408: LD_INT 2
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 23
71417: PUSH
71418: LD_INT 2
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PPUSH
71429: CALL_OW 69
71433: IN
71434: NOT
71435: OR
71436: IFFALSE 71440
// exit ;
71438: GO 71487
// for i = 1 to 3 do
71440: LD_ADDR_VAR 0 3
71444: PUSH
71445: DOUBLE
71446: LD_INT 1
71448: DEC
71449: ST_TO_ADDR
71450: LD_INT 3
71452: PUSH
71453: FOR_TO
71454: IFFALSE 71485
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71456: LD_VAR 0 1
71460: PPUSH
71461: CALL_OW 250
71465: PPUSH
71466: LD_VAR 0 1
71470: PPUSH
71471: CALL_OW 251
71475: PPUSH
71476: LD_INT 1
71478: PPUSH
71479: CALL_OW 453
71483: GO 71453
71485: POP
71486: POP
// end ;
71487: LD_VAR 0 2
71491: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71492: LD_INT 0
71494: PPUSH
71495: PPUSH
71496: PPUSH
71497: PPUSH
71498: PPUSH
71499: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71500: LD_VAR 0 1
71504: NOT
71505: PUSH
71506: LD_VAR 0 2
71510: NOT
71511: OR
71512: PUSH
71513: LD_VAR 0 1
71517: PPUSH
71518: CALL_OW 314
71522: OR
71523: IFFALSE 71527
// exit ;
71525: GO 71968
// x := GetX ( enemy_unit ) ;
71527: LD_ADDR_VAR 0 7
71531: PUSH
71532: LD_VAR 0 2
71536: PPUSH
71537: CALL_OW 250
71541: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71542: LD_ADDR_VAR 0 8
71546: PUSH
71547: LD_VAR 0 2
71551: PPUSH
71552: CALL_OW 251
71556: ST_TO_ADDR
// if not x or not y then
71557: LD_VAR 0 7
71561: NOT
71562: PUSH
71563: LD_VAR 0 8
71567: NOT
71568: OR
71569: IFFALSE 71573
// exit ;
71571: GO 71968
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71573: LD_ADDR_VAR 0 6
71577: PUSH
71578: LD_VAR 0 7
71582: PPUSH
71583: LD_INT 0
71585: PPUSH
71586: LD_INT 4
71588: PPUSH
71589: CALL_OW 272
71593: PUSH
71594: LD_VAR 0 8
71598: PPUSH
71599: LD_INT 0
71601: PPUSH
71602: LD_INT 4
71604: PPUSH
71605: CALL_OW 273
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_VAR 0 7
71618: PPUSH
71619: LD_INT 1
71621: PPUSH
71622: LD_INT 4
71624: PPUSH
71625: CALL_OW 272
71629: PUSH
71630: LD_VAR 0 8
71634: PPUSH
71635: LD_INT 1
71637: PPUSH
71638: LD_INT 4
71640: PPUSH
71641: CALL_OW 273
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_VAR 0 7
71654: PPUSH
71655: LD_INT 2
71657: PPUSH
71658: LD_INT 4
71660: PPUSH
71661: CALL_OW 272
71665: PUSH
71666: LD_VAR 0 8
71670: PPUSH
71671: LD_INT 2
71673: PPUSH
71674: LD_INT 4
71676: PPUSH
71677: CALL_OW 273
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_VAR 0 7
71690: PPUSH
71691: LD_INT 3
71693: PPUSH
71694: LD_INT 4
71696: PPUSH
71697: CALL_OW 272
71701: PUSH
71702: LD_VAR 0 8
71706: PPUSH
71707: LD_INT 3
71709: PPUSH
71710: LD_INT 4
71712: PPUSH
71713: CALL_OW 273
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_VAR 0 7
71726: PPUSH
71727: LD_INT 4
71729: PPUSH
71730: LD_INT 4
71732: PPUSH
71733: CALL_OW 272
71737: PUSH
71738: LD_VAR 0 8
71742: PPUSH
71743: LD_INT 4
71745: PPUSH
71746: LD_INT 4
71748: PPUSH
71749: CALL_OW 273
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_VAR 0 7
71762: PPUSH
71763: LD_INT 5
71765: PPUSH
71766: LD_INT 4
71768: PPUSH
71769: CALL_OW 272
71773: PUSH
71774: LD_VAR 0 8
71778: PPUSH
71779: LD_INT 5
71781: PPUSH
71782: LD_INT 4
71784: PPUSH
71785: CALL_OW 273
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: ST_TO_ADDR
// for i = tmp downto 1 do
71802: LD_ADDR_VAR 0 4
71806: PUSH
71807: DOUBLE
71808: LD_VAR 0 6
71812: INC
71813: ST_TO_ADDR
71814: LD_INT 1
71816: PUSH
71817: FOR_DOWNTO
71818: IFFALSE 71919
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71820: LD_VAR 0 6
71824: PUSH
71825: LD_VAR 0 4
71829: ARRAY
71830: PUSH
71831: LD_INT 1
71833: ARRAY
71834: PPUSH
71835: LD_VAR 0 6
71839: PUSH
71840: LD_VAR 0 4
71844: ARRAY
71845: PUSH
71846: LD_INT 2
71848: ARRAY
71849: PPUSH
71850: CALL_OW 488
71854: NOT
71855: PUSH
71856: LD_VAR 0 6
71860: PUSH
71861: LD_VAR 0 4
71865: ARRAY
71866: PUSH
71867: LD_INT 1
71869: ARRAY
71870: PPUSH
71871: LD_VAR 0 6
71875: PUSH
71876: LD_VAR 0 4
71880: ARRAY
71881: PUSH
71882: LD_INT 2
71884: ARRAY
71885: PPUSH
71886: CALL_OW 428
71890: PUSH
71891: LD_INT 0
71893: NONEQUAL
71894: OR
71895: IFFALSE 71917
// tmp := Delete ( tmp , i ) ;
71897: LD_ADDR_VAR 0 6
71901: PUSH
71902: LD_VAR 0 6
71906: PPUSH
71907: LD_VAR 0 4
71911: PPUSH
71912: CALL_OW 3
71916: ST_TO_ADDR
71917: GO 71817
71919: POP
71920: POP
// j := GetClosestHex ( unit , tmp ) ;
71921: LD_ADDR_VAR 0 5
71925: PUSH
71926: LD_VAR 0 1
71930: PPUSH
71931: LD_VAR 0 6
71935: PPUSH
71936: CALL 71221 0 2
71940: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71941: LD_VAR 0 1
71945: PPUSH
71946: LD_VAR 0 5
71950: PUSH
71951: LD_INT 1
71953: ARRAY
71954: PPUSH
71955: LD_VAR 0 5
71959: PUSH
71960: LD_INT 2
71962: ARRAY
71963: PPUSH
71964: CALL_OW 111
// end ;
71968: LD_VAR 0 3
71972: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71973: LD_INT 0
71975: PPUSH
71976: PPUSH
71977: PPUSH
// uc_side = 0 ;
71978: LD_ADDR_OWVAR 20
71982: PUSH
71983: LD_INT 0
71985: ST_TO_ADDR
// uc_nation = 0 ;
71986: LD_ADDR_OWVAR 21
71990: PUSH
71991: LD_INT 0
71993: ST_TO_ADDR
// InitHc_All ( ) ;
71994: CALL_OW 584
// InitVc ;
71998: CALL_OW 20
// if mastodonts then
72002: LD_VAR 0 6
72006: IFFALSE 72073
// for i = 1 to mastodonts do
72008: LD_ADDR_VAR 0 11
72012: PUSH
72013: DOUBLE
72014: LD_INT 1
72016: DEC
72017: ST_TO_ADDR
72018: LD_VAR 0 6
72022: PUSH
72023: FOR_TO
72024: IFFALSE 72071
// begin vc_chassis := 31 ;
72026: LD_ADDR_OWVAR 37
72030: PUSH
72031: LD_INT 31
72033: ST_TO_ADDR
// vc_control := control_rider ;
72034: LD_ADDR_OWVAR 38
72038: PUSH
72039: LD_INT 4
72041: ST_TO_ADDR
// animal := CreateVehicle ;
72042: LD_ADDR_VAR 0 12
72046: PUSH
72047: CALL_OW 45
72051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72052: LD_VAR 0 12
72056: PPUSH
72057: LD_VAR 0 8
72061: PPUSH
72062: LD_INT 0
72064: PPUSH
72065: CALL 74261 0 3
// end ;
72069: GO 72023
72071: POP
72072: POP
// if horses then
72073: LD_VAR 0 5
72077: IFFALSE 72144
// for i = 1 to horses do
72079: LD_ADDR_VAR 0 11
72083: PUSH
72084: DOUBLE
72085: LD_INT 1
72087: DEC
72088: ST_TO_ADDR
72089: LD_VAR 0 5
72093: PUSH
72094: FOR_TO
72095: IFFALSE 72142
// begin hc_class := 21 ;
72097: LD_ADDR_OWVAR 28
72101: PUSH
72102: LD_INT 21
72104: ST_TO_ADDR
// hc_gallery :=  ;
72105: LD_ADDR_OWVAR 33
72109: PUSH
72110: LD_STRING 
72112: ST_TO_ADDR
// animal := CreateHuman ;
72113: LD_ADDR_VAR 0 12
72117: PUSH
72118: CALL_OW 44
72122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72123: LD_VAR 0 12
72127: PPUSH
72128: LD_VAR 0 8
72132: PPUSH
72133: LD_INT 0
72135: PPUSH
72136: CALL 74261 0 3
// end ;
72140: GO 72094
72142: POP
72143: POP
// if birds then
72144: LD_VAR 0 1
72148: IFFALSE 72215
// for i = 1 to birds do
72150: LD_ADDR_VAR 0 11
72154: PUSH
72155: DOUBLE
72156: LD_INT 1
72158: DEC
72159: ST_TO_ADDR
72160: LD_VAR 0 1
72164: PUSH
72165: FOR_TO
72166: IFFALSE 72213
// begin hc_class = 18 ;
72168: LD_ADDR_OWVAR 28
72172: PUSH
72173: LD_INT 18
72175: ST_TO_ADDR
// hc_gallery =  ;
72176: LD_ADDR_OWVAR 33
72180: PUSH
72181: LD_STRING 
72183: ST_TO_ADDR
// animal := CreateHuman ;
72184: LD_ADDR_VAR 0 12
72188: PUSH
72189: CALL_OW 44
72193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72194: LD_VAR 0 12
72198: PPUSH
72199: LD_VAR 0 8
72203: PPUSH
72204: LD_INT 0
72206: PPUSH
72207: CALL 74261 0 3
// end ;
72211: GO 72165
72213: POP
72214: POP
// if tigers then
72215: LD_VAR 0 2
72219: IFFALSE 72303
// for i = 1 to tigers do
72221: LD_ADDR_VAR 0 11
72225: PUSH
72226: DOUBLE
72227: LD_INT 1
72229: DEC
72230: ST_TO_ADDR
72231: LD_VAR 0 2
72235: PUSH
72236: FOR_TO
72237: IFFALSE 72301
// begin hc_class = class_tiger ;
72239: LD_ADDR_OWVAR 28
72243: PUSH
72244: LD_INT 14
72246: ST_TO_ADDR
// hc_gallery =  ;
72247: LD_ADDR_OWVAR 33
72251: PUSH
72252: LD_STRING 
72254: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72255: LD_ADDR_OWVAR 35
72259: PUSH
72260: LD_INT 7
72262: NEG
72263: PPUSH
72264: LD_INT 7
72266: PPUSH
72267: CALL_OW 12
72271: ST_TO_ADDR
// animal := CreateHuman ;
72272: LD_ADDR_VAR 0 12
72276: PUSH
72277: CALL_OW 44
72281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72282: LD_VAR 0 12
72286: PPUSH
72287: LD_VAR 0 8
72291: PPUSH
72292: LD_INT 0
72294: PPUSH
72295: CALL 74261 0 3
// end ;
72299: GO 72236
72301: POP
72302: POP
// if apemans then
72303: LD_VAR 0 3
72307: IFFALSE 72430
// for i = 1 to apemans do
72309: LD_ADDR_VAR 0 11
72313: PUSH
72314: DOUBLE
72315: LD_INT 1
72317: DEC
72318: ST_TO_ADDR
72319: LD_VAR 0 3
72323: PUSH
72324: FOR_TO
72325: IFFALSE 72428
// begin hc_class = class_apeman ;
72327: LD_ADDR_OWVAR 28
72331: PUSH
72332: LD_INT 12
72334: ST_TO_ADDR
// hc_gallery =  ;
72335: LD_ADDR_OWVAR 33
72339: PUSH
72340: LD_STRING 
72342: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72343: LD_ADDR_OWVAR 35
72347: PUSH
72348: LD_INT 2
72350: NEG
72351: PPUSH
72352: LD_INT 2
72354: PPUSH
72355: CALL_OW 12
72359: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72360: LD_ADDR_OWVAR 31
72364: PUSH
72365: LD_INT 1
72367: PPUSH
72368: LD_INT 3
72370: PPUSH
72371: CALL_OW 12
72375: PUSH
72376: LD_INT 1
72378: PPUSH
72379: LD_INT 3
72381: PPUSH
72382: CALL_OW 12
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: LD_INT 0
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: ST_TO_ADDR
// animal := CreateHuman ;
72399: LD_ADDR_VAR 0 12
72403: PUSH
72404: CALL_OW 44
72408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72409: LD_VAR 0 12
72413: PPUSH
72414: LD_VAR 0 8
72418: PPUSH
72419: LD_INT 0
72421: PPUSH
72422: CALL 74261 0 3
// end ;
72426: GO 72324
72428: POP
72429: POP
// if enchidnas then
72430: LD_VAR 0 4
72434: IFFALSE 72501
// for i = 1 to enchidnas do
72436: LD_ADDR_VAR 0 11
72440: PUSH
72441: DOUBLE
72442: LD_INT 1
72444: DEC
72445: ST_TO_ADDR
72446: LD_VAR 0 4
72450: PUSH
72451: FOR_TO
72452: IFFALSE 72499
// begin hc_class = 13 ;
72454: LD_ADDR_OWVAR 28
72458: PUSH
72459: LD_INT 13
72461: ST_TO_ADDR
// hc_gallery =  ;
72462: LD_ADDR_OWVAR 33
72466: PUSH
72467: LD_STRING 
72469: ST_TO_ADDR
// animal := CreateHuman ;
72470: LD_ADDR_VAR 0 12
72474: PUSH
72475: CALL_OW 44
72479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72480: LD_VAR 0 12
72484: PPUSH
72485: LD_VAR 0 8
72489: PPUSH
72490: LD_INT 0
72492: PPUSH
72493: CALL 74261 0 3
// end ;
72497: GO 72451
72499: POP
72500: POP
// if fishes then
72501: LD_VAR 0 7
72505: IFFALSE 72572
// for i = 1 to fishes do
72507: LD_ADDR_VAR 0 11
72511: PUSH
72512: DOUBLE
72513: LD_INT 1
72515: DEC
72516: ST_TO_ADDR
72517: LD_VAR 0 7
72521: PUSH
72522: FOR_TO
72523: IFFALSE 72570
// begin hc_class = 20 ;
72525: LD_ADDR_OWVAR 28
72529: PUSH
72530: LD_INT 20
72532: ST_TO_ADDR
// hc_gallery =  ;
72533: LD_ADDR_OWVAR 33
72537: PUSH
72538: LD_STRING 
72540: ST_TO_ADDR
// animal := CreateHuman ;
72541: LD_ADDR_VAR 0 12
72545: PUSH
72546: CALL_OW 44
72550: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72551: LD_VAR 0 12
72555: PPUSH
72556: LD_VAR 0 9
72560: PPUSH
72561: LD_INT 0
72563: PPUSH
72564: CALL 74261 0 3
// end ;
72568: GO 72522
72570: POP
72571: POP
// end ;
72572: LD_VAR 0 10
72576: RET
// export function WantHeal ( sci , unit ) ; begin
72577: LD_INT 0
72579: PPUSH
// if GetTaskList ( sci ) > 0 then
72580: LD_VAR 0 1
72584: PPUSH
72585: CALL_OW 437
72589: PUSH
72590: LD_INT 0
72592: GREATER
72593: IFFALSE 72663
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72595: LD_VAR 0 1
72599: PPUSH
72600: CALL_OW 437
72604: PUSH
72605: LD_INT 1
72607: ARRAY
72608: PUSH
72609: LD_INT 1
72611: ARRAY
72612: PUSH
72613: LD_STRING l
72615: EQUAL
72616: PUSH
72617: LD_VAR 0 1
72621: PPUSH
72622: CALL_OW 437
72626: PUSH
72627: LD_INT 1
72629: ARRAY
72630: PUSH
72631: LD_INT 4
72633: ARRAY
72634: PUSH
72635: LD_VAR 0 2
72639: EQUAL
72640: AND
72641: IFFALSE 72653
// result := true else
72643: LD_ADDR_VAR 0 3
72647: PUSH
72648: LD_INT 1
72650: ST_TO_ADDR
72651: GO 72661
// result := false ;
72653: LD_ADDR_VAR 0 3
72657: PUSH
72658: LD_INT 0
72660: ST_TO_ADDR
// end else
72661: GO 72671
// result := false ;
72663: LD_ADDR_VAR 0 3
72667: PUSH
72668: LD_INT 0
72670: ST_TO_ADDR
// end ;
72671: LD_VAR 0 3
72675: RET
// export function HealTarget ( sci ) ; begin
72676: LD_INT 0
72678: PPUSH
// if not sci then
72679: LD_VAR 0 1
72683: NOT
72684: IFFALSE 72688
// exit ;
72686: GO 72753
// result := 0 ;
72688: LD_ADDR_VAR 0 2
72692: PUSH
72693: LD_INT 0
72695: ST_TO_ADDR
// if GetTaskList ( sci ) then
72696: LD_VAR 0 1
72700: PPUSH
72701: CALL_OW 437
72705: IFFALSE 72753
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72707: LD_VAR 0 1
72711: PPUSH
72712: CALL_OW 437
72716: PUSH
72717: LD_INT 1
72719: ARRAY
72720: PUSH
72721: LD_INT 1
72723: ARRAY
72724: PUSH
72725: LD_STRING l
72727: EQUAL
72728: IFFALSE 72753
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72730: LD_ADDR_VAR 0 2
72734: PUSH
72735: LD_VAR 0 1
72739: PPUSH
72740: CALL_OW 437
72744: PUSH
72745: LD_INT 1
72747: ARRAY
72748: PUSH
72749: LD_INT 4
72751: ARRAY
72752: ST_TO_ADDR
// end ;
72753: LD_VAR 0 2
72757: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72758: LD_INT 0
72760: PPUSH
72761: PPUSH
72762: PPUSH
72763: PPUSH
// if not base_units then
72764: LD_VAR 0 1
72768: NOT
72769: IFFALSE 72773
// exit ;
72771: GO 72860
// result := false ;
72773: LD_ADDR_VAR 0 2
72777: PUSH
72778: LD_INT 0
72780: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72781: LD_ADDR_VAR 0 5
72785: PUSH
72786: LD_VAR 0 1
72790: PPUSH
72791: LD_INT 21
72793: PUSH
72794: LD_INT 3
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PPUSH
72801: CALL_OW 72
72805: ST_TO_ADDR
// if not tmp then
72806: LD_VAR 0 5
72810: NOT
72811: IFFALSE 72815
// exit ;
72813: GO 72860
// for i in tmp do
72815: LD_ADDR_VAR 0 3
72819: PUSH
72820: LD_VAR 0 5
72824: PUSH
72825: FOR_IN
72826: IFFALSE 72858
// begin result := EnemyInRange ( i , 22 ) ;
72828: LD_ADDR_VAR 0 2
72832: PUSH
72833: LD_VAR 0 3
72837: PPUSH
72838: LD_INT 22
72840: PPUSH
72841: CALL 71096 0 2
72845: ST_TO_ADDR
// if result then
72846: LD_VAR 0 2
72850: IFFALSE 72856
// exit ;
72852: POP
72853: POP
72854: GO 72860
// end ;
72856: GO 72825
72858: POP
72859: POP
// end ;
72860: LD_VAR 0 2
72864: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72865: LD_INT 0
72867: PPUSH
72868: PPUSH
// if not units then
72869: LD_VAR 0 1
72873: NOT
72874: IFFALSE 72878
// exit ;
72876: GO 72948
// result := [ ] ;
72878: LD_ADDR_VAR 0 3
72882: PUSH
72883: EMPTY
72884: ST_TO_ADDR
// for i in units do
72885: LD_ADDR_VAR 0 4
72889: PUSH
72890: LD_VAR 0 1
72894: PUSH
72895: FOR_IN
72896: IFFALSE 72946
// if GetTag ( i ) = tag then
72898: LD_VAR 0 4
72902: PPUSH
72903: CALL_OW 110
72907: PUSH
72908: LD_VAR 0 2
72912: EQUAL
72913: IFFALSE 72944
// result := Replace ( result , result + 1 , i ) ;
72915: LD_ADDR_VAR 0 3
72919: PUSH
72920: LD_VAR 0 3
72924: PPUSH
72925: LD_VAR 0 3
72929: PUSH
72930: LD_INT 1
72932: PLUS
72933: PPUSH
72934: LD_VAR 0 4
72938: PPUSH
72939: CALL_OW 1
72943: ST_TO_ADDR
72944: GO 72895
72946: POP
72947: POP
// end ;
72948: LD_VAR 0 3
72952: RET
// export function IsDriver ( un ) ; begin
72953: LD_INT 0
72955: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72956: LD_ADDR_VAR 0 2
72960: PUSH
72961: LD_VAR 0 1
72965: PUSH
72966: LD_INT 55
72968: PUSH
72969: EMPTY
72970: LIST
72971: PPUSH
72972: CALL_OW 69
72976: IN
72977: ST_TO_ADDR
// end ;
72978: LD_VAR 0 2
72982: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72983: LD_INT 0
72985: PPUSH
72986: PPUSH
// list := [ ] ;
72987: LD_ADDR_VAR 0 5
72991: PUSH
72992: EMPTY
72993: ST_TO_ADDR
// case d of 0 :
72994: LD_VAR 0 3
72998: PUSH
72999: LD_INT 0
73001: DOUBLE
73002: EQUAL
73003: IFTRUE 73007
73005: GO 73140
73007: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73008: LD_ADDR_VAR 0 5
73012: PUSH
73013: LD_VAR 0 1
73017: PUSH
73018: LD_INT 4
73020: MINUS
73021: PUSH
73022: LD_VAR 0 2
73026: PUSH
73027: LD_INT 4
73029: MINUS
73030: PUSH
73031: LD_INT 2
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: LIST
73038: PUSH
73039: LD_VAR 0 1
73043: PUSH
73044: LD_INT 3
73046: MINUS
73047: PUSH
73048: LD_VAR 0 2
73052: PUSH
73053: LD_INT 1
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: LIST
73060: PUSH
73061: LD_VAR 0 1
73065: PUSH
73066: LD_INT 4
73068: PLUS
73069: PUSH
73070: LD_VAR 0 2
73074: PUSH
73075: LD_INT 4
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: LIST
73082: PUSH
73083: LD_VAR 0 1
73087: PUSH
73088: LD_INT 3
73090: PLUS
73091: PUSH
73092: LD_VAR 0 2
73096: PUSH
73097: LD_INT 3
73099: PLUS
73100: PUSH
73101: LD_INT 5
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: LIST
73108: PUSH
73109: LD_VAR 0 1
73113: PUSH
73114: LD_VAR 0 2
73118: PUSH
73119: LD_INT 4
73121: PLUS
73122: PUSH
73123: LD_INT 0
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: LIST
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: ST_TO_ADDR
// end ; 1 :
73138: GO 73838
73140: LD_INT 1
73142: DOUBLE
73143: EQUAL
73144: IFTRUE 73148
73146: GO 73281
73148: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73149: LD_ADDR_VAR 0 5
73153: PUSH
73154: LD_VAR 0 1
73158: PUSH
73159: LD_VAR 0 2
73163: PUSH
73164: LD_INT 4
73166: MINUS
73167: PUSH
73168: LD_INT 3
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: LIST
73175: PUSH
73176: LD_VAR 0 1
73180: PUSH
73181: LD_INT 3
73183: MINUS
73184: PUSH
73185: LD_VAR 0 2
73189: PUSH
73190: LD_INT 3
73192: MINUS
73193: PUSH
73194: LD_INT 2
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: LIST
73201: PUSH
73202: LD_VAR 0 1
73206: PUSH
73207: LD_INT 4
73209: MINUS
73210: PUSH
73211: LD_VAR 0 2
73215: PUSH
73216: LD_INT 1
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: LIST
73223: PUSH
73224: LD_VAR 0 1
73228: PUSH
73229: LD_VAR 0 2
73233: PUSH
73234: LD_INT 3
73236: PLUS
73237: PUSH
73238: LD_INT 0
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: LIST
73245: PUSH
73246: LD_VAR 0 1
73250: PUSH
73251: LD_INT 4
73253: PLUS
73254: PUSH
73255: LD_VAR 0 2
73259: PUSH
73260: LD_INT 4
73262: PLUS
73263: PUSH
73264: LD_INT 5
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: LIST
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: ST_TO_ADDR
// end ; 2 :
73279: GO 73838
73281: LD_INT 2
73283: DOUBLE
73284: EQUAL
73285: IFTRUE 73289
73287: GO 73418
73289: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73290: LD_ADDR_VAR 0 5
73294: PUSH
73295: LD_VAR 0 1
73299: PUSH
73300: LD_VAR 0 2
73304: PUSH
73305: LD_INT 3
73307: MINUS
73308: PUSH
73309: LD_INT 3
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: LIST
73316: PUSH
73317: LD_VAR 0 1
73321: PUSH
73322: LD_INT 4
73324: PLUS
73325: PUSH
73326: LD_VAR 0 2
73330: PUSH
73331: LD_INT 4
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: LIST
73338: PUSH
73339: LD_VAR 0 1
73343: PUSH
73344: LD_VAR 0 2
73348: PUSH
73349: LD_INT 4
73351: PLUS
73352: PUSH
73353: LD_INT 0
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: LIST
73360: PUSH
73361: LD_VAR 0 1
73365: PUSH
73366: LD_INT 3
73368: MINUS
73369: PUSH
73370: LD_VAR 0 2
73374: PUSH
73375: LD_INT 1
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: LIST
73382: PUSH
73383: LD_VAR 0 1
73387: PUSH
73388: LD_INT 4
73390: MINUS
73391: PUSH
73392: LD_VAR 0 2
73396: PUSH
73397: LD_INT 4
73399: MINUS
73400: PUSH
73401: LD_INT 2
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: LIST
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: ST_TO_ADDR
// end ; 3 :
73416: GO 73838
73418: LD_INT 3
73420: DOUBLE
73421: EQUAL
73422: IFTRUE 73426
73424: GO 73559
73426: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73427: LD_ADDR_VAR 0 5
73431: PUSH
73432: LD_VAR 0 1
73436: PUSH
73437: LD_INT 3
73439: PLUS
73440: PUSH
73441: LD_VAR 0 2
73445: PUSH
73446: LD_INT 4
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: LIST
73453: PUSH
73454: LD_VAR 0 1
73458: PUSH
73459: LD_INT 4
73461: PLUS
73462: PUSH
73463: LD_VAR 0 2
73467: PUSH
73468: LD_INT 4
73470: PLUS
73471: PUSH
73472: LD_INT 5
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: LIST
73479: PUSH
73480: LD_VAR 0 1
73484: PUSH
73485: LD_INT 4
73487: MINUS
73488: PUSH
73489: LD_VAR 0 2
73493: PUSH
73494: LD_INT 1
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: LIST
73501: PUSH
73502: LD_VAR 0 1
73506: PUSH
73507: LD_VAR 0 2
73511: PUSH
73512: LD_INT 4
73514: MINUS
73515: PUSH
73516: LD_INT 3
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: LIST
73523: PUSH
73524: LD_VAR 0 1
73528: PUSH
73529: LD_INT 3
73531: MINUS
73532: PUSH
73533: LD_VAR 0 2
73537: PUSH
73538: LD_INT 3
73540: MINUS
73541: PUSH
73542: LD_INT 2
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: LIST
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: ST_TO_ADDR
// end ; 4 :
73557: GO 73838
73559: LD_INT 4
73561: DOUBLE
73562: EQUAL
73563: IFTRUE 73567
73565: GO 73700
73567: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73568: LD_ADDR_VAR 0 5
73572: PUSH
73573: LD_VAR 0 1
73577: PUSH
73578: LD_VAR 0 2
73582: PUSH
73583: LD_INT 4
73585: PLUS
73586: PUSH
73587: LD_INT 0
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: LIST
73594: PUSH
73595: LD_VAR 0 1
73599: PUSH
73600: LD_INT 3
73602: PLUS
73603: PUSH
73604: LD_VAR 0 2
73608: PUSH
73609: LD_INT 3
73611: PLUS
73612: PUSH
73613: LD_INT 5
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: LIST
73620: PUSH
73621: LD_VAR 0 1
73625: PUSH
73626: LD_INT 4
73628: PLUS
73629: PUSH
73630: LD_VAR 0 2
73634: PUSH
73635: LD_INT 4
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: LIST
73642: PUSH
73643: LD_VAR 0 1
73647: PUSH
73648: LD_VAR 0 2
73652: PUSH
73653: LD_INT 3
73655: MINUS
73656: PUSH
73657: LD_INT 3
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: LIST
73664: PUSH
73665: LD_VAR 0 1
73669: PUSH
73670: LD_INT 4
73672: MINUS
73673: PUSH
73674: LD_VAR 0 2
73678: PUSH
73679: LD_INT 4
73681: MINUS
73682: PUSH
73683: LD_INT 2
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: ST_TO_ADDR
// end ; 5 :
73698: GO 73838
73700: LD_INT 5
73702: DOUBLE
73703: EQUAL
73704: IFTRUE 73708
73706: GO 73837
73708: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73709: LD_ADDR_VAR 0 5
73713: PUSH
73714: LD_VAR 0 1
73718: PUSH
73719: LD_INT 4
73721: MINUS
73722: PUSH
73723: LD_VAR 0 2
73727: PUSH
73728: LD_INT 1
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: LIST
73735: PUSH
73736: LD_VAR 0 1
73740: PUSH
73741: LD_VAR 0 2
73745: PUSH
73746: LD_INT 4
73748: MINUS
73749: PUSH
73750: LD_INT 3
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: LIST
73757: PUSH
73758: LD_VAR 0 1
73762: PUSH
73763: LD_INT 4
73765: PLUS
73766: PUSH
73767: LD_VAR 0 2
73771: PUSH
73772: LD_INT 4
73774: PLUS
73775: PUSH
73776: LD_INT 5
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: LIST
73783: PUSH
73784: LD_VAR 0 1
73788: PUSH
73789: LD_INT 3
73791: PLUS
73792: PUSH
73793: LD_VAR 0 2
73797: PUSH
73798: LD_INT 4
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: LIST
73805: PUSH
73806: LD_VAR 0 1
73810: PUSH
73811: LD_VAR 0 2
73815: PUSH
73816: LD_INT 3
73818: PLUS
73819: PUSH
73820: LD_INT 0
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: LIST
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: ST_TO_ADDR
// end ; end ;
73835: GO 73838
73837: POP
// result := list ;
73838: LD_ADDR_VAR 0 4
73842: PUSH
73843: LD_VAR 0 5
73847: ST_TO_ADDR
// end ;
73848: LD_VAR 0 4
73852: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73853: LD_INT 0
73855: PPUSH
73856: PPUSH
73857: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73858: LD_VAR 0 1
73862: NOT
73863: PUSH
73864: LD_VAR 0 2
73868: PUSH
73869: LD_INT 1
73871: PUSH
73872: LD_INT 2
73874: PUSH
73875: LD_INT 3
73877: PUSH
73878: LD_INT 4
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: IN
73887: NOT
73888: OR
73889: IFFALSE 73893
// exit ;
73891: GO 73985
// tmp := [ ] ;
73893: LD_ADDR_VAR 0 5
73897: PUSH
73898: EMPTY
73899: ST_TO_ADDR
// for i in units do
73900: LD_ADDR_VAR 0 4
73904: PUSH
73905: LD_VAR 0 1
73909: PUSH
73910: FOR_IN
73911: IFFALSE 73954
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73913: LD_ADDR_VAR 0 5
73917: PUSH
73918: LD_VAR 0 5
73922: PPUSH
73923: LD_VAR 0 5
73927: PUSH
73928: LD_INT 1
73930: PLUS
73931: PPUSH
73932: LD_VAR 0 4
73936: PPUSH
73937: LD_VAR 0 2
73941: PPUSH
73942: CALL_OW 259
73946: PPUSH
73947: CALL_OW 2
73951: ST_TO_ADDR
73952: GO 73910
73954: POP
73955: POP
// if not tmp then
73956: LD_VAR 0 5
73960: NOT
73961: IFFALSE 73965
// exit ;
73963: GO 73985
// result := SortListByListDesc ( units , tmp ) ;
73965: LD_ADDR_VAR 0 3
73969: PUSH
73970: LD_VAR 0 1
73974: PPUSH
73975: LD_VAR 0 5
73979: PPUSH
73980: CALL_OW 77
73984: ST_TO_ADDR
// end ;
73985: LD_VAR 0 3
73989: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73990: LD_INT 0
73992: PPUSH
73993: PPUSH
73994: PPUSH
// result := false ;
73995: LD_ADDR_VAR 0 3
73999: PUSH
74000: LD_INT 0
74002: ST_TO_ADDR
// x := GetX ( building ) ;
74003: LD_ADDR_VAR 0 4
74007: PUSH
74008: LD_VAR 0 2
74012: PPUSH
74013: CALL_OW 250
74017: ST_TO_ADDR
// y := GetY ( building ) ;
74018: LD_ADDR_VAR 0 5
74022: PUSH
74023: LD_VAR 0 2
74027: PPUSH
74028: CALL_OW 251
74032: ST_TO_ADDR
// if not building or not x or not y then
74033: LD_VAR 0 2
74037: NOT
74038: PUSH
74039: LD_VAR 0 4
74043: NOT
74044: OR
74045: PUSH
74046: LD_VAR 0 5
74050: NOT
74051: OR
74052: IFFALSE 74056
// exit ;
74054: GO 74148
// if GetTaskList ( unit ) then
74056: LD_VAR 0 1
74060: PPUSH
74061: CALL_OW 437
74065: IFFALSE 74148
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74067: LD_STRING e
74069: PUSH
74070: LD_VAR 0 1
74074: PPUSH
74075: CALL_OW 437
74079: PUSH
74080: LD_INT 1
74082: ARRAY
74083: PUSH
74084: LD_INT 1
74086: ARRAY
74087: EQUAL
74088: PUSH
74089: LD_VAR 0 4
74093: PUSH
74094: LD_VAR 0 1
74098: PPUSH
74099: CALL_OW 437
74103: PUSH
74104: LD_INT 1
74106: ARRAY
74107: PUSH
74108: LD_INT 2
74110: ARRAY
74111: EQUAL
74112: AND
74113: PUSH
74114: LD_VAR 0 5
74118: PUSH
74119: LD_VAR 0 1
74123: PPUSH
74124: CALL_OW 437
74128: PUSH
74129: LD_INT 1
74131: ARRAY
74132: PUSH
74133: LD_INT 3
74135: ARRAY
74136: EQUAL
74137: AND
74138: IFFALSE 74148
// result := true end ;
74140: LD_ADDR_VAR 0 3
74144: PUSH
74145: LD_INT 1
74147: ST_TO_ADDR
// end ;
74148: LD_VAR 0 3
74152: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74153: LD_INT 0
74155: PPUSH
// result := false ;
74156: LD_ADDR_VAR 0 4
74160: PUSH
74161: LD_INT 0
74163: ST_TO_ADDR
// if GetTaskList ( unit ) then
74164: LD_VAR 0 1
74168: PPUSH
74169: CALL_OW 437
74173: IFFALSE 74256
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74175: LD_STRING M
74177: PUSH
74178: LD_VAR 0 1
74182: PPUSH
74183: CALL_OW 437
74187: PUSH
74188: LD_INT 1
74190: ARRAY
74191: PUSH
74192: LD_INT 1
74194: ARRAY
74195: EQUAL
74196: PUSH
74197: LD_VAR 0 2
74201: PUSH
74202: LD_VAR 0 1
74206: PPUSH
74207: CALL_OW 437
74211: PUSH
74212: LD_INT 1
74214: ARRAY
74215: PUSH
74216: LD_INT 2
74218: ARRAY
74219: EQUAL
74220: AND
74221: PUSH
74222: LD_VAR 0 3
74226: PUSH
74227: LD_VAR 0 1
74231: PPUSH
74232: CALL_OW 437
74236: PUSH
74237: LD_INT 1
74239: ARRAY
74240: PUSH
74241: LD_INT 3
74243: ARRAY
74244: EQUAL
74245: AND
74246: IFFALSE 74256
// result := true ;
74248: LD_ADDR_VAR 0 4
74252: PUSH
74253: LD_INT 1
74255: ST_TO_ADDR
// end ; end ;
74256: LD_VAR 0 4
74260: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74261: LD_INT 0
74263: PPUSH
74264: PPUSH
74265: PPUSH
74266: PPUSH
// if not unit or not area then
74267: LD_VAR 0 1
74271: NOT
74272: PUSH
74273: LD_VAR 0 2
74277: NOT
74278: OR
74279: IFFALSE 74283
// exit ;
74281: GO 74447
// tmp := AreaToList ( area , i ) ;
74283: LD_ADDR_VAR 0 6
74287: PUSH
74288: LD_VAR 0 2
74292: PPUSH
74293: LD_VAR 0 5
74297: PPUSH
74298: CALL_OW 517
74302: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74303: LD_ADDR_VAR 0 5
74307: PUSH
74308: DOUBLE
74309: LD_INT 1
74311: DEC
74312: ST_TO_ADDR
74313: LD_VAR 0 6
74317: PUSH
74318: LD_INT 1
74320: ARRAY
74321: PUSH
74322: FOR_TO
74323: IFFALSE 74445
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74325: LD_ADDR_VAR 0 7
74329: PUSH
74330: LD_VAR 0 6
74334: PUSH
74335: LD_INT 1
74337: ARRAY
74338: PUSH
74339: LD_VAR 0 5
74343: ARRAY
74344: PUSH
74345: LD_VAR 0 6
74349: PUSH
74350: LD_INT 2
74352: ARRAY
74353: PUSH
74354: LD_VAR 0 5
74358: ARRAY
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74364: LD_VAR 0 7
74368: PUSH
74369: LD_INT 1
74371: ARRAY
74372: PPUSH
74373: LD_VAR 0 7
74377: PUSH
74378: LD_INT 2
74380: ARRAY
74381: PPUSH
74382: CALL_OW 428
74386: PUSH
74387: LD_INT 0
74389: EQUAL
74390: IFFALSE 74443
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74392: LD_VAR 0 1
74396: PPUSH
74397: LD_VAR 0 7
74401: PUSH
74402: LD_INT 1
74404: ARRAY
74405: PPUSH
74406: LD_VAR 0 7
74410: PUSH
74411: LD_INT 2
74413: ARRAY
74414: PPUSH
74415: LD_VAR 0 3
74419: PPUSH
74420: CALL_OW 48
// result := IsPlaced ( unit ) ;
74424: LD_ADDR_VAR 0 4
74428: PUSH
74429: LD_VAR 0 1
74433: PPUSH
74434: CALL_OW 305
74438: ST_TO_ADDR
// exit ;
74439: POP
74440: POP
74441: GO 74447
// end ; end ;
74443: GO 74322
74445: POP
74446: POP
// end ;
74447: LD_VAR 0 4
74451: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74452: LD_INT 0
74454: PPUSH
74455: PPUSH
74456: PPUSH
// if not side or side > 8 then
74457: LD_VAR 0 1
74461: NOT
74462: PUSH
74463: LD_VAR 0 1
74467: PUSH
74468: LD_INT 8
74470: GREATER
74471: OR
74472: IFFALSE 74476
// exit ;
74474: GO 74663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74476: LD_ADDR_VAR 0 4
74480: PUSH
74481: LD_INT 22
74483: PUSH
74484: LD_VAR 0 1
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: PUSH
74493: LD_INT 21
74495: PUSH
74496: LD_INT 3
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PPUSH
74507: CALL_OW 69
74511: ST_TO_ADDR
// if not tmp then
74512: LD_VAR 0 4
74516: NOT
74517: IFFALSE 74521
// exit ;
74519: GO 74663
// enable_addtolog := true ;
74521: LD_ADDR_OWVAR 81
74525: PUSH
74526: LD_INT 1
74528: ST_TO_ADDR
// AddToLog ( [ ) ;
74529: LD_STRING [
74531: PPUSH
74532: CALL_OW 561
// for i in tmp do
74536: LD_ADDR_VAR 0 3
74540: PUSH
74541: LD_VAR 0 4
74545: PUSH
74546: FOR_IN
74547: IFFALSE 74654
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74549: LD_STRING [
74551: PUSH
74552: LD_VAR 0 3
74556: PPUSH
74557: CALL_OW 266
74561: STR
74562: PUSH
74563: LD_STRING , 
74565: STR
74566: PUSH
74567: LD_VAR 0 3
74571: PPUSH
74572: CALL_OW 250
74576: STR
74577: PUSH
74578: LD_STRING , 
74580: STR
74581: PUSH
74582: LD_VAR 0 3
74586: PPUSH
74587: CALL_OW 251
74591: STR
74592: PUSH
74593: LD_STRING , 
74595: STR
74596: PUSH
74597: LD_VAR 0 3
74601: PPUSH
74602: CALL_OW 254
74606: STR
74607: PUSH
74608: LD_STRING , 
74610: STR
74611: PUSH
74612: LD_VAR 0 3
74616: PPUSH
74617: LD_INT 1
74619: PPUSH
74620: CALL_OW 268
74624: STR
74625: PUSH
74626: LD_STRING , 
74628: STR
74629: PUSH
74630: LD_VAR 0 3
74634: PPUSH
74635: LD_INT 2
74637: PPUSH
74638: CALL_OW 268
74642: STR
74643: PUSH
74644: LD_STRING ],
74646: STR
74647: PPUSH
74648: CALL_OW 561
// end ;
74652: GO 74546
74654: POP
74655: POP
// AddToLog ( ]; ) ;
74656: LD_STRING ];
74658: PPUSH
74659: CALL_OW 561
// end ;
74663: LD_VAR 0 2
74667: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74668: LD_INT 0
74670: PPUSH
74671: PPUSH
74672: PPUSH
74673: PPUSH
74674: PPUSH
// if not area or not rate or not max then
74675: LD_VAR 0 1
74679: NOT
74680: PUSH
74681: LD_VAR 0 2
74685: NOT
74686: OR
74687: PUSH
74688: LD_VAR 0 4
74692: NOT
74693: OR
74694: IFFALSE 74698
// exit ;
74696: GO 74890
// while 1 do
74698: LD_INT 1
74700: IFFALSE 74890
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74702: LD_ADDR_VAR 0 9
74706: PUSH
74707: LD_VAR 0 1
74711: PPUSH
74712: LD_INT 1
74714: PPUSH
74715: CALL_OW 287
74719: PUSH
74720: LD_INT 10
74722: MUL
74723: ST_TO_ADDR
// r := rate / 10 ;
74724: LD_ADDR_VAR 0 7
74728: PUSH
74729: LD_VAR 0 2
74733: PUSH
74734: LD_INT 10
74736: DIVREAL
74737: ST_TO_ADDR
// time := 1 1$00 ;
74738: LD_ADDR_VAR 0 8
74742: PUSH
74743: LD_INT 2100
74745: ST_TO_ADDR
// if amount < min then
74746: LD_VAR 0 9
74750: PUSH
74751: LD_VAR 0 3
74755: LESS
74756: IFFALSE 74774
// r := r * 2 else
74758: LD_ADDR_VAR 0 7
74762: PUSH
74763: LD_VAR 0 7
74767: PUSH
74768: LD_INT 2
74770: MUL
74771: ST_TO_ADDR
74772: GO 74800
// if amount > max then
74774: LD_VAR 0 9
74778: PUSH
74779: LD_VAR 0 4
74783: GREATER
74784: IFFALSE 74800
// r := r / 2 ;
74786: LD_ADDR_VAR 0 7
74790: PUSH
74791: LD_VAR 0 7
74795: PUSH
74796: LD_INT 2
74798: DIVREAL
74799: ST_TO_ADDR
// time := time / r ;
74800: LD_ADDR_VAR 0 8
74804: PUSH
74805: LD_VAR 0 8
74809: PUSH
74810: LD_VAR 0 7
74814: DIVREAL
74815: ST_TO_ADDR
// if time < 0 then
74816: LD_VAR 0 8
74820: PUSH
74821: LD_INT 0
74823: LESS
74824: IFFALSE 74841
// time := time * - 1 ;
74826: LD_ADDR_VAR 0 8
74830: PUSH
74831: LD_VAR 0 8
74835: PUSH
74836: LD_INT 1
74838: NEG
74839: MUL
74840: ST_TO_ADDR
// wait ( time ) ;
74841: LD_VAR 0 8
74845: PPUSH
74846: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74850: LD_INT 35
74852: PPUSH
74853: LD_INT 875
74855: PPUSH
74856: CALL_OW 12
74860: PPUSH
74861: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74865: LD_INT 1
74867: PPUSH
74868: LD_INT 5
74870: PPUSH
74871: CALL_OW 12
74875: PPUSH
74876: LD_VAR 0 1
74880: PPUSH
74881: LD_INT 1
74883: PPUSH
74884: CALL_OW 55
// end ;
74888: GO 74698
// end ;
74890: LD_VAR 0 5
74894: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74895: LD_INT 0
74897: PPUSH
74898: PPUSH
74899: PPUSH
74900: PPUSH
74901: PPUSH
74902: PPUSH
74903: PPUSH
74904: PPUSH
// if not turrets or not factories then
74905: LD_VAR 0 1
74909: NOT
74910: PUSH
74911: LD_VAR 0 2
74915: NOT
74916: OR
74917: IFFALSE 74921
// exit ;
74919: GO 75228
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74921: LD_ADDR_VAR 0 10
74925: PUSH
74926: LD_INT 5
74928: PUSH
74929: LD_INT 6
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PUSH
74936: LD_INT 2
74938: PUSH
74939: LD_INT 4
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 3
74948: PUSH
74949: LD_INT 5
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: LIST
74960: PUSH
74961: LD_INT 24
74963: PUSH
74964: LD_INT 25
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: PUSH
74971: LD_INT 23
74973: PUSH
74974: LD_INT 27
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 42
74987: PUSH
74988: LD_INT 43
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 44
74997: PUSH
74998: LD_INT 46
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 45
75007: PUSH
75008: LD_INT 47
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: LIST
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: LIST
75024: ST_TO_ADDR
// result := [ ] ;
75025: LD_ADDR_VAR 0 3
75029: PUSH
75030: EMPTY
75031: ST_TO_ADDR
// for i in turrets do
75032: LD_ADDR_VAR 0 4
75036: PUSH
75037: LD_VAR 0 1
75041: PUSH
75042: FOR_IN
75043: IFFALSE 75226
// begin nat := GetNation ( i ) ;
75045: LD_ADDR_VAR 0 7
75049: PUSH
75050: LD_VAR 0 4
75054: PPUSH
75055: CALL_OW 248
75059: ST_TO_ADDR
// weapon := 0 ;
75060: LD_ADDR_VAR 0 8
75064: PUSH
75065: LD_INT 0
75067: ST_TO_ADDR
// if not nat then
75068: LD_VAR 0 7
75072: NOT
75073: IFFALSE 75077
// continue ;
75075: GO 75042
// for j in list [ nat ] do
75077: LD_ADDR_VAR 0 5
75081: PUSH
75082: LD_VAR 0 10
75086: PUSH
75087: LD_VAR 0 7
75091: ARRAY
75092: PUSH
75093: FOR_IN
75094: IFFALSE 75135
// if GetBWeapon ( i ) = j [ 1 ] then
75096: LD_VAR 0 4
75100: PPUSH
75101: CALL_OW 269
75105: PUSH
75106: LD_VAR 0 5
75110: PUSH
75111: LD_INT 1
75113: ARRAY
75114: EQUAL
75115: IFFALSE 75133
// begin weapon := j [ 2 ] ;
75117: LD_ADDR_VAR 0 8
75121: PUSH
75122: LD_VAR 0 5
75126: PUSH
75127: LD_INT 2
75129: ARRAY
75130: ST_TO_ADDR
// break ;
75131: GO 75135
// end ;
75133: GO 75093
75135: POP
75136: POP
// if not weapon then
75137: LD_VAR 0 8
75141: NOT
75142: IFFALSE 75146
// continue ;
75144: GO 75042
// for k in factories do
75146: LD_ADDR_VAR 0 6
75150: PUSH
75151: LD_VAR 0 2
75155: PUSH
75156: FOR_IN
75157: IFFALSE 75222
// begin weapons := AvailableWeaponList ( k ) ;
75159: LD_ADDR_VAR 0 9
75163: PUSH
75164: LD_VAR 0 6
75168: PPUSH
75169: CALL_OW 478
75173: ST_TO_ADDR
// if not weapons then
75174: LD_VAR 0 9
75178: NOT
75179: IFFALSE 75183
// continue ;
75181: GO 75156
// if weapon in weapons then
75183: LD_VAR 0 8
75187: PUSH
75188: LD_VAR 0 9
75192: IN
75193: IFFALSE 75220
// begin result := [ i , weapon ] ;
75195: LD_ADDR_VAR 0 3
75199: PUSH
75200: LD_VAR 0 4
75204: PUSH
75205: LD_VAR 0 8
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: ST_TO_ADDR
// exit ;
75214: POP
75215: POP
75216: POP
75217: POP
75218: GO 75228
// end ; end ;
75220: GO 75156
75222: POP
75223: POP
// end ;
75224: GO 75042
75226: POP
75227: POP
// end ;
75228: LD_VAR 0 3
75232: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75233: LD_INT 0
75235: PPUSH
// if not side or side > 8 then
75236: LD_VAR 0 3
75240: NOT
75241: PUSH
75242: LD_VAR 0 3
75246: PUSH
75247: LD_INT 8
75249: GREATER
75250: OR
75251: IFFALSE 75255
// exit ;
75253: GO 75314
// if not range then
75255: LD_VAR 0 4
75259: NOT
75260: IFFALSE 75271
// range := - 12 ;
75262: LD_ADDR_VAR 0 4
75266: PUSH
75267: LD_INT 12
75269: NEG
75270: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75271: LD_VAR 0 1
75275: PPUSH
75276: LD_VAR 0 2
75280: PPUSH
75281: LD_VAR 0 3
75285: PPUSH
75286: LD_VAR 0 4
75290: PPUSH
75291: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75295: LD_VAR 0 1
75299: PPUSH
75300: LD_VAR 0 2
75304: PPUSH
75305: LD_VAR 0 3
75309: PPUSH
75310: CALL_OW 331
// end ;
75314: LD_VAR 0 5
75318: RET
// export function Video ( mode ) ; begin
75319: LD_INT 0
75321: PPUSH
// ingame_video = mode ;
75322: LD_ADDR_OWVAR 52
75326: PUSH
75327: LD_VAR 0 1
75331: ST_TO_ADDR
// interface_hidden = mode ;
75332: LD_ADDR_OWVAR 54
75336: PUSH
75337: LD_VAR 0 1
75341: ST_TO_ADDR
// end ;
75342: LD_VAR 0 2
75346: RET
// export function Join ( array , element ) ; begin
75347: LD_INT 0
75349: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75350: LD_ADDR_VAR 0 3
75354: PUSH
75355: LD_VAR 0 1
75359: PPUSH
75360: LD_VAR 0 1
75364: PUSH
75365: LD_INT 1
75367: PLUS
75368: PPUSH
75369: LD_VAR 0 2
75373: PPUSH
75374: CALL_OW 1
75378: ST_TO_ADDR
// end ;
75379: LD_VAR 0 3
75383: RET
// export function JoinUnion ( array , element ) ; begin
75384: LD_INT 0
75386: PPUSH
// result := array union element ;
75387: LD_ADDR_VAR 0 3
75391: PUSH
75392: LD_VAR 0 1
75396: PUSH
75397: LD_VAR 0 2
75401: UNION
75402: ST_TO_ADDR
// end ;
75403: LD_VAR 0 3
75407: RET
// export function GetBehemoths ( side ) ; begin
75408: LD_INT 0
75410: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75411: LD_ADDR_VAR 0 2
75415: PUSH
75416: LD_INT 22
75418: PUSH
75419: LD_VAR 0 1
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: PUSH
75428: LD_INT 31
75430: PUSH
75431: LD_INT 25
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PPUSH
75442: CALL_OW 69
75446: ST_TO_ADDR
// end ;
75447: LD_VAR 0 2
75451: RET
// export function Shuffle ( array ) ; var i , index ; begin
75452: LD_INT 0
75454: PPUSH
75455: PPUSH
75456: PPUSH
// result := [ ] ;
75457: LD_ADDR_VAR 0 2
75461: PUSH
75462: EMPTY
75463: ST_TO_ADDR
// if not array then
75464: LD_VAR 0 1
75468: NOT
75469: IFFALSE 75473
// exit ;
75471: GO 75572
// Randomize ;
75473: CALL_OW 10
// for i = array downto 1 do
75477: LD_ADDR_VAR 0 3
75481: PUSH
75482: DOUBLE
75483: LD_VAR 0 1
75487: INC
75488: ST_TO_ADDR
75489: LD_INT 1
75491: PUSH
75492: FOR_DOWNTO
75493: IFFALSE 75570
// begin index := rand ( 1 , array ) ;
75495: LD_ADDR_VAR 0 4
75499: PUSH
75500: LD_INT 1
75502: PPUSH
75503: LD_VAR 0 1
75507: PPUSH
75508: CALL_OW 12
75512: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75513: LD_ADDR_VAR 0 2
75517: PUSH
75518: LD_VAR 0 2
75522: PPUSH
75523: LD_VAR 0 2
75527: PUSH
75528: LD_INT 1
75530: PLUS
75531: PPUSH
75532: LD_VAR 0 1
75536: PUSH
75537: LD_VAR 0 4
75541: ARRAY
75542: PPUSH
75543: CALL_OW 2
75547: ST_TO_ADDR
// array := Delete ( array , index ) ;
75548: LD_ADDR_VAR 0 1
75552: PUSH
75553: LD_VAR 0 1
75557: PPUSH
75558: LD_VAR 0 4
75562: PPUSH
75563: CALL_OW 3
75567: ST_TO_ADDR
// end ;
75568: GO 75492
75570: POP
75571: POP
// end ;
75572: LD_VAR 0 2
75576: RET
// export function GetBaseMaterials ( base ) ; begin
75577: LD_INT 0
75579: PPUSH
// result := [ 0 , 0 , 0 ] ;
75580: LD_ADDR_VAR 0 2
75584: PUSH
75585: LD_INT 0
75587: PUSH
75588: LD_INT 0
75590: PUSH
75591: LD_INT 0
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: LIST
75598: ST_TO_ADDR
// if not base then
75599: LD_VAR 0 1
75603: NOT
75604: IFFALSE 75608
// exit ;
75606: GO 75657
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75608: LD_ADDR_VAR 0 2
75612: PUSH
75613: LD_VAR 0 1
75617: PPUSH
75618: LD_INT 1
75620: PPUSH
75621: CALL_OW 275
75625: PUSH
75626: LD_VAR 0 1
75630: PPUSH
75631: LD_INT 2
75633: PPUSH
75634: CALL_OW 275
75638: PUSH
75639: LD_VAR 0 1
75643: PPUSH
75644: LD_INT 3
75646: PPUSH
75647: CALL_OW 275
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: LIST
75656: ST_TO_ADDR
// end ;
75657: LD_VAR 0 2
75661: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75662: LD_INT 0
75664: PPUSH
75665: PPUSH
// result := array ;
75666: LD_ADDR_VAR 0 3
75670: PUSH
75671: LD_VAR 0 1
75675: ST_TO_ADDR
// if size > 0 then
75676: LD_VAR 0 2
75680: PUSH
75681: LD_INT 0
75683: GREATER
75684: IFFALSE 75730
// for i := array downto size do
75686: LD_ADDR_VAR 0 4
75690: PUSH
75691: DOUBLE
75692: LD_VAR 0 1
75696: INC
75697: ST_TO_ADDR
75698: LD_VAR 0 2
75702: PUSH
75703: FOR_DOWNTO
75704: IFFALSE 75728
// result := Delete ( result , result ) ;
75706: LD_ADDR_VAR 0 3
75710: PUSH
75711: LD_VAR 0 3
75715: PPUSH
75716: LD_VAR 0 3
75720: PPUSH
75721: CALL_OW 3
75725: ST_TO_ADDR
75726: GO 75703
75728: POP
75729: POP
// end ;
75730: LD_VAR 0 3
75734: RET
// export function ComExit ( unit ) ; var tmp ; begin
75735: LD_INT 0
75737: PPUSH
75738: PPUSH
// if not IsInUnit ( unit ) then
75739: LD_VAR 0 1
75743: PPUSH
75744: CALL_OW 310
75748: NOT
75749: IFFALSE 75753
// exit ;
75751: GO 75813
// tmp := IsInUnit ( unit ) ;
75753: LD_ADDR_VAR 0 3
75757: PUSH
75758: LD_VAR 0 1
75762: PPUSH
75763: CALL_OW 310
75767: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75768: LD_VAR 0 3
75772: PPUSH
75773: CALL_OW 247
75777: PUSH
75778: LD_INT 2
75780: EQUAL
75781: IFFALSE 75794
// ComExitVehicle ( unit ) else
75783: LD_VAR 0 1
75787: PPUSH
75788: CALL_OW 121
75792: GO 75803
// ComExitBuilding ( unit ) ;
75794: LD_VAR 0 1
75798: PPUSH
75799: CALL_OW 122
// result := tmp ;
75803: LD_ADDR_VAR 0 2
75807: PUSH
75808: LD_VAR 0 3
75812: ST_TO_ADDR
// end ;
75813: LD_VAR 0 2
75817: RET
// export function ComExitAll ( units ) ; var i ; begin
75818: LD_INT 0
75820: PPUSH
75821: PPUSH
// if not units then
75822: LD_VAR 0 1
75826: NOT
75827: IFFALSE 75831
// exit ;
75829: GO 75857
// for i in units do
75831: LD_ADDR_VAR 0 3
75835: PUSH
75836: LD_VAR 0 1
75840: PUSH
75841: FOR_IN
75842: IFFALSE 75855
// ComExit ( i ) ;
75844: LD_VAR 0 3
75848: PPUSH
75849: CALL 75735 0 1
75853: GO 75841
75855: POP
75856: POP
// end ;
75857: LD_VAR 0 2
75861: RET
// export function ResetHc ; begin
75862: LD_INT 0
75864: PPUSH
// InitHc ;
75865: CALL_OW 19
// hc_importance := 0 ;
75869: LD_ADDR_OWVAR 32
75873: PUSH
75874: LD_INT 0
75876: ST_TO_ADDR
// end ;
75877: LD_VAR 0 1
75881: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75882: LD_INT 0
75884: PPUSH
75885: PPUSH
75886: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75887: LD_ADDR_VAR 0 6
75891: PUSH
75892: LD_VAR 0 1
75896: PUSH
75897: LD_VAR 0 3
75901: PLUS
75902: PUSH
75903: LD_INT 2
75905: DIV
75906: ST_TO_ADDR
// if _x < 0 then
75907: LD_VAR 0 6
75911: PUSH
75912: LD_INT 0
75914: LESS
75915: IFFALSE 75932
// _x := _x * - 1 ;
75917: LD_ADDR_VAR 0 6
75921: PUSH
75922: LD_VAR 0 6
75926: PUSH
75927: LD_INT 1
75929: NEG
75930: MUL
75931: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75932: LD_ADDR_VAR 0 7
75936: PUSH
75937: LD_VAR 0 2
75941: PUSH
75942: LD_VAR 0 4
75946: PLUS
75947: PUSH
75948: LD_INT 2
75950: DIV
75951: ST_TO_ADDR
// if _y < 0 then
75952: LD_VAR 0 7
75956: PUSH
75957: LD_INT 0
75959: LESS
75960: IFFALSE 75977
// _y := _y * - 1 ;
75962: LD_ADDR_VAR 0 7
75966: PUSH
75967: LD_VAR 0 7
75971: PUSH
75972: LD_INT 1
75974: NEG
75975: MUL
75976: ST_TO_ADDR
// result := [ _x , _y ] ;
75977: LD_ADDR_VAR 0 5
75981: PUSH
75982: LD_VAR 0 6
75986: PUSH
75987: LD_VAR 0 7
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: ST_TO_ADDR
// end ;
75996: LD_VAR 0 5
76000: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76001: LD_INT 0
76003: PPUSH
76004: PPUSH
76005: PPUSH
76006: PPUSH
// task := GetTaskList ( unit ) ;
76007: LD_ADDR_VAR 0 7
76011: PUSH
76012: LD_VAR 0 1
76016: PPUSH
76017: CALL_OW 437
76021: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76022: LD_VAR 0 7
76026: NOT
76027: PUSH
76028: LD_VAR 0 1
76032: PPUSH
76033: LD_VAR 0 2
76037: PPUSH
76038: CALL_OW 308
76042: NOT
76043: AND
76044: IFFALSE 76048
// exit ;
76046: GO 76166
// if IsInArea ( unit , area ) then
76048: LD_VAR 0 1
76052: PPUSH
76053: LD_VAR 0 2
76057: PPUSH
76058: CALL_OW 308
76062: IFFALSE 76080
// begin ComMoveToArea ( unit , goAway ) ;
76064: LD_VAR 0 1
76068: PPUSH
76069: LD_VAR 0 3
76073: PPUSH
76074: CALL_OW 113
// exit ;
76078: GO 76166
// end ; if task [ 1 ] [ 1 ] <> M then
76080: LD_VAR 0 7
76084: PUSH
76085: LD_INT 1
76087: ARRAY
76088: PUSH
76089: LD_INT 1
76091: ARRAY
76092: PUSH
76093: LD_STRING M
76095: NONEQUAL
76096: IFFALSE 76100
// exit ;
76098: GO 76166
// x := task [ 1 ] [ 2 ] ;
76100: LD_ADDR_VAR 0 5
76104: PUSH
76105: LD_VAR 0 7
76109: PUSH
76110: LD_INT 1
76112: ARRAY
76113: PUSH
76114: LD_INT 2
76116: ARRAY
76117: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76118: LD_ADDR_VAR 0 6
76122: PUSH
76123: LD_VAR 0 7
76127: PUSH
76128: LD_INT 1
76130: ARRAY
76131: PUSH
76132: LD_INT 3
76134: ARRAY
76135: ST_TO_ADDR
// if InArea ( x , y , area ) then
76136: LD_VAR 0 5
76140: PPUSH
76141: LD_VAR 0 6
76145: PPUSH
76146: LD_VAR 0 2
76150: PPUSH
76151: CALL_OW 309
76155: IFFALSE 76166
// ComStop ( unit ) ;
76157: LD_VAR 0 1
76161: PPUSH
76162: CALL_OW 141
// end ;
76166: LD_VAR 0 4
76170: RET
// export function Abs ( value ) ; begin
76171: LD_INT 0
76173: PPUSH
// result := value ;
76174: LD_ADDR_VAR 0 2
76178: PUSH
76179: LD_VAR 0 1
76183: ST_TO_ADDR
// if value < 0 then
76184: LD_VAR 0 1
76188: PUSH
76189: LD_INT 0
76191: LESS
76192: IFFALSE 76209
// result := value * - 1 ;
76194: LD_ADDR_VAR 0 2
76198: PUSH
76199: LD_VAR 0 1
76203: PUSH
76204: LD_INT 1
76206: NEG
76207: MUL
76208: ST_TO_ADDR
// end ;
76209: LD_VAR 0 2
76213: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76214: LD_INT 0
76216: PPUSH
76217: PPUSH
76218: PPUSH
76219: PPUSH
76220: PPUSH
76221: PPUSH
76222: PPUSH
76223: PPUSH
// if not unit or not building then
76224: LD_VAR 0 1
76228: NOT
76229: PUSH
76230: LD_VAR 0 2
76234: NOT
76235: OR
76236: IFFALSE 76240
// exit ;
76238: GO 76466
// x := GetX ( building ) ;
76240: LD_ADDR_VAR 0 4
76244: PUSH
76245: LD_VAR 0 2
76249: PPUSH
76250: CALL_OW 250
76254: ST_TO_ADDR
// y := GetY ( building ) ;
76255: LD_ADDR_VAR 0 6
76259: PUSH
76260: LD_VAR 0 2
76264: PPUSH
76265: CALL_OW 251
76269: ST_TO_ADDR
// d := GetDir ( building ) ;
76270: LD_ADDR_VAR 0 8
76274: PUSH
76275: LD_VAR 0 2
76279: PPUSH
76280: CALL_OW 254
76284: ST_TO_ADDR
// r := 4 ;
76285: LD_ADDR_VAR 0 9
76289: PUSH
76290: LD_INT 4
76292: ST_TO_ADDR
// for i := 1 to 5 do
76293: LD_ADDR_VAR 0 10
76297: PUSH
76298: DOUBLE
76299: LD_INT 1
76301: DEC
76302: ST_TO_ADDR
76303: LD_INT 5
76305: PUSH
76306: FOR_TO
76307: IFFALSE 76464
// begin _x := ShiftX ( x , d , r + i ) ;
76309: LD_ADDR_VAR 0 5
76313: PUSH
76314: LD_VAR 0 4
76318: PPUSH
76319: LD_VAR 0 8
76323: PPUSH
76324: LD_VAR 0 9
76328: PUSH
76329: LD_VAR 0 10
76333: PLUS
76334: PPUSH
76335: CALL_OW 272
76339: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76340: LD_ADDR_VAR 0 7
76344: PUSH
76345: LD_VAR 0 6
76349: PPUSH
76350: LD_VAR 0 8
76354: PPUSH
76355: LD_VAR 0 9
76359: PUSH
76360: LD_VAR 0 10
76364: PLUS
76365: PPUSH
76366: CALL_OW 273
76370: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76371: LD_VAR 0 5
76375: PPUSH
76376: LD_VAR 0 7
76380: PPUSH
76381: CALL_OW 488
76385: PUSH
76386: LD_VAR 0 5
76390: PPUSH
76391: LD_VAR 0 7
76395: PPUSH
76396: CALL_OW 428
76400: PPUSH
76401: CALL_OW 247
76405: PUSH
76406: LD_INT 3
76408: PUSH
76409: LD_INT 2
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: IN
76416: NOT
76417: AND
76418: IFFALSE 76462
// begin ComMoveXY ( unit , _x , _y ) ;
76420: LD_VAR 0 1
76424: PPUSH
76425: LD_VAR 0 5
76429: PPUSH
76430: LD_VAR 0 7
76434: PPUSH
76435: CALL_OW 111
// result := [ _x , _y ] ;
76439: LD_ADDR_VAR 0 3
76443: PUSH
76444: LD_VAR 0 5
76448: PUSH
76449: LD_VAR 0 7
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: ST_TO_ADDR
// exit ;
76458: POP
76459: POP
76460: GO 76466
// end ; end ;
76462: GO 76306
76464: POP
76465: POP
// end ;
76466: LD_VAR 0 3
76470: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76471: LD_INT 0
76473: PPUSH
76474: PPUSH
76475: PPUSH
// result := 0 ;
76476: LD_ADDR_VAR 0 3
76480: PUSH
76481: LD_INT 0
76483: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76484: LD_VAR 0 1
76488: PUSH
76489: LD_INT 0
76491: LESS
76492: PUSH
76493: LD_VAR 0 1
76497: PUSH
76498: LD_INT 8
76500: GREATER
76501: OR
76502: PUSH
76503: LD_VAR 0 2
76507: PUSH
76508: LD_INT 0
76510: LESS
76511: OR
76512: PUSH
76513: LD_VAR 0 2
76517: PUSH
76518: LD_INT 8
76520: GREATER
76521: OR
76522: IFFALSE 76526
// exit ;
76524: GO 76601
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76526: LD_ADDR_VAR 0 4
76530: PUSH
76531: LD_INT 22
76533: PUSH
76534: LD_VAR 0 2
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PPUSH
76543: CALL_OW 69
76547: PUSH
76548: FOR_IN
76549: IFFALSE 76599
// begin un := UnitShoot ( i ) ;
76551: LD_ADDR_VAR 0 5
76555: PUSH
76556: LD_VAR 0 4
76560: PPUSH
76561: CALL_OW 504
76565: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76566: LD_VAR 0 5
76570: PPUSH
76571: CALL_OW 255
76575: PUSH
76576: LD_VAR 0 1
76580: EQUAL
76581: IFFALSE 76597
// begin result := un ;
76583: LD_ADDR_VAR 0 3
76587: PUSH
76588: LD_VAR 0 5
76592: ST_TO_ADDR
// exit ;
76593: POP
76594: POP
76595: GO 76601
// end ; end ;
76597: GO 76548
76599: POP
76600: POP
// end ;
76601: LD_VAR 0 3
76605: RET
// export function GetCargoBay ( units ) ; begin
76606: LD_INT 0
76608: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76609: LD_ADDR_VAR 0 2
76613: PUSH
76614: LD_VAR 0 1
76618: PPUSH
76619: LD_INT 2
76621: PUSH
76622: LD_INT 34
76624: PUSH
76625: LD_INT 12
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PUSH
76632: LD_INT 34
76634: PUSH
76635: LD_INT 51
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: PUSH
76642: LD_INT 34
76644: PUSH
76645: LD_INT 32
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PUSH
76652: LD_INT 34
76654: PUSH
76655: LD_EXP 53
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: PPUSH
76671: CALL_OW 72
76675: ST_TO_ADDR
// end ;
76676: LD_VAR 0 2
76680: RET
// export function Negate ( value ) ; begin
76681: LD_INT 0
76683: PPUSH
// result := not value ;
76684: LD_ADDR_VAR 0 2
76688: PUSH
76689: LD_VAR 0 1
76693: NOT
76694: ST_TO_ADDR
// end ;
76695: LD_VAR 0 2
76699: RET
// export function Inc ( value ) ; begin
76700: LD_INT 0
76702: PPUSH
// result := value + 1 ;
76703: LD_ADDR_VAR 0 2
76707: PUSH
76708: LD_VAR 0 1
76712: PUSH
76713: LD_INT 1
76715: PLUS
76716: ST_TO_ADDR
// end ;
76717: LD_VAR 0 2
76721: RET
// export function Dec ( value ) ; begin
76722: LD_INT 0
76724: PPUSH
// result := value - 1 ;
76725: LD_ADDR_VAR 0 2
76729: PUSH
76730: LD_VAR 0 1
76734: PUSH
76735: LD_INT 1
76737: MINUS
76738: ST_TO_ADDR
// end ;
76739: LD_VAR 0 2
76743: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76744: LD_INT 0
76746: PPUSH
76747: PPUSH
76748: PPUSH
76749: PPUSH
76750: PPUSH
76751: PPUSH
76752: PPUSH
76753: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76754: LD_VAR 0 1
76758: PPUSH
76759: LD_VAR 0 2
76763: PPUSH
76764: CALL_OW 488
76768: NOT
76769: PUSH
76770: LD_VAR 0 3
76774: PPUSH
76775: LD_VAR 0 4
76779: PPUSH
76780: CALL_OW 488
76784: NOT
76785: OR
76786: IFFALSE 76799
// begin result := - 1 ;
76788: LD_ADDR_VAR 0 5
76792: PUSH
76793: LD_INT 1
76795: NEG
76796: ST_TO_ADDR
// exit ;
76797: GO 77034
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76799: LD_ADDR_VAR 0 12
76803: PUSH
76804: LD_VAR 0 1
76808: PPUSH
76809: LD_VAR 0 2
76813: PPUSH
76814: LD_VAR 0 3
76818: PPUSH
76819: LD_VAR 0 4
76823: PPUSH
76824: CALL 75882 0 4
76828: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76829: LD_ADDR_VAR 0 11
76833: PUSH
76834: LD_VAR 0 1
76838: PPUSH
76839: LD_VAR 0 2
76843: PPUSH
76844: LD_VAR 0 12
76848: PUSH
76849: LD_INT 1
76851: ARRAY
76852: PPUSH
76853: LD_VAR 0 12
76857: PUSH
76858: LD_INT 2
76860: ARRAY
76861: PPUSH
76862: CALL_OW 298
76866: ST_TO_ADDR
// distance := 9999 ;
76867: LD_ADDR_VAR 0 10
76871: PUSH
76872: LD_INT 9999
76874: ST_TO_ADDR
// for i := 0 to 5 do
76875: LD_ADDR_VAR 0 6
76879: PUSH
76880: DOUBLE
76881: LD_INT 0
76883: DEC
76884: ST_TO_ADDR
76885: LD_INT 5
76887: PUSH
76888: FOR_TO
76889: IFFALSE 77032
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76891: LD_ADDR_VAR 0 7
76895: PUSH
76896: LD_VAR 0 1
76900: PPUSH
76901: LD_VAR 0 6
76905: PPUSH
76906: LD_VAR 0 11
76910: PPUSH
76911: CALL_OW 272
76915: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76916: LD_ADDR_VAR 0 8
76920: PUSH
76921: LD_VAR 0 2
76925: PPUSH
76926: LD_VAR 0 6
76930: PPUSH
76931: LD_VAR 0 11
76935: PPUSH
76936: CALL_OW 273
76940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76941: LD_VAR 0 7
76945: PPUSH
76946: LD_VAR 0 8
76950: PPUSH
76951: CALL_OW 488
76955: NOT
76956: IFFALSE 76960
// continue ;
76958: GO 76888
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76960: LD_ADDR_VAR 0 9
76964: PUSH
76965: LD_VAR 0 12
76969: PUSH
76970: LD_INT 1
76972: ARRAY
76973: PPUSH
76974: LD_VAR 0 12
76978: PUSH
76979: LD_INT 2
76981: ARRAY
76982: PPUSH
76983: LD_VAR 0 7
76987: PPUSH
76988: LD_VAR 0 8
76992: PPUSH
76993: CALL_OW 298
76997: ST_TO_ADDR
// if tmp < distance then
76998: LD_VAR 0 9
77002: PUSH
77003: LD_VAR 0 10
77007: LESS
77008: IFFALSE 77030
// begin result := i ;
77010: LD_ADDR_VAR 0 5
77014: PUSH
77015: LD_VAR 0 6
77019: ST_TO_ADDR
// distance := tmp ;
77020: LD_ADDR_VAR 0 10
77024: PUSH
77025: LD_VAR 0 9
77029: ST_TO_ADDR
// end ; end ;
77030: GO 76888
77032: POP
77033: POP
// end ;
77034: LD_VAR 0 5
77038: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77039: LD_INT 0
77041: PPUSH
77042: PPUSH
// if not driver or not IsInUnit ( driver ) then
77043: LD_VAR 0 1
77047: NOT
77048: PUSH
77049: LD_VAR 0 1
77053: PPUSH
77054: CALL_OW 310
77058: NOT
77059: OR
77060: IFFALSE 77064
// exit ;
77062: GO 77154
// vehicle := IsInUnit ( driver ) ;
77064: LD_ADDR_VAR 0 3
77068: PUSH
77069: LD_VAR 0 1
77073: PPUSH
77074: CALL_OW 310
77078: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77079: LD_VAR 0 1
77083: PPUSH
77084: LD_STRING \
77086: PUSH
77087: LD_INT 0
77089: PUSH
77090: LD_INT 0
77092: PUSH
77093: LD_INT 0
77095: PUSH
77096: LD_INT 0
77098: PUSH
77099: LD_INT 0
77101: PUSH
77102: LD_INT 0
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: LIST
77113: PUSH
77114: LD_STRING E
77116: PUSH
77117: LD_INT 0
77119: PUSH
77120: LD_INT 0
77122: PUSH
77123: LD_VAR 0 3
77127: PUSH
77128: LD_INT 0
77130: PUSH
77131: LD_INT 0
77133: PUSH
77134: LD_INT 0
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: PPUSH
77150: CALL_OW 446
// end ;
77154: LD_VAR 0 2
77158: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77159: LD_INT 0
77161: PPUSH
77162: PPUSH
// if not driver or not IsInUnit ( driver ) then
77163: LD_VAR 0 1
77167: NOT
77168: PUSH
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL_OW 310
77178: NOT
77179: OR
77180: IFFALSE 77184
// exit ;
77182: GO 77274
// vehicle := IsInUnit ( driver ) ;
77184: LD_ADDR_VAR 0 3
77188: PUSH
77189: LD_VAR 0 1
77193: PPUSH
77194: CALL_OW 310
77198: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77199: LD_VAR 0 1
77203: PPUSH
77204: LD_STRING \
77206: PUSH
77207: LD_INT 0
77209: PUSH
77210: LD_INT 0
77212: PUSH
77213: LD_INT 0
77215: PUSH
77216: LD_INT 0
77218: PUSH
77219: LD_INT 0
77221: PUSH
77222: LD_INT 0
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: PUSH
77234: LD_STRING E
77236: PUSH
77237: LD_INT 0
77239: PUSH
77240: LD_INT 0
77242: PUSH
77243: LD_VAR 0 3
77247: PUSH
77248: LD_INT 0
77250: PUSH
77251: LD_INT 0
77253: PUSH
77254: LD_INT 0
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: LIST
77263: LIST
77264: LIST
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PPUSH
77270: CALL_OW 447
// end ;
77274: LD_VAR 0 2
77278: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77279: LD_INT 0
77281: PPUSH
77282: PPUSH
77283: PPUSH
// tmp := [ ] ;
77284: LD_ADDR_VAR 0 5
77288: PUSH
77289: EMPTY
77290: ST_TO_ADDR
// for i in units do
77291: LD_ADDR_VAR 0 4
77295: PUSH
77296: LD_VAR 0 1
77300: PUSH
77301: FOR_IN
77302: IFFALSE 77340
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77304: LD_ADDR_VAR 0 5
77308: PUSH
77309: LD_VAR 0 5
77313: PPUSH
77314: LD_VAR 0 5
77318: PUSH
77319: LD_INT 1
77321: PLUS
77322: PPUSH
77323: LD_VAR 0 4
77327: PPUSH
77328: CALL_OW 256
77332: PPUSH
77333: CALL_OW 2
77337: ST_TO_ADDR
77338: GO 77301
77340: POP
77341: POP
// if not tmp then
77342: LD_VAR 0 5
77346: NOT
77347: IFFALSE 77351
// exit ;
77349: GO 77399
// if asc then
77351: LD_VAR 0 2
77355: IFFALSE 77379
// result := SortListByListAsc ( units , tmp ) else
77357: LD_ADDR_VAR 0 3
77361: PUSH
77362: LD_VAR 0 1
77366: PPUSH
77367: LD_VAR 0 5
77371: PPUSH
77372: CALL_OW 76
77376: ST_TO_ADDR
77377: GO 77399
// result := SortListByListDesc ( units , tmp ) ;
77379: LD_ADDR_VAR 0 3
77383: PUSH
77384: LD_VAR 0 1
77388: PPUSH
77389: LD_VAR 0 5
77393: PPUSH
77394: CALL_OW 77
77398: ST_TO_ADDR
// end ;
77399: LD_VAR 0 3
77403: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77404: LD_INT 0
77406: PPUSH
77407: PPUSH
// task := GetTaskList ( mech ) ;
77408: LD_ADDR_VAR 0 4
77412: PUSH
77413: LD_VAR 0 1
77417: PPUSH
77418: CALL_OW 437
77422: ST_TO_ADDR
// if not task then
77423: LD_VAR 0 4
77427: NOT
77428: IFFALSE 77432
// exit ;
77430: GO 77474
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77432: LD_ADDR_VAR 0 3
77436: PUSH
77437: LD_VAR 0 4
77441: PUSH
77442: LD_INT 1
77444: ARRAY
77445: PUSH
77446: LD_INT 1
77448: ARRAY
77449: PUSH
77450: LD_STRING r
77452: EQUAL
77453: PUSH
77454: LD_VAR 0 4
77458: PUSH
77459: LD_INT 1
77461: ARRAY
77462: PUSH
77463: LD_INT 4
77465: ARRAY
77466: PUSH
77467: LD_VAR 0 2
77471: EQUAL
77472: AND
77473: ST_TO_ADDR
// end ;
77474: LD_VAR 0 3
77478: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77479: LD_INT 0
77481: PPUSH
// SetDir ( unit , d ) ;
77482: LD_VAR 0 1
77486: PPUSH
77487: LD_VAR 0 4
77491: PPUSH
77492: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77496: LD_VAR 0 1
77500: PPUSH
77501: LD_VAR 0 2
77505: PPUSH
77506: LD_VAR 0 3
77510: PPUSH
77511: LD_VAR 0 5
77515: PPUSH
77516: CALL_OW 48
// end ;
77520: LD_VAR 0 6
77524: RET
// export function ToNaturalNumber ( number ) ; begin
77525: LD_INT 0
77527: PPUSH
// result := number div 1 ;
77528: LD_ADDR_VAR 0 2
77532: PUSH
77533: LD_VAR 0 1
77537: PUSH
77538: LD_INT 1
77540: DIV
77541: ST_TO_ADDR
// if number < 0 then
77542: LD_VAR 0 1
77546: PUSH
77547: LD_INT 0
77549: LESS
77550: IFFALSE 77560
// result := 0 ;
77552: LD_ADDR_VAR 0 2
77556: PUSH
77557: LD_INT 0
77559: ST_TO_ADDR
// end ;
77560: LD_VAR 0 2
77564: RET
// export function SortByClass ( units , class ) ; var un ; begin
77565: LD_INT 0
77567: PPUSH
77568: PPUSH
// if not units or not class then
77569: LD_VAR 0 1
77573: NOT
77574: PUSH
77575: LD_VAR 0 2
77579: NOT
77580: OR
77581: IFFALSE 77585
// exit ;
77583: GO 77680
// result := [ ] ;
77585: LD_ADDR_VAR 0 3
77589: PUSH
77590: EMPTY
77591: ST_TO_ADDR
// for un in units do
77592: LD_ADDR_VAR 0 4
77596: PUSH
77597: LD_VAR 0 1
77601: PUSH
77602: FOR_IN
77603: IFFALSE 77678
// if GetClass ( un ) = class then
77605: LD_VAR 0 4
77609: PPUSH
77610: CALL_OW 257
77614: PUSH
77615: LD_VAR 0 2
77619: EQUAL
77620: IFFALSE 77647
// result := Insert ( result , 1 , un ) else
77622: LD_ADDR_VAR 0 3
77626: PUSH
77627: LD_VAR 0 3
77631: PPUSH
77632: LD_INT 1
77634: PPUSH
77635: LD_VAR 0 4
77639: PPUSH
77640: CALL_OW 2
77644: ST_TO_ADDR
77645: GO 77676
// result := Replace ( result , result + 1 , un ) ;
77647: LD_ADDR_VAR 0 3
77651: PUSH
77652: LD_VAR 0 3
77656: PPUSH
77657: LD_VAR 0 3
77661: PUSH
77662: LD_INT 1
77664: PLUS
77665: PPUSH
77666: LD_VAR 0 4
77670: PPUSH
77671: CALL_OW 1
77675: ST_TO_ADDR
77676: GO 77602
77678: POP
77679: POP
// end ;
77680: LD_VAR 0 3
77684: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77685: LD_INT 0
77687: PPUSH
77688: PPUSH
77689: PPUSH
77690: PPUSH
77691: PPUSH
77692: PPUSH
77693: PPUSH
// result := [ ] ;
77694: LD_ADDR_VAR 0 4
77698: PUSH
77699: EMPTY
77700: ST_TO_ADDR
// if x - r < 0 then
77701: LD_VAR 0 1
77705: PUSH
77706: LD_VAR 0 3
77710: MINUS
77711: PUSH
77712: LD_INT 0
77714: LESS
77715: IFFALSE 77727
// min_x := 0 else
77717: LD_ADDR_VAR 0 8
77721: PUSH
77722: LD_INT 0
77724: ST_TO_ADDR
77725: GO 77743
// min_x := x - r ;
77727: LD_ADDR_VAR 0 8
77731: PUSH
77732: LD_VAR 0 1
77736: PUSH
77737: LD_VAR 0 3
77741: MINUS
77742: ST_TO_ADDR
// if y - r < 0 then
77743: LD_VAR 0 2
77747: PUSH
77748: LD_VAR 0 3
77752: MINUS
77753: PUSH
77754: LD_INT 0
77756: LESS
77757: IFFALSE 77769
// min_y := 0 else
77759: LD_ADDR_VAR 0 7
77763: PUSH
77764: LD_INT 0
77766: ST_TO_ADDR
77767: GO 77785
// min_y := y - r ;
77769: LD_ADDR_VAR 0 7
77773: PUSH
77774: LD_VAR 0 2
77778: PUSH
77779: LD_VAR 0 3
77783: MINUS
77784: ST_TO_ADDR
// max_x := x + r ;
77785: LD_ADDR_VAR 0 9
77789: PUSH
77790: LD_VAR 0 1
77794: PUSH
77795: LD_VAR 0 3
77799: PLUS
77800: ST_TO_ADDR
// max_y := y + r ;
77801: LD_ADDR_VAR 0 10
77805: PUSH
77806: LD_VAR 0 2
77810: PUSH
77811: LD_VAR 0 3
77815: PLUS
77816: ST_TO_ADDR
// for _x = min_x to max_x do
77817: LD_ADDR_VAR 0 5
77821: PUSH
77822: DOUBLE
77823: LD_VAR 0 8
77827: DEC
77828: ST_TO_ADDR
77829: LD_VAR 0 9
77833: PUSH
77834: FOR_TO
77835: IFFALSE 77936
// for _y = min_y to max_y do
77837: LD_ADDR_VAR 0 6
77841: PUSH
77842: DOUBLE
77843: LD_VAR 0 7
77847: DEC
77848: ST_TO_ADDR
77849: LD_VAR 0 10
77853: PUSH
77854: FOR_TO
77855: IFFALSE 77932
// begin if not ValidHex ( _x , _y ) then
77857: LD_VAR 0 5
77861: PPUSH
77862: LD_VAR 0 6
77866: PPUSH
77867: CALL_OW 488
77871: NOT
77872: IFFALSE 77876
// continue ;
77874: GO 77854
// if GetResourceTypeXY ( _x , _y ) then
77876: LD_VAR 0 5
77880: PPUSH
77881: LD_VAR 0 6
77885: PPUSH
77886: CALL_OW 283
77890: IFFALSE 77930
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77892: LD_ADDR_VAR 0 4
77896: PUSH
77897: LD_VAR 0 4
77901: PPUSH
77902: LD_VAR 0 4
77906: PUSH
77907: LD_INT 1
77909: PLUS
77910: PPUSH
77911: LD_VAR 0 5
77915: PUSH
77916: LD_VAR 0 6
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PPUSH
77925: CALL_OW 1
77929: ST_TO_ADDR
// end ;
77930: GO 77854
77932: POP
77933: POP
77934: GO 77834
77936: POP
77937: POP
// end ;
77938: LD_VAR 0 4
77942: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77943: LD_INT 0
77945: PPUSH
77946: PPUSH
77947: PPUSH
77948: PPUSH
77949: PPUSH
77950: PPUSH
77951: PPUSH
77952: PPUSH
// if not units then
77953: LD_VAR 0 1
77957: NOT
77958: IFFALSE 77962
// exit ;
77960: GO 78387
// result := UnitFilter ( units , [ f_ok ] ) ;
77962: LD_ADDR_VAR 0 3
77966: PUSH
77967: LD_VAR 0 1
77971: PPUSH
77972: LD_INT 50
77974: PUSH
77975: EMPTY
77976: LIST
77977: PPUSH
77978: CALL_OW 72
77982: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77983: LD_ADDR_VAR 0 8
77987: PUSH
77988: LD_VAR 0 1
77992: PUSH
77993: LD_INT 1
77995: ARRAY
77996: PPUSH
77997: CALL_OW 255
78001: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
78002: LD_ADDR_VAR 0 10
78006: PUSH
78007: LD_INT 29
78009: PUSH
78010: LD_EXP 56
78014: PUSH
78015: EMPTY
78016: LIST
78017: LIST
78018: ST_TO_ADDR
// if not result then
78019: LD_VAR 0 3
78023: NOT
78024: IFFALSE 78028
// exit ;
78026: GO 78387
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78028: LD_ADDR_VAR 0 5
78032: PUSH
78033: LD_INT 81
78035: PUSH
78036: LD_VAR 0 8
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PPUSH
78045: CALL_OW 69
78049: ST_TO_ADDR
// for i in result do
78050: LD_ADDR_VAR 0 4
78054: PUSH
78055: LD_VAR 0 3
78059: PUSH
78060: FOR_IN
78061: IFFALSE 78385
// begin tag := GetTag ( i ) + 1 ;
78063: LD_ADDR_VAR 0 9
78067: PUSH
78068: LD_VAR 0 4
78072: PPUSH
78073: CALL_OW 110
78077: PUSH
78078: LD_INT 1
78080: PLUS
78081: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78082: LD_ADDR_VAR 0 7
78086: PUSH
78087: LD_VAR 0 4
78091: PPUSH
78092: CALL_OW 250
78096: PPUSH
78097: LD_VAR 0 4
78101: PPUSH
78102: CALL_OW 251
78106: PPUSH
78107: LD_INT 6
78109: PPUSH
78110: CALL 77685 0 3
78114: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78115: LD_VAR 0 7
78119: PUSH
78120: LD_VAR 0 4
78124: PPUSH
78125: CALL_OW 264
78129: PUSH
78130: LD_VAR 0 10
78134: IN
78135: NOT
78136: AND
78137: IFFALSE 78176
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78139: LD_VAR 0 4
78143: PPUSH
78144: LD_VAR 0 7
78148: PUSH
78149: LD_INT 1
78151: ARRAY
78152: PUSH
78153: LD_INT 1
78155: ARRAY
78156: PPUSH
78157: LD_VAR 0 7
78161: PUSH
78162: LD_INT 1
78164: ARRAY
78165: PUSH
78166: LD_INT 2
78168: ARRAY
78169: PPUSH
78170: CALL_OW 116
78174: GO 78383
// if path > tag then
78176: LD_VAR 0 2
78180: PUSH
78181: LD_VAR 0 9
78185: GREATER
78186: IFFALSE 78353
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78188: LD_ADDR_VAR 0 6
78192: PUSH
78193: LD_VAR 0 5
78197: PPUSH
78198: LD_INT 91
78200: PUSH
78201: LD_VAR 0 4
78205: PUSH
78206: LD_INT 12
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: LIST
78213: PPUSH
78214: CALL_OW 72
78218: ST_TO_ADDR
// if nearEnemy then
78219: LD_VAR 0 6
78223: IFFALSE 78251
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78225: LD_VAR 0 4
78229: PPUSH
78230: LD_VAR 0 6
78234: PPUSH
78235: LD_VAR 0 4
78239: PPUSH
78240: CALL_OW 74
78244: PPUSH
78245: CALL_OW 115
78249: GO 78351
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78251: LD_VAR 0 4
78255: PPUSH
78256: LD_VAR 0 2
78260: PUSH
78261: LD_VAR 0 9
78265: ARRAY
78266: PUSH
78267: LD_INT 1
78269: ARRAY
78270: PPUSH
78271: LD_VAR 0 2
78275: PUSH
78276: LD_VAR 0 9
78280: ARRAY
78281: PUSH
78282: LD_INT 2
78284: ARRAY
78285: PPUSH
78286: CALL_OW 297
78290: PUSH
78291: LD_INT 6
78293: GREATER
78294: IFFALSE 78337
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78296: LD_VAR 0 4
78300: PPUSH
78301: LD_VAR 0 2
78305: PUSH
78306: LD_VAR 0 9
78310: ARRAY
78311: PUSH
78312: LD_INT 1
78314: ARRAY
78315: PPUSH
78316: LD_VAR 0 2
78320: PUSH
78321: LD_VAR 0 9
78325: ARRAY
78326: PUSH
78327: LD_INT 2
78329: ARRAY
78330: PPUSH
78331: CALL_OW 114
78335: GO 78351
// SetTag ( i , tag ) ;
78337: LD_VAR 0 4
78341: PPUSH
78342: LD_VAR 0 9
78346: PPUSH
78347: CALL_OW 109
// end else
78351: GO 78383
// if enemy then
78353: LD_VAR 0 5
78357: IFFALSE 78383
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78359: LD_VAR 0 4
78363: PPUSH
78364: LD_VAR 0 5
78368: PPUSH
78369: LD_VAR 0 4
78373: PPUSH
78374: CALL_OW 74
78378: PPUSH
78379: CALL_OW 115
// end ;
78383: GO 78060
78385: POP
78386: POP
// end ;
78387: LD_VAR 0 3
78391: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78392: LD_INT 0
78394: PPUSH
78395: PPUSH
78396: PPUSH
// if not unit or IsInUnit ( unit ) then
78397: LD_VAR 0 1
78401: NOT
78402: PUSH
78403: LD_VAR 0 1
78407: PPUSH
78408: CALL_OW 310
78412: OR
78413: IFFALSE 78417
// exit ;
78415: GO 78508
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78417: LD_ADDR_VAR 0 4
78421: PUSH
78422: LD_VAR 0 1
78426: PPUSH
78427: CALL_OW 250
78431: PPUSH
78432: LD_VAR 0 2
78436: PPUSH
78437: LD_INT 1
78439: PPUSH
78440: CALL_OW 272
78444: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78445: LD_ADDR_VAR 0 5
78449: PUSH
78450: LD_VAR 0 1
78454: PPUSH
78455: CALL_OW 251
78459: PPUSH
78460: LD_VAR 0 2
78464: PPUSH
78465: LD_INT 1
78467: PPUSH
78468: CALL_OW 273
78472: ST_TO_ADDR
// if ValidHex ( x , y ) then
78473: LD_VAR 0 4
78477: PPUSH
78478: LD_VAR 0 5
78482: PPUSH
78483: CALL_OW 488
78487: IFFALSE 78508
// ComTurnXY ( unit , x , y ) ;
78489: LD_VAR 0 1
78493: PPUSH
78494: LD_VAR 0 4
78498: PPUSH
78499: LD_VAR 0 5
78503: PPUSH
78504: CALL_OW 118
// end ;
78508: LD_VAR 0 3
78512: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78513: LD_INT 0
78515: PPUSH
78516: PPUSH
// result := false ;
78517: LD_ADDR_VAR 0 3
78521: PUSH
78522: LD_INT 0
78524: ST_TO_ADDR
// if not units then
78525: LD_VAR 0 2
78529: NOT
78530: IFFALSE 78534
// exit ;
78532: GO 78579
// for i in units do
78534: LD_ADDR_VAR 0 4
78538: PUSH
78539: LD_VAR 0 2
78543: PUSH
78544: FOR_IN
78545: IFFALSE 78577
// if See ( side , i ) then
78547: LD_VAR 0 1
78551: PPUSH
78552: LD_VAR 0 4
78556: PPUSH
78557: CALL_OW 292
78561: IFFALSE 78575
// begin result := true ;
78563: LD_ADDR_VAR 0 3
78567: PUSH
78568: LD_INT 1
78570: ST_TO_ADDR
// exit ;
78571: POP
78572: POP
78573: GO 78579
// end ;
78575: GO 78544
78577: POP
78578: POP
// end ;
78579: LD_VAR 0 3
78583: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78584: LD_INT 0
78586: PPUSH
78587: PPUSH
78588: PPUSH
78589: PPUSH
// if not unit or not points then
78590: LD_VAR 0 1
78594: NOT
78595: PUSH
78596: LD_VAR 0 2
78600: NOT
78601: OR
78602: IFFALSE 78606
// exit ;
78604: GO 78696
// dist := 99999 ;
78606: LD_ADDR_VAR 0 5
78610: PUSH
78611: LD_INT 99999
78613: ST_TO_ADDR
// for i in points do
78614: LD_ADDR_VAR 0 4
78618: PUSH
78619: LD_VAR 0 2
78623: PUSH
78624: FOR_IN
78625: IFFALSE 78694
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78627: LD_ADDR_VAR 0 6
78631: PUSH
78632: LD_VAR 0 1
78636: PPUSH
78637: LD_VAR 0 4
78641: PUSH
78642: LD_INT 1
78644: ARRAY
78645: PPUSH
78646: LD_VAR 0 4
78650: PUSH
78651: LD_INT 2
78653: ARRAY
78654: PPUSH
78655: CALL_OW 297
78659: ST_TO_ADDR
// if tmpDist < dist then
78660: LD_VAR 0 6
78664: PUSH
78665: LD_VAR 0 5
78669: LESS
78670: IFFALSE 78692
// begin result := i ;
78672: LD_ADDR_VAR 0 3
78676: PUSH
78677: LD_VAR 0 4
78681: ST_TO_ADDR
// dist := tmpDist ;
78682: LD_ADDR_VAR 0 5
78686: PUSH
78687: LD_VAR 0 6
78691: ST_TO_ADDR
// end ; end ;
78692: GO 78624
78694: POP
78695: POP
// end ; end_of_file
78696: LD_VAR 0 3
78700: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78701: LD_VAR 0 1
78705: PUSH
78706: LD_INT 200
78708: DOUBLE
78709: GREATEREQUAL
78710: IFFALSE 78718
78712: LD_INT 299
78714: DOUBLE
78715: LESSEQUAL
78716: IFTRUE 78720
78718: GO 78752
78720: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78721: LD_VAR 0 1
78725: PPUSH
78726: LD_VAR 0 2
78730: PPUSH
78731: LD_VAR 0 3
78735: PPUSH
78736: LD_VAR 0 4
78740: PPUSH
78741: LD_VAR 0 5
78745: PPUSH
78746: CALL 34348 0 5
78750: GO 78829
78752: LD_INT 300
78754: DOUBLE
78755: GREATEREQUAL
78756: IFFALSE 78764
78758: LD_INT 399
78760: DOUBLE
78761: LESSEQUAL
78762: IFTRUE 78766
78764: GO 78828
78766: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78767: LD_VAR 0 1
78771: PPUSH
78772: LD_VAR 0 2
78776: PPUSH
78777: LD_VAR 0 3
78781: PPUSH
78782: LD_VAR 0 4
78786: PPUSH
78787: LD_VAR 0 5
78791: PPUSH
78792: LD_VAR 0 6
78796: PPUSH
78797: LD_VAR 0 7
78801: PPUSH
78802: LD_VAR 0 8
78806: PPUSH
78807: LD_VAR 0 9
78811: PPUSH
78812: LD_VAR 0 10
78816: PPUSH
78817: LD_VAR 0 11
78821: PPUSH
78822: CALL 31990 0 11
78826: GO 78829
78828: POP
// end ;
78829: PPOPN 11
78831: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78832: LD_VAR 0 1
78836: PPUSH
78837: LD_VAR 0 2
78841: PPUSH
78842: LD_VAR 0 3
78846: PPUSH
78847: LD_VAR 0 4
78851: PPUSH
78852: LD_VAR 0 5
78856: PPUSH
78857: CALL 34084 0 5
// end ; end_of_file
78861: PPOPN 5
78863: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78864: LD_VAR 0 1
78868: PPUSH
78869: LD_VAR 0 2
78873: PPUSH
78874: LD_VAR 0 3
78878: PPUSH
78879: LD_VAR 0 4
78883: PPUSH
78884: LD_VAR 0 5
78888: PPUSH
78889: LD_VAR 0 6
78893: PPUSH
78894: CALL 19683 0 6
// end ;
78898: PPOPN 6
78900: END
