// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15073 0 0
// PrepareDifficulty ;
  43: CALL 12446 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3810 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3948 0 0
// Action ;
  87: CALL 5612 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 39121 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 39121 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 39121 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 39121 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 39121 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 39121 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 39121 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 39121 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 39121 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 39121 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 39121 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 39121 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 39121 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76413 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 5 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 226
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 9
3431: PPUSH
3432: LD_INT 5
3434: PPUSH
3435: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 4
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 2
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 112
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 47
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 129
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3575: LD_INT 3
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: LD_INT 135
3583: PPUSH
3584: LD_EXP 29
3588: PPUSH
3589: LD_EXP 30
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_INT 6
3604: PPUSH
3605: CALL 12765 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 32
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: FOR_IN
3644: IFFALSE 3684
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3646: LD_INT 3
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_EXP 29
3661: PPUSH
3662: LD_EXP 30
3666: PPUSH
3667: CALL_OW 12
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL 12765 0 6
3682: GO 3643
3684: POP
3685: POP
// for i := 1 to 5 do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: DOUBLE
3692: LD_INT 1
3694: DEC
3695: ST_TO_ADDR
3696: LD_INT 5
3698: PUSH
3699: FOR_TO
3700: IFFALSE 3803
// begin uc_side := 3 ;
3702: LD_ADDR_OWVAR 20
3706: PUSH
3707: LD_INT 3
3709: ST_TO_ADDR
// uc_nation := 3 ;
3710: LD_ADDR_OWVAR 21
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// hc_gallery :=  ;
3718: LD_ADDR_OWVAR 33
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// hc_name :=  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3734: LD_INT 0
3736: PPUSH
3737: LD_INT 4
3739: PPUSH
3740: LD_EXP 29
3744: PPUSH
3745: LD_EXP 30
3749: PPUSH
3750: CALL_OW 12
3754: PPUSH
3755: CALL_OW 380
// un := CreateHuman ;
3759: LD_ADDR_VAR 0 3
3763: PUSH
3764: CALL_OW 44
3768: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 3
3776: PPUSH
3777: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3781: LD_ADDR_EXP 27
3785: PUSH
3786: LD_EXP 27
3790: PPUSH
3791: LD_VAR 0 3
3795: PPUSH
3796: CALL 76413 0 2
3800: ST_TO_ADDR
// end ;
3801: GO 3699
3803: POP
3804: POP
// end ;
3805: LD_VAR 0 1
3809: RET
// export function PrepareWestBase ; var i , un ; begin
3810: LD_INT 0
3812: PPUSH
3813: PPUSH
3814: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3815: LD_INT 10
3817: PPUSH
3818: LD_INT 122
3820: PPUSH
3821: LD_INT 145
3823: PPUSH
3824: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3828: LD_INT 137
3830: PPUSH
3831: LD_INT 84
3833: PPUSH
3834: LD_INT 61
3836: PPUSH
3837: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 6
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 91
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 4
3901: PPUSH
3902: LD_INT 3
3904: PPUSH
3905: CALL 12765 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 21
3917: PPUSH
3918: LD_EXP 29
3922: PPUSH
3923: LD_EXP 30
3927: PPUSH
3928: CALL_OW 12
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: LD_INT 6
3938: PPUSH
3939: CALL 12765 0 6
// end ;
3943: LD_VAR 0 1
3947: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3948: LD_INT 0
3950: PPUSH
3951: PPUSH
3952: PPUSH
3953: PPUSH
// uc_side := 3 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 3
3961: ST_TO_ADDR
// uc_nation := 3 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 3
3969: ST_TO_ADDR
// for i := 1 to 5 do
3970: LD_ADDR_VAR 0 2
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_INT 5
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4054
// begin hc_gallery :=  ;
3986: LD_ADDR_OWVAR 33
3990: PUSH
3991: LD_STRING 
3993: ST_TO_ADDR
// hc_name :=  ;
3994: LD_ADDR_OWVAR 26
3998: PUSH
3999: LD_STRING 
4001: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_INT 9
4007: PPUSH
4008: LD_EXP 29
4012: PPUSH
4013: LD_EXP 30
4017: PPUSH
4018: CALL_OW 12
4022: PPUSH
4023: CALL_OW 380
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4037: LD_VAR 0 3
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: LD_INT 0
4047: PPUSH
4048: CALL_OW 49
// end ;
4052: GO 3983
4054: POP
4055: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: LD_INT 4
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4161
// begin hc_gallery :=  ;
4093: LD_ADDR_OWVAR 33
4097: PUSH
4098: LD_STRING 
4100: ST_TO_ADDR
// hc_name :=  ;
4101: LD_ADDR_OWVAR 26
4105: PUSH
4106: LD_STRING 
4108: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_INT 4
4114: PPUSH
4115: LD_EXP 29
4119: PPUSH
4120: LD_EXP 30
4124: PPUSH
4125: CALL_OW 12
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 8
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL_OW 49
// end ;
4159: GO 4090
4161: POP
4162: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4163: LD_ADDR_VAR 0 2
4167: PUSH
4168: DOUBLE
4169: LD_INT 1
4171: DEC
4172: ST_TO_ADDR
4173: LD_INT 3
4175: PUSH
4176: LD_INT 4
4178: PUSH
4179: LD_INT 5
4181: PUSH
4182: LD_INT 5
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_OWVAR 67
4195: ARRAY
4196: PUSH
4197: FOR_TO
4198: IFFALSE 4415
// begin vc_engine = 3 ;
4200: LD_ADDR_OWVAR 39
4204: PUSH
4205: LD_INT 3
4207: ST_TO_ADDR
// vc_control = 1 ;
4208: LD_ADDR_OWVAR 38
4212: PUSH
4213: LD_INT 1
4215: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4216: LD_ADDR_OWVAR 40
4220: PUSH
4221: LD_INT 42
4223: PUSH
4224: LD_INT 43
4226: PUSH
4227: LD_INT 44
4229: PUSH
4230: LD_INT 45
4232: PUSH
4233: LD_INT 46
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 5
4248: PPUSH
4249: CALL_OW 12
4253: ARRAY
4254: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4255: LD_OWVAR 40
4259: PUSH
4260: LD_INT 46
4262: EQUAL
4263: IFFALSE 4275
// vc_chassis := ru_heavy_tracked else
4265: LD_ADDR_OWVAR 37
4269: PUSH
4270: LD_INT 24
4272: ST_TO_ADDR
4273: GO 4302
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4275: LD_ADDR_OWVAR 37
4279: PUSH
4280: LD_INT 22
4282: PUSH
4283: LD_INT 21
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 12
4300: ARRAY
4301: ST_TO_ADDR
// veh := CreateVehicle ;
4302: LD_ADDR_VAR 0 4
4306: PUSH
4307: CALL_OW 45
4311: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4312: LD_VAR 0 4
4316: PPUSH
4317: LD_INT 3
4319: PPUSH
4320: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// hc_gallery :=  ;
4339: LD_ADDR_OWVAR 33
4343: PUSH
4344: LD_STRING 
4346: ST_TO_ADDR
// hc_name :=  ;
4347: LD_ADDR_OWVAR 26
4351: PUSH
4352: LD_STRING 
4354: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4355: LD_INT 0
4357: PPUSH
4358: LD_INT 3
4360: PPUSH
4361: LD_INT 6
4363: PUSH
4364: LD_INT 7
4366: PUSH
4367: LD_INT 8
4369: PUSH
4370: LD_INT 10
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_OWVAR 67
4383: ARRAY
4384: PPUSH
4385: CALL_OW 380
// un = CreateHuman ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: CALL_OW 44
4398: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_VAR 0 4
4408: PPUSH
4409: CALL_OW 52
// end ;
4413: GO 4197
4415: POP
4416: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 5
4435: PUSH
4436: LD_INT 5
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4599
// begin vc_engine := 3 ;
4454: LD_ADDR_OWVAR 39
4458: PUSH
4459: LD_INT 3
4461: ST_TO_ADDR
// vc_control := 3 ;
4462: LD_ADDR_OWVAR 38
4466: PUSH
4467: LD_INT 3
4469: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4470: LD_ADDR_OWVAR 40
4474: PUSH
4475: LD_INT 42
4477: PUSH
4478: LD_INT 43
4480: PUSH
4481: LD_INT 44
4483: PUSH
4484: LD_INT 45
4486: PUSH
4487: LD_INT 46
4489: PUSH
4490: LD_INT 49
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_INT 5
4506: PPUSH
4507: CALL_OW 12
4511: ARRAY
4512: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4513: LD_OWVAR 40
4517: PUSH
4518: LD_INT 46
4520: EQUAL
4521: IFFALSE 4533
// vc_chassis := ru_heavy_tracked else
4523: LD_ADDR_OWVAR 37
4527: PUSH
4528: LD_INT 24
4530: ST_TO_ADDR
4531: GO 4560
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4533: LD_ADDR_OWVAR 37
4537: PUSH
4538: LD_INT 22
4540: PUSH
4541: LD_INT 21
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: CALL_OW 12
4558: ARRAY
4559: ST_TO_ADDR
// veh := CreateVehicle ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: CALL_OW 45
4569: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4582: LD_VAR 0 4
4586: PPUSH
4587: LD_INT 6
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4451
4599: POP
4600: POP
// end ; end_of_file
4601: LD_VAR 0 1
4605: RET
// export function PrepareKurt ; begin
4606: LD_INT 0
4608: PPUSH
// uc_side := 8 ;
4609: LD_ADDR_OWVAR 20
4613: PUSH
4614: LD_INT 8
4616: ST_TO_ADDR
// uc_nation := 2 ;
4617: LD_ADDR_OWVAR 21
4621: PUSH
4622: LD_INT 2
4624: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4625: LD_ADDR_OWVAR 37
4629: PUSH
4630: LD_INT 13
4632: ST_TO_ADDR
// vc_engine := 1 ;
4633: LD_ADDR_OWVAR 39
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// vc_control := 1 ;
4641: LD_ADDR_OWVAR 38
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// vc_weapon := 24 ;
4649: LD_ADDR_OWVAR 40
4653: PUSH
4654: LD_INT 24
4656: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4657: LD_ADDR_EXP 18
4661: PUSH
4662: CALL_OW 45
4666: ST_TO_ADDR
// if kurtStatus > 0 then
4667: LD_EXP 19
4671: PUSH
4672: LD_INT 0
4674: GREATER
4675: IFFALSE 4727
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4677: LD_ADDR_EXP 17
4681: PUSH
4682: LD_STRING Kurt
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: LD_STRING 
4690: PPUSH
4691: CALL 39121 0 3
4695: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4696: LD_EXP 18
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4711: LD_EXP 17
4715: PPUSH
4716: LD_EXP 18
4720: PPUSH
4721: CALL_OW 52
// end else
4725: GO 4804
// begin hc_name :=  ;
4727: LD_ADDR_OWVAR 26
4731: PUSH
4732: LD_STRING 
4734: ST_TO_ADDR
// hc_gallery :=  ;
4735: LD_ADDR_OWVAR 33
4739: PUSH
4740: LD_STRING 
4742: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4743: LD_INT 1
4745: PPUSH
4746: LD_INT 10
4748: PPUSH
4749: CALL_OW 381
// Kurt := CreateHuman ;
4753: LD_ADDR_EXP 17
4757: PUSH
4758: CALL_OW 44
4762: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4763: LD_EXP 18
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4778: LD_EXP 17
4782: PPUSH
4783: LD_EXP 18
4787: PPUSH
4788: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4792: LD_EXP 17
4796: PPUSH
4797: LD_STRING AltKurt
4799: PPUSH
4800: CALL_OW 38
// end ; end ;
4804: LD_VAR 0 1
4808: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4809: LD_INT 0
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
// for i := 1 to 3 do
4815: LD_ADDR_VAR 0 2
4819: PUSH
4820: DOUBLE
4821: LD_INT 1
4823: DEC
4824: ST_TO_ADDR
4825: LD_INT 3
4827: PUSH
4828: FOR_TO
4829: IFFALSE 4950
// begin uc_side := 1 ;
4831: LD_ADDR_OWVAR 20
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// uc_nation := 2 ;
4839: LD_ADDR_OWVAR 21
4843: PUSH
4844: LD_INT 2
4846: ST_TO_ADDR
// hc_gallery =  ;
4847: LD_ADDR_OWVAR 33
4851: PUSH
4852: LD_STRING 
4854: ST_TO_ADDR
// hc_name =  ;
4855: LD_ADDR_OWVAR 26
4859: PUSH
4860: LD_STRING 
4862: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4863: LD_EXP 19
4867: PUSH
4868: LD_INT 0
4870: EQUAL
4871: PUSH
4872: LD_EXP 19
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: OR
4881: IFFALSE 4898
// PrepareHuman ( false , 1 , 6 ) else
4883: LD_INT 0
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: LD_INT 6
4891: PPUSH
4892: CALL_OW 380
4896: GO 4911
// PrepareHuman ( false , 1 , 8 ) ;
4898: LD_INT 0
4900: PPUSH
4901: LD_INT 1
4903: PPUSH
4904: LD_INT 8
4906: PPUSH
4907: CALL_OW 380
// un := CreateHuman ;
4911: LD_ADDR_VAR 0 3
4915: PUSH
4916: CALL_OW 44
4920: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4933: LD_VAR 0 3
4937: PPUSH
4938: LD_INT 4
4940: PPUSH
4941: LD_INT 0
4943: PPUSH
4944: CALL_OW 49
// end ;
4948: GO 4828
4950: POP
4951: POP
// vc_chassis := 14 ;
4952: LD_ADDR_OWVAR 37
4956: PUSH
4957: LD_INT 14
4959: ST_TO_ADDR
// vc_engine := 3 ;
4960: LD_ADDR_OWVAR 39
4964: PUSH
4965: LD_INT 3
4967: ST_TO_ADDR
// vc_control := 1 ;
4968: LD_ADDR_OWVAR 38
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4976: LD_ADDR_OWVAR 40
4980: PUSH
4981: LD_INT 27
4983: PUSH
4984: LD_INT 26
4986: PUSH
4987: LD_INT 28
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_INT 3
5000: PPUSH
5001: CALL_OW 12
5005: ARRAY
5006: ST_TO_ADDR
// veh := CreateVehicle ;
5007: LD_ADDR_VAR 0 4
5011: PUSH
5012: CALL_OW 45
5016: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5017: LD_VAR 0 4
5021: PPUSH
5022: LD_INT 4
5024: PPUSH
5025: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5029: LD_VAR 0 4
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: LD_INT 0
5039: PPUSH
5040: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5044: LD_EXP 19
5048: PUSH
5049: LD_INT 0
5051: EQUAL
5052: PUSH
5053: LD_EXP 19
5057: PUSH
5058: LD_INT 2
5060: EQUAL
5061: OR
5062: IFFALSE 5079
// PrepareHuman ( false , 3 , 6 ) else
5064: LD_INT 0
5066: PPUSH
5067: LD_INT 3
5069: PPUSH
5070: LD_INT 6
5072: PPUSH
5073: CALL_OW 380
5077: GO 5092
// PrepareHuman ( false , 3 , 8 ) ;
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 8
5087: PPUSH
5088: CALL_OW 380
// un := CreateHuman ;
5092: LD_ADDR_VAR 0 3
5096: PUSH
5097: CALL_OW 44
5101: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: CALL_OW 52
// vc_chassis := 14 ;
5116: LD_ADDR_OWVAR 37
5120: PUSH
5121: LD_INT 14
5123: ST_TO_ADDR
// vc_engine := 3 ;
5124: LD_ADDR_OWVAR 39
5128: PUSH
5129: LD_INT 3
5131: ST_TO_ADDR
// vc_control := 1 ;
5132: LD_ADDR_OWVAR 38
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5140: LD_ADDR_OWVAR 40
5144: PUSH
5145: LD_INT 27
5147: PUSH
5148: LD_INT 26
5150: PUSH
5151: LD_INT 28
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 1
5161: PPUSH
5162: LD_INT 3
5164: PPUSH
5165: CALL_OW 12
5169: ARRAY
5170: ST_TO_ADDR
// veh := CreateVehicle ;
5171: LD_ADDR_VAR 0 4
5175: PUSH
5176: CALL_OW 45
5180: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5181: LD_VAR 0 4
5185: PPUSH
5186: LD_INT 4
5188: PPUSH
5189: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5193: LD_VAR 0 4
5197: PPUSH
5198: LD_INT 4
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5208: LD_EXP 19
5212: PUSH
5213: LD_INT 0
5215: EQUAL
5216: PUSH
5217: LD_EXP 19
5221: PUSH
5222: LD_INT 2
5224: EQUAL
5225: OR
5226: IFFALSE 5243
// PrepareHuman ( false , 4 , 6 ) else
5228: LD_INT 0
5230: PPUSH
5231: LD_INT 4
5233: PPUSH
5234: LD_INT 6
5236: PPUSH
5237: CALL_OW 380
5241: GO 5256
// PrepareHuman ( false , 4 , 8 ) ;
5243: LD_INT 0
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: LD_INT 8
5251: PPUSH
5252: CALL_OW 380
// un := CreateHuman ;
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: CALL_OW 44
5265: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5266: LD_VAR 0 3
5270: PPUSH
5271: LD_INT 4
5273: PPUSH
5274: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5278: LD_VAR 0 3
5282: PPUSH
5283: LD_VAR 0 4
5287: PPUSH
5288: CALL_OW 52
// vc_chassis := 14 ;
5292: LD_ADDR_OWVAR 37
5296: PUSH
5297: LD_INT 14
5299: ST_TO_ADDR
// vc_engine := 3 ;
5300: LD_ADDR_OWVAR 39
5304: PUSH
5305: LD_INT 3
5307: ST_TO_ADDR
// vc_control := 1 ;
5308: LD_ADDR_OWVAR 38
5312: PUSH
5313: LD_INT 1
5315: ST_TO_ADDR
// vc_weapon := 26 ;
5316: LD_ADDR_OWVAR 40
5320: PUSH
5321: LD_INT 26
5323: ST_TO_ADDR
// veh := CreateVehicle ;
5324: LD_ADDR_VAR 0 4
5328: PUSH
5329: CALL_OW 45
5333: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 4
5341: PPUSH
5342: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5346: LD_VAR 0 4
5350: PPUSH
5351: LD_INT 4
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5361: LD_EXP 19
5365: PUSH
5366: LD_INT 0
5368: EQUAL
5369: PUSH
5370: LD_EXP 19
5374: PUSH
5375: LD_INT 2
5377: EQUAL
5378: OR
5379: IFFALSE 5396
// PrepareHuman ( false , 2 , 4 ) else
5381: LD_INT 0
5383: PPUSH
5384: LD_INT 2
5386: PPUSH
5387: LD_INT 4
5389: PPUSH
5390: CALL_OW 380
5394: GO 5409
// PrepareHuman ( false , 2 , 8 ) ;
5396: LD_INT 0
5398: PPUSH
5399: LD_INT 2
5401: PPUSH
5402: LD_INT 8
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5419: LD_VAR 0 3
5423: PPUSH
5424: LD_INT 4
5426: PPUSH
5427: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5431: LD_VAR 0 3
5435: PPUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 52
// end ;
5445: LD_VAR 0 1
5449: RET
// export function PrepareAttackLegion ; var i , un ; begin
5450: LD_INT 0
5452: PPUSH
5453: PPUSH
5454: PPUSH
// for i := 1 to 4 do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 4
5467: PUSH
5468: FOR_TO
5469: IFFALSE 5579
// begin uc_side := 8 ;
5471: LD_ADDR_OWVAR 20
5475: PUSH
5476: LD_INT 8
5478: ST_TO_ADDR
// uc_nation := 2 ;
5479: LD_ADDR_OWVAR 21
5483: PUSH
5484: LD_INT 2
5486: ST_TO_ADDR
// hc_gallery :=  ;
5487: LD_ADDR_OWVAR 33
5491: PUSH
5492: LD_STRING 
5494: ST_TO_ADDR
// hc_name :=  ;
5495: LD_ADDR_OWVAR 26
5499: PUSH
5500: LD_STRING 
5502: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5503: LD_INT 0
5505: PPUSH
5506: LD_INT 1
5508: PUSH
5509: LD_INT 8
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 1
5518: PPUSH
5519: LD_INT 2
5521: PPUSH
5522: CALL_OW 12
5526: ARRAY
5527: PPUSH
5528: LD_INT 6
5530: PPUSH
5531: LD_INT 8
5533: PPUSH
5534: CALL_OW 12
5538: PPUSH
5539: CALL_OW 380
// un := CreateHuman ;
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: CALL_OW 44
5552: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5553: LD_VAR 0 3
5557: PPUSH
5558: LD_INT 19
5560: PPUSH
5561: LD_INT 0
5563: PPUSH
5564: CALL_OW 49
// ComCrawl ( un ) ;
5568: LD_VAR 0 3
5572: PPUSH
5573: CALL_OW 137
// end ;
5577: GO 5468
5579: POP
5580: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5581: LD_INT 1
5583: PPUSH
5584: LD_INT 8
5586: PPUSH
5587: LD_INT 2
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 3
5602: PPUSH
5603: CALL 14600 0 2
// end ; end_of_file
5607: LD_VAR 0 1
5611: RET
// export function Action ; var i , tmp , group ; begin
5612: LD_INT 0
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
// InGameOn ;
5618: CALL_OW 8
// music_nat := 1 ;
5622: LD_ADDR_OWVAR 71
5626: PUSH
5627: LD_INT 1
5629: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5630: LD_ADDR_VAR 0 4
5634: PUSH
5635: LD_INT 22
5637: PUSH
5638: LD_INT 1
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL_OW 69
5649: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5650: LD_ADDR_VAR 0 3
5654: PUSH
5655: LD_EXP 1
5659: PPUSH
5660: CALL_OW 310
5664: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5674: LD_VAR 0 4
5678: PPUSH
5679: LD_INT 130
5681: PPUSH
5682: LD_INT 103
5684: PPUSH
5685: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_INT 114
5696: PPUSH
5697: LD_INT 102
5699: PPUSH
5700: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5704: LD_EXP 1
5708: PPUSH
5709: LD_STRING D1-JMM-1
5711: PPUSH
5712: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 87
// if IsOk ( Donaldson ) then
5725: LD_EXP 3
5729: PPUSH
5730: CALL_OW 302
5734: IFFALSE 5799
// begin Say ( Donaldson , D1-Don-1 ) ;
5736: LD_EXP 3
5740: PPUSH
5741: LD_STRING D1-Don-1
5743: PPUSH
5744: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5748: LD_VAR 0 3
5752: PPUSH
5753: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5757: LD_EXP 1
5761: PPUSH
5762: LD_STRING D1-JMM-2
5764: PPUSH
5765: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5778: LD_EXP 3
5782: PPUSH
5783: LD_STRING D1-Don-2
5785: PPUSH
5786: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5790: LD_VAR 0 3
5794: PPUSH
5795: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5799: LD_VAR 0 4
5803: PPUSH
5804: LD_INT 110
5806: PPUSH
5807: LD_INT 101
5809: PPUSH
5810: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5814: LD_INT 35
5816: PPUSH
5817: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5821: LD_VAR 0 3
5825: PPUSH
5826: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5830: LD_INT 1
5832: PPUSH
5833: LD_INT 102
5835: PPUSH
5836: LD_INT 94
5838: PPUSH
5839: CALL_OW 293
5843: IFFALSE 5814
// CenterOnXY ( 102 , 94 ) ;
5845: LD_INT 102
5847: PPUSH
5848: LD_INT 94
5850: PPUSH
5851: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5855: LD_VAR 0 4
5859: PPUSH
5860: LD_INT 26
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: PPUSH
5875: LD_STRING D1-Sol1-2
5877: PPUSH
5878: LD_STRING 
5880: PPUSH
5881: CALL 12260 0 3
// Say ( JMM , D1-JMM-3 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D1-JMM-3
5892: PPUSH
5893: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5897: LD_STRING M1
5899: PPUSH
5900: CALL_OW 337
// for i in group do
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_VAR 0 4
5913: PUSH
5914: FOR_IN
5915: IFFALSE 5934
// ComMoveXY ( i , 95 , 84 ) ;
5917: LD_VAR 0 2
5921: PPUSH
5922: LD_INT 95
5924: PPUSH
5925: LD_INT 84
5927: PPUSH
5928: CALL_OW 111
5932: GO 5914
5934: POP
5935: POP
// end ;
5936: LD_VAR 0 1
5940: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5941: LD_INT 7
5943: PPUSH
5944: LD_INT 22
5946: PUSH
5947: LD_INT 1
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 70
5958: PUSH
5959: LD_INT 1
5961: GREATER
5962: IFFALSE 6612
5964: GO 5966
5966: DISABLE
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
5971: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: LD_INT 8
5979: PPUSH
5980: LD_INT 22
5982: PUSH
5983: LD_INT 3
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 25
5992: PUSH
5993: LD_INT 9
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 70
6008: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6009: LD_VAR 0 2
6013: PPUSH
6014: LD_INT 96
6016: PPUSH
6017: LD_INT 85
6019: PPUSH
6020: CALL_OW 154
// for i := 1 to 5 do
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: DOUBLE
6030: LD_INT 1
6032: DEC
6033: ST_TO_ADDR
6034: LD_INT 5
6036: PUSH
6037: FOR_TO
6038: IFFALSE 6057
// AddComTimeShift ( tmp , 96 , 85 ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_INT 96
6047: PPUSH
6048: LD_INT 85
6050: PPUSH
6051: CALL_OW 214
6055: GO 6037
6057: POP
6058: POP
// wait ( 0 0$2 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6066: LD_EXP 1
6070: PPUSH
6071: LD_STRING D1a-JMM-1
6073: PPUSH
6074: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6078: LD_EXP 3
6082: PPUSH
6083: LD_STRING D1a-Don-1
6085: PPUSH
6086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6090: LD_ADDR_VAR 0 1
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 69
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6130
// ComMoveXY ( i , 109 , 102 ) ;
6113: LD_VAR 0 1
6117: PPUSH
6118: LD_INT 109
6120: PPUSH
6121: LD_INT 102
6123: PPUSH
6124: CALL_OW 111
6128: GO 6110
6130: POP
6131: POP
// Say ( JMM , D1a-JMM-2 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D1a-JMM-2
6139: PPUSH
6140: CALL_OW 88
// wait ( 0 0$10 ) ;
6144: LD_INT 350
6146: PPUSH
6147: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6151: LD_EXP 1
6155: PPUSH
6156: CALL_OW 310
6160: PPUSH
6161: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1b-Don-1
6172: PPUSH
6173: CALL_OW 88
// if IsOk ( Donaldson ) then
6177: LD_EXP 3
6181: PPUSH
6182: CALL_OW 302
6186: IFFALSE 6200
// Say ( JMM , D1b-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D1b-JMM-1
6195: PPUSH
6196: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 25
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 25
6275: PUSH
6276: LD_INT 8
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PPUSH
6302: LD_STRING D1b-Sol1-1
6304: PPUSH
6305: LD_STRING 
6307: PPUSH
6308: CALL 12260 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6312: LD_EXP 3
6316: PPUSH
6317: LD_STRING D1b-Don-2
6319: PPUSH
6320: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6324: LD_EXP 1
6328: PPUSH
6329: LD_STRING D1b-JMM-2
6331: PPUSH
6332: CALL_OW 88
// dec := ShowQuery1 ;
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: CALL 12723 0 0
6345: ST_TO_ADDR
// if dec = 1 then
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 1
6353: EQUAL
6354: IFFALSE 6460
// begin Say ( JMM , D2-JMM-1 ) ;
6356: LD_EXP 1
6360: PPUSH
6361: LD_STRING D2-JMM-1
6363: PPUSH
6364: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6368: LD_EXP 15
6372: PPUSH
6373: LD_STRING D2-Pow-1
6375: PPUSH
6376: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6380: LD_EXP 1
6384: PPUSH
6385: LD_STRING D2a-JMM-1
6387: PPUSH
6388: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6392: LD_EXP 15
6396: PPUSH
6397: LD_STRING D2a-Pow-1
6399: PPUSH
6400: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6404: LD_EXP 1
6408: PPUSH
6409: LD_STRING D2a-JMM-2
6411: PPUSH
6412: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6416: LD_EXP 15
6420: PPUSH
6421: LD_STRING D2a-Pow-2
6423: PPUSH
6424: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6428: LD_EXP 1
6432: PPUSH
6433: LD_STRING D2a-JMM-3
6435: PPUSH
6436: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6440: LD_EXP 15
6444: PPUSH
6445: LD_STRING D2a-Pow-3
6447: PPUSH
6448: CALL_OW 94
// secondPass := 2 ;
6452: LD_ADDR_EXP 20
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// end ; if dec = 2 then
6460: LD_VAR 0 3
6464: PUSH
6465: LD_INT 2
6467: EQUAL
6468: IFFALSE 6562
// begin Say ( JMM , D2-JMM-1 ) ;
6470: LD_EXP 1
6474: PPUSH
6475: LD_STRING D2-JMM-1
6477: PPUSH
6478: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6482: LD_EXP 15
6486: PPUSH
6487: LD_STRING D2-Pow-1
6489: PPUSH
6490: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6494: LD_EXP 1
6498: PPUSH
6499: LD_STRING D2b-JMM-1
6501: PPUSH
6502: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6506: LD_EXP 15
6510: PPUSH
6511: LD_STRING D2b-Pow-1
6513: PPUSH
6514: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6518: LD_EXP 1
6522: PPUSH
6523: LD_STRING D2c-JMM-1
6525: PPUSH
6526: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6530: LD_EXP 15
6534: PPUSH
6535: LD_STRING D2c-Pow-1
6537: PPUSH
6538: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6542: LD_EXP 1
6546: PPUSH
6547: LD_STRING D2c-JMM-2
6549: PPUSH
6550: CALL_OW 88
// secondPass := 2 ;
6554: LD_ADDR_EXP 20
6558: PUSH
6559: LD_INT 2
6561: ST_TO_ADDR
// end ; if dec = 3 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 3
6569: EQUAL
6570: IFFALSE 6580
// secondPass := 1 ;
6572: LD_ADDR_EXP 20
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// ruAI := 1 ;
6584: LD_ADDR_EXP 34
6588: PUSH
6589: LD_INT 1
6591: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6592: LD_INT 1
6594: PPUSH
6595: LD_INT 3
6597: PPUSH
6598: LD_INT 2
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 80
// SaveForQuickRestart ;
6608: CALL_OW 22
// end ;
6612: PPOPN 3
6614: END
// every 1 1$0 trigger secondPass = 2 do
6615: LD_EXP 20
6619: PUSH
6620: LD_INT 2
6622: EQUAL
6623: IFFALSE 6843
6625: GO 6627
6627: DISABLE
// begin PowellSupport1 ;
6628: CALL 1985 0 0
// DialogueOn ;
6632: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6636: LD_EXP 1
6640: PPUSH
6641: LD_STRING DC1-JMM-1
6643: PPUSH
6644: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6648: LD_EXP 15
6652: PPUSH
6653: LD_STRING DC1-Pow-1
6655: PPUSH
6656: CALL_OW 94
// DialogueOff ;
6660: CALL_OW 7
// wait ( 3 3$0 ) ;
6664: LD_INT 6300
6666: PPUSH
6667: CALL_OW 67
// PowellSupport2 ;
6671: CALL 2466 0 0
// DialogueOn ;
6675: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6679: LD_EXP 1
6683: PPUSH
6684: LD_STRING DC2-JMM-1
6686: PPUSH
6687: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6691: LD_EXP 15
6695: PPUSH
6696: LD_STRING DC2-Pow-1
6698: PPUSH
6699: CALL_OW 94
// DialogueOff ;
6703: CALL_OW 7
// wait ( 3 3$00 ) ;
6707: LD_INT 6300
6709: PPUSH
6710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6714: LD_INT 35
6716: PPUSH
6717: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6721: LD_INT 22
6723: PUSH
6724: LD_INT 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 30
6736: PUSH
6737: LD_INT 0
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 30
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: PUSH
6768: LD_INT 11
6770: PPUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 70
6785: NOT
6786: AND
6787: IFFALSE 6714
// wait ( 0 0$10 ) ;
6789: LD_INT 350
6791: PPUSH
6792: CALL_OW 67
// Legion ;
6796: CALL 6844 0 0
// wait ( 5 5$0 ) ;
6800: LD_INT 10500
6802: PPUSH
6803: CALL_OW 67
// PowellSupport3 ;
6807: CALL 3079 0 0
// DialogueOn ;
6811: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6815: LD_EXP 15
6819: PPUSH
6820: LD_STRING DC3-Pow-1
6822: PPUSH
6823: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6827: LD_EXP 1
6831: PPUSH
6832: LD_STRING DC3-JMM-1
6834: PPUSH
6835: CALL_OW 88
// DialogueOff ;
6839: CALL_OW 7
// end ;
6843: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
6860: PPUSH
6861: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6862: LD_ADDR_VAR 0 5
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 21
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 0
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 30
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 69
6924: ST_TO_ADDR
// crates := 0 ;
6925: LD_ADDR_VAR 0 8
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// oil := 0 ;
6933: LD_ADDR_VAR 0 9
6937: PUSH
6938: LD_INT 0
6940: ST_TO_ADDR
// siberite := 0 ;
6941: LD_ADDR_VAR 0 10
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// payForNeutral := false ;
6949: LD_ADDR_VAR 0 13
6953: PUSH
6954: LD_INT 0
6956: ST_TO_ADDR
// payForHelp := false ;
6957: LD_ADDR_VAR 0 14
6961: PUSH
6962: LD_INT 0
6964: ST_TO_ADDR
// for i in tmp do
6965: LD_ADDR_VAR 0 2
6969: PUSH
6970: LD_VAR 0 5
6974: PUSH
6975: FOR_IN
6976: IFFALSE 7067
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_VAR 0 8
6987: PUSH
6988: LD_VAR 0 2
6992: PPUSH
6993: CALL_OW 274
6997: PPUSH
6998: LD_INT 1
7000: PPUSH
7001: CALL_OW 275
7005: PLUS
7006: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7007: LD_ADDR_VAR 0 9
7011: PUSH
7012: LD_VAR 0 9
7016: PUSH
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 274
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 275
7034: PLUS
7035: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_VAR 0 10
7045: PUSH
7046: LD_VAR 0 2
7050: PPUSH
7051: CALL_OW 274
7055: PPUSH
7056: LD_INT 3
7058: PPUSH
7059: CALL_OW 275
7063: PLUS
7064: ST_TO_ADDR
// end ;
7065: GO 6975
7067: POP
7068: POP
// PrepareKurt ;
7069: CALL 4606 0 0
// if not Kurt then
7073: LD_EXP 17
7077: NOT
7078: IFFALSE 7082
// exit ;
7080: GO 9201
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7082: LD_EXP 18
7086: PPUSH
7087: LD_INT 144
7089: PPUSH
7090: LD_INT 111
7092: PPUSH
7093: CALL_OW 111
// wait ( 0 0$2 ) ;
7097: LD_INT 70
7099: PPUSH
7100: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7104: LD_INT 167
7106: PPUSH
7107: LD_INT 121
7109: PPUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_INT 10
7115: NEG
7116: PPUSH
7117: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7121: LD_EXP 17
7125: PPUSH
7126: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7130: LD_EXP 17
7134: PPUSH
7135: CALL_OW 87
// wait ( 0 0$1 ) ;
7139: LD_INT 35
7141: PPUSH
7142: CALL_OW 67
// DialogueOn ;
7146: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7150: LD_INT 22
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 26
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 25
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 25
7185: PUSH
7186: LD_INT 2
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 25
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 25
7215: PUSH
7216: LD_INT 5
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 25
7225: PUSH
7226: LD_INT 8
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: PPUSH
7247: CALL_OW 69
7251: PPUSH
7252: LD_STRING D3-Sol1-1
7254: PPUSH
7255: LD_STRING 
7257: PPUSH
7258: CALL 12260 0 3
// if KurtStatus then
7262: LD_EXP 19
7266: IFFALSE 7366
// begin Say ( Kurt , D3-Kurt-1 ) ;
7268: LD_EXP 17
7272: PPUSH
7273: LD_STRING D3-Kurt-1
7275: PPUSH
7276: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7280: LD_EXP 1
7284: PPUSH
7285: LD_STRING D3-JMM-1
7287: PPUSH
7288: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7292: LD_EXP 17
7296: PPUSH
7297: LD_STRING D3-Kurt-2
7299: PPUSH
7300: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7304: LD_EXP 1
7308: PPUSH
7309: LD_STRING D3-JMM-2
7311: PPUSH
7312: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7316: LD_EXP 17
7320: PPUSH
7321: LD_STRING D3-Kurt-4
7323: PPUSH
7324: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7328: LD_EXP 1
7332: PPUSH
7333: LD_STRING D3-JMM-4
7335: PPUSH
7336: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7340: LD_EXP 17
7344: PPUSH
7345: LD_STRING D3-Kurt-5
7347: PPUSH
7348: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7352: LD_EXP 17
7356: PPUSH
7357: LD_STRING D3-Kurt-5a
7359: PPUSH
7360: CALL_OW 88
// end else
7364: GO 7462
// begin Say ( Kurt , D3-Kurt-1 ) ;
7366: LD_EXP 17
7370: PPUSH
7371: LD_STRING D3-Kurt-1
7373: PPUSH
7374: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7378: LD_EXP 1
7382: PPUSH
7383: LD_STRING D3-JMM-1
7385: PPUSH
7386: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7390: LD_EXP 17
7394: PPUSH
7395: LD_STRING D3-Kurt-3
7397: PPUSH
7398: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7402: LD_EXP 1
7406: PPUSH
7407: LD_STRING D3-JMM-3
7409: PPUSH
7410: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7414: LD_EXP 17
7418: PPUSH
7419: LD_STRING D3-Kurt-4
7421: PPUSH
7422: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D3-JMM-4
7433: PPUSH
7434: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7438: LD_EXP 17
7442: PPUSH
7443: LD_STRING D3-Kurt-5
7445: PPUSH
7446: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7450: LD_EXP 17
7454: PPUSH
7455: LD_STRING D3-Kurt-5b
7457: PPUSH
7458: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7462: LD_VAR 0 8
7466: PUSH
7467: LD_INT 120
7469: PUSH
7470: LD_INT 60
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_EXP 19
7481: PUSH
7482: LD_INT 1
7484: PLUS
7485: ARRAY
7486: GREATEREQUAL
7487: PUSH
7488: LD_VAR 0 10
7492: PUSH
7493: LD_INT 120
7495: PUSH
7496: LD_INT 60
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_EXP 19
7507: PUSH
7508: LD_INT 1
7510: PLUS
7511: ARRAY
7512: GREATEREQUAL
7513: AND
7514: IFFALSE 7566
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7516: LD_ADDR_VAR 0 3
7520: PUSH
7521: LD_STRING Q2
7523: PUSH
7524: LD_STRING Q2K
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_EXP 19
7535: PUSH
7536: LD_INT 1
7538: PLUS
7539: ARRAY
7540: PPUSH
7541: LD_INT 1
7543: PUSH
7544: LD_INT 2
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 4
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PPUSH
7559: CALL_OW 98
7563: ST_TO_ADDR
7564: GO 7610
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7566: LD_ADDR_VAR 0 3
7570: PUSH
7571: LD_STRING Q2
7573: PUSH
7574: LD_STRING Q2K
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_EXP 19
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ARRAY
7590: PPUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 4
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
// if dec1 = 1 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 7652
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7620: LD_EXP 1
7624: PPUSH
7625: LD_STRING D3Ka-JMM-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7632: LD_EXP 17
7636: PPUSH
7637: LD_STRING D3Ka-Kurt-1
7639: PPUSH
7640: CALL_OW 88
// warWithLegion = 1 ;
7644: LD_ADDR_EXP 23
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// end ; if dec1 = 2 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 2
7659: EQUAL
7660: IFFALSE 7744
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7662: LD_EXP 1
7666: PPUSH
7667: LD_STRING D3Kb-JMM-1
7669: PPUSH
7670: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7674: LD_EXP 17
7678: PPUSH
7679: LD_STRING D3Kb-Kurt-1
7681: PPUSH
7682: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7686: LD_ADDR_VAR 0 11
7690: PUSH
7691: LD_INT 120
7693: PUSH
7694: LD_INT 60
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_INT 1
7708: PLUS
7709: ARRAY
7710: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7711: LD_ADDR_VAR 0 12
7715: PUSH
7716: LD_INT 120
7718: PUSH
7719: LD_INT 60
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_EXP 19
7730: PUSH
7731: LD_INT 1
7733: PLUS
7734: ARRAY
7735: ST_TO_ADDR
// payForNeutral := true ;
7736: LD_ADDR_VAR 0 13
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// end ; if dec1 = 3 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 3
7751: EQUAL
7752: IFFALSE 7987
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7754: LD_EXP 1
7758: PPUSH
7759: LD_STRING D3Kc1-JMM-1
7761: PPUSH
7762: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7766: LD_EXP 17
7770: PPUSH
7771: LD_STRING D3Kc1-Kurt-1
7773: PPUSH
7774: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7778: LD_EXP 1
7782: PPUSH
7783: LD_STRING D3Kc1-JMM-2
7785: PPUSH
7786: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7790: LD_EXP 17
7794: PPUSH
7795: LD_STRING D3Kc1-Kurt-2
7797: PPUSH
7798: CALL_OW 88
// askSiberite = 1 ;
7802: LD_ADDR_EXP 25
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7810: LD_ADDR_VAR 0 4
7814: PUSH
7815: LD_STRING Q2b
7817: PPUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 98
7836: ST_TO_ADDR
// if dec2 = 1 then
7837: LD_VAR 0 4
7841: PUSH
7842: LD_INT 1
7844: EQUAL
7845: IFFALSE 7879
// begin Say ( JMM , D4a-JMM-1 ) ;
7847: LD_EXP 1
7851: PPUSH
7852: LD_STRING D4a-JMM-1
7854: PPUSH
7855: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7859: LD_EXP 17
7863: PPUSH
7864: LD_STRING D4b-Kurt-1
7866: PPUSH
7867: CALL_OW 88
// warWithLegion = 1 ;
7871: LD_ADDR_EXP 23
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// end ; if dec2 = 2 then
7879: LD_VAR 0 4
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: IFFALSE 7921
// begin Say ( JMM , D4b-JMM-1 ) ;
7889: LD_EXP 1
7893: PPUSH
7894: LD_STRING D4b-JMM-1
7896: PPUSH
7897: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7901: LD_EXP 17
7905: PPUSH
7906: LD_STRING D4b-Kurt-1
7908: PPUSH
7909: CALL_OW 88
// warWithLegion = 1 ;
7913: LD_ADDR_EXP 23
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// end ; if dec2 = 3 then
7921: LD_VAR 0 4
7925: PUSH
7926: LD_INT 3
7928: EQUAL
7929: IFFALSE 7987
// begin Say ( JMM , D4c-JMM-1 ) ;
7931: LD_EXP 1
7935: PPUSH
7936: LD_STRING D4c-JMM-1
7938: PPUSH
7939: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7943: LD_EXP 17
7947: PPUSH
7948: LD_STRING D4c-Kurt-1
7950: PPUSH
7951: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7955: LD_EXP 1
7959: PPUSH
7960: LD_STRING D4c-JMM-2
7962: PPUSH
7963: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7967: LD_EXP 17
7971: PPUSH
7972: LD_STRING D4c-Kurt-2
7974: PPUSH
7975: CALL_OW 88
// fakeInfo = 1 ;
7979: LD_ADDR_EXP 24
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 4
7994: EQUAL
7995: IFFALSE 9057
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7997: LD_EXP 1
8001: PPUSH
8002: LD_STRING D3Kd-JMM-1
8004: PPUSH
8005: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8009: LD_VAR 0 8
8013: PUSH
8014: LD_INT 200
8016: PUSH
8017: LD_INT 120
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_EXP 19
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ARRAY
8033: GREATEREQUAL
8034: PUSH
8035: LD_VAR 0 10
8039: PUSH
8040: LD_INT 200
8042: PUSH
8043: LD_INT 120
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_EXP 19
8054: PUSH
8055: LD_INT 1
8057: PLUS
8058: ARRAY
8059: GREATEREQUAL
8060: AND
8061: IFFALSE 8113
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8063: LD_ADDR_VAR 0 4
8067: PUSH
8068: LD_STRING Q2a
8070: PUSH
8071: LD_STRING Q2aK
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_EXP 19
8082: PUSH
8083: LD_INT 1
8085: PLUS
8086: ARRAY
8087: PPUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: LD_INT 3
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 98
8110: ST_TO_ADDR
8111: GO 8277
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8113: LD_VAR 0 8
8117: PUSH
8118: LD_INT 120
8120: PUSH
8121: LD_INT 60
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_EXP 19
8132: PUSH
8133: LD_INT 1
8135: PLUS
8136: ARRAY
8137: GREATEREQUAL
8138: PUSH
8139: LD_VAR 0 10
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 60
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_EXP 19
8158: PUSH
8159: LD_INT 1
8161: PLUS
8162: ARRAY
8163: GREATEREQUAL
8164: AND
8165: IFFALSE 8213
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8167: LD_ADDR_VAR 0 4
8171: PUSH
8172: LD_STRING Q2a
8174: PUSH
8175: LD_STRING Q2aK
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_EXP 19
8186: PUSH
8187: LD_INT 1
8189: PLUS
8190: ARRAY
8191: PPUSH
8192: LD_INT 1
8194: PUSH
8195: LD_INT 2
8197: PUSH
8198: LD_INT 4
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 98
8210: ST_TO_ADDR
8211: GO 8277
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8213: LD_STRING Q2d
8215: PUSH
8216: LD_STRING Q2dK
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 19
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: PPUSH
8233: CALL_OW 97
// dec2 := 0 ;
8237: LD_ADDR_VAR 0 4
8241: PUSH
8242: LD_INT 0
8244: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8245: LD_EXP 1
8249: PPUSH
8250: LD_STRING D3Kc1-JMM-1
8252: PPUSH
8253: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8257: LD_EXP 17
8261: PPUSH
8262: LD_STRING D3Kc2-Kurt-1
8264: PPUSH
8265: CALL_OW 88
// warWithLegion := 1 ;
8269: LD_ADDR_EXP 23
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// end ; if dec2 = 1 then
8277: LD_VAR 0 4
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8319
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8287: LD_EXP 1
8291: PPUSH
8292: LD_STRING D5Ka-JMM-1
8294: PPUSH
8295: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8299: LD_EXP 17
8303: PPUSH
8304: LD_STRING D5Ka-Kurt-1
8306: PPUSH
8307: CALL_OW 88
// warWithLegion = 1 ;
8311: LD_ADDR_EXP 23
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// end ; if dec2 = 2 then
8319: LD_VAR 0 4
8323: PUSH
8324: LD_INT 2
8326: EQUAL
8327: IFFALSE 8411
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8329: LD_EXP 1
8333: PPUSH
8334: LD_STRING D3Kb-JMM-1
8336: PPUSH
8337: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8341: LD_EXP 17
8345: PPUSH
8346: LD_STRING D3Kb-Kurt-1
8348: PPUSH
8349: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8353: LD_ADDR_VAR 0 11
8357: PUSH
8358: LD_INT 120
8360: PUSH
8361: LD_INT 60
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_EXP 19
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ARRAY
8377: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8378: LD_ADDR_VAR 0 12
8382: PUSH
8383: LD_INT 120
8385: PUSH
8386: LD_INT 60
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_INT 1
8400: PLUS
8401: ARRAY
8402: ST_TO_ADDR
// payForNeutral := true ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// end ; if dec2 = 3 then
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: IFFALSE 8503
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8421: LD_EXP 1
8425: PPUSH
8426: LD_STRING D3Ke-JMM-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8433: LD_EXP 17
8437: PPUSH
8438: LD_STRING D3Ke-Kurt-1
8440: PPUSH
8441: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8445: LD_ADDR_VAR 0 11
8449: PUSH
8450: LD_INT 200
8452: PUSH
8453: LD_INT 120
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_EXP 19
8464: PUSH
8465: LD_INT 1
8467: PLUS
8468: ARRAY
8469: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8470: LD_ADDR_VAR 0 12
8474: PUSH
8475: LD_INT 200
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_EXP 19
8489: PUSH
8490: LD_INT 1
8492: PLUS
8493: ARRAY
8494: ST_TO_ADDR
// payForHelp := true ;
8495: LD_ADDR_VAR 0 14
8499: PUSH
8500: LD_INT 1
8502: ST_TO_ADDR
// end ; if dec2 = 4 then
8503: LD_VAR 0 4
8507: PUSH
8508: LD_INT 4
8510: EQUAL
8511: IFFALSE 8746
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8513: LD_EXP 1
8517: PPUSH
8518: LD_STRING D3Kc1-JMM-1
8520: PPUSH
8521: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8525: LD_EXP 17
8529: PPUSH
8530: LD_STRING D3Kc1-Kurt-1
8532: PPUSH
8533: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D3Kc1-JMM-2
8544: PPUSH
8545: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8549: LD_EXP 17
8553: PPUSH
8554: LD_STRING D3Kc1-Kurt-2
8556: PPUSH
8557: CALL_OW 88
// askSiberite = 1 ;
8561: LD_ADDR_EXP 25
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8569: LD_ADDR_VAR 0 4
8573: PUSH
8574: LD_STRING Q2b
8576: PPUSH
8577: LD_INT 1
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: LD_INT 3
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 98
8595: ST_TO_ADDR
// if dec2 = 1 then
8596: LD_VAR 0 4
8600: PUSH
8601: LD_INT 1
8603: EQUAL
8604: IFFALSE 8638
// begin Say ( JMM , D4a-JMM-1 ) ;
8606: LD_EXP 1
8610: PPUSH
8611: LD_STRING D4a-JMM-1
8613: PPUSH
8614: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D4b-Kurt-1
8625: PPUSH
8626: CALL_OW 88
// warWithLegion = 1 ;
8630: LD_ADDR_EXP 23
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// end ; if dec2 = 2 then
8638: LD_VAR 0 4
8642: PUSH
8643: LD_INT 2
8645: EQUAL
8646: IFFALSE 8680
// begin Say ( JMM , D4b-JMM-1 ) ;
8648: LD_EXP 1
8652: PPUSH
8653: LD_STRING D4b-JMM-1
8655: PPUSH
8656: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8660: LD_EXP 17
8664: PPUSH
8665: LD_STRING D4b-Kurt-1
8667: PPUSH
8668: CALL_OW 88
// warWithLegion = 1 ;
8672: LD_ADDR_EXP 23
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ; if dec2 = 3 then
8680: LD_VAR 0 4
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: IFFALSE 8746
// begin Say ( JMM , D4c-JMM-1 ) ;
8690: LD_EXP 1
8694: PPUSH
8695: LD_STRING D4c-JMM-1
8697: PPUSH
8698: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8702: LD_EXP 17
8706: PPUSH
8707: LD_STRING D4c-Kurt-1
8709: PPUSH
8710: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4c-JMM-2
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8726: LD_EXP 17
8730: PPUSH
8731: LD_STRING D4c-Kurt-2
8733: PPUSH
8734: CALL_OW 88
// fakeInfo = 1 ;
8738: LD_ADDR_EXP 24
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8746: LD_VAR 0 13
8750: PUSH
8751: LD_VAR 0 14
8755: OR
8756: IFFALSE 9057
// begin for i in tmp do
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_VAR 0 5
8767: PUSH
8768: FOR_IN
8769: IFFALSE 9055
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 274
8785: PPUSH
8786: LD_INT 1
8788: PPUSH
8789: CALL_OW 275
8793: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8794: LD_ADDR_VAR 0 7
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 3
8811: PPUSH
8812: CALL_OW 275
8816: ST_TO_ADDR
// if cr then
8817: LD_VAR 0 11
8821: IFFALSE 8935
// begin if tmp2 and tmp2 < cr then
8823: LD_VAR 0 6
8827: PUSH
8828: LD_VAR 0 6
8832: PUSH
8833: LD_VAR 0 11
8837: LESS
8838: AND
8839: IFFALSE 8887
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL_OW 274
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_VAR 0 11
8858: PUSH
8859: LD_VAR 0 6
8863: MINUS
8864: PPUSH
8865: CALL_OW 277
// cr := cr - tmp2 ;
8869: LD_ADDR_VAR 0 11
8873: PUSH
8874: LD_VAR 0 11
8878: PUSH
8879: LD_VAR 0 6
8883: MINUS
8884: ST_TO_ADDR
// end else
8885: GO 8935
// if tmp2 > cr then
8887: LD_VAR 0 6
8891: PUSH
8892: LD_VAR 0 11
8896: GREATER
8897: IFFALSE 8935
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 274
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_VAR 0 6
8916: PUSH
8917: LD_VAR 0 11
8921: MINUS
8922: PPUSH
8923: CALL_OW 277
// cr := 0 ;
8927: LD_ADDR_VAR 0 11
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// end ; end ; if sb then
8935: LD_VAR 0 12
8939: IFFALSE 9053
// begin if tmp3 and tmp3 < sb then
8941: LD_VAR 0 7
8945: PUSH
8946: LD_VAR 0 7
8950: PUSH
8951: LD_VAR 0 12
8955: LESS
8956: AND
8957: IFFALSE 9005
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: CALL_OW 274
8968: PPUSH
8969: LD_INT 3
8971: PPUSH
8972: LD_VAR 0 12
8976: PUSH
8977: LD_VAR 0 7
8981: MINUS
8982: PPUSH
8983: CALL_OW 277
// sb := sb - tmp3 ;
8987: LD_ADDR_VAR 0 12
8991: PUSH
8992: LD_VAR 0 12
8996: PUSH
8997: LD_VAR 0 7
9001: MINUS
9002: ST_TO_ADDR
// end else
9003: GO 9053
// if tmp3 > sb then
9005: LD_VAR 0 7
9009: PUSH
9010: LD_VAR 0 12
9014: GREATER
9015: IFFALSE 9053
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9017: LD_VAR 0 2
9021: PPUSH
9022: CALL_OW 274
9026: PPUSH
9027: LD_INT 3
9029: PPUSH
9030: LD_VAR 0 7
9034: PUSH
9035: LD_VAR 0 12
9039: MINUS
9040: PPUSH
9041: CALL_OW 277
// sb := 0 ;
9045: LD_ADDR_VAR 0 12
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// end ; end ; end ;
9053: GO 8768
9055: POP
9056: POP
// end ; end ; DialogueOff ;
9057: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9061: LD_INT 167
9063: PPUSH
9064: LD_INT 121
9066: PPUSH
9067: LD_INT 1
9069: PPUSH
9070: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9074: LD_EXP 17
9078: PPUSH
9079: LD_EXP 18
9083: PPUSH
9084: CALL_OW 120
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9095: LD_EXP 18
9099: PPUSH
9100: LD_INT 4
9102: PPUSH
9103: CALL_OW 113
// wait ( 0 0$3 ) ;
9107: LD_INT 105
9109: PPUSH
9110: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9114: LD_EXP 17
9118: PPUSH
9119: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9123: LD_EXP 18
9127: PPUSH
9128: CALL_OW 64
// wait ( 0 0$3 ) ;
9132: LD_INT 105
9134: PPUSH
9135: CALL_OW 67
// if payForHelp then
9139: LD_VAR 0 14
9143: IFFALSE 9201
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9145: LD_INT 36
9147: PPUSH
9148: LD_INT 57
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9158: LD_INT 51
9160: PPUSH
9161: LD_INT 63
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9171: LD_INT 93
9173: PPUSH
9174: LD_INT 65
9176: PPUSH
9177: LD_INT 1
9179: PPUSH
9180: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9184: LD_INT 42
9186: PPUSH
9187: LD_INT 12
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL_OW 244
// PrepareLegionForPlayer ;
9197: CALL 4809 0 0
// end ; end ;
9201: LD_VAR 0 1
9205: RET
// every 0 0$10 trigger warWithLegion = 1 do
9206: LD_EXP 23
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9230
9216: GO 9218
9218: DISABLE
// begin wait ( 0 0$30 ) ;
9219: LD_INT 1050
9221: PPUSH
9222: CALL_OW 67
// PrepareAttackLegion ;
9226: CALL 5450 0 0
// end ;
9230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9231: LD_INT 120
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 52
9243: PUSH
9244: EMPTY
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: IFFALSE 9400
9257: GO 9259
9259: DISABLE
9260: LD_INT 0
9262: PPUSH
// begin enable ;
9263: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_INT 120
9271: PUSH
9272: LD_INT 17
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 52
9281: PUSH
9282: EMPTY
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PPUSH
9289: CALL_OW 69
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9398
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL 79978 0 1
9306: PUSH
9307: LD_INT 4
9309: ARRAY
9310: PUSH
9311: LD_INT 0
9313: EQUAL
9314: PUSH
9315: LD_VAR 0 1
9319: PPUSH
9320: CALL_OW 255
9324: PUSH
9325: LD_INT 1
9327: EQUAL
9328: AND
9329: IFFALSE 9343
// SetSide ( i , 4 ) ;
9331: LD_VAR 0 1
9335: PPUSH
9336: LD_INT 4
9338: PPUSH
9339: CALL_OW 235
// if GetSide ( i ) = 4 then
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 255
9352: PUSH
9353: LD_INT 4
9355: EQUAL
9356: IFFALSE 9396
// if not IsInArea ( i , PlayerSpawn ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 4
9365: PPUSH
9366: CALL_OW 308
9370: NOT
9371: IFFALSE 9387
// ComMoveToArea ( i , PlayerSpawn ) else
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 4
9380: PPUSH
9381: CALL_OW 113
9385: GO 9396
// RemoveUnit ( i ) ;
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 64
// end ;
9396: GO 9294
9398: POP
9399: POP
// end ;
9400: PPOPN 1
9402: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9403: LD_EXP 20
9407: PUSH
9408: LD_INT 1
9410: EQUAL
9411: PUSH
9412: LD_INT 12
9414: PPUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 101
9427: PUSH
9428: LD_INT 1
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 2
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: PPUSH
9450: CALL_OW 70
9454: AND
9455: IFFALSE 10004
9457: GO 9459
9459: DISABLE
9460: LD_INT 0
9462: PPUSH
9463: PPUSH
9464: PPUSH
// begin DialogueOn ;
9465: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9478: LD_INT 22
9480: PUSH
9481: LD_INT 1
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 26
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 25
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 25
9523: PUSH
9524: LD_INT 3
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 4
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 25
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 25
9553: PUSH
9554: LD_INT 8
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: PPUSH
9575: CALL_OW 69
9579: PPUSH
9580: LD_STRING DT1-Sol1-1
9582: PPUSH
9583: LD_STRING DT1-FSol1-1
9585: PPUSH
9586: CALL 12260 0 3
// dec := ShowQuery2 ;
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: CALL 12744 0 0
9599: ST_TO_ADDR
// if dec = 1 then
9600: LD_VAR 0 3
9604: PUSH
9605: LD_INT 1
9607: EQUAL
9608: IFFALSE 9714
// begin Say ( JMM , D2-JMM-1 ) ;
9610: LD_EXP 1
9614: PPUSH
9615: LD_STRING D2-JMM-1
9617: PPUSH
9618: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9622: LD_EXP 15
9626: PPUSH
9627: LD_STRING D2-Pow-1
9629: PPUSH
9630: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9634: LD_EXP 1
9638: PPUSH
9639: LD_STRING D2a-JMM-1
9641: PPUSH
9642: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_STRING D2a-Pow-1
9653: PPUSH
9654: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9658: LD_EXP 1
9662: PPUSH
9663: LD_STRING D2a-JMM-2
9665: PPUSH
9666: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9670: LD_EXP 15
9674: PPUSH
9675: LD_STRING D2a-Pow-2
9677: PPUSH
9678: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9682: LD_EXP 1
9686: PPUSH
9687: LD_STRING D2a-JMM-3
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9694: LD_EXP 15
9698: PPUSH
9699: LD_STRING D2a-Pow-3
9701: PPUSH
9702: CALL_OW 94
// secondPass := 2 ;
9706: LD_ADDR_EXP 20
9710: PUSH
9711: LD_INT 2
9713: ST_TO_ADDR
// end ; if dec = 2 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9816
// begin Say ( JMM , D2-JMM-1 ) ;
9724: LD_EXP 1
9728: PPUSH
9729: LD_STRING D2-JMM-1
9731: PPUSH
9732: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9736: LD_EXP 15
9740: PPUSH
9741: LD_STRING D2-Pow-1
9743: PPUSH
9744: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9748: LD_EXP 1
9752: PPUSH
9753: LD_STRING D2b-JMM-1
9755: PPUSH
9756: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9760: LD_EXP 15
9764: PPUSH
9765: LD_STRING D2b-Pow-1
9767: PPUSH
9768: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9772: LD_EXP 1
9776: PPUSH
9777: LD_STRING D2c-JMM-1
9779: PPUSH
9780: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9784: LD_EXP 15
9788: PPUSH
9789: LD_STRING D2c-Pow-1
9791: PPUSH
9792: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9796: LD_EXP 1
9800: PPUSH
9801: LD_STRING D2c-JMM-2
9803: PPUSH
9804: CALL_OW 88
// secondPass := 2 ;
9808: LD_ADDR_EXP 20
9812: PUSH
9813: LD_INT 2
9815: ST_TO_ADDR
// end ; DialogueOff ;
9816: CALL_OW 7
// if secondPass = 2 then
9820: LD_EXP 20
9824: PUSH
9825: LD_INT 2
9827: EQUAL
9828: IFFALSE 9832
// exit ;
9830: GO 10004
// Query ( HelpRequest ) ;
9832: LD_STRING HelpRequest
9834: PPUSH
9835: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9839: LD_INT 27
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9849: LD_INT 35
9851: PPUSH
9852: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9856: LD_EXP 1
9860: PPUSH
9861: LD_INT 27
9863: PPUSH
9864: CALL_OW 308
9868: IFFALSE 9849
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9870: LD_INT 27
9872: PPUSH
9873: LD_INT 0
9875: PPUSH
9876: CALL_OW 424
// DialogueOn ;
9880: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9884: LD_EXP 1
9888: PPUSH
9889: LD_STRING D2-JMM-1
9891: PPUSH
9892: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9896: LD_EXP 15
9900: PPUSH
9901: LD_STRING D2-Pow-1
9903: PPUSH
9904: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9908: LD_EXP 1
9912: PPUSH
9913: LD_STRING D2b-JMM-1
9915: PPUSH
9916: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9920: LD_EXP 15
9924: PPUSH
9925: LD_STRING D2a-Pow-2
9927: PPUSH
9928: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9932: LD_EXP 1
9936: PPUSH
9937: LD_STRING D2a-JMM-3
9939: PPUSH
9940: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9944: LD_EXP 15
9948: PPUSH
9949: LD_STRING D2a-Pow-3
9951: PPUSH
9952: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9956: LD_EXP 1
9960: PPUSH
9961: LD_STRING D2c-JMM-1
9963: PPUSH
9964: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9968: LD_EXP 15
9972: PPUSH
9973: LD_STRING D2c-Pow-1
9975: PPUSH
9976: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9980: LD_EXP 1
9984: PPUSH
9985: LD_STRING D2c-JMM-2
9987: PPUSH
9988: CALL_OW 88
// DialogueOff ;
9992: CALL_OW 7
// secondPass := 2 ;
9996: LD_ADDR_EXP 20
10000: PUSH
10001: LD_INT 2
10003: ST_TO_ADDR
// end ;
10004: PPOPN 3
10006: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10007: LD_EXP 21
10011: PUSH
10012: LD_INT 1
10014: EQUAL
10015: PUSH
10016: LD_INT 11
10018: PPUSH
10019: LD_INT 22
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 70
10033: AND
10034: IFFALSE 10515
10036: GO 10038
10038: DISABLE
10039: LD_INT 0
10041: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10042: LD_ADDR_VAR 0 1
10046: PUSH
10047: LD_INT 11
10049: PPUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 70
10064: ST_TO_ADDR
// if not vehicles then
10065: LD_VAR 0 1
10069: NOT
10070: IFFALSE 10074
// exit ;
10072: GO 10515
// repeat wait ( 0 0$1 ) ;
10074: LD_INT 35
10076: PPUSH
10077: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10081: LD_VAR 0 1
10085: PPUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 72
10100: IFFALSE 10074
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10102: LD_VAR 0 1
10106: PPUSH
10107: LD_INT 101
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 72
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: PPUSH
10126: CALL_OW 87
// DialogueOn ;
10130: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10134: LD_INT 22
10136: PUSH
10137: LD_INT 1
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 26
10146: PUSH
10147: LD_INT 1
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 23
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: LD_INT 25
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 25
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 25
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 25
10199: PUSH
10200: LD_INT 4
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 25
10219: PUSH
10220: LD_INT 8
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 69
10246: PPUSH
10247: LD_STRING DT1-Sol1-1
10249: PPUSH
10250: LD_STRING DT1-FSol1-1
10252: PPUSH
10253: CALL 12260 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10257: LD_EXP 1
10261: PPUSH
10262: LD_STRING DT1-JMM-1
10264: PPUSH
10265: CALL_OW 88
// DialogueOff ;
10269: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10273: LD_INT 175
10275: PPUSH
10276: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10280: LD_INT 11
10282: PPUSH
10283: LD_INT 22
10285: PUSH
10286: LD_INT 3
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 50
10295: PUSH
10296: EMPTY
10297: LIST
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 21
10314: PUSH
10315: LD_INT 1
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 70
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 22
10345: PUSH
10346: LD_INT 2
10348: GREATER
10349: AND
10350: IFFALSE 10273
// DialogueOn ;
10352: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10356: LD_EXP 1
10360: PPUSH
10361: LD_STRING DT1a-JMM-1
10363: PPUSH
10364: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10368: LD_INT 22
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 26
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 23
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 25
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 25
10433: PUSH
10434: LD_INT 4
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 25
10443: PUSH
10444: LD_INT 5
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 25
10453: PUSH
10454: LD_INT 8
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: PPUSH
10481: LD_STRING DT1a-Sol1-1
10483: PPUSH
10484: LD_STRING DT1a-FSol1-1
10486: PPUSH
10487: CALL 12260 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10491: LD_EXP 1
10495: PPUSH
10496: LD_STRING DT1a-JMM-2
10498: PPUSH
10499: CALL_OW 88
// DialogueOff ;
10503: CALL_OW 7
// vehicleTeleported := 2 ;
10507: LD_ADDR_EXP 21
10511: PUSH
10512: LD_INT 2
10514: ST_TO_ADDR
// end ;
10515: PPOPN 1
10517: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10518: LD_EXP 21
10522: PUSH
10523: LD_INT 3
10525: EQUAL
10526: PUSH
10527: LD_INT 11
10529: PPUSH
10530: LD_INT 22
10532: PUSH
10533: LD_INT 3
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 1
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 70
10558: AND
10559: IFFALSE 10844
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin wait ( 0 0$0.3 ) ;
10569: LD_INT 10
10571: PPUSH
10572: CALL_OW 67
// DialogueOn ;
10576: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 23
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 26
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 25
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 25
10640: PUSH
10641: LD_INT 3
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 25
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 25
10660: PUSH
10661: LD_INT 5
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 25
10670: PUSH
10671: LD_INT 8
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 69
10697: PPUSH
10698: LD_STRING DT2-Sol1-1
10700: PPUSH
10701: LD_STRING DT2-FSol1-1
10703: PPUSH
10704: CALL 12260 0 3
10708: ST_TO_ADDR
// DialogueOff ;
10709: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10713: LD_INT 175
10715: PPUSH
10716: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10720: LD_INT 11
10722: PPUSH
10723: LD_INT 22
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 50
10735: PUSH
10736: EMPTY
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 70
10747: NOT
10748: IFFALSE 10713
// wait ( 0 0$2 ) ;
10750: LD_INT 70
10752: PPUSH
10753: CALL_OW 67
// vehicleTeleported := 4 ;
10757: LD_ADDR_EXP 21
10761: PUSH
10762: LD_INT 4
10764: ST_TO_ADDR
// DialogueOn ;
10765: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10769: LD_EXP 1
10773: PPUSH
10774: LD_STRING DT2a-JMM-1
10776: PPUSH
10777: CALL_OW 88
// if speaker then
10781: LD_VAR 0 3
10785: IFFALSE 10828
// if GetSex ( speaker ) = 1 then
10787: LD_VAR 0 3
10791: PPUSH
10792: CALL_OW 258
10796: PUSH
10797: LD_INT 1
10799: EQUAL
10800: IFFALSE 10816
// Say ( speaker , DT2a-Sol1-1 ) else
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_STRING DT2a-Sol1-1
10809: PPUSH
10810: CALL_OW 88
10814: GO 10828
// Say ( speaker , DT2a-FSol1-1 ) ;
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_STRING DT2a-FSol1-1
10823: PPUSH
10824: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10828: LD_EXP 3
10832: PPUSH
10833: LD_STRING DT2a-Don-1
10835: PPUSH
10836: CALL_OW 88
// DialogueOff ;
10840: CALL_OW 7
// end ;
10844: PPOPN 3
10846: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 45
10852: PPUSH
10853: LD_INT 74
10855: PPUSH
10856: CALL_OW 293
10860: IFFALSE 11035
10862: GO 10864
10864: DISABLE
// begin DialogueOn ;
10865: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10869: LD_INT 36
10871: PPUSH
10872: LD_INT 55
10874: PPUSH
10875: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10879: LD_INT 22
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 26
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 2
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 1
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 25
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 25
10944: PUSH
10945: LD_INT 4
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 25
10954: PUSH
10955: LD_INT 5
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 25
10964: PUSH
10965: LD_INT 8
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: PPUSH
10992: LD_STRING D5-Sol1-1
10994: PPUSH
10995: LD_STRING D5-FSol1-
10997: PPUSH
10998: CALL 12260 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11002: LD_EXP 23
11006: PUSH
11007: LD_EXP 3
11011: PPUSH
11012: CALL_OW 302
11016: AND
11017: IFFALSE 11031
// Say ( Donaldson , D5-Don-1 ) ;
11019: LD_EXP 3
11023: PPUSH
11024: LD_STRING D5-Don-1
11026: PPUSH
11027: CALL_OW 88
// DialogueOff ;
11031: CALL_OW 7
// end ;
11035: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11036: LD_INT 1
11038: PPUSH
11039: LD_INT 10
11041: PPUSH
11042: CALL_OW 292
11046: PUSH
11047: LD_INT 1
11049: PPUSH
11050: LD_INT 137
11052: PPUSH
11053: CALL_OW 292
11057: OR
11058: IFFALSE 11213
11060: GO 11062
11062: DISABLE
// begin DialogueOn ;
11063: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11067: LD_INT 22
11069: PUSH
11070: LD_INT 1
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 26
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 2
11099: PUSH
11100: LD_INT 25
11102: PUSH
11103: LD_INT 1
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 25
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 25
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 4
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 25
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 8
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PPUSH
11180: LD_STRING DT3-Sol1-1
11182: PPUSH
11183: LD_STRING DT3-FSol1-1
11185: PPUSH
11186: CALL 12260 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11190: LD_EXP 1
11194: PPUSH
11195: LD_STRING DT3-JMM-1
11197: PPUSH
11198: CALL_OW 88
// DialogueOff ;
11202: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11206: LD_STRING M2
11208: PPUSH
11209: CALL_OW 337
// end ;
11213: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11214: LD_EXP 35
11218: PUSH
11219: LD_INT 0
11221: EQUAL
11222: PUSH
11223: LD_INT 10
11225: PPUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 70
11240: PUSH
11241: LD_INT 10
11243: PPUSH
11244: LD_INT 22
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 24
11259: PUSH
11260: LD_INT 800
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 21
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 58
11283: PUSH
11284: EMPTY
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 70
11297: OR
11298: AND
11299: IFFALSE 11312
11301: GO 11303
11303: DISABLE
// ruEscape := 1 ;
11304: LD_ADDR_EXP 35
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
11312: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11313: LD_INT 3
11315: PPUSH
11316: CALL_OW 303
11320: PUSH
11321: LD_INT 4
11323: PPUSH
11324: CALL_OW 303
11328: OR
11329: PUSH
11330: LD_EXP 35
11334: PUSH
11335: LD_INT 1
11337: EQUAL
11338: OR
11339: IFFALSE 11928
11341: GO 11343
11343: DISABLE
11344: LD_INT 0
11346: PPUSH
11347: PPUSH
11348: PPUSH
// begin ruAI := 0 ;
11349: LD_ADDR_EXP 34
11353: PUSH
11354: LD_INT 0
11356: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11357: LD_EXP 27
11361: PPUSH
11362: CALL_OW 122
// wait ( 0 0$1 ) ;
11366: LD_INT 35
11368: PPUSH
11369: CALL_OW 67
// DialogueOn ;
11373: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11377: LD_INT 75
11379: PPUSH
11380: LD_INT 21
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: LD_INT 12
11388: PPUSH
11389: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11393: LD_INT 75
11395: PPUSH
11396: LD_INT 21
11398: PPUSH
11399: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11403: LD_INT 10
11405: PPUSH
11406: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11410: LD_EXP 1
11414: PPUSH
11415: LD_STRING D6-JMM-1
11417: PPUSH
11418: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11422: LD_INT 75
11424: PPUSH
11425: LD_INT 21
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 331
// DialogueOff ;
11435: CALL_OW 7
// for i in RuScientists do
11439: LD_ADDR_VAR 0 1
11443: PUSH
11444: LD_EXP 27
11448: PUSH
11449: FOR_IN
11450: IFFALSE 11486
// begin SetSide ( i , 6 ) ;
11452: LD_VAR 0 1
11456: PPUSH
11457: LD_INT 6
11459: PPUSH
11460: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11464: LD_VAR 0 1
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: LD_INT 3
11474: PPUSH
11475: CALL_OW 12
11479: PPUSH
11480: CALL_OW 109
// end ;
11484: GO 11449
11486: POP
11487: POP
// repeat wait ( 0 0$1 ) ;
11488: LD_INT 35
11490: PPUSH
11491: CALL_OW 67
// for i in RuScientists do
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: LD_EXP 27
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11919
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11508: LD_ADDR_VAR 0 3
11512: PUSH
11513: LD_INT 22
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 91
11525: PUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 10
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 21
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 58
11551: PUSH
11552: EMPTY
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11566: LD_VAR 0 3
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 310
11580: NOT
11581: AND
11582: IFFALSE 11610
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11584: LD_VAR 0 1
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: LD_VAR 0 1
11598: PPUSH
11599: CALL_OW 74
11603: PPUSH
11604: CALL_OW 120
// continue ;
11608: GO 11505
// end ; if IsInUnit ( i ) then
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 310
11619: IFFALSE 11638
// unit := IsInUnit ( i ) else
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL_OW 310
11635: ST_TO_ADDR
11636: GO 11648
// unit := i ;
11638: LD_ADDR_VAR 0 2
11642: PUSH
11643: LD_VAR 0 1
11647: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11648: LD_VAR 0 1
11652: PPUSH
11653: CALL_OW 110
11657: PUSH
11658: LD_INT 1
11660: DOUBLE
11661: EQUAL
11662: IFTRUE 11666
11664: GO 11725
11666: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11667: LD_VAR 0 2
11671: PPUSH
11672: LD_INT 137
11674: PPUSH
11675: CALL_OW 296
11679: PUSH
11680: LD_INT 13
11682: LESS
11683: PUSH
11684: LD_INT 137
11686: PPUSH
11687: CALL_OW 302
11691: AND
11692: IFFALSE 11708
// ComEnterUnit ( unit , rutp ) else
11694: LD_VAR 0 2
11698: PPUSH
11699: LD_INT 137
11701: PPUSH
11702: CALL_OW 120
11706: GO 11723
// ComMoveXY ( unit , 16 , 28 ) ;
11708: LD_VAR 0 2
11712: PPUSH
11713: LD_INT 16
11715: PPUSH
11716: LD_INT 28
11718: PPUSH
11719: CALL_OW 111
// end ; 2 :
11723: GO 11917
11725: LD_INT 2
11727: DOUBLE
11728: EQUAL
11729: IFTRUE 11733
11731: GO 11751
11733: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11734: LD_VAR 0 2
11738: PPUSH
11739: LD_INT 97
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: CALL_OW 111
11749: GO 11917
11751: LD_INT 3
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 11818
11759: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11760: LD_VAR 0 2
11764: PPUSH
11765: LD_INT 137
11767: PPUSH
11768: CALL_OW 296
11772: PUSH
11773: LD_INT 13
11775: LESS
11776: PUSH
11777: LD_INT 137
11779: PPUSH
11780: CALL_OW 302
11784: AND
11785: IFFALSE 11801
// ComEnterUnit ( unit , rutp ) else
11787: LD_VAR 0 2
11791: PPUSH
11792: LD_INT 137
11794: PPUSH
11795: CALL_OW 120
11799: GO 11816
// ComMoveXY ( unit , 128 , 155 ) ;
11801: LD_VAR 0 2
11805: PPUSH
11806: LD_INT 128
11808: PPUSH
11809: LD_INT 155
11811: PPUSH
11812: CALL_OW 111
// end ; 11 :
11816: GO 11917
11818: LD_INT 11
11820: DOUBLE
11821: EQUAL
11822: IFTRUE 11826
11824: GO 11844
11826: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11827: LD_VAR 0 2
11831: PPUSH
11832: LD_INT 16
11834: PPUSH
11835: LD_INT 28
11837: PPUSH
11838: CALL_OW 111
11842: GO 11917
11844: LD_INT 13
11846: DOUBLE
11847: EQUAL
11848: IFTRUE 11852
11850: GO 11890
11852: POP
// begin if IsOk ( ruteleprt ) then
11853: LD_INT 10
11855: PPUSH
11856: CALL_OW 302
11860: IFFALSE 11876
// ComEnterUnit ( unit , ruteleprt ) else
11862: LD_VAR 0 2
11866: PPUSH
11867: LD_INT 10
11869: PPUSH
11870: CALL_OW 120
11874: GO 11888
// SetTag ( unit , 23 ) ;
11876: LD_VAR 0 2
11880: PPUSH
11881: LD_INT 23
11883: PPUSH
11884: CALL_OW 109
// end ; 23 :
11888: GO 11917
11890: LD_INT 23
11892: DOUBLE
11893: EQUAL
11894: IFTRUE 11898
11896: GO 11916
11898: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11899: LD_VAR 0 2
11903: PPUSH
11904: LD_INT 128
11906: PPUSH
11907: LD_INT 155
11909: PPUSH
11910: CALL_OW 111
11914: GO 11917
11916: POP
// end ;
11917: GO 11505
11919: POP
11920: POP
// until not RuScientists ;
11921: LD_EXP 27
11925: NOT
11926: IFFALSE 11488
// end ;
11928: PPOPN 3
11930: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11931: LD_EXP 34
11935: PUSH
11936: LD_INT 0
11938: EQUAL
11939: PUSH
11940: LD_EXP 27
11944: AND
11945: PUSH
11946: LD_INT 22
11948: PUSH
11949: LD_INT 6
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: LD_INT 95
11961: PUSH
11962: LD_INT 13
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 95
11971: PUSH
11972: LD_INT 14
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 95
11981: PUSH
11982: LD_INT 25
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 69
12003: AND
12004: IFFALSE 12217
12006: GO 12008
12008: DISABLE
12009: LD_INT 0
12011: PPUSH
12012: PPUSH
12013: PPUSH
12014: PPUSH
// begin enable ;
12015: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12016: LD_ADDR_VAR 0 1
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_INT 6
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: LD_INT 95
12036: PUSH
12037: LD_INT 13
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 95
12046: PUSH
12047: LD_INT 14
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 95
12056: PUSH
12057: LD_INT 25
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: PUSH
12079: FOR_IN
12080: IFFALSE 12215
// begin if i in RuScientists then
12082: LD_VAR 0 1
12086: PUSH
12087: LD_EXP 27
12091: IN
12092: IFFALSE 12121
// begin RuScientists = RuScientists diff i ;
12094: LD_ADDR_EXP 27
12098: PUSH
12099: LD_EXP 27
12103: PUSH
12104: LD_VAR 0 1
12108: DIFF
12109: ST_TO_ADDR
// RemoveUnit ( i ) ;
12110: LD_VAR 0 1
12114: PPUSH
12115: CALL_OW 64
// continue ;
12119: GO 12079
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 22
12128: PUSH
12129: LD_INT 6
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 33
12138: PUSH
12139: LD_INT 1
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 69
12154: IN
12155: IFFALSE 12213
// begin if IsDrivenBy ( i ) in RuScientists then
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 311
12166: PUSH
12167: LD_EXP 27
12171: IN
12172: IFFALSE 12190
// RuScientists = RuScientists diff i ;
12174: LD_ADDR_EXP 27
12178: PUSH
12179: LD_EXP 27
12183: PUSH
12184: LD_VAR 0 1
12188: DIFF
12189: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: CALL_OW 311
12199: PPUSH
12200: CALL_OW 64
// RemoveUnit ( i ) ;
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 64
// end ; end ;
12213: GO 12079
12215: POP
12216: POP
// end ; end_of_file
12217: PPOPN 4
12219: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12220: LD_INT 0
12222: PPUSH
12223: PPUSH
// for i in charactersList do
12224: LD_ADDR_VAR 0 4
12228: PUSH
12229: LD_VAR 0 1
12233: PUSH
12234: FOR_IN
12235: IFFALSE 12253
// SaveCharacters ( i , ident ) ;
12237: LD_VAR 0 4
12241: PPUSH
12242: LD_VAR 0 2
12246: PPUSH
12247: CALL_OW 38
12251: GO 12234
12253: POP
12254: POP
// end ;
12255: LD_VAR 0 3
12259: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12260: LD_INT 0
12262: PPUSH
12263: PPUSH
12264: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12265: LD_ADDR_VAR 0 1
12269: PUSH
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 1
12279: PUSH
12280: LD_EXP 7
12284: PUSH
12285: LD_EXP 3
12289: PUSH
12290: LD_EXP 4
12294: PUSH
12295: LD_EXP 5
12299: PUSH
12300: LD_EXP 2
12304: PUSH
12305: LD_EXP 12
12309: PUSH
12310: LD_EXP 13
12314: PUSH
12315: LD_EXP 9
12319: PUSH
12320: LD_EXP 11
12324: PUSH
12325: LD_EXP 6
12329: PUSH
12330: LD_EXP 8
12334: PUSH
12335: LD_EXP 10
12339: PUSH
12340: LD_EXP 15
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: DIFF
12361: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12362: LD_ADDR_VAR 0 6
12366: PUSH
12367: LD_VAR 0 1
12371: PUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_VAR 0 1
12379: PPUSH
12380: CALL_OW 12
12384: ARRAY
12385: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12386: LD_VAR 0 6
12390: PPUSH
12391: CALL_OW 258
12395: PUSH
12396: LD_INT 1
12398: EQUAL
12399: IFFALSE 12417
// Say ( speaker , dialogMID ) else
12401: LD_VAR 0 6
12405: PPUSH
12406: LD_VAR 0 2
12410: PPUSH
12411: CALL_OW 88
12415: GO 12431
// Say ( speaker , dialogFID ) ;
12417: LD_VAR 0 6
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: CALL_OW 88
// result := speaker ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: LD_VAR 0 6
12440: ST_TO_ADDR
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PrepareDifficulty ; var tmp ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// if Difficulty = 1 then
12450: LD_OWVAR 67
12454: PUSH
12455: LD_INT 1
12457: EQUAL
12458: IFFALSE 12478
// begin RuSolMinLevel = 8 ;
12460: LD_ADDR_EXP 29
12464: PUSH
12465: LD_INT 8
12467: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12468: LD_ADDR_EXP 30
12472: PUSH
12473: LD_INT 10
12475: ST_TO_ADDR
// end else
12476: GO 12718
// if Difficulty = 2 then
12478: LD_OWVAR 67
12482: PUSH
12483: LD_INT 2
12485: EQUAL
12486: IFFALSE 12582
// begin RuSolMinLevel = 9 ;
12488: LD_ADDR_EXP 29
12492: PUSH
12493: LD_INT 9
12495: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12496: LD_ADDR_EXP 30
12500: PUSH
12501: LD_INT 10
12503: ST_TO_ADDR
// uc_nation = 3 ;
12504: LD_ADDR_OWVAR 21
12508: PUSH
12509: LD_INT 3
12511: ST_TO_ADDR
// uc_side = 3 ;
12512: LD_ADDR_OWVAR 20
12516: PUSH
12517: LD_INT 3
12519: ST_TO_ADDR
// bc_level = 10 ;
12520: LD_ADDR_OWVAR 43
12524: PUSH
12525: LD_INT 10
12527: ST_TO_ADDR
// bc_type = b_turret ;
12528: LD_ADDR_OWVAR 42
12532: PUSH
12533: LD_INT 33
12535: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: LD_INT 86
12543: PPUSH
12544: LD_INT 34
12546: PPUSH
12547: LD_INT 2
12549: PPUSH
12550: CALL_OW 47
12554: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12555: LD_VAR 0 2
12559: PPUSH
12560: LD_INT 49
12562: PPUSH
12563: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12567: LD_INT 64
12569: PPUSH
12570: LD_INT 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 322
// end else
12580: GO 12718
// begin RuSolMinLevel = 10 ;
12582: LD_ADDR_EXP 29
12586: PUSH
12587: LD_INT 10
12589: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12590: LD_ADDR_EXP 30
12594: PUSH
12595: LD_INT 10
12597: ST_TO_ADDR
// uc_nation = 3 ;
12598: LD_ADDR_OWVAR 21
12602: PUSH
12603: LD_INT 3
12605: ST_TO_ADDR
// uc_side = 3 ;
12606: LD_ADDR_OWVAR 20
12610: PUSH
12611: LD_INT 3
12613: ST_TO_ADDR
// bc_level = 10 ;
12614: LD_ADDR_OWVAR 43
12618: PUSH
12619: LD_INT 10
12621: ST_TO_ADDR
// bc_type = b_turret ;
12622: LD_ADDR_OWVAR 42
12626: PUSH
12627: LD_INT 33
12629: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12630: LD_ADDR_VAR 0 2
12634: PUSH
12635: LD_INT 86
12637: PPUSH
12638: LD_INT 34
12640: PPUSH
12641: LD_INT 2
12643: PPUSH
12644: CALL_OW 47
12648: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12649: LD_VAR 0 2
12653: PPUSH
12654: LD_INT 49
12656: PPUSH
12657: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_INT 93
12668: PPUSH
12669: LD_INT 31
12671: PPUSH
12672: LD_INT 2
12674: PPUSH
12675: CALL_OW 47
12679: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12680: LD_VAR 0 2
12684: PPUSH
12685: LD_INT 49
12687: PPUSH
12688: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12692: LD_INT 64
12694: PPUSH
12695: LD_INT 3
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12705: LD_INT 65
12707: PPUSH
12708: LD_INT 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// end ; end ;
12718: LD_VAR 0 1
12722: RET
// export function ShowQuery1 ; begin
12723: LD_INT 0
12725: PPUSH
// result := Query ( Q1 ) ;
12726: LD_ADDR_VAR 0 1
12730: PUSH
12731: LD_STRING Q1
12733: PPUSH
12734: CALL_OW 97
12738: ST_TO_ADDR
// end ;
12739: LD_VAR 0 1
12743: RET
// export function ShowQuery2 ; begin
12744: LD_INT 0
12746: PPUSH
// result := Query ( Q1a ) ;
12747: LD_ADDR_VAR 0 1
12751: PUSH
12752: LD_STRING Q1a
12754: PPUSH
12755: CALL_OW 97
12759: ST_TO_ADDR
// end ;
12760: LD_VAR 0 1
12764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12765: LD_INT 0
12767: PPUSH
12768: PPUSH
12769: PPUSH
12770: PPUSH
// for i = 1 to count do
12771: LD_ADDR_VAR 0 8
12775: PUSH
12776: DOUBLE
12777: LD_INT 1
12779: DEC
12780: ST_TO_ADDR
12781: LD_VAR 0 6
12785: PUSH
12786: FOR_TO
12787: IFFALSE 12868
// begin uc_side = side ;
12789: LD_ADDR_OWVAR 20
12793: PUSH
12794: LD_VAR 0 1
12798: ST_TO_ADDR
// uc_nation = nation ;
12799: LD_ADDR_OWVAR 21
12803: PUSH
12804: LD_VAR 0 2
12808: ST_TO_ADDR
// hc_gallery =  ;
12809: LD_ADDR_OWVAR 33
12813: PUSH
12814: LD_STRING 
12816: ST_TO_ADDR
// hc_name =  ;
12817: LD_ADDR_OWVAR 26
12821: PUSH
12822: LD_STRING 
12824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12825: LD_INT 0
12827: PPUSH
12828: LD_VAR 0 5
12832: PPUSH
12833: LD_VAR 0 4
12837: PPUSH
12838: CALL_OW 380
// un = CreateHuman ;
12842: LD_ADDR_VAR 0 10
12846: PUSH
12847: CALL_OW 44
12851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12852: LD_VAR 0 10
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: CALL_OW 52
// end ;
12866: GO 12786
12868: POP
12869: POP
// end ;
12870: LD_VAR 0 7
12874: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
12879: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12880: LD_ADDR_VAR 0 6
12884: PUSH
12885: LD_INT 48
12887: PUSH
12888: LD_INT 49
12890: PUSH
12891: LD_INT 50
12893: PUSH
12894: LD_INT 20
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: LD_INT 51
12902: PUSH
12903: LD_INT 52
12905: PUSH
12906: LD_INT 69
12908: PUSH
12909: LD_INT 39
12911: PUSH
12912: LD_INT 34
12914: PUSH
12915: LD_INT 40
12917: PUSH
12918: LD_INT 53
12920: PUSH
12921: LD_INT 71
12923: PUSH
12924: LD_INT 57
12926: PUSH
12927: LD_INT 58
12929: PUSH
12930: LD_INT 44
12932: PUSH
12933: LD_INT 32
12935: PUSH
12936: LD_INT 27
12938: PUSH
12939: LD_INT 23
12941: PUSH
12942: LD_INT 33
12944: PUSH
12945: LD_INT 59
12947: PUSH
12948: LD_INT 54
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: LD_INT 56
12956: PUSH
12957: LD_INT 63
12959: PUSH
12960: LD_INT 64
12962: PUSH
12963: LD_INT 65
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 31
12971: PUSH
12972: LD_INT 21
12974: PUSH
12975: LD_INT 22
12977: PUSH
12978: LD_INT 25
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: ST_TO_ADDR
// for i := 1 to list do
13015: LD_ADDR_VAR 0 5
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_VAR 0 6
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13103
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13033: LD_VAR 0 6
13037: PUSH
13038: LD_VAR 0 5
13042: ARRAY
13043: PPUSH
13044: LD_VAR 0 1
13048: PPUSH
13049: CALL_OW 321
13053: PUSH
13054: LD_INT 1
13056: EQUAL
13057: PUSH
13058: LD_VAR 0 6
13062: PUSH
13063: LD_VAR 0 5
13067: ARRAY
13068: PPUSH
13069: LD_VAR 0 3
13073: PPUSH
13074: CALL_OW 482
13078: AND
13079: IFFALSE 13101
// AddComResearch ( lab , list [ i ] ) ;
13081: LD_VAR 0 2
13085: PPUSH
13086: LD_VAR 0 6
13090: PUSH
13091: LD_VAR 0 5
13095: ARRAY
13096: PPUSH
13097: CALL_OW 184
13101: GO 13030
13103: POP
13104: POP
// end ;
13105: LD_VAR 0 4
13109: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13110: LD_INT 0
13112: PPUSH
13113: PPUSH
13114: PPUSH
13115: PPUSH
13116: PPUSH
13117: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13118: LD_ADDR_VAR 0 8
13122: PUSH
13123: LD_VAR 0 2
13127: PPUSH
13128: CALL_OW 313
13132: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13133: LD_ADDR_VAR 0 9
13137: PUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 22
13145: PUSH
13146: LD_VAR 0 1
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 25
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 24
13167: PUSH
13168: LD_INT 750
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 3
13177: PUSH
13178: LD_INT 54
13180: PUSH
13181: EMPTY
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 70
13198: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13199: LD_ADDR_VAR 0 6
13203: PUSH
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_INT 22
13211: PUSH
13212: LD_VAR 0 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 3
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: LD_INT 24
13236: PUSH
13237: LD_INT 1000
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: PUSH
13253: EMPTY
13254: LIST
13255: PPUSH
13256: CALL_OW 70
13260: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13261: LD_VAR 0 6
13265: NOT
13266: PUSH
13267: LD_INT 22
13269: PUSH
13270: LD_VAR 0 1
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 25
13281: PUSH
13282: LD_INT 2
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 24
13291: PUSH
13292: LD_INT 250
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: NOT
13309: AND
13310: IFFALSE 13314
// exit ;
13312: GO 13472
// if buildingsList and engineerOkInside then
13314: LD_VAR 0 6
13318: PUSH
13319: LD_VAR 0 8
13323: AND
13324: IFFALSE 13335
// ComExitBuilding ( engineerOkInside ) ;
13326: LD_VAR 0 8
13330: PPUSH
13331: CALL_OW 122
// if buildingsList and engineerOkOutside then
13335: LD_VAR 0 6
13339: PUSH
13340: LD_VAR 0 9
13344: AND
13345: IFFALSE 13365
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13347: LD_VAR 0 9
13351: PPUSH
13352: LD_VAR 0 6
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13365: LD_VAR 0 6
13369: PUSH
13370: LD_INT 0
13372: EQUAL
13373: PUSH
13374: LD_VAR 0 4
13378: PUSH
13379: LD_INT 0
13381: EQUAL
13382: AND
13383: PUSH
13384: LD_VAR 0 9
13388: AND
13389: IFFALSE 13405
// ComEnterUnit ( engineerOkOutside , depot ) ;
13391: LD_VAR 0 9
13395: PPUSH
13396: LD_VAR 0 2
13400: PPUSH
13401: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13405: LD_VAR 0 9
13409: PUSH
13410: LD_VAR 0 6
13414: PUSH
13415: LD_INT 0
13417: EQUAL
13418: AND
13419: PUSH
13420: LD_VAR 0 4
13424: AND
13425: IFFALSE 13472
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13427: LD_VAR 0 9
13431: PPUSH
13432: LD_VAR 0 4
13436: PUSH
13437: LD_INT 1
13439: ARRAY
13440: PPUSH
13441: LD_VAR 0 4
13445: PUSH
13446: LD_INT 2
13448: ARRAY
13449: PPUSH
13450: LD_VAR 0 4
13454: PUSH
13455: LD_INT 3
13457: ARRAY
13458: PPUSH
13459: LD_VAR 0 4
13463: PUSH
13464: LD_INT 4
13466: ARRAY
13467: PPUSH
13468: CALL_OW 145
// end ;
13472: LD_VAR 0 5
13476: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13477: LD_INT 0
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13488: LD_ADDR_VAR 0 6
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 25
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 24
13517: PUSH
13518: LD_INT 251
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: PPUSH
13530: CALL_OW 69
13534: PUSH
13535: LD_EXP 27
13539: PUSH
13540: EMPTY
13541: LIST
13542: DIFF
13543: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13544: LD_ADDR_VAR 0 7
13548: PUSH
13549: LD_VAR 0 3
13553: PPUSH
13554: LD_INT 22
13556: PUSH
13557: LD_VAR 0 1
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 56
13568: PUSH
13569: EMPTY
13570: LIST
13571: PUSH
13572: LD_INT 25
13574: PUSH
13575: LD_INT 4
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 50
13584: PUSH
13585: EMPTY
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 70
13598: PUSH
13599: LD_EXP 27
13603: PUSH
13604: EMPTY
13605: LIST
13606: DIFF
13607: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13608: LD_ADDR_VAR 0 10
13612: PUSH
13613: LD_VAR 0 3
13617: PPUSH
13618: LD_INT 22
13620: PUSH
13621: LD_VAR 0 1
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 21
13632: PUSH
13633: LD_INT 1
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 3
13642: PUSH
13643: LD_INT 24
13645: PUSH
13646: LD_INT 750
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 70
13666: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13667: LD_ADDR_VAR 0 11
13671: PUSH
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_INT 22
13679: PUSH
13680: LD_VAR 0 1
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 21
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 3
13701: PUSH
13702: LD_INT 24
13704: PUSH
13705: LD_INT 1000
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 70
13725: ST_TO_ADDR
// if damageUnits and sciList then
13726: LD_VAR 0 10
13730: PUSH
13731: LD_VAR 0 6
13735: AND
13736: IFFALSE 13752
// ComMoveToArea ( damageUnits , healArea ) ;
13738: LD_VAR 0 10
13742: PPUSH
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13752: LD_VAR 0 11
13756: PUSH
13757: LD_VAR 0 6
13761: AND
13762: PUSH
13763: LD_VAR 0 7
13767: PUSH
13768: LD_INT 0
13770: EQUAL
13771: AND
13772: IFFALSE 13818
// for i in buildings do
13774: LD_ADDR_VAR 0 8
13778: PUSH
13779: LD_VAR 0 4
13783: PUSH
13784: FOR_IN
13785: IFFALSE 13816
// begin if UnitsInside ( i ) then
13787: LD_VAR 0 8
13791: PPUSH
13792: CALL_OW 313
13796: IFFALSE 13814
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13798: LD_VAR 0 8
13802: PPUSH
13803: CALL_OW 313
13807: PPUSH
13808: CALL_OW 122
// break ;
13812: GO 13816
// end ; end ;
13814: GO 13784
13816: POP
13817: POP
// if unitsToHeal and sciListOutside then
13818: LD_VAR 0 11
13822: PUSH
13823: LD_VAR 0 7
13827: AND
13828: IFFALSE 13848
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13830: LD_VAR 0 7
13834: PPUSH
13835: LD_VAR 0 11
13839: PUSH
13840: LD_INT 1
13842: ARRAY
13843: PPUSH
13844: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13848: LD_VAR 0 10
13852: PUSH
13853: LD_INT 0
13855: EQUAL
13856: PUSH
13857: LD_VAR 0 11
13861: PUSH
13862: LD_INT 0
13864: EQUAL
13865: AND
13866: PUSH
13867: LD_VAR 0 7
13871: AND
13872: IFFALSE 13940
// begin tmp := buildings ;
13874: LD_ADDR_VAR 0 12
13878: PUSH
13879: LD_VAR 0 4
13883: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13884: LD_ADDR_VAR 0 13
13888: PUSH
13889: LD_INT 1
13891: PPUSH
13892: LD_VAR 0 12
13896: PPUSH
13897: CALL_OW 12
13901: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13902: LD_VAR 0 7
13906: PPUSH
13907: LD_INT 3
13909: PUSH
13910: LD_INT 60
13912: PUSH
13913: EMPTY
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 72
13924: PPUSH
13925: LD_VAR 0 12
13929: PUSH
13930: LD_VAR 0 13
13934: ARRAY
13935: PPUSH
13936: CALL_OW 120
// end ; end ;
13940: LD_VAR 0 5
13944: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13945: LD_INT 0
13947: PPUSH
13948: PPUSH
13949: PPUSH
13950: PPUSH
13951: PPUSH
13952: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13953: LD_ADDR_VAR 0 7
13957: PUSH
13958: LD_VAR 0 2
13962: PPUSH
13963: LD_INT 22
13965: PUSH
13966: LD_VAR 0 1
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: LD_INT 21
13977: PUSH
13978: LD_INT 2
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 34
13987: PUSH
13988: LD_INT 52
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PPUSH
14000: CALL_OW 70
14004: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14005: LD_ADDR_VAR 0 8
14009: PUSH
14010: LD_VAR 0 2
14014: PPUSH
14015: LD_INT 22
14017: PUSH
14018: LD_VAR 0 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 21
14029: PUSH
14030: LD_INT 3
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 3
14039: PUSH
14040: LD_INT 24
14042: PUSH
14043: LD_INT 1000
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: PPUSH
14062: CALL_OW 70
14066: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14067: LD_VAR 0 8
14071: PUSH
14072: LD_INT 0
14074: GREATER
14075: PUSH
14076: LD_VAR 0 7
14080: PPUSH
14081: LD_INT 24
14083: PUSH
14084: LD_INT 750
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 72
14095: PUSH
14096: LD_INT 0
14098: GREATER
14099: AND
14100: IFFALSE 14120
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14102: LD_VAR 0 7
14106: PPUSH
14107: LD_VAR 0 8
14111: PUSH
14112: LD_INT 1
14114: ARRAY
14115: PPUSH
14116: CALL_OW 130
// end ;
14120: LD_VAR 0 3
14124: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14125: LD_INT 0
14127: PPUSH
14128: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 69
14159: PUSH
14160: LD_INT 18
14162: PPUSH
14163: LD_INT 22
14165: PUSH
14166: LD_VAR 0 1
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 21
14177: PUSH
14178: LD_INT 2
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 70
14193: PUSH
14194: LD_VAR 0 3
14198: LESSEQUAL
14199: DIFF
14200: IFFALSE 14267
// for i := 1 to vehCount do
14202: LD_ADDR_VAR 0 9
14206: PUSH
14207: DOUBLE
14208: LD_INT 1
14210: DEC
14211: ST_TO_ADDR
14212: LD_VAR 0 3
14216: PUSH
14217: FOR_TO
14218: IFFALSE 14265
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14220: LD_VAR 0 2
14224: PPUSH
14225: LD_VAR 0 7
14229: PPUSH
14230: LD_VAR 0 5
14234: PPUSH
14235: LD_VAR 0 6
14239: PPUSH
14240: LD_VAR 0 4
14244: PUSH
14245: LD_INT 1
14247: PPUSH
14248: LD_VAR 0 4
14252: PPUSH
14253: CALL_OW 12
14257: ARRAY
14258: PPUSH
14259: CALL_OW 185
14263: GO 14217
14265: POP
14266: POP
// end ;
14267: LD_VAR 0 8
14271: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14272: LD_INT 0
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
14279: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14280: LD_ADDR_VAR 0 6
14284: PUSH
14285: LD_INT 22
14287: PUSH
14288: LD_VAR 0 1
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 25
14299: PUSH
14300: LD_INT 9
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14316: LD_ADDR_VAR 0 7
14320: PUSH
14321: LD_INT 81
14323: PUSH
14324: LD_VAR 0 1
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 3
14335: PUSH
14336: LD_INT 21
14338: PUSH
14339: LD_INT 3
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PPUSH
14354: CALL_OW 69
14358: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14359: LD_ADDR_VAR 0 4
14363: PUSH
14364: LD_INT 1
14366: PPUSH
14367: LD_INT 3
14369: PPUSH
14370: CALL_OW 12
14374: ST_TO_ADDR
// for i := 1 to list do
14375: LD_ADDR_VAR 0 5
14379: PUSH
14380: DOUBLE
14381: LD_INT 1
14383: DEC
14384: ST_TO_ADDR
14385: LD_VAR 0 6
14389: PUSH
14390: FOR_TO
14391: IFFALSE 14593
// for ta in filter do
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_VAR 0 7
14402: PUSH
14403: FOR_IN
14404: IFFALSE 14589
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14406: LD_VAR 0 6
14410: PUSH
14411: LD_VAR 0 5
14415: ARRAY
14416: PPUSH
14417: LD_VAR 0 3
14421: PPUSH
14422: CALL_OW 296
14426: PUSH
14427: LD_INT 15
14429: LESSEQUAL
14430: IFFALSE 14587
// begin case c of 1 :
14432: LD_VAR 0 4
14436: PUSH
14437: LD_INT 1
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14483
14445: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14446: LD_VAR 0 6
14450: PUSH
14451: LD_VAR 0 5
14455: ARRAY
14456: PPUSH
14457: LD_VAR 0 3
14461: PPUSH
14462: CALL_OW 250
14466: PPUSH
14467: LD_VAR 0 3
14471: PPUSH
14472: CALL_OW 251
14476: PPUSH
14477: CALL_OW 154
14481: GO 14587
14483: LD_INT 2
14485: DOUBLE
14486: EQUAL
14487: IFTRUE 14491
14489: GO 14555
14491: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14492: LD_VAR 0 6
14496: PUSH
14497: LD_VAR 0 5
14501: ARRAY
14502: PPUSH
14503: LD_VAR 0 3
14507: PPUSH
14508: CALL_OW 250
14512: PUSH
14513: LD_INT 1
14515: NEG
14516: PPUSH
14517: LD_INT 1
14519: PPUSH
14520: CALL_OW 12
14524: PLUS
14525: PPUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: CALL_OW 251
14535: PUSH
14536: LD_INT 1
14538: NEG
14539: PPUSH
14540: LD_INT 1
14542: PPUSH
14543: CALL_OW 12
14547: PLUS
14548: PPUSH
14549: CALL_OW 153
14553: GO 14587
14555: LD_INT 3
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14586
14563: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14564: LD_VAR 0 6
14568: PUSH
14569: LD_VAR 0 5
14573: ARRAY
14574: PPUSH
14575: LD_VAR 0 3
14579: PPUSH
14580: CALL_OW 115
14584: GO 14587
14586: POP
// end ; end ;
14587: GO 14403
14589: POP
14590: POP
14591: GO 14390
14593: POP
14594: POP
// end ;
14595: LD_VAR 0 2
14599: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14600: LD_INT 0
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
// r := 100 ;
14606: LD_ADDR_VAR 0 5
14610: PUSH
14611: LD_INT 100
14613: ST_TO_ADDR
// x := 0 ;
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: LD_INT 0
14621: ST_TO_ADDR
// while ( x < n ) do
14622: LD_VAR 0 6
14626: PUSH
14627: LD_VAR 0 2
14631: LESS
14632: IFFALSE 14895
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14634: LD_ADDR_VAR 0 4
14638: PUSH
14639: DOUBLE
14640: LD_INT 1
14642: DEC
14643: ST_TO_ADDR
14644: LD_VAR 0 1
14648: PPUSH
14649: LD_INT 0
14651: PPUSH
14652: CALL_OW 517
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: PUSH
14661: FOR_TO
14662: IFFALSE 14891
// begin if r > 50 then
14664: LD_VAR 0 5
14668: PUSH
14669: LD_INT 50
14671: GREATER
14672: IFFALSE 14875
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14674: LD_VAR 0 1
14678: PPUSH
14679: LD_INT 0
14681: PPUSH
14682: CALL_OW 517
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PUSH
14691: LD_VAR 0 4
14695: ARRAY
14696: PPUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_INT 0
14704: PPUSH
14705: CALL_OW 517
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: PUSH
14714: LD_VAR 0 4
14718: ARRAY
14719: PPUSH
14720: CALL_OW 458
14724: NOT
14725: IFFALSE 14873
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14727: LD_VAR 0 1
14731: PPUSH
14732: LD_INT 0
14734: PPUSH
14735: CALL_OW 517
14739: PUSH
14740: LD_INT 1
14742: ARRAY
14743: PUSH
14744: LD_VAR 0 4
14748: ARRAY
14749: PPUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: LD_INT 0
14757: PPUSH
14758: CALL_OW 517
14762: PUSH
14763: LD_INT 2
14765: ARRAY
14766: PUSH
14767: LD_VAR 0 4
14771: ARRAY
14772: PPUSH
14773: LD_INT 8
14775: PPUSH
14776: LD_INT 0
14778: PPUSH
14779: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14783: LD_ADDR_EXP 37
14787: PUSH
14788: LD_EXP 37
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: LD_INT 0
14803: PPUSH
14804: CALL_OW 517
14808: PUSH
14809: LD_INT 1
14811: ARRAY
14812: PUSH
14813: LD_VAR 0 4
14817: ARRAY
14818: PUSH
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_INT 0
14826: PPUSH
14827: CALL_OW 517
14831: PUSH
14832: LD_INT 2
14834: ARRAY
14835: PUSH
14836: LD_VAR 0 4
14840: ARRAY
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PPUSH
14846: CALL_OW 2
14850: ST_TO_ADDR
// r := 0 ;
14851: LD_ADDR_VAR 0 5
14855: PUSH
14856: LD_INT 0
14858: ST_TO_ADDR
// x := x + 1 ;
14859: LD_ADDR_VAR 0 6
14863: PUSH
14864: LD_VAR 0 6
14868: PUSH
14869: LD_INT 1
14871: PLUS
14872: ST_TO_ADDR
// end end else
14873: GO 14889
// r := r + 35 ;
14875: LD_ADDR_VAR 0 5
14879: PUSH
14880: LD_VAR 0 5
14884: PUSH
14885: LD_INT 35
14887: PLUS
14888: ST_TO_ADDR
// end end ;
14889: GO 14661
14891: POP
14892: POP
14893: GO 14622
14895: LD_VAR 0 3
14899: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14900: LD_INT 0
14902: PPUSH
14903: PPUSH
14904: PPUSH
14905: PPUSH
14906: PPUSH
// tmp := [ ] ;
14907: LD_ADDR_VAR 0 6
14911: PUSH
14912: EMPTY
14913: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14914: LD_ADDR_VAR 0 7
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_VAR 0 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 30
14933: PUSH
14934: LD_INT 32
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: ST_TO_ADDR
// if bunkers then
14950: LD_VAR 0 7
14954: IFFALSE 15024
// for i in bunkers do
14956: LD_ADDR_VAR 0 4
14960: PUSH
14961: LD_VAR 0 7
14965: PUSH
14966: FOR_IN
14967: IFFALSE 15022
// for j in UnitsInside ( i ) do
14969: LD_ADDR_VAR 0 5
14973: PUSH
14974: LD_VAR 0 4
14978: PPUSH
14979: CALL_OW 313
14983: PUSH
14984: FOR_IN
14985: IFFALSE 15018
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14987: LD_ADDR_VAR 0 6
14991: PUSH
14992: LD_VAR 0 6
14996: PPUSH
14997: LD_VAR 0 6
15001: PUSH
15002: LD_INT 1
15004: PLUS
15005: PPUSH
15006: LD_VAR 0 5
15010: PPUSH
15011: CALL_OW 1
15015: ST_TO_ADDR
15016: GO 14984
15018: POP
15019: POP
15020: GO 14966
15022: POP
15023: POP
// if tmp then
15024: LD_VAR 0 6
15028: IFFALSE 15068
// begin ComExitBuilding ( tmp ) ;
15030: LD_VAR 0 6
15034: PPUSH
15035: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15039: LD_VAR 0 6
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL_OW 250
15053: PPUSH
15054: LD_VAR 0 2
15058: PPUSH
15059: CALL_OW 251
15063: PPUSH
15064: CALL_OW 174
// end ; end ;
15068: LD_VAR 0 3
15072: RET
// export function CreateNature ; var i , un ; begin
15073: LD_INT 0
15075: PPUSH
15076: PPUSH
15077: PPUSH
// uc_side := 0 ;
15078: LD_ADDR_OWVAR 20
15082: PUSH
15083: LD_INT 0
15085: ST_TO_ADDR
// uc_nation := 0 ;
15086: LD_ADDR_OWVAR 21
15090: PUSH
15091: LD_INT 0
15093: ST_TO_ADDR
// InitHc ;
15094: CALL_OW 19
// hc_class := class_fish ;
15098: LD_ADDR_OWVAR 28
15102: PUSH
15103: LD_INT 20
15105: ST_TO_ADDR
// for i := 1 to 6 do
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: DOUBLE
15112: LD_INT 1
15114: DEC
15115: ST_TO_ADDR
15116: LD_INT 6
15118: PUSH
15119: FOR_TO
15120: IFFALSE 15139
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15122: CALL_OW 44
15126: PPUSH
15127: LD_INT 22
15129: PPUSH
15130: LD_INT 0
15132: PPUSH
15133: CALL_OW 49
15137: GO 15119
15139: POP
15140: POP
// for i := 1 to Difficulty + 2 do
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: DOUBLE
15147: LD_INT 1
15149: DEC
15150: ST_TO_ADDR
15151: LD_OWVAR 67
15155: PUSH
15156: LD_INT 2
15158: PLUS
15159: PUSH
15160: FOR_TO
15161: IFFALSE 15270
// begin hc_sex := sex_male ;
15163: LD_ADDR_OWVAR 27
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// uc_side := 0 ;
15171: LD_ADDR_OWVAR 20
15175: PUSH
15176: LD_INT 0
15178: ST_TO_ADDR
// uc_nation := nation_nature ;
15179: LD_ADDR_OWVAR 21
15183: PUSH
15184: LD_INT 0
15186: ST_TO_ADDR
// hc_class := class_tiger ;
15187: LD_ADDR_OWVAR 28
15191: PUSH
15192: LD_INT 14
15194: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15195: LD_ADDR_OWVAR 31
15199: PUSH
15200: LD_EXP 30
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15220: LD_ADDR_OWVAR 35
15224: PUSH
15225: LD_INT 5
15227: NEG
15228: PPUSH
15229: LD_INT 5
15231: PPUSH
15232: CALL_OW 12
15236: PUSH
15237: LD_OWVAR 67
15241: MUL
15242: ST_TO_ADDR
// un := CreateHuman ;
15243: LD_ADDR_VAR 0 3
15247: PUSH
15248: CALL_OW 44
15252: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15253: LD_VAR 0 3
15257: PPUSH
15258: LD_INT 23
15260: PPUSH
15261: LD_INT 0
15263: PPUSH
15264: CALL_OW 49
// end ;
15268: GO 15160
15270: POP
15271: POP
// for i := 1 to rand ( 3 , 4 ) do
15272: LD_ADDR_VAR 0 2
15276: PUSH
15277: DOUBLE
15278: LD_INT 1
15280: DEC
15281: ST_TO_ADDR
15282: LD_INT 3
15284: PPUSH
15285: LD_INT 4
15287: PPUSH
15288: CALL_OW 12
15292: PUSH
15293: FOR_TO
15294: IFFALSE 15386
// begin hc_sex := sex_male ;
15296: LD_ADDR_OWVAR 27
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// uc_side := 0 ;
15304: LD_ADDR_OWVAR 20
15308: PUSH
15309: LD_INT 0
15311: ST_TO_ADDR
// uc_nation := nation_nature ;
15312: LD_ADDR_OWVAR 21
15316: PUSH
15317: LD_INT 0
15319: ST_TO_ADDR
// hc_class := 18 ;
15320: LD_ADDR_OWVAR 28
15324: PUSH
15325: LD_INT 18
15327: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15328: LD_ADDR_OWVAR 31
15332: PUSH
15333: LD_INT 0
15335: PUSH
15336: LD_INT 0
15338: PUSH
15339: LD_INT 0
15341: PUSH
15342: LD_INT 0
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: ST_TO_ADDR
// hc_agressivity := 0 ;
15351: LD_ADDR_OWVAR 35
15355: PUSH
15356: LD_INT 0
15358: ST_TO_ADDR
// un := CreateHuman ;
15359: LD_ADDR_VAR 0 3
15363: PUSH
15364: CALL_OW 44
15368: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15369: LD_VAR 0 3
15373: PPUSH
15374: LD_INT 23
15376: PPUSH
15377: LD_INT 0
15379: PPUSH
15380: CALL_OW 49
// end ;
15384: GO 15293
15386: POP
15387: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15388: LD_ADDR_VAR 0 2
15392: PUSH
15393: DOUBLE
15394: LD_INT 1
15396: DEC
15397: ST_TO_ADDR
15398: LD_INT 4
15400: PUSH
15401: LD_INT 3
15403: PUSH
15404: LD_INT 3
15406: PUSH
15407: LD_INT 3
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_OWVAR 67
15420: ARRAY
15421: PUSH
15422: FOR_TO
15423: IFFALSE 15532
// begin hc_sex := sex_male ;
15425: LD_ADDR_OWVAR 27
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// uc_side := 0 ;
15433: LD_ADDR_OWVAR 20
15437: PUSH
15438: LD_INT 0
15440: ST_TO_ADDR
// uc_nation := nation_nature ;
15441: LD_ADDR_OWVAR 21
15445: PUSH
15446: LD_INT 0
15448: ST_TO_ADDR
// hc_class := class_apeman ;
15449: LD_ADDR_OWVAR 28
15453: PUSH
15454: LD_INT 12
15456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15457: LD_ADDR_OWVAR 31
15461: PUSH
15462: LD_INT 0
15464: PPUSH
15465: LD_INT 2
15467: PPUSH
15468: CALL_OW 12
15472: PUSH
15473: LD_INT 0
15475: PUSH
15476: LD_INT 0
15478: PUSH
15479: LD_INT 0
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15488: LD_ADDR_OWVAR 35
15492: PUSH
15493: LD_INT 10
15495: NEG
15496: PPUSH
15497: LD_INT 10
15499: PPUSH
15500: CALL_OW 12
15504: ST_TO_ADDR
// un := CreateHuman ;
15505: LD_ADDR_VAR 0 3
15509: PUSH
15510: CALL_OW 44
15514: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_INT 26
15522: PPUSH
15523: LD_INT 0
15525: PPUSH
15526: CALL_OW 49
// end ;
15530: GO 15422
15532: POP
15533: POP
// end ; end_of_file
15534: LD_VAR 0 1
15538: RET
// on UnitDestroyed ( unit ) do var i ;
15539: LD_INT 0
15541: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL 34832 0 1
// if unit = JMM then
15551: LD_VAR 0 1
15555: PUSH
15556: LD_EXP 1
15560: EQUAL
15561: IFFALSE 15570
// YouLost ( JMM ) ;
15563: LD_STRING JMM
15565: PPUSH
15566: CALL_OW 104
// if unit in russianTanks then
15570: LD_VAR 0 1
15574: PUSH
15575: LD_EXP 32
15579: IN
15580: IFFALSE 15598
// russianTanks := russianTanks diff unit ;
15582: LD_ADDR_EXP 32
15586: PUSH
15587: LD_EXP 32
15591: PUSH
15592: LD_VAR 0 1
15596: DIFF
15597: ST_TO_ADDR
// if unit in russianTimeLapsers then
15598: LD_VAR 0 1
15602: PUSH
15603: LD_EXP 33
15607: IN
15608: IFFALSE 15626
// russianTimeLapsers := russianTimeLapsers diff unit ;
15610: LD_ADDR_EXP 33
15614: PUSH
15615: LD_EXP 33
15619: PUSH
15620: LD_VAR 0 1
15624: DIFF
15625: ST_TO_ADDR
// if unit in RuScientists then
15626: LD_VAR 0 1
15630: PUSH
15631: LD_EXP 27
15635: IN
15636: IFFALSE 15668
// begin RuScientists := RuScientists diff unit ;
15638: LD_ADDR_EXP 27
15642: PUSH
15643: LD_EXP 27
15647: PUSH
15648: LD_VAR 0 1
15652: DIFF
15653: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15654: LD_ADDR_EXP 28
15658: PUSH
15659: LD_EXP 28
15663: PUSH
15664: LD_INT 1
15666: PLUS
15667: ST_TO_ADDR
// end ; end ;
15668: PPOPN 2
15670: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15671: LD_VAR 0 3
15675: PPUSH
15676: CALL_OW 264
15680: PUSH
15681: LD_INT 9
15683: EQUAL
15684: IFFALSE 15700
// laserCounterDestroy := laserCounterDestroy + 1 ;
15686: LD_ADDR_EXP 43
15690: PUSH
15691: LD_EXP 43
15695: PUSH
15696: LD_INT 1
15698: PLUS
15699: ST_TO_ADDR
// end ;
15700: PPOPN 3
15702: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 6
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PPUSH
15718: CALL_OW 69
15722: IN
15723: IFFALSE 15778
// begin if GetType ( human ) = unit_vehicle then
15725: LD_VAR 0 2
15729: PPUSH
15730: CALL_OW 247
15734: PUSH
15735: LD_INT 2
15737: EQUAL
15738: IFFALSE 15755
// human := IsDrivenBy ( human ) ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 311
15754: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15755: LD_VAR 0 2
15759: PPUSH
15760: LD_VAR 0 2
15764: PPUSH
15765: CALL_OW 110
15769: PUSH
15770: LD_INT 10
15772: PLUS
15773: PPUSH
15774: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15778: LD_VAR 0 2
15782: PPUSH
15783: CALL_OW 255
15787: PUSH
15788: LD_INT 1
15790: EQUAL
15791: PUSH
15792: LD_EXP 40
15796: PUSH
15797: LD_INT 0
15799: EQUAL
15800: AND
15801: IFFALSE 15913
// begin eventVar1 = 1 ;
15803: LD_ADDR_EXP 40
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// teleportExplored = 1 ;
15811: LD_ADDR_EXP 26
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15819: LD_STRING M2a
15821: PPUSH
15822: CALL_OW 337
// wait ( 0 0$2 ) ;
15826: LD_INT 70
15828: PPUSH
15829: CALL_OW 67
// DialogueOn ;
15833: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15837: LD_INT 22
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 21
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: PPUSH
15866: LD_STRING DT3a-Sol1-1
15868: PPUSH
15869: LD_STRING DT3a-FSol1-1
15871: PPUSH
15872: CALL 12260 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15876: LD_EXP 1
15880: PPUSH
15881: LD_STRING DT3a-JMM-1
15883: PPUSH
15884: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15897: LD_EXP 1
15901: PPUSH
15902: LD_STRING DT3a-JMM-1a
15904: PPUSH
15905: CALL_OW 88
// DialogueOff ;
15909: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15913: LD_VAR 0 1
15917: PUSH
15918: LD_INT 10
15920: EQUAL
15921: PUSH
15922: LD_VAR 0 2
15926: PPUSH
15927: CALL_OW 247
15931: PUSH
15932: LD_INT 2
15934: EQUAL
15935: AND
15936: PUSH
15937: LD_VAR 0 2
15941: PPUSH
15942: CALL_OW 255
15946: PUSH
15947: LD_INT 3
15949: EQUAL
15950: AND
15951: IFFALSE 16017
// begin if vehicleTeleported = 0 then
15953: LD_EXP 21
15957: PUSH
15958: LD_INT 0
15960: EQUAL
15961: IFFALSE 15978
// begin wait ( 0 0$03 ) ;
15963: LD_INT 105
15965: PPUSH
15966: CALL_OW 67
// vehicleTeleported := 1 ;
15970: LD_ADDR_EXP 21
15974: PUSH
15975: LD_INT 1
15977: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15978: LD_EXP 21
15982: PUSH
15983: LD_INT 2
15985: EQUAL
15986: IFFALSE 16003
// begin wait ( 0 0$03 ) ;
15988: LD_INT 105
15990: PPUSH
15991: CALL_OW 67
// vehicleTeleported := 3 ;
15995: LD_ADDR_EXP 21
15999: PUSH
16000: LD_INT 3
16002: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16003: LD_ADDR_EXP 22
16007: PUSH
16008: LD_EXP 22
16012: PUSH
16013: LD_INT 1
16015: PLUS
16016: ST_TO_ADDR
// end ; end ;
16017: PPOPN 2
16019: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16020: LD_VAR 0 1
16024: PPUSH
16025: LD_VAR 0 2
16029: PPUSH
16030: CALL 34952 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 264
16043: PUSH
16044: LD_INT 7
16046: EQUAL
16047: IFFALSE 16057
// rocketBuilded := true ;
16049: LD_ADDR_EXP 44
16053: PUSH
16054: LD_INT 1
16056: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 255
16066: PUSH
16067: LD_INT 3
16069: NONEQUAL
16070: IFFALSE 16074
// exit ;
16072: GO 16191
// if factory in [ ru_fact , rufab2 ] then
16074: LD_VAR 0 2
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 112
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: IN
16089: IFFALSE 16191
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 264
16100: PUSH
16101: LD_INT 49
16103: EQUAL
16104: IFFALSE 16140
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16106: LD_ADDR_EXP 33
16110: PUSH
16111: LD_EXP 33
16115: PPUSH
16116: LD_VAR 0 1
16120: PPUSH
16121: CALL 76413 0 2
16125: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_INT 137
16133: PPUSH
16134: CALL_OW 120
// end else
16138: GO 16191
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 264
16149: PUSH
16150: LD_INT 51
16152: PUSH
16153: LD_INT 89
16155: PUSH
16156: LD_INT 52
16158: PUSH
16159: LD_INT 53
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: IN
16168: NOT
16169: IFFALSE 16191
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16171: LD_ADDR_EXP 32
16175: PUSH
16176: LD_EXP 32
16180: PPUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL 76413 0 2
16190: ST_TO_ADDR
// end ; end ; end ;
16191: PPOPN 2
16193: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16194: LD_INT 0
16196: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16197: LD_VAR 0 2
16201: PPUSH
16202: CALL_OW 255
16206: PUSH
16207: LD_INT 3
16209: EQUAL
16210: PUSH
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 257
16220: PUSH
16221: LD_INT 3
16223: EQUAL
16224: AND
16225: PUSH
16226: LD_INT 21
16228: PPUSH
16229: CALL_OW 255
16233: PUSH
16234: LD_INT 3
16236: EQUAL
16237: AND
16238: PUSH
16239: LD_INT 21
16241: PPUSH
16242: CALL_OW 302
16246: AND
16247: IFFALSE 16261
// ComEnterUnit ( human , ru_fact ) ;
16249: LD_VAR 0 2
16253: PPUSH
16254: LD_INT 21
16256: PPUSH
16257: CALL_OW 120
// end ;
16261: PPOPN 3
16263: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL 34936 0 1
// end ; end_of_file
16273: PPOPN 1
16275: END
// every 0 0$1 trigger ruAI = 1 do
16276: LD_EXP 34
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: IFFALSE 16396
16286: GO 16288
16288: DISABLE
// begin enable ;
16289: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16290: LD_INT 3
16292: PPUSH
16293: LD_INT 6
16295: PPUSH
16296: LD_INT 9
16298: PPUSH
16299: LD_EXP 31
16303: PPUSH
16304: CALL 13110 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16308: LD_INT 3
16310: PPUSH
16311: LD_INT 4
16313: PPUSH
16314: LD_INT 10
16316: PPUSH
16317: LD_EXP 31
16321: PPUSH
16322: CALL 13110 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16326: LD_INT 3
16328: PPUSH
16329: LD_INT 9
16331: PPUSH
16332: CALL 13945 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16336: LD_INT 3
16338: PPUSH
16339: LD_INT 10
16341: PPUSH
16342: CALL 13945 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16346: LD_INT 3
16348: PPUSH
16349: LD_INT 16
16351: PPUSH
16352: LD_INT 9
16354: PPUSH
16355: LD_INT 91
16357: PPUSH
16358: CALL 13477 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16362: LD_INT 3
16364: PPUSH
16365: LD_INT 17
16367: PPUSH
16368: LD_INT 10
16370: PPUSH
16371: LD_INT 47
16373: PUSH
16374: LD_INT 129
16376: PUSH
16377: LD_INT 135
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: PPUSH
16385: CALL 13477 0 4
// IntBazooka ( 3 ) ;
16389: LD_INT 3
16391: PPUSH
16392: CALL 14272 0 1
// end ;
16396: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16397: LD_EXP 32
16401: PUSH
16402: LD_INT 3
16404: PUSH
16405: LD_INT 4
16407: PUSH
16408: LD_INT 5
16410: PUSH
16411: LD_INT 6
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: PUSH
16420: LD_OWVAR 67
16424: ARRAY
16425: GREATEREQUAL
16426: IFFALSE 16798
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
// begin enable ;
16437: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16438: LD_ADDR_VAR 0 2
16442: PUSH
16443: LD_EXP 32
16447: PUSH
16448: LD_EXP 33
16452: UNION
16453: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16454: LD_ADDR_EXP 32
16458: PUSH
16459: LD_EXP 32
16463: PUSH
16464: LD_VAR 0 2
16468: DIFF
16469: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16470: LD_ADDR_EXP 33
16474: PUSH
16475: LD_EXP 33
16479: PUSH
16480: LD_VAR 0 2
16484: DIFF
16485: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16486: LD_EXP 21
16490: PUSH
16491: LD_INT 4
16493: GREATEREQUAL
16494: IFFALSE 16512
// attackTactic := rand ( 1 , 2 ) ;
16496: LD_ADDR_EXP 36
16500: PUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_INT 2
16506: PPUSH
16507: CALL_OW 12
16511: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16512: LD_ADDR_VAR 0 4
16516: PUSH
16517: LD_INT 93
16519: PUSH
16520: LD_INT 77
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 107
16529: PUSH
16530: LD_INT 99
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 123
16539: PUSH
16540: LD_INT 112
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 140
16549: PUSH
16550: LD_INT 112
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: ST_TO_ADDR
// if attackTactic < 2 then
16563: LD_EXP 36
16567: PUSH
16568: LD_INT 2
16570: LESS
16571: IFFALSE 16602
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16573: LD_ADDR_VAR 0 4
16577: PUSH
16578: LD_INT 131
16580: PUSH
16581: LD_INT 136
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 140
16590: PUSH
16591: LD_INT 112
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16602: LD_INT 10
16604: PPUSH
16605: CALL_OW 302
16609: IFFALSE 16725
// begin for i in tmp do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: LD_VAR 0 2
16620: PUSH
16621: FOR_IN
16622: IFFALSE 16665
// if attackTactic < 2 then
16624: LD_EXP 36
16628: PUSH
16629: LD_INT 2
16631: LESS
16632: IFFALSE 16648
// ComEnterUnit ( i , ruteleprt ) else
16634: LD_VAR 0 1
16638: PPUSH
16639: LD_INT 10
16641: PPUSH
16642: CALL_OW 120
16646: GO 16663
// ComMoveXY ( i , 88 , 69 ) ;
16648: LD_VAR 0 1
16652: PPUSH
16653: LD_INT 88
16655: PPUSH
16656: LD_INT 69
16658: PPUSH
16659: CALL_OW 111
16663: GO 16621
16665: POP
16666: POP
// p := 0 ;
16667: LD_ADDR_VAR 0 3
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16675: LD_INT 70
16677: PPUSH
16678: CALL_OW 67
// p := Inc ( p ) ;
16682: LD_ADDR_VAR 0 3
16686: PUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: CALL 77774 0 1
16696: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16697: LD_VAR 0 2
16701: PPUSH
16702: LD_INT 60
16704: PUSH
16705: EMPTY
16706: LIST
16707: PPUSH
16708: CALL_OW 72
16712: NOT
16713: PUSH
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 30
16721: GREATER
16722: OR
16723: IFFALSE 16675
// end ; repeat wait ( 0 0$1 ) ;
16725: LD_INT 35
16727: PPUSH
16728: CALL_OW 67
// for i in tmp do
16732: LD_ADDR_VAR 0 1
16736: PUSH
16737: LD_VAR 0 2
16741: PUSH
16742: FOR_IN
16743: IFFALSE 16775
// if not IsOk ( i ) then
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 302
16754: NOT
16755: IFFALSE 16773
// tmp := tmp diff i ;
16757: LD_ADDR_VAR 0 2
16761: PUSH
16762: LD_VAR 0 2
16766: PUSH
16767: LD_VAR 0 1
16771: DIFF
16772: ST_TO_ADDR
16773: GO 16742
16775: POP
16776: POP
// AgressiveMove ( tmp , path ) ;
16777: LD_VAR 0 2
16781: PPUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: CALL 79017 0 2
// until not tmp ;
16791: LD_VAR 0 2
16795: NOT
16796: IFFALSE 16725
// end ;
16798: PPOPN 4
16800: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16801: LD_INT 4
16803: PPUSH
16804: CALL_OW 303
16808: IFFALSE 16823
16810: GO 16812
16812: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16813: LD_INT 3
16815: PPUSH
16816: LD_INT 4
16818: PPUSH
16819: CALL 14900 0 2
16823: END
// every 0 0$1 do
16824: GO 16826
16826: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16827: LD_INT 3
16829: PPUSH
16830: LD_INT 91
16832: PPUSH
16833: LD_INT 3
16835: PPUSH
16836: CALL 12875 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16840: LD_INT 3
16842: PPUSH
16843: LD_INT 47
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12875 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16853: LD_INT 3
16855: PPUSH
16856: LD_INT 129
16858: PPUSH
16859: LD_INT 3
16861: PPUSH
16862: CALL 12875 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16866: LD_INT 3
16868: PPUSH
16869: LD_INT 3
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: CALL 12875 0 3
// end ;
16879: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16880: LD_INT 22
16882: PUSH
16883: LD_INT 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 21
16892: PUSH
16893: LD_INT 3
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: IFFALSE 16977
16910: GO 16912
16912: DISABLE
// begin wait ( 0 0$40 ) ;
16913: LD_INT 1400
16915: PPUSH
16916: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16920: LD_INT 3
16922: PPUSH
16923: LD_INT 21
16925: PPUSH
16926: LD_INT 3
16928: PUSH
16929: LD_INT 4
16931: PUSH
16932: LD_INT 5
16934: PUSH
16935: LD_INT 6
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: PUSH
16944: LD_OWVAR 67
16948: ARRAY
16949: PPUSH
16950: LD_INT 46
16952: PUSH
16953: LD_INT 45
16955: PUSH
16956: LD_INT 44
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: PPUSH
16964: LD_INT 3
16966: PPUSH
16967: LD_INT 3
16969: PPUSH
16970: LD_INT 24
16972: PPUSH
16973: CALL 14125 0 7
// end ;
16977: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16978: LD_EXP 20
16982: PUSH
16983: LD_INT 2
16985: EQUAL
16986: PUSH
16987: LD_INT 21
16989: PPUSH
16990: CALL_OW 255
16994: PUSH
16995: LD_INT 3
16997: EQUAL
16998: AND
16999: PUSH
17000: LD_INT 112
17002: PPUSH
17003: CALL_OW 255
17007: PUSH
17008: LD_INT 3
17010: EQUAL
17011: AND
17012: PUSH
17013: LD_INT 21
17015: PPUSH
17016: CALL_OW 302
17020: AND
17021: PUSH
17022: LD_INT 112
17024: PPUSH
17025: CALL_OW 302
17029: AND
17030: PUSH
17031: LD_INT 22
17033: PUSH
17034: LD_INT 3
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 2
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 50
17053: PUSH
17054: EMPTY
17055: LIST
17056: PUSH
17057: LD_INT 3
17059: PUSH
17060: LD_INT 58
17062: PUSH
17063: EMPTY
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 69
17080: PUSH
17081: LD_INT 18
17083: PPUSH
17084: LD_INT 22
17086: PUSH
17087: LD_INT 3
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 70
17112: PUSH
17113: LD_INT 0
17115: EQUAL
17116: DIFF
17117: AND
17118: IFFALSE 17244
17120: GO 17122
17122: DISABLE
// begin enable ;
17123: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17124: LD_INT 3
17126: PPUSH
17127: LD_INT 21
17129: PPUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 4
17135: PUSH
17136: LD_INT 5
17138: PUSH
17139: LD_INT 6
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: PUSH
17148: LD_OWVAR 67
17152: ARRAY
17153: PPUSH
17154: LD_INT 46
17156: PUSH
17157: LD_INT 45
17159: PUSH
17160: LD_INT 44
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: PPUSH
17168: LD_INT 3
17170: PPUSH
17171: LD_INT 3
17173: PPUSH
17174: LD_INT 24
17176: PPUSH
17177: CALL 14125 0 7
// if russianTimeLapsers = 0 then
17181: LD_EXP 33
17185: PUSH
17186: LD_INT 0
17188: EQUAL
17189: IFFALSE 17244
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17191: LD_INT 3
17193: PPUSH
17194: LD_INT 112
17196: PPUSH
17197: LD_INT 1
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 2
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: PUSH
17215: LD_OWVAR 67
17219: ARRAY
17220: PPUSH
17221: LD_INT 49
17223: PUSH
17224: LD_INT 49
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PPUSH
17231: LD_INT 3
17233: PPUSH
17234: LD_INT 3
17236: PPUSH
17237: LD_INT 24
17239: PPUSH
17240: CALL 14125 0 7
// end ;
17244: END
// every 0 0$1 trigger arabianMines do var i ;
17245: LD_EXP 37
17249: IFFALSE 17370
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
// begin enable ;
17257: ENABLE
// for i in arabianMines do
17258: LD_ADDR_VAR 0 1
17262: PUSH
17263: LD_EXP 37
17267: PUSH
17268: FOR_IN
17269: IFFALSE 17368
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17271: LD_INT 22
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 92
17283: PUSH
17284: LD_VAR 0 1
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PUSH
17293: LD_VAR 0 1
17297: PUSH
17298: LD_INT 2
17300: ARRAY
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: IFFALSE 17366
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17321: LD_VAR 0 1
17325: PUSH
17326: LD_INT 1
17328: ARRAY
17329: PPUSH
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 2
17337: ARRAY
17338: PPUSH
17339: LD_INT 5
17341: PPUSH
17342: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17346: LD_ADDR_EXP 37
17350: PUSH
17351: LD_EXP 37
17355: PPUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL_OW 3
17365: ST_TO_ADDR
// end ; end ;
17366: GO 17268
17368: POP
17369: POP
// end ;
17370: PPOPN 1
17372: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17373: LD_EXP 21
17377: PUSH
17378: LD_INT 4
17380: GREATEREQUAL
17381: PUSH
17382: LD_EXP 22
17386: PUSH
17387: LD_INT 12
17389: MOD
17390: PUSH
17391: LD_INT 0
17393: EQUAL
17394: AND
17395: IFFALSE 17509
17397: GO 17399
17399: DISABLE
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
// begin enable ;
17404: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 122
17412: PUSH
17413: LD_INT 142
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 101
17422: PUSH
17423: LD_INT 127
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 104
17432: PUSH
17433: LD_INT 104
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 46
17442: PUSH
17443: LD_INT 81
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_INT 1
17463: PPUSH
17464: LD_INT 4
17466: PPUSH
17467: CALL_OW 12
17471: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17472: LD_INT 10
17474: PPUSH
17475: LD_VAR 0 2
17479: PUSH
17480: LD_VAR 0 1
17484: ARRAY
17485: PUSH
17486: LD_INT 1
17488: ARRAY
17489: PPUSH
17490: LD_VAR 0 2
17494: PUSH
17495: LD_VAR 0 1
17499: ARRAY
17500: PUSH
17501: LD_INT 2
17503: ARRAY
17504: PPUSH
17505: CALL_OW 243
// end ; end_of_file
17509: PPOPN 2
17511: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17512: LD_INT 3
17514: PPUSH
17515: CALL_OW 301
17519: IFFALSE 17740
17521: GO 17523
17523: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17524: LD_EXP 27
17528: PPUSH
17529: LD_INT 50
17531: PUSH
17532: EMPTY
17533: LIST
17534: PPUSH
17535: CALL_OW 72
17539: IFFALSE 17548
// wait ( 0 0$10 ) ;
17541: LD_INT 350
17543: PPUSH
17544: CALL_OW 67
// DialogueOn ;
17548: CALL_OW 6
// if sciCounter = 0 then
17552: LD_EXP 28
17556: PUSH
17557: LD_INT 0
17559: EQUAL
17560: IFFALSE 17588
// begin Say ( JMM , D7a-JMM-1 ) ;
17562: LD_EXP 1
17566: PPUSH
17567: LD_STRING D7a-JMM-1
17569: PPUSH
17570: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17574: LD_EXP 15
17578: PPUSH
17579: LD_STRING D7a-Pow-1
17581: PPUSH
17582: CALL_OW 94
// end else
17586: GO 17732
// if sciCounter < 6 then
17588: LD_EXP 28
17592: PUSH
17593: LD_INT 6
17595: LESS
17596: IFFALSE 17624
// begin Say ( JMM , D7b-JMM-1 ) ;
17598: LD_EXP 1
17602: PPUSH
17603: LD_STRING D7b-JMM-1
17605: PPUSH
17606: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17610: LD_EXP 15
17614: PPUSH
17615: LD_STRING D7b-Pow-1
17617: PPUSH
17618: CALL_OW 94
// end else
17622: GO 17732
// begin Say ( JMM , D7c-JMM-1 ) ;
17624: LD_EXP 1
17628: PPUSH
17629: LD_STRING D7c-JMM-1
17631: PPUSH
17632: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17636: LD_EXP 15
17640: PPUSH
17641: LD_STRING D7c-Pow-1
17643: PPUSH
17644: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17648: LD_EXP 1
17652: PPUSH
17653: LD_STRING D7d-JMM-1
17655: PPUSH
17656: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17660: LD_EXP 15
17664: PPUSH
17665: LD_STRING D7d-Pow-1
17667: PPUSH
17668: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17672: LD_EXP 1
17676: PPUSH
17677: LD_STRING D7d-JMM-2
17679: PPUSH
17680: CALL_OW 88
// if askSiberite = 1 then
17684: LD_EXP 25
17688: PUSH
17689: LD_INT 1
17691: EQUAL
17692: IFFALSE 17708
// Say ( JMM , D7d-JMM-2a ) else
17694: LD_EXP 1
17698: PPUSH
17699: LD_STRING D7d-JMM-2a
17701: PPUSH
17702: CALL_OW 88
17706: GO 17720
// SayRadio ( Powell , D7d-Pow-2 ) ;
17708: LD_EXP 15
17712: PPUSH
17713: LD_STRING D7d-Pow-2
17715: PPUSH
17716: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17720: LD_EXP 15
17724: PPUSH
17725: LD_STRING D7d-Pow-2a
17727: PPUSH
17728: CALL_OW 94
// end ; DialogueOff ;
17732: CALL_OW 7
// FinishMission ;
17736: CALL 17741 0 0
// end ;
17740: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17741: LD_INT 0
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
// m1 := false ;
17747: LD_ADDR_VAR 0 2
17751: PUSH
17752: LD_INT 0
17754: ST_TO_ADDR
// m2 := false ;
17755: LD_ADDR_VAR 0 3
17759: PUSH
17760: LD_INT 0
17762: ST_TO_ADDR
// m3 := false ;
17763: LD_ADDR_VAR 0 4
17767: PUSH
17768: LD_INT 0
17770: ST_TO_ADDR
// if not westPathUsed then
17771: LD_EXP 42
17775: NOT
17776: IFFALSE 17785
// SetAchievement ( ACH_PATH ) ;
17778: LD_STRING ACH_PATH
17780: PPUSH
17781: CALL_OW 543
// if not rocketBuilded then
17785: LD_EXP 44
17789: NOT
17790: IFFALSE 17806
// begin wait ( 3 ) ;
17792: LD_INT 3
17794: PPUSH
17795: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17799: LD_STRING ACH_ROCKET
17801: PPUSH
17802: CALL_OW 543
// end ; if tick <= 40 40$00 then
17806: LD_OWVAR 1
17810: PUSH
17811: LD_INT 84000
17813: LESSEQUAL
17814: IFFALSE 17830
// begin wait ( 3 ) ;
17816: LD_INT 3
17818: PPUSH
17819: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17823: LD_STRING ACH_ASPEED_12
17825: PPUSH
17826: CALL_OW 543
// end ; if teleportExplored = 1 then
17830: LD_EXP 26
17834: PUSH
17835: LD_INT 1
17837: EQUAL
17838: IFFALSE 17860
// begin m1 := true ;
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_INT 1
17847: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17848: LD_STRING Teleport
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 101
// end else
17858: GO 17871
// AddMedal ( Teleport , - 1 ) ;
17860: LD_STRING Teleport
17862: PPUSH
17863: LD_INT 1
17865: NEG
17866: PPUSH
17867: CALL_OW 101
// if sciCounter > 2 then
17871: LD_EXP 28
17875: PUSH
17876: LD_INT 2
17878: GREATER
17879: IFFALSE 17901
// begin m2 := true ;
17881: LD_ADDR_VAR 0 3
17885: PUSH
17886: LD_INT 1
17888: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17889: LD_STRING Materials
17891: PPUSH
17892: LD_INT 1
17894: PPUSH
17895: CALL_OW 101
// end else
17899: GO 17912
// AddMedal ( Materials , - 1 ) ;
17901: LD_STRING Materials
17903: PPUSH
17904: LD_INT 1
17906: NEG
17907: PPUSH
17908: CALL_OW 101
// if sciCounter >= 6 then
17912: LD_EXP 28
17916: PUSH
17917: LD_INT 6
17919: GREATEREQUAL
17920: IFFALSE 17952
// begin m3 := true ;
17922: LD_ADDR_VAR 0 4
17926: PUSH
17927: LD_INT 1
17929: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17930: LD_STRING Scientists
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17940: LD_INT 1
17942: PPUSH
17943: LD_STRING 12_SciDed_1
17945: PPUSH
17946: CALL_OW 39
// end else
17950: GO 17973
// begin AddMedal ( Scientists , - 1 ) ;
17952: LD_STRING Scientists
17954: PPUSH
17955: LD_INT 1
17957: NEG
17958: PPUSH
17959: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17963: LD_INT 0
17965: PPUSH
17966: LD_STRING 12_SciDed_1
17968: PPUSH
17969: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17973: LD_EXP 24
17977: PPUSH
17978: LD_STRING 12_MainDepositFake_1
17980: PPUSH
17981: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17985: LD_VAR 0 2
17989: PUSH
17990: LD_VAR 0 3
17994: AND
17995: PUSH
17996: LD_VAR 0 4
18000: AND
18001: PUSH
18002: LD_OWVAR 67
18006: PUSH
18007: LD_INT 3
18009: GREATEREQUAL
18010: AND
18011: IFFALSE 18023
// SetAchievementEX ( ACH_AMER , 12 ) ;
18013: LD_STRING ACH_AMER
18015: PPUSH
18016: LD_INT 12
18018: PPUSH
18019: CALL_OW 564
// GiveMedals ( MAIN ) ;
18023: LD_STRING MAIN
18025: PPUSH
18026: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18030: LD_INT 22
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 23
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 21
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 25
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 25
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 25
18085: PUSH
18086: LD_INT 3
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 25
18095: PUSH
18096: LD_INT 4
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 25
18105: PUSH
18106: LD_INT 5
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 25
18115: PUSH
18116: LD_INT 8
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 69
18142: PPUSH
18143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18147: LD_EXP 1
18151: PPUSH
18152: LD_EXP 39
18156: PUSH
18157: LD_STRING JMM
18159: STR
18160: PPUSH
18161: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18165: LD_EXP 7
18169: PPUSH
18170: LD_EXP 39
18174: PUSH
18175: LD_STRING Brown
18177: STR
18178: PPUSH
18179: CALL 12220 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18183: LD_EXP 3
18187: PPUSH
18188: LD_EXP 39
18192: PUSH
18193: LD_STRING Donaldson
18195: STR
18196: PPUSH
18197: CALL 12220 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18201: LD_EXP 4
18205: PPUSH
18206: LD_EXP 39
18210: PUSH
18211: LD_STRING Bobby
18213: STR
18214: PPUSH
18215: CALL 12220 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18219: LD_EXP 5
18223: PPUSH
18224: LD_EXP 39
18228: PUSH
18229: LD_STRING Cyrus
18231: STR
18232: PPUSH
18233: CALL 12220 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18237: LD_EXP 2
18241: PPUSH
18242: LD_EXP 39
18246: PUSH
18247: LD_STRING Lisa
18249: STR
18250: PPUSH
18251: CALL 12220 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18255: LD_EXP 12
18259: PPUSH
18260: LD_EXP 39
18264: PUSH
18265: LD_STRING Frank
18267: STR
18268: PPUSH
18269: CALL 12220 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18273: LD_EXP 13
18277: PPUSH
18278: LD_EXP 39
18282: PUSH
18283: LD_STRING Kikuchi
18285: STR
18286: PPUSH
18287: CALL 12220 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18291: LD_EXP 9
18295: PPUSH
18296: LD_EXP 39
18300: PUSH
18301: LD_STRING Houten
18303: STR
18304: PPUSH
18305: CALL 12220 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18309: LD_EXP 11
18313: PPUSH
18314: LD_EXP 39
18318: PUSH
18319: LD_STRING Gary
18321: STR
18322: PPUSH
18323: CALL 12220 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18327: LD_EXP 10
18331: PPUSH
18332: LD_EXP 39
18336: PUSH
18337: LD_STRING Cornell
18339: STR
18340: PPUSH
18341: CALL 12220 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18345: LD_EXP 6
18349: PPUSH
18350: LD_EXP 39
18354: PUSH
18355: LD_STRING Denis
18357: STR
18358: PPUSH
18359: CALL 12220 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18363: LD_EXP 8
18367: PPUSH
18368: LD_EXP 39
18372: PUSH
18373: LD_STRING Gladstone
18375: STR
18376: PPUSH
18377: CALL 12220 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18381: LD_INT 22
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 23
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 21
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 25
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 25
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 25
18436: PUSH
18437: LD_INT 3
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 25
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 25
18456: PUSH
18457: LD_INT 5
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 25
18466: PUSH
18467: LD_INT 8
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: PUSH
18494: LD_EXP 1
18498: PUSH
18499: LD_EXP 7
18503: PUSH
18504: LD_EXP 3
18508: PUSH
18509: LD_EXP 4
18513: PUSH
18514: LD_EXP 5
18518: PUSH
18519: LD_EXP 2
18523: PUSH
18524: LD_EXP 12
18528: PUSH
18529: LD_EXP 8
18533: PUSH
18534: LD_EXP 13
18538: PUSH
18539: LD_EXP 6
18543: PUSH
18544: LD_EXP 9
18548: PUSH
18549: LD_EXP 11
18553: PUSH
18554: LD_EXP 10
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: DIFF
18574: PPUSH
18575: LD_STRING 12_other_survivors
18577: PPUSH
18578: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18582: LD_INT 22
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 23
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 21
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 25
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 25
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 25
18637: PUSH
18638: LD_INT 3
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 25
18647: PUSH
18648: LD_INT 4
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 5
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 25
18667: PUSH
18668: LD_INT 8
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 69
18694: PPUSH
18695: LD_STRING 12_kurt_squad
18697: PPUSH
18698: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18702: LD_EXP 14
18706: PPUSH
18707: LD_STRING 12_others
18709: PPUSH
18710: CALL_OW 38
// YouWin ;
18714: CALL_OW 103
// end ; end_of_file
18718: LD_VAR 0 1
18722: RET
// every 0 0$01 trigger ruAI do
18723: LD_EXP 34
18727: IFFALSE 19037
18729: GO 18731
18731: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18732: LD_INT 280
18734: PPUSH
18735: CALL_OW 67
// if cratesSpawned < 12 then
18739: LD_EXP 38
18743: PUSH
18744: LD_INT 12
18746: LESS
18747: IFFALSE 18799
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18749: LD_INT 105
18751: PPUSH
18752: LD_INT 350
18754: PPUSH
18755: CALL_OW 12
18759: PPUSH
18760: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18764: LD_INT 3
18766: PPUSH
18767: LD_INT 5
18769: PPUSH
18770: CALL_OW 12
18774: PPUSH
18775: LD_INT 21
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18785: LD_ADDR_EXP 38
18789: PUSH
18790: LD_EXP 38
18794: PUSH
18795: LD_INT 1
18797: PLUS
18798: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18799: LD_EXP 38
18803: PUSH
18804: LD_INT 12
18806: GREATEREQUAL
18807: PUSH
18808: LD_EXP 38
18812: PUSH
18813: LD_INT 32
18815: LESS
18816: AND
18817: IFFALSE 18869
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18819: LD_INT 420
18821: PPUSH
18822: LD_INT 700
18824: PPUSH
18825: CALL_OW 12
18829: PPUSH
18830: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18834: LD_INT 3
18836: PPUSH
18837: LD_INT 5
18839: PPUSH
18840: CALL_OW 12
18844: PPUSH
18845: LD_INT 21
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18855: LD_ADDR_EXP 38
18859: PUSH
18860: LD_EXP 38
18864: PUSH
18865: LD_INT 1
18867: PLUS
18868: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18869: LD_EXP 38
18873: PUSH
18874: LD_INT 32
18876: GREATEREQUAL
18877: IFFALSE 18951
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18879: LD_INT 21
18881: PPUSH
18882: CALL_OW 435
18886: PUSH
18887: LD_INT 14
18889: LESS
18890: IFFALSE 18901
// wait ( 0 0$10 ) else
18892: LD_INT 350
18894: PPUSH
18895: CALL_OW 67
18899: GO 18916
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18901: LD_INT 1750
18903: PPUSH
18904: LD_INT 3150
18906: PPUSH
18907: CALL_OW 12
18911: PPUSH
18912: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18916: LD_INT 2
18918: PPUSH
18919: LD_INT 5
18921: PPUSH
18922: CALL_OW 12
18926: PPUSH
18927: LD_INT 21
18929: PPUSH
18930: LD_INT 1
18932: PPUSH
18933: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18937: LD_ADDR_EXP 38
18941: PUSH
18942: LD_EXP 38
18946: PUSH
18947: LD_INT 1
18949: PLUS
18950: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18951: LD_EXP 38
18955: PUSH
18956: LD_INT 110
18958: GREATEREQUAL
18959: IFFALSE 19033
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18961: LD_INT 21
18963: PPUSH
18964: CALL_OW 435
18968: PUSH
18969: LD_INT 14
18971: LESS
18972: IFFALSE 18983
// wait ( 0 0$20 ) else
18974: LD_INT 700
18976: PPUSH
18977: CALL_OW 67
18981: GO 18998
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18983: LD_INT 2450
18985: PPUSH
18986: LD_INT 3850
18988: PPUSH
18989: CALL_OW 12
18993: PPUSH
18994: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18998: LD_INT 1
19000: PPUSH
19001: LD_INT 5
19003: PPUSH
19004: CALL_OW 12
19008: PPUSH
19009: LD_INT 21
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19019: LD_ADDR_EXP 38
19023: PUSH
19024: LD_EXP 38
19028: PUSH
19029: LD_INT 1
19031: PLUS
19032: ST_TO_ADDR
// end ; until false ;
19033: LD_INT 0
19035: IFFALSE 18732
// end ; end_of_file end_of_file
19037: END
// export globalGameSaveCounter ; every 0 0$1 do
19038: GO 19040
19040: DISABLE
// begin enable ;
19041: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19042: LD_STRING updateTimer(
19044: PUSH
19045: LD_OWVAR 1
19049: STR
19050: PUSH
19051: LD_STRING );
19053: STR
19054: PPUSH
19055: CALL_OW 559
// end ;
19059: END
// every 0 0$1 do
19060: GO 19062
19062: DISABLE
// begin globalGameSaveCounter := 0 ;
19063: LD_ADDR_EXP 45
19067: PUSH
19068: LD_INT 0
19070: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19071: LD_STRING setGameSaveCounter(0)
19073: PPUSH
19074: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19078: LD_STRING initStreamRollete();
19080: PPUSH
19081: CALL_OW 559
// InitStreamMode ;
19085: CALL 20411 0 0
// DefineStreamItems ( false ) ;
19089: LD_INT 0
19091: PPUSH
19092: CALL 20875 0 1
// end ;
19096: END
// export function SOS_MapStart ( ) ; begin
19097: LD_INT 0
19099: PPUSH
// if streamModeActive then
19100: LD_EXP 46
19104: IFFALSE 19113
// DefineStreamItems ( true ) ;
19106: LD_INT 1
19108: PPUSH
19109: CALL 20875 0 1
// UpdateLuaVariables ( ) ;
19113: CALL 19130 0 0
// UpdateFactoryWaypoints ( ) ;
19117: CALL 33736 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19121: CALL 33993 0 0
// end ;
19125: LD_VAR 0 1
19129: RET
// function UpdateLuaVariables ( ) ; begin
19130: LD_INT 0
19132: PPUSH
// if globalGameSaveCounter then
19133: LD_EXP 45
19137: IFFALSE 19171
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19139: LD_ADDR_EXP 45
19143: PUSH
19144: LD_EXP 45
19148: PPUSH
19149: CALL 77774 0 1
19153: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19154: LD_STRING setGameSaveCounter(
19156: PUSH
19157: LD_EXP 45
19161: STR
19162: PUSH
19163: LD_STRING )
19165: STR
19166: PPUSH
19167: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19171: LD_STRING setGameDifficulty(
19173: PUSH
19174: LD_OWVAR 67
19178: STR
19179: PUSH
19180: LD_STRING )
19182: STR
19183: PPUSH
19184: CALL_OW 559
// end ;
19188: LD_VAR 0 1
19192: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19193: LD_INT 0
19195: PPUSH
// if p2 = stream_mode then
19196: LD_VAR 0 2
19200: PUSH
19201: LD_INT 100
19203: EQUAL
19204: IFFALSE 20207
// begin if not StreamModeActive then
19206: LD_EXP 46
19210: NOT
19211: IFFALSE 19221
// StreamModeActive := true ;
19213: LD_ADDR_EXP 46
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// if p3 = 0 then
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 0
19228: EQUAL
19229: IFFALSE 19235
// InitStreamMode ;
19231: CALL 20411 0 0
// if p3 = 1 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 1
19242: EQUAL
19243: IFFALSE 19253
// sRocket := true ;
19245: LD_ADDR_EXP 51
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 2 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 2
19260: EQUAL
19261: IFFALSE 19271
// sSpeed := true ;
19263: LD_ADDR_EXP 50
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 3 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 3
19278: EQUAL
19279: IFFALSE 19289
// sEngine := true ;
19281: LD_ADDR_EXP 52
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 4 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 4
19296: EQUAL
19297: IFFALSE 19307
// sSpec := true ;
19299: LD_ADDR_EXP 49
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 5 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 5
19314: EQUAL
19315: IFFALSE 19325
// sLevel := true ;
19317: LD_ADDR_EXP 53
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 6 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 6
19332: EQUAL
19333: IFFALSE 19343
// sArmoury := true ;
19335: LD_ADDR_EXP 54
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 7 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 7
19350: EQUAL
19351: IFFALSE 19361
// sRadar := true ;
19353: LD_ADDR_EXP 55
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 8 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 8
19368: EQUAL
19369: IFFALSE 19379
// sBunker := true ;
19371: LD_ADDR_EXP 56
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 9 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 9
19386: EQUAL
19387: IFFALSE 19397
// sHack := true ;
19389: LD_ADDR_EXP 57
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 10 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 10
19404: EQUAL
19405: IFFALSE 19415
// sFire := true ;
19407: LD_ADDR_EXP 58
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 11 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 11
19422: EQUAL
19423: IFFALSE 19433
// sRefresh := true ;
19425: LD_ADDR_EXP 59
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 12 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 12
19440: EQUAL
19441: IFFALSE 19451
// sExp := true ;
19443: LD_ADDR_EXP 60
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 13 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 13
19458: EQUAL
19459: IFFALSE 19469
// sDepot := true ;
19461: LD_ADDR_EXP 61
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 14 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 14
19476: EQUAL
19477: IFFALSE 19487
// sFlag := true ;
19479: LD_ADDR_EXP 62
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 15 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 15
19494: EQUAL
19495: IFFALSE 19505
// sKamikadze := true ;
19497: LD_ADDR_EXP 70
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 16 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 16
19512: EQUAL
19513: IFFALSE 19523
// sTroll := true ;
19515: LD_ADDR_EXP 71
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 17 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 17
19530: EQUAL
19531: IFFALSE 19541
// sSlow := true ;
19533: LD_ADDR_EXP 72
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 18 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 18
19548: EQUAL
19549: IFFALSE 19559
// sLack := true ;
19551: LD_ADDR_EXP 73
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 19 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 19
19566: EQUAL
19567: IFFALSE 19577
// sTank := true ;
19569: LD_ADDR_EXP 75
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 20 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 20
19584: EQUAL
19585: IFFALSE 19595
// sRemote := true ;
19587: LD_ADDR_EXP 76
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 21 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 21
19602: EQUAL
19603: IFFALSE 19613
// sPowell := true ;
19605: LD_ADDR_EXP 77
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 22 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 22
19620: EQUAL
19621: IFFALSE 19631
// sTeleport := true ;
19623: LD_ADDR_EXP 80
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 23 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 23
19638: EQUAL
19639: IFFALSE 19649
// sOilTower := true ;
19641: LD_ADDR_EXP 82
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 24 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 24
19656: EQUAL
19657: IFFALSE 19667
// sShovel := true ;
19659: LD_ADDR_EXP 83
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 25 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 25
19674: EQUAL
19675: IFFALSE 19685
// sSheik := true ;
19677: LD_ADDR_EXP 84
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 26 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 26
19692: EQUAL
19693: IFFALSE 19703
// sEarthquake := true ;
19695: LD_ADDR_EXP 86
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 27 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 27
19710: EQUAL
19711: IFFALSE 19721
// sAI := true ;
19713: LD_ADDR_EXP 87
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 28 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 28
19728: EQUAL
19729: IFFALSE 19739
// sCargo := true ;
19731: LD_ADDR_EXP 90
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 29 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 29
19746: EQUAL
19747: IFFALSE 19757
// sDLaser := true ;
19749: LD_ADDR_EXP 91
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 30 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 30
19764: EQUAL
19765: IFFALSE 19775
// sExchange := true ;
19767: LD_ADDR_EXP 92
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 31 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 31
19782: EQUAL
19783: IFFALSE 19793
// sFac := true ;
19785: LD_ADDR_EXP 93
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 32 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 32
19800: EQUAL
19801: IFFALSE 19811
// sPower := true ;
19803: LD_ADDR_EXP 94
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 33 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 33
19818: EQUAL
19819: IFFALSE 19829
// sRandom := true ;
19821: LD_ADDR_EXP 95
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 34 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 34
19836: EQUAL
19837: IFFALSE 19847
// sShield := true ;
19839: LD_ADDR_EXP 96
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 35 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 35
19854: EQUAL
19855: IFFALSE 19865
// sTime := true ;
19857: LD_ADDR_EXP 97
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 36 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 36
19872: EQUAL
19873: IFFALSE 19883
// sTools := true ;
19875: LD_ADDR_EXP 98
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 101 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 101
19890: EQUAL
19891: IFFALSE 19901
// sSold := true ;
19893: LD_ADDR_EXP 63
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 102 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 102
19908: EQUAL
19909: IFFALSE 19919
// sDiff := true ;
19911: LD_ADDR_EXP 64
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 103 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 103
19926: EQUAL
19927: IFFALSE 19937
// sFog := true ;
19929: LD_ADDR_EXP 67
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 104 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 104
19944: EQUAL
19945: IFFALSE 19955
// sReset := true ;
19947: LD_ADDR_EXP 68
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 105 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 105
19962: EQUAL
19963: IFFALSE 19973
// sSun := true ;
19965: LD_ADDR_EXP 69
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 106 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 106
19980: EQUAL
19981: IFFALSE 19991
// sTiger := true ;
19983: LD_ADDR_EXP 65
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 107 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 107
19998: EQUAL
19999: IFFALSE 20009
// sBomb := true ;
20001: LD_ADDR_EXP 66
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 108 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 108
20016: EQUAL
20017: IFFALSE 20027
// sWound := true ;
20019: LD_ADDR_EXP 74
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 109 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 109
20034: EQUAL
20035: IFFALSE 20045
// sBetray := true ;
20037: LD_ADDR_EXP 78
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 110 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 110
20052: EQUAL
20053: IFFALSE 20063
// sContamin := true ;
20055: LD_ADDR_EXP 79
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 111 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 111
20070: EQUAL
20071: IFFALSE 20081
// sOil := true ;
20073: LD_ADDR_EXP 81
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 112 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 112
20088: EQUAL
20089: IFFALSE 20099
// sStu := true ;
20091: LD_ADDR_EXP 85
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// if p3 = 113 then
20099: LD_VAR 0 3
20103: PUSH
20104: LD_INT 113
20106: EQUAL
20107: IFFALSE 20117
// sBazooka := true ;
20109: LD_ADDR_EXP 88
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if p3 = 114 then
20117: LD_VAR 0 3
20121: PUSH
20122: LD_INT 114
20124: EQUAL
20125: IFFALSE 20135
// sMortar := true ;
20127: LD_ADDR_EXP 89
20131: PUSH
20132: LD_INT 1
20134: ST_TO_ADDR
// if p3 = 115 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 115
20142: EQUAL
20143: IFFALSE 20153
// sRanger := true ;
20145: LD_ADDR_EXP 99
20149: PUSH
20150: LD_INT 1
20152: ST_TO_ADDR
// if p3 = 116 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 116
20160: EQUAL
20161: IFFALSE 20171
// sComputer := true ;
20163: LD_ADDR_EXP 100
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// if p3 = 117 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 117
20178: EQUAL
20179: IFFALSE 20189
// s30 := true ;
20181: LD_ADDR_EXP 101
20185: PUSH
20186: LD_INT 1
20188: ST_TO_ADDR
// if p3 = 118 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 118
20196: EQUAL
20197: IFFALSE 20207
// s60 := true ;
20199: LD_ADDR_EXP 102
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// end ; if p2 = hack_mode then
20207: LD_VAR 0 2
20211: PUSH
20212: LD_INT 101
20214: EQUAL
20215: IFFALSE 20343
// begin case p3 of 1 :
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 1
20224: DOUBLE
20225: EQUAL
20226: IFTRUE 20230
20228: GO 20237
20230: POP
// hHackUnlimitedResources ; 2 :
20231: CALL 32482 0 0
20235: GO 20343
20237: LD_INT 2
20239: DOUBLE
20240: EQUAL
20241: IFTRUE 20245
20243: GO 20252
20245: POP
// hHackSetLevel10 ; 3 :
20246: CALL 32615 0 0
20250: GO 20343
20252: LD_INT 3
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20267
20260: POP
// hHackSetLevel10YourUnits ; 4 :
20261: CALL 32700 0 0
20265: GO 20343
20267: LD_INT 4
20269: DOUBLE
20270: EQUAL
20271: IFTRUE 20275
20273: GO 20282
20275: POP
// hHackInvincible ; 5 :
20276: CALL 33148 0 0
20280: GO 20343
20282: LD_INT 5
20284: DOUBLE
20285: EQUAL
20286: IFTRUE 20290
20288: GO 20297
20290: POP
// hHackInvisible ; 6 :
20291: CALL 33259 0 0
20295: GO 20343
20297: LD_INT 6
20299: DOUBLE
20300: EQUAL
20301: IFTRUE 20305
20303: GO 20312
20305: POP
// hHackChangeYourSide ; 7 :
20306: CALL 33316 0 0
20310: GO 20343
20312: LD_INT 7
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20327
20320: POP
// hHackChangeUnitSide ; 8 :
20321: CALL 33358 0 0
20325: GO 20343
20327: LD_INT 8
20329: DOUBLE
20330: EQUAL
20331: IFTRUE 20335
20333: GO 20342
20335: POP
// hHackFog ; end ;
20336: CALL 33459 0 0
20340: GO 20343
20342: POP
// end ; if p2 = game_save_mode then
20343: LD_VAR 0 2
20347: PUSH
20348: LD_INT 102
20350: EQUAL
20351: IFFALSE 20406
// begin if p3 = 1 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 1
20360: EQUAL
20361: IFFALSE 20373
// globalGameSaveCounter := p4 ;
20363: LD_ADDR_EXP 45
20367: PUSH
20368: LD_VAR 0 4
20372: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 2
20380: EQUAL
20381: PUSH
20382: LD_EXP 45
20386: AND
20387: IFFALSE 20406
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20389: LD_STRING setGameSaveCounter(
20391: PUSH
20392: LD_EXP 45
20396: STR
20397: PUSH
20398: LD_STRING )
20400: STR
20401: PPUSH
20402: CALL_OW 559
// end ; end ;
20406: LD_VAR 0 7
20410: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20411: LD_INT 0
20413: PPUSH
// streamModeActive := false ;
20414: LD_ADDR_EXP 46
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// normalCounter := 36 ;
20422: LD_ADDR_EXP 47
20426: PUSH
20427: LD_INT 36
20429: ST_TO_ADDR
// hardcoreCounter := 18 ;
20430: LD_ADDR_EXP 48
20434: PUSH
20435: LD_INT 18
20437: ST_TO_ADDR
// sRocket := false ;
20438: LD_ADDR_EXP 51
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// sSpeed := false ;
20446: LD_ADDR_EXP 50
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// sEngine := false ;
20454: LD_ADDR_EXP 52
20458: PUSH
20459: LD_INT 0
20461: ST_TO_ADDR
// sSpec := false ;
20462: LD_ADDR_EXP 49
20466: PUSH
20467: LD_INT 0
20469: ST_TO_ADDR
// sLevel := false ;
20470: LD_ADDR_EXP 53
20474: PUSH
20475: LD_INT 0
20477: ST_TO_ADDR
// sArmoury := false ;
20478: LD_ADDR_EXP 54
20482: PUSH
20483: LD_INT 0
20485: ST_TO_ADDR
// sRadar := false ;
20486: LD_ADDR_EXP 55
20490: PUSH
20491: LD_INT 0
20493: ST_TO_ADDR
// sBunker := false ;
20494: LD_ADDR_EXP 56
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// sHack := false ;
20502: LD_ADDR_EXP 57
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// sFire := false ;
20510: LD_ADDR_EXP 58
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// sRefresh := false ;
20518: LD_ADDR_EXP 59
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// sExp := false ;
20526: LD_ADDR_EXP 60
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// sDepot := false ;
20534: LD_ADDR_EXP 61
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// sFlag := false ;
20542: LD_ADDR_EXP 62
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
// sKamikadze := false ;
20550: LD_ADDR_EXP 70
20554: PUSH
20555: LD_INT 0
20557: ST_TO_ADDR
// sTroll := false ;
20558: LD_ADDR_EXP 71
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// sSlow := false ;
20566: LD_ADDR_EXP 72
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// sLack := false ;
20574: LD_ADDR_EXP 73
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
// sTank := false ;
20582: LD_ADDR_EXP 75
20586: PUSH
20587: LD_INT 0
20589: ST_TO_ADDR
// sRemote := false ;
20590: LD_ADDR_EXP 76
20594: PUSH
20595: LD_INT 0
20597: ST_TO_ADDR
// sPowell := false ;
20598: LD_ADDR_EXP 77
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// sTeleport := false ;
20606: LD_ADDR_EXP 80
20610: PUSH
20611: LD_INT 0
20613: ST_TO_ADDR
// sOilTower := false ;
20614: LD_ADDR_EXP 82
20618: PUSH
20619: LD_INT 0
20621: ST_TO_ADDR
// sShovel := false ;
20622: LD_ADDR_EXP 83
20626: PUSH
20627: LD_INT 0
20629: ST_TO_ADDR
// sSheik := false ;
20630: LD_ADDR_EXP 84
20634: PUSH
20635: LD_INT 0
20637: ST_TO_ADDR
// sEarthquake := false ;
20638: LD_ADDR_EXP 86
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// sAI := false ;
20646: LD_ADDR_EXP 87
20650: PUSH
20651: LD_INT 0
20653: ST_TO_ADDR
// sCargo := false ;
20654: LD_ADDR_EXP 90
20658: PUSH
20659: LD_INT 0
20661: ST_TO_ADDR
// sDLaser := false ;
20662: LD_ADDR_EXP 91
20666: PUSH
20667: LD_INT 0
20669: ST_TO_ADDR
// sExchange := false ;
20670: LD_ADDR_EXP 92
20674: PUSH
20675: LD_INT 0
20677: ST_TO_ADDR
// sFac := false ;
20678: LD_ADDR_EXP 93
20682: PUSH
20683: LD_INT 0
20685: ST_TO_ADDR
// sPower := false ;
20686: LD_ADDR_EXP 94
20690: PUSH
20691: LD_INT 0
20693: ST_TO_ADDR
// sRandom := false ;
20694: LD_ADDR_EXP 95
20698: PUSH
20699: LD_INT 0
20701: ST_TO_ADDR
// sShield := false ;
20702: LD_ADDR_EXP 96
20706: PUSH
20707: LD_INT 0
20709: ST_TO_ADDR
// sTime := false ;
20710: LD_ADDR_EXP 97
20714: PUSH
20715: LD_INT 0
20717: ST_TO_ADDR
// sTools := false ;
20718: LD_ADDR_EXP 98
20722: PUSH
20723: LD_INT 0
20725: ST_TO_ADDR
// sSold := false ;
20726: LD_ADDR_EXP 63
20730: PUSH
20731: LD_INT 0
20733: ST_TO_ADDR
// sDiff := false ;
20734: LD_ADDR_EXP 64
20738: PUSH
20739: LD_INT 0
20741: ST_TO_ADDR
// sFog := false ;
20742: LD_ADDR_EXP 67
20746: PUSH
20747: LD_INT 0
20749: ST_TO_ADDR
// sReset := false ;
20750: LD_ADDR_EXP 68
20754: PUSH
20755: LD_INT 0
20757: ST_TO_ADDR
// sSun := false ;
20758: LD_ADDR_EXP 69
20762: PUSH
20763: LD_INT 0
20765: ST_TO_ADDR
// sTiger := false ;
20766: LD_ADDR_EXP 65
20770: PUSH
20771: LD_INT 0
20773: ST_TO_ADDR
// sBomb := false ;
20774: LD_ADDR_EXP 66
20778: PUSH
20779: LD_INT 0
20781: ST_TO_ADDR
// sWound := false ;
20782: LD_ADDR_EXP 74
20786: PUSH
20787: LD_INT 0
20789: ST_TO_ADDR
// sBetray := false ;
20790: LD_ADDR_EXP 78
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// sContamin := false ;
20798: LD_ADDR_EXP 79
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// sOil := false ;
20806: LD_ADDR_EXP 81
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// sStu := false ;
20814: LD_ADDR_EXP 85
20818: PUSH
20819: LD_INT 0
20821: ST_TO_ADDR
// sBazooka := false ;
20822: LD_ADDR_EXP 88
20826: PUSH
20827: LD_INT 0
20829: ST_TO_ADDR
// sMortar := false ;
20830: LD_ADDR_EXP 89
20834: PUSH
20835: LD_INT 0
20837: ST_TO_ADDR
// sRanger := false ;
20838: LD_ADDR_EXP 99
20842: PUSH
20843: LD_INT 0
20845: ST_TO_ADDR
// sComputer := false ;
20846: LD_ADDR_EXP 100
20850: PUSH
20851: LD_INT 0
20853: ST_TO_ADDR
// s30 := false ;
20854: LD_ADDR_EXP 101
20858: PUSH
20859: LD_INT 0
20861: ST_TO_ADDR
// s60 := false ;
20862: LD_ADDR_EXP 102
20866: PUSH
20867: LD_INT 0
20869: ST_TO_ADDR
// end ;
20870: LD_VAR 0 1
20874: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20875: LD_INT 0
20877: PPUSH
20878: PPUSH
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
// result := [ ] ;
20884: LD_ADDR_VAR 0 2
20888: PUSH
20889: EMPTY
20890: ST_TO_ADDR
// if campaign_id = 1 then
20891: LD_OWVAR 69
20895: PUSH
20896: LD_INT 1
20898: EQUAL
20899: IFFALSE 24065
// begin case mission_number of 1 :
20901: LD_OWVAR 70
20905: PUSH
20906: LD_INT 1
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20990
20914: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20915: LD_ADDR_VAR 0 2
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 4
20925: PUSH
20926: LD_INT 11
20928: PUSH
20929: LD_INT 12
20931: PUSH
20932: LD_INT 15
20934: PUSH
20935: LD_INT 16
20937: PUSH
20938: LD_INT 22
20940: PUSH
20941: LD_INT 23
20943: PUSH
20944: LD_INT 26
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 101
20960: PUSH
20961: LD_INT 102
20963: PUSH
20964: LD_INT 106
20966: PUSH
20967: LD_INT 116
20969: PUSH
20970: LD_INT 117
20972: PUSH
20973: LD_INT 118
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: ST_TO_ADDR
20988: GO 24063
20990: LD_INT 2
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21082
20998: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: LD_INT 4
21009: PUSH
21010: LD_INT 11
21012: PUSH
21013: LD_INT 12
21015: PUSH
21016: LD_INT 15
21018: PUSH
21019: LD_INT 16
21021: PUSH
21022: LD_INT 22
21024: PUSH
21025: LD_INT 23
21027: PUSH
21028: LD_INT 26
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 101
21044: PUSH
21045: LD_INT 102
21047: PUSH
21048: LD_INT 105
21050: PUSH
21051: LD_INT 106
21053: PUSH
21054: LD_INT 108
21056: PUSH
21057: LD_INT 116
21059: PUSH
21060: LD_INT 117
21062: PUSH
21063: LD_INT 118
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: ST_TO_ADDR
21080: GO 24063
21082: LD_INT 3
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21178
21090: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21091: LD_ADDR_VAR 0 2
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: LD_INT 4
21101: PUSH
21102: LD_INT 5
21104: PUSH
21105: LD_INT 11
21107: PUSH
21108: LD_INT 12
21110: PUSH
21111: LD_INT 15
21113: PUSH
21114: LD_INT 16
21116: PUSH
21117: LD_INT 22
21119: PUSH
21120: LD_INT 26
21122: PUSH
21123: LD_INT 36
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 101
21140: PUSH
21141: LD_INT 102
21143: PUSH
21144: LD_INT 105
21146: PUSH
21147: LD_INT 106
21149: PUSH
21150: LD_INT 108
21152: PUSH
21153: LD_INT 116
21155: PUSH
21156: LD_INT 117
21158: PUSH
21159: LD_INT 118
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 24063
21178: LD_INT 4
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21282
21186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21187: LD_ADDR_VAR 0 2
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 4
21197: PUSH
21198: LD_INT 5
21200: PUSH
21201: LD_INT 8
21203: PUSH
21204: LD_INT 11
21206: PUSH
21207: LD_INT 12
21209: PUSH
21210: LD_INT 15
21212: PUSH
21213: LD_INT 16
21215: PUSH
21216: LD_INT 22
21218: PUSH
21219: LD_INT 23
21221: PUSH
21222: LD_INT 26
21224: PUSH
21225: LD_INT 36
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 101
21244: PUSH
21245: LD_INT 102
21247: PUSH
21248: LD_INT 105
21250: PUSH
21251: LD_INT 106
21253: PUSH
21254: LD_INT 108
21256: PUSH
21257: LD_INT 116
21259: PUSH
21260: LD_INT 117
21262: PUSH
21263: LD_INT 118
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: ST_TO_ADDR
21280: GO 24063
21282: LD_INT 5
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21402
21290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21291: LD_ADDR_VAR 0 2
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 4
21301: PUSH
21302: LD_INT 5
21304: PUSH
21305: LD_INT 6
21307: PUSH
21308: LD_INT 8
21310: PUSH
21311: LD_INT 11
21313: PUSH
21314: LD_INT 12
21316: PUSH
21317: LD_INT 15
21319: PUSH
21320: LD_INT 16
21322: PUSH
21323: LD_INT 22
21325: PUSH
21326: LD_INT 23
21328: PUSH
21329: LD_INT 25
21331: PUSH
21332: LD_INT 26
21334: PUSH
21335: LD_INT 36
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 101
21356: PUSH
21357: LD_INT 102
21359: PUSH
21360: LD_INT 105
21362: PUSH
21363: LD_INT 106
21365: PUSH
21366: LD_INT 108
21368: PUSH
21369: LD_INT 109
21371: PUSH
21372: LD_INT 112
21374: PUSH
21375: LD_INT 116
21377: PUSH
21378: LD_INT 117
21380: PUSH
21381: LD_INT 118
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: ST_TO_ADDR
21400: GO 24063
21402: LD_INT 6
21404: DOUBLE
21405: EQUAL
21406: IFTRUE 21410
21408: GO 21542
21410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21411: LD_ADDR_VAR 0 2
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 4
21421: PUSH
21422: LD_INT 5
21424: PUSH
21425: LD_INT 6
21427: PUSH
21428: LD_INT 8
21430: PUSH
21431: LD_INT 11
21433: PUSH
21434: LD_INT 12
21436: PUSH
21437: LD_INT 15
21439: PUSH
21440: LD_INT 16
21442: PUSH
21443: LD_INT 20
21445: PUSH
21446: LD_INT 21
21448: PUSH
21449: LD_INT 22
21451: PUSH
21452: LD_INT 23
21454: PUSH
21455: LD_INT 25
21457: PUSH
21458: LD_INT 26
21460: PUSH
21461: LD_INT 30
21463: PUSH
21464: LD_INT 31
21466: PUSH
21467: LD_INT 32
21469: PUSH
21470: LD_INT 36
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 101
21496: PUSH
21497: LD_INT 102
21499: PUSH
21500: LD_INT 105
21502: PUSH
21503: LD_INT 106
21505: PUSH
21506: LD_INT 108
21508: PUSH
21509: LD_INT 109
21511: PUSH
21512: LD_INT 112
21514: PUSH
21515: LD_INT 116
21517: PUSH
21518: LD_INT 117
21520: PUSH
21521: LD_INT 118
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: ST_TO_ADDR
21540: GO 24063
21542: LD_INT 7
21544: DOUBLE
21545: EQUAL
21546: IFTRUE 21550
21548: GO 21662
21550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21551: LD_ADDR_VAR 0 2
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 4
21561: PUSH
21562: LD_INT 5
21564: PUSH
21565: LD_INT 7
21567: PUSH
21568: LD_INT 11
21570: PUSH
21571: LD_INT 12
21573: PUSH
21574: LD_INT 15
21576: PUSH
21577: LD_INT 16
21579: PUSH
21580: LD_INT 20
21582: PUSH
21583: LD_INT 21
21585: PUSH
21586: LD_INT 22
21588: PUSH
21589: LD_INT 23
21591: PUSH
21592: LD_INT 25
21594: PUSH
21595: LD_INT 26
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 101
21616: PUSH
21617: LD_INT 102
21619: PUSH
21620: LD_INT 103
21622: PUSH
21623: LD_INT 105
21625: PUSH
21626: LD_INT 106
21628: PUSH
21629: LD_INT 108
21631: PUSH
21632: LD_INT 112
21634: PUSH
21635: LD_INT 116
21637: PUSH
21638: LD_INT 117
21640: PUSH
21641: LD_INT 118
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: ST_TO_ADDR
21660: GO 24063
21662: LD_INT 8
21664: DOUBLE
21665: EQUAL
21666: IFTRUE 21670
21668: GO 21810
21670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21671: LD_ADDR_VAR 0 2
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 4
21681: PUSH
21682: LD_INT 5
21684: PUSH
21685: LD_INT 6
21687: PUSH
21688: LD_INT 7
21690: PUSH
21691: LD_INT 8
21693: PUSH
21694: LD_INT 11
21696: PUSH
21697: LD_INT 12
21699: PUSH
21700: LD_INT 15
21702: PUSH
21703: LD_INT 16
21705: PUSH
21706: LD_INT 20
21708: PUSH
21709: LD_INT 21
21711: PUSH
21712: LD_INT 22
21714: PUSH
21715: LD_INT 23
21717: PUSH
21718: LD_INT 25
21720: PUSH
21721: LD_INT 26
21723: PUSH
21724: LD_INT 30
21726: PUSH
21727: LD_INT 31
21729: PUSH
21730: LD_INT 32
21732: PUSH
21733: LD_INT 36
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 101
21760: PUSH
21761: LD_INT 102
21763: PUSH
21764: LD_INT 103
21766: PUSH
21767: LD_INT 105
21769: PUSH
21770: LD_INT 106
21772: PUSH
21773: LD_INT 108
21775: PUSH
21776: LD_INT 109
21778: PUSH
21779: LD_INT 112
21781: PUSH
21782: LD_INT 116
21784: PUSH
21785: LD_INT 117
21787: PUSH
21788: LD_INT 118
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: ST_TO_ADDR
21808: GO 24063
21810: LD_INT 9
21812: DOUBLE
21813: EQUAL
21814: IFTRUE 21818
21816: GO 21966
21818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21819: LD_ADDR_VAR 0 2
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 4
21829: PUSH
21830: LD_INT 5
21832: PUSH
21833: LD_INT 6
21835: PUSH
21836: LD_INT 7
21838: PUSH
21839: LD_INT 8
21841: PUSH
21842: LD_INT 11
21844: PUSH
21845: LD_INT 12
21847: PUSH
21848: LD_INT 15
21850: PUSH
21851: LD_INT 16
21853: PUSH
21854: LD_INT 20
21856: PUSH
21857: LD_INT 21
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_INT 23
21865: PUSH
21866: LD_INT 25
21868: PUSH
21869: LD_INT 26
21871: PUSH
21872: LD_INT 28
21874: PUSH
21875: LD_INT 30
21877: PUSH
21878: LD_INT 31
21880: PUSH
21881: LD_INT 32
21883: PUSH
21884: LD_INT 36
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 101
21912: PUSH
21913: LD_INT 102
21915: PUSH
21916: LD_INT 103
21918: PUSH
21919: LD_INT 105
21921: PUSH
21922: LD_INT 106
21924: PUSH
21925: LD_INT 108
21927: PUSH
21928: LD_INT 109
21930: PUSH
21931: LD_INT 112
21933: PUSH
21934: LD_INT 114
21936: PUSH
21937: LD_INT 116
21939: PUSH
21940: LD_INT 117
21942: PUSH
21943: LD_INT 118
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: ST_TO_ADDR
21964: GO 24063
21966: LD_INT 10
21968: DOUBLE
21969: EQUAL
21970: IFTRUE 21974
21972: GO 22170
21974: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21975: LD_ADDR_VAR 0 2
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: LD_INT 4
21985: PUSH
21986: LD_INT 5
21988: PUSH
21989: LD_INT 6
21991: PUSH
21992: LD_INT 7
21994: PUSH
21995: LD_INT 8
21997: PUSH
21998: LD_INT 9
22000: PUSH
22001: LD_INT 10
22003: PUSH
22004: LD_INT 11
22006: PUSH
22007: LD_INT 12
22009: PUSH
22010: LD_INT 13
22012: PUSH
22013: LD_INT 14
22015: PUSH
22016: LD_INT 15
22018: PUSH
22019: LD_INT 16
22021: PUSH
22022: LD_INT 17
22024: PUSH
22025: LD_INT 18
22027: PUSH
22028: LD_INT 19
22030: PUSH
22031: LD_INT 20
22033: PUSH
22034: LD_INT 21
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_INT 23
22042: PUSH
22043: LD_INT 24
22045: PUSH
22046: LD_INT 25
22048: PUSH
22049: LD_INT 26
22051: PUSH
22052: LD_INT 28
22054: PUSH
22055: LD_INT 30
22057: PUSH
22058: LD_INT 31
22060: PUSH
22061: LD_INT 32
22063: PUSH
22064: LD_INT 36
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 101
22100: PUSH
22101: LD_INT 102
22103: PUSH
22104: LD_INT 103
22106: PUSH
22107: LD_INT 104
22109: PUSH
22110: LD_INT 105
22112: PUSH
22113: LD_INT 106
22115: PUSH
22116: LD_INT 107
22118: PUSH
22119: LD_INT 108
22121: PUSH
22122: LD_INT 109
22124: PUSH
22125: LD_INT 110
22127: PUSH
22128: LD_INT 111
22130: PUSH
22131: LD_INT 112
22133: PUSH
22134: LD_INT 114
22136: PUSH
22137: LD_INT 116
22139: PUSH
22140: LD_INT 117
22142: PUSH
22143: LD_INT 118
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: ST_TO_ADDR
22168: GO 24063
22170: LD_INT 11
22172: DOUBLE
22173: EQUAL
22174: IFTRUE 22178
22176: GO 22382
22178: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: LD_INT 4
22192: PUSH
22193: LD_INT 5
22195: PUSH
22196: LD_INT 6
22198: PUSH
22199: LD_INT 7
22201: PUSH
22202: LD_INT 8
22204: PUSH
22205: LD_INT 9
22207: PUSH
22208: LD_INT 10
22210: PUSH
22211: LD_INT 11
22213: PUSH
22214: LD_INT 12
22216: PUSH
22217: LD_INT 13
22219: PUSH
22220: LD_INT 14
22222: PUSH
22223: LD_INT 15
22225: PUSH
22226: LD_INT 16
22228: PUSH
22229: LD_INT 17
22231: PUSH
22232: LD_INT 18
22234: PUSH
22235: LD_INT 19
22237: PUSH
22238: LD_INT 20
22240: PUSH
22241: LD_INT 21
22243: PUSH
22244: LD_INT 22
22246: PUSH
22247: LD_INT 23
22249: PUSH
22250: LD_INT 24
22252: PUSH
22253: LD_INT 25
22255: PUSH
22256: LD_INT 26
22258: PUSH
22259: LD_INT 28
22261: PUSH
22262: LD_INT 30
22264: PUSH
22265: LD_INT 31
22267: PUSH
22268: LD_INT 32
22270: PUSH
22271: LD_INT 34
22273: PUSH
22274: LD_INT 36
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 101
22312: PUSH
22313: LD_INT 102
22315: PUSH
22316: LD_INT 103
22318: PUSH
22319: LD_INT 104
22321: PUSH
22322: LD_INT 105
22324: PUSH
22325: LD_INT 106
22327: PUSH
22328: LD_INT 107
22330: PUSH
22331: LD_INT 108
22333: PUSH
22334: LD_INT 109
22336: PUSH
22337: LD_INT 110
22339: PUSH
22340: LD_INT 111
22342: PUSH
22343: LD_INT 112
22345: PUSH
22346: LD_INT 114
22348: PUSH
22349: LD_INT 116
22351: PUSH
22352: LD_INT 117
22354: PUSH
22355: LD_INT 118
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: ST_TO_ADDR
22380: GO 24063
22382: LD_INT 12
22384: DOUBLE
22385: EQUAL
22386: IFTRUE 22390
22388: GO 22610
22390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: LD_INT 4
22407: PUSH
22408: LD_INT 5
22410: PUSH
22411: LD_INT 6
22413: PUSH
22414: LD_INT 7
22416: PUSH
22417: LD_INT 8
22419: PUSH
22420: LD_INT 9
22422: PUSH
22423: LD_INT 10
22425: PUSH
22426: LD_INT 11
22428: PUSH
22429: LD_INT 12
22431: PUSH
22432: LD_INT 13
22434: PUSH
22435: LD_INT 14
22437: PUSH
22438: LD_INT 15
22440: PUSH
22441: LD_INT 16
22443: PUSH
22444: LD_INT 17
22446: PUSH
22447: LD_INT 18
22449: PUSH
22450: LD_INT 19
22452: PUSH
22453: LD_INT 20
22455: PUSH
22456: LD_INT 21
22458: PUSH
22459: LD_INT 22
22461: PUSH
22462: LD_INT 23
22464: PUSH
22465: LD_INT 24
22467: PUSH
22468: LD_INT 25
22470: PUSH
22471: LD_INT 26
22473: PUSH
22474: LD_INT 27
22476: PUSH
22477: LD_INT 28
22479: PUSH
22480: LD_INT 30
22482: PUSH
22483: LD_INT 31
22485: PUSH
22486: LD_INT 32
22488: PUSH
22489: LD_INT 33
22491: PUSH
22492: LD_INT 34
22494: PUSH
22495: LD_INT 36
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 101
22536: PUSH
22537: LD_INT 102
22539: PUSH
22540: LD_INT 103
22542: PUSH
22543: LD_INT 104
22545: PUSH
22546: LD_INT 105
22548: PUSH
22549: LD_INT 106
22551: PUSH
22552: LD_INT 107
22554: PUSH
22555: LD_INT 108
22557: PUSH
22558: LD_INT 109
22560: PUSH
22561: LD_INT 110
22563: PUSH
22564: LD_INT 111
22566: PUSH
22567: LD_INT 112
22569: PUSH
22570: LD_INT 113
22572: PUSH
22573: LD_INT 114
22575: PUSH
22576: LD_INT 116
22578: PUSH
22579: LD_INT 117
22581: PUSH
22582: LD_INT 118
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: ST_TO_ADDR
22608: GO 24063
22610: LD_INT 13
22612: DOUBLE
22613: EQUAL
22614: IFTRUE 22618
22616: GO 22826
22618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22619: LD_ADDR_VAR 0 2
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: LD_INT 5
22638: PUSH
22639: LD_INT 8
22641: PUSH
22642: LD_INT 9
22644: PUSH
22645: LD_INT 10
22647: PUSH
22648: LD_INT 11
22650: PUSH
22651: LD_INT 12
22653: PUSH
22654: LD_INT 14
22656: PUSH
22657: LD_INT 15
22659: PUSH
22660: LD_INT 16
22662: PUSH
22663: LD_INT 17
22665: PUSH
22666: LD_INT 18
22668: PUSH
22669: LD_INT 19
22671: PUSH
22672: LD_INT 20
22674: PUSH
22675: LD_INT 21
22677: PUSH
22678: LD_INT 22
22680: PUSH
22681: LD_INT 23
22683: PUSH
22684: LD_INT 24
22686: PUSH
22687: LD_INT 25
22689: PUSH
22690: LD_INT 26
22692: PUSH
22693: LD_INT 27
22695: PUSH
22696: LD_INT 28
22698: PUSH
22699: LD_INT 30
22701: PUSH
22702: LD_INT 31
22704: PUSH
22705: LD_INT 32
22707: PUSH
22708: LD_INT 33
22710: PUSH
22711: LD_INT 34
22713: PUSH
22714: LD_INT 36
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 101
22752: PUSH
22753: LD_INT 102
22755: PUSH
22756: LD_INT 103
22758: PUSH
22759: LD_INT 104
22761: PUSH
22762: LD_INT 105
22764: PUSH
22765: LD_INT 106
22767: PUSH
22768: LD_INT 107
22770: PUSH
22771: LD_INT 108
22773: PUSH
22774: LD_INT 109
22776: PUSH
22777: LD_INT 110
22779: PUSH
22780: LD_INT 111
22782: PUSH
22783: LD_INT 112
22785: PUSH
22786: LD_INT 113
22788: PUSH
22789: LD_INT 114
22791: PUSH
22792: LD_INT 116
22794: PUSH
22795: LD_INT 117
22797: PUSH
22798: LD_INT 118
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: ST_TO_ADDR
22824: GO 24063
22826: LD_INT 14
22828: DOUBLE
22829: EQUAL
22830: IFTRUE 22834
22832: GO 23058
22834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22835: LD_ADDR_VAR 0 2
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 3
22848: PUSH
22849: LD_INT 4
22851: PUSH
22852: LD_INT 5
22854: PUSH
22855: LD_INT 6
22857: PUSH
22858: LD_INT 7
22860: PUSH
22861: LD_INT 8
22863: PUSH
22864: LD_INT 9
22866: PUSH
22867: LD_INT 10
22869: PUSH
22870: LD_INT 11
22872: PUSH
22873: LD_INT 12
22875: PUSH
22876: LD_INT 13
22878: PUSH
22879: LD_INT 14
22881: PUSH
22882: LD_INT 15
22884: PUSH
22885: LD_INT 16
22887: PUSH
22888: LD_INT 17
22890: PUSH
22891: LD_INT 18
22893: PUSH
22894: LD_INT 19
22896: PUSH
22897: LD_INT 20
22899: PUSH
22900: LD_INT 21
22902: PUSH
22903: LD_INT 22
22905: PUSH
22906: LD_INT 23
22908: PUSH
22909: LD_INT 24
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 26
22917: PUSH
22918: LD_INT 27
22920: PUSH
22921: LD_INT 28
22923: PUSH
22924: LD_INT 29
22926: PUSH
22927: LD_INT 30
22929: PUSH
22930: LD_INT 31
22932: PUSH
22933: LD_INT 32
22935: PUSH
22936: LD_INT 33
22938: PUSH
22939: LD_INT 34
22941: PUSH
22942: LD_INT 36
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 101
22984: PUSH
22985: LD_INT 102
22987: PUSH
22988: LD_INT 103
22990: PUSH
22991: LD_INT 104
22993: PUSH
22994: LD_INT 105
22996: PUSH
22997: LD_INT 106
22999: PUSH
23000: LD_INT 107
23002: PUSH
23003: LD_INT 108
23005: PUSH
23006: LD_INT 109
23008: PUSH
23009: LD_INT 110
23011: PUSH
23012: LD_INT 111
23014: PUSH
23015: LD_INT 112
23017: PUSH
23018: LD_INT 113
23020: PUSH
23021: LD_INT 114
23023: PUSH
23024: LD_INT 116
23026: PUSH
23027: LD_INT 117
23029: PUSH
23030: LD_INT 118
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: ST_TO_ADDR
23056: GO 24063
23058: LD_INT 15
23060: DOUBLE
23061: EQUAL
23062: IFTRUE 23066
23064: GO 23290
23066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23067: LD_ADDR_VAR 0 2
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: LD_INT 4
23083: PUSH
23084: LD_INT 5
23086: PUSH
23087: LD_INT 6
23089: PUSH
23090: LD_INT 7
23092: PUSH
23093: LD_INT 8
23095: PUSH
23096: LD_INT 9
23098: PUSH
23099: LD_INT 10
23101: PUSH
23102: LD_INT 11
23104: PUSH
23105: LD_INT 12
23107: PUSH
23108: LD_INT 13
23110: PUSH
23111: LD_INT 14
23113: PUSH
23114: LD_INT 15
23116: PUSH
23117: LD_INT 16
23119: PUSH
23120: LD_INT 17
23122: PUSH
23123: LD_INT 18
23125: PUSH
23126: LD_INT 19
23128: PUSH
23129: LD_INT 20
23131: PUSH
23132: LD_INT 21
23134: PUSH
23135: LD_INT 22
23137: PUSH
23138: LD_INT 23
23140: PUSH
23141: LD_INT 24
23143: PUSH
23144: LD_INT 25
23146: PUSH
23147: LD_INT 26
23149: PUSH
23150: LD_INT 27
23152: PUSH
23153: LD_INT 28
23155: PUSH
23156: LD_INT 29
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: LD_INT 31
23164: PUSH
23165: LD_INT 32
23167: PUSH
23168: LD_INT 33
23170: PUSH
23171: LD_INT 34
23173: PUSH
23174: LD_INT 36
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 101
23216: PUSH
23217: LD_INT 102
23219: PUSH
23220: LD_INT 103
23222: PUSH
23223: LD_INT 104
23225: PUSH
23226: LD_INT 105
23228: PUSH
23229: LD_INT 106
23231: PUSH
23232: LD_INT 107
23234: PUSH
23235: LD_INT 108
23237: PUSH
23238: LD_INT 109
23240: PUSH
23241: LD_INT 110
23243: PUSH
23244: LD_INT 111
23246: PUSH
23247: LD_INT 112
23249: PUSH
23250: LD_INT 113
23252: PUSH
23253: LD_INT 114
23255: PUSH
23256: LD_INT 116
23258: PUSH
23259: LD_INT 117
23261: PUSH
23262: LD_INT 118
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: ST_TO_ADDR
23288: GO 24063
23290: LD_INT 16
23292: DOUBLE
23293: EQUAL
23294: IFTRUE 23298
23296: GO 23434
23298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23299: LD_ADDR_VAR 0 2
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 4
23309: PUSH
23310: LD_INT 5
23312: PUSH
23313: LD_INT 7
23315: PUSH
23316: LD_INT 11
23318: PUSH
23319: LD_INT 12
23321: PUSH
23322: LD_INT 15
23324: PUSH
23325: LD_INT 16
23327: PUSH
23328: LD_INT 20
23330: PUSH
23331: LD_INT 21
23333: PUSH
23334: LD_INT 22
23336: PUSH
23337: LD_INT 23
23339: PUSH
23340: LD_INT 25
23342: PUSH
23343: LD_INT 26
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 31
23351: PUSH
23352: LD_INT 32
23354: PUSH
23355: LD_INT 33
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 101
23384: PUSH
23385: LD_INT 102
23387: PUSH
23388: LD_INT 103
23390: PUSH
23391: LD_INT 106
23393: PUSH
23394: LD_INT 108
23396: PUSH
23397: LD_INT 112
23399: PUSH
23400: LD_INT 113
23402: PUSH
23403: LD_INT 114
23405: PUSH
23406: LD_INT 116
23408: PUSH
23409: LD_INT 117
23411: PUSH
23412: LD_INT 118
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: ST_TO_ADDR
23432: GO 24063
23434: LD_INT 17
23436: DOUBLE
23437: EQUAL
23438: IFTRUE 23442
23440: GO 23666
23442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23443: LD_ADDR_VAR 0 2
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 3
23456: PUSH
23457: LD_INT 4
23459: PUSH
23460: LD_INT 5
23462: PUSH
23463: LD_INT 6
23465: PUSH
23466: LD_INT 7
23468: PUSH
23469: LD_INT 8
23471: PUSH
23472: LD_INT 9
23474: PUSH
23475: LD_INT 10
23477: PUSH
23478: LD_INT 11
23480: PUSH
23481: LD_INT 12
23483: PUSH
23484: LD_INT 13
23486: PUSH
23487: LD_INT 14
23489: PUSH
23490: LD_INT 15
23492: PUSH
23493: LD_INT 16
23495: PUSH
23496: LD_INT 17
23498: PUSH
23499: LD_INT 18
23501: PUSH
23502: LD_INT 19
23504: PUSH
23505: LD_INT 20
23507: PUSH
23508: LD_INT 21
23510: PUSH
23511: LD_INT 22
23513: PUSH
23514: LD_INT 23
23516: PUSH
23517: LD_INT 24
23519: PUSH
23520: LD_INT 25
23522: PUSH
23523: LD_INT 26
23525: PUSH
23526: LD_INT 27
23528: PUSH
23529: LD_INT 28
23531: PUSH
23532: LD_INT 29
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 31
23540: PUSH
23541: LD_INT 32
23543: PUSH
23544: LD_INT 33
23546: PUSH
23547: LD_INT 34
23549: PUSH
23550: LD_INT 36
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 101
23592: PUSH
23593: LD_INT 102
23595: PUSH
23596: LD_INT 103
23598: PUSH
23599: LD_INT 104
23601: PUSH
23602: LD_INT 105
23604: PUSH
23605: LD_INT 106
23607: PUSH
23608: LD_INT 107
23610: PUSH
23611: LD_INT 108
23613: PUSH
23614: LD_INT 109
23616: PUSH
23617: LD_INT 110
23619: PUSH
23620: LD_INT 111
23622: PUSH
23623: LD_INT 112
23625: PUSH
23626: LD_INT 113
23628: PUSH
23629: LD_INT 114
23631: PUSH
23632: LD_INT 116
23634: PUSH
23635: LD_INT 117
23637: PUSH
23638: LD_INT 118
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: ST_TO_ADDR
23664: GO 24063
23666: LD_INT 18
23668: DOUBLE
23669: EQUAL
23670: IFTRUE 23674
23672: GO 23822
23674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23675: LD_ADDR_VAR 0 2
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 4
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: LD_INT 7
23691: PUSH
23692: LD_INT 11
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: LD_INT 15
23700: PUSH
23701: LD_INT 16
23703: PUSH
23704: LD_INT 20
23706: PUSH
23707: LD_INT 21
23709: PUSH
23710: LD_INT 22
23712: PUSH
23713: LD_INT 23
23715: PUSH
23716: LD_INT 25
23718: PUSH
23719: LD_INT 26
23721: PUSH
23722: LD_INT 30
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 32
23730: PUSH
23731: LD_INT 33
23733: PUSH
23734: LD_INT 34
23736: PUSH
23737: LD_INT 35
23739: PUSH
23740: LD_INT 36
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 101
23768: PUSH
23769: LD_INT 102
23771: PUSH
23772: LD_INT 103
23774: PUSH
23775: LD_INT 106
23777: PUSH
23778: LD_INT 108
23780: PUSH
23781: LD_INT 112
23783: PUSH
23784: LD_INT 113
23786: PUSH
23787: LD_INT 114
23789: PUSH
23790: LD_INT 115
23792: PUSH
23793: LD_INT 116
23795: PUSH
23796: LD_INT 117
23798: PUSH
23799: LD_INT 118
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: ST_TO_ADDR
23820: GO 24063
23822: LD_INT 19
23824: DOUBLE
23825: EQUAL
23826: IFTRUE 23830
23828: GO 24062
23830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23831: LD_ADDR_VAR 0 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: LD_INT 3
23844: PUSH
23845: LD_INT 4
23847: PUSH
23848: LD_INT 5
23850: PUSH
23851: LD_INT 6
23853: PUSH
23854: LD_INT 7
23856: PUSH
23857: LD_INT 8
23859: PUSH
23860: LD_INT 9
23862: PUSH
23863: LD_INT 10
23865: PUSH
23866: LD_INT 11
23868: PUSH
23869: LD_INT 12
23871: PUSH
23872: LD_INT 13
23874: PUSH
23875: LD_INT 14
23877: PUSH
23878: LD_INT 15
23880: PUSH
23881: LD_INT 16
23883: PUSH
23884: LD_INT 17
23886: PUSH
23887: LD_INT 18
23889: PUSH
23890: LD_INT 19
23892: PUSH
23893: LD_INT 20
23895: PUSH
23896: LD_INT 21
23898: PUSH
23899: LD_INT 22
23901: PUSH
23902: LD_INT 23
23904: PUSH
23905: LD_INT 24
23907: PUSH
23908: LD_INT 25
23910: PUSH
23911: LD_INT 26
23913: PUSH
23914: LD_INT 27
23916: PUSH
23917: LD_INT 28
23919: PUSH
23920: LD_INT 29
23922: PUSH
23923: LD_INT 30
23925: PUSH
23926: LD_INT 31
23928: PUSH
23929: LD_INT 32
23931: PUSH
23932: LD_INT 33
23934: PUSH
23935: LD_INT 34
23937: PUSH
23938: LD_INT 35
23940: PUSH
23941: LD_INT 36
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 101
23984: PUSH
23985: LD_INT 102
23987: PUSH
23988: LD_INT 103
23990: PUSH
23991: LD_INT 104
23993: PUSH
23994: LD_INT 105
23996: PUSH
23997: LD_INT 106
23999: PUSH
24000: LD_INT 107
24002: PUSH
24003: LD_INT 108
24005: PUSH
24006: LD_INT 109
24008: PUSH
24009: LD_INT 110
24011: PUSH
24012: LD_INT 111
24014: PUSH
24015: LD_INT 112
24017: PUSH
24018: LD_INT 113
24020: PUSH
24021: LD_INT 114
24023: PUSH
24024: LD_INT 115
24026: PUSH
24027: LD_INT 116
24029: PUSH
24030: LD_INT 117
24032: PUSH
24033: LD_INT 118
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: ST_TO_ADDR
24060: GO 24063
24062: POP
// end else
24063: GO 24294
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24065: LD_ADDR_VAR 0 2
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 3
24078: PUSH
24079: LD_INT 4
24081: PUSH
24082: LD_INT 5
24084: PUSH
24085: LD_INT 6
24087: PUSH
24088: LD_INT 7
24090: PUSH
24091: LD_INT 8
24093: PUSH
24094: LD_INT 9
24096: PUSH
24097: LD_INT 10
24099: PUSH
24100: LD_INT 11
24102: PUSH
24103: LD_INT 12
24105: PUSH
24106: LD_INT 13
24108: PUSH
24109: LD_INT 14
24111: PUSH
24112: LD_INT 15
24114: PUSH
24115: LD_INT 16
24117: PUSH
24118: LD_INT 17
24120: PUSH
24121: LD_INT 18
24123: PUSH
24124: LD_INT 19
24126: PUSH
24127: LD_INT 20
24129: PUSH
24130: LD_INT 21
24132: PUSH
24133: LD_INT 22
24135: PUSH
24136: LD_INT 23
24138: PUSH
24139: LD_INT 24
24141: PUSH
24142: LD_INT 25
24144: PUSH
24145: LD_INT 26
24147: PUSH
24148: LD_INT 27
24150: PUSH
24151: LD_INT 28
24153: PUSH
24154: LD_INT 29
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 31
24162: PUSH
24163: LD_INT 32
24165: PUSH
24166: LD_INT 33
24168: PUSH
24169: LD_INT 34
24171: PUSH
24172: LD_INT 35
24174: PUSH
24175: LD_INT 36
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 101
24218: PUSH
24219: LD_INT 102
24221: PUSH
24222: LD_INT 103
24224: PUSH
24225: LD_INT 104
24227: PUSH
24228: LD_INT 105
24230: PUSH
24231: LD_INT 106
24233: PUSH
24234: LD_INT 107
24236: PUSH
24237: LD_INT 108
24239: PUSH
24240: LD_INT 109
24242: PUSH
24243: LD_INT 110
24245: PUSH
24246: LD_INT 111
24248: PUSH
24249: LD_INT 112
24251: PUSH
24252: LD_INT 113
24254: PUSH
24255: LD_INT 114
24257: PUSH
24258: LD_INT 115
24260: PUSH
24261: LD_INT 116
24263: PUSH
24264: LD_INT 117
24266: PUSH
24267: LD_INT 118
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// if result then
24294: LD_VAR 0 2
24298: IFFALSE 25084
// begin normal :=  ;
24300: LD_ADDR_VAR 0 5
24304: PUSH
24305: LD_STRING 
24307: ST_TO_ADDR
// hardcore :=  ;
24308: LD_ADDR_VAR 0 6
24312: PUSH
24313: LD_STRING 
24315: ST_TO_ADDR
// active :=  ;
24316: LD_ADDR_VAR 0 7
24320: PUSH
24321: LD_STRING 
24323: ST_TO_ADDR
// for i = 1 to normalCounter do
24324: LD_ADDR_VAR 0 8
24328: PUSH
24329: DOUBLE
24330: LD_INT 1
24332: DEC
24333: ST_TO_ADDR
24334: LD_EXP 47
24338: PUSH
24339: FOR_TO
24340: IFFALSE 24441
// begin tmp := 0 ;
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_STRING 0
24349: ST_TO_ADDR
// if result [ 1 ] then
24350: LD_VAR 0 2
24354: PUSH
24355: LD_INT 1
24357: ARRAY
24358: IFFALSE 24423
// if result [ 1 ] [ 1 ] = i then
24360: LD_VAR 0 2
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: PUSH
24369: LD_INT 1
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 8
24377: EQUAL
24378: IFFALSE 24423
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24380: LD_ADDR_VAR 0 2
24384: PUSH
24385: LD_VAR 0 2
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: LD_VAR 0 2
24397: PUSH
24398: LD_INT 1
24400: ARRAY
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: CALL_OW 3
24409: PPUSH
24410: CALL_OW 1
24414: ST_TO_ADDR
// tmp := 1 ;
24415: LD_ADDR_VAR 0 3
24419: PUSH
24420: LD_STRING 1
24422: ST_TO_ADDR
// end ; normal := normal & tmp ;
24423: LD_ADDR_VAR 0 5
24427: PUSH
24428: LD_VAR 0 5
24432: PUSH
24433: LD_VAR 0 3
24437: STR
24438: ST_TO_ADDR
// end ;
24439: GO 24339
24441: POP
24442: POP
// for i = 1 to hardcoreCounter do
24443: LD_ADDR_VAR 0 8
24447: PUSH
24448: DOUBLE
24449: LD_INT 1
24451: DEC
24452: ST_TO_ADDR
24453: LD_EXP 48
24457: PUSH
24458: FOR_TO
24459: IFFALSE 24564
// begin tmp := 0 ;
24461: LD_ADDR_VAR 0 3
24465: PUSH
24466: LD_STRING 0
24468: ST_TO_ADDR
// if result [ 2 ] then
24469: LD_VAR 0 2
24473: PUSH
24474: LD_INT 2
24476: ARRAY
24477: IFFALSE 24546
// if result [ 2 ] [ 1 ] = 100 + i then
24479: LD_VAR 0 2
24483: PUSH
24484: LD_INT 2
24486: ARRAY
24487: PUSH
24488: LD_INT 1
24490: ARRAY
24491: PUSH
24492: LD_INT 100
24494: PUSH
24495: LD_VAR 0 8
24499: PLUS
24500: EQUAL
24501: IFFALSE 24546
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24503: LD_ADDR_VAR 0 2
24507: PUSH
24508: LD_VAR 0 2
24512: PPUSH
24513: LD_INT 2
24515: PPUSH
24516: LD_VAR 0 2
24520: PUSH
24521: LD_INT 2
24523: ARRAY
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 3
24532: PPUSH
24533: CALL_OW 1
24537: ST_TO_ADDR
// tmp := 1 ;
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: LD_STRING 1
24545: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24546: LD_ADDR_VAR 0 6
24550: PUSH
24551: LD_VAR 0 6
24555: PUSH
24556: LD_VAR 0 3
24560: STR
24561: ST_TO_ADDR
// end ;
24562: GO 24458
24564: POP
24565: POP
// if isGameLoad then
24566: LD_VAR 0 1
24570: IFFALSE 25045
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24572: LD_ADDR_VAR 0 4
24576: PUSH
24577: LD_EXP 51
24581: PUSH
24582: LD_EXP 50
24586: PUSH
24587: LD_EXP 52
24591: PUSH
24592: LD_EXP 49
24596: PUSH
24597: LD_EXP 53
24601: PUSH
24602: LD_EXP 54
24606: PUSH
24607: LD_EXP 55
24611: PUSH
24612: LD_EXP 56
24616: PUSH
24617: LD_EXP 57
24621: PUSH
24622: LD_EXP 58
24626: PUSH
24627: LD_EXP 59
24631: PUSH
24632: LD_EXP 60
24636: PUSH
24637: LD_EXP 61
24641: PUSH
24642: LD_EXP 62
24646: PUSH
24647: LD_EXP 70
24651: PUSH
24652: LD_EXP 71
24656: PUSH
24657: LD_EXP 72
24661: PUSH
24662: LD_EXP 73
24666: PUSH
24667: LD_EXP 75
24671: PUSH
24672: LD_EXP 76
24676: PUSH
24677: LD_EXP 77
24681: PUSH
24682: LD_EXP 80
24686: PUSH
24687: LD_EXP 82
24691: PUSH
24692: LD_EXP 83
24696: PUSH
24697: LD_EXP 84
24701: PUSH
24702: LD_EXP 86
24706: PUSH
24707: LD_EXP 87
24711: PUSH
24712: LD_EXP 90
24716: PUSH
24717: LD_EXP 91
24721: PUSH
24722: LD_EXP 92
24726: PUSH
24727: LD_EXP 93
24731: PUSH
24732: LD_EXP 94
24736: PUSH
24737: LD_EXP 95
24741: PUSH
24742: LD_EXP 96
24746: PUSH
24747: LD_EXP 97
24751: PUSH
24752: LD_EXP 98
24756: PUSH
24757: LD_EXP 63
24761: PUSH
24762: LD_EXP 64
24766: PUSH
24767: LD_EXP 67
24771: PUSH
24772: LD_EXP 68
24776: PUSH
24777: LD_EXP 69
24781: PUSH
24782: LD_EXP 65
24786: PUSH
24787: LD_EXP 66
24791: PUSH
24792: LD_EXP 74
24796: PUSH
24797: LD_EXP 78
24801: PUSH
24802: LD_EXP 79
24806: PUSH
24807: LD_EXP 81
24811: PUSH
24812: LD_EXP 85
24816: PUSH
24817: LD_EXP 88
24821: PUSH
24822: LD_EXP 89
24826: PUSH
24827: LD_EXP 99
24831: PUSH
24832: LD_EXP 100
24836: PUSH
24837: LD_EXP 101
24841: PUSH
24842: LD_EXP 102
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: ST_TO_ADDR
// tmp :=  ;
24903: LD_ADDR_VAR 0 3
24907: PUSH
24908: LD_STRING 
24910: ST_TO_ADDR
// for i = 1 to normalCounter do
24911: LD_ADDR_VAR 0 8
24915: PUSH
24916: DOUBLE
24917: LD_INT 1
24919: DEC
24920: ST_TO_ADDR
24921: LD_EXP 47
24925: PUSH
24926: FOR_TO
24927: IFFALSE 24963
// begin if flags [ i ] then
24929: LD_VAR 0 4
24933: PUSH
24934: LD_VAR 0 8
24938: ARRAY
24939: IFFALSE 24961
// tmp := tmp & i & ; ;
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_VAR 0 3
24950: PUSH
24951: LD_VAR 0 8
24955: STR
24956: PUSH
24957: LD_STRING ;
24959: STR
24960: ST_TO_ADDR
// end ;
24961: GO 24926
24963: POP
24964: POP
// for i = 1 to hardcoreCounter do
24965: LD_ADDR_VAR 0 8
24969: PUSH
24970: DOUBLE
24971: LD_INT 1
24973: DEC
24974: ST_TO_ADDR
24975: LD_EXP 48
24979: PUSH
24980: FOR_TO
24981: IFFALSE 25027
// begin if flags [ normalCounter + i ] then
24983: LD_VAR 0 4
24987: PUSH
24988: LD_EXP 47
24992: PUSH
24993: LD_VAR 0 8
24997: PLUS
24998: ARRAY
24999: IFFALSE 25025
// tmp := tmp & ( 100 + i ) & ; ;
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_VAR 0 3
25010: PUSH
25011: LD_INT 100
25013: PUSH
25014: LD_VAR 0 8
25018: PLUS
25019: STR
25020: PUSH
25021: LD_STRING ;
25023: STR
25024: ST_TO_ADDR
// end ;
25025: GO 24980
25027: POP
25028: POP
// if tmp then
25029: LD_VAR 0 3
25033: IFFALSE 25045
// active := tmp ;
25035: LD_ADDR_VAR 0 7
25039: PUSH
25040: LD_VAR 0 3
25044: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25045: LD_STRING getStreamItemsFromMission("
25047: PUSH
25048: LD_VAR 0 5
25052: STR
25053: PUSH
25054: LD_STRING ","
25056: STR
25057: PUSH
25058: LD_VAR 0 6
25062: STR
25063: PUSH
25064: LD_STRING ","
25066: STR
25067: PUSH
25068: LD_VAR 0 7
25072: STR
25073: PUSH
25074: LD_STRING ")
25076: STR
25077: PPUSH
25078: CALL_OW 559
// end else
25082: GO 25091
// ToLua ( getStreamItemsFromMission("","","") ) ;
25084: LD_STRING getStreamItemsFromMission("","","")
25086: PPUSH
25087: CALL_OW 559
// end ;
25091: LD_VAR 0 2
25095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25096: LD_EXP 46
25100: PUSH
25101: LD_EXP 51
25105: AND
25106: IFFALSE 25230
25108: GO 25110
25110: DISABLE
25111: LD_INT 0
25113: PPUSH
25114: PPUSH
// begin enable ;
25115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25116: LD_ADDR_VAR 0 2
25120: PUSH
25121: LD_INT 22
25123: PUSH
25124: LD_OWVAR 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: LD_INT 34
25138: PUSH
25139: LD_INT 7
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 34
25148: PUSH
25149: LD_INT 45
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 34
25158: PUSH
25159: LD_INT 28
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 34
25168: PUSH
25169: LD_INT 47
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PPUSH
25187: CALL_OW 69
25191: ST_TO_ADDR
// if not tmp then
25192: LD_VAR 0 2
25196: NOT
25197: IFFALSE 25201
// exit ;
25199: GO 25230
// for i in tmp do
25201: LD_ADDR_VAR 0 1
25205: PUSH
25206: LD_VAR 0 2
25210: PUSH
25211: FOR_IN
25212: IFFALSE 25228
// begin SetLives ( i , 0 ) ;
25214: LD_VAR 0 1
25218: PPUSH
25219: LD_INT 0
25221: PPUSH
25222: CALL_OW 234
// end ;
25226: GO 25211
25228: POP
25229: POP
// end ;
25230: PPOPN 2
25232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25233: LD_EXP 46
25237: PUSH
25238: LD_EXP 52
25242: AND
25243: IFFALSE 25327
25245: GO 25247
25247: DISABLE
25248: LD_INT 0
25250: PPUSH
25251: PPUSH
// begin enable ;
25252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25253: LD_ADDR_VAR 0 2
25257: PUSH
25258: LD_INT 22
25260: PUSH
25261: LD_OWVAR 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 32
25272: PUSH
25273: LD_INT 3
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PPUSH
25284: CALL_OW 69
25288: ST_TO_ADDR
// if not tmp then
25289: LD_VAR 0 2
25293: NOT
25294: IFFALSE 25298
// exit ;
25296: GO 25327
// for i in tmp do
25298: LD_ADDR_VAR 0 1
25302: PUSH
25303: LD_VAR 0 2
25307: PUSH
25308: FOR_IN
25309: IFFALSE 25325
// begin SetLives ( i , 0 ) ;
25311: LD_VAR 0 1
25315: PPUSH
25316: LD_INT 0
25318: PPUSH
25319: CALL_OW 234
// end ;
25323: GO 25308
25325: POP
25326: POP
// end ;
25327: PPOPN 2
25329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25330: LD_EXP 46
25334: PUSH
25335: LD_EXP 49
25339: AND
25340: IFFALSE 25433
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
// begin enable ;
25348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25349: LD_ADDR_VAR 0 1
25353: PUSH
25354: LD_INT 22
25356: PUSH
25357: LD_OWVAR 2
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 25
25371: PUSH
25372: LD_INT 5
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 25
25381: PUSH
25382: LD_INT 9
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 25
25391: PUSH
25392: LD_INT 8
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25431
// begin SetClass ( i , 1 ) ;
25417: LD_VAR 0 1
25421: PPUSH
25422: LD_INT 1
25424: PPUSH
25425: CALL_OW 336
// end ;
25429: GO 25414
25431: POP
25432: POP
// end ;
25433: PPOPN 1
25435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25436: LD_EXP 46
25440: PUSH
25441: LD_EXP 50
25445: AND
25446: PUSH
25447: LD_OWVAR 65
25451: PUSH
25452: LD_INT 7
25454: LESS
25455: AND
25456: IFFALSE 25470
25458: GO 25460
25460: DISABLE
// begin enable ;
25461: ENABLE
// game_speed := 7 ;
25462: LD_ADDR_OWVAR 65
25466: PUSH
25467: LD_INT 7
25469: ST_TO_ADDR
// end ;
25470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25471: LD_EXP 46
25475: PUSH
25476: LD_EXP 53
25480: AND
25481: IFFALSE 25683
25483: GO 25485
25485: DISABLE
25486: LD_INT 0
25488: PPUSH
25489: PPUSH
25490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25491: LD_ADDR_VAR 0 3
25495: PUSH
25496: LD_INT 81
25498: PUSH
25499: LD_OWVAR 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 21
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PPUSH
25522: CALL_OW 69
25526: ST_TO_ADDR
// if not tmp then
25527: LD_VAR 0 3
25531: NOT
25532: IFFALSE 25536
// exit ;
25534: GO 25683
// if tmp > 5 then
25536: LD_VAR 0 3
25540: PUSH
25541: LD_INT 5
25543: GREATER
25544: IFFALSE 25556
// k := 5 else
25546: LD_ADDR_VAR 0 2
25550: PUSH
25551: LD_INT 5
25553: ST_TO_ADDR
25554: GO 25566
// k := tmp ;
25556: LD_ADDR_VAR 0 2
25560: PUSH
25561: LD_VAR 0 3
25565: ST_TO_ADDR
// for i := 1 to k do
25566: LD_ADDR_VAR 0 1
25570: PUSH
25571: DOUBLE
25572: LD_INT 1
25574: DEC
25575: ST_TO_ADDR
25576: LD_VAR 0 2
25580: PUSH
25581: FOR_TO
25582: IFFALSE 25681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25584: LD_VAR 0 3
25588: PUSH
25589: LD_VAR 0 1
25593: ARRAY
25594: PPUSH
25595: LD_VAR 0 1
25599: PUSH
25600: LD_INT 4
25602: MOD
25603: PUSH
25604: LD_INT 1
25606: PLUS
25607: PPUSH
25608: CALL_OW 259
25612: PUSH
25613: LD_INT 10
25615: LESS
25616: IFFALSE 25679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25618: LD_VAR 0 3
25622: PUSH
25623: LD_VAR 0 1
25627: ARRAY
25628: PPUSH
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 4
25636: MOD
25637: PUSH
25638: LD_INT 1
25640: PLUS
25641: PPUSH
25642: LD_VAR 0 3
25646: PUSH
25647: LD_VAR 0 1
25651: ARRAY
25652: PPUSH
25653: LD_VAR 0 1
25657: PUSH
25658: LD_INT 4
25660: MOD
25661: PUSH
25662: LD_INT 1
25664: PLUS
25665: PPUSH
25666: CALL_OW 259
25670: PUSH
25671: LD_INT 1
25673: PLUS
25674: PPUSH
25675: CALL_OW 237
25679: GO 25581
25681: POP
25682: POP
// end ;
25683: PPOPN 3
25685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25686: LD_EXP 46
25690: PUSH
25691: LD_EXP 54
25695: AND
25696: IFFALSE 25716
25698: GO 25700
25700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25701: LD_INT 4
25703: PPUSH
25704: LD_OWVAR 2
25708: PPUSH
25709: LD_INT 0
25711: PPUSH
25712: CALL_OW 324
25716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25717: LD_EXP 46
25721: PUSH
25722: LD_EXP 83
25726: AND
25727: IFFALSE 25747
25729: GO 25731
25731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25732: LD_INT 19
25734: PPUSH
25735: LD_OWVAR 2
25739: PPUSH
25740: LD_INT 0
25742: PPUSH
25743: CALL_OW 324
25747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25748: LD_EXP 46
25752: PUSH
25753: LD_EXP 55
25757: AND
25758: IFFALSE 25860
25760: GO 25762
25762: DISABLE
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
// begin enable ;
25767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25768: LD_ADDR_VAR 0 2
25772: PUSH
25773: LD_INT 22
25775: PUSH
25776: LD_OWVAR 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 34
25790: PUSH
25791: LD_INT 11
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 34
25800: PUSH
25801: LD_INT 30
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PPUSH
25817: CALL_OW 69
25821: ST_TO_ADDR
// if not tmp then
25822: LD_VAR 0 2
25826: NOT
25827: IFFALSE 25831
// exit ;
25829: GO 25860
// for i in tmp do
25831: LD_ADDR_VAR 0 1
25835: PUSH
25836: LD_VAR 0 2
25840: PUSH
25841: FOR_IN
25842: IFFALSE 25858
// begin SetLives ( i , 0 ) ;
25844: LD_VAR 0 1
25848: PPUSH
25849: LD_INT 0
25851: PPUSH
25852: CALL_OW 234
// end ;
25856: GO 25841
25858: POP
25859: POP
// end ;
25860: PPOPN 2
25862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25863: LD_EXP 46
25867: PUSH
25868: LD_EXP 56
25872: AND
25873: IFFALSE 25893
25875: GO 25877
25877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25878: LD_INT 32
25880: PPUSH
25881: LD_OWVAR 2
25885: PPUSH
25886: LD_INT 0
25888: PPUSH
25889: CALL_OW 324
25893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25894: LD_EXP 46
25898: PUSH
25899: LD_EXP 57
25903: AND
25904: IFFALSE 26085
25906: GO 25908
25908: DISABLE
25909: LD_INT 0
25911: PPUSH
25912: PPUSH
25913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25914: LD_ADDR_VAR 0 2
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_OWVAR 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 33
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PPUSH
25945: CALL_OW 69
25949: ST_TO_ADDR
// if not tmp then
25950: LD_VAR 0 2
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26085
// side := 0 ;
25959: LD_ADDR_VAR 0 3
25963: PUSH
25964: LD_INT 0
25966: ST_TO_ADDR
// for i := 1 to 8 do
25967: LD_ADDR_VAR 0 1
25971: PUSH
25972: DOUBLE
25973: LD_INT 1
25975: DEC
25976: ST_TO_ADDR
25977: LD_INT 8
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25983: LD_OWVAR 2
25987: PUSH
25988: LD_VAR 0 1
25992: NONEQUAL
25993: PUSH
25994: LD_OWVAR 2
25998: PPUSH
25999: LD_VAR 0 1
26003: PPUSH
26004: CALL_OW 81
26008: PUSH
26009: LD_INT 2
26011: EQUAL
26012: AND
26013: IFFALSE 26027
// begin side := i ;
26015: LD_ADDR_VAR 0 3
26019: PUSH
26020: LD_VAR 0 1
26024: ST_TO_ADDR
// break ;
26025: GO 26029
// end ;
26027: GO 25980
26029: POP
26030: POP
// if not side then
26031: LD_VAR 0 3
26035: NOT
26036: IFFALSE 26040
// exit ;
26038: GO 26085
// for i := 1 to tmp do
26040: LD_ADDR_VAR 0 1
26044: PUSH
26045: DOUBLE
26046: LD_INT 1
26048: DEC
26049: ST_TO_ADDR
26050: LD_VAR 0 2
26054: PUSH
26055: FOR_TO
26056: IFFALSE 26083
// if Prob ( 60 ) then
26058: LD_INT 60
26060: PPUSH
26061: CALL_OW 13
26065: IFFALSE 26081
// SetSide ( i , side ) ;
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_VAR 0 3
26076: PPUSH
26077: CALL_OW 235
26081: GO 26055
26083: POP
26084: POP
// end ;
26085: PPOPN 3
26087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26088: LD_EXP 46
26092: PUSH
26093: LD_EXP 59
26097: AND
26098: IFFALSE 26217
26100: GO 26102
26102: DISABLE
26103: LD_INT 0
26105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26106: LD_ADDR_VAR 0 1
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_OWVAR 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 21
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: LD_INT 23
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: PPUSH
26155: CALL_OW 69
26159: PUSH
26160: FOR_IN
26161: IFFALSE 26215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26163: LD_VAR 0 1
26167: PPUSH
26168: CALL_OW 257
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: LD_INT 4
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: IN
26191: IFFALSE 26213
// SetClass ( un , rand ( 1 , 4 ) ) ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_INT 1
26200: PPUSH
26201: LD_INT 4
26203: PPUSH
26204: CALL_OW 12
26208: PPUSH
26209: CALL_OW 336
26213: GO 26160
26215: POP
26216: POP
// end ;
26217: PPOPN 1
26219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26220: LD_EXP 46
26224: PUSH
26225: LD_EXP 58
26229: AND
26230: IFFALSE 26309
26232: GO 26234
26234: DISABLE
26235: LD_INT 0
26237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26238: LD_ADDR_VAR 0 1
26242: PUSH
26243: LD_INT 22
26245: PUSH
26246: LD_OWVAR 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 21
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PPUSH
26269: CALL_OW 69
26273: ST_TO_ADDR
// if not tmp then
26274: LD_VAR 0 1
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26283: LD_VAR 0 1
26287: PUSH
26288: LD_INT 1
26290: PPUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 12
26300: ARRAY
26301: PPUSH
26302: LD_INT 100
26304: PPUSH
26305: CALL_OW 234
// end ;
26309: PPOPN 1
26311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26312: LD_EXP 46
26316: PUSH
26317: LD_EXP 60
26321: AND
26322: IFFALSE 26420
26324: GO 26326
26326: DISABLE
26327: LD_INT 0
26329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26330: LD_ADDR_VAR 0 1
26334: PUSH
26335: LD_INT 22
26337: PUSH
26338: LD_OWVAR 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 21
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PPUSH
26361: CALL_OW 69
26365: ST_TO_ADDR
// if not tmp then
26366: LD_VAR 0 1
26370: NOT
26371: IFFALSE 26375
// exit ;
26373: GO 26420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26375: LD_VAR 0 1
26379: PUSH
26380: LD_INT 1
26382: PPUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 12
26392: ARRAY
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_INT 4
26399: PPUSH
26400: CALL_OW 12
26404: PPUSH
26405: LD_INT 3000
26407: PPUSH
26408: LD_INT 9000
26410: PPUSH
26411: CALL_OW 12
26415: PPUSH
26416: CALL_OW 492
// end ;
26420: PPOPN 1
26422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26423: LD_EXP 46
26427: PUSH
26428: LD_EXP 61
26432: AND
26433: IFFALSE 26453
26435: GO 26437
26437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26438: LD_INT 1
26440: PPUSH
26441: LD_OWVAR 2
26445: PPUSH
26446: LD_INT 0
26448: PPUSH
26449: CALL_OW 324
26453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26454: LD_EXP 46
26458: PUSH
26459: LD_EXP 62
26463: AND
26464: IFFALSE 26547
26466: GO 26468
26468: DISABLE
26469: LD_INT 0
26471: PPUSH
26472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26473: LD_ADDR_VAR 0 2
26477: PUSH
26478: LD_INT 22
26480: PUSH
26481: LD_OWVAR 2
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 21
26492: PUSH
26493: LD_INT 3
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PPUSH
26504: CALL_OW 69
26508: ST_TO_ADDR
// if not tmp then
26509: LD_VAR 0 2
26513: NOT
26514: IFFALSE 26518
// exit ;
26516: GO 26547
// for i in tmp do
26518: LD_ADDR_VAR 0 1
26522: PUSH
26523: LD_VAR 0 2
26527: PUSH
26528: FOR_IN
26529: IFFALSE 26545
// SetBLevel ( i , 10 ) ;
26531: LD_VAR 0 1
26535: PPUSH
26536: LD_INT 10
26538: PPUSH
26539: CALL_OW 241
26543: GO 26528
26545: POP
26546: POP
// end ;
26547: PPOPN 2
26549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26550: LD_EXP 46
26554: PUSH
26555: LD_EXP 63
26559: AND
26560: IFFALSE 26671
26562: GO 26564
26564: DISABLE
26565: LD_INT 0
26567: PPUSH
26568: PPUSH
26569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26570: LD_ADDR_VAR 0 3
26574: PUSH
26575: LD_INT 22
26577: PUSH
26578: LD_OWVAR 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 25
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PPUSH
26601: CALL_OW 69
26605: ST_TO_ADDR
// if not tmp then
26606: LD_VAR 0 3
26610: NOT
26611: IFFALSE 26615
// exit ;
26613: GO 26671
// un := tmp [ rand ( 1 , tmp ) ] ;
26615: LD_ADDR_VAR 0 2
26619: PUSH
26620: LD_VAR 0 3
26624: PUSH
26625: LD_INT 1
26627: PPUSH
26628: LD_VAR 0 3
26632: PPUSH
26633: CALL_OW 12
26637: ARRAY
26638: ST_TO_ADDR
// if Crawls ( un ) then
26639: LD_VAR 0 2
26643: PPUSH
26644: CALL_OW 318
26648: IFFALSE 26659
// ComWalk ( un ) ;
26650: LD_VAR 0 2
26654: PPUSH
26655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26659: LD_VAR 0 2
26663: PPUSH
26664: LD_INT 5
26666: PPUSH
26667: CALL_OW 336
// end ;
26671: PPOPN 3
26673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26674: LD_EXP 46
26678: PUSH
26679: LD_EXP 64
26683: AND
26684: PUSH
26685: LD_OWVAR 67
26689: PUSH
26690: LD_INT 4
26692: LESS
26693: AND
26694: IFFALSE 26713
26696: GO 26698
26698: DISABLE
// begin Difficulty := Difficulty + 1 ;
26699: LD_ADDR_OWVAR 67
26703: PUSH
26704: LD_OWVAR 67
26708: PUSH
26709: LD_INT 1
26711: PLUS
26712: ST_TO_ADDR
// end ;
26713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26714: LD_EXP 46
26718: PUSH
26719: LD_EXP 65
26723: AND
26724: IFFALSE 26827
26726: GO 26728
26728: DISABLE
26729: LD_INT 0
26731: PPUSH
// begin for i := 1 to 5 do
26732: LD_ADDR_VAR 0 1
26736: PUSH
26737: DOUBLE
26738: LD_INT 1
26740: DEC
26741: ST_TO_ADDR
26742: LD_INT 5
26744: PUSH
26745: FOR_TO
26746: IFFALSE 26825
// begin uc_nation := nation_nature ;
26748: LD_ADDR_OWVAR 21
26752: PUSH
26753: LD_INT 0
26755: ST_TO_ADDR
// uc_side := 0 ;
26756: LD_ADDR_OWVAR 20
26760: PUSH
26761: LD_INT 0
26763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26764: LD_ADDR_OWVAR 29
26768: PUSH
26769: LD_INT 12
26771: PUSH
26772: LD_INT 12
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// hc_agressivity := 20 ;
26779: LD_ADDR_OWVAR 35
26783: PUSH
26784: LD_INT 20
26786: ST_TO_ADDR
// hc_class := class_tiger ;
26787: LD_ADDR_OWVAR 28
26791: PUSH
26792: LD_INT 14
26794: ST_TO_ADDR
// hc_gallery :=  ;
26795: LD_ADDR_OWVAR 33
26799: PUSH
26800: LD_STRING 
26802: ST_TO_ADDR
// hc_name :=  ;
26803: LD_ADDR_OWVAR 26
26807: PUSH
26808: LD_STRING 
26810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26811: CALL_OW 44
26815: PPUSH
26816: LD_INT 0
26818: PPUSH
26819: CALL_OW 51
// end ;
26823: GO 26745
26825: POP
26826: POP
// end ;
26827: PPOPN 1
26829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26830: LD_EXP 46
26834: PUSH
26835: LD_EXP 66
26839: AND
26840: IFFALSE 26849
26842: GO 26844
26844: DISABLE
// StreamSibBomb ;
26845: CALL 26850 0 0
26849: END
// export function StreamSibBomb ; var i , x , y ; begin
26850: LD_INT 0
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
// result := false ;
26856: LD_ADDR_VAR 0 1
26860: PUSH
26861: LD_INT 0
26863: ST_TO_ADDR
// for i := 1 to 16 do
26864: LD_ADDR_VAR 0 2
26868: PUSH
26869: DOUBLE
26870: LD_INT 1
26872: DEC
26873: ST_TO_ADDR
26874: LD_INT 16
26876: PUSH
26877: FOR_TO
26878: IFFALSE 27077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26880: LD_ADDR_VAR 0 3
26884: PUSH
26885: LD_INT 10
26887: PUSH
26888: LD_INT 20
26890: PUSH
26891: LD_INT 30
26893: PUSH
26894: LD_INT 40
26896: PUSH
26897: LD_INT 50
26899: PUSH
26900: LD_INT 60
26902: PUSH
26903: LD_INT 70
26905: PUSH
26906: LD_INT 80
26908: PUSH
26909: LD_INT 90
26911: PUSH
26912: LD_INT 100
26914: PUSH
26915: LD_INT 110
26917: PUSH
26918: LD_INT 120
26920: PUSH
26921: LD_INT 130
26923: PUSH
26924: LD_INT 140
26926: PUSH
26927: LD_INT 150
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PPUSH
26950: LD_INT 15
26952: PPUSH
26953: CALL_OW 12
26957: ARRAY
26958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26959: LD_ADDR_VAR 0 4
26963: PUSH
26964: LD_INT 10
26966: PUSH
26967: LD_INT 20
26969: PUSH
26970: LD_INT 30
26972: PUSH
26973: LD_INT 40
26975: PUSH
26976: LD_INT 50
26978: PUSH
26979: LD_INT 60
26981: PUSH
26982: LD_INT 70
26984: PUSH
26985: LD_INT 80
26987: PUSH
26988: LD_INT 90
26990: PUSH
26991: LD_INT 100
26993: PUSH
26994: LD_INT 110
26996: PUSH
26997: LD_INT 120
26999: PUSH
27000: LD_INT 130
27002: PUSH
27003: LD_INT 140
27005: PUSH
27006: LD_INT 150
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PPUSH
27029: LD_INT 15
27031: PPUSH
27032: CALL_OW 12
27036: ARRAY
27037: ST_TO_ADDR
// if ValidHex ( x , y ) then
27038: LD_VAR 0 3
27042: PPUSH
27043: LD_VAR 0 4
27047: PPUSH
27048: CALL_OW 488
27052: IFFALSE 27075
// begin result := [ x , y ] ;
27054: LD_ADDR_VAR 0 1
27058: PUSH
27059: LD_VAR 0 3
27063: PUSH
27064: LD_VAR 0 4
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// break ;
27073: GO 27077
// end ; end ;
27075: GO 26877
27077: POP
27078: POP
// if result then
27079: LD_VAR 0 1
27083: IFFALSE 27143
// begin ToLua ( playSibBomb() ) ;
27085: LD_STRING playSibBomb()
27087: PPUSH
27088: CALL_OW 559
// wait ( 0 0$14 ) ;
27092: LD_INT 490
27094: PPUSH
27095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27099: LD_VAR 0 1
27103: PUSH
27104: LD_INT 1
27106: ARRAY
27107: PPUSH
27108: LD_VAR 0 1
27112: PUSH
27113: LD_INT 2
27115: ARRAY
27116: PPUSH
27117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27121: LD_VAR 0 1
27125: PUSH
27126: LD_INT 1
27128: ARRAY
27129: PPUSH
27130: LD_VAR 0 1
27134: PUSH
27135: LD_INT 2
27137: ARRAY
27138: PPUSH
27139: CALL_OW 429
// end ; end ;
27143: LD_VAR 0 1
27147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27148: LD_EXP 46
27152: PUSH
27153: LD_EXP 68
27157: AND
27158: IFFALSE 27170
27160: GO 27162
27162: DISABLE
// YouLost (  ) ;
27163: LD_STRING 
27165: PPUSH
27166: CALL_OW 104
27170: END
// every 0 0$1 trigger StreamModeActive and sFog do
27171: LD_EXP 46
27175: PUSH
27176: LD_EXP 67
27180: AND
27181: IFFALSE 27195
27183: GO 27185
27185: DISABLE
// FogOff ( your_side ) ;
27186: LD_OWVAR 2
27190: PPUSH
27191: CALL_OW 344
27195: END
// every 0 0$1 trigger StreamModeActive and sSun do
27196: LD_EXP 46
27200: PUSH
27201: LD_EXP 69
27205: AND
27206: IFFALSE 27234
27208: GO 27210
27210: DISABLE
// begin solar_recharge_percent := 0 ;
27211: LD_ADDR_OWVAR 79
27215: PUSH
27216: LD_INT 0
27218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27219: LD_INT 10500
27221: PPUSH
27222: CALL_OW 67
// solar_recharge_percent := 100 ;
27226: LD_ADDR_OWVAR 79
27230: PUSH
27231: LD_INT 100
27233: ST_TO_ADDR
// end ;
27234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27235: LD_EXP 46
27239: PUSH
27240: LD_EXP 70
27244: AND
27245: IFFALSE 27484
27247: GO 27249
27249: DISABLE
27250: LD_INT 0
27252: PPUSH
27253: PPUSH
27254: PPUSH
// begin tmp := [ ] ;
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: EMPTY
27261: ST_TO_ADDR
// for i := 1 to 6 do
27262: LD_ADDR_VAR 0 1
27266: PUSH
27267: DOUBLE
27268: LD_INT 1
27270: DEC
27271: ST_TO_ADDR
27272: LD_INT 6
27274: PUSH
27275: FOR_TO
27276: IFFALSE 27381
// begin uc_nation := nation_nature ;
27278: LD_ADDR_OWVAR 21
27282: PUSH
27283: LD_INT 0
27285: ST_TO_ADDR
// uc_side := 0 ;
27286: LD_ADDR_OWVAR 20
27290: PUSH
27291: LD_INT 0
27293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27294: LD_ADDR_OWVAR 29
27298: PUSH
27299: LD_INT 12
27301: PUSH
27302: LD_INT 12
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: ST_TO_ADDR
// hc_agressivity := 20 ;
27309: LD_ADDR_OWVAR 35
27313: PUSH
27314: LD_INT 20
27316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27317: LD_ADDR_OWVAR 28
27321: PUSH
27322: LD_INT 17
27324: ST_TO_ADDR
// hc_gallery :=  ;
27325: LD_ADDR_OWVAR 33
27329: PUSH
27330: LD_STRING 
27332: ST_TO_ADDR
// hc_name :=  ;
27333: LD_ADDR_OWVAR 26
27337: PUSH
27338: LD_STRING 
27340: ST_TO_ADDR
// un := CreateHuman ;
27341: LD_ADDR_VAR 0 2
27345: PUSH
27346: CALL_OW 44
27350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_INT 1
27358: PPUSH
27359: CALL_OW 51
// tmp := tmp ^ un ;
27363: LD_ADDR_VAR 0 3
27367: PUSH
27368: LD_VAR 0 3
27372: PUSH
27373: LD_VAR 0 2
27377: ADD
27378: ST_TO_ADDR
// end ;
27379: GO 27275
27381: POP
27382: POP
// repeat wait ( 0 0$1 ) ;
27383: LD_INT 35
27385: PPUSH
27386: CALL_OW 67
// for un in tmp do
27390: LD_ADDR_VAR 0 2
27394: PUSH
27395: LD_VAR 0 3
27399: PUSH
27400: FOR_IN
27401: IFFALSE 27475
// begin if IsDead ( un ) then
27403: LD_VAR 0 2
27407: PPUSH
27408: CALL_OW 301
27412: IFFALSE 27432
// begin tmp := tmp diff un ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_VAR 0 3
27423: PUSH
27424: LD_VAR 0 2
27428: DIFF
27429: ST_TO_ADDR
// continue ;
27430: GO 27400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27432: LD_VAR 0 2
27436: PPUSH
27437: LD_INT 3
27439: PUSH
27440: LD_INT 22
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PPUSH
27454: CALL_OW 69
27458: PPUSH
27459: LD_VAR 0 2
27463: PPUSH
27464: CALL_OW 74
27468: PPUSH
27469: CALL_OW 115
// end ;
27473: GO 27400
27475: POP
27476: POP
// until not tmp ;
27477: LD_VAR 0 3
27481: NOT
27482: IFFALSE 27383
// end ;
27484: PPOPN 3
27486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27487: LD_EXP 46
27491: PUSH
27492: LD_EXP 71
27496: AND
27497: IFFALSE 27551
27499: GO 27501
27501: DISABLE
// begin ToLua ( displayTroll(); ) ;
27502: LD_STRING displayTroll();
27504: PPUSH
27505: CALL_OW 559
// wait ( 3 3$00 ) ;
27509: LD_INT 6300
27511: PPUSH
27512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27516: LD_STRING hideTroll();
27518: PPUSH
27519: CALL_OW 559
// wait ( 1 1$00 ) ;
27523: LD_INT 2100
27525: PPUSH
27526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27530: LD_STRING displayTroll();
27532: PPUSH
27533: CALL_OW 559
// wait ( 1 1$00 ) ;
27537: LD_INT 2100
27539: PPUSH
27540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27544: LD_STRING hideTroll();
27546: PPUSH
27547: CALL_OW 559
// end ;
27551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27552: LD_EXP 46
27556: PUSH
27557: LD_EXP 72
27561: AND
27562: IFFALSE 27625
27564: GO 27566
27566: DISABLE
27567: LD_INT 0
27569: PPUSH
// begin p := 0 ;
27570: LD_ADDR_VAR 0 1
27574: PUSH
27575: LD_INT 0
27577: ST_TO_ADDR
// repeat game_speed := 1 ;
27578: LD_ADDR_OWVAR 65
27582: PUSH
27583: LD_INT 1
27585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27586: LD_INT 35
27588: PPUSH
27589: CALL_OW 67
// p := p + 1 ;
27593: LD_ADDR_VAR 0 1
27597: PUSH
27598: LD_VAR 0 1
27602: PUSH
27603: LD_INT 1
27605: PLUS
27606: ST_TO_ADDR
// until p >= 60 ;
27607: LD_VAR 0 1
27611: PUSH
27612: LD_INT 60
27614: GREATEREQUAL
27615: IFFALSE 27578
// game_speed := 4 ;
27617: LD_ADDR_OWVAR 65
27621: PUSH
27622: LD_INT 4
27624: ST_TO_ADDR
// end ;
27625: PPOPN 1
27627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27628: LD_EXP 46
27632: PUSH
27633: LD_EXP 73
27637: AND
27638: IFFALSE 27784
27640: GO 27642
27642: DISABLE
27643: LD_INT 0
27645: PPUSH
27646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27647: LD_ADDR_VAR 0 1
27651: PUSH
27652: LD_INT 22
27654: PUSH
27655: LD_OWVAR 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: LD_INT 30
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 30
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PPUSH
27696: CALL_OW 69
27700: ST_TO_ADDR
// if not depot then
27701: LD_VAR 0 1
27705: NOT
27706: IFFALSE 27710
// exit ;
27708: GO 27784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27710: LD_ADDR_VAR 0 2
27714: PUSH
27715: LD_VAR 0 1
27719: PUSH
27720: LD_INT 1
27722: PPUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL_OW 12
27732: ARRAY
27733: PPUSH
27734: CALL_OW 274
27738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27739: LD_VAR 0 2
27743: PPUSH
27744: LD_INT 1
27746: PPUSH
27747: LD_INT 0
27749: PPUSH
27750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27754: LD_VAR 0 2
27758: PPUSH
27759: LD_INT 2
27761: PPUSH
27762: LD_INT 0
27764: PPUSH
27765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27769: LD_VAR 0 2
27773: PPUSH
27774: LD_INT 3
27776: PPUSH
27777: LD_INT 0
27779: PPUSH
27780: CALL_OW 277
// end ;
27784: PPOPN 2
27786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27787: LD_EXP 46
27791: PUSH
27792: LD_EXP 74
27796: AND
27797: IFFALSE 27894
27799: GO 27801
27801: DISABLE
27802: LD_INT 0
27804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27805: LD_ADDR_VAR 0 1
27809: PUSH
27810: LD_INT 22
27812: PUSH
27813: LD_OWVAR 2
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 21
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 3
27834: PUSH
27835: LD_INT 23
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: PPUSH
27854: CALL_OW 69
27858: ST_TO_ADDR
// if not tmp then
27859: LD_VAR 0 1
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 27894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 1
27875: PPUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 12
27885: ARRAY
27886: PPUSH
27887: LD_INT 200
27889: PPUSH
27890: CALL_OW 234
// end ;
27894: PPOPN 1
27896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27897: LD_EXP 46
27901: PUSH
27902: LD_EXP 75
27906: AND
27907: IFFALSE 27986
27909: GO 27911
27911: DISABLE
27912: LD_INT 0
27914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27915: LD_ADDR_VAR 0 1
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_OWVAR 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 21
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PPUSH
27946: CALL_OW 69
27950: ST_TO_ADDR
// if not tmp then
27951: LD_VAR 0 1
27955: NOT
27956: IFFALSE 27960
// exit ;
27958: GO 27986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27960: LD_VAR 0 1
27964: PUSH
27965: LD_INT 1
27967: PPUSH
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 12
27977: ARRAY
27978: PPUSH
27979: LD_INT 60
27981: PPUSH
27982: CALL_OW 234
// end ;
27986: PPOPN 1
27988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27989: LD_EXP 46
27993: PUSH
27994: LD_EXP 76
27998: AND
27999: IFFALSE 28098
28001: GO 28003
28003: DISABLE
28004: LD_INT 0
28006: PPUSH
28007: PPUSH
// begin enable ;
28008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28009: LD_ADDR_VAR 0 1
28013: PUSH
28014: LD_INT 22
28016: PUSH
28017: LD_OWVAR 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 61
28028: PUSH
28029: EMPTY
28030: LIST
28031: PUSH
28032: LD_INT 33
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 69
28051: ST_TO_ADDR
// if not tmp then
28052: LD_VAR 0 1
28056: NOT
28057: IFFALSE 28061
// exit ;
28059: GO 28098
// for i in tmp do
28061: LD_ADDR_VAR 0 2
28065: PUSH
28066: LD_VAR 0 1
28070: PUSH
28071: FOR_IN
28072: IFFALSE 28096
// if IsControledBy ( i ) then
28074: LD_VAR 0 2
28078: PPUSH
28079: CALL_OW 312
28083: IFFALSE 28094
// ComUnlink ( i ) ;
28085: LD_VAR 0 2
28089: PPUSH
28090: CALL_OW 136
28094: GO 28071
28096: POP
28097: POP
// end ;
28098: PPOPN 2
28100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28101: LD_EXP 46
28105: PUSH
28106: LD_EXP 77
28110: AND
28111: IFFALSE 28251
28113: GO 28115
28115: DISABLE
28116: LD_INT 0
28118: PPUSH
28119: PPUSH
// begin ToLua ( displayPowell(); ) ;
28120: LD_STRING displayPowell();
28122: PPUSH
28123: CALL_OW 559
// uc_side := 0 ;
28127: LD_ADDR_OWVAR 20
28131: PUSH
28132: LD_INT 0
28134: ST_TO_ADDR
// uc_nation := 2 ;
28135: LD_ADDR_OWVAR 21
28139: PUSH
28140: LD_INT 2
28142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28143: LD_ADDR_OWVAR 37
28147: PUSH
28148: LD_INT 14
28150: ST_TO_ADDR
// vc_engine := engine_siberite ;
28151: LD_ADDR_OWVAR 39
28155: PUSH
28156: LD_INT 3
28158: ST_TO_ADDR
// vc_control := control_apeman ;
28159: LD_ADDR_OWVAR 38
28163: PUSH
28164: LD_INT 5
28166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28167: LD_ADDR_OWVAR 40
28171: PUSH
28172: LD_INT 29
28174: ST_TO_ADDR
// un := CreateVehicle ;
28175: LD_ADDR_VAR 0 2
28179: PUSH
28180: CALL_OW 45
28184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28185: LD_VAR 0 2
28189: PPUSH
28190: LD_INT 1
28192: PPUSH
28193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28197: LD_INT 35
28199: PPUSH
28200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28204: LD_VAR 0 2
28208: PPUSH
28209: LD_INT 22
28211: PUSH
28212: LD_OWVAR 2
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PPUSH
28221: CALL_OW 69
28225: PPUSH
28226: LD_VAR 0 2
28230: PPUSH
28231: CALL_OW 74
28235: PPUSH
28236: CALL_OW 115
// until IsDead ( un ) ;
28240: LD_VAR 0 2
28244: PPUSH
28245: CALL_OW 301
28249: IFFALSE 28197
// end ;
28251: PPOPN 2
28253: END
// every 0 0$1 trigger StreamModeActive and sStu do
28254: LD_EXP 46
28258: PUSH
28259: LD_EXP 85
28263: AND
28264: IFFALSE 28280
28266: GO 28268
28268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28269: LD_STRING displayStucuk();
28271: PPUSH
28272: CALL_OW 559
// ResetFog ;
28276: CALL_OW 335
// end ;
28280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28281: LD_EXP 46
28285: PUSH
28286: LD_EXP 78
28290: AND
28291: IFFALSE 28432
28293: GO 28295
28295: DISABLE
28296: LD_INT 0
28298: PPUSH
28299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28300: LD_ADDR_VAR 0 2
28304: PUSH
28305: LD_INT 22
28307: PUSH
28308: LD_OWVAR 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 21
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 2
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28432
// un := tmp [ rand ( 1 , tmp ) ] ;
28345: LD_ADDR_VAR 0 1
28349: PUSH
28350: LD_VAR 0 2
28354: PUSH
28355: LD_INT 1
28357: PPUSH
28358: LD_VAR 0 2
28362: PPUSH
28363: CALL_OW 12
28367: ARRAY
28368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_INT 0
28376: PPUSH
28377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28381: LD_VAR 0 1
28385: PPUSH
28386: LD_OWVAR 3
28390: PUSH
28391: LD_VAR 0 1
28395: DIFF
28396: PPUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 74
28406: PPUSH
28407: CALL_OW 115
// wait ( 0 0$20 ) ;
28411: LD_INT 700
28413: PPUSH
28414: CALL_OW 67
// SetSide ( un , your_side ) ;
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_OWVAR 2
28427: PPUSH
28428: CALL_OW 235
// end ;
28432: PPOPN 2
28434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28435: LD_EXP 46
28439: PUSH
28440: LD_EXP 79
28444: AND
28445: IFFALSE 28551
28447: GO 28449
28449: DISABLE
28450: LD_INT 0
28452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28453: LD_ADDR_VAR 0 1
28457: PUSH
28458: LD_INT 22
28460: PUSH
28461: LD_OWVAR 2
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: LD_INT 30
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 30
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PPUSH
28502: CALL_OW 69
28506: ST_TO_ADDR
// if not depot then
28507: LD_VAR 0 1
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: PPUSH
28525: CALL_OW 250
28529: PPUSH
28530: LD_VAR 0 1
28534: PUSH
28535: LD_INT 1
28537: ARRAY
28538: PPUSH
28539: CALL_OW 251
28543: PPUSH
28544: LD_INT 70
28546: PPUSH
28547: CALL_OW 495
// end ;
28551: PPOPN 1
28553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28554: LD_EXP 46
28558: PUSH
28559: LD_EXP 80
28563: AND
28564: IFFALSE 28775
28566: GO 28568
28568: DISABLE
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
28573: PPUSH
28574: PPUSH
28575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28576: LD_ADDR_VAR 0 5
28580: PUSH
28581: LD_INT 22
28583: PUSH
28584: LD_OWVAR 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 21
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PPUSH
28607: CALL_OW 69
28611: ST_TO_ADDR
// if not tmp then
28612: LD_VAR 0 5
28616: NOT
28617: IFFALSE 28621
// exit ;
28619: GO 28775
// for i in tmp do
28621: LD_ADDR_VAR 0 1
28625: PUSH
28626: LD_VAR 0 5
28630: PUSH
28631: FOR_IN
28632: IFFALSE 28773
// begin d := rand ( 0 , 5 ) ;
28634: LD_ADDR_VAR 0 4
28638: PUSH
28639: LD_INT 0
28641: PPUSH
28642: LD_INT 5
28644: PPUSH
28645: CALL_OW 12
28649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28650: LD_ADDR_VAR 0 2
28654: PUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 250
28664: PPUSH
28665: LD_VAR 0 4
28669: PPUSH
28670: LD_INT 3
28672: PPUSH
28673: LD_INT 12
28675: PPUSH
28676: CALL_OW 12
28680: PPUSH
28681: CALL_OW 272
28685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28686: LD_ADDR_VAR 0 3
28690: PUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: CALL_OW 251
28700: PPUSH
28701: LD_VAR 0 4
28705: PPUSH
28706: LD_INT 3
28708: PPUSH
28709: LD_INT 12
28711: PPUSH
28712: CALL_OW 12
28716: PPUSH
28717: CALL_OW 273
28721: ST_TO_ADDR
// if ValidHex ( x , y ) then
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: CALL_OW 488
28736: IFFALSE 28771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28738: LD_VAR 0 1
28742: PPUSH
28743: LD_VAR 0 2
28747: PPUSH
28748: LD_VAR 0 3
28752: PPUSH
28753: LD_INT 3
28755: PPUSH
28756: LD_INT 6
28758: PPUSH
28759: CALL_OW 12
28763: PPUSH
28764: LD_INT 1
28766: PPUSH
28767: CALL_OW 483
// end ;
28771: GO 28631
28773: POP
28774: POP
// end ;
28775: PPOPN 5
28777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28778: LD_EXP 46
28782: PUSH
28783: LD_EXP 81
28787: AND
28788: IFFALSE 28882
28790: GO 28792
28792: DISABLE
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28797: LD_ADDR_VAR 0 2
28801: PUSH
28802: LD_INT 22
28804: PUSH
28805: LD_OWVAR 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 32
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 21
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 2
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 28882
// for i in tmp do
28853: LD_ADDR_VAR 0 1
28857: PUSH
28858: LD_VAR 0 2
28862: PUSH
28863: FOR_IN
28864: IFFALSE 28880
// SetFuel ( i , 0 ) ;
28866: LD_VAR 0 1
28870: PPUSH
28871: LD_INT 0
28873: PPUSH
28874: CALL_OW 240
28878: GO 28863
28880: POP
28881: POP
// end ;
28882: PPOPN 2
28884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28885: LD_EXP 46
28889: PUSH
28890: LD_EXP 82
28894: AND
28895: IFFALSE 28961
28897: GO 28899
28899: DISABLE
28900: LD_INT 0
28902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28903: LD_ADDR_VAR 0 1
28907: PUSH
28908: LD_INT 22
28910: PUSH
28911: LD_OWVAR 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 30
28922: PUSH
28923: LD_INT 29
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PPUSH
28934: CALL_OW 69
28938: ST_TO_ADDR
// if not tmp then
28939: LD_VAR 0 1
28943: NOT
28944: IFFALSE 28948
// exit ;
28946: GO 28961
// DestroyUnit ( tmp [ 1 ] ) ;
28948: LD_VAR 0 1
28952: PUSH
28953: LD_INT 1
28955: ARRAY
28956: PPUSH
28957: CALL_OW 65
// end ;
28961: PPOPN 1
28963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28964: LD_EXP 46
28968: PUSH
28969: LD_EXP 84
28973: AND
28974: IFFALSE 29103
28976: GO 28978
28978: DISABLE
28979: LD_INT 0
28981: PPUSH
// begin uc_side := 0 ;
28982: LD_ADDR_OWVAR 20
28986: PUSH
28987: LD_INT 0
28989: ST_TO_ADDR
// uc_nation := nation_arabian ;
28990: LD_ADDR_OWVAR 21
28994: PUSH
28995: LD_INT 2
28997: ST_TO_ADDR
// hc_gallery :=  ;
28998: LD_ADDR_OWVAR 33
29002: PUSH
29003: LD_STRING 
29005: ST_TO_ADDR
// hc_name :=  ;
29006: LD_ADDR_OWVAR 26
29010: PUSH
29011: LD_STRING 
29013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29014: LD_INT 1
29016: PPUSH
29017: LD_INT 11
29019: PPUSH
29020: LD_INT 10
29022: PPUSH
29023: CALL_OW 380
// un := CreateHuman ;
29027: LD_ADDR_VAR 0 1
29031: PUSH
29032: CALL_OW 44
29036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29037: LD_VAR 0 1
29041: PPUSH
29042: LD_INT 1
29044: PPUSH
29045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29049: LD_INT 35
29051: PPUSH
29052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29056: LD_VAR 0 1
29060: PPUSH
29061: LD_INT 22
29063: PUSH
29064: LD_OWVAR 2
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PPUSH
29073: CALL_OW 69
29077: PPUSH
29078: LD_VAR 0 1
29082: PPUSH
29083: CALL_OW 74
29087: PPUSH
29088: CALL_OW 115
// until IsDead ( un ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 301
29101: IFFALSE 29049
// end ;
29103: PPOPN 1
29105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29106: LD_EXP 46
29110: PUSH
29111: LD_EXP 86
29115: AND
29116: IFFALSE 29128
29118: GO 29120
29120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29121: LD_STRING earthquake(getX(game), 0, 32)
29123: PPUSH
29124: CALL_OW 559
29128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29129: LD_EXP 46
29133: PUSH
29134: LD_EXP 87
29138: AND
29139: IFFALSE 29230
29141: GO 29143
29143: DISABLE
29144: LD_INT 0
29146: PPUSH
// begin enable ;
29147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29148: LD_ADDR_VAR 0 1
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_OWVAR 2
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 21
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 33
29177: PUSH
29178: LD_INT 3
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: PPUSH
29190: CALL_OW 69
29194: ST_TO_ADDR
// if not tmp then
29195: LD_VAR 0 1
29199: NOT
29200: IFFALSE 29204
// exit ;
29202: GO 29230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29204: LD_VAR 0 1
29208: PUSH
29209: LD_INT 1
29211: PPUSH
29212: LD_VAR 0 1
29216: PPUSH
29217: CALL_OW 12
29221: ARRAY
29222: PPUSH
29223: LD_INT 1
29225: PPUSH
29226: CALL_OW 234
// end ;
29230: PPOPN 1
29232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29233: LD_EXP 46
29237: PUSH
29238: LD_EXP 88
29242: AND
29243: IFFALSE 29384
29245: GO 29247
29247: DISABLE
29248: LD_INT 0
29250: PPUSH
29251: PPUSH
29252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29253: LD_ADDR_VAR 0 3
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_OWVAR 2
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 25
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 69
29288: ST_TO_ADDR
// if not tmp then
29289: LD_VAR 0 3
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29384
// un := tmp [ rand ( 1 , tmp ) ] ;
29298: LD_ADDR_VAR 0 2
29302: PUSH
29303: LD_VAR 0 3
29307: PUSH
29308: LD_INT 1
29310: PPUSH
29311: LD_VAR 0 3
29315: PPUSH
29316: CALL_OW 12
29320: ARRAY
29321: ST_TO_ADDR
// if Crawls ( un ) then
29322: LD_VAR 0 2
29326: PPUSH
29327: CALL_OW 318
29331: IFFALSE 29342
// ComWalk ( un ) ;
29333: LD_VAR 0 2
29337: PPUSH
29338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29342: LD_VAR 0 2
29346: PPUSH
29347: LD_INT 9
29349: PPUSH
29350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29354: LD_INT 28
29356: PPUSH
29357: LD_OWVAR 2
29361: PPUSH
29362: LD_INT 2
29364: PPUSH
29365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29369: LD_INT 29
29371: PPUSH
29372: LD_OWVAR 2
29376: PPUSH
29377: LD_INT 2
29379: PPUSH
29380: CALL_OW 322
// end ;
29384: PPOPN 3
29386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29387: LD_EXP 46
29391: PUSH
29392: LD_EXP 89
29396: AND
29397: IFFALSE 29508
29399: GO 29401
29401: DISABLE
29402: LD_INT 0
29404: PPUSH
29405: PPUSH
29406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29407: LD_ADDR_VAR 0 3
29411: PUSH
29412: LD_INT 22
29414: PUSH
29415: LD_OWVAR 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 25
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PPUSH
29438: CALL_OW 69
29442: ST_TO_ADDR
// if not tmp then
29443: LD_VAR 0 3
29447: NOT
29448: IFFALSE 29452
// exit ;
29450: GO 29508
// un := tmp [ rand ( 1 , tmp ) ] ;
29452: LD_ADDR_VAR 0 2
29456: PUSH
29457: LD_VAR 0 3
29461: PUSH
29462: LD_INT 1
29464: PPUSH
29465: LD_VAR 0 3
29469: PPUSH
29470: CALL_OW 12
29474: ARRAY
29475: ST_TO_ADDR
// if Crawls ( un ) then
29476: LD_VAR 0 2
29480: PPUSH
29481: CALL_OW 318
29485: IFFALSE 29496
// ComWalk ( un ) ;
29487: LD_VAR 0 2
29491: PPUSH
29492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29496: LD_VAR 0 2
29500: PPUSH
29501: LD_INT 8
29503: PPUSH
29504: CALL_OW 336
// end ;
29508: PPOPN 3
29510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29511: LD_EXP 46
29515: PUSH
29516: LD_EXP 90
29520: AND
29521: IFFALSE 29665
29523: GO 29525
29525: DISABLE
29526: LD_INT 0
29528: PPUSH
29529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29530: LD_ADDR_VAR 0 2
29534: PUSH
29535: LD_INT 22
29537: PUSH
29538: LD_OWVAR 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 21
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 34
29562: PUSH
29563: LD_INT 12
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 34
29572: PUSH
29573: LD_INT 51
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 34
29582: PUSH
29583: LD_INT 32
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 69
29605: ST_TO_ADDR
// if not tmp then
29606: LD_VAR 0 2
29610: NOT
29611: IFFALSE 29615
// exit ;
29613: GO 29665
// for i in tmp do
29615: LD_ADDR_VAR 0 1
29619: PUSH
29620: LD_VAR 0 2
29624: PUSH
29625: FOR_IN
29626: IFFALSE 29663
// if GetCargo ( i , mat_artifact ) = 0 then
29628: LD_VAR 0 1
29632: PPUSH
29633: LD_INT 4
29635: PPUSH
29636: CALL_OW 289
29640: PUSH
29641: LD_INT 0
29643: EQUAL
29644: IFFALSE 29661
// SetCargo ( i , mat_siberit , 100 ) ;
29646: LD_VAR 0 1
29650: PPUSH
29651: LD_INT 3
29653: PPUSH
29654: LD_INT 100
29656: PPUSH
29657: CALL_OW 290
29661: GO 29625
29663: POP
29664: POP
// end ;
29665: PPOPN 2
29667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29668: LD_EXP 46
29672: PUSH
29673: LD_EXP 91
29677: AND
29678: IFFALSE 29861
29680: GO 29682
29682: DISABLE
29683: LD_INT 0
29685: PPUSH
29686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29687: LD_ADDR_VAR 0 2
29691: PUSH
29692: LD_INT 22
29694: PUSH
29695: LD_OWVAR 2
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PPUSH
29704: CALL_OW 69
29708: ST_TO_ADDR
// if not tmp then
29709: LD_VAR 0 2
29713: NOT
29714: IFFALSE 29718
// exit ;
29716: GO 29861
// for i := 1 to 2 do
29718: LD_ADDR_VAR 0 1
29722: PUSH
29723: DOUBLE
29724: LD_INT 1
29726: DEC
29727: ST_TO_ADDR
29728: LD_INT 2
29730: PUSH
29731: FOR_TO
29732: IFFALSE 29859
// begin uc_side := your_side ;
29734: LD_ADDR_OWVAR 20
29738: PUSH
29739: LD_OWVAR 2
29743: ST_TO_ADDR
// uc_nation := nation_american ;
29744: LD_ADDR_OWVAR 21
29748: PUSH
29749: LD_INT 1
29751: ST_TO_ADDR
// vc_chassis := us_morphling ;
29752: LD_ADDR_OWVAR 37
29756: PUSH
29757: LD_INT 5
29759: ST_TO_ADDR
// vc_engine := engine_siberite ;
29760: LD_ADDR_OWVAR 39
29764: PUSH
29765: LD_INT 3
29767: ST_TO_ADDR
// vc_control := control_computer ;
29768: LD_ADDR_OWVAR 38
29772: PUSH
29773: LD_INT 3
29775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29776: LD_ADDR_OWVAR 40
29780: PUSH
29781: LD_INT 10
29783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29784: LD_VAR 0 2
29788: PUSH
29789: LD_INT 1
29791: ARRAY
29792: PPUSH
29793: CALL_OW 310
29797: NOT
29798: IFFALSE 29845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29800: CALL_OW 45
29804: PPUSH
29805: LD_VAR 0 2
29809: PUSH
29810: LD_INT 1
29812: ARRAY
29813: PPUSH
29814: CALL_OW 250
29818: PPUSH
29819: LD_VAR 0 2
29823: PUSH
29824: LD_INT 1
29826: ARRAY
29827: PPUSH
29828: CALL_OW 251
29832: PPUSH
29833: LD_INT 12
29835: PPUSH
29836: LD_INT 1
29838: PPUSH
29839: CALL_OW 50
29843: GO 29857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29845: CALL_OW 45
29849: PPUSH
29850: LD_INT 1
29852: PPUSH
29853: CALL_OW 51
// end ;
29857: GO 29731
29859: POP
29860: POP
// end ;
29861: PPOPN 2
29863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29864: LD_EXP 46
29868: PUSH
29869: LD_EXP 92
29873: AND
29874: IFFALSE 30096
29876: GO 29878
29878: DISABLE
29879: LD_INT 0
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
29885: PPUSH
29886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29887: LD_ADDR_VAR 0 6
29891: PUSH
29892: LD_INT 22
29894: PUSH
29895: LD_OWVAR 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 21
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: LD_INT 23
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: LIST
29935: PPUSH
29936: CALL_OW 69
29940: ST_TO_ADDR
// if not tmp then
29941: LD_VAR 0 6
29945: NOT
29946: IFFALSE 29950
// exit ;
29948: GO 30096
// s1 := rand ( 1 , 4 ) ;
29950: LD_ADDR_VAR 0 2
29954: PUSH
29955: LD_INT 1
29957: PPUSH
29958: LD_INT 4
29960: PPUSH
29961: CALL_OW 12
29965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29966: LD_ADDR_VAR 0 4
29970: PUSH
29971: LD_VAR 0 6
29975: PUSH
29976: LD_INT 1
29978: ARRAY
29979: PPUSH
29980: LD_VAR 0 2
29984: PPUSH
29985: CALL_OW 259
29989: ST_TO_ADDR
// if s1 = 1 then
29990: LD_VAR 0 2
29994: PUSH
29995: LD_INT 1
29997: EQUAL
29998: IFFALSE 30018
// s2 := rand ( 2 , 4 ) else
30000: LD_ADDR_VAR 0 3
30004: PUSH
30005: LD_INT 2
30007: PPUSH
30008: LD_INT 4
30010: PPUSH
30011: CALL_OW 12
30015: ST_TO_ADDR
30016: GO 30026
// s2 := 1 ;
30018: LD_ADDR_VAR 0 3
30022: PUSH
30023: LD_INT 1
30025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30026: LD_ADDR_VAR 0 5
30030: PUSH
30031: LD_VAR 0 6
30035: PUSH
30036: LD_INT 1
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 3
30044: PPUSH
30045: CALL_OW 259
30049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30050: LD_VAR 0 6
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: LD_VAR 0 2
30063: PPUSH
30064: LD_VAR 0 5
30068: PPUSH
30069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30073: LD_VAR 0 6
30077: PUSH
30078: LD_INT 1
30080: ARRAY
30081: PPUSH
30082: LD_VAR 0 3
30086: PPUSH
30087: LD_VAR 0 4
30091: PPUSH
30092: CALL_OW 237
// end ;
30096: PPOPN 6
30098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30099: LD_EXP 46
30103: PUSH
30104: LD_EXP 93
30108: AND
30109: IFFALSE 30188
30111: GO 30113
30113: DISABLE
30114: LD_INT 0
30116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30117: LD_ADDR_VAR 0 1
30121: PUSH
30122: LD_INT 22
30124: PUSH
30125: LD_OWVAR 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 30
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PPUSH
30148: CALL_OW 69
30152: ST_TO_ADDR
// if not tmp then
30153: LD_VAR 0 1
30157: NOT
30158: IFFALSE 30162
// exit ;
30160: GO 30188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30162: LD_VAR 0 1
30166: PUSH
30167: LD_INT 1
30169: PPUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 12
30179: ARRAY
30180: PPUSH
30181: LD_INT 1
30183: PPUSH
30184: CALL_OW 234
// end ;
30188: PPOPN 1
30190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30191: LD_EXP 46
30195: PUSH
30196: LD_EXP 94
30200: AND
30201: IFFALSE 30313
30203: GO 30205
30205: DISABLE
30206: LD_INT 0
30208: PPUSH
30209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30210: LD_ADDR_VAR 0 2
30214: PUSH
30215: LD_INT 22
30217: PUSH
30218: LD_OWVAR 2
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: LD_INT 30
30232: PUSH
30233: LD_INT 27
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 30
30242: PUSH
30243: LD_INT 26
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 30
30252: PUSH
30253: LD_INT 28
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PPUSH
30270: CALL_OW 69
30274: ST_TO_ADDR
// if not tmp then
30275: LD_VAR 0 2
30279: NOT
30280: IFFALSE 30284
// exit ;
30282: GO 30313
// for i in tmp do
30284: LD_ADDR_VAR 0 1
30288: PUSH
30289: LD_VAR 0 2
30293: PUSH
30294: FOR_IN
30295: IFFALSE 30311
// SetLives ( i , 1 ) ;
30297: LD_VAR 0 1
30301: PPUSH
30302: LD_INT 1
30304: PPUSH
30305: CALL_OW 234
30309: GO 30294
30311: POP
30312: POP
// end ;
30313: PPOPN 2
30315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30316: LD_EXP 46
30320: PUSH
30321: LD_EXP 95
30325: AND
30326: IFFALSE 30613
30328: GO 30330
30330: DISABLE
30331: LD_INT 0
30333: PPUSH
30334: PPUSH
30335: PPUSH
// begin i := rand ( 1 , 7 ) ;
30336: LD_ADDR_VAR 0 1
30340: PUSH
30341: LD_INT 1
30343: PPUSH
30344: LD_INT 7
30346: PPUSH
30347: CALL_OW 12
30351: ST_TO_ADDR
// case i of 1 :
30352: LD_VAR 0 1
30356: PUSH
30357: LD_INT 1
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30375
30365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30366: LD_STRING earthquake(getX(game), 0, 32)
30368: PPUSH
30369: CALL_OW 559
30373: GO 30613
30375: LD_INT 2
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30383
30381: GO 30397
30383: POP
// begin ToLua ( displayStucuk(); ) ;
30384: LD_STRING displayStucuk();
30386: PPUSH
30387: CALL_OW 559
// ResetFog ;
30391: CALL_OW 335
// end ; 3 :
30395: GO 30613
30397: LD_INT 3
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30509
30405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30406: LD_ADDR_VAR 0 2
30410: PUSH
30411: LD_INT 22
30413: PUSH
30414: LD_OWVAR 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 25
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PPUSH
30437: CALL_OW 69
30441: ST_TO_ADDR
// if not tmp then
30442: LD_VAR 0 2
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 30613
// un := tmp [ rand ( 1 , tmp ) ] ;
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_VAR 0 2
30460: PUSH
30461: LD_INT 1
30463: PPUSH
30464: LD_VAR 0 2
30468: PPUSH
30469: CALL_OW 12
30473: ARRAY
30474: ST_TO_ADDR
// if Crawls ( un ) then
30475: LD_VAR 0 3
30479: PPUSH
30480: CALL_OW 318
30484: IFFALSE 30495
// ComWalk ( un ) ;
30486: LD_VAR 0 3
30490: PPUSH
30491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30495: LD_VAR 0 3
30499: PPUSH
30500: LD_INT 8
30502: PPUSH
30503: CALL_OW 336
// end ; 4 :
30507: GO 30613
30509: LD_INT 4
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30591
30517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30518: LD_ADDR_VAR 0 2
30522: PUSH
30523: LD_INT 22
30525: PUSH
30526: LD_OWVAR 2
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 30
30537: PUSH
30538: LD_INT 29
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PPUSH
30549: CALL_OW 69
30553: ST_TO_ADDR
// if not tmp then
30554: LD_VAR 0 2
30558: NOT
30559: IFFALSE 30563
// exit ;
30561: GO 30613
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30563: LD_VAR 0 2
30567: PUSH
30568: LD_INT 1
30570: ARRAY
30571: PPUSH
30572: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30576: LD_VAR 0 2
30580: PUSH
30581: LD_INT 1
30583: ARRAY
30584: PPUSH
30585: CALL_OW 65
// end ; 5 .. 7 :
30589: GO 30613
30591: LD_INT 5
30593: DOUBLE
30594: GREATEREQUAL
30595: IFFALSE 30603
30597: LD_INT 7
30599: DOUBLE
30600: LESSEQUAL
30601: IFTRUE 30605
30603: GO 30612
30605: POP
// StreamSibBomb ; end ;
30606: CALL 26850 0 0
30610: GO 30613
30612: POP
// end ;
30613: PPOPN 3
30615: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30616: LD_EXP 46
30620: PUSH
30621: LD_EXP 96
30625: AND
30626: IFFALSE 30782
30628: GO 30630
30630: DISABLE
30631: LD_INT 0
30633: PPUSH
30634: PPUSH
30635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30636: LD_ADDR_VAR 0 2
30640: PUSH
30641: LD_INT 81
30643: PUSH
30644: LD_OWVAR 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 21
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 21
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PPUSH
30685: CALL_OW 69
30689: ST_TO_ADDR
// if not tmp then
30690: LD_VAR 0 2
30694: NOT
30695: IFFALSE 30699
// exit ;
30697: GO 30782
// p := 0 ;
30699: LD_ADDR_VAR 0 3
30703: PUSH
30704: LD_INT 0
30706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30707: LD_INT 35
30709: PPUSH
30710: CALL_OW 67
// p := p + 1 ;
30714: LD_ADDR_VAR 0 3
30718: PUSH
30719: LD_VAR 0 3
30723: PUSH
30724: LD_INT 1
30726: PLUS
30727: ST_TO_ADDR
// for i in tmp do
30728: LD_ADDR_VAR 0 1
30732: PUSH
30733: LD_VAR 0 2
30737: PUSH
30738: FOR_IN
30739: IFFALSE 30770
// if GetLives ( i ) < 1000 then
30741: LD_VAR 0 1
30745: PPUSH
30746: CALL_OW 256
30750: PUSH
30751: LD_INT 1000
30753: LESS
30754: IFFALSE 30768
// SetLives ( i , 1000 ) ;
30756: LD_VAR 0 1
30760: PPUSH
30761: LD_INT 1000
30763: PPUSH
30764: CALL_OW 234
30768: GO 30738
30770: POP
30771: POP
// until p > 20 ;
30772: LD_VAR 0 3
30776: PUSH
30777: LD_INT 20
30779: GREATER
30780: IFFALSE 30707
// end ;
30782: PPOPN 3
30784: END
// every 0 0$1 trigger StreamModeActive and sTime do
30785: LD_EXP 46
30789: PUSH
30790: LD_EXP 97
30794: AND
30795: IFFALSE 30830
30797: GO 30799
30799: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30800: LD_INT 28
30802: PPUSH
30803: LD_OWVAR 2
30807: PPUSH
30808: LD_INT 2
30810: PPUSH
30811: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30815: LD_INT 30
30817: PPUSH
30818: LD_OWVAR 2
30822: PPUSH
30823: LD_INT 2
30825: PPUSH
30826: CALL_OW 322
// end ;
30830: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30831: LD_EXP 46
30835: PUSH
30836: LD_EXP 98
30840: AND
30841: IFFALSE 30962
30843: GO 30845
30845: DISABLE
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_INT 22
30857: PUSH
30858: LD_OWVAR 2
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 21
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: LD_INT 23
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: ST_TO_ADDR
// if not tmp then
30904: LD_VAR 0 2
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 30962
// for i in tmp do
30913: LD_ADDR_VAR 0 1
30917: PUSH
30918: LD_VAR 0 2
30922: PUSH
30923: FOR_IN
30924: IFFALSE 30960
// begin if Crawls ( i ) then
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 318
30935: IFFALSE 30946
// ComWalk ( i ) ;
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 138
// SetClass ( i , 2 ) ;
30946: LD_VAR 0 1
30950: PPUSH
30951: LD_INT 2
30953: PPUSH
30954: CALL_OW 336
// end ;
30958: GO 30923
30960: POP
30961: POP
// end ;
30962: PPOPN 2
30964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30965: LD_EXP 46
30969: PUSH
30970: LD_EXP 99
30974: AND
30975: IFFALSE 31263
30977: GO 30979
30979: DISABLE
30980: LD_INT 0
30982: PPUSH
30983: PPUSH
30984: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30985: LD_OWVAR 2
30989: PPUSH
30990: LD_INT 9
30992: PPUSH
30993: LD_INT 1
30995: PPUSH
30996: LD_INT 1
30998: PPUSH
30999: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31003: LD_INT 9
31005: PPUSH
31006: LD_OWVAR 2
31010: PPUSH
31011: CALL_OW 343
// uc_side := 9 ;
31015: LD_ADDR_OWVAR 20
31019: PUSH
31020: LD_INT 9
31022: ST_TO_ADDR
// uc_nation := 2 ;
31023: LD_ADDR_OWVAR 21
31027: PUSH
31028: LD_INT 2
31030: ST_TO_ADDR
// hc_name := Dark Warrior ;
31031: LD_ADDR_OWVAR 26
31035: PUSH
31036: LD_STRING Dark Warrior
31038: ST_TO_ADDR
// hc_gallery :=  ;
31039: LD_ADDR_OWVAR 33
31043: PUSH
31044: LD_STRING 
31046: ST_TO_ADDR
// hc_noskilllimit := true ;
31047: LD_ADDR_OWVAR 76
31051: PUSH
31052: LD_INT 1
31054: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31055: LD_ADDR_OWVAR 31
31059: PUSH
31060: LD_INT 30
31062: PUSH
31063: LD_INT 30
31065: PUSH
31066: LD_INT 30
31068: PUSH
31069: LD_INT 30
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
// un := CreateHuman ;
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: CALL_OW 44
31087: ST_TO_ADDR
// hc_noskilllimit := false ;
31088: LD_ADDR_OWVAR 76
31092: PUSH
31093: LD_INT 0
31095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31096: LD_VAR 0 3
31100: PPUSH
31101: LD_INT 1
31103: PPUSH
31104: CALL_OW 51
// ToLua ( playRanger() ) ;
31108: LD_STRING playRanger()
31110: PPUSH
31111: CALL_OW 559
// p := 0 ;
31115: LD_ADDR_VAR 0 2
31119: PUSH
31120: LD_INT 0
31122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31123: LD_INT 35
31125: PPUSH
31126: CALL_OW 67
// p := p + 1 ;
31130: LD_ADDR_VAR 0 2
31134: PUSH
31135: LD_VAR 0 2
31139: PUSH
31140: LD_INT 1
31142: PLUS
31143: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31144: LD_VAR 0 3
31148: PPUSH
31149: CALL_OW 256
31153: PUSH
31154: LD_INT 1000
31156: LESS
31157: IFFALSE 31171
// SetLives ( un , 1000 ) ;
31159: LD_VAR 0 3
31163: PPUSH
31164: LD_INT 1000
31166: PPUSH
31167: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31171: LD_VAR 0 3
31175: PPUSH
31176: LD_INT 81
31178: PUSH
31179: LD_OWVAR 2
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 91
31190: PUSH
31191: LD_VAR 0 3
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PPUSH
31208: CALL_OW 69
31212: PPUSH
31213: LD_VAR 0 3
31217: PPUSH
31218: CALL_OW 74
31222: PPUSH
31223: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31227: LD_VAR 0 2
31231: PUSH
31232: LD_INT 80
31234: GREATER
31235: PUSH
31236: LD_VAR 0 3
31240: PPUSH
31241: CALL_OW 301
31245: OR
31246: IFFALSE 31123
// if un then
31248: LD_VAR 0 3
31252: IFFALSE 31263
// RemoveUnit ( un ) ;
31254: LD_VAR 0 3
31258: PPUSH
31259: CALL_OW 64
// end ;
31263: PPOPN 3
31265: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31266: LD_EXP 100
31270: IFFALSE 31386
31272: GO 31274
31274: DISABLE
31275: LD_INT 0
31277: PPUSH
31278: PPUSH
31279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31280: LD_ADDR_VAR 0 2
31284: PUSH
31285: LD_INT 81
31287: PUSH
31288: LD_OWVAR 2
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 21
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31316: LD_STRING playComputer()
31318: PPUSH
31319: CALL_OW 559
// if not tmp then
31323: LD_VAR 0 2
31327: NOT
31328: IFFALSE 31332
// exit ;
31330: GO 31386
// for i in tmp do
31332: LD_ADDR_VAR 0 1
31336: PUSH
31337: LD_VAR 0 2
31341: PUSH
31342: FOR_IN
31343: IFFALSE 31384
// for j := 1 to 4 do
31345: LD_ADDR_VAR 0 3
31349: PUSH
31350: DOUBLE
31351: LD_INT 1
31353: DEC
31354: ST_TO_ADDR
31355: LD_INT 4
31357: PUSH
31358: FOR_TO
31359: IFFALSE 31380
// SetSkill ( i , j , 10 ) ;
31361: LD_VAR 0 1
31365: PPUSH
31366: LD_VAR 0 3
31370: PPUSH
31371: LD_INT 10
31373: PPUSH
31374: CALL_OW 237
31378: GO 31358
31380: POP
31381: POP
31382: GO 31342
31384: POP
31385: POP
// end ;
31386: PPOPN 3
31388: END
// every 0 0$1 trigger s30 do var i , tmp ;
31389: LD_EXP 101
31393: IFFALSE 31462
31395: GO 31397
31397: DISABLE
31398: LD_INT 0
31400: PPUSH
31401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31402: LD_ADDR_VAR 0 2
31406: PUSH
31407: LD_INT 22
31409: PUSH
31410: LD_OWVAR 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PPUSH
31419: CALL_OW 69
31423: ST_TO_ADDR
// if not tmp then
31424: LD_VAR 0 2
31428: NOT
31429: IFFALSE 31433
// exit ;
31431: GO 31462
// for i in tmp do
31433: LD_ADDR_VAR 0 1
31437: PUSH
31438: LD_VAR 0 2
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31460
// SetLives ( i , 300 ) ;
31446: LD_VAR 0 1
31450: PPUSH
31451: LD_INT 300
31453: PPUSH
31454: CALL_OW 234
31458: GO 31443
31460: POP
31461: POP
// end ;
31462: PPOPN 2
31464: END
// every 0 0$1 trigger s60 do var i , tmp ;
31465: LD_EXP 102
31469: IFFALSE 31538
31471: GO 31473
31473: DISABLE
31474: LD_INT 0
31476: PPUSH
31477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31478: LD_ADDR_VAR 0 2
31482: PUSH
31483: LD_INT 22
31485: PUSH
31486: LD_OWVAR 2
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PPUSH
31495: CALL_OW 69
31499: ST_TO_ADDR
// if not tmp then
31500: LD_VAR 0 2
31504: NOT
31505: IFFALSE 31509
// exit ;
31507: GO 31538
// for i in tmp do
31509: LD_ADDR_VAR 0 1
31513: PUSH
31514: LD_VAR 0 2
31518: PUSH
31519: FOR_IN
31520: IFFALSE 31536
// SetLives ( i , 600 ) ;
31522: LD_VAR 0 1
31526: PPUSH
31527: LD_INT 600
31529: PPUSH
31530: CALL_OW 234
31534: GO 31519
31536: POP
31537: POP
// end ;
31538: PPOPN 2
31540: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31541: LD_INT 0
31543: PPUSH
// case cmd of 301 :
31544: LD_VAR 0 1
31548: PUSH
31549: LD_INT 301
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31589
31557: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31558: LD_VAR 0 6
31562: PPUSH
31563: LD_VAR 0 7
31567: PPUSH
31568: LD_VAR 0 8
31572: PPUSH
31573: LD_VAR 0 4
31577: PPUSH
31578: LD_VAR 0 5
31582: PPUSH
31583: CALL 32790 0 5
31587: GO 31710
31589: LD_INT 302
31591: DOUBLE
31592: EQUAL
31593: IFTRUE 31597
31595: GO 31634
31597: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31598: LD_VAR 0 6
31602: PPUSH
31603: LD_VAR 0 7
31607: PPUSH
31608: LD_VAR 0 8
31612: PPUSH
31613: LD_VAR 0 9
31617: PPUSH
31618: LD_VAR 0 4
31622: PPUSH
31623: LD_VAR 0 5
31627: PPUSH
31628: CALL 32881 0 6
31632: GO 31710
31634: LD_INT 303
31636: DOUBLE
31637: EQUAL
31638: IFTRUE 31642
31640: GO 31679
31642: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31643: LD_VAR 0 6
31647: PPUSH
31648: LD_VAR 0 7
31652: PPUSH
31653: LD_VAR 0 8
31657: PPUSH
31658: LD_VAR 0 9
31662: PPUSH
31663: LD_VAR 0 4
31667: PPUSH
31668: LD_VAR 0 5
31672: PPUSH
31673: CALL 31715 0 6
31677: GO 31710
31679: LD_INT 304
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31709
31687: POP
// hHackTeleport ( unit , x , y ) ; end ;
31688: LD_VAR 0 2
31692: PPUSH
31693: LD_VAR 0 4
31697: PPUSH
31698: LD_VAR 0 5
31702: PPUSH
31703: CALL 33474 0 3
31707: GO 31710
31709: POP
// end ;
31710: LD_VAR 0 12
31714: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31715: LD_INT 0
31717: PPUSH
31718: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31719: LD_VAR 0 1
31723: PUSH
31724: LD_INT 1
31726: LESS
31727: PUSH
31728: LD_VAR 0 1
31732: PUSH
31733: LD_INT 3
31735: GREATER
31736: OR
31737: PUSH
31738: LD_VAR 0 5
31742: PPUSH
31743: LD_VAR 0 6
31747: PPUSH
31748: CALL_OW 428
31752: OR
31753: IFFALSE 31757
// exit ;
31755: GO 32477
// uc_side := your_side ;
31757: LD_ADDR_OWVAR 20
31761: PUSH
31762: LD_OWVAR 2
31766: ST_TO_ADDR
// uc_nation := nation ;
31767: LD_ADDR_OWVAR 21
31771: PUSH
31772: LD_VAR 0 1
31776: ST_TO_ADDR
// bc_level = 1 ;
31777: LD_ADDR_OWVAR 43
31781: PUSH
31782: LD_INT 1
31784: ST_TO_ADDR
// case btype of 1 :
31785: LD_VAR 0 2
31789: PUSH
31790: LD_INT 1
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31809
31798: POP
// bc_type := b_depot ; 2 :
31799: LD_ADDR_OWVAR 42
31803: PUSH
31804: LD_INT 0
31806: ST_TO_ADDR
31807: GO 32421
31809: LD_INT 2
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31828
31817: POP
// bc_type := b_warehouse ; 3 :
31818: LD_ADDR_OWVAR 42
31822: PUSH
31823: LD_INT 1
31825: ST_TO_ADDR
31826: GO 32421
31828: LD_INT 3
31830: DOUBLE
31831: EQUAL
31832: IFTRUE 31836
31834: GO 31847
31836: POP
// bc_type := b_lab ; 4 .. 9 :
31837: LD_ADDR_OWVAR 42
31841: PUSH
31842: LD_INT 6
31844: ST_TO_ADDR
31845: GO 32421
31847: LD_INT 4
31849: DOUBLE
31850: GREATEREQUAL
31851: IFFALSE 31859
31853: LD_INT 9
31855: DOUBLE
31856: LESSEQUAL
31857: IFTRUE 31861
31859: GO 31913
31861: POP
// begin bc_type := b_lab_half ;
31862: LD_ADDR_OWVAR 42
31866: PUSH
31867: LD_INT 7
31869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31870: LD_ADDR_OWVAR 44
31874: PUSH
31875: LD_INT 10
31877: PUSH
31878: LD_INT 11
31880: PUSH
31881: LD_INT 12
31883: PUSH
31884: LD_INT 15
31886: PUSH
31887: LD_INT 14
31889: PUSH
31890: LD_INT 13
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: PUSH
31901: LD_VAR 0 2
31905: PUSH
31906: LD_INT 3
31908: MINUS
31909: ARRAY
31910: ST_TO_ADDR
// end ; 10 .. 13 :
31911: GO 32421
31913: LD_INT 10
31915: DOUBLE
31916: GREATEREQUAL
31917: IFFALSE 31925
31919: LD_INT 13
31921: DOUBLE
31922: LESSEQUAL
31923: IFTRUE 31927
31925: GO 32004
31927: POP
// begin bc_type := b_lab_full ;
31928: LD_ADDR_OWVAR 42
31932: PUSH
31933: LD_INT 8
31935: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31936: LD_ADDR_OWVAR 44
31940: PUSH
31941: LD_INT 10
31943: PUSH
31944: LD_INT 12
31946: PUSH
31947: LD_INT 14
31949: PUSH
31950: LD_INT 13
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: PUSH
31959: LD_VAR 0 2
31963: PUSH
31964: LD_INT 9
31966: MINUS
31967: ARRAY
31968: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31969: LD_ADDR_OWVAR 45
31973: PUSH
31974: LD_INT 11
31976: PUSH
31977: LD_INT 15
31979: PUSH
31980: LD_INT 12
31982: PUSH
31983: LD_INT 15
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: PUSH
31992: LD_VAR 0 2
31996: PUSH
31997: LD_INT 9
31999: MINUS
32000: ARRAY
32001: ST_TO_ADDR
// end ; 14 :
32002: GO 32421
32004: LD_INT 14
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32023
32012: POP
// bc_type := b_workshop ; 15 :
32013: LD_ADDR_OWVAR 42
32017: PUSH
32018: LD_INT 2
32020: ST_TO_ADDR
32021: GO 32421
32023: LD_INT 15
32025: DOUBLE
32026: EQUAL
32027: IFTRUE 32031
32029: GO 32042
32031: POP
// bc_type := b_factory ; 16 :
32032: LD_ADDR_OWVAR 42
32036: PUSH
32037: LD_INT 3
32039: ST_TO_ADDR
32040: GO 32421
32042: LD_INT 16
32044: DOUBLE
32045: EQUAL
32046: IFTRUE 32050
32048: GO 32061
32050: POP
// bc_type := b_ext_gun ; 17 :
32051: LD_ADDR_OWVAR 42
32055: PUSH
32056: LD_INT 17
32058: ST_TO_ADDR
32059: GO 32421
32061: LD_INT 17
32063: DOUBLE
32064: EQUAL
32065: IFTRUE 32069
32067: GO 32097
32069: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32070: LD_ADDR_OWVAR 42
32074: PUSH
32075: LD_INT 19
32077: PUSH
32078: LD_INT 23
32080: PUSH
32081: LD_INT 19
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: PUSH
32089: LD_VAR 0 1
32093: ARRAY
32094: ST_TO_ADDR
32095: GO 32421
32097: LD_INT 18
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32116
32105: POP
// bc_type := b_ext_radar ; 19 :
32106: LD_ADDR_OWVAR 42
32110: PUSH
32111: LD_INT 20
32113: ST_TO_ADDR
32114: GO 32421
32116: LD_INT 19
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32135
32124: POP
// bc_type := b_ext_radio ; 20 :
32125: LD_ADDR_OWVAR 42
32129: PUSH
32130: LD_INT 22
32132: ST_TO_ADDR
32133: GO 32421
32135: LD_INT 20
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32154
32143: POP
// bc_type := b_ext_siberium ; 21 :
32144: LD_ADDR_OWVAR 42
32148: PUSH
32149: LD_INT 21
32151: ST_TO_ADDR
32152: GO 32421
32154: LD_INT 21
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32173
32162: POP
// bc_type := b_ext_computer ; 22 :
32163: LD_ADDR_OWVAR 42
32167: PUSH
32168: LD_INT 24
32170: ST_TO_ADDR
32171: GO 32421
32173: LD_INT 22
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32192
32181: POP
// bc_type := b_ext_track ; 23 :
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 16
32189: ST_TO_ADDR
32190: GO 32421
32192: LD_INT 23
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32211
32200: POP
// bc_type := b_ext_laser ; 24 :
32201: LD_ADDR_OWVAR 42
32205: PUSH
32206: LD_INT 25
32208: ST_TO_ADDR
32209: GO 32421
32211: LD_INT 24
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32230
32219: POP
// bc_type := b_control_tower ; 25 :
32220: LD_ADDR_OWVAR 42
32224: PUSH
32225: LD_INT 36
32227: ST_TO_ADDR
32228: GO 32421
32230: LD_INT 25
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// bc_type := b_breastwork ; 26 :
32239: LD_ADDR_OWVAR 42
32243: PUSH
32244: LD_INT 31
32246: ST_TO_ADDR
32247: GO 32421
32249: LD_INT 26
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// bc_type := b_bunker ; 27 :
32258: LD_ADDR_OWVAR 42
32262: PUSH
32263: LD_INT 32
32265: ST_TO_ADDR
32266: GO 32421
32268: LD_INT 27
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32287
32276: POP
// bc_type := b_turret ; 28 :
32277: LD_ADDR_OWVAR 42
32281: PUSH
32282: LD_INT 33
32284: ST_TO_ADDR
32285: GO 32421
32287: LD_INT 28
32289: DOUBLE
32290: EQUAL
32291: IFTRUE 32295
32293: GO 32306
32295: POP
// bc_type := b_armoury ; 29 :
32296: LD_ADDR_OWVAR 42
32300: PUSH
32301: LD_INT 4
32303: ST_TO_ADDR
32304: GO 32421
32306: LD_INT 29
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32314
32312: GO 32325
32314: POP
// bc_type := b_barracks ; 30 :
32315: LD_ADDR_OWVAR 42
32319: PUSH
32320: LD_INT 5
32322: ST_TO_ADDR
32323: GO 32421
32325: LD_INT 30
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32333
32331: GO 32344
32333: POP
// bc_type := b_solar_power ; 31 :
32334: LD_ADDR_OWVAR 42
32338: PUSH
32339: LD_INT 27
32341: ST_TO_ADDR
32342: GO 32421
32344: LD_INT 31
32346: DOUBLE
32347: EQUAL
32348: IFTRUE 32352
32350: GO 32363
32352: POP
// bc_type := b_oil_power ; 32 :
32353: LD_ADDR_OWVAR 42
32357: PUSH
32358: LD_INT 26
32360: ST_TO_ADDR
32361: GO 32421
32363: LD_INT 32
32365: DOUBLE
32366: EQUAL
32367: IFTRUE 32371
32369: GO 32382
32371: POP
// bc_type := b_siberite_power ; 33 :
32372: LD_ADDR_OWVAR 42
32376: PUSH
32377: LD_INT 28
32379: ST_TO_ADDR
32380: GO 32421
32382: LD_INT 33
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32401
32390: POP
// bc_type := b_oil_mine ; 34 :
32391: LD_ADDR_OWVAR 42
32395: PUSH
32396: LD_INT 29
32398: ST_TO_ADDR
32399: GO 32421
32401: LD_INT 34
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32409
32407: GO 32420
32409: POP
// bc_type := b_siberite_mine ; end ;
32410: LD_ADDR_OWVAR 42
32414: PUSH
32415: LD_INT 30
32417: ST_TO_ADDR
32418: GO 32421
32420: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32421: LD_ADDR_VAR 0 8
32425: PUSH
32426: LD_VAR 0 5
32430: PPUSH
32431: LD_VAR 0 6
32435: PPUSH
32436: LD_VAR 0 3
32440: PPUSH
32441: CALL_OW 47
32445: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32446: LD_OWVAR 42
32450: PUSH
32451: LD_INT 32
32453: PUSH
32454: LD_INT 33
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: IN
32461: IFFALSE 32477
// PlaceWeaponTurret ( b , weapon ) ;
32463: LD_VAR 0 8
32467: PPUSH
32468: LD_VAR 0 4
32472: PPUSH
32473: CALL_OW 431
// end ;
32477: LD_VAR 0 7
32481: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32482: LD_INT 0
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32488: LD_ADDR_VAR 0 4
32492: PUSH
32493: LD_INT 22
32495: PUSH
32496: LD_OWVAR 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 30
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 30
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PPUSH
32537: CALL_OW 69
32541: ST_TO_ADDR
// if not tmp then
32542: LD_VAR 0 4
32546: NOT
32547: IFFALSE 32551
// exit ;
32549: GO 32610
// for i in tmp do
32551: LD_ADDR_VAR 0 2
32555: PUSH
32556: LD_VAR 0 4
32560: PUSH
32561: FOR_IN
32562: IFFALSE 32608
// for j = 1 to 3 do
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: DOUBLE
32570: LD_INT 1
32572: DEC
32573: ST_TO_ADDR
32574: LD_INT 3
32576: PUSH
32577: FOR_TO
32578: IFFALSE 32604
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32580: LD_VAR 0 2
32584: PPUSH
32585: CALL_OW 274
32589: PPUSH
32590: LD_VAR 0 3
32594: PPUSH
32595: LD_INT 99999
32597: PPUSH
32598: CALL_OW 277
32602: GO 32577
32604: POP
32605: POP
32606: GO 32561
32608: POP
32609: POP
// end ;
32610: LD_VAR 0 1
32614: RET
// export function hHackSetLevel10 ; var i , j ; begin
32615: LD_INT 0
32617: PPUSH
32618: PPUSH
32619: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32620: LD_ADDR_VAR 0 2
32624: PUSH
32625: LD_INT 21
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PPUSH
32635: CALL_OW 69
32639: PUSH
32640: FOR_IN
32641: IFFALSE 32693
// if IsSelected ( i ) then
32643: LD_VAR 0 2
32647: PPUSH
32648: CALL_OW 306
32652: IFFALSE 32691
// begin for j := 1 to 4 do
32654: LD_ADDR_VAR 0 3
32658: PUSH
32659: DOUBLE
32660: LD_INT 1
32662: DEC
32663: ST_TO_ADDR
32664: LD_INT 4
32666: PUSH
32667: FOR_TO
32668: IFFALSE 32689
// SetSkill ( i , j , 10 ) ;
32670: LD_VAR 0 2
32674: PPUSH
32675: LD_VAR 0 3
32679: PPUSH
32680: LD_INT 10
32682: PPUSH
32683: CALL_OW 237
32687: GO 32667
32689: POP
32690: POP
// end ;
32691: GO 32640
32693: POP
32694: POP
// end ;
32695: LD_VAR 0 1
32699: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
32704: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32705: LD_ADDR_VAR 0 2
32709: PUSH
32710: LD_INT 22
32712: PUSH
32713: LD_OWVAR 2
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 21
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PPUSH
32736: CALL_OW 69
32740: PUSH
32741: FOR_IN
32742: IFFALSE 32783
// begin for j := 1 to 4 do
32744: LD_ADDR_VAR 0 3
32748: PUSH
32749: DOUBLE
32750: LD_INT 1
32752: DEC
32753: ST_TO_ADDR
32754: LD_INT 4
32756: PUSH
32757: FOR_TO
32758: IFFALSE 32779
// SetSkill ( i , j , 10 ) ;
32760: LD_VAR 0 2
32764: PPUSH
32765: LD_VAR 0 3
32769: PPUSH
32770: LD_INT 10
32772: PPUSH
32773: CALL_OW 237
32777: GO 32757
32779: POP
32780: POP
// end ;
32781: GO 32741
32783: POP
32784: POP
// end ;
32785: LD_VAR 0 1
32789: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32790: LD_INT 0
32792: PPUSH
// uc_side := your_side ;
32793: LD_ADDR_OWVAR 20
32797: PUSH
32798: LD_OWVAR 2
32802: ST_TO_ADDR
// uc_nation := nation ;
32803: LD_ADDR_OWVAR 21
32807: PUSH
32808: LD_VAR 0 1
32812: ST_TO_ADDR
// InitHc ;
32813: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32817: LD_INT 0
32819: PPUSH
32820: LD_VAR 0 2
32824: PPUSH
32825: LD_VAR 0 3
32829: PPUSH
32830: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32834: LD_VAR 0 4
32838: PPUSH
32839: LD_VAR 0 5
32843: PPUSH
32844: CALL_OW 428
32848: PUSH
32849: LD_INT 0
32851: EQUAL
32852: IFFALSE 32876
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32854: CALL_OW 44
32858: PPUSH
32859: LD_VAR 0 4
32863: PPUSH
32864: LD_VAR 0 5
32868: PPUSH
32869: LD_INT 1
32871: PPUSH
32872: CALL_OW 48
// end ;
32876: LD_VAR 0 6
32880: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32881: LD_INT 0
32883: PPUSH
32884: PPUSH
// uc_side := your_side ;
32885: LD_ADDR_OWVAR 20
32889: PUSH
32890: LD_OWVAR 2
32894: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32895: LD_VAR 0 1
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: LD_INT 3
32908: PUSH
32909: LD_INT 4
32911: PUSH
32912: LD_INT 5
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: IN
32922: IFFALSE 32934
// uc_nation := nation_american else
32924: LD_ADDR_OWVAR 21
32928: PUSH
32929: LD_INT 1
32931: ST_TO_ADDR
32932: GO 32977
// if chassis in [ 11 , 12 , 13 , 14 ] then
32934: LD_VAR 0 1
32938: PUSH
32939: LD_INT 11
32941: PUSH
32942: LD_INT 12
32944: PUSH
32945: LD_INT 13
32947: PUSH
32948: LD_INT 14
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: IN
32957: IFFALSE 32969
// uc_nation := nation_arabian else
32959: LD_ADDR_OWVAR 21
32963: PUSH
32964: LD_INT 2
32966: ST_TO_ADDR
32967: GO 32977
// uc_nation := nation_russian ;
32969: LD_ADDR_OWVAR 21
32973: PUSH
32974: LD_INT 3
32976: ST_TO_ADDR
// vc_chassis := chassis ;
32977: LD_ADDR_OWVAR 37
32981: PUSH
32982: LD_VAR 0 1
32986: ST_TO_ADDR
// vc_engine := engine ;
32987: LD_ADDR_OWVAR 39
32991: PUSH
32992: LD_VAR 0 2
32996: ST_TO_ADDR
// vc_control := control ;
32997: LD_ADDR_OWVAR 38
33001: PUSH
33002: LD_VAR 0 3
33006: ST_TO_ADDR
// vc_weapon := weapon ;
33007: LD_ADDR_OWVAR 40
33011: PUSH
33012: LD_VAR 0 4
33016: ST_TO_ADDR
// un := CreateVehicle ;
33017: LD_ADDR_VAR 0 8
33021: PUSH
33022: CALL_OW 45
33026: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33027: LD_VAR 0 8
33031: PPUSH
33032: LD_INT 0
33034: PPUSH
33035: LD_INT 5
33037: PPUSH
33038: CALL_OW 12
33042: PPUSH
33043: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33047: LD_VAR 0 8
33051: PPUSH
33052: LD_VAR 0 5
33056: PPUSH
33057: LD_VAR 0 6
33061: PPUSH
33062: LD_INT 1
33064: PPUSH
33065: CALL_OW 48
// end ;
33069: LD_VAR 0 7
33073: RET
// export hInvincible ; every 1 do
33074: GO 33076
33076: DISABLE
// hInvincible := [ ] ;
33077: LD_ADDR_EXP 103
33081: PUSH
33082: EMPTY
33083: ST_TO_ADDR
33084: END
// every 10 do var i ;
33085: GO 33087
33087: DISABLE
33088: LD_INT 0
33090: PPUSH
// begin enable ;
33091: ENABLE
// if not hInvincible then
33092: LD_EXP 103
33096: NOT
33097: IFFALSE 33101
// exit ;
33099: GO 33145
// for i in hInvincible do
33101: LD_ADDR_VAR 0 1
33105: PUSH
33106: LD_EXP 103
33110: PUSH
33111: FOR_IN
33112: IFFALSE 33143
// if GetLives ( i ) < 1000 then
33114: LD_VAR 0 1
33118: PPUSH
33119: CALL_OW 256
33123: PUSH
33124: LD_INT 1000
33126: LESS
33127: IFFALSE 33141
// SetLives ( i , 1000 ) ;
33129: LD_VAR 0 1
33133: PPUSH
33134: LD_INT 1000
33136: PPUSH
33137: CALL_OW 234
33141: GO 33111
33143: POP
33144: POP
// end ;
33145: PPOPN 1
33147: END
// export function hHackInvincible ; var i ; begin
33148: LD_INT 0
33150: PPUSH
33151: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33152: LD_ADDR_VAR 0 2
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 21
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 21
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: LIST
33184: PPUSH
33185: CALL_OW 69
33189: PUSH
33190: FOR_IN
33191: IFFALSE 33252
// if IsSelected ( i ) then
33193: LD_VAR 0 2
33197: PPUSH
33198: CALL_OW 306
33202: IFFALSE 33250
// begin if i in hInvincible then
33204: LD_VAR 0 2
33208: PUSH
33209: LD_EXP 103
33213: IN
33214: IFFALSE 33234
// hInvincible := hInvincible diff i else
33216: LD_ADDR_EXP 103
33220: PUSH
33221: LD_EXP 103
33225: PUSH
33226: LD_VAR 0 2
33230: DIFF
33231: ST_TO_ADDR
33232: GO 33250
// hInvincible := hInvincible union i ;
33234: LD_ADDR_EXP 103
33238: PUSH
33239: LD_EXP 103
33243: PUSH
33244: LD_VAR 0 2
33248: UNION
33249: ST_TO_ADDR
// end ;
33250: GO 33190
33252: POP
33253: POP
// end ;
33254: LD_VAR 0 1
33258: RET
// export function hHackInvisible ; var i , j ; begin
33259: LD_INT 0
33261: PPUSH
33262: PPUSH
33263: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33264: LD_ADDR_VAR 0 2
33268: PUSH
33269: LD_INT 21
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PPUSH
33279: CALL_OW 69
33283: PUSH
33284: FOR_IN
33285: IFFALSE 33309
// if IsSelected ( i ) then
33287: LD_VAR 0 2
33291: PPUSH
33292: CALL_OW 306
33296: IFFALSE 33307
// ComForceInvisible ( i ) ;
33298: LD_VAR 0 2
33302: PPUSH
33303: CALL_OW 496
33307: GO 33284
33309: POP
33310: POP
// end ;
33311: LD_VAR 0 1
33315: RET
// export function hHackChangeYourSide ; begin
33316: LD_INT 0
33318: PPUSH
// if your_side = 8 then
33319: LD_OWVAR 2
33323: PUSH
33324: LD_INT 8
33326: EQUAL
33327: IFFALSE 33339
// your_side := 0 else
33329: LD_ADDR_OWVAR 2
33333: PUSH
33334: LD_INT 0
33336: ST_TO_ADDR
33337: GO 33353
// your_side := your_side + 1 ;
33339: LD_ADDR_OWVAR 2
33343: PUSH
33344: LD_OWVAR 2
33348: PUSH
33349: LD_INT 1
33351: PLUS
33352: ST_TO_ADDR
// end ;
33353: LD_VAR 0 1
33357: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33358: LD_INT 0
33360: PPUSH
33361: PPUSH
33362: PPUSH
// for i in all_units do
33363: LD_ADDR_VAR 0 2
33367: PUSH
33368: LD_OWVAR 3
33372: PUSH
33373: FOR_IN
33374: IFFALSE 33452
// if IsSelected ( i ) then
33376: LD_VAR 0 2
33380: PPUSH
33381: CALL_OW 306
33385: IFFALSE 33450
// begin j := GetSide ( i ) ;
33387: LD_ADDR_VAR 0 3
33391: PUSH
33392: LD_VAR 0 2
33396: PPUSH
33397: CALL_OW 255
33401: ST_TO_ADDR
// if j = 8 then
33402: LD_VAR 0 3
33406: PUSH
33407: LD_INT 8
33409: EQUAL
33410: IFFALSE 33422
// j := 0 else
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_INT 0
33419: ST_TO_ADDR
33420: GO 33436
// j := j + 1 ;
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: LD_VAR 0 3
33431: PUSH
33432: LD_INT 1
33434: PLUS
33435: ST_TO_ADDR
// SetSide ( i , j ) ;
33436: LD_VAR 0 2
33440: PPUSH
33441: LD_VAR 0 3
33445: PPUSH
33446: CALL_OW 235
// end ;
33450: GO 33373
33452: POP
33453: POP
// end ;
33454: LD_VAR 0 1
33458: RET
// export function hHackFog ; begin
33459: LD_INT 0
33461: PPUSH
// FogOff ( true ) ;
33462: LD_INT 1
33464: PPUSH
33465: CALL_OW 344
// end ;
33469: LD_VAR 0 1
33473: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33474: LD_INT 0
33476: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33477: LD_VAR 0 1
33481: PPUSH
33482: LD_VAR 0 2
33486: PPUSH
33487: LD_VAR 0 3
33491: PPUSH
33492: LD_INT 1
33494: PPUSH
33495: LD_INT 1
33497: PPUSH
33498: CALL_OW 483
// CenterOnXY ( x , y ) ;
33502: LD_VAR 0 2
33506: PPUSH
33507: LD_VAR 0 3
33511: PPUSH
33512: CALL_OW 84
// end ;
33516: LD_VAR 0 4
33520: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33521: LD_INT 0
33523: PPUSH
33524: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33525: LD_VAR 0 1
33529: NOT
33530: PUSH
33531: LD_VAR 0 2
33535: PPUSH
33536: LD_VAR 0 3
33540: PPUSH
33541: CALL_OW 488
33545: NOT
33546: OR
33547: PUSH
33548: LD_VAR 0 1
33552: PPUSH
33553: CALL_OW 266
33557: PUSH
33558: LD_INT 3
33560: NONEQUAL
33561: PUSH
33562: LD_VAR 0 1
33566: PPUSH
33567: CALL_OW 247
33571: PUSH
33572: LD_INT 1
33574: EQUAL
33575: NOT
33576: AND
33577: OR
33578: IFFALSE 33582
// exit ;
33580: GO 33731
// if GetType ( factory ) = unit_human then
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 247
33591: PUSH
33592: LD_INT 1
33594: EQUAL
33595: IFFALSE 33612
// factory := IsInUnit ( factory ) ;
33597: LD_ADDR_VAR 0 1
33601: PUSH
33602: LD_VAR 0 1
33606: PPUSH
33607: CALL_OW 310
33611: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33612: LD_VAR 0 1
33616: PPUSH
33617: CALL_OW 266
33621: PUSH
33622: LD_INT 3
33624: NONEQUAL
33625: IFFALSE 33629
// exit ;
33627: GO 33731
// if HexInfo ( x , y ) = factory then
33629: LD_VAR 0 2
33633: PPUSH
33634: LD_VAR 0 3
33638: PPUSH
33639: CALL_OW 428
33643: PUSH
33644: LD_VAR 0 1
33648: EQUAL
33649: IFFALSE 33676
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33651: LD_ADDR_EXP 104
33655: PUSH
33656: LD_EXP 104
33660: PPUSH
33661: LD_VAR 0 1
33665: PPUSH
33666: LD_INT 0
33668: PPUSH
33669: CALL_OW 1
33673: ST_TO_ADDR
33674: GO 33727
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33676: LD_ADDR_EXP 104
33680: PUSH
33681: LD_EXP 104
33685: PPUSH
33686: LD_VAR 0 1
33690: PPUSH
33691: LD_VAR 0 1
33695: PPUSH
33696: CALL_OW 255
33700: PUSH
33701: LD_VAR 0 1
33705: PUSH
33706: LD_VAR 0 2
33710: PUSH
33711: LD_VAR 0 3
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: PPUSH
33722: CALL_OW 1
33726: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33727: CALL 33736 0 0
// end ;
33731: LD_VAR 0 4
33735: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33736: LD_INT 0
33738: PPUSH
33739: PPUSH
33740: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33741: LD_STRING resetFactoryWaypoint();
33743: PPUSH
33744: CALL_OW 559
// if factoryWaypoints then
33748: LD_EXP 104
33752: IFFALSE 33878
// begin list := PrepareArray ( factoryWaypoints ) ;
33754: LD_ADDR_VAR 0 3
33758: PUSH
33759: LD_EXP 104
33763: PPUSH
33764: CALL 80171 0 1
33768: ST_TO_ADDR
// for i := 1 to list do
33769: LD_ADDR_VAR 0 2
33773: PUSH
33774: DOUBLE
33775: LD_INT 1
33777: DEC
33778: ST_TO_ADDR
33779: LD_VAR 0 3
33783: PUSH
33784: FOR_TO
33785: IFFALSE 33876
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33787: LD_STRING setFactoryWaypointXY(
33789: PUSH
33790: LD_VAR 0 3
33794: PUSH
33795: LD_VAR 0 2
33799: ARRAY
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: STR
33805: PUSH
33806: LD_STRING ,
33808: STR
33809: PUSH
33810: LD_VAR 0 3
33814: PUSH
33815: LD_VAR 0 2
33819: ARRAY
33820: PUSH
33821: LD_INT 2
33823: ARRAY
33824: STR
33825: PUSH
33826: LD_STRING ,
33828: STR
33829: PUSH
33830: LD_VAR 0 3
33834: PUSH
33835: LD_VAR 0 2
33839: ARRAY
33840: PUSH
33841: LD_INT 3
33843: ARRAY
33844: STR
33845: PUSH
33846: LD_STRING ,
33848: STR
33849: PUSH
33850: LD_VAR 0 3
33854: PUSH
33855: LD_VAR 0 2
33859: ARRAY
33860: PUSH
33861: LD_INT 4
33863: ARRAY
33864: STR
33865: PUSH
33866: LD_STRING )
33868: STR
33869: PPUSH
33870: CALL_OW 559
33874: GO 33784
33876: POP
33877: POP
// end ; end ;
33878: LD_VAR 0 1
33882: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33883: LD_INT 0
33885: PPUSH
// if HexInfo ( x , y ) = warehouse then
33886: LD_VAR 0 2
33890: PPUSH
33891: LD_VAR 0 3
33895: PPUSH
33896: CALL_OW 428
33900: PUSH
33901: LD_VAR 0 1
33905: EQUAL
33906: IFFALSE 33933
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33908: LD_ADDR_EXP 105
33912: PUSH
33913: LD_EXP 105
33917: PPUSH
33918: LD_VAR 0 1
33922: PPUSH
33923: LD_INT 0
33925: PPUSH
33926: CALL_OW 1
33930: ST_TO_ADDR
33931: GO 33984
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33933: LD_ADDR_EXP 105
33937: PUSH
33938: LD_EXP 105
33942: PPUSH
33943: LD_VAR 0 1
33947: PPUSH
33948: LD_VAR 0 1
33952: PPUSH
33953: CALL_OW 255
33957: PUSH
33958: LD_VAR 0 1
33962: PUSH
33963: LD_VAR 0 2
33967: PUSH
33968: LD_VAR 0 3
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: PPUSH
33979: CALL_OW 1
33983: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33984: CALL 33993 0 0
// end ;
33988: LD_VAR 0 4
33992: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33993: LD_INT 0
33995: PPUSH
33996: PPUSH
33997: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33998: LD_STRING resetWarehouseGatheringPoints();
34000: PPUSH
34001: CALL_OW 559
// if warehouseGatheringPoints then
34005: LD_EXP 105
34009: IFFALSE 34135
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34011: LD_ADDR_VAR 0 3
34015: PUSH
34016: LD_EXP 105
34020: PPUSH
34021: CALL 80171 0 1
34025: ST_TO_ADDR
// for i := 1 to list do
34026: LD_ADDR_VAR 0 2
34030: PUSH
34031: DOUBLE
34032: LD_INT 1
34034: DEC
34035: ST_TO_ADDR
34036: LD_VAR 0 3
34040: PUSH
34041: FOR_TO
34042: IFFALSE 34133
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34044: LD_STRING setWarehouseGatheringPointXY(
34046: PUSH
34047: LD_VAR 0 3
34051: PUSH
34052: LD_VAR 0 2
34056: ARRAY
34057: PUSH
34058: LD_INT 1
34060: ARRAY
34061: STR
34062: PUSH
34063: LD_STRING ,
34065: STR
34066: PUSH
34067: LD_VAR 0 3
34071: PUSH
34072: LD_VAR 0 2
34076: ARRAY
34077: PUSH
34078: LD_INT 2
34080: ARRAY
34081: STR
34082: PUSH
34083: LD_STRING ,
34085: STR
34086: PUSH
34087: LD_VAR 0 3
34091: PUSH
34092: LD_VAR 0 2
34096: ARRAY
34097: PUSH
34098: LD_INT 3
34100: ARRAY
34101: STR
34102: PUSH
34103: LD_STRING ,
34105: STR
34106: PUSH
34107: LD_VAR 0 3
34111: PUSH
34112: LD_VAR 0 2
34116: ARRAY
34117: PUSH
34118: LD_INT 4
34120: ARRAY
34121: STR
34122: PUSH
34123: LD_STRING )
34125: STR
34126: PPUSH
34127: CALL_OW 559
34131: GO 34041
34133: POP
34134: POP
// end ; end ;
34135: LD_VAR 0 1
34139: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34140: LD_EXP 105
34144: IFFALSE 34829
34146: GO 34148
34148: DISABLE
34149: LD_INT 0
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
34159: PPUSH
// begin enable ;
34160: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_EXP 105
34170: PPUSH
34171: CALL 80171 0 1
34175: ST_TO_ADDR
// if not list then
34176: LD_VAR 0 3
34180: NOT
34181: IFFALSE 34185
// exit ;
34183: GO 34829
// for i := 1 to list do
34185: LD_ADDR_VAR 0 1
34189: PUSH
34190: DOUBLE
34191: LD_INT 1
34193: DEC
34194: ST_TO_ADDR
34195: LD_VAR 0 3
34199: PUSH
34200: FOR_TO
34201: IFFALSE 34827
// begin depot := list [ i ] [ 2 ] ;
34203: LD_ADDR_VAR 0 8
34207: PUSH
34208: LD_VAR 0 3
34212: PUSH
34213: LD_VAR 0 1
34217: ARRAY
34218: PUSH
34219: LD_INT 2
34221: ARRAY
34222: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34223: LD_ADDR_VAR 0 5
34227: PUSH
34228: LD_VAR 0 3
34232: PUSH
34233: LD_VAR 0 1
34237: ARRAY
34238: PUSH
34239: LD_INT 1
34241: ARRAY
34242: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34243: LD_VAR 0 8
34247: PPUSH
34248: CALL_OW 301
34252: PUSH
34253: LD_VAR 0 5
34257: PUSH
34258: LD_VAR 0 8
34262: PPUSH
34263: CALL_OW 255
34267: NONEQUAL
34268: OR
34269: IFFALSE 34298
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34271: LD_ADDR_EXP 105
34275: PUSH
34276: LD_EXP 105
34280: PPUSH
34281: LD_VAR 0 8
34285: PPUSH
34286: LD_INT 0
34288: PPUSH
34289: CALL_OW 1
34293: ST_TO_ADDR
// exit ;
34294: POP
34295: POP
34296: GO 34829
// end ; x := list [ i ] [ 3 ] ;
34298: LD_ADDR_VAR 0 6
34302: PUSH
34303: LD_VAR 0 3
34307: PUSH
34308: LD_VAR 0 1
34312: ARRAY
34313: PUSH
34314: LD_INT 3
34316: ARRAY
34317: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34318: LD_ADDR_VAR 0 7
34322: PUSH
34323: LD_VAR 0 3
34327: PUSH
34328: LD_VAR 0 1
34332: ARRAY
34333: PUSH
34334: LD_INT 4
34336: ARRAY
34337: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34338: LD_ADDR_VAR 0 9
34342: PUSH
34343: LD_VAR 0 6
34347: PPUSH
34348: LD_VAR 0 7
34352: PPUSH
34353: LD_INT 16
34355: PPUSH
34356: CALL 78759 0 3
34360: ST_TO_ADDR
// if not cratesNearbyPoint then
34361: LD_VAR 0 9
34365: NOT
34366: IFFALSE 34372
// exit ;
34368: POP
34369: POP
34370: GO 34829
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34372: LD_ADDR_VAR 0 4
34376: PUSH
34377: LD_INT 22
34379: PUSH
34380: LD_VAR 0 5
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: LD_INT 60
34394: PUSH
34395: EMPTY
34396: LIST
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 91
34404: PUSH
34405: LD_VAR 0 8
34409: PUSH
34410: LD_INT 6
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: LD_INT 25
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 25
34433: PUSH
34434: LD_INT 16
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: PPUSH
34452: CALL_OW 69
34456: PUSH
34457: LD_VAR 0 8
34461: PPUSH
34462: CALL_OW 313
34466: PPUSH
34467: LD_INT 3
34469: PUSH
34470: LD_INT 60
34472: PUSH
34473: EMPTY
34474: LIST
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 25
34485: PUSH
34486: LD_INT 2
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 25
34495: PUSH
34496: LD_INT 16
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PPUSH
34512: CALL_OW 72
34516: UNION
34517: ST_TO_ADDR
// if tmp then
34518: LD_VAR 0 4
34522: IFFALSE 34602
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34524: LD_ADDR_VAR 0 4
34528: PUSH
34529: LD_VAR 0 4
34533: PPUSH
34534: LD_INT 3
34536: PPUSH
34537: CALL 76728 0 2
34541: ST_TO_ADDR
// for j in tmp do
34542: LD_ADDR_VAR 0 2
34546: PUSH
34547: LD_VAR 0 4
34551: PUSH
34552: FOR_IN
34553: IFFALSE 34596
// begin if IsInUnit ( j ) then
34555: LD_VAR 0 2
34559: PPUSH
34560: CALL_OW 310
34564: IFFALSE 34575
// ComExit ( j ) ;
34566: LD_VAR 0 2
34570: PPUSH
34571: CALL 76811 0 1
// AddComCollect ( j , x , y ) ;
34575: LD_VAR 0 2
34579: PPUSH
34580: LD_VAR 0 6
34584: PPUSH
34585: LD_VAR 0 7
34589: PPUSH
34590: CALL_OW 177
// end ;
34594: GO 34552
34596: POP
34597: POP
// exit ;
34598: POP
34599: POP
34600: GO 34829
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34602: LD_ADDR_VAR 0 4
34606: PUSH
34607: LD_INT 22
34609: PUSH
34610: LD_VAR 0 5
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 91
34621: PUSH
34622: LD_VAR 0 8
34626: PUSH
34627: LD_INT 8
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 2
34637: PUSH
34638: LD_INT 34
34640: PUSH
34641: LD_INT 12
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 34
34650: PUSH
34651: LD_INT 51
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 34
34660: PUSH
34661: LD_INT 32
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 34
34670: PUSH
34671: LD_INT 89
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: PPUSH
34690: CALL_OW 69
34694: ST_TO_ADDR
// if tmp then
34695: LD_VAR 0 4
34699: IFFALSE 34825
// begin for j in tmp do
34701: LD_ADDR_VAR 0 2
34705: PUSH
34706: LD_VAR 0 4
34710: PUSH
34711: FOR_IN
34712: IFFALSE 34823
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34714: LD_VAR 0 2
34718: PPUSH
34719: CALL_OW 262
34723: PUSH
34724: LD_INT 3
34726: EQUAL
34727: PUSH
34728: LD_VAR 0 2
34732: PPUSH
34733: CALL_OW 261
34737: PUSH
34738: LD_INT 20
34740: GREATER
34741: OR
34742: PUSH
34743: LD_VAR 0 2
34747: PPUSH
34748: CALL_OW 314
34752: NOT
34753: AND
34754: PUSH
34755: LD_VAR 0 2
34759: PPUSH
34760: CALL_OW 263
34764: PUSH
34765: LD_INT 1
34767: NONEQUAL
34768: PUSH
34769: LD_VAR 0 2
34773: PPUSH
34774: CALL_OW 311
34778: OR
34779: AND
34780: IFFALSE 34821
// begin ComCollect ( j , x , y ) ;
34782: LD_VAR 0 2
34786: PPUSH
34787: LD_VAR 0 6
34791: PPUSH
34792: LD_VAR 0 7
34796: PPUSH
34797: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34801: LD_VAR 0 2
34805: PPUSH
34806: LD_VAR 0 8
34810: PPUSH
34811: CALL_OW 172
// exit ;
34815: POP
34816: POP
34817: POP
34818: POP
34819: GO 34829
// end ;
34821: GO 34711
34823: POP
34824: POP
// end ; end ;
34825: GO 34200
34827: POP
34828: POP
// end ; end_of_file
34829: PPOPN 9
34831: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34832: LD_INT 0
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34838: LD_VAR 0 1
34842: PPUSH
34843: CALL_OW 264
34847: PUSH
34848: LD_INT 91
34850: EQUAL
34851: IFFALSE 34923
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34853: LD_INT 68
34855: PPUSH
34856: LD_VAR 0 1
34860: PPUSH
34861: CALL_OW 255
34865: PPUSH
34866: CALL_OW 321
34870: PUSH
34871: LD_INT 2
34873: EQUAL
34874: IFFALSE 34886
// eff := 70 else
34876: LD_ADDR_VAR 0 4
34880: PUSH
34881: LD_INT 70
34883: ST_TO_ADDR
34884: GO 34894
// eff := 30 ;
34886: LD_ADDR_VAR 0 4
34890: PUSH
34891: LD_INT 30
34893: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34894: LD_VAR 0 1
34898: PPUSH
34899: CALL_OW 250
34903: PPUSH
34904: LD_VAR 0 1
34908: PPUSH
34909: CALL_OW 251
34913: PPUSH
34914: LD_VAR 0 4
34918: PPUSH
34919: CALL_OW 495
// end ; end ;
34923: LD_VAR 0 2
34927: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34928: LD_INT 0
34930: PPUSH
// end ;
34931: LD_VAR 0 4
34935: RET
// export function SOS_Command ( cmd ) ; begin
34936: LD_INT 0
34938: PPUSH
// end ;
34939: LD_VAR 0 2
34943: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34944: LD_INT 0
34946: PPUSH
// end ;
34947: LD_VAR 0 6
34951: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34952: LD_INT 0
34954: PPUSH
34955: PPUSH
// if not vehicle or not factory then
34956: LD_VAR 0 1
34960: NOT
34961: PUSH
34962: LD_VAR 0 2
34966: NOT
34967: OR
34968: IFFALSE 34972
// exit ;
34970: GO 35203
// if factoryWaypoints >= factory then
34972: LD_EXP 104
34976: PUSH
34977: LD_VAR 0 2
34981: GREATEREQUAL
34982: IFFALSE 35203
// if factoryWaypoints [ factory ] then
34984: LD_EXP 104
34988: PUSH
34989: LD_VAR 0 2
34993: ARRAY
34994: IFFALSE 35203
// begin if GetControl ( vehicle ) = control_manual then
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 263
35005: PUSH
35006: LD_INT 1
35008: EQUAL
35009: IFFALSE 35090
// begin driver := IsDrivenBy ( vehicle ) ;
35011: LD_ADDR_VAR 0 4
35015: PUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: CALL_OW 311
35025: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35026: LD_VAR 0 4
35030: PPUSH
35031: LD_EXP 104
35035: PUSH
35036: LD_VAR 0 2
35040: ARRAY
35041: PUSH
35042: LD_INT 3
35044: ARRAY
35045: PPUSH
35046: LD_EXP 104
35050: PUSH
35051: LD_VAR 0 2
35055: ARRAY
35056: PUSH
35057: LD_INT 4
35059: ARRAY
35060: PPUSH
35061: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35065: LD_VAR 0 4
35069: PPUSH
35070: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35074: LD_VAR 0 4
35078: PPUSH
35079: LD_VAR 0 2
35083: PPUSH
35084: CALL_OW 180
// end else
35088: GO 35203
// if GetControl ( vehicle ) = control_remote then
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 263
35099: PUSH
35100: LD_INT 2
35102: EQUAL
35103: IFFALSE 35164
// begin wait ( 0 0$2 ) ;
35105: LD_INT 70
35107: PPUSH
35108: CALL_OW 67
// if Connect ( vehicle ) then
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL 47052 0 1
35121: IFFALSE 35162
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35123: LD_VAR 0 1
35127: PPUSH
35128: LD_EXP 104
35132: PUSH
35133: LD_VAR 0 2
35137: ARRAY
35138: PUSH
35139: LD_INT 3
35141: ARRAY
35142: PPUSH
35143: LD_EXP 104
35147: PUSH
35148: LD_VAR 0 2
35152: ARRAY
35153: PUSH
35154: LD_INT 4
35156: ARRAY
35157: PPUSH
35158: CALL_OW 171
// end else
35162: GO 35203
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35164: LD_VAR 0 1
35168: PPUSH
35169: LD_EXP 104
35173: PUSH
35174: LD_VAR 0 2
35178: ARRAY
35179: PUSH
35180: LD_INT 3
35182: ARRAY
35183: PPUSH
35184: LD_EXP 104
35188: PUSH
35189: LD_VAR 0 2
35193: ARRAY
35194: PUSH
35195: LD_INT 4
35197: ARRAY
35198: PPUSH
35199: CALL_OW 171
// end ; end ;
35203: LD_VAR 0 3
35207: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35208: LD_INT 0
35210: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35211: LD_VAR 0 1
35215: PUSH
35216: LD_INT 250
35218: EQUAL
35219: PUSH
35220: LD_VAR 0 2
35224: PPUSH
35225: CALL_OW 264
35229: PUSH
35230: LD_INT 81
35232: EQUAL
35233: AND
35234: IFFALSE 35255
// MinerPlaceMine ( unit , x , y ) ;
35236: LD_VAR 0 2
35240: PPUSH
35241: LD_VAR 0 4
35245: PPUSH
35246: LD_VAR 0 5
35250: PPUSH
35251: CALL 37640 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35255: LD_VAR 0 1
35259: PUSH
35260: LD_INT 251
35262: EQUAL
35263: PUSH
35264: LD_VAR 0 2
35268: PPUSH
35269: CALL_OW 264
35273: PUSH
35274: LD_INT 81
35276: EQUAL
35277: AND
35278: IFFALSE 35299
// MinerDetonateMine ( unit , x , y ) ;
35280: LD_VAR 0 2
35284: PPUSH
35285: LD_VAR 0 4
35289: PPUSH
35290: LD_VAR 0 5
35294: PPUSH
35295: CALL 37915 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35299: LD_VAR 0 1
35303: PUSH
35304: LD_INT 252
35306: EQUAL
35307: PUSH
35308: LD_VAR 0 2
35312: PPUSH
35313: CALL_OW 264
35317: PUSH
35318: LD_INT 81
35320: EQUAL
35321: AND
35322: IFFALSE 35343
// MinerCreateMinefield ( unit , x , y ) ;
35324: LD_VAR 0 2
35328: PPUSH
35329: LD_VAR 0 4
35333: PPUSH
35334: LD_VAR 0 5
35338: PPUSH
35339: CALL 38332 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35343: LD_VAR 0 1
35347: PUSH
35348: LD_INT 253
35350: EQUAL
35351: PUSH
35352: LD_VAR 0 2
35356: PPUSH
35357: CALL_OW 257
35361: PUSH
35362: LD_INT 5
35364: EQUAL
35365: AND
35366: IFFALSE 35387
// ComBinocular ( unit , x , y ) ;
35368: LD_VAR 0 2
35372: PPUSH
35373: LD_VAR 0 4
35377: PPUSH
35378: LD_VAR 0 5
35382: PPUSH
35383: CALL 38701 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35387: LD_VAR 0 1
35391: PUSH
35392: LD_INT 254
35394: EQUAL
35395: PUSH
35396: LD_VAR 0 2
35400: PPUSH
35401: CALL_OW 264
35405: PUSH
35406: LD_INT 99
35408: EQUAL
35409: AND
35410: PUSH
35411: LD_VAR 0 3
35415: PPUSH
35416: CALL_OW 263
35420: PUSH
35421: LD_INT 3
35423: EQUAL
35424: AND
35425: IFFALSE 35441
// HackDestroyVehicle ( unit , selectedUnit ) ;
35427: LD_VAR 0 2
35431: PPUSH
35432: LD_VAR 0 3
35436: PPUSH
35437: CALL 37004 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35441: LD_VAR 0 1
35445: PUSH
35446: LD_INT 255
35448: EQUAL
35449: PUSH
35450: LD_VAR 0 2
35454: PPUSH
35455: CALL_OW 264
35459: PUSH
35460: LD_INT 14
35462: PUSH
35463: LD_INT 53
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: IN
35470: AND
35471: PUSH
35472: LD_VAR 0 4
35476: PPUSH
35477: LD_VAR 0 5
35481: PPUSH
35482: CALL_OW 488
35486: AND
35487: IFFALSE 35511
// CutTreeXYR ( unit , x , y , 12 ) ;
35489: LD_VAR 0 2
35493: PPUSH
35494: LD_VAR 0 4
35498: PPUSH
35499: LD_VAR 0 5
35503: PPUSH
35504: LD_INT 12
35506: PPUSH
35507: CALL 35574 0 4
// if cmd = 256 then
35511: LD_VAR 0 1
35515: PUSH
35516: LD_INT 256
35518: EQUAL
35519: IFFALSE 35540
// SetFactoryWaypoint ( unit , x , y ) ;
35521: LD_VAR 0 2
35525: PPUSH
35526: LD_VAR 0 4
35530: PPUSH
35531: LD_VAR 0 5
35535: PPUSH
35536: CALL 33521 0 3
// if cmd = 257 then
35540: LD_VAR 0 1
35544: PUSH
35545: LD_INT 257
35547: EQUAL
35548: IFFALSE 35569
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35550: LD_VAR 0 2
35554: PPUSH
35555: LD_VAR 0 4
35559: PPUSH
35560: LD_VAR 0 5
35564: PPUSH
35565: CALL 33883 0 3
// end ;
35569: LD_VAR 0 6
35573: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35574: LD_INT 0
35576: PPUSH
35577: PPUSH
35578: PPUSH
35579: PPUSH
35580: PPUSH
35581: PPUSH
35582: PPUSH
35583: PPUSH
35584: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35585: LD_VAR 0 1
35589: NOT
35590: PUSH
35591: LD_VAR 0 2
35595: PPUSH
35596: LD_VAR 0 3
35600: PPUSH
35601: CALL_OW 488
35605: NOT
35606: OR
35607: PUSH
35608: LD_VAR 0 4
35612: NOT
35613: OR
35614: IFFALSE 35618
// exit ;
35616: GO 35958
// list := [ ] ;
35618: LD_ADDR_VAR 0 13
35622: PUSH
35623: EMPTY
35624: ST_TO_ADDR
// if x - r < 0 then
35625: LD_VAR 0 2
35629: PUSH
35630: LD_VAR 0 4
35634: MINUS
35635: PUSH
35636: LD_INT 0
35638: LESS
35639: IFFALSE 35651
// min_x := 0 else
35641: LD_ADDR_VAR 0 7
35645: PUSH
35646: LD_INT 0
35648: ST_TO_ADDR
35649: GO 35667
// min_x := x - r ;
35651: LD_ADDR_VAR 0 7
35655: PUSH
35656: LD_VAR 0 2
35660: PUSH
35661: LD_VAR 0 4
35665: MINUS
35666: ST_TO_ADDR
// if y - r < 0 then
35667: LD_VAR 0 3
35671: PUSH
35672: LD_VAR 0 4
35676: MINUS
35677: PUSH
35678: LD_INT 0
35680: LESS
35681: IFFALSE 35693
// min_y := 0 else
35683: LD_ADDR_VAR 0 8
35687: PUSH
35688: LD_INT 0
35690: ST_TO_ADDR
35691: GO 35709
// min_y := y - r ;
35693: LD_ADDR_VAR 0 8
35697: PUSH
35698: LD_VAR 0 3
35702: PUSH
35703: LD_VAR 0 4
35707: MINUS
35708: ST_TO_ADDR
// max_x := x + r ;
35709: LD_ADDR_VAR 0 9
35713: PUSH
35714: LD_VAR 0 2
35718: PUSH
35719: LD_VAR 0 4
35723: PLUS
35724: ST_TO_ADDR
// max_y := y + r ;
35725: LD_ADDR_VAR 0 10
35729: PUSH
35730: LD_VAR 0 3
35734: PUSH
35735: LD_VAR 0 4
35739: PLUS
35740: ST_TO_ADDR
// for _x = min_x to max_x do
35741: LD_ADDR_VAR 0 11
35745: PUSH
35746: DOUBLE
35747: LD_VAR 0 7
35751: DEC
35752: ST_TO_ADDR
35753: LD_VAR 0 9
35757: PUSH
35758: FOR_TO
35759: IFFALSE 35876
// for _y = min_y to max_y do
35761: LD_ADDR_VAR 0 12
35765: PUSH
35766: DOUBLE
35767: LD_VAR 0 8
35771: DEC
35772: ST_TO_ADDR
35773: LD_VAR 0 10
35777: PUSH
35778: FOR_TO
35779: IFFALSE 35872
// begin if not ValidHex ( _x , _y ) then
35781: LD_VAR 0 11
35785: PPUSH
35786: LD_VAR 0 12
35790: PPUSH
35791: CALL_OW 488
35795: NOT
35796: IFFALSE 35800
// continue ;
35798: GO 35778
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35800: LD_VAR 0 11
35804: PPUSH
35805: LD_VAR 0 12
35809: PPUSH
35810: CALL_OW 351
35814: PUSH
35815: LD_VAR 0 11
35819: PPUSH
35820: LD_VAR 0 12
35824: PPUSH
35825: CALL_OW 554
35829: AND
35830: IFFALSE 35870
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35832: LD_ADDR_VAR 0 13
35836: PUSH
35837: LD_VAR 0 13
35841: PPUSH
35842: LD_VAR 0 13
35846: PUSH
35847: LD_INT 1
35849: PLUS
35850: PPUSH
35851: LD_VAR 0 11
35855: PUSH
35856: LD_VAR 0 12
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PPUSH
35865: CALL_OW 2
35869: ST_TO_ADDR
// end ;
35870: GO 35778
35872: POP
35873: POP
35874: GO 35758
35876: POP
35877: POP
// if not list then
35878: LD_VAR 0 13
35882: NOT
35883: IFFALSE 35887
// exit ;
35885: GO 35958
// for i in list do
35887: LD_ADDR_VAR 0 6
35891: PUSH
35892: LD_VAR 0 13
35896: PUSH
35897: FOR_IN
35898: IFFALSE 35956
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35900: LD_VAR 0 1
35904: PPUSH
35905: LD_STRING M
35907: PUSH
35908: LD_VAR 0 6
35912: PUSH
35913: LD_INT 1
35915: ARRAY
35916: PUSH
35917: LD_VAR 0 6
35921: PUSH
35922: LD_INT 2
35924: ARRAY
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: PUSH
35947: EMPTY
35948: LIST
35949: PPUSH
35950: CALL_OW 447
35954: GO 35897
35956: POP
35957: POP
// end ;
35958: LD_VAR 0 5
35962: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35963: LD_EXP 107
35967: NOT
35968: IFFALSE 36018
35970: GO 35972
35972: DISABLE
// begin initHack := true ;
35973: LD_ADDR_EXP 107
35977: PUSH
35978: LD_INT 1
35980: ST_TO_ADDR
// hackTanks := [ ] ;
35981: LD_ADDR_EXP 108
35985: PUSH
35986: EMPTY
35987: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35988: LD_ADDR_EXP 109
35992: PUSH
35993: EMPTY
35994: ST_TO_ADDR
// hackLimit := 3 ;
35995: LD_ADDR_EXP 110
35999: PUSH
36000: LD_INT 3
36002: ST_TO_ADDR
// hackDist := 12 ;
36003: LD_ADDR_EXP 111
36007: PUSH
36008: LD_INT 12
36010: ST_TO_ADDR
// hackCounter := [ ] ;
36011: LD_ADDR_EXP 112
36015: PUSH
36016: EMPTY
36017: ST_TO_ADDR
// end ;
36018: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36019: LD_EXP 107
36023: PUSH
36024: LD_INT 34
36026: PUSH
36027: LD_INT 99
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 69
36038: AND
36039: IFFALSE 36292
36041: GO 36043
36043: DISABLE
36044: LD_INT 0
36046: PPUSH
36047: PPUSH
// begin enable ;
36048: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36049: LD_ADDR_VAR 0 1
36053: PUSH
36054: LD_INT 34
36056: PUSH
36057: LD_INT 99
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PPUSH
36064: CALL_OW 69
36068: PUSH
36069: FOR_IN
36070: IFFALSE 36290
// begin if not i in hackTanks then
36072: LD_VAR 0 1
36076: PUSH
36077: LD_EXP 108
36081: IN
36082: NOT
36083: IFFALSE 36166
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36085: LD_ADDR_EXP 108
36089: PUSH
36090: LD_EXP 108
36094: PPUSH
36095: LD_EXP 108
36099: PUSH
36100: LD_INT 1
36102: PLUS
36103: PPUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 1
36113: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36114: LD_ADDR_EXP 109
36118: PUSH
36119: LD_EXP 109
36123: PPUSH
36124: LD_EXP 109
36128: PUSH
36129: LD_INT 1
36131: PLUS
36132: PPUSH
36133: EMPTY
36134: PPUSH
36135: CALL_OW 1
36139: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36140: LD_ADDR_EXP 112
36144: PUSH
36145: LD_EXP 112
36149: PPUSH
36150: LD_EXP 112
36154: PUSH
36155: LD_INT 1
36157: PLUS
36158: PPUSH
36159: EMPTY
36160: PPUSH
36161: CALL_OW 1
36165: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36166: LD_VAR 0 1
36170: PPUSH
36171: CALL_OW 302
36175: NOT
36176: IFFALSE 36189
// begin HackUnlinkAll ( i ) ;
36178: LD_VAR 0 1
36182: PPUSH
36183: CALL 36295 0 1
// continue ;
36187: GO 36069
// end ; HackCheckCapturedStatus ( i ) ;
36189: LD_VAR 0 1
36193: PPUSH
36194: CALL 36738 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36198: LD_ADDR_VAR 0 2
36202: PUSH
36203: LD_INT 81
36205: PUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 255
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 33
36222: PUSH
36223: LD_INT 3
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 91
36232: PUSH
36233: LD_VAR 0 1
36237: PUSH
36238: LD_EXP 111
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 50
36250: PUSH
36251: EMPTY
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: PPUSH
36260: CALL_OW 69
36264: ST_TO_ADDR
// if not tmp then
36265: LD_VAR 0 2
36269: NOT
36270: IFFALSE 36274
// continue ;
36272: GO 36069
// HackLink ( i , tmp ) ;
36274: LD_VAR 0 1
36278: PPUSH
36279: LD_VAR 0 2
36283: PPUSH
36284: CALL 36431 0 2
// end ;
36288: GO 36069
36290: POP
36291: POP
// end ;
36292: PPOPN 2
36294: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36295: LD_INT 0
36297: PPUSH
36298: PPUSH
36299: PPUSH
// if not hack in hackTanks then
36300: LD_VAR 0 1
36304: PUSH
36305: LD_EXP 108
36309: IN
36310: NOT
36311: IFFALSE 36315
// exit ;
36313: GO 36426
// index := GetElementIndex ( hackTanks , hack ) ;
36315: LD_ADDR_VAR 0 4
36319: PUSH
36320: LD_EXP 108
36324: PPUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL 43868 0 2
36334: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36335: LD_EXP 109
36339: PUSH
36340: LD_VAR 0 4
36344: ARRAY
36345: IFFALSE 36426
// begin for i in hackTanksCaptured [ index ] do
36347: LD_ADDR_VAR 0 3
36351: PUSH
36352: LD_EXP 109
36356: PUSH
36357: LD_VAR 0 4
36361: ARRAY
36362: PUSH
36363: FOR_IN
36364: IFFALSE 36390
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36366: LD_VAR 0 3
36370: PUSH
36371: LD_INT 1
36373: ARRAY
36374: PPUSH
36375: LD_VAR 0 3
36379: PUSH
36380: LD_INT 2
36382: ARRAY
36383: PPUSH
36384: CALL_OW 235
36388: GO 36363
36390: POP
36391: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36392: LD_ADDR_EXP 109
36396: PUSH
36397: LD_EXP 109
36401: PPUSH
36402: LD_VAR 0 4
36406: PPUSH
36407: EMPTY
36408: PPUSH
36409: CALL_OW 1
36413: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36414: LD_VAR 0 1
36418: PPUSH
36419: LD_INT 0
36421: PPUSH
36422: CALL_OW 505
// end ; end ;
36426: LD_VAR 0 2
36430: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36431: LD_INT 0
36433: PPUSH
36434: PPUSH
36435: PPUSH
// if not hack in hackTanks or not vehicles then
36436: LD_VAR 0 1
36440: PUSH
36441: LD_EXP 108
36445: IN
36446: NOT
36447: PUSH
36448: LD_VAR 0 2
36452: NOT
36453: OR
36454: IFFALSE 36458
// exit ;
36456: GO 36733
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36458: LD_ADDR_VAR 0 2
36462: PUSH
36463: LD_VAR 0 1
36467: PPUSH
36468: LD_VAR 0 2
36472: PPUSH
36473: LD_INT 1
36475: PPUSH
36476: LD_INT 1
36478: PPUSH
36479: CALL 44518 0 4
36483: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36484: LD_ADDR_VAR 0 5
36488: PUSH
36489: LD_EXP 108
36493: PPUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL 43868 0 2
36503: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36504: LD_EXP 109
36508: PUSH
36509: LD_VAR 0 5
36513: ARRAY
36514: PUSH
36515: LD_EXP 110
36519: LESS
36520: IFFALSE 36709
// begin for i := 1 to vehicles do
36522: LD_ADDR_VAR 0 4
36526: PUSH
36527: DOUBLE
36528: LD_INT 1
36530: DEC
36531: ST_TO_ADDR
36532: LD_VAR 0 2
36536: PUSH
36537: FOR_TO
36538: IFFALSE 36707
// begin if hackTanksCaptured [ index ] = hackLimit then
36540: LD_EXP 109
36544: PUSH
36545: LD_VAR 0 5
36549: ARRAY
36550: PUSH
36551: LD_EXP 110
36555: EQUAL
36556: IFFALSE 36560
// break ;
36558: GO 36707
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36560: LD_ADDR_EXP 112
36564: PUSH
36565: LD_EXP 112
36569: PPUSH
36570: LD_VAR 0 5
36574: PPUSH
36575: LD_EXP 112
36579: PUSH
36580: LD_VAR 0 5
36584: ARRAY
36585: PUSH
36586: LD_INT 1
36588: PLUS
36589: PPUSH
36590: CALL_OW 1
36594: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36595: LD_ADDR_EXP 109
36599: PUSH
36600: LD_EXP 109
36604: PPUSH
36605: LD_VAR 0 5
36609: PUSH
36610: LD_EXP 109
36614: PUSH
36615: LD_VAR 0 5
36619: ARRAY
36620: PUSH
36621: LD_INT 1
36623: PLUS
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PPUSH
36629: LD_VAR 0 2
36633: PUSH
36634: LD_VAR 0 4
36638: ARRAY
36639: PUSH
36640: LD_VAR 0 2
36644: PUSH
36645: LD_VAR 0 4
36649: ARRAY
36650: PPUSH
36651: CALL_OW 255
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PPUSH
36660: CALL 44083 0 3
36664: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36665: LD_VAR 0 2
36669: PUSH
36670: LD_VAR 0 4
36674: ARRAY
36675: PPUSH
36676: LD_VAR 0 1
36680: PPUSH
36681: CALL_OW 255
36685: PPUSH
36686: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36690: LD_VAR 0 2
36694: PUSH
36695: LD_VAR 0 4
36699: ARRAY
36700: PPUSH
36701: CALL_OW 141
// end ;
36705: GO 36537
36707: POP
36708: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36709: LD_VAR 0 1
36713: PPUSH
36714: LD_EXP 109
36718: PUSH
36719: LD_VAR 0 5
36723: ARRAY
36724: PUSH
36725: LD_INT 0
36727: PLUS
36728: PPUSH
36729: CALL_OW 505
// end ;
36733: LD_VAR 0 3
36737: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36738: LD_INT 0
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
// if not hack in hackTanks then
36744: LD_VAR 0 1
36748: PUSH
36749: LD_EXP 108
36753: IN
36754: NOT
36755: IFFALSE 36759
// exit ;
36757: GO 36999
// index := GetElementIndex ( hackTanks , hack ) ;
36759: LD_ADDR_VAR 0 4
36763: PUSH
36764: LD_EXP 108
36768: PPUSH
36769: LD_VAR 0 1
36773: PPUSH
36774: CALL 43868 0 2
36778: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36779: LD_ADDR_VAR 0 3
36783: PUSH
36784: DOUBLE
36785: LD_EXP 109
36789: PUSH
36790: LD_VAR 0 4
36794: ARRAY
36795: INC
36796: ST_TO_ADDR
36797: LD_INT 1
36799: PUSH
36800: FOR_DOWNTO
36801: IFFALSE 36973
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36803: LD_ADDR_VAR 0 5
36807: PUSH
36808: LD_EXP 109
36812: PUSH
36813: LD_VAR 0 4
36817: ARRAY
36818: PUSH
36819: LD_VAR 0 3
36823: ARRAY
36824: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36825: LD_VAR 0 5
36829: PUSH
36830: LD_INT 1
36832: ARRAY
36833: PPUSH
36834: CALL_OW 302
36838: NOT
36839: PUSH
36840: LD_VAR 0 5
36844: PUSH
36845: LD_INT 1
36847: ARRAY
36848: PPUSH
36849: CALL_OW 255
36853: PUSH
36854: LD_VAR 0 1
36858: PPUSH
36859: CALL_OW 255
36863: NONEQUAL
36864: OR
36865: IFFALSE 36971
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36867: LD_VAR 0 5
36871: PUSH
36872: LD_INT 1
36874: ARRAY
36875: PPUSH
36876: CALL_OW 305
36880: PUSH
36881: LD_VAR 0 5
36885: PUSH
36886: LD_INT 1
36888: ARRAY
36889: PPUSH
36890: CALL_OW 255
36894: PUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL_OW 255
36904: EQUAL
36905: AND
36906: IFFALSE 36930
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36908: LD_VAR 0 5
36912: PUSH
36913: LD_INT 1
36915: ARRAY
36916: PPUSH
36917: LD_VAR 0 5
36921: PUSH
36922: LD_INT 2
36924: ARRAY
36925: PPUSH
36926: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36930: LD_ADDR_EXP 109
36934: PUSH
36935: LD_EXP 109
36939: PPUSH
36940: LD_VAR 0 4
36944: PPUSH
36945: LD_EXP 109
36949: PUSH
36950: LD_VAR 0 4
36954: ARRAY
36955: PPUSH
36956: LD_VAR 0 3
36960: PPUSH
36961: CALL_OW 3
36965: PPUSH
36966: CALL_OW 1
36970: ST_TO_ADDR
// end ; end ;
36971: GO 36800
36973: POP
36974: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36975: LD_VAR 0 1
36979: PPUSH
36980: LD_EXP 109
36984: PUSH
36985: LD_VAR 0 4
36989: ARRAY
36990: PUSH
36991: LD_INT 0
36993: PLUS
36994: PPUSH
36995: CALL_OW 505
// end ;
36999: LD_VAR 0 2
37003: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37004: LD_INT 0
37006: PPUSH
37007: PPUSH
37008: PPUSH
37009: PPUSH
// if not hack in hackTanks then
37010: LD_VAR 0 1
37014: PUSH
37015: LD_EXP 108
37019: IN
37020: NOT
37021: IFFALSE 37025
// exit ;
37023: GO 37110
// index := GetElementIndex ( hackTanks , hack ) ;
37025: LD_ADDR_VAR 0 5
37029: PUSH
37030: LD_EXP 108
37034: PPUSH
37035: LD_VAR 0 1
37039: PPUSH
37040: CALL 43868 0 2
37044: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37045: LD_ADDR_VAR 0 4
37049: PUSH
37050: DOUBLE
37051: LD_INT 1
37053: DEC
37054: ST_TO_ADDR
37055: LD_EXP 109
37059: PUSH
37060: LD_VAR 0 5
37064: ARRAY
37065: PUSH
37066: FOR_TO
37067: IFFALSE 37108
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37069: LD_EXP 109
37073: PUSH
37074: LD_VAR 0 5
37078: ARRAY
37079: PUSH
37080: LD_VAR 0 4
37084: ARRAY
37085: PUSH
37086: LD_INT 1
37088: ARRAY
37089: PUSH
37090: LD_VAR 0 2
37094: EQUAL
37095: IFFALSE 37106
// KillUnit ( vehicle ) ;
37097: LD_VAR 0 2
37101: PPUSH
37102: CALL_OW 66
37106: GO 37066
37108: POP
37109: POP
// end ;
37110: LD_VAR 0 3
37114: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37115: LD_EXP 113
37119: NOT
37120: IFFALSE 37155
37122: GO 37124
37124: DISABLE
// begin initMiner := true ;
37125: LD_ADDR_EXP 113
37129: PUSH
37130: LD_INT 1
37132: ST_TO_ADDR
// minersList := [ ] ;
37133: LD_ADDR_EXP 114
37137: PUSH
37138: EMPTY
37139: ST_TO_ADDR
// minerMinesList := [ ] ;
37140: LD_ADDR_EXP 115
37144: PUSH
37145: EMPTY
37146: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37147: LD_ADDR_EXP 116
37151: PUSH
37152: LD_INT 5
37154: ST_TO_ADDR
// end ;
37155: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37156: LD_EXP 113
37160: PUSH
37161: LD_INT 34
37163: PUSH
37164: LD_INT 81
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PPUSH
37171: CALL_OW 69
37175: AND
37176: IFFALSE 37637
37178: GO 37180
37180: DISABLE
37181: LD_INT 0
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
// begin enable ;
37187: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37188: LD_ADDR_VAR 0 1
37192: PUSH
37193: LD_INT 34
37195: PUSH
37196: LD_INT 81
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PPUSH
37203: CALL_OW 69
37207: PUSH
37208: FOR_IN
37209: IFFALSE 37281
// begin if not i in minersList then
37211: LD_VAR 0 1
37215: PUSH
37216: LD_EXP 114
37220: IN
37221: NOT
37222: IFFALSE 37279
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37224: LD_ADDR_EXP 114
37228: PUSH
37229: LD_EXP 114
37233: PPUSH
37234: LD_EXP 114
37238: PUSH
37239: LD_INT 1
37241: PLUS
37242: PPUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL_OW 1
37252: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37253: LD_ADDR_EXP 115
37257: PUSH
37258: LD_EXP 115
37262: PPUSH
37263: LD_EXP 115
37267: PUSH
37268: LD_INT 1
37270: PLUS
37271: PPUSH
37272: EMPTY
37273: PPUSH
37274: CALL_OW 1
37278: ST_TO_ADDR
// end end ;
37279: GO 37208
37281: POP
37282: POP
// for i := minerMinesList downto 1 do
37283: LD_ADDR_VAR 0 1
37287: PUSH
37288: DOUBLE
37289: LD_EXP 115
37293: INC
37294: ST_TO_ADDR
37295: LD_INT 1
37297: PUSH
37298: FOR_DOWNTO
37299: IFFALSE 37635
// begin if IsLive ( minersList [ i ] ) then
37301: LD_EXP 114
37305: PUSH
37306: LD_VAR 0 1
37310: ARRAY
37311: PPUSH
37312: CALL_OW 300
37316: IFFALSE 37344
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37318: LD_EXP 114
37322: PUSH
37323: LD_VAR 0 1
37327: ARRAY
37328: PPUSH
37329: LD_EXP 115
37333: PUSH
37334: LD_VAR 0 1
37338: ARRAY
37339: PPUSH
37340: CALL_OW 505
// if not minerMinesList [ i ] then
37344: LD_EXP 115
37348: PUSH
37349: LD_VAR 0 1
37353: ARRAY
37354: NOT
37355: IFFALSE 37359
// continue ;
37357: GO 37298
// for j := minerMinesList [ i ] downto 1 do
37359: LD_ADDR_VAR 0 2
37363: PUSH
37364: DOUBLE
37365: LD_EXP 115
37369: PUSH
37370: LD_VAR 0 1
37374: ARRAY
37375: INC
37376: ST_TO_ADDR
37377: LD_INT 1
37379: PUSH
37380: FOR_DOWNTO
37381: IFFALSE 37631
// begin side := GetSide ( minersList [ i ] ) ;
37383: LD_ADDR_VAR 0 3
37387: PUSH
37388: LD_EXP 114
37392: PUSH
37393: LD_VAR 0 1
37397: ARRAY
37398: PPUSH
37399: CALL_OW 255
37403: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37404: LD_ADDR_VAR 0 4
37408: PUSH
37409: LD_EXP 115
37413: PUSH
37414: LD_VAR 0 1
37418: ARRAY
37419: PUSH
37420: LD_VAR 0 2
37424: ARRAY
37425: PUSH
37426: LD_INT 1
37428: ARRAY
37429: PPUSH
37430: LD_EXP 115
37434: PUSH
37435: LD_VAR 0 1
37439: ARRAY
37440: PUSH
37441: LD_VAR 0 2
37445: ARRAY
37446: PUSH
37447: LD_INT 2
37449: ARRAY
37450: PPUSH
37451: CALL_OW 428
37455: ST_TO_ADDR
// if not tmp then
37456: LD_VAR 0 4
37460: NOT
37461: IFFALSE 37465
// continue ;
37463: GO 37380
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37465: LD_VAR 0 4
37469: PUSH
37470: LD_INT 81
37472: PUSH
37473: LD_VAR 0 3
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PPUSH
37482: CALL_OW 69
37486: IN
37487: PUSH
37488: LD_EXP 115
37492: PUSH
37493: LD_VAR 0 1
37497: ARRAY
37498: PUSH
37499: LD_VAR 0 2
37503: ARRAY
37504: PUSH
37505: LD_INT 1
37507: ARRAY
37508: PPUSH
37509: LD_EXP 115
37513: PUSH
37514: LD_VAR 0 1
37518: ARRAY
37519: PUSH
37520: LD_VAR 0 2
37524: ARRAY
37525: PUSH
37526: LD_INT 2
37528: ARRAY
37529: PPUSH
37530: CALL_OW 458
37534: AND
37535: IFFALSE 37629
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37537: LD_EXP 115
37541: PUSH
37542: LD_VAR 0 1
37546: ARRAY
37547: PUSH
37548: LD_VAR 0 2
37552: ARRAY
37553: PUSH
37554: LD_INT 1
37556: ARRAY
37557: PPUSH
37558: LD_EXP 115
37562: PUSH
37563: LD_VAR 0 1
37567: ARRAY
37568: PUSH
37569: LD_VAR 0 2
37573: ARRAY
37574: PUSH
37575: LD_INT 2
37577: ARRAY
37578: PPUSH
37579: LD_VAR 0 3
37583: PPUSH
37584: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37588: LD_ADDR_EXP 115
37592: PUSH
37593: LD_EXP 115
37597: PPUSH
37598: LD_VAR 0 1
37602: PPUSH
37603: LD_EXP 115
37607: PUSH
37608: LD_VAR 0 1
37612: ARRAY
37613: PPUSH
37614: LD_VAR 0 2
37618: PPUSH
37619: CALL_OW 3
37623: PPUSH
37624: CALL_OW 1
37628: ST_TO_ADDR
// end ; end ;
37629: GO 37380
37631: POP
37632: POP
// end ;
37633: GO 37298
37635: POP
37636: POP
// end ;
37637: PPOPN 4
37639: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37640: LD_INT 0
37642: PPUSH
37643: PPUSH
// result := false ;
37644: LD_ADDR_VAR 0 4
37648: PUSH
37649: LD_INT 0
37651: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL_OW 264
37661: PUSH
37662: LD_INT 81
37664: EQUAL
37665: NOT
37666: IFFALSE 37670
// exit ;
37668: GO 37910
// index := GetElementIndex ( minersList , unit ) ;
37670: LD_ADDR_VAR 0 5
37674: PUSH
37675: LD_EXP 114
37679: PPUSH
37680: LD_VAR 0 1
37684: PPUSH
37685: CALL 43868 0 2
37689: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37690: LD_EXP 115
37694: PUSH
37695: LD_VAR 0 5
37699: ARRAY
37700: PUSH
37701: LD_EXP 116
37705: GREATEREQUAL
37706: IFFALSE 37710
// exit ;
37708: GO 37910
// ComMoveXY ( unit , x , y ) ;
37710: LD_VAR 0 1
37714: PPUSH
37715: LD_VAR 0 2
37719: PPUSH
37720: LD_VAR 0 3
37724: PPUSH
37725: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37729: LD_INT 35
37731: PPUSH
37732: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37736: LD_VAR 0 1
37740: PPUSH
37741: LD_VAR 0 2
37745: PPUSH
37746: LD_VAR 0 3
37750: PPUSH
37751: CALL 75223 0 3
37755: NOT
37756: PUSH
37757: LD_VAR 0 1
37761: PPUSH
37762: CALL_OW 314
37766: AND
37767: IFFALSE 37771
// exit ;
37769: GO 37910
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37771: LD_VAR 0 2
37775: PPUSH
37776: LD_VAR 0 3
37780: PPUSH
37781: CALL_OW 428
37785: PUSH
37786: LD_VAR 0 1
37790: EQUAL
37791: PUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL_OW 314
37801: NOT
37802: AND
37803: IFFALSE 37729
// PlaySoundXY ( x , y , PlantMine ) ;
37805: LD_VAR 0 2
37809: PPUSH
37810: LD_VAR 0 3
37814: PPUSH
37815: LD_STRING PlantMine
37817: PPUSH
37818: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37822: LD_VAR 0 2
37826: PPUSH
37827: LD_VAR 0 3
37831: PPUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: CALL_OW 255
37841: PPUSH
37842: LD_INT 0
37844: PPUSH
37845: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37849: LD_ADDR_EXP 115
37853: PUSH
37854: LD_EXP 115
37858: PPUSH
37859: LD_VAR 0 5
37863: PUSH
37864: LD_EXP 115
37868: PUSH
37869: LD_VAR 0 5
37873: ARRAY
37874: PUSH
37875: LD_INT 1
37877: PLUS
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PPUSH
37883: LD_VAR 0 2
37887: PUSH
37888: LD_VAR 0 3
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PPUSH
37897: CALL 44083 0 3
37901: ST_TO_ADDR
// result := true ;
37902: LD_ADDR_VAR 0 4
37906: PUSH
37907: LD_INT 1
37909: ST_TO_ADDR
// end ;
37910: LD_VAR 0 4
37914: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37915: LD_INT 0
37917: PPUSH
37918: PPUSH
37919: PPUSH
// if not unit in minersList then
37920: LD_VAR 0 1
37924: PUSH
37925: LD_EXP 114
37929: IN
37930: NOT
37931: IFFALSE 37935
// exit ;
37933: GO 38327
// index := GetElementIndex ( minersList , unit ) ;
37935: LD_ADDR_VAR 0 6
37939: PUSH
37940: LD_EXP 114
37944: PPUSH
37945: LD_VAR 0 1
37949: PPUSH
37950: CALL 43868 0 2
37954: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37955: LD_ADDR_VAR 0 5
37959: PUSH
37960: DOUBLE
37961: LD_EXP 115
37965: PUSH
37966: LD_VAR 0 6
37970: ARRAY
37971: INC
37972: ST_TO_ADDR
37973: LD_INT 1
37975: PUSH
37976: FOR_DOWNTO
37977: IFFALSE 38138
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37979: LD_EXP 115
37983: PUSH
37984: LD_VAR 0 6
37988: ARRAY
37989: PUSH
37990: LD_VAR 0 5
37994: ARRAY
37995: PUSH
37996: LD_INT 1
37998: ARRAY
37999: PUSH
38000: LD_VAR 0 2
38004: EQUAL
38005: PUSH
38006: LD_EXP 115
38010: PUSH
38011: LD_VAR 0 6
38015: ARRAY
38016: PUSH
38017: LD_VAR 0 5
38021: ARRAY
38022: PUSH
38023: LD_INT 2
38025: ARRAY
38026: PUSH
38027: LD_VAR 0 3
38031: EQUAL
38032: AND
38033: IFFALSE 38136
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38035: LD_EXP 115
38039: PUSH
38040: LD_VAR 0 6
38044: ARRAY
38045: PUSH
38046: LD_VAR 0 5
38050: ARRAY
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: PPUSH
38056: LD_EXP 115
38060: PUSH
38061: LD_VAR 0 6
38065: ARRAY
38066: PUSH
38067: LD_VAR 0 5
38071: ARRAY
38072: PUSH
38073: LD_INT 2
38075: ARRAY
38076: PPUSH
38077: LD_VAR 0 1
38081: PPUSH
38082: CALL_OW 255
38086: PPUSH
38087: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38091: LD_ADDR_EXP 115
38095: PUSH
38096: LD_EXP 115
38100: PPUSH
38101: LD_VAR 0 6
38105: PPUSH
38106: LD_EXP 115
38110: PUSH
38111: LD_VAR 0 6
38115: ARRAY
38116: PPUSH
38117: LD_VAR 0 5
38121: PPUSH
38122: CALL_OW 3
38126: PPUSH
38127: CALL_OW 1
38131: ST_TO_ADDR
// exit ;
38132: POP
38133: POP
38134: GO 38327
// end ; end ;
38136: GO 37976
38138: POP
38139: POP
// for i := minerMinesList [ index ] downto 1 do
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: DOUBLE
38146: LD_EXP 115
38150: PUSH
38151: LD_VAR 0 6
38155: ARRAY
38156: INC
38157: ST_TO_ADDR
38158: LD_INT 1
38160: PUSH
38161: FOR_DOWNTO
38162: IFFALSE 38325
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38164: LD_EXP 115
38168: PUSH
38169: LD_VAR 0 6
38173: ARRAY
38174: PUSH
38175: LD_VAR 0 5
38179: ARRAY
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: PPUSH
38185: LD_EXP 115
38189: PUSH
38190: LD_VAR 0 6
38194: ARRAY
38195: PUSH
38196: LD_VAR 0 5
38200: ARRAY
38201: PUSH
38202: LD_INT 2
38204: ARRAY
38205: PPUSH
38206: LD_VAR 0 2
38210: PPUSH
38211: LD_VAR 0 3
38215: PPUSH
38216: CALL_OW 298
38220: PUSH
38221: LD_INT 6
38223: LESS
38224: IFFALSE 38323
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38226: LD_EXP 115
38230: PUSH
38231: LD_VAR 0 6
38235: ARRAY
38236: PUSH
38237: LD_VAR 0 5
38241: ARRAY
38242: PUSH
38243: LD_INT 1
38245: ARRAY
38246: PPUSH
38247: LD_EXP 115
38251: PUSH
38252: LD_VAR 0 6
38256: ARRAY
38257: PUSH
38258: LD_VAR 0 5
38262: ARRAY
38263: PUSH
38264: LD_INT 2
38266: ARRAY
38267: PPUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 255
38277: PPUSH
38278: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38282: LD_ADDR_EXP 115
38286: PUSH
38287: LD_EXP 115
38291: PPUSH
38292: LD_VAR 0 6
38296: PPUSH
38297: LD_EXP 115
38301: PUSH
38302: LD_VAR 0 6
38306: ARRAY
38307: PPUSH
38308: LD_VAR 0 5
38312: PPUSH
38313: CALL_OW 3
38317: PPUSH
38318: CALL_OW 1
38322: ST_TO_ADDR
// end ; end ;
38323: GO 38161
38325: POP
38326: POP
// end ;
38327: LD_VAR 0 4
38331: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38332: LD_INT 0
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38343: LD_VAR 0 1
38347: PPUSH
38348: CALL_OW 264
38352: PUSH
38353: LD_INT 81
38355: EQUAL
38356: NOT
38357: PUSH
38358: LD_VAR 0 1
38362: PUSH
38363: LD_EXP 114
38367: IN
38368: NOT
38369: OR
38370: IFFALSE 38374
// exit ;
38372: GO 38696
// index := GetElementIndex ( minersList , unit ) ;
38374: LD_ADDR_VAR 0 6
38378: PUSH
38379: LD_EXP 114
38383: PPUSH
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL 43868 0 2
38393: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38394: LD_ADDR_VAR 0 8
38398: PUSH
38399: LD_EXP 116
38403: PUSH
38404: LD_EXP 115
38408: PUSH
38409: LD_VAR 0 6
38413: ARRAY
38414: MINUS
38415: ST_TO_ADDR
// if not minesFreeAmount then
38416: LD_VAR 0 8
38420: NOT
38421: IFFALSE 38425
// exit ;
38423: GO 38696
// tmp := [ ] ;
38425: LD_ADDR_VAR 0 7
38429: PUSH
38430: EMPTY
38431: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38432: LD_ADDR_VAR 0 5
38436: PUSH
38437: DOUBLE
38438: LD_INT 1
38440: DEC
38441: ST_TO_ADDR
38442: LD_VAR 0 8
38446: PUSH
38447: FOR_TO
38448: IFFALSE 38643
// begin _d := rand ( 0 , 5 ) ;
38450: LD_ADDR_VAR 0 11
38454: PUSH
38455: LD_INT 0
38457: PPUSH
38458: LD_INT 5
38460: PPUSH
38461: CALL_OW 12
38465: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38466: LD_ADDR_VAR 0 12
38470: PUSH
38471: LD_INT 2
38473: PPUSH
38474: LD_INT 6
38476: PPUSH
38477: CALL_OW 12
38481: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38482: LD_ADDR_VAR 0 9
38486: PUSH
38487: LD_VAR 0 2
38491: PPUSH
38492: LD_VAR 0 11
38496: PPUSH
38497: LD_VAR 0 12
38501: PPUSH
38502: CALL_OW 272
38506: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38507: LD_ADDR_VAR 0 10
38511: PUSH
38512: LD_VAR 0 3
38516: PPUSH
38517: LD_VAR 0 11
38521: PPUSH
38522: LD_VAR 0 12
38526: PPUSH
38527: CALL_OW 273
38531: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38532: LD_VAR 0 9
38536: PPUSH
38537: LD_VAR 0 10
38541: PPUSH
38542: CALL_OW 488
38546: PUSH
38547: LD_VAR 0 9
38551: PUSH
38552: LD_VAR 0 10
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_VAR 0 7
38565: IN
38566: NOT
38567: AND
38568: PUSH
38569: LD_VAR 0 9
38573: PPUSH
38574: LD_VAR 0 10
38578: PPUSH
38579: CALL_OW 458
38583: NOT
38584: AND
38585: IFFALSE 38627
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38587: LD_ADDR_VAR 0 7
38591: PUSH
38592: LD_VAR 0 7
38596: PPUSH
38597: LD_VAR 0 7
38601: PUSH
38602: LD_INT 1
38604: PLUS
38605: PPUSH
38606: LD_VAR 0 9
38610: PUSH
38611: LD_VAR 0 10
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PPUSH
38620: CALL_OW 1
38624: ST_TO_ADDR
38625: GO 38641
// i := i - 1 ;
38627: LD_ADDR_VAR 0 5
38631: PUSH
38632: LD_VAR 0 5
38636: PUSH
38637: LD_INT 1
38639: MINUS
38640: ST_TO_ADDR
// end ;
38641: GO 38447
38643: POP
38644: POP
// for i in tmp do
38645: LD_ADDR_VAR 0 5
38649: PUSH
38650: LD_VAR 0 7
38654: PUSH
38655: FOR_IN
38656: IFFALSE 38694
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38658: LD_VAR 0 1
38662: PPUSH
38663: LD_VAR 0 5
38667: PUSH
38668: LD_INT 1
38670: ARRAY
38671: PPUSH
38672: LD_VAR 0 5
38676: PUSH
38677: LD_INT 2
38679: ARRAY
38680: PPUSH
38681: CALL 37640 0 3
38685: NOT
38686: IFFALSE 38692
// exit ;
38688: POP
38689: POP
38690: GO 38696
38692: GO 38655
38694: POP
38695: POP
// end ;
38696: LD_VAR 0 4
38700: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38701: LD_INT 0
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
// if not GetClass ( unit ) = class_sniper then
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 257
38719: PUSH
38720: LD_INT 5
38722: EQUAL
38723: NOT
38724: IFFALSE 38728
// exit ;
38726: GO 39116
// dist := 8 ;
38728: LD_ADDR_VAR 0 5
38732: PUSH
38733: LD_INT 8
38735: ST_TO_ADDR
// viewRange := 12 ;
38736: LD_ADDR_VAR 0 7
38740: PUSH
38741: LD_INT 12
38743: ST_TO_ADDR
// side := GetSide ( unit ) ;
38744: LD_ADDR_VAR 0 6
38748: PUSH
38749: LD_VAR 0 1
38753: PPUSH
38754: CALL_OW 255
38758: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38759: LD_INT 61
38761: PPUSH
38762: LD_VAR 0 6
38766: PPUSH
38767: CALL_OW 321
38771: PUSH
38772: LD_INT 2
38774: EQUAL
38775: IFFALSE 38785
// viewRange := 16 ;
38777: LD_ADDR_VAR 0 7
38781: PUSH
38782: LD_INT 16
38784: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38785: LD_VAR 0 1
38789: PPUSH
38790: LD_VAR 0 2
38794: PPUSH
38795: LD_VAR 0 3
38799: PPUSH
38800: CALL_OW 297
38804: PUSH
38805: LD_VAR 0 5
38809: GREATER
38810: IFFALSE 38889
// begin ComMoveXY ( unit , x , y ) ;
38812: LD_VAR 0 1
38816: PPUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: LD_VAR 0 3
38826: PPUSH
38827: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38831: LD_INT 35
38833: PPUSH
38834: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38838: LD_VAR 0 1
38842: PPUSH
38843: LD_VAR 0 2
38847: PPUSH
38848: LD_VAR 0 3
38852: PPUSH
38853: CALL 75223 0 3
38857: NOT
38858: IFFALSE 38862
// exit ;
38860: GO 39116
// until GetDistUnitXY ( unit , x , y ) < dist ;
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: LD_VAR 0 3
38876: PPUSH
38877: CALL_OW 297
38881: PUSH
38882: LD_VAR 0 5
38886: LESS
38887: IFFALSE 38831
// end ; ComTurnXY ( unit , x , y ) ;
38889: LD_VAR 0 1
38893: PPUSH
38894: LD_VAR 0 2
38898: PPUSH
38899: LD_VAR 0 3
38903: PPUSH
38904: CALL_OW 118
// wait ( 5 ) ;
38908: LD_INT 5
38910: PPUSH
38911: CALL_OW 67
// _d := GetDir ( unit ) ;
38915: LD_ADDR_VAR 0 10
38919: PUSH
38920: LD_VAR 0 1
38924: PPUSH
38925: CALL_OW 254
38929: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38930: LD_ADDR_VAR 0 8
38934: PUSH
38935: LD_VAR 0 1
38939: PPUSH
38940: CALL_OW 250
38944: PPUSH
38945: LD_VAR 0 10
38949: PPUSH
38950: LD_VAR 0 5
38954: PPUSH
38955: CALL_OW 272
38959: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38960: LD_ADDR_VAR 0 9
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 251
38974: PPUSH
38975: LD_VAR 0 10
38979: PPUSH
38980: LD_VAR 0 5
38984: PPUSH
38985: CALL_OW 273
38989: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38990: LD_VAR 0 8
38994: PPUSH
38995: LD_VAR 0 9
38999: PPUSH
39000: CALL_OW 488
39004: NOT
39005: IFFALSE 39009
// exit ;
39007: GO 39116
// ComAnimCustom ( unit , 1 ) ;
39009: LD_VAR 0 1
39013: PPUSH
39014: LD_INT 1
39016: PPUSH
39017: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39021: LD_VAR 0 8
39025: PPUSH
39026: LD_VAR 0 9
39030: PPUSH
39031: LD_VAR 0 6
39035: PPUSH
39036: LD_VAR 0 7
39040: PPUSH
39041: CALL_OW 330
// repeat wait ( 1 ) ;
39045: LD_INT 1
39047: PPUSH
39048: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39052: LD_VAR 0 1
39056: PPUSH
39057: CALL_OW 316
39061: PUSH
39062: LD_VAR 0 1
39066: PPUSH
39067: CALL_OW 314
39071: OR
39072: PUSH
39073: LD_VAR 0 1
39077: PPUSH
39078: CALL_OW 302
39082: NOT
39083: OR
39084: PUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 301
39094: OR
39095: IFFALSE 39045
// RemoveSeeing ( _x , _y , side ) ;
39097: LD_VAR 0 8
39101: PPUSH
39102: LD_VAR 0 9
39106: PPUSH
39107: LD_VAR 0 6
39111: PPUSH
39112: CALL_OW 331
// end ; end_of_file
39116: LD_VAR 0 4
39120: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
// if exist_mode then
39125: LD_VAR 0 2
39129: IFFALSE 39154
// unit := CreateCharacter ( prefix & ident ) else
39131: LD_ADDR_VAR 0 5
39135: PUSH
39136: LD_VAR 0 3
39140: PUSH
39141: LD_VAR 0 1
39145: STR
39146: PPUSH
39147: CALL_OW 34
39151: ST_TO_ADDR
39152: GO 39169
// unit := NewCharacter ( ident ) ;
39154: LD_ADDR_VAR 0 5
39158: PUSH
39159: LD_VAR 0 1
39163: PPUSH
39164: CALL_OW 25
39168: ST_TO_ADDR
// result := unit ;
39169: LD_ADDR_VAR 0 4
39173: PUSH
39174: LD_VAR 0 5
39178: ST_TO_ADDR
// end ;
39179: LD_VAR 0 4
39183: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39184: LD_INT 0
39186: PPUSH
39187: PPUSH
// if not side or not nation then
39188: LD_VAR 0 1
39192: NOT
39193: PUSH
39194: LD_VAR 0 2
39198: NOT
39199: OR
39200: IFFALSE 39204
// exit ;
39202: GO 39972
// case nation of nation_american :
39204: LD_VAR 0 2
39208: PUSH
39209: LD_INT 1
39211: DOUBLE
39212: EQUAL
39213: IFTRUE 39217
39215: GO 39431
39217: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39218: LD_ADDR_VAR 0 4
39222: PUSH
39223: LD_INT 35
39225: PUSH
39226: LD_INT 45
39228: PUSH
39229: LD_INT 46
39231: PUSH
39232: LD_INT 47
39234: PUSH
39235: LD_INT 82
39237: PUSH
39238: LD_INT 83
39240: PUSH
39241: LD_INT 84
39243: PUSH
39244: LD_INT 85
39246: PUSH
39247: LD_INT 86
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 6
39258: PUSH
39259: LD_INT 15
39261: PUSH
39262: LD_INT 16
39264: PUSH
39265: LD_INT 7
39267: PUSH
39268: LD_INT 12
39270: PUSH
39271: LD_INT 13
39273: PUSH
39274: LD_INT 10
39276: PUSH
39277: LD_INT 14
39279: PUSH
39280: LD_INT 20
39282: PUSH
39283: LD_INT 21
39285: PUSH
39286: LD_INT 22
39288: PUSH
39289: LD_INT 25
39291: PUSH
39292: LD_INT 32
39294: PUSH
39295: LD_INT 27
39297: PUSH
39298: LD_INT 36
39300: PUSH
39301: LD_INT 69
39303: PUSH
39304: LD_INT 39
39306: PUSH
39307: LD_INT 34
39309: PUSH
39310: LD_INT 40
39312: PUSH
39313: LD_INT 48
39315: PUSH
39316: LD_INT 49
39318: PUSH
39319: LD_INT 50
39321: PUSH
39322: LD_INT 51
39324: PUSH
39325: LD_INT 52
39327: PUSH
39328: LD_INT 53
39330: PUSH
39331: LD_INT 54
39333: PUSH
39334: LD_INT 55
39336: PUSH
39337: LD_INT 56
39339: PUSH
39340: LD_INT 57
39342: PUSH
39343: LD_INT 58
39345: PUSH
39346: LD_INT 59
39348: PUSH
39349: LD_INT 60
39351: PUSH
39352: LD_INT 61
39354: PUSH
39355: LD_INT 62
39357: PUSH
39358: LD_INT 80
39360: PUSH
39361: LD_INT 82
39363: PUSH
39364: LD_INT 83
39366: PUSH
39367: LD_INT 84
39369: PUSH
39370: LD_INT 85
39372: PUSH
39373: LD_INT 86
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
39429: GO 39896
39431: LD_INT 2
39433: DOUBLE
39434: EQUAL
39435: IFTRUE 39439
39437: GO 39665
39439: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39440: LD_ADDR_VAR 0 4
39444: PUSH
39445: LD_INT 35
39447: PUSH
39448: LD_INT 45
39450: PUSH
39451: LD_INT 46
39453: PUSH
39454: LD_INT 47
39456: PUSH
39457: LD_INT 82
39459: PUSH
39460: LD_INT 83
39462: PUSH
39463: LD_INT 84
39465: PUSH
39466: LD_INT 85
39468: PUSH
39469: LD_INT 87
39471: PUSH
39472: LD_INT 70
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: LD_INT 11
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: LD_INT 4
39486: PUSH
39487: LD_INT 5
39489: PUSH
39490: LD_INT 6
39492: PUSH
39493: LD_INT 15
39495: PUSH
39496: LD_INT 18
39498: PUSH
39499: LD_INT 7
39501: PUSH
39502: LD_INT 17
39504: PUSH
39505: LD_INT 8
39507: PUSH
39508: LD_INT 20
39510: PUSH
39511: LD_INT 21
39513: PUSH
39514: LD_INT 22
39516: PUSH
39517: LD_INT 72
39519: PUSH
39520: LD_INT 26
39522: PUSH
39523: LD_INT 69
39525: PUSH
39526: LD_INT 39
39528: PUSH
39529: LD_INT 40
39531: PUSH
39532: LD_INT 41
39534: PUSH
39535: LD_INT 42
39537: PUSH
39538: LD_INT 43
39540: PUSH
39541: LD_INT 48
39543: PUSH
39544: LD_INT 49
39546: PUSH
39547: LD_INT 50
39549: PUSH
39550: LD_INT 51
39552: PUSH
39553: LD_INT 52
39555: PUSH
39556: LD_INT 53
39558: PUSH
39559: LD_INT 54
39561: PUSH
39562: LD_INT 55
39564: PUSH
39565: LD_INT 56
39567: PUSH
39568: LD_INT 60
39570: PUSH
39571: LD_INT 61
39573: PUSH
39574: LD_INT 62
39576: PUSH
39577: LD_INT 66
39579: PUSH
39580: LD_INT 67
39582: PUSH
39583: LD_INT 68
39585: PUSH
39586: LD_INT 81
39588: PUSH
39589: LD_INT 82
39591: PUSH
39592: LD_INT 83
39594: PUSH
39595: LD_INT 84
39597: PUSH
39598: LD_INT 85
39600: PUSH
39601: LD_INT 87
39603: PUSH
39604: LD_INT 88
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
39663: GO 39896
39665: LD_INT 3
39667: DOUBLE
39668: EQUAL
39669: IFTRUE 39673
39671: GO 39895
39673: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39674: LD_ADDR_VAR 0 4
39678: PUSH
39679: LD_INT 46
39681: PUSH
39682: LD_INT 47
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: LD_INT 82
39693: PUSH
39694: LD_INT 83
39696: PUSH
39697: LD_INT 84
39699: PUSH
39700: LD_INT 85
39702: PUSH
39703: LD_INT 86
39705: PUSH
39706: LD_INT 11
39708: PUSH
39709: LD_INT 9
39711: PUSH
39712: LD_INT 20
39714: PUSH
39715: LD_INT 19
39717: PUSH
39718: LD_INT 21
39720: PUSH
39721: LD_INT 24
39723: PUSH
39724: LD_INT 22
39726: PUSH
39727: LD_INT 25
39729: PUSH
39730: LD_INT 28
39732: PUSH
39733: LD_INT 29
39735: PUSH
39736: LD_INT 30
39738: PUSH
39739: LD_INT 31
39741: PUSH
39742: LD_INT 37
39744: PUSH
39745: LD_INT 38
39747: PUSH
39748: LD_INT 32
39750: PUSH
39751: LD_INT 27
39753: PUSH
39754: LD_INT 33
39756: PUSH
39757: LD_INT 69
39759: PUSH
39760: LD_INT 39
39762: PUSH
39763: LD_INT 34
39765: PUSH
39766: LD_INT 40
39768: PUSH
39769: LD_INT 71
39771: PUSH
39772: LD_INT 23
39774: PUSH
39775: LD_INT 44
39777: PUSH
39778: LD_INT 48
39780: PUSH
39781: LD_INT 49
39783: PUSH
39784: LD_INT 50
39786: PUSH
39787: LD_INT 51
39789: PUSH
39790: LD_INT 52
39792: PUSH
39793: LD_INT 53
39795: PUSH
39796: LD_INT 54
39798: PUSH
39799: LD_INT 55
39801: PUSH
39802: LD_INT 56
39804: PUSH
39805: LD_INT 57
39807: PUSH
39808: LD_INT 58
39810: PUSH
39811: LD_INT 59
39813: PUSH
39814: LD_INT 63
39816: PUSH
39817: LD_INT 64
39819: PUSH
39820: LD_INT 65
39822: PUSH
39823: LD_INT 82
39825: PUSH
39826: LD_INT 83
39828: PUSH
39829: LD_INT 84
39831: PUSH
39832: LD_INT 85
39834: PUSH
39835: LD_INT 86
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: ST_TO_ADDR
39893: GO 39896
39895: POP
// if state > - 1 and state < 3 then
39896: LD_VAR 0 3
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: GREATER
39905: PUSH
39906: LD_VAR 0 3
39910: PUSH
39911: LD_INT 3
39913: LESS
39914: AND
39915: IFFALSE 39972
// for i in result do
39917: LD_ADDR_VAR 0 5
39921: PUSH
39922: LD_VAR 0 4
39926: PUSH
39927: FOR_IN
39928: IFFALSE 39970
// if GetTech ( i , side ) <> state then
39930: LD_VAR 0 5
39934: PPUSH
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 321
39944: PUSH
39945: LD_VAR 0 3
39949: NONEQUAL
39950: IFFALSE 39968
// result := result diff i ;
39952: LD_ADDR_VAR 0 4
39956: PUSH
39957: LD_VAR 0 4
39961: PUSH
39962: LD_VAR 0 5
39966: DIFF
39967: ST_TO_ADDR
39968: GO 39927
39970: POP
39971: POP
// end ;
39972: LD_VAR 0 4
39976: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39977: LD_INT 0
39979: PPUSH
39980: PPUSH
39981: PPUSH
// result := true ;
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_INT 1
39989: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39990: LD_ADDR_VAR 0 5
39994: PUSH
39995: LD_VAR 0 2
39999: PPUSH
40000: CALL_OW 480
40004: ST_TO_ADDR
// if not tmp then
40005: LD_VAR 0 5
40009: NOT
40010: IFFALSE 40014
// exit ;
40012: GO 40063
// for i in tmp do
40014: LD_ADDR_VAR 0 4
40018: PUSH
40019: LD_VAR 0 5
40023: PUSH
40024: FOR_IN
40025: IFFALSE 40061
// if GetTech ( i , side ) <> state_researched then
40027: LD_VAR 0 4
40031: PPUSH
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL_OW 321
40041: PUSH
40042: LD_INT 2
40044: NONEQUAL
40045: IFFALSE 40059
// begin result := false ;
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_INT 0
40054: ST_TO_ADDR
// exit ;
40055: POP
40056: POP
40057: GO 40063
// end ;
40059: GO 40024
40061: POP
40062: POP
// end ;
40063: LD_VAR 0 3
40067: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40068: LD_INT 0
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40083: LD_VAR 0 1
40087: NOT
40088: PUSH
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 257
40098: PUSH
40099: LD_INT 9
40101: NONEQUAL
40102: OR
40103: IFFALSE 40107
// exit ;
40105: GO 40680
// side := GetSide ( unit ) ;
40107: LD_ADDR_VAR 0 9
40111: PUSH
40112: LD_VAR 0 1
40116: PPUSH
40117: CALL_OW 255
40121: ST_TO_ADDR
// tech_space := tech_spacanom ;
40122: LD_ADDR_VAR 0 12
40126: PUSH
40127: LD_INT 29
40129: ST_TO_ADDR
// tech_time := tech_taurad ;
40130: LD_ADDR_VAR 0 13
40134: PUSH
40135: LD_INT 28
40137: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40138: LD_ADDR_VAR 0 11
40142: PUSH
40143: LD_VAR 0 1
40147: PPUSH
40148: CALL_OW 310
40152: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40153: LD_VAR 0 11
40157: PPUSH
40158: CALL_OW 247
40162: PUSH
40163: LD_INT 2
40165: EQUAL
40166: IFFALSE 40170
// exit ;
40168: GO 40680
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40170: LD_ADDR_VAR 0 8
40174: PUSH
40175: LD_INT 81
40177: PUSH
40178: LD_VAR 0 9
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: LD_INT 21
40192: PUSH
40193: LD_INT 3
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PPUSH
40208: CALL_OW 69
40212: ST_TO_ADDR
// if not tmp then
40213: LD_VAR 0 8
40217: NOT
40218: IFFALSE 40222
// exit ;
40220: GO 40680
// if in_unit then
40222: LD_VAR 0 11
40226: IFFALSE 40250
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40228: LD_ADDR_VAR 0 10
40232: PUSH
40233: LD_VAR 0 8
40237: PPUSH
40238: LD_VAR 0 11
40242: PPUSH
40243: CALL_OW 74
40247: ST_TO_ADDR
40248: GO 40270
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40250: LD_ADDR_VAR 0 10
40254: PUSH
40255: LD_VAR 0 8
40259: PPUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 74
40269: ST_TO_ADDR
// if not enemy then
40270: LD_VAR 0 10
40274: NOT
40275: IFFALSE 40279
// exit ;
40277: GO 40680
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40279: LD_VAR 0 11
40283: PUSH
40284: LD_VAR 0 11
40288: PPUSH
40289: LD_VAR 0 10
40293: PPUSH
40294: CALL_OW 296
40298: PUSH
40299: LD_INT 13
40301: GREATER
40302: AND
40303: PUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: LD_VAR 0 10
40313: PPUSH
40314: CALL_OW 296
40318: PUSH
40319: LD_INT 12
40321: GREATER
40322: OR
40323: IFFALSE 40327
// exit ;
40325: GO 40680
// missile := [ 1 ] ;
40327: LD_ADDR_VAR 0 14
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40338: LD_VAR 0 9
40342: PPUSH
40343: LD_VAR 0 12
40347: PPUSH
40348: CALL_OW 325
40352: IFFALSE 40381
// missile := Replace ( missile , missile + 1 , 2 ) ;
40354: LD_ADDR_VAR 0 14
40358: PUSH
40359: LD_VAR 0 14
40363: PPUSH
40364: LD_VAR 0 14
40368: PUSH
40369: LD_INT 1
40371: PLUS
40372: PPUSH
40373: LD_INT 2
40375: PPUSH
40376: CALL_OW 1
40380: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40381: LD_VAR 0 9
40385: PPUSH
40386: LD_VAR 0 13
40390: PPUSH
40391: CALL_OW 325
40395: PUSH
40396: LD_VAR 0 10
40400: PPUSH
40401: CALL_OW 255
40405: PPUSH
40406: LD_VAR 0 13
40410: PPUSH
40411: CALL_OW 325
40415: NOT
40416: AND
40417: IFFALSE 40446
// missile := Replace ( missile , missile + 1 , 3 ) ;
40419: LD_ADDR_VAR 0 14
40423: PUSH
40424: LD_VAR 0 14
40428: PPUSH
40429: LD_VAR 0 14
40433: PUSH
40434: LD_INT 1
40436: PLUS
40437: PPUSH
40438: LD_INT 3
40440: PPUSH
40441: CALL_OW 1
40445: ST_TO_ADDR
// if missile < 2 then
40446: LD_VAR 0 14
40450: PUSH
40451: LD_INT 2
40453: LESS
40454: IFFALSE 40458
// exit ;
40456: GO 40680
// x := GetX ( enemy ) ;
40458: LD_ADDR_VAR 0 4
40462: PUSH
40463: LD_VAR 0 10
40467: PPUSH
40468: CALL_OW 250
40472: ST_TO_ADDR
// y := GetY ( enemy ) ;
40473: LD_ADDR_VAR 0 5
40477: PUSH
40478: LD_VAR 0 10
40482: PPUSH
40483: CALL_OW 251
40487: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40488: LD_ADDR_VAR 0 6
40492: PUSH
40493: LD_VAR 0 4
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PPUSH
40502: LD_INT 1
40504: PPUSH
40505: CALL_OW 12
40509: PLUS
40510: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40511: LD_ADDR_VAR 0 7
40515: PUSH
40516: LD_VAR 0 5
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PPUSH
40525: LD_INT 1
40527: PPUSH
40528: CALL_OW 12
40532: PLUS
40533: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40534: LD_VAR 0 6
40538: PPUSH
40539: LD_VAR 0 7
40543: PPUSH
40544: CALL_OW 488
40548: NOT
40549: IFFALSE 40571
// begin _x := x ;
40551: LD_ADDR_VAR 0 6
40555: PUSH
40556: LD_VAR 0 4
40560: ST_TO_ADDR
// _y := y ;
40561: LD_ADDR_VAR 0 7
40565: PUSH
40566: LD_VAR 0 5
40570: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40571: LD_ADDR_VAR 0 3
40575: PUSH
40576: LD_INT 1
40578: PPUSH
40579: LD_VAR 0 14
40583: PPUSH
40584: CALL_OW 12
40588: ST_TO_ADDR
// case i of 1 :
40589: LD_VAR 0 3
40593: PUSH
40594: LD_INT 1
40596: DOUBLE
40597: EQUAL
40598: IFTRUE 40602
40600: GO 40619
40602: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40603: LD_VAR 0 1
40607: PPUSH
40608: LD_VAR 0 10
40612: PPUSH
40613: CALL_OW 115
40617: GO 40680
40619: LD_INT 2
40621: DOUBLE
40622: EQUAL
40623: IFTRUE 40627
40625: GO 40649
40627: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40628: LD_VAR 0 1
40632: PPUSH
40633: LD_VAR 0 6
40637: PPUSH
40638: LD_VAR 0 7
40642: PPUSH
40643: CALL_OW 153
40647: GO 40680
40649: LD_INT 3
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40657
40655: GO 40679
40657: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40658: LD_VAR 0 1
40662: PPUSH
40663: LD_VAR 0 6
40667: PPUSH
40668: LD_VAR 0 7
40672: PPUSH
40673: CALL_OW 154
40677: GO 40680
40679: POP
// end ;
40680: LD_VAR 0 2
40684: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40685: LD_INT 0
40687: PPUSH
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
// if not unit or not building then
40693: LD_VAR 0 1
40697: NOT
40698: PUSH
40699: LD_VAR 0 2
40703: NOT
40704: OR
40705: IFFALSE 40709
// exit ;
40707: GO 40867
// x := GetX ( building ) ;
40709: LD_ADDR_VAR 0 5
40713: PUSH
40714: LD_VAR 0 2
40718: PPUSH
40719: CALL_OW 250
40723: ST_TO_ADDR
// y := GetY ( building ) ;
40724: LD_ADDR_VAR 0 6
40728: PUSH
40729: LD_VAR 0 2
40733: PPUSH
40734: CALL_OW 251
40738: ST_TO_ADDR
// for i = 0 to 5 do
40739: LD_ADDR_VAR 0 4
40743: PUSH
40744: DOUBLE
40745: LD_INT 0
40747: DEC
40748: ST_TO_ADDR
40749: LD_INT 5
40751: PUSH
40752: FOR_TO
40753: IFFALSE 40865
// begin _x := ShiftX ( x , i , 3 ) ;
40755: LD_ADDR_VAR 0 7
40759: PUSH
40760: LD_VAR 0 5
40764: PPUSH
40765: LD_VAR 0 4
40769: PPUSH
40770: LD_INT 3
40772: PPUSH
40773: CALL_OW 272
40777: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40778: LD_ADDR_VAR 0 8
40782: PUSH
40783: LD_VAR 0 6
40787: PPUSH
40788: LD_VAR 0 4
40792: PPUSH
40793: LD_INT 3
40795: PPUSH
40796: CALL_OW 273
40800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40801: LD_VAR 0 7
40805: PPUSH
40806: LD_VAR 0 8
40810: PPUSH
40811: CALL_OW 488
40815: NOT
40816: IFFALSE 40820
// continue ;
40818: GO 40752
// if HexInfo ( _x , _y ) = 0 then
40820: LD_VAR 0 7
40824: PPUSH
40825: LD_VAR 0 8
40829: PPUSH
40830: CALL_OW 428
40834: PUSH
40835: LD_INT 0
40837: EQUAL
40838: IFFALSE 40863
// begin ComMoveXY ( unit , _x , _y ) ;
40840: LD_VAR 0 1
40844: PPUSH
40845: LD_VAR 0 7
40849: PPUSH
40850: LD_VAR 0 8
40854: PPUSH
40855: CALL_OW 111
// exit ;
40859: POP
40860: POP
40861: GO 40867
// end ; end ;
40863: GO 40752
40865: POP
40866: POP
// end ;
40867: LD_VAR 0 3
40871: RET
// export function ScanBase ( side , base_area ) ; begin
40872: LD_INT 0
40874: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40875: LD_ADDR_VAR 0 3
40879: PUSH
40880: LD_VAR 0 2
40884: PPUSH
40885: LD_INT 81
40887: PUSH
40888: LD_VAR 0 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PPUSH
40897: CALL_OW 70
40901: ST_TO_ADDR
// end ;
40902: LD_VAR 0 3
40906: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40907: LD_INT 0
40909: PPUSH
40910: PPUSH
40911: PPUSH
40912: PPUSH
// result := false ;
40913: LD_ADDR_VAR 0 2
40917: PUSH
40918: LD_INT 0
40920: ST_TO_ADDR
// side := GetSide ( unit ) ;
40921: LD_ADDR_VAR 0 3
40925: PUSH
40926: LD_VAR 0 1
40930: PPUSH
40931: CALL_OW 255
40935: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40936: LD_ADDR_VAR 0 4
40940: PUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 248
40950: ST_TO_ADDR
// case nat of 1 :
40951: LD_VAR 0 4
40955: PUSH
40956: LD_INT 1
40958: DOUBLE
40959: EQUAL
40960: IFTRUE 40964
40962: GO 40975
40964: POP
// tech := tech_lassight ; 2 :
40965: LD_ADDR_VAR 0 5
40969: PUSH
40970: LD_INT 12
40972: ST_TO_ADDR
40973: GO 41014
40975: LD_INT 2
40977: DOUBLE
40978: EQUAL
40979: IFTRUE 40983
40981: GO 40994
40983: POP
// tech := tech_mortar ; 3 :
40984: LD_ADDR_VAR 0 5
40988: PUSH
40989: LD_INT 41
40991: ST_TO_ADDR
40992: GO 41014
40994: LD_INT 3
40996: DOUBLE
40997: EQUAL
40998: IFTRUE 41002
41000: GO 41013
41002: POP
// tech := tech_bazooka ; end ;
41003: LD_ADDR_VAR 0 5
41007: PUSH
41008: LD_INT 44
41010: ST_TO_ADDR
41011: GO 41014
41013: POP
// if Researched ( side , tech ) then
41014: LD_VAR 0 3
41018: PPUSH
41019: LD_VAR 0 5
41023: PPUSH
41024: CALL_OW 325
41028: IFFALSE 41055
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41030: LD_ADDR_VAR 0 2
41034: PUSH
41035: LD_INT 5
41037: PUSH
41038: LD_INT 8
41040: PUSH
41041: LD_INT 9
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: PUSH
41049: LD_VAR 0 4
41053: ARRAY
41054: ST_TO_ADDR
// end ;
41055: LD_VAR 0 2
41059: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41060: LD_INT 0
41062: PPUSH
41063: PPUSH
41064: PPUSH
// if not mines then
41065: LD_VAR 0 2
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41218
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41074: LD_ADDR_VAR 0 5
41078: PUSH
41079: LD_INT 81
41081: PUSH
41082: LD_VAR 0 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: LD_INT 21
41096: PUSH
41097: LD_INT 3
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PPUSH
41112: CALL_OW 69
41116: ST_TO_ADDR
// for i in mines do
41117: LD_ADDR_VAR 0 4
41121: PUSH
41122: LD_VAR 0 2
41126: PUSH
41127: FOR_IN
41128: IFFALSE 41216
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41130: LD_VAR 0 4
41134: PUSH
41135: LD_INT 1
41137: ARRAY
41138: PPUSH
41139: LD_VAR 0 4
41143: PUSH
41144: LD_INT 2
41146: ARRAY
41147: PPUSH
41148: CALL_OW 458
41152: NOT
41153: IFFALSE 41157
// continue ;
41155: GO 41127
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41157: LD_VAR 0 4
41161: PUSH
41162: LD_INT 1
41164: ARRAY
41165: PPUSH
41166: LD_VAR 0 4
41170: PUSH
41171: LD_INT 2
41173: ARRAY
41174: PPUSH
41175: CALL_OW 428
41179: PUSH
41180: LD_VAR 0 5
41184: IN
41185: IFFALSE 41214
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41187: LD_VAR 0 4
41191: PUSH
41192: LD_INT 1
41194: ARRAY
41195: PPUSH
41196: LD_VAR 0 4
41200: PUSH
41201: LD_INT 2
41203: ARRAY
41204: PPUSH
41205: LD_VAR 0 1
41209: PPUSH
41210: CALL_OW 456
// end ;
41214: GO 41127
41216: POP
41217: POP
// end ;
41218: LD_VAR 0 3
41222: RET
// export function Count ( array ) ; begin
41223: LD_INT 0
41225: PPUSH
// result := array + 0 ;
41226: LD_ADDR_VAR 0 2
41230: PUSH
41231: LD_VAR 0 1
41235: PUSH
41236: LD_INT 0
41238: PLUS
41239: ST_TO_ADDR
// end ;
41240: LD_VAR 0 2
41244: RET
// export function IsEmpty ( building ) ; begin
41245: LD_INT 0
41247: PPUSH
// if not building then
41248: LD_VAR 0 1
41252: NOT
41253: IFFALSE 41257
// exit ;
41255: GO 41300
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41257: LD_ADDR_VAR 0 2
41261: PUSH
41262: LD_VAR 0 1
41266: PUSH
41267: LD_INT 22
41269: PUSH
41270: LD_VAR 0 1
41274: PPUSH
41275: CALL_OW 255
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 58
41286: PUSH
41287: EMPTY
41288: LIST
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PPUSH
41294: CALL_OW 69
41298: IN
41299: ST_TO_ADDR
// end ;
41300: LD_VAR 0 2
41304: RET
// export function IsNotFull ( building ) ; var places ; begin
41305: LD_INT 0
41307: PPUSH
41308: PPUSH
// if not building then
41309: LD_VAR 0 1
41313: NOT
41314: IFFALSE 41318
// exit ;
41316: GO 41346
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41318: LD_ADDR_VAR 0 2
41322: PUSH
41323: LD_VAR 0 1
41327: PPUSH
41328: LD_INT 3
41330: PUSH
41331: LD_INT 62
41333: PUSH
41334: EMPTY
41335: LIST
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PPUSH
41341: CALL_OW 72
41345: ST_TO_ADDR
// end ;
41346: LD_VAR 0 2
41350: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41351: LD_INT 0
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
// tmp := [ ] ;
41357: LD_ADDR_VAR 0 3
41361: PUSH
41362: EMPTY
41363: ST_TO_ADDR
// list := [ ] ;
41364: LD_ADDR_VAR 0 5
41368: PUSH
41369: EMPTY
41370: ST_TO_ADDR
// for i = 16 to 25 do
41371: LD_ADDR_VAR 0 4
41375: PUSH
41376: DOUBLE
41377: LD_INT 16
41379: DEC
41380: ST_TO_ADDR
41381: LD_INT 25
41383: PUSH
41384: FOR_TO
41385: IFFALSE 41458
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41387: LD_ADDR_VAR 0 3
41391: PUSH
41392: LD_VAR 0 3
41396: PUSH
41397: LD_INT 22
41399: PUSH
41400: LD_VAR 0 1
41404: PPUSH
41405: CALL_OW 255
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 91
41416: PUSH
41417: LD_VAR 0 1
41421: PUSH
41422: LD_INT 6
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 30
41432: PUSH
41433: LD_VAR 0 4
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: LIST
41446: PUSH
41447: EMPTY
41448: LIST
41449: PPUSH
41450: CALL_OW 69
41454: ADD
41455: ST_TO_ADDR
41456: GO 41384
41458: POP
41459: POP
// for i = 1 to tmp do
41460: LD_ADDR_VAR 0 4
41464: PUSH
41465: DOUBLE
41466: LD_INT 1
41468: DEC
41469: ST_TO_ADDR
41470: LD_VAR 0 3
41474: PUSH
41475: FOR_TO
41476: IFFALSE 41564
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41478: LD_ADDR_VAR 0 5
41482: PUSH
41483: LD_VAR 0 5
41487: PUSH
41488: LD_VAR 0 3
41492: PUSH
41493: LD_VAR 0 4
41497: ARRAY
41498: PPUSH
41499: CALL_OW 266
41503: PUSH
41504: LD_VAR 0 3
41508: PUSH
41509: LD_VAR 0 4
41513: ARRAY
41514: PPUSH
41515: CALL_OW 250
41519: PUSH
41520: LD_VAR 0 3
41524: PUSH
41525: LD_VAR 0 4
41529: ARRAY
41530: PPUSH
41531: CALL_OW 251
41535: PUSH
41536: LD_VAR 0 3
41540: PUSH
41541: LD_VAR 0 4
41545: ARRAY
41546: PPUSH
41547: CALL_OW 254
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: PUSH
41558: EMPTY
41559: LIST
41560: ADD
41561: ST_TO_ADDR
41562: GO 41475
41564: POP
41565: POP
// result := list ;
41566: LD_ADDR_VAR 0 2
41570: PUSH
41571: LD_VAR 0 5
41575: ST_TO_ADDR
// end ;
41576: LD_VAR 0 2
41580: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41581: LD_INT 0
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
// if not factory then
41590: LD_VAR 0 1
41594: NOT
41595: IFFALSE 41599
// exit ;
41597: GO 42192
// if control = control_apeman then
41599: LD_VAR 0 4
41603: PUSH
41604: LD_INT 5
41606: EQUAL
41607: IFFALSE 41716
// begin tmp := UnitsInside ( factory ) ;
41609: LD_ADDR_VAR 0 8
41613: PUSH
41614: LD_VAR 0 1
41618: PPUSH
41619: CALL_OW 313
41623: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41624: LD_VAR 0 8
41628: PPUSH
41629: LD_INT 25
41631: PUSH
41632: LD_INT 12
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PPUSH
41639: CALL_OW 72
41643: NOT
41644: IFFALSE 41654
// control := control_manual ;
41646: LD_ADDR_VAR 0 4
41650: PUSH
41651: LD_INT 1
41653: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41654: LD_ADDR_VAR 0 8
41658: PUSH
41659: LD_VAR 0 1
41663: PPUSH
41664: CALL 41351 0 1
41668: ST_TO_ADDR
// if tmp then
41669: LD_VAR 0 8
41673: IFFALSE 41716
// begin for i in tmp do
41675: LD_ADDR_VAR 0 7
41679: PUSH
41680: LD_VAR 0 8
41684: PUSH
41685: FOR_IN
41686: IFFALSE 41714
// if i [ 1 ] = b_ext_radio then
41688: LD_VAR 0 7
41692: PUSH
41693: LD_INT 1
41695: ARRAY
41696: PUSH
41697: LD_INT 22
41699: EQUAL
41700: IFFALSE 41712
// begin control := control_remote ;
41702: LD_ADDR_VAR 0 4
41706: PUSH
41707: LD_INT 2
41709: ST_TO_ADDR
// break ;
41710: GO 41714
// end ;
41712: GO 41685
41714: POP
41715: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_VAR 0 2
41725: PPUSH
41726: LD_VAR 0 3
41730: PPUSH
41731: LD_VAR 0 4
41735: PPUSH
41736: LD_VAR 0 5
41740: PPUSH
41741: CALL_OW 448
41745: IFFALSE 41780
// begin result := [ chassis , engine , control , weapon ] ;
41747: LD_ADDR_VAR 0 6
41751: PUSH
41752: LD_VAR 0 2
41756: PUSH
41757: LD_VAR 0 3
41761: PUSH
41762: LD_VAR 0 4
41766: PUSH
41767: LD_VAR 0 5
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: ST_TO_ADDR
// exit ;
41778: GO 42192
// end ; _chassis := AvailableChassisList ( factory ) ;
41780: LD_ADDR_VAR 0 9
41784: PUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 475
41794: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41795: LD_ADDR_VAR 0 11
41799: PUSH
41800: LD_VAR 0 1
41804: PPUSH
41805: CALL_OW 476
41809: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41810: LD_ADDR_VAR 0 12
41814: PUSH
41815: LD_VAR 0 1
41819: PPUSH
41820: CALL_OW 477
41824: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41825: LD_ADDR_VAR 0 10
41829: PUSH
41830: LD_VAR 0 1
41834: PPUSH
41835: CALL_OW 478
41839: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41840: LD_VAR 0 9
41844: NOT
41845: PUSH
41846: LD_VAR 0 11
41850: NOT
41851: OR
41852: PUSH
41853: LD_VAR 0 12
41857: NOT
41858: OR
41859: PUSH
41860: LD_VAR 0 10
41864: NOT
41865: OR
41866: IFFALSE 41901
// begin result := [ chassis , engine , control , weapon ] ;
41868: LD_ADDR_VAR 0 6
41872: PUSH
41873: LD_VAR 0 2
41877: PUSH
41878: LD_VAR 0 3
41882: PUSH
41883: LD_VAR 0 4
41887: PUSH
41888: LD_VAR 0 5
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: ST_TO_ADDR
// exit ;
41899: GO 42192
// end ; if not chassis in _chassis then
41901: LD_VAR 0 2
41905: PUSH
41906: LD_VAR 0 9
41910: IN
41911: NOT
41912: IFFALSE 41938
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41914: LD_ADDR_VAR 0 2
41918: PUSH
41919: LD_VAR 0 9
41923: PUSH
41924: LD_INT 1
41926: PPUSH
41927: LD_VAR 0 9
41931: PPUSH
41932: CALL_OW 12
41936: ARRAY
41937: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41938: LD_VAR 0 2
41942: PPUSH
41943: LD_VAR 0 3
41947: PPUSH
41948: CALL 42197 0 2
41952: NOT
41953: IFFALSE 42012
// repeat engine := _engine [ 1 ] ;
41955: LD_ADDR_VAR 0 3
41959: PUSH
41960: LD_VAR 0 11
41964: PUSH
41965: LD_INT 1
41967: ARRAY
41968: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41969: LD_ADDR_VAR 0 11
41973: PUSH
41974: LD_VAR 0 11
41978: PPUSH
41979: LD_INT 1
41981: PPUSH
41982: CALL_OW 3
41986: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41987: LD_VAR 0 2
41991: PPUSH
41992: LD_VAR 0 3
41996: PPUSH
41997: CALL 42197 0 2
42001: PUSH
42002: LD_VAR 0 11
42006: PUSH
42007: EMPTY
42008: EQUAL
42009: OR
42010: IFFALSE 41955
// if not control in _control then
42012: LD_VAR 0 4
42016: PUSH
42017: LD_VAR 0 12
42021: IN
42022: NOT
42023: IFFALSE 42049
// control := _control [ rand ( 1 , _control ) ] ;
42025: LD_ADDR_VAR 0 4
42029: PUSH
42030: LD_VAR 0 12
42034: PUSH
42035: LD_INT 1
42037: PPUSH
42038: LD_VAR 0 12
42042: PPUSH
42043: CALL_OW 12
42047: ARRAY
42048: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42049: LD_VAR 0 2
42053: PPUSH
42054: LD_VAR 0 5
42058: PPUSH
42059: CALL 42417 0 2
42063: NOT
42064: IFFALSE 42123
// repeat weapon := _weapon [ 1 ] ;
42066: LD_ADDR_VAR 0 5
42070: PUSH
42071: LD_VAR 0 10
42075: PUSH
42076: LD_INT 1
42078: ARRAY
42079: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42080: LD_ADDR_VAR 0 10
42084: PUSH
42085: LD_VAR 0 10
42089: PPUSH
42090: LD_INT 1
42092: PPUSH
42093: CALL_OW 3
42097: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42098: LD_VAR 0 2
42102: PPUSH
42103: LD_VAR 0 5
42107: PPUSH
42108: CALL 42417 0 2
42112: PUSH
42113: LD_VAR 0 10
42117: PUSH
42118: EMPTY
42119: EQUAL
42120: OR
42121: IFFALSE 42066
// result := [ ] ;
42123: LD_ADDR_VAR 0 6
42127: PUSH
42128: EMPTY
42129: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42130: LD_VAR 0 1
42134: PPUSH
42135: LD_VAR 0 2
42139: PPUSH
42140: LD_VAR 0 3
42144: PPUSH
42145: LD_VAR 0 4
42149: PPUSH
42150: LD_VAR 0 5
42154: PPUSH
42155: CALL_OW 448
42159: IFFALSE 42192
// result := [ chassis , engine , control , weapon ] ;
42161: LD_ADDR_VAR 0 6
42165: PUSH
42166: LD_VAR 0 2
42170: PUSH
42171: LD_VAR 0 3
42175: PUSH
42176: LD_VAR 0 4
42180: PUSH
42181: LD_VAR 0 5
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
// end ;
42192: LD_VAR 0 6
42196: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42197: LD_INT 0
42199: PPUSH
// if not chassis or not engine then
42200: LD_VAR 0 1
42204: NOT
42205: PUSH
42206: LD_VAR 0 2
42210: NOT
42211: OR
42212: IFFALSE 42216
// exit ;
42214: GO 42412
// case engine of engine_solar :
42216: LD_VAR 0 2
42220: PUSH
42221: LD_INT 2
42223: DOUBLE
42224: EQUAL
42225: IFTRUE 42229
42227: GO 42267
42229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42230: LD_ADDR_VAR 0 3
42234: PUSH
42235: LD_INT 11
42237: PUSH
42238: LD_INT 12
42240: PUSH
42241: LD_INT 13
42243: PUSH
42244: LD_INT 14
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: ST_TO_ADDR
42265: GO 42396
42267: LD_INT 1
42269: DOUBLE
42270: EQUAL
42271: IFTRUE 42275
42273: GO 42337
42275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_INT 11
42283: PUSH
42284: LD_INT 12
42286: PUSH
42287: LD_INT 13
42289: PUSH
42290: LD_INT 14
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: LD_INT 4
42304: PUSH
42305: LD_INT 5
42307: PUSH
42308: LD_INT 21
42310: PUSH
42311: LD_INT 23
42313: PUSH
42314: LD_INT 22
42316: PUSH
42317: LD_INT 24
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
42335: GO 42396
42337: LD_INT 3
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42395
42345: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42346: LD_ADDR_VAR 0 3
42350: PUSH
42351: LD_INT 13
42353: PUSH
42354: LD_INT 14
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 4
42365: PUSH
42366: LD_INT 5
42368: PUSH
42369: LD_INT 21
42371: PUSH
42372: LD_INT 22
42374: PUSH
42375: LD_INT 23
42377: PUSH
42378: LD_INT 24
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: ST_TO_ADDR
42393: GO 42396
42395: POP
// result := ( chassis in result ) ;
42396: LD_ADDR_VAR 0 3
42400: PUSH
42401: LD_VAR 0 1
42405: PUSH
42406: LD_VAR 0 3
42410: IN
42411: ST_TO_ADDR
// end ;
42412: LD_VAR 0 3
42416: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42417: LD_INT 0
42419: PPUSH
// if not chassis or not weapon then
42420: LD_VAR 0 1
42424: NOT
42425: PUSH
42426: LD_VAR 0 2
42430: NOT
42431: OR
42432: IFFALSE 42436
// exit ;
42434: GO 43496
// case weapon of us_machine_gun :
42436: LD_VAR 0 2
42440: PUSH
42441: LD_INT 2
42443: DOUBLE
42444: EQUAL
42445: IFTRUE 42449
42447: GO 42479
42449: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42450: LD_ADDR_VAR 0 3
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: LD_INT 4
42466: PUSH
42467: LD_INT 5
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: ST_TO_ADDR
42477: GO 43480
42479: LD_INT 3
42481: DOUBLE
42482: EQUAL
42483: IFTRUE 42487
42485: GO 42517
42487: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42488: LD_ADDR_VAR 0 3
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 3
42501: PUSH
42502: LD_INT 4
42504: PUSH
42505: LD_INT 5
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: ST_TO_ADDR
42515: GO 43480
42517: LD_INT 11
42519: DOUBLE
42520: EQUAL
42521: IFTRUE 42525
42523: GO 42555
42525: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42526: LD_ADDR_VAR 0 3
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: LD_INT 4
42542: PUSH
42543: LD_INT 5
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: ST_TO_ADDR
42553: GO 43480
42555: LD_INT 4
42557: DOUBLE
42558: EQUAL
42559: IFTRUE 42563
42561: GO 42589
42563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42564: LD_ADDR_VAR 0 3
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 3
42574: PUSH
42575: LD_INT 4
42577: PUSH
42578: LD_INT 5
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
42587: GO 43480
42589: LD_INT 5
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42597
42595: GO 42623
42597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42598: LD_ADDR_VAR 0 3
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: LD_INT 4
42611: PUSH
42612: LD_INT 5
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: ST_TO_ADDR
42621: GO 43480
42623: LD_INT 9
42625: DOUBLE
42626: EQUAL
42627: IFTRUE 42631
42629: GO 42657
42631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42632: LD_ADDR_VAR 0 3
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: LD_INT 4
42645: PUSH
42646: LD_INT 5
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
42655: GO 43480
42657: LD_INT 7
42659: DOUBLE
42660: EQUAL
42661: IFTRUE 42665
42663: GO 42691
42665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42666: LD_ADDR_VAR 0 3
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: LD_INT 4
42679: PUSH
42680: LD_INT 5
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: ST_TO_ADDR
42689: GO 43480
42691: LD_INT 12
42693: DOUBLE
42694: EQUAL
42695: IFTRUE 42699
42697: GO 42725
42699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42700: LD_ADDR_VAR 0 3
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: LD_INT 3
42710: PUSH
42711: LD_INT 4
42713: PUSH
42714: LD_INT 5
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: ST_TO_ADDR
42723: GO 43480
42725: LD_INT 13
42727: DOUBLE
42728: EQUAL
42729: IFTRUE 42733
42731: GO 42759
42733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42734: LD_ADDR_VAR 0 3
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 3
42744: PUSH
42745: LD_INT 4
42747: PUSH
42748: LD_INT 5
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: ST_TO_ADDR
42757: GO 43480
42759: LD_INT 14
42761: DOUBLE
42762: EQUAL
42763: IFTRUE 42767
42765: GO 42785
42767: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42768: LD_ADDR_VAR 0 3
42772: PUSH
42773: LD_INT 4
42775: PUSH
42776: LD_INT 5
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: ST_TO_ADDR
42783: GO 43480
42785: LD_INT 6
42787: DOUBLE
42788: EQUAL
42789: IFTRUE 42793
42791: GO 42811
42793: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42794: LD_ADDR_VAR 0 3
42798: PUSH
42799: LD_INT 4
42801: PUSH
42802: LD_INT 5
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: ST_TO_ADDR
42809: GO 43480
42811: LD_INT 10
42813: DOUBLE
42814: EQUAL
42815: IFTRUE 42819
42817: GO 42837
42819: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42820: LD_ADDR_VAR 0 3
42824: PUSH
42825: LD_INT 4
42827: PUSH
42828: LD_INT 5
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: ST_TO_ADDR
42835: GO 43480
42837: LD_INT 22
42839: DOUBLE
42840: EQUAL
42841: IFTRUE 42845
42843: GO 42871
42845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42846: LD_ADDR_VAR 0 3
42850: PUSH
42851: LD_INT 11
42853: PUSH
42854: LD_INT 12
42856: PUSH
42857: LD_INT 13
42859: PUSH
42860: LD_INT 14
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: ST_TO_ADDR
42869: GO 43480
42871: LD_INT 23
42873: DOUBLE
42874: EQUAL
42875: IFTRUE 42879
42877: GO 42905
42879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42880: LD_ADDR_VAR 0 3
42884: PUSH
42885: LD_INT 11
42887: PUSH
42888: LD_INT 12
42890: PUSH
42891: LD_INT 13
42893: PUSH
42894: LD_INT 14
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: ST_TO_ADDR
42903: GO 43480
42905: LD_INT 24
42907: DOUBLE
42908: EQUAL
42909: IFTRUE 42913
42911: GO 42939
42913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42914: LD_ADDR_VAR 0 3
42918: PUSH
42919: LD_INT 11
42921: PUSH
42922: LD_INT 12
42924: PUSH
42925: LD_INT 13
42927: PUSH
42928: LD_INT 14
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
42937: GO 43480
42939: LD_INT 30
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 42973
42947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42948: LD_ADDR_VAR 0 3
42952: PUSH
42953: LD_INT 11
42955: PUSH
42956: LD_INT 12
42958: PUSH
42959: LD_INT 13
42961: PUSH
42962: LD_INT 14
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: ST_TO_ADDR
42971: GO 43480
42973: LD_INT 25
42975: DOUBLE
42976: EQUAL
42977: IFTRUE 42981
42979: GO 42999
42981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42982: LD_ADDR_VAR 0 3
42986: PUSH
42987: LD_INT 13
42989: PUSH
42990: LD_INT 14
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: ST_TO_ADDR
42997: GO 43480
42999: LD_INT 27
43001: DOUBLE
43002: EQUAL
43003: IFTRUE 43007
43005: GO 43025
43007: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43008: LD_ADDR_VAR 0 3
43012: PUSH
43013: LD_INT 13
43015: PUSH
43016: LD_INT 14
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: ST_TO_ADDR
43023: GO 43480
43025: LD_INT 92
43027: DOUBLE
43028: EQUAL
43029: IFTRUE 43033
43031: GO 43059
43033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43034: LD_ADDR_VAR 0 3
43038: PUSH
43039: LD_INT 11
43041: PUSH
43042: LD_INT 12
43044: PUSH
43045: LD_INT 13
43047: PUSH
43048: LD_INT 14
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
43057: GO 43480
43059: LD_INT 28
43061: DOUBLE
43062: EQUAL
43063: IFTRUE 43067
43065: GO 43085
43067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43068: LD_ADDR_VAR 0 3
43072: PUSH
43073: LD_INT 13
43075: PUSH
43076: LD_INT 14
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: ST_TO_ADDR
43083: GO 43480
43085: LD_INT 29
43087: DOUBLE
43088: EQUAL
43089: IFTRUE 43093
43091: GO 43111
43093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43094: LD_ADDR_VAR 0 3
43098: PUSH
43099: LD_INT 13
43101: PUSH
43102: LD_INT 14
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: ST_TO_ADDR
43109: GO 43480
43111: LD_INT 31
43113: DOUBLE
43114: EQUAL
43115: IFTRUE 43119
43117: GO 43137
43119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43120: LD_ADDR_VAR 0 3
43124: PUSH
43125: LD_INT 13
43127: PUSH
43128: LD_INT 14
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: ST_TO_ADDR
43135: GO 43480
43137: LD_INT 26
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43145
43143: GO 43163
43145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43146: LD_ADDR_VAR 0 3
43150: PUSH
43151: LD_INT 13
43153: PUSH
43154: LD_INT 14
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: ST_TO_ADDR
43161: GO 43480
43163: LD_INT 42
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43197
43171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43172: LD_ADDR_VAR 0 3
43176: PUSH
43177: LD_INT 21
43179: PUSH
43180: LD_INT 22
43182: PUSH
43183: LD_INT 23
43185: PUSH
43186: LD_INT 24
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
43195: GO 43480
43197: LD_INT 43
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43205
43203: GO 43231
43205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43206: LD_ADDR_VAR 0 3
43210: PUSH
43211: LD_INT 21
43213: PUSH
43214: LD_INT 22
43216: PUSH
43217: LD_INT 23
43219: PUSH
43220: LD_INT 24
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: ST_TO_ADDR
43229: GO 43480
43231: LD_INT 44
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43239
43237: GO 43265
43239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43240: LD_ADDR_VAR 0 3
43244: PUSH
43245: LD_INT 21
43247: PUSH
43248: LD_INT 22
43250: PUSH
43251: LD_INT 23
43253: PUSH
43254: LD_INT 24
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: ST_TO_ADDR
43263: GO 43480
43265: LD_INT 45
43267: DOUBLE
43268: EQUAL
43269: IFTRUE 43273
43271: GO 43299
43273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43274: LD_ADDR_VAR 0 3
43278: PUSH
43279: LD_INT 21
43281: PUSH
43282: LD_INT 22
43284: PUSH
43285: LD_INT 23
43287: PUSH
43288: LD_INT 24
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: ST_TO_ADDR
43297: GO 43480
43299: LD_INT 49
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43307
43305: GO 43333
43307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43308: LD_ADDR_VAR 0 3
43312: PUSH
43313: LD_INT 21
43315: PUSH
43316: LD_INT 22
43318: PUSH
43319: LD_INT 23
43321: PUSH
43322: LD_INT 24
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: ST_TO_ADDR
43331: GO 43480
43333: LD_INT 51
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43367
43341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43342: LD_ADDR_VAR 0 3
43346: PUSH
43347: LD_INT 21
43349: PUSH
43350: LD_INT 22
43352: PUSH
43353: LD_INT 23
43355: PUSH
43356: LD_INT 24
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
43365: GO 43480
43367: LD_INT 52
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 43401
43375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43376: LD_ADDR_VAR 0 3
43380: PUSH
43381: LD_INT 21
43383: PUSH
43384: LD_INT 22
43386: PUSH
43387: LD_INT 23
43389: PUSH
43390: LD_INT 24
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
43399: GO 43480
43401: LD_INT 53
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 43427
43409: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_INT 23
43417: PUSH
43418: LD_INT 24
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: ST_TO_ADDR
43425: GO 43480
43427: LD_INT 46
43429: DOUBLE
43430: EQUAL
43431: IFTRUE 43435
43433: GO 43453
43435: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43436: LD_ADDR_VAR 0 3
43440: PUSH
43441: LD_INT 23
43443: PUSH
43444: LD_INT 24
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: ST_TO_ADDR
43451: GO 43480
43453: LD_INT 47
43455: DOUBLE
43456: EQUAL
43457: IFTRUE 43461
43459: GO 43479
43461: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43462: LD_ADDR_VAR 0 3
43466: PUSH
43467: LD_INT 23
43469: PUSH
43470: LD_INT 24
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: ST_TO_ADDR
43477: GO 43480
43479: POP
// result := ( chassis in result ) ;
43480: LD_ADDR_VAR 0 3
43484: PUSH
43485: LD_VAR 0 1
43489: PUSH
43490: LD_VAR 0 3
43494: IN
43495: ST_TO_ADDR
// end ;
43496: LD_VAR 0 3
43500: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43501: LD_INT 0
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
// result := array ;
43510: LD_ADDR_VAR 0 5
43514: PUSH
43515: LD_VAR 0 1
43519: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43520: LD_VAR 0 1
43524: NOT
43525: PUSH
43526: LD_VAR 0 2
43530: NOT
43531: OR
43532: PUSH
43533: LD_VAR 0 3
43537: NOT
43538: OR
43539: PUSH
43540: LD_VAR 0 2
43544: PUSH
43545: LD_VAR 0 1
43549: GREATER
43550: OR
43551: PUSH
43552: LD_VAR 0 3
43556: PUSH
43557: LD_VAR 0 1
43561: GREATER
43562: OR
43563: IFFALSE 43567
// exit ;
43565: GO 43863
// if direction then
43567: LD_VAR 0 4
43571: IFFALSE 43635
// begin d := 1 ;
43573: LD_ADDR_VAR 0 9
43577: PUSH
43578: LD_INT 1
43580: ST_TO_ADDR
// if i_from > i_to then
43581: LD_VAR 0 2
43585: PUSH
43586: LD_VAR 0 3
43590: GREATER
43591: IFFALSE 43617
// length := ( array - i_from ) + i_to else
43593: LD_ADDR_VAR 0 11
43597: PUSH
43598: LD_VAR 0 1
43602: PUSH
43603: LD_VAR 0 2
43607: MINUS
43608: PUSH
43609: LD_VAR 0 3
43613: PLUS
43614: ST_TO_ADDR
43615: GO 43633
// length := i_to - i_from ;
43617: LD_ADDR_VAR 0 11
43621: PUSH
43622: LD_VAR 0 3
43626: PUSH
43627: LD_VAR 0 2
43631: MINUS
43632: ST_TO_ADDR
// end else
43633: GO 43696
// begin d := - 1 ;
43635: LD_ADDR_VAR 0 9
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: ST_TO_ADDR
// if i_from > i_to then
43644: LD_VAR 0 2
43648: PUSH
43649: LD_VAR 0 3
43653: GREATER
43654: IFFALSE 43674
// length := i_from - i_to else
43656: LD_ADDR_VAR 0 11
43660: PUSH
43661: LD_VAR 0 2
43665: PUSH
43666: LD_VAR 0 3
43670: MINUS
43671: ST_TO_ADDR
43672: GO 43696
// length := ( array - i_to ) + i_from ;
43674: LD_ADDR_VAR 0 11
43678: PUSH
43679: LD_VAR 0 1
43683: PUSH
43684: LD_VAR 0 3
43688: MINUS
43689: PUSH
43690: LD_VAR 0 2
43694: PLUS
43695: ST_TO_ADDR
// end ; if not length then
43696: LD_VAR 0 11
43700: NOT
43701: IFFALSE 43705
// exit ;
43703: GO 43863
// tmp := array ;
43705: LD_ADDR_VAR 0 10
43709: PUSH
43710: LD_VAR 0 1
43714: ST_TO_ADDR
// for i = 1 to length do
43715: LD_ADDR_VAR 0 6
43719: PUSH
43720: DOUBLE
43721: LD_INT 1
43723: DEC
43724: ST_TO_ADDR
43725: LD_VAR 0 11
43729: PUSH
43730: FOR_TO
43731: IFFALSE 43851
// begin for j = 1 to array do
43733: LD_ADDR_VAR 0 7
43737: PUSH
43738: DOUBLE
43739: LD_INT 1
43741: DEC
43742: ST_TO_ADDR
43743: LD_VAR 0 1
43747: PUSH
43748: FOR_TO
43749: IFFALSE 43837
// begin k := j + d ;
43751: LD_ADDR_VAR 0 8
43755: PUSH
43756: LD_VAR 0 7
43760: PUSH
43761: LD_VAR 0 9
43765: PLUS
43766: ST_TO_ADDR
// if k > array then
43767: LD_VAR 0 8
43771: PUSH
43772: LD_VAR 0 1
43776: GREATER
43777: IFFALSE 43787
// k := 1 ;
43779: LD_ADDR_VAR 0 8
43783: PUSH
43784: LD_INT 1
43786: ST_TO_ADDR
// if not k then
43787: LD_VAR 0 8
43791: NOT
43792: IFFALSE 43804
// k := array ;
43794: LD_ADDR_VAR 0 8
43798: PUSH
43799: LD_VAR 0 1
43803: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43804: LD_ADDR_VAR 0 10
43808: PUSH
43809: LD_VAR 0 10
43813: PPUSH
43814: LD_VAR 0 8
43818: PPUSH
43819: LD_VAR 0 1
43823: PUSH
43824: LD_VAR 0 7
43828: ARRAY
43829: PPUSH
43830: CALL_OW 1
43834: ST_TO_ADDR
// end ;
43835: GO 43748
43837: POP
43838: POP
// array := tmp ;
43839: LD_ADDR_VAR 0 1
43843: PUSH
43844: LD_VAR 0 10
43848: ST_TO_ADDR
// end ;
43849: GO 43730
43851: POP
43852: POP
// result := array ;
43853: LD_ADDR_VAR 0 5
43857: PUSH
43858: LD_VAR 0 1
43862: ST_TO_ADDR
// end ;
43863: LD_VAR 0 5
43867: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43868: LD_INT 0
43870: PPUSH
43871: PPUSH
// result := 0 ;
43872: LD_ADDR_VAR 0 3
43876: PUSH
43877: LD_INT 0
43879: ST_TO_ADDR
// if not array or not value in array then
43880: LD_VAR 0 1
43884: NOT
43885: PUSH
43886: LD_VAR 0 2
43890: PUSH
43891: LD_VAR 0 1
43895: IN
43896: NOT
43897: OR
43898: IFFALSE 43902
// exit ;
43900: GO 43956
// for i = 1 to array do
43902: LD_ADDR_VAR 0 4
43906: PUSH
43907: DOUBLE
43908: LD_INT 1
43910: DEC
43911: ST_TO_ADDR
43912: LD_VAR 0 1
43916: PUSH
43917: FOR_TO
43918: IFFALSE 43954
// if value = array [ i ] then
43920: LD_VAR 0 2
43924: PUSH
43925: LD_VAR 0 1
43929: PUSH
43930: LD_VAR 0 4
43934: ARRAY
43935: EQUAL
43936: IFFALSE 43952
// begin result := i ;
43938: LD_ADDR_VAR 0 3
43942: PUSH
43943: LD_VAR 0 4
43947: ST_TO_ADDR
// exit ;
43948: POP
43949: POP
43950: GO 43956
// end ;
43952: GO 43917
43954: POP
43955: POP
// end ;
43956: LD_VAR 0 3
43960: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43961: LD_INT 0
43963: PPUSH
// vc_chassis := chassis ;
43964: LD_ADDR_OWVAR 37
43968: PUSH
43969: LD_VAR 0 1
43973: ST_TO_ADDR
// vc_engine := engine ;
43974: LD_ADDR_OWVAR 39
43978: PUSH
43979: LD_VAR 0 2
43983: ST_TO_ADDR
// vc_control := control ;
43984: LD_ADDR_OWVAR 38
43988: PUSH
43989: LD_VAR 0 3
43993: ST_TO_ADDR
// vc_weapon := weapon ;
43994: LD_ADDR_OWVAR 40
43998: PUSH
43999: LD_VAR 0 4
44003: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44004: LD_ADDR_OWVAR 41
44008: PUSH
44009: LD_VAR 0 5
44013: ST_TO_ADDR
// end ;
44014: LD_VAR 0 6
44018: RET
// export function WantPlant ( unit ) ; var task ; begin
44019: LD_INT 0
44021: PPUSH
44022: PPUSH
// result := false ;
44023: LD_ADDR_VAR 0 2
44027: PUSH
44028: LD_INT 0
44030: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: LD_VAR 0 1
44040: PPUSH
44041: CALL_OW 437
44045: ST_TO_ADDR
// if task then
44046: LD_VAR 0 3
44050: IFFALSE 44078
// if task [ 1 ] [ 1 ] = p then
44052: LD_VAR 0 3
44056: PUSH
44057: LD_INT 1
44059: ARRAY
44060: PUSH
44061: LD_INT 1
44063: ARRAY
44064: PUSH
44065: LD_STRING p
44067: EQUAL
44068: IFFALSE 44078
// result := true ;
44070: LD_ADDR_VAR 0 2
44074: PUSH
44075: LD_INT 1
44077: ST_TO_ADDR
// end ;
44078: LD_VAR 0 2
44082: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44083: LD_INT 0
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
// if pos < 1 then
44089: LD_VAR 0 2
44093: PUSH
44094: LD_INT 1
44096: LESS
44097: IFFALSE 44101
// exit ;
44099: GO 44404
// if pos = 1 then
44101: LD_VAR 0 2
44105: PUSH
44106: LD_INT 1
44108: EQUAL
44109: IFFALSE 44142
// result := Replace ( arr , pos [ 1 ] , value ) else
44111: LD_ADDR_VAR 0 4
44115: PUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: LD_VAR 0 2
44125: PUSH
44126: LD_INT 1
44128: ARRAY
44129: PPUSH
44130: LD_VAR 0 3
44134: PPUSH
44135: CALL_OW 1
44139: ST_TO_ADDR
44140: GO 44404
// begin tmp := arr ;
44142: LD_ADDR_VAR 0 6
44146: PUSH
44147: LD_VAR 0 1
44151: ST_TO_ADDR
// s_arr := [ tmp ] ;
44152: LD_ADDR_VAR 0 7
44156: PUSH
44157: LD_VAR 0 6
44161: PUSH
44162: EMPTY
44163: LIST
44164: ST_TO_ADDR
// for i = 1 to pos - 1 do
44165: LD_ADDR_VAR 0 5
44169: PUSH
44170: DOUBLE
44171: LD_INT 1
44173: DEC
44174: ST_TO_ADDR
44175: LD_VAR 0 2
44179: PUSH
44180: LD_INT 1
44182: MINUS
44183: PUSH
44184: FOR_TO
44185: IFFALSE 44230
// begin tmp := tmp [ pos [ i ] ] ;
44187: LD_ADDR_VAR 0 6
44191: PUSH
44192: LD_VAR 0 6
44196: PUSH
44197: LD_VAR 0 2
44201: PUSH
44202: LD_VAR 0 5
44206: ARRAY
44207: ARRAY
44208: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44209: LD_ADDR_VAR 0 7
44213: PUSH
44214: LD_VAR 0 7
44218: PUSH
44219: LD_VAR 0 6
44223: PUSH
44224: EMPTY
44225: LIST
44226: ADD
44227: ST_TO_ADDR
// end ;
44228: GO 44184
44230: POP
44231: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44232: LD_ADDR_VAR 0 6
44236: PUSH
44237: LD_VAR 0 6
44241: PPUSH
44242: LD_VAR 0 2
44246: PUSH
44247: LD_VAR 0 2
44251: ARRAY
44252: PPUSH
44253: LD_VAR 0 3
44257: PPUSH
44258: CALL_OW 1
44262: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44263: LD_ADDR_VAR 0 7
44267: PUSH
44268: LD_VAR 0 7
44272: PPUSH
44273: LD_VAR 0 7
44277: PPUSH
44278: LD_VAR 0 6
44282: PPUSH
44283: CALL_OW 1
44287: ST_TO_ADDR
// for i = s_arr downto 2 do
44288: LD_ADDR_VAR 0 5
44292: PUSH
44293: DOUBLE
44294: LD_VAR 0 7
44298: INC
44299: ST_TO_ADDR
44300: LD_INT 2
44302: PUSH
44303: FOR_DOWNTO
44304: IFFALSE 44388
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44306: LD_ADDR_VAR 0 6
44310: PUSH
44311: LD_VAR 0 7
44315: PUSH
44316: LD_VAR 0 5
44320: PUSH
44321: LD_INT 1
44323: MINUS
44324: ARRAY
44325: PPUSH
44326: LD_VAR 0 2
44330: PUSH
44331: LD_VAR 0 5
44335: PUSH
44336: LD_INT 1
44338: MINUS
44339: ARRAY
44340: PPUSH
44341: LD_VAR 0 7
44345: PUSH
44346: LD_VAR 0 5
44350: ARRAY
44351: PPUSH
44352: CALL_OW 1
44356: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44357: LD_ADDR_VAR 0 7
44361: PUSH
44362: LD_VAR 0 7
44366: PPUSH
44367: LD_VAR 0 5
44371: PUSH
44372: LD_INT 1
44374: MINUS
44375: PPUSH
44376: LD_VAR 0 6
44380: PPUSH
44381: CALL_OW 1
44385: ST_TO_ADDR
// end ;
44386: GO 44303
44388: POP
44389: POP
// result := s_arr [ 1 ] ;
44390: LD_ADDR_VAR 0 4
44394: PUSH
44395: LD_VAR 0 7
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: ST_TO_ADDR
// end ; end ;
44404: LD_VAR 0 4
44408: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44409: LD_INT 0
44411: PPUSH
44412: PPUSH
// if not list then
44413: LD_VAR 0 1
44417: NOT
44418: IFFALSE 44422
// exit ;
44420: GO 44513
// i := list [ pos1 ] ;
44422: LD_ADDR_VAR 0 5
44426: PUSH
44427: LD_VAR 0 1
44431: PUSH
44432: LD_VAR 0 2
44436: ARRAY
44437: ST_TO_ADDR
// if not i then
44438: LD_VAR 0 5
44442: NOT
44443: IFFALSE 44447
// exit ;
44445: GO 44513
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44447: LD_ADDR_VAR 0 1
44451: PUSH
44452: LD_VAR 0 1
44456: PPUSH
44457: LD_VAR 0 2
44461: PPUSH
44462: LD_VAR 0 1
44466: PUSH
44467: LD_VAR 0 3
44471: ARRAY
44472: PPUSH
44473: CALL_OW 1
44477: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44478: LD_ADDR_VAR 0 1
44482: PUSH
44483: LD_VAR 0 1
44487: PPUSH
44488: LD_VAR 0 3
44492: PPUSH
44493: LD_VAR 0 5
44497: PPUSH
44498: CALL_OW 1
44502: ST_TO_ADDR
// result := list ;
44503: LD_ADDR_VAR 0 4
44507: PUSH
44508: LD_VAR 0 1
44512: ST_TO_ADDR
// end ;
44513: LD_VAR 0 4
44517: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44518: LD_INT 0
44520: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44521: LD_ADDR_VAR 0 5
44525: PUSH
44526: LD_VAR 0 1
44530: PPUSH
44531: CALL_OW 250
44535: PPUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 251
44545: PPUSH
44546: LD_VAR 0 2
44550: PPUSH
44551: LD_VAR 0 3
44555: PPUSH
44556: LD_VAR 0 4
44560: PPUSH
44561: CALL 44571 0 5
44565: ST_TO_ADDR
// end ;
44566: LD_VAR 0 5
44570: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44571: LD_INT 0
44573: PPUSH
44574: PPUSH
44575: PPUSH
44576: PPUSH
// if not list then
44577: LD_VAR 0 3
44581: NOT
44582: IFFALSE 44586
// exit ;
44584: GO 44974
// result := [ ] ;
44586: LD_ADDR_VAR 0 6
44590: PUSH
44591: EMPTY
44592: ST_TO_ADDR
// for i in list do
44593: LD_ADDR_VAR 0 7
44597: PUSH
44598: LD_VAR 0 3
44602: PUSH
44603: FOR_IN
44604: IFFALSE 44806
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44606: LD_ADDR_VAR 0 9
44610: PUSH
44611: LD_VAR 0 7
44615: PPUSH
44616: LD_VAR 0 1
44620: PPUSH
44621: LD_VAR 0 2
44625: PPUSH
44626: CALL_OW 297
44630: ST_TO_ADDR
// if not result then
44631: LD_VAR 0 6
44635: NOT
44636: IFFALSE 44662
// result := [ [ i , tmp ] ] else
44638: LD_ADDR_VAR 0 6
44642: PUSH
44643: LD_VAR 0 7
44647: PUSH
44648: LD_VAR 0 9
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: EMPTY
44658: LIST
44659: ST_TO_ADDR
44660: GO 44804
// begin if result [ result ] [ 2 ] < tmp then
44662: LD_VAR 0 6
44666: PUSH
44667: LD_VAR 0 6
44671: ARRAY
44672: PUSH
44673: LD_INT 2
44675: ARRAY
44676: PUSH
44677: LD_VAR 0 9
44681: LESS
44682: IFFALSE 44724
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44684: LD_ADDR_VAR 0 6
44688: PUSH
44689: LD_VAR 0 6
44693: PPUSH
44694: LD_VAR 0 6
44698: PUSH
44699: LD_INT 1
44701: PLUS
44702: PPUSH
44703: LD_VAR 0 7
44707: PUSH
44708: LD_VAR 0 9
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PPUSH
44717: CALL_OW 2
44721: ST_TO_ADDR
44722: GO 44804
// for j = 1 to result do
44724: LD_ADDR_VAR 0 8
44728: PUSH
44729: DOUBLE
44730: LD_INT 1
44732: DEC
44733: ST_TO_ADDR
44734: LD_VAR 0 6
44738: PUSH
44739: FOR_TO
44740: IFFALSE 44802
// begin if tmp < result [ j ] [ 2 ] then
44742: LD_VAR 0 9
44746: PUSH
44747: LD_VAR 0 6
44751: PUSH
44752: LD_VAR 0 8
44756: ARRAY
44757: PUSH
44758: LD_INT 2
44760: ARRAY
44761: LESS
44762: IFFALSE 44800
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44764: LD_ADDR_VAR 0 6
44768: PUSH
44769: LD_VAR 0 6
44773: PPUSH
44774: LD_VAR 0 8
44778: PPUSH
44779: LD_VAR 0 7
44783: PUSH
44784: LD_VAR 0 9
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PPUSH
44793: CALL_OW 2
44797: ST_TO_ADDR
// break ;
44798: GO 44802
// end ; end ;
44800: GO 44739
44802: POP
44803: POP
// end ; end ;
44804: GO 44603
44806: POP
44807: POP
// if result and not asc then
44808: LD_VAR 0 6
44812: PUSH
44813: LD_VAR 0 4
44817: NOT
44818: AND
44819: IFFALSE 44894
// begin tmp := result ;
44821: LD_ADDR_VAR 0 9
44825: PUSH
44826: LD_VAR 0 6
44830: ST_TO_ADDR
// for i = tmp downto 1 do
44831: LD_ADDR_VAR 0 7
44835: PUSH
44836: DOUBLE
44837: LD_VAR 0 9
44841: INC
44842: ST_TO_ADDR
44843: LD_INT 1
44845: PUSH
44846: FOR_DOWNTO
44847: IFFALSE 44892
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44849: LD_ADDR_VAR 0 6
44853: PUSH
44854: LD_VAR 0 6
44858: PPUSH
44859: LD_VAR 0 9
44863: PUSH
44864: LD_VAR 0 7
44868: MINUS
44869: PUSH
44870: LD_INT 1
44872: PLUS
44873: PPUSH
44874: LD_VAR 0 9
44878: PUSH
44879: LD_VAR 0 7
44883: ARRAY
44884: PPUSH
44885: CALL_OW 1
44889: ST_TO_ADDR
44890: GO 44846
44892: POP
44893: POP
// end ; tmp := [ ] ;
44894: LD_ADDR_VAR 0 9
44898: PUSH
44899: EMPTY
44900: ST_TO_ADDR
// if mode then
44901: LD_VAR 0 5
44905: IFFALSE 44974
// begin for i = 1 to result do
44907: LD_ADDR_VAR 0 7
44911: PUSH
44912: DOUBLE
44913: LD_INT 1
44915: DEC
44916: ST_TO_ADDR
44917: LD_VAR 0 6
44921: PUSH
44922: FOR_TO
44923: IFFALSE 44962
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44925: LD_ADDR_VAR 0 9
44929: PUSH
44930: LD_VAR 0 9
44934: PPUSH
44935: LD_VAR 0 7
44939: PPUSH
44940: LD_VAR 0 6
44944: PUSH
44945: LD_VAR 0 7
44949: ARRAY
44950: PUSH
44951: LD_INT 1
44953: ARRAY
44954: PPUSH
44955: CALL_OW 1
44959: ST_TO_ADDR
44960: GO 44922
44962: POP
44963: POP
// result := tmp ;
44964: LD_ADDR_VAR 0 6
44968: PUSH
44969: LD_VAR 0 9
44973: ST_TO_ADDR
// end ; end ;
44974: LD_VAR 0 6
44978: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44979: LD_INT 0
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44987: LD_ADDR_VAR 0 5
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// if not x or not y then
45009: LD_VAR 0 2
45013: NOT
45014: PUSH
45015: LD_VAR 0 3
45019: NOT
45020: OR
45021: IFFALSE 45025
// exit ;
45023: GO 46675
// if not range then
45025: LD_VAR 0 4
45029: NOT
45030: IFFALSE 45040
// range := 10 ;
45032: LD_ADDR_VAR 0 4
45036: PUSH
45037: LD_INT 10
45039: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45040: LD_ADDR_VAR 0 8
45044: PUSH
45045: LD_INT 81
45047: PUSH
45048: LD_VAR 0 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 92
45059: PUSH
45060: LD_VAR 0 2
45064: PUSH
45065: LD_VAR 0 3
45069: PUSH
45070: LD_VAR 0 4
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: LD_INT 21
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: PPUSH
45103: CALL_OW 69
45107: ST_TO_ADDR
// if not tmp then
45108: LD_VAR 0 8
45112: NOT
45113: IFFALSE 45117
// exit ;
45115: GO 46675
// for i in tmp do
45117: LD_ADDR_VAR 0 6
45121: PUSH
45122: LD_VAR 0 8
45126: PUSH
45127: FOR_IN
45128: IFFALSE 46650
// begin points := [ 0 , 0 , 0 ] ;
45130: LD_ADDR_VAR 0 9
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: ST_TO_ADDR
// bpoints := 1 ;
45149: LD_ADDR_VAR 0 10
45153: PUSH
45154: LD_INT 1
45156: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45157: LD_VAR 0 6
45161: PPUSH
45162: CALL_OW 247
45166: PUSH
45167: LD_INT 1
45169: DOUBLE
45170: EQUAL
45171: IFTRUE 45175
45173: GO 45753
45175: POP
// begin if GetClass ( i ) = 1 then
45176: LD_VAR 0 6
45180: PPUSH
45181: CALL_OW 257
45185: PUSH
45186: LD_INT 1
45188: EQUAL
45189: IFFALSE 45210
// points := [ 10 , 5 , 3 ] ;
45191: LD_ADDR_VAR 0 9
45195: PUSH
45196: LD_INT 10
45198: PUSH
45199: LD_INT 5
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45210: LD_VAR 0 6
45214: PPUSH
45215: CALL_OW 257
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: LD_INT 3
45225: PUSH
45226: LD_INT 4
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: IN
45234: IFFALSE 45255
// points := [ 3 , 2 , 1 ] ;
45236: LD_ADDR_VAR 0 9
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45255: LD_VAR 0 6
45259: PPUSH
45260: CALL_OW 257
45264: PUSH
45265: LD_INT 5
45267: EQUAL
45268: IFFALSE 45289
// points := [ 130 , 5 , 2 ] ;
45270: LD_ADDR_VAR 0 9
45274: PUSH
45275: LD_INT 130
45277: PUSH
45278: LD_INT 5
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45289: LD_VAR 0 6
45293: PPUSH
45294: CALL_OW 257
45298: PUSH
45299: LD_INT 8
45301: EQUAL
45302: IFFALSE 45323
// points := [ 35 , 35 , 30 ] ;
45304: LD_ADDR_VAR 0 9
45308: PUSH
45309: LD_INT 35
45311: PUSH
45312: LD_INT 35
45314: PUSH
45315: LD_INT 30
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45323: LD_VAR 0 6
45327: PPUSH
45328: CALL_OW 257
45332: PUSH
45333: LD_INT 9
45335: EQUAL
45336: IFFALSE 45357
// points := [ 20 , 55 , 40 ] ;
45338: LD_ADDR_VAR 0 9
45342: PUSH
45343: LD_INT 20
45345: PUSH
45346: LD_INT 55
45348: PUSH
45349: LD_INT 40
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45357: LD_VAR 0 6
45361: PPUSH
45362: CALL_OW 257
45366: PUSH
45367: LD_INT 12
45369: PUSH
45370: LD_INT 16
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: IN
45377: IFFALSE 45398
// points := [ 5 , 3 , 2 ] ;
45379: LD_ADDR_VAR 0 9
45383: PUSH
45384: LD_INT 5
45386: PUSH
45387: LD_INT 3
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45398: LD_VAR 0 6
45402: PPUSH
45403: CALL_OW 257
45407: PUSH
45408: LD_INT 17
45410: EQUAL
45411: IFFALSE 45432
// points := [ 100 , 50 , 75 ] ;
45413: LD_ADDR_VAR 0 9
45417: PUSH
45418: LD_INT 100
45420: PUSH
45421: LD_INT 50
45423: PUSH
45424: LD_INT 75
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45432: LD_VAR 0 6
45436: PPUSH
45437: CALL_OW 257
45441: PUSH
45442: LD_INT 15
45444: EQUAL
45445: IFFALSE 45466
// points := [ 10 , 5 , 3 ] ;
45447: LD_ADDR_VAR 0 9
45451: PUSH
45452: LD_INT 10
45454: PUSH
45455: LD_INT 5
45457: PUSH
45458: LD_INT 3
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45466: LD_VAR 0 6
45470: PPUSH
45471: CALL_OW 257
45475: PUSH
45476: LD_INT 14
45478: EQUAL
45479: IFFALSE 45500
// points := [ 10 , 0 , 0 ] ;
45481: LD_ADDR_VAR 0 9
45485: PUSH
45486: LD_INT 10
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: LIST
45499: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45500: LD_VAR 0 6
45504: PPUSH
45505: CALL_OW 257
45509: PUSH
45510: LD_INT 11
45512: EQUAL
45513: IFFALSE 45534
// points := [ 30 , 10 , 5 ] ;
45515: LD_ADDR_VAR 0 9
45519: PUSH
45520: LD_INT 30
45522: PUSH
45523: LD_INT 10
45525: PUSH
45526: LD_INT 5
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45534: LD_VAR 0 1
45538: PPUSH
45539: LD_INT 5
45541: PPUSH
45542: CALL_OW 321
45546: PUSH
45547: LD_INT 2
45549: EQUAL
45550: IFFALSE 45567
// bpoints := bpoints * 1.8 ;
45552: LD_ADDR_VAR 0 10
45556: PUSH
45557: LD_VAR 0 10
45561: PUSH
45562: LD_REAL  1.80000000000000E+0000
45565: MUL
45566: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45567: LD_VAR 0 6
45571: PPUSH
45572: CALL_OW 257
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 3
45585: PUSH
45586: LD_INT 4
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: IN
45595: PUSH
45596: LD_VAR 0 1
45600: PPUSH
45601: LD_INT 51
45603: PPUSH
45604: CALL_OW 321
45608: PUSH
45609: LD_INT 2
45611: EQUAL
45612: AND
45613: IFFALSE 45630
// bpoints := bpoints * 1.2 ;
45615: LD_ADDR_VAR 0 10
45619: PUSH
45620: LD_VAR 0 10
45624: PUSH
45625: LD_REAL  1.20000000000000E+0000
45628: MUL
45629: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45630: LD_VAR 0 6
45634: PPUSH
45635: CALL_OW 257
45639: PUSH
45640: LD_INT 5
45642: PUSH
45643: LD_INT 7
45645: PUSH
45646: LD_INT 9
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: IN
45654: PUSH
45655: LD_VAR 0 1
45659: PPUSH
45660: LD_INT 52
45662: PPUSH
45663: CALL_OW 321
45667: PUSH
45668: LD_INT 2
45670: EQUAL
45671: AND
45672: IFFALSE 45689
// bpoints := bpoints * 1.5 ;
45674: LD_ADDR_VAR 0 10
45678: PUSH
45679: LD_VAR 0 10
45683: PUSH
45684: LD_REAL  1.50000000000000E+0000
45687: MUL
45688: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45689: LD_VAR 0 1
45693: PPUSH
45694: LD_INT 66
45696: PPUSH
45697: CALL_OW 321
45701: PUSH
45702: LD_INT 2
45704: EQUAL
45705: IFFALSE 45722
// bpoints := bpoints * 1.1 ;
45707: LD_ADDR_VAR 0 10
45711: PUSH
45712: LD_VAR 0 10
45716: PUSH
45717: LD_REAL  1.10000000000000E+0000
45720: MUL
45721: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45722: LD_ADDR_VAR 0 10
45726: PUSH
45727: LD_VAR 0 10
45731: PUSH
45732: LD_VAR 0 6
45736: PPUSH
45737: LD_INT 1
45739: PPUSH
45740: CALL_OW 259
45744: PUSH
45745: LD_REAL  1.15000000000000E+0000
45748: MUL
45749: MUL
45750: ST_TO_ADDR
// end ; unit_vehicle :
45751: GO 46579
45753: LD_INT 2
45755: DOUBLE
45756: EQUAL
45757: IFTRUE 45761
45759: GO 46567
45761: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45762: LD_VAR 0 6
45766: PPUSH
45767: CALL_OW 264
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 42
45777: PUSH
45778: LD_INT 24
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: IN
45786: IFFALSE 45807
// points := [ 25 , 5 , 3 ] ;
45788: LD_ADDR_VAR 0 9
45792: PUSH
45793: LD_INT 25
45795: PUSH
45796: LD_INT 5
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: LIST
45806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45807: LD_VAR 0 6
45811: PPUSH
45812: CALL_OW 264
45816: PUSH
45817: LD_INT 4
45819: PUSH
45820: LD_INT 43
45822: PUSH
45823: LD_INT 25
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: IN
45831: IFFALSE 45852
// points := [ 40 , 15 , 5 ] ;
45833: LD_ADDR_VAR 0 9
45837: PUSH
45838: LD_INT 40
45840: PUSH
45841: LD_INT 15
45843: PUSH
45844: LD_INT 5
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45852: LD_VAR 0 6
45856: PPUSH
45857: CALL_OW 264
45861: PUSH
45862: LD_INT 3
45864: PUSH
45865: LD_INT 23
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: IN
45872: IFFALSE 45893
// points := [ 7 , 25 , 8 ] ;
45874: LD_ADDR_VAR 0 9
45878: PUSH
45879: LD_INT 7
45881: PUSH
45882: LD_INT 25
45884: PUSH
45885: LD_INT 8
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45893: LD_VAR 0 6
45897: PPUSH
45898: CALL_OW 264
45902: PUSH
45903: LD_INT 5
45905: PUSH
45906: LD_INT 27
45908: PUSH
45909: LD_INT 44
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: IN
45917: IFFALSE 45938
// points := [ 14 , 50 , 16 ] ;
45919: LD_ADDR_VAR 0 9
45923: PUSH
45924: LD_INT 14
45926: PUSH
45927: LD_INT 50
45929: PUSH
45930: LD_INT 16
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45938: LD_VAR 0 6
45942: PPUSH
45943: CALL_OW 264
45947: PUSH
45948: LD_INT 6
45950: PUSH
45951: LD_INT 46
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: IN
45958: IFFALSE 45979
// points := [ 32 , 120 , 70 ] ;
45960: LD_ADDR_VAR 0 9
45964: PUSH
45965: LD_INT 32
45967: PUSH
45968: LD_INT 120
45970: PUSH
45971: LD_INT 70
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: LIST
45978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45979: LD_VAR 0 6
45983: PPUSH
45984: CALL_OW 264
45988: PUSH
45989: LD_INT 7
45991: PUSH
45992: LD_INT 28
45994: PUSH
45995: LD_INT 45
45997: PUSH
45998: LD_INT 92
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: IN
46007: IFFALSE 46028
// points := [ 35 , 20 , 45 ] ;
46009: LD_ADDR_VAR 0 9
46013: PUSH
46014: LD_INT 35
46016: PUSH
46017: LD_INT 20
46019: PUSH
46020: LD_INT 45
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46028: LD_VAR 0 6
46032: PPUSH
46033: CALL_OW 264
46037: PUSH
46038: LD_INT 47
46040: PUSH
46041: EMPTY
46042: LIST
46043: IN
46044: IFFALSE 46065
// points := [ 67 , 45 , 75 ] ;
46046: LD_ADDR_VAR 0 9
46050: PUSH
46051: LD_INT 67
46053: PUSH
46054: LD_INT 45
46056: PUSH
46057: LD_INT 75
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46065: LD_VAR 0 6
46069: PPUSH
46070: CALL_OW 264
46074: PUSH
46075: LD_INT 26
46077: PUSH
46078: EMPTY
46079: LIST
46080: IN
46081: IFFALSE 46102
// points := [ 120 , 30 , 80 ] ;
46083: LD_ADDR_VAR 0 9
46087: PUSH
46088: LD_INT 120
46090: PUSH
46091: LD_INT 30
46093: PUSH
46094: LD_INT 80
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46102: LD_VAR 0 6
46106: PPUSH
46107: CALL_OW 264
46111: PUSH
46112: LD_INT 22
46114: PUSH
46115: EMPTY
46116: LIST
46117: IN
46118: IFFALSE 46139
// points := [ 40 , 1 , 1 ] ;
46120: LD_ADDR_VAR 0 9
46124: PUSH
46125: LD_INT 40
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: LIST
46138: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46139: LD_VAR 0 6
46143: PPUSH
46144: CALL_OW 264
46148: PUSH
46149: LD_INT 29
46151: PUSH
46152: EMPTY
46153: LIST
46154: IN
46155: IFFALSE 46176
// points := [ 70 , 200 , 400 ] ;
46157: LD_ADDR_VAR 0 9
46161: PUSH
46162: LD_INT 70
46164: PUSH
46165: LD_INT 200
46167: PUSH
46168: LD_INT 400
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46176: LD_VAR 0 6
46180: PPUSH
46181: CALL_OW 264
46185: PUSH
46186: LD_INT 14
46188: PUSH
46189: LD_INT 53
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: IN
46196: IFFALSE 46217
// points := [ 40 , 10 , 20 ] ;
46198: LD_ADDR_VAR 0 9
46202: PUSH
46203: LD_INT 40
46205: PUSH
46206: LD_INT 10
46208: PUSH
46209: LD_INT 20
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46217: LD_VAR 0 6
46221: PPUSH
46222: CALL_OW 264
46226: PUSH
46227: LD_INT 9
46229: PUSH
46230: EMPTY
46231: LIST
46232: IN
46233: IFFALSE 46254
// points := [ 5 , 70 , 20 ] ;
46235: LD_ADDR_VAR 0 9
46239: PUSH
46240: LD_INT 5
46242: PUSH
46243: LD_INT 70
46245: PUSH
46246: LD_INT 20
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46254: LD_VAR 0 6
46258: PPUSH
46259: CALL_OW 264
46263: PUSH
46264: LD_INT 10
46266: PUSH
46267: EMPTY
46268: LIST
46269: IN
46270: IFFALSE 46291
// points := [ 35 , 110 , 70 ] ;
46272: LD_ADDR_VAR 0 9
46276: PUSH
46277: LD_INT 35
46279: PUSH
46280: LD_INT 110
46282: PUSH
46283: LD_INT 70
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46291: LD_VAR 0 6
46295: PPUSH
46296: CALL_OW 265
46300: PUSH
46301: LD_INT 25
46303: EQUAL
46304: IFFALSE 46325
// points := [ 80 , 65 , 100 ] ;
46306: LD_ADDR_VAR 0 9
46310: PUSH
46311: LD_INT 80
46313: PUSH
46314: LD_INT 65
46316: PUSH
46317: LD_INT 100
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46325: LD_VAR 0 6
46329: PPUSH
46330: CALL_OW 263
46334: PUSH
46335: LD_INT 1
46337: EQUAL
46338: IFFALSE 46373
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46340: LD_ADDR_VAR 0 10
46344: PUSH
46345: LD_VAR 0 10
46349: PUSH
46350: LD_VAR 0 6
46354: PPUSH
46355: CALL_OW 311
46359: PPUSH
46360: LD_INT 3
46362: PPUSH
46363: CALL_OW 259
46367: PUSH
46368: LD_INT 4
46370: MUL
46371: MUL
46372: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46373: LD_VAR 0 6
46377: PPUSH
46378: CALL_OW 263
46382: PUSH
46383: LD_INT 2
46385: EQUAL
46386: IFFALSE 46437
// begin j := IsControledBy ( i ) ;
46388: LD_ADDR_VAR 0 7
46392: PUSH
46393: LD_VAR 0 6
46397: PPUSH
46398: CALL_OW 312
46402: ST_TO_ADDR
// if j then
46403: LD_VAR 0 7
46407: IFFALSE 46437
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46409: LD_ADDR_VAR 0 10
46413: PUSH
46414: LD_VAR 0 10
46418: PUSH
46419: LD_VAR 0 7
46423: PPUSH
46424: LD_INT 3
46426: PPUSH
46427: CALL_OW 259
46431: PUSH
46432: LD_INT 3
46434: MUL
46435: MUL
46436: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46437: LD_VAR 0 6
46441: PPUSH
46442: CALL_OW 264
46446: PUSH
46447: LD_INT 5
46449: PUSH
46450: LD_INT 6
46452: PUSH
46453: LD_INT 46
46455: PUSH
46456: LD_INT 44
46458: PUSH
46459: LD_INT 47
46461: PUSH
46462: LD_INT 45
46464: PUSH
46465: LD_INT 28
46467: PUSH
46468: LD_INT 7
46470: PUSH
46471: LD_INT 27
46473: PUSH
46474: LD_INT 29
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: IN
46489: PUSH
46490: LD_VAR 0 1
46494: PPUSH
46495: LD_INT 52
46497: PPUSH
46498: CALL_OW 321
46502: PUSH
46503: LD_INT 2
46505: EQUAL
46506: AND
46507: IFFALSE 46524
// bpoints := bpoints * 1.2 ;
46509: LD_ADDR_VAR 0 10
46513: PUSH
46514: LD_VAR 0 10
46518: PUSH
46519: LD_REAL  1.20000000000000E+0000
46522: MUL
46523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46524: LD_VAR 0 6
46528: PPUSH
46529: CALL_OW 264
46533: PUSH
46534: LD_INT 6
46536: PUSH
46537: LD_INT 46
46539: PUSH
46540: LD_INT 47
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: IN
46548: IFFALSE 46565
// bpoints := bpoints * 1.2 ;
46550: LD_ADDR_VAR 0 10
46554: PUSH
46555: LD_VAR 0 10
46559: PUSH
46560: LD_REAL  1.20000000000000E+0000
46563: MUL
46564: ST_TO_ADDR
// end ; unit_building :
46565: GO 46579
46567: LD_INT 3
46569: DOUBLE
46570: EQUAL
46571: IFTRUE 46575
46573: GO 46578
46575: POP
// ; end ;
46576: GO 46579
46578: POP
// for j = 1 to 3 do
46579: LD_ADDR_VAR 0 7
46583: PUSH
46584: DOUBLE
46585: LD_INT 1
46587: DEC
46588: ST_TO_ADDR
46589: LD_INT 3
46591: PUSH
46592: FOR_TO
46593: IFFALSE 46646
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46595: LD_ADDR_VAR 0 5
46599: PUSH
46600: LD_VAR 0 5
46604: PPUSH
46605: LD_VAR 0 7
46609: PPUSH
46610: LD_VAR 0 5
46614: PUSH
46615: LD_VAR 0 7
46619: ARRAY
46620: PUSH
46621: LD_VAR 0 9
46625: PUSH
46626: LD_VAR 0 7
46630: ARRAY
46631: PUSH
46632: LD_VAR 0 10
46636: MUL
46637: PLUS
46638: PPUSH
46639: CALL_OW 1
46643: ST_TO_ADDR
46644: GO 46592
46646: POP
46647: POP
// end ;
46648: GO 45127
46650: POP
46651: POP
// result := Replace ( result , 4 , tmp ) ;
46652: LD_ADDR_VAR 0 5
46656: PUSH
46657: LD_VAR 0 5
46661: PPUSH
46662: LD_INT 4
46664: PPUSH
46665: LD_VAR 0 8
46669: PPUSH
46670: CALL_OW 1
46674: ST_TO_ADDR
// end ;
46675: LD_VAR 0 5
46679: RET
// export function DangerAtRange ( unit , range ) ; begin
46680: LD_INT 0
46682: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_VAR 0 1
46692: PPUSH
46693: CALL_OW 255
46697: PPUSH
46698: LD_VAR 0 1
46702: PPUSH
46703: CALL_OW 250
46707: PPUSH
46708: LD_VAR 0 1
46712: PPUSH
46713: CALL_OW 251
46717: PPUSH
46718: LD_VAR 0 2
46722: PPUSH
46723: CALL 44979 0 4
46727: ST_TO_ADDR
// end ;
46728: LD_VAR 0 3
46732: RET
// export function DangerInArea ( side , area ) ; begin
46733: LD_INT 0
46735: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46736: LD_ADDR_VAR 0 3
46740: PUSH
46741: LD_VAR 0 2
46745: PPUSH
46746: LD_INT 81
46748: PUSH
46749: LD_VAR 0 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PPUSH
46758: CALL_OW 70
46762: ST_TO_ADDR
// end ;
46763: LD_VAR 0 3
46767: RET
// export function IsExtension ( b ) ; begin
46768: LD_INT 0
46770: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46771: LD_ADDR_VAR 0 2
46775: PUSH
46776: LD_VAR 0 1
46780: PUSH
46781: LD_INT 23
46783: PUSH
46784: LD_INT 20
46786: PUSH
46787: LD_INT 22
46789: PUSH
46790: LD_INT 17
46792: PUSH
46793: LD_INT 24
46795: PUSH
46796: LD_INT 21
46798: PUSH
46799: LD_INT 19
46801: PUSH
46802: LD_INT 16
46804: PUSH
46805: LD_INT 25
46807: PUSH
46808: LD_INT 18
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: IN
46823: ST_TO_ADDR
// end ;
46824: LD_VAR 0 2
46828: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46829: LD_INT 0
46831: PPUSH
46832: PPUSH
46833: PPUSH
// result := [ ] ;
46834: LD_ADDR_VAR 0 4
46838: PUSH
46839: EMPTY
46840: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46841: LD_ADDR_VAR 0 5
46845: PUSH
46846: LD_VAR 0 2
46850: PPUSH
46851: LD_INT 21
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PPUSH
46861: CALL_OW 70
46865: ST_TO_ADDR
// if not tmp then
46866: LD_VAR 0 5
46870: NOT
46871: IFFALSE 46875
// exit ;
46873: GO 46939
// if checkLink then
46875: LD_VAR 0 3
46879: IFFALSE 46929
// begin for i in tmp do
46881: LD_ADDR_VAR 0 6
46885: PUSH
46886: LD_VAR 0 5
46890: PUSH
46891: FOR_IN
46892: IFFALSE 46927
// if GetBase ( i ) <> base then
46894: LD_VAR 0 6
46898: PPUSH
46899: CALL_OW 274
46903: PUSH
46904: LD_VAR 0 1
46908: NONEQUAL
46909: IFFALSE 46925
// ComLinkToBase ( base , i ) ;
46911: LD_VAR 0 1
46915: PPUSH
46916: LD_VAR 0 6
46920: PPUSH
46921: CALL_OW 169
46925: GO 46891
46927: POP
46928: POP
// end ; result := tmp ;
46929: LD_ADDR_VAR 0 4
46933: PUSH
46934: LD_VAR 0 5
46938: ST_TO_ADDR
// end ;
46939: LD_VAR 0 4
46943: RET
// export function ComComplete ( units , b ) ; var i ; begin
46944: LD_INT 0
46946: PPUSH
46947: PPUSH
// if not units then
46948: LD_VAR 0 1
46952: NOT
46953: IFFALSE 46957
// exit ;
46955: GO 47047
// for i in units do
46957: LD_ADDR_VAR 0 4
46961: PUSH
46962: LD_VAR 0 1
46966: PUSH
46967: FOR_IN
46968: IFFALSE 47045
// if BuildingStatus ( b ) = bs_build then
46970: LD_VAR 0 2
46974: PPUSH
46975: CALL_OW 461
46979: PUSH
46980: LD_INT 1
46982: EQUAL
46983: IFFALSE 47043
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46985: LD_VAR 0 4
46989: PPUSH
46990: LD_STRING h
46992: PUSH
46993: LD_VAR 0 2
46997: PPUSH
46998: CALL_OW 250
47002: PUSH
47003: LD_VAR 0 2
47007: PPUSH
47008: CALL_OW 251
47012: PUSH
47013: LD_VAR 0 2
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: PUSH
47036: EMPTY
47037: LIST
47038: PPUSH
47039: CALL_OW 446
47043: GO 46967
47045: POP
47046: POP
// end ;
47047: LD_VAR 0 3
47051: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47052: LD_INT 0
47054: PPUSH
47055: PPUSH
47056: PPUSH
47057: PPUSH
47058: PPUSH
47059: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47060: LD_VAR 0 1
47064: NOT
47065: PUSH
47066: LD_VAR 0 1
47070: PPUSH
47071: CALL_OW 263
47075: PUSH
47076: LD_INT 2
47078: NONEQUAL
47079: OR
47080: IFFALSE 47084
// exit ;
47082: GO 47400
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47084: LD_ADDR_VAR 0 6
47088: PUSH
47089: LD_INT 22
47091: PUSH
47092: LD_VAR 0 1
47096: PPUSH
47097: CALL_OW 255
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 30
47111: PUSH
47112: LD_INT 36
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 34
47121: PUSH
47122: LD_INT 31
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PPUSH
47138: CALL_OW 69
47142: ST_TO_ADDR
// if not tmp then
47143: LD_VAR 0 6
47147: NOT
47148: IFFALSE 47152
// exit ;
47150: GO 47400
// result := [ ] ;
47152: LD_ADDR_VAR 0 2
47156: PUSH
47157: EMPTY
47158: ST_TO_ADDR
// for i in tmp do
47159: LD_ADDR_VAR 0 3
47163: PUSH
47164: LD_VAR 0 6
47168: PUSH
47169: FOR_IN
47170: IFFALSE 47241
// begin t := UnitsInside ( i ) ;
47172: LD_ADDR_VAR 0 4
47176: PUSH
47177: LD_VAR 0 3
47181: PPUSH
47182: CALL_OW 313
47186: ST_TO_ADDR
// if t then
47187: LD_VAR 0 4
47191: IFFALSE 47239
// for j in t do
47193: LD_ADDR_VAR 0 7
47197: PUSH
47198: LD_VAR 0 4
47202: PUSH
47203: FOR_IN
47204: IFFALSE 47237
// result := Replace ( result , result + 1 , j ) ;
47206: LD_ADDR_VAR 0 2
47210: PUSH
47211: LD_VAR 0 2
47215: PPUSH
47216: LD_VAR 0 2
47220: PUSH
47221: LD_INT 1
47223: PLUS
47224: PPUSH
47225: LD_VAR 0 7
47229: PPUSH
47230: CALL_OW 1
47234: ST_TO_ADDR
47235: GO 47203
47237: POP
47238: POP
// end ;
47239: GO 47169
47241: POP
47242: POP
// if not result then
47243: LD_VAR 0 2
47247: NOT
47248: IFFALSE 47252
// exit ;
47250: GO 47400
// mech := result [ 1 ] ;
47252: LD_ADDR_VAR 0 5
47256: PUSH
47257: LD_VAR 0 2
47261: PUSH
47262: LD_INT 1
47264: ARRAY
47265: ST_TO_ADDR
// if result > 1 then
47266: LD_VAR 0 2
47270: PUSH
47271: LD_INT 1
47273: GREATER
47274: IFFALSE 47386
// begin for i = 2 to result do
47276: LD_ADDR_VAR 0 3
47280: PUSH
47281: DOUBLE
47282: LD_INT 2
47284: DEC
47285: ST_TO_ADDR
47286: LD_VAR 0 2
47290: PUSH
47291: FOR_TO
47292: IFFALSE 47384
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47294: LD_ADDR_VAR 0 4
47298: PUSH
47299: LD_VAR 0 2
47303: PUSH
47304: LD_VAR 0 3
47308: ARRAY
47309: PPUSH
47310: LD_INT 3
47312: PPUSH
47313: CALL_OW 259
47317: PUSH
47318: LD_VAR 0 2
47322: PUSH
47323: LD_VAR 0 3
47327: ARRAY
47328: PPUSH
47329: CALL_OW 432
47333: MINUS
47334: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47335: LD_VAR 0 4
47339: PUSH
47340: LD_VAR 0 5
47344: PPUSH
47345: LD_INT 3
47347: PPUSH
47348: CALL_OW 259
47352: PUSH
47353: LD_VAR 0 5
47357: PPUSH
47358: CALL_OW 432
47362: MINUS
47363: GREATEREQUAL
47364: IFFALSE 47382
// mech := result [ i ] ;
47366: LD_ADDR_VAR 0 5
47370: PUSH
47371: LD_VAR 0 2
47375: PUSH
47376: LD_VAR 0 3
47380: ARRAY
47381: ST_TO_ADDR
// end ;
47382: GO 47291
47384: POP
47385: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47386: LD_VAR 0 1
47390: PPUSH
47391: LD_VAR 0 5
47395: PPUSH
47396: CALL_OW 135
// end ;
47400: LD_VAR 0 2
47404: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47405: LD_INT 0
47407: PPUSH
47408: PPUSH
47409: PPUSH
47410: PPUSH
47411: PPUSH
47412: PPUSH
47413: PPUSH
47414: PPUSH
47415: PPUSH
47416: PPUSH
47417: PPUSH
47418: PPUSH
47419: PPUSH
// result := [ ] ;
47420: LD_ADDR_VAR 0 7
47424: PUSH
47425: EMPTY
47426: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47427: LD_VAR 0 1
47431: PPUSH
47432: CALL_OW 266
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: IN
47447: NOT
47448: IFFALSE 47452
// exit ;
47450: GO 49086
// if name then
47452: LD_VAR 0 3
47456: IFFALSE 47472
// SetBName ( base_dep , name ) ;
47458: LD_VAR 0 1
47462: PPUSH
47463: LD_VAR 0 3
47467: PPUSH
47468: CALL_OW 500
// base := GetBase ( base_dep ) ;
47472: LD_ADDR_VAR 0 15
47476: PUSH
47477: LD_VAR 0 1
47481: PPUSH
47482: CALL_OW 274
47486: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47487: LD_ADDR_VAR 0 16
47491: PUSH
47492: LD_VAR 0 1
47496: PPUSH
47497: CALL_OW 255
47501: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47502: LD_ADDR_VAR 0 17
47506: PUSH
47507: LD_VAR 0 1
47511: PPUSH
47512: CALL_OW 248
47516: ST_TO_ADDR
// if sources then
47517: LD_VAR 0 5
47521: IFFALSE 47568
// for i = 1 to 3 do
47523: LD_ADDR_VAR 0 8
47527: PUSH
47528: DOUBLE
47529: LD_INT 1
47531: DEC
47532: ST_TO_ADDR
47533: LD_INT 3
47535: PUSH
47536: FOR_TO
47537: IFFALSE 47566
// AddResourceType ( base , i , sources [ i ] ) ;
47539: LD_VAR 0 15
47543: PPUSH
47544: LD_VAR 0 8
47548: PPUSH
47549: LD_VAR 0 5
47553: PUSH
47554: LD_VAR 0 8
47558: ARRAY
47559: PPUSH
47560: CALL_OW 276
47564: GO 47536
47566: POP
47567: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47568: LD_ADDR_VAR 0 18
47572: PUSH
47573: LD_VAR 0 15
47577: PPUSH
47578: LD_VAR 0 2
47582: PPUSH
47583: LD_INT 1
47585: PPUSH
47586: CALL 46829 0 3
47590: ST_TO_ADDR
// InitHc ;
47591: CALL_OW 19
// InitUc ;
47595: CALL_OW 18
// uc_side := side ;
47599: LD_ADDR_OWVAR 20
47603: PUSH
47604: LD_VAR 0 16
47608: ST_TO_ADDR
// uc_nation := nation ;
47609: LD_ADDR_OWVAR 21
47613: PUSH
47614: LD_VAR 0 17
47618: ST_TO_ADDR
// if buildings then
47619: LD_VAR 0 18
47623: IFFALSE 48945
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47625: LD_ADDR_VAR 0 19
47629: PUSH
47630: LD_VAR 0 18
47634: PPUSH
47635: LD_INT 2
47637: PUSH
47638: LD_INT 30
47640: PUSH
47641: LD_INT 29
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 30
47650: PUSH
47651: LD_INT 30
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: PPUSH
47663: CALL_OW 72
47667: ST_TO_ADDR
// if tmp then
47668: LD_VAR 0 19
47672: IFFALSE 47720
// for i in tmp do
47674: LD_ADDR_VAR 0 8
47678: PUSH
47679: LD_VAR 0 19
47683: PUSH
47684: FOR_IN
47685: IFFALSE 47718
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47687: LD_VAR 0 8
47691: PPUSH
47692: CALL_OW 250
47696: PPUSH
47697: LD_VAR 0 8
47701: PPUSH
47702: CALL_OW 251
47706: PPUSH
47707: LD_VAR 0 16
47711: PPUSH
47712: CALL_OW 441
47716: GO 47684
47718: POP
47719: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47720: LD_VAR 0 18
47724: PPUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 30
47730: PUSH
47731: LD_INT 32
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 30
47740: PUSH
47741: LD_INT 33
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: PPUSH
47753: CALL_OW 72
47757: IFFALSE 47845
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47759: LD_ADDR_VAR 0 8
47763: PUSH
47764: LD_VAR 0 18
47768: PPUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 30
47774: PUSH
47775: LD_INT 32
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 30
47784: PUSH
47785: LD_INT 33
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: PPUSH
47797: CALL_OW 72
47801: PUSH
47802: FOR_IN
47803: IFFALSE 47843
// begin if not GetBWeapon ( i ) then
47805: LD_VAR 0 8
47809: PPUSH
47810: CALL_OW 269
47814: NOT
47815: IFFALSE 47841
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47817: LD_VAR 0 8
47821: PPUSH
47822: LD_VAR 0 8
47826: PPUSH
47827: LD_VAR 0 2
47831: PPUSH
47832: CALL 49091 0 2
47836: PPUSH
47837: CALL_OW 431
// end ;
47841: GO 47802
47843: POP
47844: POP
// end ; for i = 1 to personel do
47845: LD_ADDR_VAR 0 8
47849: PUSH
47850: DOUBLE
47851: LD_INT 1
47853: DEC
47854: ST_TO_ADDR
47855: LD_VAR 0 6
47859: PUSH
47860: FOR_TO
47861: IFFALSE 48925
// begin if i > 4 then
47863: LD_VAR 0 8
47867: PUSH
47868: LD_INT 4
47870: GREATER
47871: IFFALSE 47875
// break ;
47873: GO 48925
// case i of 1 :
47875: LD_VAR 0 8
47879: PUSH
47880: LD_INT 1
47882: DOUBLE
47883: EQUAL
47884: IFTRUE 47888
47886: GO 47968
47888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47889: LD_ADDR_VAR 0 12
47893: PUSH
47894: LD_VAR 0 18
47898: PPUSH
47899: LD_INT 22
47901: PUSH
47902: LD_VAR 0 16
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 58
47913: PUSH
47914: EMPTY
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 30
47922: PUSH
47923: LD_INT 32
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 30
47932: PUSH
47933: LD_INT 4
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 30
47942: PUSH
47943: LD_INT 5
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: PPUSH
47961: CALL_OW 72
47965: ST_TO_ADDR
47966: GO 48190
47968: LD_INT 2
47970: DOUBLE
47971: EQUAL
47972: IFTRUE 47976
47974: GO 48038
47976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47977: LD_ADDR_VAR 0 12
47981: PUSH
47982: LD_VAR 0 18
47986: PPUSH
47987: LD_INT 22
47989: PUSH
47990: LD_VAR 0 16
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 30
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 30
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PPUSH
48031: CALL_OW 72
48035: ST_TO_ADDR
48036: GO 48190
48038: LD_INT 3
48040: DOUBLE
48041: EQUAL
48042: IFTRUE 48046
48044: GO 48108
48046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48047: LD_ADDR_VAR 0 12
48051: PUSH
48052: LD_VAR 0 18
48056: PPUSH
48057: LD_INT 22
48059: PUSH
48060: LD_VAR 0 16
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 30
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 30
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PPUSH
48101: CALL_OW 72
48105: ST_TO_ADDR
48106: GO 48190
48108: LD_INT 4
48110: DOUBLE
48111: EQUAL
48112: IFTRUE 48116
48114: GO 48189
48116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48117: LD_ADDR_VAR 0 12
48121: PUSH
48122: LD_VAR 0 18
48126: PPUSH
48127: LD_INT 22
48129: PUSH
48130: LD_VAR 0 16
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 30
48144: PUSH
48145: LD_INT 6
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 30
48154: PUSH
48155: LD_INT 7
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 30
48164: PUSH
48165: LD_INT 8
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PPUSH
48182: CALL_OW 72
48186: ST_TO_ADDR
48187: GO 48190
48189: POP
// if i = 1 then
48190: LD_VAR 0 8
48194: PUSH
48195: LD_INT 1
48197: EQUAL
48198: IFFALSE 48309
// begin tmp := [ ] ;
48200: LD_ADDR_VAR 0 19
48204: PUSH
48205: EMPTY
48206: ST_TO_ADDR
// for j in f do
48207: LD_ADDR_VAR 0 9
48211: PUSH
48212: LD_VAR 0 12
48216: PUSH
48217: FOR_IN
48218: IFFALSE 48291
// if GetBType ( j ) = b_bunker then
48220: LD_VAR 0 9
48224: PPUSH
48225: CALL_OW 266
48229: PUSH
48230: LD_INT 32
48232: EQUAL
48233: IFFALSE 48260
// tmp := Insert ( tmp , 1 , j ) else
48235: LD_ADDR_VAR 0 19
48239: PUSH
48240: LD_VAR 0 19
48244: PPUSH
48245: LD_INT 1
48247: PPUSH
48248: LD_VAR 0 9
48252: PPUSH
48253: CALL_OW 2
48257: ST_TO_ADDR
48258: GO 48289
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48260: LD_ADDR_VAR 0 19
48264: PUSH
48265: LD_VAR 0 19
48269: PPUSH
48270: LD_VAR 0 19
48274: PUSH
48275: LD_INT 1
48277: PLUS
48278: PPUSH
48279: LD_VAR 0 9
48283: PPUSH
48284: CALL_OW 2
48288: ST_TO_ADDR
48289: GO 48217
48291: POP
48292: POP
// if tmp then
48293: LD_VAR 0 19
48297: IFFALSE 48309
// f := tmp ;
48299: LD_ADDR_VAR 0 12
48303: PUSH
48304: LD_VAR 0 19
48308: ST_TO_ADDR
// end ; x := personel [ i ] ;
48309: LD_ADDR_VAR 0 13
48313: PUSH
48314: LD_VAR 0 6
48318: PUSH
48319: LD_VAR 0 8
48323: ARRAY
48324: ST_TO_ADDR
// if x = - 1 then
48325: LD_VAR 0 13
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: EQUAL
48334: IFFALSE 48543
// begin for j in f do
48336: LD_ADDR_VAR 0 9
48340: PUSH
48341: LD_VAR 0 12
48345: PUSH
48346: FOR_IN
48347: IFFALSE 48539
// repeat InitHc ;
48349: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48353: LD_VAR 0 9
48357: PPUSH
48358: CALL_OW 266
48362: PUSH
48363: LD_INT 5
48365: EQUAL
48366: IFFALSE 48436
// begin if UnitsInside ( j ) < 3 then
48368: LD_VAR 0 9
48372: PPUSH
48373: CALL_OW 313
48377: PUSH
48378: LD_INT 3
48380: LESS
48381: IFFALSE 48417
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48383: LD_INT 0
48385: PPUSH
48386: LD_INT 5
48388: PUSH
48389: LD_INT 8
48391: PUSH
48392: LD_INT 9
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: PUSH
48400: LD_VAR 0 17
48404: ARRAY
48405: PPUSH
48406: LD_VAR 0 4
48410: PPUSH
48411: CALL_OW 380
48415: GO 48434
// PrepareHuman ( false , i , skill ) ;
48417: LD_INT 0
48419: PPUSH
48420: LD_VAR 0 8
48424: PPUSH
48425: LD_VAR 0 4
48429: PPUSH
48430: CALL_OW 380
// end else
48434: GO 48453
// PrepareHuman ( false , i , skill ) ;
48436: LD_INT 0
48438: PPUSH
48439: LD_VAR 0 8
48443: PPUSH
48444: LD_VAR 0 4
48448: PPUSH
48449: CALL_OW 380
// un := CreateHuman ;
48453: LD_ADDR_VAR 0 14
48457: PUSH
48458: CALL_OW 44
48462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48463: LD_ADDR_VAR 0 7
48467: PUSH
48468: LD_VAR 0 7
48472: PPUSH
48473: LD_INT 1
48475: PPUSH
48476: LD_VAR 0 14
48480: PPUSH
48481: CALL_OW 2
48485: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48486: LD_VAR 0 14
48490: PPUSH
48491: LD_VAR 0 9
48495: PPUSH
48496: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48500: LD_VAR 0 9
48504: PPUSH
48505: CALL_OW 313
48509: PUSH
48510: LD_INT 6
48512: EQUAL
48513: PUSH
48514: LD_VAR 0 9
48518: PPUSH
48519: CALL_OW 266
48523: PUSH
48524: LD_INT 32
48526: PUSH
48527: LD_INT 31
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: IN
48534: OR
48535: IFFALSE 48349
48537: GO 48346
48539: POP
48540: POP
// end else
48541: GO 48923
// for j = 1 to x do
48543: LD_ADDR_VAR 0 9
48547: PUSH
48548: DOUBLE
48549: LD_INT 1
48551: DEC
48552: ST_TO_ADDR
48553: LD_VAR 0 13
48557: PUSH
48558: FOR_TO
48559: IFFALSE 48921
// begin InitHc ;
48561: CALL_OW 19
// if not f then
48565: LD_VAR 0 12
48569: NOT
48570: IFFALSE 48659
// begin PrepareHuman ( false , i , skill ) ;
48572: LD_INT 0
48574: PPUSH
48575: LD_VAR 0 8
48579: PPUSH
48580: LD_VAR 0 4
48584: PPUSH
48585: CALL_OW 380
// un := CreateHuman ;
48589: LD_ADDR_VAR 0 14
48593: PUSH
48594: CALL_OW 44
48598: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48599: LD_ADDR_VAR 0 7
48603: PUSH
48604: LD_VAR 0 7
48608: PPUSH
48609: LD_INT 1
48611: PPUSH
48612: LD_VAR 0 14
48616: PPUSH
48617: CALL_OW 2
48621: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48622: LD_VAR 0 14
48626: PPUSH
48627: LD_VAR 0 1
48631: PPUSH
48632: CALL_OW 250
48636: PPUSH
48637: LD_VAR 0 1
48641: PPUSH
48642: CALL_OW 251
48646: PPUSH
48647: LD_INT 10
48649: PPUSH
48650: LD_INT 0
48652: PPUSH
48653: CALL_OW 50
// continue ;
48657: GO 48558
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48659: LD_VAR 0 12
48663: PUSH
48664: LD_INT 1
48666: ARRAY
48667: PPUSH
48668: CALL_OW 313
48672: PUSH
48673: LD_VAR 0 12
48677: PUSH
48678: LD_INT 1
48680: ARRAY
48681: PPUSH
48682: CALL_OW 266
48686: PUSH
48687: LD_INT 32
48689: PUSH
48690: LD_INT 31
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: IN
48697: AND
48698: PUSH
48699: LD_VAR 0 12
48703: PUSH
48704: LD_INT 1
48706: ARRAY
48707: PPUSH
48708: CALL_OW 313
48712: PUSH
48713: LD_INT 6
48715: EQUAL
48716: OR
48717: IFFALSE 48737
// f := Delete ( f , 1 ) ;
48719: LD_ADDR_VAR 0 12
48723: PUSH
48724: LD_VAR 0 12
48728: PPUSH
48729: LD_INT 1
48731: PPUSH
48732: CALL_OW 3
48736: ST_TO_ADDR
// if not f then
48737: LD_VAR 0 12
48741: NOT
48742: IFFALSE 48760
// begin x := x + 2 ;
48744: LD_ADDR_VAR 0 13
48748: PUSH
48749: LD_VAR 0 13
48753: PUSH
48754: LD_INT 2
48756: PLUS
48757: ST_TO_ADDR
// continue ;
48758: GO 48558
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48760: LD_VAR 0 12
48764: PUSH
48765: LD_INT 1
48767: ARRAY
48768: PPUSH
48769: CALL_OW 266
48773: PUSH
48774: LD_INT 5
48776: EQUAL
48777: IFFALSE 48851
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48779: LD_VAR 0 12
48783: PUSH
48784: LD_INT 1
48786: ARRAY
48787: PPUSH
48788: CALL_OW 313
48792: PUSH
48793: LD_INT 3
48795: LESS
48796: IFFALSE 48832
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48798: LD_INT 0
48800: PPUSH
48801: LD_INT 5
48803: PUSH
48804: LD_INT 8
48806: PUSH
48807: LD_INT 9
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: LIST
48814: PUSH
48815: LD_VAR 0 17
48819: ARRAY
48820: PPUSH
48821: LD_VAR 0 4
48825: PPUSH
48826: CALL_OW 380
48830: GO 48849
// PrepareHuman ( false , i , skill ) ;
48832: LD_INT 0
48834: PPUSH
48835: LD_VAR 0 8
48839: PPUSH
48840: LD_VAR 0 4
48844: PPUSH
48845: CALL_OW 380
// end else
48849: GO 48868
// PrepareHuman ( false , i , skill ) ;
48851: LD_INT 0
48853: PPUSH
48854: LD_VAR 0 8
48858: PPUSH
48859: LD_VAR 0 4
48863: PPUSH
48864: CALL_OW 380
// un := CreateHuman ;
48868: LD_ADDR_VAR 0 14
48872: PUSH
48873: CALL_OW 44
48877: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48878: LD_ADDR_VAR 0 7
48882: PUSH
48883: LD_VAR 0 7
48887: PPUSH
48888: LD_INT 1
48890: PPUSH
48891: LD_VAR 0 14
48895: PPUSH
48896: CALL_OW 2
48900: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48901: LD_VAR 0 14
48905: PPUSH
48906: LD_VAR 0 12
48910: PUSH
48911: LD_INT 1
48913: ARRAY
48914: PPUSH
48915: CALL_OW 52
// end ;
48919: GO 48558
48921: POP
48922: POP
// end ;
48923: GO 47860
48925: POP
48926: POP
// result := result ^ buildings ;
48927: LD_ADDR_VAR 0 7
48931: PUSH
48932: LD_VAR 0 7
48936: PUSH
48937: LD_VAR 0 18
48941: ADD
48942: ST_TO_ADDR
// end else
48943: GO 49086
// begin for i = 1 to personel do
48945: LD_ADDR_VAR 0 8
48949: PUSH
48950: DOUBLE
48951: LD_INT 1
48953: DEC
48954: ST_TO_ADDR
48955: LD_VAR 0 6
48959: PUSH
48960: FOR_TO
48961: IFFALSE 49084
// begin if i > 4 then
48963: LD_VAR 0 8
48967: PUSH
48968: LD_INT 4
48970: GREATER
48971: IFFALSE 48975
// break ;
48973: GO 49084
// x := personel [ i ] ;
48975: LD_ADDR_VAR 0 13
48979: PUSH
48980: LD_VAR 0 6
48984: PUSH
48985: LD_VAR 0 8
48989: ARRAY
48990: ST_TO_ADDR
// if x = - 1 then
48991: LD_VAR 0 13
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: EQUAL
49000: IFFALSE 49004
// continue ;
49002: GO 48960
// PrepareHuman ( false , i , skill ) ;
49004: LD_INT 0
49006: PPUSH
49007: LD_VAR 0 8
49011: PPUSH
49012: LD_VAR 0 4
49016: PPUSH
49017: CALL_OW 380
// un := CreateHuman ;
49021: LD_ADDR_VAR 0 14
49025: PUSH
49026: CALL_OW 44
49030: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49031: LD_VAR 0 14
49035: PPUSH
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 250
49045: PPUSH
49046: LD_VAR 0 1
49050: PPUSH
49051: CALL_OW 251
49055: PPUSH
49056: LD_INT 10
49058: PPUSH
49059: LD_INT 0
49061: PPUSH
49062: CALL_OW 50
// result := result ^ un ;
49066: LD_ADDR_VAR 0 7
49070: PUSH
49071: LD_VAR 0 7
49075: PUSH
49076: LD_VAR 0 14
49080: ADD
49081: ST_TO_ADDR
// end ;
49082: GO 48960
49084: POP
49085: POP
// end ; end ;
49086: LD_VAR 0 7
49090: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49091: LD_INT 0
49093: PPUSH
49094: PPUSH
49095: PPUSH
49096: PPUSH
49097: PPUSH
49098: PPUSH
49099: PPUSH
49100: PPUSH
49101: PPUSH
49102: PPUSH
49103: PPUSH
49104: PPUSH
49105: PPUSH
49106: PPUSH
49107: PPUSH
49108: PPUSH
// result := false ;
49109: LD_ADDR_VAR 0 3
49113: PUSH
49114: LD_INT 0
49116: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49117: LD_VAR 0 1
49121: NOT
49122: PUSH
49123: LD_VAR 0 1
49127: PPUSH
49128: CALL_OW 266
49132: PUSH
49133: LD_INT 32
49135: PUSH
49136: LD_INT 33
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: IN
49143: NOT
49144: OR
49145: IFFALSE 49149
// exit ;
49147: GO 50258
// nat := GetNation ( tower ) ;
49149: LD_ADDR_VAR 0 12
49153: PUSH
49154: LD_VAR 0 1
49158: PPUSH
49159: CALL_OW 248
49163: ST_TO_ADDR
// side := GetSide ( tower ) ;
49164: LD_ADDR_VAR 0 16
49168: PUSH
49169: LD_VAR 0 1
49173: PPUSH
49174: CALL_OW 255
49178: ST_TO_ADDR
// x := GetX ( tower ) ;
49179: LD_ADDR_VAR 0 10
49183: PUSH
49184: LD_VAR 0 1
49188: PPUSH
49189: CALL_OW 250
49193: ST_TO_ADDR
// y := GetY ( tower ) ;
49194: LD_ADDR_VAR 0 11
49198: PUSH
49199: LD_VAR 0 1
49203: PPUSH
49204: CALL_OW 251
49208: ST_TO_ADDR
// if not x or not y then
49209: LD_VAR 0 10
49213: NOT
49214: PUSH
49215: LD_VAR 0 11
49219: NOT
49220: OR
49221: IFFALSE 49225
// exit ;
49223: GO 50258
// weapon := 0 ;
49225: LD_ADDR_VAR 0 18
49229: PUSH
49230: LD_INT 0
49232: ST_TO_ADDR
// fac_list := [ ] ;
49233: LD_ADDR_VAR 0 17
49237: PUSH
49238: EMPTY
49239: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49240: LD_ADDR_VAR 0 6
49244: PUSH
49245: LD_VAR 0 1
49249: PPUSH
49250: CALL_OW 274
49254: PPUSH
49255: LD_VAR 0 2
49259: PPUSH
49260: LD_INT 0
49262: PPUSH
49263: CALL 46829 0 3
49267: PPUSH
49268: LD_INT 30
49270: PUSH
49271: LD_INT 3
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PPUSH
49278: CALL_OW 72
49282: ST_TO_ADDR
// if not factories then
49283: LD_VAR 0 6
49287: NOT
49288: IFFALSE 49292
// exit ;
49290: GO 50258
// for i in factories do
49292: LD_ADDR_VAR 0 8
49296: PUSH
49297: LD_VAR 0 6
49301: PUSH
49302: FOR_IN
49303: IFFALSE 49328
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49305: LD_ADDR_VAR 0 17
49309: PUSH
49310: LD_VAR 0 17
49314: PUSH
49315: LD_VAR 0 8
49319: PPUSH
49320: CALL_OW 478
49324: UNION
49325: ST_TO_ADDR
49326: GO 49302
49328: POP
49329: POP
// if not fac_list then
49330: LD_VAR 0 17
49334: NOT
49335: IFFALSE 49339
// exit ;
49337: GO 50258
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49339: LD_ADDR_VAR 0 5
49343: PUSH
49344: LD_INT 4
49346: PUSH
49347: LD_INT 5
49349: PUSH
49350: LD_INT 9
49352: PUSH
49353: LD_INT 10
49355: PUSH
49356: LD_INT 6
49358: PUSH
49359: LD_INT 7
49361: PUSH
49362: LD_INT 11
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 27
49376: PUSH
49377: LD_INT 28
49379: PUSH
49380: LD_INT 26
49382: PUSH
49383: LD_INT 30
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 43
49394: PUSH
49395: LD_INT 44
49397: PUSH
49398: LD_INT 46
49400: PUSH
49401: LD_INT 45
49403: PUSH
49404: LD_INT 47
49406: PUSH
49407: LD_INT 49
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: PUSH
49423: LD_VAR 0 12
49427: ARRAY
49428: ST_TO_ADDR
// list := list isect fac_list ;
49429: LD_ADDR_VAR 0 5
49433: PUSH
49434: LD_VAR 0 5
49438: PUSH
49439: LD_VAR 0 17
49443: ISECT
49444: ST_TO_ADDR
// if not list then
49445: LD_VAR 0 5
49449: NOT
49450: IFFALSE 49454
// exit ;
49452: GO 50258
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49454: LD_VAR 0 12
49458: PUSH
49459: LD_INT 3
49461: EQUAL
49462: PUSH
49463: LD_INT 49
49465: PUSH
49466: LD_VAR 0 5
49470: IN
49471: AND
49472: PUSH
49473: LD_INT 31
49475: PPUSH
49476: LD_VAR 0 16
49480: PPUSH
49481: CALL_OW 321
49485: PUSH
49486: LD_INT 2
49488: EQUAL
49489: AND
49490: IFFALSE 49550
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49492: LD_INT 22
49494: PUSH
49495: LD_VAR 0 16
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 35
49506: PUSH
49507: LD_INT 49
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 91
49516: PUSH
49517: LD_VAR 0 1
49521: PUSH
49522: LD_INT 10
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: PPUSH
49535: CALL_OW 69
49539: NOT
49540: IFFALSE 49550
// weapon := ru_time_lapser ;
49542: LD_ADDR_VAR 0 18
49546: PUSH
49547: LD_INT 49
49549: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49550: LD_VAR 0 12
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: IN
49565: PUSH
49566: LD_INT 11
49568: PUSH
49569: LD_VAR 0 5
49573: IN
49574: PUSH
49575: LD_INT 30
49577: PUSH
49578: LD_VAR 0 5
49582: IN
49583: OR
49584: AND
49585: PUSH
49586: LD_INT 6
49588: PPUSH
49589: LD_VAR 0 16
49593: PPUSH
49594: CALL_OW 321
49598: PUSH
49599: LD_INT 2
49601: EQUAL
49602: AND
49603: IFFALSE 49768
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49605: LD_INT 22
49607: PUSH
49608: LD_VAR 0 16
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: LD_INT 35
49622: PUSH
49623: LD_INT 11
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 35
49632: PUSH
49633: LD_INT 30
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 91
49647: PUSH
49648: LD_VAR 0 1
49652: PUSH
49653: LD_INT 18
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: PPUSH
49666: CALL_OW 69
49670: NOT
49671: PUSH
49672: LD_INT 22
49674: PUSH
49675: LD_VAR 0 16
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: LD_INT 30
49689: PUSH
49690: LD_INT 32
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 30
49699: PUSH
49700: LD_INT 33
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 91
49714: PUSH
49715: LD_VAR 0 1
49719: PUSH
49720: LD_INT 12
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: PUSH
49733: EMPTY
49734: LIST
49735: PPUSH
49736: CALL_OW 69
49740: PUSH
49741: LD_INT 2
49743: GREATER
49744: AND
49745: IFFALSE 49768
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49747: LD_ADDR_VAR 0 18
49751: PUSH
49752: LD_INT 11
49754: PUSH
49755: LD_INT 30
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_VAR 0 12
49766: ARRAY
49767: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49768: LD_VAR 0 18
49772: NOT
49773: PUSH
49774: LD_INT 40
49776: PPUSH
49777: LD_VAR 0 16
49781: PPUSH
49782: CALL_OW 321
49786: PUSH
49787: LD_INT 2
49789: EQUAL
49790: AND
49791: PUSH
49792: LD_INT 7
49794: PUSH
49795: LD_VAR 0 5
49799: IN
49800: PUSH
49801: LD_INT 28
49803: PUSH
49804: LD_VAR 0 5
49808: IN
49809: OR
49810: PUSH
49811: LD_INT 45
49813: PUSH
49814: LD_VAR 0 5
49818: IN
49819: OR
49820: AND
49821: IFFALSE 50075
// begin hex := GetHexInfo ( x , y ) ;
49823: LD_ADDR_VAR 0 4
49827: PUSH
49828: LD_VAR 0 10
49832: PPUSH
49833: LD_VAR 0 11
49837: PPUSH
49838: CALL_OW 546
49842: ST_TO_ADDR
// if hex [ 1 ] then
49843: LD_VAR 0 4
49847: PUSH
49848: LD_INT 1
49850: ARRAY
49851: IFFALSE 49855
// exit ;
49853: GO 50258
// height := hex [ 2 ] ;
49855: LD_ADDR_VAR 0 15
49859: PUSH
49860: LD_VAR 0 4
49864: PUSH
49865: LD_INT 2
49867: ARRAY
49868: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49869: LD_ADDR_VAR 0 14
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: LD_INT 5
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: ST_TO_ADDR
// for i in tmp do
49892: LD_ADDR_VAR 0 8
49896: PUSH
49897: LD_VAR 0 14
49901: PUSH
49902: FOR_IN
49903: IFFALSE 50073
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49905: LD_ADDR_VAR 0 9
49909: PUSH
49910: LD_VAR 0 10
49914: PPUSH
49915: LD_VAR 0 8
49919: PPUSH
49920: LD_INT 5
49922: PPUSH
49923: CALL_OW 272
49927: PUSH
49928: LD_VAR 0 11
49932: PPUSH
49933: LD_VAR 0 8
49937: PPUSH
49938: LD_INT 5
49940: PPUSH
49941: CALL_OW 273
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49950: LD_VAR 0 9
49954: PUSH
49955: LD_INT 1
49957: ARRAY
49958: PPUSH
49959: LD_VAR 0 9
49963: PUSH
49964: LD_INT 2
49966: ARRAY
49967: PPUSH
49968: CALL_OW 488
49972: IFFALSE 50071
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49974: LD_ADDR_VAR 0 4
49978: PUSH
49979: LD_VAR 0 9
49983: PUSH
49984: LD_INT 1
49986: ARRAY
49987: PPUSH
49988: LD_VAR 0 9
49992: PUSH
49993: LD_INT 2
49995: ARRAY
49996: PPUSH
49997: CALL_OW 546
50001: ST_TO_ADDR
// if hex [ 1 ] then
50002: LD_VAR 0 4
50006: PUSH
50007: LD_INT 1
50009: ARRAY
50010: IFFALSE 50014
// continue ;
50012: GO 49902
// h := hex [ 2 ] ;
50014: LD_ADDR_VAR 0 13
50018: PUSH
50019: LD_VAR 0 4
50023: PUSH
50024: LD_INT 2
50026: ARRAY
50027: ST_TO_ADDR
// if h + 7 < height then
50028: LD_VAR 0 13
50032: PUSH
50033: LD_INT 7
50035: PLUS
50036: PUSH
50037: LD_VAR 0 15
50041: LESS
50042: IFFALSE 50071
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50044: LD_ADDR_VAR 0 18
50048: PUSH
50049: LD_INT 7
50051: PUSH
50052: LD_INT 28
50054: PUSH
50055: LD_INT 45
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: PUSH
50063: LD_VAR 0 12
50067: ARRAY
50068: ST_TO_ADDR
// break ;
50069: GO 50073
// end ; end ; end ;
50071: GO 49902
50073: POP
50074: POP
// end ; if not weapon then
50075: LD_VAR 0 18
50079: NOT
50080: IFFALSE 50140
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50082: LD_ADDR_VAR 0 5
50086: PUSH
50087: LD_VAR 0 5
50091: PUSH
50092: LD_INT 11
50094: PUSH
50095: LD_INT 30
50097: PUSH
50098: LD_INT 49
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: DIFF
50106: ST_TO_ADDR
// if not list then
50107: LD_VAR 0 5
50111: NOT
50112: IFFALSE 50116
// exit ;
50114: GO 50258
// weapon := list [ rand ( 1 , list ) ] ;
50116: LD_ADDR_VAR 0 18
50120: PUSH
50121: LD_VAR 0 5
50125: PUSH
50126: LD_INT 1
50128: PPUSH
50129: LD_VAR 0 5
50133: PPUSH
50134: CALL_OW 12
50138: ARRAY
50139: ST_TO_ADDR
// end ; if weapon then
50140: LD_VAR 0 18
50144: IFFALSE 50258
// begin tmp := CostOfWeapon ( weapon ) ;
50146: LD_ADDR_VAR 0 14
50150: PUSH
50151: LD_VAR 0 18
50155: PPUSH
50156: CALL_OW 451
50160: ST_TO_ADDR
// j := GetBase ( tower ) ;
50161: LD_ADDR_VAR 0 9
50165: PUSH
50166: LD_VAR 0 1
50170: PPUSH
50171: CALL_OW 274
50175: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50176: LD_VAR 0 9
50180: PPUSH
50181: LD_INT 1
50183: PPUSH
50184: CALL_OW 275
50188: PUSH
50189: LD_VAR 0 14
50193: PUSH
50194: LD_INT 1
50196: ARRAY
50197: GREATEREQUAL
50198: PUSH
50199: LD_VAR 0 9
50203: PPUSH
50204: LD_INT 2
50206: PPUSH
50207: CALL_OW 275
50211: PUSH
50212: LD_VAR 0 14
50216: PUSH
50217: LD_INT 2
50219: ARRAY
50220: GREATEREQUAL
50221: AND
50222: PUSH
50223: LD_VAR 0 9
50227: PPUSH
50228: LD_INT 3
50230: PPUSH
50231: CALL_OW 275
50235: PUSH
50236: LD_VAR 0 14
50240: PUSH
50241: LD_INT 3
50243: ARRAY
50244: GREATEREQUAL
50245: AND
50246: IFFALSE 50258
// result := weapon ;
50248: LD_ADDR_VAR 0 3
50252: PUSH
50253: LD_VAR 0 18
50257: ST_TO_ADDR
// end ; end ;
50258: LD_VAR 0 3
50262: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50263: LD_INT 0
50265: PPUSH
50266: PPUSH
// result := true ;
50267: LD_ADDR_VAR 0 3
50271: PUSH
50272: LD_INT 1
50274: ST_TO_ADDR
// if array1 = array2 then
50275: LD_VAR 0 1
50279: PUSH
50280: LD_VAR 0 2
50284: EQUAL
50285: IFFALSE 50345
// begin for i = 1 to array1 do
50287: LD_ADDR_VAR 0 4
50291: PUSH
50292: DOUBLE
50293: LD_INT 1
50295: DEC
50296: ST_TO_ADDR
50297: LD_VAR 0 1
50301: PUSH
50302: FOR_TO
50303: IFFALSE 50341
// if array1 [ i ] <> array2 [ i ] then
50305: LD_VAR 0 1
50309: PUSH
50310: LD_VAR 0 4
50314: ARRAY
50315: PUSH
50316: LD_VAR 0 2
50320: PUSH
50321: LD_VAR 0 4
50325: ARRAY
50326: NONEQUAL
50327: IFFALSE 50339
// begin result := false ;
50329: LD_ADDR_VAR 0 3
50333: PUSH
50334: LD_INT 0
50336: ST_TO_ADDR
// break ;
50337: GO 50341
// end ;
50339: GO 50302
50341: POP
50342: POP
// end else
50343: GO 50353
// result := false ;
50345: LD_ADDR_VAR 0 3
50349: PUSH
50350: LD_INT 0
50352: ST_TO_ADDR
// end ;
50353: LD_VAR 0 3
50357: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50358: LD_INT 0
50360: PPUSH
50361: PPUSH
// if not array1 or not array2 then
50362: LD_VAR 0 1
50366: NOT
50367: PUSH
50368: LD_VAR 0 2
50372: NOT
50373: OR
50374: IFFALSE 50378
// exit ;
50376: GO 50442
// result := true ;
50378: LD_ADDR_VAR 0 3
50382: PUSH
50383: LD_INT 1
50385: ST_TO_ADDR
// for i = 1 to array1 do
50386: LD_ADDR_VAR 0 4
50390: PUSH
50391: DOUBLE
50392: LD_INT 1
50394: DEC
50395: ST_TO_ADDR
50396: LD_VAR 0 1
50400: PUSH
50401: FOR_TO
50402: IFFALSE 50440
// if array1 [ i ] <> array2 [ i ] then
50404: LD_VAR 0 1
50408: PUSH
50409: LD_VAR 0 4
50413: ARRAY
50414: PUSH
50415: LD_VAR 0 2
50419: PUSH
50420: LD_VAR 0 4
50424: ARRAY
50425: NONEQUAL
50426: IFFALSE 50438
// begin result := false ;
50428: LD_ADDR_VAR 0 3
50432: PUSH
50433: LD_INT 0
50435: ST_TO_ADDR
// break ;
50436: GO 50440
// end ;
50438: GO 50401
50440: POP
50441: POP
// end ;
50442: LD_VAR 0 3
50446: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50447: LD_INT 0
50449: PPUSH
50450: PPUSH
50451: PPUSH
// pom := GetBase ( fac ) ;
50452: LD_ADDR_VAR 0 5
50456: PUSH
50457: LD_VAR 0 1
50461: PPUSH
50462: CALL_OW 274
50466: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50467: LD_ADDR_VAR 0 4
50471: PUSH
50472: LD_VAR 0 2
50476: PUSH
50477: LD_INT 1
50479: ARRAY
50480: PPUSH
50481: LD_VAR 0 2
50485: PUSH
50486: LD_INT 2
50488: ARRAY
50489: PPUSH
50490: LD_VAR 0 2
50494: PUSH
50495: LD_INT 3
50497: ARRAY
50498: PPUSH
50499: LD_VAR 0 2
50503: PUSH
50504: LD_INT 4
50506: ARRAY
50507: PPUSH
50508: CALL_OW 449
50512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50513: LD_ADDR_VAR 0 3
50517: PUSH
50518: LD_VAR 0 5
50522: PPUSH
50523: LD_INT 1
50525: PPUSH
50526: CALL_OW 275
50530: PUSH
50531: LD_VAR 0 4
50535: PUSH
50536: LD_INT 1
50538: ARRAY
50539: GREATEREQUAL
50540: PUSH
50541: LD_VAR 0 5
50545: PPUSH
50546: LD_INT 2
50548: PPUSH
50549: CALL_OW 275
50553: PUSH
50554: LD_VAR 0 4
50558: PUSH
50559: LD_INT 2
50561: ARRAY
50562: GREATEREQUAL
50563: AND
50564: PUSH
50565: LD_VAR 0 5
50569: PPUSH
50570: LD_INT 3
50572: PPUSH
50573: CALL_OW 275
50577: PUSH
50578: LD_VAR 0 4
50582: PUSH
50583: LD_INT 3
50585: ARRAY
50586: GREATEREQUAL
50587: AND
50588: ST_TO_ADDR
// end ;
50589: LD_VAR 0 3
50593: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50594: LD_INT 0
50596: PPUSH
50597: PPUSH
50598: PPUSH
50599: PPUSH
// pom := GetBase ( building ) ;
50600: LD_ADDR_VAR 0 3
50604: PUSH
50605: LD_VAR 0 1
50609: PPUSH
50610: CALL_OW 274
50614: ST_TO_ADDR
// if not pom then
50615: LD_VAR 0 3
50619: NOT
50620: IFFALSE 50624
// exit ;
50622: GO 50794
// btype := GetBType ( building ) ;
50624: LD_ADDR_VAR 0 5
50628: PUSH
50629: LD_VAR 0 1
50633: PPUSH
50634: CALL_OW 266
50638: ST_TO_ADDR
// if btype = b_armoury then
50639: LD_VAR 0 5
50643: PUSH
50644: LD_INT 4
50646: EQUAL
50647: IFFALSE 50657
// btype := b_barracks ;
50649: LD_ADDR_VAR 0 5
50653: PUSH
50654: LD_INT 5
50656: ST_TO_ADDR
// if btype = b_depot then
50657: LD_VAR 0 5
50661: PUSH
50662: LD_INT 0
50664: EQUAL
50665: IFFALSE 50675
// btype := b_warehouse ;
50667: LD_ADDR_VAR 0 5
50671: PUSH
50672: LD_INT 1
50674: ST_TO_ADDR
// if btype = b_workshop then
50675: LD_VAR 0 5
50679: PUSH
50680: LD_INT 2
50682: EQUAL
50683: IFFALSE 50693
// btype := b_factory ;
50685: LD_ADDR_VAR 0 5
50689: PUSH
50690: LD_INT 3
50692: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50693: LD_ADDR_VAR 0 4
50697: PUSH
50698: LD_VAR 0 5
50702: PPUSH
50703: LD_VAR 0 1
50707: PPUSH
50708: CALL_OW 248
50712: PPUSH
50713: CALL_OW 450
50717: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50718: LD_ADDR_VAR 0 2
50722: PUSH
50723: LD_VAR 0 3
50727: PPUSH
50728: LD_INT 1
50730: PPUSH
50731: CALL_OW 275
50735: PUSH
50736: LD_VAR 0 4
50740: PUSH
50741: LD_INT 1
50743: ARRAY
50744: GREATEREQUAL
50745: PUSH
50746: LD_VAR 0 3
50750: PPUSH
50751: LD_INT 2
50753: PPUSH
50754: CALL_OW 275
50758: PUSH
50759: LD_VAR 0 4
50763: PUSH
50764: LD_INT 2
50766: ARRAY
50767: GREATEREQUAL
50768: AND
50769: PUSH
50770: LD_VAR 0 3
50774: PPUSH
50775: LD_INT 3
50777: PPUSH
50778: CALL_OW 275
50782: PUSH
50783: LD_VAR 0 4
50787: PUSH
50788: LD_INT 3
50790: ARRAY
50791: GREATEREQUAL
50792: AND
50793: ST_TO_ADDR
// end ;
50794: LD_VAR 0 2
50798: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50799: LD_INT 0
50801: PPUSH
50802: PPUSH
50803: PPUSH
// pom := GetBase ( building ) ;
50804: LD_ADDR_VAR 0 4
50808: PUSH
50809: LD_VAR 0 1
50813: PPUSH
50814: CALL_OW 274
50818: ST_TO_ADDR
// if not pom then
50819: LD_VAR 0 4
50823: NOT
50824: IFFALSE 50828
// exit ;
50826: GO 50929
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50828: LD_ADDR_VAR 0 5
50832: PUSH
50833: LD_VAR 0 2
50837: PPUSH
50838: LD_VAR 0 1
50842: PPUSH
50843: CALL_OW 248
50847: PPUSH
50848: CALL_OW 450
50852: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50853: LD_ADDR_VAR 0 3
50857: PUSH
50858: LD_VAR 0 4
50862: PPUSH
50863: LD_INT 1
50865: PPUSH
50866: CALL_OW 275
50870: PUSH
50871: LD_VAR 0 5
50875: PUSH
50876: LD_INT 1
50878: ARRAY
50879: GREATEREQUAL
50880: PUSH
50881: LD_VAR 0 4
50885: PPUSH
50886: LD_INT 2
50888: PPUSH
50889: CALL_OW 275
50893: PUSH
50894: LD_VAR 0 5
50898: PUSH
50899: LD_INT 2
50901: ARRAY
50902: GREATEREQUAL
50903: AND
50904: PUSH
50905: LD_VAR 0 4
50909: PPUSH
50910: LD_INT 3
50912: PPUSH
50913: CALL_OW 275
50917: PUSH
50918: LD_VAR 0 5
50922: PUSH
50923: LD_INT 3
50925: ARRAY
50926: GREATEREQUAL
50927: AND
50928: ST_TO_ADDR
// end ;
50929: LD_VAR 0 3
50933: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50934: LD_INT 0
50936: PPUSH
50937: PPUSH
50938: PPUSH
50939: PPUSH
50940: PPUSH
50941: PPUSH
50942: PPUSH
50943: PPUSH
50944: PPUSH
50945: PPUSH
50946: PPUSH
// result := false ;
50947: LD_ADDR_VAR 0 8
50951: PUSH
50952: LD_INT 0
50954: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50955: LD_VAR 0 5
50959: NOT
50960: PUSH
50961: LD_VAR 0 1
50965: NOT
50966: OR
50967: PUSH
50968: LD_VAR 0 2
50972: NOT
50973: OR
50974: PUSH
50975: LD_VAR 0 3
50979: NOT
50980: OR
50981: IFFALSE 50985
// exit ;
50983: GO 51799
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50985: LD_ADDR_VAR 0 14
50989: PUSH
50990: LD_VAR 0 1
50994: PPUSH
50995: LD_VAR 0 2
50999: PPUSH
51000: LD_VAR 0 3
51004: PPUSH
51005: LD_VAR 0 4
51009: PPUSH
51010: LD_VAR 0 5
51014: PUSH
51015: LD_INT 1
51017: ARRAY
51018: PPUSH
51019: CALL_OW 248
51023: PPUSH
51024: LD_INT 0
51026: PPUSH
51027: CALL 53032 0 6
51031: ST_TO_ADDR
// if not hexes then
51032: LD_VAR 0 14
51036: NOT
51037: IFFALSE 51041
// exit ;
51039: GO 51799
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51041: LD_ADDR_VAR 0 17
51045: PUSH
51046: LD_VAR 0 5
51050: PPUSH
51051: LD_INT 22
51053: PUSH
51054: LD_VAR 0 13
51058: PPUSH
51059: CALL_OW 255
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 30
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 30
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PPUSH
51100: CALL_OW 72
51104: ST_TO_ADDR
// for i = 1 to hexes do
51105: LD_ADDR_VAR 0 9
51109: PUSH
51110: DOUBLE
51111: LD_INT 1
51113: DEC
51114: ST_TO_ADDR
51115: LD_VAR 0 14
51119: PUSH
51120: FOR_TO
51121: IFFALSE 51797
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51123: LD_ADDR_VAR 0 13
51127: PUSH
51128: LD_VAR 0 14
51132: PUSH
51133: LD_VAR 0 9
51137: ARRAY
51138: PUSH
51139: LD_INT 1
51141: ARRAY
51142: PPUSH
51143: LD_VAR 0 14
51147: PUSH
51148: LD_VAR 0 9
51152: ARRAY
51153: PUSH
51154: LD_INT 2
51156: ARRAY
51157: PPUSH
51158: CALL_OW 428
51162: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51163: LD_VAR 0 14
51167: PUSH
51168: LD_VAR 0 9
51172: ARRAY
51173: PUSH
51174: LD_INT 1
51176: ARRAY
51177: PPUSH
51178: LD_VAR 0 14
51182: PUSH
51183: LD_VAR 0 9
51187: ARRAY
51188: PUSH
51189: LD_INT 2
51191: ARRAY
51192: PPUSH
51193: CALL_OW 351
51197: PUSH
51198: LD_VAR 0 14
51202: PUSH
51203: LD_VAR 0 9
51207: ARRAY
51208: PUSH
51209: LD_INT 1
51211: ARRAY
51212: PPUSH
51213: LD_VAR 0 14
51217: PUSH
51218: LD_VAR 0 9
51222: ARRAY
51223: PUSH
51224: LD_INT 2
51226: ARRAY
51227: PPUSH
51228: CALL_OW 488
51232: NOT
51233: OR
51234: PUSH
51235: LD_VAR 0 13
51239: PPUSH
51240: CALL_OW 247
51244: PUSH
51245: LD_INT 3
51247: EQUAL
51248: OR
51249: IFFALSE 51255
// exit ;
51251: POP
51252: POP
51253: GO 51799
// if not tmp then
51255: LD_VAR 0 13
51259: NOT
51260: IFFALSE 51264
// continue ;
51262: GO 51120
// result := true ;
51264: LD_ADDR_VAR 0 8
51268: PUSH
51269: LD_INT 1
51271: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51272: LD_VAR 0 6
51276: PUSH
51277: LD_VAR 0 13
51281: PPUSH
51282: CALL_OW 247
51286: PUSH
51287: LD_INT 2
51289: EQUAL
51290: AND
51291: PUSH
51292: LD_VAR 0 13
51296: PPUSH
51297: CALL_OW 263
51301: PUSH
51302: LD_INT 1
51304: EQUAL
51305: AND
51306: IFFALSE 51470
// begin if IsDrivenBy ( tmp ) then
51308: LD_VAR 0 13
51312: PPUSH
51313: CALL_OW 311
51317: IFFALSE 51321
// continue ;
51319: GO 51120
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51321: LD_VAR 0 6
51325: PPUSH
51326: LD_INT 3
51328: PUSH
51329: LD_INT 60
51331: PUSH
51332: EMPTY
51333: LIST
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: LD_INT 55
51344: PUSH
51345: EMPTY
51346: LIST
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PPUSH
51356: CALL_OW 72
51360: IFFALSE 51468
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51362: LD_ADDR_VAR 0 18
51366: PUSH
51367: LD_VAR 0 6
51371: PPUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 60
51377: PUSH
51378: EMPTY
51379: LIST
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: LD_INT 55
51390: PUSH
51391: EMPTY
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PPUSH
51402: CALL_OW 72
51406: PUSH
51407: LD_INT 1
51409: ARRAY
51410: ST_TO_ADDR
// if IsInUnit ( driver ) then
51411: LD_VAR 0 18
51415: PPUSH
51416: CALL_OW 310
51420: IFFALSE 51431
// ComExit ( driver ) ;
51422: LD_VAR 0 18
51426: PPUSH
51427: CALL 76811 0 1
// AddComEnterUnit ( driver , tmp ) ;
51431: LD_VAR 0 18
51435: PPUSH
51436: LD_VAR 0 13
51440: PPUSH
51441: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51445: LD_VAR 0 18
51449: PPUSH
51450: LD_VAR 0 7
51454: PPUSH
51455: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51459: LD_VAR 0 18
51463: PPUSH
51464: CALL_OW 181
// end ; continue ;
51468: GO 51120
// end ; if not cleaners or not tmp in cleaners then
51470: LD_VAR 0 6
51474: NOT
51475: PUSH
51476: LD_VAR 0 13
51480: PUSH
51481: LD_VAR 0 6
51485: IN
51486: NOT
51487: OR
51488: IFFALSE 51795
// begin if dep then
51490: LD_VAR 0 17
51494: IFFALSE 51630
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51496: LD_ADDR_VAR 0 16
51500: PUSH
51501: LD_VAR 0 17
51505: PUSH
51506: LD_INT 1
51508: ARRAY
51509: PPUSH
51510: CALL_OW 250
51514: PPUSH
51515: LD_VAR 0 17
51519: PUSH
51520: LD_INT 1
51522: ARRAY
51523: PPUSH
51524: CALL_OW 254
51528: PPUSH
51529: LD_INT 5
51531: PPUSH
51532: CALL_OW 272
51536: PUSH
51537: LD_VAR 0 17
51541: PUSH
51542: LD_INT 1
51544: ARRAY
51545: PPUSH
51546: CALL_OW 251
51550: PPUSH
51551: LD_VAR 0 17
51555: PUSH
51556: LD_INT 1
51558: ARRAY
51559: PPUSH
51560: CALL_OW 254
51564: PPUSH
51565: LD_INT 5
51567: PPUSH
51568: CALL_OW 273
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51577: LD_VAR 0 16
51581: PUSH
51582: LD_INT 1
51584: ARRAY
51585: PPUSH
51586: LD_VAR 0 16
51590: PUSH
51591: LD_INT 2
51593: ARRAY
51594: PPUSH
51595: CALL_OW 488
51599: IFFALSE 51630
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51601: LD_VAR 0 13
51605: PPUSH
51606: LD_VAR 0 16
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: PPUSH
51615: LD_VAR 0 16
51619: PUSH
51620: LD_INT 2
51622: ARRAY
51623: PPUSH
51624: CALL_OW 111
// continue ;
51628: GO 51120
// end ; end ; r := GetDir ( tmp ) ;
51630: LD_ADDR_VAR 0 15
51634: PUSH
51635: LD_VAR 0 13
51639: PPUSH
51640: CALL_OW 254
51644: ST_TO_ADDR
// if r = 5 then
51645: LD_VAR 0 15
51649: PUSH
51650: LD_INT 5
51652: EQUAL
51653: IFFALSE 51663
// r := 0 ;
51655: LD_ADDR_VAR 0 15
51659: PUSH
51660: LD_INT 0
51662: ST_TO_ADDR
// for j = r to 5 do
51663: LD_ADDR_VAR 0 10
51667: PUSH
51668: DOUBLE
51669: LD_VAR 0 15
51673: DEC
51674: ST_TO_ADDR
51675: LD_INT 5
51677: PUSH
51678: FOR_TO
51679: IFFALSE 51793
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51681: LD_ADDR_VAR 0 11
51685: PUSH
51686: LD_VAR 0 13
51690: PPUSH
51691: CALL_OW 250
51695: PPUSH
51696: LD_VAR 0 10
51700: PPUSH
51701: LD_INT 2
51703: PPUSH
51704: CALL_OW 272
51708: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51709: LD_ADDR_VAR 0 12
51713: PUSH
51714: LD_VAR 0 13
51718: PPUSH
51719: CALL_OW 251
51723: PPUSH
51724: LD_VAR 0 10
51728: PPUSH
51729: LD_INT 2
51731: PPUSH
51732: CALL_OW 273
51736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51737: LD_VAR 0 11
51741: PPUSH
51742: LD_VAR 0 12
51746: PPUSH
51747: CALL_OW 488
51751: PUSH
51752: LD_VAR 0 11
51756: PPUSH
51757: LD_VAR 0 12
51761: PPUSH
51762: CALL_OW 428
51766: NOT
51767: AND
51768: IFFALSE 51791
// begin ComMoveXY ( tmp , _x , _y ) ;
51770: LD_VAR 0 13
51774: PPUSH
51775: LD_VAR 0 11
51779: PPUSH
51780: LD_VAR 0 12
51784: PPUSH
51785: CALL_OW 111
// break ;
51789: GO 51793
// end ; end ;
51791: GO 51678
51793: POP
51794: POP
// end ; end ;
51795: GO 51120
51797: POP
51798: POP
// end ;
51799: LD_VAR 0 8
51803: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51804: LD_INT 0
51806: PPUSH
// result := true ;
51807: LD_ADDR_VAR 0 3
51811: PUSH
51812: LD_INT 1
51814: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51815: LD_VAR 0 2
51819: PUSH
51820: LD_INT 24
51822: DOUBLE
51823: EQUAL
51824: IFTRUE 51834
51826: LD_INT 33
51828: DOUBLE
51829: EQUAL
51830: IFTRUE 51834
51832: GO 51859
51834: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51835: LD_ADDR_VAR 0 3
51839: PUSH
51840: LD_INT 32
51842: PPUSH
51843: LD_VAR 0 1
51847: PPUSH
51848: CALL_OW 321
51852: PUSH
51853: LD_INT 2
51855: EQUAL
51856: ST_TO_ADDR
51857: GO 52175
51859: LD_INT 20
51861: DOUBLE
51862: EQUAL
51863: IFTRUE 51867
51865: GO 51892
51867: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51868: LD_ADDR_VAR 0 3
51872: PUSH
51873: LD_INT 6
51875: PPUSH
51876: LD_VAR 0 1
51880: PPUSH
51881: CALL_OW 321
51885: PUSH
51886: LD_INT 2
51888: EQUAL
51889: ST_TO_ADDR
51890: GO 52175
51892: LD_INT 22
51894: DOUBLE
51895: EQUAL
51896: IFTRUE 51906
51898: LD_INT 36
51900: DOUBLE
51901: EQUAL
51902: IFTRUE 51906
51904: GO 51931
51906: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51907: LD_ADDR_VAR 0 3
51911: PUSH
51912: LD_INT 15
51914: PPUSH
51915: LD_VAR 0 1
51919: PPUSH
51920: CALL_OW 321
51924: PUSH
51925: LD_INT 2
51927: EQUAL
51928: ST_TO_ADDR
51929: GO 52175
51931: LD_INT 30
51933: DOUBLE
51934: EQUAL
51935: IFTRUE 51939
51937: GO 51964
51939: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51940: LD_ADDR_VAR 0 3
51944: PUSH
51945: LD_INT 20
51947: PPUSH
51948: LD_VAR 0 1
51952: PPUSH
51953: CALL_OW 321
51957: PUSH
51958: LD_INT 2
51960: EQUAL
51961: ST_TO_ADDR
51962: GO 52175
51964: LD_INT 28
51966: DOUBLE
51967: EQUAL
51968: IFTRUE 51978
51970: LD_INT 21
51972: DOUBLE
51973: EQUAL
51974: IFTRUE 51978
51976: GO 52003
51978: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51979: LD_ADDR_VAR 0 3
51983: PUSH
51984: LD_INT 21
51986: PPUSH
51987: LD_VAR 0 1
51991: PPUSH
51992: CALL_OW 321
51996: PUSH
51997: LD_INT 2
51999: EQUAL
52000: ST_TO_ADDR
52001: GO 52175
52003: LD_INT 16
52005: DOUBLE
52006: EQUAL
52007: IFTRUE 52011
52009: GO 52036
52011: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52012: LD_ADDR_VAR 0 3
52016: PUSH
52017: LD_INT 84
52019: PPUSH
52020: LD_VAR 0 1
52024: PPUSH
52025: CALL_OW 321
52029: PUSH
52030: LD_INT 2
52032: EQUAL
52033: ST_TO_ADDR
52034: GO 52175
52036: LD_INT 19
52038: DOUBLE
52039: EQUAL
52040: IFTRUE 52050
52042: LD_INT 23
52044: DOUBLE
52045: EQUAL
52046: IFTRUE 52050
52048: GO 52075
52050: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52051: LD_ADDR_VAR 0 3
52055: PUSH
52056: LD_INT 83
52058: PPUSH
52059: LD_VAR 0 1
52063: PPUSH
52064: CALL_OW 321
52068: PUSH
52069: LD_INT 2
52071: EQUAL
52072: ST_TO_ADDR
52073: GO 52175
52075: LD_INT 17
52077: DOUBLE
52078: EQUAL
52079: IFTRUE 52083
52081: GO 52108
52083: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52084: LD_ADDR_VAR 0 3
52088: PUSH
52089: LD_INT 39
52091: PPUSH
52092: LD_VAR 0 1
52096: PPUSH
52097: CALL_OW 321
52101: PUSH
52102: LD_INT 2
52104: EQUAL
52105: ST_TO_ADDR
52106: GO 52175
52108: LD_INT 18
52110: DOUBLE
52111: EQUAL
52112: IFTRUE 52116
52114: GO 52141
52116: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52117: LD_ADDR_VAR 0 3
52121: PUSH
52122: LD_INT 40
52124: PPUSH
52125: LD_VAR 0 1
52129: PPUSH
52130: CALL_OW 321
52134: PUSH
52135: LD_INT 2
52137: EQUAL
52138: ST_TO_ADDR
52139: GO 52175
52141: LD_INT 27
52143: DOUBLE
52144: EQUAL
52145: IFTRUE 52149
52147: GO 52174
52149: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52150: LD_ADDR_VAR 0 3
52154: PUSH
52155: LD_INT 35
52157: PPUSH
52158: LD_VAR 0 1
52162: PPUSH
52163: CALL_OW 321
52167: PUSH
52168: LD_INT 2
52170: EQUAL
52171: ST_TO_ADDR
52172: GO 52175
52174: POP
// end ;
52175: LD_VAR 0 3
52179: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52180: LD_INT 0
52182: PPUSH
52183: PPUSH
52184: PPUSH
52185: PPUSH
52186: PPUSH
52187: PPUSH
52188: PPUSH
52189: PPUSH
52190: PPUSH
52191: PPUSH
52192: PPUSH
// result := false ;
52193: LD_ADDR_VAR 0 6
52197: PUSH
52198: LD_INT 0
52200: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52201: LD_VAR 0 1
52205: NOT
52206: PUSH
52207: LD_VAR 0 1
52211: PPUSH
52212: CALL_OW 266
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: IN
52227: NOT
52228: OR
52229: PUSH
52230: LD_VAR 0 2
52234: NOT
52235: OR
52236: PUSH
52237: LD_VAR 0 5
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: LD_INT 4
52256: PUSH
52257: LD_INT 5
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: IN
52268: NOT
52269: OR
52270: PUSH
52271: LD_VAR 0 3
52275: PPUSH
52276: LD_VAR 0 4
52280: PPUSH
52281: CALL_OW 488
52285: NOT
52286: OR
52287: IFFALSE 52291
// exit ;
52289: GO 53027
// side := GetSide ( depot ) ;
52291: LD_ADDR_VAR 0 9
52295: PUSH
52296: LD_VAR 0 1
52300: PPUSH
52301: CALL_OW 255
52305: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52306: LD_VAR 0 9
52310: PPUSH
52311: LD_VAR 0 2
52315: PPUSH
52316: CALL 51804 0 2
52320: NOT
52321: IFFALSE 52325
// exit ;
52323: GO 53027
// pom := GetBase ( depot ) ;
52325: LD_ADDR_VAR 0 10
52329: PUSH
52330: LD_VAR 0 1
52334: PPUSH
52335: CALL_OW 274
52339: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52340: LD_ADDR_VAR 0 11
52344: PUSH
52345: LD_VAR 0 2
52349: PPUSH
52350: LD_VAR 0 1
52354: PPUSH
52355: CALL_OW 248
52359: PPUSH
52360: CALL_OW 450
52364: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52365: LD_VAR 0 10
52369: PPUSH
52370: LD_INT 1
52372: PPUSH
52373: CALL_OW 275
52377: PUSH
52378: LD_VAR 0 11
52382: PUSH
52383: LD_INT 1
52385: ARRAY
52386: GREATEREQUAL
52387: PUSH
52388: LD_VAR 0 10
52392: PPUSH
52393: LD_INT 2
52395: PPUSH
52396: CALL_OW 275
52400: PUSH
52401: LD_VAR 0 11
52405: PUSH
52406: LD_INT 2
52408: ARRAY
52409: GREATEREQUAL
52410: AND
52411: PUSH
52412: LD_VAR 0 10
52416: PPUSH
52417: LD_INT 3
52419: PPUSH
52420: CALL_OW 275
52424: PUSH
52425: LD_VAR 0 11
52429: PUSH
52430: LD_INT 3
52432: ARRAY
52433: GREATEREQUAL
52434: AND
52435: NOT
52436: IFFALSE 52440
// exit ;
52438: GO 53027
// if GetBType ( depot ) = b_depot then
52440: LD_VAR 0 1
52444: PPUSH
52445: CALL_OW 266
52449: PUSH
52450: LD_INT 0
52452: EQUAL
52453: IFFALSE 52465
// dist := 28 else
52455: LD_ADDR_VAR 0 14
52459: PUSH
52460: LD_INT 28
52462: ST_TO_ADDR
52463: GO 52473
// dist := 36 ;
52465: LD_ADDR_VAR 0 14
52469: PUSH
52470: LD_INT 36
52472: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52473: LD_VAR 0 1
52477: PPUSH
52478: LD_VAR 0 3
52482: PPUSH
52483: LD_VAR 0 4
52487: PPUSH
52488: CALL_OW 297
52492: PUSH
52493: LD_VAR 0 14
52497: GREATER
52498: IFFALSE 52502
// exit ;
52500: GO 53027
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52502: LD_ADDR_VAR 0 12
52506: PUSH
52507: LD_VAR 0 2
52511: PPUSH
52512: LD_VAR 0 3
52516: PPUSH
52517: LD_VAR 0 4
52521: PPUSH
52522: LD_VAR 0 5
52526: PPUSH
52527: LD_VAR 0 1
52531: PPUSH
52532: CALL_OW 248
52536: PPUSH
52537: LD_INT 0
52539: PPUSH
52540: CALL 53032 0 6
52544: ST_TO_ADDR
// if not hexes then
52545: LD_VAR 0 12
52549: NOT
52550: IFFALSE 52554
// exit ;
52552: GO 53027
// hex := GetHexInfo ( x , y ) ;
52554: LD_ADDR_VAR 0 15
52558: PUSH
52559: LD_VAR 0 3
52563: PPUSH
52564: LD_VAR 0 4
52568: PPUSH
52569: CALL_OW 546
52573: ST_TO_ADDR
// if hex [ 1 ] then
52574: LD_VAR 0 15
52578: PUSH
52579: LD_INT 1
52581: ARRAY
52582: IFFALSE 52586
// exit ;
52584: GO 53027
// height := hex [ 2 ] ;
52586: LD_ADDR_VAR 0 13
52590: PUSH
52591: LD_VAR 0 15
52595: PUSH
52596: LD_INT 2
52598: ARRAY
52599: ST_TO_ADDR
// for i = 1 to hexes do
52600: LD_ADDR_VAR 0 7
52604: PUSH
52605: DOUBLE
52606: LD_INT 1
52608: DEC
52609: ST_TO_ADDR
52610: LD_VAR 0 12
52614: PUSH
52615: FOR_TO
52616: IFFALSE 52946
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52618: LD_VAR 0 12
52622: PUSH
52623: LD_VAR 0 7
52627: ARRAY
52628: PUSH
52629: LD_INT 1
52631: ARRAY
52632: PPUSH
52633: LD_VAR 0 12
52637: PUSH
52638: LD_VAR 0 7
52642: ARRAY
52643: PUSH
52644: LD_INT 2
52646: ARRAY
52647: PPUSH
52648: CALL_OW 488
52652: NOT
52653: PUSH
52654: LD_VAR 0 12
52658: PUSH
52659: LD_VAR 0 7
52663: ARRAY
52664: PUSH
52665: LD_INT 1
52667: ARRAY
52668: PPUSH
52669: LD_VAR 0 12
52673: PUSH
52674: LD_VAR 0 7
52678: ARRAY
52679: PUSH
52680: LD_INT 2
52682: ARRAY
52683: PPUSH
52684: CALL_OW 428
52688: PUSH
52689: LD_INT 0
52691: GREATER
52692: OR
52693: PUSH
52694: LD_VAR 0 12
52698: PUSH
52699: LD_VAR 0 7
52703: ARRAY
52704: PUSH
52705: LD_INT 1
52707: ARRAY
52708: PPUSH
52709: LD_VAR 0 12
52713: PUSH
52714: LD_VAR 0 7
52718: ARRAY
52719: PUSH
52720: LD_INT 2
52722: ARRAY
52723: PPUSH
52724: CALL_OW 351
52728: OR
52729: IFFALSE 52735
// exit ;
52731: POP
52732: POP
52733: GO 53027
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52735: LD_ADDR_VAR 0 8
52739: PUSH
52740: LD_VAR 0 12
52744: PUSH
52745: LD_VAR 0 7
52749: ARRAY
52750: PUSH
52751: LD_INT 1
52753: ARRAY
52754: PPUSH
52755: LD_VAR 0 12
52759: PUSH
52760: LD_VAR 0 7
52764: ARRAY
52765: PUSH
52766: LD_INT 2
52768: ARRAY
52769: PPUSH
52770: CALL_OW 546
52774: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52775: LD_VAR 0 8
52779: PUSH
52780: LD_INT 1
52782: ARRAY
52783: PUSH
52784: LD_VAR 0 8
52788: PUSH
52789: LD_INT 2
52791: ARRAY
52792: PUSH
52793: LD_VAR 0 13
52797: PUSH
52798: LD_INT 2
52800: PLUS
52801: GREATER
52802: OR
52803: PUSH
52804: LD_VAR 0 8
52808: PUSH
52809: LD_INT 2
52811: ARRAY
52812: PUSH
52813: LD_VAR 0 13
52817: PUSH
52818: LD_INT 2
52820: MINUS
52821: LESS
52822: OR
52823: PUSH
52824: LD_VAR 0 8
52828: PUSH
52829: LD_INT 3
52831: ARRAY
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 8
52838: PUSH
52839: LD_INT 9
52841: PUSH
52842: LD_INT 10
52844: PUSH
52845: LD_INT 11
52847: PUSH
52848: LD_INT 12
52850: PUSH
52851: LD_INT 13
52853: PUSH
52854: LD_INT 16
52856: PUSH
52857: LD_INT 17
52859: PUSH
52860: LD_INT 18
52862: PUSH
52863: LD_INT 19
52865: PUSH
52866: LD_INT 20
52868: PUSH
52869: LD_INT 21
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: IN
52887: NOT
52888: OR
52889: PUSH
52890: LD_VAR 0 8
52894: PUSH
52895: LD_INT 5
52897: ARRAY
52898: NOT
52899: OR
52900: PUSH
52901: LD_VAR 0 8
52905: PUSH
52906: LD_INT 6
52908: ARRAY
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 7
52918: PUSH
52919: LD_INT 9
52921: PUSH
52922: LD_INT 10
52924: PUSH
52925: LD_INT 11
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: IN
52936: NOT
52937: OR
52938: IFFALSE 52944
// exit ;
52940: POP
52941: POP
52942: GO 53027
// end ;
52944: GO 52615
52946: POP
52947: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52948: LD_VAR 0 9
52952: PPUSH
52953: LD_VAR 0 3
52957: PPUSH
52958: LD_VAR 0 4
52962: PPUSH
52963: LD_INT 20
52965: PPUSH
52966: CALL 44979 0 4
52970: PUSH
52971: LD_INT 4
52973: ARRAY
52974: IFFALSE 52978
// exit ;
52976: GO 53027
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52978: LD_VAR 0 2
52982: PUSH
52983: LD_INT 29
52985: PUSH
52986: LD_INT 30
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: IN
52993: PUSH
52994: LD_VAR 0 3
52998: PPUSH
52999: LD_VAR 0 4
53003: PPUSH
53004: LD_VAR 0 9
53008: PPUSH
53009: CALL_OW 440
53013: NOT
53014: AND
53015: IFFALSE 53019
// exit ;
53017: GO 53027
// result := true ;
53019: LD_ADDR_VAR 0 6
53023: PUSH
53024: LD_INT 1
53026: ST_TO_ADDR
// end ;
53027: LD_VAR 0 6
53031: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53032: LD_INT 0
53034: PPUSH
53035: PPUSH
53036: PPUSH
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
53041: PPUSH
53042: PPUSH
53043: PPUSH
53044: PPUSH
53045: PPUSH
53046: PPUSH
53047: PPUSH
53048: PPUSH
53049: PPUSH
53050: PPUSH
53051: PPUSH
53052: PPUSH
53053: PPUSH
53054: PPUSH
53055: PPUSH
53056: PPUSH
53057: PPUSH
53058: PPUSH
53059: PPUSH
53060: PPUSH
53061: PPUSH
53062: PPUSH
53063: PPUSH
53064: PPUSH
53065: PPUSH
53066: PPUSH
53067: PPUSH
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
53072: PPUSH
53073: PPUSH
53074: PPUSH
53075: PPUSH
53076: PPUSH
53077: PPUSH
53078: PPUSH
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
53085: PPUSH
53086: PPUSH
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
53091: PPUSH
// result = [ ] ;
53092: LD_ADDR_VAR 0 7
53096: PUSH
53097: EMPTY
53098: ST_TO_ADDR
// temp_list = [ ] ;
53099: LD_ADDR_VAR 0 9
53103: PUSH
53104: EMPTY
53105: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53106: LD_VAR 0 4
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: LD_INT 4
53125: PUSH
53126: LD_INT 5
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: IN
53137: NOT
53138: PUSH
53139: LD_VAR 0 1
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: IN
53154: PUSH
53155: LD_VAR 0 5
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: IN
53174: NOT
53175: AND
53176: OR
53177: IFFALSE 53181
// exit ;
53179: GO 71572
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53181: LD_VAR 0 1
53185: PUSH
53186: LD_INT 6
53188: PUSH
53189: LD_INT 7
53191: PUSH
53192: LD_INT 8
53194: PUSH
53195: LD_INT 13
53197: PUSH
53198: LD_INT 12
53200: PUSH
53201: LD_INT 15
53203: PUSH
53204: LD_INT 11
53206: PUSH
53207: LD_INT 14
53209: PUSH
53210: LD_INT 10
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: IN
53224: IFFALSE 53234
// btype = b_lab ;
53226: LD_ADDR_VAR 0 1
53230: PUSH
53231: LD_INT 6
53233: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53234: LD_VAR 0 6
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: IN
53253: NOT
53254: PUSH
53255: LD_VAR 0 1
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 3
53271: PUSH
53272: LD_INT 6
53274: PUSH
53275: LD_INT 36
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: LD_INT 5
53283: PUSH
53284: LD_INT 31
53286: PUSH
53287: LD_INT 32
53289: PUSH
53290: LD_INT 33
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: IN
53306: NOT
53307: PUSH
53308: LD_VAR 0 6
53312: PUSH
53313: LD_INT 1
53315: EQUAL
53316: AND
53317: OR
53318: PUSH
53319: LD_VAR 0 1
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: IN
53334: NOT
53335: PUSH
53336: LD_VAR 0 6
53340: PUSH
53341: LD_INT 2
53343: EQUAL
53344: AND
53345: OR
53346: IFFALSE 53356
// mode = 0 ;
53348: LD_ADDR_VAR 0 6
53352: PUSH
53353: LD_INT 0
53355: ST_TO_ADDR
// case mode of 0 :
53356: LD_VAR 0 6
53360: PUSH
53361: LD_INT 0
53363: DOUBLE
53364: EQUAL
53365: IFTRUE 53369
53367: GO 64822
53369: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53370: LD_ADDR_VAR 0 11
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 3
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53563: LD_ADDR_VAR 0 12
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53759: LD_ADDR_VAR 0 13
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 3
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53958: LD_ADDR_VAR 0 14
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54154: LD_ADDR_VAR 0 15
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54347: LD_ADDR_VAR 0 16
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 3
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 3
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54540: LD_ADDR_VAR 0 17
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: NEG
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54770: LD_ADDR_VAR 0 18
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55000: LD_ADDR_VAR 0 19
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55230: LD_ADDR_VAR 0 20
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55460: LD_ADDR_VAR 0 21
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55690: LD_ADDR_VAR 0 22
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55920: LD_ADDR_VAR 0 23
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56200: LD_ADDR_VAR 0 24
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56476: LD_ADDR_VAR 0 25
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56750: LD_ADDR_VAR 0 26
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57026: LD_ADDR_VAR 0 27
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57306: LD_ADDR_VAR 0 28
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57588: LD_ADDR_VAR 0 29
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57867: LD_ADDR_VAR 0 30
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 3
58110: NEG
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58145: LD_ADDR_VAR 0 31
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 3
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58423: LD_ADDR_VAR 0 32
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 3
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58701: LD_ADDR_VAR 0 33
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58980: LD_ADDR_VAR 0 34
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59260: LD_ADDR_VAR 0 35
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59372: LD_ADDR_VAR 0 36
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59484: LD_ADDR_VAR 0 37
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59596: LD_ADDR_VAR 0 38
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59708: LD_ADDR_VAR 0 39
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59820: LD_ADDR_VAR 0 40
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59932: LD_ADDR_VAR 0 41
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 3
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: LD_INT 3
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 3
60206: NEG
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: LD_INT 2
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: LD_INT 3
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60282: LD_ADDR_VAR 0 42
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: LD_INT 3
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: LD_INT 3
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 2
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60632: LD_ADDR_VAR 0 43
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 2
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 3
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60980: LD_ADDR_VAR 0 44
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: NEG
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: LD_INT 3
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 3
61277: NEG
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: LD_INT 3
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61330: LD_ADDR_VAR 0 45
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 2
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 3
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 3
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 3
61627: NEG
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 3
61639: NEG
61640: PUSH
61641: LD_INT 3
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61680: LD_ADDR_VAR 0 46
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 2
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: LD_INT 3
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 3
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: NEG
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62028: LD_ADDR_VAR 0 47
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 2
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: NEG
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: LD_INT 2
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62179: LD_ADDR_VAR 0 48
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62326: LD_ADDR_VAR 0 49
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62470: LD_ADDR_VAR 0 50
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: LD_INT 2
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62614: LD_ADDR_VAR 0 51
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 2
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62761: LD_ADDR_VAR 0 52
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62912: LD_ADDR_VAR 0 53
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 2
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 2
63088: NEG
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 2
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63142: LD_ADDR_VAR 0 54
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 2
63329: NEG
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 2
63341: NEG
63342: PUSH
63343: LD_INT 2
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63372: LD_ADDR_VAR 0 55
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 2
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 2
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 2
63559: NEG
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: LD_INT 2
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63602: LD_ADDR_VAR 0 56
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 2
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: NEG
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 2
63789: NEG
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63832: LD_ADDR_VAR 0 57
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 2
63967: PUSH
63968: LD_INT 2
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 2
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: LD_INT 2
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 2
64008: NEG
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: LD_INT 2
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64062: LD_ADDR_VAR 0 58
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 1
64131: NEG
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: LD_INT 2
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: LD_INT 2
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 2
64238: NEG
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: LD_INT 2
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64292: LD_ADDR_VAR 0 59
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64380: LD_ADDR_VAR 0 60
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64468: LD_ADDR_VAR 0 61
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64556: LD_ADDR_VAR 0 62
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: NEG
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64644: LD_ADDR_VAR 0 63
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64732: LD_ADDR_VAR 0 64
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: ST_TO_ADDR
// end ; 1 :
64820: GO 70717
64822: LD_INT 1
64824: DOUBLE
64825: EQUAL
64826: IFTRUE 64830
64828: GO 67453
64830: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64831: LD_ADDR_VAR 0 11
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: LD_INT 3
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: LD_INT 3
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64875: LD_ADDR_VAR 0 12
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 3
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 3
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64916: LD_ADDR_VAR 0 13
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 3
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 2
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64956: LD_ADDR_VAR 0 14
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64997: LD_ADDR_VAR 0 15
65001: PUSH
65002: LD_INT 2
65004: NEG
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65041: LD_ADDR_VAR 0 16
65045: PUSH
65046: LD_INT 2
65048: NEG
65049: PUSH
65050: LD_INT 3
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: NEG
65061: PUSH
65062: LD_INT 2
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 3
65072: NEG
65073: PUSH
65074: LD_INT 3
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65087: LD_ADDR_VAR 0 17
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: LD_INT 3
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 2
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65131: LD_ADDR_VAR 0 18
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: LD_INT 1
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 3
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 3
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: LIST
65171: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65172: LD_ADDR_VAR 0 19
65176: PUSH
65177: LD_INT 3
65179: PUSH
65180: LD_INT 2
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 3
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: LD_INT 3
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65212: LD_ADDR_VAR 0 20
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: LD_INT 3
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: LD_INT 3
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: LD_INT 2
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: LIST
65252: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65253: LD_ADDR_VAR 0 21
65257: PUSH
65258: LD_INT 2
65260: NEG
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: LIST
65296: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65297: LD_ADDR_VAR 0 22
65301: PUSH
65302: LD_INT 2
65304: NEG
65305: PUSH
65306: LD_INT 3
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 3
65316: NEG
65317: PUSH
65318: LD_INT 2
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: LD_INT 3
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: LIST
65342: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65343: LD_ADDR_VAR 0 23
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: LD_INT 4
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: LD_INT 3
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: LIST
65386: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65387: LD_ADDR_VAR 0 24
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 4
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: LIST
65427: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65428: LD_ADDR_VAR 0 25
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: LD_INT 3
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 4
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: LD_INT 4
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65468: LD_ADDR_VAR 0 26
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 3
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: LD_INT 4
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 3
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65509: LD_ADDR_VAR 0 27
65513: PUSH
65514: LD_INT 3
65516: NEG
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 3
65527: NEG
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 4
65538: NEG
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: LIST
65552: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65553: LD_ADDR_VAR 0 28
65557: PUSH
65558: LD_INT 3
65560: NEG
65561: PUSH
65562: LD_INT 3
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: LD_INT 4
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 4
65584: NEG
65585: PUSH
65586: LD_INT 3
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65599: LD_ADDR_VAR 0 29
65603: PUSH
65604: LD_INT 1
65606: NEG
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 3
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: NEG
65641: PUSH
65642: LD_INT 4
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: LD_INT 4
65655: NEG
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: LD_INT 5
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_INT 5
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: LD_INT 4
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 6
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 6
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 5
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65754: LD_ADDR_VAR 0 30
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 3
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 3
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 4
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 4
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 4
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 5
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 5
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 5
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 6
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 6
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65897: LD_ADDR_VAR 0 31
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: LD_INT 2
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: LD_INT 3
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 2
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 4
65934: PUSH
65935: LD_INT 3
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: LD_INT 4
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: LD_INT 4
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 5
65964: PUSH
65965: LD_INT 4
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 5
65974: PUSH
65975: LD_INT 5
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 4
65984: PUSH
65985: LD_INT 5
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 6
65994: PUSH
65995: LD_INT 5
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 6
66004: PUSH
66005: LD_INT 6
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 5
66014: PUSH
66015: LD_INT 6
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66036: LD_ADDR_VAR 0 32
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: LD_INT 3
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: LD_INT 3
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: NEG
66064: PUSH
66065: LD_INT 2
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: LD_INT 4
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_INT 4
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: LD_INT 3
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: LD_INT 5
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: LD_INT 5
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 1
66125: NEG
66126: PUSH
66127: LD_INT 4
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: PUSH
66137: LD_INT 6
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: LD_INT 6
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66179: LD_ADDR_VAR 0 33
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: LD_INT 1
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 3
66197: NEG
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 3
66208: NEG
66209: PUSH
66210: LD_INT 1
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 3
66220: NEG
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 4
66231: NEG
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 4
66242: NEG
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 4
66254: NEG
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 5
66265: NEG
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 5
66276: NEG
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 5
66288: NEG
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 6
66299: NEG
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 6
66310: NEG
66311: PUSH
66312: LD_INT 1
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66334: LD_ADDR_VAR 0 34
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: LD_INT 3
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 3
66353: NEG
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 3
66365: NEG
66366: PUSH
66367: LD_INT 3
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 3
66377: NEG
66378: PUSH
66379: LD_INT 4
66381: NEG
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 4
66389: NEG
66390: PUSH
66391: LD_INT 3
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 4
66401: NEG
66402: PUSH
66403: LD_INT 4
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 4
66413: NEG
66414: PUSH
66415: LD_INT 5
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 5
66425: NEG
66426: PUSH
66427: LD_INT 4
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 5
66437: NEG
66438: PUSH
66439: LD_INT 5
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 5
66449: NEG
66450: PUSH
66451: LD_INT 6
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 6
66461: NEG
66462: PUSH
66463: LD_INT 5
66465: NEG
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 6
66473: NEG
66474: PUSH
66475: LD_INT 6
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66497: LD_ADDR_VAR 0 41
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 2
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: LD_INT 3
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: LIST
66540: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66541: LD_ADDR_VAR 0 42
66545: PUSH
66546: LD_INT 2
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 2
66558: PUSH
66559: LD_INT 1
66561: NEG
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: LIST
66581: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66582: LD_ADDR_VAR 0 43
66586: PUSH
66587: LD_INT 2
66589: PUSH
66590: LD_INT 2
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: LD_INT 2
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: LD_INT 3
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66622: LD_ADDR_VAR 0 44
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: LD_INT 2
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: LD_INT 3
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66663: LD_ADDR_VAR 0 45
66667: PUSH
66668: LD_INT 2
66670: NEG
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 2
66681: NEG
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 3
66692: NEG
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66707: LD_ADDR_VAR 0 46
66711: PUSH
66712: LD_INT 2
66714: NEG
66715: PUSH
66716: LD_INT 2
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 2
66726: NEG
66727: PUSH
66728: LD_INT 3
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 3
66738: NEG
66739: PUSH
66740: LD_INT 2
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66753: LD_ADDR_VAR 0 47
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: LD_INT 3
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 3
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66786: LD_ADDR_VAR 0 48
66790: PUSH
66791: LD_INT 1
66793: PUSH
66794: LD_INT 2
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66817: LD_ADDR_VAR 0 49
66821: PUSH
66822: LD_INT 3
66824: PUSH
66825: LD_INT 1
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 3
66834: PUSH
66835: LD_INT 2
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66846: LD_ADDR_VAR 0 50
66850: PUSH
66851: LD_INT 2
66853: PUSH
66854: LD_INT 3
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: LD_INT 3
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66875: LD_ADDR_VAR 0 51
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: LD_INT 2
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 2
66893: NEG
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66906: LD_ADDR_VAR 0 52
66910: PUSH
66911: LD_INT 3
66913: NEG
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 3
66925: NEG
66926: PUSH
66927: LD_INT 2
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66939: LD_ADDR_VAR 0 53
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 3
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: LD_INT 3
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: LD_INT 2
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: LIST
66982: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66983: LD_ADDR_VAR 0 54
66987: PUSH
66988: LD_INT 2
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 3
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 3
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: LIST
67023: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67024: LD_ADDR_VAR 0 55
67028: PUSH
67029: LD_INT 3
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 3
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: LD_INT 3
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67064: LD_ADDR_VAR 0 56
67068: PUSH
67069: LD_INT 1
67071: PUSH
67072: LD_INT 3
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 3
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: LD_INT 2
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67105: LD_ADDR_VAR 0 57
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 3
67123: NEG
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67149: LD_ADDR_VAR 0 58
67153: PUSH
67154: LD_INT 2
67156: NEG
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: NEG
67169: PUSH
67170: LD_INT 2
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 3
67180: NEG
67181: PUSH
67182: LD_INT 3
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67195: LD_ADDR_VAR 0 59
67199: PUSH
67200: LD_INT 1
67202: NEG
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 2
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67239: LD_ADDR_VAR 0 60
67243: PUSH
67244: LD_INT 1
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 2
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67280: LD_ADDR_VAR 0 61
67284: PUSH
67285: LD_INT 2
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 2
67297: PUSH
67298: LD_INT 2
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: LD_INT 2
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: LIST
67319: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67320: LD_ADDR_VAR 0 62
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: LD_INT 2
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 2
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 1
67347: NEG
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67361: LD_ADDR_VAR 0 63
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: LD_INT 1
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 2
67379: NEG
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 2
67390: NEG
67391: PUSH
67392: LD_INT 1
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67405: LD_ADDR_VAR 0 64
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 2
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: NEG
67425: PUSH
67426: LD_INT 1
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 2
67436: NEG
67437: PUSH
67438: LD_INT 2
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: ST_TO_ADDR
// end ; 2 :
67451: GO 70717
67453: LD_INT 2
67455: DOUBLE
67456: EQUAL
67457: IFTRUE 67461
67459: GO 70716
67461: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67462: LD_ADDR_VAR 0 29
67466: PUSH
67467: LD_INT 4
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 4
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 5
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 5
67500: PUSH
67501: LD_INT 1
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 4
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: LD_INT 1
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 3
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 5
67552: PUSH
67553: LD_INT 2
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: LD_INT 3
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: LD_INT 2
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 4
67582: PUSH
67583: LD_INT 3
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 4
67592: PUSH
67593: LD_INT 4
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 3
67602: PUSH
67603: LD_INT 4
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: LD_INT 3
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 2
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 4
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 2
67642: PUSH
67643: LD_INT 4
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: LD_INT 4
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 3
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: PUSH
67673: LD_INT 4
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: LD_INT 5
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: LD_INT 5
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: NEG
67703: PUSH
67704: LD_INT 4
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 1
67713: NEG
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: LD_INT 5
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 2
67734: NEG
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 3
67745: NEG
67746: PUSH
67747: LD_INT 0
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 3
67756: NEG
67757: PUSH
67758: LD_INT 1
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 2
67779: NEG
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 3
67790: NEG
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 4
67801: NEG
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 4
67812: NEG
67813: PUSH
67814: LD_INT 1
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 4
67824: NEG
67825: PUSH
67826: LD_INT 2
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 2
67836: NEG
67837: PUSH
67838: LD_INT 2
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 4
67847: NEG
67848: PUSH
67849: LD_INT 4
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 4
67859: NEG
67860: PUSH
67861: LD_INT 5
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 3
67871: NEG
67872: PUSH
67873: LD_INT 4
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 3
67883: NEG
67884: PUSH
67885: LD_INT 3
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 4
67895: NEG
67896: PUSH
67897: LD_INT 3
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 5
67907: NEG
67908: PUSH
67909: LD_INT 4
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 5
67919: NEG
67920: PUSH
67921: LD_INT 5
67923: NEG
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: LD_INT 5
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 5
67943: NEG
67944: PUSH
67945: LD_INT 3
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68000: LD_ADDR_VAR 0 30
68004: PUSH
68005: LD_INT 4
68007: PUSH
68008: LD_INT 4
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 4
68017: PUSH
68018: LD_INT 3
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 5
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 5
68037: PUSH
68038: LD_INT 5
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 4
68047: PUSH
68048: LD_INT 5
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: LD_INT 4
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 5
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: LD_INT 5
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 3
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: LD_INT 2
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 1
68117: PUSH
68118: LD_INT 3
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 1
68127: PUSH
68128: LD_INT 4
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: LD_INT 4
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 1
68147: NEG
68148: PUSH
68149: LD_INT 3
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: LD_INT 2
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 2
68169: PUSH
68170: LD_INT 4
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 2
68179: NEG
68180: PUSH
68181: LD_INT 2
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 4
68201: NEG
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 3
68213: NEG
68214: PUSH
68215: LD_INT 0
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 3
68224: NEG
68225: PUSH
68226: LD_INT 1
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 4
68235: NEG
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 5
68246: NEG
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 5
68257: NEG
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 5
68269: NEG
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 3
68281: NEG
68282: PUSH
68283: LD_INT 2
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: NEG
68293: PUSH
68294: LD_INT 3
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 3
68304: NEG
68305: PUSH
68306: LD_INT 4
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 2
68316: NEG
68317: PUSH
68318: LD_INT 3
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 2
68328: NEG
68329: PUSH
68330: LD_INT 2
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 3
68340: NEG
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 4
68352: NEG
68353: PUSH
68354: LD_INT 3
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 4
68364: NEG
68365: PUSH
68366: LD_INT 4
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 2
68376: NEG
68377: PUSH
68378: LD_INT 4
68380: NEG
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 4
68388: NEG
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: LD_INT 4
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: LD_INT 5
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 1
68422: PUSH
68423: LD_INT 4
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 1
68433: PUSH
68434: LD_INT 3
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 3
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: PUSH
68457: LD_INT 4
68459: NEG
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 1
68467: NEG
68468: PUSH
68469: LD_INT 5
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: LD_INT 3
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 2
68490: NEG
68491: PUSH
68492: LD_INT 5
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68547: LD_ADDR_VAR 0 31
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: LD_INT 4
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 3
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: LD_INT 4
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: LD_INT 5
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: LD_INT 5
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: NEG
68605: PUSH
68606: LD_INT 4
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: LD_INT 3
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: LD_INT 5
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 2
68636: NEG
68637: PUSH
68638: LD_INT 3
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 3
68647: NEG
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 3
68658: NEG
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 2
68670: NEG
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 2
68681: NEG
68682: PUSH
68683: LD_INT 1
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 3
68692: NEG
68693: PUSH
68694: LD_INT 1
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 4
68714: NEG
68715: PUSH
68716: LD_INT 1
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: LD_INT 2
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 2
68738: NEG
68739: PUSH
68740: LD_INT 2
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 4
68749: NEG
68750: PUSH
68751: LD_INT 4
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 4
68761: NEG
68762: PUSH
68763: LD_INT 5
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 3
68773: NEG
68774: PUSH
68775: LD_INT 4
68777: NEG
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 3
68785: NEG
68786: PUSH
68787: LD_INT 3
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 4
68797: NEG
68798: PUSH
68799: LD_INT 3
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 5
68809: NEG
68810: PUSH
68811: LD_INT 4
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 5
68821: NEG
68822: PUSH
68823: LD_INT 5
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: NEG
68834: PUSH
68835: LD_INT 5
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 5
68845: NEG
68846: PUSH
68847: LD_INT 3
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 0
68857: PUSH
68858: LD_INT 3
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: LD_INT 4
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: LD_INT 3
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 1
68890: PUSH
68891: LD_INT 2
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: LD_INT 2
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: LD_INT 3
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 1
68924: NEG
68925: PUSH
68926: LD_INT 4
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 2
68936: PUSH
68937: LD_INT 2
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 2
68947: NEG
68948: PUSH
68949: LD_INT 4
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 4
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 4
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 5
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 5
68990: PUSH
68991: LD_INT 1
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 4
69000: PUSH
69001: LD_INT 1
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 3
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 3
69020: PUSH
69021: LD_INT 1
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 3
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 5
69042: PUSH
69043: LD_INT 2
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69097: LD_ADDR_VAR 0 32
69101: PUSH
69102: LD_INT 4
69104: NEG
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 4
69115: NEG
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: LD_INT 0
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: NEG
69139: PUSH
69140: LD_INT 1
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 4
69149: NEG
69150: PUSH
69151: LD_INT 1
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 5
69160: NEG
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 5
69171: NEG
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 5
69183: NEG
69184: PUSH
69185: LD_INT 2
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 3
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 3
69206: NEG
69207: PUSH
69208: LD_INT 3
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 3
69218: NEG
69219: PUSH
69220: LD_INT 4
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 2
69230: NEG
69231: PUSH
69232: LD_INT 3
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 2
69242: NEG
69243: PUSH
69244: LD_INT 2
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 3
69254: NEG
69255: PUSH
69256: LD_INT 2
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 4
69266: NEG
69267: PUSH
69268: LD_INT 3
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 4
69278: NEG
69279: PUSH
69280: LD_INT 4
69282: NEG
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PUSH
69292: LD_INT 4
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 4
69302: NEG
69303: PUSH
69304: LD_INT 2
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_INT 4
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: LD_INT 5
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 1
69336: PUSH
69337: LD_INT 4
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 1
69347: PUSH
69348: LD_INT 3
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 3
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: LD_INT 4
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: LD_INT 5
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 3
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: LD_INT 5
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 3
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: PUSH
69427: LD_INT 1
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 4
69437: PUSH
69438: LD_INT 0
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 4
69447: PUSH
69448: LD_INT 1
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 3
69457: PUSH
69458: LD_INT 1
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 2
69467: PUSH
69468: LD_INT 0
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 2
69477: PUSH
69478: LD_INT 1
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 2
69488: PUSH
69489: LD_INT 2
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 4
69499: PUSH
69500: LD_INT 2
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 4
69509: PUSH
69510: LD_INT 4
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 4
69519: PUSH
69520: LD_INT 3
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 5
69529: PUSH
69530: LD_INT 4
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 5
69539: PUSH
69540: LD_INT 5
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 4
69549: PUSH
69550: LD_INT 5
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 3
69559: PUSH
69560: LD_INT 4
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 3
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 5
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 3
69589: PUSH
69590: LD_INT 5
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69644: LD_ADDR_VAR 0 33
69648: PUSH
69649: LD_INT 4
69651: NEG
69652: PUSH
69653: LD_INT 4
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 4
69663: NEG
69664: PUSH
69665: LD_INT 5
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: NEG
69676: PUSH
69677: LD_INT 4
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: NEG
69688: PUSH
69689: LD_INT 3
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 4
69699: NEG
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 5
69711: NEG
69712: PUSH
69713: LD_INT 4
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 5
69723: NEG
69724: PUSH
69725: LD_INT 5
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 3
69735: NEG
69736: PUSH
69737: LD_INT 5
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 5
69747: NEG
69748: PUSH
69749: LD_INT 3
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: LD_INT 3
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 4
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: LD_INT 3
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: LD_INT 2
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: LD_INT 2
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: PUSH
69816: LD_INT 3
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: PUSH
69828: LD_INT 4
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: LD_INT 2
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: LD_INT 4
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 4
69861: PUSH
69862: LD_INT 0
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 4
69871: PUSH
69872: LD_INT 1
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 5
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 5
69892: PUSH
69893: LD_INT 1
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 4
69902: PUSH
69903: LD_INT 1
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: LD_INT 0
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 3
69922: PUSH
69923: LD_INT 1
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 3
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 5
69944: PUSH
69945: LD_INT 2
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 3
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 3
69964: PUSH
69965: LD_INT 2
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 4
69974: PUSH
69975: LD_INT 3
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 4
69984: PUSH
69985: LD_INT 4
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 2
70004: PUSH
70005: LD_INT 3
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 2
70014: PUSH
70015: LD_INT 2
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 4
70024: PUSH
70025: LD_INT 2
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 2
70034: PUSH
70035: LD_INT 4
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 0
70044: PUSH
70045: LD_INT 4
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: LD_INT 3
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 1
70064: PUSH
70065: LD_INT 4
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: LD_INT 5
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 0
70084: PUSH
70085: LD_INT 5
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 1
70094: NEG
70095: PUSH
70096: LD_INT 4
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 2
70116: PUSH
70117: LD_INT 5
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 2
70126: NEG
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70182: LD_ADDR_VAR 0 34
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: LD_INT 4
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: LD_INT 5
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 1
70211: PUSH
70212: LD_INT 4
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 1
70222: PUSH
70223: LD_INT 3
70225: NEG
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: LD_INT 3
70236: NEG
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: LD_INT 4
70248: NEG
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 1
70256: NEG
70257: PUSH
70258: LD_INT 5
70260: NEG
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 2
70268: PUSH
70269: LD_INT 3
70271: NEG
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 2
70279: NEG
70280: PUSH
70281: LD_INT 5
70283: NEG
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 3
70291: PUSH
70292: LD_INT 0
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: PUSH
70302: LD_INT 1
70304: NEG
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 4
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: LD_INT 1
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 2
70342: PUSH
70343: LD_INT 0
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 2
70352: PUSH
70353: LD_INT 1
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 2
70363: PUSH
70364: LD_INT 2
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 4
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 4
70384: PUSH
70385: LD_INT 4
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 4
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 5
70404: PUSH
70405: LD_INT 4
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 5
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 4
70424: PUSH
70425: LD_INT 5
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: LD_INT 4
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 3
70444: PUSH
70445: LD_INT 3
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 5
70454: PUSH
70455: LD_INT 3
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 3
70464: PUSH
70465: LD_INT 5
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: LD_INT 3
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 0
70484: PUSH
70485: LD_INT 2
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 1
70494: PUSH
70495: LD_INT 3
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 1
70504: PUSH
70505: LD_INT 4
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 0
70514: PUSH
70515: LD_INT 4
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 1
70524: NEG
70525: PUSH
70526: LD_INT 3
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: LD_INT 2
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 2
70546: PUSH
70547: LD_INT 4
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 2
70556: NEG
70557: PUSH
70558: LD_INT 2
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 4
70567: NEG
70568: PUSH
70569: LD_INT 0
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 4
70578: NEG
70579: PUSH
70580: LD_INT 1
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 3
70590: NEG
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 3
70601: NEG
70602: PUSH
70603: LD_INT 1
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 4
70612: NEG
70613: PUSH
70614: LD_INT 1
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 5
70623: NEG
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 5
70634: NEG
70635: PUSH
70636: LD_INT 1
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 5
70646: NEG
70647: PUSH
70648: LD_INT 2
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 3
70658: NEG
70659: PUSH
70660: LD_INT 2
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: ST_TO_ADDR
// end ; end ;
70714: GO 70717
70716: POP
// case btype of b_depot , b_warehouse :
70717: LD_VAR 0 1
70721: PUSH
70722: LD_INT 0
70724: DOUBLE
70725: EQUAL
70726: IFTRUE 70736
70728: LD_INT 1
70730: DOUBLE
70731: EQUAL
70732: IFTRUE 70736
70734: GO 70937
70736: POP
// case nation of nation_american :
70737: LD_VAR 0 5
70741: PUSH
70742: LD_INT 1
70744: DOUBLE
70745: EQUAL
70746: IFTRUE 70750
70748: GO 70806
70750: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70751: LD_ADDR_VAR 0 9
70755: PUSH
70756: LD_VAR 0 11
70760: PUSH
70761: LD_VAR 0 12
70765: PUSH
70766: LD_VAR 0 13
70770: PUSH
70771: LD_VAR 0 14
70775: PUSH
70776: LD_VAR 0 15
70780: PUSH
70781: LD_VAR 0 16
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: PUSH
70794: LD_VAR 0 4
70798: PUSH
70799: LD_INT 1
70801: PLUS
70802: ARRAY
70803: ST_TO_ADDR
70804: GO 70935
70806: LD_INT 2
70808: DOUBLE
70809: EQUAL
70810: IFTRUE 70814
70812: GO 70870
70814: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70815: LD_ADDR_VAR 0 9
70819: PUSH
70820: LD_VAR 0 17
70824: PUSH
70825: LD_VAR 0 18
70829: PUSH
70830: LD_VAR 0 19
70834: PUSH
70835: LD_VAR 0 20
70839: PUSH
70840: LD_VAR 0 21
70844: PUSH
70845: LD_VAR 0 22
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: PUSH
70858: LD_VAR 0 4
70862: PUSH
70863: LD_INT 1
70865: PLUS
70866: ARRAY
70867: ST_TO_ADDR
70868: GO 70935
70870: LD_INT 3
70872: DOUBLE
70873: EQUAL
70874: IFTRUE 70878
70876: GO 70934
70878: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70879: LD_ADDR_VAR 0 9
70883: PUSH
70884: LD_VAR 0 23
70888: PUSH
70889: LD_VAR 0 24
70893: PUSH
70894: LD_VAR 0 25
70898: PUSH
70899: LD_VAR 0 26
70903: PUSH
70904: LD_VAR 0 27
70908: PUSH
70909: LD_VAR 0 28
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: PUSH
70922: LD_VAR 0 4
70926: PUSH
70927: LD_INT 1
70929: PLUS
70930: ARRAY
70931: ST_TO_ADDR
70932: GO 70935
70934: POP
70935: GO 71490
70937: LD_INT 2
70939: DOUBLE
70940: EQUAL
70941: IFTRUE 70951
70943: LD_INT 3
70945: DOUBLE
70946: EQUAL
70947: IFTRUE 70951
70949: GO 71007
70951: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70952: LD_ADDR_VAR 0 9
70956: PUSH
70957: LD_VAR 0 29
70961: PUSH
70962: LD_VAR 0 30
70966: PUSH
70967: LD_VAR 0 31
70971: PUSH
70972: LD_VAR 0 32
70976: PUSH
70977: LD_VAR 0 33
70981: PUSH
70982: LD_VAR 0 34
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: PUSH
70995: LD_VAR 0 4
70999: PUSH
71000: LD_INT 1
71002: PLUS
71003: ARRAY
71004: ST_TO_ADDR
71005: GO 71490
71007: LD_INT 16
71009: DOUBLE
71010: EQUAL
71011: IFTRUE 71069
71013: LD_INT 17
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71069
71019: LD_INT 18
71021: DOUBLE
71022: EQUAL
71023: IFTRUE 71069
71025: LD_INT 19
71027: DOUBLE
71028: EQUAL
71029: IFTRUE 71069
71031: LD_INT 22
71033: DOUBLE
71034: EQUAL
71035: IFTRUE 71069
71037: LD_INT 20
71039: DOUBLE
71040: EQUAL
71041: IFTRUE 71069
71043: LD_INT 21
71045: DOUBLE
71046: EQUAL
71047: IFTRUE 71069
71049: LD_INT 23
71051: DOUBLE
71052: EQUAL
71053: IFTRUE 71069
71055: LD_INT 24
71057: DOUBLE
71058: EQUAL
71059: IFTRUE 71069
71061: LD_INT 25
71063: DOUBLE
71064: EQUAL
71065: IFTRUE 71069
71067: GO 71125
71069: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71070: LD_ADDR_VAR 0 9
71074: PUSH
71075: LD_VAR 0 35
71079: PUSH
71080: LD_VAR 0 36
71084: PUSH
71085: LD_VAR 0 37
71089: PUSH
71090: LD_VAR 0 38
71094: PUSH
71095: LD_VAR 0 39
71099: PUSH
71100: LD_VAR 0 40
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: PUSH
71113: LD_VAR 0 4
71117: PUSH
71118: LD_INT 1
71120: PLUS
71121: ARRAY
71122: ST_TO_ADDR
71123: GO 71490
71125: LD_INT 6
71127: DOUBLE
71128: EQUAL
71129: IFTRUE 71181
71131: LD_INT 7
71133: DOUBLE
71134: EQUAL
71135: IFTRUE 71181
71137: LD_INT 8
71139: DOUBLE
71140: EQUAL
71141: IFTRUE 71181
71143: LD_INT 13
71145: DOUBLE
71146: EQUAL
71147: IFTRUE 71181
71149: LD_INT 12
71151: DOUBLE
71152: EQUAL
71153: IFTRUE 71181
71155: LD_INT 15
71157: DOUBLE
71158: EQUAL
71159: IFTRUE 71181
71161: LD_INT 11
71163: DOUBLE
71164: EQUAL
71165: IFTRUE 71181
71167: LD_INT 14
71169: DOUBLE
71170: EQUAL
71171: IFTRUE 71181
71173: LD_INT 10
71175: DOUBLE
71176: EQUAL
71177: IFTRUE 71181
71179: GO 71237
71181: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71182: LD_ADDR_VAR 0 9
71186: PUSH
71187: LD_VAR 0 41
71191: PUSH
71192: LD_VAR 0 42
71196: PUSH
71197: LD_VAR 0 43
71201: PUSH
71202: LD_VAR 0 44
71206: PUSH
71207: LD_VAR 0 45
71211: PUSH
71212: LD_VAR 0 46
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: PUSH
71225: LD_VAR 0 4
71229: PUSH
71230: LD_INT 1
71232: PLUS
71233: ARRAY
71234: ST_TO_ADDR
71235: GO 71490
71237: LD_INT 36
71239: DOUBLE
71240: EQUAL
71241: IFTRUE 71245
71243: GO 71301
71245: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71246: LD_ADDR_VAR 0 9
71250: PUSH
71251: LD_VAR 0 47
71255: PUSH
71256: LD_VAR 0 48
71260: PUSH
71261: LD_VAR 0 49
71265: PUSH
71266: LD_VAR 0 50
71270: PUSH
71271: LD_VAR 0 51
71275: PUSH
71276: LD_VAR 0 52
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: PUSH
71289: LD_VAR 0 4
71293: PUSH
71294: LD_INT 1
71296: PLUS
71297: ARRAY
71298: ST_TO_ADDR
71299: GO 71490
71301: LD_INT 4
71303: DOUBLE
71304: EQUAL
71305: IFTRUE 71327
71307: LD_INT 5
71309: DOUBLE
71310: EQUAL
71311: IFTRUE 71327
71313: LD_INT 34
71315: DOUBLE
71316: EQUAL
71317: IFTRUE 71327
71319: LD_INT 37
71321: DOUBLE
71322: EQUAL
71323: IFTRUE 71327
71325: GO 71383
71327: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71328: LD_ADDR_VAR 0 9
71332: PUSH
71333: LD_VAR 0 53
71337: PUSH
71338: LD_VAR 0 54
71342: PUSH
71343: LD_VAR 0 55
71347: PUSH
71348: LD_VAR 0 56
71352: PUSH
71353: LD_VAR 0 57
71357: PUSH
71358: LD_VAR 0 58
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: PUSH
71371: LD_VAR 0 4
71375: PUSH
71376: LD_INT 1
71378: PLUS
71379: ARRAY
71380: ST_TO_ADDR
71381: GO 71490
71383: LD_INT 31
71385: DOUBLE
71386: EQUAL
71387: IFTRUE 71433
71389: LD_INT 32
71391: DOUBLE
71392: EQUAL
71393: IFTRUE 71433
71395: LD_INT 33
71397: DOUBLE
71398: EQUAL
71399: IFTRUE 71433
71401: LD_INT 27
71403: DOUBLE
71404: EQUAL
71405: IFTRUE 71433
71407: LD_INT 26
71409: DOUBLE
71410: EQUAL
71411: IFTRUE 71433
71413: LD_INT 28
71415: DOUBLE
71416: EQUAL
71417: IFTRUE 71433
71419: LD_INT 29
71421: DOUBLE
71422: EQUAL
71423: IFTRUE 71433
71425: LD_INT 30
71427: DOUBLE
71428: EQUAL
71429: IFTRUE 71433
71431: GO 71489
71433: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71434: LD_ADDR_VAR 0 9
71438: PUSH
71439: LD_VAR 0 59
71443: PUSH
71444: LD_VAR 0 60
71448: PUSH
71449: LD_VAR 0 61
71453: PUSH
71454: LD_VAR 0 62
71458: PUSH
71459: LD_VAR 0 63
71463: PUSH
71464: LD_VAR 0 64
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: PUSH
71477: LD_VAR 0 4
71481: PUSH
71482: LD_INT 1
71484: PLUS
71485: ARRAY
71486: ST_TO_ADDR
71487: GO 71490
71489: POP
// temp_list2 = [ ] ;
71490: LD_ADDR_VAR 0 10
71494: PUSH
71495: EMPTY
71496: ST_TO_ADDR
// for i in temp_list do
71497: LD_ADDR_VAR 0 8
71501: PUSH
71502: LD_VAR 0 9
71506: PUSH
71507: FOR_IN
71508: IFFALSE 71560
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71510: LD_ADDR_VAR 0 10
71514: PUSH
71515: LD_VAR 0 10
71519: PUSH
71520: LD_VAR 0 8
71524: PUSH
71525: LD_INT 1
71527: ARRAY
71528: PUSH
71529: LD_VAR 0 2
71533: PLUS
71534: PUSH
71535: LD_VAR 0 8
71539: PUSH
71540: LD_INT 2
71542: ARRAY
71543: PUSH
71544: LD_VAR 0 3
71548: PLUS
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: EMPTY
71555: LIST
71556: ADD
71557: ST_TO_ADDR
71558: GO 71507
71560: POP
71561: POP
// result = temp_list2 ;
71562: LD_ADDR_VAR 0 7
71566: PUSH
71567: LD_VAR 0 10
71571: ST_TO_ADDR
// end ;
71572: LD_VAR 0 7
71576: RET
// export function EnemyInRange ( unit , dist ) ; begin
71577: LD_INT 0
71579: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71580: LD_ADDR_VAR 0 3
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: CALL_OW 255
71594: PPUSH
71595: LD_VAR 0 1
71599: PPUSH
71600: CALL_OW 250
71604: PPUSH
71605: LD_VAR 0 1
71609: PPUSH
71610: CALL_OW 251
71614: PPUSH
71615: LD_VAR 0 2
71619: PPUSH
71620: CALL 44979 0 4
71624: PUSH
71625: LD_INT 4
71627: ARRAY
71628: ST_TO_ADDR
// end ;
71629: LD_VAR 0 3
71633: RET
// export function PlayerSeeMe ( unit ) ; begin
71634: LD_INT 0
71636: PPUSH
// result := See ( your_side , unit ) ;
71637: LD_ADDR_VAR 0 2
71641: PUSH
71642: LD_OWVAR 2
71646: PPUSH
71647: LD_VAR 0 1
71651: PPUSH
71652: CALL_OW 292
71656: ST_TO_ADDR
// end ;
71657: LD_VAR 0 2
71661: RET
// export function ReverseDir ( unit ) ; begin
71662: LD_INT 0
71664: PPUSH
// if not unit then
71665: LD_VAR 0 1
71669: NOT
71670: IFFALSE 71674
// exit ;
71672: GO 71697
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71674: LD_ADDR_VAR 0 2
71678: PUSH
71679: LD_VAR 0 1
71683: PPUSH
71684: CALL_OW 254
71688: PUSH
71689: LD_INT 3
71691: PLUS
71692: PUSH
71693: LD_INT 6
71695: MOD
71696: ST_TO_ADDR
// end ;
71697: LD_VAR 0 2
71701: RET
// export function ReverseArray ( array ) ; var i ; begin
71702: LD_INT 0
71704: PPUSH
71705: PPUSH
// if not array then
71706: LD_VAR 0 1
71710: NOT
71711: IFFALSE 71715
// exit ;
71713: GO 71770
// result := [ ] ;
71715: LD_ADDR_VAR 0 2
71719: PUSH
71720: EMPTY
71721: ST_TO_ADDR
// for i := array downto 1 do
71722: LD_ADDR_VAR 0 3
71726: PUSH
71727: DOUBLE
71728: LD_VAR 0 1
71732: INC
71733: ST_TO_ADDR
71734: LD_INT 1
71736: PUSH
71737: FOR_DOWNTO
71738: IFFALSE 71768
// result := Join ( result , array [ i ] ) ;
71740: LD_ADDR_VAR 0 2
71744: PUSH
71745: LD_VAR 0 2
71749: PPUSH
71750: LD_VAR 0 1
71754: PUSH
71755: LD_VAR 0 3
71759: ARRAY
71760: PPUSH
71761: CALL 76413 0 2
71765: ST_TO_ADDR
71766: GO 71737
71768: POP
71769: POP
// end ;
71770: LD_VAR 0 2
71774: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71775: LD_INT 0
71777: PPUSH
71778: PPUSH
71779: PPUSH
71780: PPUSH
71781: PPUSH
71782: PPUSH
// if not unit or not hexes then
71783: LD_VAR 0 1
71787: NOT
71788: PUSH
71789: LD_VAR 0 2
71793: NOT
71794: OR
71795: IFFALSE 71799
// exit ;
71797: GO 71922
// dist := 9999 ;
71799: LD_ADDR_VAR 0 5
71803: PUSH
71804: LD_INT 9999
71806: ST_TO_ADDR
// for i = 1 to hexes do
71807: LD_ADDR_VAR 0 4
71811: PUSH
71812: DOUBLE
71813: LD_INT 1
71815: DEC
71816: ST_TO_ADDR
71817: LD_VAR 0 2
71821: PUSH
71822: FOR_TO
71823: IFFALSE 71910
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71825: LD_ADDR_VAR 0 6
71829: PUSH
71830: LD_VAR 0 1
71834: PPUSH
71835: LD_VAR 0 2
71839: PUSH
71840: LD_VAR 0 4
71844: ARRAY
71845: PUSH
71846: LD_INT 1
71848: ARRAY
71849: PPUSH
71850: LD_VAR 0 2
71854: PUSH
71855: LD_VAR 0 4
71859: ARRAY
71860: PUSH
71861: LD_INT 2
71863: ARRAY
71864: PPUSH
71865: CALL_OW 297
71869: ST_TO_ADDR
// if tdist < dist then
71870: LD_VAR 0 6
71874: PUSH
71875: LD_VAR 0 5
71879: LESS
71880: IFFALSE 71908
// begin hex := hexes [ i ] ;
71882: LD_ADDR_VAR 0 8
71886: PUSH
71887: LD_VAR 0 2
71891: PUSH
71892: LD_VAR 0 4
71896: ARRAY
71897: ST_TO_ADDR
// dist := tdist ;
71898: LD_ADDR_VAR 0 5
71902: PUSH
71903: LD_VAR 0 6
71907: ST_TO_ADDR
// end ; end ;
71908: GO 71822
71910: POP
71911: POP
// result := hex ;
71912: LD_ADDR_VAR 0 3
71916: PUSH
71917: LD_VAR 0 8
71921: ST_TO_ADDR
// end ;
71922: LD_VAR 0 3
71926: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71927: LD_INT 0
71929: PPUSH
71930: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71931: LD_VAR 0 1
71935: NOT
71936: PUSH
71937: LD_VAR 0 1
71941: PUSH
71942: LD_INT 21
71944: PUSH
71945: LD_INT 2
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 23
71954: PUSH
71955: LD_INT 2
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PPUSH
71966: CALL_OW 69
71970: IN
71971: NOT
71972: OR
71973: IFFALSE 71977
// exit ;
71975: GO 72024
// for i = 1 to 3 do
71977: LD_ADDR_VAR 0 3
71981: PUSH
71982: DOUBLE
71983: LD_INT 1
71985: DEC
71986: ST_TO_ADDR
71987: LD_INT 3
71989: PUSH
71990: FOR_TO
71991: IFFALSE 72022
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71993: LD_VAR 0 1
71997: PPUSH
71998: CALL_OW 250
72002: PPUSH
72003: LD_VAR 0 1
72007: PPUSH
72008: CALL_OW 251
72012: PPUSH
72013: LD_INT 1
72015: PPUSH
72016: CALL_OW 453
72020: GO 71990
72022: POP
72023: POP
// end ;
72024: LD_VAR 0 2
72028: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72029: LD_INT 0
72031: PPUSH
72032: PPUSH
72033: PPUSH
72034: PPUSH
72035: PPUSH
72036: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72037: LD_VAR 0 1
72041: NOT
72042: PUSH
72043: LD_VAR 0 2
72047: NOT
72048: OR
72049: PUSH
72050: LD_VAR 0 1
72054: PPUSH
72055: CALL_OW 314
72059: OR
72060: IFFALSE 72064
// exit ;
72062: GO 72531
// if GetLives ( i ) < 250 then
72064: LD_VAR 0 4
72068: PPUSH
72069: CALL_OW 256
72073: PUSH
72074: LD_INT 250
72076: LESS
72077: IFFALSE 72090
// begin ComAutodestruct ( i ) ;
72079: LD_VAR 0 4
72083: PPUSH
72084: CALL 71927 0 1
// exit ;
72088: GO 72531
// end ; x := GetX ( enemy_unit ) ;
72090: LD_ADDR_VAR 0 7
72094: PUSH
72095: LD_VAR 0 2
72099: PPUSH
72100: CALL_OW 250
72104: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72105: LD_ADDR_VAR 0 8
72109: PUSH
72110: LD_VAR 0 2
72114: PPUSH
72115: CALL_OW 251
72119: ST_TO_ADDR
// if not x or not y then
72120: LD_VAR 0 7
72124: NOT
72125: PUSH
72126: LD_VAR 0 8
72130: NOT
72131: OR
72132: IFFALSE 72136
// exit ;
72134: GO 72531
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72136: LD_ADDR_VAR 0 6
72140: PUSH
72141: LD_VAR 0 7
72145: PPUSH
72146: LD_INT 0
72148: PPUSH
72149: LD_INT 4
72151: PPUSH
72152: CALL_OW 272
72156: PUSH
72157: LD_VAR 0 8
72161: PPUSH
72162: LD_INT 0
72164: PPUSH
72165: LD_INT 4
72167: PPUSH
72168: CALL_OW 273
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: LD_VAR 0 7
72181: PPUSH
72182: LD_INT 1
72184: PPUSH
72185: LD_INT 4
72187: PPUSH
72188: CALL_OW 272
72192: PUSH
72193: LD_VAR 0 8
72197: PPUSH
72198: LD_INT 1
72200: PPUSH
72201: LD_INT 4
72203: PPUSH
72204: CALL_OW 273
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_VAR 0 7
72217: PPUSH
72218: LD_INT 2
72220: PPUSH
72221: LD_INT 4
72223: PPUSH
72224: CALL_OW 272
72228: PUSH
72229: LD_VAR 0 8
72233: PPUSH
72234: LD_INT 2
72236: PPUSH
72237: LD_INT 4
72239: PPUSH
72240: CALL_OW 273
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_VAR 0 7
72253: PPUSH
72254: LD_INT 3
72256: PPUSH
72257: LD_INT 4
72259: PPUSH
72260: CALL_OW 272
72264: PUSH
72265: LD_VAR 0 8
72269: PPUSH
72270: LD_INT 3
72272: PPUSH
72273: LD_INT 4
72275: PPUSH
72276: CALL_OW 273
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_VAR 0 7
72289: PPUSH
72290: LD_INT 4
72292: PPUSH
72293: LD_INT 4
72295: PPUSH
72296: CALL_OW 272
72300: PUSH
72301: LD_VAR 0 8
72305: PPUSH
72306: LD_INT 4
72308: PPUSH
72309: LD_INT 4
72311: PPUSH
72312: CALL_OW 273
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_VAR 0 7
72325: PPUSH
72326: LD_INT 5
72328: PPUSH
72329: LD_INT 4
72331: PPUSH
72332: CALL_OW 272
72336: PUSH
72337: LD_VAR 0 8
72341: PPUSH
72342: LD_INT 5
72344: PPUSH
72345: LD_INT 4
72347: PPUSH
72348: CALL_OW 273
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: ST_TO_ADDR
// for i = tmp downto 1 do
72365: LD_ADDR_VAR 0 4
72369: PUSH
72370: DOUBLE
72371: LD_VAR 0 6
72375: INC
72376: ST_TO_ADDR
72377: LD_INT 1
72379: PUSH
72380: FOR_DOWNTO
72381: IFFALSE 72482
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72383: LD_VAR 0 6
72387: PUSH
72388: LD_VAR 0 4
72392: ARRAY
72393: PUSH
72394: LD_INT 1
72396: ARRAY
72397: PPUSH
72398: LD_VAR 0 6
72402: PUSH
72403: LD_VAR 0 4
72407: ARRAY
72408: PUSH
72409: LD_INT 2
72411: ARRAY
72412: PPUSH
72413: CALL_OW 488
72417: NOT
72418: PUSH
72419: LD_VAR 0 6
72423: PUSH
72424: LD_VAR 0 4
72428: ARRAY
72429: PUSH
72430: LD_INT 1
72432: ARRAY
72433: PPUSH
72434: LD_VAR 0 6
72438: PUSH
72439: LD_VAR 0 4
72443: ARRAY
72444: PUSH
72445: LD_INT 2
72447: ARRAY
72448: PPUSH
72449: CALL_OW 428
72453: PUSH
72454: LD_INT 0
72456: NONEQUAL
72457: OR
72458: IFFALSE 72480
// tmp := Delete ( tmp , i ) ;
72460: LD_ADDR_VAR 0 6
72464: PUSH
72465: LD_VAR 0 6
72469: PPUSH
72470: LD_VAR 0 4
72474: PPUSH
72475: CALL_OW 3
72479: ST_TO_ADDR
72480: GO 72380
72482: POP
72483: POP
// j := GetClosestHex ( unit , tmp ) ;
72484: LD_ADDR_VAR 0 5
72488: PUSH
72489: LD_VAR 0 1
72493: PPUSH
72494: LD_VAR 0 6
72498: PPUSH
72499: CALL 71775 0 2
72503: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72504: LD_VAR 0 1
72508: PPUSH
72509: LD_VAR 0 5
72513: PUSH
72514: LD_INT 1
72516: ARRAY
72517: PPUSH
72518: LD_VAR 0 5
72522: PUSH
72523: LD_INT 2
72525: ARRAY
72526: PPUSH
72527: CALL_OW 111
// end ;
72531: LD_VAR 0 3
72535: RET
// export function PrepareApemanSoldier ( ) ; begin
72536: LD_INT 0
72538: PPUSH
// uc_nation := 0 ;
72539: LD_ADDR_OWVAR 21
72543: PUSH
72544: LD_INT 0
72546: ST_TO_ADDR
// hc_sex := sex_male ;
72547: LD_ADDR_OWVAR 27
72551: PUSH
72552: LD_INT 1
72554: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72555: LD_ADDR_OWVAR 28
72559: PUSH
72560: LD_INT 15
72562: ST_TO_ADDR
// hc_gallery :=  ;
72563: LD_ADDR_OWVAR 33
72567: PUSH
72568: LD_STRING 
72570: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72571: LD_ADDR_OWVAR 31
72575: PUSH
72576: LD_INT 0
72578: PPUSH
72579: LD_INT 3
72581: PPUSH
72582: CALL_OW 12
72586: PUSH
72587: LD_INT 0
72589: PPUSH
72590: LD_INT 3
72592: PPUSH
72593: CALL_OW 12
72597: PUSH
72598: LD_INT 0
72600: PUSH
72601: LD_INT 0
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: ST_TO_ADDR
// end ;
72610: LD_VAR 0 1
72614: RET
// export function PrepareApemanEngineer ( ) ; begin
72615: LD_INT 0
72617: PPUSH
// uc_nation := 0 ;
72618: LD_ADDR_OWVAR 21
72622: PUSH
72623: LD_INT 0
72625: ST_TO_ADDR
// hc_sex := sex_male ;
72626: LD_ADDR_OWVAR 27
72630: PUSH
72631: LD_INT 1
72633: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72634: LD_ADDR_OWVAR 28
72638: PUSH
72639: LD_INT 16
72641: ST_TO_ADDR
// hc_gallery :=  ;
72642: LD_ADDR_OWVAR 33
72646: PUSH
72647: LD_STRING 
72649: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72650: LD_ADDR_OWVAR 31
72654: PUSH
72655: LD_INT 0
72657: PPUSH
72658: LD_INT 3
72660: PPUSH
72661: CALL_OW 12
72665: PUSH
72666: LD_INT 0
72668: PPUSH
72669: LD_INT 3
72671: PPUSH
72672: CALL_OW 12
72676: PUSH
72677: LD_INT 0
72679: PUSH
72680: LD_INT 0
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: ST_TO_ADDR
// end ;
72689: LD_VAR 0 1
72693: RET
// export function PrepareApeman ( agressivity ) ; begin
72694: LD_INT 0
72696: PPUSH
// uc_side := 0 ;
72697: LD_ADDR_OWVAR 20
72701: PUSH
72702: LD_INT 0
72704: ST_TO_ADDR
// uc_nation := 0 ;
72705: LD_ADDR_OWVAR 21
72709: PUSH
72710: LD_INT 0
72712: ST_TO_ADDR
// hc_sex := sex_male ;
72713: LD_ADDR_OWVAR 27
72717: PUSH
72718: LD_INT 1
72720: ST_TO_ADDR
// hc_class := class_apeman ;
72721: LD_ADDR_OWVAR 28
72725: PUSH
72726: LD_INT 12
72728: ST_TO_ADDR
// hc_gallery :=  ;
72729: LD_ADDR_OWVAR 33
72733: PUSH
72734: LD_STRING 
72736: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72737: LD_ADDR_OWVAR 35
72741: PUSH
72742: LD_VAR 0 1
72746: NEG
72747: PPUSH
72748: LD_VAR 0 1
72752: PPUSH
72753: CALL_OW 12
72757: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72758: LD_ADDR_OWVAR 31
72762: PUSH
72763: LD_INT 0
72765: PPUSH
72766: LD_INT 3
72768: PPUSH
72769: CALL_OW 12
72773: PUSH
72774: LD_INT 0
72776: PPUSH
72777: LD_INT 3
72779: PPUSH
72780: CALL_OW 12
72784: PUSH
72785: LD_INT 0
72787: PUSH
72788: LD_INT 0
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: ST_TO_ADDR
// end ;
72797: LD_VAR 0 2
72801: RET
// export function PrepareTiger ( agressivity ) ; begin
72802: LD_INT 0
72804: PPUSH
// uc_side := 0 ;
72805: LD_ADDR_OWVAR 20
72809: PUSH
72810: LD_INT 0
72812: ST_TO_ADDR
// uc_nation := 0 ;
72813: LD_ADDR_OWVAR 21
72817: PUSH
72818: LD_INT 0
72820: ST_TO_ADDR
// hc_class := class_tiger ;
72821: LD_ADDR_OWVAR 28
72825: PUSH
72826: LD_INT 14
72828: ST_TO_ADDR
// hc_gallery :=  ;
72829: LD_ADDR_OWVAR 33
72833: PUSH
72834: LD_STRING 
72836: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72837: LD_ADDR_OWVAR 35
72841: PUSH
72842: LD_VAR 0 1
72846: NEG
72847: PPUSH
72848: LD_VAR 0 1
72852: PPUSH
72853: CALL_OW 12
72857: ST_TO_ADDR
// end ;
72858: LD_VAR 0 2
72862: RET
// export function PrepareEnchidna ( ) ; begin
72863: LD_INT 0
72865: PPUSH
// uc_side := 0 ;
72866: LD_ADDR_OWVAR 20
72870: PUSH
72871: LD_INT 0
72873: ST_TO_ADDR
// uc_nation := 0 ;
72874: LD_ADDR_OWVAR 21
72878: PUSH
72879: LD_INT 0
72881: ST_TO_ADDR
// hc_class := class_baggie ;
72882: LD_ADDR_OWVAR 28
72886: PUSH
72887: LD_INT 13
72889: ST_TO_ADDR
// hc_gallery :=  ;
72890: LD_ADDR_OWVAR 33
72894: PUSH
72895: LD_STRING 
72897: ST_TO_ADDR
// end ;
72898: LD_VAR 0 1
72902: RET
// export function PrepareFrog ( ) ; begin
72903: LD_INT 0
72905: PPUSH
// uc_side := 0 ;
72906: LD_ADDR_OWVAR 20
72910: PUSH
72911: LD_INT 0
72913: ST_TO_ADDR
// uc_nation := 0 ;
72914: LD_ADDR_OWVAR 21
72918: PUSH
72919: LD_INT 0
72921: ST_TO_ADDR
// hc_class := class_frog ;
72922: LD_ADDR_OWVAR 28
72926: PUSH
72927: LD_INT 19
72929: ST_TO_ADDR
// hc_gallery :=  ;
72930: LD_ADDR_OWVAR 33
72934: PUSH
72935: LD_STRING 
72937: ST_TO_ADDR
// end ;
72938: LD_VAR 0 1
72942: RET
// export function PrepareFish ( ) ; begin
72943: LD_INT 0
72945: PPUSH
// uc_side := 0 ;
72946: LD_ADDR_OWVAR 20
72950: PUSH
72951: LD_INT 0
72953: ST_TO_ADDR
// uc_nation := 0 ;
72954: LD_ADDR_OWVAR 21
72958: PUSH
72959: LD_INT 0
72961: ST_TO_ADDR
// hc_class := class_fish ;
72962: LD_ADDR_OWVAR 28
72966: PUSH
72967: LD_INT 20
72969: ST_TO_ADDR
// hc_gallery :=  ;
72970: LD_ADDR_OWVAR 33
72974: PUSH
72975: LD_STRING 
72977: ST_TO_ADDR
// end ;
72978: LD_VAR 0 1
72982: RET
// export function PrepareBird ( ) ; begin
72983: LD_INT 0
72985: PPUSH
// uc_side := 0 ;
72986: LD_ADDR_OWVAR 20
72990: PUSH
72991: LD_INT 0
72993: ST_TO_ADDR
// uc_nation := 0 ;
72994: LD_ADDR_OWVAR 21
72998: PUSH
72999: LD_INT 0
73001: ST_TO_ADDR
// hc_class := class_phororhacos ;
73002: LD_ADDR_OWVAR 28
73006: PUSH
73007: LD_INT 18
73009: ST_TO_ADDR
// hc_gallery :=  ;
73010: LD_ADDR_OWVAR 33
73014: PUSH
73015: LD_STRING 
73017: ST_TO_ADDR
// end ;
73018: LD_VAR 0 1
73022: RET
// export function PrepareHorse ( ) ; begin
73023: LD_INT 0
73025: PPUSH
// uc_side := 0 ;
73026: LD_ADDR_OWVAR 20
73030: PUSH
73031: LD_INT 0
73033: ST_TO_ADDR
// uc_nation := 0 ;
73034: LD_ADDR_OWVAR 21
73038: PUSH
73039: LD_INT 0
73041: ST_TO_ADDR
// hc_class := class_horse ;
73042: LD_ADDR_OWVAR 28
73046: PUSH
73047: LD_INT 21
73049: ST_TO_ADDR
// hc_gallery :=  ;
73050: LD_ADDR_OWVAR 33
73054: PUSH
73055: LD_STRING 
73057: ST_TO_ADDR
// end ;
73058: LD_VAR 0 1
73062: RET
// export function PrepareMastodont ( ) ; begin
73063: LD_INT 0
73065: PPUSH
// uc_side := 0 ;
73066: LD_ADDR_OWVAR 20
73070: PUSH
73071: LD_INT 0
73073: ST_TO_ADDR
// uc_nation := 0 ;
73074: LD_ADDR_OWVAR 21
73078: PUSH
73079: LD_INT 0
73081: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73082: LD_ADDR_OWVAR 37
73086: PUSH
73087: LD_INT 31
73089: ST_TO_ADDR
// vc_control := control_rider ;
73090: LD_ADDR_OWVAR 38
73094: PUSH
73095: LD_INT 4
73097: ST_TO_ADDR
// end ;
73098: LD_VAR 0 1
73102: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73103: LD_INT 0
73105: PPUSH
73106: PPUSH
73107: PPUSH
// uc_side = 0 ;
73108: LD_ADDR_OWVAR 20
73112: PUSH
73113: LD_INT 0
73115: ST_TO_ADDR
// uc_nation = 0 ;
73116: LD_ADDR_OWVAR 21
73120: PUSH
73121: LD_INT 0
73123: ST_TO_ADDR
// InitHc_All ( ) ;
73124: CALL_OW 584
// InitVc ;
73128: CALL_OW 20
// if mastodonts then
73132: LD_VAR 0 6
73136: IFFALSE 73203
// for i = 1 to mastodonts do
73138: LD_ADDR_VAR 0 11
73142: PUSH
73143: DOUBLE
73144: LD_INT 1
73146: DEC
73147: ST_TO_ADDR
73148: LD_VAR 0 6
73152: PUSH
73153: FOR_TO
73154: IFFALSE 73201
// begin vc_chassis := 31 ;
73156: LD_ADDR_OWVAR 37
73160: PUSH
73161: LD_INT 31
73163: ST_TO_ADDR
// vc_control := control_rider ;
73164: LD_ADDR_OWVAR 38
73168: PUSH
73169: LD_INT 4
73171: ST_TO_ADDR
// animal := CreateVehicle ;
73172: LD_ADDR_VAR 0 12
73176: PUSH
73177: CALL_OW 45
73181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73182: LD_VAR 0 12
73186: PPUSH
73187: LD_VAR 0 8
73191: PPUSH
73192: LD_INT 0
73194: PPUSH
73195: CALL 75331 0 3
// end ;
73199: GO 73153
73201: POP
73202: POP
// if horses then
73203: LD_VAR 0 5
73207: IFFALSE 73274
// for i = 1 to horses do
73209: LD_ADDR_VAR 0 11
73213: PUSH
73214: DOUBLE
73215: LD_INT 1
73217: DEC
73218: ST_TO_ADDR
73219: LD_VAR 0 5
73223: PUSH
73224: FOR_TO
73225: IFFALSE 73272
// begin hc_class := 21 ;
73227: LD_ADDR_OWVAR 28
73231: PUSH
73232: LD_INT 21
73234: ST_TO_ADDR
// hc_gallery :=  ;
73235: LD_ADDR_OWVAR 33
73239: PUSH
73240: LD_STRING 
73242: ST_TO_ADDR
// animal := CreateHuman ;
73243: LD_ADDR_VAR 0 12
73247: PUSH
73248: CALL_OW 44
73252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73253: LD_VAR 0 12
73257: PPUSH
73258: LD_VAR 0 8
73262: PPUSH
73263: LD_INT 0
73265: PPUSH
73266: CALL 75331 0 3
// end ;
73270: GO 73224
73272: POP
73273: POP
// if birds then
73274: LD_VAR 0 1
73278: IFFALSE 73345
// for i = 1 to birds do
73280: LD_ADDR_VAR 0 11
73284: PUSH
73285: DOUBLE
73286: LD_INT 1
73288: DEC
73289: ST_TO_ADDR
73290: LD_VAR 0 1
73294: PUSH
73295: FOR_TO
73296: IFFALSE 73343
// begin hc_class = 18 ;
73298: LD_ADDR_OWVAR 28
73302: PUSH
73303: LD_INT 18
73305: ST_TO_ADDR
// hc_gallery =  ;
73306: LD_ADDR_OWVAR 33
73310: PUSH
73311: LD_STRING 
73313: ST_TO_ADDR
// animal := CreateHuman ;
73314: LD_ADDR_VAR 0 12
73318: PUSH
73319: CALL_OW 44
73323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73324: LD_VAR 0 12
73328: PPUSH
73329: LD_VAR 0 8
73333: PPUSH
73334: LD_INT 0
73336: PPUSH
73337: CALL 75331 0 3
// end ;
73341: GO 73295
73343: POP
73344: POP
// if tigers then
73345: LD_VAR 0 2
73349: IFFALSE 73433
// for i = 1 to tigers do
73351: LD_ADDR_VAR 0 11
73355: PUSH
73356: DOUBLE
73357: LD_INT 1
73359: DEC
73360: ST_TO_ADDR
73361: LD_VAR 0 2
73365: PUSH
73366: FOR_TO
73367: IFFALSE 73431
// begin hc_class = class_tiger ;
73369: LD_ADDR_OWVAR 28
73373: PUSH
73374: LD_INT 14
73376: ST_TO_ADDR
// hc_gallery =  ;
73377: LD_ADDR_OWVAR 33
73381: PUSH
73382: LD_STRING 
73384: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73385: LD_ADDR_OWVAR 35
73389: PUSH
73390: LD_INT 7
73392: NEG
73393: PPUSH
73394: LD_INT 7
73396: PPUSH
73397: CALL_OW 12
73401: ST_TO_ADDR
// animal := CreateHuman ;
73402: LD_ADDR_VAR 0 12
73406: PUSH
73407: CALL_OW 44
73411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73412: LD_VAR 0 12
73416: PPUSH
73417: LD_VAR 0 8
73421: PPUSH
73422: LD_INT 0
73424: PPUSH
73425: CALL 75331 0 3
// end ;
73429: GO 73366
73431: POP
73432: POP
// if apemans then
73433: LD_VAR 0 3
73437: IFFALSE 73560
// for i = 1 to apemans do
73439: LD_ADDR_VAR 0 11
73443: PUSH
73444: DOUBLE
73445: LD_INT 1
73447: DEC
73448: ST_TO_ADDR
73449: LD_VAR 0 3
73453: PUSH
73454: FOR_TO
73455: IFFALSE 73558
// begin hc_class = class_apeman ;
73457: LD_ADDR_OWVAR 28
73461: PUSH
73462: LD_INT 12
73464: ST_TO_ADDR
// hc_gallery =  ;
73465: LD_ADDR_OWVAR 33
73469: PUSH
73470: LD_STRING 
73472: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73473: LD_ADDR_OWVAR 35
73477: PUSH
73478: LD_INT 2
73480: NEG
73481: PPUSH
73482: LD_INT 2
73484: PPUSH
73485: CALL_OW 12
73489: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73490: LD_ADDR_OWVAR 31
73494: PUSH
73495: LD_INT 1
73497: PPUSH
73498: LD_INT 3
73500: PPUSH
73501: CALL_OW 12
73505: PUSH
73506: LD_INT 1
73508: PPUSH
73509: LD_INT 3
73511: PPUSH
73512: CALL_OW 12
73516: PUSH
73517: LD_INT 0
73519: PUSH
73520: LD_INT 0
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: ST_TO_ADDR
// animal := CreateHuman ;
73529: LD_ADDR_VAR 0 12
73533: PUSH
73534: CALL_OW 44
73538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73539: LD_VAR 0 12
73543: PPUSH
73544: LD_VAR 0 8
73548: PPUSH
73549: LD_INT 0
73551: PPUSH
73552: CALL 75331 0 3
// end ;
73556: GO 73454
73558: POP
73559: POP
// if enchidnas then
73560: LD_VAR 0 4
73564: IFFALSE 73631
// for i = 1 to enchidnas do
73566: LD_ADDR_VAR 0 11
73570: PUSH
73571: DOUBLE
73572: LD_INT 1
73574: DEC
73575: ST_TO_ADDR
73576: LD_VAR 0 4
73580: PUSH
73581: FOR_TO
73582: IFFALSE 73629
// begin hc_class = 13 ;
73584: LD_ADDR_OWVAR 28
73588: PUSH
73589: LD_INT 13
73591: ST_TO_ADDR
// hc_gallery =  ;
73592: LD_ADDR_OWVAR 33
73596: PUSH
73597: LD_STRING 
73599: ST_TO_ADDR
// animal := CreateHuman ;
73600: LD_ADDR_VAR 0 12
73604: PUSH
73605: CALL_OW 44
73609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73610: LD_VAR 0 12
73614: PPUSH
73615: LD_VAR 0 8
73619: PPUSH
73620: LD_INT 0
73622: PPUSH
73623: CALL 75331 0 3
// end ;
73627: GO 73581
73629: POP
73630: POP
// if fishes then
73631: LD_VAR 0 7
73635: IFFALSE 73702
// for i = 1 to fishes do
73637: LD_ADDR_VAR 0 11
73641: PUSH
73642: DOUBLE
73643: LD_INT 1
73645: DEC
73646: ST_TO_ADDR
73647: LD_VAR 0 7
73651: PUSH
73652: FOR_TO
73653: IFFALSE 73700
// begin hc_class = 20 ;
73655: LD_ADDR_OWVAR 28
73659: PUSH
73660: LD_INT 20
73662: ST_TO_ADDR
// hc_gallery =  ;
73663: LD_ADDR_OWVAR 33
73667: PUSH
73668: LD_STRING 
73670: ST_TO_ADDR
// animal := CreateHuman ;
73671: LD_ADDR_VAR 0 12
73675: PUSH
73676: CALL_OW 44
73680: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73681: LD_VAR 0 12
73685: PPUSH
73686: LD_VAR 0 9
73690: PPUSH
73691: LD_INT 0
73693: PPUSH
73694: CALL 75331 0 3
// end ;
73698: GO 73652
73700: POP
73701: POP
// end ;
73702: LD_VAR 0 10
73706: RET
// export function WantHeal ( sci , unit ) ; begin
73707: LD_INT 0
73709: PPUSH
// if GetTaskList ( sci ) > 0 then
73710: LD_VAR 0 1
73714: PPUSH
73715: CALL_OW 437
73719: PUSH
73720: LD_INT 0
73722: GREATER
73723: IFFALSE 73793
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73725: LD_VAR 0 1
73729: PPUSH
73730: CALL_OW 437
73734: PUSH
73735: LD_INT 1
73737: ARRAY
73738: PUSH
73739: LD_INT 1
73741: ARRAY
73742: PUSH
73743: LD_STRING l
73745: EQUAL
73746: PUSH
73747: LD_VAR 0 1
73751: PPUSH
73752: CALL_OW 437
73756: PUSH
73757: LD_INT 1
73759: ARRAY
73760: PUSH
73761: LD_INT 4
73763: ARRAY
73764: PUSH
73765: LD_VAR 0 2
73769: EQUAL
73770: AND
73771: IFFALSE 73783
// result := true else
73773: LD_ADDR_VAR 0 3
73777: PUSH
73778: LD_INT 1
73780: ST_TO_ADDR
73781: GO 73791
// result := false ;
73783: LD_ADDR_VAR 0 3
73787: PUSH
73788: LD_INT 0
73790: ST_TO_ADDR
// end else
73791: GO 73801
// result := false ;
73793: LD_ADDR_VAR 0 3
73797: PUSH
73798: LD_INT 0
73800: ST_TO_ADDR
// end ;
73801: LD_VAR 0 3
73805: RET
// export function HealTarget ( sci ) ; begin
73806: LD_INT 0
73808: PPUSH
// if not sci then
73809: LD_VAR 0 1
73813: NOT
73814: IFFALSE 73818
// exit ;
73816: GO 73883
// result := 0 ;
73818: LD_ADDR_VAR 0 2
73822: PUSH
73823: LD_INT 0
73825: ST_TO_ADDR
// if GetTaskList ( sci ) then
73826: LD_VAR 0 1
73830: PPUSH
73831: CALL_OW 437
73835: IFFALSE 73883
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73837: LD_VAR 0 1
73841: PPUSH
73842: CALL_OW 437
73846: PUSH
73847: LD_INT 1
73849: ARRAY
73850: PUSH
73851: LD_INT 1
73853: ARRAY
73854: PUSH
73855: LD_STRING l
73857: EQUAL
73858: IFFALSE 73883
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73860: LD_ADDR_VAR 0 2
73864: PUSH
73865: LD_VAR 0 1
73869: PPUSH
73870: CALL_OW 437
73874: PUSH
73875: LD_INT 1
73877: ARRAY
73878: PUSH
73879: LD_INT 4
73881: ARRAY
73882: ST_TO_ADDR
// end ;
73883: LD_VAR 0 2
73887: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73888: LD_INT 0
73890: PPUSH
73891: PPUSH
73892: PPUSH
73893: PPUSH
// if not base_units then
73894: LD_VAR 0 1
73898: NOT
73899: IFFALSE 73903
// exit ;
73901: GO 73990
// result := false ;
73903: LD_ADDR_VAR 0 2
73907: PUSH
73908: LD_INT 0
73910: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73911: LD_ADDR_VAR 0 5
73915: PUSH
73916: LD_VAR 0 1
73920: PPUSH
73921: LD_INT 21
73923: PUSH
73924: LD_INT 3
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PPUSH
73931: CALL_OW 72
73935: ST_TO_ADDR
// if not tmp then
73936: LD_VAR 0 5
73940: NOT
73941: IFFALSE 73945
// exit ;
73943: GO 73990
// for i in tmp do
73945: LD_ADDR_VAR 0 3
73949: PUSH
73950: LD_VAR 0 5
73954: PUSH
73955: FOR_IN
73956: IFFALSE 73988
// begin result := EnemyInRange ( i , 22 ) ;
73958: LD_ADDR_VAR 0 2
73962: PUSH
73963: LD_VAR 0 3
73967: PPUSH
73968: LD_INT 22
73970: PPUSH
73971: CALL 71577 0 2
73975: ST_TO_ADDR
// if result then
73976: LD_VAR 0 2
73980: IFFALSE 73986
// exit ;
73982: POP
73983: POP
73984: GO 73990
// end ;
73986: GO 73955
73988: POP
73989: POP
// end ;
73990: LD_VAR 0 2
73994: RET
// export function FilterByTag ( units , tag ) ; begin
73995: LD_INT 0
73997: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73998: LD_ADDR_VAR 0 3
74002: PUSH
74003: LD_VAR 0 1
74007: PPUSH
74008: LD_INT 120
74010: PUSH
74011: LD_VAR 0 2
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PPUSH
74020: CALL_OW 72
74024: ST_TO_ADDR
// end ;
74025: LD_VAR 0 3
74029: RET
// export function IsDriver ( un ) ; begin
74030: LD_INT 0
74032: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74033: LD_ADDR_VAR 0 2
74037: PUSH
74038: LD_VAR 0 1
74042: PUSH
74043: LD_INT 55
74045: PUSH
74046: EMPTY
74047: LIST
74048: PPUSH
74049: CALL_OW 69
74053: IN
74054: ST_TO_ADDR
// end ;
74055: LD_VAR 0 2
74059: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74060: LD_INT 0
74062: PPUSH
74063: PPUSH
// list := [ ] ;
74064: LD_ADDR_VAR 0 5
74068: PUSH
74069: EMPTY
74070: ST_TO_ADDR
// case d of 0 :
74071: LD_VAR 0 3
74075: PUSH
74076: LD_INT 0
74078: DOUBLE
74079: EQUAL
74080: IFTRUE 74084
74082: GO 74217
74084: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74085: LD_ADDR_VAR 0 5
74089: PUSH
74090: LD_VAR 0 1
74094: PUSH
74095: LD_INT 4
74097: MINUS
74098: PUSH
74099: LD_VAR 0 2
74103: PUSH
74104: LD_INT 4
74106: MINUS
74107: PUSH
74108: LD_INT 2
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: LIST
74115: PUSH
74116: LD_VAR 0 1
74120: PUSH
74121: LD_INT 3
74123: MINUS
74124: PUSH
74125: LD_VAR 0 2
74129: PUSH
74130: LD_INT 1
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: LIST
74137: PUSH
74138: LD_VAR 0 1
74142: PUSH
74143: LD_INT 4
74145: PLUS
74146: PUSH
74147: LD_VAR 0 2
74151: PUSH
74152: LD_INT 4
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: LIST
74159: PUSH
74160: LD_VAR 0 1
74164: PUSH
74165: LD_INT 3
74167: PLUS
74168: PUSH
74169: LD_VAR 0 2
74173: PUSH
74174: LD_INT 3
74176: PLUS
74177: PUSH
74178: LD_INT 5
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: LIST
74185: PUSH
74186: LD_VAR 0 1
74190: PUSH
74191: LD_VAR 0 2
74195: PUSH
74196: LD_INT 4
74198: PLUS
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: LIST
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: ST_TO_ADDR
// end ; 1 :
74215: GO 74915
74217: LD_INT 1
74219: DOUBLE
74220: EQUAL
74221: IFTRUE 74225
74223: GO 74358
74225: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74226: LD_ADDR_VAR 0 5
74230: PUSH
74231: LD_VAR 0 1
74235: PUSH
74236: LD_VAR 0 2
74240: PUSH
74241: LD_INT 4
74243: MINUS
74244: PUSH
74245: LD_INT 3
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: LIST
74252: PUSH
74253: LD_VAR 0 1
74257: PUSH
74258: LD_INT 3
74260: MINUS
74261: PUSH
74262: LD_VAR 0 2
74266: PUSH
74267: LD_INT 3
74269: MINUS
74270: PUSH
74271: LD_INT 2
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: LIST
74278: PUSH
74279: LD_VAR 0 1
74283: PUSH
74284: LD_INT 4
74286: MINUS
74287: PUSH
74288: LD_VAR 0 2
74292: PUSH
74293: LD_INT 1
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: LIST
74300: PUSH
74301: LD_VAR 0 1
74305: PUSH
74306: LD_VAR 0 2
74310: PUSH
74311: LD_INT 3
74313: PLUS
74314: PUSH
74315: LD_INT 0
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: LIST
74322: PUSH
74323: LD_VAR 0 1
74327: PUSH
74328: LD_INT 4
74330: PLUS
74331: PUSH
74332: LD_VAR 0 2
74336: PUSH
74337: LD_INT 4
74339: PLUS
74340: PUSH
74341: LD_INT 5
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: LIST
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: ST_TO_ADDR
// end ; 2 :
74356: GO 74915
74358: LD_INT 2
74360: DOUBLE
74361: EQUAL
74362: IFTRUE 74366
74364: GO 74495
74366: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74367: LD_ADDR_VAR 0 5
74371: PUSH
74372: LD_VAR 0 1
74376: PUSH
74377: LD_VAR 0 2
74381: PUSH
74382: LD_INT 3
74384: MINUS
74385: PUSH
74386: LD_INT 3
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: LIST
74393: PUSH
74394: LD_VAR 0 1
74398: PUSH
74399: LD_INT 4
74401: PLUS
74402: PUSH
74403: LD_VAR 0 2
74407: PUSH
74408: LD_INT 4
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: LIST
74415: PUSH
74416: LD_VAR 0 1
74420: PUSH
74421: LD_VAR 0 2
74425: PUSH
74426: LD_INT 4
74428: PLUS
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: LIST
74437: PUSH
74438: LD_VAR 0 1
74442: PUSH
74443: LD_INT 3
74445: MINUS
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_INT 1
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: LIST
74459: PUSH
74460: LD_VAR 0 1
74464: PUSH
74465: LD_INT 4
74467: MINUS
74468: PUSH
74469: LD_VAR 0 2
74473: PUSH
74474: LD_INT 4
74476: MINUS
74477: PUSH
74478: LD_INT 2
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: LIST
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: ST_TO_ADDR
// end ; 3 :
74493: GO 74915
74495: LD_INT 3
74497: DOUBLE
74498: EQUAL
74499: IFTRUE 74503
74501: GO 74636
74503: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74504: LD_ADDR_VAR 0 5
74508: PUSH
74509: LD_VAR 0 1
74513: PUSH
74514: LD_INT 3
74516: PLUS
74517: PUSH
74518: LD_VAR 0 2
74522: PUSH
74523: LD_INT 4
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: LIST
74530: PUSH
74531: LD_VAR 0 1
74535: PUSH
74536: LD_INT 4
74538: PLUS
74539: PUSH
74540: LD_VAR 0 2
74544: PUSH
74545: LD_INT 4
74547: PLUS
74548: PUSH
74549: LD_INT 5
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: LIST
74556: PUSH
74557: LD_VAR 0 1
74561: PUSH
74562: LD_INT 4
74564: MINUS
74565: PUSH
74566: LD_VAR 0 2
74570: PUSH
74571: LD_INT 1
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: LIST
74578: PUSH
74579: LD_VAR 0 1
74583: PUSH
74584: LD_VAR 0 2
74588: PUSH
74589: LD_INT 4
74591: MINUS
74592: PUSH
74593: LD_INT 3
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: LIST
74600: PUSH
74601: LD_VAR 0 1
74605: PUSH
74606: LD_INT 3
74608: MINUS
74609: PUSH
74610: LD_VAR 0 2
74614: PUSH
74615: LD_INT 3
74617: MINUS
74618: PUSH
74619: LD_INT 2
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: LIST
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: ST_TO_ADDR
// end ; 4 :
74634: GO 74915
74636: LD_INT 4
74638: DOUBLE
74639: EQUAL
74640: IFTRUE 74644
74642: GO 74777
74644: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74645: LD_ADDR_VAR 0 5
74649: PUSH
74650: LD_VAR 0 1
74654: PUSH
74655: LD_VAR 0 2
74659: PUSH
74660: LD_INT 4
74662: PLUS
74663: PUSH
74664: LD_INT 0
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: LIST
74671: PUSH
74672: LD_VAR 0 1
74676: PUSH
74677: LD_INT 3
74679: PLUS
74680: PUSH
74681: LD_VAR 0 2
74685: PUSH
74686: LD_INT 3
74688: PLUS
74689: PUSH
74690: LD_INT 5
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: LIST
74697: PUSH
74698: LD_VAR 0 1
74702: PUSH
74703: LD_INT 4
74705: PLUS
74706: PUSH
74707: LD_VAR 0 2
74711: PUSH
74712: LD_INT 4
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: LIST
74719: PUSH
74720: LD_VAR 0 1
74724: PUSH
74725: LD_VAR 0 2
74729: PUSH
74730: LD_INT 3
74732: MINUS
74733: PUSH
74734: LD_INT 3
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: LIST
74741: PUSH
74742: LD_VAR 0 1
74746: PUSH
74747: LD_INT 4
74749: MINUS
74750: PUSH
74751: LD_VAR 0 2
74755: PUSH
74756: LD_INT 4
74758: MINUS
74759: PUSH
74760: LD_INT 2
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: LIST
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: ST_TO_ADDR
// end ; 5 :
74775: GO 74915
74777: LD_INT 5
74779: DOUBLE
74780: EQUAL
74781: IFTRUE 74785
74783: GO 74914
74785: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74786: LD_ADDR_VAR 0 5
74790: PUSH
74791: LD_VAR 0 1
74795: PUSH
74796: LD_INT 4
74798: MINUS
74799: PUSH
74800: LD_VAR 0 2
74804: PUSH
74805: LD_INT 1
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: LIST
74812: PUSH
74813: LD_VAR 0 1
74817: PUSH
74818: LD_VAR 0 2
74822: PUSH
74823: LD_INT 4
74825: MINUS
74826: PUSH
74827: LD_INT 3
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: LIST
74834: PUSH
74835: LD_VAR 0 1
74839: PUSH
74840: LD_INT 4
74842: PLUS
74843: PUSH
74844: LD_VAR 0 2
74848: PUSH
74849: LD_INT 4
74851: PLUS
74852: PUSH
74853: LD_INT 5
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: LIST
74860: PUSH
74861: LD_VAR 0 1
74865: PUSH
74866: LD_INT 3
74868: PLUS
74869: PUSH
74870: LD_VAR 0 2
74874: PUSH
74875: LD_INT 4
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: LIST
74882: PUSH
74883: LD_VAR 0 1
74887: PUSH
74888: LD_VAR 0 2
74892: PUSH
74893: LD_INT 3
74895: PLUS
74896: PUSH
74897: LD_INT 0
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: ST_TO_ADDR
// end ; end ;
74912: GO 74915
74914: POP
// result := list ;
74915: LD_ADDR_VAR 0 4
74919: PUSH
74920: LD_VAR 0 5
74924: ST_TO_ADDR
// end ;
74925: LD_VAR 0 4
74929: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74930: LD_INT 0
74932: PPUSH
74933: PPUSH
74934: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74935: LD_VAR 0 1
74939: NOT
74940: PUSH
74941: LD_VAR 0 2
74945: PUSH
74946: LD_INT 1
74948: PUSH
74949: LD_INT 2
74951: PUSH
74952: LD_INT 3
74954: PUSH
74955: LD_INT 4
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: IN
74964: NOT
74965: OR
74966: IFFALSE 74970
// exit ;
74968: GO 75053
// tmp := [ ] ;
74970: LD_ADDR_VAR 0 5
74974: PUSH
74975: EMPTY
74976: ST_TO_ADDR
// for i in units do
74977: LD_ADDR_VAR 0 4
74981: PUSH
74982: LD_VAR 0 1
74986: PUSH
74987: FOR_IN
74988: IFFALSE 75022
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74990: LD_ADDR_VAR 0 5
74994: PUSH
74995: LD_VAR 0 5
74999: PPUSH
75000: LD_VAR 0 4
75004: PPUSH
75005: LD_VAR 0 2
75009: PPUSH
75010: CALL_OW 259
75014: PPUSH
75015: CALL 76413 0 2
75019: ST_TO_ADDR
75020: GO 74987
75022: POP
75023: POP
// if not tmp then
75024: LD_VAR 0 5
75028: NOT
75029: IFFALSE 75033
// exit ;
75031: GO 75053
// result := SortListByListDesc ( units , tmp ) ;
75033: LD_ADDR_VAR 0 3
75037: PUSH
75038: LD_VAR 0 1
75042: PPUSH
75043: LD_VAR 0 5
75047: PPUSH
75048: CALL_OW 77
75052: ST_TO_ADDR
// end ;
75053: LD_VAR 0 3
75057: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75058: LD_INT 0
75060: PPUSH
75061: PPUSH
75062: PPUSH
// result := false ;
75063: LD_ADDR_VAR 0 3
75067: PUSH
75068: LD_INT 0
75070: ST_TO_ADDR
// if not building then
75071: LD_VAR 0 2
75075: NOT
75076: IFFALSE 75080
// exit ;
75078: GO 75218
// x := GetX ( building ) ;
75080: LD_ADDR_VAR 0 4
75084: PUSH
75085: LD_VAR 0 2
75089: PPUSH
75090: CALL_OW 250
75094: ST_TO_ADDR
// y := GetY ( building ) ;
75095: LD_ADDR_VAR 0 5
75099: PUSH
75100: LD_VAR 0 2
75104: PPUSH
75105: CALL_OW 251
75109: ST_TO_ADDR
// if not x or not y then
75110: LD_VAR 0 4
75114: NOT
75115: PUSH
75116: LD_VAR 0 5
75120: NOT
75121: OR
75122: IFFALSE 75126
// exit ;
75124: GO 75218
// if GetTaskList ( unit ) then
75126: LD_VAR 0 1
75130: PPUSH
75131: CALL_OW 437
75135: IFFALSE 75218
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75137: LD_STRING e
75139: PUSH
75140: LD_VAR 0 1
75144: PPUSH
75145: CALL_OW 437
75149: PUSH
75150: LD_INT 1
75152: ARRAY
75153: PUSH
75154: LD_INT 1
75156: ARRAY
75157: EQUAL
75158: PUSH
75159: LD_VAR 0 4
75163: PUSH
75164: LD_VAR 0 1
75168: PPUSH
75169: CALL_OW 437
75173: PUSH
75174: LD_INT 1
75176: ARRAY
75177: PUSH
75178: LD_INT 2
75180: ARRAY
75181: EQUAL
75182: AND
75183: PUSH
75184: LD_VAR 0 5
75188: PUSH
75189: LD_VAR 0 1
75193: PPUSH
75194: CALL_OW 437
75198: PUSH
75199: LD_INT 1
75201: ARRAY
75202: PUSH
75203: LD_INT 3
75205: ARRAY
75206: EQUAL
75207: AND
75208: IFFALSE 75218
// result := true end ;
75210: LD_ADDR_VAR 0 3
75214: PUSH
75215: LD_INT 1
75217: ST_TO_ADDR
// end ;
75218: LD_VAR 0 3
75222: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75223: LD_INT 0
75225: PPUSH
// result := false ;
75226: LD_ADDR_VAR 0 4
75230: PUSH
75231: LD_INT 0
75233: ST_TO_ADDR
// if GetTaskList ( unit ) then
75234: LD_VAR 0 1
75238: PPUSH
75239: CALL_OW 437
75243: IFFALSE 75326
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75245: LD_STRING M
75247: PUSH
75248: LD_VAR 0 1
75252: PPUSH
75253: CALL_OW 437
75257: PUSH
75258: LD_INT 1
75260: ARRAY
75261: PUSH
75262: LD_INT 1
75264: ARRAY
75265: EQUAL
75266: PUSH
75267: LD_VAR 0 2
75271: PUSH
75272: LD_VAR 0 1
75276: PPUSH
75277: CALL_OW 437
75281: PUSH
75282: LD_INT 1
75284: ARRAY
75285: PUSH
75286: LD_INT 2
75288: ARRAY
75289: EQUAL
75290: AND
75291: PUSH
75292: LD_VAR 0 3
75296: PUSH
75297: LD_VAR 0 1
75301: PPUSH
75302: CALL_OW 437
75306: PUSH
75307: LD_INT 1
75309: ARRAY
75310: PUSH
75311: LD_INT 3
75313: ARRAY
75314: EQUAL
75315: AND
75316: IFFALSE 75326
// result := true ;
75318: LD_ADDR_VAR 0 4
75322: PUSH
75323: LD_INT 1
75325: ST_TO_ADDR
// end ; end ;
75326: LD_VAR 0 4
75330: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75331: LD_INT 0
75333: PPUSH
75334: PPUSH
75335: PPUSH
75336: PPUSH
// if not unit or not area then
75337: LD_VAR 0 1
75341: NOT
75342: PUSH
75343: LD_VAR 0 2
75347: NOT
75348: OR
75349: IFFALSE 75353
// exit ;
75351: GO 75516
// tmp := AreaToList ( area , i ) ;
75353: LD_ADDR_VAR 0 6
75357: PUSH
75358: LD_VAR 0 2
75362: PPUSH
75363: LD_VAR 0 5
75367: PPUSH
75368: CALL_OW 517
75372: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75373: LD_ADDR_VAR 0 5
75377: PUSH
75378: DOUBLE
75379: LD_INT 1
75381: DEC
75382: ST_TO_ADDR
75383: LD_VAR 0 6
75387: PUSH
75388: LD_INT 1
75390: ARRAY
75391: PUSH
75392: FOR_TO
75393: IFFALSE 75514
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75395: LD_ADDR_VAR 0 7
75399: PUSH
75400: LD_VAR 0 6
75404: PUSH
75405: LD_INT 1
75407: ARRAY
75408: PUSH
75409: LD_VAR 0 5
75413: ARRAY
75414: PUSH
75415: LD_VAR 0 6
75419: PUSH
75420: LD_INT 2
75422: ARRAY
75423: PUSH
75424: LD_VAR 0 5
75428: ARRAY
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
75434: LD_INT 92
75436: PUSH
75437: LD_VAR 0 7
75441: PUSH
75442: LD_INT 1
75444: ARRAY
75445: PUSH
75446: LD_VAR 0 7
75450: PUSH
75451: LD_INT 2
75453: ARRAY
75454: PUSH
75455: LD_INT 3
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: PPUSH
75464: CALL_OW 69
75468: PUSH
75469: LD_INT 0
75471: EQUAL
75472: IFFALSE 75512
// begin PlaceUnitArea ( unit , area , mode ) ;
75474: LD_VAR 0 1
75478: PPUSH
75479: LD_VAR 0 2
75483: PPUSH
75484: LD_VAR 0 3
75488: PPUSH
75489: CALL_OW 49
// result := IsPlaced ( unit ) ;
75493: LD_ADDR_VAR 0 4
75497: PUSH
75498: LD_VAR 0 1
75502: PPUSH
75503: CALL_OW 305
75507: ST_TO_ADDR
// exit ;
75508: POP
75509: POP
75510: GO 75516
// end ; end ;
75512: GO 75392
75514: POP
75515: POP
// end ;
75516: LD_VAR 0 4
75520: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75521: LD_INT 0
75523: PPUSH
75524: PPUSH
75525: PPUSH
// if not side or side > 8 then
75526: LD_VAR 0 1
75530: NOT
75531: PUSH
75532: LD_VAR 0 1
75536: PUSH
75537: LD_INT 8
75539: GREATER
75540: OR
75541: IFFALSE 75545
// exit ;
75543: GO 75732
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75545: LD_ADDR_VAR 0 4
75549: PUSH
75550: LD_INT 22
75552: PUSH
75553: LD_VAR 0 1
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: PUSH
75562: LD_INT 21
75564: PUSH
75565: LD_INT 3
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PPUSH
75576: CALL_OW 69
75580: ST_TO_ADDR
// if not tmp then
75581: LD_VAR 0 4
75585: NOT
75586: IFFALSE 75590
// exit ;
75588: GO 75732
// enable_addtolog := true ;
75590: LD_ADDR_OWVAR 81
75594: PUSH
75595: LD_INT 1
75597: ST_TO_ADDR
// AddToLog ( [ ) ;
75598: LD_STRING [
75600: PPUSH
75601: CALL_OW 561
// for i in tmp do
75605: LD_ADDR_VAR 0 3
75609: PUSH
75610: LD_VAR 0 4
75614: PUSH
75615: FOR_IN
75616: IFFALSE 75723
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75618: LD_STRING [
75620: PUSH
75621: LD_VAR 0 3
75625: PPUSH
75626: CALL_OW 266
75630: STR
75631: PUSH
75632: LD_STRING , 
75634: STR
75635: PUSH
75636: LD_VAR 0 3
75640: PPUSH
75641: CALL_OW 250
75645: STR
75646: PUSH
75647: LD_STRING , 
75649: STR
75650: PUSH
75651: LD_VAR 0 3
75655: PPUSH
75656: CALL_OW 251
75660: STR
75661: PUSH
75662: LD_STRING , 
75664: STR
75665: PUSH
75666: LD_VAR 0 3
75670: PPUSH
75671: CALL_OW 254
75675: STR
75676: PUSH
75677: LD_STRING , 
75679: STR
75680: PUSH
75681: LD_VAR 0 3
75685: PPUSH
75686: LD_INT 1
75688: PPUSH
75689: CALL_OW 268
75693: STR
75694: PUSH
75695: LD_STRING , 
75697: STR
75698: PUSH
75699: LD_VAR 0 3
75703: PPUSH
75704: LD_INT 2
75706: PPUSH
75707: CALL_OW 268
75711: STR
75712: PUSH
75713: LD_STRING ],
75715: STR
75716: PPUSH
75717: CALL_OW 561
// end ;
75721: GO 75615
75723: POP
75724: POP
// AddToLog ( ]; ) ;
75725: LD_STRING ];
75727: PPUSH
75728: CALL_OW 561
// end ;
75732: LD_VAR 0 2
75736: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75737: LD_INT 0
75739: PPUSH
75740: PPUSH
75741: PPUSH
75742: PPUSH
75743: PPUSH
// if not area or not rate or not max then
75744: LD_VAR 0 1
75748: NOT
75749: PUSH
75750: LD_VAR 0 2
75754: NOT
75755: OR
75756: PUSH
75757: LD_VAR 0 4
75761: NOT
75762: OR
75763: IFFALSE 75767
// exit ;
75765: GO 75956
// while 1 do
75767: LD_INT 1
75769: IFFALSE 75956
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75771: LD_ADDR_VAR 0 9
75775: PUSH
75776: LD_VAR 0 1
75780: PPUSH
75781: LD_INT 1
75783: PPUSH
75784: CALL_OW 287
75788: PUSH
75789: LD_INT 10
75791: MUL
75792: ST_TO_ADDR
// r := rate / 10 ;
75793: LD_ADDR_VAR 0 7
75797: PUSH
75798: LD_VAR 0 2
75802: PUSH
75803: LD_INT 10
75805: DIVREAL
75806: ST_TO_ADDR
// time := 1 1$00 ;
75807: LD_ADDR_VAR 0 8
75811: PUSH
75812: LD_INT 2100
75814: ST_TO_ADDR
// if amount < min then
75815: LD_VAR 0 9
75819: PUSH
75820: LD_VAR 0 3
75824: LESS
75825: IFFALSE 75843
// r := r * 2 else
75827: LD_ADDR_VAR 0 7
75831: PUSH
75832: LD_VAR 0 7
75836: PUSH
75837: LD_INT 2
75839: MUL
75840: ST_TO_ADDR
75841: GO 75869
// if amount > max then
75843: LD_VAR 0 9
75847: PUSH
75848: LD_VAR 0 4
75852: GREATER
75853: IFFALSE 75869
// r := r / 2 ;
75855: LD_ADDR_VAR 0 7
75859: PUSH
75860: LD_VAR 0 7
75864: PUSH
75865: LD_INT 2
75867: DIVREAL
75868: ST_TO_ADDR
// time := time / r ;
75869: LD_ADDR_VAR 0 8
75873: PUSH
75874: LD_VAR 0 8
75878: PUSH
75879: LD_VAR 0 7
75883: DIVREAL
75884: ST_TO_ADDR
// if time < 0 then
75885: LD_VAR 0 8
75889: PUSH
75890: LD_INT 0
75892: LESS
75893: IFFALSE 75910
// time := time * - 1 ;
75895: LD_ADDR_VAR 0 8
75899: PUSH
75900: LD_VAR 0 8
75904: PUSH
75905: LD_INT 1
75907: NEG
75908: MUL
75909: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75910: LD_VAR 0 8
75914: PUSH
75915: LD_INT 35
75917: PPUSH
75918: LD_INT 875
75920: PPUSH
75921: CALL_OW 12
75925: PLUS
75926: PPUSH
75927: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75931: LD_INT 1
75933: PPUSH
75934: LD_INT 5
75936: PPUSH
75937: CALL_OW 12
75941: PPUSH
75942: LD_VAR 0 1
75946: PPUSH
75947: LD_INT 1
75949: PPUSH
75950: CALL_OW 55
// end ;
75954: GO 75767
// end ;
75956: LD_VAR 0 5
75960: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75961: LD_INT 0
75963: PPUSH
75964: PPUSH
75965: PPUSH
75966: PPUSH
75967: PPUSH
75968: PPUSH
75969: PPUSH
75970: PPUSH
// if not turrets or not factories then
75971: LD_VAR 0 1
75975: NOT
75976: PUSH
75977: LD_VAR 0 2
75981: NOT
75982: OR
75983: IFFALSE 75987
// exit ;
75985: GO 76294
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75987: LD_ADDR_VAR 0 10
75991: PUSH
75992: LD_INT 5
75994: PUSH
75995: LD_INT 6
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: PUSH
76002: LD_INT 2
76004: PUSH
76005: LD_INT 4
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: PUSH
76012: LD_INT 3
76014: PUSH
76015: LD_INT 5
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: LIST
76026: PUSH
76027: LD_INT 24
76029: PUSH
76030: LD_INT 25
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PUSH
76037: LD_INT 23
76039: PUSH
76040: LD_INT 27
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: PUSH
76047: EMPTY
76048: LIST
76049: LIST
76050: PUSH
76051: LD_INT 42
76053: PUSH
76054: LD_INT 43
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 44
76063: PUSH
76064: LD_INT 46
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: PUSH
76071: LD_INT 45
76073: PUSH
76074: LD_INT 47
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: LIST
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: LIST
76090: ST_TO_ADDR
// result := [ ] ;
76091: LD_ADDR_VAR 0 3
76095: PUSH
76096: EMPTY
76097: ST_TO_ADDR
// for i in turrets do
76098: LD_ADDR_VAR 0 4
76102: PUSH
76103: LD_VAR 0 1
76107: PUSH
76108: FOR_IN
76109: IFFALSE 76292
// begin nat := GetNation ( i ) ;
76111: LD_ADDR_VAR 0 7
76115: PUSH
76116: LD_VAR 0 4
76120: PPUSH
76121: CALL_OW 248
76125: ST_TO_ADDR
// weapon := 0 ;
76126: LD_ADDR_VAR 0 8
76130: PUSH
76131: LD_INT 0
76133: ST_TO_ADDR
// if not nat then
76134: LD_VAR 0 7
76138: NOT
76139: IFFALSE 76143
// continue ;
76141: GO 76108
// for j in list [ nat ] do
76143: LD_ADDR_VAR 0 5
76147: PUSH
76148: LD_VAR 0 10
76152: PUSH
76153: LD_VAR 0 7
76157: ARRAY
76158: PUSH
76159: FOR_IN
76160: IFFALSE 76201
// if GetBWeapon ( i ) = j [ 1 ] then
76162: LD_VAR 0 4
76166: PPUSH
76167: CALL_OW 269
76171: PUSH
76172: LD_VAR 0 5
76176: PUSH
76177: LD_INT 1
76179: ARRAY
76180: EQUAL
76181: IFFALSE 76199
// begin weapon := j [ 2 ] ;
76183: LD_ADDR_VAR 0 8
76187: PUSH
76188: LD_VAR 0 5
76192: PUSH
76193: LD_INT 2
76195: ARRAY
76196: ST_TO_ADDR
// break ;
76197: GO 76201
// end ;
76199: GO 76159
76201: POP
76202: POP
// if not weapon then
76203: LD_VAR 0 8
76207: NOT
76208: IFFALSE 76212
// continue ;
76210: GO 76108
// for k in factories do
76212: LD_ADDR_VAR 0 6
76216: PUSH
76217: LD_VAR 0 2
76221: PUSH
76222: FOR_IN
76223: IFFALSE 76288
// begin weapons := AvailableWeaponList ( k ) ;
76225: LD_ADDR_VAR 0 9
76229: PUSH
76230: LD_VAR 0 6
76234: PPUSH
76235: CALL_OW 478
76239: ST_TO_ADDR
// if not weapons then
76240: LD_VAR 0 9
76244: NOT
76245: IFFALSE 76249
// continue ;
76247: GO 76222
// if weapon in weapons then
76249: LD_VAR 0 8
76253: PUSH
76254: LD_VAR 0 9
76258: IN
76259: IFFALSE 76286
// begin result := [ i , weapon ] ;
76261: LD_ADDR_VAR 0 3
76265: PUSH
76266: LD_VAR 0 4
76270: PUSH
76271: LD_VAR 0 8
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: ST_TO_ADDR
// exit ;
76280: POP
76281: POP
76282: POP
76283: POP
76284: GO 76294
// end ; end ;
76286: GO 76222
76288: POP
76289: POP
// end ;
76290: GO 76108
76292: POP
76293: POP
// end ;
76294: LD_VAR 0 3
76298: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76299: LD_INT 0
76301: PPUSH
// if not side or side > 8 then
76302: LD_VAR 0 3
76306: NOT
76307: PUSH
76308: LD_VAR 0 3
76312: PUSH
76313: LD_INT 8
76315: GREATER
76316: OR
76317: IFFALSE 76321
// exit ;
76319: GO 76380
// if not range then
76321: LD_VAR 0 4
76325: NOT
76326: IFFALSE 76337
// range := - 12 ;
76328: LD_ADDR_VAR 0 4
76332: PUSH
76333: LD_INT 12
76335: NEG
76336: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76337: LD_VAR 0 1
76341: PPUSH
76342: LD_VAR 0 2
76346: PPUSH
76347: LD_VAR 0 3
76351: PPUSH
76352: LD_VAR 0 4
76356: PPUSH
76357: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76361: LD_VAR 0 1
76365: PPUSH
76366: LD_VAR 0 2
76370: PPUSH
76371: LD_VAR 0 3
76375: PPUSH
76376: CALL_OW 331
// end ;
76380: LD_VAR 0 5
76384: RET
// export function Video ( mode ) ; begin
76385: LD_INT 0
76387: PPUSH
// ingame_video = mode ;
76388: LD_ADDR_OWVAR 52
76392: PUSH
76393: LD_VAR 0 1
76397: ST_TO_ADDR
// interface_hidden = mode ;
76398: LD_ADDR_OWVAR 54
76402: PUSH
76403: LD_VAR 0 1
76407: ST_TO_ADDR
// end ;
76408: LD_VAR 0 2
76412: RET
// export function Join ( array , element ) ; begin
76413: LD_INT 0
76415: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76416: LD_ADDR_VAR 0 3
76420: PUSH
76421: LD_VAR 0 1
76425: PPUSH
76426: LD_VAR 0 1
76430: PUSH
76431: LD_INT 1
76433: PLUS
76434: PPUSH
76435: LD_VAR 0 2
76439: PPUSH
76440: CALL_OW 1
76444: ST_TO_ADDR
// end ;
76445: LD_VAR 0 3
76449: RET
// export function JoinUnion ( array , element ) ; begin
76450: LD_INT 0
76452: PPUSH
// result := array union element ;
76453: LD_ADDR_VAR 0 3
76457: PUSH
76458: LD_VAR 0 1
76462: PUSH
76463: LD_VAR 0 2
76467: UNION
76468: ST_TO_ADDR
// end ;
76469: LD_VAR 0 3
76473: RET
// export function GetBehemoths ( side ) ; begin
76474: LD_INT 0
76476: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76477: LD_ADDR_VAR 0 2
76481: PUSH
76482: LD_INT 22
76484: PUSH
76485: LD_VAR 0 1
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: LD_INT 31
76496: PUSH
76497: LD_INT 25
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: EMPTY
76505: LIST
76506: LIST
76507: PPUSH
76508: CALL_OW 69
76512: ST_TO_ADDR
// end ;
76513: LD_VAR 0 2
76517: RET
// export function Shuffle ( array ) ; var i , index ; begin
76518: LD_INT 0
76520: PPUSH
76521: PPUSH
76522: PPUSH
// result := [ ] ;
76523: LD_ADDR_VAR 0 2
76527: PUSH
76528: EMPTY
76529: ST_TO_ADDR
// if not array then
76530: LD_VAR 0 1
76534: NOT
76535: IFFALSE 76539
// exit ;
76537: GO 76638
// Randomize ;
76539: CALL_OW 10
// for i = array downto 1 do
76543: LD_ADDR_VAR 0 3
76547: PUSH
76548: DOUBLE
76549: LD_VAR 0 1
76553: INC
76554: ST_TO_ADDR
76555: LD_INT 1
76557: PUSH
76558: FOR_DOWNTO
76559: IFFALSE 76636
// begin index := rand ( 1 , array ) ;
76561: LD_ADDR_VAR 0 4
76565: PUSH
76566: LD_INT 1
76568: PPUSH
76569: LD_VAR 0 1
76573: PPUSH
76574: CALL_OW 12
76578: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76579: LD_ADDR_VAR 0 2
76583: PUSH
76584: LD_VAR 0 2
76588: PPUSH
76589: LD_VAR 0 2
76593: PUSH
76594: LD_INT 1
76596: PLUS
76597: PPUSH
76598: LD_VAR 0 1
76602: PUSH
76603: LD_VAR 0 4
76607: ARRAY
76608: PPUSH
76609: CALL_OW 2
76613: ST_TO_ADDR
// array := Delete ( array , index ) ;
76614: LD_ADDR_VAR 0 1
76618: PUSH
76619: LD_VAR 0 1
76623: PPUSH
76624: LD_VAR 0 4
76628: PPUSH
76629: CALL_OW 3
76633: ST_TO_ADDR
// end ;
76634: GO 76558
76636: POP
76637: POP
// end ;
76638: LD_VAR 0 2
76642: RET
// export function GetBaseMaterials ( base ) ; begin
76643: LD_INT 0
76645: PPUSH
// result := [ 0 , 0 , 0 ] ;
76646: LD_ADDR_VAR 0 2
76650: PUSH
76651: LD_INT 0
76653: PUSH
76654: LD_INT 0
76656: PUSH
76657: LD_INT 0
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: LIST
76664: ST_TO_ADDR
// if not base then
76665: LD_VAR 0 1
76669: NOT
76670: IFFALSE 76674
// exit ;
76672: GO 76723
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76674: LD_ADDR_VAR 0 2
76678: PUSH
76679: LD_VAR 0 1
76683: PPUSH
76684: LD_INT 1
76686: PPUSH
76687: CALL_OW 275
76691: PUSH
76692: LD_VAR 0 1
76696: PPUSH
76697: LD_INT 2
76699: PPUSH
76700: CALL_OW 275
76704: PUSH
76705: LD_VAR 0 1
76709: PPUSH
76710: LD_INT 3
76712: PPUSH
76713: CALL_OW 275
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: LIST
76722: ST_TO_ADDR
// end ;
76723: LD_VAR 0 2
76727: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76728: LD_INT 0
76730: PPUSH
76731: PPUSH
// result := array ;
76732: LD_ADDR_VAR 0 3
76736: PUSH
76737: LD_VAR 0 1
76741: ST_TO_ADDR
// if size >= result then
76742: LD_VAR 0 2
76746: PUSH
76747: LD_VAR 0 3
76751: GREATEREQUAL
76752: IFFALSE 76756
// exit ;
76754: GO 76806
// if size then
76756: LD_VAR 0 2
76760: IFFALSE 76806
// for i := array downto size do
76762: LD_ADDR_VAR 0 4
76766: PUSH
76767: DOUBLE
76768: LD_VAR 0 1
76772: INC
76773: ST_TO_ADDR
76774: LD_VAR 0 2
76778: PUSH
76779: FOR_DOWNTO
76780: IFFALSE 76804
// result := Delete ( result , result ) ;
76782: LD_ADDR_VAR 0 3
76786: PUSH
76787: LD_VAR 0 3
76791: PPUSH
76792: LD_VAR 0 3
76796: PPUSH
76797: CALL_OW 3
76801: ST_TO_ADDR
76802: GO 76779
76804: POP
76805: POP
// end ;
76806: LD_VAR 0 3
76810: RET
// export function ComExit ( unit ) ; var tmp ; begin
76811: LD_INT 0
76813: PPUSH
76814: PPUSH
// if not IsInUnit ( unit ) then
76815: LD_VAR 0 1
76819: PPUSH
76820: CALL_OW 310
76824: NOT
76825: IFFALSE 76829
// exit ;
76827: GO 76889
// tmp := IsInUnit ( unit ) ;
76829: LD_ADDR_VAR 0 3
76833: PUSH
76834: LD_VAR 0 1
76838: PPUSH
76839: CALL_OW 310
76843: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76844: LD_VAR 0 3
76848: PPUSH
76849: CALL_OW 247
76853: PUSH
76854: LD_INT 2
76856: EQUAL
76857: IFFALSE 76870
// ComExitVehicle ( unit ) else
76859: LD_VAR 0 1
76863: PPUSH
76864: CALL_OW 121
76868: GO 76879
// ComExitBuilding ( unit ) ;
76870: LD_VAR 0 1
76874: PPUSH
76875: CALL_OW 122
// result := tmp ;
76879: LD_ADDR_VAR 0 2
76883: PUSH
76884: LD_VAR 0 3
76888: ST_TO_ADDR
// end ;
76889: LD_VAR 0 2
76893: RET
// export function ComExitAll ( units ) ; var i ; begin
76894: LD_INT 0
76896: PPUSH
76897: PPUSH
// if not units then
76898: LD_VAR 0 1
76902: NOT
76903: IFFALSE 76907
// exit ;
76905: GO 76933
// for i in units do
76907: LD_ADDR_VAR 0 3
76911: PUSH
76912: LD_VAR 0 1
76916: PUSH
76917: FOR_IN
76918: IFFALSE 76931
// ComExit ( i ) ;
76920: LD_VAR 0 3
76924: PPUSH
76925: CALL 76811 0 1
76929: GO 76917
76931: POP
76932: POP
// end ;
76933: LD_VAR 0 2
76937: RET
// export function ResetHc ; begin
76938: LD_INT 0
76940: PPUSH
// InitHc ;
76941: CALL_OW 19
// hc_importance := 0 ;
76945: LD_ADDR_OWVAR 32
76949: PUSH
76950: LD_INT 0
76952: ST_TO_ADDR
// end ;
76953: LD_VAR 0 1
76957: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76958: LD_INT 0
76960: PPUSH
76961: PPUSH
76962: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76963: LD_ADDR_VAR 0 6
76967: PUSH
76968: LD_VAR 0 1
76972: PUSH
76973: LD_VAR 0 3
76977: PLUS
76978: PUSH
76979: LD_INT 2
76981: DIV
76982: ST_TO_ADDR
// if _x < 0 then
76983: LD_VAR 0 6
76987: PUSH
76988: LD_INT 0
76990: LESS
76991: IFFALSE 77008
// _x := _x * - 1 ;
76993: LD_ADDR_VAR 0 6
76997: PUSH
76998: LD_VAR 0 6
77002: PUSH
77003: LD_INT 1
77005: NEG
77006: MUL
77007: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77008: LD_ADDR_VAR 0 7
77012: PUSH
77013: LD_VAR 0 2
77017: PUSH
77018: LD_VAR 0 4
77022: PLUS
77023: PUSH
77024: LD_INT 2
77026: DIV
77027: ST_TO_ADDR
// if _y < 0 then
77028: LD_VAR 0 7
77032: PUSH
77033: LD_INT 0
77035: LESS
77036: IFFALSE 77053
// _y := _y * - 1 ;
77038: LD_ADDR_VAR 0 7
77042: PUSH
77043: LD_VAR 0 7
77047: PUSH
77048: LD_INT 1
77050: NEG
77051: MUL
77052: ST_TO_ADDR
// result := [ _x , _y ] ;
77053: LD_ADDR_VAR 0 5
77057: PUSH
77058: LD_VAR 0 6
77062: PUSH
77063: LD_VAR 0 7
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: ST_TO_ADDR
// end ;
77072: LD_VAR 0 5
77076: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77077: LD_INT 0
77079: PPUSH
77080: PPUSH
77081: PPUSH
77082: PPUSH
// task := GetTaskList ( unit ) ;
77083: LD_ADDR_VAR 0 7
77087: PUSH
77088: LD_VAR 0 1
77092: PPUSH
77093: CALL_OW 437
77097: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77098: LD_VAR 0 7
77102: NOT
77103: PUSH
77104: LD_VAR 0 1
77108: PPUSH
77109: LD_VAR 0 2
77113: PPUSH
77114: CALL_OW 308
77118: NOT
77119: AND
77120: IFFALSE 77124
// exit ;
77122: GO 77242
// if IsInArea ( unit , area ) then
77124: LD_VAR 0 1
77128: PPUSH
77129: LD_VAR 0 2
77133: PPUSH
77134: CALL_OW 308
77138: IFFALSE 77156
// begin ComMoveToArea ( unit , goAway ) ;
77140: LD_VAR 0 1
77144: PPUSH
77145: LD_VAR 0 3
77149: PPUSH
77150: CALL_OW 113
// exit ;
77154: GO 77242
// end ; if task [ 1 ] [ 1 ] <> M then
77156: LD_VAR 0 7
77160: PUSH
77161: LD_INT 1
77163: ARRAY
77164: PUSH
77165: LD_INT 1
77167: ARRAY
77168: PUSH
77169: LD_STRING M
77171: NONEQUAL
77172: IFFALSE 77176
// exit ;
77174: GO 77242
// x := task [ 1 ] [ 2 ] ;
77176: LD_ADDR_VAR 0 5
77180: PUSH
77181: LD_VAR 0 7
77185: PUSH
77186: LD_INT 1
77188: ARRAY
77189: PUSH
77190: LD_INT 2
77192: ARRAY
77193: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77194: LD_ADDR_VAR 0 6
77198: PUSH
77199: LD_VAR 0 7
77203: PUSH
77204: LD_INT 1
77206: ARRAY
77207: PUSH
77208: LD_INT 3
77210: ARRAY
77211: ST_TO_ADDR
// if InArea ( x , y , area ) then
77212: LD_VAR 0 5
77216: PPUSH
77217: LD_VAR 0 6
77221: PPUSH
77222: LD_VAR 0 2
77226: PPUSH
77227: CALL_OW 309
77231: IFFALSE 77242
// ComStop ( unit ) ;
77233: LD_VAR 0 1
77237: PPUSH
77238: CALL_OW 141
// end ;
77242: LD_VAR 0 4
77246: RET
// export function Abs ( value ) ; begin
77247: LD_INT 0
77249: PPUSH
// result := value ;
77250: LD_ADDR_VAR 0 2
77254: PUSH
77255: LD_VAR 0 1
77259: ST_TO_ADDR
// if value < 0 then
77260: LD_VAR 0 1
77264: PUSH
77265: LD_INT 0
77267: LESS
77268: IFFALSE 77285
// result := value * - 1 ;
77270: LD_ADDR_VAR 0 2
77274: PUSH
77275: LD_VAR 0 1
77279: PUSH
77280: LD_INT 1
77282: NEG
77283: MUL
77284: ST_TO_ADDR
// end ;
77285: LD_VAR 0 2
77289: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77290: LD_INT 0
77292: PPUSH
77293: PPUSH
77294: PPUSH
77295: PPUSH
77296: PPUSH
77297: PPUSH
77298: PPUSH
77299: PPUSH
// if not unit or not building then
77300: LD_VAR 0 1
77304: NOT
77305: PUSH
77306: LD_VAR 0 2
77310: NOT
77311: OR
77312: IFFALSE 77316
// exit ;
77314: GO 77542
// x := GetX ( building ) ;
77316: LD_ADDR_VAR 0 4
77320: PUSH
77321: LD_VAR 0 2
77325: PPUSH
77326: CALL_OW 250
77330: ST_TO_ADDR
// y := GetY ( building ) ;
77331: LD_ADDR_VAR 0 6
77335: PUSH
77336: LD_VAR 0 2
77340: PPUSH
77341: CALL_OW 251
77345: ST_TO_ADDR
// d := GetDir ( building ) ;
77346: LD_ADDR_VAR 0 8
77350: PUSH
77351: LD_VAR 0 2
77355: PPUSH
77356: CALL_OW 254
77360: ST_TO_ADDR
// r := 4 ;
77361: LD_ADDR_VAR 0 9
77365: PUSH
77366: LD_INT 4
77368: ST_TO_ADDR
// for i := 1 to 5 do
77369: LD_ADDR_VAR 0 10
77373: PUSH
77374: DOUBLE
77375: LD_INT 1
77377: DEC
77378: ST_TO_ADDR
77379: LD_INT 5
77381: PUSH
77382: FOR_TO
77383: IFFALSE 77540
// begin _x := ShiftX ( x , d , r + i ) ;
77385: LD_ADDR_VAR 0 5
77389: PUSH
77390: LD_VAR 0 4
77394: PPUSH
77395: LD_VAR 0 8
77399: PPUSH
77400: LD_VAR 0 9
77404: PUSH
77405: LD_VAR 0 10
77409: PLUS
77410: PPUSH
77411: CALL_OW 272
77415: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77416: LD_ADDR_VAR 0 7
77420: PUSH
77421: LD_VAR 0 6
77425: PPUSH
77426: LD_VAR 0 8
77430: PPUSH
77431: LD_VAR 0 9
77435: PUSH
77436: LD_VAR 0 10
77440: PLUS
77441: PPUSH
77442: CALL_OW 273
77446: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77447: LD_VAR 0 5
77451: PPUSH
77452: LD_VAR 0 7
77456: PPUSH
77457: CALL_OW 488
77461: PUSH
77462: LD_VAR 0 5
77466: PPUSH
77467: LD_VAR 0 7
77471: PPUSH
77472: CALL_OW 428
77476: PPUSH
77477: CALL_OW 247
77481: PUSH
77482: LD_INT 3
77484: PUSH
77485: LD_INT 2
77487: PUSH
77488: EMPTY
77489: LIST
77490: LIST
77491: IN
77492: NOT
77493: AND
77494: IFFALSE 77538
// begin ComMoveXY ( unit , _x , _y ) ;
77496: LD_VAR 0 1
77500: PPUSH
77501: LD_VAR 0 5
77505: PPUSH
77506: LD_VAR 0 7
77510: PPUSH
77511: CALL_OW 111
// result := [ _x , _y ] ;
77515: LD_ADDR_VAR 0 3
77519: PUSH
77520: LD_VAR 0 5
77524: PUSH
77525: LD_VAR 0 7
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: ST_TO_ADDR
// exit ;
77534: POP
77535: POP
77536: GO 77542
// end ; end ;
77538: GO 77382
77540: POP
77541: POP
// end ;
77542: LD_VAR 0 3
77546: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77547: LD_INT 0
77549: PPUSH
77550: PPUSH
77551: PPUSH
// result := 0 ;
77552: LD_ADDR_VAR 0 3
77556: PUSH
77557: LD_INT 0
77559: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77560: LD_VAR 0 1
77564: PUSH
77565: LD_INT 0
77567: LESS
77568: PUSH
77569: LD_VAR 0 1
77573: PUSH
77574: LD_INT 8
77576: GREATER
77577: OR
77578: PUSH
77579: LD_VAR 0 2
77583: PUSH
77584: LD_INT 0
77586: LESS
77587: OR
77588: PUSH
77589: LD_VAR 0 2
77593: PUSH
77594: LD_INT 8
77596: GREATER
77597: OR
77598: IFFALSE 77602
// exit ;
77600: GO 77677
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77602: LD_ADDR_VAR 0 4
77606: PUSH
77607: LD_INT 22
77609: PUSH
77610: LD_VAR 0 2
77614: PUSH
77615: EMPTY
77616: LIST
77617: LIST
77618: PPUSH
77619: CALL_OW 69
77623: PUSH
77624: FOR_IN
77625: IFFALSE 77675
// begin un := UnitShoot ( i ) ;
77627: LD_ADDR_VAR 0 5
77631: PUSH
77632: LD_VAR 0 4
77636: PPUSH
77637: CALL_OW 504
77641: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77642: LD_VAR 0 5
77646: PPUSH
77647: CALL_OW 255
77651: PUSH
77652: LD_VAR 0 1
77656: EQUAL
77657: IFFALSE 77673
// begin result := un ;
77659: LD_ADDR_VAR 0 3
77663: PUSH
77664: LD_VAR 0 5
77668: ST_TO_ADDR
// exit ;
77669: POP
77670: POP
77671: GO 77677
// end ; end ;
77673: GO 77624
77675: POP
77676: POP
// end ;
77677: LD_VAR 0 3
77681: RET
// export function GetCargoBay ( units ) ; begin
77682: LD_INT 0
77684: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77685: LD_ADDR_VAR 0 2
77689: PUSH
77690: LD_VAR 0 1
77694: PPUSH
77695: LD_INT 2
77697: PUSH
77698: LD_INT 34
77700: PUSH
77701: LD_INT 12
77703: PUSH
77704: EMPTY
77705: LIST
77706: LIST
77707: PUSH
77708: LD_INT 34
77710: PUSH
77711: LD_INT 51
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: PUSH
77718: LD_INT 34
77720: PUSH
77721: LD_INT 32
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: PUSH
77728: LD_INT 34
77730: PUSH
77731: LD_INT 89
77733: PUSH
77734: EMPTY
77735: LIST
77736: LIST
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: LIST
77743: LIST
77744: PPUSH
77745: CALL_OW 72
77749: ST_TO_ADDR
// end ;
77750: LD_VAR 0 2
77754: RET
// export function Negate ( value ) ; begin
77755: LD_INT 0
77757: PPUSH
// result := not value ;
77758: LD_ADDR_VAR 0 2
77762: PUSH
77763: LD_VAR 0 1
77767: NOT
77768: ST_TO_ADDR
// end ;
77769: LD_VAR 0 2
77773: RET
// export function Inc ( value ) ; begin
77774: LD_INT 0
77776: PPUSH
// result := value + 1 ;
77777: LD_ADDR_VAR 0 2
77781: PUSH
77782: LD_VAR 0 1
77786: PUSH
77787: LD_INT 1
77789: PLUS
77790: ST_TO_ADDR
// end ;
77791: LD_VAR 0 2
77795: RET
// export function Dec ( value ) ; begin
77796: LD_INT 0
77798: PPUSH
// result := value - 1 ;
77799: LD_ADDR_VAR 0 2
77803: PUSH
77804: LD_VAR 0 1
77808: PUSH
77809: LD_INT 1
77811: MINUS
77812: ST_TO_ADDR
// end ;
77813: LD_VAR 0 2
77817: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77818: LD_INT 0
77820: PPUSH
77821: PPUSH
77822: PPUSH
77823: PPUSH
77824: PPUSH
77825: PPUSH
77826: PPUSH
77827: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77828: LD_VAR 0 1
77832: PPUSH
77833: LD_VAR 0 2
77837: PPUSH
77838: CALL_OW 488
77842: NOT
77843: PUSH
77844: LD_VAR 0 3
77848: PPUSH
77849: LD_VAR 0 4
77853: PPUSH
77854: CALL_OW 488
77858: NOT
77859: OR
77860: IFFALSE 77873
// begin result := - 1 ;
77862: LD_ADDR_VAR 0 5
77866: PUSH
77867: LD_INT 1
77869: NEG
77870: ST_TO_ADDR
// exit ;
77871: GO 78108
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77873: LD_ADDR_VAR 0 12
77877: PUSH
77878: LD_VAR 0 1
77882: PPUSH
77883: LD_VAR 0 2
77887: PPUSH
77888: LD_VAR 0 3
77892: PPUSH
77893: LD_VAR 0 4
77897: PPUSH
77898: CALL 76958 0 4
77902: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77903: LD_ADDR_VAR 0 11
77907: PUSH
77908: LD_VAR 0 1
77912: PPUSH
77913: LD_VAR 0 2
77917: PPUSH
77918: LD_VAR 0 12
77922: PUSH
77923: LD_INT 1
77925: ARRAY
77926: PPUSH
77927: LD_VAR 0 12
77931: PUSH
77932: LD_INT 2
77934: ARRAY
77935: PPUSH
77936: CALL_OW 298
77940: ST_TO_ADDR
// distance := 9999 ;
77941: LD_ADDR_VAR 0 10
77945: PUSH
77946: LD_INT 9999
77948: ST_TO_ADDR
// for i := 0 to 5 do
77949: LD_ADDR_VAR 0 6
77953: PUSH
77954: DOUBLE
77955: LD_INT 0
77957: DEC
77958: ST_TO_ADDR
77959: LD_INT 5
77961: PUSH
77962: FOR_TO
77963: IFFALSE 78106
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77965: LD_ADDR_VAR 0 7
77969: PUSH
77970: LD_VAR 0 1
77974: PPUSH
77975: LD_VAR 0 6
77979: PPUSH
77980: LD_VAR 0 11
77984: PPUSH
77985: CALL_OW 272
77989: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77990: LD_ADDR_VAR 0 8
77994: PUSH
77995: LD_VAR 0 2
77999: PPUSH
78000: LD_VAR 0 6
78004: PPUSH
78005: LD_VAR 0 11
78009: PPUSH
78010: CALL_OW 273
78014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78015: LD_VAR 0 7
78019: PPUSH
78020: LD_VAR 0 8
78024: PPUSH
78025: CALL_OW 488
78029: NOT
78030: IFFALSE 78034
// continue ;
78032: GO 77962
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78034: LD_ADDR_VAR 0 9
78038: PUSH
78039: LD_VAR 0 12
78043: PUSH
78044: LD_INT 1
78046: ARRAY
78047: PPUSH
78048: LD_VAR 0 12
78052: PUSH
78053: LD_INT 2
78055: ARRAY
78056: PPUSH
78057: LD_VAR 0 7
78061: PPUSH
78062: LD_VAR 0 8
78066: PPUSH
78067: CALL_OW 298
78071: ST_TO_ADDR
// if tmp < distance then
78072: LD_VAR 0 9
78076: PUSH
78077: LD_VAR 0 10
78081: LESS
78082: IFFALSE 78104
// begin result := i ;
78084: LD_ADDR_VAR 0 5
78088: PUSH
78089: LD_VAR 0 6
78093: ST_TO_ADDR
// distance := tmp ;
78094: LD_ADDR_VAR 0 10
78098: PUSH
78099: LD_VAR 0 9
78103: ST_TO_ADDR
// end ; end ;
78104: GO 77962
78106: POP
78107: POP
// end ;
78108: LD_VAR 0 5
78112: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78113: LD_INT 0
78115: PPUSH
78116: PPUSH
// if not driver or not IsInUnit ( driver ) then
78117: LD_VAR 0 1
78121: NOT
78122: PUSH
78123: LD_VAR 0 1
78127: PPUSH
78128: CALL_OW 310
78132: NOT
78133: OR
78134: IFFALSE 78138
// exit ;
78136: GO 78228
// vehicle := IsInUnit ( driver ) ;
78138: LD_ADDR_VAR 0 3
78142: PUSH
78143: LD_VAR 0 1
78147: PPUSH
78148: CALL_OW 310
78152: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78153: LD_VAR 0 1
78157: PPUSH
78158: LD_STRING \
78160: PUSH
78161: LD_INT 0
78163: PUSH
78164: LD_INT 0
78166: PUSH
78167: LD_INT 0
78169: PUSH
78170: LD_INT 0
78172: PUSH
78173: LD_INT 0
78175: PUSH
78176: LD_INT 0
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: LIST
78183: LIST
78184: LIST
78185: LIST
78186: LIST
78187: PUSH
78188: LD_STRING E
78190: PUSH
78191: LD_INT 0
78193: PUSH
78194: LD_INT 0
78196: PUSH
78197: LD_VAR 0 3
78201: PUSH
78202: LD_INT 0
78204: PUSH
78205: LD_INT 0
78207: PUSH
78208: LD_INT 0
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: PPUSH
78224: CALL_OW 446
// end ;
78228: LD_VAR 0 2
78232: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78233: LD_INT 0
78235: PPUSH
78236: PPUSH
// if not driver or not IsInUnit ( driver ) then
78237: LD_VAR 0 1
78241: NOT
78242: PUSH
78243: LD_VAR 0 1
78247: PPUSH
78248: CALL_OW 310
78252: NOT
78253: OR
78254: IFFALSE 78258
// exit ;
78256: GO 78348
// vehicle := IsInUnit ( driver ) ;
78258: LD_ADDR_VAR 0 3
78262: PUSH
78263: LD_VAR 0 1
78267: PPUSH
78268: CALL_OW 310
78272: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78273: LD_VAR 0 1
78277: PPUSH
78278: LD_STRING \
78280: PUSH
78281: LD_INT 0
78283: PUSH
78284: LD_INT 0
78286: PUSH
78287: LD_INT 0
78289: PUSH
78290: LD_INT 0
78292: PUSH
78293: LD_INT 0
78295: PUSH
78296: LD_INT 0
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: LIST
78303: LIST
78304: LIST
78305: LIST
78306: LIST
78307: PUSH
78308: LD_STRING E
78310: PUSH
78311: LD_INT 0
78313: PUSH
78314: LD_INT 0
78316: PUSH
78317: LD_VAR 0 3
78321: PUSH
78322: LD_INT 0
78324: PUSH
78325: LD_INT 0
78327: PUSH
78328: LD_INT 0
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: LIST
78338: LIST
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: PPUSH
78344: CALL_OW 447
// end ;
78348: LD_VAR 0 2
78352: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78353: LD_INT 0
78355: PPUSH
78356: PPUSH
78357: PPUSH
// tmp := [ ] ;
78358: LD_ADDR_VAR 0 5
78362: PUSH
78363: EMPTY
78364: ST_TO_ADDR
// for i in units do
78365: LD_ADDR_VAR 0 4
78369: PUSH
78370: LD_VAR 0 1
78374: PUSH
78375: FOR_IN
78376: IFFALSE 78414
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78378: LD_ADDR_VAR 0 5
78382: PUSH
78383: LD_VAR 0 5
78387: PPUSH
78388: LD_VAR 0 5
78392: PUSH
78393: LD_INT 1
78395: PLUS
78396: PPUSH
78397: LD_VAR 0 4
78401: PPUSH
78402: CALL_OW 256
78406: PPUSH
78407: CALL_OW 2
78411: ST_TO_ADDR
78412: GO 78375
78414: POP
78415: POP
// if not tmp then
78416: LD_VAR 0 5
78420: NOT
78421: IFFALSE 78425
// exit ;
78423: GO 78473
// if asc then
78425: LD_VAR 0 2
78429: IFFALSE 78453
// result := SortListByListAsc ( units , tmp ) else
78431: LD_ADDR_VAR 0 3
78435: PUSH
78436: LD_VAR 0 1
78440: PPUSH
78441: LD_VAR 0 5
78445: PPUSH
78446: CALL_OW 76
78450: ST_TO_ADDR
78451: GO 78473
// result := SortListByListDesc ( units , tmp ) ;
78453: LD_ADDR_VAR 0 3
78457: PUSH
78458: LD_VAR 0 1
78462: PPUSH
78463: LD_VAR 0 5
78467: PPUSH
78468: CALL_OW 77
78472: ST_TO_ADDR
// end ;
78473: LD_VAR 0 3
78477: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78478: LD_INT 0
78480: PPUSH
78481: PPUSH
// task := GetTaskList ( mech ) ;
78482: LD_ADDR_VAR 0 4
78486: PUSH
78487: LD_VAR 0 1
78491: PPUSH
78492: CALL_OW 437
78496: ST_TO_ADDR
// if not task then
78497: LD_VAR 0 4
78501: NOT
78502: IFFALSE 78506
// exit ;
78504: GO 78548
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78506: LD_ADDR_VAR 0 3
78510: PUSH
78511: LD_VAR 0 4
78515: PUSH
78516: LD_INT 1
78518: ARRAY
78519: PUSH
78520: LD_INT 1
78522: ARRAY
78523: PUSH
78524: LD_STRING r
78526: EQUAL
78527: PUSH
78528: LD_VAR 0 4
78532: PUSH
78533: LD_INT 1
78535: ARRAY
78536: PUSH
78537: LD_INT 4
78539: ARRAY
78540: PUSH
78541: LD_VAR 0 2
78545: EQUAL
78546: AND
78547: ST_TO_ADDR
// end ;
78548: LD_VAR 0 3
78552: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78553: LD_INT 0
78555: PPUSH
// SetDir ( unit , d ) ;
78556: LD_VAR 0 1
78560: PPUSH
78561: LD_VAR 0 4
78565: PPUSH
78566: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78570: LD_VAR 0 1
78574: PPUSH
78575: LD_VAR 0 2
78579: PPUSH
78580: LD_VAR 0 3
78584: PPUSH
78585: LD_VAR 0 5
78589: PPUSH
78590: CALL_OW 48
// end ;
78594: LD_VAR 0 6
78598: RET
// export function ToNaturalNumber ( number ) ; begin
78599: LD_INT 0
78601: PPUSH
// result := number div 1 ;
78602: LD_ADDR_VAR 0 2
78606: PUSH
78607: LD_VAR 0 1
78611: PUSH
78612: LD_INT 1
78614: DIV
78615: ST_TO_ADDR
// if number < 0 then
78616: LD_VAR 0 1
78620: PUSH
78621: LD_INT 0
78623: LESS
78624: IFFALSE 78634
// result := 0 ;
78626: LD_ADDR_VAR 0 2
78630: PUSH
78631: LD_INT 0
78633: ST_TO_ADDR
// end ;
78634: LD_VAR 0 2
78638: RET
// export function SortByClass ( units , class ) ; var un ; begin
78639: LD_INT 0
78641: PPUSH
78642: PPUSH
// if not units or not class then
78643: LD_VAR 0 1
78647: NOT
78648: PUSH
78649: LD_VAR 0 2
78653: NOT
78654: OR
78655: IFFALSE 78659
// exit ;
78657: GO 78754
// result := [ ] ;
78659: LD_ADDR_VAR 0 3
78663: PUSH
78664: EMPTY
78665: ST_TO_ADDR
// for un in units do
78666: LD_ADDR_VAR 0 4
78670: PUSH
78671: LD_VAR 0 1
78675: PUSH
78676: FOR_IN
78677: IFFALSE 78752
// if GetClass ( un ) = class then
78679: LD_VAR 0 4
78683: PPUSH
78684: CALL_OW 257
78688: PUSH
78689: LD_VAR 0 2
78693: EQUAL
78694: IFFALSE 78721
// result := Insert ( result , 1 , un ) else
78696: LD_ADDR_VAR 0 3
78700: PUSH
78701: LD_VAR 0 3
78705: PPUSH
78706: LD_INT 1
78708: PPUSH
78709: LD_VAR 0 4
78713: PPUSH
78714: CALL_OW 2
78718: ST_TO_ADDR
78719: GO 78750
// result := Replace ( result , result + 1 , un ) ;
78721: LD_ADDR_VAR 0 3
78725: PUSH
78726: LD_VAR 0 3
78730: PPUSH
78731: LD_VAR 0 3
78735: PUSH
78736: LD_INT 1
78738: PLUS
78739: PPUSH
78740: LD_VAR 0 4
78744: PPUSH
78745: CALL_OW 1
78749: ST_TO_ADDR
78750: GO 78676
78752: POP
78753: POP
// end ;
78754: LD_VAR 0 3
78758: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78759: LD_INT 0
78761: PPUSH
78762: PPUSH
78763: PPUSH
78764: PPUSH
78765: PPUSH
78766: PPUSH
78767: PPUSH
// result := [ ] ;
78768: LD_ADDR_VAR 0 4
78772: PUSH
78773: EMPTY
78774: ST_TO_ADDR
// if x - r < 0 then
78775: LD_VAR 0 1
78779: PUSH
78780: LD_VAR 0 3
78784: MINUS
78785: PUSH
78786: LD_INT 0
78788: LESS
78789: IFFALSE 78801
// min_x := 0 else
78791: LD_ADDR_VAR 0 8
78795: PUSH
78796: LD_INT 0
78798: ST_TO_ADDR
78799: GO 78817
// min_x := x - r ;
78801: LD_ADDR_VAR 0 8
78805: PUSH
78806: LD_VAR 0 1
78810: PUSH
78811: LD_VAR 0 3
78815: MINUS
78816: ST_TO_ADDR
// if y - r < 0 then
78817: LD_VAR 0 2
78821: PUSH
78822: LD_VAR 0 3
78826: MINUS
78827: PUSH
78828: LD_INT 0
78830: LESS
78831: IFFALSE 78843
// min_y := 0 else
78833: LD_ADDR_VAR 0 7
78837: PUSH
78838: LD_INT 0
78840: ST_TO_ADDR
78841: GO 78859
// min_y := y - r ;
78843: LD_ADDR_VAR 0 7
78847: PUSH
78848: LD_VAR 0 2
78852: PUSH
78853: LD_VAR 0 3
78857: MINUS
78858: ST_TO_ADDR
// max_x := x + r ;
78859: LD_ADDR_VAR 0 9
78863: PUSH
78864: LD_VAR 0 1
78868: PUSH
78869: LD_VAR 0 3
78873: PLUS
78874: ST_TO_ADDR
// max_y := y + r ;
78875: LD_ADDR_VAR 0 10
78879: PUSH
78880: LD_VAR 0 2
78884: PUSH
78885: LD_VAR 0 3
78889: PLUS
78890: ST_TO_ADDR
// for _x = min_x to max_x do
78891: LD_ADDR_VAR 0 5
78895: PUSH
78896: DOUBLE
78897: LD_VAR 0 8
78901: DEC
78902: ST_TO_ADDR
78903: LD_VAR 0 9
78907: PUSH
78908: FOR_TO
78909: IFFALSE 79010
// for _y = min_y to max_y do
78911: LD_ADDR_VAR 0 6
78915: PUSH
78916: DOUBLE
78917: LD_VAR 0 7
78921: DEC
78922: ST_TO_ADDR
78923: LD_VAR 0 10
78927: PUSH
78928: FOR_TO
78929: IFFALSE 79006
// begin if not ValidHex ( _x , _y ) then
78931: LD_VAR 0 5
78935: PPUSH
78936: LD_VAR 0 6
78940: PPUSH
78941: CALL_OW 488
78945: NOT
78946: IFFALSE 78950
// continue ;
78948: GO 78928
// if GetResourceTypeXY ( _x , _y ) then
78950: LD_VAR 0 5
78954: PPUSH
78955: LD_VAR 0 6
78959: PPUSH
78960: CALL_OW 283
78964: IFFALSE 79004
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78966: LD_ADDR_VAR 0 4
78970: PUSH
78971: LD_VAR 0 4
78975: PPUSH
78976: LD_VAR 0 4
78980: PUSH
78981: LD_INT 1
78983: PLUS
78984: PPUSH
78985: LD_VAR 0 5
78989: PUSH
78990: LD_VAR 0 6
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PPUSH
78999: CALL_OW 1
79003: ST_TO_ADDR
// end ;
79004: GO 78928
79006: POP
79007: POP
79008: GO 78908
79010: POP
79011: POP
// end ;
79012: LD_VAR 0 4
79016: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79017: LD_INT 0
79019: PPUSH
79020: PPUSH
79021: PPUSH
79022: PPUSH
79023: PPUSH
79024: PPUSH
79025: PPUSH
79026: PPUSH
// if not units then
79027: LD_VAR 0 1
79031: NOT
79032: IFFALSE 79036
// exit ;
79034: GO 79560
// result := UnitFilter ( units , [ f_ok ] ) ;
79036: LD_ADDR_VAR 0 3
79040: PUSH
79041: LD_VAR 0 1
79045: PPUSH
79046: LD_INT 50
79048: PUSH
79049: EMPTY
79050: LIST
79051: PPUSH
79052: CALL_OW 72
79056: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79057: LD_ADDR_VAR 0 8
79061: PUSH
79062: LD_VAR 0 1
79066: PUSH
79067: LD_INT 1
79069: ARRAY
79070: PPUSH
79071: CALL_OW 255
79075: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79076: LD_ADDR_VAR 0 10
79080: PUSH
79081: LD_INT 29
79083: PUSH
79084: LD_INT 91
79086: PUSH
79087: LD_INT 49
79089: PUSH
79090: EMPTY
79091: LIST
79092: LIST
79093: LIST
79094: ST_TO_ADDR
// if not result then
79095: LD_VAR 0 3
79099: NOT
79100: IFFALSE 79104
// exit ;
79102: GO 79560
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79104: LD_ADDR_VAR 0 5
79108: PUSH
79109: LD_INT 81
79111: PUSH
79112: LD_VAR 0 8
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: PPUSH
79121: CALL_OW 69
79125: ST_TO_ADDR
// for i in result do
79126: LD_ADDR_VAR 0 4
79130: PUSH
79131: LD_VAR 0 3
79135: PUSH
79136: FOR_IN
79137: IFFALSE 79558
// begin tag := GetTag ( i ) + 1 ;
79139: LD_ADDR_VAR 0 9
79143: PUSH
79144: LD_VAR 0 4
79148: PPUSH
79149: CALL_OW 110
79153: PUSH
79154: LD_INT 1
79156: PLUS
79157: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79158: LD_ADDR_VAR 0 7
79162: PUSH
79163: LD_VAR 0 4
79167: PPUSH
79168: CALL_OW 250
79172: PPUSH
79173: LD_VAR 0 4
79177: PPUSH
79178: CALL_OW 251
79182: PPUSH
79183: LD_INT 6
79185: PPUSH
79186: CALL 78759 0 3
79190: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79191: LD_VAR 0 4
79195: PPUSH
79196: CALL_OW 247
79200: PUSH
79201: LD_INT 2
79203: EQUAL
79204: PUSH
79205: LD_VAR 0 7
79209: AND
79210: PUSH
79211: LD_VAR 0 4
79215: PPUSH
79216: CALL_OW 264
79220: PUSH
79221: LD_VAR 0 10
79225: IN
79226: NOT
79227: AND
79228: IFFALSE 79267
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79230: LD_VAR 0 4
79234: PPUSH
79235: LD_VAR 0 7
79239: PUSH
79240: LD_INT 1
79242: ARRAY
79243: PUSH
79244: LD_INT 1
79246: ARRAY
79247: PPUSH
79248: LD_VAR 0 7
79252: PUSH
79253: LD_INT 1
79255: ARRAY
79256: PUSH
79257: LD_INT 2
79259: ARRAY
79260: PPUSH
79261: CALL_OW 116
79265: GO 79556
// if path > tag then
79267: LD_VAR 0 2
79271: PUSH
79272: LD_VAR 0 9
79276: GREATER
79277: IFFALSE 79485
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79279: LD_ADDR_VAR 0 6
79283: PUSH
79284: LD_VAR 0 5
79288: PPUSH
79289: LD_INT 91
79291: PUSH
79292: LD_VAR 0 4
79296: PUSH
79297: LD_INT 8
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: LIST
79304: PPUSH
79305: CALL_OW 72
79309: ST_TO_ADDR
// if nearEnemy then
79310: LD_VAR 0 6
79314: IFFALSE 79383
// begin if GetWeapon ( i ) = ru_time_lapser then
79316: LD_VAR 0 4
79320: PPUSH
79321: CALL_OW 264
79325: PUSH
79326: LD_INT 49
79328: EQUAL
79329: IFFALSE 79357
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79331: LD_VAR 0 4
79335: PPUSH
79336: LD_VAR 0 6
79340: PPUSH
79341: LD_VAR 0 4
79345: PPUSH
79346: CALL_OW 74
79350: PPUSH
79351: CALL_OW 112
79355: GO 79381
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79357: LD_VAR 0 4
79361: PPUSH
79362: LD_VAR 0 6
79366: PPUSH
79367: LD_VAR 0 4
79371: PPUSH
79372: CALL_OW 74
79376: PPUSH
79377: CALL_OW 115
// end else
79381: GO 79483
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79383: LD_VAR 0 4
79387: PPUSH
79388: LD_VAR 0 2
79392: PUSH
79393: LD_VAR 0 9
79397: ARRAY
79398: PUSH
79399: LD_INT 1
79401: ARRAY
79402: PPUSH
79403: LD_VAR 0 2
79407: PUSH
79408: LD_VAR 0 9
79412: ARRAY
79413: PUSH
79414: LD_INT 2
79416: ARRAY
79417: PPUSH
79418: CALL_OW 297
79422: PUSH
79423: LD_INT 6
79425: GREATER
79426: IFFALSE 79469
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79428: LD_VAR 0 4
79432: PPUSH
79433: LD_VAR 0 2
79437: PUSH
79438: LD_VAR 0 9
79442: ARRAY
79443: PUSH
79444: LD_INT 1
79446: ARRAY
79447: PPUSH
79448: LD_VAR 0 2
79452: PUSH
79453: LD_VAR 0 9
79457: ARRAY
79458: PUSH
79459: LD_INT 2
79461: ARRAY
79462: PPUSH
79463: CALL_OW 114
79467: GO 79483
// SetTag ( i , tag ) ;
79469: LD_VAR 0 4
79473: PPUSH
79474: LD_VAR 0 9
79478: PPUSH
79479: CALL_OW 109
// end else
79483: GO 79556
// if enemy then
79485: LD_VAR 0 5
79489: IFFALSE 79556
// begin if GetWeapon ( i ) = ru_time_lapser then
79491: LD_VAR 0 4
79495: PPUSH
79496: CALL_OW 264
79500: PUSH
79501: LD_INT 49
79503: EQUAL
79504: IFFALSE 79532
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79506: LD_VAR 0 4
79510: PPUSH
79511: LD_VAR 0 5
79515: PPUSH
79516: LD_VAR 0 4
79520: PPUSH
79521: CALL_OW 74
79525: PPUSH
79526: CALL_OW 112
79530: GO 79556
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79532: LD_VAR 0 4
79536: PPUSH
79537: LD_VAR 0 5
79541: PPUSH
79542: LD_VAR 0 4
79546: PPUSH
79547: CALL_OW 74
79551: PPUSH
79552: CALL_OW 115
// end ; end ;
79556: GO 79136
79558: POP
79559: POP
// end ;
79560: LD_VAR 0 3
79564: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79565: LD_INT 0
79567: PPUSH
79568: PPUSH
79569: PPUSH
// if not unit or IsInUnit ( unit ) then
79570: LD_VAR 0 1
79574: NOT
79575: PUSH
79576: LD_VAR 0 1
79580: PPUSH
79581: CALL_OW 310
79585: OR
79586: IFFALSE 79590
// exit ;
79588: GO 79681
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79590: LD_ADDR_VAR 0 4
79594: PUSH
79595: LD_VAR 0 1
79599: PPUSH
79600: CALL_OW 250
79604: PPUSH
79605: LD_VAR 0 2
79609: PPUSH
79610: LD_INT 1
79612: PPUSH
79613: CALL_OW 272
79617: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79618: LD_ADDR_VAR 0 5
79622: PUSH
79623: LD_VAR 0 1
79627: PPUSH
79628: CALL_OW 251
79632: PPUSH
79633: LD_VAR 0 2
79637: PPUSH
79638: LD_INT 1
79640: PPUSH
79641: CALL_OW 273
79645: ST_TO_ADDR
// if ValidHex ( x , y ) then
79646: LD_VAR 0 4
79650: PPUSH
79651: LD_VAR 0 5
79655: PPUSH
79656: CALL_OW 488
79660: IFFALSE 79681
// ComTurnXY ( unit , x , y ) ;
79662: LD_VAR 0 1
79666: PPUSH
79667: LD_VAR 0 4
79671: PPUSH
79672: LD_VAR 0 5
79676: PPUSH
79677: CALL_OW 118
// end ;
79681: LD_VAR 0 3
79685: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79686: LD_INT 0
79688: PPUSH
79689: PPUSH
// result := false ;
79690: LD_ADDR_VAR 0 3
79694: PUSH
79695: LD_INT 0
79697: ST_TO_ADDR
// if not units then
79698: LD_VAR 0 2
79702: NOT
79703: IFFALSE 79707
// exit ;
79705: GO 79752
// for i in units do
79707: LD_ADDR_VAR 0 4
79711: PUSH
79712: LD_VAR 0 2
79716: PUSH
79717: FOR_IN
79718: IFFALSE 79750
// if See ( side , i ) then
79720: LD_VAR 0 1
79724: PPUSH
79725: LD_VAR 0 4
79729: PPUSH
79730: CALL_OW 292
79734: IFFALSE 79748
// begin result := true ;
79736: LD_ADDR_VAR 0 3
79740: PUSH
79741: LD_INT 1
79743: ST_TO_ADDR
// exit ;
79744: POP
79745: POP
79746: GO 79752
// end ;
79748: GO 79717
79750: POP
79751: POP
// end ;
79752: LD_VAR 0 3
79756: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79757: LD_INT 0
79759: PPUSH
79760: PPUSH
79761: PPUSH
79762: PPUSH
// if not unit or not points then
79763: LD_VAR 0 1
79767: NOT
79768: PUSH
79769: LD_VAR 0 2
79773: NOT
79774: OR
79775: IFFALSE 79779
// exit ;
79777: GO 79869
// dist := 99999 ;
79779: LD_ADDR_VAR 0 5
79783: PUSH
79784: LD_INT 99999
79786: ST_TO_ADDR
// for i in points do
79787: LD_ADDR_VAR 0 4
79791: PUSH
79792: LD_VAR 0 2
79796: PUSH
79797: FOR_IN
79798: IFFALSE 79867
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79800: LD_ADDR_VAR 0 6
79804: PUSH
79805: LD_VAR 0 1
79809: PPUSH
79810: LD_VAR 0 4
79814: PUSH
79815: LD_INT 1
79817: ARRAY
79818: PPUSH
79819: LD_VAR 0 4
79823: PUSH
79824: LD_INT 2
79826: ARRAY
79827: PPUSH
79828: CALL_OW 297
79832: ST_TO_ADDR
// if tmpDist < dist then
79833: LD_VAR 0 6
79837: PUSH
79838: LD_VAR 0 5
79842: LESS
79843: IFFALSE 79865
// begin result := i ;
79845: LD_ADDR_VAR 0 3
79849: PUSH
79850: LD_VAR 0 4
79854: ST_TO_ADDR
// dist := tmpDist ;
79855: LD_ADDR_VAR 0 5
79859: PUSH
79860: LD_VAR 0 6
79864: ST_TO_ADDR
// end ; end ;
79865: GO 79797
79867: POP
79868: POP
// end ;
79869: LD_VAR 0 3
79873: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79874: LD_INT 0
79876: PPUSH
// uc_side := side ;
79877: LD_ADDR_OWVAR 20
79881: PUSH
79882: LD_VAR 0 1
79886: ST_TO_ADDR
// uc_nation := 3 ;
79887: LD_ADDR_OWVAR 21
79891: PUSH
79892: LD_INT 3
79894: ST_TO_ADDR
// vc_chassis := 25 ;
79895: LD_ADDR_OWVAR 37
79899: PUSH
79900: LD_INT 25
79902: ST_TO_ADDR
// vc_engine := engine_siberite ;
79903: LD_ADDR_OWVAR 39
79907: PUSH
79908: LD_INT 3
79910: ST_TO_ADDR
// vc_control := control_computer ;
79911: LD_ADDR_OWVAR 38
79915: PUSH
79916: LD_INT 3
79918: ST_TO_ADDR
// vc_weapon := 59 ;
79919: LD_ADDR_OWVAR 40
79923: PUSH
79924: LD_INT 59
79926: ST_TO_ADDR
// result := CreateVehicle ;
79927: LD_ADDR_VAR 0 5
79931: PUSH
79932: CALL_OW 45
79936: ST_TO_ADDR
// SetDir ( result , d ) ;
79937: LD_VAR 0 5
79941: PPUSH
79942: LD_VAR 0 4
79946: PPUSH
79947: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79951: LD_VAR 0 5
79955: PPUSH
79956: LD_VAR 0 2
79960: PPUSH
79961: LD_VAR 0 3
79965: PPUSH
79966: LD_INT 0
79968: PPUSH
79969: CALL_OW 48
// end ;
79973: LD_VAR 0 5
79977: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79978: LD_INT 0
79980: PPUSH
79981: PPUSH
79982: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79983: LD_ADDR_VAR 0 2
79987: PUSH
79988: LD_INT 0
79990: PUSH
79991: LD_INT 0
79993: PUSH
79994: LD_INT 0
79996: PUSH
79997: LD_INT 0
79999: PUSH
80000: EMPTY
80001: LIST
80002: LIST
80003: LIST
80004: LIST
80005: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80006: LD_VAR 0 1
80010: NOT
80011: PUSH
80012: LD_VAR 0 1
80016: PPUSH
80017: CALL_OW 264
80021: PUSH
80022: LD_INT 12
80024: PUSH
80025: LD_INT 51
80027: PUSH
80028: LD_INT 32
80030: PUSH
80031: LD_INT 89
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: LIST
80038: LIST
80039: IN
80040: NOT
80041: OR
80042: IFFALSE 80046
// exit ;
80044: GO 80144
// for i := 1 to 3 do
80046: LD_ADDR_VAR 0 3
80050: PUSH
80051: DOUBLE
80052: LD_INT 1
80054: DEC
80055: ST_TO_ADDR
80056: LD_INT 3
80058: PUSH
80059: FOR_TO
80060: IFFALSE 80142
// begin tmp := GetCargo ( cargo , i ) ;
80062: LD_ADDR_VAR 0 4
80066: PUSH
80067: LD_VAR 0 1
80071: PPUSH
80072: LD_VAR 0 3
80076: PPUSH
80077: CALL_OW 289
80081: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80082: LD_ADDR_VAR 0 2
80086: PUSH
80087: LD_VAR 0 2
80091: PPUSH
80092: LD_VAR 0 3
80096: PPUSH
80097: LD_VAR 0 4
80101: PPUSH
80102: CALL_OW 1
80106: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80107: LD_ADDR_VAR 0 2
80111: PUSH
80112: LD_VAR 0 2
80116: PPUSH
80117: LD_INT 4
80119: PPUSH
80120: LD_VAR 0 2
80124: PUSH
80125: LD_INT 4
80127: ARRAY
80128: PUSH
80129: LD_VAR 0 4
80133: PLUS
80134: PPUSH
80135: CALL_OW 1
80139: ST_TO_ADDR
// end ;
80140: GO 80059
80142: POP
80143: POP
// end ;
80144: LD_VAR 0 2
80148: RET
// export function Length ( array ) ; begin
80149: LD_INT 0
80151: PPUSH
// result := array + 0 ;
80152: LD_ADDR_VAR 0 2
80156: PUSH
80157: LD_VAR 0 1
80161: PUSH
80162: LD_INT 0
80164: PLUS
80165: ST_TO_ADDR
// end ;
80166: LD_VAR 0 2
80170: RET
// export function PrepareArray ( array ) ; begin
80171: LD_INT 0
80173: PPUSH
// result := array diff 0 ;
80174: LD_ADDR_VAR 0 2
80178: PUSH
80179: LD_VAR 0 1
80183: PUSH
80184: LD_INT 0
80186: DIFF
80187: ST_TO_ADDR
// if not result [ 1 ] then
80188: LD_VAR 0 2
80192: PUSH
80193: LD_INT 1
80195: ARRAY
80196: NOT
80197: IFFALSE 80217
// result := Delete ( result , 1 ) ;
80199: LD_ADDR_VAR 0 2
80203: PUSH
80204: LD_VAR 0 2
80208: PPUSH
80209: LD_INT 1
80211: PPUSH
80212: CALL_OW 3
80216: ST_TO_ADDR
// end ;
80217: LD_VAR 0 2
80221: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80222: LD_INT 0
80224: PPUSH
80225: PPUSH
80226: PPUSH
80227: PPUSH
// sibRocketRange := 25 ;
80228: LD_ADDR_VAR 0 6
80232: PUSH
80233: LD_INT 25
80235: ST_TO_ADDR
// result := false ;
80236: LD_ADDR_VAR 0 4
80240: PUSH
80241: LD_INT 0
80243: ST_TO_ADDR
// for i := 0 to 5 do
80244: LD_ADDR_VAR 0 5
80248: PUSH
80249: DOUBLE
80250: LD_INT 0
80252: DEC
80253: ST_TO_ADDR
80254: LD_INT 5
80256: PUSH
80257: FOR_TO
80258: IFFALSE 80325
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80260: LD_VAR 0 1
80264: PPUSH
80265: LD_VAR 0 5
80269: PPUSH
80270: LD_VAR 0 6
80274: PPUSH
80275: CALL_OW 272
80279: PPUSH
80280: LD_VAR 0 2
80284: PPUSH
80285: LD_VAR 0 5
80289: PPUSH
80290: LD_VAR 0 6
80294: PPUSH
80295: CALL_OW 273
80299: PPUSH
80300: LD_VAR 0 3
80304: PPUSH
80305: CALL_OW 309
80309: IFFALSE 80323
// begin result := true ;
80311: LD_ADDR_VAR 0 4
80315: PUSH
80316: LD_INT 1
80318: ST_TO_ADDR
// exit ;
80319: POP
80320: POP
80321: GO 80327
// end ;
80323: GO 80257
80325: POP
80326: POP
// end ;
80327: LD_VAR 0 4
80331: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80332: LD_INT 0
80334: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80335: LD_VAR 0 1
80339: PPUSH
80340: LD_VAR 0 2
80344: PPUSH
80345: LD_INT 0
80347: PPUSH
80348: LD_INT 0
80350: PPUSH
80351: LD_INT 1
80353: PPUSH
80354: LD_INT 0
80356: PPUSH
80357: CALL_OW 587
// end ;
80361: LD_VAR 0 3
80365: RET
// export function CenterOnNow ( unit ) ; begin
80366: LD_INT 0
80368: PPUSH
// result := IsInUnit ( unit ) ;
80369: LD_ADDR_VAR 0 2
80373: PUSH
80374: LD_VAR 0 1
80378: PPUSH
80379: CALL_OW 310
80383: ST_TO_ADDR
// if not result then
80384: LD_VAR 0 2
80388: NOT
80389: IFFALSE 80401
// result := unit ;
80391: LD_ADDR_VAR 0 2
80395: PUSH
80396: LD_VAR 0 1
80400: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80401: LD_VAR 0 1
80405: PPUSH
80406: CALL_OW 87
// end ; end_of_file
80410: LD_VAR 0 2
80414: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80415: LD_VAR 0 1
80419: PUSH
80420: LD_INT 200
80422: DOUBLE
80423: GREATEREQUAL
80424: IFFALSE 80432
80426: LD_INT 299
80428: DOUBLE
80429: LESSEQUAL
80430: IFTRUE 80434
80432: GO 80466
80434: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80435: LD_VAR 0 1
80439: PPUSH
80440: LD_VAR 0 2
80444: PPUSH
80445: LD_VAR 0 3
80449: PPUSH
80450: LD_VAR 0 4
80454: PPUSH
80455: LD_VAR 0 5
80459: PPUSH
80460: CALL 35208 0 5
80464: GO 80543
80466: LD_INT 300
80468: DOUBLE
80469: GREATEREQUAL
80470: IFFALSE 80478
80472: LD_INT 399
80474: DOUBLE
80475: LESSEQUAL
80476: IFTRUE 80480
80478: GO 80542
80480: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80481: LD_VAR 0 1
80485: PPUSH
80486: LD_VAR 0 2
80490: PPUSH
80491: LD_VAR 0 3
80495: PPUSH
80496: LD_VAR 0 4
80500: PPUSH
80501: LD_VAR 0 5
80505: PPUSH
80506: LD_VAR 0 6
80510: PPUSH
80511: LD_VAR 0 7
80515: PPUSH
80516: LD_VAR 0 8
80520: PPUSH
80521: LD_VAR 0 9
80525: PPUSH
80526: LD_VAR 0 10
80530: PPUSH
80531: LD_VAR 0 11
80535: PPUSH
80536: CALL 31541 0 11
80540: GO 80543
80542: POP
// end ;
80543: PPOPN 11
80545: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80546: LD_VAR 0 1
80550: PPUSH
80551: LD_VAR 0 2
80555: PPUSH
80556: LD_VAR 0 3
80560: PPUSH
80561: LD_VAR 0 4
80565: PPUSH
80566: LD_VAR 0 5
80570: PPUSH
80571: CALL 34944 0 5
// end ; end_of_file
80575: PPOPN 5
80577: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80578: LD_VAR 0 1
80582: PPUSH
80583: LD_VAR 0 2
80587: PPUSH
80588: LD_VAR 0 3
80592: PPUSH
80593: LD_VAR 0 4
80597: PPUSH
80598: LD_VAR 0 5
80602: PPUSH
80603: LD_VAR 0 6
80607: PPUSH
80608: CALL 19193 0 6
// end ;
80612: PPOPN 6
80614: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80615: LD_INT 0
80617: PPUSH
// begin if not units then
80618: LD_VAR 0 1
80622: NOT
80623: IFFALSE 80627
// exit ;
80625: GO 80627
// end ;
80627: PPOPN 7
80629: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80630: CALL 19097 0 0
// end ;
80634: PPOPN 1
80636: END
