// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15039 0 0
// PrepareDifficulty ;
  43: CALL 12412 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5578 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 39024 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 39024 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 39024 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 39024 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 39024 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 39024 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 39024 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 39024 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 39024 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 39024 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 39024 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 39024 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 39024 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76425 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12731 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12731 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 76425 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12731 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12731 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side := 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation := 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i := 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery :=  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name :=  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un := CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery :=  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name :=  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un := CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4381
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis := ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh := CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery :=  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name :=  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 6
4329: PUSH
4330: LD_INT 7
4332: PUSH
4333: LD_INT 8
4335: PUSH
4336: LD_INT 10
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_OWVAR 67
4349: ARRAY
4350: PPUSH
4351: CALL_OW 380
// un = CreateHuman ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: CALL_OW 44
4364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4365: LD_VAR 0 3
4369: PPUSH
4370: LD_VAR 0 4
4374: PPUSH
4375: CALL_OW 52
// end ;
4379: GO 4163
4381: POP
4382: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: DOUBLE
4389: LD_INT 1
4391: DEC
4392: ST_TO_ADDR
4393: LD_INT 3
4395: PUSH
4396: LD_INT 4
4398: PUSH
4399: LD_INT 5
4401: PUSH
4402: LD_INT 5
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_OWVAR 67
4415: ARRAY
4416: PUSH
4417: FOR_TO
4418: IFFALSE 4565
// begin vc_engine := 3 ;
4420: LD_ADDR_OWVAR 39
4424: PUSH
4425: LD_INT 3
4427: ST_TO_ADDR
// vc_control := 3 ;
4428: LD_ADDR_OWVAR 38
4432: PUSH
4433: LD_INT 3
4435: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4436: LD_ADDR_OWVAR 40
4440: PUSH
4441: LD_INT 42
4443: PUSH
4444: LD_INT 43
4446: PUSH
4447: LD_INT 44
4449: PUSH
4450: LD_INT 45
4452: PUSH
4453: LD_INT 46
4455: PUSH
4456: LD_INT 49
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 1
4469: PPUSH
4470: LD_INT 5
4472: PPUSH
4473: CALL_OW 12
4477: ARRAY
4478: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4479: LD_OWVAR 40
4483: PUSH
4484: LD_INT 46
4486: EQUAL
4487: IFFALSE 4499
// vc_chassis := ru_heavy_tracked else
4489: LD_ADDR_OWVAR 37
4493: PUSH
4494: LD_INT 24
4496: ST_TO_ADDR
4497: GO 4526
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4499: LD_ADDR_OWVAR 37
4503: PUSH
4504: LD_INT 22
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: CALL_OW 12
4524: ARRAY
4525: ST_TO_ADDR
// veh := CreateVehicle ;
4526: LD_ADDR_VAR 0 4
4530: PUSH
4531: CALL_OW 45
4535: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4536: LD_VAR 0 4
4540: PPUSH
4541: LD_INT 3
4543: PPUSH
4544: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_INT 6
4555: PPUSH
4556: LD_INT 0
4558: PPUSH
4559: CALL_OW 49
// end ;
4563: GO 4417
4565: POP
4566: POP
// end ; end_of_file
4567: LD_VAR 0 1
4571: RET
// export function PrepareKurt ; begin
4572: LD_INT 0
4574: PPUSH
// uc_side := 8 ;
4575: LD_ADDR_OWVAR 20
4579: PUSH
4580: LD_INT 8
4582: ST_TO_ADDR
// uc_nation := 2 ;
4583: LD_ADDR_OWVAR 21
4587: PUSH
4588: LD_INT 2
4590: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4591: LD_ADDR_OWVAR 37
4595: PUSH
4596: LD_INT 13
4598: ST_TO_ADDR
// vc_engine := 1 ;
4599: LD_ADDR_OWVAR 39
4603: PUSH
4604: LD_INT 1
4606: ST_TO_ADDR
// vc_control := 1 ;
4607: LD_ADDR_OWVAR 38
4611: PUSH
4612: LD_INT 1
4614: ST_TO_ADDR
// vc_weapon := 24 ;
4615: LD_ADDR_OWVAR 40
4619: PUSH
4620: LD_INT 24
4622: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4623: LD_ADDR_EXP 18
4627: PUSH
4628: CALL_OW 45
4632: ST_TO_ADDR
// if kurtStatus > 0 then
4633: LD_EXP 19
4637: PUSH
4638: LD_INT 0
4640: GREATER
4641: IFFALSE 4693
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4643: LD_ADDR_EXP 17
4647: PUSH
4648: LD_STRING Kurt
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: LD_STRING 
4656: PPUSH
4657: CALL 39024 0 3
4661: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4662: LD_EXP 18
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4677: LD_EXP 17
4681: PPUSH
4682: LD_EXP 18
4686: PPUSH
4687: CALL_OW 52
// end else
4691: GO 4770
// begin hc_name :=  ;
4693: LD_ADDR_OWVAR 26
4697: PUSH
4698: LD_STRING 
4700: ST_TO_ADDR
// hc_gallery :=  ;
4701: LD_ADDR_OWVAR 33
4705: PUSH
4706: LD_STRING 
4708: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4709: LD_INT 1
4711: PPUSH
4712: LD_INT 10
4714: PPUSH
4715: CALL_OW 381
// Kurt := CreateHuman ;
4719: LD_ADDR_EXP 17
4723: PUSH
4724: CALL_OW 44
4728: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4729: LD_EXP 18
4733: PPUSH
4734: LD_INT 4
4736: PPUSH
4737: LD_INT 0
4739: PPUSH
4740: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4744: LD_EXP 17
4748: PPUSH
4749: LD_EXP 18
4753: PPUSH
4754: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_STRING AltKurt
4765: PPUSH
4766: CALL_OW 38
// end ; end ;
4770: LD_VAR 0 1
4774: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4775: LD_INT 0
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// for i := 1 to 3 do
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: DOUBLE
4787: LD_INT 1
4789: DEC
4790: ST_TO_ADDR
4791: LD_INT 3
4793: PUSH
4794: FOR_TO
4795: IFFALSE 4916
// begin uc_side := 1 ;
4797: LD_ADDR_OWVAR 20
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// uc_nation := 2 ;
4805: LD_ADDR_OWVAR 21
4809: PUSH
4810: LD_INT 2
4812: ST_TO_ADDR
// hc_gallery =  ;
4813: LD_ADDR_OWVAR 33
4817: PUSH
4818: LD_STRING 
4820: ST_TO_ADDR
// hc_name =  ;
4821: LD_ADDR_OWVAR 26
4825: PUSH
4826: LD_STRING 
4828: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4829: LD_EXP 19
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: PUSH
4838: LD_EXP 19
4842: PUSH
4843: LD_INT 2
4845: EQUAL
4846: OR
4847: IFFALSE 4864
// PrepareHuman ( false , 1 , 6 ) else
4849: LD_INT 0
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: LD_INT 6
4857: PPUSH
4858: CALL_OW 380
4862: GO 4877
// PrepareHuman ( false , 1 , 8 ) ;
4864: LD_INT 0
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: LD_INT 8
4872: PPUSH
4873: CALL_OW 380
// un := CreateHuman ;
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: CALL_OW 44
4886: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4887: LD_VAR 0 3
4891: PPUSH
4892: LD_INT 4
4894: PPUSH
4895: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 4
4906: PPUSH
4907: LD_INT 0
4909: PPUSH
4910: CALL_OW 49
// end ;
4914: GO 4794
4916: POP
4917: POP
// vc_chassis := 14 ;
4918: LD_ADDR_OWVAR 37
4922: PUSH
4923: LD_INT 14
4925: ST_TO_ADDR
// vc_engine := 3 ;
4926: LD_ADDR_OWVAR 39
4930: PUSH
4931: LD_INT 3
4933: ST_TO_ADDR
// vc_control := 1 ;
4934: LD_ADDR_OWVAR 38
4938: PUSH
4939: LD_INT 1
4941: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4942: LD_ADDR_OWVAR 40
4946: PUSH
4947: LD_INT 27
4949: PUSH
4950: LD_INT 26
4952: PUSH
4953: LD_INT 28
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 1
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 12
4971: ARRAY
4972: ST_TO_ADDR
// veh := CreateVehicle ;
4973: LD_ADDR_VAR 0 4
4977: PUSH
4978: CALL_OW 45
4982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4983: LD_VAR 0 4
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4995: LD_VAR 0 4
4999: PPUSH
5000: LD_INT 4
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5010: LD_EXP 19
5014: PUSH
5015: LD_INT 0
5017: EQUAL
5018: PUSH
5019: LD_EXP 19
5023: PUSH
5024: LD_INT 2
5026: EQUAL
5027: OR
5028: IFFALSE 5045
// PrepareHuman ( false , 3 , 6 ) else
5030: LD_INT 0
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 6
5038: PPUSH
5039: CALL_OW 380
5043: GO 5058
// PrepareHuman ( false , 3 , 8 ) ;
5045: LD_INT 0
5047: PPUSH
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 8
5053: PPUSH
5054: CALL_OW 380
// un := CreateHuman ;
5058: LD_ADDR_VAR 0 3
5062: PUSH
5063: CALL_OW 44
5067: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5068: LD_VAR 0 3
5072: PPUSH
5073: LD_VAR 0 4
5077: PPUSH
5078: CALL_OW 52
// vc_chassis := 14 ;
5082: LD_ADDR_OWVAR 37
5086: PUSH
5087: LD_INT 14
5089: ST_TO_ADDR
// vc_engine := 3 ;
5090: LD_ADDR_OWVAR 39
5094: PUSH
5095: LD_INT 3
5097: ST_TO_ADDR
// vc_control := 1 ;
5098: LD_ADDR_OWVAR 38
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5106: LD_ADDR_OWVAR 40
5110: PUSH
5111: LD_INT 27
5113: PUSH
5114: LD_INT 26
5116: PUSH
5117: LD_INT 28
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 1
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL_OW 12
5135: ARRAY
5136: ST_TO_ADDR
// veh := CreateVehicle ;
5137: LD_ADDR_VAR 0 4
5141: PUSH
5142: CALL_OW 45
5146: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5147: LD_VAR 0 4
5151: PPUSH
5152: LD_INT 4
5154: PPUSH
5155: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5159: LD_VAR 0 4
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: LD_INT 0
5169: PPUSH
5170: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5174: LD_EXP 19
5178: PUSH
5179: LD_INT 0
5181: EQUAL
5182: PUSH
5183: LD_EXP 19
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: OR
5192: IFFALSE 5209
// PrepareHuman ( false , 4 , 6 ) else
5194: LD_INT 0
5196: PPUSH
5197: LD_INT 4
5199: PPUSH
5200: LD_INT 6
5202: PPUSH
5203: CALL_OW 380
5207: GO 5222
// PrepareHuman ( false , 4 , 8 ) ;
5209: LD_INT 0
5211: PPUSH
5212: LD_INT 4
5214: PPUSH
5215: LD_INT 8
5217: PPUSH
5218: CALL_OW 380
// un := CreateHuman ;
5222: LD_ADDR_VAR 0 3
5226: PUSH
5227: CALL_OW 44
5231: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5232: LD_VAR 0 3
5236: PPUSH
5237: LD_INT 4
5239: PPUSH
5240: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5244: LD_VAR 0 3
5248: PPUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: CALL_OW 52
// vc_chassis := 14 ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := 3 ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := 1 ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := 26 ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 26
5289: ST_TO_ADDR
// veh := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_INT 4
5307: PPUSH
5308: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5312: LD_VAR 0 4
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: LD_INT 0
5322: PPUSH
5323: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5327: LD_EXP 19
5331: PUSH
5332: LD_INT 0
5334: EQUAL
5335: PUSH
5336: LD_EXP 19
5340: PUSH
5341: LD_INT 2
5343: EQUAL
5344: OR
5345: IFFALSE 5362
// PrepareHuman ( false , 2 , 4 ) else
5347: LD_INT 0
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: LD_INT 4
5355: PPUSH
5356: CALL_OW 380
5360: GO 5375
// PrepareHuman ( false , 2 , 8 ) ;
5362: LD_INT 0
5364: PPUSH
5365: LD_INT 2
5367: PPUSH
5368: LD_INT 8
5370: PPUSH
5371: CALL_OW 380
// un := CreateHuman ;
5375: LD_ADDR_VAR 0 3
5379: PUSH
5380: CALL_OW 44
5384: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5385: LD_VAR 0 3
5389: PPUSH
5390: LD_INT 4
5392: PPUSH
5393: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_VAR 0 4
5406: PPUSH
5407: CALL_OW 52
// end ;
5411: LD_VAR 0 1
5415: RET
// export function PrepareAttackLegion ; var i , un ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
// for i := 1 to 4 do
5421: LD_ADDR_VAR 0 2
5425: PUSH
5426: DOUBLE
5427: LD_INT 1
5429: DEC
5430: ST_TO_ADDR
5431: LD_INT 4
5433: PUSH
5434: FOR_TO
5435: IFFALSE 5545
// begin uc_side := 8 ;
5437: LD_ADDR_OWVAR 20
5441: PUSH
5442: LD_INT 8
5444: ST_TO_ADDR
// uc_nation := 2 ;
5445: LD_ADDR_OWVAR 21
5449: PUSH
5450: LD_INT 2
5452: ST_TO_ADDR
// hc_gallery :=  ;
5453: LD_ADDR_OWVAR 33
5457: PUSH
5458: LD_STRING 
5460: ST_TO_ADDR
// hc_name :=  ;
5461: LD_ADDR_OWVAR 26
5465: PUSH
5466: LD_STRING 
5468: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5469: LD_INT 0
5471: PPUSH
5472: LD_INT 1
5474: PUSH
5475: LD_INT 8
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 1
5484: PPUSH
5485: LD_INT 2
5487: PPUSH
5488: CALL_OW 12
5492: ARRAY
5493: PPUSH
5494: LD_INT 6
5496: PPUSH
5497: LD_INT 8
5499: PPUSH
5500: CALL_OW 12
5504: PPUSH
5505: CALL_OW 380
// un := CreateHuman ;
5509: LD_ADDR_VAR 0 3
5513: PUSH
5514: CALL_OW 44
5518: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 19
5526: PPUSH
5527: LD_INT 0
5529: PPUSH
5530: CALL_OW 49
// ComCrawl ( un ) ;
5534: LD_VAR 0 3
5538: PPUSH
5539: CALL_OW 137
// end ;
5543: GO 5434
5545: POP
5546: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 8
5552: PPUSH
5553: LD_INT 2
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5563: LD_INT 20
5565: PPUSH
5566: LD_INT 3
5568: PPUSH
5569: CALL 14566 0 2
// end ; end_of_file
5573: LD_VAR 0 1
5577: RET
// export function Action ; var i , tmp , group ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
// InGameOn ;
5584: CALL_OW 8
// music_nat := 1 ;
5588: LD_ADDR_OWVAR 71
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5596: LD_ADDR_VAR 0 4
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5616: LD_ADDR_VAR 0 3
5620: PUSH
5621: LD_EXP 1
5625: PPUSH
5626: CALL_OW 310
5630: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5631: LD_VAR 0 3
5635: PPUSH
5636: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_INT 130
5647: PPUSH
5648: LD_INT 103
5650: PPUSH
5651: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5655: LD_VAR 0 3
5659: PPUSH
5660: LD_INT 114
5662: PPUSH
5663: LD_INT 102
5665: PPUSH
5666: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5670: LD_EXP 1
5674: PPUSH
5675: LD_STRING D1-JMM-1
5677: PPUSH
5678: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 87
// if IsOk ( Donaldson ) then
5691: LD_EXP 3
5695: PPUSH
5696: CALL_OW 302
5700: IFFALSE 5765
// begin Say ( Donaldson , D1-Don-1 ) ;
5702: LD_EXP 3
5706: PPUSH
5707: LD_STRING D1-Don-1
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5723: LD_EXP 1
5727: PPUSH
5728: LD_STRING D1-JMM-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5744: LD_EXP 3
5748: PPUSH
5749: LD_STRING D1-Don-2
5751: PPUSH
5752: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5765: LD_VAR 0 4
5769: PPUSH
5770: LD_INT 110
5772: PPUSH
5773: LD_INT 101
5775: PPUSH
5776: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5780: LD_INT 35
5782: PPUSH
5783: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5796: LD_INT 1
5798: PPUSH
5799: LD_INT 102
5801: PPUSH
5802: LD_INT 94
5804: PPUSH
5805: CALL_OW 293
5809: IFFALSE 5780
// CenterOnXY ( 102 , 94 ) ;
5811: LD_INT 102
5813: PPUSH
5814: LD_INT 94
5816: PPUSH
5817: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5821: LD_VAR 0 4
5825: PPUSH
5826: LD_INT 26
5828: PUSH
5829: LD_INT 1
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PPUSH
5836: CALL_OW 72
5840: PPUSH
5841: LD_STRING D1-Sol1-2
5843: PPUSH
5844: LD_STRING 
5846: PPUSH
5847: CALL 12226 0 3
// Say ( JMM , D1-JMM-3 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_STRING D1-JMM-3
5858: PPUSH
5859: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5863: LD_STRING M1
5865: PPUSH
5866: CALL_OW 337
// for i in group do
5870: LD_ADDR_VAR 0 2
5874: PUSH
5875: LD_VAR 0 4
5879: PUSH
5880: FOR_IN
5881: IFFALSE 5900
// ComMoveXY ( i , 95 , 84 ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_INT 95
5890: PPUSH
5891: LD_INT 84
5893: PPUSH
5894: CALL_OW 111
5898: GO 5880
5900: POP
5901: POP
// end ;
5902: LD_VAR 0 1
5906: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5907: LD_INT 7
5909: PPUSH
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: PUSH
5925: LD_INT 1
5927: GREATER
5928: IFFALSE 6578
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: LD_INT 8
5945: PPUSH
5946: LD_INT 22
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 25
5958: PUSH
5959: LD_INT 9
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 70
5974: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
5975: LD_VAR 0 2
5979: PPUSH
5980: LD_INT 96
5982: PPUSH
5983: LD_INT 85
5985: PPUSH
5986: CALL_OW 154
// for i := 1 to 5 do
5990: LD_ADDR_VAR 0 1
5994: PUSH
5995: DOUBLE
5996: LD_INT 1
5998: DEC
5999: ST_TO_ADDR
6000: LD_INT 5
6002: PUSH
6003: FOR_TO
6004: IFFALSE 6023
// AddComTimeShift ( tmp , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
6021: GO 6003
6023: POP
6024: POP
// wait ( 0 0$2 ) ;
6025: LD_INT 70
6027: PPUSH
6028: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6032: LD_EXP 1
6036: PPUSH
6037: LD_STRING D1a-JMM-1
6039: PPUSH
6040: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6044: LD_EXP 3
6048: PPUSH
6049: LD_STRING D1a-Don-1
6051: PPUSH
6052: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 1
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PPUSH
6071: CALL_OW 69
6075: PUSH
6076: FOR_IN
6077: IFFALSE 6096
// ComMoveXY ( i , 109 , 102 ) ;
6079: LD_VAR 0 1
6083: PPUSH
6084: LD_INT 109
6086: PPUSH
6087: LD_INT 102
6089: PPUSH
6090: CALL_OW 111
6094: GO 6076
6096: POP
6097: POP
// Say ( JMM , D1a-JMM-2 ) ;
6098: LD_EXP 1
6102: PPUSH
6103: LD_STRING D1a-JMM-2
6105: PPUSH
6106: CALL_OW 88
// wait ( 0 0$10 ) ;
6110: LD_INT 350
6112: PPUSH
6113: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6117: LD_EXP 1
6121: PPUSH
6122: CALL_OW 310
6126: PPUSH
6127: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6131: LD_EXP 3
6135: PPUSH
6136: LD_STRING D1b-Don-1
6138: PPUSH
6139: CALL_OW 88
// if IsOk ( Donaldson ) then
6143: LD_EXP 3
6147: PPUSH
6148: CALL_OW 302
6152: IFFALSE 6166
// Say ( JMM , D1b-JMM-1 ) ;
6154: LD_EXP 1
6158: PPUSH
6159: LD_STRING D1b-JMM-1
6161: PPUSH
6162: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6166: LD_INT 22
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 26
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 2
6188: PUSH
6189: LD_INT 25
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 4
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 25
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 25
6241: PUSH
6242: LD_INT 8
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: PPUSH
6263: CALL_OW 69
6267: PPUSH
6268: LD_STRING D1b-Sol1-1
6270: PPUSH
6271: LD_STRING 
6273: PPUSH
6274: CALL 12226 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D1b-Don-2
6285: PPUSH
6286: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6290: LD_EXP 1
6294: PPUSH
6295: LD_STRING D1b-JMM-2
6297: PPUSH
6298: CALL_OW 88
// dec := ShowQuery1 ;
6302: LD_ADDR_VAR 0 3
6306: PUSH
6307: CALL 12689 0 0
6311: ST_TO_ADDR
// if dec = 1 then
6312: LD_VAR 0 3
6316: PUSH
6317: LD_INT 1
6319: EQUAL
6320: IFFALSE 6426
// begin Say ( JMM , D2-JMM-1 ) ;
6322: LD_EXP 1
6326: PPUSH
6327: LD_STRING D2-JMM-1
6329: PPUSH
6330: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6334: LD_EXP 15
6338: PPUSH
6339: LD_STRING D2-Pow-1
6341: PPUSH
6342: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6346: LD_EXP 1
6350: PPUSH
6351: LD_STRING D2a-JMM-1
6353: PPUSH
6354: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6358: LD_EXP 15
6362: PPUSH
6363: LD_STRING D2a-Pow-1
6365: PPUSH
6366: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6370: LD_EXP 1
6374: PPUSH
6375: LD_STRING D2a-JMM-2
6377: PPUSH
6378: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6382: LD_EXP 15
6386: PPUSH
6387: LD_STRING D2a-Pow-2
6389: PPUSH
6390: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D2a-JMM-3
6401: PPUSH
6402: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6406: LD_EXP 15
6410: PPUSH
6411: LD_STRING D2a-Pow-3
6413: PPUSH
6414: CALL_OW 94
// secondPass := 2 ;
6418: LD_ADDR_EXP 20
6422: PUSH
6423: LD_INT 2
6425: ST_TO_ADDR
// end ; if dec = 2 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 2
6433: EQUAL
6434: IFFALSE 6528
// begin Say ( JMM , D2-JMM-1 ) ;
6436: LD_EXP 1
6440: PPUSH
6441: LD_STRING D2-JMM-1
6443: PPUSH
6444: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6448: LD_EXP 15
6452: PPUSH
6453: LD_STRING D2-Pow-1
6455: PPUSH
6456: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6460: LD_EXP 1
6464: PPUSH
6465: LD_STRING D2b-JMM-1
6467: PPUSH
6468: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6472: LD_EXP 15
6476: PPUSH
6477: LD_STRING D2b-Pow-1
6479: PPUSH
6480: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6484: LD_EXP 1
6488: PPUSH
6489: LD_STRING D2c-JMM-1
6491: PPUSH
6492: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6496: LD_EXP 15
6500: PPUSH
6501: LD_STRING D2c-Pow-1
6503: PPUSH
6504: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6508: LD_EXP 1
6512: PPUSH
6513: LD_STRING D2c-JMM-2
6515: PPUSH
6516: CALL_OW 88
// secondPass := 2 ;
6520: LD_ADDR_EXP 20
6524: PUSH
6525: LD_INT 2
6527: ST_TO_ADDR
// end ; if dec = 3 then
6528: LD_VAR 0 3
6532: PUSH
6533: LD_INT 3
6535: EQUAL
6536: IFFALSE 6546
// secondPass := 1 ;
6538: LD_ADDR_EXP 20
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// InGameOff ;
6546: CALL_OW 9
// ruAI := 1 ;
6550: LD_ADDR_EXP 34
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6558: LD_INT 1
6560: PPUSH
6561: LD_INT 3
6563: PPUSH
6564: LD_INT 2
6566: PPUSH
6567: LD_INT 1
6569: PPUSH
6570: CALL_OW 80
// SaveForQuickRestart ;
6574: CALL_OW 22
// end ;
6578: PPOPN 3
6580: END
// every 1 1$0 trigger secondPass = 2 do
6581: LD_EXP 20
6585: PUSH
6586: LD_INT 2
6588: EQUAL
6589: IFFALSE 6809
6591: GO 6593
6593: DISABLE
// begin PowellSupport1 ;
6594: CALL 1985 0 0
// DialogueOn ;
6598: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6602: LD_EXP 1
6606: PPUSH
6607: LD_STRING DC1-JMM-1
6609: PPUSH
6610: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6614: LD_EXP 15
6618: PPUSH
6619: LD_STRING DC1-Pow-1
6621: PPUSH
6622: CALL_OW 94
// DialogueOff ;
6626: CALL_OW 7
// wait ( 3 3$0 ) ;
6630: LD_INT 6300
6632: PPUSH
6633: CALL_OW 67
// PowellSupport2 ;
6637: CALL 2466 0 0
// DialogueOn ;
6641: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6645: LD_EXP 1
6649: PPUSH
6650: LD_STRING DC2-JMM-1
6652: PPUSH
6653: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6657: LD_EXP 15
6661: PPUSH
6662: LD_STRING DC2-Pow-1
6664: PPUSH
6665: CALL_OW 94
// DialogueOff ;
6669: CALL_OW 7
// wait ( 3 3$00 ) ;
6673: LD_INT 6300
6675: PPUSH
6676: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6680: LD_INT 35
6682: PPUSH
6683: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 30
6702: PUSH
6703: LD_INT 0
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: PUSH
6734: LD_INT 11
6736: PPUSH
6737: LD_INT 22
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PPUSH
6747: CALL_OW 70
6751: NOT
6752: AND
6753: IFFALSE 6680
// wait ( 0 0$10 ) ;
6755: LD_INT 350
6757: PPUSH
6758: CALL_OW 67
// Legion ;
6762: CALL 6810 0 0
// wait ( 5 5$0 ) ;
6766: LD_INT 10500
6768: PPUSH
6769: CALL_OW 67
// PowellSupport3 ;
6773: CALL 3079 0 0
// DialogueOn ;
6777: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6781: LD_EXP 15
6785: PPUSH
6786: LD_STRING DC3-Pow-1
6788: PPUSH
6789: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6793: LD_EXP 1
6797: PPUSH
6798: LD_STRING DC3-JMM-1
6800: PPUSH
6801: CALL_OW 88
// DialogueOff ;
6805: CALL_OW 7
// end ;
6809: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
6826: PPUSH
6827: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: ST_TO_ADDR
// crates := 0 ;
6891: LD_ADDR_VAR 0 8
6895: PUSH
6896: LD_INT 0
6898: ST_TO_ADDR
// oil := 0 ;
6899: LD_ADDR_VAR 0 9
6903: PUSH
6904: LD_INT 0
6906: ST_TO_ADDR
// siberite := 0 ;
6907: LD_ADDR_VAR 0 10
6911: PUSH
6912: LD_INT 0
6914: ST_TO_ADDR
// payForNeutral := false ;
6915: LD_ADDR_VAR 0 13
6919: PUSH
6920: LD_INT 0
6922: ST_TO_ADDR
// payForHelp := false ;
6923: LD_ADDR_VAR 0 14
6927: PUSH
6928: LD_INT 0
6930: ST_TO_ADDR
// for i in tmp do
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: LD_VAR 0 5
6940: PUSH
6941: FOR_IN
6942: IFFALSE 7033
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6944: LD_ADDR_VAR 0 8
6948: PUSH
6949: LD_VAR 0 8
6953: PUSH
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 274
6963: PPUSH
6964: LD_INT 1
6966: PPUSH
6967: CALL_OW 275
6971: PLUS
6972: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6973: LD_ADDR_VAR 0 9
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 274
6992: PPUSH
6993: LD_INT 2
6995: PPUSH
6996: CALL_OW 275
7000: PLUS
7001: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7002: LD_ADDR_VAR 0 10
7006: PUSH
7007: LD_VAR 0 10
7011: PUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: CALL_OW 274
7021: PPUSH
7022: LD_INT 3
7024: PPUSH
7025: CALL_OW 275
7029: PLUS
7030: ST_TO_ADDR
// end ;
7031: GO 6941
7033: POP
7034: POP
// PrepareKurt ;
7035: CALL 4572 0 0
// if not Kurt then
7039: LD_EXP 17
7043: NOT
7044: IFFALSE 7048
// exit ;
7046: GO 9167
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7048: LD_EXP 18
7052: PPUSH
7053: LD_INT 144
7055: PPUSH
7056: LD_INT 111
7058: PPUSH
7059: CALL_OW 111
// wait ( 0 0$2 ) ;
7063: LD_INT 70
7065: PPUSH
7066: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7070: LD_INT 167
7072: PPUSH
7073: LD_INT 121
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: LD_INT 10
7081: NEG
7082: PPUSH
7083: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7087: LD_EXP 17
7091: PPUSH
7092: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7096: LD_EXP 17
7100: PPUSH
7101: CALL_OW 87
// wait ( 0 0$1 ) ;
7105: LD_INT 35
7107: PPUSH
7108: CALL_OW 67
// DialogueOn ;
7112: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7116: LD_INT 22
7118: PUSH
7119: LD_INT 1
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 26
7128: PUSH
7129: LD_INT 1
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 2
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 25
7161: PUSH
7162: LD_INT 3
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 69
7217: PPUSH
7218: LD_STRING D3-Sol1-1
7220: PPUSH
7221: LD_STRING 
7223: PPUSH
7224: CALL 12226 0 3
// if KurtStatus then
7228: LD_EXP 19
7232: IFFALSE 7332
// begin Say ( Kurt , D3-Kurt-1 ) ;
7234: LD_EXP 17
7238: PPUSH
7239: LD_STRING D3-Kurt-1
7241: PPUSH
7242: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7246: LD_EXP 1
7250: PPUSH
7251: LD_STRING D3-JMM-1
7253: PPUSH
7254: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7258: LD_EXP 17
7262: PPUSH
7263: LD_STRING D3-Kurt-2
7265: PPUSH
7266: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7270: LD_EXP 1
7274: PPUSH
7275: LD_STRING D3-JMM-2
7277: PPUSH
7278: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7282: LD_EXP 17
7286: PPUSH
7287: LD_STRING D3-Kurt-4
7289: PPUSH
7290: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7294: LD_EXP 1
7298: PPUSH
7299: LD_STRING D3-JMM-4
7301: PPUSH
7302: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7306: LD_EXP 17
7310: PPUSH
7311: LD_STRING D3-Kurt-5
7313: PPUSH
7314: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7318: LD_EXP 17
7322: PPUSH
7323: LD_STRING D3-Kurt-5a
7325: PPUSH
7326: CALL_OW 88
// end else
7330: GO 7428
// begin Say ( Kurt , D3-Kurt-1 ) ;
7332: LD_EXP 17
7336: PPUSH
7337: LD_STRING D3-Kurt-1
7339: PPUSH
7340: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7344: LD_EXP 1
7348: PPUSH
7349: LD_STRING D3-JMM-1
7351: PPUSH
7352: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7356: LD_EXP 17
7360: PPUSH
7361: LD_STRING D3-Kurt-3
7363: PPUSH
7364: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7368: LD_EXP 1
7372: PPUSH
7373: LD_STRING D3-JMM-3
7375: PPUSH
7376: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7380: LD_EXP 17
7384: PPUSH
7385: LD_STRING D3-Kurt-4
7387: PPUSH
7388: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7392: LD_EXP 1
7396: PPUSH
7397: LD_STRING D3-JMM-4
7399: PPUSH
7400: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7404: LD_EXP 17
7408: PPUSH
7409: LD_STRING D3-Kurt-5
7411: PPUSH
7412: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7416: LD_EXP 17
7420: PPUSH
7421: LD_STRING D3-Kurt-5b
7423: PPUSH
7424: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7428: LD_VAR 0 8
7432: PUSH
7433: LD_INT 120
7435: PUSH
7436: LD_INT 60
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_EXP 19
7447: PUSH
7448: LD_INT 1
7450: PLUS
7451: ARRAY
7452: GREATEREQUAL
7453: PUSH
7454: LD_VAR 0 10
7458: PUSH
7459: LD_INT 120
7461: PUSH
7462: LD_INT 60
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_EXP 19
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ARRAY
7478: GREATEREQUAL
7479: AND
7480: IFFALSE 7532
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_STRING Q2
7489: PUSH
7490: LD_STRING Q2K
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_EXP 19
7501: PUSH
7502: LD_INT 1
7504: PLUS
7505: ARRAY
7506: PPUSH
7507: LD_INT 1
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 98
7529: ST_TO_ADDR
7530: GO 7576
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_STRING Q2
7539: PUSH
7540: LD_STRING Q2K
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_EXP 19
7551: PUSH
7552: LD_INT 1
7554: PLUS
7555: ARRAY
7556: PPUSH
7557: LD_INT 1
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 98
7575: ST_TO_ADDR
// if dec1 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7618
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7586: LD_EXP 1
7590: PPUSH
7591: LD_STRING D3Ka-JMM-1
7593: PPUSH
7594: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7598: LD_EXP 17
7602: PPUSH
7603: LD_STRING D3Ka-Kurt-1
7605: PPUSH
7606: CALL_OW 88
// warWithLegion = 1 ;
7610: LD_ADDR_EXP 23
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// end ; if dec1 = 2 then
7618: LD_VAR 0 3
7622: PUSH
7623: LD_INT 2
7625: EQUAL
7626: IFFALSE 7710
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7628: LD_EXP 1
7632: PPUSH
7633: LD_STRING D3Kb-JMM-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7640: LD_EXP 17
7644: PPUSH
7645: LD_STRING D3Kb-Kurt-1
7647: PPUSH
7648: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7652: LD_ADDR_VAR 0 11
7656: PUSH
7657: LD_INT 120
7659: PUSH
7660: LD_INT 60
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_EXP 19
7671: PUSH
7672: LD_INT 1
7674: PLUS
7675: ARRAY
7676: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7677: LD_ADDR_VAR 0 12
7681: PUSH
7682: LD_INT 120
7684: PUSH
7685: LD_INT 60
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_EXP 19
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: ARRAY
7701: ST_TO_ADDR
// payForNeutral := true ;
7702: LD_ADDR_VAR 0 13
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// end ; if dec1 = 3 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 3
7717: EQUAL
7718: IFFALSE 7953
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7720: LD_EXP 1
7724: PPUSH
7725: LD_STRING D3Kc1-JMM-1
7727: PPUSH
7728: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7732: LD_EXP 17
7736: PPUSH
7737: LD_STRING D3Kc1-Kurt-1
7739: PPUSH
7740: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7744: LD_EXP 1
7748: PPUSH
7749: LD_STRING D3Kc1-JMM-2
7751: PPUSH
7752: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7756: LD_EXP 17
7760: PPUSH
7761: LD_STRING D3Kc1-Kurt-2
7763: PPUSH
7764: CALL_OW 88
// askSiberite = 1 ;
7768: LD_ADDR_EXP 25
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_STRING Q2b
7783: PPUSH
7784: LD_INT 1
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 98
7802: ST_TO_ADDR
// if dec2 = 1 then
7803: LD_VAR 0 4
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: IFFALSE 7845
// begin Say ( JMM , D4a-JMM-1 ) ;
7813: LD_EXP 1
7817: PPUSH
7818: LD_STRING D4a-JMM-1
7820: PPUSH
7821: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7825: LD_EXP 17
7829: PPUSH
7830: LD_STRING D4b-Kurt-1
7832: PPUSH
7833: CALL_OW 88
// warWithLegion = 1 ;
7837: LD_ADDR_EXP 23
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// end ; if dec2 = 2 then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7887
// begin Say ( JMM , D4b-JMM-1 ) ;
7855: LD_EXP 1
7859: PPUSH
7860: LD_STRING D4b-JMM-1
7862: PPUSH
7863: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7867: LD_EXP 17
7871: PPUSH
7872: LD_STRING D4b-Kurt-1
7874: PPUSH
7875: CALL_OW 88
// warWithLegion = 1 ;
7879: LD_ADDR_EXP 23
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// end ; if dec2 = 3 then
7887: LD_VAR 0 4
7891: PUSH
7892: LD_INT 3
7894: EQUAL
7895: IFFALSE 7953
// begin Say ( JMM , D4c-JMM-1 ) ;
7897: LD_EXP 1
7901: PPUSH
7902: LD_STRING D4c-JMM-1
7904: PPUSH
7905: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7909: LD_EXP 17
7913: PPUSH
7914: LD_STRING D4c-Kurt-1
7916: PPUSH
7917: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7921: LD_EXP 1
7925: PPUSH
7926: LD_STRING D4c-JMM-2
7928: PPUSH
7929: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7933: LD_EXP 17
7937: PPUSH
7938: LD_STRING D4c-Kurt-2
7940: PPUSH
7941: CALL_OW 88
// fakeInfo = 1 ;
7945: LD_ADDR_EXP 24
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 4
7960: EQUAL
7961: IFFALSE 9023
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7963: LD_EXP 1
7967: PPUSH
7968: LD_STRING D3Kd-JMM-1
7970: PPUSH
7971: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
7975: LD_VAR 0 8
7979: PUSH
7980: LD_INT 200
7982: PUSH
7983: LD_INT 120
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_EXP 19
7994: PUSH
7995: LD_INT 1
7997: PLUS
7998: ARRAY
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 10
8005: PUSH
8006: LD_INT 200
8008: PUSH
8009: LD_INT 120
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_EXP 19
8020: PUSH
8021: LD_INT 1
8023: PLUS
8024: ARRAY
8025: GREATEREQUAL
8026: AND
8027: IFFALSE 8079
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8029: LD_ADDR_VAR 0 4
8033: PUSH
8034: LD_STRING Q2a
8036: PUSH
8037: LD_STRING Q2aK
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_EXP 19
8048: PUSH
8049: LD_INT 1
8051: PLUS
8052: ARRAY
8053: PPUSH
8054: LD_INT 1
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: LD_INT 3
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 98
8076: ST_TO_ADDR
8077: GO 8243
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8079: LD_VAR 0 8
8083: PUSH
8084: LD_INT 120
8086: PUSH
8087: LD_INT 60
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_EXP 19
8098: PUSH
8099: LD_INT 1
8101: PLUS
8102: ARRAY
8103: GREATEREQUAL
8104: PUSH
8105: LD_VAR 0 10
8109: PUSH
8110: LD_INT 120
8112: PUSH
8113: LD_INT 60
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_EXP 19
8124: PUSH
8125: LD_INT 1
8127: PLUS
8128: ARRAY
8129: GREATEREQUAL
8130: AND
8131: IFFALSE 8179
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_STRING Q2a
8140: PUSH
8141: LD_STRING Q2aK
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_EXP 19
8152: PUSH
8153: LD_INT 1
8155: PLUS
8156: ARRAY
8157: PPUSH
8158: LD_INT 1
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: LD_INT 4
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 98
8176: ST_TO_ADDR
8177: GO 8243
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8179: LD_STRING Q2d
8181: PUSH
8182: LD_STRING Q2dK
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_EXP 19
8193: PUSH
8194: LD_INT 1
8196: PLUS
8197: ARRAY
8198: PPUSH
8199: CALL_OW 97
// dec2 := 0 ;
8203: LD_ADDR_VAR 0 4
8207: PUSH
8208: LD_INT 0
8210: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8211: LD_EXP 1
8215: PPUSH
8216: LD_STRING D3Kc1-JMM-1
8218: PPUSH
8219: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8223: LD_EXP 17
8227: PPUSH
8228: LD_STRING D3Kc2-Kurt-1
8230: PPUSH
8231: CALL_OW 88
// warWithLegion := 1 ;
8235: LD_ADDR_EXP 23
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// end ; if dec2 = 1 then
8243: LD_VAR 0 4
8247: PUSH
8248: LD_INT 1
8250: EQUAL
8251: IFFALSE 8285
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8253: LD_EXP 1
8257: PPUSH
8258: LD_STRING D5Ka-JMM-1
8260: PPUSH
8261: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8265: LD_EXP 17
8269: PPUSH
8270: LD_STRING D5Ka-Kurt-1
8272: PPUSH
8273: CALL_OW 88
// warWithLegion = 1 ;
8277: LD_ADDR_EXP 23
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// end ; if dec2 = 2 then
8285: LD_VAR 0 4
8289: PUSH
8290: LD_INT 2
8292: EQUAL
8293: IFFALSE 8377
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8295: LD_EXP 1
8299: PPUSH
8300: LD_STRING D3Kb-JMM-1
8302: PPUSH
8303: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8307: LD_EXP 17
8311: PPUSH
8312: LD_STRING D3Kb-Kurt-1
8314: PPUSH
8315: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8319: LD_ADDR_VAR 0 11
8323: PUSH
8324: LD_INT 120
8326: PUSH
8327: LD_INT 60
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_EXP 19
8338: PUSH
8339: LD_INT 1
8341: PLUS
8342: ARRAY
8343: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8344: LD_ADDR_VAR 0 12
8348: PUSH
8349: LD_INT 120
8351: PUSH
8352: LD_INT 60
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_EXP 19
8363: PUSH
8364: LD_INT 1
8366: PLUS
8367: ARRAY
8368: ST_TO_ADDR
// payForNeutral := true ;
8369: LD_ADDR_VAR 0 13
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// end ; if dec2 = 3 then
8377: LD_VAR 0 4
8381: PUSH
8382: LD_INT 3
8384: EQUAL
8385: IFFALSE 8469
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8387: LD_EXP 1
8391: PPUSH
8392: LD_STRING D3Ke-JMM-1
8394: PPUSH
8395: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8399: LD_EXP 17
8403: PPUSH
8404: LD_STRING D3Ke-Kurt-1
8406: PPUSH
8407: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8411: LD_ADDR_VAR 0 11
8415: PUSH
8416: LD_INT 200
8418: PUSH
8419: LD_INT 120
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_EXP 19
8430: PUSH
8431: LD_INT 1
8433: PLUS
8434: ARRAY
8435: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8436: LD_ADDR_VAR 0 12
8440: PUSH
8441: LD_INT 200
8443: PUSH
8444: LD_INT 120
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_EXP 19
8455: PUSH
8456: LD_INT 1
8458: PLUS
8459: ARRAY
8460: ST_TO_ADDR
// payForHelp := true ;
8461: LD_ADDR_VAR 0 14
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// end ; if dec2 = 4 then
8469: LD_VAR 0 4
8473: PUSH
8474: LD_INT 4
8476: EQUAL
8477: IFFALSE 8712
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8479: LD_EXP 1
8483: PPUSH
8484: LD_STRING D3Kc1-JMM-1
8486: PPUSH
8487: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8491: LD_EXP 17
8495: PPUSH
8496: LD_STRING D3Kc1-Kurt-1
8498: PPUSH
8499: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8503: LD_EXP 1
8507: PPUSH
8508: LD_STRING D3Kc1-JMM-2
8510: PPUSH
8511: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8515: LD_EXP 17
8519: PPUSH
8520: LD_STRING D3Kc1-Kurt-2
8522: PPUSH
8523: CALL_OW 88
// askSiberite = 1 ;
8527: LD_ADDR_EXP 25
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8535: LD_ADDR_VAR 0 4
8539: PUSH
8540: LD_STRING Q2b
8542: PPUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 98
8561: ST_TO_ADDR
// if dec2 = 1 then
8562: LD_VAR 0 4
8566: PUSH
8567: LD_INT 1
8569: EQUAL
8570: IFFALSE 8604
// begin Say ( JMM , D4a-JMM-1 ) ;
8572: LD_EXP 1
8576: PPUSH
8577: LD_STRING D4a-JMM-1
8579: PPUSH
8580: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING D4b-Kurt-1
8591: PPUSH
8592: CALL_OW 88
// warWithLegion = 1 ;
8596: LD_ADDR_EXP 23
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// end ; if dec2 = 2 then
8604: LD_VAR 0 4
8608: PUSH
8609: LD_INT 2
8611: EQUAL
8612: IFFALSE 8646
// begin Say ( JMM , D4b-JMM-1 ) ;
8614: LD_EXP 1
8618: PPUSH
8619: LD_STRING D4b-JMM-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D4b-Kurt-1
8633: PPUSH
8634: CALL_OW 88
// warWithLegion = 1 ;
8638: LD_ADDR_EXP 23
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// end ; if dec2 = 3 then
8646: LD_VAR 0 4
8650: PUSH
8651: LD_INT 3
8653: EQUAL
8654: IFFALSE 8712
// begin Say ( JMM , D4c-JMM-1 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D4c-JMM-1
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D4c-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8680: LD_EXP 1
8684: PPUSH
8685: LD_STRING D4c-JMM-2
8687: PPUSH
8688: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8692: LD_EXP 17
8696: PPUSH
8697: LD_STRING D4c-Kurt-2
8699: PPUSH
8700: CALL_OW 88
// fakeInfo = 1 ;
8704: LD_ADDR_EXP 24
8708: PUSH
8709: LD_INT 1
8711: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8712: LD_VAR 0 13
8716: PUSH
8717: LD_VAR 0 14
8721: OR
8722: IFFALSE 9023
// begin for i in tmp do
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 5
8733: PUSH
8734: FOR_IN
8735: IFFALSE 9021
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8737: LD_ADDR_VAR 0 6
8741: PUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: CALL_OW 274
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 275
8759: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8760: LD_ADDR_VAR 0 7
8764: PUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 274
8774: PPUSH
8775: LD_INT 3
8777: PPUSH
8778: CALL_OW 275
8782: ST_TO_ADDR
// if cr then
8783: LD_VAR 0 11
8787: IFFALSE 8901
// begin if tmp2 and tmp2 < cr then
8789: LD_VAR 0 6
8793: PUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_VAR 0 11
8803: LESS
8804: AND
8805: IFFALSE 8853
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 274
8816: PPUSH
8817: LD_INT 1
8819: PPUSH
8820: LD_VAR 0 11
8824: PUSH
8825: LD_VAR 0 6
8829: MINUS
8830: PPUSH
8831: CALL_OW 277
// cr := cr - tmp2 ;
8835: LD_ADDR_VAR 0 11
8839: PUSH
8840: LD_VAR 0 11
8844: PUSH
8845: LD_VAR 0 6
8849: MINUS
8850: ST_TO_ADDR
// end else
8851: GO 8901
// if tmp2 > cr then
8853: LD_VAR 0 6
8857: PUSH
8858: LD_VAR 0 11
8862: GREATER
8863: IFFALSE 8901
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 274
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: LD_VAR 0 6
8882: PUSH
8883: LD_VAR 0 11
8887: MINUS
8888: PPUSH
8889: CALL_OW 277
// cr := 0 ;
8893: LD_ADDR_VAR 0 11
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// end ; end ; if sb then
8901: LD_VAR 0 12
8905: IFFALSE 9019
// begin if tmp3 and tmp3 < sb then
8907: LD_VAR 0 7
8911: PUSH
8912: LD_VAR 0 7
8916: PUSH
8917: LD_VAR 0 12
8921: LESS
8922: AND
8923: IFFALSE 8971
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8925: LD_VAR 0 2
8929: PPUSH
8930: CALL_OW 274
8934: PPUSH
8935: LD_INT 3
8937: PPUSH
8938: LD_VAR 0 12
8942: PUSH
8943: LD_VAR 0 7
8947: MINUS
8948: PPUSH
8949: CALL_OW 277
// sb := sb - tmp3 ;
8953: LD_ADDR_VAR 0 12
8957: PUSH
8958: LD_VAR 0 12
8962: PUSH
8963: LD_VAR 0 7
8967: MINUS
8968: ST_TO_ADDR
// end else
8969: GO 9019
// if tmp3 > sb then
8971: LD_VAR 0 7
8975: PUSH
8976: LD_VAR 0 12
8980: GREATER
8981: IFFALSE 9019
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 274
8992: PPUSH
8993: LD_INT 3
8995: PPUSH
8996: LD_VAR 0 7
9000: PUSH
9001: LD_VAR 0 12
9005: MINUS
9006: PPUSH
9007: CALL_OW 277
// sb := 0 ;
9011: LD_ADDR_VAR 0 12
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// end ; end ; end ;
9019: GO 8734
9021: POP
9022: POP
// end ; end ; DialogueOff ;
9023: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9027: LD_INT 167
9029: PPUSH
9030: LD_INT 121
9032: PPUSH
9033: LD_INT 1
9035: PPUSH
9036: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9040: LD_EXP 17
9044: PPUSH
9045: LD_EXP 18
9049: PPUSH
9050: CALL_OW 120
// wait ( 0 0$1 ) ;
9054: LD_INT 35
9056: PPUSH
9057: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9061: LD_EXP 18
9065: PPUSH
9066: LD_INT 4
9068: PPUSH
9069: CALL_OW 113
// wait ( 0 0$3 ) ;
9073: LD_INT 105
9075: PPUSH
9076: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9080: LD_EXP 17
9084: PPUSH
9085: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9089: LD_EXP 18
9093: PPUSH
9094: CALL_OW 64
// wait ( 0 0$3 ) ;
9098: LD_INT 105
9100: PPUSH
9101: CALL_OW 67
// if payForHelp then
9105: LD_VAR 0 14
9109: IFFALSE 9167
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9111: LD_INT 36
9113: PPUSH
9114: LD_INT 57
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9124: LD_INT 51
9126: PPUSH
9127: LD_INT 63
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9137: LD_INT 93
9139: PPUSH
9140: LD_INT 65
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9150: LD_INT 42
9152: PPUSH
9153: LD_INT 12
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 244
// PrepareLegionForPlayer ;
9163: CALL 4775 0 0
// end ; end ;
9167: LD_VAR 0 1
9171: RET
// every 0 0$10 trigger warWithLegion = 1 do
9172: LD_EXP 23
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: IFFALSE 9196
9182: GO 9184
9184: DISABLE
// begin wait ( 0 0$30 ) ;
9185: LD_INT 1050
9187: PPUSH
9188: CALL_OW 67
// PrepareAttackLegion ;
9192: CALL 5416 0 0
// end ;
9196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9197: LD_INT 120
9199: PUSH
9200: LD_INT 17
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: EMPTY
9211: LIST
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PPUSH
9217: CALL_OW 69
9221: IFFALSE 9366
9223: GO 9225
9225: DISABLE
9226: LD_INT 0
9228: PPUSH
// begin enable ;
9229: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_INT 120
9237: PUSH
9238: LD_INT 17
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 52
9247: PUSH
9248: EMPTY
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PPUSH
9255: CALL_OW 69
9259: PUSH
9260: FOR_IN
9261: IFFALSE 9364
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL 79994 0 1
9272: PUSH
9273: LD_INT 4
9275: ARRAY
9276: PUSH
9277: LD_INT 0
9279: EQUAL
9280: PUSH
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 255
9290: PUSH
9291: LD_INT 1
9293: EQUAL
9294: AND
9295: IFFALSE 9309
// SetSide ( i , 4 ) ;
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_INT 4
9304: PPUSH
9305: CALL_OW 235
// if GetSide ( i ) = 4 then
9309: LD_VAR 0 1
9313: PPUSH
9314: CALL_OW 255
9318: PUSH
9319: LD_INT 4
9321: EQUAL
9322: IFFALSE 9362
// if not IsInArea ( i , PlayerSpawn ) then
9324: LD_VAR 0 1
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: CALL_OW 308
9336: NOT
9337: IFFALSE 9353
// ComMoveToArea ( i , PlayerSpawn ) else
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 113
9351: GO 9362
// RemoveUnit ( i ) ;
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 64
// end ;
9362: GO 9260
9364: POP
9365: POP
// end ;
9366: PPOPN 1
9368: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9369: LD_EXP 20
9373: PUSH
9374: LD_INT 1
9376: EQUAL
9377: PUSH
9378: LD_INT 12
9380: PPUSH
9381: LD_INT 22
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 101
9393: PUSH
9394: LD_INT 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 21
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 70
9420: AND
9421: IFFALSE 9970
9423: GO 9425
9425: DISABLE
9426: LD_INT 0
9428: PPUSH
9429: PPUSH
9430: PPUSH
// begin DialogueOn ;
9431: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9444: LD_INT 22
9446: PUSH
9447: LD_INT 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 26
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 25
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 25
9519: PUSH
9520: LD_INT 8
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: PPUSH
9541: CALL_OW 69
9545: PPUSH
9546: LD_STRING DT1-Sol1-1
9548: PPUSH
9549: LD_STRING DT1-FSol1-1
9551: PPUSH
9552: CALL 12226 0 3
// dec := ShowQuery2 ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: CALL 12710 0 0
9565: ST_TO_ADDR
// if dec = 1 then
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 1
9573: EQUAL
9574: IFFALSE 9680
// begin Say ( JMM , D2-JMM-1 ) ;
9576: LD_EXP 1
9580: PPUSH
9581: LD_STRING D2-JMM-1
9583: PPUSH
9584: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9588: LD_EXP 15
9592: PPUSH
9593: LD_STRING D2-Pow-1
9595: PPUSH
9596: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9600: LD_EXP 1
9604: PPUSH
9605: LD_STRING D2a-JMM-1
9607: PPUSH
9608: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9612: LD_EXP 15
9616: PPUSH
9617: LD_STRING D2a-Pow-1
9619: PPUSH
9620: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9624: LD_EXP 1
9628: PPUSH
9629: LD_STRING D2a-JMM-2
9631: PPUSH
9632: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9636: LD_EXP 15
9640: PPUSH
9641: LD_STRING D2a-Pow-2
9643: PPUSH
9644: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9648: LD_EXP 1
9652: PPUSH
9653: LD_STRING D2a-JMM-3
9655: PPUSH
9656: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9660: LD_EXP 15
9664: PPUSH
9665: LD_STRING D2a-Pow-3
9667: PPUSH
9668: CALL_OW 94
// secondPass := 2 ;
9672: LD_ADDR_EXP 20
9676: PUSH
9677: LD_INT 2
9679: ST_TO_ADDR
// end ; if dec = 2 then
9680: LD_VAR 0 3
9684: PUSH
9685: LD_INT 2
9687: EQUAL
9688: IFFALSE 9782
// begin Say ( JMM , D2-JMM-1 ) ;
9690: LD_EXP 1
9694: PPUSH
9695: LD_STRING D2-JMM-1
9697: PPUSH
9698: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9702: LD_EXP 15
9706: PPUSH
9707: LD_STRING D2-Pow-1
9709: PPUSH
9710: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9714: LD_EXP 1
9718: PPUSH
9719: LD_STRING D2b-JMM-1
9721: PPUSH
9722: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9726: LD_EXP 15
9730: PPUSH
9731: LD_STRING D2b-Pow-1
9733: PPUSH
9734: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9738: LD_EXP 1
9742: PPUSH
9743: LD_STRING D2c-JMM-1
9745: PPUSH
9746: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9750: LD_EXP 15
9754: PPUSH
9755: LD_STRING D2c-Pow-1
9757: PPUSH
9758: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9762: LD_EXP 1
9766: PPUSH
9767: LD_STRING D2c-JMM-2
9769: PPUSH
9770: CALL_OW 88
// secondPass := 2 ;
9774: LD_ADDR_EXP 20
9778: PUSH
9779: LD_INT 2
9781: ST_TO_ADDR
// end ; DialogueOff ;
9782: CALL_OW 7
// if secondPass = 2 then
9786: LD_EXP 20
9790: PUSH
9791: LD_INT 2
9793: EQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 9970
// Query ( HelpRequest ) ;
9798: LD_STRING HelpRequest
9800: PPUSH
9801: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9805: LD_INT 27
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9815: LD_INT 35
9817: PPUSH
9818: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_INT 27
9829: PPUSH
9830: CALL_OW 308
9834: IFFALSE 9815
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9836: LD_INT 27
9838: PPUSH
9839: LD_INT 0
9841: PPUSH
9842: CALL_OW 424
// DialogueOn ;
9846: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9850: LD_EXP 1
9854: PPUSH
9855: LD_STRING D2-JMM-1
9857: PPUSH
9858: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9862: LD_EXP 15
9866: PPUSH
9867: LD_STRING D2-Pow-1
9869: PPUSH
9870: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9874: LD_EXP 1
9878: PPUSH
9879: LD_STRING D2b-JMM-1
9881: PPUSH
9882: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9886: LD_EXP 15
9890: PPUSH
9891: LD_STRING D2a-Pow-2
9893: PPUSH
9894: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9898: LD_EXP 1
9902: PPUSH
9903: LD_STRING D2a-JMM-3
9905: PPUSH
9906: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9910: LD_EXP 15
9914: PPUSH
9915: LD_STRING D2a-Pow-3
9917: PPUSH
9918: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9922: LD_EXP 1
9926: PPUSH
9927: LD_STRING D2c-JMM-1
9929: PPUSH
9930: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9934: LD_EXP 15
9938: PPUSH
9939: LD_STRING D2c-Pow-1
9941: PPUSH
9942: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9946: LD_EXP 1
9950: PPUSH
9951: LD_STRING D2c-JMM-2
9953: PPUSH
9954: CALL_OW 88
// DialogueOff ;
9958: CALL_OW 7
// secondPass := 2 ;
9962: LD_ADDR_EXP 20
9966: PUSH
9967: LD_INT 2
9969: ST_TO_ADDR
// end ;
9970: PPOPN 3
9972: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9973: LD_EXP 21
9977: PUSH
9978: LD_INT 1
9980: EQUAL
9981: PUSH
9982: LD_INT 11
9984: PPUSH
9985: LD_INT 22
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 70
9999: AND
10000: IFFALSE 10481
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10008: LD_ADDR_VAR 0 1
10012: PUSH
10013: LD_INT 11
10015: PPUSH
10016: LD_INT 22
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 70
10030: ST_TO_ADDR
// if not vehicles then
10031: LD_VAR 0 1
10035: NOT
10036: IFFALSE 10040
// exit ;
10038: GO 10481
// repeat wait ( 0 0$1 ) ;
10040: LD_INT 35
10042: PPUSH
10043: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10047: LD_VAR 0 1
10051: PPUSH
10052: LD_INT 101
10054: PUSH
10055: LD_INT 1
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 72
10066: IFFALSE 10040
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10068: LD_VAR 0 1
10072: PPUSH
10073: LD_INT 101
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 72
10087: PUSH
10088: LD_INT 1
10090: ARRAY
10091: PPUSH
10092: CALL_OW 87
// DialogueOn ;
10096: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10100: LD_INT 22
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 26
10112: PUSH
10113: LD_INT 1
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 1
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 25
10155: PUSH
10156: LD_INT 3
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 25
10165: PUSH
10166: LD_INT 4
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 25
10185: PUSH
10186: LD_INT 8
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 69
10212: PPUSH
10213: LD_STRING DT1-Sol1-1
10215: PPUSH
10216: LD_STRING DT1-FSol1-1
10218: PPUSH
10219: CALL 12226 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10223: LD_EXP 1
10227: PPUSH
10228: LD_STRING DT1-JMM-1
10230: PPUSH
10231: CALL_OW 88
// DialogueOff ;
10235: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10239: LD_INT 175
10241: PPUSH
10242: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10246: LD_INT 11
10248: PPUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 50
10261: PUSH
10262: EMPTY
10263: LIST
10264: PUSH
10265: LD_INT 2
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 70
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: PUSH
10307: LD_EXP 22
10311: PUSH
10312: LD_INT 2
10314: GREATER
10315: AND
10316: IFFALSE 10239
// DialogueOn ;
10318: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10322: LD_EXP 1
10326: PPUSH
10327: LD_STRING DT1a-JMM-1
10329: PPUSH
10330: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10334: LD_INT 22
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 26
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 23
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 25
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 25
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 3
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 25
10409: PUSH
10410: LD_INT 5
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 25
10419: PUSH
10420: LD_INT 8
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: PPUSH
10447: LD_STRING DT1a-Sol1-1
10449: PPUSH
10450: LD_STRING DT1a-FSol1-1
10452: PPUSH
10453: CALL 12226 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10457: LD_EXP 1
10461: PPUSH
10462: LD_STRING DT1a-JMM-2
10464: PPUSH
10465: CALL_OW 88
// DialogueOff ;
10469: CALL_OW 7
// vehicleTeleported := 2 ;
10473: LD_ADDR_EXP 21
10477: PUSH
10478: LD_INT 2
10480: ST_TO_ADDR
// end ;
10481: PPOPN 1
10483: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10484: LD_EXP 21
10488: PUSH
10489: LD_INT 3
10491: EQUAL
10492: PUSH
10493: LD_INT 11
10495: PPUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 101
10508: PUSH
10509: LD_INT 1
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 70
10524: AND
10525: IFFALSE 10810
10527: GO 10529
10529: DISABLE
10530: LD_INT 0
10532: PPUSH
10533: PPUSH
10534: PPUSH
// begin wait ( 0 0$0.3 ) ;
10535: LD_INT 10
10537: PPUSH
10538: CALL_OW 67
// DialogueOn ;
10542: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10546: LD_ADDR_VAR 0 3
10550: PUSH
10551: LD_INT 22
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 23
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 26
10573: PUSH
10574: LD_INT 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 25
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 4
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 5
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 8
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 69
10663: PPUSH
10664: LD_STRING DT2-Sol1-1
10666: PPUSH
10667: LD_STRING DT2-FSol1-1
10669: PPUSH
10670: CALL 12226 0 3
10674: ST_TO_ADDR
// DialogueOff ;
10675: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10679: LD_INT 175
10681: PPUSH
10682: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10686: LD_INT 11
10688: PPUSH
10689: LD_INT 22
10691: PUSH
10692: LD_INT 3
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 50
10701: PUSH
10702: EMPTY
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PPUSH
10709: CALL_OW 70
10713: NOT
10714: IFFALSE 10679
// wait ( 0 0$2 ) ;
10716: LD_INT 70
10718: PPUSH
10719: CALL_OW 67
// vehicleTeleported := 4 ;
10723: LD_ADDR_EXP 21
10727: PUSH
10728: LD_INT 4
10730: ST_TO_ADDR
// DialogueOn ;
10731: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10735: LD_EXP 1
10739: PPUSH
10740: LD_STRING DT2a-JMM-1
10742: PPUSH
10743: CALL_OW 88
// if speaker then
10747: LD_VAR 0 3
10751: IFFALSE 10794
// if GetSex ( speaker ) = 1 then
10753: LD_VAR 0 3
10757: PPUSH
10758: CALL_OW 258
10762: PUSH
10763: LD_INT 1
10765: EQUAL
10766: IFFALSE 10782
// Say ( speaker , DT2a-Sol1-1 ) else
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_STRING DT2a-Sol1-1
10775: PPUSH
10776: CALL_OW 88
10780: GO 10794
// Say ( speaker , DT2a-FSol1-1 ) ;
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_STRING DT2a-FSol1-1
10789: PPUSH
10790: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10794: LD_EXP 3
10798: PPUSH
10799: LD_STRING DT2a-Don-1
10801: PPUSH
10802: CALL_OW 88
// DialogueOff ;
10806: CALL_OW 7
// end ;
10810: PPOPN 3
10812: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10813: LD_INT 1
10815: PPUSH
10816: LD_INT 45
10818: PPUSH
10819: LD_INT 74
10821: PPUSH
10822: CALL_OW 293
10826: IFFALSE 11001
10828: GO 10830
10830: DISABLE
// begin DialogueOn ;
10831: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10835: LD_INT 36
10837: PPUSH
10838: LD_INT 55
10840: PPUSH
10841: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10845: LD_INT 22
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 23
10857: PUSH
10858: LD_INT 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 26
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 25
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 25
10910: PUSH
10911: LD_INT 4
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 5
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 8
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: PPUSH
10958: LD_STRING D5-Sol1-1
10960: PPUSH
10961: LD_STRING D5-FSol1-
10963: PPUSH
10964: CALL 12226 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10968: LD_EXP 23
10972: PUSH
10973: LD_EXP 3
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 10997
// Say ( Donaldson , D5-Don-1 ) ;
10985: LD_EXP 3
10989: PPUSH
10990: LD_STRING D5-Don-1
10992: PPUSH
10993: CALL_OW 88
// DialogueOff ;
10997: CALL_OW 7
// end ;
11001: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11002: LD_INT 1
11004: PPUSH
11005: LD_INT 10
11007: PPUSH
11008: CALL_OW 292
11012: PUSH
11013: LD_INT 1
11015: PPUSH
11016: LD_INT 137
11018: PPUSH
11019: CALL_OW 292
11023: OR
11024: IFFALSE 11179
11026: GO 11028
11028: DISABLE
// begin DialogueOn ;
11029: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11033: LD_INT 22
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 23
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 26
11055: PUSH
11056: LD_INT 1
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 25
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 25
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 25
11088: PUSH
11089: LD_INT 3
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 5
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PPUSH
11141: CALL_OW 69
11145: PPUSH
11146: LD_STRING DT3-Sol1-1
11148: PPUSH
11149: LD_STRING DT3-FSol1-1
11151: PPUSH
11152: CALL 12226 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11156: LD_EXP 1
11160: PPUSH
11161: LD_STRING DT3-JMM-1
11163: PPUSH
11164: CALL_OW 88
// DialogueOff ;
11168: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11172: LD_STRING M2
11174: PPUSH
11175: CALL_OW 337
// end ;
11179: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11180: LD_EXP 35
11184: PUSH
11185: LD_INT 0
11187: EQUAL
11188: PUSH
11189: LD_INT 10
11191: PPUSH
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 70
11206: PUSH
11207: LD_INT 10
11209: PPUSH
11210: LD_INT 22
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 24
11225: PUSH
11226: LD_INT 800
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 21
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 58
11249: PUSH
11250: EMPTY
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 70
11263: OR
11264: AND
11265: IFFALSE 11278
11267: GO 11269
11269: DISABLE
// ruEscape := 1 ;
11270: LD_ADDR_EXP 35
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
11278: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11279: LD_INT 3
11281: PPUSH
11282: CALL_OW 303
11286: PUSH
11287: LD_INT 4
11289: PPUSH
11290: CALL_OW 303
11294: OR
11295: PUSH
11296: LD_EXP 35
11300: PUSH
11301: LD_INT 1
11303: EQUAL
11304: OR
11305: IFFALSE 11894
11307: GO 11309
11309: DISABLE
11310: LD_INT 0
11312: PPUSH
11313: PPUSH
11314: PPUSH
// begin ruAI := 0 ;
11315: LD_ADDR_EXP 34
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11323: LD_EXP 27
11327: PPUSH
11328: CALL_OW 122
// wait ( 0 0$1 ) ;
11332: LD_INT 35
11334: PPUSH
11335: CALL_OW 67
// DialogueOn ;
11339: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11343: LD_INT 75
11345: PPUSH
11346: LD_INT 21
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: LD_INT 12
11354: PPUSH
11355: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11359: LD_INT 75
11361: PPUSH
11362: LD_INT 21
11364: PPUSH
11365: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11369: LD_INT 10
11371: PPUSH
11372: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11376: LD_EXP 1
11380: PPUSH
11381: LD_STRING D6-JMM-1
11383: PPUSH
11384: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11388: LD_INT 75
11390: PPUSH
11391: LD_INT 21
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 331
// DialogueOff ;
11401: CALL_OW 7
// for i in RuScientists do
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: LD_EXP 27
11414: PUSH
11415: FOR_IN
11416: IFFALSE 11452
// begin SetSide ( i , 6 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 6
11425: PPUSH
11426: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11430: LD_VAR 0 1
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: LD_INT 3
11440: PPUSH
11441: CALL_OW 12
11445: PPUSH
11446: CALL_OW 109
// end ;
11450: GO 11415
11452: POP
11453: POP
// repeat wait ( 0 0$1 ) ;
11454: LD_INT 35
11456: PPUSH
11457: CALL_OW 67
// for i in RuScientists do
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: LD_EXP 27
11470: PUSH
11471: FOR_IN
11472: IFFALSE 11885
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_INT 3
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 91
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: LD_INT 10
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 21
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 58
11517: PUSH
11518: EMPTY
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL_OW 310
11546: NOT
11547: AND
11548: IFFALSE 11576
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11550: LD_VAR 0 1
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 74
11569: PPUSH
11570: CALL_OW 120
// continue ;
11574: GO 11471
// end ; if IsInUnit ( i ) then
11576: LD_VAR 0 1
11580: PPUSH
11581: CALL_OW 310
11585: IFFALSE 11604
// unit := IsInUnit ( i ) else
11587: LD_ADDR_VAR 0 2
11591: PUSH
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 310
11601: ST_TO_ADDR
11602: GO 11614
// unit := i ;
11604: LD_ADDR_VAR 0 2
11608: PUSH
11609: LD_VAR 0 1
11613: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 110
11623: PUSH
11624: LD_INT 1
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11691
11632: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11633: LD_VAR 0 2
11637: PPUSH
11638: LD_INT 137
11640: PPUSH
11641: CALL_OW 296
11645: PUSH
11646: LD_INT 13
11648: LESS
11649: PUSH
11650: LD_INT 137
11652: PPUSH
11653: CALL_OW 302
11657: AND
11658: IFFALSE 11674
// ComEnterUnit ( unit , rutp ) else
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_INT 137
11667: PPUSH
11668: CALL_OW 120
11672: GO 11689
// ComMoveXY ( unit , 16 , 28 ) ;
11674: LD_VAR 0 2
11678: PPUSH
11679: LD_INT 16
11681: PPUSH
11682: LD_INT 28
11684: PPUSH
11685: CALL_OW 111
// end ; 2 :
11689: GO 11883
11691: LD_INT 2
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11717
11699: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11700: LD_VAR 0 2
11704: PPUSH
11705: LD_INT 97
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 111
11715: GO 11883
11717: LD_INT 3
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11784
11725: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_INT 137
11733: PPUSH
11734: CALL_OW 296
11738: PUSH
11739: LD_INT 13
11741: LESS
11742: PUSH
11743: LD_INT 137
11745: PPUSH
11746: CALL_OW 302
11750: AND
11751: IFFALSE 11767
// ComEnterUnit ( unit , rutp ) else
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_INT 137
11760: PPUSH
11761: CALL_OW 120
11765: GO 11782
// ComMoveXY ( unit , 128 , 155 ) ;
11767: LD_VAR 0 2
11771: PPUSH
11772: LD_INT 128
11774: PPUSH
11775: LD_INT 155
11777: PPUSH
11778: CALL_OW 111
// end ; 11 :
11782: GO 11883
11784: LD_INT 11
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11810
11792: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: LD_INT 28
11803: PPUSH
11804: CALL_OW 111
11808: GO 11883
11810: LD_INT 13
11812: DOUBLE
11813: EQUAL
11814: IFTRUE 11818
11816: GO 11856
11818: POP
// begin if IsOk ( ruteleprt ) then
11819: LD_INT 10
11821: PPUSH
11822: CALL_OW 302
11826: IFFALSE 11842
// ComEnterUnit ( unit , ruteleprt ) else
11828: LD_VAR 0 2
11832: PPUSH
11833: LD_INT 10
11835: PPUSH
11836: CALL_OW 120
11840: GO 11854
// SetTag ( unit , 23 ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 23
11849: PPUSH
11850: CALL_OW 109
// end ; 23 :
11854: GO 11883
11856: LD_INT 23
11858: DOUBLE
11859: EQUAL
11860: IFTRUE 11864
11862: GO 11882
11864: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 128
11872: PPUSH
11873: LD_INT 155
11875: PPUSH
11876: CALL_OW 111
11880: GO 11883
11882: POP
// end ;
11883: GO 11471
11885: POP
11886: POP
// until not RuScientists ;
11887: LD_EXP 27
11891: NOT
11892: IFFALSE 11454
// end ;
11894: PPOPN 3
11896: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11897: LD_EXP 34
11901: PUSH
11902: LD_INT 0
11904: EQUAL
11905: PUSH
11906: LD_EXP 27
11910: AND
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 6
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: LD_INT 95
11927: PUSH
11928: LD_INT 13
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 95
11937: PUSH
11938: LD_INT 14
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 25
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PPUSH
11965: CALL_OW 69
11969: AND
11970: IFFALSE 12183
11972: GO 11974
11974: DISABLE
11975: LD_INT 0
11977: PPUSH
11978: PPUSH
11979: PPUSH
11980: PPUSH
// begin enable ;
11981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 6
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 2
11999: PUSH
12000: LD_INT 95
12002: PUSH
12003: LD_INT 13
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 95
12012: PUSH
12013: LD_INT 14
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 95
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 69
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12181
// begin if i in RuScientists then
12048: LD_VAR 0 1
12052: PUSH
12053: LD_EXP 27
12057: IN
12058: IFFALSE 12087
// begin RuScientists = RuScientists diff i ;
12060: LD_ADDR_EXP 27
12064: PUSH
12065: LD_EXP 27
12069: PUSH
12070: LD_VAR 0 1
12074: DIFF
12075: ST_TO_ADDR
// RemoveUnit ( i ) ;
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 64
// continue ;
12085: GO 12045
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12087: LD_VAR 0 1
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_INT 6
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 1
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 69
12120: IN
12121: IFFALSE 12179
// begin if IsDrivenBy ( i ) in RuScientists then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 311
12132: PUSH
12133: LD_EXP 27
12137: IN
12138: IFFALSE 12156
// RuScientists = RuScientists diff i ;
12140: LD_ADDR_EXP 27
12144: PUSH
12145: LD_EXP 27
12149: PUSH
12150: LD_VAR 0 1
12154: DIFF
12155: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12156: LD_VAR 0 1
12160: PPUSH
12161: CALL_OW 311
12165: PPUSH
12166: CALL_OW 64
// RemoveUnit ( i ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 64
// end ; end ;
12179: GO 12045
12181: POP
12182: POP
// end ; end_of_file
12183: PPOPN 4
12185: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
// for i in charactersList do
12190: LD_ADDR_VAR 0 4
12194: PUSH
12195: LD_VAR 0 1
12199: PUSH
12200: FOR_IN
12201: IFFALSE 12219
// SaveCharacters ( i , ident ) ;
12203: LD_VAR 0 4
12207: PPUSH
12208: LD_VAR 0 2
12212: PPUSH
12213: CALL_OW 38
12217: GO 12200
12219: POP
12220: POP
// end ;
12221: LD_VAR 0 3
12225: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12226: LD_INT 0
12228: PPUSH
12229: PPUSH
12230: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_EXP 1
12245: PUSH
12246: LD_EXP 7
12250: PUSH
12251: LD_EXP 3
12255: PUSH
12256: LD_EXP 4
12260: PUSH
12261: LD_EXP 5
12265: PUSH
12266: LD_EXP 2
12270: PUSH
12271: LD_EXP 12
12275: PUSH
12276: LD_EXP 13
12280: PUSH
12281: LD_EXP 9
12285: PUSH
12286: LD_EXP 11
12290: PUSH
12291: LD_EXP 6
12295: PUSH
12296: LD_EXP 8
12300: PUSH
12301: LD_EXP 10
12305: PUSH
12306: LD_EXP 15
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: DIFF
12327: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12328: LD_ADDR_VAR 0 6
12332: PUSH
12333: LD_VAR 0 1
12337: PUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 12
12350: ARRAY
12351: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12352: LD_VAR 0 6
12356: PPUSH
12357: CALL_OW 258
12361: PUSH
12362: LD_INT 1
12364: EQUAL
12365: IFFALSE 12383
// Say ( speaker , dialogMID ) else
12367: LD_VAR 0 6
12371: PPUSH
12372: LD_VAR 0 2
12376: PPUSH
12377: CALL_OW 88
12381: GO 12397
// Say ( speaker , dialogFID ) ;
12383: LD_VAR 0 6
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: CALL_OW 88
// result := speaker ;
12397: LD_ADDR_VAR 0 4
12401: PUSH
12402: LD_VAR 0 6
12406: ST_TO_ADDR
// end ;
12407: LD_VAR 0 4
12411: RET
// export function PrepareDifficulty ; var tmp ; begin
12412: LD_INT 0
12414: PPUSH
12415: PPUSH
// if Difficulty = 1 then
12416: LD_OWVAR 67
12420: PUSH
12421: LD_INT 1
12423: EQUAL
12424: IFFALSE 12444
// begin RuSolMinLevel = 8 ;
12426: LD_ADDR_EXP 29
12430: PUSH
12431: LD_INT 8
12433: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12434: LD_ADDR_EXP 30
12438: PUSH
12439: LD_INT 10
12441: ST_TO_ADDR
// end else
12442: GO 12684
// if Difficulty = 2 then
12444: LD_OWVAR 67
12448: PUSH
12449: LD_INT 2
12451: EQUAL
12452: IFFALSE 12548
// begin RuSolMinLevel = 9 ;
12454: LD_ADDR_EXP 29
12458: PUSH
12459: LD_INT 9
12461: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12462: LD_ADDR_EXP 30
12466: PUSH
12467: LD_INT 10
12469: ST_TO_ADDR
// uc_nation = 3 ;
12470: LD_ADDR_OWVAR 21
12474: PUSH
12475: LD_INT 3
12477: ST_TO_ADDR
// uc_side = 3 ;
12478: LD_ADDR_OWVAR 20
12482: PUSH
12483: LD_INT 3
12485: ST_TO_ADDR
// bc_level = 10 ;
12486: LD_ADDR_OWVAR 43
12490: PUSH
12491: LD_INT 10
12493: ST_TO_ADDR
// bc_type = b_turret ;
12494: LD_ADDR_OWVAR 42
12498: PUSH
12499: LD_INT 33
12501: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: LD_INT 86
12509: PPUSH
12510: LD_INT 34
12512: PPUSH
12513: LD_INT 2
12515: PPUSH
12516: CALL_OW 47
12520: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_INT 49
12528: PPUSH
12529: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12533: LD_INT 64
12535: PPUSH
12536: LD_INT 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// end else
12546: GO 12684
// begin RuSolMinLevel = 10 ;
12548: LD_ADDR_EXP 29
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12556: LD_ADDR_EXP 30
12560: PUSH
12561: LD_INT 10
12563: ST_TO_ADDR
// uc_nation = 3 ;
12564: LD_ADDR_OWVAR 21
12568: PUSH
12569: LD_INT 3
12571: ST_TO_ADDR
// uc_side = 3 ;
12572: LD_ADDR_OWVAR 20
12576: PUSH
12577: LD_INT 3
12579: ST_TO_ADDR
// bc_level = 10 ;
12580: LD_ADDR_OWVAR 43
12584: PUSH
12585: LD_INT 10
12587: ST_TO_ADDR
// bc_type = b_turret ;
12588: LD_ADDR_OWVAR 42
12592: PUSH
12593: LD_INT 33
12595: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12596: LD_ADDR_VAR 0 2
12600: PUSH
12601: LD_INT 86
12603: PPUSH
12604: LD_INT 34
12606: PPUSH
12607: LD_INT 2
12609: PPUSH
12610: CALL_OW 47
12614: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12615: LD_VAR 0 2
12619: PPUSH
12620: LD_INT 49
12622: PPUSH
12623: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_INT 93
12634: PPUSH
12635: LD_INT 31
12637: PPUSH
12638: LD_INT 2
12640: PPUSH
12641: CALL_OW 47
12645: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 49
12653: PPUSH
12654: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12658: LD_INT 64
12660: PPUSH
12661: LD_INT 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12671: LD_INT 65
12673: PPUSH
12674: LD_INT 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 322
// end ; end ;
12684: LD_VAR 0 1
12688: RET
// export function ShowQuery1 ; begin
12689: LD_INT 0
12691: PPUSH
// result := Query ( Q1 ) ;
12692: LD_ADDR_VAR 0 1
12696: PUSH
12697: LD_STRING Q1
12699: PPUSH
12700: CALL_OW 97
12704: ST_TO_ADDR
// end ;
12705: LD_VAR 0 1
12709: RET
// export function ShowQuery2 ; begin
12710: LD_INT 0
12712: PPUSH
// result := Query ( Q1a ) ;
12713: LD_ADDR_VAR 0 1
12717: PUSH
12718: LD_STRING Q1a
12720: PPUSH
12721: CALL_OW 97
12725: ST_TO_ADDR
// end ;
12726: LD_VAR 0 1
12730: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12731: LD_INT 0
12733: PPUSH
12734: PPUSH
12735: PPUSH
12736: PPUSH
// for i = 1 to count do
12737: LD_ADDR_VAR 0 8
12741: PUSH
12742: DOUBLE
12743: LD_INT 1
12745: DEC
12746: ST_TO_ADDR
12747: LD_VAR 0 6
12751: PUSH
12752: FOR_TO
12753: IFFALSE 12834
// begin uc_side = side ;
12755: LD_ADDR_OWVAR 20
12759: PUSH
12760: LD_VAR 0 1
12764: ST_TO_ADDR
// uc_nation = nation ;
12765: LD_ADDR_OWVAR 21
12769: PUSH
12770: LD_VAR 0 2
12774: ST_TO_ADDR
// hc_gallery =  ;
12775: LD_ADDR_OWVAR 33
12779: PUSH
12780: LD_STRING 
12782: ST_TO_ADDR
// hc_name =  ;
12783: LD_ADDR_OWVAR 26
12787: PUSH
12788: LD_STRING 
12790: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_VAR 0 5
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: CALL_OW 380
// un = CreateHuman ;
12808: LD_ADDR_VAR 0 10
12812: PUSH
12813: CALL_OW 44
12817: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12818: LD_VAR 0 10
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end ;
12832: GO 12752
12834: POP
12835: POP
// end ;
12836: LD_VAR 0 7
12840: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12841: LD_INT 0
12843: PPUSH
12844: PPUSH
12845: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12846: LD_ADDR_VAR 0 6
12850: PUSH
12851: LD_INT 48
12853: PUSH
12854: LD_INT 49
12856: PUSH
12857: LD_INT 50
12859: PUSH
12860: LD_INT 20
12862: PUSH
12863: LD_INT 1
12865: PUSH
12866: LD_INT 51
12868: PUSH
12869: LD_INT 52
12871: PUSH
12872: LD_INT 69
12874: PUSH
12875: LD_INT 39
12877: PUSH
12878: LD_INT 34
12880: PUSH
12881: LD_INT 40
12883: PUSH
12884: LD_INT 53
12886: PUSH
12887: LD_INT 71
12889: PUSH
12890: LD_INT 57
12892: PUSH
12893: LD_INT 58
12895: PUSH
12896: LD_INT 44
12898: PUSH
12899: LD_INT 32
12901: PUSH
12902: LD_INT 27
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 59
12913: PUSH
12914: LD_INT 54
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: LD_INT 56
12922: PUSH
12923: LD_INT 63
12925: PUSH
12926: LD_INT 64
12928: PUSH
12929: LD_INT 65
12931: PUSH
12932: LD_INT 30
12934: PUSH
12935: LD_INT 31
12937: PUSH
12938: LD_INT 21
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_INT 25
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: ST_TO_ADDR
// for i := 1 to list do
12981: LD_ADDR_VAR 0 5
12985: PUSH
12986: DOUBLE
12987: LD_INT 1
12989: DEC
12990: ST_TO_ADDR
12991: LD_VAR 0 6
12995: PUSH
12996: FOR_TO
12997: IFFALSE 13069
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12999: LD_VAR 0 6
13003: PUSH
13004: LD_VAR 0 5
13008: ARRAY
13009: PPUSH
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 321
13019: PUSH
13020: LD_INT 1
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 6
13028: PUSH
13029: LD_VAR 0 5
13033: ARRAY
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: CALL_OW 482
13044: AND
13045: IFFALSE 13067
// AddComResearch ( lab , list [ i ] ) ;
13047: LD_VAR 0 2
13051: PPUSH
13052: LD_VAR 0 6
13056: PUSH
13057: LD_VAR 0 5
13061: ARRAY
13062: PPUSH
13063: CALL_OW 184
13067: GO 12996
13069: POP
13070: POP
// end ;
13071: LD_VAR 0 4
13075: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
13083: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13084: LD_ADDR_VAR 0 8
13088: PUSH
13089: LD_VAR 0 2
13093: PPUSH
13094: CALL_OW 313
13098: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13099: LD_ADDR_VAR 0 9
13103: PUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 22
13111: PUSH
13112: LD_VAR 0 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 24
13133: PUSH
13134: LD_INT 750
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 54
13146: PUSH
13147: EMPTY
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: CALL_OW 70
13164: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13165: LD_ADDR_VAR 0 6
13169: PUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 22
13177: PUSH
13178: LD_VAR 0 1
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 3
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 3
13199: PUSH
13200: LD_INT 24
13202: PUSH
13203: LD_INT 1000
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: PPUSH
13222: CALL_OW 70
13226: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13227: LD_VAR 0 6
13231: NOT
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_VAR 0 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 24
13257: PUSH
13258: LD_INT 250
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: PPUSH
13270: CALL_OW 69
13274: NOT
13275: AND
13276: IFFALSE 13280
// exit ;
13278: GO 13438
// if buildingsList and engineerOkInside then
13280: LD_VAR 0 6
13284: PUSH
13285: LD_VAR 0 8
13289: AND
13290: IFFALSE 13301
// ComExitBuilding ( engineerOkInside ) ;
13292: LD_VAR 0 8
13296: PPUSH
13297: CALL_OW 122
// if buildingsList and engineerOkOutside then
13301: LD_VAR 0 6
13305: PUSH
13306: LD_VAR 0 9
13310: AND
13311: IFFALSE 13331
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13313: LD_VAR 0 9
13317: PPUSH
13318: LD_VAR 0 6
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13331: LD_VAR 0 6
13335: PUSH
13336: LD_INT 0
13338: EQUAL
13339: PUSH
13340: LD_VAR 0 4
13344: PUSH
13345: LD_INT 0
13347: EQUAL
13348: AND
13349: PUSH
13350: LD_VAR 0 9
13354: AND
13355: IFFALSE 13371
// ComEnterUnit ( engineerOkOutside , depot ) ;
13357: LD_VAR 0 9
13361: PPUSH
13362: LD_VAR 0 2
13366: PPUSH
13367: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13371: LD_VAR 0 9
13375: PUSH
13376: LD_VAR 0 6
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: AND
13385: PUSH
13386: LD_VAR 0 4
13390: AND
13391: IFFALSE 13438
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13393: LD_VAR 0 9
13397: PPUSH
13398: LD_VAR 0 4
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 4
13411: PUSH
13412: LD_INT 2
13414: ARRAY
13415: PPUSH
13416: LD_VAR 0 4
13420: PUSH
13421: LD_INT 3
13423: ARRAY
13424: PPUSH
13425: LD_VAR 0 4
13429: PUSH
13430: LD_INT 4
13432: ARRAY
13433: PPUSH
13434: CALL_OW 145
// end ;
13438: LD_VAR 0 5
13442: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
13452: PPUSH
13453: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13454: LD_ADDR_VAR 0 6
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_VAR 0 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 25
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 24
13483: PUSH
13484: LD_INT 251
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PUSH
13501: LD_EXP 27
13505: PUSH
13506: EMPTY
13507: LIST
13508: DIFF
13509: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13510: LD_ADDR_VAR 0 7
13514: PUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 22
13522: PUSH
13523: LD_VAR 0 1
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 56
13534: PUSH
13535: EMPTY
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 50
13550: PUSH
13551: EMPTY
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 70
13564: PUSH
13565: LD_EXP 27
13569: PUSH
13570: EMPTY
13571: LIST
13572: DIFF
13573: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13574: LD_ADDR_VAR 0 10
13578: PUSH
13579: LD_VAR 0 3
13583: PPUSH
13584: LD_INT 22
13586: PUSH
13587: LD_VAR 0 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 21
13598: PUSH
13599: LD_INT 1
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: LD_INT 24
13611: PUSH
13612: LD_INT 750
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13633: LD_ADDR_VAR 0 11
13637: PUSH
13638: LD_VAR 0 2
13642: PPUSH
13643: LD_INT 22
13645: PUSH
13646: LD_VAR 0 1
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 21
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 24
13670: PUSH
13671: LD_INT 1000
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 70
13691: ST_TO_ADDR
// if damageUnits and sciList then
13692: LD_VAR 0 10
13696: PUSH
13697: LD_VAR 0 6
13701: AND
13702: IFFALSE 13718
// ComMoveToArea ( damageUnits , healArea ) ;
13704: LD_VAR 0 10
13708: PPUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13718: LD_VAR 0 11
13722: PUSH
13723: LD_VAR 0 6
13727: AND
13728: PUSH
13729: LD_VAR 0 7
13733: PUSH
13734: LD_INT 0
13736: EQUAL
13737: AND
13738: IFFALSE 13784
// for i in buildings do
13740: LD_ADDR_VAR 0 8
13744: PUSH
13745: LD_VAR 0 4
13749: PUSH
13750: FOR_IN
13751: IFFALSE 13782
// begin if UnitsInside ( i ) then
13753: LD_VAR 0 8
13757: PPUSH
13758: CALL_OW 313
13762: IFFALSE 13780
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13764: LD_VAR 0 8
13768: PPUSH
13769: CALL_OW 313
13773: PPUSH
13774: CALL_OW 122
// break ;
13778: GO 13782
// end ; end ;
13780: GO 13750
13782: POP
13783: POP
// if unitsToHeal and sciListOutside then
13784: LD_VAR 0 11
13788: PUSH
13789: LD_VAR 0 7
13793: AND
13794: IFFALSE 13814
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13796: LD_VAR 0 7
13800: PPUSH
13801: LD_VAR 0 11
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: PPUSH
13810: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13814: LD_VAR 0 10
13818: PUSH
13819: LD_INT 0
13821: EQUAL
13822: PUSH
13823: LD_VAR 0 11
13827: PUSH
13828: LD_INT 0
13830: EQUAL
13831: AND
13832: PUSH
13833: LD_VAR 0 7
13837: AND
13838: IFFALSE 13906
// begin tmp := buildings ;
13840: LD_ADDR_VAR 0 12
13844: PUSH
13845: LD_VAR 0 4
13849: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13850: LD_ADDR_VAR 0 13
13854: PUSH
13855: LD_INT 1
13857: PPUSH
13858: LD_VAR 0 12
13862: PPUSH
13863: CALL_OW 12
13867: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13868: LD_VAR 0 7
13872: PPUSH
13873: LD_INT 3
13875: PUSH
13876: LD_INT 60
13878: PUSH
13879: EMPTY
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 72
13890: PPUSH
13891: LD_VAR 0 12
13895: PUSH
13896: LD_VAR 0 13
13900: ARRAY
13901: PPUSH
13902: CALL_OW 120
// end ; end ;
13906: LD_VAR 0 5
13910: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13911: LD_INT 0
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13919: LD_ADDR_VAR 0 7
13923: PUSH
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 22
13931: PUSH
13932: LD_VAR 0 1
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 34
13953: PUSH
13954: LD_INT 52
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 70
13970: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13971: LD_ADDR_VAR 0 8
13975: PUSH
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_INT 22
13983: PUSH
13984: LD_VAR 0 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 3
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 3
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 1000
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: PPUSH
14028: CALL_OW 70
14032: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14033: LD_VAR 0 8
14037: PUSH
14038: LD_INT 0
14040: GREATER
14041: PUSH
14042: LD_VAR 0 7
14046: PPUSH
14047: LD_INT 24
14049: PUSH
14050: LD_INT 750
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 72
14061: PUSH
14062: LD_INT 0
14064: GREATER
14065: AND
14066: IFFALSE 14086
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14068: LD_VAR 0 7
14072: PPUSH
14073: LD_VAR 0 8
14077: PUSH
14078: LD_INT 1
14080: ARRAY
14081: PPUSH
14082: CALL_OW 130
// end ;
14086: LD_VAR 0 3
14090: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14095: LD_INT 22
14097: PUSH
14098: LD_VAR 0 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: PUSH
14126: LD_INT 18
14128: PPUSH
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 70
14159: PUSH
14160: LD_VAR 0 3
14164: LESSEQUAL
14165: DIFF
14166: IFFALSE 14233
// for i := 1 to vehCount do
14168: LD_ADDR_VAR 0 9
14172: PUSH
14173: DOUBLE
14174: LD_INT 1
14176: DEC
14177: ST_TO_ADDR
14178: LD_VAR 0 3
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14231
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: LD_VAR 0 7
14195: PPUSH
14196: LD_VAR 0 5
14200: PPUSH
14201: LD_VAR 0 6
14205: PPUSH
14206: LD_VAR 0 4
14210: PUSH
14211: LD_INT 1
14213: PPUSH
14214: LD_VAR 0 4
14218: PPUSH
14219: CALL_OW 12
14223: ARRAY
14224: PPUSH
14225: CALL_OW 185
14229: GO 14183
14231: POP
14232: POP
// end ;
14233: LD_VAR 0 8
14237: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14246: LD_ADDR_VAR 0 6
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 9
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14282: LD_ADDR_VAR 0 7
14286: PUSH
14287: LD_INT 81
14289: PUSH
14290: LD_VAR 0 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 3
14335: PPUSH
14336: CALL_OW 12
14340: ST_TO_ADDR
// for i := 1 to list do
14341: LD_ADDR_VAR 0 5
14345: PUSH
14346: DOUBLE
14347: LD_INT 1
14349: DEC
14350: ST_TO_ADDR
14351: LD_VAR 0 6
14355: PUSH
14356: FOR_TO
14357: IFFALSE 14559
// for ta in filter do
14359: LD_ADDR_VAR 0 3
14363: PUSH
14364: LD_VAR 0 7
14368: PUSH
14369: FOR_IN
14370: IFFALSE 14555
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14372: LD_VAR 0 6
14376: PUSH
14377: LD_VAR 0 5
14381: ARRAY
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: CALL_OW 296
14392: PUSH
14393: LD_INT 15
14395: LESSEQUAL
14396: IFFALSE 14553
// begin case c of 1 :
14398: LD_VAR 0 4
14402: PUSH
14403: LD_INT 1
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14449
14411: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14412: LD_VAR 0 6
14416: PUSH
14417: LD_VAR 0 5
14421: ARRAY
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: CALL_OW 250
14432: PPUSH
14433: LD_VAR 0 3
14437: PPUSH
14438: CALL_OW 251
14442: PPUSH
14443: CALL_OW 154
14447: GO 14553
14449: LD_INT 2
14451: DOUBLE
14452: EQUAL
14453: IFTRUE 14457
14455: GO 14521
14457: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14458: LD_VAR 0 6
14462: PUSH
14463: LD_VAR 0 5
14467: ARRAY
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: CALL_OW 250
14478: PUSH
14479: LD_INT 1
14481: NEG
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 12
14490: PLUS
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: CALL_OW 251
14501: PUSH
14502: LD_INT 1
14504: NEG
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 12
14513: PLUS
14514: PPUSH
14515: CALL_OW 153
14519: GO 14553
14521: LD_INT 3
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14552
14529: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14530: LD_VAR 0 6
14534: PUSH
14535: LD_VAR 0 5
14539: ARRAY
14540: PPUSH
14541: LD_VAR 0 3
14545: PPUSH
14546: CALL_OW 115
14550: GO 14553
14552: POP
// end ; end ;
14553: GO 14369
14555: POP
14556: POP
14557: GO 14356
14559: POP
14560: POP
// end ;
14561: LD_VAR 0 2
14565: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14566: LD_INT 0
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
// r := 100 ;
14572: LD_ADDR_VAR 0 5
14576: PUSH
14577: LD_INT 100
14579: ST_TO_ADDR
// x := 0 ;
14580: LD_ADDR_VAR 0 6
14584: PUSH
14585: LD_INT 0
14587: ST_TO_ADDR
// while ( x < n ) do
14588: LD_VAR 0 6
14592: PUSH
14593: LD_VAR 0 2
14597: LESS
14598: IFFALSE 14861
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14600: LD_ADDR_VAR 0 4
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_VAR 0 1
14614: PPUSH
14615: LD_INT 0
14617: PPUSH
14618: CALL_OW 517
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PUSH
14627: FOR_TO
14628: IFFALSE 14857
// begin if r > 50 then
14630: LD_VAR 0 5
14634: PUSH
14635: LD_INT 50
14637: GREATER
14638: IFFALSE 14841
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 517
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PUSH
14657: LD_VAR 0 4
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 0
14670: PPUSH
14671: CALL_OW 517
14675: PUSH
14676: LD_INT 2
14678: ARRAY
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PPUSH
14686: CALL_OW 458
14690: NOT
14691: IFFALSE 14839
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14693: LD_VAR 0 1
14697: PPUSH
14698: LD_INT 0
14700: PPUSH
14701: CALL_OW 517
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 4
14714: ARRAY
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 0
14723: PPUSH
14724: CALL_OW 517
14728: PUSH
14729: LD_INT 2
14731: ARRAY
14732: PUSH
14733: LD_VAR 0 4
14737: ARRAY
14738: PPUSH
14739: LD_INT 8
14741: PPUSH
14742: LD_INT 0
14744: PPUSH
14745: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14749: LD_ADDR_EXP 37
14753: PUSH
14754: LD_EXP 37
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: CALL_OW 517
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PUSH
14779: LD_VAR 0 4
14783: ARRAY
14784: PUSH
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 517
14797: PUSH
14798: LD_INT 2
14800: ARRAY
14801: PUSH
14802: LD_VAR 0 4
14806: ARRAY
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 2
14816: ST_TO_ADDR
// r := 0 ;
14817: LD_ADDR_VAR 0 5
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// x := x + 1 ;
14825: LD_ADDR_VAR 0 6
14829: PUSH
14830: LD_VAR 0 6
14834: PUSH
14835: LD_INT 1
14837: PLUS
14838: ST_TO_ADDR
// end end else
14839: GO 14855
// r := r + 35 ;
14841: LD_ADDR_VAR 0 5
14845: PUSH
14846: LD_VAR 0 5
14850: PUSH
14851: LD_INT 35
14853: PLUS
14854: ST_TO_ADDR
// end end ;
14855: GO 14627
14857: POP
14858: POP
14859: GO 14588
14861: LD_VAR 0 3
14865: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14866: LD_INT 0
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
// tmp := [ ] ;
14873: LD_ADDR_VAR 0 6
14877: PUSH
14878: EMPTY
14879: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14880: LD_ADDR_VAR 0 7
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_VAR 0 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 32
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PPUSH
14911: CALL_OW 69
14915: ST_TO_ADDR
// if bunkers then
14916: LD_VAR 0 7
14920: IFFALSE 14990
// for i in bunkers do
14922: LD_ADDR_VAR 0 4
14926: PUSH
14927: LD_VAR 0 7
14931: PUSH
14932: FOR_IN
14933: IFFALSE 14988
// for j in UnitsInside ( i ) do
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 4
14944: PPUSH
14945: CALL_OW 313
14949: PUSH
14950: FOR_IN
14951: IFFALSE 14984
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14953: LD_ADDR_VAR 0 6
14957: PUSH
14958: LD_VAR 0 6
14962: PPUSH
14963: LD_VAR 0 6
14967: PUSH
14968: LD_INT 1
14970: PLUS
14971: PPUSH
14972: LD_VAR 0 5
14976: PPUSH
14977: CALL_OW 1
14981: ST_TO_ADDR
14982: GO 14950
14984: POP
14985: POP
14986: GO 14932
14988: POP
14989: POP
// if tmp then
14990: LD_VAR 0 6
14994: IFFALSE 15034
// begin ComExitBuilding ( tmp ) ;
14996: LD_VAR 0 6
15000: PPUSH
15001: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15005: LD_VAR 0 6
15009: PPUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 250
15019: PPUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: CALL_OW 251
15029: PPUSH
15030: CALL_OW 174
// end ; end ;
15034: LD_VAR 0 3
15038: RET
// export function CreateNature ; var i , un ; begin
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
15043: PPUSH
// uc_side := 0 ;
15044: LD_ADDR_OWVAR 20
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// uc_nation := 0 ;
15052: LD_ADDR_OWVAR 21
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// InitHc ;
15060: CALL_OW 19
// hc_class := class_fish ;
15064: LD_ADDR_OWVAR 28
15068: PUSH
15069: LD_INT 20
15071: ST_TO_ADDR
// for i := 1 to 6 do
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: DOUBLE
15078: LD_INT 1
15080: DEC
15081: ST_TO_ADDR
15082: LD_INT 6
15084: PUSH
15085: FOR_TO
15086: IFFALSE 15105
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15088: CALL_OW 44
15092: PPUSH
15093: LD_INT 22
15095: PPUSH
15096: LD_INT 0
15098: PPUSH
15099: CALL_OW 49
15103: GO 15085
15105: POP
15106: POP
// for i := 1 to Difficulty + 2 do
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: DOUBLE
15113: LD_INT 1
15115: DEC
15116: ST_TO_ADDR
15117: LD_OWVAR 67
15121: PUSH
15122: LD_INT 2
15124: PLUS
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15236
// begin hc_sex := sex_male ;
15129: LD_ADDR_OWVAR 27
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// uc_side := 0 ;
15137: LD_ADDR_OWVAR 20
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// uc_nation := nation_nature ;
15145: LD_ADDR_OWVAR 21
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// hc_class := class_tiger ;
15153: LD_ADDR_OWVAR 28
15157: PUSH
15158: LD_INT 14
15160: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15161: LD_ADDR_OWVAR 31
15165: PUSH
15166: LD_EXP 30
15170: PUSH
15171: LD_INT 0
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15186: LD_ADDR_OWVAR 35
15190: PUSH
15191: LD_INT 5
15193: NEG
15194: PPUSH
15195: LD_INT 5
15197: PPUSH
15198: CALL_OW 12
15202: PUSH
15203: LD_OWVAR 67
15207: MUL
15208: ST_TO_ADDR
// un := CreateHuman ;
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: CALL_OW 44
15218: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 23
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL_OW 49
// end ;
15234: GO 15126
15236: POP
15237: POP
// for i := 1 to rand ( 3 , 4 ) do
15238: LD_ADDR_VAR 0 2
15242: PUSH
15243: DOUBLE
15244: LD_INT 1
15246: DEC
15247: ST_TO_ADDR
15248: LD_INT 3
15250: PPUSH
15251: LD_INT 4
15253: PPUSH
15254: CALL_OW 12
15258: PUSH
15259: FOR_TO
15260: IFFALSE 15352
// begin hc_sex := sex_male ;
15262: LD_ADDR_OWVAR 27
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// uc_side := 0 ;
15270: LD_ADDR_OWVAR 20
15274: PUSH
15275: LD_INT 0
15277: ST_TO_ADDR
// uc_nation := nation_nature ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 0
15285: ST_TO_ADDR
// hc_class := 18 ;
15286: LD_ADDR_OWVAR 28
15290: PUSH
15291: LD_INT 18
15293: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15294: LD_ADDR_OWVAR 31
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: ST_TO_ADDR
// hc_agressivity := 0 ;
15317: LD_ADDR_OWVAR 35
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// un := CreateHuman ;
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: CALL_OW 44
15334: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15335: LD_VAR 0 3
15339: PPUSH
15340: LD_INT 23
15342: PPUSH
15343: LD_INT 0
15345: PPUSH
15346: CALL_OW 49
// end ;
15350: GO 15259
15352: POP
15353: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: DOUBLE
15360: LD_INT 1
15362: DEC
15363: ST_TO_ADDR
15364: LD_INT 4
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 3
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: LD_OWVAR 67
15386: ARRAY
15387: PUSH
15388: FOR_TO
15389: IFFALSE 15498
// begin hc_sex := sex_male ;
15391: LD_ADDR_OWVAR 27
15395: PUSH
15396: LD_INT 1
15398: ST_TO_ADDR
// uc_side := 0 ;
15399: LD_ADDR_OWVAR 20
15403: PUSH
15404: LD_INT 0
15406: ST_TO_ADDR
// uc_nation := nation_nature ;
15407: LD_ADDR_OWVAR 21
15411: PUSH
15412: LD_INT 0
15414: ST_TO_ADDR
// hc_class := class_apeman ;
15415: LD_ADDR_OWVAR 28
15419: PUSH
15420: LD_INT 12
15422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15423: LD_ADDR_OWVAR 31
15427: PUSH
15428: LD_INT 0
15430: PPUSH
15431: LD_INT 2
15433: PPUSH
15434: CALL_OW 12
15438: PUSH
15439: LD_INT 0
15441: PUSH
15442: LD_INT 0
15444: PUSH
15445: LD_INT 0
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15454: LD_ADDR_OWVAR 35
15458: PUSH
15459: LD_INT 10
15461: NEG
15462: PPUSH
15463: LD_INT 10
15465: PPUSH
15466: CALL_OW 12
15470: ST_TO_ADDR
// un := CreateHuman ;
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: CALL_OW 44
15480: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15481: LD_VAR 0 3
15485: PPUSH
15486: LD_INT 26
15488: PPUSH
15489: LD_INT 0
15491: PPUSH
15492: CALL_OW 49
// end ;
15496: GO 15388
15498: POP
15499: POP
// end ; end_of_file
15500: LD_VAR 0 1
15504: RET
// on UnitDestroyed ( unit ) do var i ;
15505: LD_INT 0
15507: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL 34713 0 1
// if unit = JMM then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_EXP 1
15526: EQUAL
15527: IFFALSE 15536
// YouLost ( JMM ) ;
15529: LD_STRING JMM
15531: PPUSH
15532: CALL_OW 104
// if unit in russianTanks then
15536: LD_VAR 0 1
15540: PUSH
15541: LD_EXP 32
15545: IN
15546: IFFALSE 15564
// russianTanks := russianTanks diff unit ;
15548: LD_ADDR_EXP 32
15552: PUSH
15553: LD_EXP 32
15557: PUSH
15558: LD_VAR 0 1
15562: DIFF
15563: ST_TO_ADDR
// if unit in russianTimeLapsers then
15564: LD_VAR 0 1
15568: PUSH
15569: LD_EXP 33
15573: IN
15574: IFFALSE 15592
// russianTimeLapsers := russianTimeLapsers diff unit ;
15576: LD_ADDR_EXP 33
15580: PUSH
15581: LD_EXP 33
15585: PUSH
15586: LD_VAR 0 1
15590: DIFF
15591: ST_TO_ADDR
// if unit in RuScientists then
15592: LD_VAR 0 1
15596: PUSH
15597: LD_EXP 27
15601: IN
15602: IFFALSE 15634
// begin RuScientists := RuScientists diff unit ;
15604: LD_ADDR_EXP 27
15608: PUSH
15609: LD_EXP 27
15613: PUSH
15614: LD_VAR 0 1
15618: DIFF
15619: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15620: LD_ADDR_EXP 28
15624: PUSH
15625: LD_EXP 28
15629: PUSH
15630: LD_INT 1
15632: PLUS
15633: ST_TO_ADDR
// end ; end ;
15634: PPOPN 2
15636: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15637: LD_VAR 0 3
15641: PPUSH
15642: CALL_OW 264
15646: PUSH
15647: LD_INT 9
15649: EQUAL
15650: IFFALSE 15666
// laserCounterDestroy := laserCounterDestroy + 1 ;
15652: LD_ADDR_EXP 43
15656: PUSH
15657: LD_EXP 43
15661: PUSH
15662: LD_INT 1
15664: PLUS
15665: ST_TO_ADDR
// end ;
15666: PPOPN 3
15668: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15669: LD_VAR 0 2
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_INT 6
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: IN
15689: IFFALSE 15744
// begin if GetType ( human ) = unit_vehicle then
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL_OW 247
15700: PUSH
15701: LD_INT 2
15703: EQUAL
15704: IFFALSE 15721
// human := IsDrivenBy ( human ) ;
15706: LD_ADDR_VAR 0 2
15710: PUSH
15711: LD_VAR 0 2
15715: PPUSH
15716: CALL_OW 311
15720: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15721: LD_VAR 0 2
15725: PPUSH
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 110
15735: PUSH
15736: LD_INT 10
15738: PLUS
15739: PPUSH
15740: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15744: LD_VAR 0 2
15748: PPUSH
15749: CALL_OW 255
15753: PUSH
15754: LD_INT 1
15756: EQUAL
15757: PUSH
15758: LD_EXP 40
15762: PUSH
15763: LD_INT 0
15765: EQUAL
15766: AND
15767: IFFALSE 15879
// begin eventVar1 = 1 ;
15769: LD_ADDR_EXP 40
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// teleportExplored = 1 ;
15777: LD_ADDR_EXP 26
15781: PUSH
15782: LD_INT 1
15784: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15785: LD_STRING M2a
15787: PPUSH
15788: CALL_OW 337
// wait ( 0 0$2 ) ;
15792: LD_INT 70
15794: PPUSH
15795: CALL_OW 67
// DialogueOn ;
15799: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15803: LD_INT 22
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 21
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PPUSH
15827: CALL_OW 69
15831: PPUSH
15832: LD_STRING DT3a-Sol1-1
15834: PPUSH
15835: LD_STRING DT3a-FSol1-1
15837: PPUSH
15838: CALL 12226 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15842: LD_EXP 1
15846: PPUSH
15847: LD_STRING DT3a-JMM-1
15849: PPUSH
15850: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15854: LD_VAR 0 2
15858: PPUSH
15859: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15863: LD_EXP 1
15867: PPUSH
15868: LD_STRING DT3a-JMM-1a
15870: PPUSH
15871: CALL_OW 88
// DialogueOff ;
15875: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15879: LD_VAR 0 1
15883: PUSH
15884: LD_INT 10
15886: EQUAL
15887: PUSH
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 247
15897: PUSH
15898: LD_INT 2
15900: EQUAL
15901: AND
15902: PUSH
15903: LD_VAR 0 2
15907: PPUSH
15908: CALL_OW 255
15912: PUSH
15913: LD_INT 3
15915: EQUAL
15916: AND
15917: IFFALSE 15983
// begin if vehicleTeleported = 0 then
15919: LD_EXP 21
15923: PUSH
15924: LD_INT 0
15926: EQUAL
15927: IFFALSE 15944
// begin wait ( 0 0$03 ) ;
15929: LD_INT 105
15931: PPUSH
15932: CALL_OW 67
// vehicleTeleported := 1 ;
15936: LD_ADDR_EXP 21
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15944: LD_EXP 21
15948: PUSH
15949: LD_INT 2
15951: EQUAL
15952: IFFALSE 15969
// begin wait ( 0 0$03 ) ;
15954: LD_INT 105
15956: PPUSH
15957: CALL_OW 67
// vehicleTeleported := 3 ;
15961: LD_ADDR_EXP 21
15965: PUSH
15966: LD_INT 3
15968: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15969: LD_ADDR_EXP 22
15973: PUSH
15974: LD_EXP 22
15978: PUSH
15979: LD_INT 1
15981: PLUS
15982: ST_TO_ADDR
// end ; end ;
15983: PPOPN 2
15985: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15986: LD_VAR 0 1
15990: PPUSH
15991: LD_VAR 0 2
15995: PPUSH
15996: CALL 34835 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 264
16009: PUSH
16010: LD_INT 7
16012: EQUAL
16013: IFFALSE 16023
// rocketBuilded := true ;
16015: LD_ADDR_EXP 44
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 3
16035: NONEQUAL
16036: IFFALSE 16040
// exit ;
16038: GO 16159
// if factory in [ ru_fact , rufab2 ] then
16040: LD_VAR 0 2
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 112
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: IN
16055: IFFALSE 16159
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 264
16066: PUSH
16067: LD_INT 49
16069: EQUAL
16070: IFFALSE 16106
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16072: LD_ADDR_EXP 33
16076: PUSH
16077: LD_EXP 33
16081: PPUSH
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL 76425 0 2
16091: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 137
16099: PPUSH
16100: CALL_OW 120
// end else
16104: GO 16159
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 264
16115: PUSH
16116: LD_INT 51
16118: PUSH
16119: LD_EXP 46
16123: PUSH
16124: LD_INT 52
16126: PUSH
16127: LD_INT 53
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: IN
16136: NOT
16137: IFFALSE 16159
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16139: LD_ADDR_EXP 32
16143: PUSH
16144: LD_EXP 32
16148: PPUSH
16149: LD_VAR 0 1
16153: PPUSH
16154: CALL 76425 0 2
16158: ST_TO_ADDR
// end ; end ; end ;
16159: PPOPN 2
16161: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16162: LD_INT 0
16164: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16165: LD_VAR 0 2
16169: PPUSH
16170: CALL_OW 255
16174: PUSH
16175: LD_INT 3
16177: EQUAL
16178: PUSH
16179: LD_VAR 0 2
16183: PPUSH
16184: CALL_OW 257
16188: PUSH
16189: LD_INT 3
16191: EQUAL
16192: AND
16193: PUSH
16194: LD_INT 21
16196: PPUSH
16197: CALL_OW 255
16201: PUSH
16202: LD_INT 3
16204: EQUAL
16205: AND
16206: PUSH
16207: LD_INT 21
16209: PPUSH
16210: CALL_OW 302
16214: AND
16215: IFFALSE 16229
// ComEnterUnit ( human , ru_fact ) ;
16217: LD_VAR 0 2
16221: PPUSH
16222: LD_INT 21
16224: PPUSH
16225: CALL_OW 120
// end ;
16229: PPOPN 3
16231: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL 34819 0 1
// end ; end_of_file
16241: PPOPN 1
16243: END
// every 0 0$1 trigger ruAI = 1 do
16244: LD_EXP 34
16248: PUSH
16249: LD_INT 1
16251: EQUAL
16252: IFFALSE 16364
16254: GO 16256
16256: DISABLE
// begin enable ;
16257: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16258: LD_INT 3
16260: PPUSH
16261: LD_INT 6
16263: PPUSH
16264: LD_INT 9
16266: PPUSH
16267: LD_EXP 31
16271: PPUSH
16272: CALL 13076 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16276: LD_INT 3
16278: PPUSH
16279: LD_INT 4
16281: PPUSH
16282: LD_INT 10
16284: PPUSH
16285: LD_EXP 31
16289: PPUSH
16290: CALL 13076 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16294: LD_INT 3
16296: PPUSH
16297: LD_INT 9
16299: PPUSH
16300: CALL 13911 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16304: LD_INT 3
16306: PPUSH
16307: LD_INT 10
16309: PPUSH
16310: CALL 13911 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16314: LD_INT 3
16316: PPUSH
16317: LD_INT 16
16319: PPUSH
16320: LD_INT 9
16322: PPUSH
16323: LD_INT 91
16325: PPUSH
16326: CALL 13443 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16330: LD_INT 3
16332: PPUSH
16333: LD_INT 17
16335: PPUSH
16336: LD_INT 10
16338: PPUSH
16339: LD_INT 47
16341: PUSH
16342: LD_INT 129
16344: PUSH
16345: LD_INT 135
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL 13443 0 4
// IntBazooka ( 3 ) ;
16357: LD_INT 3
16359: PPUSH
16360: CALL 14238 0 1
// end ;
16364: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p ;
16365: LD_EXP 32
16369: PUSH
16370: LD_INT 3
16372: PUSH
16373: LD_INT 4
16375: PUSH
16376: LD_INT 5
16378: PUSH
16379: LD_INT 6
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_OWVAR 67
16392: ARRAY
16393: GREATEREQUAL
16394: IFFALSE 16673
16396: GO 16398
16398: DISABLE
16399: LD_INT 0
16401: PPUSH
16402: PPUSH
16403: PPUSH
// begin enable ;
16404: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16405: LD_ADDR_VAR 0 2
16409: PUSH
16410: LD_EXP 32
16414: PUSH
16415: LD_EXP 33
16419: UNION
16420: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16421: LD_ADDR_EXP 32
16425: PUSH
16426: LD_EXP 32
16430: PUSH
16431: LD_VAR 0 2
16435: DIFF
16436: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16437: LD_ADDR_EXP 33
16441: PUSH
16442: LD_EXP 33
16446: PUSH
16447: LD_VAR 0 2
16451: DIFF
16452: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16453: LD_EXP 21
16457: PUSH
16458: LD_INT 4
16460: GREATEREQUAL
16461: IFFALSE 16479
// attackTactic := rand ( 1 , 2 ) ;
16463: LD_ADDR_EXP 36
16467: PUSH
16468: LD_INT 1
16470: PPUSH
16471: LD_INT 2
16473: PPUSH
16474: CALL_OW 12
16478: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16479: LD_INT 10
16481: PPUSH
16482: CALL_OW 302
16486: IFFALSE 16595
// begin for i in tmp do
16488: LD_ADDR_VAR 0 1
16492: PUSH
16493: LD_VAR 0 2
16497: PUSH
16498: FOR_IN
16499: IFFALSE 16542
// if attackTactic < 2 then
16501: LD_EXP 36
16505: PUSH
16506: LD_INT 2
16508: LESS
16509: IFFALSE 16525
// ComEnterUnit ( i , ruteleprt ) else
16511: LD_VAR 0 1
16515: PPUSH
16516: LD_INT 10
16518: PPUSH
16519: CALL_OW 120
16523: GO 16540
// ComMoveXY ( i , 88 , 69 ) ;
16525: LD_VAR 0 1
16529: PPUSH
16530: LD_INT 88
16532: PPUSH
16533: LD_INT 69
16535: PPUSH
16536: CALL_OW 111
16540: GO 16498
16542: POP
16543: POP
// p := 0 ;
16544: LD_ADDR_VAR 0 3
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16552: LD_INT 70
16554: PPUSH
16555: CALL_OW 67
// p := 2 ;
16559: LD_ADDR_VAR 0 3
16563: PUSH
16564: LD_INT 2
16566: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16567: LD_VAR 0 2
16571: PPUSH
16572: LD_INT 60
16574: PUSH
16575: EMPTY
16576: LIST
16577: PPUSH
16578: CALL_OW 72
16582: NOT
16583: PUSH
16584: LD_VAR 0 3
16588: PUSH
16589: LD_INT 30
16591: GREATER
16592: OR
16593: IFFALSE 16552
// end ; repeat wait ( 0 0$1 ) ;
16595: LD_INT 35
16597: PPUSH
16598: CALL_OW 67
// for i in tmp do
16602: LD_ADDR_VAR 0 1
16606: PUSH
16607: LD_VAR 0 2
16611: PUSH
16612: FOR_IN
16613: IFFALSE 16645
// if not IsOk ( i ) then
16615: LD_VAR 0 1
16619: PPUSH
16620: CALL_OW 302
16624: NOT
16625: IFFALSE 16643
// tmp := tmp diff i ;
16627: LD_ADDR_VAR 0 2
16631: PUSH
16632: LD_VAR 0 2
16636: PUSH
16637: LD_VAR 0 1
16641: DIFF
16642: ST_TO_ADDR
16643: GO 16612
16645: POP
16646: POP
// AgressiveMove ( tmp , [ 140 , 112 ] ) ;
16647: LD_VAR 0 2
16651: PPUSH
16652: LD_INT 140
16654: PUSH
16655: LD_INT 112
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL 79031 0 2
// until not tmp ;
16666: LD_VAR 0 2
16670: NOT
16671: IFFALSE 16595
// end ;
16673: PPOPN 3
16675: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16676: LD_INT 4
16678: PPUSH
16679: CALL_OW 303
16683: IFFALSE 16698
16685: GO 16687
16687: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16688: LD_INT 3
16690: PPUSH
16691: LD_INT 4
16693: PPUSH
16694: CALL 14866 0 2
16698: END
// every 0 0$1 do
16699: GO 16701
16701: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16702: LD_INT 3
16704: PPUSH
16705: LD_INT 91
16707: PPUSH
16708: LD_INT 3
16710: PPUSH
16711: CALL 12841 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16715: LD_INT 3
16717: PPUSH
16718: LD_INT 47
16720: PPUSH
16721: LD_INT 3
16723: PPUSH
16724: CALL 12841 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16728: LD_INT 3
16730: PPUSH
16731: LD_INT 129
16733: PPUSH
16734: LD_INT 3
16736: PPUSH
16737: CALL 12841 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16741: LD_INT 3
16743: PPUSH
16744: LD_INT 3
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: CALL 12841 0 3
// end ;
16754: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16755: LD_INT 22
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 21
16767: PUSH
16768: LD_INT 3
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PPUSH
16779: CALL_OW 69
16783: IFFALSE 16852
16785: GO 16787
16787: DISABLE
// begin wait ( 0 0$40 ) ;
16788: LD_INT 1400
16790: PPUSH
16791: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16795: LD_INT 3
16797: PPUSH
16798: LD_INT 21
16800: PPUSH
16801: LD_INT 3
16803: PUSH
16804: LD_INT 4
16806: PUSH
16807: LD_INT 5
16809: PUSH
16810: LD_INT 6
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: PUSH
16819: LD_OWVAR 67
16823: ARRAY
16824: PPUSH
16825: LD_INT 46
16827: PUSH
16828: LD_INT 45
16830: PUSH
16831: LD_INT 44
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: LIST
16838: PPUSH
16839: LD_INT 3
16841: PPUSH
16842: LD_INT 3
16844: PPUSH
16845: LD_INT 24
16847: PPUSH
16848: CALL 14091 0 7
// end ;
16852: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16853: LD_EXP 20
16857: PUSH
16858: LD_INT 2
16860: EQUAL
16861: PUSH
16862: LD_INT 21
16864: PPUSH
16865: CALL_OW 255
16869: PUSH
16870: LD_INT 3
16872: EQUAL
16873: AND
16874: PUSH
16875: LD_INT 112
16877: PPUSH
16878: CALL_OW 255
16882: PUSH
16883: LD_INT 3
16885: EQUAL
16886: AND
16887: PUSH
16888: LD_INT 21
16890: PPUSH
16891: CALL_OW 302
16895: AND
16896: PUSH
16897: LD_INT 112
16899: PPUSH
16900: CALL_OW 302
16904: AND
16905: PUSH
16906: LD_INT 22
16908: PUSH
16909: LD_INT 3
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 21
16918: PUSH
16919: LD_INT 2
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 50
16928: PUSH
16929: EMPTY
16930: LIST
16931: PUSH
16932: LD_INT 3
16934: PUSH
16935: LD_INT 58
16937: PUSH
16938: EMPTY
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: PPUSH
16951: CALL_OW 69
16955: PUSH
16956: LD_INT 18
16958: PPUSH
16959: LD_INT 22
16961: PUSH
16962: LD_INT 3
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 21
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PPUSH
16983: CALL_OW 70
16987: PUSH
16988: LD_INT 0
16990: EQUAL
16991: DIFF
16992: AND
16993: IFFALSE 17119
16995: GO 16997
16997: DISABLE
// begin enable ;
16998: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16999: LD_INT 3
17001: PPUSH
17002: LD_INT 21
17004: PPUSH
17005: LD_INT 3
17007: PUSH
17008: LD_INT 4
17010: PUSH
17011: LD_INT 5
17013: PUSH
17014: LD_INT 6
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: PUSH
17023: LD_OWVAR 67
17027: ARRAY
17028: PPUSH
17029: LD_INT 46
17031: PUSH
17032: LD_INT 45
17034: PUSH
17035: LD_INT 44
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: LIST
17042: PPUSH
17043: LD_INT 3
17045: PPUSH
17046: LD_INT 3
17048: PPUSH
17049: LD_INT 24
17051: PPUSH
17052: CALL 14091 0 7
// if russianTimeLapsers = 0 then
17056: LD_EXP 33
17060: PUSH
17061: LD_INT 0
17063: EQUAL
17064: IFFALSE 17119
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17066: LD_INT 3
17068: PPUSH
17069: LD_INT 112
17071: PPUSH
17072: LD_INT 1
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: LD_INT 2
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: LD_OWVAR 67
17094: ARRAY
17095: PPUSH
17096: LD_INT 49
17098: PUSH
17099: LD_INT 49
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PPUSH
17106: LD_INT 3
17108: PPUSH
17109: LD_INT 3
17111: PPUSH
17112: LD_INT 24
17114: PPUSH
17115: CALL 14091 0 7
// end ;
17119: END
// every 0 0$1 trigger arabianMines do var i ;
17120: LD_EXP 37
17124: IFFALSE 17245
17126: GO 17128
17128: DISABLE
17129: LD_INT 0
17131: PPUSH
// begin enable ;
17132: ENABLE
// for i in arabianMines do
17133: LD_ADDR_VAR 0 1
17137: PUSH
17138: LD_EXP 37
17142: PUSH
17143: FOR_IN
17144: IFFALSE 17243
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17146: LD_INT 22
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 92
17158: PUSH
17159: LD_VAR 0 1
17163: PUSH
17164: LD_INT 1
17166: ARRAY
17167: PUSH
17168: LD_VAR 0 1
17172: PUSH
17173: LD_INT 2
17175: ARRAY
17176: PUSH
17177: LD_INT 3
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: IFFALSE 17241
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17196: LD_VAR 0 1
17200: PUSH
17201: LD_INT 1
17203: ARRAY
17204: PPUSH
17205: LD_VAR 0 1
17209: PUSH
17210: LD_INT 2
17212: ARRAY
17213: PPUSH
17214: LD_INT 5
17216: PPUSH
17217: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17221: LD_ADDR_EXP 37
17225: PUSH
17226: LD_EXP 37
17230: PPUSH
17231: LD_VAR 0 1
17235: PPUSH
17236: CALL_OW 3
17240: ST_TO_ADDR
// end ; end ;
17241: GO 17143
17243: POP
17244: POP
// end ;
17245: PPOPN 1
17247: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17248: LD_EXP 21
17252: PUSH
17253: LD_INT 4
17255: GREATEREQUAL
17256: PUSH
17257: LD_EXP 22
17261: PUSH
17262: LD_INT 12
17264: MOD
17265: PUSH
17266: LD_INT 0
17268: EQUAL
17269: AND
17270: IFFALSE 17384
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
// begin enable ;
17279: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17280: LD_ADDR_VAR 0 2
17284: PUSH
17285: LD_INT 122
17287: PUSH
17288: LD_INT 142
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 101
17297: PUSH
17298: LD_INT 127
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 104
17307: PUSH
17308: LD_INT 104
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 46
17317: PUSH
17318: LD_INT 81
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17331: LD_ADDR_VAR 0 1
17335: PUSH
17336: LD_INT 1
17338: PPUSH
17339: LD_INT 4
17341: PPUSH
17342: CALL_OW 12
17346: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17347: LD_INT 10
17349: PPUSH
17350: LD_VAR 0 2
17354: PUSH
17355: LD_VAR 0 1
17359: ARRAY
17360: PUSH
17361: LD_INT 1
17363: ARRAY
17364: PPUSH
17365: LD_VAR 0 2
17369: PUSH
17370: LD_VAR 0 1
17374: ARRAY
17375: PUSH
17376: LD_INT 2
17378: ARRAY
17379: PPUSH
17380: CALL_OW 243
// end ; end_of_file
17384: PPOPN 2
17386: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17387: LD_INT 3
17389: PPUSH
17390: CALL_OW 301
17394: IFFALSE 17615
17396: GO 17398
17398: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17399: LD_EXP 27
17403: PPUSH
17404: LD_INT 50
17406: PUSH
17407: EMPTY
17408: LIST
17409: PPUSH
17410: CALL_OW 72
17414: IFFALSE 17423
// wait ( 0 0$10 ) ;
17416: LD_INT 350
17418: PPUSH
17419: CALL_OW 67
// DialogueOn ;
17423: CALL_OW 6
// if sciCounter = 0 then
17427: LD_EXP 28
17431: PUSH
17432: LD_INT 0
17434: EQUAL
17435: IFFALSE 17463
// begin Say ( JMM , D7a-JMM-1 ) ;
17437: LD_EXP 1
17441: PPUSH
17442: LD_STRING D7a-JMM-1
17444: PPUSH
17445: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17449: LD_EXP 15
17453: PPUSH
17454: LD_STRING D7a-Pow-1
17456: PPUSH
17457: CALL_OW 94
// end else
17461: GO 17607
// if sciCounter < 6 then
17463: LD_EXP 28
17467: PUSH
17468: LD_INT 6
17470: LESS
17471: IFFALSE 17499
// begin Say ( JMM , D7b-JMM-1 ) ;
17473: LD_EXP 1
17477: PPUSH
17478: LD_STRING D7b-JMM-1
17480: PPUSH
17481: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17485: LD_EXP 15
17489: PPUSH
17490: LD_STRING D7b-Pow-1
17492: PPUSH
17493: CALL_OW 94
// end else
17497: GO 17607
// begin Say ( JMM , D7c-JMM-1 ) ;
17499: LD_EXP 1
17503: PPUSH
17504: LD_STRING D7c-JMM-1
17506: PPUSH
17507: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17511: LD_EXP 15
17515: PPUSH
17516: LD_STRING D7c-Pow-1
17518: PPUSH
17519: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17523: LD_EXP 1
17527: PPUSH
17528: LD_STRING D7d-JMM-1
17530: PPUSH
17531: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17535: LD_EXP 15
17539: PPUSH
17540: LD_STRING D7d-Pow-1
17542: PPUSH
17543: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17547: LD_EXP 1
17551: PPUSH
17552: LD_STRING D7d-JMM-2
17554: PPUSH
17555: CALL_OW 88
// if askSiberite = 1 then
17559: LD_EXP 25
17563: PUSH
17564: LD_INT 1
17566: EQUAL
17567: IFFALSE 17583
// Say ( JMM , D7d-JMM-2a ) else
17569: LD_EXP 1
17573: PPUSH
17574: LD_STRING D7d-JMM-2a
17576: PPUSH
17577: CALL_OW 88
17581: GO 17595
// SayRadio ( Powell , D7d-Pow-2 ) ;
17583: LD_EXP 15
17587: PPUSH
17588: LD_STRING D7d-Pow-2
17590: PPUSH
17591: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17595: LD_EXP 15
17599: PPUSH
17600: LD_STRING D7d-Pow-2a
17602: PPUSH
17603: CALL_OW 94
// end ; DialogueOff ;
17607: CALL_OW 7
// FinishMission ;
17611: CALL 17616 0 0
// end ;
17615: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17616: LD_INT 0
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
// m1 := false ;
17622: LD_ADDR_VAR 0 2
17626: PUSH
17627: LD_INT 0
17629: ST_TO_ADDR
// m2 := false ;
17630: LD_ADDR_VAR 0 3
17634: PUSH
17635: LD_INT 0
17637: ST_TO_ADDR
// m3 := false ;
17638: LD_ADDR_VAR 0 4
17642: PUSH
17643: LD_INT 0
17645: ST_TO_ADDR
// if not westPathUsed then
17646: LD_EXP 42
17650: NOT
17651: IFFALSE 17660
// SetAchievement ( ACH_PATH ) ;
17653: LD_STRING ACH_PATH
17655: PPUSH
17656: CALL_OW 543
// if not rocketBuilded then
17660: LD_EXP 44
17664: NOT
17665: IFFALSE 17681
// begin wait ( 3 ) ;
17667: LD_INT 3
17669: PPUSH
17670: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17674: LD_STRING ACH_ROCKET
17676: PPUSH
17677: CALL_OW 543
// end ; if tick <= 40 40$00 then
17681: LD_OWVAR 1
17685: PUSH
17686: LD_INT 84000
17688: LESSEQUAL
17689: IFFALSE 17705
// begin wait ( 3 ) ;
17691: LD_INT 3
17693: PPUSH
17694: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17698: LD_STRING ACH_ASPEED_12
17700: PPUSH
17701: CALL_OW 543
// end ; if teleportExplored = 1 then
17705: LD_EXP 26
17709: PUSH
17710: LD_INT 1
17712: EQUAL
17713: IFFALSE 17735
// begin m1 := true ;
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: LD_INT 1
17722: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17723: LD_STRING Teleport
17725: PPUSH
17726: LD_INT 1
17728: PPUSH
17729: CALL_OW 101
// end else
17733: GO 17746
// AddMedal ( Teleport , - 1 ) ;
17735: LD_STRING Teleport
17737: PPUSH
17738: LD_INT 1
17740: NEG
17741: PPUSH
17742: CALL_OW 101
// if sciCounter > 2 then
17746: LD_EXP 28
17750: PUSH
17751: LD_INT 2
17753: GREATER
17754: IFFALSE 17776
// begin m2 := true ;
17756: LD_ADDR_VAR 0 3
17760: PUSH
17761: LD_INT 1
17763: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17764: LD_STRING Materials
17766: PPUSH
17767: LD_INT 1
17769: PPUSH
17770: CALL_OW 101
// end else
17774: GO 17787
// AddMedal ( Materials , - 1 ) ;
17776: LD_STRING Materials
17778: PPUSH
17779: LD_INT 1
17781: NEG
17782: PPUSH
17783: CALL_OW 101
// if sciCounter >= 6 then
17787: LD_EXP 28
17791: PUSH
17792: LD_INT 6
17794: GREATEREQUAL
17795: IFFALSE 17827
// begin m3 := true ;
17797: LD_ADDR_VAR 0 4
17801: PUSH
17802: LD_INT 1
17804: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17805: LD_STRING Scientists
17807: PPUSH
17808: LD_INT 1
17810: PPUSH
17811: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17815: LD_INT 1
17817: PPUSH
17818: LD_STRING 12_SciDed_1
17820: PPUSH
17821: CALL_OW 39
// end else
17825: GO 17848
// begin AddMedal ( Scientists , - 1 ) ;
17827: LD_STRING Scientists
17829: PPUSH
17830: LD_INT 1
17832: NEG
17833: PPUSH
17834: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17838: LD_INT 0
17840: PPUSH
17841: LD_STRING 12_SciDed_1
17843: PPUSH
17844: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17848: LD_EXP 24
17852: PPUSH
17853: LD_STRING 12_MainDepositFake_1
17855: PPUSH
17856: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17860: LD_VAR 0 2
17864: PUSH
17865: LD_VAR 0 3
17869: AND
17870: PUSH
17871: LD_VAR 0 4
17875: AND
17876: PUSH
17877: LD_OWVAR 67
17881: PUSH
17882: LD_INT 3
17884: GREATEREQUAL
17885: AND
17886: IFFALSE 17898
// SetAchievementEX ( ACH_AMER , 12 ) ;
17888: LD_STRING ACH_AMER
17890: PPUSH
17891: LD_INT 12
17893: PPUSH
17894: CALL_OW 564
// GiveMedals ( MAIN ) ;
17898: LD_STRING MAIN
17900: PPUSH
17901: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17905: LD_INT 22
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 21
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: LD_INT 25
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 25
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 25
17950: PUSH
17951: LD_INT 3
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 25
17960: PUSH
17961: LD_INT 4
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 25
17970: PUSH
17971: LD_INT 5
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 25
17980: PUSH
17981: LD_INT 8
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 69
18006: PPUSH
18007: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18011: LD_EXP 1
18015: PPUSH
18016: LD_EXP 39
18020: PUSH
18021: LD_STRING JMM
18023: STR
18024: PPUSH
18025: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18029: LD_EXP 7
18033: PPUSH
18034: LD_EXP 39
18038: PUSH
18039: LD_STRING Brown
18041: STR
18042: PPUSH
18043: CALL 12186 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18047: LD_EXP 3
18051: PPUSH
18052: LD_EXP 39
18056: PUSH
18057: LD_STRING Donaldson
18059: STR
18060: PPUSH
18061: CALL 12186 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18065: LD_EXP 4
18069: PPUSH
18070: LD_EXP 39
18074: PUSH
18075: LD_STRING Bobby
18077: STR
18078: PPUSH
18079: CALL 12186 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18083: LD_EXP 5
18087: PPUSH
18088: LD_EXP 39
18092: PUSH
18093: LD_STRING Cyrus
18095: STR
18096: PPUSH
18097: CALL 12186 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18101: LD_EXP 2
18105: PPUSH
18106: LD_EXP 39
18110: PUSH
18111: LD_STRING Lisa
18113: STR
18114: PPUSH
18115: CALL 12186 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18119: LD_EXP 12
18123: PPUSH
18124: LD_EXP 39
18128: PUSH
18129: LD_STRING Frank
18131: STR
18132: PPUSH
18133: CALL 12186 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18137: LD_EXP 13
18141: PPUSH
18142: LD_EXP 39
18146: PUSH
18147: LD_STRING Kikuchi
18149: STR
18150: PPUSH
18151: CALL 12186 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18155: LD_EXP 9
18159: PPUSH
18160: LD_EXP 39
18164: PUSH
18165: LD_STRING Houten
18167: STR
18168: PPUSH
18169: CALL 12186 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18173: LD_EXP 11
18177: PPUSH
18178: LD_EXP 39
18182: PUSH
18183: LD_STRING Gary
18185: STR
18186: PPUSH
18187: CALL 12186 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18191: LD_EXP 10
18195: PPUSH
18196: LD_EXP 39
18200: PUSH
18201: LD_STRING Cornell
18203: STR
18204: PPUSH
18205: CALL 12186 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18209: LD_EXP 6
18213: PPUSH
18214: LD_EXP 39
18218: PUSH
18219: LD_STRING Denis
18221: STR
18222: PPUSH
18223: CALL 12186 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18227: LD_EXP 8
18231: PPUSH
18232: LD_EXP 39
18236: PUSH
18237: LD_STRING Gladstone
18239: STR
18240: PPUSH
18241: CALL 12186 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18245: LD_INT 22
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 23
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 21
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 2
18277: PUSH
18278: LD_INT 25
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 25
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 25
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 25
18310: PUSH
18311: LD_INT 4
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 25
18320: PUSH
18321: LD_INT 5
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 25
18330: PUSH
18331: LD_INT 8
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: PPUSH
18353: CALL_OW 69
18357: PUSH
18358: LD_EXP 1
18362: PUSH
18363: LD_EXP 7
18367: PUSH
18368: LD_EXP 3
18372: PUSH
18373: LD_EXP 4
18377: PUSH
18378: LD_EXP 5
18382: PUSH
18383: LD_EXP 2
18387: PUSH
18388: LD_EXP 12
18392: PUSH
18393: LD_EXP 8
18397: PUSH
18398: LD_EXP 13
18402: PUSH
18403: LD_EXP 6
18407: PUSH
18408: LD_EXP 9
18412: PUSH
18413: LD_EXP 11
18417: PUSH
18418: LD_EXP 10
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: DIFF
18438: PPUSH
18439: LD_STRING 12_other_survivors
18441: PPUSH
18442: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18446: LD_INT 22
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 23
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 21
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 2
18478: PUSH
18479: LD_INT 25
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 25
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 25
18501: PUSH
18502: LD_INT 3
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 25
18511: PUSH
18512: LD_INT 4
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 25
18521: PUSH
18522: LD_INT 5
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 25
18531: PUSH
18532: LD_INT 8
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: PPUSH
18554: CALL_OW 69
18558: PPUSH
18559: LD_STRING 12_kurt_squad
18561: PPUSH
18562: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18566: LD_EXP 14
18570: PPUSH
18571: LD_STRING 12_others
18573: PPUSH
18574: CALL_OW 38
// YouWin ;
18578: CALL_OW 103
// end ; end_of_file
18582: LD_VAR 0 1
18586: RET
// every 0 0$01 trigger ruAI do
18587: LD_EXP 34
18591: IFFALSE 18901
18593: GO 18595
18595: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18596: LD_INT 280
18598: PPUSH
18599: CALL_OW 67
// if cratesSpawned < 12 then
18603: LD_EXP 38
18607: PUSH
18608: LD_INT 12
18610: LESS
18611: IFFALSE 18663
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18613: LD_INT 105
18615: PPUSH
18616: LD_INT 350
18618: PPUSH
18619: CALL_OW 12
18623: PPUSH
18624: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18628: LD_INT 3
18630: PPUSH
18631: LD_INT 5
18633: PPUSH
18634: CALL_OW 12
18638: PPUSH
18639: LD_INT 21
18641: PPUSH
18642: LD_INT 1
18644: PPUSH
18645: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18649: LD_ADDR_EXP 38
18653: PUSH
18654: LD_EXP 38
18658: PUSH
18659: LD_INT 1
18661: PLUS
18662: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18663: LD_EXP 38
18667: PUSH
18668: LD_INT 12
18670: GREATEREQUAL
18671: PUSH
18672: LD_EXP 38
18676: PUSH
18677: LD_INT 32
18679: LESS
18680: AND
18681: IFFALSE 18733
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18683: LD_INT 420
18685: PPUSH
18686: LD_INT 700
18688: PPUSH
18689: CALL_OW 12
18693: PPUSH
18694: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18698: LD_INT 3
18700: PPUSH
18701: LD_INT 5
18703: PPUSH
18704: CALL_OW 12
18708: PPUSH
18709: LD_INT 21
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18719: LD_ADDR_EXP 38
18723: PUSH
18724: LD_EXP 38
18728: PUSH
18729: LD_INT 1
18731: PLUS
18732: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18733: LD_EXP 38
18737: PUSH
18738: LD_INT 32
18740: GREATEREQUAL
18741: IFFALSE 18815
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18743: LD_INT 21
18745: PPUSH
18746: CALL_OW 435
18750: PUSH
18751: LD_INT 14
18753: LESS
18754: IFFALSE 18765
// wait ( 0 0$10 ) else
18756: LD_INT 350
18758: PPUSH
18759: CALL_OW 67
18763: GO 18780
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18765: LD_INT 1750
18767: PPUSH
18768: LD_INT 3150
18770: PPUSH
18771: CALL_OW 12
18775: PPUSH
18776: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18780: LD_INT 2
18782: PPUSH
18783: LD_INT 5
18785: PPUSH
18786: CALL_OW 12
18790: PPUSH
18791: LD_INT 21
18793: PPUSH
18794: LD_INT 1
18796: PPUSH
18797: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18801: LD_ADDR_EXP 38
18805: PUSH
18806: LD_EXP 38
18810: PUSH
18811: LD_INT 1
18813: PLUS
18814: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18815: LD_EXP 38
18819: PUSH
18820: LD_INT 110
18822: GREATEREQUAL
18823: IFFALSE 18897
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18825: LD_INT 21
18827: PPUSH
18828: CALL_OW 435
18832: PUSH
18833: LD_INT 14
18835: LESS
18836: IFFALSE 18847
// wait ( 0 0$20 ) else
18838: LD_INT 700
18840: PPUSH
18841: CALL_OW 67
18845: GO 18862
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18847: LD_INT 2450
18849: PPUSH
18850: LD_INT 3850
18852: PPUSH
18853: CALL_OW 12
18857: PPUSH
18858: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18862: LD_INT 1
18864: PPUSH
18865: LD_INT 5
18867: PPUSH
18868: CALL_OW 12
18872: PPUSH
18873: LD_INT 21
18875: PPUSH
18876: LD_INT 1
18878: PPUSH
18879: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18883: LD_ADDR_EXP 38
18887: PUSH
18888: LD_EXP 38
18892: PUSH
18893: LD_INT 1
18895: PLUS
18896: ST_TO_ADDR
// end ; until false ;
18897: LD_INT 0
18899: IFFALSE 18596
// end ; end_of_file
18901: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
18902: LD_INT 0
18904: PPUSH
// ar_miner := 81 ;
18905: LD_ADDR_EXP 52
18909: PUSH
18910: LD_INT 81
18912: ST_TO_ADDR
// ar_crane := 88 ;
18913: LD_ADDR_EXP 51
18917: PUSH
18918: LD_INT 88
18920: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18921: LD_ADDR_EXP 46
18925: PUSH
18926: LD_INT 89
18928: ST_TO_ADDR
// us_hack := 99 ;
18929: LD_ADDR_EXP 47
18933: PUSH
18934: LD_INT 99
18936: ST_TO_ADDR
// us_artillery := 97 ;
18937: LD_ADDR_EXP 48
18941: PUSH
18942: LD_INT 97
18944: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18945: LD_ADDR_EXP 49
18949: PUSH
18950: LD_INT 91
18952: ST_TO_ADDR
// ar_mortar := 92 ;
18953: LD_ADDR_EXP 50
18957: PUSH
18958: LD_INT 92
18960: ST_TO_ADDR
// ru_flamethrower := 93 ;
18961: LD_ADDR_EXP 53
18965: PUSH
18966: LD_INT 93
18968: ST_TO_ADDR
// ru_radar := 98 ;
18969: LD_ADDR_EXP 45
18973: PUSH
18974: LD_INT 98
18976: ST_TO_ADDR
// tech_Artillery := 80 ;
18977: LD_ADDR_EXP 54
18981: PUSH
18982: LD_INT 80
18984: ST_TO_ADDR
// tech_RadMat := 81 ;
18985: LD_ADDR_EXP 55
18989: PUSH
18990: LD_INT 81
18992: ST_TO_ADDR
// tech_BasicTools := 82 ;
18993: LD_ADDR_EXP 56
18997: PUSH
18998: LD_INT 82
19000: ST_TO_ADDR
// tech_Cargo := 83 ;
19001: LD_ADDR_EXP 57
19005: PUSH
19006: LD_INT 83
19008: ST_TO_ADDR
// tech_Track := 84 ;
19009: LD_ADDR_EXP 58
19013: PUSH
19014: LD_INT 84
19016: ST_TO_ADDR
// tech_Crane := 85 ;
19017: LD_ADDR_EXP 59
19021: PUSH
19022: LD_INT 85
19024: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19025: LD_ADDR_EXP 60
19029: PUSH
19030: LD_INT 86
19032: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19033: LD_ADDR_EXP 61
19037: PUSH
19038: LD_INT 87
19040: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19041: LD_ADDR_EXP 62
19045: PUSH
19046: LD_INT 88
19048: ST_TO_ADDR
// end ;
19049: LD_VAR 0 1
19053: RET
// every 1 do
19054: GO 19056
19056: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19057: CALL 18902 0 0
19061: END
// every 0 0$1 do
19062: GO 19064
19064: DISABLE
// begin enable ;
19065: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19066: LD_STRING updateTimer(
19068: PUSH
19069: LD_OWVAR 1
19073: STR
19074: PUSH
19075: LD_STRING );
19077: STR
19078: PPUSH
19079: CALL_OW 559
// end ;
19083: END
// export function SOS_MapStart ( ) ; begin
19084: LD_INT 0
19086: PPUSH
// if streamModeActive then
19087: LD_EXP 63
19091: IFFALSE 19100
// DefineStreamItems ( true ) ;
19093: LD_INT 1
19095: PPUSH
19096: CALL 20754 0 1
// UpdateFactoryWaypoints ( ) ;
19100: CALL 33615 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19104: CALL 33872 0 0
// end ;
19108: LD_VAR 0 1
19112: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19113: LD_INT 0
19115: PPUSH
// if p2 = 100 then
19116: LD_VAR 0 2
19120: PUSH
19121: LD_INT 100
19123: EQUAL
19124: IFFALSE 20127
// begin if not StreamModeActive then
19126: LD_EXP 63
19130: NOT
19131: IFFALSE 19141
// StreamModeActive := true ;
19133: LD_ADDR_EXP 63
19137: PUSH
19138: LD_INT 1
19140: ST_TO_ADDR
// if p3 = 0 then
19141: LD_VAR 0 3
19145: PUSH
19146: LD_INT 0
19148: EQUAL
19149: IFFALSE 19155
// InitStreamMode ;
19151: CALL 20290 0 0
// if p3 = 1 then
19155: LD_VAR 0 3
19159: PUSH
19160: LD_INT 1
19162: EQUAL
19163: IFFALSE 19173
// sRocket := true ;
19165: LD_ADDR_EXP 68
19169: PUSH
19170: LD_INT 1
19172: ST_TO_ADDR
// if p3 = 2 then
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 2
19180: EQUAL
19181: IFFALSE 19191
// sSpeed := true ;
19183: LD_ADDR_EXP 67
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
// if p3 = 3 then
19191: LD_VAR 0 3
19195: PUSH
19196: LD_INT 3
19198: EQUAL
19199: IFFALSE 19209
// sEngine := true ;
19201: LD_ADDR_EXP 69
19205: PUSH
19206: LD_INT 1
19208: ST_TO_ADDR
// if p3 = 4 then
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 4
19216: EQUAL
19217: IFFALSE 19227
// sSpec := true ;
19219: LD_ADDR_EXP 66
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// if p3 = 5 then
19227: LD_VAR 0 3
19231: PUSH
19232: LD_INT 5
19234: EQUAL
19235: IFFALSE 19245
// sLevel := true ;
19237: LD_ADDR_EXP 70
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// if p3 = 6 then
19245: LD_VAR 0 3
19249: PUSH
19250: LD_INT 6
19252: EQUAL
19253: IFFALSE 19263
// sArmoury := true ;
19255: LD_ADDR_EXP 71
19259: PUSH
19260: LD_INT 1
19262: ST_TO_ADDR
// if p3 = 7 then
19263: LD_VAR 0 3
19267: PUSH
19268: LD_INT 7
19270: EQUAL
19271: IFFALSE 19281
// sRadar := true ;
19273: LD_ADDR_EXP 72
19277: PUSH
19278: LD_INT 1
19280: ST_TO_ADDR
// if p3 = 8 then
19281: LD_VAR 0 3
19285: PUSH
19286: LD_INT 8
19288: EQUAL
19289: IFFALSE 19299
// sBunker := true ;
19291: LD_ADDR_EXP 73
19295: PUSH
19296: LD_INT 1
19298: ST_TO_ADDR
// if p3 = 9 then
19299: LD_VAR 0 3
19303: PUSH
19304: LD_INT 9
19306: EQUAL
19307: IFFALSE 19317
// sHack := true ;
19309: LD_ADDR_EXP 74
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// if p3 = 10 then
19317: LD_VAR 0 3
19321: PUSH
19322: LD_INT 10
19324: EQUAL
19325: IFFALSE 19335
// sFire := true ;
19327: LD_ADDR_EXP 75
19331: PUSH
19332: LD_INT 1
19334: ST_TO_ADDR
// if p3 = 11 then
19335: LD_VAR 0 3
19339: PUSH
19340: LD_INT 11
19342: EQUAL
19343: IFFALSE 19353
// sRefresh := true ;
19345: LD_ADDR_EXP 76
19349: PUSH
19350: LD_INT 1
19352: ST_TO_ADDR
// if p3 = 12 then
19353: LD_VAR 0 3
19357: PUSH
19358: LD_INT 12
19360: EQUAL
19361: IFFALSE 19371
// sExp := true ;
19363: LD_ADDR_EXP 77
19367: PUSH
19368: LD_INT 1
19370: ST_TO_ADDR
// if p3 = 13 then
19371: LD_VAR 0 3
19375: PUSH
19376: LD_INT 13
19378: EQUAL
19379: IFFALSE 19389
// sDepot := true ;
19381: LD_ADDR_EXP 78
19385: PUSH
19386: LD_INT 1
19388: ST_TO_ADDR
// if p3 = 14 then
19389: LD_VAR 0 3
19393: PUSH
19394: LD_INT 14
19396: EQUAL
19397: IFFALSE 19407
// sFlag := true ;
19399: LD_ADDR_EXP 79
19403: PUSH
19404: LD_INT 1
19406: ST_TO_ADDR
// if p3 = 15 then
19407: LD_VAR 0 3
19411: PUSH
19412: LD_INT 15
19414: EQUAL
19415: IFFALSE 19425
// sKamikadze := true ;
19417: LD_ADDR_EXP 87
19421: PUSH
19422: LD_INT 1
19424: ST_TO_ADDR
// if p3 = 16 then
19425: LD_VAR 0 3
19429: PUSH
19430: LD_INT 16
19432: EQUAL
19433: IFFALSE 19443
// sTroll := true ;
19435: LD_ADDR_EXP 88
19439: PUSH
19440: LD_INT 1
19442: ST_TO_ADDR
// if p3 = 17 then
19443: LD_VAR 0 3
19447: PUSH
19448: LD_INT 17
19450: EQUAL
19451: IFFALSE 19461
// sSlow := true ;
19453: LD_ADDR_EXP 89
19457: PUSH
19458: LD_INT 1
19460: ST_TO_ADDR
// if p3 = 18 then
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 18
19468: EQUAL
19469: IFFALSE 19479
// sLack := true ;
19471: LD_ADDR_EXP 90
19475: PUSH
19476: LD_INT 1
19478: ST_TO_ADDR
// if p3 = 19 then
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 19
19486: EQUAL
19487: IFFALSE 19497
// sTank := true ;
19489: LD_ADDR_EXP 92
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
// if p3 = 20 then
19497: LD_VAR 0 3
19501: PUSH
19502: LD_INT 20
19504: EQUAL
19505: IFFALSE 19515
// sRemote := true ;
19507: LD_ADDR_EXP 93
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// if p3 = 21 then
19515: LD_VAR 0 3
19519: PUSH
19520: LD_INT 21
19522: EQUAL
19523: IFFALSE 19533
// sPowell := true ;
19525: LD_ADDR_EXP 94
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// if p3 = 22 then
19533: LD_VAR 0 3
19537: PUSH
19538: LD_INT 22
19540: EQUAL
19541: IFFALSE 19551
// sTeleport := true ;
19543: LD_ADDR_EXP 97
19547: PUSH
19548: LD_INT 1
19550: ST_TO_ADDR
// if p3 = 23 then
19551: LD_VAR 0 3
19555: PUSH
19556: LD_INT 23
19558: EQUAL
19559: IFFALSE 19569
// sOilTower := true ;
19561: LD_ADDR_EXP 99
19565: PUSH
19566: LD_INT 1
19568: ST_TO_ADDR
// if p3 = 24 then
19569: LD_VAR 0 3
19573: PUSH
19574: LD_INT 24
19576: EQUAL
19577: IFFALSE 19587
// sShovel := true ;
19579: LD_ADDR_EXP 100
19583: PUSH
19584: LD_INT 1
19586: ST_TO_ADDR
// if p3 = 25 then
19587: LD_VAR 0 3
19591: PUSH
19592: LD_INT 25
19594: EQUAL
19595: IFFALSE 19605
// sSheik := true ;
19597: LD_ADDR_EXP 101
19601: PUSH
19602: LD_INT 1
19604: ST_TO_ADDR
// if p3 = 26 then
19605: LD_VAR 0 3
19609: PUSH
19610: LD_INT 26
19612: EQUAL
19613: IFFALSE 19623
// sEarthquake := true ;
19615: LD_ADDR_EXP 103
19619: PUSH
19620: LD_INT 1
19622: ST_TO_ADDR
// if p3 = 27 then
19623: LD_VAR 0 3
19627: PUSH
19628: LD_INT 27
19630: EQUAL
19631: IFFALSE 19641
// sAI := true ;
19633: LD_ADDR_EXP 104
19637: PUSH
19638: LD_INT 1
19640: ST_TO_ADDR
// if p3 = 28 then
19641: LD_VAR 0 3
19645: PUSH
19646: LD_INT 28
19648: EQUAL
19649: IFFALSE 19659
// sCargo := true ;
19651: LD_ADDR_EXP 107
19655: PUSH
19656: LD_INT 1
19658: ST_TO_ADDR
// if p3 = 29 then
19659: LD_VAR 0 3
19663: PUSH
19664: LD_INT 29
19666: EQUAL
19667: IFFALSE 19677
// sDLaser := true ;
19669: LD_ADDR_EXP 108
19673: PUSH
19674: LD_INT 1
19676: ST_TO_ADDR
// if p3 = 30 then
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 30
19684: EQUAL
19685: IFFALSE 19695
// sExchange := true ;
19687: LD_ADDR_EXP 109
19691: PUSH
19692: LD_INT 1
19694: ST_TO_ADDR
// if p3 = 31 then
19695: LD_VAR 0 3
19699: PUSH
19700: LD_INT 31
19702: EQUAL
19703: IFFALSE 19713
// sFac := true ;
19705: LD_ADDR_EXP 110
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// if p3 = 32 then
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 32
19720: EQUAL
19721: IFFALSE 19731
// sPower := true ;
19723: LD_ADDR_EXP 111
19727: PUSH
19728: LD_INT 1
19730: ST_TO_ADDR
// if p3 = 33 then
19731: LD_VAR 0 3
19735: PUSH
19736: LD_INT 33
19738: EQUAL
19739: IFFALSE 19749
// sRandom := true ;
19741: LD_ADDR_EXP 112
19745: PUSH
19746: LD_INT 1
19748: ST_TO_ADDR
// if p3 = 34 then
19749: LD_VAR 0 3
19753: PUSH
19754: LD_INT 34
19756: EQUAL
19757: IFFALSE 19767
// sShield := true ;
19759: LD_ADDR_EXP 113
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// if p3 = 35 then
19767: LD_VAR 0 3
19771: PUSH
19772: LD_INT 35
19774: EQUAL
19775: IFFALSE 19785
// sTime := true ;
19777: LD_ADDR_EXP 114
19781: PUSH
19782: LD_INT 1
19784: ST_TO_ADDR
// if p3 = 36 then
19785: LD_VAR 0 3
19789: PUSH
19790: LD_INT 36
19792: EQUAL
19793: IFFALSE 19803
// sTools := true ;
19795: LD_ADDR_EXP 115
19799: PUSH
19800: LD_INT 1
19802: ST_TO_ADDR
// if p3 = 101 then
19803: LD_VAR 0 3
19807: PUSH
19808: LD_INT 101
19810: EQUAL
19811: IFFALSE 19821
// sSold := true ;
19813: LD_ADDR_EXP 80
19817: PUSH
19818: LD_INT 1
19820: ST_TO_ADDR
// if p3 = 102 then
19821: LD_VAR 0 3
19825: PUSH
19826: LD_INT 102
19828: EQUAL
19829: IFFALSE 19839
// sDiff := true ;
19831: LD_ADDR_EXP 81
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// if p3 = 103 then
19839: LD_VAR 0 3
19843: PUSH
19844: LD_INT 103
19846: EQUAL
19847: IFFALSE 19857
// sFog := true ;
19849: LD_ADDR_EXP 84
19853: PUSH
19854: LD_INT 1
19856: ST_TO_ADDR
// if p3 = 104 then
19857: LD_VAR 0 3
19861: PUSH
19862: LD_INT 104
19864: EQUAL
19865: IFFALSE 19875
// sReset := true ;
19867: LD_ADDR_EXP 85
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// if p3 = 105 then
19875: LD_VAR 0 3
19879: PUSH
19880: LD_INT 105
19882: EQUAL
19883: IFFALSE 19893
// sSun := true ;
19885: LD_ADDR_EXP 86
19889: PUSH
19890: LD_INT 1
19892: ST_TO_ADDR
// if p3 = 106 then
19893: LD_VAR 0 3
19897: PUSH
19898: LD_INT 106
19900: EQUAL
19901: IFFALSE 19911
// sTiger := true ;
19903: LD_ADDR_EXP 82
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
// if p3 = 107 then
19911: LD_VAR 0 3
19915: PUSH
19916: LD_INT 107
19918: EQUAL
19919: IFFALSE 19929
// sBomb := true ;
19921: LD_ADDR_EXP 83
19925: PUSH
19926: LD_INT 1
19928: ST_TO_ADDR
// if p3 = 108 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 108
19936: EQUAL
19937: IFFALSE 19947
// sWound := true ;
19939: LD_ADDR_EXP 91
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 109 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 109
19954: EQUAL
19955: IFFALSE 19965
// sBetray := true ;
19957: LD_ADDR_EXP 95
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 110 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 110
19972: EQUAL
19973: IFFALSE 19983
// sContamin := true ;
19975: LD_ADDR_EXP 96
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// if p3 = 111 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 111
19990: EQUAL
19991: IFFALSE 20001
// sOil := true ;
19993: LD_ADDR_EXP 98
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 112 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 112
20008: EQUAL
20009: IFFALSE 20019
// sStu := true ;
20011: LD_ADDR_EXP 102
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 113 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 113
20026: EQUAL
20027: IFFALSE 20037
// sBazooka := true ;
20029: LD_ADDR_EXP 105
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 114 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 114
20044: EQUAL
20045: IFFALSE 20055
// sMortar := true ;
20047: LD_ADDR_EXP 106
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 115 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 115
20062: EQUAL
20063: IFFALSE 20073
// sRanger := true ;
20065: LD_ADDR_EXP 116
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 116 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 116
20080: EQUAL
20081: IFFALSE 20091
// sComputer := true ;
20083: LD_ADDR_EXP 117
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 117 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 117
20098: EQUAL
20099: IFFALSE 20109
// s30 := true ;
20101: LD_ADDR_EXP 118
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 118 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 118
20116: EQUAL
20117: IFFALSE 20127
// s60 := true ;
20119: LD_ADDR_EXP 119
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// end ; if p2 = 101 then
20127: LD_VAR 0 2
20131: PUSH
20132: LD_INT 101
20134: EQUAL
20135: IFFALSE 20263
// begin case p3 of 1 :
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 1
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20157
20150: POP
// hHackUnlimitedResources ; 2 :
20151: CALL 32361 0 0
20155: GO 20263
20157: LD_INT 2
20159: DOUBLE
20160: EQUAL
20161: IFTRUE 20165
20163: GO 20172
20165: POP
// hHackSetLevel10 ; 3 :
20166: CALL 32494 0 0
20170: GO 20263
20172: LD_INT 3
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20187
20180: POP
// hHackSetLevel10YourUnits ; 4 :
20181: CALL 32579 0 0
20185: GO 20263
20187: LD_INT 4
20189: DOUBLE
20190: EQUAL
20191: IFTRUE 20195
20193: GO 20202
20195: POP
// hHackInvincible ; 5 :
20196: CALL 33027 0 0
20200: GO 20263
20202: LD_INT 5
20204: DOUBLE
20205: EQUAL
20206: IFTRUE 20210
20208: GO 20217
20210: POP
// hHackInvisible ; 6 :
20211: CALL 33138 0 0
20215: GO 20263
20217: LD_INT 6
20219: DOUBLE
20220: EQUAL
20221: IFTRUE 20225
20223: GO 20232
20225: POP
// hHackChangeYourSide ; 7 :
20226: CALL 33195 0 0
20230: GO 20263
20232: LD_INT 7
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20247
20240: POP
// hHackChangeUnitSide ; 8 :
20241: CALL 33237 0 0
20245: GO 20263
20247: LD_INT 8
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20262
20255: POP
// hHackFog ; end ;
20256: CALL 33338 0 0
20260: GO 20263
20262: POP
// end ; end ;
20263: LD_VAR 0 7
20267: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20268: GO 20270
20270: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20271: LD_STRING initStreamRollete();
20273: PPUSH
20274: CALL_OW 559
// InitStreamMode ;
20278: CALL 20290 0 0
// DefineStreamItems ( false ) ;
20282: LD_INT 0
20284: PPUSH
20285: CALL 20754 0 1
// end ;
20289: END
// function InitStreamMode ; begin
20290: LD_INT 0
20292: PPUSH
// streamModeActive := false ;
20293: LD_ADDR_EXP 63
20297: PUSH
20298: LD_INT 0
20300: ST_TO_ADDR
// normalCounter := 36 ;
20301: LD_ADDR_EXP 64
20305: PUSH
20306: LD_INT 36
20308: ST_TO_ADDR
// hardcoreCounter := 18 ;
20309: LD_ADDR_EXP 65
20313: PUSH
20314: LD_INT 18
20316: ST_TO_ADDR
// sRocket := false ;
20317: LD_ADDR_EXP 68
20321: PUSH
20322: LD_INT 0
20324: ST_TO_ADDR
// sSpeed := false ;
20325: LD_ADDR_EXP 67
20329: PUSH
20330: LD_INT 0
20332: ST_TO_ADDR
// sEngine := false ;
20333: LD_ADDR_EXP 69
20337: PUSH
20338: LD_INT 0
20340: ST_TO_ADDR
// sSpec := false ;
20341: LD_ADDR_EXP 66
20345: PUSH
20346: LD_INT 0
20348: ST_TO_ADDR
// sLevel := false ;
20349: LD_ADDR_EXP 70
20353: PUSH
20354: LD_INT 0
20356: ST_TO_ADDR
// sArmoury := false ;
20357: LD_ADDR_EXP 71
20361: PUSH
20362: LD_INT 0
20364: ST_TO_ADDR
// sRadar := false ;
20365: LD_ADDR_EXP 72
20369: PUSH
20370: LD_INT 0
20372: ST_TO_ADDR
// sBunker := false ;
20373: LD_ADDR_EXP 73
20377: PUSH
20378: LD_INT 0
20380: ST_TO_ADDR
// sHack := false ;
20381: LD_ADDR_EXP 74
20385: PUSH
20386: LD_INT 0
20388: ST_TO_ADDR
// sFire := false ;
20389: LD_ADDR_EXP 75
20393: PUSH
20394: LD_INT 0
20396: ST_TO_ADDR
// sRefresh := false ;
20397: LD_ADDR_EXP 76
20401: PUSH
20402: LD_INT 0
20404: ST_TO_ADDR
// sExp := false ;
20405: LD_ADDR_EXP 77
20409: PUSH
20410: LD_INT 0
20412: ST_TO_ADDR
// sDepot := false ;
20413: LD_ADDR_EXP 78
20417: PUSH
20418: LD_INT 0
20420: ST_TO_ADDR
// sFlag := false ;
20421: LD_ADDR_EXP 79
20425: PUSH
20426: LD_INT 0
20428: ST_TO_ADDR
// sKamikadze := false ;
20429: LD_ADDR_EXP 87
20433: PUSH
20434: LD_INT 0
20436: ST_TO_ADDR
// sTroll := false ;
20437: LD_ADDR_EXP 88
20441: PUSH
20442: LD_INT 0
20444: ST_TO_ADDR
// sSlow := false ;
20445: LD_ADDR_EXP 89
20449: PUSH
20450: LD_INT 0
20452: ST_TO_ADDR
// sLack := false ;
20453: LD_ADDR_EXP 90
20457: PUSH
20458: LD_INT 0
20460: ST_TO_ADDR
// sTank := false ;
20461: LD_ADDR_EXP 92
20465: PUSH
20466: LD_INT 0
20468: ST_TO_ADDR
// sRemote := false ;
20469: LD_ADDR_EXP 93
20473: PUSH
20474: LD_INT 0
20476: ST_TO_ADDR
// sPowell := false ;
20477: LD_ADDR_EXP 94
20481: PUSH
20482: LD_INT 0
20484: ST_TO_ADDR
// sTeleport := false ;
20485: LD_ADDR_EXP 97
20489: PUSH
20490: LD_INT 0
20492: ST_TO_ADDR
// sOilTower := false ;
20493: LD_ADDR_EXP 99
20497: PUSH
20498: LD_INT 0
20500: ST_TO_ADDR
// sShovel := false ;
20501: LD_ADDR_EXP 100
20505: PUSH
20506: LD_INT 0
20508: ST_TO_ADDR
// sSheik := false ;
20509: LD_ADDR_EXP 101
20513: PUSH
20514: LD_INT 0
20516: ST_TO_ADDR
// sEarthquake := false ;
20517: LD_ADDR_EXP 103
20521: PUSH
20522: LD_INT 0
20524: ST_TO_ADDR
// sAI := false ;
20525: LD_ADDR_EXP 104
20529: PUSH
20530: LD_INT 0
20532: ST_TO_ADDR
// sCargo := false ;
20533: LD_ADDR_EXP 107
20537: PUSH
20538: LD_INT 0
20540: ST_TO_ADDR
// sDLaser := false ;
20541: LD_ADDR_EXP 108
20545: PUSH
20546: LD_INT 0
20548: ST_TO_ADDR
// sExchange := false ;
20549: LD_ADDR_EXP 109
20553: PUSH
20554: LD_INT 0
20556: ST_TO_ADDR
// sFac := false ;
20557: LD_ADDR_EXP 110
20561: PUSH
20562: LD_INT 0
20564: ST_TO_ADDR
// sPower := false ;
20565: LD_ADDR_EXP 111
20569: PUSH
20570: LD_INT 0
20572: ST_TO_ADDR
// sRandom := false ;
20573: LD_ADDR_EXP 112
20577: PUSH
20578: LD_INT 0
20580: ST_TO_ADDR
// sShield := false ;
20581: LD_ADDR_EXP 113
20585: PUSH
20586: LD_INT 0
20588: ST_TO_ADDR
// sTime := false ;
20589: LD_ADDR_EXP 114
20593: PUSH
20594: LD_INT 0
20596: ST_TO_ADDR
// sTools := false ;
20597: LD_ADDR_EXP 115
20601: PUSH
20602: LD_INT 0
20604: ST_TO_ADDR
// sSold := false ;
20605: LD_ADDR_EXP 80
20609: PUSH
20610: LD_INT 0
20612: ST_TO_ADDR
// sDiff := false ;
20613: LD_ADDR_EXP 81
20617: PUSH
20618: LD_INT 0
20620: ST_TO_ADDR
// sFog := false ;
20621: LD_ADDR_EXP 84
20625: PUSH
20626: LD_INT 0
20628: ST_TO_ADDR
// sReset := false ;
20629: LD_ADDR_EXP 85
20633: PUSH
20634: LD_INT 0
20636: ST_TO_ADDR
// sSun := false ;
20637: LD_ADDR_EXP 86
20641: PUSH
20642: LD_INT 0
20644: ST_TO_ADDR
// sTiger := false ;
20645: LD_ADDR_EXP 82
20649: PUSH
20650: LD_INT 0
20652: ST_TO_ADDR
// sBomb := false ;
20653: LD_ADDR_EXP 83
20657: PUSH
20658: LD_INT 0
20660: ST_TO_ADDR
// sWound := false ;
20661: LD_ADDR_EXP 91
20665: PUSH
20666: LD_INT 0
20668: ST_TO_ADDR
// sBetray := false ;
20669: LD_ADDR_EXP 95
20673: PUSH
20674: LD_INT 0
20676: ST_TO_ADDR
// sContamin := false ;
20677: LD_ADDR_EXP 96
20681: PUSH
20682: LD_INT 0
20684: ST_TO_ADDR
// sOil := false ;
20685: LD_ADDR_EXP 98
20689: PUSH
20690: LD_INT 0
20692: ST_TO_ADDR
// sStu := false ;
20693: LD_ADDR_EXP 102
20697: PUSH
20698: LD_INT 0
20700: ST_TO_ADDR
// sBazooka := false ;
20701: LD_ADDR_EXP 105
20705: PUSH
20706: LD_INT 0
20708: ST_TO_ADDR
// sMortar := false ;
20709: LD_ADDR_EXP 106
20713: PUSH
20714: LD_INT 0
20716: ST_TO_ADDR
// sRanger := false ;
20717: LD_ADDR_EXP 116
20721: PUSH
20722: LD_INT 0
20724: ST_TO_ADDR
// sComputer := false ;
20725: LD_ADDR_EXP 117
20729: PUSH
20730: LD_INT 0
20732: ST_TO_ADDR
// s30 := false ;
20733: LD_ADDR_EXP 118
20737: PUSH
20738: LD_INT 0
20740: ST_TO_ADDR
// s60 := false ;
20741: LD_ADDR_EXP 119
20745: PUSH
20746: LD_INT 0
20748: ST_TO_ADDR
// end ;
20749: LD_VAR 0 1
20753: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20754: LD_INT 0
20756: PPUSH
20757: PPUSH
20758: PPUSH
20759: PPUSH
20760: PPUSH
20761: PPUSH
20762: PPUSH
// result := [ ] ;
20763: LD_ADDR_VAR 0 2
20767: PUSH
20768: EMPTY
20769: ST_TO_ADDR
// if campaign_id = 1 then
20770: LD_OWVAR 69
20774: PUSH
20775: LD_INT 1
20777: EQUAL
20778: IFFALSE 23944
// begin case mission_number of 1 :
20780: LD_OWVAR 70
20784: PUSH
20785: LD_INT 1
20787: DOUBLE
20788: EQUAL
20789: IFTRUE 20793
20791: GO 20869
20793: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20794: LD_ADDR_VAR 0 2
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 4
20804: PUSH
20805: LD_INT 11
20807: PUSH
20808: LD_INT 12
20810: PUSH
20811: LD_INT 15
20813: PUSH
20814: LD_INT 16
20816: PUSH
20817: LD_INT 22
20819: PUSH
20820: LD_INT 23
20822: PUSH
20823: LD_INT 26
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 101
20839: PUSH
20840: LD_INT 102
20842: PUSH
20843: LD_INT 106
20845: PUSH
20846: LD_INT 116
20848: PUSH
20849: LD_INT 117
20851: PUSH
20852: LD_INT 118
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: ST_TO_ADDR
20867: GO 23942
20869: LD_INT 2
20871: DOUBLE
20872: EQUAL
20873: IFTRUE 20877
20875: GO 20961
20877: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20878: LD_ADDR_VAR 0 2
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: LD_INT 4
20888: PUSH
20889: LD_INT 11
20891: PUSH
20892: LD_INT 12
20894: PUSH
20895: LD_INT 15
20897: PUSH
20898: LD_INT 16
20900: PUSH
20901: LD_INT 22
20903: PUSH
20904: LD_INT 23
20906: PUSH
20907: LD_INT 26
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 101
20923: PUSH
20924: LD_INT 102
20926: PUSH
20927: LD_INT 105
20929: PUSH
20930: LD_INT 106
20932: PUSH
20933: LD_INT 108
20935: PUSH
20936: LD_INT 116
20938: PUSH
20939: LD_INT 117
20941: PUSH
20942: LD_INT 118
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: ST_TO_ADDR
20959: GO 23942
20961: LD_INT 3
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 21057
20969: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20970: LD_ADDR_VAR 0 2
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: LD_INT 4
20980: PUSH
20981: LD_INT 5
20983: PUSH
20984: LD_INT 11
20986: PUSH
20987: LD_INT 12
20989: PUSH
20990: LD_INT 15
20992: PUSH
20993: LD_INT 16
20995: PUSH
20996: LD_INT 22
20998: PUSH
20999: LD_INT 26
21001: PUSH
21002: LD_INT 36
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 101
21019: PUSH
21020: LD_INT 102
21022: PUSH
21023: LD_INT 105
21025: PUSH
21026: LD_INT 106
21028: PUSH
21029: LD_INT 108
21031: PUSH
21032: LD_INT 116
21034: PUSH
21035: LD_INT 117
21037: PUSH
21038: LD_INT 118
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: ST_TO_ADDR
21055: GO 23942
21057: LD_INT 4
21059: DOUBLE
21060: EQUAL
21061: IFTRUE 21065
21063: GO 21161
21065: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21066: LD_ADDR_VAR 0 2
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 4
21076: PUSH
21077: LD_INT 5
21079: PUSH
21080: LD_INT 8
21082: PUSH
21083: LD_INT 11
21085: PUSH
21086: LD_INT 12
21088: PUSH
21089: LD_INT 15
21091: PUSH
21092: LD_INT 16
21094: PUSH
21095: LD_INT 22
21097: PUSH
21098: LD_INT 23
21100: PUSH
21101: LD_INT 26
21103: PUSH
21104: LD_INT 36
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 101
21123: PUSH
21124: LD_INT 102
21126: PUSH
21127: LD_INT 105
21129: PUSH
21130: LD_INT 106
21132: PUSH
21133: LD_INT 108
21135: PUSH
21136: LD_INT 116
21138: PUSH
21139: LD_INT 117
21141: PUSH
21142: LD_INT 118
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: ST_TO_ADDR
21159: GO 23942
21161: LD_INT 5
21163: DOUBLE
21164: EQUAL
21165: IFTRUE 21169
21167: GO 21281
21169: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21170: LD_ADDR_VAR 0 2
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 4
21180: PUSH
21181: LD_INT 5
21183: PUSH
21184: LD_INT 6
21186: PUSH
21187: LD_INT 8
21189: PUSH
21190: LD_INT 11
21192: PUSH
21193: LD_INT 12
21195: PUSH
21196: LD_INT 15
21198: PUSH
21199: LD_INT 16
21201: PUSH
21202: LD_INT 22
21204: PUSH
21205: LD_INT 23
21207: PUSH
21208: LD_INT 25
21210: PUSH
21211: LD_INT 26
21213: PUSH
21214: LD_INT 36
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 101
21235: PUSH
21236: LD_INT 102
21238: PUSH
21239: LD_INT 105
21241: PUSH
21242: LD_INT 106
21244: PUSH
21245: LD_INT 108
21247: PUSH
21248: LD_INT 109
21250: PUSH
21251: LD_INT 112
21253: PUSH
21254: LD_INT 116
21256: PUSH
21257: LD_INT 117
21259: PUSH
21260: LD_INT 118
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: ST_TO_ADDR
21279: GO 23942
21281: LD_INT 6
21283: DOUBLE
21284: EQUAL
21285: IFTRUE 21289
21287: GO 21421
21289: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21290: LD_ADDR_VAR 0 2
21294: PUSH
21295: LD_INT 2
21297: PUSH
21298: LD_INT 4
21300: PUSH
21301: LD_INT 5
21303: PUSH
21304: LD_INT 6
21306: PUSH
21307: LD_INT 8
21309: PUSH
21310: LD_INT 11
21312: PUSH
21313: LD_INT 12
21315: PUSH
21316: LD_INT 15
21318: PUSH
21319: LD_INT 16
21321: PUSH
21322: LD_INT 20
21324: PUSH
21325: LD_INT 21
21327: PUSH
21328: LD_INT 22
21330: PUSH
21331: LD_INT 23
21333: PUSH
21334: LD_INT 25
21336: PUSH
21337: LD_INT 26
21339: PUSH
21340: LD_INT 30
21342: PUSH
21343: LD_INT 31
21345: PUSH
21346: LD_INT 32
21348: PUSH
21349: LD_INT 36
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 101
21375: PUSH
21376: LD_INT 102
21378: PUSH
21379: LD_INT 105
21381: PUSH
21382: LD_INT 106
21384: PUSH
21385: LD_INT 108
21387: PUSH
21388: LD_INT 109
21390: PUSH
21391: LD_INT 112
21393: PUSH
21394: LD_INT 116
21396: PUSH
21397: LD_INT 117
21399: PUSH
21400: LD_INT 118
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: ST_TO_ADDR
21419: GO 23942
21421: LD_INT 7
21423: DOUBLE
21424: EQUAL
21425: IFTRUE 21429
21427: GO 21541
21429: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21430: LD_ADDR_VAR 0 2
21434: PUSH
21435: LD_INT 2
21437: PUSH
21438: LD_INT 4
21440: PUSH
21441: LD_INT 5
21443: PUSH
21444: LD_INT 7
21446: PUSH
21447: LD_INT 11
21449: PUSH
21450: LD_INT 12
21452: PUSH
21453: LD_INT 15
21455: PUSH
21456: LD_INT 16
21458: PUSH
21459: LD_INT 20
21461: PUSH
21462: LD_INT 21
21464: PUSH
21465: LD_INT 22
21467: PUSH
21468: LD_INT 23
21470: PUSH
21471: LD_INT 25
21473: PUSH
21474: LD_INT 26
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 101
21495: PUSH
21496: LD_INT 102
21498: PUSH
21499: LD_INT 103
21501: PUSH
21502: LD_INT 105
21504: PUSH
21505: LD_INT 106
21507: PUSH
21508: LD_INT 108
21510: PUSH
21511: LD_INT 112
21513: PUSH
21514: LD_INT 116
21516: PUSH
21517: LD_INT 117
21519: PUSH
21520: LD_INT 118
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: ST_TO_ADDR
21539: GO 23942
21541: LD_INT 8
21543: DOUBLE
21544: EQUAL
21545: IFTRUE 21549
21547: GO 21689
21549: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21550: LD_ADDR_VAR 0 2
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 4
21560: PUSH
21561: LD_INT 5
21563: PUSH
21564: LD_INT 6
21566: PUSH
21567: LD_INT 7
21569: PUSH
21570: LD_INT 8
21572: PUSH
21573: LD_INT 11
21575: PUSH
21576: LD_INT 12
21578: PUSH
21579: LD_INT 15
21581: PUSH
21582: LD_INT 16
21584: PUSH
21585: LD_INT 20
21587: PUSH
21588: LD_INT 21
21590: PUSH
21591: LD_INT 22
21593: PUSH
21594: LD_INT 23
21596: PUSH
21597: LD_INT 25
21599: PUSH
21600: LD_INT 26
21602: PUSH
21603: LD_INT 30
21605: PUSH
21606: LD_INT 31
21608: PUSH
21609: LD_INT 32
21611: PUSH
21612: LD_INT 36
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 101
21639: PUSH
21640: LD_INT 102
21642: PUSH
21643: LD_INT 103
21645: PUSH
21646: LD_INT 105
21648: PUSH
21649: LD_INT 106
21651: PUSH
21652: LD_INT 108
21654: PUSH
21655: LD_INT 109
21657: PUSH
21658: LD_INT 112
21660: PUSH
21661: LD_INT 116
21663: PUSH
21664: LD_INT 117
21666: PUSH
21667: LD_INT 118
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: ST_TO_ADDR
21687: GO 23942
21689: LD_INT 9
21691: DOUBLE
21692: EQUAL
21693: IFTRUE 21697
21695: GO 21845
21697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21698: LD_ADDR_VAR 0 2
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: LD_INT 4
21708: PUSH
21709: LD_INT 5
21711: PUSH
21712: LD_INT 6
21714: PUSH
21715: LD_INT 7
21717: PUSH
21718: LD_INT 8
21720: PUSH
21721: LD_INT 11
21723: PUSH
21724: LD_INT 12
21726: PUSH
21727: LD_INT 15
21729: PUSH
21730: LD_INT 16
21732: PUSH
21733: LD_INT 20
21735: PUSH
21736: LD_INT 21
21738: PUSH
21739: LD_INT 22
21741: PUSH
21742: LD_INT 23
21744: PUSH
21745: LD_INT 25
21747: PUSH
21748: LD_INT 26
21750: PUSH
21751: LD_INT 28
21753: PUSH
21754: LD_INT 30
21756: PUSH
21757: LD_INT 31
21759: PUSH
21760: LD_INT 32
21762: PUSH
21763: LD_INT 36
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 101
21791: PUSH
21792: LD_INT 102
21794: PUSH
21795: LD_INT 103
21797: PUSH
21798: LD_INT 105
21800: PUSH
21801: LD_INT 106
21803: PUSH
21804: LD_INT 108
21806: PUSH
21807: LD_INT 109
21809: PUSH
21810: LD_INT 112
21812: PUSH
21813: LD_INT 114
21815: PUSH
21816: LD_INT 116
21818: PUSH
21819: LD_INT 117
21821: PUSH
21822: LD_INT 118
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: ST_TO_ADDR
21843: GO 23942
21845: LD_INT 10
21847: DOUBLE
21848: EQUAL
21849: IFTRUE 21853
21851: GO 22049
21853: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21854: LD_ADDR_VAR 0 2
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: LD_INT 4
21864: PUSH
21865: LD_INT 5
21867: PUSH
21868: LD_INT 6
21870: PUSH
21871: LD_INT 7
21873: PUSH
21874: LD_INT 8
21876: PUSH
21877: LD_INT 9
21879: PUSH
21880: LD_INT 10
21882: PUSH
21883: LD_INT 11
21885: PUSH
21886: LD_INT 12
21888: PUSH
21889: LD_INT 13
21891: PUSH
21892: LD_INT 14
21894: PUSH
21895: LD_INT 15
21897: PUSH
21898: LD_INT 16
21900: PUSH
21901: LD_INT 17
21903: PUSH
21904: LD_INT 18
21906: PUSH
21907: LD_INT 19
21909: PUSH
21910: LD_INT 20
21912: PUSH
21913: LD_INT 21
21915: PUSH
21916: LD_INT 22
21918: PUSH
21919: LD_INT 23
21921: PUSH
21922: LD_INT 24
21924: PUSH
21925: LD_INT 25
21927: PUSH
21928: LD_INT 26
21930: PUSH
21931: LD_INT 28
21933: PUSH
21934: LD_INT 30
21936: PUSH
21937: LD_INT 31
21939: PUSH
21940: LD_INT 32
21942: PUSH
21943: LD_INT 36
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 101
21979: PUSH
21980: LD_INT 102
21982: PUSH
21983: LD_INT 103
21985: PUSH
21986: LD_INT 104
21988: PUSH
21989: LD_INT 105
21991: PUSH
21992: LD_INT 106
21994: PUSH
21995: LD_INT 107
21997: PUSH
21998: LD_INT 108
22000: PUSH
22001: LD_INT 109
22003: PUSH
22004: LD_INT 110
22006: PUSH
22007: LD_INT 111
22009: PUSH
22010: LD_INT 112
22012: PUSH
22013: LD_INT 114
22015: PUSH
22016: LD_INT 116
22018: PUSH
22019: LD_INT 117
22021: PUSH
22022: LD_INT 118
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: ST_TO_ADDR
22047: GO 23942
22049: LD_INT 11
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22261
22057: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22058: LD_ADDR_VAR 0 2
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: LD_INT 4
22071: PUSH
22072: LD_INT 5
22074: PUSH
22075: LD_INT 6
22077: PUSH
22078: LD_INT 7
22080: PUSH
22081: LD_INT 8
22083: PUSH
22084: LD_INT 9
22086: PUSH
22087: LD_INT 10
22089: PUSH
22090: LD_INT 11
22092: PUSH
22093: LD_INT 12
22095: PUSH
22096: LD_INT 13
22098: PUSH
22099: LD_INT 14
22101: PUSH
22102: LD_INT 15
22104: PUSH
22105: LD_INT 16
22107: PUSH
22108: LD_INT 17
22110: PUSH
22111: LD_INT 18
22113: PUSH
22114: LD_INT 19
22116: PUSH
22117: LD_INT 20
22119: PUSH
22120: LD_INT 21
22122: PUSH
22123: LD_INT 22
22125: PUSH
22126: LD_INT 23
22128: PUSH
22129: LD_INT 24
22131: PUSH
22132: LD_INT 25
22134: PUSH
22135: LD_INT 26
22137: PUSH
22138: LD_INT 28
22140: PUSH
22141: LD_INT 30
22143: PUSH
22144: LD_INT 31
22146: PUSH
22147: LD_INT 32
22149: PUSH
22150: LD_INT 34
22152: PUSH
22153: LD_INT 36
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 101
22191: PUSH
22192: LD_INT 102
22194: PUSH
22195: LD_INT 103
22197: PUSH
22198: LD_INT 104
22200: PUSH
22201: LD_INT 105
22203: PUSH
22204: LD_INT 106
22206: PUSH
22207: LD_INT 107
22209: PUSH
22210: LD_INT 108
22212: PUSH
22213: LD_INT 109
22215: PUSH
22216: LD_INT 110
22218: PUSH
22219: LD_INT 111
22221: PUSH
22222: LD_INT 112
22224: PUSH
22225: LD_INT 114
22227: PUSH
22228: LD_INT 116
22230: PUSH
22231: LD_INT 117
22233: PUSH
22234: LD_INT 118
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: ST_TO_ADDR
22259: GO 23942
22261: LD_INT 12
22263: DOUBLE
22264: EQUAL
22265: IFTRUE 22269
22267: GO 22489
22269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22270: LD_ADDR_VAR 0 2
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: LD_INT 4
22286: PUSH
22287: LD_INT 5
22289: PUSH
22290: LD_INT 6
22292: PUSH
22293: LD_INT 7
22295: PUSH
22296: LD_INT 8
22298: PUSH
22299: LD_INT 9
22301: PUSH
22302: LD_INT 10
22304: PUSH
22305: LD_INT 11
22307: PUSH
22308: LD_INT 12
22310: PUSH
22311: LD_INT 13
22313: PUSH
22314: LD_INT 14
22316: PUSH
22317: LD_INT 15
22319: PUSH
22320: LD_INT 16
22322: PUSH
22323: LD_INT 17
22325: PUSH
22326: LD_INT 18
22328: PUSH
22329: LD_INT 19
22331: PUSH
22332: LD_INT 20
22334: PUSH
22335: LD_INT 21
22337: PUSH
22338: LD_INT 22
22340: PUSH
22341: LD_INT 23
22343: PUSH
22344: LD_INT 24
22346: PUSH
22347: LD_INT 25
22349: PUSH
22350: LD_INT 26
22352: PUSH
22353: LD_INT 27
22355: PUSH
22356: LD_INT 28
22358: PUSH
22359: LD_INT 30
22361: PUSH
22362: LD_INT 31
22364: PUSH
22365: LD_INT 32
22367: PUSH
22368: LD_INT 33
22370: PUSH
22371: LD_INT 34
22373: PUSH
22374: LD_INT 36
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 101
22415: PUSH
22416: LD_INT 102
22418: PUSH
22419: LD_INT 103
22421: PUSH
22422: LD_INT 104
22424: PUSH
22425: LD_INT 105
22427: PUSH
22428: LD_INT 106
22430: PUSH
22431: LD_INT 107
22433: PUSH
22434: LD_INT 108
22436: PUSH
22437: LD_INT 109
22439: PUSH
22440: LD_INT 110
22442: PUSH
22443: LD_INT 111
22445: PUSH
22446: LD_INT 112
22448: PUSH
22449: LD_INT 113
22451: PUSH
22452: LD_INT 114
22454: PUSH
22455: LD_INT 116
22457: PUSH
22458: LD_INT 117
22460: PUSH
22461: LD_INT 118
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: ST_TO_ADDR
22487: GO 23942
22489: LD_INT 13
22491: DOUBLE
22492: EQUAL
22493: IFTRUE 22497
22495: GO 22705
22497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22498: LD_ADDR_VAR 0 2
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: LD_INT 2
22508: PUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 4
22514: PUSH
22515: LD_INT 5
22517: PUSH
22518: LD_INT 8
22520: PUSH
22521: LD_INT 9
22523: PUSH
22524: LD_INT 10
22526: PUSH
22527: LD_INT 11
22529: PUSH
22530: LD_INT 12
22532: PUSH
22533: LD_INT 14
22535: PUSH
22536: LD_INT 15
22538: PUSH
22539: LD_INT 16
22541: PUSH
22542: LD_INT 17
22544: PUSH
22545: LD_INT 18
22547: PUSH
22548: LD_INT 19
22550: PUSH
22551: LD_INT 20
22553: PUSH
22554: LD_INT 21
22556: PUSH
22557: LD_INT 22
22559: PUSH
22560: LD_INT 23
22562: PUSH
22563: LD_INT 24
22565: PUSH
22566: LD_INT 25
22568: PUSH
22569: LD_INT 26
22571: PUSH
22572: LD_INT 27
22574: PUSH
22575: LD_INT 28
22577: PUSH
22578: LD_INT 30
22580: PUSH
22581: LD_INT 31
22583: PUSH
22584: LD_INT 32
22586: PUSH
22587: LD_INT 33
22589: PUSH
22590: LD_INT 34
22592: PUSH
22593: LD_INT 36
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 101
22631: PUSH
22632: LD_INT 102
22634: PUSH
22635: LD_INT 103
22637: PUSH
22638: LD_INT 104
22640: PUSH
22641: LD_INT 105
22643: PUSH
22644: LD_INT 106
22646: PUSH
22647: LD_INT 107
22649: PUSH
22650: LD_INT 108
22652: PUSH
22653: LD_INT 109
22655: PUSH
22656: LD_INT 110
22658: PUSH
22659: LD_INT 111
22661: PUSH
22662: LD_INT 112
22664: PUSH
22665: LD_INT 113
22667: PUSH
22668: LD_INT 114
22670: PUSH
22671: LD_INT 116
22673: PUSH
22674: LD_INT 117
22676: PUSH
22677: LD_INT 118
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: ST_TO_ADDR
22703: GO 23942
22705: LD_INT 14
22707: DOUBLE
22708: EQUAL
22709: IFTRUE 22713
22711: GO 22937
22713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22714: LD_ADDR_VAR 0 2
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: LD_INT 4
22730: PUSH
22731: LD_INT 5
22733: PUSH
22734: LD_INT 6
22736: PUSH
22737: LD_INT 7
22739: PUSH
22740: LD_INT 8
22742: PUSH
22743: LD_INT 9
22745: PUSH
22746: LD_INT 10
22748: PUSH
22749: LD_INT 11
22751: PUSH
22752: LD_INT 12
22754: PUSH
22755: LD_INT 13
22757: PUSH
22758: LD_INT 14
22760: PUSH
22761: LD_INT 15
22763: PUSH
22764: LD_INT 16
22766: PUSH
22767: LD_INT 17
22769: PUSH
22770: LD_INT 18
22772: PUSH
22773: LD_INT 19
22775: PUSH
22776: LD_INT 20
22778: PUSH
22779: LD_INT 21
22781: PUSH
22782: LD_INT 22
22784: PUSH
22785: LD_INT 23
22787: PUSH
22788: LD_INT 24
22790: PUSH
22791: LD_INT 25
22793: PUSH
22794: LD_INT 26
22796: PUSH
22797: LD_INT 27
22799: PUSH
22800: LD_INT 28
22802: PUSH
22803: LD_INT 29
22805: PUSH
22806: LD_INT 30
22808: PUSH
22809: LD_INT 31
22811: PUSH
22812: LD_INT 32
22814: PUSH
22815: LD_INT 33
22817: PUSH
22818: LD_INT 34
22820: PUSH
22821: LD_INT 36
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 101
22863: PUSH
22864: LD_INT 102
22866: PUSH
22867: LD_INT 103
22869: PUSH
22870: LD_INT 104
22872: PUSH
22873: LD_INT 105
22875: PUSH
22876: LD_INT 106
22878: PUSH
22879: LD_INT 107
22881: PUSH
22882: LD_INT 108
22884: PUSH
22885: LD_INT 109
22887: PUSH
22888: LD_INT 110
22890: PUSH
22891: LD_INT 111
22893: PUSH
22894: LD_INT 112
22896: PUSH
22897: LD_INT 113
22899: PUSH
22900: LD_INT 114
22902: PUSH
22903: LD_INT 116
22905: PUSH
22906: LD_INT 117
22908: PUSH
22909: LD_INT 118
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: ST_TO_ADDR
22935: GO 23942
22937: LD_INT 15
22939: DOUBLE
22940: EQUAL
22941: IFTRUE 22945
22943: GO 23169
22945: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22946: LD_ADDR_VAR 0 2
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: LD_INT 2
22956: PUSH
22957: LD_INT 3
22959: PUSH
22960: LD_INT 4
22962: PUSH
22963: LD_INT 5
22965: PUSH
22966: LD_INT 6
22968: PUSH
22969: LD_INT 7
22971: PUSH
22972: LD_INT 8
22974: PUSH
22975: LD_INT 9
22977: PUSH
22978: LD_INT 10
22980: PUSH
22981: LD_INT 11
22983: PUSH
22984: LD_INT 12
22986: PUSH
22987: LD_INT 13
22989: PUSH
22990: LD_INT 14
22992: PUSH
22993: LD_INT 15
22995: PUSH
22996: LD_INT 16
22998: PUSH
22999: LD_INT 17
23001: PUSH
23002: LD_INT 18
23004: PUSH
23005: LD_INT 19
23007: PUSH
23008: LD_INT 20
23010: PUSH
23011: LD_INT 21
23013: PUSH
23014: LD_INT 22
23016: PUSH
23017: LD_INT 23
23019: PUSH
23020: LD_INT 24
23022: PUSH
23023: LD_INT 25
23025: PUSH
23026: LD_INT 26
23028: PUSH
23029: LD_INT 27
23031: PUSH
23032: LD_INT 28
23034: PUSH
23035: LD_INT 29
23037: PUSH
23038: LD_INT 30
23040: PUSH
23041: LD_INT 31
23043: PUSH
23044: LD_INT 32
23046: PUSH
23047: LD_INT 33
23049: PUSH
23050: LD_INT 34
23052: PUSH
23053: LD_INT 36
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 101
23095: PUSH
23096: LD_INT 102
23098: PUSH
23099: LD_INT 103
23101: PUSH
23102: LD_INT 104
23104: PUSH
23105: LD_INT 105
23107: PUSH
23108: LD_INT 106
23110: PUSH
23111: LD_INT 107
23113: PUSH
23114: LD_INT 108
23116: PUSH
23117: LD_INT 109
23119: PUSH
23120: LD_INT 110
23122: PUSH
23123: LD_INT 111
23125: PUSH
23126: LD_INT 112
23128: PUSH
23129: LD_INT 113
23131: PUSH
23132: LD_INT 114
23134: PUSH
23135: LD_INT 116
23137: PUSH
23138: LD_INT 117
23140: PUSH
23141: LD_INT 118
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: ST_TO_ADDR
23167: GO 23942
23169: LD_INT 16
23171: DOUBLE
23172: EQUAL
23173: IFTRUE 23177
23175: GO 23313
23177: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23178: LD_ADDR_VAR 0 2
23182: PUSH
23183: LD_INT 2
23185: PUSH
23186: LD_INT 4
23188: PUSH
23189: LD_INT 5
23191: PUSH
23192: LD_INT 7
23194: PUSH
23195: LD_INT 11
23197: PUSH
23198: LD_INT 12
23200: PUSH
23201: LD_INT 15
23203: PUSH
23204: LD_INT 16
23206: PUSH
23207: LD_INT 20
23209: PUSH
23210: LD_INT 21
23212: PUSH
23213: LD_INT 22
23215: PUSH
23216: LD_INT 23
23218: PUSH
23219: LD_INT 25
23221: PUSH
23222: LD_INT 26
23224: PUSH
23225: LD_INT 30
23227: PUSH
23228: LD_INT 31
23230: PUSH
23231: LD_INT 32
23233: PUSH
23234: LD_INT 33
23236: PUSH
23237: LD_INT 34
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 101
23263: PUSH
23264: LD_INT 102
23266: PUSH
23267: LD_INT 103
23269: PUSH
23270: LD_INT 106
23272: PUSH
23273: LD_INT 108
23275: PUSH
23276: LD_INT 112
23278: PUSH
23279: LD_INT 113
23281: PUSH
23282: LD_INT 114
23284: PUSH
23285: LD_INT 116
23287: PUSH
23288: LD_INT 117
23290: PUSH
23291: LD_INT 118
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: ST_TO_ADDR
23311: GO 23942
23313: LD_INT 17
23315: DOUBLE
23316: EQUAL
23317: IFTRUE 23321
23319: GO 23545
23321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23322: LD_ADDR_VAR 0 2
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 2
23332: PUSH
23333: LD_INT 3
23335: PUSH
23336: LD_INT 4
23338: PUSH
23339: LD_INT 5
23341: PUSH
23342: LD_INT 6
23344: PUSH
23345: LD_INT 7
23347: PUSH
23348: LD_INT 8
23350: PUSH
23351: LD_INT 9
23353: PUSH
23354: LD_INT 10
23356: PUSH
23357: LD_INT 11
23359: PUSH
23360: LD_INT 12
23362: PUSH
23363: LD_INT 13
23365: PUSH
23366: LD_INT 14
23368: PUSH
23369: LD_INT 15
23371: PUSH
23372: LD_INT 16
23374: PUSH
23375: LD_INT 17
23377: PUSH
23378: LD_INT 18
23380: PUSH
23381: LD_INT 19
23383: PUSH
23384: LD_INT 20
23386: PUSH
23387: LD_INT 21
23389: PUSH
23390: LD_INT 22
23392: PUSH
23393: LD_INT 23
23395: PUSH
23396: LD_INT 24
23398: PUSH
23399: LD_INT 25
23401: PUSH
23402: LD_INT 26
23404: PUSH
23405: LD_INT 27
23407: PUSH
23408: LD_INT 28
23410: PUSH
23411: LD_INT 29
23413: PUSH
23414: LD_INT 30
23416: PUSH
23417: LD_INT 31
23419: PUSH
23420: LD_INT 32
23422: PUSH
23423: LD_INT 33
23425: PUSH
23426: LD_INT 34
23428: PUSH
23429: LD_INT 36
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 101
23471: PUSH
23472: LD_INT 102
23474: PUSH
23475: LD_INT 103
23477: PUSH
23478: LD_INT 104
23480: PUSH
23481: LD_INT 105
23483: PUSH
23484: LD_INT 106
23486: PUSH
23487: LD_INT 107
23489: PUSH
23490: LD_INT 108
23492: PUSH
23493: LD_INT 109
23495: PUSH
23496: LD_INT 110
23498: PUSH
23499: LD_INT 111
23501: PUSH
23502: LD_INT 112
23504: PUSH
23505: LD_INT 113
23507: PUSH
23508: LD_INT 114
23510: PUSH
23511: LD_INT 116
23513: PUSH
23514: LD_INT 117
23516: PUSH
23517: LD_INT 118
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: ST_TO_ADDR
23543: GO 23942
23545: LD_INT 18
23547: DOUBLE
23548: EQUAL
23549: IFTRUE 23553
23551: GO 23701
23553: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23554: LD_ADDR_VAR 0 2
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: LD_INT 4
23564: PUSH
23565: LD_INT 5
23567: PUSH
23568: LD_INT 7
23570: PUSH
23571: LD_INT 11
23573: PUSH
23574: LD_INT 12
23576: PUSH
23577: LD_INT 15
23579: PUSH
23580: LD_INT 16
23582: PUSH
23583: LD_INT 20
23585: PUSH
23586: LD_INT 21
23588: PUSH
23589: LD_INT 22
23591: PUSH
23592: LD_INT 23
23594: PUSH
23595: LD_INT 25
23597: PUSH
23598: LD_INT 26
23600: PUSH
23601: LD_INT 30
23603: PUSH
23604: LD_INT 31
23606: PUSH
23607: LD_INT 32
23609: PUSH
23610: LD_INT 33
23612: PUSH
23613: LD_INT 34
23615: PUSH
23616: LD_INT 35
23618: PUSH
23619: LD_INT 36
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 101
23647: PUSH
23648: LD_INT 102
23650: PUSH
23651: LD_INT 103
23653: PUSH
23654: LD_INT 106
23656: PUSH
23657: LD_INT 108
23659: PUSH
23660: LD_INT 112
23662: PUSH
23663: LD_INT 113
23665: PUSH
23666: LD_INT 114
23668: PUSH
23669: LD_INT 115
23671: PUSH
23672: LD_INT 116
23674: PUSH
23675: LD_INT 117
23677: PUSH
23678: LD_INT 118
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: ST_TO_ADDR
23699: GO 23942
23701: LD_INT 19
23703: DOUBLE
23704: EQUAL
23705: IFTRUE 23709
23707: GO 23941
23709: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23710: LD_ADDR_VAR 0 2
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: LD_INT 3
23723: PUSH
23724: LD_INT 4
23726: PUSH
23727: LD_INT 5
23729: PUSH
23730: LD_INT 6
23732: PUSH
23733: LD_INT 7
23735: PUSH
23736: LD_INT 8
23738: PUSH
23739: LD_INT 9
23741: PUSH
23742: LD_INT 10
23744: PUSH
23745: LD_INT 11
23747: PUSH
23748: LD_INT 12
23750: PUSH
23751: LD_INT 13
23753: PUSH
23754: LD_INT 14
23756: PUSH
23757: LD_INT 15
23759: PUSH
23760: LD_INT 16
23762: PUSH
23763: LD_INT 17
23765: PUSH
23766: LD_INT 18
23768: PUSH
23769: LD_INT 19
23771: PUSH
23772: LD_INT 20
23774: PUSH
23775: LD_INT 21
23777: PUSH
23778: LD_INT 22
23780: PUSH
23781: LD_INT 23
23783: PUSH
23784: LD_INT 24
23786: PUSH
23787: LD_INT 25
23789: PUSH
23790: LD_INT 26
23792: PUSH
23793: LD_INT 27
23795: PUSH
23796: LD_INT 28
23798: PUSH
23799: LD_INT 29
23801: PUSH
23802: LD_INT 30
23804: PUSH
23805: LD_INT 31
23807: PUSH
23808: LD_INT 32
23810: PUSH
23811: LD_INT 33
23813: PUSH
23814: LD_INT 34
23816: PUSH
23817: LD_INT 35
23819: PUSH
23820: LD_INT 36
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 101
23863: PUSH
23864: LD_INT 102
23866: PUSH
23867: LD_INT 103
23869: PUSH
23870: LD_INT 104
23872: PUSH
23873: LD_INT 105
23875: PUSH
23876: LD_INT 106
23878: PUSH
23879: LD_INT 107
23881: PUSH
23882: LD_INT 108
23884: PUSH
23885: LD_INT 109
23887: PUSH
23888: LD_INT 110
23890: PUSH
23891: LD_INT 111
23893: PUSH
23894: LD_INT 112
23896: PUSH
23897: LD_INT 113
23899: PUSH
23900: LD_INT 114
23902: PUSH
23903: LD_INT 115
23905: PUSH
23906: LD_INT 116
23908: PUSH
23909: LD_INT 117
23911: PUSH
23912: LD_INT 118
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: ST_TO_ADDR
23939: GO 23942
23941: POP
// end else
23942: GO 24173
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23944: LD_ADDR_VAR 0 2
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: LD_INT 3
23957: PUSH
23958: LD_INT 4
23960: PUSH
23961: LD_INT 5
23963: PUSH
23964: LD_INT 6
23966: PUSH
23967: LD_INT 7
23969: PUSH
23970: LD_INT 8
23972: PUSH
23973: LD_INT 9
23975: PUSH
23976: LD_INT 10
23978: PUSH
23979: LD_INT 11
23981: PUSH
23982: LD_INT 12
23984: PUSH
23985: LD_INT 13
23987: PUSH
23988: LD_INT 14
23990: PUSH
23991: LD_INT 15
23993: PUSH
23994: LD_INT 16
23996: PUSH
23997: LD_INT 17
23999: PUSH
24000: LD_INT 18
24002: PUSH
24003: LD_INT 19
24005: PUSH
24006: LD_INT 20
24008: PUSH
24009: LD_INT 21
24011: PUSH
24012: LD_INT 22
24014: PUSH
24015: LD_INT 23
24017: PUSH
24018: LD_INT 24
24020: PUSH
24021: LD_INT 25
24023: PUSH
24024: LD_INT 26
24026: PUSH
24027: LD_INT 27
24029: PUSH
24030: LD_INT 28
24032: PUSH
24033: LD_INT 29
24035: PUSH
24036: LD_INT 30
24038: PUSH
24039: LD_INT 31
24041: PUSH
24042: LD_INT 32
24044: PUSH
24045: LD_INT 33
24047: PUSH
24048: LD_INT 34
24050: PUSH
24051: LD_INT 35
24053: PUSH
24054: LD_INT 36
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 101
24097: PUSH
24098: LD_INT 102
24100: PUSH
24101: LD_INT 103
24103: PUSH
24104: LD_INT 104
24106: PUSH
24107: LD_INT 105
24109: PUSH
24110: LD_INT 106
24112: PUSH
24113: LD_INT 107
24115: PUSH
24116: LD_INT 108
24118: PUSH
24119: LD_INT 109
24121: PUSH
24122: LD_INT 110
24124: PUSH
24125: LD_INT 111
24127: PUSH
24128: LD_INT 112
24130: PUSH
24131: LD_INT 113
24133: PUSH
24134: LD_INT 114
24136: PUSH
24137: LD_INT 115
24139: PUSH
24140: LD_INT 116
24142: PUSH
24143: LD_INT 117
24145: PUSH
24146: LD_INT 118
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: ST_TO_ADDR
// if result then
24173: LD_VAR 0 2
24177: IFFALSE 24963
// begin normal :=  ;
24179: LD_ADDR_VAR 0 5
24183: PUSH
24184: LD_STRING 
24186: ST_TO_ADDR
// hardcore :=  ;
24187: LD_ADDR_VAR 0 6
24191: PUSH
24192: LD_STRING 
24194: ST_TO_ADDR
// active :=  ;
24195: LD_ADDR_VAR 0 7
24199: PUSH
24200: LD_STRING 
24202: ST_TO_ADDR
// for i = 1 to normalCounter do
24203: LD_ADDR_VAR 0 8
24207: PUSH
24208: DOUBLE
24209: LD_INT 1
24211: DEC
24212: ST_TO_ADDR
24213: LD_EXP 64
24217: PUSH
24218: FOR_TO
24219: IFFALSE 24320
// begin tmp := 0 ;
24221: LD_ADDR_VAR 0 3
24225: PUSH
24226: LD_STRING 0
24228: ST_TO_ADDR
// if result [ 1 ] then
24229: LD_VAR 0 2
24233: PUSH
24234: LD_INT 1
24236: ARRAY
24237: IFFALSE 24302
// if result [ 1 ] [ 1 ] = i then
24239: LD_VAR 0 2
24243: PUSH
24244: LD_INT 1
24246: ARRAY
24247: PUSH
24248: LD_INT 1
24250: ARRAY
24251: PUSH
24252: LD_VAR 0 8
24256: EQUAL
24257: IFFALSE 24302
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24259: LD_ADDR_VAR 0 2
24263: PUSH
24264: LD_VAR 0 2
24268: PPUSH
24269: LD_INT 1
24271: PPUSH
24272: LD_VAR 0 2
24276: PUSH
24277: LD_INT 1
24279: ARRAY
24280: PPUSH
24281: LD_INT 1
24283: PPUSH
24284: CALL_OW 3
24288: PPUSH
24289: CALL_OW 1
24293: ST_TO_ADDR
// tmp := 1 ;
24294: LD_ADDR_VAR 0 3
24298: PUSH
24299: LD_STRING 1
24301: ST_TO_ADDR
// end ; normal := normal & tmp ;
24302: LD_ADDR_VAR 0 5
24306: PUSH
24307: LD_VAR 0 5
24311: PUSH
24312: LD_VAR 0 3
24316: STR
24317: ST_TO_ADDR
// end ;
24318: GO 24218
24320: POP
24321: POP
// for i = 1 to hardcoreCounter do
24322: LD_ADDR_VAR 0 8
24326: PUSH
24327: DOUBLE
24328: LD_INT 1
24330: DEC
24331: ST_TO_ADDR
24332: LD_EXP 65
24336: PUSH
24337: FOR_TO
24338: IFFALSE 24443
// begin tmp := 0 ;
24340: LD_ADDR_VAR 0 3
24344: PUSH
24345: LD_STRING 0
24347: ST_TO_ADDR
// if result [ 2 ] then
24348: LD_VAR 0 2
24352: PUSH
24353: LD_INT 2
24355: ARRAY
24356: IFFALSE 24425
// if result [ 2 ] [ 1 ] = 100 + i then
24358: LD_VAR 0 2
24362: PUSH
24363: LD_INT 2
24365: ARRAY
24366: PUSH
24367: LD_INT 1
24369: ARRAY
24370: PUSH
24371: LD_INT 100
24373: PUSH
24374: LD_VAR 0 8
24378: PLUS
24379: EQUAL
24380: IFFALSE 24425
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24382: LD_ADDR_VAR 0 2
24386: PUSH
24387: LD_VAR 0 2
24391: PPUSH
24392: LD_INT 2
24394: PPUSH
24395: LD_VAR 0 2
24399: PUSH
24400: LD_INT 2
24402: ARRAY
24403: PPUSH
24404: LD_INT 1
24406: PPUSH
24407: CALL_OW 3
24411: PPUSH
24412: CALL_OW 1
24416: ST_TO_ADDR
// tmp := 1 ;
24417: LD_ADDR_VAR 0 3
24421: PUSH
24422: LD_STRING 1
24424: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24425: LD_ADDR_VAR 0 6
24429: PUSH
24430: LD_VAR 0 6
24434: PUSH
24435: LD_VAR 0 3
24439: STR
24440: ST_TO_ADDR
// end ;
24441: GO 24337
24443: POP
24444: POP
// if isGameLoad then
24445: LD_VAR 0 1
24449: IFFALSE 24924
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24451: LD_ADDR_VAR 0 4
24455: PUSH
24456: LD_EXP 68
24460: PUSH
24461: LD_EXP 67
24465: PUSH
24466: LD_EXP 69
24470: PUSH
24471: LD_EXP 66
24475: PUSH
24476: LD_EXP 70
24480: PUSH
24481: LD_EXP 71
24485: PUSH
24486: LD_EXP 72
24490: PUSH
24491: LD_EXP 73
24495: PUSH
24496: LD_EXP 74
24500: PUSH
24501: LD_EXP 75
24505: PUSH
24506: LD_EXP 76
24510: PUSH
24511: LD_EXP 77
24515: PUSH
24516: LD_EXP 78
24520: PUSH
24521: LD_EXP 79
24525: PUSH
24526: LD_EXP 87
24530: PUSH
24531: LD_EXP 88
24535: PUSH
24536: LD_EXP 89
24540: PUSH
24541: LD_EXP 90
24545: PUSH
24546: LD_EXP 92
24550: PUSH
24551: LD_EXP 93
24555: PUSH
24556: LD_EXP 94
24560: PUSH
24561: LD_EXP 97
24565: PUSH
24566: LD_EXP 99
24570: PUSH
24571: LD_EXP 100
24575: PUSH
24576: LD_EXP 101
24580: PUSH
24581: LD_EXP 103
24585: PUSH
24586: LD_EXP 104
24590: PUSH
24591: LD_EXP 107
24595: PUSH
24596: LD_EXP 108
24600: PUSH
24601: LD_EXP 109
24605: PUSH
24606: LD_EXP 110
24610: PUSH
24611: LD_EXP 111
24615: PUSH
24616: LD_EXP 112
24620: PUSH
24621: LD_EXP 113
24625: PUSH
24626: LD_EXP 114
24630: PUSH
24631: LD_EXP 115
24635: PUSH
24636: LD_EXP 80
24640: PUSH
24641: LD_EXP 81
24645: PUSH
24646: LD_EXP 84
24650: PUSH
24651: LD_EXP 85
24655: PUSH
24656: LD_EXP 86
24660: PUSH
24661: LD_EXP 82
24665: PUSH
24666: LD_EXP 83
24670: PUSH
24671: LD_EXP 91
24675: PUSH
24676: LD_EXP 95
24680: PUSH
24681: LD_EXP 96
24685: PUSH
24686: LD_EXP 98
24690: PUSH
24691: LD_EXP 102
24695: PUSH
24696: LD_EXP 105
24700: PUSH
24701: LD_EXP 106
24705: PUSH
24706: LD_EXP 116
24710: PUSH
24711: LD_EXP 117
24715: PUSH
24716: LD_EXP 118
24720: PUSH
24721: LD_EXP 119
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: ST_TO_ADDR
// tmp :=  ;
24782: LD_ADDR_VAR 0 3
24786: PUSH
24787: LD_STRING 
24789: ST_TO_ADDR
// for i = 1 to normalCounter do
24790: LD_ADDR_VAR 0 8
24794: PUSH
24795: DOUBLE
24796: LD_INT 1
24798: DEC
24799: ST_TO_ADDR
24800: LD_EXP 64
24804: PUSH
24805: FOR_TO
24806: IFFALSE 24842
// begin if flags [ i ] then
24808: LD_VAR 0 4
24812: PUSH
24813: LD_VAR 0 8
24817: ARRAY
24818: IFFALSE 24840
// tmp := tmp & i & ; ;
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: LD_VAR 0 3
24829: PUSH
24830: LD_VAR 0 8
24834: STR
24835: PUSH
24836: LD_STRING ;
24838: STR
24839: ST_TO_ADDR
// end ;
24840: GO 24805
24842: POP
24843: POP
// for i = 1 to hardcoreCounter do
24844: LD_ADDR_VAR 0 8
24848: PUSH
24849: DOUBLE
24850: LD_INT 1
24852: DEC
24853: ST_TO_ADDR
24854: LD_EXP 65
24858: PUSH
24859: FOR_TO
24860: IFFALSE 24906
// begin if flags [ normalCounter + i ] then
24862: LD_VAR 0 4
24866: PUSH
24867: LD_EXP 64
24871: PUSH
24872: LD_VAR 0 8
24876: PLUS
24877: ARRAY
24878: IFFALSE 24904
// tmp := tmp & ( 100 + i ) & ; ;
24880: LD_ADDR_VAR 0 3
24884: PUSH
24885: LD_VAR 0 3
24889: PUSH
24890: LD_INT 100
24892: PUSH
24893: LD_VAR 0 8
24897: PLUS
24898: STR
24899: PUSH
24900: LD_STRING ;
24902: STR
24903: ST_TO_ADDR
// end ;
24904: GO 24859
24906: POP
24907: POP
// if tmp then
24908: LD_VAR 0 3
24912: IFFALSE 24924
// active := tmp ;
24914: LD_ADDR_VAR 0 7
24918: PUSH
24919: LD_VAR 0 3
24923: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24924: LD_STRING getStreamItemsFromMission("
24926: PUSH
24927: LD_VAR 0 5
24931: STR
24932: PUSH
24933: LD_STRING ","
24935: STR
24936: PUSH
24937: LD_VAR 0 6
24941: STR
24942: PUSH
24943: LD_STRING ","
24945: STR
24946: PUSH
24947: LD_VAR 0 7
24951: STR
24952: PUSH
24953: LD_STRING ")
24955: STR
24956: PPUSH
24957: CALL_OW 559
// end else
24961: GO 24970
// ToLua ( getStreamItemsFromMission("","","") ) ;
24963: LD_STRING getStreamItemsFromMission("","","")
24965: PPUSH
24966: CALL_OW 559
// end ;
24970: LD_VAR 0 2
24974: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24975: LD_EXP 63
24979: PUSH
24980: LD_EXP 68
24984: AND
24985: IFFALSE 25109
24987: GO 24989
24989: DISABLE
24990: LD_INT 0
24992: PPUSH
24993: PPUSH
// begin enable ;
24994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24995: LD_ADDR_VAR 0 2
24999: PUSH
25000: LD_INT 22
25002: PUSH
25003: LD_OWVAR 2
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: LD_INT 34
25017: PUSH
25018: LD_INT 7
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 34
25027: PUSH
25028: LD_INT 45
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 34
25037: PUSH
25038: LD_INT 28
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 34
25047: PUSH
25048: LD_INT 47
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PPUSH
25066: CALL_OW 69
25070: ST_TO_ADDR
// if not tmp then
25071: LD_VAR 0 2
25075: NOT
25076: IFFALSE 25080
// exit ;
25078: GO 25109
// for i in tmp do
25080: LD_ADDR_VAR 0 1
25084: PUSH
25085: LD_VAR 0 2
25089: PUSH
25090: FOR_IN
25091: IFFALSE 25107
// begin SetLives ( i , 0 ) ;
25093: LD_VAR 0 1
25097: PPUSH
25098: LD_INT 0
25100: PPUSH
25101: CALL_OW 234
// end ;
25105: GO 25090
25107: POP
25108: POP
// end ;
25109: PPOPN 2
25111: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25112: LD_EXP 63
25116: PUSH
25117: LD_EXP 69
25121: AND
25122: IFFALSE 25206
25124: GO 25126
25126: DISABLE
25127: LD_INT 0
25129: PPUSH
25130: PPUSH
// begin enable ;
25131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25132: LD_ADDR_VAR 0 2
25136: PUSH
25137: LD_INT 22
25139: PUSH
25140: LD_OWVAR 2
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 32
25151: PUSH
25152: LD_INT 3
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PPUSH
25163: CALL_OW 69
25167: ST_TO_ADDR
// if not tmp then
25168: LD_VAR 0 2
25172: NOT
25173: IFFALSE 25177
// exit ;
25175: GO 25206
// for i in tmp do
25177: LD_ADDR_VAR 0 1
25181: PUSH
25182: LD_VAR 0 2
25186: PUSH
25187: FOR_IN
25188: IFFALSE 25204
// begin SetLives ( i , 0 ) ;
25190: LD_VAR 0 1
25194: PPUSH
25195: LD_INT 0
25197: PPUSH
25198: CALL_OW 234
// end ;
25202: GO 25187
25204: POP
25205: POP
// end ;
25206: PPOPN 2
25208: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25209: LD_EXP 63
25213: PUSH
25214: LD_EXP 66
25218: AND
25219: IFFALSE 25312
25221: GO 25223
25223: DISABLE
25224: LD_INT 0
25226: PPUSH
// begin enable ;
25227: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25228: LD_ADDR_VAR 0 1
25232: PUSH
25233: LD_INT 22
25235: PUSH
25236: LD_OWVAR 2
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 2
25247: PUSH
25248: LD_INT 25
25250: PUSH
25251: LD_INT 5
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 25
25260: PUSH
25261: LD_INT 9
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 25
25270: PUSH
25271: LD_INT 8
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PPUSH
25288: CALL_OW 69
25292: PUSH
25293: FOR_IN
25294: IFFALSE 25310
// begin SetClass ( i , 1 ) ;
25296: LD_VAR 0 1
25300: PPUSH
25301: LD_INT 1
25303: PPUSH
25304: CALL_OW 336
// end ;
25308: GO 25293
25310: POP
25311: POP
// end ;
25312: PPOPN 1
25314: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25315: LD_EXP 63
25319: PUSH
25320: LD_EXP 67
25324: AND
25325: PUSH
25326: LD_OWVAR 65
25330: PUSH
25331: LD_INT 7
25333: LESS
25334: AND
25335: IFFALSE 25349
25337: GO 25339
25339: DISABLE
// begin enable ;
25340: ENABLE
// game_speed := 7 ;
25341: LD_ADDR_OWVAR 65
25345: PUSH
25346: LD_INT 7
25348: ST_TO_ADDR
// end ;
25349: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25350: LD_EXP 63
25354: PUSH
25355: LD_EXP 70
25359: AND
25360: IFFALSE 25562
25362: GO 25364
25364: DISABLE
25365: LD_INT 0
25367: PPUSH
25368: PPUSH
25369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25370: LD_ADDR_VAR 0 3
25374: PUSH
25375: LD_INT 81
25377: PUSH
25378: LD_OWVAR 2
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 21
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 69
25405: ST_TO_ADDR
// if not tmp then
25406: LD_VAR 0 3
25410: NOT
25411: IFFALSE 25415
// exit ;
25413: GO 25562
// if tmp > 5 then
25415: LD_VAR 0 3
25419: PUSH
25420: LD_INT 5
25422: GREATER
25423: IFFALSE 25435
// k := 5 else
25425: LD_ADDR_VAR 0 2
25429: PUSH
25430: LD_INT 5
25432: ST_TO_ADDR
25433: GO 25445
// k := tmp ;
25435: LD_ADDR_VAR 0 2
25439: PUSH
25440: LD_VAR 0 3
25444: ST_TO_ADDR
// for i := 1 to k do
25445: LD_ADDR_VAR 0 1
25449: PUSH
25450: DOUBLE
25451: LD_INT 1
25453: DEC
25454: ST_TO_ADDR
25455: LD_VAR 0 2
25459: PUSH
25460: FOR_TO
25461: IFFALSE 25560
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25463: LD_VAR 0 3
25467: PUSH
25468: LD_VAR 0 1
25472: ARRAY
25473: PPUSH
25474: LD_VAR 0 1
25478: PUSH
25479: LD_INT 4
25481: MOD
25482: PUSH
25483: LD_INT 1
25485: PLUS
25486: PPUSH
25487: CALL_OW 259
25491: PUSH
25492: LD_INT 10
25494: LESS
25495: IFFALSE 25558
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25497: LD_VAR 0 3
25501: PUSH
25502: LD_VAR 0 1
25506: ARRAY
25507: PPUSH
25508: LD_VAR 0 1
25512: PUSH
25513: LD_INT 4
25515: MOD
25516: PUSH
25517: LD_INT 1
25519: PLUS
25520: PPUSH
25521: LD_VAR 0 3
25525: PUSH
25526: LD_VAR 0 1
25530: ARRAY
25531: PPUSH
25532: LD_VAR 0 1
25536: PUSH
25537: LD_INT 4
25539: MOD
25540: PUSH
25541: LD_INT 1
25543: PLUS
25544: PPUSH
25545: CALL_OW 259
25549: PUSH
25550: LD_INT 1
25552: PLUS
25553: PPUSH
25554: CALL_OW 237
25558: GO 25460
25560: POP
25561: POP
// end ;
25562: PPOPN 3
25564: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25565: LD_EXP 63
25569: PUSH
25570: LD_EXP 71
25574: AND
25575: IFFALSE 25595
25577: GO 25579
25579: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25580: LD_INT 4
25582: PPUSH
25583: LD_OWVAR 2
25587: PPUSH
25588: LD_INT 0
25590: PPUSH
25591: CALL_OW 324
25595: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25596: LD_EXP 63
25600: PUSH
25601: LD_EXP 100
25605: AND
25606: IFFALSE 25626
25608: GO 25610
25610: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25611: LD_INT 19
25613: PPUSH
25614: LD_OWVAR 2
25618: PPUSH
25619: LD_INT 0
25621: PPUSH
25622: CALL_OW 324
25626: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25627: LD_EXP 63
25631: PUSH
25632: LD_EXP 72
25636: AND
25637: IFFALSE 25739
25639: GO 25641
25641: DISABLE
25642: LD_INT 0
25644: PPUSH
25645: PPUSH
// begin enable ;
25646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25647: LD_ADDR_VAR 0 2
25651: PUSH
25652: LD_INT 22
25654: PUSH
25655: LD_OWVAR 2
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: LD_INT 34
25669: PUSH
25670: LD_INT 11
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 34
25679: PUSH
25680: LD_INT 30
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PPUSH
25696: CALL_OW 69
25700: ST_TO_ADDR
// if not tmp then
25701: LD_VAR 0 2
25705: NOT
25706: IFFALSE 25710
// exit ;
25708: GO 25739
// for i in tmp do
25710: LD_ADDR_VAR 0 1
25714: PUSH
25715: LD_VAR 0 2
25719: PUSH
25720: FOR_IN
25721: IFFALSE 25737
// begin SetLives ( i , 0 ) ;
25723: LD_VAR 0 1
25727: PPUSH
25728: LD_INT 0
25730: PPUSH
25731: CALL_OW 234
// end ;
25735: GO 25720
25737: POP
25738: POP
// end ;
25739: PPOPN 2
25741: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25742: LD_EXP 63
25746: PUSH
25747: LD_EXP 73
25751: AND
25752: IFFALSE 25772
25754: GO 25756
25756: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25757: LD_INT 32
25759: PPUSH
25760: LD_OWVAR 2
25764: PPUSH
25765: LD_INT 0
25767: PPUSH
25768: CALL_OW 324
25772: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25773: LD_EXP 63
25777: PUSH
25778: LD_EXP 74
25782: AND
25783: IFFALSE 25964
25785: GO 25787
25787: DISABLE
25788: LD_INT 0
25790: PPUSH
25791: PPUSH
25792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25793: LD_ADDR_VAR 0 2
25797: PUSH
25798: LD_INT 22
25800: PUSH
25801: LD_OWVAR 2
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 33
25812: PUSH
25813: LD_INT 3
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PPUSH
25824: CALL_OW 69
25828: ST_TO_ADDR
// if not tmp then
25829: LD_VAR 0 2
25833: NOT
25834: IFFALSE 25838
// exit ;
25836: GO 25964
// side := 0 ;
25838: LD_ADDR_VAR 0 3
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
// for i := 1 to 8 do
25846: LD_ADDR_VAR 0 1
25850: PUSH
25851: DOUBLE
25852: LD_INT 1
25854: DEC
25855: ST_TO_ADDR
25856: LD_INT 8
25858: PUSH
25859: FOR_TO
25860: IFFALSE 25908
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25862: LD_OWVAR 2
25866: PUSH
25867: LD_VAR 0 1
25871: NONEQUAL
25872: PUSH
25873: LD_OWVAR 2
25877: PPUSH
25878: LD_VAR 0 1
25882: PPUSH
25883: CALL_OW 81
25887: PUSH
25888: LD_INT 2
25890: EQUAL
25891: AND
25892: IFFALSE 25906
// begin side := i ;
25894: LD_ADDR_VAR 0 3
25898: PUSH
25899: LD_VAR 0 1
25903: ST_TO_ADDR
// break ;
25904: GO 25908
// end ;
25906: GO 25859
25908: POP
25909: POP
// if not side then
25910: LD_VAR 0 3
25914: NOT
25915: IFFALSE 25919
// exit ;
25917: GO 25964
// for i := 1 to tmp do
25919: LD_ADDR_VAR 0 1
25923: PUSH
25924: DOUBLE
25925: LD_INT 1
25927: DEC
25928: ST_TO_ADDR
25929: LD_VAR 0 2
25933: PUSH
25934: FOR_TO
25935: IFFALSE 25962
// if Prob ( 60 ) then
25937: LD_INT 60
25939: PPUSH
25940: CALL_OW 13
25944: IFFALSE 25960
// SetSide ( i , side ) ;
25946: LD_VAR 0 1
25950: PPUSH
25951: LD_VAR 0 3
25955: PPUSH
25956: CALL_OW 235
25960: GO 25934
25962: POP
25963: POP
// end ;
25964: PPOPN 3
25966: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25967: LD_EXP 63
25971: PUSH
25972: LD_EXP 76
25976: AND
25977: IFFALSE 26096
25979: GO 25981
25981: DISABLE
25982: LD_INT 0
25984: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25985: LD_ADDR_VAR 0 1
25989: PUSH
25990: LD_INT 22
25992: PUSH
25993: LD_OWVAR 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 21
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: LD_INT 23
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 69
26038: PUSH
26039: FOR_IN
26040: IFFALSE 26094
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26042: LD_VAR 0 1
26046: PPUSH
26047: CALL_OW 257
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: LD_INT 3
26060: PUSH
26061: LD_INT 4
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: IN
26070: IFFALSE 26092
// SetClass ( un , rand ( 1 , 4 ) ) ;
26072: LD_VAR 0 1
26076: PPUSH
26077: LD_INT 1
26079: PPUSH
26080: LD_INT 4
26082: PPUSH
26083: CALL_OW 12
26087: PPUSH
26088: CALL_OW 336
26092: GO 26039
26094: POP
26095: POP
// end ;
26096: PPOPN 1
26098: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26099: LD_EXP 63
26103: PUSH
26104: LD_EXP 75
26108: AND
26109: IFFALSE 26188
26111: GO 26113
26113: DISABLE
26114: LD_INT 0
26116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26117: LD_ADDR_VAR 0 1
26121: PUSH
26122: LD_INT 22
26124: PUSH
26125: LD_OWVAR 2
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 21
26136: PUSH
26137: LD_INT 3
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PPUSH
26148: CALL_OW 69
26152: ST_TO_ADDR
// if not tmp then
26153: LD_VAR 0 1
26157: NOT
26158: IFFALSE 26162
// exit ;
26160: GO 26188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26162: LD_VAR 0 1
26166: PUSH
26167: LD_INT 1
26169: PPUSH
26170: LD_VAR 0 1
26174: PPUSH
26175: CALL_OW 12
26179: ARRAY
26180: PPUSH
26181: LD_INT 100
26183: PPUSH
26184: CALL_OW 234
// end ;
26188: PPOPN 1
26190: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26191: LD_EXP 63
26195: PUSH
26196: LD_EXP 77
26200: AND
26201: IFFALSE 26299
26203: GO 26205
26205: DISABLE
26206: LD_INT 0
26208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26209: LD_ADDR_VAR 0 1
26213: PUSH
26214: LD_INT 22
26216: PUSH
26217: LD_OWVAR 2
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 21
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PPUSH
26240: CALL_OW 69
26244: ST_TO_ADDR
// if not tmp then
26245: LD_VAR 0 1
26249: NOT
26250: IFFALSE 26254
// exit ;
26252: GO 26299
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26254: LD_VAR 0 1
26258: PUSH
26259: LD_INT 1
26261: PPUSH
26262: LD_VAR 0 1
26266: PPUSH
26267: CALL_OW 12
26271: ARRAY
26272: PPUSH
26273: LD_INT 1
26275: PPUSH
26276: LD_INT 4
26278: PPUSH
26279: CALL_OW 12
26283: PPUSH
26284: LD_INT 3000
26286: PPUSH
26287: LD_INT 9000
26289: PPUSH
26290: CALL_OW 12
26294: PPUSH
26295: CALL_OW 492
// end ;
26299: PPOPN 1
26301: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26302: LD_EXP 63
26306: PUSH
26307: LD_EXP 78
26311: AND
26312: IFFALSE 26332
26314: GO 26316
26316: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26317: LD_INT 1
26319: PPUSH
26320: LD_OWVAR 2
26324: PPUSH
26325: LD_INT 0
26327: PPUSH
26328: CALL_OW 324
26332: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26333: LD_EXP 63
26337: PUSH
26338: LD_EXP 79
26342: AND
26343: IFFALSE 26426
26345: GO 26347
26347: DISABLE
26348: LD_INT 0
26350: PPUSH
26351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26352: LD_ADDR_VAR 0 2
26356: PUSH
26357: LD_INT 22
26359: PUSH
26360: LD_OWVAR 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 21
26371: PUSH
26372: LD_INT 3
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PPUSH
26383: CALL_OW 69
26387: ST_TO_ADDR
// if not tmp then
26388: LD_VAR 0 2
26392: NOT
26393: IFFALSE 26397
// exit ;
26395: GO 26426
// for i in tmp do
26397: LD_ADDR_VAR 0 1
26401: PUSH
26402: LD_VAR 0 2
26406: PUSH
26407: FOR_IN
26408: IFFALSE 26424
// SetBLevel ( i , 10 ) ;
26410: LD_VAR 0 1
26414: PPUSH
26415: LD_INT 10
26417: PPUSH
26418: CALL_OW 241
26422: GO 26407
26424: POP
26425: POP
// end ;
26426: PPOPN 2
26428: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26429: LD_EXP 63
26433: PUSH
26434: LD_EXP 80
26438: AND
26439: IFFALSE 26550
26441: GO 26443
26443: DISABLE
26444: LD_INT 0
26446: PPUSH
26447: PPUSH
26448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26449: LD_ADDR_VAR 0 3
26453: PUSH
26454: LD_INT 22
26456: PUSH
26457: LD_OWVAR 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 25
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: ST_TO_ADDR
// if not tmp then
26485: LD_VAR 0 3
26489: NOT
26490: IFFALSE 26494
// exit ;
26492: GO 26550
// un := tmp [ rand ( 1 , tmp ) ] ;
26494: LD_ADDR_VAR 0 2
26498: PUSH
26499: LD_VAR 0 3
26503: PUSH
26504: LD_INT 1
26506: PPUSH
26507: LD_VAR 0 3
26511: PPUSH
26512: CALL_OW 12
26516: ARRAY
26517: ST_TO_ADDR
// if Crawls ( un ) then
26518: LD_VAR 0 2
26522: PPUSH
26523: CALL_OW 318
26527: IFFALSE 26538
// ComWalk ( un ) ;
26529: LD_VAR 0 2
26533: PPUSH
26534: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26538: LD_VAR 0 2
26542: PPUSH
26543: LD_INT 5
26545: PPUSH
26546: CALL_OW 336
// end ;
26550: PPOPN 3
26552: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26553: LD_EXP 63
26557: PUSH
26558: LD_EXP 81
26562: AND
26563: PUSH
26564: LD_OWVAR 67
26568: PUSH
26569: LD_INT 4
26571: LESS
26572: AND
26573: IFFALSE 26592
26575: GO 26577
26577: DISABLE
// begin Difficulty := Difficulty + 1 ;
26578: LD_ADDR_OWVAR 67
26582: PUSH
26583: LD_OWVAR 67
26587: PUSH
26588: LD_INT 1
26590: PLUS
26591: ST_TO_ADDR
// end ;
26592: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26593: LD_EXP 63
26597: PUSH
26598: LD_EXP 82
26602: AND
26603: IFFALSE 26706
26605: GO 26607
26607: DISABLE
26608: LD_INT 0
26610: PPUSH
// begin for i := 1 to 5 do
26611: LD_ADDR_VAR 0 1
26615: PUSH
26616: DOUBLE
26617: LD_INT 1
26619: DEC
26620: ST_TO_ADDR
26621: LD_INT 5
26623: PUSH
26624: FOR_TO
26625: IFFALSE 26704
// begin uc_nation := nation_nature ;
26627: LD_ADDR_OWVAR 21
26631: PUSH
26632: LD_INT 0
26634: ST_TO_ADDR
// uc_side := 0 ;
26635: LD_ADDR_OWVAR 20
26639: PUSH
26640: LD_INT 0
26642: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26643: LD_ADDR_OWVAR 29
26647: PUSH
26648: LD_INT 12
26650: PUSH
26651: LD_INT 12
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: ST_TO_ADDR
// hc_agressivity := 20 ;
26658: LD_ADDR_OWVAR 35
26662: PUSH
26663: LD_INT 20
26665: ST_TO_ADDR
// hc_class := class_tiger ;
26666: LD_ADDR_OWVAR 28
26670: PUSH
26671: LD_INT 14
26673: ST_TO_ADDR
// hc_gallery :=  ;
26674: LD_ADDR_OWVAR 33
26678: PUSH
26679: LD_STRING 
26681: ST_TO_ADDR
// hc_name :=  ;
26682: LD_ADDR_OWVAR 26
26686: PUSH
26687: LD_STRING 
26689: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26690: CALL_OW 44
26694: PPUSH
26695: LD_INT 0
26697: PPUSH
26698: CALL_OW 51
// end ;
26702: GO 26624
26704: POP
26705: POP
// end ;
26706: PPOPN 1
26708: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26709: LD_EXP 63
26713: PUSH
26714: LD_EXP 83
26718: AND
26719: IFFALSE 26728
26721: GO 26723
26723: DISABLE
// StreamSibBomb ;
26724: CALL 26729 0 0
26728: END
// export function StreamSibBomb ; var i , x , y ; begin
26729: LD_INT 0
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
// result := false ;
26735: LD_ADDR_VAR 0 1
26739: PUSH
26740: LD_INT 0
26742: ST_TO_ADDR
// for i := 1 to 16 do
26743: LD_ADDR_VAR 0 2
26747: PUSH
26748: DOUBLE
26749: LD_INT 1
26751: DEC
26752: ST_TO_ADDR
26753: LD_INT 16
26755: PUSH
26756: FOR_TO
26757: IFFALSE 26956
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26759: LD_ADDR_VAR 0 3
26763: PUSH
26764: LD_INT 10
26766: PUSH
26767: LD_INT 20
26769: PUSH
26770: LD_INT 30
26772: PUSH
26773: LD_INT 40
26775: PUSH
26776: LD_INT 50
26778: PUSH
26779: LD_INT 60
26781: PUSH
26782: LD_INT 70
26784: PUSH
26785: LD_INT 80
26787: PUSH
26788: LD_INT 90
26790: PUSH
26791: LD_INT 100
26793: PUSH
26794: LD_INT 110
26796: PUSH
26797: LD_INT 120
26799: PUSH
26800: LD_INT 130
26802: PUSH
26803: LD_INT 140
26805: PUSH
26806: LD_INT 150
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PPUSH
26829: LD_INT 15
26831: PPUSH
26832: CALL_OW 12
26836: ARRAY
26837: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26838: LD_ADDR_VAR 0 4
26842: PUSH
26843: LD_INT 10
26845: PUSH
26846: LD_INT 20
26848: PUSH
26849: LD_INT 30
26851: PUSH
26852: LD_INT 40
26854: PUSH
26855: LD_INT 50
26857: PUSH
26858: LD_INT 60
26860: PUSH
26861: LD_INT 70
26863: PUSH
26864: LD_INT 80
26866: PUSH
26867: LD_INT 90
26869: PUSH
26870: LD_INT 100
26872: PUSH
26873: LD_INT 110
26875: PUSH
26876: LD_INT 120
26878: PUSH
26879: LD_INT 130
26881: PUSH
26882: LD_INT 140
26884: PUSH
26885: LD_INT 150
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PPUSH
26908: LD_INT 15
26910: PPUSH
26911: CALL_OW 12
26915: ARRAY
26916: ST_TO_ADDR
// if ValidHex ( x , y ) then
26917: LD_VAR 0 3
26921: PPUSH
26922: LD_VAR 0 4
26926: PPUSH
26927: CALL_OW 488
26931: IFFALSE 26954
// begin result := [ x , y ] ;
26933: LD_ADDR_VAR 0 1
26937: PUSH
26938: LD_VAR 0 3
26942: PUSH
26943: LD_VAR 0 4
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: ST_TO_ADDR
// break ;
26952: GO 26956
// end ; end ;
26954: GO 26756
26956: POP
26957: POP
// if result then
26958: LD_VAR 0 1
26962: IFFALSE 27022
// begin ToLua ( playSibBomb() ) ;
26964: LD_STRING playSibBomb()
26966: PPUSH
26967: CALL_OW 559
// wait ( 0 0$14 ) ;
26971: LD_INT 490
26973: PPUSH
26974: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26978: LD_VAR 0 1
26982: PUSH
26983: LD_INT 1
26985: ARRAY
26986: PPUSH
26987: LD_VAR 0 1
26991: PUSH
26992: LD_INT 2
26994: ARRAY
26995: PPUSH
26996: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27000: LD_VAR 0 1
27004: PUSH
27005: LD_INT 1
27007: ARRAY
27008: PPUSH
27009: LD_VAR 0 1
27013: PUSH
27014: LD_INT 2
27016: ARRAY
27017: PPUSH
27018: CALL_OW 429
// end ; end ;
27022: LD_VAR 0 1
27026: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27027: LD_EXP 63
27031: PUSH
27032: LD_EXP 85
27036: AND
27037: IFFALSE 27049
27039: GO 27041
27041: DISABLE
// YouLost (  ) ;
27042: LD_STRING 
27044: PPUSH
27045: CALL_OW 104
27049: END
// every 0 0$1 trigger StreamModeActive and sFog do
27050: LD_EXP 63
27054: PUSH
27055: LD_EXP 84
27059: AND
27060: IFFALSE 27074
27062: GO 27064
27064: DISABLE
// FogOff ( your_side ) ;
27065: LD_OWVAR 2
27069: PPUSH
27070: CALL_OW 344
27074: END
// every 0 0$1 trigger StreamModeActive and sSun do
27075: LD_EXP 63
27079: PUSH
27080: LD_EXP 86
27084: AND
27085: IFFALSE 27113
27087: GO 27089
27089: DISABLE
// begin solar_recharge_percent := 0 ;
27090: LD_ADDR_OWVAR 79
27094: PUSH
27095: LD_INT 0
27097: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27098: LD_INT 10500
27100: PPUSH
27101: CALL_OW 67
// solar_recharge_percent := 100 ;
27105: LD_ADDR_OWVAR 79
27109: PUSH
27110: LD_INT 100
27112: ST_TO_ADDR
// end ;
27113: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27114: LD_EXP 63
27118: PUSH
27119: LD_EXP 87
27123: AND
27124: IFFALSE 27363
27126: GO 27128
27128: DISABLE
27129: LD_INT 0
27131: PPUSH
27132: PPUSH
27133: PPUSH
// begin tmp := [ ] ;
27134: LD_ADDR_VAR 0 3
27138: PUSH
27139: EMPTY
27140: ST_TO_ADDR
// for i := 1 to 6 do
27141: LD_ADDR_VAR 0 1
27145: PUSH
27146: DOUBLE
27147: LD_INT 1
27149: DEC
27150: ST_TO_ADDR
27151: LD_INT 6
27153: PUSH
27154: FOR_TO
27155: IFFALSE 27260
// begin uc_nation := nation_nature ;
27157: LD_ADDR_OWVAR 21
27161: PUSH
27162: LD_INT 0
27164: ST_TO_ADDR
// uc_side := 0 ;
27165: LD_ADDR_OWVAR 20
27169: PUSH
27170: LD_INT 0
27172: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27173: LD_ADDR_OWVAR 29
27177: PUSH
27178: LD_INT 12
27180: PUSH
27181: LD_INT 12
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: ST_TO_ADDR
// hc_agressivity := 20 ;
27188: LD_ADDR_OWVAR 35
27192: PUSH
27193: LD_INT 20
27195: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27196: LD_ADDR_OWVAR 28
27200: PUSH
27201: LD_INT 17
27203: ST_TO_ADDR
// hc_gallery :=  ;
27204: LD_ADDR_OWVAR 33
27208: PUSH
27209: LD_STRING 
27211: ST_TO_ADDR
// hc_name :=  ;
27212: LD_ADDR_OWVAR 26
27216: PUSH
27217: LD_STRING 
27219: ST_TO_ADDR
// un := CreateHuman ;
27220: LD_ADDR_VAR 0 2
27224: PUSH
27225: CALL_OW 44
27229: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27230: LD_VAR 0 2
27234: PPUSH
27235: LD_INT 1
27237: PPUSH
27238: CALL_OW 51
// tmp := tmp ^ un ;
27242: LD_ADDR_VAR 0 3
27246: PUSH
27247: LD_VAR 0 3
27251: PUSH
27252: LD_VAR 0 2
27256: ADD
27257: ST_TO_ADDR
// end ;
27258: GO 27154
27260: POP
27261: POP
// repeat wait ( 0 0$1 ) ;
27262: LD_INT 35
27264: PPUSH
27265: CALL_OW 67
// for un in tmp do
27269: LD_ADDR_VAR 0 2
27273: PUSH
27274: LD_VAR 0 3
27278: PUSH
27279: FOR_IN
27280: IFFALSE 27354
// begin if IsDead ( un ) then
27282: LD_VAR 0 2
27286: PPUSH
27287: CALL_OW 301
27291: IFFALSE 27311
// begin tmp := tmp diff un ;
27293: LD_ADDR_VAR 0 3
27297: PUSH
27298: LD_VAR 0 3
27302: PUSH
27303: LD_VAR 0 2
27307: DIFF
27308: ST_TO_ADDR
// continue ;
27309: GO 27279
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27311: LD_VAR 0 2
27315: PPUSH
27316: LD_INT 3
27318: PUSH
27319: LD_INT 22
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PPUSH
27333: CALL_OW 69
27337: PPUSH
27338: LD_VAR 0 2
27342: PPUSH
27343: CALL_OW 74
27347: PPUSH
27348: CALL_OW 115
// end ;
27352: GO 27279
27354: POP
27355: POP
// until not tmp ;
27356: LD_VAR 0 3
27360: NOT
27361: IFFALSE 27262
// end ;
27363: PPOPN 3
27365: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27366: LD_EXP 63
27370: PUSH
27371: LD_EXP 88
27375: AND
27376: IFFALSE 27430
27378: GO 27380
27380: DISABLE
// begin ToLua ( displayTroll(); ) ;
27381: LD_STRING displayTroll();
27383: PPUSH
27384: CALL_OW 559
// wait ( 3 3$00 ) ;
27388: LD_INT 6300
27390: PPUSH
27391: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27395: LD_STRING hideTroll();
27397: PPUSH
27398: CALL_OW 559
// wait ( 1 1$00 ) ;
27402: LD_INT 2100
27404: PPUSH
27405: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27409: LD_STRING displayTroll();
27411: PPUSH
27412: CALL_OW 559
// wait ( 1 1$00 ) ;
27416: LD_INT 2100
27418: PPUSH
27419: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27423: LD_STRING hideTroll();
27425: PPUSH
27426: CALL_OW 559
// end ;
27430: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27431: LD_EXP 63
27435: PUSH
27436: LD_EXP 89
27440: AND
27441: IFFALSE 27504
27443: GO 27445
27445: DISABLE
27446: LD_INT 0
27448: PPUSH
// begin p := 0 ;
27449: LD_ADDR_VAR 0 1
27453: PUSH
27454: LD_INT 0
27456: ST_TO_ADDR
// repeat game_speed := 1 ;
27457: LD_ADDR_OWVAR 65
27461: PUSH
27462: LD_INT 1
27464: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27465: LD_INT 35
27467: PPUSH
27468: CALL_OW 67
// p := p + 1 ;
27472: LD_ADDR_VAR 0 1
27476: PUSH
27477: LD_VAR 0 1
27481: PUSH
27482: LD_INT 1
27484: PLUS
27485: ST_TO_ADDR
// until p >= 60 ;
27486: LD_VAR 0 1
27490: PUSH
27491: LD_INT 60
27493: GREATEREQUAL
27494: IFFALSE 27457
// game_speed := 4 ;
27496: LD_ADDR_OWVAR 65
27500: PUSH
27501: LD_INT 4
27503: ST_TO_ADDR
// end ;
27504: PPOPN 1
27506: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27507: LD_EXP 63
27511: PUSH
27512: LD_EXP 90
27516: AND
27517: IFFALSE 27663
27519: GO 27521
27521: DISABLE
27522: LD_INT 0
27524: PPUSH
27525: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27526: LD_ADDR_VAR 0 1
27530: PUSH
27531: LD_INT 22
27533: PUSH
27534: LD_OWVAR 2
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: LD_INT 30
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 30
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PPUSH
27575: CALL_OW 69
27579: ST_TO_ADDR
// if not depot then
27580: LD_VAR 0 1
27584: NOT
27585: IFFALSE 27589
// exit ;
27587: GO 27663
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27589: LD_ADDR_VAR 0 2
27593: PUSH
27594: LD_VAR 0 1
27598: PUSH
27599: LD_INT 1
27601: PPUSH
27602: LD_VAR 0 1
27606: PPUSH
27607: CALL_OW 12
27611: ARRAY
27612: PPUSH
27613: CALL_OW 274
27617: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27618: LD_VAR 0 2
27622: PPUSH
27623: LD_INT 1
27625: PPUSH
27626: LD_INT 0
27628: PPUSH
27629: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27633: LD_VAR 0 2
27637: PPUSH
27638: LD_INT 2
27640: PPUSH
27641: LD_INT 0
27643: PPUSH
27644: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27648: LD_VAR 0 2
27652: PPUSH
27653: LD_INT 3
27655: PPUSH
27656: LD_INT 0
27658: PPUSH
27659: CALL_OW 277
// end ;
27663: PPOPN 2
27665: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27666: LD_EXP 63
27670: PUSH
27671: LD_EXP 91
27675: AND
27676: IFFALSE 27773
27678: GO 27680
27680: DISABLE
27681: LD_INT 0
27683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27684: LD_ADDR_VAR 0 1
27688: PUSH
27689: LD_INT 22
27691: PUSH
27692: LD_OWVAR 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 21
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 3
27713: PUSH
27714: LD_INT 23
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: LIST
27732: PPUSH
27733: CALL_OW 69
27737: ST_TO_ADDR
// if not tmp then
27738: LD_VAR 0 1
27742: NOT
27743: IFFALSE 27747
// exit ;
27745: GO 27773
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27747: LD_VAR 0 1
27751: PUSH
27752: LD_INT 1
27754: PPUSH
27755: LD_VAR 0 1
27759: PPUSH
27760: CALL_OW 12
27764: ARRAY
27765: PPUSH
27766: LD_INT 200
27768: PPUSH
27769: CALL_OW 234
// end ;
27773: PPOPN 1
27775: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27776: LD_EXP 63
27780: PUSH
27781: LD_EXP 92
27785: AND
27786: IFFALSE 27865
27788: GO 27790
27790: DISABLE
27791: LD_INT 0
27793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27794: LD_ADDR_VAR 0 1
27798: PUSH
27799: LD_INT 22
27801: PUSH
27802: LD_OWVAR 2
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 21
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PPUSH
27825: CALL_OW 69
27829: ST_TO_ADDR
// if not tmp then
27830: LD_VAR 0 1
27834: NOT
27835: IFFALSE 27839
// exit ;
27837: GO 27865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27839: LD_VAR 0 1
27843: PUSH
27844: LD_INT 1
27846: PPUSH
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL_OW 12
27856: ARRAY
27857: PPUSH
27858: LD_INT 60
27860: PPUSH
27861: CALL_OW 234
// end ;
27865: PPOPN 1
27867: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27868: LD_EXP 63
27872: PUSH
27873: LD_EXP 93
27877: AND
27878: IFFALSE 27977
27880: GO 27882
27882: DISABLE
27883: LD_INT 0
27885: PPUSH
27886: PPUSH
// begin enable ;
27887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27888: LD_ADDR_VAR 0 1
27892: PUSH
27893: LD_INT 22
27895: PUSH
27896: LD_OWVAR 2
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 61
27907: PUSH
27908: EMPTY
27909: LIST
27910: PUSH
27911: LD_INT 33
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: PPUSH
27926: CALL_OW 69
27930: ST_TO_ADDR
// if not tmp then
27931: LD_VAR 0 1
27935: NOT
27936: IFFALSE 27940
// exit ;
27938: GO 27977
// for i in tmp do
27940: LD_ADDR_VAR 0 2
27944: PUSH
27945: LD_VAR 0 1
27949: PUSH
27950: FOR_IN
27951: IFFALSE 27975
// if IsControledBy ( i ) then
27953: LD_VAR 0 2
27957: PPUSH
27958: CALL_OW 312
27962: IFFALSE 27973
// ComUnlink ( i ) ;
27964: LD_VAR 0 2
27968: PPUSH
27969: CALL_OW 136
27973: GO 27950
27975: POP
27976: POP
// end ;
27977: PPOPN 2
27979: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27980: LD_EXP 63
27984: PUSH
27985: LD_EXP 94
27989: AND
27990: IFFALSE 28130
27992: GO 27994
27994: DISABLE
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
// begin ToLua ( displayPowell(); ) ;
27999: LD_STRING displayPowell();
28001: PPUSH
28002: CALL_OW 559
// uc_side := 0 ;
28006: LD_ADDR_OWVAR 20
28010: PUSH
28011: LD_INT 0
28013: ST_TO_ADDR
// uc_nation := 2 ;
28014: LD_ADDR_OWVAR 21
28018: PUSH
28019: LD_INT 2
28021: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28022: LD_ADDR_OWVAR 37
28026: PUSH
28027: LD_INT 14
28029: ST_TO_ADDR
// vc_engine := engine_siberite ;
28030: LD_ADDR_OWVAR 39
28034: PUSH
28035: LD_INT 3
28037: ST_TO_ADDR
// vc_control := control_apeman ;
28038: LD_ADDR_OWVAR 38
28042: PUSH
28043: LD_INT 5
28045: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28046: LD_ADDR_OWVAR 40
28050: PUSH
28051: LD_INT 29
28053: ST_TO_ADDR
// un := CreateVehicle ;
28054: LD_ADDR_VAR 0 2
28058: PUSH
28059: CALL_OW 45
28063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28064: LD_VAR 0 2
28068: PPUSH
28069: LD_INT 1
28071: PPUSH
28072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28076: LD_INT 35
28078: PPUSH
28079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28083: LD_VAR 0 2
28087: PPUSH
28088: LD_INT 22
28090: PUSH
28091: LD_OWVAR 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PPUSH
28100: CALL_OW 69
28104: PPUSH
28105: LD_VAR 0 2
28109: PPUSH
28110: CALL_OW 74
28114: PPUSH
28115: CALL_OW 115
// until IsDead ( un ) ;
28119: LD_VAR 0 2
28123: PPUSH
28124: CALL_OW 301
28128: IFFALSE 28076
// end ;
28130: PPOPN 2
28132: END
// every 0 0$1 trigger StreamModeActive and sStu do
28133: LD_EXP 63
28137: PUSH
28138: LD_EXP 102
28142: AND
28143: IFFALSE 28159
28145: GO 28147
28147: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28148: LD_STRING displayStucuk();
28150: PPUSH
28151: CALL_OW 559
// ResetFog ;
28155: CALL_OW 335
// end ;
28159: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28160: LD_EXP 63
28164: PUSH
28165: LD_EXP 95
28169: AND
28170: IFFALSE 28311
28172: GO 28174
28174: DISABLE
28175: LD_INT 0
28177: PPUSH
28178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28179: LD_ADDR_VAR 0 2
28183: PUSH
28184: LD_INT 22
28186: PUSH
28187: LD_OWVAR 2
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 21
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PPUSH
28210: CALL_OW 69
28214: ST_TO_ADDR
// if not tmp then
28215: LD_VAR 0 2
28219: NOT
28220: IFFALSE 28224
// exit ;
28222: GO 28311
// un := tmp [ rand ( 1 , tmp ) ] ;
28224: LD_ADDR_VAR 0 1
28228: PUSH
28229: LD_VAR 0 2
28233: PUSH
28234: LD_INT 1
28236: PPUSH
28237: LD_VAR 0 2
28241: PPUSH
28242: CALL_OW 12
28246: ARRAY
28247: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28248: LD_VAR 0 1
28252: PPUSH
28253: LD_INT 0
28255: PPUSH
28256: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28260: LD_VAR 0 1
28264: PPUSH
28265: LD_OWVAR 3
28269: PUSH
28270: LD_VAR 0 1
28274: DIFF
28275: PPUSH
28276: LD_VAR 0 1
28280: PPUSH
28281: CALL_OW 74
28285: PPUSH
28286: CALL_OW 115
// wait ( 0 0$20 ) ;
28290: LD_INT 700
28292: PPUSH
28293: CALL_OW 67
// SetSide ( un , your_side ) ;
28297: LD_VAR 0 1
28301: PPUSH
28302: LD_OWVAR 2
28306: PPUSH
28307: CALL_OW 235
// end ;
28311: PPOPN 2
28313: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28314: LD_EXP 63
28318: PUSH
28319: LD_EXP 96
28323: AND
28324: IFFALSE 28430
28326: GO 28328
28328: DISABLE
28329: LD_INT 0
28331: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28332: LD_ADDR_VAR 0 1
28336: PUSH
28337: LD_INT 22
28339: PUSH
28340: LD_OWVAR 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: PUSH
28352: LD_INT 30
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 30
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: LIST
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PPUSH
28381: CALL_OW 69
28385: ST_TO_ADDR
// if not depot then
28386: LD_VAR 0 1
28390: NOT
28391: IFFALSE 28395
// exit ;
28393: GO 28430
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28395: LD_VAR 0 1
28399: PUSH
28400: LD_INT 1
28402: ARRAY
28403: PPUSH
28404: CALL_OW 250
28408: PPUSH
28409: LD_VAR 0 1
28413: PUSH
28414: LD_INT 1
28416: ARRAY
28417: PPUSH
28418: CALL_OW 251
28422: PPUSH
28423: LD_INT 70
28425: PPUSH
28426: CALL_OW 495
// end ;
28430: PPOPN 1
28432: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28433: LD_EXP 63
28437: PUSH
28438: LD_EXP 97
28442: AND
28443: IFFALSE 28654
28445: GO 28447
28447: DISABLE
28448: LD_INT 0
28450: PPUSH
28451: PPUSH
28452: PPUSH
28453: PPUSH
28454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28455: LD_ADDR_VAR 0 5
28459: PUSH
28460: LD_INT 22
28462: PUSH
28463: LD_OWVAR 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 21
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PPUSH
28486: CALL_OW 69
28490: ST_TO_ADDR
// if not tmp then
28491: LD_VAR 0 5
28495: NOT
28496: IFFALSE 28500
// exit ;
28498: GO 28654
// for i in tmp do
28500: LD_ADDR_VAR 0 1
28504: PUSH
28505: LD_VAR 0 5
28509: PUSH
28510: FOR_IN
28511: IFFALSE 28652
// begin d := rand ( 0 , 5 ) ;
28513: LD_ADDR_VAR 0 4
28517: PUSH
28518: LD_INT 0
28520: PPUSH
28521: LD_INT 5
28523: PPUSH
28524: CALL_OW 12
28528: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28529: LD_ADDR_VAR 0 2
28533: PUSH
28534: LD_VAR 0 1
28538: PPUSH
28539: CALL_OW 250
28543: PPUSH
28544: LD_VAR 0 4
28548: PPUSH
28549: LD_INT 3
28551: PPUSH
28552: LD_INT 12
28554: PPUSH
28555: CALL_OW 12
28559: PPUSH
28560: CALL_OW 272
28564: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28565: LD_ADDR_VAR 0 3
28569: PUSH
28570: LD_VAR 0 1
28574: PPUSH
28575: CALL_OW 251
28579: PPUSH
28580: LD_VAR 0 4
28584: PPUSH
28585: LD_INT 3
28587: PPUSH
28588: LD_INT 12
28590: PPUSH
28591: CALL_OW 12
28595: PPUSH
28596: CALL_OW 273
28600: ST_TO_ADDR
// if ValidHex ( x , y ) then
28601: LD_VAR 0 2
28605: PPUSH
28606: LD_VAR 0 3
28610: PPUSH
28611: CALL_OW 488
28615: IFFALSE 28650
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28617: LD_VAR 0 1
28621: PPUSH
28622: LD_VAR 0 2
28626: PPUSH
28627: LD_VAR 0 3
28631: PPUSH
28632: LD_INT 3
28634: PPUSH
28635: LD_INT 6
28637: PPUSH
28638: CALL_OW 12
28642: PPUSH
28643: LD_INT 1
28645: PPUSH
28646: CALL_OW 483
// end ;
28650: GO 28510
28652: POP
28653: POP
// end ;
28654: PPOPN 5
28656: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28657: LD_EXP 63
28661: PUSH
28662: LD_EXP 98
28666: AND
28667: IFFALSE 28761
28669: GO 28671
28671: DISABLE
28672: LD_INT 0
28674: PPUSH
28675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28676: LD_ADDR_VAR 0 2
28680: PUSH
28681: LD_INT 22
28683: PUSH
28684: LD_OWVAR 2
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 32
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 21
28705: PUSH
28706: LD_INT 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: LIST
28717: PPUSH
28718: CALL_OW 69
28722: ST_TO_ADDR
// if not tmp then
28723: LD_VAR 0 2
28727: NOT
28728: IFFALSE 28732
// exit ;
28730: GO 28761
// for i in tmp do
28732: LD_ADDR_VAR 0 1
28736: PUSH
28737: LD_VAR 0 2
28741: PUSH
28742: FOR_IN
28743: IFFALSE 28759
// SetFuel ( i , 0 ) ;
28745: LD_VAR 0 1
28749: PPUSH
28750: LD_INT 0
28752: PPUSH
28753: CALL_OW 240
28757: GO 28742
28759: POP
28760: POP
// end ;
28761: PPOPN 2
28763: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28764: LD_EXP 63
28768: PUSH
28769: LD_EXP 99
28773: AND
28774: IFFALSE 28840
28776: GO 28778
28778: DISABLE
28779: LD_INT 0
28781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28782: LD_ADDR_VAR 0 1
28786: PUSH
28787: LD_INT 22
28789: PUSH
28790: LD_OWVAR 2
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 30
28801: PUSH
28802: LD_INT 29
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PPUSH
28813: CALL_OW 69
28817: ST_TO_ADDR
// if not tmp then
28818: LD_VAR 0 1
28822: NOT
28823: IFFALSE 28827
// exit ;
28825: GO 28840
// DestroyUnit ( tmp [ 1 ] ) ;
28827: LD_VAR 0 1
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: PPUSH
28836: CALL_OW 65
// end ;
28840: PPOPN 1
28842: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28843: LD_EXP 63
28847: PUSH
28848: LD_EXP 101
28852: AND
28853: IFFALSE 28982
28855: GO 28857
28857: DISABLE
28858: LD_INT 0
28860: PPUSH
// begin uc_side := 0 ;
28861: LD_ADDR_OWVAR 20
28865: PUSH
28866: LD_INT 0
28868: ST_TO_ADDR
// uc_nation := nation_arabian ;
28869: LD_ADDR_OWVAR 21
28873: PUSH
28874: LD_INT 2
28876: ST_TO_ADDR
// hc_gallery :=  ;
28877: LD_ADDR_OWVAR 33
28881: PUSH
28882: LD_STRING 
28884: ST_TO_ADDR
// hc_name :=  ;
28885: LD_ADDR_OWVAR 26
28889: PUSH
28890: LD_STRING 
28892: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28893: LD_INT 1
28895: PPUSH
28896: LD_INT 11
28898: PPUSH
28899: LD_INT 10
28901: PPUSH
28902: CALL_OW 380
// un := CreateHuman ;
28906: LD_ADDR_VAR 0 1
28910: PUSH
28911: CALL_OW 44
28915: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28916: LD_VAR 0 1
28920: PPUSH
28921: LD_INT 1
28923: PPUSH
28924: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28928: LD_INT 35
28930: PPUSH
28931: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28935: LD_VAR 0 1
28939: PPUSH
28940: LD_INT 22
28942: PUSH
28943: LD_OWVAR 2
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PPUSH
28952: CALL_OW 69
28956: PPUSH
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL_OW 74
28966: PPUSH
28967: CALL_OW 115
// until IsDead ( un ) ;
28971: LD_VAR 0 1
28975: PPUSH
28976: CALL_OW 301
28980: IFFALSE 28928
// end ;
28982: PPOPN 1
28984: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28985: LD_EXP 63
28989: PUSH
28990: LD_EXP 103
28994: AND
28995: IFFALSE 29007
28997: GO 28999
28999: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29000: LD_STRING earthquake(getX(game), 0, 32)
29002: PPUSH
29003: CALL_OW 559
29007: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29008: LD_EXP 63
29012: PUSH
29013: LD_EXP 104
29017: AND
29018: IFFALSE 29109
29020: GO 29022
29022: DISABLE
29023: LD_INT 0
29025: PPUSH
// begin enable ;
29026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29027: LD_ADDR_VAR 0 1
29031: PUSH
29032: LD_INT 22
29034: PUSH
29035: LD_OWVAR 2
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 21
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 33
29056: PUSH
29057: LD_INT 3
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: PPUSH
29069: CALL_OW 69
29073: ST_TO_ADDR
// if not tmp then
29074: LD_VAR 0 1
29078: NOT
29079: IFFALSE 29083
// exit ;
29081: GO 29109
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29083: LD_VAR 0 1
29087: PUSH
29088: LD_INT 1
29090: PPUSH
29091: LD_VAR 0 1
29095: PPUSH
29096: CALL_OW 12
29100: ARRAY
29101: PPUSH
29102: LD_INT 1
29104: PPUSH
29105: CALL_OW 234
// end ;
29109: PPOPN 1
29111: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29112: LD_EXP 63
29116: PUSH
29117: LD_EXP 105
29121: AND
29122: IFFALSE 29263
29124: GO 29126
29126: DISABLE
29127: LD_INT 0
29129: PPUSH
29130: PPUSH
29131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29132: LD_ADDR_VAR 0 3
29136: PUSH
29137: LD_INT 22
29139: PUSH
29140: LD_OWVAR 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 25
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PPUSH
29163: CALL_OW 69
29167: ST_TO_ADDR
// if not tmp then
29168: LD_VAR 0 3
29172: NOT
29173: IFFALSE 29177
// exit ;
29175: GO 29263
// un := tmp [ rand ( 1 , tmp ) ] ;
29177: LD_ADDR_VAR 0 2
29181: PUSH
29182: LD_VAR 0 3
29186: PUSH
29187: LD_INT 1
29189: PPUSH
29190: LD_VAR 0 3
29194: PPUSH
29195: CALL_OW 12
29199: ARRAY
29200: ST_TO_ADDR
// if Crawls ( un ) then
29201: LD_VAR 0 2
29205: PPUSH
29206: CALL_OW 318
29210: IFFALSE 29221
// ComWalk ( un ) ;
29212: LD_VAR 0 2
29216: PPUSH
29217: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29221: LD_VAR 0 2
29225: PPUSH
29226: LD_INT 9
29228: PPUSH
29229: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29233: LD_INT 28
29235: PPUSH
29236: LD_OWVAR 2
29240: PPUSH
29241: LD_INT 2
29243: PPUSH
29244: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29248: LD_INT 29
29250: PPUSH
29251: LD_OWVAR 2
29255: PPUSH
29256: LD_INT 2
29258: PPUSH
29259: CALL_OW 322
// end ;
29263: PPOPN 3
29265: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29266: LD_EXP 63
29270: PUSH
29271: LD_EXP 106
29275: AND
29276: IFFALSE 29387
29278: GO 29280
29280: DISABLE
29281: LD_INT 0
29283: PPUSH
29284: PPUSH
29285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29286: LD_ADDR_VAR 0 3
29290: PUSH
29291: LD_INT 22
29293: PUSH
29294: LD_OWVAR 2
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 25
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PPUSH
29317: CALL_OW 69
29321: ST_TO_ADDR
// if not tmp then
29322: LD_VAR 0 3
29326: NOT
29327: IFFALSE 29331
// exit ;
29329: GO 29387
// un := tmp [ rand ( 1 , tmp ) ] ;
29331: LD_ADDR_VAR 0 2
29335: PUSH
29336: LD_VAR 0 3
29340: PUSH
29341: LD_INT 1
29343: PPUSH
29344: LD_VAR 0 3
29348: PPUSH
29349: CALL_OW 12
29353: ARRAY
29354: ST_TO_ADDR
// if Crawls ( un ) then
29355: LD_VAR 0 2
29359: PPUSH
29360: CALL_OW 318
29364: IFFALSE 29375
// ComWalk ( un ) ;
29366: LD_VAR 0 2
29370: PPUSH
29371: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29375: LD_VAR 0 2
29379: PPUSH
29380: LD_INT 8
29382: PPUSH
29383: CALL_OW 336
// end ;
29387: PPOPN 3
29389: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29390: LD_EXP 63
29394: PUSH
29395: LD_EXP 107
29399: AND
29400: IFFALSE 29544
29402: GO 29404
29404: DISABLE
29405: LD_INT 0
29407: PPUSH
29408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29409: LD_ADDR_VAR 0 2
29413: PUSH
29414: LD_INT 22
29416: PUSH
29417: LD_OWVAR 2
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 21
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: LD_INT 34
29441: PUSH
29442: LD_INT 12
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 34
29451: PUSH
29452: LD_INT 51
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 34
29461: PUSH
29462: LD_INT 32
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: PPUSH
29480: CALL_OW 69
29484: ST_TO_ADDR
// if not tmp then
29485: LD_VAR 0 2
29489: NOT
29490: IFFALSE 29494
// exit ;
29492: GO 29544
// for i in tmp do
29494: LD_ADDR_VAR 0 1
29498: PUSH
29499: LD_VAR 0 2
29503: PUSH
29504: FOR_IN
29505: IFFALSE 29542
// if GetCargo ( i , mat_artifact ) = 0 then
29507: LD_VAR 0 1
29511: PPUSH
29512: LD_INT 4
29514: PPUSH
29515: CALL_OW 289
29519: PUSH
29520: LD_INT 0
29522: EQUAL
29523: IFFALSE 29540
// SetCargo ( i , mat_siberit , 100 ) ;
29525: LD_VAR 0 1
29529: PPUSH
29530: LD_INT 3
29532: PPUSH
29533: LD_INT 100
29535: PPUSH
29536: CALL_OW 290
29540: GO 29504
29542: POP
29543: POP
// end ;
29544: PPOPN 2
29546: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29547: LD_EXP 63
29551: PUSH
29552: LD_EXP 108
29556: AND
29557: IFFALSE 29740
29559: GO 29561
29561: DISABLE
29562: LD_INT 0
29564: PPUSH
29565: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29566: LD_ADDR_VAR 0 2
29570: PUSH
29571: LD_INT 22
29573: PUSH
29574: LD_OWVAR 2
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PPUSH
29583: CALL_OW 69
29587: ST_TO_ADDR
// if not tmp then
29588: LD_VAR 0 2
29592: NOT
29593: IFFALSE 29597
// exit ;
29595: GO 29740
// for i := 1 to 2 do
29597: LD_ADDR_VAR 0 1
29601: PUSH
29602: DOUBLE
29603: LD_INT 1
29605: DEC
29606: ST_TO_ADDR
29607: LD_INT 2
29609: PUSH
29610: FOR_TO
29611: IFFALSE 29738
// begin uc_side := your_side ;
29613: LD_ADDR_OWVAR 20
29617: PUSH
29618: LD_OWVAR 2
29622: ST_TO_ADDR
// uc_nation := nation_american ;
29623: LD_ADDR_OWVAR 21
29627: PUSH
29628: LD_INT 1
29630: ST_TO_ADDR
// vc_chassis := us_morphling ;
29631: LD_ADDR_OWVAR 37
29635: PUSH
29636: LD_INT 5
29638: ST_TO_ADDR
// vc_engine := engine_siberite ;
29639: LD_ADDR_OWVAR 39
29643: PUSH
29644: LD_INT 3
29646: ST_TO_ADDR
// vc_control := control_computer ;
29647: LD_ADDR_OWVAR 38
29651: PUSH
29652: LD_INT 3
29654: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29655: LD_ADDR_OWVAR 40
29659: PUSH
29660: LD_INT 10
29662: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29663: LD_VAR 0 2
29667: PUSH
29668: LD_INT 1
29670: ARRAY
29671: PPUSH
29672: CALL_OW 310
29676: NOT
29677: IFFALSE 29724
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29679: CALL_OW 45
29683: PPUSH
29684: LD_VAR 0 2
29688: PUSH
29689: LD_INT 1
29691: ARRAY
29692: PPUSH
29693: CALL_OW 250
29697: PPUSH
29698: LD_VAR 0 2
29702: PUSH
29703: LD_INT 1
29705: ARRAY
29706: PPUSH
29707: CALL_OW 251
29711: PPUSH
29712: LD_INT 12
29714: PPUSH
29715: LD_INT 1
29717: PPUSH
29718: CALL_OW 50
29722: GO 29736
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29724: CALL_OW 45
29728: PPUSH
29729: LD_INT 1
29731: PPUSH
29732: CALL_OW 51
// end ;
29736: GO 29610
29738: POP
29739: POP
// end ;
29740: PPOPN 2
29742: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29743: LD_EXP 63
29747: PUSH
29748: LD_EXP 109
29752: AND
29753: IFFALSE 29975
29755: GO 29757
29757: DISABLE
29758: LD_INT 0
29760: PPUSH
29761: PPUSH
29762: PPUSH
29763: PPUSH
29764: PPUSH
29765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29766: LD_ADDR_VAR 0 6
29770: PUSH
29771: LD_INT 22
29773: PUSH
29774: LD_OWVAR 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 21
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 3
29795: PUSH
29796: LD_INT 23
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 69
29819: ST_TO_ADDR
// if not tmp then
29820: LD_VAR 0 6
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 29975
// s1 := rand ( 1 , 4 ) ;
29829: LD_ADDR_VAR 0 2
29833: PUSH
29834: LD_INT 1
29836: PPUSH
29837: LD_INT 4
29839: PPUSH
29840: CALL_OW 12
29844: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29845: LD_ADDR_VAR 0 4
29849: PUSH
29850: LD_VAR 0 6
29854: PUSH
29855: LD_INT 1
29857: ARRAY
29858: PPUSH
29859: LD_VAR 0 2
29863: PPUSH
29864: CALL_OW 259
29868: ST_TO_ADDR
// if s1 = 1 then
29869: LD_VAR 0 2
29873: PUSH
29874: LD_INT 1
29876: EQUAL
29877: IFFALSE 29897
// s2 := rand ( 2 , 4 ) else
29879: LD_ADDR_VAR 0 3
29883: PUSH
29884: LD_INT 2
29886: PPUSH
29887: LD_INT 4
29889: PPUSH
29890: CALL_OW 12
29894: ST_TO_ADDR
29895: GO 29905
// s2 := 1 ;
29897: LD_ADDR_VAR 0 3
29901: PUSH
29902: LD_INT 1
29904: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29905: LD_ADDR_VAR 0 5
29909: PUSH
29910: LD_VAR 0 6
29914: PUSH
29915: LD_INT 1
29917: ARRAY
29918: PPUSH
29919: LD_VAR 0 3
29923: PPUSH
29924: CALL_OW 259
29928: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29929: LD_VAR 0 6
29933: PUSH
29934: LD_INT 1
29936: ARRAY
29937: PPUSH
29938: LD_VAR 0 2
29942: PPUSH
29943: LD_VAR 0 5
29947: PPUSH
29948: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29952: LD_VAR 0 6
29956: PUSH
29957: LD_INT 1
29959: ARRAY
29960: PPUSH
29961: LD_VAR 0 3
29965: PPUSH
29966: LD_VAR 0 4
29970: PPUSH
29971: CALL_OW 237
// end ;
29975: PPOPN 6
29977: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29978: LD_EXP 63
29982: PUSH
29983: LD_EXP 110
29987: AND
29988: IFFALSE 30067
29990: GO 29992
29992: DISABLE
29993: LD_INT 0
29995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29996: LD_ADDR_VAR 0 1
30000: PUSH
30001: LD_INT 22
30003: PUSH
30004: LD_OWVAR 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 30
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PPUSH
30027: CALL_OW 69
30031: ST_TO_ADDR
// if not tmp then
30032: LD_VAR 0 1
30036: NOT
30037: IFFALSE 30041
// exit ;
30039: GO 30067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30041: LD_VAR 0 1
30045: PUSH
30046: LD_INT 1
30048: PPUSH
30049: LD_VAR 0 1
30053: PPUSH
30054: CALL_OW 12
30058: ARRAY
30059: PPUSH
30060: LD_INT 1
30062: PPUSH
30063: CALL_OW 234
// end ;
30067: PPOPN 1
30069: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30070: LD_EXP 63
30074: PUSH
30075: LD_EXP 111
30079: AND
30080: IFFALSE 30192
30082: GO 30084
30084: DISABLE
30085: LD_INT 0
30087: PPUSH
30088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30089: LD_ADDR_VAR 0 2
30093: PUSH
30094: LD_INT 22
30096: PUSH
30097: LD_OWVAR 2
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: LD_INT 30
30111: PUSH
30112: LD_INT 27
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 30
30121: PUSH
30122: LD_INT 26
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 30
30131: PUSH
30132: LD_INT 28
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PPUSH
30149: CALL_OW 69
30153: ST_TO_ADDR
// if not tmp then
30154: LD_VAR 0 2
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30192
// for i in tmp do
30163: LD_ADDR_VAR 0 1
30167: PUSH
30168: LD_VAR 0 2
30172: PUSH
30173: FOR_IN
30174: IFFALSE 30190
// SetLives ( i , 1 ) ;
30176: LD_VAR 0 1
30180: PPUSH
30181: LD_INT 1
30183: PPUSH
30184: CALL_OW 234
30188: GO 30173
30190: POP
30191: POP
// end ;
30192: PPOPN 2
30194: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30195: LD_EXP 63
30199: PUSH
30200: LD_EXP 112
30204: AND
30205: IFFALSE 30492
30207: GO 30209
30209: DISABLE
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
30214: PPUSH
// begin i := rand ( 1 , 7 ) ;
30215: LD_ADDR_VAR 0 1
30219: PUSH
30220: LD_INT 1
30222: PPUSH
30223: LD_INT 7
30225: PPUSH
30226: CALL_OW 12
30230: ST_TO_ADDR
// case i of 1 :
30231: LD_VAR 0 1
30235: PUSH
30236: LD_INT 1
30238: DOUBLE
30239: EQUAL
30240: IFTRUE 30244
30242: GO 30254
30244: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30245: LD_STRING earthquake(getX(game), 0, 32)
30247: PPUSH
30248: CALL_OW 559
30252: GO 30492
30254: LD_INT 2
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30276
30262: POP
// begin ToLua ( displayStucuk(); ) ;
30263: LD_STRING displayStucuk();
30265: PPUSH
30266: CALL_OW 559
// ResetFog ;
30270: CALL_OW 335
// end ; 3 :
30274: GO 30492
30276: LD_INT 3
30278: DOUBLE
30279: EQUAL
30280: IFTRUE 30284
30282: GO 30388
30284: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30285: LD_ADDR_VAR 0 2
30289: PUSH
30290: LD_INT 22
30292: PUSH
30293: LD_OWVAR 2
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 25
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PPUSH
30316: CALL_OW 69
30320: ST_TO_ADDR
// if not tmp then
30321: LD_VAR 0 2
30325: NOT
30326: IFFALSE 30330
// exit ;
30328: GO 30492
// un := tmp [ rand ( 1 , tmp ) ] ;
30330: LD_ADDR_VAR 0 3
30334: PUSH
30335: LD_VAR 0 2
30339: PUSH
30340: LD_INT 1
30342: PPUSH
30343: LD_VAR 0 2
30347: PPUSH
30348: CALL_OW 12
30352: ARRAY
30353: ST_TO_ADDR
// if Crawls ( un ) then
30354: LD_VAR 0 3
30358: PPUSH
30359: CALL_OW 318
30363: IFFALSE 30374
// ComWalk ( un ) ;
30365: LD_VAR 0 3
30369: PPUSH
30370: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30374: LD_VAR 0 3
30378: PPUSH
30379: LD_INT 8
30381: PPUSH
30382: CALL_OW 336
// end ; 4 :
30386: GO 30492
30388: LD_INT 4
30390: DOUBLE
30391: EQUAL
30392: IFTRUE 30396
30394: GO 30470
30396: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30397: LD_ADDR_VAR 0 2
30401: PUSH
30402: LD_INT 22
30404: PUSH
30405: LD_OWVAR 2
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 30
30416: PUSH
30417: LD_INT 29
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PPUSH
30428: CALL_OW 69
30432: ST_TO_ADDR
// if not tmp then
30433: LD_VAR 0 2
30437: NOT
30438: IFFALSE 30442
// exit ;
30440: GO 30492
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30442: LD_VAR 0 2
30446: PUSH
30447: LD_INT 1
30449: ARRAY
30450: PPUSH
30451: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30455: LD_VAR 0 2
30459: PUSH
30460: LD_INT 1
30462: ARRAY
30463: PPUSH
30464: CALL_OW 65
// end ; 5 .. 7 :
30468: GO 30492
30470: LD_INT 5
30472: DOUBLE
30473: GREATEREQUAL
30474: IFFALSE 30482
30476: LD_INT 7
30478: DOUBLE
30479: LESSEQUAL
30480: IFTRUE 30484
30482: GO 30491
30484: POP
// StreamSibBomb ; end ;
30485: CALL 26729 0 0
30489: GO 30492
30491: POP
// end ;
30492: PPOPN 3
30494: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30495: LD_EXP 63
30499: PUSH
30500: LD_EXP 113
30504: AND
30505: IFFALSE 30661
30507: GO 30509
30509: DISABLE
30510: LD_INT 0
30512: PPUSH
30513: PPUSH
30514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30515: LD_ADDR_VAR 0 2
30519: PUSH
30520: LD_INT 81
30522: PUSH
30523: LD_OWVAR 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: LD_INT 21
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 21
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PPUSH
30564: CALL_OW 69
30568: ST_TO_ADDR
// if not tmp then
30569: LD_VAR 0 2
30573: NOT
30574: IFFALSE 30578
// exit ;
30576: GO 30661
// p := 0 ;
30578: LD_ADDR_VAR 0 3
30582: PUSH
30583: LD_INT 0
30585: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30586: LD_INT 35
30588: PPUSH
30589: CALL_OW 67
// p := p + 1 ;
30593: LD_ADDR_VAR 0 3
30597: PUSH
30598: LD_VAR 0 3
30602: PUSH
30603: LD_INT 1
30605: PLUS
30606: ST_TO_ADDR
// for i in tmp do
30607: LD_ADDR_VAR 0 1
30611: PUSH
30612: LD_VAR 0 2
30616: PUSH
30617: FOR_IN
30618: IFFALSE 30649
// if GetLives ( i ) < 1000 then
30620: LD_VAR 0 1
30624: PPUSH
30625: CALL_OW 256
30629: PUSH
30630: LD_INT 1000
30632: LESS
30633: IFFALSE 30647
// SetLives ( i , 1000 ) ;
30635: LD_VAR 0 1
30639: PPUSH
30640: LD_INT 1000
30642: PPUSH
30643: CALL_OW 234
30647: GO 30617
30649: POP
30650: POP
// until p > 20 ;
30651: LD_VAR 0 3
30655: PUSH
30656: LD_INT 20
30658: GREATER
30659: IFFALSE 30586
// end ;
30661: PPOPN 3
30663: END
// every 0 0$1 trigger StreamModeActive and sTime do
30664: LD_EXP 63
30668: PUSH
30669: LD_EXP 114
30673: AND
30674: IFFALSE 30709
30676: GO 30678
30678: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30679: LD_INT 28
30681: PPUSH
30682: LD_OWVAR 2
30686: PPUSH
30687: LD_INT 2
30689: PPUSH
30690: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30694: LD_INT 30
30696: PPUSH
30697: LD_OWVAR 2
30701: PPUSH
30702: LD_INT 2
30704: PPUSH
30705: CALL_OW 322
// end ;
30709: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30710: LD_EXP 63
30714: PUSH
30715: LD_EXP 115
30719: AND
30720: IFFALSE 30841
30722: GO 30724
30724: DISABLE
30725: LD_INT 0
30727: PPUSH
30728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30729: LD_ADDR_VAR 0 2
30733: PUSH
30734: LD_INT 22
30736: PUSH
30737: LD_OWVAR 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 21
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: LD_INT 23
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: PPUSH
30778: CALL_OW 69
30782: ST_TO_ADDR
// if not tmp then
30783: LD_VAR 0 2
30787: NOT
30788: IFFALSE 30792
// exit ;
30790: GO 30841
// for i in tmp do
30792: LD_ADDR_VAR 0 1
30796: PUSH
30797: LD_VAR 0 2
30801: PUSH
30802: FOR_IN
30803: IFFALSE 30839
// begin if Crawls ( i ) then
30805: LD_VAR 0 1
30809: PPUSH
30810: CALL_OW 318
30814: IFFALSE 30825
// ComWalk ( i ) ;
30816: LD_VAR 0 1
30820: PPUSH
30821: CALL_OW 138
// SetClass ( i , 2 ) ;
30825: LD_VAR 0 1
30829: PPUSH
30830: LD_INT 2
30832: PPUSH
30833: CALL_OW 336
// end ;
30837: GO 30802
30839: POP
30840: POP
// end ;
30841: PPOPN 2
30843: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30844: LD_EXP 63
30848: PUSH
30849: LD_EXP 116
30853: AND
30854: IFFALSE 31142
30856: GO 30858
30858: DISABLE
30859: LD_INT 0
30861: PPUSH
30862: PPUSH
30863: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30864: LD_OWVAR 2
30868: PPUSH
30869: LD_INT 9
30871: PPUSH
30872: LD_INT 1
30874: PPUSH
30875: LD_INT 1
30877: PPUSH
30878: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30882: LD_INT 9
30884: PPUSH
30885: LD_OWVAR 2
30889: PPUSH
30890: CALL_OW 343
// uc_side := 9 ;
30894: LD_ADDR_OWVAR 20
30898: PUSH
30899: LD_INT 9
30901: ST_TO_ADDR
// uc_nation := 2 ;
30902: LD_ADDR_OWVAR 21
30906: PUSH
30907: LD_INT 2
30909: ST_TO_ADDR
// hc_name := Dark Warrior ;
30910: LD_ADDR_OWVAR 26
30914: PUSH
30915: LD_STRING Dark Warrior
30917: ST_TO_ADDR
// hc_gallery :=  ;
30918: LD_ADDR_OWVAR 33
30922: PUSH
30923: LD_STRING 
30925: ST_TO_ADDR
// hc_noskilllimit := true ;
30926: LD_ADDR_OWVAR 76
30930: PUSH
30931: LD_INT 1
30933: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30934: LD_ADDR_OWVAR 31
30938: PUSH
30939: LD_INT 30
30941: PUSH
30942: LD_INT 30
30944: PUSH
30945: LD_INT 30
30947: PUSH
30948: LD_INT 30
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: ST_TO_ADDR
// un := CreateHuman ;
30957: LD_ADDR_VAR 0 3
30961: PUSH
30962: CALL_OW 44
30966: ST_TO_ADDR
// hc_noskilllimit := false ;
30967: LD_ADDR_OWVAR 76
30971: PUSH
30972: LD_INT 0
30974: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30975: LD_VAR 0 3
30979: PPUSH
30980: LD_INT 1
30982: PPUSH
30983: CALL_OW 51
// ToLua ( playRanger() ) ;
30987: LD_STRING playRanger()
30989: PPUSH
30990: CALL_OW 559
// p := 0 ;
30994: LD_ADDR_VAR 0 2
30998: PUSH
30999: LD_INT 0
31001: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31002: LD_INT 35
31004: PPUSH
31005: CALL_OW 67
// p := p + 1 ;
31009: LD_ADDR_VAR 0 2
31013: PUSH
31014: LD_VAR 0 2
31018: PUSH
31019: LD_INT 1
31021: PLUS
31022: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31023: LD_VAR 0 3
31027: PPUSH
31028: CALL_OW 256
31032: PUSH
31033: LD_INT 1000
31035: LESS
31036: IFFALSE 31050
// SetLives ( un , 1000 ) ;
31038: LD_VAR 0 3
31042: PPUSH
31043: LD_INT 1000
31045: PPUSH
31046: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31050: LD_VAR 0 3
31054: PPUSH
31055: LD_INT 81
31057: PUSH
31058: LD_OWVAR 2
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 91
31069: PUSH
31070: LD_VAR 0 3
31074: PUSH
31075: LD_INT 30
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PPUSH
31087: CALL_OW 69
31091: PPUSH
31092: LD_VAR 0 3
31096: PPUSH
31097: CALL_OW 74
31101: PPUSH
31102: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31106: LD_VAR 0 2
31110: PUSH
31111: LD_INT 80
31113: GREATER
31114: PUSH
31115: LD_VAR 0 3
31119: PPUSH
31120: CALL_OW 301
31124: OR
31125: IFFALSE 31002
// if un then
31127: LD_VAR 0 3
31131: IFFALSE 31142
// RemoveUnit ( un ) ;
31133: LD_VAR 0 3
31137: PPUSH
31138: CALL_OW 64
// end ;
31142: PPOPN 3
31144: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31145: LD_EXP 117
31149: IFFALSE 31265
31151: GO 31153
31153: DISABLE
31154: LD_INT 0
31156: PPUSH
31157: PPUSH
31158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31159: LD_ADDR_VAR 0 2
31163: PUSH
31164: LD_INT 81
31166: PUSH
31167: LD_OWVAR 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 21
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PPUSH
31190: CALL_OW 69
31194: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31195: LD_STRING playComputer()
31197: PPUSH
31198: CALL_OW 559
// if not tmp then
31202: LD_VAR 0 2
31206: NOT
31207: IFFALSE 31211
// exit ;
31209: GO 31265
// for i in tmp do
31211: LD_ADDR_VAR 0 1
31215: PUSH
31216: LD_VAR 0 2
31220: PUSH
31221: FOR_IN
31222: IFFALSE 31263
// for j := 1 to 4 do
31224: LD_ADDR_VAR 0 3
31228: PUSH
31229: DOUBLE
31230: LD_INT 1
31232: DEC
31233: ST_TO_ADDR
31234: LD_INT 4
31236: PUSH
31237: FOR_TO
31238: IFFALSE 31259
// SetSkill ( i , j , 10 ) ;
31240: LD_VAR 0 1
31244: PPUSH
31245: LD_VAR 0 3
31249: PPUSH
31250: LD_INT 10
31252: PPUSH
31253: CALL_OW 237
31257: GO 31237
31259: POP
31260: POP
31261: GO 31221
31263: POP
31264: POP
// end ;
31265: PPOPN 3
31267: END
// every 0 0$1 trigger s30 do var i , tmp ;
31268: LD_EXP 118
31272: IFFALSE 31341
31274: GO 31276
31276: DISABLE
31277: LD_INT 0
31279: PPUSH
31280: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31281: LD_ADDR_VAR 0 2
31285: PUSH
31286: LD_INT 22
31288: PUSH
31289: LD_OWVAR 2
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PPUSH
31298: CALL_OW 69
31302: ST_TO_ADDR
// if not tmp then
31303: LD_VAR 0 2
31307: NOT
31308: IFFALSE 31312
// exit ;
31310: GO 31341
// for i in tmp do
31312: LD_ADDR_VAR 0 1
31316: PUSH
31317: LD_VAR 0 2
31321: PUSH
31322: FOR_IN
31323: IFFALSE 31339
// SetLives ( i , 300 ) ;
31325: LD_VAR 0 1
31329: PPUSH
31330: LD_INT 300
31332: PPUSH
31333: CALL_OW 234
31337: GO 31322
31339: POP
31340: POP
// end ;
31341: PPOPN 2
31343: END
// every 0 0$1 trigger s60 do var i , tmp ;
31344: LD_EXP 119
31348: IFFALSE 31417
31350: GO 31352
31352: DISABLE
31353: LD_INT 0
31355: PPUSH
31356: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31357: LD_ADDR_VAR 0 2
31361: PUSH
31362: LD_INT 22
31364: PUSH
31365: LD_OWVAR 2
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PPUSH
31374: CALL_OW 69
31378: ST_TO_ADDR
// if not tmp then
31379: LD_VAR 0 2
31383: NOT
31384: IFFALSE 31388
// exit ;
31386: GO 31417
// for i in tmp do
31388: LD_ADDR_VAR 0 1
31392: PUSH
31393: LD_VAR 0 2
31397: PUSH
31398: FOR_IN
31399: IFFALSE 31415
// SetLives ( i , 600 ) ;
31401: LD_VAR 0 1
31405: PPUSH
31406: LD_INT 600
31408: PPUSH
31409: CALL_OW 234
31413: GO 31398
31415: POP
31416: POP
// end ;
31417: PPOPN 2
31419: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31420: LD_INT 0
31422: PPUSH
// case cmd of 301 :
31423: LD_VAR 0 1
31427: PUSH
31428: LD_INT 301
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31468
31436: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31437: LD_VAR 0 6
31441: PPUSH
31442: LD_VAR 0 7
31446: PPUSH
31447: LD_VAR 0 8
31451: PPUSH
31452: LD_VAR 0 4
31456: PPUSH
31457: LD_VAR 0 5
31461: PPUSH
31462: CALL 32669 0 5
31466: GO 31589
31468: LD_INT 302
31470: DOUBLE
31471: EQUAL
31472: IFTRUE 31476
31474: GO 31513
31476: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31477: LD_VAR 0 6
31481: PPUSH
31482: LD_VAR 0 7
31486: PPUSH
31487: LD_VAR 0 8
31491: PPUSH
31492: LD_VAR 0 9
31496: PPUSH
31497: LD_VAR 0 4
31501: PPUSH
31502: LD_VAR 0 5
31506: PPUSH
31507: CALL 32760 0 6
31511: GO 31589
31513: LD_INT 303
31515: DOUBLE
31516: EQUAL
31517: IFTRUE 31521
31519: GO 31558
31521: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31522: LD_VAR 0 6
31526: PPUSH
31527: LD_VAR 0 7
31531: PPUSH
31532: LD_VAR 0 8
31536: PPUSH
31537: LD_VAR 0 9
31541: PPUSH
31542: LD_VAR 0 4
31546: PPUSH
31547: LD_VAR 0 5
31551: PPUSH
31552: CALL 31594 0 6
31556: GO 31589
31558: LD_INT 304
31560: DOUBLE
31561: EQUAL
31562: IFTRUE 31566
31564: GO 31588
31566: POP
// hHackTeleport ( unit , x , y ) ; end ;
31567: LD_VAR 0 2
31571: PPUSH
31572: LD_VAR 0 4
31576: PPUSH
31577: LD_VAR 0 5
31581: PPUSH
31582: CALL 33353 0 3
31586: GO 31589
31588: POP
// end ;
31589: LD_VAR 0 12
31593: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31594: LD_INT 0
31596: PPUSH
31597: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31598: LD_VAR 0 1
31602: PUSH
31603: LD_INT 1
31605: LESS
31606: PUSH
31607: LD_VAR 0 1
31611: PUSH
31612: LD_INT 3
31614: GREATER
31615: OR
31616: PUSH
31617: LD_VAR 0 5
31621: PPUSH
31622: LD_VAR 0 6
31626: PPUSH
31627: CALL_OW 428
31631: OR
31632: IFFALSE 31636
// exit ;
31634: GO 32356
// uc_side := your_side ;
31636: LD_ADDR_OWVAR 20
31640: PUSH
31641: LD_OWVAR 2
31645: ST_TO_ADDR
// uc_nation := nation ;
31646: LD_ADDR_OWVAR 21
31650: PUSH
31651: LD_VAR 0 1
31655: ST_TO_ADDR
// bc_level = 1 ;
31656: LD_ADDR_OWVAR 43
31660: PUSH
31661: LD_INT 1
31663: ST_TO_ADDR
// case btype of 1 :
31664: LD_VAR 0 2
31668: PUSH
31669: LD_INT 1
31671: DOUBLE
31672: EQUAL
31673: IFTRUE 31677
31675: GO 31688
31677: POP
// bc_type := b_depot ; 2 :
31678: LD_ADDR_OWVAR 42
31682: PUSH
31683: LD_INT 0
31685: ST_TO_ADDR
31686: GO 32300
31688: LD_INT 2
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31696
31694: GO 31707
31696: POP
// bc_type := b_warehouse ; 3 :
31697: LD_ADDR_OWVAR 42
31701: PUSH
31702: LD_INT 1
31704: ST_TO_ADDR
31705: GO 32300
31707: LD_INT 3
31709: DOUBLE
31710: EQUAL
31711: IFTRUE 31715
31713: GO 31726
31715: POP
// bc_type := b_lab ; 4 .. 9 :
31716: LD_ADDR_OWVAR 42
31720: PUSH
31721: LD_INT 6
31723: ST_TO_ADDR
31724: GO 32300
31726: LD_INT 4
31728: DOUBLE
31729: GREATEREQUAL
31730: IFFALSE 31738
31732: LD_INT 9
31734: DOUBLE
31735: LESSEQUAL
31736: IFTRUE 31740
31738: GO 31792
31740: POP
// begin bc_type := b_lab_half ;
31741: LD_ADDR_OWVAR 42
31745: PUSH
31746: LD_INT 7
31748: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31749: LD_ADDR_OWVAR 44
31753: PUSH
31754: LD_INT 10
31756: PUSH
31757: LD_INT 11
31759: PUSH
31760: LD_INT 12
31762: PUSH
31763: LD_INT 15
31765: PUSH
31766: LD_INT 14
31768: PUSH
31769: LD_INT 13
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: PUSH
31780: LD_VAR 0 2
31784: PUSH
31785: LD_INT 3
31787: MINUS
31788: ARRAY
31789: ST_TO_ADDR
// end ; 10 .. 13 :
31790: GO 32300
31792: LD_INT 10
31794: DOUBLE
31795: GREATEREQUAL
31796: IFFALSE 31804
31798: LD_INT 13
31800: DOUBLE
31801: LESSEQUAL
31802: IFTRUE 31806
31804: GO 31883
31806: POP
// begin bc_type := b_lab_full ;
31807: LD_ADDR_OWVAR 42
31811: PUSH
31812: LD_INT 8
31814: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31815: LD_ADDR_OWVAR 44
31819: PUSH
31820: LD_INT 10
31822: PUSH
31823: LD_INT 12
31825: PUSH
31826: LD_INT 14
31828: PUSH
31829: LD_INT 13
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: PUSH
31838: LD_VAR 0 2
31842: PUSH
31843: LD_INT 9
31845: MINUS
31846: ARRAY
31847: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31848: LD_ADDR_OWVAR 45
31852: PUSH
31853: LD_INT 11
31855: PUSH
31856: LD_INT 15
31858: PUSH
31859: LD_INT 12
31861: PUSH
31862: LD_INT 15
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: PUSH
31871: LD_VAR 0 2
31875: PUSH
31876: LD_INT 9
31878: MINUS
31879: ARRAY
31880: ST_TO_ADDR
// end ; 14 :
31881: GO 32300
31883: LD_INT 14
31885: DOUBLE
31886: EQUAL
31887: IFTRUE 31891
31889: GO 31902
31891: POP
// bc_type := b_workshop ; 15 :
31892: LD_ADDR_OWVAR 42
31896: PUSH
31897: LD_INT 2
31899: ST_TO_ADDR
31900: GO 32300
31902: LD_INT 15
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// bc_type := b_factory ; 16 :
31911: LD_ADDR_OWVAR 42
31915: PUSH
31916: LD_INT 3
31918: ST_TO_ADDR
31919: GO 32300
31921: LD_INT 16
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31940
31929: POP
// bc_type := b_ext_gun ; 17 :
31930: LD_ADDR_OWVAR 42
31934: PUSH
31935: LD_INT 17
31937: ST_TO_ADDR
31938: GO 32300
31940: LD_INT 17
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31948
31946: GO 31976
31948: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31949: LD_ADDR_OWVAR 42
31953: PUSH
31954: LD_INT 19
31956: PUSH
31957: LD_INT 23
31959: PUSH
31960: LD_INT 19
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: PUSH
31968: LD_VAR 0 1
31972: ARRAY
31973: ST_TO_ADDR
31974: GO 32300
31976: LD_INT 18
31978: DOUBLE
31979: EQUAL
31980: IFTRUE 31984
31982: GO 31995
31984: POP
// bc_type := b_ext_radar ; 19 :
31985: LD_ADDR_OWVAR 42
31989: PUSH
31990: LD_INT 20
31992: ST_TO_ADDR
31993: GO 32300
31995: LD_INT 19
31997: DOUBLE
31998: EQUAL
31999: IFTRUE 32003
32001: GO 32014
32003: POP
// bc_type := b_ext_radio ; 20 :
32004: LD_ADDR_OWVAR 42
32008: PUSH
32009: LD_INT 22
32011: ST_TO_ADDR
32012: GO 32300
32014: LD_INT 20
32016: DOUBLE
32017: EQUAL
32018: IFTRUE 32022
32020: GO 32033
32022: POP
// bc_type := b_ext_siberium ; 21 :
32023: LD_ADDR_OWVAR 42
32027: PUSH
32028: LD_INT 21
32030: ST_TO_ADDR
32031: GO 32300
32033: LD_INT 21
32035: DOUBLE
32036: EQUAL
32037: IFTRUE 32041
32039: GO 32052
32041: POP
// bc_type := b_ext_computer ; 22 :
32042: LD_ADDR_OWVAR 42
32046: PUSH
32047: LD_INT 24
32049: ST_TO_ADDR
32050: GO 32300
32052: LD_INT 22
32054: DOUBLE
32055: EQUAL
32056: IFTRUE 32060
32058: GO 32071
32060: POP
// bc_type := b_ext_track ; 23 :
32061: LD_ADDR_OWVAR 42
32065: PUSH
32066: LD_INT 16
32068: ST_TO_ADDR
32069: GO 32300
32071: LD_INT 23
32073: DOUBLE
32074: EQUAL
32075: IFTRUE 32079
32077: GO 32090
32079: POP
// bc_type := b_ext_laser ; 24 :
32080: LD_ADDR_OWVAR 42
32084: PUSH
32085: LD_INT 25
32087: ST_TO_ADDR
32088: GO 32300
32090: LD_INT 24
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32098
32096: GO 32109
32098: POP
// bc_type := b_control_tower ; 25 :
32099: LD_ADDR_OWVAR 42
32103: PUSH
32104: LD_INT 36
32106: ST_TO_ADDR
32107: GO 32300
32109: LD_INT 25
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32117
32115: GO 32128
32117: POP
// bc_type := b_breastwork ; 26 :
32118: LD_ADDR_OWVAR 42
32122: PUSH
32123: LD_INT 31
32125: ST_TO_ADDR
32126: GO 32300
32128: LD_INT 26
32130: DOUBLE
32131: EQUAL
32132: IFTRUE 32136
32134: GO 32147
32136: POP
// bc_type := b_bunker ; 27 :
32137: LD_ADDR_OWVAR 42
32141: PUSH
32142: LD_INT 32
32144: ST_TO_ADDR
32145: GO 32300
32147: LD_INT 27
32149: DOUBLE
32150: EQUAL
32151: IFTRUE 32155
32153: GO 32166
32155: POP
// bc_type := b_turret ; 28 :
32156: LD_ADDR_OWVAR 42
32160: PUSH
32161: LD_INT 33
32163: ST_TO_ADDR
32164: GO 32300
32166: LD_INT 28
32168: DOUBLE
32169: EQUAL
32170: IFTRUE 32174
32172: GO 32185
32174: POP
// bc_type := b_armoury ; 29 :
32175: LD_ADDR_OWVAR 42
32179: PUSH
32180: LD_INT 4
32182: ST_TO_ADDR
32183: GO 32300
32185: LD_INT 29
32187: DOUBLE
32188: EQUAL
32189: IFTRUE 32193
32191: GO 32204
32193: POP
// bc_type := b_barracks ; 30 :
32194: LD_ADDR_OWVAR 42
32198: PUSH
32199: LD_INT 5
32201: ST_TO_ADDR
32202: GO 32300
32204: LD_INT 30
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32212
32210: GO 32223
32212: POP
// bc_type := b_solar_power ; 31 :
32213: LD_ADDR_OWVAR 42
32217: PUSH
32218: LD_INT 27
32220: ST_TO_ADDR
32221: GO 32300
32223: LD_INT 31
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32242
32231: POP
// bc_type := b_oil_power ; 32 :
32232: LD_ADDR_OWVAR 42
32236: PUSH
32237: LD_INT 26
32239: ST_TO_ADDR
32240: GO 32300
32242: LD_INT 32
32244: DOUBLE
32245: EQUAL
32246: IFTRUE 32250
32248: GO 32261
32250: POP
// bc_type := b_siberite_power ; 33 :
32251: LD_ADDR_OWVAR 42
32255: PUSH
32256: LD_INT 28
32258: ST_TO_ADDR
32259: GO 32300
32261: LD_INT 33
32263: DOUBLE
32264: EQUAL
32265: IFTRUE 32269
32267: GO 32280
32269: POP
// bc_type := b_oil_mine ; 34 :
32270: LD_ADDR_OWVAR 42
32274: PUSH
32275: LD_INT 29
32277: ST_TO_ADDR
32278: GO 32300
32280: LD_INT 34
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32299
32288: POP
// bc_type := b_siberite_mine ; end ;
32289: LD_ADDR_OWVAR 42
32293: PUSH
32294: LD_INT 30
32296: ST_TO_ADDR
32297: GO 32300
32299: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32300: LD_ADDR_VAR 0 8
32304: PUSH
32305: LD_VAR 0 5
32309: PPUSH
32310: LD_VAR 0 6
32314: PPUSH
32315: LD_VAR 0 3
32319: PPUSH
32320: CALL_OW 47
32324: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32325: LD_OWVAR 42
32329: PUSH
32330: LD_INT 32
32332: PUSH
32333: LD_INT 33
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: IN
32340: IFFALSE 32356
// PlaceWeaponTurret ( b , weapon ) ;
32342: LD_VAR 0 8
32346: PPUSH
32347: LD_VAR 0 4
32351: PPUSH
32352: CALL_OW 431
// end ;
32356: LD_VAR 0 7
32360: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32361: LD_INT 0
32363: PPUSH
32364: PPUSH
32365: PPUSH
32366: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32367: LD_ADDR_VAR 0 4
32371: PUSH
32372: LD_INT 22
32374: PUSH
32375: LD_OWVAR 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: LD_INT 30
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 30
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PPUSH
32416: CALL_OW 69
32420: ST_TO_ADDR
// if not tmp then
32421: LD_VAR 0 4
32425: NOT
32426: IFFALSE 32430
// exit ;
32428: GO 32489
// for i in tmp do
32430: LD_ADDR_VAR 0 2
32434: PUSH
32435: LD_VAR 0 4
32439: PUSH
32440: FOR_IN
32441: IFFALSE 32487
// for j = 1 to 3 do
32443: LD_ADDR_VAR 0 3
32447: PUSH
32448: DOUBLE
32449: LD_INT 1
32451: DEC
32452: ST_TO_ADDR
32453: LD_INT 3
32455: PUSH
32456: FOR_TO
32457: IFFALSE 32483
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32459: LD_VAR 0 2
32463: PPUSH
32464: CALL_OW 274
32468: PPUSH
32469: LD_VAR 0 3
32473: PPUSH
32474: LD_INT 99999
32476: PPUSH
32477: CALL_OW 277
32481: GO 32456
32483: POP
32484: POP
32485: GO 32440
32487: POP
32488: POP
// end ;
32489: LD_VAR 0 1
32493: RET
// export function hHackSetLevel10 ; var i , j ; begin
32494: LD_INT 0
32496: PPUSH
32497: PPUSH
32498: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32499: LD_ADDR_VAR 0 2
32503: PUSH
32504: LD_INT 21
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 69
32518: PUSH
32519: FOR_IN
32520: IFFALSE 32572
// if IsSelected ( i ) then
32522: LD_VAR 0 2
32526: PPUSH
32527: CALL_OW 306
32531: IFFALSE 32570
// begin for j := 1 to 4 do
32533: LD_ADDR_VAR 0 3
32537: PUSH
32538: DOUBLE
32539: LD_INT 1
32541: DEC
32542: ST_TO_ADDR
32543: LD_INT 4
32545: PUSH
32546: FOR_TO
32547: IFFALSE 32568
// SetSkill ( i , j , 10 ) ;
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: LD_INT 10
32561: PPUSH
32562: CALL_OW 237
32566: GO 32546
32568: POP
32569: POP
// end ;
32570: GO 32519
32572: POP
32573: POP
// end ;
32574: LD_VAR 0 1
32578: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32579: LD_INT 0
32581: PPUSH
32582: PPUSH
32583: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32584: LD_ADDR_VAR 0 2
32588: PUSH
32589: LD_INT 22
32591: PUSH
32592: LD_OWVAR 2
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 21
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PPUSH
32615: CALL_OW 69
32619: PUSH
32620: FOR_IN
32621: IFFALSE 32662
// begin for j := 1 to 4 do
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: DOUBLE
32629: LD_INT 1
32631: DEC
32632: ST_TO_ADDR
32633: LD_INT 4
32635: PUSH
32636: FOR_TO
32637: IFFALSE 32658
// SetSkill ( i , j , 10 ) ;
32639: LD_VAR 0 2
32643: PPUSH
32644: LD_VAR 0 3
32648: PPUSH
32649: LD_INT 10
32651: PPUSH
32652: CALL_OW 237
32656: GO 32636
32658: POP
32659: POP
// end ;
32660: GO 32620
32662: POP
32663: POP
// end ;
32664: LD_VAR 0 1
32668: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32669: LD_INT 0
32671: PPUSH
// uc_side := your_side ;
32672: LD_ADDR_OWVAR 20
32676: PUSH
32677: LD_OWVAR 2
32681: ST_TO_ADDR
// uc_nation := nation ;
32682: LD_ADDR_OWVAR 21
32686: PUSH
32687: LD_VAR 0 1
32691: ST_TO_ADDR
// InitHc ;
32692: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32696: LD_INT 0
32698: PPUSH
32699: LD_VAR 0 2
32703: PPUSH
32704: LD_VAR 0 3
32708: PPUSH
32709: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32713: LD_VAR 0 4
32717: PPUSH
32718: LD_VAR 0 5
32722: PPUSH
32723: CALL_OW 428
32727: PUSH
32728: LD_INT 0
32730: EQUAL
32731: IFFALSE 32755
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32733: CALL_OW 44
32737: PPUSH
32738: LD_VAR 0 4
32742: PPUSH
32743: LD_VAR 0 5
32747: PPUSH
32748: LD_INT 1
32750: PPUSH
32751: CALL_OW 48
// end ;
32755: LD_VAR 0 6
32759: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32760: LD_INT 0
32762: PPUSH
32763: PPUSH
// uc_side := your_side ;
32764: LD_ADDR_OWVAR 20
32768: PUSH
32769: LD_OWVAR 2
32773: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32774: LD_VAR 0 1
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 3
32787: PUSH
32788: LD_INT 4
32790: PUSH
32791: LD_INT 5
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: IN
32801: IFFALSE 32813
// uc_nation := nation_american else
32803: LD_ADDR_OWVAR 21
32807: PUSH
32808: LD_INT 1
32810: ST_TO_ADDR
32811: GO 32856
// if chassis in [ 11 , 12 , 13 , 14 ] then
32813: LD_VAR 0 1
32817: PUSH
32818: LD_INT 11
32820: PUSH
32821: LD_INT 12
32823: PUSH
32824: LD_INT 13
32826: PUSH
32827: LD_INT 14
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: IN
32836: IFFALSE 32848
// uc_nation := nation_arabian else
32838: LD_ADDR_OWVAR 21
32842: PUSH
32843: LD_INT 2
32845: ST_TO_ADDR
32846: GO 32856
// uc_nation := nation_russian ;
32848: LD_ADDR_OWVAR 21
32852: PUSH
32853: LD_INT 3
32855: ST_TO_ADDR
// vc_chassis := chassis ;
32856: LD_ADDR_OWVAR 37
32860: PUSH
32861: LD_VAR 0 1
32865: ST_TO_ADDR
// vc_engine := engine ;
32866: LD_ADDR_OWVAR 39
32870: PUSH
32871: LD_VAR 0 2
32875: ST_TO_ADDR
// vc_control := control ;
32876: LD_ADDR_OWVAR 38
32880: PUSH
32881: LD_VAR 0 3
32885: ST_TO_ADDR
// vc_weapon := weapon ;
32886: LD_ADDR_OWVAR 40
32890: PUSH
32891: LD_VAR 0 4
32895: ST_TO_ADDR
// un := CreateVehicle ;
32896: LD_ADDR_VAR 0 8
32900: PUSH
32901: CALL_OW 45
32905: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32906: LD_VAR 0 8
32910: PPUSH
32911: LD_INT 0
32913: PPUSH
32914: LD_INT 5
32916: PPUSH
32917: CALL_OW 12
32921: PPUSH
32922: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32926: LD_VAR 0 8
32930: PPUSH
32931: LD_VAR 0 5
32935: PPUSH
32936: LD_VAR 0 6
32940: PPUSH
32941: LD_INT 1
32943: PPUSH
32944: CALL_OW 48
// end ;
32948: LD_VAR 0 7
32952: RET
// export hInvincible ; every 1 do
32953: GO 32955
32955: DISABLE
// hInvincible := [ ] ;
32956: LD_ADDR_EXP 120
32960: PUSH
32961: EMPTY
32962: ST_TO_ADDR
32963: END
// every 10 do var i ;
32964: GO 32966
32966: DISABLE
32967: LD_INT 0
32969: PPUSH
// begin enable ;
32970: ENABLE
// if not hInvincible then
32971: LD_EXP 120
32975: NOT
32976: IFFALSE 32980
// exit ;
32978: GO 33024
// for i in hInvincible do
32980: LD_ADDR_VAR 0 1
32984: PUSH
32985: LD_EXP 120
32989: PUSH
32990: FOR_IN
32991: IFFALSE 33022
// if GetLives ( i ) < 1000 then
32993: LD_VAR 0 1
32997: PPUSH
32998: CALL_OW 256
33002: PUSH
33003: LD_INT 1000
33005: LESS
33006: IFFALSE 33020
// SetLives ( i , 1000 ) ;
33008: LD_VAR 0 1
33012: PPUSH
33013: LD_INT 1000
33015: PPUSH
33016: CALL_OW 234
33020: GO 32990
33022: POP
33023: POP
// end ;
33024: PPOPN 1
33026: END
// export function hHackInvincible ; var i ; begin
33027: LD_INT 0
33029: PPUSH
33030: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33031: LD_ADDR_VAR 0 2
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: LD_INT 21
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 21
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: PPUSH
33064: CALL_OW 69
33068: PUSH
33069: FOR_IN
33070: IFFALSE 33131
// if IsSelected ( i ) then
33072: LD_VAR 0 2
33076: PPUSH
33077: CALL_OW 306
33081: IFFALSE 33129
// begin if i in hInvincible then
33083: LD_VAR 0 2
33087: PUSH
33088: LD_EXP 120
33092: IN
33093: IFFALSE 33113
// hInvincible := hInvincible diff i else
33095: LD_ADDR_EXP 120
33099: PUSH
33100: LD_EXP 120
33104: PUSH
33105: LD_VAR 0 2
33109: DIFF
33110: ST_TO_ADDR
33111: GO 33129
// hInvincible := hInvincible union i ;
33113: LD_ADDR_EXP 120
33117: PUSH
33118: LD_EXP 120
33122: PUSH
33123: LD_VAR 0 2
33127: UNION
33128: ST_TO_ADDR
// end ;
33129: GO 33069
33131: POP
33132: POP
// end ;
33133: LD_VAR 0 1
33137: RET
// export function hHackInvisible ; var i , j ; begin
33138: LD_INT 0
33140: PPUSH
33141: PPUSH
33142: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33143: LD_ADDR_VAR 0 2
33147: PUSH
33148: LD_INT 21
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PPUSH
33158: CALL_OW 69
33162: PUSH
33163: FOR_IN
33164: IFFALSE 33188
// if IsSelected ( i ) then
33166: LD_VAR 0 2
33170: PPUSH
33171: CALL_OW 306
33175: IFFALSE 33186
// ComForceInvisible ( i ) ;
33177: LD_VAR 0 2
33181: PPUSH
33182: CALL_OW 496
33186: GO 33163
33188: POP
33189: POP
// end ;
33190: LD_VAR 0 1
33194: RET
// export function hHackChangeYourSide ; begin
33195: LD_INT 0
33197: PPUSH
// if your_side = 8 then
33198: LD_OWVAR 2
33202: PUSH
33203: LD_INT 8
33205: EQUAL
33206: IFFALSE 33218
// your_side := 0 else
33208: LD_ADDR_OWVAR 2
33212: PUSH
33213: LD_INT 0
33215: ST_TO_ADDR
33216: GO 33232
// your_side := your_side + 1 ;
33218: LD_ADDR_OWVAR 2
33222: PUSH
33223: LD_OWVAR 2
33227: PUSH
33228: LD_INT 1
33230: PLUS
33231: ST_TO_ADDR
// end ;
33232: LD_VAR 0 1
33236: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33237: LD_INT 0
33239: PPUSH
33240: PPUSH
33241: PPUSH
// for i in all_units do
33242: LD_ADDR_VAR 0 2
33246: PUSH
33247: LD_OWVAR 3
33251: PUSH
33252: FOR_IN
33253: IFFALSE 33331
// if IsSelected ( i ) then
33255: LD_VAR 0 2
33259: PPUSH
33260: CALL_OW 306
33264: IFFALSE 33329
// begin j := GetSide ( i ) ;
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_VAR 0 2
33275: PPUSH
33276: CALL_OW 255
33280: ST_TO_ADDR
// if j = 8 then
33281: LD_VAR 0 3
33285: PUSH
33286: LD_INT 8
33288: EQUAL
33289: IFFALSE 33301
// j := 0 else
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: LD_INT 0
33298: ST_TO_ADDR
33299: GO 33315
// j := j + 1 ;
33301: LD_ADDR_VAR 0 3
33305: PUSH
33306: LD_VAR 0 3
33310: PUSH
33311: LD_INT 1
33313: PLUS
33314: ST_TO_ADDR
// SetSide ( i , j ) ;
33315: LD_VAR 0 2
33319: PPUSH
33320: LD_VAR 0 3
33324: PPUSH
33325: CALL_OW 235
// end ;
33329: GO 33252
33331: POP
33332: POP
// end ;
33333: LD_VAR 0 1
33337: RET
// export function hHackFog ; begin
33338: LD_INT 0
33340: PPUSH
// FogOff ( true ) ;
33341: LD_INT 1
33343: PPUSH
33344: CALL_OW 344
// end ;
33348: LD_VAR 0 1
33352: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33353: LD_INT 0
33355: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33356: LD_VAR 0 1
33360: PPUSH
33361: LD_VAR 0 2
33365: PPUSH
33366: LD_VAR 0 3
33370: PPUSH
33371: LD_INT 1
33373: PPUSH
33374: LD_INT 1
33376: PPUSH
33377: CALL_OW 483
// CenterOnXY ( x , y ) ;
33381: LD_VAR 0 2
33385: PPUSH
33386: LD_VAR 0 3
33390: PPUSH
33391: CALL_OW 84
// end ;
33395: LD_VAR 0 4
33399: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33400: LD_INT 0
33402: PPUSH
33403: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33404: LD_VAR 0 1
33408: NOT
33409: PUSH
33410: LD_VAR 0 2
33414: PPUSH
33415: LD_VAR 0 3
33419: PPUSH
33420: CALL_OW 488
33424: NOT
33425: OR
33426: PUSH
33427: LD_VAR 0 1
33431: PPUSH
33432: CALL_OW 266
33436: PUSH
33437: LD_INT 3
33439: NONEQUAL
33440: PUSH
33441: LD_VAR 0 1
33445: PPUSH
33446: CALL_OW 247
33450: PUSH
33451: LD_INT 1
33453: EQUAL
33454: NOT
33455: AND
33456: OR
33457: IFFALSE 33461
// exit ;
33459: GO 33610
// if GetType ( factory ) = unit_human then
33461: LD_VAR 0 1
33465: PPUSH
33466: CALL_OW 247
33470: PUSH
33471: LD_INT 1
33473: EQUAL
33474: IFFALSE 33491
// factory := IsInUnit ( factory ) ;
33476: LD_ADDR_VAR 0 1
33480: PUSH
33481: LD_VAR 0 1
33485: PPUSH
33486: CALL_OW 310
33490: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33491: LD_VAR 0 1
33495: PPUSH
33496: CALL_OW 266
33500: PUSH
33501: LD_INT 3
33503: NONEQUAL
33504: IFFALSE 33508
// exit ;
33506: GO 33610
// if HexInfo ( x , y ) = factory then
33508: LD_VAR 0 2
33512: PPUSH
33513: LD_VAR 0 3
33517: PPUSH
33518: CALL_OW 428
33522: PUSH
33523: LD_VAR 0 1
33527: EQUAL
33528: IFFALSE 33555
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33530: LD_ADDR_EXP 121
33534: PUSH
33535: LD_EXP 121
33539: PPUSH
33540: LD_VAR 0 1
33544: PPUSH
33545: LD_INT 0
33547: PPUSH
33548: CALL_OW 1
33552: ST_TO_ADDR
33553: GO 33606
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33555: LD_ADDR_EXP 121
33559: PUSH
33560: LD_EXP 121
33564: PPUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 255
33579: PUSH
33580: LD_VAR 0 1
33584: PUSH
33585: LD_VAR 0 2
33589: PUSH
33590: LD_VAR 0 3
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: PPUSH
33601: CALL_OW 1
33605: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33606: CALL 33615 0 0
// end ;
33610: LD_VAR 0 4
33614: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33615: LD_INT 0
33617: PPUSH
33618: PPUSH
33619: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33620: LD_STRING resetFactoryWaypoint();
33622: PPUSH
33623: CALL_OW 559
// if factoryWaypoints then
33627: LD_EXP 121
33631: IFFALSE 33757
// begin list := PrepareArray ( factoryWaypoints ) ;
33633: LD_ADDR_VAR 0 3
33637: PUSH
33638: LD_EXP 121
33642: PPUSH
33643: CALL 80189 0 1
33647: ST_TO_ADDR
// for i := 1 to list do
33648: LD_ADDR_VAR 0 2
33652: PUSH
33653: DOUBLE
33654: LD_INT 1
33656: DEC
33657: ST_TO_ADDR
33658: LD_VAR 0 3
33662: PUSH
33663: FOR_TO
33664: IFFALSE 33755
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33666: LD_STRING setFactoryWaypointXY(
33668: PUSH
33669: LD_VAR 0 3
33673: PUSH
33674: LD_VAR 0 2
33678: ARRAY
33679: PUSH
33680: LD_INT 1
33682: ARRAY
33683: STR
33684: PUSH
33685: LD_STRING ,
33687: STR
33688: PUSH
33689: LD_VAR 0 3
33693: PUSH
33694: LD_VAR 0 2
33698: ARRAY
33699: PUSH
33700: LD_INT 2
33702: ARRAY
33703: STR
33704: PUSH
33705: LD_STRING ,
33707: STR
33708: PUSH
33709: LD_VAR 0 3
33713: PUSH
33714: LD_VAR 0 2
33718: ARRAY
33719: PUSH
33720: LD_INT 3
33722: ARRAY
33723: STR
33724: PUSH
33725: LD_STRING ,
33727: STR
33728: PUSH
33729: LD_VAR 0 3
33733: PUSH
33734: LD_VAR 0 2
33738: ARRAY
33739: PUSH
33740: LD_INT 4
33742: ARRAY
33743: STR
33744: PUSH
33745: LD_STRING )
33747: STR
33748: PPUSH
33749: CALL_OW 559
33753: GO 33663
33755: POP
33756: POP
// end ; end ;
33757: LD_VAR 0 1
33761: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33762: LD_INT 0
33764: PPUSH
// if HexInfo ( x , y ) = warehouse then
33765: LD_VAR 0 2
33769: PPUSH
33770: LD_VAR 0 3
33774: PPUSH
33775: CALL_OW 428
33779: PUSH
33780: LD_VAR 0 1
33784: EQUAL
33785: IFFALSE 33812
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33787: LD_ADDR_EXP 122
33791: PUSH
33792: LD_EXP 122
33796: PPUSH
33797: LD_VAR 0 1
33801: PPUSH
33802: LD_INT 0
33804: PPUSH
33805: CALL_OW 1
33809: ST_TO_ADDR
33810: GO 33863
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33812: LD_ADDR_EXP 122
33816: PUSH
33817: LD_EXP 122
33821: PPUSH
33822: LD_VAR 0 1
33826: PPUSH
33827: LD_VAR 0 1
33831: PPUSH
33832: CALL_OW 255
33836: PUSH
33837: LD_VAR 0 1
33841: PUSH
33842: LD_VAR 0 2
33846: PUSH
33847: LD_VAR 0 3
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: PPUSH
33858: CALL_OW 1
33862: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33863: CALL 33872 0 0
// end ;
33867: LD_VAR 0 4
33871: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33872: LD_INT 0
33874: PPUSH
33875: PPUSH
33876: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33877: LD_STRING resetWarehouseGatheringPoints();
33879: PPUSH
33880: CALL_OW 559
// if warehouseGatheringPoints then
33884: LD_EXP 122
33888: IFFALSE 34014
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_EXP 122
33899: PPUSH
33900: CALL 80189 0 1
33904: ST_TO_ADDR
// for i := 1 to list do
33905: LD_ADDR_VAR 0 2
33909: PUSH
33910: DOUBLE
33911: LD_INT 1
33913: DEC
33914: ST_TO_ADDR
33915: LD_VAR 0 3
33919: PUSH
33920: FOR_TO
33921: IFFALSE 34012
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33923: LD_STRING setWarehouseGatheringPointXY(
33925: PUSH
33926: LD_VAR 0 3
33930: PUSH
33931: LD_VAR 0 2
33935: ARRAY
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: STR
33941: PUSH
33942: LD_STRING ,
33944: STR
33945: PUSH
33946: LD_VAR 0 3
33950: PUSH
33951: LD_VAR 0 2
33955: ARRAY
33956: PUSH
33957: LD_INT 2
33959: ARRAY
33960: STR
33961: PUSH
33962: LD_STRING ,
33964: STR
33965: PUSH
33966: LD_VAR 0 3
33970: PUSH
33971: LD_VAR 0 2
33975: ARRAY
33976: PUSH
33977: LD_INT 3
33979: ARRAY
33980: STR
33981: PUSH
33982: LD_STRING ,
33984: STR
33985: PUSH
33986: LD_VAR 0 3
33990: PUSH
33991: LD_VAR 0 2
33995: ARRAY
33996: PUSH
33997: LD_INT 4
33999: ARRAY
34000: STR
34001: PUSH
34002: LD_STRING )
34004: STR
34005: PPUSH
34006: CALL_OW 559
34010: GO 33920
34012: POP
34013: POP
// end ; end ;
34014: LD_VAR 0 1
34018: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34019: LD_EXP 122
34023: IFFALSE 34710
34025: GO 34027
34027: DISABLE
34028: LD_INT 0
34030: PPUSH
34031: PPUSH
34032: PPUSH
34033: PPUSH
34034: PPUSH
34035: PPUSH
34036: PPUSH
34037: PPUSH
34038: PPUSH
// begin enable ;
34039: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34040: LD_ADDR_VAR 0 3
34044: PUSH
34045: LD_EXP 122
34049: PPUSH
34050: CALL 80189 0 1
34054: ST_TO_ADDR
// if not list then
34055: LD_VAR 0 3
34059: NOT
34060: IFFALSE 34064
// exit ;
34062: GO 34710
// for i := 1 to list do
34064: LD_ADDR_VAR 0 1
34068: PUSH
34069: DOUBLE
34070: LD_INT 1
34072: DEC
34073: ST_TO_ADDR
34074: LD_VAR 0 3
34078: PUSH
34079: FOR_TO
34080: IFFALSE 34708
// begin depot := list [ i ] [ 2 ] ;
34082: LD_ADDR_VAR 0 8
34086: PUSH
34087: LD_VAR 0 3
34091: PUSH
34092: LD_VAR 0 1
34096: ARRAY
34097: PUSH
34098: LD_INT 2
34100: ARRAY
34101: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34102: LD_ADDR_VAR 0 5
34106: PUSH
34107: LD_VAR 0 3
34111: PUSH
34112: LD_VAR 0 1
34116: ARRAY
34117: PUSH
34118: LD_INT 1
34120: ARRAY
34121: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34122: LD_VAR 0 8
34126: PPUSH
34127: CALL_OW 301
34131: PUSH
34132: LD_VAR 0 5
34136: PUSH
34137: LD_VAR 0 8
34141: PPUSH
34142: CALL_OW 255
34146: NONEQUAL
34147: OR
34148: IFFALSE 34177
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34150: LD_ADDR_EXP 122
34154: PUSH
34155: LD_EXP 122
34159: PPUSH
34160: LD_VAR 0 8
34164: PPUSH
34165: LD_INT 0
34167: PPUSH
34168: CALL_OW 1
34172: ST_TO_ADDR
// exit ;
34173: POP
34174: POP
34175: GO 34710
// end ; x := list [ i ] [ 3 ] ;
34177: LD_ADDR_VAR 0 6
34181: PUSH
34182: LD_VAR 0 3
34186: PUSH
34187: LD_VAR 0 1
34191: ARRAY
34192: PUSH
34193: LD_INT 3
34195: ARRAY
34196: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34197: LD_ADDR_VAR 0 7
34201: PUSH
34202: LD_VAR 0 3
34206: PUSH
34207: LD_VAR 0 1
34211: ARRAY
34212: PUSH
34213: LD_INT 4
34215: ARRAY
34216: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34217: LD_ADDR_VAR 0 9
34221: PUSH
34222: LD_VAR 0 6
34226: PPUSH
34227: LD_VAR 0 7
34231: PPUSH
34232: LD_INT 16
34234: PPUSH
34235: CALL 78773 0 3
34239: ST_TO_ADDR
// if not cratesNearbyPoint then
34240: LD_VAR 0 9
34244: NOT
34245: IFFALSE 34251
// exit ;
34247: POP
34248: POP
34249: GO 34710
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34251: LD_ADDR_VAR 0 4
34255: PUSH
34256: LD_INT 22
34258: PUSH
34259: LD_VAR 0 5
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: PUSH
34271: LD_INT 60
34273: PUSH
34274: EMPTY
34275: LIST
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 91
34283: PUSH
34284: LD_VAR 0 8
34288: PUSH
34289: LD_INT 6
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 2
34299: PUSH
34300: LD_INT 25
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 25
34312: PUSH
34313: LD_INT 16
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: LIST
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: PPUSH
34331: CALL_OW 69
34335: PUSH
34336: LD_VAR 0 8
34340: PPUSH
34341: CALL_OW 313
34345: PPUSH
34346: LD_INT 3
34348: PUSH
34349: LD_INT 60
34351: PUSH
34352: EMPTY
34353: LIST
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: LD_INT 25
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 25
34374: PUSH
34375: LD_INT 16
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PPUSH
34391: CALL_OW 72
34395: UNION
34396: ST_TO_ADDR
// if tmp then
34397: LD_VAR 0 4
34401: IFFALSE 34481
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34403: LD_ADDR_VAR 0 4
34407: PUSH
34408: LD_VAR 0 4
34412: PPUSH
34413: LD_INT 3
34415: PPUSH
34416: CALL 76740 0 2
34420: ST_TO_ADDR
// for j in tmp do
34421: LD_ADDR_VAR 0 2
34425: PUSH
34426: LD_VAR 0 4
34430: PUSH
34431: FOR_IN
34432: IFFALSE 34475
// begin if IsInUnit ( j ) then
34434: LD_VAR 0 2
34438: PPUSH
34439: CALL_OW 310
34443: IFFALSE 34454
// ComExit ( j ) ;
34445: LD_VAR 0 2
34449: PPUSH
34450: CALL 76823 0 1
// AddComCollect ( j , x , y ) ;
34454: LD_VAR 0 2
34458: PPUSH
34459: LD_VAR 0 6
34463: PPUSH
34464: LD_VAR 0 7
34468: PPUSH
34469: CALL_OW 177
// end ;
34473: GO 34431
34475: POP
34476: POP
// exit ;
34477: POP
34478: POP
34479: GO 34710
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34481: LD_ADDR_VAR 0 4
34485: PUSH
34486: LD_INT 22
34488: PUSH
34489: LD_VAR 0 5
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 91
34500: PUSH
34501: LD_VAR 0 8
34505: PUSH
34506: LD_INT 8
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: LD_INT 34
34519: PUSH
34520: LD_INT 12
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 34
34529: PUSH
34530: LD_INT 51
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 34
34539: PUSH
34540: LD_INT 32
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 34
34549: PUSH
34550: LD_EXP 46
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: PPUSH
34571: CALL_OW 69
34575: ST_TO_ADDR
// if tmp then
34576: LD_VAR 0 4
34580: IFFALSE 34706
// begin for j in tmp do
34582: LD_ADDR_VAR 0 2
34586: PUSH
34587: LD_VAR 0 4
34591: PUSH
34592: FOR_IN
34593: IFFALSE 34704
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34595: LD_VAR 0 2
34599: PPUSH
34600: CALL_OW 262
34604: PUSH
34605: LD_INT 3
34607: EQUAL
34608: PUSH
34609: LD_VAR 0 2
34613: PPUSH
34614: CALL_OW 261
34618: PUSH
34619: LD_INT 20
34621: GREATER
34622: OR
34623: PUSH
34624: LD_VAR 0 2
34628: PPUSH
34629: CALL_OW 314
34633: NOT
34634: AND
34635: PUSH
34636: LD_VAR 0 2
34640: PPUSH
34641: CALL_OW 263
34645: PUSH
34646: LD_INT 1
34648: NONEQUAL
34649: PUSH
34650: LD_VAR 0 2
34654: PPUSH
34655: CALL_OW 311
34659: OR
34660: AND
34661: IFFALSE 34702
// begin ComCollect ( j , x , y ) ;
34663: LD_VAR 0 2
34667: PPUSH
34668: LD_VAR 0 6
34672: PPUSH
34673: LD_VAR 0 7
34677: PPUSH
34678: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34682: LD_VAR 0 2
34686: PPUSH
34687: LD_VAR 0 8
34691: PPUSH
34692: CALL_OW 172
// exit ;
34696: POP
34697: POP
34698: POP
34699: POP
34700: GO 34710
// end ;
34702: GO 34592
34704: POP
34705: POP
// end ; end ;
34706: GO 34079
34708: POP
34709: POP
// end ; end_of_file
34710: PPOPN 9
34712: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34713: LD_INT 0
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34719: LD_VAR 0 1
34723: PPUSH
34724: CALL_OW 264
34728: PUSH
34729: LD_EXP 49
34733: EQUAL
34734: IFFALSE 34806
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34736: LD_INT 68
34738: PPUSH
34739: LD_VAR 0 1
34743: PPUSH
34744: CALL_OW 255
34748: PPUSH
34749: CALL_OW 321
34753: PUSH
34754: LD_INT 2
34756: EQUAL
34757: IFFALSE 34769
// eff := 70 else
34759: LD_ADDR_VAR 0 4
34763: PUSH
34764: LD_INT 70
34766: ST_TO_ADDR
34767: GO 34777
// eff := 30 ;
34769: LD_ADDR_VAR 0 4
34773: PUSH
34774: LD_INT 30
34776: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34777: LD_VAR 0 1
34781: PPUSH
34782: CALL_OW 250
34786: PPUSH
34787: LD_VAR 0 1
34791: PPUSH
34792: CALL_OW 251
34796: PPUSH
34797: LD_VAR 0 4
34801: PPUSH
34802: CALL_OW 495
// end ; end ;
34806: LD_VAR 0 2
34810: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34811: LD_INT 0
34813: PPUSH
// end ;
34814: LD_VAR 0 4
34818: RET
// export function SOS_Command ( cmd ) ; begin
34819: LD_INT 0
34821: PPUSH
// end ;
34822: LD_VAR 0 2
34826: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34827: LD_INT 0
34829: PPUSH
// end ;
34830: LD_VAR 0 6
34834: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34835: LD_INT 0
34837: PPUSH
34838: PPUSH
// if not vehicle or not factory then
34839: LD_VAR 0 1
34843: NOT
34844: PUSH
34845: LD_VAR 0 2
34849: NOT
34850: OR
34851: IFFALSE 34855
// exit ;
34853: GO 35086
// if factoryWaypoints >= factory then
34855: LD_EXP 121
34859: PUSH
34860: LD_VAR 0 2
34864: GREATEREQUAL
34865: IFFALSE 35086
// if factoryWaypoints [ factory ] then
34867: LD_EXP 121
34871: PUSH
34872: LD_VAR 0 2
34876: ARRAY
34877: IFFALSE 35086
// begin if GetControl ( vehicle ) = control_manual then
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 263
34888: PUSH
34889: LD_INT 1
34891: EQUAL
34892: IFFALSE 34973
// begin driver := IsDrivenBy ( vehicle ) ;
34894: LD_ADDR_VAR 0 4
34898: PUSH
34899: LD_VAR 0 1
34903: PPUSH
34904: CALL_OW 311
34908: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34909: LD_VAR 0 4
34913: PPUSH
34914: LD_EXP 121
34918: PUSH
34919: LD_VAR 0 2
34923: ARRAY
34924: PUSH
34925: LD_INT 3
34927: ARRAY
34928: PPUSH
34929: LD_EXP 121
34933: PUSH
34934: LD_VAR 0 2
34938: ARRAY
34939: PUSH
34940: LD_INT 4
34942: ARRAY
34943: PPUSH
34944: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34948: LD_VAR 0 4
34952: PPUSH
34953: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34957: LD_VAR 0 4
34961: PPUSH
34962: LD_VAR 0 2
34966: PPUSH
34967: CALL_OW 180
// end else
34971: GO 35086
// if GetControl ( vehicle ) = control_remote then
34973: LD_VAR 0 1
34977: PPUSH
34978: CALL_OW 263
34982: PUSH
34983: LD_INT 2
34985: EQUAL
34986: IFFALSE 35047
// begin wait ( 0 0$2 ) ;
34988: LD_INT 70
34990: PPUSH
34991: CALL_OW 67
// if Connect ( vehicle ) then
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL 47134 0 1
35004: IFFALSE 35045
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35006: LD_VAR 0 1
35010: PPUSH
35011: LD_EXP 121
35015: PUSH
35016: LD_VAR 0 2
35020: ARRAY
35021: PUSH
35022: LD_INT 3
35024: ARRAY
35025: PPUSH
35026: LD_EXP 121
35030: PUSH
35031: LD_VAR 0 2
35035: ARRAY
35036: PUSH
35037: LD_INT 4
35039: ARRAY
35040: PPUSH
35041: CALL_OW 171
// end else
35045: GO 35086
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35047: LD_VAR 0 1
35051: PPUSH
35052: LD_EXP 121
35056: PUSH
35057: LD_VAR 0 2
35061: ARRAY
35062: PUSH
35063: LD_INT 3
35065: ARRAY
35066: PPUSH
35067: LD_EXP 121
35071: PUSH
35072: LD_VAR 0 2
35076: ARRAY
35077: PUSH
35078: LD_INT 4
35080: ARRAY
35081: PPUSH
35082: CALL_OW 171
// end ; end ;
35086: LD_VAR 0 3
35090: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35091: LD_INT 0
35093: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35094: LD_VAR 0 1
35098: PUSH
35099: LD_INT 250
35101: EQUAL
35102: PUSH
35103: LD_VAR 0 2
35107: PPUSH
35108: CALL_OW 264
35112: PUSH
35113: LD_EXP 52
35117: EQUAL
35118: AND
35119: IFFALSE 35140
// MinerPlaceMine ( unit , x , y ) ;
35121: LD_VAR 0 2
35125: PPUSH
35126: LD_VAR 0 4
35130: PPUSH
35131: LD_VAR 0 5
35135: PPUSH
35136: CALL 37539 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35140: LD_VAR 0 1
35144: PUSH
35145: LD_INT 251
35147: EQUAL
35148: PUSH
35149: LD_VAR 0 2
35153: PPUSH
35154: CALL_OW 264
35158: PUSH
35159: LD_EXP 52
35163: EQUAL
35164: AND
35165: IFFALSE 35186
// MinerDetonateMine ( unit , x , y ) ;
35167: LD_VAR 0 2
35171: PPUSH
35172: LD_VAR 0 4
35176: PPUSH
35177: LD_VAR 0 5
35181: PPUSH
35182: CALL 37816 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35186: LD_VAR 0 1
35190: PUSH
35191: LD_INT 252
35193: EQUAL
35194: PUSH
35195: LD_VAR 0 2
35199: PPUSH
35200: CALL_OW 264
35204: PUSH
35205: LD_EXP 52
35209: EQUAL
35210: AND
35211: IFFALSE 35232
// MinerCreateMinefield ( unit , x , y ) ;
35213: LD_VAR 0 2
35217: PPUSH
35218: LD_VAR 0 4
35222: PPUSH
35223: LD_VAR 0 5
35227: PPUSH
35228: CALL 38233 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35232: LD_VAR 0 1
35236: PUSH
35237: LD_INT 253
35239: EQUAL
35240: PUSH
35241: LD_VAR 0 2
35245: PPUSH
35246: CALL_OW 257
35250: PUSH
35251: LD_INT 5
35253: EQUAL
35254: AND
35255: IFFALSE 35276
// ComBinocular ( unit , x , y ) ;
35257: LD_VAR 0 2
35261: PPUSH
35262: LD_VAR 0 4
35266: PPUSH
35267: LD_VAR 0 5
35271: PPUSH
35272: CALL 38604 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35276: LD_VAR 0 1
35280: PUSH
35281: LD_INT 254
35283: EQUAL
35284: PUSH
35285: LD_VAR 0 2
35289: PPUSH
35290: CALL_OW 264
35294: PUSH
35295: LD_EXP 47
35299: EQUAL
35300: AND
35301: PUSH
35302: LD_VAR 0 3
35306: PPUSH
35307: CALL_OW 263
35311: PUSH
35312: LD_INT 3
35314: EQUAL
35315: AND
35316: IFFALSE 35332
// HackDestroyVehicle ( unit , selectedUnit ) ;
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_VAR 0 3
35327: PPUSH
35328: CALL 36899 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35332: LD_VAR 0 1
35336: PUSH
35337: LD_INT 255
35339: EQUAL
35340: PUSH
35341: LD_VAR 0 2
35345: PPUSH
35346: CALL_OW 264
35350: PUSH
35351: LD_INT 14
35353: PUSH
35354: LD_INT 53
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: IN
35361: AND
35362: PUSH
35363: LD_VAR 0 4
35367: PPUSH
35368: LD_VAR 0 5
35372: PPUSH
35373: CALL_OW 488
35377: AND
35378: IFFALSE 35402
// CutTreeXYR ( unit , x , y , 12 ) ;
35380: LD_VAR 0 2
35384: PPUSH
35385: LD_VAR 0 4
35389: PPUSH
35390: LD_VAR 0 5
35394: PPUSH
35395: LD_INT 12
35397: PPUSH
35398: CALL 35465 0 4
// if cmd = 256 then
35402: LD_VAR 0 1
35406: PUSH
35407: LD_INT 256
35409: EQUAL
35410: IFFALSE 35431
// SetFactoryWaypoint ( unit , x , y ) ;
35412: LD_VAR 0 2
35416: PPUSH
35417: LD_VAR 0 4
35421: PPUSH
35422: LD_VAR 0 5
35426: PPUSH
35427: CALL 33400 0 3
// if cmd = 257 then
35431: LD_VAR 0 1
35435: PUSH
35436: LD_INT 257
35438: EQUAL
35439: IFFALSE 35460
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35441: LD_VAR 0 2
35445: PPUSH
35446: LD_VAR 0 4
35450: PPUSH
35451: LD_VAR 0 5
35455: PPUSH
35456: CALL 33762 0 3
// end ;
35460: LD_VAR 0 6
35464: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35465: LD_INT 0
35467: PPUSH
35468: PPUSH
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
35473: PPUSH
35474: PPUSH
35475: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35476: LD_VAR 0 1
35480: NOT
35481: PUSH
35482: LD_VAR 0 2
35486: PPUSH
35487: LD_VAR 0 3
35491: PPUSH
35492: CALL_OW 488
35496: NOT
35497: OR
35498: PUSH
35499: LD_VAR 0 4
35503: NOT
35504: OR
35505: IFFALSE 35509
// exit ;
35507: GO 35849
// list := [ ] ;
35509: LD_ADDR_VAR 0 13
35513: PUSH
35514: EMPTY
35515: ST_TO_ADDR
// if x - r < 0 then
35516: LD_VAR 0 2
35520: PUSH
35521: LD_VAR 0 4
35525: MINUS
35526: PUSH
35527: LD_INT 0
35529: LESS
35530: IFFALSE 35542
// min_x := 0 else
35532: LD_ADDR_VAR 0 7
35536: PUSH
35537: LD_INT 0
35539: ST_TO_ADDR
35540: GO 35558
// min_x := x - r ;
35542: LD_ADDR_VAR 0 7
35546: PUSH
35547: LD_VAR 0 2
35551: PUSH
35552: LD_VAR 0 4
35556: MINUS
35557: ST_TO_ADDR
// if y - r < 0 then
35558: LD_VAR 0 3
35562: PUSH
35563: LD_VAR 0 4
35567: MINUS
35568: PUSH
35569: LD_INT 0
35571: LESS
35572: IFFALSE 35584
// min_y := 0 else
35574: LD_ADDR_VAR 0 8
35578: PUSH
35579: LD_INT 0
35581: ST_TO_ADDR
35582: GO 35600
// min_y := y - r ;
35584: LD_ADDR_VAR 0 8
35588: PUSH
35589: LD_VAR 0 3
35593: PUSH
35594: LD_VAR 0 4
35598: MINUS
35599: ST_TO_ADDR
// max_x := x + r ;
35600: LD_ADDR_VAR 0 9
35604: PUSH
35605: LD_VAR 0 2
35609: PUSH
35610: LD_VAR 0 4
35614: PLUS
35615: ST_TO_ADDR
// max_y := y + r ;
35616: LD_ADDR_VAR 0 10
35620: PUSH
35621: LD_VAR 0 3
35625: PUSH
35626: LD_VAR 0 4
35630: PLUS
35631: ST_TO_ADDR
// for _x = min_x to max_x do
35632: LD_ADDR_VAR 0 11
35636: PUSH
35637: DOUBLE
35638: LD_VAR 0 7
35642: DEC
35643: ST_TO_ADDR
35644: LD_VAR 0 9
35648: PUSH
35649: FOR_TO
35650: IFFALSE 35767
// for _y = min_y to max_y do
35652: LD_ADDR_VAR 0 12
35656: PUSH
35657: DOUBLE
35658: LD_VAR 0 8
35662: DEC
35663: ST_TO_ADDR
35664: LD_VAR 0 10
35668: PUSH
35669: FOR_TO
35670: IFFALSE 35763
// begin if not ValidHex ( _x , _y ) then
35672: LD_VAR 0 11
35676: PPUSH
35677: LD_VAR 0 12
35681: PPUSH
35682: CALL_OW 488
35686: NOT
35687: IFFALSE 35691
// continue ;
35689: GO 35669
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35691: LD_VAR 0 11
35695: PPUSH
35696: LD_VAR 0 12
35700: PPUSH
35701: CALL_OW 351
35705: PUSH
35706: LD_VAR 0 11
35710: PPUSH
35711: LD_VAR 0 12
35715: PPUSH
35716: CALL_OW 554
35720: AND
35721: IFFALSE 35761
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35723: LD_ADDR_VAR 0 13
35727: PUSH
35728: LD_VAR 0 13
35732: PPUSH
35733: LD_VAR 0 13
35737: PUSH
35738: LD_INT 1
35740: PLUS
35741: PPUSH
35742: LD_VAR 0 11
35746: PUSH
35747: LD_VAR 0 12
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PPUSH
35756: CALL_OW 2
35760: ST_TO_ADDR
// end ;
35761: GO 35669
35763: POP
35764: POP
35765: GO 35649
35767: POP
35768: POP
// if not list then
35769: LD_VAR 0 13
35773: NOT
35774: IFFALSE 35778
// exit ;
35776: GO 35849
// for i in list do
35778: LD_ADDR_VAR 0 6
35782: PUSH
35783: LD_VAR 0 13
35787: PUSH
35788: FOR_IN
35789: IFFALSE 35847
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35791: LD_VAR 0 1
35795: PPUSH
35796: LD_STRING M
35798: PUSH
35799: LD_VAR 0 6
35803: PUSH
35804: LD_INT 1
35806: ARRAY
35807: PUSH
35808: LD_VAR 0 6
35812: PUSH
35813: LD_INT 2
35815: ARRAY
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: PUSH
35838: EMPTY
35839: LIST
35840: PPUSH
35841: CALL_OW 447
35845: GO 35788
35847: POP
35848: POP
// end ;
35849: LD_VAR 0 5
35853: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35854: LD_EXP 124
35858: NOT
35859: IFFALSE 35909
35861: GO 35863
35863: DISABLE
// begin initHack := true ;
35864: LD_ADDR_EXP 124
35868: PUSH
35869: LD_INT 1
35871: ST_TO_ADDR
// hackTanks := [ ] ;
35872: LD_ADDR_EXP 125
35876: PUSH
35877: EMPTY
35878: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35879: LD_ADDR_EXP 126
35883: PUSH
35884: EMPTY
35885: ST_TO_ADDR
// hackLimit := 3 ;
35886: LD_ADDR_EXP 127
35890: PUSH
35891: LD_INT 3
35893: ST_TO_ADDR
// hackDist := 12 ;
35894: LD_ADDR_EXP 128
35898: PUSH
35899: LD_INT 12
35901: ST_TO_ADDR
// hackCounter := [ ] ;
35902: LD_ADDR_EXP 129
35906: PUSH
35907: EMPTY
35908: ST_TO_ADDR
// end ;
35909: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35910: LD_EXP 124
35914: PUSH
35915: LD_INT 34
35917: PUSH
35918: LD_EXP 47
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PPUSH
35927: CALL_OW 69
35931: AND
35932: IFFALSE 36187
35934: GO 35936
35936: DISABLE
35937: LD_INT 0
35939: PPUSH
35940: PPUSH
// begin enable ;
35941: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35942: LD_ADDR_VAR 0 1
35946: PUSH
35947: LD_INT 34
35949: PUSH
35950: LD_EXP 47
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PPUSH
35959: CALL_OW 69
35963: PUSH
35964: FOR_IN
35965: IFFALSE 36185
// begin if not i in hackTanks then
35967: LD_VAR 0 1
35971: PUSH
35972: LD_EXP 125
35976: IN
35977: NOT
35978: IFFALSE 36061
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35980: LD_ADDR_EXP 125
35984: PUSH
35985: LD_EXP 125
35989: PPUSH
35990: LD_EXP 125
35994: PUSH
35995: LD_INT 1
35997: PLUS
35998: PPUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 1
36008: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36009: LD_ADDR_EXP 126
36013: PUSH
36014: LD_EXP 126
36018: PPUSH
36019: LD_EXP 126
36023: PUSH
36024: LD_INT 1
36026: PLUS
36027: PPUSH
36028: EMPTY
36029: PPUSH
36030: CALL_OW 1
36034: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36035: LD_ADDR_EXP 129
36039: PUSH
36040: LD_EXP 129
36044: PPUSH
36045: LD_EXP 129
36049: PUSH
36050: LD_INT 1
36052: PLUS
36053: PPUSH
36054: EMPTY
36055: PPUSH
36056: CALL_OW 1
36060: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 302
36070: NOT
36071: IFFALSE 36084
// begin HackUnlinkAll ( i ) ;
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL 36190 0 1
// continue ;
36082: GO 35964
// end ; HackCheckCapturedStatus ( i ) ;
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL 36633 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36093: LD_ADDR_VAR 0 2
36097: PUSH
36098: LD_INT 81
36100: PUSH
36101: LD_VAR 0 1
36105: PPUSH
36106: CALL_OW 255
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 33
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 91
36127: PUSH
36128: LD_VAR 0 1
36132: PUSH
36133: LD_EXP 128
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 50
36145: PUSH
36146: EMPTY
36147: LIST
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: PPUSH
36155: CALL_OW 69
36159: ST_TO_ADDR
// if not tmp then
36160: LD_VAR 0 2
36164: NOT
36165: IFFALSE 36169
// continue ;
36167: GO 35964
// HackLink ( i , tmp ) ;
36169: LD_VAR 0 1
36173: PPUSH
36174: LD_VAR 0 2
36178: PPUSH
36179: CALL 36326 0 2
// end ;
36183: GO 35964
36185: POP
36186: POP
// end ;
36187: PPOPN 2
36189: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36190: LD_INT 0
36192: PPUSH
36193: PPUSH
36194: PPUSH
// if not hack in hackTanks then
36195: LD_VAR 0 1
36199: PUSH
36200: LD_EXP 125
36204: IN
36205: NOT
36206: IFFALSE 36210
// exit ;
36208: GO 36321
// index := GetElementIndex ( hackTanks , hack ) ;
36210: LD_ADDR_VAR 0 4
36214: PUSH
36215: LD_EXP 125
36219: PPUSH
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL 43948 0 2
36229: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36230: LD_EXP 126
36234: PUSH
36235: LD_VAR 0 4
36239: ARRAY
36240: IFFALSE 36321
// begin for i in hackTanksCaptured [ index ] do
36242: LD_ADDR_VAR 0 3
36246: PUSH
36247: LD_EXP 126
36251: PUSH
36252: LD_VAR 0 4
36256: ARRAY
36257: PUSH
36258: FOR_IN
36259: IFFALSE 36285
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36261: LD_VAR 0 3
36265: PUSH
36266: LD_INT 1
36268: ARRAY
36269: PPUSH
36270: LD_VAR 0 3
36274: PUSH
36275: LD_INT 2
36277: ARRAY
36278: PPUSH
36279: CALL_OW 235
36283: GO 36258
36285: POP
36286: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36287: LD_ADDR_EXP 126
36291: PUSH
36292: LD_EXP 126
36296: PPUSH
36297: LD_VAR 0 4
36301: PPUSH
36302: EMPTY
36303: PPUSH
36304: CALL_OW 1
36308: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36309: LD_VAR 0 1
36313: PPUSH
36314: LD_INT 0
36316: PPUSH
36317: CALL_OW 505
// end ; end ;
36321: LD_VAR 0 2
36325: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36326: LD_INT 0
36328: PPUSH
36329: PPUSH
36330: PPUSH
// if not hack in hackTanks or not vehicles then
36331: LD_VAR 0 1
36335: PUSH
36336: LD_EXP 125
36340: IN
36341: NOT
36342: PUSH
36343: LD_VAR 0 2
36347: NOT
36348: OR
36349: IFFALSE 36353
// exit ;
36351: GO 36628
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36353: LD_ADDR_VAR 0 2
36357: PUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: LD_VAR 0 2
36367: PPUSH
36368: LD_INT 1
36370: PPUSH
36371: LD_INT 1
36373: PPUSH
36374: CALL 44598 0 4
36378: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36379: LD_ADDR_VAR 0 5
36383: PUSH
36384: LD_EXP 125
36388: PPUSH
36389: LD_VAR 0 1
36393: PPUSH
36394: CALL 43948 0 2
36398: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36399: LD_EXP 126
36403: PUSH
36404: LD_VAR 0 5
36408: ARRAY
36409: PUSH
36410: LD_EXP 127
36414: LESS
36415: IFFALSE 36604
// begin for i := 1 to vehicles do
36417: LD_ADDR_VAR 0 4
36421: PUSH
36422: DOUBLE
36423: LD_INT 1
36425: DEC
36426: ST_TO_ADDR
36427: LD_VAR 0 2
36431: PUSH
36432: FOR_TO
36433: IFFALSE 36602
// begin if hackTanksCaptured [ index ] = hackLimit then
36435: LD_EXP 126
36439: PUSH
36440: LD_VAR 0 5
36444: ARRAY
36445: PUSH
36446: LD_EXP 127
36450: EQUAL
36451: IFFALSE 36455
// break ;
36453: GO 36602
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36455: LD_ADDR_EXP 129
36459: PUSH
36460: LD_EXP 129
36464: PPUSH
36465: LD_VAR 0 5
36469: PPUSH
36470: LD_EXP 129
36474: PUSH
36475: LD_VAR 0 5
36479: ARRAY
36480: PUSH
36481: LD_INT 1
36483: PLUS
36484: PPUSH
36485: CALL_OW 1
36489: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36490: LD_ADDR_EXP 126
36494: PUSH
36495: LD_EXP 126
36499: PPUSH
36500: LD_VAR 0 5
36504: PUSH
36505: LD_EXP 126
36509: PUSH
36510: LD_VAR 0 5
36514: ARRAY
36515: PUSH
36516: LD_INT 1
36518: PLUS
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PPUSH
36524: LD_VAR 0 2
36528: PUSH
36529: LD_VAR 0 4
36533: ARRAY
36534: PUSH
36535: LD_VAR 0 2
36539: PUSH
36540: LD_VAR 0 4
36544: ARRAY
36545: PPUSH
36546: CALL_OW 255
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PPUSH
36555: CALL 44163 0 3
36559: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36560: LD_VAR 0 2
36564: PUSH
36565: LD_VAR 0 4
36569: ARRAY
36570: PPUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 255
36580: PPUSH
36581: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36585: LD_VAR 0 2
36589: PUSH
36590: LD_VAR 0 4
36594: ARRAY
36595: PPUSH
36596: CALL_OW 141
// end ;
36600: GO 36432
36602: POP
36603: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36604: LD_VAR 0 1
36608: PPUSH
36609: LD_EXP 126
36613: PUSH
36614: LD_VAR 0 5
36618: ARRAY
36619: PUSH
36620: LD_INT 0
36622: PLUS
36623: PPUSH
36624: CALL_OW 505
// end ;
36628: LD_VAR 0 3
36632: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36633: LD_INT 0
36635: PPUSH
36636: PPUSH
36637: PPUSH
36638: PPUSH
// if not hack in hackTanks then
36639: LD_VAR 0 1
36643: PUSH
36644: LD_EXP 125
36648: IN
36649: NOT
36650: IFFALSE 36654
// exit ;
36652: GO 36894
// index := GetElementIndex ( hackTanks , hack ) ;
36654: LD_ADDR_VAR 0 4
36658: PUSH
36659: LD_EXP 125
36663: PPUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL 43948 0 2
36673: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36674: LD_ADDR_VAR 0 3
36678: PUSH
36679: DOUBLE
36680: LD_EXP 126
36684: PUSH
36685: LD_VAR 0 4
36689: ARRAY
36690: INC
36691: ST_TO_ADDR
36692: LD_INT 1
36694: PUSH
36695: FOR_DOWNTO
36696: IFFALSE 36868
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36698: LD_ADDR_VAR 0 5
36702: PUSH
36703: LD_EXP 126
36707: PUSH
36708: LD_VAR 0 4
36712: ARRAY
36713: PUSH
36714: LD_VAR 0 3
36718: ARRAY
36719: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36720: LD_VAR 0 5
36724: PUSH
36725: LD_INT 1
36727: ARRAY
36728: PPUSH
36729: CALL_OW 302
36733: NOT
36734: PUSH
36735: LD_VAR 0 5
36739: PUSH
36740: LD_INT 1
36742: ARRAY
36743: PPUSH
36744: CALL_OW 255
36748: PUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL_OW 255
36758: NONEQUAL
36759: OR
36760: IFFALSE 36866
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36762: LD_VAR 0 5
36766: PUSH
36767: LD_INT 1
36769: ARRAY
36770: PPUSH
36771: CALL_OW 305
36775: PUSH
36776: LD_VAR 0 5
36780: PUSH
36781: LD_INT 1
36783: ARRAY
36784: PPUSH
36785: CALL_OW 255
36789: PUSH
36790: LD_VAR 0 1
36794: PPUSH
36795: CALL_OW 255
36799: EQUAL
36800: AND
36801: IFFALSE 36825
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36803: LD_VAR 0 5
36807: PUSH
36808: LD_INT 1
36810: ARRAY
36811: PPUSH
36812: LD_VAR 0 5
36816: PUSH
36817: LD_INT 2
36819: ARRAY
36820: PPUSH
36821: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36825: LD_ADDR_EXP 126
36829: PUSH
36830: LD_EXP 126
36834: PPUSH
36835: LD_VAR 0 4
36839: PPUSH
36840: LD_EXP 126
36844: PUSH
36845: LD_VAR 0 4
36849: ARRAY
36850: PPUSH
36851: LD_VAR 0 3
36855: PPUSH
36856: CALL_OW 3
36860: PPUSH
36861: CALL_OW 1
36865: ST_TO_ADDR
// end ; end ;
36866: GO 36695
36868: POP
36869: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36870: LD_VAR 0 1
36874: PPUSH
36875: LD_EXP 126
36879: PUSH
36880: LD_VAR 0 4
36884: ARRAY
36885: PUSH
36886: LD_INT 0
36888: PLUS
36889: PPUSH
36890: CALL_OW 505
// end ;
36894: LD_VAR 0 2
36898: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36899: LD_INT 0
36901: PPUSH
36902: PPUSH
36903: PPUSH
36904: PPUSH
// if not hack in hackTanks then
36905: LD_VAR 0 1
36909: PUSH
36910: LD_EXP 125
36914: IN
36915: NOT
36916: IFFALSE 36920
// exit ;
36918: GO 37005
// index := GetElementIndex ( hackTanks , hack ) ;
36920: LD_ADDR_VAR 0 5
36924: PUSH
36925: LD_EXP 125
36929: PPUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL 43948 0 2
36939: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36940: LD_ADDR_VAR 0 4
36944: PUSH
36945: DOUBLE
36946: LD_INT 1
36948: DEC
36949: ST_TO_ADDR
36950: LD_EXP 126
36954: PUSH
36955: LD_VAR 0 5
36959: ARRAY
36960: PUSH
36961: FOR_TO
36962: IFFALSE 37003
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36964: LD_EXP 126
36968: PUSH
36969: LD_VAR 0 5
36973: ARRAY
36974: PUSH
36975: LD_VAR 0 4
36979: ARRAY
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: PUSH
36985: LD_VAR 0 2
36989: EQUAL
36990: IFFALSE 37001
// KillUnit ( vehicle ) ;
36992: LD_VAR 0 2
36996: PPUSH
36997: CALL_OW 66
37001: GO 36961
37003: POP
37004: POP
// end ;
37005: LD_VAR 0 3
37009: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37010: LD_EXP 130
37014: NOT
37015: IFFALSE 37050
37017: GO 37019
37019: DISABLE
// begin initMiner := true ;
37020: LD_ADDR_EXP 130
37024: PUSH
37025: LD_INT 1
37027: ST_TO_ADDR
// minersList := [ ] ;
37028: LD_ADDR_EXP 131
37032: PUSH
37033: EMPTY
37034: ST_TO_ADDR
// minerMinesList := [ ] ;
37035: LD_ADDR_EXP 132
37039: PUSH
37040: EMPTY
37041: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37042: LD_ADDR_EXP 133
37046: PUSH
37047: LD_INT 5
37049: ST_TO_ADDR
// end ;
37050: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37051: LD_EXP 130
37055: PUSH
37056: LD_INT 34
37058: PUSH
37059: LD_EXP 52
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PPUSH
37068: CALL_OW 69
37072: AND
37073: IFFALSE 37536
37075: GO 37077
37077: DISABLE
37078: LD_INT 0
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
// begin enable ;
37084: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37085: LD_ADDR_VAR 0 1
37089: PUSH
37090: LD_INT 34
37092: PUSH
37093: LD_EXP 52
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PPUSH
37102: CALL_OW 69
37106: PUSH
37107: FOR_IN
37108: IFFALSE 37180
// begin if not i in minersList then
37110: LD_VAR 0 1
37114: PUSH
37115: LD_EXP 131
37119: IN
37120: NOT
37121: IFFALSE 37178
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37123: LD_ADDR_EXP 131
37127: PUSH
37128: LD_EXP 131
37132: PPUSH
37133: LD_EXP 131
37137: PUSH
37138: LD_INT 1
37140: PLUS
37141: PPUSH
37142: LD_VAR 0 1
37146: PPUSH
37147: CALL_OW 1
37151: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37152: LD_ADDR_EXP 132
37156: PUSH
37157: LD_EXP 132
37161: PPUSH
37162: LD_EXP 132
37166: PUSH
37167: LD_INT 1
37169: PLUS
37170: PPUSH
37171: EMPTY
37172: PPUSH
37173: CALL_OW 1
37177: ST_TO_ADDR
// end end ;
37178: GO 37107
37180: POP
37181: POP
// for i := minerMinesList downto 1 do
37182: LD_ADDR_VAR 0 1
37186: PUSH
37187: DOUBLE
37188: LD_EXP 132
37192: INC
37193: ST_TO_ADDR
37194: LD_INT 1
37196: PUSH
37197: FOR_DOWNTO
37198: IFFALSE 37534
// begin if IsLive ( minersList [ i ] ) then
37200: LD_EXP 131
37204: PUSH
37205: LD_VAR 0 1
37209: ARRAY
37210: PPUSH
37211: CALL_OW 300
37215: IFFALSE 37243
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37217: LD_EXP 131
37221: PUSH
37222: LD_VAR 0 1
37226: ARRAY
37227: PPUSH
37228: LD_EXP 132
37232: PUSH
37233: LD_VAR 0 1
37237: ARRAY
37238: PPUSH
37239: CALL_OW 505
// if not minerMinesList [ i ] then
37243: LD_EXP 132
37247: PUSH
37248: LD_VAR 0 1
37252: ARRAY
37253: NOT
37254: IFFALSE 37258
// continue ;
37256: GO 37197
// for j := minerMinesList [ i ] downto 1 do
37258: LD_ADDR_VAR 0 2
37262: PUSH
37263: DOUBLE
37264: LD_EXP 132
37268: PUSH
37269: LD_VAR 0 1
37273: ARRAY
37274: INC
37275: ST_TO_ADDR
37276: LD_INT 1
37278: PUSH
37279: FOR_DOWNTO
37280: IFFALSE 37530
// begin side := GetSide ( minersList [ i ] ) ;
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_EXP 131
37291: PUSH
37292: LD_VAR 0 1
37296: ARRAY
37297: PPUSH
37298: CALL_OW 255
37302: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37303: LD_ADDR_VAR 0 4
37307: PUSH
37308: LD_EXP 132
37312: PUSH
37313: LD_VAR 0 1
37317: ARRAY
37318: PUSH
37319: LD_VAR 0 2
37323: ARRAY
37324: PUSH
37325: LD_INT 1
37327: ARRAY
37328: PPUSH
37329: LD_EXP 132
37333: PUSH
37334: LD_VAR 0 1
37338: ARRAY
37339: PUSH
37340: LD_VAR 0 2
37344: ARRAY
37345: PUSH
37346: LD_INT 2
37348: ARRAY
37349: PPUSH
37350: CALL_OW 428
37354: ST_TO_ADDR
// if not tmp then
37355: LD_VAR 0 4
37359: NOT
37360: IFFALSE 37364
// continue ;
37362: GO 37279
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37364: LD_VAR 0 4
37368: PUSH
37369: LD_INT 81
37371: PUSH
37372: LD_VAR 0 3
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PPUSH
37381: CALL_OW 69
37385: IN
37386: PUSH
37387: LD_EXP 132
37391: PUSH
37392: LD_VAR 0 1
37396: ARRAY
37397: PUSH
37398: LD_VAR 0 2
37402: ARRAY
37403: PUSH
37404: LD_INT 1
37406: ARRAY
37407: PPUSH
37408: LD_EXP 132
37412: PUSH
37413: LD_VAR 0 1
37417: ARRAY
37418: PUSH
37419: LD_VAR 0 2
37423: ARRAY
37424: PUSH
37425: LD_INT 2
37427: ARRAY
37428: PPUSH
37429: CALL_OW 458
37433: AND
37434: IFFALSE 37528
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37436: LD_EXP 132
37440: PUSH
37441: LD_VAR 0 1
37445: ARRAY
37446: PUSH
37447: LD_VAR 0 2
37451: ARRAY
37452: PUSH
37453: LD_INT 1
37455: ARRAY
37456: PPUSH
37457: LD_EXP 132
37461: PUSH
37462: LD_VAR 0 1
37466: ARRAY
37467: PUSH
37468: LD_VAR 0 2
37472: ARRAY
37473: PUSH
37474: LD_INT 2
37476: ARRAY
37477: PPUSH
37478: LD_VAR 0 3
37482: PPUSH
37483: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37487: LD_ADDR_EXP 132
37491: PUSH
37492: LD_EXP 132
37496: PPUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: LD_EXP 132
37506: PUSH
37507: LD_VAR 0 1
37511: ARRAY
37512: PPUSH
37513: LD_VAR 0 2
37517: PPUSH
37518: CALL_OW 3
37522: PPUSH
37523: CALL_OW 1
37527: ST_TO_ADDR
// end ; end ;
37528: GO 37279
37530: POP
37531: POP
// end ;
37532: GO 37197
37534: POP
37535: POP
// end ;
37536: PPOPN 4
37538: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37539: LD_INT 0
37541: PPUSH
37542: PPUSH
// result := false ;
37543: LD_ADDR_VAR 0 4
37547: PUSH
37548: LD_INT 0
37550: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 264
37560: PUSH
37561: LD_EXP 52
37565: EQUAL
37566: NOT
37567: IFFALSE 37571
// exit ;
37569: GO 37811
// index := GetElementIndex ( minersList , unit ) ;
37571: LD_ADDR_VAR 0 5
37575: PUSH
37576: LD_EXP 131
37580: PPUSH
37581: LD_VAR 0 1
37585: PPUSH
37586: CALL 43948 0 2
37590: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37591: LD_EXP 132
37595: PUSH
37596: LD_VAR 0 5
37600: ARRAY
37601: PUSH
37602: LD_EXP 133
37606: GREATEREQUAL
37607: IFFALSE 37611
// exit ;
37609: GO 37811
// ComMoveXY ( unit , x , y ) ;
37611: LD_VAR 0 1
37615: PPUSH
37616: LD_VAR 0 2
37620: PPUSH
37621: LD_VAR 0 3
37625: PPUSH
37626: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37630: LD_INT 35
37632: PPUSH
37633: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37637: LD_VAR 0 1
37641: PPUSH
37642: LD_VAR 0 2
37646: PPUSH
37647: LD_VAR 0 3
37651: PPUSH
37652: CALL 75234 0 3
37656: NOT
37657: PUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: CALL_OW 314
37667: AND
37668: IFFALSE 37672
// exit ;
37670: GO 37811
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37672: LD_VAR 0 2
37676: PPUSH
37677: LD_VAR 0 3
37681: PPUSH
37682: CALL_OW 428
37686: PUSH
37687: LD_VAR 0 1
37691: EQUAL
37692: PUSH
37693: LD_VAR 0 1
37697: PPUSH
37698: CALL_OW 314
37702: NOT
37703: AND
37704: IFFALSE 37630
// PlaySoundXY ( x , y , PlantMine ) ;
37706: LD_VAR 0 2
37710: PPUSH
37711: LD_VAR 0 3
37715: PPUSH
37716: LD_STRING PlantMine
37718: PPUSH
37719: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37723: LD_VAR 0 2
37727: PPUSH
37728: LD_VAR 0 3
37732: PPUSH
37733: LD_VAR 0 1
37737: PPUSH
37738: CALL_OW 255
37742: PPUSH
37743: LD_INT 0
37745: PPUSH
37746: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37750: LD_ADDR_EXP 132
37754: PUSH
37755: LD_EXP 132
37759: PPUSH
37760: LD_VAR 0 5
37764: PUSH
37765: LD_EXP 132
37769: PUSH
37770: LD_VAR 0 5
37774: ARRAY
37775: PUSH
37776: LD_INT 1
37778: PLUS
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PPUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_VAR 0 3
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PPUSH
37798: CALL 44163 0 3
37802: ST_TO_ADDR
// result := true ;
37803: LD_ADDR_VAR 0 4
37807: PUSH
37808: LD_INT 1
37810: ST_TO_ADDR
// end ;
37811: LD_VAR 0 4
37815: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37816: LD_INT 0
37818: PPUSH
37819: PPUSH
37820: PPUSH
// if not unit in minersList then
37821: LD_VAR 0 1
37825: PUSH
37826: LD_EXP 131
37830: IN
37831: NOT
37832: IFFALSE 37836
// exit ;
37834: GO 38228
// index := GetElementIndex ( minersList , unit ) ;
37836: LD_ADDR_VAR 0 6
37840: PUSH
37841: LD_EXP 131
37845: PPUSH
37846: LD_VAR 0 1
37850: PPUSH
37851: CALL 43948 0 2
37855: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37856: LD_ADDR_VAR 0 5
37860: PUSH
37861: DOUBLE
37862: LD_EXP 132
37866: PUSH
37867: LD_VAR 0 6
37871: ARRAY
37872: INC
37873: ST_TO_ADDR
37874: LD_INT 1
37876: PUSH
37877: FOR_DOWNTO
37878: IFFALSE 38039
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37880: LD_EXP 132
37884: PUSH
37885: LD_VAR 0 6
37889: ARRAY
37890: PUSH
37891: LD_VAR 0 5
37895: ARRAY
37896: PUSH
37897: LD_INT 1
37899: ARRAY
37900: PUSH
37901: LD_VAR 0 2
37905: EQUAL
37906: PUSH
37907: LD_EXP 132
37911: PUSH
37912: LD_VAR 0 6
37916: ARRAY
37917: PUSH
37918: LD_VAR 0 5
37922: ARRAY
37923: PUSH
37924: LD_INT 2
37926: ARRAY
37927: PUSH
37928: LD_VAR 0 3
37932: EQUAL
37933: AND
37934: IFFALSE 38037
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37936: LD_EXP 132
37940: PUSH
37941: LD_VAR 0 6
37945: ARRAY
37946: PUSH
37947: LD_VAR 0 5
37951: ARRAY
37952: PUSH
37953: LD_INT 1
37955: ARRAY
37956: PPUSH
37957: LD_EXP 132
37961: PUSH
37962: LD_VAR 0 6
37966: ARRAY
37967: PUSH
37968: LD_VAR 0 5
37972: ARRAY
37973: PUSH
37974: LD_INT 2
37976: ARRAY
37977: PPUSH
37978: LD_VAR 0 1
37982: PPUSH
37983: CALL_OW 255
37987: PPUSH
37988: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37992: LD_ADDR_EXP 132
37996: PUSH
37997: LD_EXP 132
38001: PPUSH
38002: LD_VAR 0 6
38006: PPUSH
38007: LD_EXP 132
38011: PUSH
38012: LD_VAR 0 6
38016: ARRAY
38017: PPUSH
38018: LD_VAR 0 5
38022: PPUSH
38023: CALL_OW 3
38027: PPUSH
38028: CALL_OW 1
38032: ST_TO_ADDR
// exit ;
38033: POP
38034: POP
38035: GO 38228
// end ; end ;
38037: GO 37877
38039: POP
38040: POP
// for i := minerMinesList [ index ] downto 1 do
38041: LD_ADDR_VAR 0 5
38045: PUSH
38046: DOUBLE
38047: LD_EXP 132
38051: PUSH
38052: LD_VAR 0 6
38056: ARRAY
38057: INC
38058: ST_TO_ADDR
38059: LD_INT 1
38061: PUSH
38062: FOR_DOWNTO
38063: IFFALSE 38226
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38065: LD_EXP 132
38069: PUSH
38070: LD_VAR 0 6
38074: ARRAY
38075: PUSH
38076: LD_VAR 0 5
38080: ARRAY
38081: PUSH
38082: LD_INT 1
38084: ARRAY
38085: PPUSH
38086: LD_EXP 132
38090: PUSH
38091: LD_VAR 0 6
38095: ARRAY
38096: PUSH
38097: LD_VAR 0 5
38101: ARRAY
38102: PUSH
38103: LD_INT 2
38105: ARRAY
38106: PPUSH
38107: LD_VAR 0 2
38111: PPUSH
38112: LD_VAR 0 3
38116: PPUSH
38117: CALL_OW 298
38121: PUSH
38122: LD_INT 6
38124: LESS
38125: IFFALSE 38224
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38127: LD_EXP 132
38131: PUSH
38132: LD_VAR 0 6
38136: ARRAY
38137: PUSH
38138: LD_VAR 0 5
38142: ARRAY
38143: PUSH
38144: LD_INT 1
38146: ARRAY
38147: PPUSH
38148: LD_EXP 132
38152: PUSH
38153: LD_VAR 0 6
38157: ARRAY
38158: PUSH
38159: LD_VAR 0 5
38163: ARRAY
38164: PUSH
38165: LD_INT 2
38167: ARRAY
38168: PPUSH
38169: LD_VAR 0 1
38173: PPUSH
38174: CALL_OW 255
38178: PPUSH
38179: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38183: LD_ADDR_EXP 132
38187: PUSH
38188: LD_EXP 132
38192: PPUSH
38193: LD_VAR 0 6
38197: PPUSH
38198: LD_EXP 132
38202: PUSH
38203: LD_VAR 0 6
38207: ARRAY
38208: PPUSH
38209: LD_VAR 0 5
38213: PPUSH
38214: CALL_OW 3
38218: PPUSH
38219: CALL_OW 1
38223: ST_TO_ADDR
// end ; end ;
38224: GO 38062
38226: POP
38227: POP
// end ;
38228: LD_VAR 0 4
38232: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38233: LD_INT 0
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38244: LD_VAR 0 1
38248: PPUSH
38249: CALL_OW 264
38253: PUSH
38254: LD_EXP 52
38258: EQUAL
38259: NOT
38260: PUSH
38261: LD_VAR 0 1
38265: PUSH
38266: LD_EXP 131
38270: IN
38271: NOT
38272: OR
38273: IFFALSE 38277
// exit ;
38275: GO 38599
// index := GetElementIndex ( minersList , unit ) ;
38277: LD_ADDR_VAR 0 6
38281: PUSH
38282: LD_EXP 131
38286: PPUSH
38287: LD_VAR 0 1
38291: PPUSH
38292: CALL 43948 0 2
38296: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38297: LD_ADDR_VAR 0 8
38301: PUSH
38302: LD_EXP 133
38306: PUSH
38307: LD_EXP 132
38311: PUSH
38312: LD_VAR 0 6
38316: ARRAY
38317: MINUS
38318: ST_TO_ADDR
// if not minesFreeAmount then
38319: LD_VAR 0 8
38323: NOT
38324: IFFALSE 38328
// exit ;
38326: GO 38599
// tmp := [ ] ;
38328: LD_ADDR_VAR 0 7
38332: PUSH
38333: EMPTY
38334: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38335: LD_ADDR_VAR 0 5
38339: PUSH
38340: DOUBLE
38341: LD_INT 1
38343: DEC
38344: ST_TO_ADDR
38345: LD_VAR 0 8
38349: PUSH
38350: FOR_TO
38351: IFFALSE 38546
// begin _d := rand ( 0 , 5 ) ;
38353: LD_ADDR_VAR 0 11
38357: PUSH
38358: LD_INT 0
38360: PPUSH
38361: LD_INT 5
38363: PPUSH
38364: CALL_OW 12
38368: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38369: LD_ADDR_VAR 0 12
38373: PUSH
38374: LD_INT 2
38376: PPUSH
38377: LD_INT 6
38379: PPUSH
38380: CALL_OW 12
38384: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38385: LD_ADDR_VAR 0 9
38389: PUSH
38390: LD_VAR 0 2
38394: PPUSH
38395: LD_VAR 0 11
38399: PPUSH
38400: LD_VAR 0 12
38404: PPUSH
38405: CALL_OW 272
38409: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38410: LD_ADDR_VAR 0 10
38414: PUSH
38415: LD_VAR 0 3
38419: PPUSH
38420: LD_VAR 0 11
38424: PPUSH
38425: LD_VAR 0 12
38429: PPUSH
38430: CALL_OW 273
38434: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38435: LD_VAR 0 9
38439: PPUSH
38440: LD_VAR 0 10
38444: PPUSH
38445: CALL_OW 488
38449: PUSH
38450: LD_VAR 0 9
38454: PUSH
38455: LD_VAR 0 10
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_VAR 0 7
38468: IN
38469: NOT
38470: AND
38471: PUSH
38472: LD_VAR 0 9
38476: PPUSH
38477: LD_VAR 0 10
38481: PPUSH
38482: CALL_OW 458
38486: NOT
38487: AND
38488: IFFALSE 38530
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38490: LD_ADDR_VAR 0 7
38494: PUSH
38495: LD_VAR 0 7
38499: PPUSH
38500: LD_VAR 0 7
38504: PUSH
38505: LD_INT 1
38507: PLUS
38508: PPUSH
38509: LD_VAR 0 9
38513: PUSH
38514: LD_VAR 0 10
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PPUSH
38523: CALL_OW 1
38527: ST_TO_ADDR
38528: GO 38544
// i := i - 1 ;
38530: LD_ADDR_VAR 0 5
38534: PUSH
38535: LD_VAR 0 5
38539: PUSH
38540: LD_INT 1
38542: MINUS
38543: ST_TO_ADDR
// end ;
38544: GO 38350
38546: POP
38547: POP
// for i in tmp do
38548: LD_ADDR_VAR 0 5
38552: PUSH
38553: LD_VAR 0 7
38557: PUSH
38558: FOR_IN
38559: IFFALSE 38597
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38561: LD_VAR 0 1
38565: PPUSH
38566: LD_VAR 0 5
38570: PUSH
38571: LD_INT 1
38573: ARRAY
38574: PPUSH
38575: LD_VAR 0 5
38579: PUSH
38580: LD_INT 2
38582: ARRAY
38583: PPUSH
38584: CALL 37539 0 3
38588: NOT
38589: IFFALSE 38595
// exit ;
38591: POP
38592: POP
38593: GO 38599
38595: GO 38558
38597: POP
38598: POP
// end ;
38599: LD_VAR 0 4
38603: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38604: LD_INT 0
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
// if not GetClass ( unit ) = class_sniper then
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 257
38622: PUSH
38623: LD_INT 5
38625: EQUAL
38626: NOT
38627: IFFALSE 38631
// exit ;
38629: GO 39019
// dist := 8 ;
38631: LD_ADDR_VAR 0 5
38635: PUSH
38636: LD_INT 8
38638: ST_TO_ADDR
// viewRange := 12 ;
38639: LD_ADDR_VAR 0 7
38643: PUSH
38644: LD_INT 12
38646: ST_TO_ADDR
// side := GetSide ( unit ) ;
38647: LD_ADDR_VAR 0 6
38651: PUSH
38652: LD_VAR 0 1
38656: PPUSH
38657: CALL_OW 255
38661: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38662: LD_INT 61
38664: PPUSH
38665: LD_VAR 0 6
38669: PPUSH
38670: CALL_OW 321
38674: PUSH
38675: LD_INT 2
38677: EQUAL
38678: IFFALSE 38688
// viewRange := 16 ;
38680: LD_ADDR_VAR 0 7
38684: PUSH
38685: LD_INT 16
38687: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38688: LD_VAR 0 1
38692: PPUSH
38693: LD_VAR 0 2
38697: PPUSH
38698: LD_VAR 0 3
38702: PPUSH
38703: CALL_OW 297
38707: PUSH
38708: LD_VAR 0 5
38712: GREATER
38713: IFFALSE 38792
// begin ComMoveXY ( unit , x , y ) ;
38715: LD_VAR 0 1
38719: PPUSH
38720: LD_VAR 0 2
38724: PPUSH
38725: LD_VAR 0 3
38729: PPUSH
38730: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38734: LD_INT 35
38736: PPUSH
38737: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38741: LD_VAR 0 1
38745: PPUSH
38746: LD_VAR 0 2
38750: PPUSH
38751: LD_VAR 0 3
38755: PPUSH
38756: CALL 75234 0 3
38760: NOT
38761: IFFALSE 38765
// exit ;
38763: GO 39019
// until GetDistUnitXY ( unit , x , y ) < dist ;
38765: LD_VAR 0 1
38769: PPUSH
38770: LD_VAR 0 2
38774: PPUSH
38775: LD_VAR 0 3
38779: PPUSH
38780: CALL_OW 297
38784: PUSH
38785: LD_VAR 0 5
38789: LESS
38790: IFFALSE 38734
// end ; ComTurnXY ( unit , x , y ) ;
38792: LD_VAR 0 1
38796: PPUSH
38797: LD_VAR 0 2
38801: PPUSH
38802: LD_VAR 0 3
38806: PPUSH
38807: CALL_OW 118
// wait ( 5 ) ;
38811: LD_INT 5
38813: PPUSH
38814: CALL_OW 67
// _d := GetDir ( unit ) ;
38818: LD_ADDR_VAR 0 10
38822: PUSH
38823: LD_VAR 0 1
38827: PPUSH
38828: CALL_OW 254
38832: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38833: LD_ADDR_VAR 0 8
38837: PUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 250
38847: PPUSH
38848: LD_VAR 0 10
38852: PPUSH
38853: LD_VAR 0 5
38857: PPUSH
38858: CALL_OW 272
38862: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38863: LD_ADDR_VAR 0 9
38867: PUSH
38868: LD_VAR 0 1
38872: PPUSH
38873: CALL_OW 251
38877: PPUSH
38878: LD_VAR 0 10
38882: PPUSH
38883: LD_VAR 0 5
38887: PPUSH
38888: CALL_OW 273
38892: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38893: LD_VAR 0 8
38897: PPUSH
38898: LD_VAR 0 9
38902: PPUSH
38903: CALL_OW 488
38907: NOT
38908: IFFALSE 38912
// exit ;
38910: GO 39019
// ComAnimCustom ( unit , 1 ) ;
38912: LD_VAR 0 1
38916: PPUSH
38917: LD_INT 1
38919: PPUSH
38920: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38924: LD_VAR 0 8
38928: PPUSH
38929: LD_VAR 0 9
38933: PPUSH
38934: LD_VAR 0 6
38938: PPUSH
38939: LD_VAR 0 7
38943: PPUSH
38944: CALL_OW 330
// repeat wait ( 1 ) ;
38948: LD_INT 1
38950: PPUSH
38951: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38955: LD_VAR 0 1
38959: PPUSH
38960: CALL_OW 316
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 314
38974: OR
38975: PUSH
38976: LD_VAR 0 1
38980: PPUSH
38981: CALL_OW 302
38985: NOT
38986: OR
38987: PUSH
38988: LD_VAR 0 1
38992: PPUSH
38993: CALL_OW 301
38997: OR
38998: IFFALSE 38948
// RemoveSeeing ( _x , _y , side ) ;
39000: LD_VAR 0 8
39004: PPUSH
39005: LD_VAR 0 9
39009: PPUSH
39010: LD_VAR 0 6
39014: PPUSH
39015: CALL_OW 331
// end ; end_of_file
39019: LD_VAR 0 4
39023: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39024: LD_INT 0
39026: PPUSH
39027: PPUSH
// if exist_mode then
39028: LD_VAR 0 2
39032: IFFALSE 39057
// unit := CreateCharacter ( prefix & ident ) else
39034: LD_ADDR_VAR 0 5
39038: PUSH
39039: LD_VAR 0 3
39043: PUSH
39044: LD_VAR 0 1
39048: STR
39049: PPUSH
39050: CALL_OW 34
39054: ST_TO_ADDR
39055: GO 39072
// unit := NewCharacter ( ident ) ;
39057: LD_ADDR_VAR 0 5
39061: PUSH
39062: LD_VAR 0 1
39066: PPUSH
39067: CALL_OW 25
39071: ST_TO_ADDR
// result := unit ;
39072: LD_ADDR_VAR 0 4
39076: PUSH
39077: LD_VAR 0 5
39081: ST_TO_ADDR
// end ;
39082: LD_VAR 0 4
39086: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39087: LD_INT 0
39089: PPUSH
39090: PPUSH
// if not side or not nation then
39091: LD_VAR 0 1
39095: NOT
39096: PUSH
39097: LD_VAR 0 2
39101: NOT
39102: OR
39103: IFFALSE 39107
// exit ;
39105: GO 39875
// case nation of nation_american :
39107: LD_VAR 0 2
39111: PUSH
39112: LD_INT 1
39114: DOUBLE
39115: EQUAL
39116: IFTRUE 39120
39118: GO 39334
39120: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39121: LD_ADDR_VAR 0 4
39125: PUSH
39126: LD_INT 35
39128: PUSH
39129: LD_INT 45
39131: PUSH
39132: LD_INT 46
39134: PUSH
39135: LD_INT 47
39137: PUSH
39138: LD_INT 82
39140: PUSH
39141: LD_INT 83
39143: PUSH
39144: LD_INT 84
39146: PUSH
39147: LD_INT 85
39149: PUSH
39150: LD_INT 86
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 6
39161: PUSH
39162: LD_INT 15
39164: PUSH
39165: LD_INT 16
39167: PUSH
39168: LD_INT 7
39170: PUSH
39171: LD_INT 12
39173: PUSH
39174: LD_INT 13
39176: PUSH
39177: LD_INT 10
39179: PUSH
39180: LD_INT 14
39182: PUSH
39183: LD_INT 20
39185: PUSH
39186: LD_INT 21
39188: PUSH
39189: LD_INT 22
39191: PUSH
39192: LD_INT 25
39194: PUSH
39195: LD_INT 32
39197: PUSH
39198: LD_INT 27
39200: PUSH
39201: LD_INT 36
39203: PUSH
39204: LD_INT 69
39206: PUSH
39207: LD_INT 39
39209: PUSH
39210: LD_INT 34
39212: PUSH
39213: LD_INT 40
39215: PUSH
39216: LD_INT 48
39218: PUSH
39219: LD_INT 49
39221: PUSH
39222: LD_INT 50
39224: PUSH
39225: LD_INT 51
39227: PUSH
39228: LD_INT 52
39230: PUSH
39231: LD_INT 53
39233: PUSH
39234: LD_INT 54
39236: PUSH
39237: LD_INT 55
39239: PUSH
39240: LD_INT 56
39242: PUSH
39243: LD_INT 57
39245: PUSH
39246: LD_INT 58
39248: PUSH
39249: LD_INT 59
39251: PUSH
39252: LD_INT 60
39254: PUSH
39255: LD_INT 61
39257: PUSH
39258: LD_INT 62
39260: PUSH
39261: LD_INT 80
39263: PUSH
39264: LD_INT 82
39266: PUSH
39267: LD_INT 83
39269: PUSH
39270: LD_INT 84
39272: PUSH
39273: LD_INT 85
39275: PUSH
39276: LD_INT 86
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: ST_TO_ADDR
39332: GO 39799
39334: LD_INT 2
39336: DOUBLE
39337: EQUAL
39338: IFTRUE 39342
39340: GO 39568
39342: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39343: LD_ADDR_VAR 0 4
39347: PUSH
39348: LD_INT 35
39350: PUSH
39351: LD_INT 45
39353: PUSH
39354: LD_INT 46
39356: PUSH
39357: LD_INT 47
39359: PUSH
39360: LD_INT 82
39362: PUSH
39363: LD_INT 83
39365: PUSH
39366: LD_INT 84
39368: PUSH
39369: LD_INT 85
39371: PUSH
39372: LD_INT 87
39374: PUSH
39375: LD_INT 70
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 11
39383: PUSH
39384: LD_INT 3
39386: PUSH
39387: LD_INT 4
39389: PUSH
39390: LD_INT 5
39392: PUSH
39393: LD_INT 6
39395: PUSH
39396: LD_INT 15
39398: PUSH
39399: LD_INT 18
39401: PUSH
39402: LD_INT 7
39404: PUSH
39405: LD_INT 17
39407: PUSH
39408: LD_INT 8
39410: PUSH
39411: LD_INT 20
39413: PUSH
39414: LD_INT 21
39416: PUSH
39417: LD_INT 22
39419: PUSH
39420: LD_INT 72
39422: PUSH
39423: LD_INT 26
39425: PUSH
39426: LD_INT 69
39428: PUSH
39429: LD_INT 39
39431: PUSH
39432: LD_INT 40
39434: PUSH
39435: LD_INT 41
39437: PUSH
39438: LD_INT 42
39440: PUSH
39441: LD_INT 43
39443: PUSH
39444: LD_INT 48
39446: PUSH
39447: LD_INT 49
39449: PUSH
39450: LD_INT 50
39452: PUSH
39453: LD_INT 51
39455: PUSH
39456: LD_INT 52
39458: PUSH
39459: LD_INT 53
39461: PUSH
39462: LD_INT 54
39464: PUSH
39465: LD_INT 55
39467: PUSH
39468: LD_INT 56
39470: PUSH
39471: LD_INT 60
39473: PUSH
39474: LD_INT 61
39476: PUSH
39477: LD_INT 62
39479: PUSH
39480: LD_INT 66
39482: PUSH
39483: LD_INT 67
39485: PUSH
39486: LD_INT 68
39488: PUSH
39489: LD_INT 81
39491: PUSH
39492: LD_INT 82
39494: PUSH
39495: LD_INT 83
39497: PUSH
39498: LD_INT 84
39500: PUSH
39501: LD_INT 85
39503: PUSH
39504: LD_INT 87
39506: PUSH
39507: LD_INT 88
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: ST_TO_ADDR
39566: GO 39799
39568: LD_INT 3
39570: DOUBLE
39571: EQUAL
39572: IFTRUE 39576
39574: GO 39798
39576: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39577: LD_ADDR_VAR 0 4
39581: PUSH
39582: LD_INT 46
39584: PUSH
39585: LD_INT 47
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: LD_INT 82
39596: PUSH
39597: LD_INT 83
39599: PUSH
39600: LD_INT 84
39602: PUSH
39603: LD_INT 85
39605: PUSH
39606: LD_INT 86
39608: PUSH
39609: LD_INT 11
39611: PUSH
39612: LD_INT 9
39614: PUSH
39615: LD_INT 20
39617: PUSH
39618: LD_INT 19
39620: PUSH
39621: LD_INT 21
39623: PUSH
39624: LD_INT 24
39626: PUSH
39627: LD_INT 22
39629: PUSH
39630: LD_INT 25
39632: PUSH
39633: LD_INT 28
39635: PUSH
39636: LD_INT 29
39638: PUSH
39639: LD_INT 30
39641: PUSH
39642: LD_INT 31
39644: PUSH
39645: LD_INT 37
39647: PUSH
39648: LD_INT 38
39650: PUSH
39651: LD_INT 32
39653: PUSH
39654: LD_INT 27
39656: PUSH
39657: LD_INT 33
39659: PUSH
39660: LD_INT 69
39662: PUSH
39663: LD_INT 39
39665: PUSH
39666: LD_INT 34
39668: PUSH
39669: LD_INT 40
39671: PUSH
39672: LD_INT 71
39674: PUSH
39675: LD_INT 23
39677: PUSH
39678: LD_INT 44
39680: PUSH
39681: LD_INT 48
39683: PUSH
39684: LD_INT 49
39686: PUSH
39687: LD_INT 50
39689: PUSH
39690: LD_INT 51
39692: PUSH
39693: LD_INT 52
39695: PUSH
39696: LD_INT 53
39698: PUSH
39699: LD_INT 54
39701: PUSH
39702: LD_INT 55
39704: PUSH
39705: LD_INT 56
39707: PUSH
39708: LD_INT 57
39710: PUSH
39711: LD_INT 58
39713: PUSH
39714: LD_INT 59
39716: PUSH
39717: LD_INT 63
39719: PUSH
39720: LD_INT 64
39722: PUSH
39723: LD_INT 65
39725: PUSH
39726: LD_INT 82
39728: PUSH
39729: LD_INT 83
39731: PUSH
39732: LD_INT 84
39734: PUSH
39735: LD_INT 85
39737: PUSH
39738: LD_INT 86
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: ST_TO_ADDR
39796: GO 39799
39798: POP
// if state > - 1 and state < 3 then
39799: LD_VAR 0 3
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: GREATER
39808: PUSH
39809: LD_VAR 0 3
39813: PUSH
39814: LD_INT 3
39816: LESS
39817: AND
39818: IFFALSE 39875
// for i in result do
39820: LD_ADDR_VAR 0 5
39824: PUSH
39825: LD_VAR 0 4
39829: PUSH
39830: FOR_IN
39831: IFFALSE 39873
// if GetTech ( i , side ) <> state then
39833: LD_VAR 0 5
39837: PPUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: CALL_OW 321
39847: PUSH
39848: LD_VAR 0 3
39852: NONEQUAL
39853: IFFALSE 39871
// result := result diff i ;
39855: LD_ADDR_VAR 0 4
39859: PUSH
39860: LD_VAR 0 4
39864: PUSH
39865: LD_VAR 0 5
39869: DIFF
39870: ST_TO_ADDR
39871: GO 39830
39873: POP
39874: POP
// end ;
39875: LD_VAR 0 4
39879: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39880: LD_INT 0
39882: PPUSH
39883: PPUSH
39884: PPUSH
// result := true ;
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_INT 1
39892: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39893: LD_ADDR_VAR 0 5
39897: PUSH
39898: LD_VAR 0 2
39902: PPUSH
39903: CALL_OW 480
39907: ST_TO_ADDR
// if not tmp then
39908: LD_VAR 0 5
39912: NOT
39913: IFFALSE 39917
// exit ;
39915: GO 39966
// for i in tmp do
39917: LD_ADDR_VAR 0 4
39921: PUSH
39922: LD_VAR 0 5
39926: PUSH
39927: FOR_IN
39928: IFFALSE 39964
// if GetTech ( i , side ) <> state_researched then
39930: LD_VAR 0 4
39934: PPUSH
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 321
39944: PUSH
39945: LD_INT 2
39947: NONEQUAL
39948: IFFALSE 39962
// begin result := false ;
39950: LD_ADDR_VAR 0 3
39954: PUSH
39955: LD_INT 0
39957: ST_TO_ADDR
// exit ;
39958: POP
39959: POP
39960: GO 39966
// end ;
39962: GO 39927
39964: POP
39965: POP
// end ;
39966: LD_VAR 0 3
39970: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39971: LD_INT 0
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39986: LD_VAR 0 1
39990: NOT
39991: PUSH
39992: LD_VAR 0 1
39996: PPUSH
39997: CALL_OW 257
40001: PUSH
40002: LD_INT 9
40004: NONEQUAL
40005: OR
40006: IFFALSE 40010
// exit ;
40008: GO 40583
// side := GetSide ( unit ) ;
40010: LD_ADDR_VAR 0 9
40014: PUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 255
40024: ST_TO_ADDR
// tech_space := tech_spacanom ;
40025: LD_ADDR_VAR 0 12
40029: PUSH
40030: LD_INT 29
40032: ST_TO_ADDR
// tech_time := tech_taurad ;
40033: LD_ADDR_VAR 0 13
40037: PUSH
40038: LD_INT 28
40040: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40041: LD_ADDR_VAR 0 11
40045: PUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: CALL_OW 310
40055: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40056: LD_VAR 0 11
40060: PPUSH
40061: CALL_OW 247
40065: PUSH
40066: LD_INT 2
40068: EQUAL
40069: IFFALSE 40073
// exit ;
40071: GO 40583
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40073: LD_ADDR_VAR 0 8
40077: PUSH
40078: LD_INT 81
40080: PUSH
40081: LD_VAR 0 9
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 3
40092: PUSH
40093: LD_INT 21
40095: PUSH
40096: LD_INT 3
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PPUSH
40111: CALL_OW 69
40115: ST_TO_ADDR
// if not tmp then
40116: LD_VAR 0 8
40120: NOT
40121: IFFALSE 40125
// exit ;
40123: GO 40583
// if in_unit then
40125: LD_VAR 0 11
40129: IFFALSE 40153
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40131: LD_ADDR_VAR 0 10
40135: PUSH
40136: LD_VAR 0 8
40140: PPUSH
40141: LD_VAR 0 11
40145: PPUSH
40146: CALL_OW 74
40150: ST_TO_ADDR
40151: GO 40173
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40153: LD_ADDR_VAR 0 10
40157: PUSH
40158: LD_VAR 0 8
40162: PPUSH
40163: LD_VAR 0 1
40167: PPUSH
40168: CALL_OW 74
40172: ST_TO_ADDR
// if not enemy then
40173: LD_VAR 0 10
40177: NOT
40178: IFFALSE 40182
// exit ;
40180: GO 40583
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40182: LD_VAR 0 11
40186: PUSH
40187: LD_VAR 0 11
40191: PPUSH
40192: LD_VAR 0 10
40196: PPUSH
40197: CALL_OW 296
40201: PUSH
40202: LD_INT 13
40204: GREATER
40205: AND
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: LD_VAR 0 10
40216: PPUSH
40217: CALL_OW 296
40221: PUSH
40222: LD_INT 12
40224: GREATER
40225: OR
40226: IFFALSE 40230
// exit ;
40228: GO 40583
// missile := [ 1 ] ;
40230: LD_ADDR_VAR 0 14
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40241: LD_VAR 0 9
40245: PPUSH
40246: LD_VAR 0 12
40250: PPUSH
40251: CALL_OW 325
40255: IFFALSE 40284
// missile := Replace ( missile , missile + 1 , 2 ) ;
40257: LD_ADDR_VAR 0 14
40261: PUSH
40262: LD_VAR 0 14
40266: PPUSH
40267: LD_VAR 0 14
40271: PUSH
40272: LD_INT 1
40274: PLUS
40275: PPUSH
40276: LD_INT 2
40278: PPUSH
40279: CALL_OW 1
40283: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40284: LD_VAR 0 9
40288: PPUSH
40289: LD_VAR 0 13
40293: PPUSH
40294: CALL_OW 325
40298: PUSH
40299: LD_VAR 0 10
40303: PPUSH
40304: CALL_OW 255
40308: PPUSH
40309: LD_VAR 0 13
40313: PPUSH
40314: CALL_OW 325
40318: NOT
40319: AND
40320: IFFALSE 40349
// missile := Replace ( missile , missile + 1 , 3 ) ;
40322: LD_ADDR_VAR 0 14
40326: PUSH
40327: LD_VAR 0 14
40331: PPUSH
40332: LD_VAR 0 14
40336: PUSH
40337: LD_INT 1
40339: PLUS
40340: PPUSH
40341: LD_INT 3
40343: PPUSH
40344: CALL_OW 1
40348: ST_TO_ADDR
// if missile < 2 then
40349: LD_VAR 0 14
40353: PUSH
40354: LD_INT 2
40356: LESS
40357: IFFALSE 40361
// exit ;
40359: GO 40583
// x := GetX ( enemy ) ;
40361: LD_ADDR_VAR 0 4
40365: PUSH
40366: LD_VAR 0 10
40370: PPUSH
40371: CALL_OW 250
40375: ST_TO_ADDR
// y := GetY ( enemy ) ;
40376: LD_ADDR_VAR 0 5
40380: PUSH
40381: LD_VAR 0 10
40385: PPUSH
40386: CALL_OW 251
40390: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40391: LD_ADDR_VAR 0 6
40395: PUSH
40396: LD_VAR 0 4
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PPUSH
40405: LD_INT 1
40407: PPUSH
40408: CALL_OW 12
40412: PLUS
40413: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40414: LD_ADDR_VAR 0 7
40418: PUSH
40419: LD_VAR 0 5
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PPUSH
40428: LD_INT 1
40430: PPUSH
40431: CALL_OW 12
40435: PLUS
40436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40437: LD_VAR 0 6
40441: PPUSH
40442: LD_VAR 0 7
40446: PPUSH
40447: CALL_OW 488
40451: NOT
40452: IFFALSE 40474
// begin _x := x ;
40454: LD_ADDR_VAR 0 6
40458: PUSH
40459: LD_VAR 0 4
40463: ST_TO_ADDR
// _y := y ;
40464: LD_ADDR_VAR 0 7
40468: PUSH
40469: LD_VAR 0 5
40473: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_INT 1
40481: PPUSH
40482: LD_VAR 0 14
40486: PPUSH
40487: CALL_OW 12
40491: ST_TO_ADDR
// case i of 1 :
40492: LD_VAR 0 3
40496: PUSH
40497: LD_INT 1
40499: DOUBLE
40500: EQUAL
40501: IFTRUE 40505
40503: GO 40522
40505: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40506: LD_VAR 0 1
40510: PPUSH
40511: LD_VAR 0 10
40515: PPUSH
40516: CALL_OW 115
40520: GO 40583
40522: LD_INT 2
40524: DOUBLE
40525: EQUAL
40526: IFTRUE 40530
40528: GO 40552
40530: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40531: LD_VAR 0 1
40535: PPUSH
40536: LD_VAR 0 6
40540: PPUSH
40541: LD_VAR 0 7
40545: PPUSH
40546: CALL_OW 153
40550: GO 40583
40552: LD_INT 3
40554: DOUBLE
40555: EQUAL
40556: IFTRUE 40560
40558: GO 40582
40560: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40561: LD_VAR 0 1
40565: PPUSH
40566: LD_VAR 0 6
40570: PPUSH
40571: LD_VAR 0 7
40575: PPUSH
40576: CALL_OW 154
40580: GO 40583
40582: POP
// end ;
40583: LD_VAR 0 2
40587: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40588: LD_INT 0
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
// if not unit or not building then
40596: LD_VAR 0 1
40600: NOT
40601: PUSH
40602: LD_VAR 0 2
40606: NOT
40607: OR
40608: IFFALSE 40612
// exit ;
40610: GO 40770
// x := GetX ( building ) ;
40612: LD_ADDR_VAR 0 5
40616: PUSH
40617: LD_VAR 0 2
40621: PPUSH
40622: CALL_OW 250
40626: ST_TO_ADDR
// y := GetY ( building ) ;
40627: LD_ADDR_VAR 0 6
40631: PUSH
40632: LD_VAR 0 2
40636: PPUSH
40637: CALL_OW 251
40641: ST_TO_ADDR
// for i = 0 to 5 do
40642: LD_ADDR_VAR 0 4
40646: PUSH
40647: DOUBLE
40648: LD_INT 0
40650: DEC
40651: ST_TO_ADDR
40652: LD_INT 5
40654: PUSH
40655: FOR_TO
40656: IFFALSE 40768
// begin _x := ShiftX ( x , i , 3 ) ;
40658: LD_ADDR_VAR 0 7
40662: PUSH
40663: LD_VAR 0 5
40667: PPUSH
40668: LD_VAR 0 4
40672: PPUSH
40673: LD_INT 3
40675: PPUSH
40676: CALL_OW 272
40680: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40681: LD_ADDR_VAR 0 8
40685: PUSH
40686: LD_VAR 0 6
40690: PPUSH
40691: LD_VAR 0 4
40695: PPUSH
40696: LD_INT 3
40698: PPUSH
40699: CALL_OW 273
40703: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40704: LD_VAR 0 7
40708: PPUSH
40709: LD_VAR 0 8
40713: PPUSH
40714: CALL_OW 488
40718: NOT
40719: IFFALSE 40723
// continue ;
40721: GO 40655
// if HexInfo ( _x , _y ) = 0 then
40723: LD_VAR 0 7
40727: PPUSH
40728: LD_VAR 0 8
40732: PPUSH
40733: CALL_OW 428
40737: PUSH
40738: LD_INT 0
40740: EQUAL
40741: IFFALSE 40766
// begin ComMoveXY ( unit , _x , _y ) ;
40743: LD_VAR 0 1
40747: PPUSH
40748: LD_VAR 0 7
40752: PPUSH
40753: LD_VAR 0 8
40757: PPUSH
40758: CALL_OW 111
// exit ;
40762: POP
40763: POP
40764: GO 40770
// end ; end ;
40766: GO 40655
40768: POP
40769: POP
// end ;
40770: LD_VAR 0 3
40774: RET
// export function ScanBase ( side , base_area ) ; begin
40775: LD_INT 0
40777: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40778: LD_ADDR_VAR 0 3
40782: PUSH
40783: LD_VAR 0 2
40787: PPUSH
40788: LD_INT 81
40790: PUSH
40791: LD_VAR 0 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PPUSH
40800: CALL_OW 70
40804: ST_TO_ADDR
// end ;
40805: LD_VAR 0 3
40809: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40810: LD_INT 0
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
// result := false ;
40816: LD_ADDR_VAR 0 2
40820: PUSH
40821: LD_INT 0
40823: ST_TO_ADDR
// side := GetSide ( unit ) ;
40824: LD_ADDR_VAR 0 3
40828: PUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 255
40838: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40839: LD_ADDR_VAR 0 4
40843: PUSH
40844: LD_VAR 0 1
40848: PPUSH
40849: CALL_OW 248
40853: ST_TO_ADDR
// case nat of 1 :
40854: LD_VAR 0 4
40858: PUSH
40859: LD_INT 1
40861: DOUBLE
40862: EQUAL
40863: IFTRUE 40867
40865: GO 40878
40867: POP
// tech := tech_lassight ; 2 :
40868: LD_ADDR_VAR 0 5
40872: PUSH
40873: LD_INT 12
40875: ST_TO_ADDR
40876: GO 40917
40878: LD_INT 2
40880: DOUBLE
40881: EQUAL
40882: IFTRUE 40886
40884: GO 40897
40886: POP
// tech := tech_mortar ; 3 :
40887: LD_ADDR_VAR 0 5
40891: PUSH
40892: LD_INT 41
40894: ST_TO_ADDR
40895: GO 40917
40897: LD_INT 3
40899: DOUBLE
40900: EQUAL
40901: IFTRUE 40905
40903: GO 40916
40905: POP
// tech := tech_bazooka ; end ;
40906: LD_ADDR_VAR 0 5
40910: PUSH
40911: LD_INT 44
40913: ST_TO_ADDR
40914: GO 40917
40916: POP
// if Researched ( side , tech ) then
40917: LD_VAR 0 3
40921: PPUSH
40922: LD_VAR 0 5
40926: PPUSH
40927: CALL_OW 325
40931: IFFALSE 40958
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40933: LD_ADDR_VAR 0 2
40937: PUSH
40938: LD_INT 5
40940: PUSH
40941: LD_INT 8
40943: PUSH
40944: LD_INT 9
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: PUSH
40952: LD_VAR 0 4
40956: ARRAY
40957: ST_TO_ADDR
// end ;
40958: LD_VAR 0 2
40962: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40963: LD_INT 0
40965: PPUSH
40966: PPUSH
40967: PPUSH
// if not mines then
40968: LD_VAR 0 2
40972: NOT
40973: IFFALSE 40977
// exit ;
40975: GO 41121
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40977: LD_ADDR_VAR 0 5
40981: PUSH
40982: LD_INT 81
40984: PUSH
40985: LD_VAR 0 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 21
40999: PUSH
41000: LD_INT 3
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PPUSH
41015: CALL_OW 69
41019: ST_TO_ADDR
// for i in mines do
41020: LD_ADDR_VAR 0 4
41024: PUSH
41025: LD_VAR 0 2
41029: PUSH
41030: FOR_IN
41031: IFFALSE 41119
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41033: LD_VAR 0 4
41037: PUSH
41038: LD_INT 1
41040: ARRAY
41041: PPUSH
41042: LD_VAR 0 4
41046: PUSH
41047: LD_INT 2
41049: ARRAY
41050: PPUSH
41051: CALL_OW 458
41055: NOT
41056: IFFALSE 41060
// continue ;
41058: GO 41030
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41060: LD_VAR 0 4
41064: PUSH
41065: LD_INT 1
41067: ARRAY
41068: PPUSH
41069: LD_VAR 0 4
41073: PUSH
41074: LD_INT 2
41076: ARRAY
41077: PPUSH
41078: CALL_OW 428
41082: PUSH
41083: LD_VAR 0 5
41087: IN
41088: IFFALSE 41117
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41090: LD_VAR 0 4
41094: PUSH
41095: LD_INT 1
41097: ARRAY
41098: PPUSH
41099: LD_VAR 0 4
41103: PUSH
41104: LD_INT 2
41106: ARRAY
41107: PPUSH
41108: LD_VAR 0 1
41112: PPUSH
41113: CALL_OW 456
// end ;
41117: GO 41030
41119: POP
41120: POP
// end ;
41121: LD_VAR 0 3
41125: RET
// export function Count ( array ) ; var i ; begin
41126: LD_INT 0
41128: PPUSH
41129: PPUSH
// result := 0 ;
41130: LD_ADDR_VAR 0 2
41134: PUSH
41135: LD_INT 0
41137: ST_TO_ADDR
// for i in array do
41138: LD_ADDR_VAR 0 3
41142: PUSH
41143: LD_VAR 0 1
41147: PUSH
41148: FOR_IN
41149: IFFALSE 41173
// if i then
41151: LD_VAR 0 3
41155: IFFALSE 41171
// result := result + 1 ;
41157: LD_ADDR_VAR 0 2
41161: PUSH
41162: LD_VAR 0 2
41166: PUSH
41167: LD_INT 1
41169: PLUS
41170: ST_TO_ADDR
41171: GO 41148
41173: POP
41174: POP
// end ;
41175: LD_VAR 0 2
41179: RET
// export function IsEmpty ( building ) ; begin
41180: LD_INT 0
41182: PPUSH
// if not building then
41183: LD_VAR 0 1
41187: NOT
41188: IFFALSE 41192
// exit ;
41190: GO 41235
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41192: LD_ADDR_VAR 0 2
41196: PUSH
41197: LD_VAR 0 1
41201: PUSH
41202: LD_INT 22
41204: PUSH
41205: LD_VAR 0 1
41209: PPUSH
41210: CALL_OW 255
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 58
41221: PUSH
41222: EMPTY
41223: LIST
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PPUSH
41229: CALL_OW 69
41233: IN
41234: ST_TO_ADDR
// end ;
41235: LD_VAR 0 2
41239: RET
// export function IsNotFull ( building ) ; var places ; begin
41240: LD_INT 0
41242: PPUSH
41243: PPUSH
// if not building then
41244: LD_VAR 0 1
41248: NOT
41249: IFFALSE 41253
// exit ;
41251: GO 41424
// result := false ;
41253: LD_ADDR_VAR 0 2
41257: PUSH
41258: LD_INT 0
41260: ST_TO_ADDR
// places := 0 ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_INT 0
41268: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 266
41278: PUSH
41279: LD_INT 0
41281: DOUBLE
41282: EQUAL
41283: IFTRUE 41341
41285: LD_INT 1
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41341
41291: LD_INT 6
41293: DOUBLE
41294: EQUAL
41295: IFTRUE 41341
41297: LD_INT 7
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41341
41303: LD_INT 8
41305: DOUBLE
41306: EQUAL
41307: IFTRUE 41341
41309: LD_INT 4
41311: DOUBLE
41312: EQUAL
41313: IFTRUE 41341
41315: LD_INT 5
41317: DOUBLE
41318: EQUAL
41319: IFTRUE 41341
41321: LD_INT 2
41323: DOUBLE
41324: EQUAL
41325: IFTRUE 41341
41327: LD_INT 3
41329: DOUBLE
41330: EQUAL
41331: IFTRUE 41341
41333: LD_INT 35
41335: DOUBLE
41336: EQUAL
41337: IFTRUE 41341
41339: GO 41352
41341: POP
// places := 6 ; b_bunker , b_breastwork :
41342: LD_ADDR_VAR 0 3
41346: PUSH
41347: LD_INT 6
41349: ST_TO_ADDR
41350: GO 41397
41352: LD_INT 32
41354: DOUBLE
41355: EQUAL
41356: IFTRUE 41366
41358: LD_INT 31
41360: DOUBLE
41361: EQUAL
41362: IFTRUE 41366
41364: GO 41377
41366: POP
// places := 1 ; b_control_tower :
41367: LD_ADDR_VAR 0 3
41371: PUSH
41372: LD_INT 1
41374: ST_TO_ADDR
41375: GO 41397
41377: LD_INT 36
41379: DOUBLE
41380: EQUAL
41381: IFTRUE 41385
41383: GO 41396
41385: POP
// places := 3 ; end ;
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_INT 3
41393: ST_TO_ADDR
41394: GO 41397
41396: POP
// if places then
41397: LD_VAR 0 3
41401: IFFALSE 41424
// result := UnitsInside ( building ) < places ;
41403: LD_ADDR_VAR 0 2
41407: PUSH
41408: LD_VAR 0 1
41412: PPUSH
41413: CALL_OW 313
41417: PUSH
41418: LD_VAR 0 3
41422: LESS
41423: ST_TO_ADDR
// end ;
41424: LD_VAR 0 2
41428: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41429: LD_INT 0
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
// tmp := [ ] ;
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: EMPTY
41441: ST_TO_ADDR
// list := [ ] ;
41442: LD_ADDR_VAR 0 5
41446: PUSH
41447: EMPTY
41448: ST_TO_ADDR
// for i = 16 to 25 do
41449: LD_ADDR_VAR 0 4
41453: PUSH
41454: DOUBLE
41455: LD_INT 16
41457: DEC
41458: ST_TO_ADDR
41459: LD_INT 25
41461: PUSH
41462: FOR_TO
41463: IFFALSE 41536
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41465: LD_ADDR_VAR 0 3
41469: PUSH
41470: LD_VAR 0 3
41474: PUSH
41475: LD_INT 22
41477: PUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 255
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 91
41494: PUSH
41495: LD_VAR 0 1
41499: PUSH
41500: LD_INT 6
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 30
41510: PUSH
41511: LD_VAR 0 4
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: LIST
41524: PUSH
41525: EMPTY
41526: LIST
41527: PPUSH
41528: CALL_OW 69
41532: ADD
41533: ST_TO_ADDR
41534: GO 41462
41536: POP
41537: POP
// for i = 1 to tmp do
41538: LD_ADDR_VAR 0 4
41542: PUSH
41543: DOUBLE
41544: LD_INT 1
41546: DEC
41547: ST_TO_ADDR
41548: LD_VAR 0 3
41552: PUSH
41553: FOR_TO
41554: IFFALSE 41642
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41556: LD_ADDR_VAR 0 5
41560: PUSH
41561: LD_VAR 0 5
41565: PUSH
41566: LD_VAR 0 3
41570: PUSH
41571: LD_VAR 0 4
41575: ARRAY
41576: PPUSH
41577: CALL_OW 266
41581: PUSH
41582: LD_VAR 0 3
41586: PUSH
41587: LD_VAR 0 4
41591: ARRAY
41592: PPUSH
41593: CALL_OW 250
41597: PUSH
41598: LD_VAR 0 3
41602: PUSH
41603: LD_VAR 0 4
41607: ARRAY
41608: PPUSH
41609: CALL_OW 251
41613: PUSH
41614: LD_VAR 0 3
41618: PUSH
41619: LD_VAR 0 4
41623: ARRAY
41624: PPUSH
41625: CALL_OW 254
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: PUSH
41636: EMPTY
41637: LIST
41638: ADD
41639: ST_TO_ADDR
41640: GO 41553
41642: POP
41643: POP
// result := list ;
41644: LD_ADDR_VAR 0 2
41648: PUSH
41649: LD_VAR 0 5
41653: ST_TO_ADDR
// end ;
41654: LD_VAR 0 2
41658: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41659: LD_INT 0
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
// if not factory then
41668: LD_VAR 0 1
41672: NOT
41673: IFFALSE 41677
// exit ;
41675: GO 42270
// if control = control_apeman then
41677: LD_VAR 0 4
41681: PUSH
41682: LD_INT 5
41684: EQUAL
41685: IFFALSE 41794
// begin tmp := UnitsInside ( factory ) ;
41687: LD_ADDR_VAR 0 8
41691: PUSH
41692: LD_VAR 0 1
41696: PPUSH
41697: CALL_OW 313
41701: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41702: LD_VAR 0 8
41706: PPUSH
41707: LD_INT 25
41709: PUSH
41710: LD_INT 12
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PPUSH
41717: CALL_OW 72
41721: NOT
41722: IFFALSE 41732
// control := control_manual ;
41724: LD_ADDR_VAR 0 4
41728: PUSH
41729: LD_INT 1
41731: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41732: LD_ADDR_VAR 0 8
41736: PUSH
41737: LD_VAR 0 1
41741: PPUSH
41742: CALL 41429 0 1
41746: ST_TO_ADDR
// if tmp then
41747: LD_VAR 0 8
41751: IFFALSE 41794
// begin for i in tmp do
41753: LD_ADDR_VAR 0 7
41757: PUSH
41758: LD_VAR 0 8
41762: PUSH
41763: FOR_IN
41764: IFFALSE 41792
// if i [ 1 ] = b_ext_radio then
41766: LD_VAR 0 7
41770: PUSH
41771: LD_INT 1
41773: ARRAY
41774: PUSH
41775: LD_INT 22
41777: EQUAL
41778: IFFALSE 41790
// begin control := control_remote ;
41780: LD_ADDR_VAR 0 4
41784: PUSH
41785: LD_INT 2
41787: ST_TO_ADDR
// break ;
41788: GO 41792
// end ;
41790: GO 41763
41792: POP
41793: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41794: LD_VAR 0 1
41798: PPUSH
41799: LD_VAR 0 2
41803: PPUSH
41804: LD_VAR 0 3
41808: PPUSH
41809: LD_VAR 0 4
41813: PPUSH
41814: LD_VAR 0 5
41818: PPUSH
41819: CALL_OW 448
41823: IFFALSE 41858
// begin result := [ chassis , engine , control , weapon ] ;
41825: LD_ADDR_VAR 0 6
41829: PUSH
41830: LD_VAR 0 2
41834: PUSH
41835: LD_VAR 0 3
41839: PUSH
41840: LD_VAR 0 4
41844: PUSH
41845: LD_VAR 0 5
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: ST_TO_ADDR
// exit ;
41856: GO 42270
// end ; _chassis := AvailableChassisList ( factory ) ;
41858: LD_ADDR_VAR 0 9
41862: PUSH
41863: LD_VAR 0 1
41867: PPUSH
41868: CALL_OW 475
41872: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41873: LD_ADDR_VAR 0 11
41877: PUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 476
41887: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41888: LD_ADDR_VAR 0 12
41892: PUSH
41893: LD_VAR 0 1
41897: PPUSH
41898: CALL_OW 477
41902: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41903: LD_ADDR_VAR 0 10
41907: PUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: CALL_OW 478
41917: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41918: LD_VAR 0 9
41922: NOT
41923: PUSH
41924: LD_VAR 0 11
41928: NOT
41929: OR
41930: PUSH
41931: LD_VAR 0 12
41935: NOT
41936: OR
41937: PUSH
41938: LD_VAR 0 10
41942: NOT
41943: OR
41944: IFFALSE 41979
// begin result := [ chassis , engine , control , weapon ] ;
41946: LD_ADDR_VAR 0 6
41950: PUSH
41951: LD_VAR 0 2
41955: PUSH
41956: LD_VAR 0 3
41960: PUSH
41961: LD_VAR 0 4
41965: PUSH
41966: LD_VAR 0 5
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: ST_TO_ADDR
// exit ;
41977: GO 42270
// end ; if not chassis in _chassis then
41979: LD_VAR 0 2
41983: PUSH
41984: LD_VAR 0 9
41988: IN
41989: NOT
41990: IFFALSE 42016
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41992: LD_ADDR_VAR 0 2
41996: PUSH
41997: LD_VAR 0 9
42001: PUSH
42002: LD_INT 1
42004: PPUSH
42005: LD_VAR 0 9
42009: PPUSH
42010: CALL_OW 12
42014: ARRAY
42015: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42016: LD_VAR 0 2
42020: PPUSH
42021: LD_VAR 0 3
42025: PPUSH
42026: CALL 42275 0 2
42030: NOT
42031: IFFALSE 42090
// repeat engine := _engine [ 1 ] ;
42033: LD_ADDR_VAR 0 3
42037: PUSH
42038: LD_VAR 0 11
42042: PUSH
42043: LD_INT 1
42045: ARRAY
42046: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42047: LD_ADDR_VAR 0 11
42051: PUSH
42052: LD_VAR 0 11
42056: PPUSH
42057: LD_INT 1
42059: PPUSH
42060: CALL_OW 3
42064: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42065: LD_VAR 0 2
42069: PPUSH
42070: LD_VAR 0 3
42074: PPUSH
42075: CALL 42275 0 2
42079: PUSH
42080: LD_VAR 0 11
42084: PUSH
42085: EMPTY
42086: EQUAL
42087: OR
42088: IFFALSE 42033
// if not control in _control then
42090: LD_VAR 0 4
42094: PUSH
42095: LD_VAR 0 12
42099: IN
42100: NOT
42101: IFFALSE 42127
// control := _control [ rand ( 1 , _control ) ] ;
42103: LD_ADDR_VAR 0 4
42107: PUSH
42108: LD_VAR 0 12
42112: PUSH
42113: LD_INT 1
42115: PPUSH
42116: LD_VAR 0 12
42120: PPUSH
42121: CALL_OW 12
42125: ARRAY
42126: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42127: LD_VAR 0 2
42131: PPUSH
42132: LD_VAR 0 5
42136: PPUSH
42137: CALL 42495 0 2
42141: NOT
42142: IFFALSE 42201
// repeat weapon := _weapon [ 1 ] ;
42144: LD_ADDR_VAR 0 5
42148: PUSH
42149: LD_VAR 0 10
42153: PUSH
42154: LD_INT 1
42156: ARRAY
42157: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42158: LD_ADDR_VAR 0 10
42162: PUSH
42163: LD_VAR 0 10
42167: PPUSH
42168: LD_INT 1
42170: PPUSH
42171: CALL_OW 3
42175: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42176: LD_VAR 0 2
42180: PPUSH
42181: LD_VAR 0 5
42185: PPUSH
42186: CALL 42495 0 2
42190: PUSH
42191: LD_VAR 0 10
42195: PUSH
42196: EMPTY
42197: EQUAL
42198: OR
42199: IFFALSE 42144
// result := [ ] ;
42201: LD_ADDR_VAR 0 6
42205: PUSH
42206: EMPTY
42207: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42208: LD_VAR 0 1
42212: PPUSH
42213: LD_VAR 0 2
42217: PPUSH
42218: LD_VAR 0 3
42222: PPUSH
42223: LD_VAR 0 4
42227: PPUSH
42228: LD_VAR 0 5
42232: PPUSH
42233: CALL_OW 448
42237: IFFALSE 42270
// result := [ chassis , engine , control , weapon ] ;
42239: LD_ADDR_VAR 0 6
42243: PUSH
42244: LD_VAR 0 2
42248: PUSH
42249: LD_VAR 0 3
42253: PUSH
42254: LD_VAR 0 4
42258: PUSH
42259: LD_VAR 0 5
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// end ;
42270: LD_VAR 0 6
42274: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42275: LD_INT 0
42277: PPUSH
// if not chassis or not engine then
42278: LD_VAR 0 1
42282: NOT
42283: PUSH
42284: LD_VAR 0 2
42288: NOT
42289: OR
42290: IFFALSE 42294
// exit ;
42292: GO 42490
// case engine of engine_solar :
42294: LD_VAR 0 2
42298: PUSH
42299: LD_INT 2
42301: DOUBLE
42302: EQUAL
42303: IFTRUE 42307
42305: GO 42345
42307: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42308: LD_ADDR_VAR 0 3
42312: PUSH
42313: LD_INT 11
42315: PUSH
42316: LD_INT 12
42318: PUSH
42319: LD_INT 13
42321: PUSH
42322: LD_INT 14
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: LD_INT 3
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: ST_TO_ADDR
42343: GO 42474
42345: LD_INT 1
42347: DOUBLE
42348: EQUAL
42349: IFTRUE 42353
42351: GO 42415
42353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42354: LD_ADDR_VAR 0 3
42358: PUSH
42359: LD_INT 11
42361: PUSH
42362: LD_INT 12
42364: PUSH
42365: LD_INT 13
42367: PUSH
42368: LD_INT 14
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 3
42379: PUSH
42380: LD_INT 4
42382: PUSH
42383: LD_INT 5
42385: PUSH
42386: LD_INT 21
42388: PUSH
42389: LD_INT 23
42391: PUSH
42392: LD_INT 22
42394: PUSH
42395: LD_INT 24
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: ST_TO_ADDR
42413: GO 42474
42415: LD_INT 3
42417: DOUBLE
42418: EQUAL
42419: IFTRUE 42423
42421: GO 42473
42423: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42424: LD_ADDR_VAR 0 3
42428: PUSH
42429: LD_INT 13
42431: PUSH
42432: LD_INT 14
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: LD_INT 3
42440: PUSH
42441: LD_INT 4
42443: PUSH
42444: LD_INT 5
42446: PUSH
42447: LD_INT 21
42449: PUSH
42450: LD_INT 22
42452: PUSH
42453: LD_INT 23
42455: PUSH
42456: LD_INT 24
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: ST_TO_ADDR
42471: GO 42474
42473: POP
// result := ( chassis in result ) ;
42474: LD_ADDR_VAR 0 3
42478: PUSH
42479: LD_VAR 0 1
42483: PUSH
42484: LD_VAR 0 3
42488: IN
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 3
42494: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42495: LD_INT 0
42497: PPUSH
// if not chassis or not weapon then
42498: LD_VAR 0 1
42502: NOT
42503: PUSH
42504: LD_VAR 0 2
42508: NOT
42509: OR
42510: IFFALSE 42514
// exit ;
42512: GO 43576
// case weapon of us_machine_gun :
42514: LD_VAR 0 2
42518: PUSH
42519: LD_INT 2
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42527
42525: GO 42557
42527: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42528: LD_ADDR_VAR 0 3
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 3
42541: PUSH
42542: LD_INT 4
42544: PUSH
42545: LD_INT 5
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: ST_TO_ADDR
42555: GO 43560
42557: LD_INT 3
42559: DOUBLE
42560: EQUAL
42561: IFTRUE 42565
42563: GO 42595
42565: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42566: LD_ADDR_VAR 0 3
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 3
42579: PUSH
42580: LD_INT 4
42582: PUSH
42583: LD_INT 5
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: ST_TO_ADDR
42593: GO 43560
42595: LD_INT 11
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42603
42601: GO 42633
42603: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42604: LD_ADDR_VAR 0 3
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: LD_INT 4
42620: PUSH
42621: LD_INT 5
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
42631: GO 43560
42633: LD_INT 4
42635: DOUBLE
42636: EQUAL
42637: IFTRUE 42641
42639: GO 42667
42641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42642: LD_ADDR_VAR 0 3
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: LD_INT 4
42655: PUSH
42656: LD_INT 5
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: ST_TO_ADDR
42665: GO 43560
42667: LD_INT 5
42669: DOUBLE
42670: EQUAL
42671: IFTRUE 42675
42673: GO 42701
42675: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42676: LD_ADDR_VAR 0 3
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: LD_INT 4
42689: PUSH
42690: LD_INT 5
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: ST_TO_ADDR
42699: GO 43560
42701: LD_INT 9
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42709
42707: GO 42735
42709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42710: LD_ADDR_VAR 0 3
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: LD_INT 3
42720: PUSH
42721: LD_INT 4
42723: PUSH
42724: LD_INT 5
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: ST_TO_ADDR
42733: GO 43560
42735: LD_INT 7
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42743
42741: GO 42769
42743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42744: LD_ADDR_VAR 0 3
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: LD_INT 3
42754: PUSH
42755: LD_INT 4
42757: PUSH
42758: LD_INT 5
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: ST_TO_ADDR
42767: GO 43560
42769: LD_INT 12
42771: DOUBLE
42772: EQUAL
42773: IFTRUE 42777
42775: GO 42803
42777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42778: LD_ADDR_VAR 0 3
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: LD_INT 4
42791: PUSH
42792: LD_INT 5
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
42801: GO 43560
42803: LD_INT 13
42805: DOUBLE
42806: EQUAL
42807: IFTRUE 42811
42809: GO 42837
42811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42812: LD_ADDR_VAR 0 3
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: LD_INT 4
42825: PUSH
42826: LD_INT 5
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: ST_TO_ADDR
42835: GO 43560
42837: LD_INT 14
42839: DOUBLE
42840: EQUAL
42841: IFTRUE 42845
42843: GO 42863
42845: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42846: LD_ADDR_VAR 0 3
42850: PUSH
42851: LD_INT 4
42853: PUSH
42854: LD_INT 5
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: ST_TO_ADDR
42861: GO 43560
42863: LD_INT 6
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42871
42869: GO 42889
42871: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_INT 4
42879: PUSH
42880: LD_INT 5
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: ST_TO_ADDR
42887: GO 43560
42889: LD_INT 10
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42897
42895: GO 42915
42897: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42898: LD_ADDR_VAR 0 3
42902: PUSH
42903: LD_INT 4
42905: PUSH
42906: LD_INT 5
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: ST_TO_ADDR
42913: GO 43560
42915: LD_INT 22
42917: DOUBLE
42918: EQUAL
42919: IFTRUE 42923
42921: GO 42949
42923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42924: LD_ADDR_VAR 0 3
42928: PUSH
42929: LD_INT 11
42931: PUSH
42932: LD_INT 12
42934: PUSH
42935: LD_INT 13
42937: PUSH
42938: LD_INT 14
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
42947: GO 43560
42949: LD_INT 23
42951: DOUBLE
42952: EQUAL
42953: IFTRUE 42957
42955: GO 42983
42957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42958: LD_ADDR_VAR 0 3
42962: PUSH
42963: LD_INT 11
42965: PUSH
42966: LD_INT 12
42968: PUSH
42969: LD_INT 13
42971: PUSH
42972: LD_INT 14
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
42981: GO 43560
42983: LD_INT 24
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 42991
42989: GO 43017
42991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: LD_INT 11
42999: PUSH
43000: LD_INT 12
43002: PUSH
43003: LD_INT 13
43005: PUSH
43006: LD_INT 14
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: ST_TO_ADDR
43015: GO 43560
43017: LD_INT 30
43019: DOUBLE
43020: EQUAL
43021: IFTRUE 43025
43023: GO 43051
43025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43026: LD_ADDR_VAR 0 3
43030: PUSH
43031: LD_INT 11
43033: PUSH
43034: LD_INT 12
43036: PUSH
43037: LD_INT 13
43039: PUSH
43040: LD_INT 14
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: ST_TO_ADDR
43049: GO 43560
43051: LD_INT 25
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43059
43057: GO 43077
43059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43060: LD_ADDR_VAR 0 3
43064: PUSH
43065: LD_INT 13
43067: PUSH
43068: LD_INT 14
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: ST_TO_ADDR
43075: GO 43560
43077: LD_INT 27
43079: DOUBLE
43080: EQUAL
43081: IFTRUE 43085
43083: GO 43103
43085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_INT 13
43093: PUSH
43094: LD_INT 14
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: ST_TO_ADDR
43101: GO 43560
43103: LD_EXP 50
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43113
43111: GO 43139
43113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43114: LD_ADDR_VAR 0 3
43118: PUSH
43119: LD_INT 11
43121: PUSH
43122: LD_INT 12
43124: PUSH
43125: LD_INT 13
43127: PUSH
43128: LD_INT 14
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: ST_TO_ADDR
43137: GO 43560
43139: LD_INT 28
43141: DOUBLE
43142: EQUAL
43143: IFTRUE 43147
43145: GO 43165
43147: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43148: LD_ADDR_VAR 0 3
43152: PUSH
43153: LD_INT 13
43155: PUSH
43156: LD_INT 14
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: ST_TO_ADDR
43163: GO 43560
43165: LD_INT 29
43167: DOUBLE
43168: EQUAL
43169: IFTRUE 43173
43171: GO 43191
43173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43174: LD_ADDR_VAR 0 3
43178: PUSH
43179: LD_INT 13
43181: PUSH
43182: LD_INT 14
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: ST_TO_ADDR
43189: GO 43560
43191: LD_INT 31
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43199
43197: GO 43217
43199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43200: LD_ADDR_VAR 0 3
43204: PUSH
43205: LD_INT 13
43207: PUSH
43208: LD_INT 14
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: ST_TO_ADDR
43215: GO 43560
43217: LD_INT 26
43219: DOUBLE
43220: EQUAL
43221: IFTRUE 43225
43223: GO 43243
43225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43226: LD_ADDR_VAR 0 3
43230: PUSH
43231: LD_INT 13
43233: PUSH
43234: LD_INT 14
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: ST_TO_ADDR
43241: GO 43560
43243: LD_INT 42
43245: DOUBLE
43246: EQUAL
43247: IFTRUE 43251
43249: GO 43277
43251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43252: LD_ADDR_VAR 0 3
43256: PUSH
43257: LD_INT 21
43259: PUSH
43260: LD_INT 22
43262: PUSH
43263: LD_INT 23
43265: PUSH
43266: LD_INT 24
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: ST_TO_ADDR
43275: GO 43560
43277: LD_INT 43
43279: DOUBLE
43280: EQUAL
43281: IFTRUE 43285
43283: GO 43311
43285: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43286: LD_ADDR_VAR 0 3
43290: PUSH
43291: LD_INT 21
43293: PUSH
43294: LD_INT 22
43296: PUSH
43297: LD_INT 23
43299: PUSH
43300: LD_INT 24
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: ST_TO_ADDR
43309: GO 43560
43311: LD_INT 44
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43319
43317: GO 43345
43319: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43320: LD_ADDR_VAR 0 3
43324: PUSH
43325: LD_INT 21
43327: PUSH
43328: LD_INT 22
43330: PUSH
43331: LD_INT 23
43333: PUSH
43334: LD_INT 24
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: ST_TO_ADDR
43343: GO 43560
43345: LD_INT 45
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43379
43353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43354: LD_ADDR_VAR 0 3
43358: PUSH
43359: LD_INT 21
43361: PUSH
43362: LD_INT 22
43364: PUSH
43365: LD_INT 23
43367: PUSH
43368: LD_INT 24
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: ST_TO_ADDR
43377: GO 43560
43379: LD_INT 49
43381: DOUBLE
43382: EQUAL
43383: IFTRUE 43387
43385: GO 43413
43387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: LD_INT 21
43395: PUSH
43396: LD_INT 22
43398: PUSH
43399: LD_INT 23
43401: PUSH
43402: LD_INT 24
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
43411: GO 43560
43413: LD_INT 51
43415: DOUBLE
43416: EQUAL
43417: IFTRUE 43421
43419: GO 43447
43421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43422: LD_ADDR_VAR 0 3
43426: PUSH
43427: LD_INT 21
43429: PUSH
43430: LD_INT 22
43432: PUSH
43433: LD_INT 23
43435: PUSH
43436: LD_INT 24
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
43445: GO 43560
43447: LD_INT 52
43449: DOUBLE
43450: EQUAL
43451: IFTRUE 43455
43453: GO 43481
43455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43456: LD_ADDR_VAR 0 3
43460: PUSH
43461: LD_INT 21
43463: PUSH
43464: LD_INT 22
43466: PUSH
43467: LD_INT 23
43469: PUSH
43470: LD_INT 24
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: ST_TO_ADDR
43479: GO 43560
43481: LD_INT 53
43483: DOUBLE
43484: EQUAL
43485: IFTRUE 43489
43487: GO 43507
43489: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43490: LD_ADDR_VAR 0 3
43494: PUSH
43495: LD_INT 23
43497: PUSH
43498: LD_INT 24
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: ST_TO_ADDR
43505: GO 43560
43507: LD_INT 46
43509: DOUBLE
43510: EQUAL
43511: IFTRUE 43515
43513: GO 43533
43515: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43516: LD_ADDR_VAR 0 3
43520: PUSH
43521: LD_INT 23
43523: PUSH
43524: LD_INT 24
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: ST_TO_ADDR
43531: GO 43560
43533: LD_INT 47
43535: DOUBLE
43536: EQUAL
43537: IFTRUE 43541
43539: GO 43559
43541: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43542: LD_ADDR_VAR 0 3
43546: PUSH
43547: LD_INT 23
43549: PUSH
43550: LD_INT 24
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: ST_TO_ADDR
43557: GO 43560
43559: POP
// result := ( chassis in result ) ;
43560: LD_ADDR_VAR 0 3
43564: PUSH
43565: LD_VAR 0 1
43569: PUSH
43570: LD_VAR 0 3
43574: IN
43575: ST_TO_ADDR
// end ;
43576: LD_VAR 0 3
43580: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43581: LD_INT 0
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
// result := array ;
43590: LD_ADDR_VAR 0 5
43594: PUSH
43595: LD_VAR 0 1
43599: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43600: LD_VAR 0 1
43604: NOT
43605: PUSH
43606: LD_VAR 0 2
43610: NOT
43611: OR
43612: PUSH
43613: LD_VAR 0 3
43617: NOT
43618: OR
43619: PUSH
43620: LD_VAR 0 2
43624: PUSH
43625: LD_VAR 0 1
43629: GREATER
43630: OR
43631: PUSH
43632: LD_VAR 0 3
43636: PUSH
43637: LD_VAR 0 1
43641: GREATER
43642: OR
43643: IFFALSE 43647
// exit ;
43645: GO 43943
// if direction then
43647: LD_VAR 0 4
43651: IFFALSE 43715
// begin d := 1 ;
43653: LD_ADDR_VAR 0 9
43657: PUSH
43658: LD_INT 1
43660: ST_TO_ADDR
// if i_from > i_to then
43661: LD_VAR 0 2
43665: PUSH
43666: LD_VAR 0 3
43670: GREATER
43671: IFFALSE 43697
// length := ( array - i_from ) + i_to else
43673: LD_ADDR_VAR 0 11
43677: PUSH
43678: LD_VAR 0 1
43682: PUSH
43683: LD_VAR 0 2
43687: MINUS
43688: PUSH
43689: LD_VAR 0 3
43693: PLUS
43694: ST_TO_ADDR
43695: GO 43713
// length := i_to - i_from ;
43697: LD_ADDR_VAR 0 11
43701: PUSH
43702: LD_VAR 0 3
43706: PUSH
43707: LD_VAR 0 2
43711: MINUS
43712: ST_TO_ADDR
// end else
43713: GO 43776
// begin d := - 1 ;
43715: LD_ADDR_VAR 0 9
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: ST_TO_ADDR
// if i_from > i_to then
43724: LD_VAR 0 2
43728: PUSH
43729: LD_VAR 0 3
43733: GREATER
43734: IFFALSE 43754
// length := i_from - i_to else
43736: LD_ADDR_VAR 0 11
43740: PUSH
43741: LD_VAR 0 2
43745: PUSH
43746: LD_VAR 0 3
43750: MINUS
43751: ST_TO_ADDR
43752: GO 43776
// length := ( array - i_to ) + i_from ;
43754: LD_ADDR_VAR 0 11
43758: PUSH
43759: LD_VAR 0 1
43763: PUSH
43764: LD_VAR 0 3
43768: MINUS
43769: PUSH
43770: LD_VAR 0 2
43774: PLUS
43775: ST_TO_ADDR
// end ; if not length then
43776: LD_VAR 0 11
43780: NOT
43781: IFFALSE 43785
// exit ;
43783: GO 43943
// tmp := array ;
43785: LD_ADDR_VAR 0 10
43789: PUSH
43790: LD_VAR 0 1
43794: ST_TO_ADDR
// for i = 1 to length do
43795: LD_ADDR_VAR 0 6
43799: PUSH
43800: DOUBLE
43801: LD_INT 1
43803: DEC
43804: ST_TO_ADDR
43805: LD_VAR 0 11
43809: PUSH
43810: FOR_TO
43811: IFFALSE 43931
// begin for j = 1 to array do
43813: LD_ADDR_VAR 0 7
43817: PUSH
43818: DOUBLE
43819: LD_INT 1
43821: DEC
43822: ST_TO_ADDR
43823: LD_VAR 0 1
43827: PUSH
43828: FOR_TO
43829: IFFALSE 43917
// begin k := j + d ;
43831: LD_ADDR_VAR 0 8
43835: PUSH
43836: LD_VAR 0 7
43840: PUSH
43841: LD_VAR 0 9
43845: PLUS
43846: ST_TO_ADDR
// if k > array then
43847: LD_VAR 0 8
43851: PUSH
43852: LD_VAR 0 1
43856: GREATER
43857: IFFALSE 43867
// k := 1 ;
43859: LD_ADDR_VAR 0 8
43863: PUSH
43864: LD_INT 1
43866: ST_TO_ADDR
// if not k then
43867: LD_VAR 0 8
43871: NOT
43872: IFFALSE 43884
// k := array ;
43874: LD_ADDR_VAR 0 8
43878: PUSH
43879: LD_VAR 0 1
43883: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43884: LD_ADDR_VAR 0 10
43888: PUSH
43889: LD_VAR 0 10
43893: PPUSH
43894: LD_VAR 0 8
43898: PPUSH
43899: LD_VAR 0 1
43903: PUSH
43904: LD_VAR 0 7
43908: ARRAY
43909: PPUSH
43910: CALL_OW 1
43914: ST_TO_ADDR
// end ;
43915: GO 43828
43917: POP
43918: POP
// array := tmp ;
43919: LD_ADDR_VAR 0 1
43923: PUSH
43924: LD_VAR 0 10
43928: ST_TO_ADDR
// end ;
43929: GO 43810
43931: POP
43932: POP
// result := array ;
43933: LD_ADDR_VAR 0 5
43937: PUSH
43938: LD_VAR 0 1
43942: ST_TO_ADDR
// end ;
43943: LD_VAR 0 5
43947: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43948: LD_INT 0
43950: PPUSH
43951: PPUSH
// result := 0 ;
43952: LD_ADDR_VAR 0 3
43956: PUSH
43957: LD_INT 0
43959: ST_TO_ADDR
// if not array or not value in array then
43960: LD_VAR 0 1
43964: NOT
43965: PUSH
43966: LD_VAR 0 2
43970: PUSH
43971: LD_VAR 0 1
43975: IN
43976: NOT
43977: OR
43978: IFFALSE 43982
// exit ;
43980: GO 44036
// for i = 1 to array do
43982: LD_ADDR_VAR 0 4
43986: PUSH
43987: DOUBLE
43988: LD_INT 1
43990: DEC
43991: ST_TO_ADDR
43992: LD_VAR 0 1
43996: PUSH
43997: FOR_TO
43998: IFFALSE 44034
// if value = array [ i ] then
44000: LD_VAR 0 2
44004: PUSH
44005: LD_VAR 0 1
44009: PUSH
44010: LD_VAR 0 4
44014: ARRAY
44015: EQUAL
44016: IFFALSE 44032
// begin result := i ;
44018: LD_ADDR_VAR 0 3
44022: PUSH
44023: LD_VAR 0 4
44027: ST_TO_ADDR
// exit ;
44028: POP
44029: POP
44030: GO 44036
// end ;
44032: GO 43997
44034: POP
44035: POP
// end ;
44036: LD_VAR 0 3
44040: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44041: LD_INT 0
44043: PPUSH
// vc_chassis := chassis ;
44044: LD_ADDR_OWVAR 37
44048: PUSH
44049: LD_VAR 0 1
44053: ST_TO_ADDR
// vc_engine := engine ;
44054: LD_ADDR_OWVAR 39
44058: PUSH
44059: LD_VAR 0 2
44063: ST_TO_ADDR
// vc_control := control ;
44064: LD_ADDR_OWVAR 38
44068: PUSH
44069: LD_VAR 0 3
44073: ST_TO_ADDR
// vc_weapon := weapon ;
44074: LD_ADDR_OWVAR 40
44078: PUSH
44079: LD_VAR 0 4
44083: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44084: LD_ADDR_OWVAR 41
44088: PUSH
44089: LD_VAR 0 5
44093: ST_TO_ADDR
// end ;
44094: LD_VAR 0 6
44098: RET
// export function WantPlant ( unit ) ; var task ; begin
44099: LD_INT 0
44101: PPUSH
44102: PPUSH
// result := false ;
44103: LD_ADDR_VAR 0 2
44107: PUSH
44108: LD_INT 0
44110: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44111: LD_ADDR_VAR 0 3
44115: PUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: CALL_OW 437
44125: ST_TO_ADDR
// if task then
44126: LD_VAR 0 3
44130: IFFALSE 44158
// if task [ 1 ] [ 1 ] = p then
44132: LD_VAR 0 3
44136: PUSH
44137: LD_INT 1
44139: ARRAY
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: PUSH
44145: LD_STRING p
44147: EQUAL
44148: IFFALSE 44158
// result := true ;
44150: LD_ADDR_VAR 0 2
44154: PUSH
44155: LD_INT 1
44157: ST_TO_ADDR
// end ;
44158: LD_VAR 0 2
44162: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44163: LD_INT 0
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
// if pos < 1 then
44169: LD_VAR 0 2
44173: PUSH
44174: LD_INT 1
44176: LESS
44177: IFFALSE 44181
// exit ;
44179: GO 44484
// if pos = 1 then
44181: LD_VAR 0 2
44185: PUSH
44186: LD_INT 1
44188: EQUAL
44189: IFFALSE 44222
// result := Replace ( arr , pos [ 1 ] , value ) else
44191: LD_ADDR_VAR 0 4
44195: PUSH
44196: LD_VAR 0 1
44200: PPUSH
44201: LD_VAR 0 2
44205: PUSH
44206: LD_INT 1
44208: ARRAY
44209: PPUSH
44210: LD_VAR 0 3
44214: PPUSH
44215: CALL_OW 1
44219: ST_TO_ADDR
44220: GO 44484
// begin tmp := arr ;
44222: LD_ADDR_VAR 0 6
44226: PUSH
44227: LD_VAR 0 1
44231: ST_TO_ADDR
// s_arr := [ tmp ] ;
44232: LD_ADDR_VAR 0 7
44236: PUSH
44237: LD_VAR 0 6
44241: PUSH
44242: EMPTY
44243: LIST
44244: ST_TO_ADDR
// for i = 1 to pos - 1 do
44245: LD_ADDR_VAR 0 5
44249: PUSH
44250: DOUBLE
44251: LD_INT 1
44253: DEC
44254: ST_TO_ADDR
44255: LD_VAR 0 2
44259: PUSH
44260: LD_INT 1
44262: MINUS
44263: PUSH
44264: FOR_TO
44265: IFFALSE 44310
// begin tmp := tmp [ pos [ i ] ] ;
44267: LD_ADDR_VAR 0 6
44271: PUSH
44272: LD_VAR 0 6
44276: PUSH
44277: LD_VAR 0 2
44281: PUSH
44282: LD_VAR 0 5
44286: ARRAY
44287: ARRAY
44288: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44289: LD_ADDR_VAR 0 7
44293: PUSH
44294: LD_VAR 0 7
44298: PUSH
44299: LD_VAR 0 6
44303: PUSH
44304: EMPTY
44305: LIST
44306: ADD
44307: ST_TO_ADDR
// end ;
44308: GO 44264
44310: POP
44311: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44312: LD_ADDR_VAR 0 6
44316: PUSH
44317: LD_VAR 0 6
44321: PPUSH
44322: LD_VAR 0 2
44326: PUSH
44327: LD_VAR 0 2
44331: ARRAY
44332: PPUSH
44333: LD_VAR 0 3
44337: PPUSH
44338: CALL_OW 1
44342: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44343: LD_ADDR_VAR 0 7
44347: PUSH
44348: LD_VAR 0 7
44352: PPUSH
44353: LD_VAR 0 7
44357: PPUSH
44358: LD_VAR 0 6
44362: PPUSH
44363: CALL_OW 1
44367: ST_TO_ADDR
// for i = s_arr downto 2 do
44368: LD_ADDR_VAR 0 5
44372: PUSH
44373: DOUBLE
44374: LD_VAR 0 7
44378: INC
44379: ST_TO_ADDR
44380: LD_INT 2
44382: PUSH
44383: FOR_DOWNTO
44384: IFFALSE 44468
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44386: LD_ADDR_VAR 0 6
44390: PUSH
44391: LD_VAR 0 7
44395: PUSH
44396: LD_VAR 0 5
44400: PUSH
44401: LD_INT 1
44403: MINUS
44404: ARRAY
44405: PPUSH
44406: LD_VAR 0 2
44410: PUSH
44411: LD_VAR 0 5
44415: PUSH
44416: LD_INT 1
44418: MINUS
44419: ARRAY
44420: PPUSH
44421: LD_VAR 0 7
44425: PUSH
44426: LD_VAR 0 5
44430: ARRAY
44431: PPUSH
44432: CALL_OW 1
44436: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44437: LD_ADDR_VAR 0 7
44441: PUSH
44442: LD_VAR 0 7
44446: PPUSH
44447: LD_VAR 0 5
44451: PUSH
44452: LD_INT 1
44454: MINUS
44455: PPUSH
44456: LD_VAR 0 6
44460: PPUSH
44461: CALL_OW 1
44465: ST_TO_ADDR
// end ;
44466: GO 44383
44468: POP
44469: POP
// result := s_arr [ 1 ] ;
44470: LD_ADDR_VAR 0 4
44474: PUSH
44475: LD_VAR 0 7
44479: PUSH
44480: LD_INT 1
44482: ARRAY
44483: ST_TO_ADDR
// end ; end ;
44484: LD_VAR 0 4
44488: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44489: LD_INT 0
44491: PPUSH
44492: PPUSH
// if not list then
44493: LD_VAR 0 1
44497: NOT
44498: IFFALSE 44502
// exit ;
44500: GO 44593
// i := list [ pos1 ] ;
44502: LD_ADDR_VAR 0 5
44506: PUSH
44507: LD_VAR 0 1
44511: PUSH
44512: LD_VAR 0 2
44516: ARRAY
44517: ST_TO_ADDR
// if not i then
44518: LD_VAR 0 5
44522: NOT
44523: IFFALSE 44527
// exit ;
44525: GO 44593
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44527: LD_ADDR_VAR 0 1
44531: PUSH
44532: LD_VAR 0 1
44536: PPUSH
44537: LD_VAR 0 2
44541: PPUSH
44542: LD_VAR 0 1
44546: PUSH
44547: LD_VAR 0 3
44551: ARRAY
44552: PPUSH
44553: CALL_OW 1
44557: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44558: LD_ADDR_VAR 0 1
44562: PUSH
44563: LD_VAR 0 1
44567: PPUSH
44568: LD_VAR 0 3
44572: PPUSH
44573: LD_VAR 0 5
44577: PPUSH
44578: CALL_OW 1
44582: ST_TO_ADDR
// result := list ;
44583: LD_ADDR_VAR 0 4
44587: PUSH
44588: LD_VAR 0 1
44592: ST_TO_ADDR
// end ;
44593: LD_VAR 0 4
44597: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44598: LD_INT 0
44600: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44601: LD_ADDR_VAR 0 5
44605: PUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: CALL_OW 250
44615: PPUSH
44616: LD_VAR 0 1
44620: PPUSH
44621: CALL_OW 251
44625: PPUSH
44626: LD_VAR 0 2
44630: PPUSH
44631: LD_VAR 0 3
44635: PPUSH
44636: LD_VAR 0 4
44640: PPUSH
44641: CALL 44651 0 5
44645: ST_TO_ADDR
// end ;
44646: LD_VAR 0 5
44650: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44651: LD_INT 0
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
// if not list then
44657: LD_VAR 0 3
44661: NOT
44662: IFFALSE 44666
// exit ;
44664: GO 45054
// result := [ ] ;
44666: LD_ADDR_VAR 0 6
44670: PUSH
44671: EMPTY
44672: ST_TO_ADDR
// for i in list do
44673: LD_ADDR_VAR 0 7
44677: PUSH
44678: LD_VAR 0 3
44682: PUSH
44683: FOR_IN
44684: IFFALSE 44886
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44686: LD_ADDR_VAR 0 9
44690: PUSH
44691: LD_VAR 0 7
44695: PPUSH
44696: LD_VAR 0 1
44700: PPUSH
44701: LD_VAR 0 2
44705: PPUSH
44706: CALL_OW 297
44710: ST_TO_ADDR
// if not result then
44711: LD_VAR 0 6
44715: NOT
44716: IFFALSE 44742
// result := [ [ i , tmp ] ] else
44718: LD_ADDR_VAR 0 6
44722: PUSH
44723: LD_VAR 0 7
44727: PUSH
44728: LD_VAR 0 9
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: ST_TO_ADDR
44740: GO 44884
// begin if result [ result ] [ 2 ] < tmp then
44742: LD_VAR 0 6
44746: PUSH
44747: LD_VAR 0 6
44751: ARRAY
44752: PUSH
44753: LD_INT 2
44755: ARRAY
44756: PUSH
44757: LD_VAR 0 9
44761: LESS
44762: IFFALSE 44804
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44764: LD_ADDR_VAR 0 6
44768: PUSH
44769: LD_VAR 0 6
44773: PPUSH
44774: LD_VAR 0 6
44778: PUSH
44779: LD_INT 1
44781: PLUS
44782: PPUSH
44783: LD_VAR 0 7
44787: PUSH
44788: LD_VAR 0 9
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PPUSH
44797: CALL_OW 2
44801: ST_TO_ADDR
44802: GO 44884
// for j = 1 to result do
44804: LD_ADDR_VAR 0 8
44808: PUSH
44809: DOUBLE
44810: LD_INT 1
44812: DEC
44813: ST_TO_ADDR
44814: LD_VAR 0 6
44818: PUSH
44819: FOR_TO
44820: IFFALSE 44882
// begin if tmp < result [ j ] [ 2 ] then
44822: LD_VAR 0 9
44826: PUSH
44827: LD_VAR 0 6
44831: PUSH
44832: LD_VAR 0 8
44836: ARRAY
44837: PUSH
44838: LD_INT 2
44840: ARRAY
44841: LESS
44842: IFFALSE 44880
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44844: LD_ADDR_VAR 0 6
44848: PUSH
44849: LD_VAR 0 6
44853: PPUSH
44854: LD_VAR 0 8
44858: PPUSH
44859: LD_VAR 0 7
44863: PUSH
44864: LD_VAR 0 9
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PPUSH
44873: CALL_OW 2
44877: ST_TO_ADDR
// break ;
44878: GO 44882
// end ; end ;
44880: GO 44819
44882: POP
44883: POP
// end ; end ;
44884: GO 44683
44886: POP
44887: POP
// if result and not asc then
44888: LD_VAR 0 6
44892: PUSH
44893: LD_VAR 0 4
44897: NOT
44898: AND
44899: IFFALSE 44974
// begin tmp := result ;
44901: LD_ADDR_VAR 0 9
44905: PUSH
44906: LD_VAR 0 6
44910: ST_TO_ADDR
// for i = tmp downto 1 do
44911: LD_ADDR_VAR 0 7
44915: PUSH
44916: DOUBLE
44917: LD_VAR 0 9
44921: INC
44922: ST_TO_ADDR
44923: LD_INT 1
44925: PUSH
44926: FOR_DOWNTO
44927: IFFALSE 44972
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44929: LD_ADDR_VAR 0 6
44933: PUSH
44934: LD_VAR 0 6
44938: PPUSH
44939: LD_VAR 0 9
44943: PUSH
44944: LD_VAR 0 7
44948: MINUS
44949: PUSH
44950: LD_INT 1
44952: PLUS
44953: PPUSH
44954: LD_VAR 0 9
44958: PUSH
44959: LD_VAR 0 7
44963: ARRAY
44964: PPUSH
44965: CALL_OW 1
44969: ST_TO_ADDR
44970: GO 44926
44972: POP
44973: POP
// end ; tmp := [ ] ;
44974: LD_ADDR_VAR 0 9
44978: PUSH
44979: EMPTY
44980: ST_TO_ADDR
// if mode then
44981: LD_VAR 0 5
44985: IFFALSE 45054
// begin for i = 1 to result do
44987: LD_ADDR_VAR 0 7
44991: PUSH
44992: DOUBLE
44993: LD_INT 1
44995: DEC
44996: ST_TO_ADDR
44997: LD_VAR 0 6
45001: PUSH
45002: FOR_TO
45003: IFFALSE 45042
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45005: LD_ADDR_VAR 0 9
45009: PUSH
45010: LD_VAR 0 9
45014: PPUSH
45015: LD_VAR 0 7
45019: PPUSH
45020: LD_VAR 0 6
45024: PUSH
45025: LD_VAR 0 7
45029: ARRAY
45030: PUSH
45031: LD_INT 1
45033: ARRAY
45034: PPUSH
45035: CALL_OW 1
45039: ST_TO_ADDR
45040: GO 45002
45042: POP
45043: POP
// result := tmp ;
45044: LD_ADDR_VAR 0 6
45048: PUSH
45049: LD_VAR 0 9
45053: ST_TO_ADDR
// end ; end ;
45054: LD_VAR 0 6
45058: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45059: LD_INT 0
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45067: LD_ADDR_VAR 0 5
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: ST_TO_ADDR
// if not x or not y then
45089: LD_VAR 0 2
45093: NOT
45094: PUSH
45095: LD_VAR 0 3
45099: NOT
45100: OR
45101: IFFALSE 45105
// exit ;
45103: GO 46757
// if not range then
45105: LD_VAR 0 4
45109: NOT
45110: IFFALSE 45120
// range := 10 ;
45112: LD_ADDR_VAR 0 4
45116: PUSH
45117: LD_INT 10
45119: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45120: LD_ADDR_VAR 0 8
45124: PUSH
45125: LD_INT 81
45127: PUSH
45128: LD_VAR 0 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 92
45139: PUSH
45140: LD_VAR 0 2
45144: PUSH
45145: LD_VAR 0 3
45149: PUSH
45150: LD_VAR 0 4
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: LD_INT 21
45166: PUSH
45167: LD_INT 3
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: PPUSH
45183: CALL_OW 69
45187: ST_TO_ADDR
// if not tmp then
45188: LD_VAR 0 8
45192: NOT
45193: IFFALSE 45197
// exit ;
45195: GO 46757
// for i in tmp do
45197: LD_ADDR_VAR 0 6
45201: PUSH
45202: LD_VAR 0 8
45206: PUSH
45207: FOR_IN
45208: IFFALSE 46732
// begin points := [ 0 , 0 , 0 ] ;
45210: LD_ADDR_VAR 0 9
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: ST_TO_ADDR
// bpoints := 1 ;
45229: LD_ADDR_VAR 0 10
45233: PUSH
45234: LD_INT 1
45236: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45237: LD_VAR 0 6
45241: PPUSH
45242: CALL_OW 247
45246: PUSH
45247: LD_INT 1
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 45833
45255: POP
// begin if GetClass ( i ) = 1 then
45256: LD_VAR 0 6
45260: PPUSH
45261: CALL_OW 257
45265: PUSH
45266: LD_INT 1
45268: EQUAL
45269: IFFALSE 45290
// points := [ 10 , 5 , 3 ] ;
45271: LD_ADDR_VAR 0 9
45275: PUSH
45276: LD_INT 10
45278: PUSH
45279: LD_INT 5
45281: PUSH
45282: LD_INT 3
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45290: LD_VAR 0 6
45294: PPUSH
45295: CALL_OW 257
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: LD_INT 3
45305: PUSH
45306: LD_INT 4
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: IN
45314: IFFALSE 45335
// points := [ 3 , 2 , 1 ] ;
45316: LD_ADDR_VAR 0 9
45320: PUSH
45321: LD_INT 3
45323: PUSH
45324: LD_INT 2
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45335: LD_VAR 0 6
45339: PPUSH
45340: CALL_OW 257
45344: PUSH
45345: LD_INT 5
45347: EQUAL
45348: IFFALSE 45369
// points := [ 130 , 5 , 2 ] ;
45350: LD_ADDR_VAR 0 9
45354: PUSH
45355: LD_INT 130
45357: PUSH
45358: LD_INT 5
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45369: LD_VAR 0 6
45373: PPUSH
45374: CALL_OW 257
45378: PUSH
45379: LD_INT 8
45381: EQUAL
45382: IFFALSE 45403
// points := [ 35 , 35 , 30 ] ;
45384: LD_ADDR_VAR 0 9
45388: PUSH
45389: LD_INT 35
45391: PUSH
45392: LD_INT 35
45394: PUSH
45395: LD_INT 30
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45403: LD_VAR 0 6
45407: PPUSH
45408: CALL_OW 257
45412: PUSH
45413: LD_INT 9
45415: EQUAL
45416: IFFALSE 45437
// points := [ 20 , 55 , 40 ] ;
45418: LD_ADDR_VAR 0 9
45422: PUSH
45423: LD_INT 20
45425: PUSH
45426: LD_INT 55
45428: PUSH
45429: LD_INT 40
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45437: LD_VAR 0 6
45441: PPUSH
45442: CALL_OW 257
45446: PUSH
45447: LD_INT 12
45449: PUSH
45450: LD_INT 16
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: IN
45457: IFFALSE 45478
// points := [ 5 , 3 , 2 ] ;
45459: LD_ADDR_VAR 0 9
45463: PUSH
45464: LD_INT 5
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45478: LD_VAR 0 6
45482: PPUSH
45483: CALL_OW 257
45487: PUSH
45488: LD_INT 17
45490: EQUAL
45491: IFFALSE 45512
// points := [ 100 , 50 , 75 ] ;
45493: LD_ADDR_VAR 0 9
45497: PUSH
45498: LD_INT 100
45500: PUSH
45501: LD_INT 50
45503: PUSH
45504: LD_INT 75
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45512: LD_VAR 0 6
45516: PPUSH
45517: CALL_OW 257
45521: PUSH
45522: LD_INT 15
45524: EQUAL
45525: IFFALSE 45546
// points := [ 10 , 5 , 3 ] ;
45527: LD_ADDR_VAR 0 9
45531: PUSH
45532: LD_INT 10
45534: PUSH
45535: LD_INT 5
45537: PUSH
45538: LD_INT 3
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45546: LD_VAR 0 6
45550: PPUSH
45551: CALL_OW 257
45555: PUSH
45556: LD_INT 14
45558: EQUAL
45559: IFFALSE 45580
// points := [ 10 , 0 , 0 ] ;
45561: LD_ADDR_VAR 0 9
45565: PUSH
45566: LD_INT 10
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45580: LD_VAR 0 6
45584: PPUSH
45585: CALL_OW 257
45589: PUSH
45590: LD_INT 11
45592: EQUAL
45593: IFFALSE 45614
// points := [ 30 , 10 , 5 ] ;
45595: LD_ADDR_VAR 0 9
45599: PUSH
45600: LD_INT 30
45602: PUSH
45603: LD_INT 10
45605: PUSH
45606: LD_INT 5
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45614: LD_VAR 0 1
45618: PPUSH
45619: LD_INT 5
45621: PPUSH
45622: CALL_OW 321
45626: PUSH
45627: LD_INT 2
45629: EQUAL
45630: IFFALSE 45647
// bpoints := bpoints * 1.8 ;
45632: LD_ADDR_VAR 0 10
45636: PUSH
45637: LD_VAR 0 10
45641: PUSH
45642: LD_REAL  1.80000000000000E+0000
45645: MUL
45646: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45647: LD_VAR 0 6
45651: PPUSH
45652: CALL_OW 257
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 3
45665: PUSH
45666: LD_INT 4
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: IN
45675: PUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: LD_INT 51
45683: PPUSH
45684: CALL_OW 321
45688: PUSH
45689: LD_INT 2
45691: EQUAL
45692: AND
45693: IFFALSE 45710
// bpoints := bpoints * 1.2 ;
45695: LD_ADDR_VAR 0 10
45699: PUSH
45700: LD_VAR 0 10
45704: PUSH
45705: LD_REAL  1.20000000000000E+0000
45708: MUL
45709: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45710: LD_VAR 0 6
45714: PPUSH
45715: CALL_OW 257
45719: PUSH
45720: LD_INT 5
45722: PUSH
45723: LD_INT 7
45725: PUSH
45726: LD_INT 9
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: IN
45734: PUSH
45735: LD_VAR 0 1
45739: PPUSH
45740: LD_INT 52
45742: PPUSH
45743: CALL_OW 321
45747: PUSH
45748: LD_INT 2
45750: EQUAL
45751: AND
45752: IFFALSE 45769
// bpoints := bpoints * 1.5 ;
45754: LD_ADDR_VAR 0 10
45758: PUSH
45759: LD_VAR 0 10
45763: PUSH
45764: LD_REAL  1.50000000000000E+0000
45767: MUL
45768: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45769: LD_VAR 0 1
45773: PPUSH
45774: LD_INT 66
45776: PPUSH
45777: CALL_OW 321
45781: PUSH
45782: LD_INT 2
45784: EQUAL
45785: IFFALSE 45802
// bpoints := bpoints * 1.1 ;
45787: LD_ADDR_VAR 0 10
45791: PUSH
45792: LD_VAR 0 10
45796: PUSH
45797: LD_REAL  1.10000000000000E+0000
45800: MUL
45801: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45802: LD_ADDR_VAR 0 10
45806: PUSH
45807: LD_VAR 0 10
45811: PUSH
45812: LD_VAR 0 6
45816: PPUSH
45817: LD_INT 1
45819: PPUSH
45820: CALL_OW 259
45824: PUSH
45825: LD_REAL  1.15000000000000E+0000
45828: MUL
45829: MUL
45830: ST_TO_ADDR
// end ; unit_vehicle :
45831: GO 46661
45833: LD_INT 2
45835: DOUBLE
45836: EQUAL
45837: IFTRUE 45841
45839: GO 46649
45841: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45842: LD_VAR 0 6
45846: PPUSH
45847: CALL_OW 264
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 42
45857: PUSH
45858: LD_INT 24
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: IN
45866: IFFALSE 45887
// points := [ 25 , 5 , 3 ] ;
45868: LD_ADDR_VAR 0 9
45872: PUSH
45873: LD_INT 25
45875: PUSH
45876: LD_INT 5
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45887: LD_VAR 0 6
45891: PPUSH
45892: CALL_OW 264
45896: PUSH
45897: LD_INT 4
45899: PUSH
45900: LD_INT 43
45902: PUSH
45903: LD_INT 25
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: IN
45911: IFFALSE 45932
// points := [ 40 , 15 , 5 ] ;
45913: LD_ADDR_VAR 0 9
45917: PUSH
45918: LD_INT 40
45920: PUSH
45921: LD_INT 15
45923: PUSH
45924: LD_INT 5
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45932: LD_VAR 0 6
45936: PPUSH
45937: CALL_OW 264
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: LD_INT 23
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: IN
45952: IFFALSE 45973
// points := [ 7 , 25 , 8 ] ;
45954: LD_ADDR_VAR 0 9
45958: PUSH
45959: LD_INT 7
45961: PUSH
45962: LD_INT 25
45964: PUSH
45965: LD_INT 8
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45973: LD_VAR 0 6
45977: PPUSH
45978: CALL_OW 264
45982: PUSH
45983: LD_INT 5
45985: PUSH
45986: LD_INT 27
45988: PUSH
45989: LD_INT 44
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: IN
45997: IFFALSE 46018
// points := [ 14 , 50 , 16 ] ;
45999: LD_ADDR_VAR 0 9
46003: PUSH
46004: LD_INT 14
46006: PUSH
46007: LD_INT 50
46009: PUSH
46010: LD_INT 16
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46018: LD_VAR 0 6
46022: PPUSH
46023: CALL_OW 264
46027: PUSH
46028: LD_INT 6
46030: PUSH
46031: LD_INT 46
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: IN
46038: IFFALSE 46059
// points := [ 32 , 120 , 70 ] ;
46040: LD_ADDR_VAR 0 9
46044: PUSH
46045: LD_INT 32
46047: PUSH
46048: LD_INT 120
46050: PUSH
46051: LD_INT 70
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46059: LD_VAR 0 6
46063: PPUSH
46064: CALL_OW 264
46068: PUSH
46069: LD_INT 7
46071: PUSH
46072: LD_INT 28
46074: PUSH
46075: LD_INT 45
46077: PUSH
46078: LD_EXP 50
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: IN
46089: IFFALSE 46110
// points := [ 35 , 20 , 45 ] ;
46091: LD_ADDR_VAR 0 9
46095: PUSH
46096: LD_INT 35
46098: PUSH
46099: LD_INT 20
46101: PUSH
46102: LD_INT 45
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46110: LD_VAR 0 6
46114: PPUSH
46115: CALL_OW 264
46119: PUSH
46120: LD_INT 47
46122: PUSH
46123: EMPTY
46124: LIST
46125: IN
46126: IFFALSE 46147
// points := [ 67 , 45 , 75 ] ;
46128: LD_ADDR_VAR 0 9
46132: PUSH
46133: LD_INT 67
46135: PUSH
46136: LD_INT 45
46138: PUSH
46139: LD_INT 75
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46147: LD_VAR 0 6
46151: PPUSH
46152: CALL_OW 264
46156: PUSH
46157: LD_INT 26
46159: PUSH
46160: EMPTY
46161: LIST
46162: IN
46163: IFFALSE 46184
// points := [ 120 , 30 , 80 ] ;
46165: LD_ADDR_VAR 0 9
46169: PUSH
46170: LD_INT 120
46172: PUSH
46173: LD_INT 30
46175: PUSH
46176: LD_INT 80
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46184: LD_VAR 0 6
46188: PPUSH
46189: CALL_OW 264
46193: PUSH
46194: LD_INT 22
46196: PUSH
46197: EMPTY
46198: LIST
46199: IN
46200: IFFALSE 46221
// points := [ 40 , 1 , 1 ] ;
46202: LD_ADDR_VAR 0 9
46206: PUSH
46207: LD_INT 40
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46221: LD_VAR 0 6
46225: PPUSH
46226: CALL_OW 264
46230: PUSH
46231: LD_INT 29
46233: PUSH
46234: EMPTY
46235: LIST
46236: IN
46237: IFFALSE 46258
// points := [ 70 , 200 , 400 ] ;
46239: LD_ADDR_VAR 0 9
46243: PUSH
46244: LD_INT 70
46246: PUSH
46247: LD_INT 200
46249: PUSH
46250: LD_INT 400
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46258: LD_VAR 0 6
46262: PPUSH
46263: CALL_OW 264
46267: PUSH
46268: LD_INT 14
46270: PUSH
46271: LD_INT 53
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: IN
46278: IFFALSE 46299
// points := [ 40 , 10 , 20 ] ;
46280: LD_ADDR_VAR 0 9
46284: PUSH
46285: LD_INT 40
46287: PUSH
46288: LD_INT 10
46290: PUSH
46291: LD_INT 20
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46299: LD_VAR 0 6
46303: PPUSH
46304: CALL_OW 264
46308: PUSH
46309: LD_INT 9
46311: PUSH
46312: EMPTY
46313: LIST
46314: IN
46315: IFFALSE 46336
// points := [ 5 , 70 , 20 ] ;
46317: LD_ADDR_VAR 0 9
46321: PUSH
46322: LD_INT 5
46324: PUSH
46325: LD_INT 70
46327: PUSH
46328: LD_INT 20
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46336: LD_VAR 0 6
46340: PPUSH
46341: CALL_OW 264
46345: PUSH
46346: LD_INT 10
46348: PUSH
46349: EMPTY
46350: LIST
46351: IN
46352: IFFALSE 46373
// points := [ 35 , 110 , 70 ] ;
46354: LD_ADDR_VAR 0 9
46358: PUSH
46359: LD_INT 35
46361: PUSH
46362: LD_INT 110
46364: PUSH
46365: LD_INT 70
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46373: LD_VAR 0 6
46377: PPUSH
46378: CALL_OW 265
46382: PUSH
46383: LD_INT 25
46385: EQUAL
46386: IFFALSE 46407
// points := [ 80 , 65 , 100 ] ;
46388: LD_ADDR_VAR 0 9
46392: PUSH
46393: LD_INT 80
46395: PUSH
46396: LD_INT 65
46398: PUSH
46399: LD_INT 100
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46407: LD_VAR 0 6
46411: PPUSH
46412: CALL_OW 263
46416: PUSH
46417: LD_INT 1
46419: EQUAL
46420: IFFALSE 46455
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46422: LD_ADDR_VAR 0 10
46426: PUSH
46427: LD_VAR 0 10
46431: PUSH
46432: LD_VAR 0 6
46436: PPUSH
46437: CALL_OW 311
46441: PPUSH
46442: LD_INT 3
46444: PPUSH
46445: CALL_OW 259
46449: PUSH
46450: LD_INT 4
46452: MUL
46453: MUL
46454: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46455: LD_VAR 0 6
46459: PPUSH
46460: CALL_OW 263
46464: PUSH
46465: LD_INT 2
46467: EQUAL
46468: IFFALSE 46519
// begin j := IsControledBy ( i ) ;
46470: LD_ADDR_VAR 0 7
46474: PUSH
46475: LD_VAR 0 6
46479: PPUSH
46480: CALL_OW 312
46484: ST_TO_ADDR
// if j then
46485: LD_VAR 0 7
46489: IFFALSE 46519
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46491: LD_ADDR_VAR 0 10
46495: PUSH
46496: LD_VAR 0 10
46500: PUSH
46501: LD_VAR 0 7
46505: PPUSH
46506: LD_INT 3
46508: PPUSH
46509: CALL_OW 259
46513: PUSH
46514: LD_INT 3
46516: MUL
46517: MUL
46518: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46519: LD_VAR 0 6
46523: PPUSH
46524: CALL_OW 264
46528: PUSH
46529: LD_INT 5
46531: PUSH
46532: LD_INT 6
46534: PUSH
46535: LD_INT 46
46537: PUSH
46538: LD_INT 44
46540: PUSH
46541: LD_INT 47
46543: PUSH
46544: LD_INT 45
46546: PUSH
46547: LD_INT 28
46549: PUSH
46550: LD_INT 7
46552: PUSH
46553: LD_INT 27
46555: PUSH
46556: LD_INT 29
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: IN
46571: PUSH
46572: LD_VAR 0 1
46576: PPUSH
46577: LD_INT 52
46579: PPUSH
46580: CALL_OW 321
46584: PUSH
46585: LD_INT 2
46587: EQUAL
46588: AND
46589: IFFALSE 46606
// bpoints := bpoints * 1.2 ;
46591: LD_ADDR_VAR 0 10
46595: PUSH
46596: LD_VAR 0 10
46600: PUSH
46601: LD_REAL  1.20000000000000E+0000
46604: MUL
46605: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46606: LD_VAR 0 6
46610: PPUSH
46611: CALL_OW 264
46615: PUSH
46616: LD_INT 6
46618: PUSH
46619: LD_INT 46
46621: PUSH
46622: LD_INT 47
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: IN
46630: IFFALSE 46647
// bpoints := bpoints * 1.2 ;
46632: LD_ADDR_VAR 0 10
46636: PUSH
46637: LD_VAR 0 10
46641: PUSH
46642: LD_REAL  1.20000000000000E+0000
46645: MUL
46646: ST_TO_ADDR
// end ; unit_building :
46647: GO 46661
46649: LD_INT 3
46651: DOUBLE
46652: EQUAL
46653: IFTRUE 46657
46655: GO 46660
46657: POP
// ; end ;
46658: GO 46661
46660: POP
// for j = 1 to 3 do
46661: LD_ADDR_VAR 0 7
46665: PUSH
46666: DOUBLE
46667: LD_INT 1
46669: DEC
46670: ST_TO_ADDR
46671: LD_INT 3
46673: PUSH
46674: FOR_TO
46675: IFFALSE 46728
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46677: LD_ADDR_VAR 0 5
46681: PUSH
46682: LD_VAR 0 5
46686: PPUSH
46687: LD_VAR 0 7
46691: PPUSH
46692: LD_VAR 0 5
46696: PUSH
46697: LD_VAR 0 7
46701: ARRAY
46702: PUSH
46703: LD_VAR 0 9
46707: PUSH
46708: LD_VAR 0 7
46712: ARRAY
46713: PUSH
46714: LD_VAR 0 10
46718: MUL
46719: PLUS
46720: PPUSH
46721: CALL_OW 1
46725: ST_TO_ADDR
46726: GO 46674
46728: POP
46729: POP
// end ;
46730: GO 45207
46732: POP
46733: POP
// result := Replace ( result , 4 , tmp ) ;
46734: LD_ADDR_VAR 0 5
46738: PUSH
46739: LD_VAR 0 5
46743: PPUSH
46744: LD_INT 4
46746: PPUSH
46747: LD_VAR 0 8
46751: PPUSH
46752: CALL_OW 1
46756: ST_TO_ADDR
// end ;
46757: LD_VAR 0 5
46761: RET
// export function DangerAtRange ( unit , range ) ; begin
46762: LD_INT 0
46764: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46765: LD_ADDR_VAR 0 3
46769: PUSH
46770: LD_VAR 0 1
46774: PPUSH
46775: CALL_OW 255
46779: PPUSH
46780: LD_VAR 0 1
46784: PPUSH
46785: CALL_OW 250
46789: PPUSH
46790: LD_VAR 0 1
46794: PPUSH
46795: CALL_OW 251
46799: PPUSH
46800: LD_VAR 0 2
46804: PPUSH
46805: CALL 45059 0 4
46809: ST_TO_ADDR
// end ;
46810: LD_VAR 0 3
46814: RET
// export function DangerInArea ( side , area ) ; begin
46815: LD_INT 0
46817: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46818: LD_ADDR_VAR 0 3
46822: PUSH
46823: LD_VAR 0 2
46827: PPUSH
46828: LD_INT 81
46830: PUSH
46831: LD_VAR 0 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PPUSH
46840: CALL_OW 70
46844: ST_TO_ADDR
// end ;
46845: LD_VAR 0 3
46849: RET
// export function IsExtension ( b ) ; begin
46850: LD_INT 0
46852: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46853: LD_ADDR_VAR 0 2
46857: PUSH
46858: LD_VAR 0 1
46862: PUSH
46863: LD_INT 23
46865: PUSH
46866: LD_INT 20
46868: PUSH
46869: LD_INT 22
46871: PUSH
46872: LD_INT 17
46874: PUSH
46875: LD_INT 24
46877: PUSH
46878: LD_INT 21
46880: PUSH
46881: LD_INT 19
46883: PUSH
46884: LD_INT 16
46886: PUSH
46887: LD_INT 25
46889: PUSH
46890: LD_INT 18
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: IN
46905: ST_TO_ADDR
// end ;
46906: LD_VAR 0 2
46910: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46911: LD_INT 0
46913: PPUSH
46914: PPUSH
46915: PPUSH
// result := [ ] ;
46916: LD_ADDR_VAR 0 4
46920: PUSH
46921: EMPTY
46922: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46923: LD_ADDR_VAR 0 5
46927: PUSH
46928: LD_VAR 0 2
46932: PPUSH
46933: LD_INT 21
46935: PUSH
46936: LD_INT 3
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PPUSH
46943: CALL_OW 70
46947: ST_TO_ADDR
// if not tmp then
46948: LD_VAR 0 5
46952: NOT
46953: IFFALSE 46957
// exit ;
46955: GO 47021
// if checkLink then
46957: LD_VAR 0 3
46961: IFFALSE 47011
// begin for i in tmp do
46963: LD_ADDR_VAR 0 6
46967: PUSH
46968: LD_VAR 0 5
46972: PUSH
46973: FOR_IN
46974: IFFALSE 47009
// if GetBase ( i ) <> base then
46976: LD_VAR 0 6
46980: PPUSH
46981: CALL_OW 274
46985: PUSH
46986: LD_VAR 0 1
46990: NONEQUAL
46991: IFFALSE 47007
// ComLinkToBase ( base , i ) ;
46993: LD_VAR 0 1
46997: PPUSH
46998: LD_VAR 0 6
47002: PPUSH
47003: CALL_OW 169
47007: GO 46973
47009: POP
47010: POP
// end ; result := tmp ;
47011: LD_ADDR_VAR 0 4
47015: PUSH
47016: LD_VAR 0 5
47020: ST_TO_ADDR
// end ;
47021: LD_VAR 0 4
47025: RET
// export function ComComplete ( units , b ) ; var i ; begin
47026: LD_INT 0
47028: PPUSH
47029: PPUSH
// if not units then
47030: LD_VAR 0 1
47034: NOT
47035: IFFALSE 47039
// exit ;
47037: GO 47129
// for i in units do
47039: LD_ADDR_VAR 0 4
47043: PUSH
47044: LD_VAR 0 1
47048: PUSH
47049: FOR_IN
47050: IFFALSE 47127
// if BuildingStatus ( b ) = bs_build then
47052: LD_VAR 0 2
47056: PPUSH
47057: CALL_OW 461
47061: PUSH
47062: LD_INT 1
47064: EQUAL
47065: IFFALSE 47125
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47067: LD_VAR 0 4
47071: PPUSH
47072: LD_STRING h
47074: PUSH
47075: LD_VAR 0 2
47079: PPUSH
47080: CALL_OW 250
47084: PUSH
47085: LD_VAR 0 2
47089: PPUSH
47090: CALL_OW 251
47094: PUSH
47095: LD_VAR 0 2
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: PPUSH
47121: CALL_OW 446
47125: GO 47049
47127: POP
47128: POP
// end ;
47129: LD_VAR 0 3
47133: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47134: LD_INT 0
47136: PPUSH
47137: PPUSH
47138: PPUSH
47139: PPUSH
47140: PPUSH
47141: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47142: LD_VAR 0 1
47146: NOT
47147: PUSH
47148: LD_VAR 0 1
47152: PPUSH
47153: CALL_OW 263
47157: PUSH
47158: LD_INT 2
47160: NONEQUAL
47161: OR
47162: IFFALSE 47166
// exit ;
47164: GO 47482
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47166: LD_ADDR_VAR 0 6
47170: PUSH
47171: LD_INT 22
47173: PUSH
47174: LD_VAR 0 1
47178: PPUSH
47179: CALL_OW 255
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: LD_INT 30
47193: PUSH
47194: LD_INT 36
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 34
47203: PUSH
47204: LD_INT 31
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PPUSH
47220: CALL_OW 69
47224: ST_TO_ADDR
// if not tmp then
47225: LD_VAR 0 6
47229: NOT
47230: IFFALSE 47234
// exit ;
47232: GO 47482
// result := [ ] ;
47234: LD_ADDR_VAR 0 2
47238: PUSH
47239: EMPTY
47240: ST_TO_ADDR
// for i in tmp do
47241: LD_ADDR_VAR 0 3
47245: PUSH
47246: LD_VAR 0 6
47250: PUSH
47251: FOR_IN
47252: IFFALSE 47323
// begin t := UnitsInside ( i ) ;
47254: LD_ADDR_VAR 0 4
47258: PUSH
47259: LD_VAR 0 3
47263: PPUSH
47264: CALL_OW 313
47268: ST_TO_ADDR
// if t then
47269: LD_VAR 0 4
47273: IFFALSE 47321
// for j in t do
47275: LD_ADDR_VAR 0 7
47279: PUSH
47280: LD_VAR 0 4
47284: PUSH
47285: FOR_IN
47286: IFFALSE 47319
// result := Replace ( result , result + 1 , j ) ;
47288: LD_ADDR_VAR 0 2
47292: PUSH
47293: LD_VAR 0 2
47297: PPUSH
47298: LD_VAR 0 2
47302: PUSH
47303: LD_INT 1
47305: PLUS
47306: PPUSH
47307: LD_VAR 0 7
47311: PPUSH
47312: CALL_OW 1
47316: ST_TO_ADDR
47317: GO 47285
47319: POP
47320: POP
// end ;
47321: GO 47251
47323: POP
47324: POP
// if not result then
47325: LD_VAR 0 2
47329: NOT
47330: IFFALSE 47334
// exit ;
47332: GO 47482
// mech := result [ 1 ] ;
47334: LD_ADDR_VAR 0 5
47338: PUSH
47339: LD_VAR 0 2
47343: PUSH
47344: LD_INT 1
47346: ARRAY
47347: ST_TO_ADDR
// if result > 1 then
47348: LD_VAR 0 2
47352: PUSH
47353: LD_INT 1
47355: GREATER
47356: IFFALSE 47468
// begin for i = 2 to result do
47358: LD_ADDR_VAR 0 3
47362: PUSH
47363: DOUBLE
47364: LD_INT 2
47366: DEC
47367: ST_TO_ADDR
47368: LD_VAR 0 2
47372: PUSH
47373: FOR_TO
47374: IFFALSE 47466
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47376: LD_ADDR_VAR 0 4
47380: PUSH
47381: LD_VAR 0 2
47385: PUSH
47386: LD_VAR 0 3
47390: ARRAY
47391: PPUSH
47392: LD_INT 3
47394: PPUSH
47395: CALL_OW 259
47399: PUSH
47400: LD_VAR 0 2
47404: PUSH
47405: LD_VAR 0 3
47409: ARRAY
47410: PPUSH
47411: CALL_OW 432
47415: MINUS
47416: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47417: LD_VAR 0 4
47421: PUSH
47422: LD_VAR 0 5
47426: PPUSH
47427: LD_INT 3
47429: PPUSH
47430: CALL_OW 259
47434: PUSH
47435: LD_VAR 0 5
47439: PPUSH
47440: CALL_OW 432
47444: MINUS
47445: GREATEREQUAL
47446: IFFALSE 47464
// mech := result [ i ] ;
47448: LD_ADDR_VAR 0 5
47452: PUSH
47453: LD_VAR 0 2
47457: PUSH
47458: LD_VAR 0 3
47462: ARRAY
47463: ST_TO_ADDR
// end ;
47464: GO 47373
47466: POP
47467: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47468: LD_VAR 0 1
47472: PPUSH
47473: LD_VAR 0 5
47477: PPUSH
47478: CALL_OW 135
// end ;
47482: LD_VAR 0 2
47486: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47487: LD_INT 0
47489: PPUSH
47490: PPUSH
47491: PPUSH
47492: PPUSH
47493: PPUSH
47494: PPUSH
47495: PPUSH
47496: PPUSH
47497: PPUSH
47498: PPUSH
47499: PPUSH
47500: PPUSH
47501: PPUSH
// result := [ ] ;
47502: LD_ADDR_VAR 0 7
47506: PUSH
47507: EMPTY
47508: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47509: LD_VAR 0 1
47513: PPUSH
47514: CALL_OW 266
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: IN
47529: NOT
47530: IFFALSE 47534
// exit ;
47532: GO 49168
// if name then
47534: LD_VAR 0 3
47538: IFFALSE 47554
// SetBName ( base_dep , name ) ;
47540: LD_VAR 0 1
47544: PPUSH
47545: LD_VAR 0 3
47549: PPUSH
47550: CALL_OW 500
// base := GetBase ( base_dep ) ;
47554: LD_ADDR_VAR 0 15
47558: PUSH
47559: LD_VAR 0 1
47563: PPUSH
47564: CALL_OW 274
47568: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47569: LD_ADDR_VAR 0 16
47573: PUSH
47574: LD_VAR 0 1
47578: PPUSH
47579: CALL_OW 255
47583: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47584: LD_ADDR_VAR 0 17
47588: PUSH
47589: LD_VAR 0 1
47593: PPUSH
47594: CALL_OW 248
47598: ST_TO_ADDR
// if sources then
47599: LD_VAR 0 5
47603: IFFALSE 47650
// for i = 1 to 3 do
47605: LD_ADDR_VAR 0 8
47609: PUSH
47610: DOUBLE
47611: LD_INT 1
47613: DEC
47614: ST_TO_ADDR
47615: LD_INT 3
47617: PUSH
47618: FOR_TO
47619: IFFALSE 47648
// AddResourceType ( base , i , sources [ i ] ) ;
47621: LD_VAR 0 15
47625: PPUSH
47626: LD_VAR 0 8
47630: PPUSH
47631: LD_VAR 0 5
47635: PUSH
47636: LD_VAR 0 8
47640: ARRAY
47641: PPUSH
47642: CALL_OW 276
47646: GO 47618
47648: POP
47649: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47650: LD_ADDR_VAR 0 18
47654: PUSH
47655: LD_VAR 0 15
47659: PPUSH
47660: LD_VAR 0 2
47664: PPUSH
47665: LD_INT 1
47667: PPUSH
47668: CALL 46911 0 3
47672: ST_TO_ADDR
// InitHc ;
47673: CALL_OW 19
// InitUc ;
47677: CALL_OW 18
// uc_side := side ;
47681: LD_ADDR_OWVAR 20
47685: PUSH
47686: LD_VAR 0 16
47690: ST_TO_ADDR
// uc_nation := nation ;
47691: LD_ADDR_OWVAR 21
47695: PUSH
47696: LD_VAR 0 17
47700: ST_TO_ADDR
// if buildings then
47701: LD_VAR 0 18
47705: IFFALSE 49027
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47707: LD_ADDR_VAR 0 19
47711: PUSH
47712: LD_VAR 0 18
47716: PPUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 30
47722: PUSH
47723: LD_INT 29
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 30
47732: PUSH
47733: LD_INT 30
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: PPUSH
47745: CALL_OW 72
47749: ST_TO_ADDR
// if tmp then
47750: LD_VAR 0 19
47754: IFFALSE 47802
// for i in tmp do
47756: LD_ADDR_VAR 0 8
47760: PUSH
47761: LD_VAR 0 19
47765: PUSH
47766: FOR_IN
47767: IFFALSE 47800
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47769: LD_VAR 0 8
47773: PPUSH
47774: CALL_OW 250
47778: PPUSH
47779: LD_VAR 0 8
47783: PPUSH
47784: CALL_OW 251
47788: PPUSH
47789: LD_VAR 0 16
47793: PPUSH
47794: CALL_OW 441
47798: GO 47766
47800: POP
47801: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47802: LD_VAR 0 18
47806: PPUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 30
47812: PUSH
47813: LD_INT 32
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 30
47822: PUSH
47823: LD_INT 33
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: LIST
47834: PPUSH
47835: CALL_OW 72
47839: IFFALSE 47927
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47841: LD_ADDR_VAR 0 8
47845: PUSH
47846: LD_VAR 0 18
47850: PPUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 30
47856: PUSH
47857: LD_INT 32
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 30
47866: PUSH
47867: LD_INT 33
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: LIST
47878: PPUSH
47879: CALL_OW 72
47883: PUSH
47884: FOR_IN
47885: IFFALSE 47925
// begin if not GetBWeapon ( i ) then
47887: LD_VAR 0 8
47891: PPUSH
47892: CALL_OW 269
47896: NOT
47897: IFFALSE 47923
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47899: LD_VAR 0 8
47903: PPUSH
47904: LD_VAR 0 8
47908: PPUSH
47909: LD_VAR 0 2
47913: PPUSH
47914: CALL 49173 0 2
47918: PPUSH
47919: CALL_OW 431
// end ;
47923: GO 47884
47925: POP
47926: POP
// end ; for i = 1 to personel do
47927: LD_ADDR_VAR 0 8
47931: PUSH
47932: DOUBLE
47933: LD_INT 1
47935: DEC
47936: ST_TO_ADDR
47937: LD_VAR 0 6
47941: PUSH
47942: FOR_TO
47943: IFFALSE 49007
// begin if i > 4 then
47945: LD_VAR 0 8
47949: PUSH
47950: LD_INT 4
47952: GREATER
47953: IFFALSE 47957
// break ;
47955: GO 49007
// case i of 1 :
47957: LD_VAR 0 8
47961: PUSH
47962: LD_INT 1
47964: DOUBLE
47965: EQUAL
47966: IFTRUE 47970
47968: GO 48050
47970: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47971: LD_ADDR_VAR 0 12
47975: PUSH
47976: LD_VAR 0 18
47980: PPUSH
47981: LD_INT 22
47983: PUSH
47984: LD_VAR 0 16
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 58
47995: PUSH
47996: EMPTY
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 30
48004: PUSH
48005: LD_INT 32
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 30
48014: PUSH
48015: LD_INT 4
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 30
48024: PUSH
48025: LD_INT 5
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: PPUSH
48043: CALL_OW 72
48047: ST_TO_ADDR
48048: GO 48272
48050: LD_INT 2
48052: DOUBLE
48053: EQUAL
48054: IFTRUE 48058
48056: GO 48120
48058: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48059: LD_ADDR_VAR 0 12
48063: PUSH
48064: LD_VAR 0 18
48068: PPUSH
48069: LD_INT 22
48071: PUSH
48072: LD_VAR 0 16
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 30
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 30
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: LIST
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PPUSH
48113: CALL_OW 72
48117: ST_TO_ADDR
48118: GO 48272
48120: LD_INT 3
48122: DOUBLE
48123: EQUAL
48124: IFTRUE 48128
48126: GO 48190
48128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48129: LD_ADDR_VAR 0 12
48133: PUSH
48134: LD_VAR 0 18
48138: PPUSH
48139: LD_INT 22
48141: PUSH
48142: LD_VAR 0 16
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 30
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 30
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PPUSH
48183: CALL_OW 72
48187: ST_TO_ADDR
48188: GO 48272
48190: LD_INT 4
48192: DOUBLE
48193: EQUAL
48194: IFTRUE 48198
48196: GO 48271
48198: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48199: LD_ADDR_VAR 0 12
48203: PUSH
48204: LD_VAR 0 18
48208: PPUSH
48209: LD_INT 22
48211: PUSH
48212: LD_VAR 0 16
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 30
48226: PUSH
48227: LD_INT 6
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 30
48236: PUSH
48237: LD_INT 7
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 30
48246: PUSH
48247: LD_INT 8
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PPUSH
48264: CALL_OW 72
48268: ST_TO_ADDR
48269: GO 48272
48271: POP
// if i = 1 then
48272: LD_VAR 0 8
48276: PUSH
48277: LD_INT 1
48279: EQUAL
48280: IFFALSE 48391
// begin tmp := [ ] ;
48282: LD_ADDR_VAR 0 19
48286: PUSH
48287: EMPTY
48288: ST_TO_ADDR
// for j in f do
48289: LD_ADDR_VAR 0 9
48293: PUSH
48294: LD_VAR 0 12
48298: PUSH
48299: FOR_IN
48300: IFFALSE 48373
// if GetBType ( j ) = b_bunker then
48302: LD_VAR 0 9
48306: PPUSH
48307: CALL_OW 266
48311: PUSH
48312: LD_INT 32
48314: EQUAL
48315: IFFALSE 48342
// tmp := Insert ( tmp , 1 , j ) else
48317: LD_ADDR_VAR 0 19
48321: PUSH
48322: LD_VAR 0 19
48326: PPUSH
48327: LD_INT 1
48329: PPUSH
48330: LD_VAR 0 9
48334: PPUSH
48335: CALL_OW 2
48339: ST_TO_ADDR
48340: GO 48371
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48342: LD_ADDR_VAR 0 19
48346: PUSH
48347: LD_VAR 0 19
48351: PPUSH
48352: LD_VAR 0 19
48356: PUSH
48357: LD_INT 1
48359: PLUS
48360: PPUSH
48361: LD_VAR 0 9
48365: PPUSH
48366: CALL_OW 2
48370: ST_TO_ADDR
48371: GO 48299
48373: POP
48374: POP
// if tmp then
48375: LD_VAR 0 19
48379: IFFALSE 48391
// f := tmp ;
48381: LD_ADDR_VAR 0 12
48385: PUSH
48386: LD_VAR 0 19
48390: ST_TO_ADDR
// end ; x := personel [ i ] ;
48391: LD_ADDR_VAR 0 13
48395: PUSH
48396: LD_VAR 0 6
48400: PUSH
48401: LD_VAR 0 8
48405: ARRAY
48406: ST_TO_ADDR
// if x = - 1 then
48407: LD_VAR 0 13
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: EQUAL
48416: IFFALSE 48625
// begin for j in f do
48418: LD_ADDR_VAR 0 9
48422: PUSH
48423: LD_VAR 0 12
48427: PUSH
48428: FOR_IN
48429: IFFALSE 48621
// repeat InitHc ;
48431: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48435: LD_VAR 0 9
48439: PPUSH
48440: CALL_OW 266
48444: PUSH
48445: LD_INT 5
48447: EQUAL
48448: IFFALSE 48518
// begin if UnitsInside ( j ) < 3 then
48450: LD_VAR 0 9
48454: PPUSH
48455: CALL_OW 313
48459: PUSH
48460: LD_INT 3
48462: LESS
48463: IFFALSE 48499
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48465: LD_INT 0
48467: PPUSH
48468: LD_INT 5
48470: PUSH
48471: LD_INT 8
48473: PUSH
48474: LD_INT 9
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: PUSH
48482: LD_VAR 0 17
48486: ARRAY
48487: PPUSH
48488: LD_VAR 0 4
48492: PPUSH
48493: CALL_OW 380
48497: GO 48516
// PrepareHuman ( false , i , skill ) ;
48499: LD_INT 0
48501: PPUSH
48502: LD_VAR 0 8
48506: PPUSH
48507: LD_VAR 0 4
48511: PPUSH
48512: CALL_OW 380
// end else
48516: GO 48535
// PrepareHuman ( false , i , skill ) ;
48518: LD_INT 0
48520: PPUSH
48521: LD_VAR 0 8
48525: PPUSH
48526: LD_VAR 0 4
48530: PPUSH
48531: CALL_OW 380
// un := CreateHuman ;
48535: LD_ADDR_VAR 0 14
48539: PUSH
48540: CALL_OW 44
48544: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48545: LD_ADDR_VAR 0 7
48549: PUSH
48550: LD_VAR 0 7
48554: PPUSH
48555: LD_INT 1
48557: PPUSH
48558: LD_VAR 0 14
48562: PPUSH
48563: CALL_OW 2
48567: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48568: LD_VAR 0 14
48572: PPUSH
48573: LD_VAR 0 9
48577: PPUSH
48578: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48582: LD_VAR 0 9
48586: PPUSH
48587: CALL_OW 313
48591: PUSH
48592: LD_INT 6
48594: EQUAL
48595: PUSH
48596: LD_VAR 0 9
48600: PPUSH
48601: CALL_OW 266
48605: PUSH
48606: LD_INT 32
48608: PUSH
48609: LD_INT 31
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: IN
48616: OR
48617: IFFALSE 48431
48619: GO 48428
48621: POP
48622: POP
// end else
48623: GO 49005
// for j = 1 to x do
48625: LD_ADDR_VAR 0 9
48629: PUSH
48630: DOUBLE
48631: LD_INT 1
48633: DEC
48634: ST_TO_ADDR
48635: LD_VAR 0 13
48639: PUSH
48640: FOR_TO
48641: IFFALSE 49003
// begin InitHc ;
48643: CALL_OW 19
// if not f then
48647: LD_VAR 0 12
48651: NOT
48652: IFFALSE 48741
// begin PrepareHuman ( false , i , skill ) ;
48654: LD_INT 0
48656: PPUSH
48657: LD_VAR 0 8
48661: PPUSH
48662: LD_VAR 0 4
48666: PPUSH
48667: CALL_OW 380
// un := CreateHuman ;
48671: LD_ADDR_VAR 0 14
48675: PUSH
48676: CALL_OW 44
48680: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48681: LD_ADDR_VAR 0 7
48685: PUSH
48686: LD_VAR 0 7
48690: PPUSH
48691: LD_INT 1
48693: PPUSH
48694: LD_VAR 0 14
48698: PPUSH
48699: CALL_OW 2
48703: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48704: LD_VAR 0 14
48708: PPUSH
48709: LD_VAR 0 1
48713: PPUSH
48714: CALL_OW 250
48718: PPUSH
48719: LD_VAR 0 1
48723: PPUSH
48724: CALL_OW 251
48728: PPUSH
48729: LD_INT 10
48731: PPUSH
48732: LD_INT 0
48734: PPUSH
48735: CALL_OW 50
// continue ;
48739: GO 48640
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48741: LD_VAR 0 12
48745: PUSH
48746: LD_INT 1
48748: ARRAY
48749: PPUSH
48750: CALL_OW 313
48754: PUSH
48755: LD_VAR 0 12
48759: PUSH
48760: LD_INT 1
48762: ARRAY
48763: PPUSH
48764: CALL_OW 266
48768: PUSH
48769: LD_INT 32
48771: PUSH
48772: LD_INT 31
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: IN
48779: AND
48780: PUSH
48781: LD_VAR 0 12
48785: PUSH
48786: LD_INT 1
48788: ARRAY
48789: PPUSH
48790: CALL_OW 313
48794: PUSH
48795: LD_INT 6
48797: EQUAL
48798: OR
48799: IFFALSE 48819
// f := Delete ( f , 1 ) ;
48801: LD_ADDR_VAR 0 12
48805: PUSH
48806: LD_VAR 0 12
48810: PPUSH
48811: LD_INT 1
48813: PPUSH
48814: CALL_OW 3
48818: ST_TO_ADDR
// if not f then
48819: LD_VAR 0 12
48823: NOT
48824: IFFALSE 48842
// begin x := x + 2 ;
48826: LD_ADDR_VAR 0 13
48830: PUSH
48831: LD_VAR 0 13
48835: PUSH
48836: LD_INT 2
48838: PLUS
48839: ST_TO_ADDR
// continue ;
48840: GO 48640
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48842: LD_VAR 0 12
48846: PUSH
48847: LD_INT 1
48849: ARRAY
48850: PPUSH
48851: CALL_OW 266
48855: PUSH
48856: LD_INT 5
48858: EQUAL
48859: IFFALSE 48933
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48861: LD_VAR 0 12
48865: PUSH
48866: LD_INT 1
48868: ARRAY
48869: PPUSH
48870: CALL_OW 313
48874: PUSH
48875: LD_INT 3
48877: LESS
48878: IFFALSE 48914
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48880: LD_INT 0
48882: PPUSH
48883: LD_INT 5
48885: PUSH
48886: LD_INT 8
48888: PUSH
48889: LD_INT 9
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: PUSH
48897: LD_VAR 0 17
48901: ARRAY
48902: PPUSH
48903: LD_VAR 0 4
48907: PPUSH
48908: CALL_OW 380
48912: GO 48931
// PrepareHuman ( false , i , skill ) ;
48914: LD_INT 0
48916: PPUSH
48917: LD_VAR 0 8
48921: PPUSH
48922: LD_VAR 0 4
48926: PPUSH
48927: CALL_OW 380
// end else
48931: GO 48950
// PrepareHuman ( false , i , skill ) ;
48933: LD_INT 0
48935: PPUSH
48936: LD_VAR 0 8
48940: PPUSH
48941: LD_VAR 0 4
48945: PPUSH
48946: CALL_OW 380
// un := CreateHuman ;
48950: LD_ADDR_VAR 0 14
48954: PUSH
48955: CALL_OW 44
48959: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48960: LD_ADDR_VAR 0 7
48964: PUSH
48965: LD_VAR 0 7
48969: PPUSH
48970: LD_INT 1
48972: PPUSH
48973: LD_VAR 0 14
48977: PPUSH
48978: CALL_OW 2
48982: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48983: LD_VAR 0 14
48987: PPUSH
48988: LD_VAR 0 12
48992: PUSH
48993: LD_INT 1
48995: ARRAY
48996: PPUSH
48997: CALL_OW 52
// end ;
49001: GO 48640
49003: POP
49004: POP
// end ;
49005: GO 47942
49007: POP
49008: POP
// result := result ^ buildings ;
49009: LD_ADDR_VAR 0 7
49013: PUSH
49014: LD_VAR 0 7
49018: PUSH
49019: LD_VAR 0 18
49023: ADD
49024: ST_TO_ADDR
// end else
49025: GO 49168
// begin for i = 1 to personel do
49027: LD_ADDR_VAR 0 8
49031: PUSH
49032: DOUBLE
49033: LD_INT 1
49035: DEC
49036: ST_TO_ADDR
49037: LD_VAR 0 6
49041: PUSH
49042: FOR_TO
49043: IFFALSE 49166
// begin if i > 4 then
49045: LD_VAR 0 8
49049: PUSH
49050: LD_INT 4
49052: GREATER
49053: IFFALSE 49057
// break ;
49055: GO 49166
// x := personel [ i ] ;
49057: LD_ADDR_VAR 0 13
49061: PUSH
49062: LD_VAR 0 6
49066: PUSH
49067: LD_VAR 0 8
49071: ARRAY
49072: ST_TO_ADDR
// if x = - 1 then
49073: LD_VAR 0 13
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: EQUAL
49082: IFFALSE 49086
// continue ;
49084: GO 49042
// PrepareHuman ( false , i , skill ) ;
49086: LD_INT 0
49088: PPUSH
49089: LD_VAR 0 8
49093: PPUSH
49094: LD_VAR 0 4
49098: PPUSH
49099: CALL_OW 380
// un := CreateHuman ;
49103: LD_ADDR_VAR 0 14
49107: PUSH
49108: CALL_OW 44
49112: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49113: LD_VAR 0 14
49117: PPUSH
49118: LD_VAR 0 1
49122: PPUSH
49123: CALL_OW 250
49127: PPUSH
49128: LD_VAR 0 1
49132: PPUSH
49133: CALL_OW 251
49137: PPUSH
49138: LD_INT 10
49140: PPUSH
49141: LD_INT 0
49143: PPUSH
49144: CALL_OW 50
// result := result ^ un ;
49148: LD_ADDR_VAR 0 7
49152: PUSH
49153: LD_VAR 0 7
49157: PUSH
49158: LD_VAR 0 14
49162: ADD
49163: ST_TO_ADDR
// end ;
49164: GO 49042
49166: POP
49167: POP
// end ; end ;
49168: LD_VAR 0 7
49172: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49173: LD_INT 0
49175: PPUSH
49176: PPUSH
49177: PPUSH
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
49182: PPUSH
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
49189: PPUSH
49190: PPUSH
// result := false ;
49191: LD_ADDR_VAR 0 3
49195: PUSH
49196: LD_INT 0
49198: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49199: LD_VAR 0 1
49203: NOT
49204: PUSH
49205: LD_VAR 0 1
49209: PPUSH
49210: CALL_OW 266
49214: PUSH
49215: LD_INT 32
49217: PUSH
49218: LD_INT 33
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: IN
49225: NOT
49226: OR
49227: IFFALSE 49231
// exit ;
49229: GO 50340
// nat := GetNation ( tower ) ;
49231: LD_ADDR_VAR 0 12
49235: PUSH
49236: LD_VAR 0 1
49240: PPUSH
49241: CALL_OW 248
49245: ST_TO_ADDR
// side := GetSide ( tower ) ;
49246: LD_ADDR_VAR 0 16
49250: PUSH
49251: LD_VAR 0 1
49255: PPUSH
49256: CALL_OW 255
49260: ST_TO_ADDR
// x := GetX ( tower ) ;
49261: LD_ADDR_VAR 0 10
49265: PUSH
49266: LD_VAR 0 1
49270: PPUSH
49271: CALL_OW 250
49275: ST_TO_ADDR
// y := GetY ( tower ) ;
49276: LD_ADDR_VAR 0 11
49280: PUSH
49281: LD_VAR 0 1
49285: PPUSH
49286: CALL_OW 251
49290: ST_TO_ADDR
// if not x or not y then
49291: LD_VAR 0 10
49295: NOT
49296: PUSH
49297: LD_VAR 0 11
49301: NOT
49302: OR
49303: IFFALSE 49307
// exit ;
49305: GO 50340
// weapon := 0 ;
49307: LD_ADDR_VAR 0 18
49311: PUSH
49312: LD_INT 0
49314: ST_TO_ADDR
// fac_list := [ ] ;
49315: LD_ADDR_VAR 0 17
49319: PUSH
49320: EMPTY
49321: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49322: LD_ADDR_VAR 0 6
49326: PUSH
49327: LD_VAR 0 1
49331: PPUSH
49332: CALL_OW 274
49336: PPUSH
49337: LD_VAR 0 2
49341: PPUSH
49342: LD_INT 0
49344: PPUSH
49345: CALL 46911 0 3
49349: PPUSH
49350: LD_INT 30
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PPUSH
49360: CALL_OW 72
49364: ST_TO_ADDR
// if not factories then
49365: LD_VAR 0 6
49369: NOT
49370: IFFALSE 49374
// exit ;
49372: GO 50340
// for i in factories do
49374: LD_ADDR_VAR 0 8
49378: PUSH
49379: LD_VAR 0 6
49383: PUSH
49384: FOR_IN
49385: IFFALSE 49410
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49387: LD_ADDR_VAR 0 17
49391: PUSH
49392: LD_VAR 0 17
49396: PUSH
49397: LD_VAR 0 8
49401: PPUSH
49402: CALL_OW 478
49406: UNION
49407: ST_TO_ADDR
49408: GO 49384
49410: POP
49411: POP
// if not fac_list then
49412: LD_VAR 0 17
49416: NOT
49417: IFFALSE 49421
// exit ;
49419: GO 50340
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49421: LD_ADDR_VAR 0 5
49425: PUSH
49426: LD_INT 4
49428: PUSH
49429: LD_INT 5
49431: PUSH
49432: LD_INT 9
49434: PUSH
49435: LD_INT 10
49437: PUSH
49438: LD_INT 6
49440: PUSH
49441: LD_INT 7
49443: PUSH
49444: LD_INT 11
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 27
49458: PUSH
49459: LD_INT 28
49461: PUSH
49462: LD_INT 26
49464: PUSH
49465: LD_INT 30
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 43
49476: PUSH
49477: LD_INT 44
49479: PUSH
49480: LD_INT 46
49482: PUSH
49483: LD_INT 45
49485: PUSH
49486: LD_INT 47
49488: PUSH
49489: LD_INT 49
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: PUSH
49505: LD_VAR 0 12
49509: ARRAY
49510: ST_TO_ADDR
// list := list isect fac_list ;
49511: LD_ADDR_VAR 0 5
49515: PUSH
49516: LD_VAR 0 5
49520: PUSH
49521: LD_VAR 0 17
49525: ISECT
49526: ST_TO_ADDR
// if not list then
49527: LD_VAR 0 5
49531: NOT
49532: IFFALSE 49536
// exit ;
49534: GO 50340
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49536: LD_VAR 0 12
49540: PUSH
49541: LD_INT 3
49543: EQUAL
49544: PUSH
49545: LD_INT 49
49547: PUSH
49548: LD_VAR 0 5
49552: IN
49553: AND
49554: PUSH
49555: LD_INT 31
49557: PPUSH
49558: LD_VAR 0 16
49562: PPUSH
49563: CALL_OW 321
49567: PUSH
49568: LD_INT 2
49570: EQUAL
49571: AND
49572: IFFALSE 49632
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49574: LD_INT 22
49576: PUSH
49577: LD_VAR 0 16
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 35
49588: PUSH
49589: LD_INT 49
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 91
49598: PUSH
49599: LD_VAR 0 1
49603: PUSH
49604: LD_INT 10
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: PPUSH
49617: CALL_OW 69
49621: NOT
49622: IFFALSE 49632
// weapon := ru_time_lapser ;
49624: LD_ADDR_VAR 0 18
49628: PUSH
49629: LD_INT 49
49631: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49632: LD_VAR 0 12
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: IN
49647: PUSH
49648: LD_INT 11
49650: PUSH
49651: LD_VAR 0 5
49655: IN
49656: PUSH
49657: LD_INT 30
49659: PUSH
49660: LD_VAR 0 5
49664: IN
49665: OR
49666: AND
49667: PUSH
49668: LD_INT 6
49670: PPUSH
49671: LD_VAR 0 16
49675: PPUSH
49676: CALL_OW 321
49680: PUSH
49681: LD_INT 2
49683: EQUAL
49684: AND
49685: IFFALSE 49850
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49687: LD_INT 22
49689: PUSH
49690: LD_VAR 0 16
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 35
49704: PUSH
49705: LD_INT 11
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 35
49714: PUSH
49715: LD_INT 30
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 91
49729: PUSH
49730: LD_VAR 0 1
49734: PUSH
49735: LD_INT 18
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: PPUSH
49748: CALL_OW 69
49752: NOT
49753: PUSH
49754: LD_INT 22
49756: PUSH
49757: LD_VAR 0 16
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 30
49771: PUSH
49772: LD_INT 32
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 30
49781: PUSH
49782: LD_INT 33
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 91
49796: PUSH
49797: LD_VAR 0 1
49801: PUSH
49802: LD_INT 12
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: PPUSH
49818: CALL_OW 69
49822: PUSH
49823: LD_INT 2
49825: GREATER
49826: AND
49827: IFFALSE 49850
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49829: LD_ADDR_VAR 0 18
49833: PUSH
49834: LD_INT 11
49836: PUSH
49837: LD_INT 30
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_VAR 0 12
49848: ARRAY
49849: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49850: LD_VAR 0 18
49854: NOT
49855: PUSH
49856: LD_INT 40
49858: PPUSH
49859: LD_VAR 0 16
49863: PPUSH
49864: CALL_OW 321
49868: PUSH
49869: LD_INT 2
49871: EQUAL
49872: AND
49873: PUSH
49874: LD_INT 7
49876: PUSH
49877: LD_VAR 0 5
49881: IN
49882: PUSH
49883: LD_INT 28
49885: PUSH
49886: LD_VAR 0 5
49890: IN
49891: OR
49892: PUSH
49893: LD_INT 45
49895: PUSH
49896: LD_VAR 0 5
49900: IN
49901: OR
49902: AND
49903: IFFALSE 50157
// begin hex := GetHexInfo ( x , y ) ;
49905: LD_ADDR_VAR 0 4
49909: PUSH
49910: LD_VAR 0 10
49914: PPUSH
49915: LD_VAR 0 11
49919: PPUSH
49920: CALL_OW 546
49924: ST_TO_ADDR
// if hex [ 1 ] then
49925: LD_VAR 0 4
49929: PUSH
49930: LD_INT 1
49932: ARRAY
49933: IFFALSE 49937
// exit ;
49935: GO 50340
// height := hex [ 2 ] ;
49937: LD_ADDR_VAR 0 15
49941: PUSH
49942: LD_VAR 0 4
49946: PUSH
49947: LD_INT 2
49949: ARRAY
49950: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49951: LD_ADDR_VAR 0 14
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: LD_INT 5
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: ST_TO_ADDR
// for i in tmp do
49974: LD_ADDR_VAR 0 8
49978: PUSH
49979: LD_VAR 0 14
49983: PUSH
49984: FOR_IN
49985: IFFALSE 50155
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49987: LD_ADDR_VAR 0 9
49991: PUSH
49992: LD_VAR 0 10
49996: PPUSH
49997: LD_VAR 0 8
50001: PPUSH
50002: LD_INT 5
50004: PPUSH
50005: CALL_OW 272
50009: PUSH
50010: LD_VAR 0 11
50014: PPUSH
50015: LD_VAR 0 8
50019: PPUSH
50020: LD_INT 5
50022: PPUSH
50023: CALL_OW 273
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50032: LD_VAR 0 9
50036: PUSH
50037: LD_INT 1
50039: ARRAY
50040: PPUSH
50041: LD_VAR 0 9
50045: PUSH
50046: LD_INT 2
50048: ARRAY
50049: PPUSH
50050: CALL_OW 488
50054: IFFALSE 50153
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50056: LD_ADDR_VAR 0 4
50060: PUSH
50061: LD_VAR 0 9
50065: PUSH
50066: LD_INT 1
50068: ARRAY
50069: PPUSH
50070: LD_VAR 0 9
50074: PUSH
50075: LD_INT 2
50077: ARRAY
50078: PPUSH
50079: CALL_OW 546
50083: ST_TO_ADDR
// if hex [ 1 ] then
50084: LD_VAR 0 4
50088: PUSH
50089: LD_INT 1
50091: ARRAY
50092: IFFALSE 50096
// continue ;
50094: GO 49984
// h := hex [ 2 ] ;
50096: LD_ADDR_VAR 0 13
50100: PUSH
50101: LD_VAR 0 4
50105: PUSH
50106: LD_INT 2
50108: ARRAY
50109: ST_TO_ADDR
// if h + 7 < height then
50110: LD_VAR 0 13
50114: PUSH
50115: LD_INT 7
50117: PLUS
50118: PUSH
50119: LD_VAR 0 15
50123: LESS
50124: IFFALSE 50153
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50126: LD_ADDR_VAR 0 18
50130: PUSH
50131: LD_INT 7
50133: PUSH
50134: LD_INT 28
50136: PUSH
50137: LD_INT 45
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: LIST
50144: PUSH
50145: LD_VAR 0 12
50149: ARRAY
50150: ST_TO_ADDR
// break ;
50151: GO 50155
// end ; end ; end ;
50153: GO 49984
50155: POP
50156: POP
// end ; if not weapon then
50157: LD_VAR 0 18
50161: NOT
50162: IFFALSE 50222
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50164: LD_ADDR_VAR 0 5
50168: PUSH
50169: LD_VAR 0 5
50173: PUSH
50174: LD_INT 11
50176: PUSH
50177: LD_INT 30
50179: PUSH
50180: LD_INT 49
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: DIFF
50188: ST_TO_ADDR
// if not list then
50189: LD_VAR 0 5
50193: NOT
50194: IFFALSE 50198
// exit ;
50196: GO 50340
// weapon := list [ rand ( 1 , list ) ] ;
50198: LD_ADDR_VAR 0 18
50202: PUSH
50203: LD_VAR 0 5
50207: PUSH
50208: LD_INT 1
50210: PPUSH
50211: LD_VAR 0 5
50215: PPUSH
50216: CALL_OW 12
50220: ARRAY
50221: ST_TO_ADDR
// end ; if weapon then
50222: LD_VAR 0 18
50226: IFFALSE 50340
// begin tmp := CostOfWeapon ( weapon ) ;
50228: LD_ADDR_VAR 0 14
50232: PUSH
50233: LD_VAR 0 18
50237: PPUSH
50238: CALL_OW 451
50242: ST_TO_ADDR
// j := GetBase ( tower ) ;
50243: LD_ADDR_VAR 0 9
50247: PUSH
50248: LD_VAR 0 1
50252: PPUSH
50253: CALL_OW 274
50257: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50258: LD_VAR 0 9
50262: PPUSH
50263: LD_INT 1
50265: PPUSH
50266: CALL_OW 275
50270: PUSH
50271: LD_VAR 0 14
50275: PUSH
50276: LD_INT 1
50278: ARRAY
50279: GREATEREQUAL
50280: PUSH
50281: LD_VAR 0 9
50285: PPUSH
50286: LD_INT 2
50288: PPUSH
50289: CALL_OW 275
50293: PUSH
50294: LD_VAR 0 14
50298: PUSH
50299: LD_INT 2
50301: ARRAY
50302: GREATEREQUAL
50303: AND
50304: PUSH
50305: LD_VAR 0 9
50309: PPUSH
50310: LD_INT 3
50312: PPUSH
50313: CALL_OW 275
50317: PUSH
50318: LD_VAR 0 14
50322: PUSH
50323: LD_INT 3
50325: ARRAY
50326: GREATEREQUAL
50327: AND
50328: IFFALSE 50340
// result := weapon ;
50330: LD_ADDR_VAR 0 3
50334: PUSH
50335: LD_VAR 0 18
50339: ST_TO_ADDR
// end ; end ;
50340: LD_VAR 0 3
50344: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50345: LD_INT 0
50347: PPUSH
50348: PPUSH
// result := true ;
50349: LD_ADDR_VAR 0 3
50353: PUSH
50354: LD_INT 1
50356: ST_TO_ADDR
// if array1 = array2 then
50357: LD_VAR 0 1
50361: PUSH
50362: LD_VAR 0 2
50366: EQUAL
50367: IFFALSE 50427
// begin for i = 1 to array1 do
50369: LD_ADDR_VAR 0 4
50373: PUSH
50374: DOUBLE
50375: LD_INT 1
50377: DEC
50378: ST_TO_ADDR
50379: LD_VAR 0 1
50383: PUSH
50384: FOR_TO
50385: IFFALSE 50423
// if array1 [ i ] <> array2 [ i ] then
50387: LD_VAR 0 1
50391: PUSH
50392: LD_VAR 0 4
50396: ARRAY
50397: PUSH
50398: LD_VAR 0 2
50402: PUSH
50403: LD_VAR 0 4
50407: ARRAY
50408: NONEQUAL
50409: IFFALSE 50421
// begin result := false ;
50411: LD_ADDR_VAR 0 3
50415: PUSH
50416: LD_INT 0
50418: ST_TO_ADDR
// break ;
50419: GO 50423
// end ;
50421: GO 50384
50423: POP
50424: POP
// end else
50425: GO 50435
// result := false ;
50427: LD_ADDR_VAR 0 3
50431: PUSH
50432: LD_INT 0
50434: ST_TO_ADDR
// end ;
50435: LD_VAR 0 3
50439: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50440: LD_INT 0
50442: PPUSH
50443: PPUSH
// if not array1 or not array2 then
50444: LD_VAR 0 1
50448: NOT
50449: PUSH
50450: LD_VAR 0 2
50454: NOT
50455: OR
50456: IFFALSE 50460
// exit ;
50458: GO 50524
// result := true ;
50460: LD_ADDR_VAR 0 3
50464: PUSH
50465: LD_INT 1
50467: ST_TO_ADDR
// for i = 1 to array1 do
50468: LD_ADDR_VAR 0 4
50472: PUSH
50473: DOUBLE
50474: LD_INT 1
50476: DEC
50477: ST_TO_ADDR
50478: LD_VAR 0 1
50482: PUSH
50483: FOR_TO
50484: IFFALSE 50522
// if array1 [ i ] <> array2 [ i ] then
50486: LD_VAR 0 1
50490: PUSH
50491: LD_VAR 0 4
50495: ARRAY
50496: PUSH
50497: LD_VAR 0 2
50501: PUSH
50502: LD_VAR 0 4
50506: ARRAY
50507: NONEQUAL
50508: IFFALSE 50520
// begin result := false ;
50510: LD_ADDR_VAR 0 3
50514: PUSH
50515: LD_INT 0
50517: ST_TO_ADDR
// break ;
50518: GO 50522
// end ;
50520: GO 50483
50522: POP
50523: POP
// end ;
50524: LD_VAR 0 3
50528: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50529: LD_INT 0
50531: PPUSH
50532: PPUSH
50533: PPUSH
// pom := GetBase ( fac ) ;
50534: LD_ADDR_VAR 0 5
50538: PUSH
50539: LD_VAR 0 1
50543: PPUSH
50544: CALL_OW 274
50548: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50549: LD_ADDR_VAR 0 4
50553: PUSH
50554: LD_VAR 0 2
50558: PUSH
50559: LD_INT 1
50561: ARRAY
50562: PPUSH
50563: LD_VAR 0 2
50567: PUSH
50568: LD_INT 2
50570: ARRAY
50571: PPUSH
50572: LD_VAR 0 2
50576: PUSH
50577: LD_INT 3
50579: ARRAY
50580: PPUSH
50581: LD_VAR 0 2
50585: PUSH
50586: LD_INT 4
50588: ARRAY
50589: PPUSH
50590: CALL_OW 449
50594: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50595: LD_ADDR_VAR 0 3
50599: PUSH
50600: LD_VAR 0 5
50604: PPUSH
50605: LD_INT 1
50607: PPUSH
50608: CALL_OW 275
50612: PUSH
50613: LD_VAR 0 4
50617: PUSH
50618: LD_INT 1
50620: ARRAY
50621: GREATEREQUAL
50622: PUSH
50623: LD_VAR 0 5
50627: PPUSH
50628: LD_INT 2
50630: PPUSH
50631: CALL_OW 275
50635: PUSH
50636: LD_VAR 0 4
50640: PUSH
50641: LD_INT 2
50643: ARRAY
50644: GREATEREQUAL
50645: AND
50646: PUSH
50647: LD_VAR 0 5
50651: PPUSH
50652: LD_INT 3
50654: PPUSH
50655: CALL_OW 275
50659: PUSH
50660: LD_VAR 0 4
50664: PUSH
50665: LD_INT 3
50667: ARRAY
50668: GREATEREQUAL
50669: AND
50670: ST_TO_ADDR
// end ;
50671: LD_VAR 0 3
50675: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50676: LD_INT 0
50678: PPUSH
50679: PPUSH
50680: PPUSH
50681: PPUSH
// pom := GetBase ( building ) ;
50682: LD_ADDR_VAR 0 3
50686: PUSH
50687: LD_VAR 0 1
50691: PPUSH
50692: CALL_OW 274
50696: ST_TO_ADDR
// if not pom then
50697: LD_VAR 0 3
50701: NOT
50702: IFFALSE 50706
// exit ;
50704: GO 50876
// btype := GetBType ( building ) ;
50706: LD_ADDR_VAR 0 5
50710: PUSH
50711: LD_VAR 0 1
50715: PPUSH
50716: CALL_OW 266
50720: ST_TO_ADDR
// if btype = b_armoury then
50721: LD_VAR 0 5
50725: PUSH
50726: LD_INT 4
50728: EQUAL
50729: IFFALSE 50739
// btype := b_barracks ;
50731: LD_ADDR_VAR 0 5
50735: PUSH
50736: LD_INT 5
50738: ST_TO_ADDR
// if btype = b_depot then
50739: LD_VAR 0 5
50743: PUSH
50744: LD_INT 0
50746: EQUAL
50747: IFFALSE 50757
// btype := b_warehouse ;
50749: LD_ADDR_VAR 0 5
50753: PUSH
50754: LD_INT 1
50756: ST_TO_ADDR
// if btype = b_workshop then
50757: LD_VAR 0 5
50761: PUSH
50762: LD_INT 2
50764: EQUAL
50765: IFFALSE 50775
// btype := b_factory ;
50767: LD_ADDR_VAR 0 5
50771: PUSH
50772: LD_INT 3
50774: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50775: LD_ADDR_VAR 0 4
50779: PUSH
50780: LD_VAR 0 5
50784: PPUSH
50785: LD_VAR 0 1
50789: PPUSH
50790: CALL_OW 248
50794: PPUSH
50795: CALL_OW 450
50799: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50800: LD_ADDR_VAR 0 2
50804: PUSH
50805: LD_VAR 0 3
50809: PPUSH
50810: LD_INT 1
50812: PPUSH
50813: CALL_OW 275
50817: PUSH
50818: LD_VAR 0 4
50822: PUSH
50823: LD_INT 1
50825: ARRAY
50826: GREATEREQUAL
50827: PUSH
50828: LD_VAR 0 3
50832: PPUSH
50833: LD_INT 2
50835: PPUSH
50836: CALL_OW 275
50840: PUSH
50841: LD_VAR 0 4
50845: PUSH
50846: LD_INT 2
50848: ARRAY
50849: GREATEREQUAL
50850: AND
50851: PUSH
50852: LD_VAR 0 3
50856: PPUSH
50857: LD_INT 3
50859: PPUSH
50860: CALL_OW 275
50864: PUSH
50865: LD_VAR 0 4
50869: PUSH
50870: LD_INT 3
50872: ARRAY
50873: GREATEREQUAL
50874: AND
50875: ST_TO_ADDR
// end ;
50876: LD_VAR 0 2
50880: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50881: LD_INT 0
50883: PPUSH
50884: PPUSH
50885: PPUSH
// pom := GetBase ( building ) ;
50886: LD_ADDR_VAR 0 4
50890: PUSH
50891: LD_VAR 0 1
50895: PPUSH
50896: CALL_OW 274
50900: ST_TO_ADDR
// if not pom then
50901: LD_VAR 0 4
50905: NOT
50906: IFFALSE 50910
// exit ;
50908: GO 51011
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50910: LD_ADDR_VAR 0 5
50914: PUSH
50915: LD_VAR 0 2
50919: PPUSH
50920: LD_VAR 0 1
50924: PPUSH
50925: CALL_OW 248
50929: PPUSH
50930: CALL_OW 450
50934: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50935: LD_ADDR_VAR 0 3
50939: PUSH
50940: LD_VAR 0 4
50944: PPUSH
50945: LD_INT 1
50947: PPUSH
50948: CALL_OW 275
50952: PUSH
50953: LD_VAR 0 5
50957: PUSH
50958: LD_INT 1
50960: ARRAY
50961: GREATEREQUAL
50962: PUSH
50963: LD_VAR 0 4
50967: PPUSH
50968: LD_INT 2
50970: PPUSH
50971: CALL_OW 275
50975: PUSH
50976: LD_VAR 0 5
50980: PUSH
50981: LD_INT 2
50983: ARRAY
50984: GREATEREQUAL
50985: AND
50986: PUSH
50987: LD_VAR 0 4
50991: PPUSH
50992: LD_INT 3
50994: PPUSH
50995: CALL_OW 275
50999: PUSH
51000: LD_VAR 0 5
51004: PUSH
51005: LD_INT 3
51007: ARRAY
51008: GREATEREQUAL
51009: AND
51010: ST_TO_ADDR
// end ;
51011: LD_VAR 0 3
51015: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51016: LD_INT 0
51018: PPUSH
51019: PPUSH
51020: PPUSH
51021: PPUSH
51022: PPUSH
51023: PPUSH
51024: PPUSH
51025: PPUSH
51026: PPUSH
51027: PPUSH
51028: PPUSH
// result := false ;
51029: LD_ADDR_VAR 0 8
51033: PUSH
51034: LD_INT 0
51036: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51037: LD_VAR 0 5
51041: NOT
51042: PUSH
51043: LD_VAR 0 1
51047: NOT
51048: OR
51049: PUSH
51050: LD_VAR 0 2
51054: NOT
51055: OR
51056: PUSH
51057: LD_VAR 0 3
51061: NOT
51062: OR
51063: IFFALSE 51067
// exit ;
51065: GO 51881
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51067: LD_ADDR_VAR 0 14
51071: PUSH
51072: LD_VAR 0 1
51076: PPUSH
51077: LD_VAR 0 2
51081: PPUSH
51082: LD_VAR 0 3
51086: PPUSH
51087: LD_VAR 0 4
51091: PPUSH
51092: LD_VAR 0 5
51096: PUSH
51097: LD_INT 1
51099: ARRAY
51100: PPUSH
51101: CALL_OW 248
51105: PPUSH
51106: LD_INT 0
51108: PPUSH
51109: CALL 53118 0 6
51113: ST_TO_ADDR
// if not hexes then
51114: LD_VAR 0 14
51118: NOT
51119: IFFALSE 51123
// exit ;
51121: GO 51881
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51123: LD_ADDR_VAR 0 17
51127: PUSH
51128: LD_VAR 0 5
51132: PPUSH
51133: LD_INT 22
51135: PUSH
51136: LD_VAR 0 13
51140: PPUSH
51141: CALL_OW 255
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 30
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 30
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PPUSH
51182: CALL_OW 72
51186: ST_TO_ADDR
// for i = 1 to hexes do
51187: LD_ADDR_VAR 0 9
51191: PUSH
51192: DOUBLE
51193: LD_INT 1
51195: DEC
51196: ST_TO_ADDR
51197: LD_VAR 0 14
51201: PUSH
51202: FOR_TO
51203: IFFALSE 51879
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51205: LD_ADDR_VAR 0 13
51209: PUSH
51210: LD_VAR 0 14
51214: PUSH
51215: LD_VAR 0 9
51219: ARRAY
51220: PUSH
51221: LD_INT 1
51223: ARRAY
51224: PPUSH
51225: LD_VAR 0 14
51229: PUSH
51230: LD_VAR 0 9
51234: ARRAY
51235: PUSH
51236: LD_INT 2
51238: ARRAY
51239: PPUSH
51240: CALL_OW 428
51244: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51245: LD_VAR 0 14
51249: PUSH
51250: LD_VAR 0 9
51254: ARRAY
51255: PUSH
51256: LD_INT 1
51258: ARRAY
51259: PPUSH
51260: LD_VAR 0 14
51264: PUSH
51265: LD_VAR 0 9
51269: ARRAY
51270: PUSH
51271: LD_INT 2
51273: ARRAY
51274: PPUSH
51275: CALL_OW 351
51279: PUSH
51280: LD_VAR 0 14
51284: PUSH
51285: LD_VAR 0 9
51289: ARRAY
51290: PUSH
51291: LD_INT 1
51293: ARRAY
51294: PPUSH
51295: LD_VAR 0 14
51299: PUSH
51300: LD_VAR 0 9
51304: ARRAY
51305: PUSH
51306: LD_INT 2
51308: ARRAY
51309: PPUSH
51310: CALL_OW 488
51314: NOT
51315: OR
51316: PUSH
51317: LD_VAR 0 13
51321: PPUSH
51322: CALL_OW 247
51326: PUSH
51327: LD_INT 3
51329: EQUAL
51330: OR
51331: IFFALSE 51337
// exit ;
51333: POP
51334: POP
51335: GO 51881
// if not tmp then
51337: LD_VAR 0 13
51341: NOT
51342: IFFALSE 51346
// continue ;
51344: GO 51202
// result := true ;
51346: LD_ADDR_VAR 0 8
51350: PUSH
51351: LD_INT 1
51353: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51354: LD_VAR 0 6
51358: PUSH
51359: LD_VAR 0 13
51363: PPUSH
51364: CALL_OW 247
51368: PUSH
51369: LD_INT 2
51371: EQUAL
51372: AND
51373: PUSH
51374: LD_VAR 0 13
51378: PPUSH
51379: CALL_OW 263
51383: PUSH
51384: LD_INT 1
51386: EQUAL
51387: AND
51388: IFFALSE 51552
// begin if IsDrivenBy ( tmp ) then
51390: LD_VAR 0 13
51394: PPUSH
51395: CALL_OW 311
51399: IFFALSE 51403
// continue ;
51401: GO 51202
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51403: LD_VAR 0 6
51407: PPUSH
51408: LD_INT 3
51410: PUSH
51411: LD_INT 60
51413: PUSH
51414: EMPTY
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 55
51426: PUSH
51427: EMPTY
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PPUSH
51438: CALL_OW 72
51442: IFFALSE 51550
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51444: LD_ADDR_VAR 0 18
51448: PUSH
51449: LD_VAR 0 6
51453: PPUSH
51454: LD_INT 3
51456: PUSH
51457: LD_INT 60
51459: PUSH
51460: EMPTY
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: LD_INT 55
51472: PUSH
51473: EMPTY
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PPUSH
51484: CALL_OW 72
51488: PUSH
51489: LD_INT 1
51491: ARRAY
51492: ST_TO_ADDR
// if IsInUnit ( driver ) then
51493: LD_VAR 0 18
51497: PPUSH
51498: CALL_OW 310
51502: IFFALSE 51513
// ComExit ( driver ) ;
51504: LD_VAR 0 18
51508: PPUSH
51509: CALL 76823 0 1
// AddComEnterUnit ( driver , tmp ) ;
51513: LD_VAR 0 18
51517: PPUSH
51518: LD_VAR 0 13
51522: PPUSH
51523: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51527: LD_VAR 0 18
51531: PPUSH
51532: LD_VAR 0 7
51536: PPUSH
51537: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51541: LD_VAR 0 18
51545: PPUSH
51546: CALL_OW 181
// end ; continue ;
51550: GO 51202
// end ; if not cleaners or not tmp in cleaners then
51552: LD_VAR 0 6
51556: NOT
51557: PUSH
51558: LD_VAR 0 13
51562: PUSH
51563: LD_VAR 0 6
51567: IN
51568: NOT
51569: OR
51570: IFFALSE 51877
// begin if dep then
51572: LD_VAR 0 17
51576: IFFALSE 51712
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51578: LD_ADDR_VAR 0 16
51582: PUSH
51583: LD_VAR 0 17
51587: PUSH
51588: LD_INT 1
51590: ARRAY
51591: PPUSH
51592: CALL_OW 250
51596: PPUSH
51597: LD_VAR 0 17
51601: PUSH
51602: LD_INT 1
51604: ARRAY
51605: PPUSH
51606: CALL_OW 254
51610: PPUSH
51611: LD_INT 5
51613: PPUSH
51614: CALL_OW 272
51618: PUSH
51619: LD_VAR 0 17
51623: PUSH
51624: LD_INT 1
51626: ARRAY
51627: PPUSH
51628: CALL_OW 251
51632: PPUSH
51633: LD_VAR 0 17
51637: PUSH
51638: LD_INT 1
51640: ARRAY
51641: PPUSH
51642: CALL_OW 254
51646: PPUSH
51647: LD_INT 5
51649: PPUSH
51650: CALL_OW 273
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51659: LD_VAR 0 16
51663: PUSH
51664: LD_INT 1
51666: ARRAY
51667: PPUSH
51668: LD_VAR 0 16
51672: PUSH
51673: LD_INT 2
51675: ARRAY
51676: PPUSH
51677: CALL_OW 488
51681: IFFALSE 51712
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51683: LD_VAR 0 13
51687: PPUSH
51688: LD_VAR 0 16
51692: PUSH
51693: LD_INT 1
51695: ARRAY
51696: PPUSH
51697: LD_VAR 0 16
51701: PUSH
51702: LD_INT 2
51704: ARRAY
51705: PPUSH
51706: CALL_OW 111
// continue ;
51710: GO 51202
// end ; end ; r := GetDir ( tmp ) ;
51712: LD_ADDR_VAR 0 15
51716: PUSH
51717: LD_VAR 0 13
51721: PPUSH
51722: CALL_OW 254
51726: ST_TO_ADDR
// if r = 5 then
51727: LD_VAR 0 15
51731: PUSH
51732: LD_INT 5
51734: EQUAL
51735: IFFALSE 51745
// r := 0 ;
51737: LD_ADDR_VAR 0 15
51741: PUSH
51742: LD_INT 0
51744: ST_TO_ADDR
// for j = r to 5 do
51745: LD_ADDR_VAR 0 10
51749: PUSH
51750: DOUBLE
51751: LD_VAR 0 15
51755: DEC
51756: ST_TO_ADDR
51757: LD_INT 5
51759: PUSH
51760: FOR_TO
51761: IFFALSE 51875
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51763: LD_ADDR_VAR 0 11
51767: PUSH
51768: LD_VAR 0 13
51772: PPUSH
51773: CALL_OW 250
51777: PPUSH
51778: LD_VAR 0 10
51782: PPUSH
51783: LD_INT 2
51785: PPUSH
51786: CALL_OW 272
51790: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51791: LD_ADDR_VAR 0 12
51795: PUSH
51796: LD_VAR 0 13
51800: PPUSH
51801: CALL_OW 251
51805: PPUSH
51806: LD_VAR 0 10
51810: PPUSH
51811: LD_INT 2
51813: PPUSH
51814: CALL_OW 273
51818: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51819: LD_VAR 0 11
51823: PPUSH
51824: LD_VAR 0 12
51828: PPUSH
51829: CALL_OW 488
51833: PUSH
51834: LD_VAR 0 11
51838: PPUSH
51839: LD_VAR 0 12
51843: PPUSH
51844: CALL_OW 428
51848: NOT
51849: AND
51850: IFFALSE 51873
// begin ComMoveXY ( tmp , _x , _y ) ;
51852: LD_VAR 0 13
51856: PPUSH
51857: LD_VAR 0 11
51861: PPUSH
51862: LD_VAR 0 12
51866: PPUSH
51867: CALL_OW 111
// break ;
51871: GO 51875
// end ; end ;
51873: GO 51760
51875: POP
51876: POP
// end ; end ;
51877: GO 51202
51879: POP
51880: POP
// end ;
51881: LD_VAR 0 8
51885: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51886: LD_INT 0
51888: PPUSH
// result := true ;
51889: LD_ADDR_VAR 0 3
51893: PUSH
51894: LD_INT 1
51896: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51897: LD_VAR 0 2
51901: PUSH
51902: LD_INT 24
51904: DOUBLE
51905: EQUAL
51906: IFTRUE 51916
51908: LD_INT 33
51910: DOUBLE
51911: EQUAL
51912: IFTRUE 51916
51914: GO 51941
51916: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51917: LD_ADDR_VAR 0 3
51921: PUSH
51922: LD_INT 32
51924: PPUSH
51925: LD_VAR 0 1
51929: PPUSH
51930: CALL_OW 321
51934: PUSH
51935: LD_INT 2
51937: EQUAL
51938: ST_TO_ADDR
51939: GO 52261
51941: LD_INT 20
51943: DOUBLE
51944: EQUAL
51945: IFTRUE 51949
51947: GO 51974
51949: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51950: LD_ADDR_VAR 0 3
51954: PUSH
51955: LD_INT 6
51957: PPUSH
51958: LD_VAR 0 1
51962: PPUSH
51963: CALL_OW 321
51967: PUSH
51968: LD_INT 2
51970: EQUAL
51971: ST_TO_ADDR
51972: GO 52261
51974: LD_INT 22
51976: DOUBLE
51977: EQUAL
51978: IFTRUE 51988
51980: LD_INT 36
51982: DOUBLE
51983: EQUAL
51984: IFTRUE 51988
51986: GO 52013
51988: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51989: LD_ADDR_VAR 0 3
51993: PUSH
51994: LD_INT 15
51996: PPUSH
51997: LD_VAR 0 1
52001: PPUSH
52002: CALL_OW 321
52006: PUSH
52007: LD_INT 2
52009: EQUAL
52010: ST_TO_ADDR
52011: GO 52261
52013: LD_INT 30
52015: DOUBLE
52016: EQUAL
52017: IFTRUE 52021
52019: GO 52046
52021: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52022: LD_ADDR_VAR 0 3
52026: PUSH
52027: LD_INT 20
52029: PPUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 321
52039: PUSH
52040: LD_INT 2
52042: EQUAL
52043: ST_TO_ADDR
52044: GO 52261
52046: LD_INT 28
52048: DOUBLE
52049: EQUAL
52050: IFTRUE 52060
52052: LD_INT 21
52054: DOUBLE
52055: EQUAL
52056: IFTRUE 52060
52058: GO 52085
52060: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52061: LD_ADDR_VAR 0 3
52065: PUSH
52066: LD_INT 21
52068: PPUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 321
52078: PUSH
52079: LD_INT 2
52081: EQUAL
52082: ST_TO_ADDR
52083: GO 52261
52085: LD_INT 16
52087: DOUBLE
52088: EQUAL
52089: IFTRUE 52093
52091: GO 52120
52093: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52094: LD_ADDR_VAR 0 3
52098: PUSH
52099: LD_EXP 58
52103: PPUSH
52104: LD_VAR 0 1
52108: PPUSH
52109: CALL_OW 321
52113: PUSH
52114: LD_INT 2
52116: EQUAL
52117: ST_TO_ADDR
52118: GO 52261
52120: LD_INT 19
52122: DOUBLE
52123: EQUAL
52124: IFTRUE 52134
52126: LD_INT 23
52128: DOUBLE
52129: EQUAL
52130: IFTRUE 52134
52132: GO 52161
52134: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52135: LD_ADDR_VAR 0 3
52139: PUSH
52140: LD_EXP 57
52144: PPUSH
52145: LD_VAR 0 1
52149: PPUSH
52150: CALL_OW 321
52154: PUSH
52155: LD_INT 2
52157: EQUAL
52158: ST_TO_ADDR
52159: GO 52261
52161: LD_INT 17
52163: DOUBLE
52164: EQUAL
52165: IFTRUE 52169
52167: GO 52194
52169: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52170: LD_ADDR_VAR 0 3
52174: PUSH
52175: LD_INT 39
52177: PPUSH
52178: LD_VAR 0 1
52182: PPUSH
52183: CALL_OW 321
52187: PUSH
52188: LD_INT 2
52190: EQUAL
52191: ST_TO_ADDR
52192: GO 52261
52194: LD_INT 18
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52202
52200: GO 52227
52202: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52203: LD_ADDR_VAR 0 3
52207: PUSH
52208: LD_INT 40
52210: PPUSH
52211: LD_VAR 0 1
52215: PPUSH
52216: CALL_OW 321
52220: PUSH
52221: LD_INT 2
52223: EQUAL
52224: ST_TO_ADDR
52225: GO 52261
52227: LD_INT 27
52229: DOUBLE
52230: EQUAL
52231: IFTRUE 52235
52233: GO 52260
52235: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52236: LD_ADDR_VAR 0 3
52240: PUSH
52241: LD_INT 35
52243: PPUSH
52244: LD_VAR 0 1
52248: PPUSH
52249: CALL_OW 321
52253: PUSH
52254: LD_INT 2
52256: EQUAL
52257: ST_TO_ADDR
52258: GO 52261
52260: POP
// end ;
52261: LD_VAR 0 3
52265: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52266: LD_INT 0
52268: PPUSH
52269: PPUSH
52270: PPUSH
52271: PPUSH
52272: PPUSH
52273: PPUSH
52274: PPUSH
52275: PPUSH
52276: PPUSH
52277: PPUSH
52278: PPUSH
// result := false ;
52279: LD_ADDR_VAR 0 6
52283: PUSH
52284: LD_INT 0
52286: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52287: LD_VAR 0 1
52291: NOT
52292: PUSH
52293: LD_VAR 0 1
52297: PPUSH
52298: CALL_OW 266
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: IN
52313: NOT
52314: OR
52315: PUSH
52316: LD_VAR 0 2
52320: NOT
52321: OR
52322: PUSH
52323: LD_VAR 0 5
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: LD_INT 4
52342: PUSH
52343: LD_INT 5
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: IN
52354: NOT
52355: OR
52356: PUSH
52357: LD_VAR 0 3
52361: PPUSH
52362: LD_VAR 0 4
52366: PPUSH
52367: CALL_OW 488
52371: NOT
52372: OR
52373: IFFALSE 52377
// exit ;
52375: GO 53113
// side := GetSide ( depot ) ;
52377: LD_ADDR_VAR 0 9
52381: PUSH
52382: LD_VAR 0 1
52386: PPUSH
52387: CALL_OW 255
52391: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52392: LD_VAR 0 9
52396: PPUSH
52397: LD_VAR 0 2
52401: PPUSH
52402: CALL 51886 0 2
52406: NOT
52407: IFFALSE 52411
// exit ;
52409: GO 53113
// pom := GetBase ( depot ) ;
52411: LD_ADDR_VAR 0 10
52415: PUSH
52416: LD_VAR 0 1
52420: PPUSH
52421: CALL_OW 274
52425: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52426: LD_ADDR_VAR 0 11
52430: PUSH
52431: LD_VAR 0 2
52435: PPUSH
52436: LD_VAR 0 1
52440: PPUSH
52441: CALL_OW 248
52445: PPUSH
52446: CALL_OW 450
52450: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52451: LD_VAR 0 10
52455: PPUSH
52456: LD_INT 1
52458: PPUSH
52459: CALL_OW 275
52463: PUSH
52464: LD_VAR 0 11
52468: PUSH
52469: LD_INT 1
52471: ARRAY
52472: GREATEREQUAL
52473: PUSH
52474: LD_VAR 0 10
52478: PPUSH
52479: LD_INT 2
52481: PPUSH
52482: CALL_OW 275
52486: PUSH
52487: LD_VAR 0 11
52491: PUSH
52492: LD_INT 2
52494: ARRAY
52495: GREATEREQUAL
52496: AND
52497: PUSH
52498: LD_VAR 0 10
52502: PPUSH
52503: LD_INT 3
52505: PPUSH
52506: CALL_OW 275
52510: PUSH
52511: LD_VAR 0 11
52515: PUSH
52516: LD_INT 3
52518: ARRAY
52519: GREATEREQUAL
52520: AND
52521: NOT
52522: IFFALSE 52526
// exit ;
52524: GO 53113
// if GetBType ( depot ) = b_depot then
52526: LD_VAR 0 1
52530: PPUSH
52531: CALL_OW 266
52535: PUSH
52536: LD_INT 0
52538: EQUAL
52539: IFFALSE 52551
// dist := 28 else
52541: LD_ADDR_VAR 0 14
52545: PUSH
52546: LD_INT 28
52548: ST_TO_ADDR
52549: GO 52559
// dist := 36 ;
52551: LD_ADDR_VAR 0 14
52555: PUSH
52556: LD_INT 36
52558: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52559: LD_VAR 0 1
52563: PPUSH
52564: LD_VAR 0 3
52568: PPUSH
52569: LD_VAR 0 4
52573: PPUSH
52574: CALL_OW 297
52578: PUSH
52579: LD_VAR 0 14
52583: GREATER
52584: IFFALSE 52588
// exit ;
52586: GO 53113
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52588: LD_ADDR_VAR 0 12
52592: PUSH
52593: LD_VAR 0 2
52597: PPUSH
52598: LD_VAR 0 3
52602: PPUSH
52603: LD_VAR 0 4
52607: PPUSH
52608: LD_VAR 0 5
52612: PPUSH
52613: LD_VAR 0 1
52617: PPUSH
52618: CALL_OW 248
52622: PPUSH
52623: LD_INT 0
52625: PPUSH
52626: CALL 53118 0 6
52630: ST_TO_ADDR
// if not hexes then
52631: LD_VAR 0 12
52635: NOT
52636: IFFALSE 52640
// exit ;
52638: GO 53113
// hex := GetHexInfo ( x , y ) ;
52640: LD_ADDR_VAR 0 15
52644: PUSH
52645: LD_VAR 0 3
52649: PPUSH
52650: LD_VAR 0 4
52654: PPUSH
52655: CALL_OW 546
52659: ST_TO_ADDR
// if hex [ 1 ] then
52660: LD_VAR 0 15
52664: PUSH
52665: LD_INT 1
52667: ARRAY
52668: IFFALSE 52672
// exit ;
52670: GO 53113
// height := hex [ 2 ] ;
52672: LD_ADDR_VAR 0 13
52676: PUSH
52677: LD_VAR 0 15
52681: PUSH
52682: LD_INT 2
52684: ARRAY
52685: ST_TO_ADDR
// for i = 1 to hexes do
52686: LD_ADDR_VAR 0 7
52690: PUSH
52691: DOUBLE
52692: LD_INT 1
52694: DEC
52695: ST_TO_ADDR
52696: LD_VAR 0 12
52700: PUSH
52701: FOR_TO
52702: IFFALSE 53032
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52704: LD_VAR 0 12
52708: PUSH
52709: LD_VAR 0 7
52713: ARRAY
52714: PUSH
52715: LD_INT 1
52717: ARRAY
52718: PPUSH
52719: LD_VAR 0 12
52723: PUSH
52724: LD_VAR 0 7
52728: ARRAY
52729: PUSH
52730: LD_INT 2
52732: ARRAY
52733: PPUSH
52734: CALL_OW 488
52738: NOT
52739: PUSH
52740: LD_VAR 0 12
52744: PUSH
52745: LD_VAR 0 7
52749: ARRAY
52750: PUSH
52751: LD_INT 1
52753: ARRAY
52754: PPUSH
52755: LD_VAR 0 12
52759: PUSH
52760: LD_VAR 0 7
52764: ARRAY
52765: PUSH
52766: LD_INT 2
52768: ARRAY
52769: PPUSH
52770: CALL_OW 428
52774: PUSH
52775: LD_INT 0
52777: GREATER
52778: OR
52779: PUSH
52780: LD_VAR 0 12
52784: PUSH
52785: LD_VAR 0 7
52789: ARRAY
52790: PUSH
52791: LD_INT 1
52793: ARRAY
52794: PPUSH
52795: LD_VAR 0 12
52799: PUSH
52800: LD_VAR 0 7
52804: ARRAY
52805: PUSH
52806: LD_INT 2
52808: ARRAY
52809: PPUSH
52810: CALL_OW 351
52814: OR
52815: IFFALSE 52821
// exit ;
52817: POP
52818: POP
52819: GO 53113
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52821: LD_ADDR_VAR 0 8
52825: PUSH
52826: LD_VAR 0 12
52830: PUSH
52831: LD_VAR 0 7
52835: ARRAY
52836: PUSH
52837: LD_INT 1
52839: ARRAY
52840: PPUSH
52841: LD_VAR 0 12
52845: PUSH
52846: LD_VAR 0 7
52850: ARRAY
52851: PUSH
52852: LD_INT 2
52854: ARRAY
52855: PPUSH
52856: CALL_OW 546
52860: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52861: LD_VAR 0 8
52865: PUSH
52866: LD_INT 1
52868: ARRAY
52869: PUSH
52870: LD_VAR 0 8
52874: PUSH
52875: LD_INT 2
52877: ARRAY
52878: PUSH
52879: LD_VAR 0 13
52883: PUSH
52884: LD_INT 2
52886: PLUS
52887: GREATER
52888: OR
52889: PUSH
52890: LD_VAR 0 8
52894: PUSH
52895: LD_INT 2
52897: ARRAY
52898: PUSH
52899: LD_VAR 0 13
52903: PUSH
52904: LD_INT 2
52906: MINUS
52907: LESS
52908: OR
52909: PUSH
52910: LD_VAR 0 8
52914: PUSH
52915: LD_INT 3
52917: ARRAY
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 8
52924: PUSH
52925: LD_INT 9
52927: PUSH
52928: LD_INT 10
52930: PUSH
52931: LD_INT 11
52933: PUSH
52934: LD_INT 12
52936: PUSH
52937: LD_INT 13
52939: PUSH
52940: LD_INT 16
52942: PUSH
52943: LD_INT 17
52945: PUSH
52946: LD_INT 18
52948: PUSH
52949: LD_INT 19
52951: PUSH
52952: LD_INT 20
52954: PUSH
52955: LD_INT 21
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: IN
52973: NOT
52974: OR
52975: PUSH
52976: LD_VAR 0 8
52980: PUSH
52981: LD_INT 5
52983: ARRAY
52984: NOT
52985: OR
52986: PUSH
52987: LD_VAR 0 8
52991: PUSH
52992: LD_INT 6
52994: ARRAY
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 7
53004: PUSH
53005: LD_INT 9
53007: PUSH
53008: LD_INT 10
53010: PUSH
53011: LD_INT 11
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: IN
53022: NOT
53023: OR
53024: IFFALSE 53030
// exit ;
53026: POP
53027: POP
53028: GO 53113
// end ;
53030: GO 52701
53032: POP
53033: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53034: LD_VAR 0 9
53038: PPUSH
53039: LD_VAR 0 3
53043: PPUSH
53044: LD_VAR 0 4
53048: PPUSH
53049: LD_INT 20
53051: PPUSH
53052: CALL 45059 0 4
53056: PUSH
53057: LD_INT 4
53059: ARRAY
53060: IFFALSE 53064
// exit ;
53062: GO 53113
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53064: LD_VAR 0 2
53068: PUSH
53069: LD_INT 29
53071: PUSH
53072: LD_INT 30
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: IN
53079: PUSH
53080: LD_VAR 0 3
53084: PPUSH
53085: LD_VAR 0 4
53089: PPUSH
53090: LD_VAR 0 9
53094: PPUSH
53095: CALL_OW 440
53099: NOT
53100: AND
53101: IFFALSE 53105
// exit ;
53103: GO 53113
// result := true ;
53105: LD_ADDR_VAR 0 6
53109: PUSH
53110: LD_INT 1
53112: ST_TO_ADDR
// end ;
53113: LD_VAR 0 6
53117: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53118: LD_INT 0
53120: PPUSH
53121: PPUSH
53122: PPUSH
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
53131: PPUSH
53132: PPUSH
53133: PPUSH
53134: PPUSH
53135: PPUSH
53136: PPUSH
53137: PPUSH
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
53142: PPUSH
53143: PPUSH
53144: PPUSH
53145: PPUSH
53146: PPUSH
53147: PPUSH
53148: PPUSH
53149: PPUSH
53150: PPUSH
53151: PPUSH
53152: PPUSH
53153: PPUSH
53154: PPUSH
53155: PPUSH
53156: PPUSH
53157: PPUSH
53158: PPUSH
53159: PPUSH
53160: PPUSH
53161: PPUSH
53162: PPUSH
53163: PPUSH
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
// result = [ ] ;
53178: LD_ADDR_VAR 0 7
53182: PUSH
53183: EMPTY
53184: ST_TO_ADDR
// temp_list = [ ] ;
53185: LD_ADDR_VAR 0 9
53189: PUSH
53190: EMPTY
53191: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53192: LD_VAR 0 4
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: LD_INT 4
53211: PUSH
53212: LD_INT 5
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: IN
53223: NOT
53224: PUSH
53225: LD_VAR 0 1
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: IN
53240: PUSH
53241: LD_VAR 0 5
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: IN
53260: NOT
53261: AND
53262: OR
53263: IFFALSE 53267
// exit ;
53265: GO 71658
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53267: LD_VAR 0 1
53271: PUSH
53272: LD_INT 6
53274: PUSH
53275: LD_INT 7
53277: PUSH
53278: LD_INT 8
53280: PUSH
53281: LD_INT 13
53283: PUSH
53284: LD_INT 12
53286: PUSH
53287: LD_INT 15
53289: PUSH
53290: LD_INT 11
53292: PUSH
53293: LD_INT 14
53295: PUSH
53296: LD_INT 10
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: IN
53310: IFFALSE 53320
// btype = b_lab ;
53312: LD_ADDR_VAR 0 1
53316: PUSH
53317: LD_INT 6
53319: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53320: LD_VAR 0 6
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: IN
53339: NOT
53340: PUSH
53341: LD_VAR 0 1
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: LD_INT 3
53357: PUSH
53358: LD_INT 6
53360: PUSH
53361: LD_INT 36
53363: PUSH
53364: LD_INT 4
53366: PUSH
53367: LD_INT 5
53369: PUSH
53370: LD_INT 31
53372: PUSH
53373: LD_INT 32
53375: PUSH
53376: LD_INT 33
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: IN
53392: NOT
53393: PUSH
53394: LD_VAR 0 6
53398: PUSH
53399: LD_INT 1
53401: EQUAL
53402: AND
53403: OR
53404: PUSH
53405: LD_VAR 0 1
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: IN
53420: NOT
53421: PUSH
53422: LD_VAR 0 6
53426: PUSH
53427: LD_INT 2
53429: EQUAL
53430: AND
53431: OR
53432: IFFALSE 53442
// mode = 0 ;
53434: LD_ADDR_VAR 0 6
53438: PUSH
53439: LD_INT 0
53441: ST_TO_ADDR
// case mode of 0 :
53442: LD_VAR 0 6
53446: PUSH
53447: LD_INT 0
53449: DOUBLE
53450: EQUAL
53451: IFTRUE 53455
53453: GO 64908
53455: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53456: LD_ADDR_VAR 0 11
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53649: LD_ADDR_VAR 0 12
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 3
53806: NEG
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 3
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53845: LD_ADDR_VAR 0 13
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54044: LD_ADDR_VAR 0 14
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54240: LD_ADDR_VAR 0 15
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54433: LD_ADDR_VAR 0 16
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54626: LD_ADDR_VAR 0 17
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54856: LD_ADDR_VAR 0 18
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55086: LD_ADDR_VAR 0 19
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55316: LD_ADDR_VAR 0 20
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55546: LD_ADDR_VAR 0 21
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55776: LD_ADDR_VAR 0 22
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56006: LD_ADDR_VAR 0 23
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56286: LD_ADDR_VAR 0 24
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56562: LD_ADDR_VAR 0 25
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56836: LD_ADDR_VAR 0 26
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57112: LD_ADDR_VAR 0 27
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57392: LD_ADDR_VAR 0 28
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57674: LD_ADDR_VAR 0 29
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: LD_INT 3
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 3
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57953: LD_ADDR_VAR 0 30
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58231: LD_ADDR_VAR 0 31
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 3
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58509: LD_ADDR_VAR 0 32
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58787: LD_ADDR_VAR 0 33
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 3
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59066: LD_ADDR_VAR 0 34
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59346: LD_ADDR_VAR 0 35
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59458: LD_ADDR_VAR 0 36
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59570: LD_ADDR_VAR 0 37
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59682: LD_ADDR_VAR 0 38
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59794: LD_ADDR_VAR 0 39
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59906: LD_ADDR_VAR 0 40
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60018: LD_ADDR_VAR 0 41
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: NEG
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: NEG
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: NEG
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60368: LD_ADDR_VAR 0 42
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 3
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 3
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: NEG
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60718: LD_ADDR_VAR 0 43
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 2
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 3
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: NEG
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61066: LD_ADDR_VAR 0 44
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 3
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: NEG
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 3
61351: NEG
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 3
61363: NEG
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 3
61375: NEG
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61416: LD_ADDR_VAR 0 45
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 3
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 3
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 3
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61766: LD_ADDR_VAR 0 46
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 2
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 2
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 3
62062: NEG
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62114: LD_ADDR_VAR 0 47
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 2
62241: NEG
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62265: LD_ADDR_VAR 0 48
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 2
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 2
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62412: LD_ADDR_VAR 0 49
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62556: LD_ADDR_VAR 0 50
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62700: LD_ADDR_VAR 0 51
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 2
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62847: LD_ADDR_VAR 0 52
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: NEG
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62998: LD_ADDR_VAR 0 53
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63228: LD_ADDR_VAR 0 54
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 2
63404: NEG
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 2
63415: NEG
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: NEG
63428: PUSH
63429: LD_INT 2
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63458: LD_ADDR_VAR 0 55
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: LD_INT 2
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: NEG
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63688: LD_ADDR_VAR 0 56
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 2
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: LD_INT 2
63784: NEG
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: LD_INT 2
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 2
63864: NEG
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: NEG
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63918: LD_ADDR_VAR 0 57
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: LD_INT 2
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 2
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 2
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 2
64053: PUSH
64054: LD_INT 2
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: LD_INT 2
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 2
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: NEG
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 2
64105: NEG
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 2
64117: NEG
64118: PUSH
64119: LD_INT 2
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64148: LD_ADDR_VAR 0 58
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: LD_INT 2
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: NEG
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 2
64335: NEG
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: LD_INT 2
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64378: LD_ADDR_VAR 0 59
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64466: LD_ADDR_VAR 0 60
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64554: LD_ADDR_VAR 0 61
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64642: LD_ADDR_VAR 0 62
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64730: LD_ADDR_VAR 0 63
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64818: LD_ADDR_VAR 0 64
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// end ; 1 :
64906: GO 70803
64908: LD_INT 1
64910: DOUBLE
64911: EQUAL
64912: IFTRUE 64916
64914: GO 67539
64916: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64917: LD_ADDR_VAR 0 11
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 3
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 3
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64961: LD_ADDR_VAR 0 12
64965: PUSH
64966: LD_INT 2
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 3
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 3
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65002: LD_ADDR_VAR 0 13
65006: PUSH
65007: LD_INT 3
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 3
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65042: LD_ADDR_VAR 0 14
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: LD_INT 3
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: LD_INT 3
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 1
65069: NEG
65070: PUSH
65071: LD_INT 2
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65083: LD_ADDR_VAR 0 15
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 3
65101: NEG
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 3
65112: NEG
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65127: LD_ADDR_VAR 0 16
65131: PUSH
65132: LD_INT 2
65134: NEG
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 3
65146: NEG
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 3
65158: NEG
65159: PUSH
65160: LD_INT 3
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65173: LD_ADDR_VAR 0 17
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 3
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65217: LD_ADDR_VAR 0 18
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 3
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65258: LD_ADDR_VAR 0 19
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 3
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65298: LD_ADDR_VAR 0 20
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 3
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: LD_INT 2
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65339: LD_ADDR_VAR 0 21
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: LD_INT 1
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 3
65357: NEG
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: LD_INT 1
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65383: LD_ADDR_VAR 0 22
65387: PUSH
65388: LD_INT 2
65390: NEG
65391: PUSH
65392: LD_INT 3
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 3
65402: NEG
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: LD_INT 3
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65429: LD_ADDR_VAR 0 23
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: LD_INT 3
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 4
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: LIST
65472: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65473: LD_ADDR_VAR 0 24
65477: PUSH
65478: LD_INT 3
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 3
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 4
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65514: LD_ADDR_VAR 0 25
65518: PUSH
65519: LD_INT 3
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 4
65531: PUSH
65532: LD_INT 3
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 3
65541: PUSH
65542: LD_INT 4
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65554: LD_ADDR_VAR 0 26
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 1
65571: PUSH
65572: LD_INT 4
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: LD_INT 3
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65595: LD_ADDR_VAR 0 27
65599: PUSH
65600: LD_INT 3
65602: NEG
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 3
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 4
65624: NEG
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65639: LD_ADDR_VAR 0 28
65643: PUSH
65644: LD_INT 3
65646: NEG
65647: PUSH
65648: LD_INT 3
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: LD_INT 4
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 4
65670: NEG
65671: PUSH
65672: LD_INT 3
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65685: LD_ADDR_VAR 0 29
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: LD_INT 3
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 3
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 2
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: LD_INT 4
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 4
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: LD_INT 3
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 5
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 5
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: LD_INT 4
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: LD_INT 6
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_INT 6
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: PUSH
65818: LD_INT 5
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65840: LD_ADDR_VAR 0 30
65844: PUSH
65845: LD_INT 2
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 3
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 3
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 4
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 4
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 4
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 5
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 5
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 5
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 6
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 6
65961: PUSH
65962: LD_INT 1
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65983: LD_ADDR_VAR 0 31
65987: PUSH
65988: LD_INT 3
65990: PUSH
65991: LD_INT 2
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 3
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 2
66010: PUSH
66011: LD_INT 3
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 4
66020: PUSH
66021: LD_INT 3
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 4
66030: PUSH
66031: LD_INT 4
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 3
66040: PUSH
66041: LD_INT 4
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 5
66050: PUSH
66051: LD_INT 4
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 5
66060: PUSH
66061: LD_INT 5
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 4
66070: PUSH
66071: LD_INT 5
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 6
66080: PUSH
66081: LD_INT 5
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 6
66090: PUSH
66091: LD_INT 6
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 5
66100: PUSH
66101: LD_INT 6
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66122: LD_ADDR_VAR 0 32
66126: PUSH
66127: LD_INT 1
66129: PUSH
66130: LD_INT 3
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: LD_INT 3
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: NEG
66150: PUSH
66151: LD_INT 2
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: LD_INT 4
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 4
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: LD_INT 3
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: LD_INT 5
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: LD_INT 5
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: LD_INT 4
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: LD_INT 6
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: LD_INT 6
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: LD_INT 5
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66265: LD_ADDR_VAR 0 33
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: NEG
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 4
66317: NEG
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 4
66328: NEG
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 4
66340: NEG
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 5
66351: NEG
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 5
66362: NEG
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 5
66374: NEG
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 6
66385: NEG
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 6
66396: NEG
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66420: LD_ADDR_VAR 0 34
66424: PUSH
66425: LD_INT 2
66427: NEG
66428: PUSH
66429: LD_INT 3
66431: NEG
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 3
66439: NEG
66440: PUSH
66441: LD_INT 2
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 3
66451: NEG
66452: PUSH
66453: LD_INT 3
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 3
66463: NEG
66464: PUSH
66465: LD_INT 4
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 4
66475: NEG
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 4
66487: NEG
66488: PUSH
66489: LD_INT 4
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 4
66499: NEG
66500: PUSH
66501: LD_INT 5
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 5
66511: NEG
66512: PUSH
66513: LD_INT 4
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 5
66523: NEG
66524: PUSH
66525: LD_INT 5
66527: NEG
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 5
66535: NEG
66536: PUSH
66537: LD_INT 6
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 6
66547: NEG
66548: PUSH
66549: LD_INT 5
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 6
66559: NEG
66560: PUSH
66561: LD_INT 6
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66583: LD_ADDR_VAR 0 41
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: LD_INT 3
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: LD_INT 2
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66627: LD_ADDR_VAR 0 42
66631: PUSH
66632: LD_INT 2
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 2
66644: PUSH
66645: LD_INT 1
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66668: LD_ADDR_VAR 0 43
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: LD_INT 2
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: LD_INT 2
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 2
66695: PUSH
66696: LD_INT 3
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: LIST
66707: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66708: LD_ADDR_VAR 0 44
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: PUSH
66726: LD_INT 3
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: LIST
66748: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66749: LD_ADDR_VAR 0 45
66753: PUSH
66754: LD_INT 2
66756: NEG
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 2
66767: NEG
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 3
66778: NEG
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66793: LD_ADDR_VAR 0 46
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 2
66812: NEG
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 3
66824: NEG
66825: PUSH
66826: LD_INT 2
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66839: LD_ADDR_VAR 0 47
66843: PUSH
66844: LD_INT 2
66846: NEG
66847: PUSH
66848: LD_INT 3
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: LD_INT 3
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66872: LD_ADDR_VAR 0 48
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 2
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66903: LD_ADDR_VAR 0 49
66907: PUSH
66908: LD_INT 3
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 3
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66932: LD_ADDR_VAR 0 50
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: LD_INT 3
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: LD_INT 3
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66961: LD_ADDR_VAR 0 51
66965: PUSH
66966: LD_INT 1
66968: NEG
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 2
66979: NEG
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66992: LD_ADDR_VAR 0 52
66996: PUSH
66997: LD_INT 3
66999: NEG
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 3
67011: NEG
67012: PUSH
67013: LD_INT 2
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67025: LD_ADDR_VAR 0 53
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: LD_INT 3
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 3
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67069: LD_ADDR_VAR 0 54
67073: PUSH
67074: LD_INT 2
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 3
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 3
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67110: LD_ADDR_VAR 0 55
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: LD_INT 2
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 3
67127: PUSH
67128: LD_INT 3
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: LD_INT 3
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67150: LD_ADDR_VAR 0 56
67154: PUSH
67155: LD_INT 1
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: LD_INT 3
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67191: LD_ADDR_VAR 0 57
67195: PUSH
67196: LD_INT 2
67198: NEG
67199: PUSH
67200: LD_INT 1
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 3
67209: NEG
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 3
67220: NEG
67221: PUSH
67222: LD_INT 1
67224: NEG
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67235: LD_ADDR_VAR 0 58
67239: PUSH
67240: LD_INT 2
67242: NEG
67243: PUSH
67244: LD_INT 3
67246: NEG
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 3
67254: NEG
67255: PUSH
67256: LD_INT 2
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: LD_INT 3
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67281: LD_ADDR_VAR 0 59
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: LD_INT 2
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: LD_INT 2
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: PUSH
67312: LD_INT 1
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: LIST
67324: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67325: LD_ADDR_VAR 0 60
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 2
67353: PUSH
67354: LD_INT 1
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67366: LD_ADDR_VAR 0 61
67370: PUSH
67371: LD_INT 2
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 2
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: LIST
67405: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67406: LD_ADDR_VAR 0 62
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: LD_INT 2
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: LIST
67446: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67447: LD_ADDR_VAR 0 63
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 2
67465: NEG
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 2
67476: NEG
67477: PUSH
67478: LD_INT 1
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67491: LD_ADDR_VAR 0 64
67495: PUSH
67496: LD_INT 1
67498: NEG
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: LD_INT 1
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 2
67522: NEG
67523: PUSH
67524: LD_INT 2
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: LIST
67536: ST_TO_ADDR
// end ; 2 :
67537: GO 70803
67539: LD_INT 2
67541: DOUBLE
67542: EQUAL
67543: IFTRUE 67547
67545: GO 70802
67547: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67548: LD_ADDR_VAR 0 29
67552: PUSH
67553: LD_INT 4
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 4
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 5
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 5
67586: PUSH
67587: LD_INT 1
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 4
67596: PUSH
67597: LD_INT 1
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: PUSH
67617: LD_INT 1
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: PUSH
67628: LD_INT 2
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: LD_INT 2
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: PUSH
67649: LD_INT 3
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 3
67658: PUSH
67659: LD_INT 2
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 4
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 4
67678: PUSH
67679: LD_INT 4
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 3
67688: PUSH
67689: LD_INT 4
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: LD_INT 3
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 4
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: LD_INT 4
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: LD_INT 4
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 3
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: PUSH
67759: LD_INT 4
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 1
67768: PUSH
67769: LD_INT 5
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: LD_INT 5
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: LD_INT 4
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: PUSH
67801: LD_INT 3
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 2
67810: PUSH
67811: LD_INT 5
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 2
67820: NEG
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 3
67831: NEG
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: LD_INT 1
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: NEG
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 3
67876: NEG
67877: PUSH
67878: LD_INT 1
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 4
67887: NEG
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 4
67898: NEG
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 4
67910: NEG
67911: PUSH
67912: LD_INT 2
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: NEG
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 4
67933: NEG
67934: PUSH
67935: LD_INT 4
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 4
67945: NEG
67946: PUSH
67947: LD_INT 5
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 4
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 4
67981: NEG
67982: PUSH
67983: LD_INT 3
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 5
67993: NEG
67994: PUSH
67995: LD_INT 4
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 5
68005: NEG
68006: PUSH
68007: LD_INT 5
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 3
68017: NEG
68018: PUSH
68019: LD_INT 5
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 5
68029: NEG
68030: PUSH
68031: LD_INT 3
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68086: LD_ADDR_VAR 0 30
68090: PUSH
68091: LD_INT 4
68093: PUSH
68094: LD_INT 4
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 4
68103: PUSH
68104: LD_INT 3
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 5
68113: PUSH
68114: LD_INT 4
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 5
68123: PUSH
68124: LD_INT 5
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 4
68133: PUSH
68134: LD_INT 5
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: LD_INT 4
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: LD_INT 3
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 5
68163: PUSH
68164: LD_INT 3
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: LD_INT 5
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 3
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 1
68203: PUSH
68204: LD_INT 3
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 1
68213: PUSH
68214: LD_INT 4
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: LD_INT 4
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: LD_INT 3
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: LD_INT 2
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 2
68255: PUSH
68256: LD_INT 4
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 2
68265: NEG
68266: PUSH
68267: LD_INT 2
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 4
68276: NEG
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 4
68287: NEG
68288: PUSH
68289: LD_INT 1
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 3
68299: NEG
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 3
68310: NEG
68311: PUSH
68312: LD_INT 1
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 4
68321: NEG
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 5
68332: NEG
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 5
68343: NEG
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 5
68355: NEG
68356: PUSH
68357: LD_INT 2
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 3
68367: NEG
68368: PUSH
68369: LD_INT 2
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: NEG
68379: PUSH
68380: LD_INT 3
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: LD_INT 4
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 2
68402: NEG
68403: PUSH
68404: LD_INT 3
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 2
68414: NEG
68415: PUSH
68416: LD_INT 2
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: LD_INT 2
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 4
68438: NEG
68439: PUSH
68440: LD_INT 3
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 4
68450: NEG
68451: PUSH
68452: LD_INT 4
68454: NEG
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 2
68462: NEG
68463: PUSH
68464: LD_INT 4
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 4
68474: NEG
68475: PUSH
68476: LD_INT 2
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: LD_INT 4
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: LD_INT 5
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 1
68508: PUSH
68509: LD_INT 4
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: LD_INT 3
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: LD_INT 3
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 1
68541: NEG
68542: PUSH
68543: LD_INT 4
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 1
68553: NEG
68554: PUSH
68555: LD_INT 5
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 2
68565: PUSH
68566: LD_INT 3
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 2
68576: NEG
68577: PUSH
68578: LD_INT 5
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68633: LD_ADDR_VAR 0 31
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 4
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: LD_INT 3
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 1
68660: PUSH
68661: LD_INT 4
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: LD_INT 5
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 5
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 1
68690: NEG
68691: PUSH
68692: LD_INT 4
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: LD_INT 3
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 2
68712: PUSH
68713: LD_INT 5
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 2
68722: NEG
68723: PUSH
68724: LD_INT 3
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 3
68733: NEG
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 3
68744: NEG
68745: PUSH
68746: LD_INT 1
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 2
68756: NEG
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 2
68767: NEG
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 3
68778: NEG
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: NEG
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 4
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 4
68812: NEG
68813: PUSH
68814: LD_INT 2
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 2
68824: NEG
68825: PUSH
68826: LD_INT 2
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 4
68835: NEG
68836: PUSH
68837: LD_INT 4
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 4
68847: NEG
68848: PUSH
68849: LD_INT 5
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: LD_INT 4
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: LD_INT 3
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 4
68883: NEG
68884: PUSH
68885: LD_INT 3
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 5
68895: NEG
68896: PUSH
68897: LD_INT 4
68899: NEG
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 5
68907: NEG
68908: PUSH
68909: LD_INT 5
68911: NEG
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: LD_INT 5
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 5
68931: NEG
68932: PUSH
68933: LD_INT 3
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 3
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: LD_INT 4
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 1
68965: PUSH
68966: LD_INT 3
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: LD_INT 2
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 0
68987: PUSH
68988: LD_INT 2
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: LD_INT 3
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 1
69010: NEG
69011: PUSH
69012: LD_INT 4
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: LD_INT 2
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 2
69033: NEG
69034: PUSH
69035: LD_INT 4
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 4
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 4
69055: PUSH
69056: LD_INT 1
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 5
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 5
69076: PUSH
69077: LD_INT 1
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 4
69086: PUSH
69087: LD_INT 1
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: LD_INT 0
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: PUSH
69107: LD_INT 1
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: PUSH
69118: LD_INT 2
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 5
69128: PUSH
69129: LD_INT 2
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69183: LD_ADDR_VAR 0 32
69187: PUSH
69188: LD_INT 4
69190: NEG
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 4
69201: NEG
69202: PUSH
69203: LD_INT 1
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 3
69213: NEG
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 3
69224: NEG
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 4
69235: NEG
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 5
69246: NEG
69247: PUSH
69248: LD_INT 0
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 5
69257: NEG
69258: PUSH
69259: LD_INT 1
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 5
69269: NEG
69270: PUSH
69271: LD_INT 2
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 3
69281: NEG
69282: PUSH
69283: LD_INT 2
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 3
69292: NEG
69293: PUSH
69294: LD_INT 3
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 3
69304: NEG
69305: PUSH
69306: LD_INT 4
69308: NEG
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 2
69316: NEG
69317: PUSH
69318: LD_INT 3
69320: NEG
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 2
69328: NEG
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 4
69352: NEG
69353: PUSH
69354: LD_INT 3
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: LD_INT 4
69368: NEG
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 2
69376: NEG
69377: PUSH
69378: LD_INT 4
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: LD_INT 2
69392: NEG
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 0
69400: PUSH
69401: LD_INT 4
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 0
69411: PUSH
69412: LD_INT 5
69414: NEG
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 1
69422: PUSH
69423: LD_INT 4
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 1
69433: PUSH
69434: LD_INT 3
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: LD_INT 3
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 1
69455: NEG
69456: PUSH
69457: LD_INT 4
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 1
69467: NEG
69468: PUSH
69469: LD_INT 5
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 2
69479: PUSH
69480: LD_INT 3
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 2
69490: NEG
69491: PUSH
69492: LD_INT 5
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 3
69502: PUSH
69503: LD_INT 0
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 3
69512: PUSH
69513: LD_INT 1
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 4
69523: PUSH
69524: LD_INT 0
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 4
69533: PUSH
69534: LD_INT 1
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 3
69543: PUSH
69544: LD_INT 1
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 2
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 2
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 2
69574: PUSH
69575: LD_INT 2
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 4
69585: PUSH
69586: LD_INT 2
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 4
69595: PUSH
69596: LD_INT 4
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 4
69605: PUSH
69606: LD_INT 3
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 5
69615: PUSH
69616: LD_INT 4
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 5
69625: PUSH
69626: LD_INT 5
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 4
69635: PUSH
69636: LD_INT 5
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: LD_INT 4
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 3
69655: PUSH
69656: LD_INT 3
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 5
69665: PUSH
69666: LD_INT 3
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 5
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69730: LD_ADDR_VAR 0 33
69734: PUSH
69735: LD_INT 4
69737: NEG
69738: PUSH
69739: LD_INT 4
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 4
69749: NEG
69750: PUSH
69751: LD_INT 5
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 3
69761: NEG
69762: PUSH
69763: LD_INT 4
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 3
69773: NEG
69774: PUSH
69775: LD_INT 3
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 4
69785: NEG
69786: PUSH
69787: LD_INT 3
69789: NEG
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 5
69797: NEG
69798: PUSH
69799: LD_INT 4
69801: NEG
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 5
69809: NEG
69810: PUSH
69811: LD_INT 5
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: LD_INT 5
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 5
69833: NEG
69834: PUSH
69835: LD_INT 3
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: LD_INT 3
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: LD_INT 4
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 1
69867: PUSH
69868: LD_INT 3
69870: NEG
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: LD_INT 2
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 2
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: LD_INT 3
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 1
69912: NEG
69913: PUSH
69914: LD_INT 4
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 2
69924: PUSH
69925: LD_INT 2
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 2
69935: NEG
69936: PUSH
69937: LD_INT 4
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 4
69947: PUSH
69948: LD_INT 0
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 4
69957: PUSH
69958: LD_INT 1
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 5
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 5
69978: PUSH
69979: LD_INT 1
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 4
69988: PUSH
69989: LD_INT 1
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 3
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 3
70019: PUSH
70020: LD_INT 2
70022: NEG
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 3
70050: PUSH
70051: LD_INT 2
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 4
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 4
70070: PUSH
70071: LD_INT 4
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: LD_INT 4
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 2
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 2
70100: PUSH
70101: LD_INT 2
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 4
70110: PUSH
70111: LD_INT 2
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 2
70120: PUSH
70121: LD_INT 4
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: LD_INT 4
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: LD_INT 3
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 1
70150: PUSH
70151: LD_INT 4
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 1
70160: PUSH
70161: LD_INT 5
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: LD_INT 5
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: NEG
70181: PUSH
70182: LD_INT 4
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: LD_INT 3
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 2
70202: PUSH
70203: LD_INT 5
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 2
70212: NEG
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70268: LD_ADDR_VAR 0 34
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: LD_INT 4
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: LD_INT 5
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 1
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 1
70308: PUSH
70309: LD_INT 3
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 0
70319: PUSH
70320: LD_INT 3
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 1
70330: NEG
70331: PUSH
70332: LD_INT 4
70334: NEG
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 1
70342: NEG
70343: PUSH
70344: LD_INT 5
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 2
70354: PUSH
70355: LD_INT 3
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 2
70365: NEG
70366: PUSH
70367: LD_INT 5
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 3
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: LD_INT 1
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 4
70398: PUSH
70399: LD_INT 0
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 4
70408: PUSH
70409: LD_INT 1
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 3
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 2
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: LD_INT 1
70441: NEG
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 2
70449: PUSH
70450: LD_INT 2
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 4
70460: PUSH
70461: LD_INT 2
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 4
70470: PUSH
70471: LD_INT 4
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 4
70480: PUSH
70481: LD_INT 3
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 5
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 5
70500: PUSH
70501: LD_INT 5
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 4
70510: PUSH
70511: LD_INT 5
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 3
70520: PUSH
70521: LD_INT 4
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 3
70530: PUSH
70531: LD_INT 3
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 5
70540: PUSH
70541: LD_INT 3
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 3
70550: PUSH
70551: LD_INT 5
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 3
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: LD_INT 2
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: LD_INT 3
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 1
70590: PUSH
70591: LD_INT 4
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: LD_INT 4
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: NEG
70611: PUSH
70612: LD_INT 3
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 1
70621: NEG
70622: PUSH
70623: LD_INT 2
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 2
70632: PUSH
70633: LD_INT 4
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 2
70642: NEG
70643: PUSH
70644: LD_INT 2
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 4
70653: NEG
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 4
70664: NEG
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 3
70676: NEG
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 3
70687: NEG
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 4
70698: NEG
70699: PUSH
70700: LD_INT 1
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 5
70709: NEG
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 5
70720: NEG
70721: PUSH
70722: LD_INT 1
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 5
70732: NEG
70733: PUSH
70734: LD_INT 2
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 3
70744: NEG
70745: PUSH
70746: LD_INT 2
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: ST_TO_ADDR
// end ; end ;
70800: GO 70803
70802: POP
// case btype of b_depot , b_warehouse :
70803: LD_VAR 0 1
70807: PUSH
70808: LD_INT 0
70810: DOUBLE
70811: EQUAL
70812: IFTRUE 70822
70814: LD_INT 1
70816: DOUBLE
70817: EQUAL
70818: IFTRUE 70822
70820: GO 71023
70822: POP
// case nation of nation_american :
70823: LD_VAR 0 5
70827: PUSH
70828: LD_INT 1
70830: DOUBLE
70831: EQUAL
70832: IFTRUE 70836
70834: GO 70892
70836: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70837: LD_ADDR_VAR 0 9
70841: PUSH
70842: LD_VAR 0 11
70846: PUSH
70847: LD_VAR 0 12
70851: PUSH
70852: LD_VAR 0 13
70856: PUSH
70857: LD_VAR 0 14
70861: PUSH
70862: LD_VAR 0 15
70866: PUSH
70867: LD_VAR 0 16
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: PUSH
70880: LD_VAR 0 4
70884: PUSH
70885: LD_INT 1
70887: PLUS
70888: ARRAY
70889: ST_TO_ADDR
70890: GO 71021
70892: LD_INT 2
70894: DOUBLE
70895: EQUAL
70896: IFTRUE 70900
70898: GO 70956
70900: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70901: LD_ADDR_VAR 0 9
70905: PUSH
70906: LD_VAR 0 17
70910: PUSH
70911: LD_VAR 0 18
70915: PUSH
70916: LD_VAR 0 19
70920: PUSH
70921: LD_VAR 0 20
70925: PUSH
70926: LD_VAR 0 21
70930: PUSH
70931: LD_VAR 0 22
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: PUSH
70944: LD_VAR 0 4
70948: PUSH
70949: LD_INT 1
70951: PLUS
70952: ARRAY
70953: ST_TO_ADDR
70954: GO 71021
70956: LD_INT 3
70958: DOUBLE
70959: EQUAL
70960: IFTRUE 70964
70962: GO 71020
70964: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70965: LD_ADDR_VAR 0 9
70969: PUSH
70970: LD_VAR 0 23
70974: PUSH
70975: LD_VAR 0 24
70979: PUSH
70980: LD_VAR 0 25
70984: PUSH
70985: LD_VAR 0 26
70989: PUSH
70990: LD_VAR 0 27
70994: PUSH
70995: LD_VAR 0 28
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: PUSH
71008: LD_VAR 0 4
71012: PUSH
71013: LD_INT 1
71015: PLUS
71016: ARRAY
71017: ST_TO_ADDR
71018: GO 71021
71020: POP
71021: GO 71576
71023: LD_INT 2
71025: DOUBLE
71026: EQUAL
71027: IFTRUE 71037
71029: LD_INT 3
71031: DOUBLE
71032: EQUAL
71033: IFTRUE 71037
71035: GO 71093
71037: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71038: LD_ADDR_VAR 0 9
71042: PUSH
71043: LD_VAR 0 29
71047: PUSH
71048: LD_VAR 0 30
71052: PUSH
71053: LD_VAR 0 31
71057: PUSH
71058: LD_VAR 0 32
71062: PUSH
71063: LD_VAR 0 33
71067: PUSH
71068: LD_VAR 0 34
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: PUSH
71081: LD_VAR 0 4
71085: PUSH
71086: LD_INT 1
71088: PLUS
71089: ARRAY
71090: ST_TO_ADDR
71091: GO 71576
71093: LD_INT 16
71095: DOUBLE
71096: EQUAL
71097: IFTRUE 71155
71099: LD_INT 17
71101: DOUBLE
71102: EQUAL
71103: IFTRUE 71155
71105: LD_INT 18
71107: DOUBLE
71108: EQUAL
71109: IFTRUE 71155
71111: LD_INT 19
71113: DOUBLE
71114: EQUAL
71115: IFTRUE 71155
71117: LD_INT 22
71119: DOUBLE
71120: EQUAL
71121: IFTRUE 71155
71123: LD_INT 20
71125: DOUBLE
71126: EQUAL
71127: IFTRUE 71155
71129: LD_INT 21
71131: DOUBLE
71132: EQUAL
71133: IFTRUE 71155
71135: LD_INT 23
71137: DOUBLE
71138: EQUAL
71139: IFTRUE 71155
71141: LD_INT 24
71143: DOUBLE
71144: EQUAL
71145: IFTRUE 71155
71147: LD_INT 25
71149: DOUBLE
71150: EQUAL
71151: IFTRUE 71155
71153: GO 71211
71155: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71156: LD_ADDR_VAR 0 9
71160: PUSH
71161: LD_VAR 0 35
71165: PUSH
71166: LD_VAR 0 36
71170: PUSH
71171: LD_VAR 0 37
71175: PUSH
71176: LD_VAR 0 38
71180: PUSH
71181: LD_VAR 0 39
71185: PUSH
71186: LD_VAR 0 40
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: PUSH
71199: LD_VAR 0 4
71203: PUSH
71204: LD_INT 1
71206: PLUS
71207: ARRAY
71208: ST_TO_ADDR
71209: GO 71576
71211: LD_INT 6
71213: DOUBLE
71214: EQUAL
71215: IFTRUE 71267
71217: LD_INT 7
71219: DOUBLE
71220: EQUAL
71221: IFTRUE 71267
71223: LD_INT 8
71225: DOUBLE
71226: EQUAL
71227: IFTRUE 71267
71229: LD_INT 13
71231: DOUBLE
71232: EQUAL
71233: IFTRUE 71267
71235: LD_INT 12
71237: DOUBLE
71238: EQUAL
71239: IFTRUE 71267
71241: LD_INT 15
71243: DOUBLE
71244: EQUAL
71245: IFTRUE 71267
71247: LD_INT 11
71249: DOUBLE
71250: EQUAL
71251: IFTRUE 71267
71253: LD_INT 14
71255: DOUBLE
71256: EQUAL
71257: IFTRUE 71267
71259: LD_INT 10
71261: DOUBLE
71262: EQUAL
71263: IFTRUE 71267
71265: GO 71323
71267: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71268: LD_ADDR_VAR 0 9
71272: PUSH
71273: LD_VAR 0 41
71277: PUSH
71278: LD_VAR 0 42
71282: PUSH
71283: LD_VAR 0 43
71287: PUSH
71288: LD_VAR 0 44
71292: PUSH
71293: LD_VAR 0 45
71297: PUSH
71298: LD_VAR 0 46
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: PUSH
71311: LD_VAR 0 4
71315: PUSH
71316: LD_INT 1
71318: PLUS
71319: ARRAY
71320: ST_TO_ADDR
71321: GO 71576
71323: LD_INT 36
71325: DOUBLE
71326: EQUAL
71327: IFTRUE 71331
71329: GO 71387
71331: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71332: LD_ADDR_VAR 0 9
71336: PUSH
71337: LD_VAR 0 47
71341: PUSH
71342: LD_VAR 0 48
71346: PUSH
71347: LD_VAR 0 49
71351: PUSH
71352: LD_VAR 0 50
71356: PUSH
71357: LD_VAR 0 51
71361: PUSH
71362: LD_VAR 0 52
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: PUSH
71375: LD_VAR 0 4
71379: PUSH
71380: LD_INT 1
71382: PLUS
71383: ARRAY
71384: ST_TO_ADDR
71385: GO 71576
71387: LD_INT 4
71389: DOUBLE
71390: EQUAL
71391: IFTRUE 71413
71393: LD_INT 5
71395: DOUBLE
71396: EQUAL
71397: IFTRUE 71413
71399: LD_INT 34
71401: DOUBLE
71402: EQUAL
71403: IFTRUE 71413
71405: LD_INT 37
71407: DOUBLE
71408: EQUAL
71409: IFTRUE 71413
71411: GO 71469
71413: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71414: LD_ADDR_VAR 0 9
71418: PUSH
71419: LD_VAR 0 53
71423: PUSH
71424: LD_VAR 0 54
71428: PUSH
71429: LD_VAR 0 55
71433: PUSH
71434: LD_VAR 0 56
71438: PUSH
71439: LD_VAR 0 57
71443: PUSH
71444: LD_VAR 0 58
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: PUSH
71457: LD_VAR 0 4
71461: PUSH
71462: LD_INT 1
71464: PLUS
71465: ARRAY
71466: ST_TO_ADDR
71467: GO 71576
71469: LD_INT 31
71471: DOUBLE
71472: EQUAL
71473: IFTRUE 71519
71475: LD_INT 32
71477: DOUBLE
71478: EQUAL
71479: IFTRUE 71519
71481: LD_INT 33
71483: DOUBLE
71484: EQUAL
71485: IFTRUE 71519
71487: LD_INT 27
71489: DOUBLE
71490: EQUAL
71491: IFTRUE 71519
71493: LD_INT 26
71495: DOUBLE
71496: EQUAL
71497: IFTRUE 71519
71499: LD_INT 28
71501: DOUBLE
71502: EQUAL
71503: IFTRUE 71519
71505: LD_INT 29
71507: DOUBLE
71508: EQUAL
71509: IFTRUE 71519
71511: LD_INT 30
71513: DOUBLE
71514: EQUAL
71515: IFTRUE 71519
71517: GO 71575
71519: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71520: LD_ADDR_VAR 0 9
71524: PUSH
71525: LD_VAR 0 59
71529: PUSH
71530: LD_VAR 0 60
71534: PUSH
71535: LD_VAR 0 61
71539: PUSH
71540: LD_VAR 0 62
71544: PUSH
71545: LD_VAR 0 63
71549: PUSH
71550: LD_VAR 0 64
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: PUSH
71563: LD_VAR 0 4
71567: PUSH
71568: LD_INT 1
71570: PLUS
71571: ARRAY
71572: ST_TO_ADDR
71573: GO 71576
71575: POP
// temp_list2 = [ ] ;
71576: LD_ADDR_VAR 0 10
71580: PUSH
71581: EMPTY
71582: ST_TO_ADDR
// for i in temp_list do
71583: LD_ADDR_VAR 0 8
71587: PUSH
71588: LD_VAR 0 9
71592: PUSH
71593: FOR_IN
71594: IFFALSE 71646
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71596: LD_ADDR_VAR 0 10
71600: PUSH
71601: LD_VAR 0 10
71605: PUSH
71606: LD_VAR 0 8
71610: PUSH
71611: LD_INT 1
71613: ARRAY
71614: PUSH
71615: LD_VAR 0 2
71619: PLUS
71620: PUSH
71621: LD_VAR 0 8
71625: PUSH
71626: LD_INT 2
71628: ARRAY
71629: PUSH
71630: LD_VAR 0 3
71634: PLUS
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: EMPTY
71641: LIST
71642: ADD
71643: ST_TO_ADDR
71644: GO 71593
71646: POP
71647: POP
// result = temp_list2 ;
71648: LD_ADDR_VAR 0 7
71652: PUSH
71653: LD_VAR 0 10
71657: ST_TO_ADDR
// end ;
71658: LD_VAR 0 7
71662: RET
// export function EnemyInRange ( unit , dist ) ; begin
71663: LD_INT 0
71665: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71666: LD_ADDR_VAR 0 3
71670: PUSH
71671: LD_VAR 0 1
71675: PPUSH
71676: CALL_OW 255
71680: PPUSH
71681: LD_VAR 0 1
71685: PPUSH
71686: CALL_OW 250
71690: PPUSH
71691: LD_VAR 0 1
71695: PPUSH
71696: CALL_OW 251
71700: PPUSH
71701: LD_VAR 0 2
71705: PPUSH
71706: CALL 45059 0 4
71710: PUSH
71711: LD_INT 4
71713: ARRAY
71714: ST_TO_ADDR
// end ;
71715: LD_VAR 0 3
71719: RET
// export function PlayerSeeMe ( unit ) ; begin
71720: LD_INT 0
71722: PPUSH
// result := See ( your_side , unit ) ;
71723: LD_ADDR_VAR 0 2
71727: PUSH
71728: LD_OWVAR 2
71732: PPUSH
71733: LD_VAR 0 1
71737: PPUSH
71738: CALL_OW 292
71742: ST_TO_ADDR
// end ;
71743: LD_VAR 0 2
71747: RET
// export function ReverseDir ( unit ) ; begin
71748: LD_INT 0
71750: PPUSH
// if not unit then
71751: LD_VAR 0 1
71755: NOT
71756: IFFALSE 71760
// exit ;
71758: GO 71783
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71760: LD_ADDR_VAR 0 2
71764: PUSH
71765: LD_VAR 0 1
71769: PPUSH
71770: CALL_OW 254
71774: PUSH
71775: LD_INT 3
71777: PLUS
71778: PUSH
71779: LD_INT 6
71781: MOD
71782: ST_TO_ADDR
// end ;
71783: LD_VAR 0 2
71787: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71788: LD_INT 0
71790: PPUSH
71791: PPUSH
71792: PPUSH
71793: PPUSH
71794: PPUSH
// if not hexes then
71795: LD_VAR 0 2
71799: NOT
71800: IFFALSE 71804
// exit ;
71802: GO 71952
// dist := 9999 ;
71804: LD_ADDR_VAR 0 5
71808: PUSH
71809: LD_INT 9999
71811: ST_TO_ADDR
// for i = 1 to hexes do
71812: LD_ADDR_VAR 0 4
71816: PUSH
71817: DOUBLE
71818: LD_INT 1
71820: DEC
71821: ST_TO_ADDR
71822: LD_VAR 0 2
71826: PUSH
71827: FOR_TO
71828: IFFALSE 71940
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71830: LD_VAR 0 1
71834: PPUSH
71835: LD_VAR 0 2
71839: PUSH
71840: LD_VAR 0 4
71844: ARRAY
71845: PUSH
71846: LD_INT 1
71848: ARRAY
71849: PPUSH
71850: LD_VAR 0 2
71854: PUSH
71855: LD_VAR 0 4
71859: ARRAY
71860: PUSH
71861: LD_INT 2
71863: ARRAY
71864: PPUSH
71865: CALL_OW 297
71869: PUSH
71870: LD_VAR 0 5
71874: LESS
71875: IFFALSE 71938
// begin hex := hexes [ i ] ;
71877: LD_ADDR_VAR 0 7
71881: PUSH
71882: LD_VAR 0 2
71886: PUSH
71887: LD_VAR 0 4
71891: ARRAY
71892: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71893: LD_ADDR_VAR 0 5
71897: PUSH
71898: LD_VAR 0 1
71902: PPUSH
71903: LD_VAR 0 2
71907: PUSH
71908: LD_VAR 0 4
71912: ARRAY
71913: PUSH
71914: LD_INT 1
71916: ARRAY
71917: PPUSH
71918: LD_VAR 0 2
71922: PUSH
71923: LD_VAR 0 4
71927: ARRAY
71928: PUSH
71929: LD_INT 2
71931: ARRAY
71932: PPUSH
71933: CALL_OW 297
71937: ST_TO_ADDR
// end ; end ;
71938: GO 71827
71940: POP
71941: POP
// result := hex ;
71942: LD_ADDR_VAR 0 3
71946: PUSH
71947: LD_VAR 0 7
71951: ST_TO_ADDR
// end ;
71952: LD_VAR 0 3
71956: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71957: LD_INT 0
71959: PPUSH
71960: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71961: LD_VAR 0 1
71965: NOT
71966: PUSH
71967: LD_VAR 0 1
71971: PUSH
71972: LD_INT 21
71974: PUSH
71975: LD_INT 2
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 23
71984: PUSH
71985: LD_INT 2
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PPUSH
71996: CALL_OW 69
72000: IN
72001: NOT
72002: OR
72003: IFFALSE 72007
// exit ;
72005: GO 72054
// for i = 1 to 3 do
72007: LD_ADDR_VAR 0 3
72011: PUSH
72012: DOUBLE
72013: LD_INT 1
72015: DEC
72016: ST_TO_ADDR
72017: LD_INT 3
72019: PUSH
72020: FOR_TO
72021: IFFALSE 72052
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72023: LD_VAR 0 1
72027: PPUSH
72028: CALL_OW 250
72032: PPUSH
72033: LD_VAR 0 1
72037: PPUSH
72038: CALL_OW 251
72042: PPUSH
72043: LD_INT 1
72045: PPUSH
72046: CALL_OW 453
72050: GO 72020
72052: POP
72053: POP
// end ;
72054: LD_VAR 0 2
72058: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72059: LD_INT 0
72061: PPUSH
72062: PPUSH
72063: PPUSH
72064: PPUSH
72065: PPUSH
72066: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72067: LD_VAR 0 1
72071: NOT
72072: PUSH
72073: LD_VAR 0 2
72077: NOT
72078: OR
72079: PUSH
72080: LD_VAR 0 1
72084: PPUSH
72085: CALL_OW 314
72089: OR
72090: IFFALSE 72094
// exit ;
72092: GO 72535
// x := GetX ( enemy_unit ) ;
72094: LD_ADDR_VAR 0 7
72098: PUSH
72099: LD_VAR 0 2
72103: PPUSH
72104: CALL_OW 250
72108: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72109: LD_ADDR_VAR 0 8
72113: PUSH
72114: LD_VAR 0 2
72118: PPUSH
72119: CALL_OW 251
72123: ST_TO_ADDR
// if not x or not y then
72124: LD_VAR 0 7
72128: NOT
72129: PUSH
72130: LD_VAR 0 8
72134: NOT
72135: OR
72136: IFFALSE 72140
// exit ;
72138: GO 72535
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72140: LD_ADDR_VAR 0 6
72144: PUSH
72145: LD_VAR 0 7
72149: PPUSH
72150: LD_INT 0
72152: PPUSH
72153: LD_INT 4
72155: PPUSH
72156: CALL_OW 272
72160: PUSH
72161: LD_VAR 0 8
72165: PPUSH
72166: LD_INT 0
72168: PPUSH
72169: LD_INT 4
72171: PPUSH
72172: CALL_OW 273
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_VAR 0 7
72185: PPUSH
72186: LD_INT 1
72188: PPUSH
72189: LD_INT 4
72191: PPUSH
72192: CALL_OW 272
72196: PUSH
72197: LD_VAR 0 8
72201: PPUSH
72202: LD_INT 1
72204: PPUSH
72205: LD_INT 4
72207: PPUSH
72208: CALL_OW 273
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_VAR 0 7
72221: PPUSH
72222: LD_INT 2
72224: PPUSH
72225: LD_INT 4
72227: PPUSH
72228: CALL_OW 272
72232: PUSH
72233: LD_VAR 0 8
72237: PPUSH
72238: LD_INT 2
72240: PPUSH
72241: LD_INT 4
72243: PPUSH
72244: CALL_OW 273
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_VAR 0 7
72257: PPUSH
72258: LD_INT 3
72260: PPUSH
72261: LD_INT 4
72263: PPUSH
72264: CALL_OW 272
72268: PUSH
72269: LD_VAR 0 8
72273: PPUSH
72274: LD_INT 3
72276: PPUSH
72277: LD_INT 4
72279: PPUSH
72280: CALL_OW 273
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_VAR 0 7
72293: PPUSH
72294: LD_INT 4
72296: PPUSH
72297: LD_INT 4
72299: PPUSH
72300: CALL_OW 272
72304: PUSH
72305: LD_VAR 0 8
72309: PPUSH
72310: LD_INT 4
72312: PPUSH
72313: LD_INT 4
72315: PPUSH
72316: CALL_OW 273
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_VAR 0 7
72329: PPUSH
72330: LD_INT 5
72332: PPUSH
72333: LD_INT 4
72335: PPUSH
72336: CALL_OW 272
72340: PUSH
72341: LD_VAR 0 8
72345: PPUSH
72346: LD_INT 5
72348: PPUSH
72349: LD_INT 4
72351: PPUSH
72352: CALL_OW 273
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: ST_TO_ADDR
// for i = tmp downto 1 do
72369: LD_ADDR_VAR 0 4
72373: PUSH
72374: DOUBLE
72375: LD_VAR 0 6
72379: INC
72380: ST_TO_ADDR
72381: LD_INT 1
72383: PUSH
72384: FOR_DOWNTO
72385: IFFALSE 72486
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72387: LD_VAR 0 6
72391: PUSH
72392: LD_VAR 0 4
72396: ARRAY
72397: PUSH
72398: LD_INT 1
72400: ARRAY
72401: PPUSH
72402: LD_VAR 0 6
72406: PUSH
72407: LD_VAR 0 4
72411: ARRAY
72412: PUSH
72413: LD_INT 2
72415: ARRAY
72416: PPUSH
72417: CALL_OW 488
72421: NOT
72422: PUSH
72423: LD_VAR 0 6
72427: PUSH
72428: LD_VAR 0 4
72432: ARRAY
72433: PUSH
72434: LD_INT 1
72436: ARRAY
72437: PPUSH
72438: LD_VAR 0 6
72442: PUSH
72443: LD_VAR 0 4
72447: ARRAY
72448: PUSH
72449: LD_INT 2
72451: ARRAY
72452: PPUSH
72453: CALL_OW 428
72457: PUSH
72458: LD_INT 0
72460: NONEQUAL
72461: OR
72462: IFFALSE 72484
// tmp := Delete ( tmp , i ) ;
72464: LD_ADDR_VAR 0 6
72468: PUSH
72469: LD_VAR 0 6
72473: PPUSH
72474: LD_VAR 0 4
72478: PPUSH
72479: CALL_OW 3
72483: ST_TO_ADDR
72484: GO 72384
72486: POP
72487: POP
// j := GetClosestHex ( unit , tmp ) ;
72488: LD_ADDR_VAR 0 5
72492: PUSH
72493: LD_VAR 0 1
72497: PPUSH
72498: LD_VAR 0 6
72502: PPUSH
72503: CALL 71788 0 2
72507: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72508: LD_VAR 0 1
72512: PPUSH
72513: LD_VAR 0 5
72517: PUSH
72518: LD_INT 1
72520: ARRAY
72521: PPUSH
72522: LD_VAR 0 5
72526: PUSH
72527: LD_INT 2
72529: ARRAY
72530: PPUSH
72531: CALL_OW 111
// end ;
72535: LD_VAR 0 3
72539: RET
// export function PrepareApemanSoldier ( ) ; begin
72540: LD_INT 0
72542: PPUSH
// uc_nation := 0 ;
72543: LD_ADDR_OWVAR 21
72547: PUSH
72548: LD_INT 0
72550: ST_TO_ADDR
// hc_sex := sex_male ;
72551: LD_ADDR_OWVAR 27
72555: PUSH
72556: LD_INT 1
72558: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72559: LD_ADDR_OWVAR 28
72563: PUSH
72564: LD_INT 15
72566: ST_TO_ADDR
// hc_gallery :=  ;
72567: LD_ADDR_OWVAR 33
72571: PUSH
72572: LD_STRING 
72574: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72575: LD_ADDR_OWVAR 31
72579: PUSH
72580: LD_INT 0
72582: PPUSH
72583: LD_INT 3
72585: PPUSH
72586: CALL_OW 12
72590: PUSH
72591: LD_INT 0
72593: PPUSH
72594: LD_INT 3
72596: PPUSH
72597: CALL_OW 12
72601: PUSH
72602: LD_INT 0
72604: PUSH
72605: LD_INT 0
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: ST_TO_ADDR
// end ;
72614: LD_VAR 0 1
72618: RET
// export function PrepareApemanEngineer ( ) ; begin
72619: LD_INT 0
72621: PPUSH
// uc_nation := 0 ;
72622: LD_ADDR_OWVAR 21
72626: PUSH
72627: LD_INT 0
72629: ST_TO_ADDR
// hc_sex := sex_male ;
72630: LD_ADDR_OWVAR 27
72634: PUSH
72635: LD_INT 1
72637: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72638: LD_ADDR_OWVAR 28
72642: PUSH
72643: LD_INT 16
72645: ST_TO_ADDR
// hc_gallery :=  ;
72646: LD_ADDR_OWVAR 33
72650: PUSH
72651: LD_STRING 
72653: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72654: LD_ADDR_OWVAR 31
72658: PUSH
72659: LD_INT 0
72661: PPUSH
72662: LD_INT 3
72664: PPUSH
72665: CALL_OW 12
72669: PUSH
72670: LD_INT 0
72672: PPUSH
72673: LD_INT 3
72675: PPUSH
72676: CALL_OW 12
72680: PUSH
72681: LD_INT 0
72683: PUSH
72684: LD_INT 0
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: ST_TO_ADDR
// end ;
72693: LD_VAR 0 1
72697: RET
// export function PrepareApeman ( agressivity ) ; begin
72698: LD_INT 0
72700: PPUSH
// uc_side := 0 ;
72701: LD_ADDR_OWVAR 20
72705: PUSH
72706: LD_INT 0
72708: ST_TO_ADDR
// uc_nation := 0 ;
72709: LD_ADDR_OWVAR 21
72713: PUSH
72714: LD_INT 0
72716: ST_TO_ADDR
// hc_sex := sex_male ;
72717: LD_ADDR_OWVAR 27
72721: PUSH
72722: LD_INT 1
72724: ST_TO_ADDR
// hc_class := class_apeman ;
72725: LD_ADDR_OWVAR 28
72729: PUSH
72730: LD_INT 12
72732: ST_TO_ADDR
// hc_gallery :=  ;
72733: LD_ADDR_OWVAR 33
72737: PUSH
72738: LD_STRING 
72740: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72741: LD_ADDR_OWVAR 35
72745: PUSH
72746: LD_VAR 0 1
72750: NEG
72751: PPUSH
72752: LD_VAR 0 1
72756: PPUSH
72757: CALL_OW 12
72761: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72762: LD_ADDR_OWVAR 31
72766: PUSH
72767: LD_INT 0
72769: PPUSH
72770: LD_INT 3
72772: PPUSH
72773: CALL_OW 12
72777: PUSH
72778: LD_INT 0
72780: PPUSH
72781: LD_INT 3
72783: PPUSH
72784: CALL_OW 12
72788: PUSH
72789: LD_INT 0
72791: PUSH
72792: LD_INT 0
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: ST_TO_ADDR
// end ;
72801: LD_VAR 0 2
72805: RET
// export function PrepareTiger ( agressivity ) ; begin
72806: LD_INT 0
72808: PPUSH
// uc_side := 0 ;
72809: LD_ADDR_OWVAR 20
72813: PUSH
72814: LD_INT 0
72816: ST_TO_ADDR
// uc_nation := 0 ;
72817: LD_ADDR_OWVAR 21
72821: PUSH
72822: LD_INT 0
72824: ST_TO_ADDR
// hc_class := class_tiger ;
72825: LD_ADDR_OWVAR 28
72829: PUSH
72830: LD_INT 14
72832: ST_TO_ADDR
// hc_gallery :=  ;
72833: LD_ADDR_OWVAR 33
72837: PUSH
72838: LD_STRING 
72840: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72841: LD_ADDR_OWVAR 35
72845: PUSH
72846: LD_VAR 0 1
72850: NEG
72851: PPUSH
72852: LD_VAR 0 1
72856: PPUSH
72857: CALL_OW 12
72861: ST_TO_ADDR
// end ;
72862: LD_VAR 0 2
72866: RET
// export function PrepareEnchidna ( ) ; begin
72867: LD_INT 0
72869: PPUSH
// uc_side := 0 ;
72870: LD_ADDR_OWVAR 20
72874: PUSH
72875: LD_INT 0
72877: ST_TO_ADDR
// uc_nation := 0 ;
72878: LD_ADDR_OWVAR 21
72882: PUSH
72883: LD_INT 0
72885: ST_TO_ADDR
// hc_class := class_baggie ;
72886: LD_ADDR_OWVAR 28
72890: PUSH
72891: LD_INT 13
72893: ST_TO_ADDR
// hc_gallery :=  ;
72894: LD_ADDR_OWVAR 33
72898: PUSH
72899: LD_STRING 
72901: ST_TO_ADDR
// end ;
72902: LD_VAR 0 1
72906: RET
// export function PrepareFrog ( ) ; begin
72907: LD_INT 0
72909: PPUSH
// uc_side := 0 ;
72910: LD_ADDR_OWVAR 20
72914: PUSH
72915: LD_INT 0
72917: ST_TO_ADDR
// uc_nation := 0 ;
72918: LD_ADDR_OWVAR 21
72922: PUSH
72923: LD_INT 0
72925: ST_TO_ADDR
// hc_class := class_frog ;
72926: LD_ADDR_OWVAR 28
72930: PUSH
72931: LD_INT 19
72933: ST_TO_ADDR
// hc_gallery :=  ;
72934: LD_ADDR_OWVAR 33
72938: PUSH
72939: LD_STRING 
72941: ST_TO_ADDR
// end ;
72942: LD_VAR 0 1
72946: RET
// export function PrepareFish ( ) ; begin
72947: LD_INT 0
72949: PPUSH
// uc_side := 0 ;
72950: LD_ADDR_OWVAR 20
72954: PUSH
72955: LD_INT 0
72957: ST_TO_ADDR
// uc_nation := 0 ;
72958: LD_ADDR_OWVAR 21
72962: PUSH
72963: LD_INT 0
72965: ST_TO_ADDR
// hc_class := class_fish ;
72966: LD_ADDR_OWVAR 28
72970: PUSH
72971: LD_INT 20
72973: ST_TO_ADDR
// hc_gallery :=  ;
72974: LD_ADDR_OWVAR 33
72978: PUSH
72979: LD_STRING 
72981: ST_TO_ADDR
// end ;
72982: LD_VAR 0 1
72986: RET
// export function PrepareBird ( ) ; begin
72987: LD_INT 0
72989: PPUSH
// uc_side := 0 ;
72990: LD_ADDR_OWVAR 20
72994: PUSH
72995: LD_INT 0
72997: ST_TO_ADDR
// uc_nation := 0 ;
72998: LD_ADDR_OWVAR 21
73002: PUSH
73003: LD_INT 0
73005: ST_TO_ADDR
// hc_class := class_phororhacos ;
73006: LD_ADDR_OWVAR 28
73010: PUSH
73011: LD_INT 18
73013: ST_TO_ADDR
// hc_gallery :=  ;
73014: LD_ADDR_OWVAR 33
73018: PUSH
73019: LD_STRING 
73021: ST_TO_ADDR
// end ;
73022: LD_VAR 0 1
73026: RET
// export function PrepareHorse ( ) ; begin
73027: LD_INT 0
73029: PPUSH
// uc_side := 0 ;
73030: LD_ADDR_OWVAR 20
73034: PUSH
73035: LD_INT 0
73037: ST_TO_ADDR
// uc_nation := 0 ;
73038: LD_ADDR_OWVAR 21
73042: PUSH
73043: LD_INT 0
73045: ST_TO_ADDR
// hc_class := class_horse ;
73046: LD_ADDR_OWVAR 28
73050: PUSH
73051: LD_INT 21
73053: ST_TO_ADDR
// hc_gallery :=  ;
73054: LD_ADDR_OWVAR 33
73058: PUSH
73059: LD_STRING 
73061: ST_TO_ADDR
// end ;
73062: LD_VAR 0 1
73066: RET
// export function PrepareMastodont ( ) ; begin
73067: LD_INT 0
73069: PPUSH
// uc_side := 0 ;
73070: LD_ADDR_OWVAR 20
73074: PUSH
73075: LD_INT 0
73077: ST_TO_ADDR
// uc_nation := 0 ;
73078: LD_ADDR_OWVAR 21
73082: PUSH
73083: LD_INT 0
73085: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73086: LD_ADDR_OWVAR 37
73090: PUSH
73091: LD_INT 31
73093: ST_TO_ADDR
// vc_control := control_rider ;
73094: LD_ADDR_OWVAR 38
73098: PUSH
73099: LD_INT 4
73101: ST_TO_ADDR
// end ;
73102: LD_VAR 0 1
73106: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73107: LD_INT 0
73109: PPUSH
73110: PPUSH
73111: PPUSH
// uc_side = 0 ;
73112: LD_ADDR_OWVAR 20
73116: PUSH
73117: LD_INT 0
73119: ST_TO_ADDR
// uc_nation = 0 ;
73120: LD_ADDR_OWVAR 21
73124: PUSH
73125: LD_INT 0
73127: ST_TO_ADDR
// InitHc_All ( ) ;
73128: CALL_OW 584
// InitVc ;
73132: CALL_OW 20
// if mastodonts then
73136: LD_VAR 0 6
73140: IFFALSE 73207
// for i = 1 to mastodonts do
73142: LD_ADDR_VAR 0 11
73146: PUSH
73147: DOUBLE
73148: LD_INT 1
73150: DEC
73151: ST_TO_ADDR
73152: LD_VAR 0 6
73156: PUSH
73157: FOR_TO
73158: IFFALSE 73205
// begin vc_chassis := 31 ;
73160: LD_ADDR_OWVAR 37
73164: PUSH
73165: LD_INT 31
73167: ST_TO_ADDR
// vc_control := control_rider ;
73168: LD_ADDR_OWVAR 38
73172: PUSH
73173: LD_INT 4
73175: ST_TO_ADDR
// animal := CreateVehicle ;
73176: LD_ADDR_VAR 0 12
73180: PUSH
73181: CALL_OW 45
73185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73186: LD_VAR 0 12
73190: PPUSH
73191: LD_VAR 0 8
73195: PPUSH
73196: LD_INT 0
73198: PPUSH
73199: CALL 75342 0 3
// end ;
73203: GO 73157
73205: POP
73206: POP
// if horses then
73207: LD_VAR 0 5
73211: IFFALSE 73278
// for i = 1 to horses do
73213: LD_ADDR_VAR 0 11
73217: PUSH
73218: DOUBLE
73219: LD_INT 1
73221: DEC
73222: ST_TO_ADDR
73223: LD_VAR 0 5
73227: PUSH
73228: FOR_TO
73229: IFFALSE 73276
// begin hc_class := 21 ;
73231: LD_ADDR_OWVAR 28
73235: PUSH
73236: LD_INT 21
73238: ST_TO_ADDR
// hc_gallery :=  ;
73239: LD_ADDR_OWVAR 33
73243: PUSH
73244: LD_STRING 
73246: ST_TO_ADDR
// animal := CreateHuman ;
73247: LD_ADDR_VAR 0 12
73251: PUSH
73252: CALL_OW 44
73256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73257: LD_VAR 0 12
73261: PPUSH
73262: LD_VAR 0 8
73266: PPUSH
73267: LD_INT 0
73269: PPUSH
73270: CALL 75342 0 3
// end ;
73274: GO 73228
73276: POP
73277: POP
// if birds then
73278: LD_VAR 0 1
73282: IFFALSE 73349
// for i = 1 to birds do
73284: LD_ADDR_VAR 0 11
73288: PUSH
73289: DOUBLE
73290: LD_INT 1
73292: DEC
73293: ST_TO_ADDR
73294: LD_VAR 0 1
73298: PUSH
73299: FOR_TO
73300: IFFALSE 73347
// begin hc_class = 18 ;
73302: LD_ADDR_OWVAR 28
73306: PUSH
73307: LD_INT 18
73309: ST_TO_ADDR
// hc_gallery =  ;
73310: LD_ADDR_OWVAR 33
73314: PUSH
73315: LD_STRING 
73317: ST_TO_ADDR
// animal := CreateHuman ;
73318: LD_ADDR_VAR 0 12
73322: PUSH
73323: CALL_OW 44
73327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73328: LD_VAR 0 12
73332: PPUSH
73333: LD_VAR 0 8
73337: PPUSH
73338: LD_INT 0
73340: PPUSH
73341: CALL 75342 0 3
// end ;
73345: GO 73299
73347: POP
73348: POP
// if tigers then
73349: LD_VAR 0 2
73353: IFFALSE 73437
// for i = 1 to tigers do
73355: LD_ADDR_VAR 0 11
73359: PUSH
73360: DOUBLE
73361: LD_INT 1
73363: DEC
73364: ST_TO_ADDR
73365: LD_VAR 0 2
73369: PUSH
73370: FOR_TO
73371: IFFALSE 73435
// begin hc_class = class_tiger ;
73373: LD_ADDR_OWVAR 28
73377: PUSH
73378: LD_INT 14
73380: ST_TO_ADDR
// hc_gallery =  ;
73381: LD_ADDR_OWVAR 33
73385: PUSH
73386: LD_STRING 
73388: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73389: LD_ADDR_OWVAR 35
73393: PUSH
73394: LD_INT 7
73396: NEG
73397: PPUSH
73398: LD_INT 7
73400: PPUSH
73401: CALL_OW 12
73405: ST_TO_ADDR
// animal := CreateHuman ;
73406: LD_ADDR_VAR 0 12
73410: PUSH
73411: CALL_OW 44
73415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73416: LD_VAR 0 12
73420: PPUSH
73421: LD_VAR 0 8
73425: PPUSH
73426: LD_INT 0
73428: PPUSH
73429: CALL 75342 0 3
// end ;
73433: GO 73370
73435: POP
73436: POP
// if apemans then
73437: LD_VAR 0 3
73441: IFFALSE 73564
// for i = 1 to apemans do
73443: LD_ADDR_VAR 0 11
73447: PUSH
73448: DOUBLE
73449: LD_INT 1
73451: DEC
73452: ST_TO_ADDR
73453: LD_VAR 0 3
73457: PUSH
73458: FOR_TO
73459: IFFALSE 73562
// begin hc_class = class_apeman ;
73461: LD_ADDR_OWVAR 28
73465: PUSH
73466: LD_INT 12
73468: ST_TO_ADDR
// hc_gallery =  ;
73469: LD_ADDR_OWVAR 33
73473: PUSH
73474: LD_STRING 
73476: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73477: LD_ADDR_OWVAR 35
73481: PUSH
73482: LD_INT 2
73484: NEG
73485: PPUSH
73486: LD_INT 2
73488: PPUSH
73489: CALL_OW 12
73493: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73494: LD_ADDR_OWVAR 31
73498: PUSH
73499: LD_INT 1
73501: PPUSH
73502: LD_INT 3
73504: PPUSH
73505: CALL_OW 12
73509: PUSH
73510: LD_INT 1
73512: PPUSH
73513: LD_INT 3
73515: PPUSH
73516: CALL_OW 12
73520: PUSH
73521: LD_INT 0
73523: PUSH
73524: LD_INT 0
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: ST_TO_ADDR
// animal := CreateHuman ;
73533: LD_ADDR_VAR 0 12
73537: PUSH
73538: CALL_OW 44
73542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73543: LD_VAR 0 12
73547: PPUSH
73548: LD_VAR 0 8
73552: PPUSH
73553: LD_INT 0
73555: PPUSH
73556: CALL 75342 0 3
// end ;
73560: GO 73458
73562: POP
73563: POP
// if enchidnas then
73564: LD_VAR 0 4
73568: IFFALSE 73635
// for i = 1 to enchidnas do
73570: LD_ADDR_VAR 0 11
73574: PUSH
73575: DOUBLE
73576: LD_INT 1
73578: DEC
73579: ST_TO_ADDR
73580: LD_VAR 0 4
73584: PUSH
73585: FOR_TO
73586: IFFALSE 73633
// begin hc_class = 13 ;
73588: LD_ADDR_OWVAR 28
73592: PUSH
73593: LD_INT 13
73595: ST_TO_ADDR
// hc_gallery =  ;
73596: LD_ADDR_OWVAR 33
73600: PUSH
73601: LD_STRING 
73603: ST_TO_ADDR
// animal := CreateHuman ;
73604: LD_ADDR_VAR 0 12
73608: PUSH
73609: CALL_OW 44
73613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73614: LD_VAR 0 12
73618: PPUSH
73619: LD_VAR 0 8
73623: PPUSH
73624: LD_INT 0
73626: PPUSH
73627: CALL 75342 0 3
// end ;
73631: GO 73585
73633: POP
73634: POP
// if fishes then
73635: LD_VAR 0 7
73639: IFFALSE 73706
// for i = 1 to fishes do
73641: LD_ADDR_VAR 0 11
73645: PUSH
73646: DOUBLE
73647: LD_INT 1
73649: DEC
73650: ST_TO_ADDR
73651: LD_VAR 0 7
73655: PUSH
73656: FOR_TO
73657: IFFALSE 73704
// begin hc_class = 20 ;
73659: LD_ADDR_OWVAR 28
73663: PUSH
73664: LD_INT 20
73666: ST_TO_ADDR
// hc_gallery =  ;
73667: LD_ADDR_OWVAR 33
73671: PUSH
73672: LD_STRING 
73674: ST_TO_ADDR
// animal := CreateHuman ;
73675: LD_ADDR_VAR 0 12
73679: PUSH
73680: CALL_OW 44
73684: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73685: LD_VAR 0 12
73689: PPUSH
73690: LD_VAR 0 9
73694: PPUSH
73695: LD_INT 0
73697: PPUSH
73698: CALL 75342 0 3
// end ;
73702: GO 73656
73704: POP
73705: POP
// end ;
73706: LD_VAR 0 10
73710: RET
// export function WantHeal ( sci , unit ) ; begin
73711: LD_INT 0
73713: PPUSH
// if GetTaskList ( sci ) > 0 then
73714: LD_VAR 0 1
73718: PPUSH
73719: CALL_OW 437
73723: PUSH
73724: LD_INT 0
73726: GREATER
73727: IFFALSE 73797
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73729: LD_VAR 0 1
73733: PPUSH
73734: CALL_OW 437
73738: PUSH
73739: LD_INT 1
73741: ARRAY
73742: PUSH
73743: LD_INT 1
73745: ARRAY
73746: PUSH
73747: LD_STRING l
73749: EQUAL
73750: PUSH
73751: LD_VAR 0 1
73755: PPUSH
73756: CALL_OW 437
73760: PUSH
73761: LD_INT 1
73763: ARRAY
73764: PUSH
73765: LD_INT 4
73767: ARRAY
73768: PUSH
73769: LD_VAR 0 2
73773: EQUAL
73774: AND
73775: IFFALSE 73787
// result := true else
73777: LD_ADDR_VAR 0 3
73781: PUSH
73782: LD_INT 1
73784: ST_TO_ADDR
73785: GO 73795
// result := false ;
73787: LD_ADDR_VAR 0 3
73791: PUSH
73792: LD_INT 0
73794: ST_TO_ADDR
// end else
73795: GO 73805
// result := false ;
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_INT 0
73804: ST_TO_ADDR
// end ;
73805: LD_VAR 0 3
73809: RET
// export function HealTarget ( sci ) ; begin
73810: LD_INT 0
73812: PPUSH
// if not sci then
73813: LD_VAR 0 1
73817: NOT
73818: IFFALSE 73822
// exit ;
73820: GO 73887
// result := 0 ;
73822: LD_ADDR_VAR 0 2
73826: PUSH
73827: LD_INT 0
73829: ST_TO_ADDR
// if GetTaskList ( sci ) then
73830: LD_VAR 0 1
73834: PPUSH
73835: CALL_OW 437
73839: IFFALSE 73887
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73841: LD_VAR 0 1
73845: PPUSH
73846: CALL_OW 437
73850: PUSH
73851: LD_INT 1
73853: ARRAY
73854: PUSH
73855: LD_INT 1
73857: ARRAY
73858: PUSH
73859: LD_STRING l
73861: EQUAL
73862: IFFALSE 73887
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73864: LD_ADDR_VAR 0 2
73868: PUSH
73869: LD_VAR 0 1
73873: PPUSH
73874: CALL_OW 437
73878: PUSH
73879: LD_INT 1
73881: ARRAY
73882: PUSH
73883: LD_INT 4
73885: ARRAY
73886: ST_TO_ADDR
// end ;
73887: LD_VAR 0 2
73891: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73892: LD_INT 0
73894: PPUSH
73895: PPUSH
73896: PPUSH
73897: PPUSH
// if not base_units then
73898: LD_VAR 0 1
73902: NOT
73903: IFFALSE 73907
// exit ;
73905: GO 73994
// result := false ;
73907: LD_ADDR_VAR 0 2
73911: PUSH
73912: LD_INT 0
73914: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73915: LD_ADDR_VAR 0 5
73919: PUSH
73920: LD_VAR 0 1
73924: PPUSH
73925: LD_INT 21
73927: PUSH
73928: LD_INT 3
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PPUSH
73935: CALL_OW 72
73939: ST_TO_ADDR
// if not tmp then
73940: LD_VAR 0 5
73944: NOT
73945: IFFALSE 73949
// exit ;
73947: GO 73994
// for i in tmp do
73949: LD_ADDR_VAR 0 3
73953: PUSH
73954: LD_VAR 0 5
73958: PUSH
73959: FOR_IN
73960: IFFALSE 73992
// begin result := EnemyInRange ( i , 22 ) ;
73962: LD_ADDR_VAR 0 2
73966: PUSH
73967: LD_VAR 0 3
73971: PPUSH
73972: LD_INT 22
73974: PPUSH
73975: CALL 71663 0 2
73979: ST_TO_ADDR
// if result then
73980: LD_VAR 0 2
73984: IFFALSE 73990
// exit ;
73986: POP
73987: POP
73988: GO 73994
// end ;
73990: GO 73959
73992: POP
73993: POP
// end ;
73994: LD_VAR 0 2
73998: RET
// export function FilterByTag ( units , tag ) ; begin
73999: LD_INT 0
74001: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74002: LD_ADDR_VAR 0 3
74006: PUSH
74007: LD_VAR 0 1
74011: PPUSH
74012: LD_INT 120
74014: PUSH
74015: LD_VAR 0 2
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PPUSH
74024: CALL_OW 72
74028: ST_TO_ADDR
// end ;
74029: LD_VAR 0 3
74033: RET
// export function IsDriver ( un ) ; begin
74034: LD_INT 0
74036: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74037: LD_ADDR_VAR 0 2
74041: PUSH
74042: LD_VAR 0 1
74046: PUSH
74047: LD_INT 55
74049: PUSH
74050: EMPTY
74051: LIST
74052: PPUSH
74053: CALL_OW 69
74057: IN
74058: ST_TO_ADDR
// end ;
74059: LD_VAR 0 2
74063: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74064: LD_INT 0
74066: PPUSH
74067: PPUSH
// list := [ ] ;
74068: LD_ADDR_VAR 0 5
74072: PUSH
74073: EMPTY
74074: ST_TO_ADDR
// case d of 0 :
74075: LD_VAR 0 3
74079: PUSH
74080: LD_INT 0
74082: DOUBLE
74083: EQUAL
74084: IFTRUE 74088
74086: GO 74221
74088: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74089: LD_ADDR_VAR 0 5
74093: PUSH
74094: LD_VAR 0 1
74098: PUSH
74099: LD_INT 4
74101: MINUS
74102: PUSH
74103: LD_VAR 0 2
74107: PUSH
74108: LD_INT 4
74110: MINUS
74111: PUSH
74112: LD_INT 2
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: LIST
74119: PUSH
74120: LD_VAR 0 1
74124: PUSH
74125: LD_INT 3
74127: MINUS
74128: PUSH
74129: LD_VAR 0 2
74133: PUSH
74134: LD_INT 1
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: LIST
74141: PUSH
74142: LD_VAR 0 1
74146: PUSH
74147: LD_INT 4
74149: PLUS
74150: PUSH
74151: LD_VAR 0 2
74155: PUSH
74156: LD_INT 4
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: LIST
74163: PUSH
74164: LD_VAR 0 1
74168: PUSH
74169: LD_INT 3
74171: PLUS
74172: PUSH
74173: LD_VAR 0 2
74177: PUSH
74178: LD_INT 3
74180: PLUS
74181: PUSH
74182: LD_INT 5
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: LIST
74189: PUSH
74190: LD_VAR 0 1
74194: PUSH
74195: LD_VAR 0 2
74199: PUSH
74200: LD_INT 4
74202: PLUS
74203: PUSH
74204: LD_INT 0
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: LIST
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: ST_TO_ADDR
// end ; 1 :
74219: GO 74919
74221: LD_INT 1
74223: DOUBLE
74224: EQUAL
74225: IFTRUE 74229
74227: GO 74362
74229: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74230: LD_ADDR_VAR 0 5
74234: PUSH
74235: LD_VAR 0 1
74239: PUSH
74240: LD_VAR 0 2
74244: PUSH
74245: LD_INT 4
74247: MINUS
74248: PUSH
74249: LD_INT 3
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: LIST
74256: PUSH
74257: LD_VAR 0 1
74261: PUSH
74262: LD_INT 3
74264: MINUS
74265: PUSH
74266: LD_VAR 0 2
74270: PUSH
74271: LD_INT 3
74273: MINUS
74274: PUSH
74275: LD_INT 2
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: LIST
74282: PUSH
74283: LD_VAR 0 1
74287: PUSH
74288: LD_INT 4
74290: MINUS
74291: PUSH
74292: LD_VAR 0 2
74296: PUSH
74297: LD_INT 1
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: PUSH
74305: LD_VAR 0 1
74309: PUSH
74310: LD_VAR 0 2
74314: PUSH
74315: LD_INT 3
74317: PLUS
74318: PUSH
74319: LD_INT 0
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: PUSH
74327: LD_VAR 0 1
74331: PUSH
74332: LD_INT 4
74334: PLUS
74335: PUSH
74336: LD_VAR 0 2
74340: PUSH
74341: LD_INT 4
74343: PLUS
74344: PUSH
74345: LD_INT 5
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: LIST
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: ST_TO_ADDR
// end ; 2 :
74360: GO 74919
74362: LD_INT 2
74364: DOUBLE
74365: EQUAL
74366: IFTRUE 74370
74368: GO 74499
74370: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74371: LD_ADDR_VAR 0 5
74375: PUSH
74376: LD_VAR 0 1
74380: PUSH
74381: LD_VAR 0 2
74385: PUSH
74386: LD_INT 3
74388: MINUS
74389: PUSH
74390: LD_INT 3
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: LIST
74397: PUSH
74398: LD_VAR 0 1
74402: PUSH
74403: LD_INT 4
74405: PLUS
74406: PUSH
74407: LD_VAR 0 2
74411: PUSH
74412: LD_INT 4
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: LIST
74419: PUSH
74420: LD_VAR 0 1
74424: PUSH
74425: LD_VAR 0 2
74429: PUSH
74430: LD_INT 4
74432: PLUS
74433: PUSH
74434: LD_INT 0
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: LIST
74441: PUSH
74442: LD_VAR 0 1
74446: PUSH
74447: LD_INT 3
74449: MINUS
74450: PUSH
74451: LD_VAR 0 2
74455: PUSH
74456: LD_INT 1
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: LIST
74463: PUSH
74464: LD_VAR 0 1
74468: PUSH
74469: LD_INT 4
74471: MINUS
74472: PUSH
74473: LD_VAR 0 2
74477: PUSH
74478: LD_INT 4
74480: MINUS
74481: PUSH
74482: LD_INT 2
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: LIST
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: ST_TO_ADDR
// end ; 3 :
74497: GO 74919
74499: LD_INT 3
74501: DOUBLE
74502: EQUAL
74503: IFTRUE 74507
74505: GO 74640
74507: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74508: LD_ADDR_VAR 0 5
74512: PUSH
74513: LD_VAR 0 1
74517: PUSH
74518: LD_INT 3
74520: PLUS
74521: PUSH
74522: LD_VAR 0 2
74526: PUSH
74527: LD_INT 4
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: LIST
74534: PUSH
74535: LD_VAR 0 1
74539: PUSH
74540: LD_INT 4
74542: PLUS
74543: PUSH
74544: LD_VAR 0 2
74548: PUSH
74549: LD_INT 4
74551: PLUS
74552: PUSH
74553: LD_INT 5
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: LIST
74560: PUSH
74561: LD_VAR 0 1
74565: PUSH
74566: LD_INT 4
74568: MINUS
74569: PUSH
74570: LD_VAR 0 2
74574: PUSH
74575: LD_INT 1
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: LIST
74582: PUSH
74583: LD_VAR 0 1
74587: PUSH
74588: LD_VAR 0 2
74592: PUSH
74593: LD_INT 4
74595: MINUS
74596: PUSH
74597: LD_INT 3
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: PUSH
74605: LD_VAR 0 1
74609: PUSH
74610: LD_INT 3
74612: MINUS
74613: PUSH
74614: LD_VAR 0 2
74618: PUSH
74619: LD_INT 3
74621: MINUS
74622: PUSH
74623: LD_INT 2
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: LIST
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: ST_TO_ADDR
// end ; 4 :
74638: GO 74919
74640: LD_INT 4
74642: DOUBLE
74643: EQUAL
74644: IFTRUE 74648
74646: GO 74781
74648: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74649: LD_ADDR_VAR 0 5
74653: PUSH
74654: LD_VAR 0 1
74658: PUSH
74659: LD_VAR 0 2
74663: PUSH
74664: LD_INT 4
74666: PLUS
74667: PUSH
74668: LD_INT 0
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: LIST
74675: PUSH
74676: LD_VAR 0 1
74680: PUSH
74681: LD_INT 3
74683: PLUS
74684: PUSH
74685: LD_VAR 0 2
74689: PUSH
74690: LD_INT 3
74692: PLUS
74693: PUSH
74694: LD_INT 5
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: LIST
74701: PUSH
74702: LD_VAR 0 1
74706: PUSH
74707: LD_INT 4
74709: PLUS
74710: PUSH
74711: LD_VAR 0 2
74715: PUSH
74716: LD_INT 4
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: PUSH
74724: LD_VAR 0 1
74728: PUSH
74729: LD_VAR 0 2
74733: PUSH
74734: LD_INT 3
74736: MINUS
74737: PUSH
74738: LD_INT 3
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: LIST
74745: PUSH
74746: LD_VAR 0 1
74750: PUSH
74751: LD_INT 4
74753: MINUS
74754: PUSH
74755: LD_VAR 0 2
74759: PUSH
74760: LD_INT 4
74762: MINUS
74763: PUSH
74764: LD_INT 2
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: LIST
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: LIST
74778: ST_TO_ADDR
// end ; 5 :
74779: GO 74919
74781: LD_INT 5
74783: DOUBLE
74784: EQUAL
74785: IFTRUE 74789
74787: GO 74918
74789: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74790: LD_ADDR_VAR 0 5
74794: PUSH
74795: LD_VAR 0 1
74799: PUSH
74800: LD_INT 4
74802: MINUS
74803: PUSH
74804: LD_VAR 0 2
74808: PUSH
74809: LD_INT 1
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: LIST
74816: PUSH
74817: LD_VAR 0 1
74821: PUSH
74822: LD_VAR 0 2
74826: PUSH
74827: LD_INT 4
74829: MINUS
74830: PUSH
74831: LD_INT 3
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: LIST
74838: PUSH
74839: LD_VAR 0 1
74843: PUSH
74844: LD_INT 4
74846: PLUS
74847: PUSH
74848: LD_VAR 0 2
74852: PUSH
74853: LD_INT 4
74855: PLUS
74856: PUSH
74857: LD_INT 5
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: LIST
74864: PUSH
74865: LD_VAR 0 1
74869: PUSH
74870: LD_INT 3
74872: PLUS
74873: PUSH
74874: LD_VAR 0 2
74878: PUSH
74879: LD_INT 4
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: LIST
74886: PUSH
74887: LD_VAR 0 1
74891: PUSH
74892: LD_VAR 0 2
74896: PUSH
74897: LD_INT 3
74899: PLUS
74900: PUSH
74901: LD_INT 0
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: LIST
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: ST_TO_ADDR
// end ; end ;
74916: GO 74919
74918: POP
// result := list ;
74919: LD_ADDR_VAR 0 4
74923: PUSH
74924: LD_VAR 0 5
74928: ST_TO_ADDR
// end ;
74929: LD_VAR 0 4
74933: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74934: LD_INT 0
74936: PPUSH
74937: PPUSH
74938: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74939: LD_VAR 0 1
74943: NOT
74944: PUSH
74945: LD_VAR 0 2
74949: PUSH
74950: LD_INT 1
74952: PUSH
74953: LD_INT 2
74955: PUSH
74956: LD_INT 3
74958: PUSH
74959: LD_INT 4
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: IN
74968: NOT
74969: OR
74970: IFFALSE 74974
// exit ;
74972: GO 75066
// tmp := [ ] ;
74974: LD_ADDR_VAR 0 5
74978: PUSH
74979: EMPTY
74980: ST_TO_ADDR
// for i in units do
74981: LD_ADDR_VAR 0 4
74985: PUSH
74986: LD_VAR 0 1
74990: PUSH
74991: FOR_IN
74992: IFFALSE 75035
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74994: LD_ADDR_VAR 0 5
74998: PUSH
74999: LD_VAR 0 5
75003: PPUSH
75004: LD_VAR 0 5
75008: PUSH
75009: LD_INT 1
75011: PLUS
75012: PPUSH
75013: LD_VAR 0 4
75017: PPUSH
75018: LD_VAR 0 2
75022: PPUSH
75023: CALL_OW 259
75027: PPUSH
75028: CALL_OW 2
75032: ST_TO_ADDR
75033: GO 74991
75035: POP
75036: POP
// if not tmp then
75037: LD_VAR 0 5
75041: NOT
75042: IFFALSE 75046
// exit ;
75044: GO 75066
// result := SortListByListDesc ( units , tmp ) ;
75046: LD_ADDR_VAR 0 3
75050: PUSH
75051: LD_VAR 0 1
75055: PPUSH
75056: LD_VAR 0 5
75060: PPUSH
75061: CALL_OW 77
75065: ST_TO_ADDR
// end ;
75066: LD_VAR 0 3
75070: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75071: LD_INT 0
75073: PPUSH
75074: PPUSH
75075: PPUSH
// result := false ;
75076: LD_ADDR_VAR 0 3
75080: PUSH
75081: LD_INT 0
75083: ST_TO_ADDR
// x := GetX ( building ) ;
75084: LD_ADDR_VAR 0 4
75088: PUSH
75089: LD_VAR 0 2
75093: PPUSH
75094: CALL_OW 250
75098: ST_TO_ADDR
// y := GetY ( building ) ;
75099: LD_ADDR_VAR 0 5
75103: PUSH
75104: LD_VAR 0 2
75108: PPUSH
75109: CALL_OW 251
75113: ST_TO_ADDR
// if not building or not x or not y then
75114: LD_VAR 0 2
75118: NOT
75119: PUSH
75120: LD_VAR 0 4
75124: NOT
75125: OR
75126: PUSH
75127: LD_VAR 0 5
75131: NOT
75132: OR
75133: IFFALSE 75137
// exit ;
75135: GO 75229
// if GetTaskList ( unit ) then
75137: LD_VAR 0 1
75141: PPUSH
75142: CALL_OW 437
75146: IFFALSE 75229
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75148: LD_STRING e
75150: PUSH
75151: LD_VAR 0 1
75155: PPUSH
75156: CALL_OW 437
75160: PUSH
75161: LD_INT 1
75163: ARRAY
75164: PUSH
75165: LD_INT 1
75167: ARRAY
75168: EQUAL
75169: PUSH
75170: LD_VAR 0 4
75174: PUSH
75175: LD_VAR 0 1
75179: PPUSH
75180: CALL_OW 437
75184: PUSH
75185: LD_INT 1
75187: ARRAY
75188: PUSH
75189: LD_INT 2
75191: ARRAY
75192: EQUAL
75193: AND
75194: PUSH
75195: LD_VAR 0 5
75199: PUSH
75200: LD_VAR 0 1
75204: PPUSH
75205: CALL_OW 437
75209: PUSH
75210: LD_INT 1
75212: ARRAY
75213: PUSH
75214: LD_INT 3
75216: ARRAY
75217: EQUAL
75218: AND
75219: IFFALSE 75229
// result := true end ;
75221: LD_ADDR_VAR 0 3
75225: PUSH
75226: LD_INT 1
75228: ST_TO_ADDR
// end ;
75229: LD_VAR 0 3
75233: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75234: LD_INT 0
75236: PPUSH
// result := false ;
75237: LD_ADDR_VAR 0 4
75241: PUSH
75242: LD_INT 0
75244: ST_TO_ADDR
// if GetTaskList ( unit ) then
75245: LD_VAR 0 1
75249: PPUSH
75250: CALL_OW 437
75254: IFFALSE 75337
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75256: LD_STRING M
75258: PUSH
75259: LD_VAR 0 1
75263: PPUSH
75264: CALL_OW 437
75268: PUSH
75269: LD_INT 1
75271: ARRAY
75272: PUSH
75273: LD_INT 1
75275: ARRAY
75276: EQUAL
75277: PUSH
75278: LD_VAR 0 2
75282: PUSH
75283: LD_VAR 0 1
75287: PPUSH
75288: CALL_OW 437
75292: PUSH
75293: LD_INT 1
75295: ARRAY
75296: PUSH
75297: LD_INT 2
75299: ARRAY
75300: EQUAL
75301: AND
75302: PUSH
75303: LD_VAR 0 3
75307: PUSH
75308: LD_VAR 0 1
75312: PPUSH
75313: CALL_OW 437
75317: PUSH
75318: LD_INT 1
75320: ARRAY
75321: PUSH
75322: LD_INT 3
75324: ARRAY
75325: EQUAL
75326: AND
75327: IFFALSE 75337
// result := true ;
75329: LD_ADDR_VAR 0 4
75333: PUSH
75334: LD_INT 1
75336: ST_TO_ADDR
// end ; end ;
75337: LD_VAR 0 4
75341: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75342: LD_INT 0
75344: PPUSH
75345: PPUSH
75346: PPUSH
75347: PPUSH
// if not unit or not area then
75348: LD_VAR 0 1
75352: NOT
75353: PUSH
75354: LD_VAR 0 2
75358: NOT
75359: OR
75360: IFFALSE 75364
// exit ;
75362: GO 75528
// tmp := AreaToList ( area , i ) ;
75364: LD_ADDR_VAR 0 6
75368: PUSH
75369: LD_VAR 0 2
75373: PPUSH
75374: LD_VAR 0 5
75378: PPUSH
75379: CALL_OW 517
75383: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75384: LD_ADDR_VAR 0 5
75388: PUSH
75389: DOUBLE
75390: LD_INT 1
75392: DEC
75393: ST_TO_ADDR
75394: LD_VAR 0 6
75398: PUSH
75399: LD_INT 1
75401: ARRAY
75402: PUSH
75403: FOR_TO
75404: IFFALSE 75526
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75406: LD_ADDR_VAR 0 7
75410: PUSH
75411: LD_VAR 0 6
75415: PUSH
75416: LD_INT 1
75418: ARRAY
75419: PUSH
75420: LD_VAR 0 5
75424: ARRAY
75425: PUSH
75426: LD_VAR 0 6
75430: PUSH
75431: LD_INT 2
75433: ARRAY
75434: PUSH
75435: LD_VAR 0 5
75439: ARRAY
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75445: LD_VAR 0 7
75449: PUSH
75450: LD_INT 1
75452: ARRAY
75453: PPUSH
75454: LD_VAR 0 7
75458: PUSH
75459: LD_INT 2
75461: ARRAY
75462: PPUSH
75463: CALL_OW 428
75467: PUSH
75468: LD_INT 0
75470: EQUAL
75471: IFFALSE 75524
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75473: LD_VAR 0 1
75477: PPUSH
75478: LD_VAR 0 7
75482: PUSH
75483: LD_INT 1
75485: ARRAY
75486: PPUSH
75487: LD_VAR 0 7
75491: PUSH
75492: LD_INT 2
75494: ARRAY
75495: PPUSH
75496: LD_VAR 0 3
75500: PPUSH
75501: CALL_OW 48
// result := IsPlaced ( unit ) ;
75505: LD_ADDR_VAR 0 4
75509: PUSH
75510: LD_VAR 0 1
75514: PPUSH
75515: CALL_OW 305
75519: ST_TO_ADDR
// exit ;
75520: POP
75521: POP
75522: GO 75528
// end ; end ;
75524: GO 75403
75526: POP
75527: POP
// end ;
75528: LD_VAR 0 4
75532: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75533: LD_INT 0
75535: PPUSH
75536: PPUSH
75537: PPUSH
// if not side or side > 8 then
75538: LD_VAR 0 1
75542: NOT
75543: PUSH
75544: LD_VAR 0 1
75548: PUSH
75549: LD_INT 8
75551: GREATER
75552: OR
75553: IFFALSE 75557
// exit ;
75555: GO 75744
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75557: LD_ADDR_VAR 0 4
75561: PUSH
75562: LD_INT 22
75564: PUSH
75565: LD_VAR 0 1
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: PUSH
75574: LD_INT 21
75576: PUSH
75577: LD_INT 3
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PPUSH
75588: CALL_OW 69
75592: ST_TO_ADDR
// if not tmp then
75593: LD_VAR 0 4
75597: NOT
75598: IFFALSE 75602
// exit ;
75600: GO 75744
// enable_addtolog := true ;
75602: LD_ADDR_OWVAR 81
75606: PUSH
75607: LD_INT 1
75609: ST_TO_ADDR
// AddToLog ( [ ) ;
75610: LD_STRING [
75612: PPUSH
75613: CALL_OW 561
// for i in tmp do
75617: LD_ADDR_VAR 0 3
75621: PUSH
75622: LD_VAR 0 4
75626: PUSH
75627: FOR_IN
75628: IFFALSE 75735
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75630: LD_STRING [
75632: PUSH
75633: LD_VAR 0 3
75637: PPUSH
75638: CALL_OW 266
75642: STR
75643: PUSH
75644: LD_STRING , 
75646: STR
75647: PUSH
75648: LD_VAR 0 3
75652: PPUSH
75653: CALL_OW 250
75657: STR
75658: PUSH
75659: LD_STRING , 
75661: STR
75662: PUSH
75663: LD_VAR 0 3
75667: PPUSH
75668: CALL_OW 251
75672: STR
75673: PUSH
75674: LD_STRING , 
75676: STR
75677: PUSH
75678: LD_VAR 0 3
75682: PPUSH
75683: CALL_OW 254
75687: STR
75688: PUSH
75689: LD_STRING , 
75691: STR
75692: PUSH
75693: LD_VAR 0 3
75697: PPUSH
75698: LD_INT 1
75700: PPUSH
75701: CALL_OW 268
75705: STR
75706: PUSH
75707: LD_STRING , 
75709: STR
75710: PUSH
75711: LD_VAR 0 3
75715: PPUSH
75716: LD_INT 2
75718: PPUSH
75719: CALL_OW 268
75723: STR
75724: PUSH
75725: LD_STRING ],
75727: STR
75728: PPUSH
75729: CALL_OW 561
// end ;
75733: GO 75627
75735: POP
75736: POP
// AddToLog ( ]; ) ;
75737: LD_STRING ];
75739: PPUSH
75740: CALL_OW 561
// end ;
75744: LD_VAR 0 2
75748: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75749: LD_INT 0
75751: PPUSH
75752: PPUSH
75753: PPUSH
75754: PPUSH
75755: PPUSH
// if not area or not rate or not max then
75756: LD_VAR 0 1
75760: NOT
75761: PUSH
75762: LD_VAR 0 2
75766: NOT
75767: OR
75768: PUSH
75769: LD_VAR 0 4
75773: NOT
75774: OR
75775: IFFALSE 75779
// exit ;
75777: GO 75968
// while 1 do
75779: LD_INT 1
75781: IFFALSE 75968
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75783: LD_ADDR_VAR 0 9
75787: PUSH
75788: LD_VAR 0 1
75792: PPUSH
75793: LD_INT 1
75795: PPUSH
75796: CALL_OW 287
75800: PUSH
75801: LD_INT 10
75803: MUL
75804: ST_TO_ADDR
// r := rate / 10 ;
75805: LD_ADDR_VAR 0 7
75809: PUSH
75810: LD_VAR 0 2
75814: PUSH
75815: LD_INT 10
75817: DIVREAL
75818: ST_TO_ADDR
// time := 1 1$00 ;
75819: LD_ADDR_VAR 0 8
75823: PUSH
75824: LD_INT 2100
75826: ST_TO_ADDR
// if amount < min then
75827: LD_VAR 0 9
75831: PUSH
75832: LD_VAR 0 3
75836: LESS
75837: IFFALSE 75855
// r := r * 2 else
75839: LD_ADDR_VAR 0 7
75843: PUSH
75844: LD_VAR 0 7
75848: PUSH
75849: LD_INT 2
75851: MUL
75852: ST_TO_ADDR
75853: GO 75881
// if amount > max then
75855: LD_VAR 0 9
75859: PUSH
75860: LD_VAR 0 4
75864: GREATER
75865: IFFALSE 75881
// r := r / 2 ;
75867: LD_ADDR_VAR 0 7
75871: PUSH
75872: LD_VAR 0 7
75876: PUSH
75877: LD_INT 2
75879: DIVREAL
75880: ST_TO_ADDR
// time := time / r ;
75881: LD_ADDR_VAR 0 8
75885: PUSH
75886: LD_VAR 0 8
75890: PUSH
75891: LD_VAR 0 7
75895: DIVREAL
75896: ST_TO_ADDR
// if time < 0 then
75897: LD_VAR 0 8
75901: PUSH
75902: LD_INT 0
75904: LESS
75905: IFFALSE 75922
// time := time * - 1 ;
75907: LD_ADDR_VAR 0 8
75911: PUSH
75912: LD_VAR 0 8
75916: PUSH
75917: LD_INT 1
75919: NEG
75920: MUL
75921: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75922: LD_VAR 0 8
75926: PUSH
75927: LD_INT 35
75929: PPUSH
75930: LD_INT 875
75932: PPUSH
75933: CALL_OW 12
75937: PLUS
75938: PPUSH
75939: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75943: LD_INT 1
75945: PPUSH
75946: LD_INT 5
75948: PPUSH
75949: CALL_OW 12
75953: PPUSH
75954: LD_VAR 0 1
75958: PPUSH
75959: LD_INT 1
75961: PPUSH
75962: CALL_OW 55
// end ;
75966: GO 75779
// end ;
75968: LD_VAR 0 5
75972: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75973: LD_INT 0
75975: PPUSH
75976: PPUSH
75977: PPUSH
75978: PPUSH
75979: PPUSH
75980: PPUSH
75981: PPUSH
75982: PPUSH
// if not turrets or not factories then
75983: LD_VAR 0 1
75987: NOT
75988: PUSH
75989: LD_VAR 0 2
75993: NOT
75994: OR
75995: IFFALSE 75999
// exit ;
75997: GO 76306
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75999: LD_ADDR_VAR 0 10
76003: PUSH
76004: LD_INT 5
76006: PUSH
76007: LD_INT 6
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: PUSH
76014: LD_INT 2
76016: PUSH
76017: LD_INT 4
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 3
76026: PUSH
76027: LD_INT 5
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: LIST
76038: PUSH
76039: LD_INT 24
76041: PUSH
76042: LD_INT 25
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 23
76051: PUSH
76052: LD_INT 27
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: PUSH
76063: LD_INT 42
76065: PUSH
76066: LD_INT 43
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: LD_INT 44
76075: PUSH
76076: LD_INT 46
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: LD_INT 45
76085: PUSH
76086: LD_INT 47
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: LIST
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: LIST
76102: ST_TO_ADDR
// result := [ ] ;
76103: LD_ADDR_VAR 0 3
76107: PUSH
76108: EMPTY
76109: ST_TO_ADDR
// for i in turrets do
76110: LD_ADDR_VAR 0 4
76114: PUSH
76115: LD_VAR 0 1
76119: PUSH
76120: FOR_IN
76121: IFFALSE 76304
// begin nat := GetNation ( i ) ;
76123: LD_ADDR_VAR 0 7
76127: PUSH
76128: LD_VAR 0 4
76132: PPUSH
76133: CALL_OW 248
76137: ST_TO_ADDR
// weapon := 0 ;
76138: LD_ADDR_VAR 0 8
76142: PUSH
76143: LD_INT 0
76145: ST_TO_ADDR
// if not nat then
76146: LD_VAR 0 7
76150: NOT
76151: IFFALSE 76155
// continue ;
76153: GO 76120
// for j in list [ nat ] do
76155: LD_ADDR_VAR 0 5
76159: PUSH
76160: LD_VAR 0 10
76164: PUSH
76165: LD_VAR 0 7
76169: ARRAY
76170: PUSH
76171: FOR_IN
76172: IFFALSE 76213
// if GetBWeapon ( i ) = j [ 1 ] then
76174: LD_VAR 0 4
76178: PPUSH
76179: CALL_OW 269
76183: PUSH
76184: LD_VAR 0 5
76188: PUSH
76189: LD_INT 1
76191: ARRAY
76192: EQUAL
76193: IFFALSE 76211
// begin weapon := j [ 2 ] ;
76195: LD_ADDR_VAR 0 8
76199: PUSH
76200: LD_VAR 0 5
76204: PUSH
76205: LD_INT 2
76207: ARRAY
76208: ST_TO_ADDR
// break ;
76209: GO 76213
// end ;
76211: GO 76171
76213: POP
76214: POP
// if not weapon then
76215: LD_VAR 0 8
76219: NOT
76220: IFFALSE 76224
// continue ;
76222: GO 76120
// for k in factories do
76224: LD_ADDR_VAR 0 6
76228: PUSH
76229: LD_VAR 0 2
76233: PUSH
76234: FOR_IN
76235: IFFALSE 76300
// begin weapons := AvailableWeaponList ( k ) ;
76237: LD_ADDR_VAR 0 9
76241: PUSH
76242: LD_VAR 0 6
76246: PPUSH
76247: CALL_OW 478
76251: ST_TO_ADDR
// if not weapons then
76252: LD_VAR 0 9
76256: NOT
76257: IFFALSE 76261
// continue ;
76259: GO 76234
// if weapon in weapons then
76261: LD_VAR 0 8
76265: PUSH
76266: LD_VAR 0 9
76270: IN
76271: IFFALSE 76298
// begin result := [ i , weapon ] ;
76273: LD_ADDR_VAR 0 3
76277: PUSH
76278: LD_VAR 0 4
76282: PUSH
76283: LD_VAR 0 8
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: ST_TO_ADDR
// exit ;
76292: POP
76293: POP
76294: POP
76295: POP
76296: GO 76306
// end ; end ;
76298: GO 76234
76300: POP
76301: POP
// end ;
76302: GO 76120
76304: POP
76305: POP
// end ;
76306: LD_VAR 0 3
76310: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76311: LD_INT 0
76313: PPUSH
// if not side or side > 8 then
76314: LD_VAR 0 3
76318: NOT
76319: PUSH
76320: LD_VAR 0 3
76324: PUSH
76325: LD_INT 8
76327: GREATER
76328: OR
76329: IFFALSE 76333
// exit ;
76331: GO 76392
// if not range then
76333: LD_VAR 0 4
76337: NOT
76338: IFFALSE 76349
// range := - 12 ;
76340: LD_ADDR_VAR 0 4
76344: PUSH
76345: LD_INT 12
76347: NEG
76348: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76349: LD_VAR 0 1
76353: PPUSH
76354: LD_VAR 0 2
76358: PPUSH
76359: LD_VAR 0 3
76363: PPUSH
76364: LD_VAR 0 4
76368: PPUSH
76369: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76373: LD_VAR 0 1
76377: PPUSH
76378: LD_VAR 0 2
76382: PPUSH
76383: LD_VAR 0 3
76387: PPUSH
76388: CALL_OW 331
// end ;
76392: LD_VAR 0 5
76396: RET
// export function Video ( mode ) ; begin
76397: LD_INT 0
76399: PPUSH
// ingame_video = mode ;
76400: LD_ADDR_OWVAR 52
76404: PUSH
76405: LD_VAR 0 1
76409: ST_TO_ADDR
// interface_hidden = mode ;
76410: LD_ADDR_OWVAR 54
76414: PUSH
76415: LD_VAR 0 1
76419: ST_TO_ADDR
// end ;
76420: LD_VAR 0 2
76424: RET
// export function Join ( array , element ) ; begin
76425: LD_INT 0
76427: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76428: LD_ADDR_VAR 0 3
76432: PUSH
76433: LD_VAR 0 1
76437: PPUSH
76438: LD_VAR 0 1
76442: PUSH
76443: LD_INT 1
76445: PLUS
76446: PPUSH
76447: LD_VAR 0 2
76451: PPUSH
76452: CALL_OW 1
76456: ST_TO_ADDR
// end ;
76457: LD_VAR 0 3
76461: RET
// export function JoinUnion ( array , element ) ; begin
76462: LD_INT 0
76464: PPUSH
// result := array union element ;
76465: LD_ADDR_VAR 0 3
76469: PUSH
76470: LD_VAR 0 1
76474: PUSH
76475: LD_VAR 0 2
76479: UNION
76480: ST_TO_ADDR
// end ;
76481: LD_VAR 0 3
76485: RET
// export function GetBehemoths ( side ) ; begin
76486: LD_INT 0
76488: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76489: LD_ADDR_VAR 0 2
76493: PUSH
76494: LD_INT 22
76496: PUSH
76497: LD_VAR 0 1
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: PUSH
76506: LD_INT 31
76508: PUSH
76509: LD_INT 25
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PPUSH
76520: CALL_OW 69
76524: ST_TO_ADDR
// end ;
76525: LD_VAR 0 2
76529: RET
// export function Shuffle ( array ) ; var i , index ; begin
76530: LD_INT 0
76532: PPUSH
76533: PPUSH
76534: PPUSH
// result := [ ] ;
76535: LD_ADDR_VAR 0 2
76539: PUSH
76540: EMPTY
76541: ST_TO_ADDR
// if not array then
76542: LD_VAR 0 1
76546: NOT
76547: IFFALSE 76551
// exit ;
76549: GO 76650
// Randomize ;
76551: CALL_OW 10
// for i = array downto 1 do
76555: LD_ADDR_VAR 0 3
76559: PUSH
76560: DOUBLE
76561: LD_VAR 0 1
76565: INC
76566: ST_TO_ADDR
76567: LD_INT 1
76569: PUSH
76570: FOR_DOWNTO
76571: IFFALSE 76648
// begin index := rand ( 1 , array ) ;
76573: LD_ADDR_VAR 0 4
76577: PUSH
76578: LD_INT 1
76580: PPUSH
76581: LD_VAR 0 1
76585: PPUSH
76586: CALL_OW 12
76590: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76591: LD_ADDR_VAR 0 2
76595: PUSH
76596: LD_VAR 0 2
76600: PPUSH
76601: LD_VAR 0 2
76605: PUSH
76606: LD_INT 1
76608: PLUS
76609: PPUSH
76610: LD_VAR 0 1
76614: PUSH
76615: LD_VAR 0 4
76619: ARRAY
76620: PPUSH
76621: CALL_OW 2
76625: ST_TO_ADDR
// array := Delete ( array , index ) ;
76626: LD_ADDR_VAR 0 1
76630: PUSH
76631: LD_VAR 0 1
76635: PPUSH
76636: LD_VAR 0 4
76640: PPUSH
76641: CALL_OW 3
76645: ST_TO_ADDR
// end ;
76646: GO 76570
76648: POP
76649: POP
// end ;
76650: LD_VAR 0 2
76654: RET
// export function GetBaseMaterials ( base ) ; begin
76655: LD_INT 0
76657: PPUSH
// result := [ 0 , 0 , 0 ] ;
76658: LD_ADDR_VAR 0 2
76662: PUSH
76663: LD_INT 0
76665: PUSH
76666: LD_INT 0
76668: PUSH
76669: LD_INT 0
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: LIST
76676: ST_TO_ADDR
// if not base then
76677: LD_VAR 0 1
76681: NOT
76682: IFFALSE 76686
// exit ;
76684: GO 76735
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76686: LD_ADDR_VAR 0 2
76690: PUSH
76691: LD_VAR 0 1
76695: PPUSH
76696: LD_INT 1
76698: PPUSH
76699: CALL_OW 275
76703: PUSH
76704: LD_VAR 0 1
76708: PPUSH
76709: LD_INT 2
76711: PPUSH
76712: CALL_OW 275
76716: PUSH
76717: LD_VAR 0 1
76721: PPUSH
76722: LD_INT 3
76724: PPUSH
76725: CALL_OW 275
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: LIST
76734: ST_TO_ADDR
// end ;
76735: LD_VAR 0 2
76739: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76740: LD_INT 0
76742: PPUSH
76743: PPUSH
// result := array ;
76744: LD_ADDR_VAR 0 3
76748: PUSH
76749: LD_VAR 0 1
76753: ST_TO_ADDR
// if size >= result then
76754: LD_VAR 0 2
76758: PUSH
76759: LD_VAR 0 3
76763: GREATEREQUAL
76764: IFFALSE 76768
// exit ;
76766: GO 76818
// if size then
76768: LD_VAR 0 2
76772: IFFALSE 76818
// for i := array downto size do
76774: LD_ADDR_VAR 0 4
76778: PUSH
76779: DOUBLE
76780: LD_VAR 0 1
76784: INC
76785: ST_TO_ADDR
76786: LD_VAR 0 2
76790: PUSH
76791: FOR_DOWNTO
76792: IFFALSE 76816
// result := Delete ( result , result ) ;
76794: LD_ADDR_VAR 0 3
76798: PUSH
76799: LD_VAR 0 3
76803: PPUSH
76804: LD_VAR 0 3
76808: PPUSH
76809: CALL_OW 3
76813: ST_TO_ADDR
76814: GO 76791
76816: POP
76817: POP
// end ;
76818: LD_VAR 0 3
76822: RET
// export function ComExit ( unit ) ; var tmp ; begin
76823: LD_INT 0
76825: PPUSH
76826: PPUSH
// if not IsInUnit ( unit ) then
76827: LD_VAR 0 1
76831: PPUSH
76832: CALL_OW 310
76836: NOT
76837: IFFALSE 76841
// exit ;
76839: GO 76901
// tmp := IsInUnit ( unit ) ;
76841: LD_ADDR_VAR 0 3
76845: PUSH
76846: LD_VAR 0 1
76850: PPUSH
76851: CALL_OW 310
76855: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76856: LD_VAR 0 3
76860: PPUSH
76861: CALL_OW 247
76865: PUSH
76866: LD_INT 2
76868: EQUAL
76869: IFFALSE 76882
// ComExitVehicle ( unit ) else
76871: LD_VAR 0 1
76875: PPUSH
76876: CALL_OW 121
76880: GO 76891
// ComExitBuilding ( unit ) ;
76882: LD_VAR 0 1
76886: PPUSH
76887: CALL_OW 122
// result := tmp ;
76891: LD_ADDR_VAR 0 2
76895: PUSH
76896: LD_VAR 0 3
76900: ST_TO_ADDR
// end ;
76901: LD_VAR 0 2
76905: RET
// export function ComExitAll ( units ) ; var i ; begin
76906: LD_INT 0
76908: PPUSH
76909: PPUSH
// if not units then
76910: LD_VAR 0 1
76914: NOT
76915: IFFALSE 76919
// exit ;
76917: GO 76945
// for i in units do
76919: LD_ADDR_VAR 0 3
76923: PUSH
76924: LD_VAR 0 1
76928: PUSH
76929: FOR_IN
76930: IFFALSE 76943
// ComExit ( i ) ;
76932: LD_VAR 0 3
76936: PPUSH
76937: CALL 76823 0 1
76941: GO 76929
76943: POP
76944: POP
// end ;
76945: LD_VAR 0 2
76949: RET
// export function ResetHc ; begin
76950: LD_INT 0
76952: PPUSH
// InitHc ;
76953: CALL_OW 19
// hc_importance := 0 ;
76957: LD_ADDR_OWVAR 32
76961: PUSH
76962: LD_INT 0
76964: ST_TO_ADDR
// end ;
76965: LD_VAR 0 1
76969: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76970: LD_INT 0
76972: PPUSH
76973: PPUSH
76974: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76975: LD_ADDR_VAR 0 6
76979: PUSH
76980: LD_VAR 0 1
76984: PUSH
76985: LD_VAR 0 3
76989: PLUS
76990: PUSH
76991: LD_INT 2
76993: DIV
76994: ST_TO_ADDR
// if _x < 0 then
76995: LD_VAR 0 6
76999: PUSH
77000: LD_INT 0
77002: LESS
77003: IFFALSE 77020
// _x := _x * - 1 ;
77005: LD_ADDR_VAR 0 6
77009: PUSH
77010: LD_VAR 0 6
77014: PUSH
77015: LD_INT 1
77017: NEG
77018: MUL
77019: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77020: LD_ADDR_VAR 0 7
77024: PUSH
77025: LD_VAR 0 2
77029: PUSH
77030: LD_VAR 0 4
77034: PLUS
77035: PUSH
77036: LD_INT 2
77038: DIV
77039: ST_TO_ADDR
// if _y < 0 then
77040: LD_VAR 0 7
77044: PUSH
77045: LD_INT 0
77047: LESS
77048: IFFALSE 77065
// _y := _y * - 1 ;
77050: LD_ADDR_VAR 0 7
77054: PUSH
77055: LD_VAR 0 7
77059: PUSH
77060: LD_INT 1
77062: NEG
77063: MUL
77064: ST_TO_ADDR
// result := [ _x , _y ] ;
77065: LD_ADDR_VAR 0 5
77069: PUSH
77070: LD_VAR 0 6
77074: PUSH
77075: LD_VAR 0 7
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: ST_TO_ADDR
// end ;
77084: LD_VAR 0 5
77088: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77089: LD_INT 0
77091: PPUSH
77092: PPUSH
77093: PPUSH
77094: PPUSH
// task := GetTaskList ( unit ) ;
77095: LD_ADDR_VAR 0 7
77099: PUSH
77100: LD_VAR 0 1
77104: PPUSH
77105: CALL_OW 437
77109: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77110: LD_VAR 0 7
77114: NOT
77115: PUSH
77116: LD_VAR 0 1
77120: PPUSH
77121: LD_VAR 0 2
77125: PPUSH
77126: CALL_OW 308
77130: NOT
77131: AND
77132: IFFALSE 77136
// exit ;
77134: GO 77254
// if IsInArea ( unit , area ) then
77136: LD_VAR 0 1
77140: PPUSH
77141: LD_VAR 0 2
77145: PPUSH
77146: CALL_OW 308
77150: IFFALSE 77168
// begin ComMoveToArea ( unit , goAway ) ;
77152: LD_VAR 0 1
77156: PPUSH
77157: LD_VAR 0 3
77161: PPUSH
77162: CALL_OW 113
// exit ;
77166: GO 77254
// end ; if task [ 1 ] [ 1 ] <> M then
77168: LD_VAR 0 7
77172: PUSH
77173: LD_INT 1
77175: ARRAY
77176: PUSH
77177: LD_INT 1
77179: ARRAY
77180: PUSH
77181: LD_STRING M
77183: NONEQUAL
77184: IFFALSE 77188
// exit ;
77186: GO 77254
// x := task [ 1 ] [ 2 ] ;
77188: LD_ADDR_VAR 0 5
77192: PUSH
77193: LD_VAR 0 7
77197: PUSH
77198: LD_INT 1
77200: ARRAY
77201: PUSH
77202: LD_INT 2
77204: ARRAY
77205: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77206: LD_ADDR_VAR 0 6
77210: PUSH
77211: LD_VAR 0 7
77215: PUSH
77216: LD_INT 1
77218: ARRAY
77219: PUSH
77220: LD_INT 3
77222: ARRAY
77223: ST_TO_ADDR
// if InArea ( x , y , area ) then
77224: LD_VAR 0 5
77228: PPUSH
77229: LD_VAR 0 6
77233: PPUSH
77234: LD_VAR 0 2
77238: PPUSH
77239: CALL_OW 309
77243: IFFALSE 77254
// ComStop ( unit ) ;
77245: LD_VAR 0 1
77249: PPUSH
77250: CALL_OW 141
// end ;
77254: LD_VAR 0 4
77258: RET
// export function Abs ( value ) ; begin
77259: LD_INT 0
77261: PPUSH
// result := value ;
77262: LD_ADDR_VAR 0 2
77266: PUSH
77267: LD_VAR 0 1
77271: ST_TO_ADDR
// if value < 0 then
77272: LD_VAR 0 1
77276: PUSH
77277: LD_INT 0
77279: LESS
77280: IFFALSE 77297
// result := value * - 1 ;
77282: LD_ADDR_VAR 0 2
77286: PUSH
77287: LD_VAR 0 1
77291: PUSH
77292: LD_INT 1
77294: NEG
77295: MUL
77296: ST_TO_ADDR
// end ;
77297: LD_VAR 0 2
77301: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77302: LD_INT 0
77304: PPUSH
77305: PPUSH
77306: PPUSH
77307: PPUSH
77308: PPUSH
77309: PPUSH
77310: PPUSH
77311: PPUSH
// if not unit or not building then
77312: LD_VAR 0 1
77316: NOT
77317: PUSH
77318: LD_VAR 0 2
77322: NOT
77323: OR
77324: IFFALSE 77328
// exit ;
77326: GO 77554
// x := GetX ( building ) ;
77328: LD_ADDR_VAR 0 4
77332: PUSH
77333: LD_VAR 0 2
77337: PPUSH
77338: CALL_OW 250
77342: ST_TO_ADDR
// y := GetY ( building ) ;
77343: LD_ADDR_VAR 0 6
77347: PUSH
77348: LD_VAR 0 2
77352: PPUSH
77353: CALL_OW 251
77357: ST_TO_ADDR
// d := GetDir ( building ) ;
77358: LD_ADDR_VAR 0 8
77362: PUSH
77363: LD_VAR 0 2
77367: PPUSH
77368: CALL_OW 254
77372: ST_TO_ADDR
// r := 4 ;
77373: LD_ADDR_VAR 0 9
77377: PUSH
77378: LD_INT 4
77380: ST_TO_ADDR
// for i := 1 to 5 do
77381: LD_ADDR_VAR 0 10
77385: PUSH
77386: DOUBLE
77387: LD_INT 1
77389: DEC
77390: ST_TO_ADDR
77391: LD_INT 5
77393: PUSH
77394: FOR_TO
77395: IFFALSE 77552
// begin _x := ShiftX ( x , d , r + i ) ;
77397: LD_ADDR_VAR 0 5
77401: PUSH
77402: LD_VAR 0 4
77406: PPUSH
77407: LD_VAR 0 8
77411: PPUSH
77412: LD_VAR 0 9
77416: PUSH
77417: LD_VAR 0 10
77421: PLUS
77422: PPUSH
77423: CALL_OW 272
77427: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77428: LD_ADDR_VAR 0 7
77432: PUSH
77433: LD_VAR 0 6
77437: PPUSH
77438: LD_VAR 0 8
77442: PPUSH
77443: LD_VAR 0 9
77447: PUSH
77448: LD_VAR 0 10
77452: PLUS
77453: PPUSH
77454: CALL_OW 273
77458: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77459: LD_VAR 0 5
77463: PPUSH
77464: LD_VAR 0 7
77468: PPUSH
77469: CALL_OW 488
77473: PUSH
77474: LD_VAR 0 5
77478: PPUSH
77479: LD_VAR 0 7
77483: PPUSH
77484: CALL_OW 428
77488: PPUSH
77489: CALL_OW 247
77493: PUSH
77494: LD_INT 3
77496: PUSH
77497: LD_INT 2
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: IN
77504: NOT
77505: AND
77506: IFFALSE 77550
// begin ComMoveXY ( unit , _x , _y ) ;
77508: LD_VAR 0 1
77512: PPUSH
77513: LD_VAR 0 5
77517: PPUSH
77518: LD_VAR 0 7
77522: PPUSH
77523: CALL_OW 111
// result := [ _x , _y ] ;
77527: LD_ADDR_VAR 0 3
77531: PUSH
77532: LD_VAR 0 5
77536: PUSH
77537: LD_VAR 0 7
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: ST_TO_ADDR
// exit ;
77546: POP
77547: POP
77548: GO 77554
// end ; end ;
77550: GO 77394
77552: POP
77553: POP
// end ;
77554: LD_VAR 0 3
77558: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77559: LD_INT 0
77561: PPUSH
77562: PPUSH
77563: PPUSH
// result := 0 ;
77564: LD_ADDR_VAR 0 3
77568: PUSH
77569: LD_INT 0
77571: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77572: LD_VAR 0 1
77576: PUSH
77577: LD_INT 0
77579: LESS
77580: PUSH
77581: LD_VAR 0 1
77585: PUSH
77586: LD_INT 8
77588: GREATER
77589: OR
77590: PUSH
77591: LD_VAR 0 2
77595: PUSH
77596: LD_INT 0
77598: LESS
77599: OR
77600: PUSH
77601: LD_VAR 0 2
77605: PUSH
77606: LD_INT 8
77608: GREATER
77609: OR
77610: IFFALSE 77614
// exit ;
77612: GO 77689
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77614: LD_ADDR_VAR 0 4
77618: PUSH
77619: LD_INT 22
77621: PUSH
77622: LD_VAR 0 2
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PPUSH
77631: CALL_OW 69
77635: PUSH
77636: FOR_IN
77637: IFFALSE 77687
// begin un := UnitShoot ( i ) ;
77639: LD_ADDR_VAR 0 5
77643: PUSH
77644: LD_VAR 0 4
77648: PPUSH
77649: CALL_OW 504
77653: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77654: LD_VAR 0 5
77658: PPUSH
77659: CALL_OW 255
77663: PUSH
77664: LD_VAR 0 1
77668: EQUAL
77669: IFFALSE 77685
// begin result := un ;
77671: LD_ADDR_VAR 0 3
77675: PUSH
77676: LD_VAR 0 5
77680: ST_TO_ADDR
// exit ;
77681: POP
77682: POP
77683: GO 77689
// end ; end ;
77685: GO 77636
77687: POP
77688: POP
// end ;
77689: LD_VAR 0 3
77693: RET
// export function GetCargoBay ( units ) ; begin
77694: LD_INT 0
77696: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77697: LD_ADDR_VAR 0 2
77701: PUSH
77702: LD_VAR 0 1
77706: PPUSH
77707: LD_INT 2
77709: PUSH
77710: LD_INT 34
77712: PUSH
77713: LD_INT 12
77715: PUSH
77716: EMPTY
77717: LIST
77718: LIST
77719: PUSH
77720: LD_INT 34
77722: PUSH
77723: LD_INT 51
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: PUSH
77730: LD_INT 34
77732: PUSH
77733: LD_INT 32
77735: PUSH
77736: EMPTY
77737: LIST
77738: LIST
77739: PUSH
77740: LD_INT 34
77742: PUSH
77743: LD_EXP 46
77747: PUSH
77748: EMPTY
77749: LIST
77750: LIST
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: LIST
77756: LIST
77757: LIST
77758: PPUSH
77759: CALL_OW 72
77763: ST_TO_ADDR
// end ;
77764: LD_VAR 0 2
77768: RET
// export function Negate ( value ) ; begin
77769: LD_INT 0
77771: PPUSH
// result := not value ;
77772: LD_ADDR_VAR 0 2
77776: PUSH
77777: LD_VAR 0 1
77781: NOT
77782: ST_TO_ADDR
// end ;
77783: LD_VAR 0 2
77787: RET
// export function Inc ( value ) ; begin
77788: LD_INT 0
77790: PPUSH
// result := value + 1 ;
77791: LD_ADDR_VAR 0 2
77795: PUSH
77796: LD_VAR 0 1
77800: PUSH
77801: LD_INT 1
77803: PLUS
77804: ST_TO_ADDR
// end ;
77805: LD_VAR 0 2
77809: RET
// export function Dec ( value ) ; begin
77810: LD_INT 0
77812: PPUSH
// result := value - 1 ;
77813: LD_ADDR_VAR 0 2
77817: PUSH
77818: LD_VAR 0 1
77822: PUSH
77823: LD_INT 1
77825: MINUS
77826: ST_TO_ADDR
// end ;
77827: LD_VAR 0 2
77831: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77832: LD_INT 0
77834: PPUSH
77835: PPUSH
77836: PPUSH
77837: PPUSH
77838: PPUSH
77839: PPUSH
77840: PPUSH
77841: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77842: LD_VAR 0 1
77846: PPUSH
77847: LD_VAR 0 2
77851: PPUSH
77852: CALL_OW 488
77856: NOT
77857: PUSH
77858: LD_VAR 0 3
77862: PPUSH
77863: LD_VAR 0 4
77867: PPUSH
77868: CALL_OW 488
77872: NOT
77873: OR
77874: IFFALSE 77887
// begin result := - 1 ;
77876: LD_ADDR_VAR 0 5
77880: PUSH
77881: LD_INT 1
77883: NEG
77884: ST_TO_ADDR
// exit ;
77885: GO 78122
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77887: LD_ADDR_VAR 0 12
77891: PUSH
77892: LD_VAR 0 1
77896: PPUSH
77897: LD_VAR 0 2
77901: PPUSH
77902: LD_VAR 0 3
77906: PPUSH
77907: LD_VAR 0 4
77911: PPUSH
77912: CALL 76970 0 4
77916: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77917: LD_ADDR_VAR 0 11
77921: PUSH
77922: LD_VAR 0 1
77926: PPUSH
77927: LD_VAR 0 2
77931: PPUSH
77932: LD_VAR 0 12
77936: PUSH
77937: LD_INT 1
77939: ARRAY
77940: PPUSH
77941: LD_VAR 0 12
77945: PUSH
77946: LD_INT 2
77948: ARRAY
77949: PPUSH
77950: CALL_OW 298
77954: ST_TO_ADDR
// distance := 9999 ;
77955: LD_ADDR_VAR 0 10
77959: PUSH
77960: LD_INT 9999
77962: ST_TO_ADDR
// for i := 0 to 5 do
77963: LD_ADDR_VAR 0 6
77967: PUSH
77968: DOUBLE
77969: LD_INT 0
77971: DEC
77972: ST_TO_ADDR
77973: LD_INT 5
77975: PUSH
77976: FOR_TO
77977: IFFALSE 78120
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77979: LD_ADDR_VAR 0 7
77983: PUSH
77984: LD_VAR 0 1
77988: PPUSH
77989: LD_VAR 0 6
77993: PPUSH
77994: LD_VAR 0 11
77998: PPUSH
77999: CALL_OW 272
78003: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78004: LD_ADDR_VAR 0 8
78008: PUSH
78009: LD_VAR 0 2
78013: PPUSH
78014: LD_VAR 0 6
78018: PPUSH
78019: LD_VAR 0 11
78023: PPUSH
78024: CALL_OW 273
78028: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78029: LD_VAR 0 7
78033: PPUSH
78034: LD_VAR 0 8
78038: PPUSH
78039: CALL_OW 488
78043: NOT
78044: IFFALSE 78048
// continue ;
78046: GO 77976
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78048: LD_ADDR_VAR 0 9
78052: PUSH
78053: LD_VAR 0 12
78057: PUSH
78058: LD_INT 1
78060: ARRAY
78061: PPUSH
78062: LD_VAR 0 12
78066: PUSH
78067: LD_INT 2
78069: ARRAY
78070: PPUSH
78071: LD_VAR 0 7
78075: PPUSH
78076: LD_VAR 0 8
78080: PPUSH
78081: CALL_OW 298
78085: ST_TO_ADDR
// if tmp < distance then
78086: LD_VAR 0 9
78090: PUSH
78091: LD_VAR 0 10
78095: LESS
78096: IFFALSE 78118
// begin result := i ;
78098: LD_ADDR_VAR 0 5
78102: PUSH
78103: LD_VAR 0 6
78107: ST_TO_ADDR
// distance := tmp ;
78108: LD_ADDR_VAR 0 10
78112: PUSH
78113: LD_VAR 0 9
78117: ST_TO_ADDR
// end ; end ;
78118: GO 77976
78120: POP
78121: POP
// end ;
78122: LD_VAR 0 5
78126: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78127: LD_INT 0
78129: PPUSH
78130: PPUSH
// if not driver or not IsInUnit ( driver ) then
78131: LD_VAR 0 1
78135: NOT
78136: PUSH
78137: LD_VAR 0 1
78141: PPUSH
78142: CALL_OW 310
78146: NOT
78147: OR
78148: IFFALSE 78152
// exit ;
78150: GO 78242
// vehicle := IsInUnit ( driver ) ;
78152: LD_ADDR_VAR 0 3
78156: PUSH
78157: LD_VAR 0 1
78161: PPUSH
78162: CALL_OW 310
78166: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78167: LD_VAR 0 1
78171: PPUSH
78172: LD_STRING \
78174: PUSH
78175: LD_INT 0
78177: PUSH
78178: LD_INT 0
78180: PUSH
78181: LD_INT 0
78183: PUSH
78184: LD_INT 0
78186: PUSH
78187: LD_INT 0
78189: PUSH
78190: LD_INT 0
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: LIST
78201: PUSH
78202: LD_STRING E
78204: PUSH
78205: LD_INT 0
78207: PUSH
78208: LD_INT 0
78210: PUSH
78211: LD_VAR 0 3
78215: PUSH
78216: LD_INT 0
78218: PUSH
78219: LD_INT 0
78221: PUSH
78222: LD_INT 0
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: LIST
78232: LIST
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: PPUSH
78238: CALL_OW 446
// end ;
78242: LD_VAR 0 2
78246: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78247: LD_INT 0
78249: PPUSH
78250: PPUSH
// if not driver or not IsInUnit ( driver ) then
78251: LD_VAR 0 1
78255: NOT
78256: PUSH
78257: LD_VAR 0 1
78261: PPUSH
78262: CALL_OW 310
78266: NOT
78267: OR
78268: IFFALSE 78272
// exit ;
78270: GO 78362
// vehicle := IsInUnit ( driver ) ;
78272: LD_ADDR_VAR 0 3
78276: PUSH
78277: LD_VAR 0 1
78281: PPUSH
78282: CALL_OW 310
78286: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78287: LD_VAR 0 1
78291: PPUSH
78292: LD_STRING \
78294: PUSH
78295: LD_INT 0
78297: PUSH
78298: LD_INT 0
78300: PUSH
78301: LD_INT 0
78303: PUSH
78304: LD_INT 0
78306: PUSH
78307: LD_INT 0
78309: PUSH
78310: LD_INT 0
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: LIST
78317: LIST
78318: LIST
78319: LIST
78320: LIST
78321: PUSH
78322: LD_STRING E
78324: PUSH
78325: LD_INT 0
78327: PUSH
78328: LD_INT 0
78330: PUSH
78331: LD_VAR 0 3
78335: PUSH
78336: LD_INT 0
78338: PUSH
78339: LD_INT 0
78341: PUSH
78342: LD_INT 0
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: LIST
78349: LIST
78350: LIST
78351: LIST
78352: LIST
78353: PUSH
78354: EMPTY
78355: LIST
78356: LIST
78357: PPUSH
78358: CALL_OW 447
// end ;
78362: LD_VAR 0 2
78366: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78367: LD_INT 0
78369: PPUSH
78370: PPUSH
78371: PPUSH
// tmp := [ ] ;
78372: LD_ADDR_VAR 0 5
78376: PUSH
78377: EMPTY
78378: ST_TO_ADDR
// for i in units do
78379: LD_ADDR_VAR 0 4
78383: PUSH
78384: LD_VAR 0 1
78388: PUSH
78389: FOR_IN
78390: IFFALSE 78428
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78392: LD_ADDR_VAR 0 5
78396: PUSH
78397: LD_VAR 0 5
78401: PPUSH
78402: LD_VAR 0 5
78406: PUSH
78407: LD_INT 1
78409: PLUS
78410: PPUSH
78411: LD_VAR 0 4
78415: PPUSH
78416: CALL_OW 256
78420: PPUSH
78421: CALL_OW 2
78425: ST_TO_ADDR
78426: GO 78389
78428: POP
78429: POP
// if not tmp then
78430: LD_VAR 0 5
78434: NOT
78435: IFFALSE 78439
// exit ;
78437: GO 78487
// if asc then
78439: LD_VAR 0 2
78443: IFFALSE 78467
// result := SortListByListAsc ( units , tmp ) else
78445: LD_ADDR_VAR 0 3
78449: PUSH
78450: LD_VAR 0 1
78454: PPUSH
78455: LD_VAR 0 5
78459: PPUSH
78460: CALL_OW 76
78464: ST_TO_ADDR
78465: GO 78487
// result := SortListByListDesc ( units , tmp ) ;
78467: LD_ADDR_VAR 0 3
78471: PUSH
78472: LD_VAR 0 1
78476: PPUSH
78477: LD_VAR 0 5
78481: PPUSH
78482: CALL_OW 77
78486: ST_TO_ADDR
// end ;
78487: LD_VAR 0 3
78491: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78492: LD_INT 0
78494: PPUSH
78495: PPUSH
// task := GetTaskList ( mech ) ;
78496: LD_ADDR_VAR 0 4
78500: PUSH
78501: LD_VAR 0 1
78505: PPUSH
78506: CALL_OW 437
78510: ST_TO_ADDR
// if not task then
78511: LD_VAR 0 4
78515: NOT
78516: IFFALSE 78520
// exit ;
78518: GO 78562
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78520: LD_ADDR_VAR 0 3
78524: PUSH
78525: LD_VAR 0 4
78529: PUSH
78530: LD_INT 1
78532: ARRAY
78533: PUSH
78534: LD_INT 1
78536: ARRAY
78537: PUSH
78538: LD_STRING r
78540: EQUAL
78541: PUSH
78542: LD_VAR 0 4
78546: PUSH
78547: LD_INT 1
78549: ARRAY
78550: PUSH
78551: LD_INT 4
78553: ARRAY
78554: PUSH
78555: LD_VAR 0 2
78559: EQUAL
78560: AND
78561: ST_TO_ADDR
// end ;
78562: LD_VAR 0 3
78566: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78567: LD_INT 0
78569: PPUSH
// SetDir ( unit , d ) ;
78570: LD_VAR 0 1
78574: PPUSH
78575: LD_VAR 0 4
78579: PPUSH
78580: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78584: LD_VAR 0 1
78588: PPUSH
78589: LD_VAR 0 2
78593: PPUSH
78594: LD_VAR 0 3
78598: PPUSH
78599: LD_VAR 0 5
78603: PPUSH
78604: CALL_OW 48
// end ;
78608: LD_VAR 0 6
78612: RET
// export function ToNaturalNumber ( number ) ; begin
78613: LD_INT 0
78615: PPUSH
// result := number div 1 ;
78616: LD_ADDR_VAR 0 2
78620: PUSH
78621: LD_VAR 0 1
78625: PUSH
78626: LD_INT 1
78628: DIV
78629: ST_TO_ADDR
// if number < 0 then
78630: LD_VAR 0 1
78634: PUSH
78635: LD_INT 0
78637: LESS
78638: IFFALSE 78648
// result := 0 ;
78640: LD_ADDR_VAR 0 2
78644: PUSH
78645: LD_INT 0
78647: ST_TO_ADDR
// end ;
78648: LD_VAR 0 2
78652: RET
// export function SortByClass ( units , class ) ; var un ; begin
78653: LD_INT 0
78655: PPUSH
78656: PPUSH
// if not units or not class then
78657: LD_VAR 0 1
78661: NOT
78662: PUSH
78663: LD_VAR 0 2
78667: NOT
78668: OR
78669: IFFALSE 78673
// exit ;
78671: GO 78768
// result := [ ] ;
78673: LD_ADDR_VAR 0 3
78677: PUSH
78678: EMPTY
78679: ST_TO_ADDR
// for un in units do
78680: LD_ADDR_VAR 0 4
78684: PUSH
78685: LD_VAR 0 1
78689: PUSH
78690: FOR_IN
78691: IFFALSE 78766
// if GetClass ( un ) = class then
78693: LD_VAR 0 4
78697: PPUSH
78698: CALL_OW 257
78702: PUSH
78703: LD_VAR 0 2
78707: EQUAL
78708: IFFALSE 78735
// result := Insert ( result , 1 , un ) else
78710: LD_ADDR_VAR 0 3
78714: PUSH
78715: LD_VAR 0 3
78719: PPUSH
78720: LD_INT 1
78722: PPUSH
78723: LD_VAR 0 4
78727: PPUSH
78728: CALL_OW 2
78732: ST_TO_ADDR
78733: GO 78764
// result := Replace ( result , result + 1 , un ) ;
78735: LD_ADDR_VAR 0 3
78739: PUSH
78740: LD_VAR 0 3
78744: PPUSH
78745: LD_VAR 0 3
78749: PUSH
78750: LD_INT 1
78752: PLUS
78753: PPUSH
78754: LD_VAR 0 4
78758: PPUSH
78759: CALL_OW 1
78763: ST_TO_ADDR
78764: GO 78690
78766: POP
78767: POP
// end ;
78768: LD_VAR 0 3
78772: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78773: LD_INT 0
78775: PPUSH
78776: PPUSH
78777: PPUSH
78778: PPUSH
78779: PPUSH
78780: PPUSH
78781: PPUSH
// result := [ ] ;
78782: LD_ADDR_VAR 0 4
78786: PUSH
78787: EMPTY
78788: ST_TO_ADDR
// if x - r < 0 then
78789: LD_VAR 0 1
78793: PUSH
78794: LD_VAR 0 3
78798: MINUS
78799: PUSH
78800: LD_INT 0
78802: LESS
78803: IFFALSE 78815
// min_x := 0 else
78805: LD_ADDR_VAR 0 8
78809: PUSH
78810: LD_INT 0
78812: ST_TO_ADDR
78813: GO 78831
// min_x := x - r ;
78815: LD_ADDR_VAR 0 8
78819: PUSH
78820: LD_VAR 0 1
78824: PUSH
78825: LD_VAR 0 3
78829: MINUS
78830: ST_TO_ADDR
// if y - r < 0 then
78831: LD_VAR 0 2
78835: PUSH
78836: LD_VAR 0 3
78840: MINUS
78841: PUSH
78842: LD_INT 0
78844: LESS
78845: IFFALSE 78857
// min_y := 0 else
78847: LD_ADDR_VAR 0 7
78851: PUSH
78852: LD_INT 0
78854: ST_TO_ADDR
78855: GO 78873
// min_y := y - r ;
78857: LD_ADDR_VAR 0 7
78861: PUSH
78862: LD_VAR 0 2
78866: PUSH
78867: LD_VAR 0 3
78871: MINUS
78872: ST_TO_ADDR
// max_x := x + r ;
78873: LD_ADDR_VAR 0 9
78877: PUSH
78878: LD_VAR 0 1
78882: PUSH
78883: LD_VAR 0 3
78887: PLUS
78888: ST_TO_ADDR
// max_y := y + r ;
78889: LD_ADDR_VAR 0 10
78893: PUSH
78894: LD_VAR 0 2
78898: PUSH
78899: LD_VAR 0 3
78903: PLUS
78904: ST_TO_ADDR
// for _x = min_x to max_x do
78905: LD_ADDR_VAR 0 5
78909: PUSH
78910: DOUBLE
78911: LD_VAR 0 8
78915: DEC
78916: ST_TO_ADDR
78917: LD_VAR 0 9
78921: PUSH
78922: FOR_TO
78923: IFFALSE 79024
// for _y = min_y to max_y do
78925: LD_ADDR_VAR 0 6
78929: PUSH
78930: DOUBLE
78931: LD_VAR 0 7
78935: DEC
78936: ST_TO_ADDR
78937: LD_VAR 0 10
78941: PUSH
78942: FOR_TO
78943: IFFALSE 79020
// begin if not ValidHex ( _x , _y ) then
78945: LD_VAR 0 5
78949: PPUSH
78950: LD_VAR 0 6
78954: PPUSH
78955: CALL_OW 488
78959: NOT
78960: IFFALSE 78964
// continue ;
78962: GO 78942
// if GetResourceTypeXY ( _x , _y ) then
78964: LD_VAR 0 5
78968: PPUSH
78969: LD_VAR 0 6
78973: PPUSH
78974: CALL_OW 283
78978: IFFALSE 79018
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78980: LD_ADDR_VAR 0 4
78984: PUSH
78985: LD_VAR 0 4
78989: PPUSH
78990: LD_VAR 0 4
78994: PUSH
78995: LD_INT 1
78997: PLUS
78998: PPUSH
78999: LD_VAR 0 5
79003: PUSH
79004: LD_VAR 0 6
79008: PUSH
79009: EMPTY
79010: LIST
79011: LIST
79012: PPUSH
79013: CALL_OW 1
79017: ST_TO_ADDR
// end ;
79018: GO 78942
79020: POP
79021: POP
79022: GO 78922
79024: POP
79025: POP
// end ;
79026: LD_VAR 0 4
79030: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79031: LD_INT 0
79033: PPUSH
79034: PPUSH
79035: PPUSH
79036: PPUSH
79037: PPUSH
79038: PPUSH
79039: PPUSH
79040: PPUSH
// if not units then
79041: LD_VAR 0 1
79045: NOT
79046: IFFALSE 79050
// exit ;
79048: GO 79576
// result := UnitFilter ( units , [ f_ok ] ) ;
79050: LD_ADDR_VAR 0 3
79054: PUSH
79055: LD_VAR 0 1
79059: PPUSH
79060: LD_INT 50
79062: PUSH
79063: EMPTY
79064: LIST
79065: PPUSH
79066: CALL_OW 72
79070: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79071: LD_ADDR_VAR 0 8
79075: PUSH
79076: LD_VAR 0 1
79080: PUSH
79081: LD_INT 1
79083: ARRAY
79084: PPUSH
79085: CALL_OW 255
79089: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79090: LD_ADDR_VAR 0 10
79094: PUSH
79095: LD_INT 29
79097: PUSH
79098: LD_EXP 49
79102: PUSH
79103: LD_INT 49
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: LIST
79110: ST_TO_ADDR
// if not result then
79111: LD_VAR 0 3
79115: NOT
79116: IFFALSE 79120
// exit ;
79118: GO 79576
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79120: LD_ADDR_VAR 0 5
79124: PUSH
79125: LD_INT 81
79127: PUSH
79128: LD_VAR 0 8
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PPUSH
79137: CALL_OW 69
79141: ST_TO_ADDR
// for i in result do
79142: LD_ADDR_VAR 0 4
79146: PUSH
79147: LD_VAR 0 3
79151: PUSH
79152: FOR_IN
79153: IFFALSE 79574
// begin tag := GetTag ( i ) + 1 ;
79155: LD_ADDR_VAR 0 9
79159: PUSH
79160: LD_VAR 0 4
79164: PPUSH
79165: CALL_OW 110
79169: PUSH
79170: LD_INT 1
79172: PLUS
79173: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79174: LD_ADDR_VAR 0 7
79178: PUSH
79179: LD_VAR 0 4
79183: PPUSH
79184: CALL_OW 250
79188: PPUSH
79189: LD_VAR 0 4
79193: PPUSH
79194: CALL_OW 251
79198: PPUSH
79199: LD_INT 6
79201: PPUSH
79202: CALL 78773 0 3
79206: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79207: LD_VAR 0 4
79211: PPUSH
79212: CALL_OW 247
79216: PUSH
79217: LD_INT 2
79219: EQUAL
79220: PUSH
79221: LD_VAR 0 7
79225: AND
79226: PUSH
79227: LD_VAR 0 4
79231: PPUSH
79232: CALL_OW 264
79236: PUSH
79237: LD_VAR 0 10
79241: IN
79242: NOT
79243: AND
79244: IFFALSE 79283
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79246: LD_VAR 0 4
79250: PPUSH
79251: LD_VAR 0 7
79255: PUSH
79256: LD_INT 1
79258: ARRAY
79259: PUSH
79260: LD_INT 1
79262: ARRAY
79263: PPUSH
79264: LD_VAR 0 7
79268: PUSH
79269: LD_INT 1
79271: ARRAY
79272: PUSH
79273: LD_INT 2
79275: ARRAY
79276: PPUSH
79277: CALL_OW 116
79281: GO 79572
// if path > tag then
79283: LD_VAR 0 2
79287: PUSH
79288: LD_VAR 0 9
79292: GREATER
79293: IFFALSE 79501
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79295: LD_ADDR_VAR 0 6
79299: PUSH
79300: LD_VAR 0 5
79304: PPUSH
79305: LD_INT 91
79307: PUSH
79308: LD_VAR 0 4
79312: PUSH
79313: LD_INT 8
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: LIST
79320: PPUSH
79321: CALL_OW 72
79325: ST_TO_ADDR
// if nearEnemy then
79326: LD_VAR 0 6
79330: IFFALSE 79399
// begin if GetWeapon ( i ) = ru_time_lapser then
79332: LD_VAR 0 4
79336: PPUSH
79337: CALL_OW 264
79341: PUSH
79342: LD_INT 49
79344: EQUAL
79345: IFFALSE 79373
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79347: LD_VAR 0 4
79351: PPUSH
79352: LD_VAR 0 6
79356: PPUSH
79357: LD_VAR 0 4
79361: PPUSH
79362: CALL_OW 74
79366: PPUSH
79367: CALL_OW 112
79371: GO 79397
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79373: LD_VAR 0 4
79377: PPUSH
79378: LD_VAR 0 6
79382: PPUSH
79383: LD_VAR 0 4
79387: PPUSH
79388: CALL_OW 74
79392: PPUSH
79393: CALL_OW 115
// end else
79397: GO 79499
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79399: LD_VAR 0 4
79403: PPUSH
79404: LD_VAR 0 2
79408: PUSH
79409: LD_VAR 0 9
79413: ARRAY
79414: PUSH
79415: LD_INT 1
79417: ARRAY
79418: PPUSH
79419: LD_VAR 0 2
79423: PUSH
79424: LD_VAR 0 9
79428: ARRAY
79429: PUSH
79430: LD_INT 2
79432: ARRAY
79433: PPUSH
79434: CALL_OW 297
79438: PUSH
79439: LD_INT 6
79441: GREATER
79442: IFFALSE 79485
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79444: LD_VAR 0 4
79448: PPUSH
79449: LD_VAR 0 2
79453: PUSH
79454: LD_VAR 0 9
79458: ARRAY
79459: PUSH
79460: LD_INT 1
79462: ARRAY
79463: PPUSH
79464: LD_VAR 0 2
79468: PUSH
79469: LD_VAR 0 9
79473: ARRAY
79474: PUSH
79475: LD_INT 2
79477: ARRAY
79478: PPUSH
79479: CALL_OW 114
79483: GO 79499
// SetTag ( i , tag ) ;
79485: LD_VAR 0 4
79489: PPUSH
79490: LD_VAR 0 9
79494: PPUSH
79495: CALL_OW 109
// end else
79499: GO 79572
// if enemy then
79501: LD_VAR 0 5
79505: IFFALSE 79572
// begin if GetWeapon ( i ) = ru_time_lapser then
79507: LD_VAR 0 4
79511: PPUSH
79512: CALL_OW 264
79516: PUSH
79517: LD_INT 49
79519: EQUAL
79520: IFFALSE 79548
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79522: LD_VAR 0 4
79526: PPUSH
79527: LD_VAR 0 5
79531: PPUSH
79532: LD_VAR 0 4
79536: PPUSH
79537: CALL_OW 74
79541: PPUSH
79542: CALL_OW 112
79546: GO 79572
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79548: LD_VAR 0 4
79552: PPUSH
79553: LD_VAR 0 5
79557: PPUSH
79558: LD_VAR 0 4
79562: PPUSH
79563: CALL_OW 74
79567: PPUSH
79568: CALL_OW 115
// end ; end ;
79572: GO 79152
79574: POP
79575: POP
// end ;
79576: LD_VAR 0 3
79580: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79581: LD_INT 0
79583: PPUSH
79584: PPUSH
79585: PPUSH
// if not unit or IsInUnit ( unit ) then
79586: LD_VAR 0 1
79590: NOT
79591: PUSH
79592: LD_VAR 0 1
79596: PPUSH
79597: CALL_OW 310
79601: OR
79602: IFFALSE 79606
// exit ;
79604: GO 79697
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79606: LD_ADDR_VAR 0 4
79610: PUSH
79611: LD_VAR 0 1
79615: PPUSH
79616: CALL_OW 250
79620: PPUSH
79621: LD_VAR 0 2
79625: PPUSH
79626: LD_INT 1
79628: PPUSH
79629: CALL_OW 272
79633: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79634: LD_ADDR_VAR 0 5
79638: PUSH
79639: LD_VAR 0 1
79643: PPUSH
79644: CALL_OW 251
79648: PPUSH
79649: LD_VAR 0 2
79653: PPUSH
79654: LD_INT 1
79656: PPUSH
79657: CALL_OW 273
79661: ST_TO_ADDR
// if ValidHex ( x , y ) then
79662: LD_VAR 0 4
79666: PPUSH
79667: LD_VAR 0 5
79671: PPUSH
79672: CALL_OW 488
79676: IFFALSE 79697
// ComTurnXY ( unit , x , y ) ;
79678: LD_VAR 0 1
79682: PPUSH
79683: LD_VAR 0 4
79687: PPUSH
79688: LD_VAR 0 5
79692: PPUSH
79693: CALL_OW 118
// end ;
79697: LD_VAR 0 3
79701: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79702: LD_INT 0
79704: PPUSH
79705: PPUSH
// result := false ;
79706: LD_ADDR_VAR 0 3
79710: PUSH
79711: LD_INT 0
79713: ST_TO_ADDR
// if not units then
79714: LD_VAR 0 2
79718: NOT
79719: IFFALSE 79723
// exit ;
79721: GO 79768
// for i in units do
79723: LD_ADDR_VAR 0 4
79727: PUSH
79728: LD_VAR 0 2
79732: PUSH
79733: FOR_IN
79734: IFFALSE 79766
// if See ( side , i ) then
79736: LD_VAR 0 1
79740: PPUSH
79741: LD_VAR 0 4
79745: PPUSH
79746: CALL_OW 292
79750: IFFALSE 79764
// begin result := true ;
79752: LD_ADDR_VAR 0 3
79756: PUSH
79757: LD_INT 1
79759: ST_TO_ADDR
// exit ;
79760: POP
79761: POP
79762: GO 79768
// end ;
79764: GO 79733
79766: POP
79767: POP
// end ;
79768: LD_VAR 0 3
79772: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79773: LD_INT 0
79775: PPUSH
79776: PPUSH
79777: PPUSH
79778: PPUSH
// if not unit or not points then
79779: LD_VAR 0 1
79783: NOT
79784: PUSH
79785: LD_VAR 0 2
79789: NOT
79790: OR
79791: IFFALSE 79795
// exit ;
79793: GO 79885
// dist := 99999 ;
79795: LD_ADDR_VAR 0 5
79799: PUSH
79800: LD_INT 99999
79802: ST_TO_ADDR
// for i in points do
79803: LD_ADDR_VAR 0 4
79807: PUSH
79808: LD_VAR 0 2
79812: PUSH
79813: FOR_IN
79814: IFFALSE 79883
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79816: LD_ADDR_VAR 0 6
79820: PUSH
79821: LD_VAR 0 1
79825: PPUSH
79826: LD_VAR 0 4
79830: PUSH
79831: LD_INT 1
79833: ARRAY
79834: PPUSH
79835: LD_VAR 0 4
79839: PUSH
79840: LD_INT 2
79842: ARRAY
79843: PPUSH
79844: CALL_OW 297
79848: ST_TO_ADDR
// if tmpDist < dist then
79849: LD_VAR 0 6
79853: PUSH
79854: LD_VAR 0 5
79858: LESS
79859: IFFALSE 79881
// begin result := i ;
79861: LD_ADDR_VAR 0 3
79865: PUSH
79866: LD_VAR 0 4
79870: ST_TO_ADDR
// dist := tmpDist ;
79871: LD_ADDR_VAR 0 5
79875: PUSH
79876: LD_VAR 0 6
79880: ST_TO_ADDR
// end ; end ;
79881: GO 79813
79883: POP
79884: POP
// end ;
79885: LD_VAR 0 3
79889: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79890: LD_INT 0
79892: PPUSH
// uc_side := side ;
79893: LD_ADDR_OWVAR 20
79897: PUSH
79898: LD_VAR 0 1
79902: ST_TO_ADDR
// uc_nation := 3 ;
79903: LD_ADDR_OWVAR 21
79907: PUSH
79908: LD_INT 3
79910: ST_TO_ADDR
// vc_chassis := 25 ;
79911: LD_ADDR_OWVAR 37
79915: PUSH
79916: LD_INT 25
79918: ST_TO_ADDR
// vc_engine := engine_siberite ;
79919: LD_ADDR_OWVAR 39
79923: PUSH
79924: LD_INT 3
79926: ST_TO_ADDR
// vc_control := control_computer ;
79927: LD_ADDR_OWVAR 38
79931: PUSH
79932: LD_INT 3
79934: ST_TO_ADDR
// vc_weapon := 59 ;
79935: LD_ADDR_OWVAR 40
79939: PUSH
79940: LD_INT 59
79942: ST_TO_ADDR
// result := CreateVehicle ;
79943: LD_ADDR_VAR 0 5
79947: PUSH
79948: CALL_OW 45
79952: ST_TO_ADDR
// SetDir ( result , d ) ;
79953: LD_VAR 0 5
79957: PPUSH
79958: LD_VAR 0 4
79962: PPUSH
79963: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79967: LD_VAR 0 5
79971: PPUSH
79972: LD_VAR 0 2
79976: PPUSH
79977: LD_VAR 0 3
79981: PPUSH
79982: LD_INT 0
79984: PPUSH
79985: CALL_OW 48
// end ;
79989: LD_VAR 0 5
79993: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79994: LD_INT 0
79996: PPUSH
79997: PPUSH
79998: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79999: LD_ADDR_VAR 0 2
80003: PUSH
80004: LD_INT 0
80006: PUSH
80007: LD_INT 0
80009: PUSH
80010: LD_INT 0
80012: PUSH
80013: LD_INT 0
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: LIST
80020: LIST
80021: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80022: LD_VAR 0 1
80026: NOT
80027: PUSH
80028: LD_VAR 0 1
80032: PPUSH
80033: CALL_OW 264
80037: PUSH
80038: LD_INT 12
80040: PUSH
80041: LD_INT 51
80043: PUSH
80044: LD_INT 32
80046: PUSH
80047: LD_EXP 46
80051: PUSH
80052: EMPTY
80053: LIST
80054: LIST
80055: LIST
80056: LIST
80057: IN
80058: NOT
80059: OR
80060: IFFALSE 80064
// exit ;
80062: GO 80162
// for i := 1 to 3 do
80064: LD_ADDR_VAR 0 3
80068: PUSH
80069: DOUBLE
80070: LD_INT 1
80072: DEC
80073: ST_TO_ADDR
80074: LD_INT 3
80076: PUSH
80077: FOR_TO
80078: IFFALSE 80160
// begin tmp := GetCargo ( cargo , i ) ;
80080: LD_ADDR_VAR 0 4
80084: PUSH
80085: LD_VAR 0 1
80089: PPUSH
80090: LD_VAR 0 3
80094: PPUSH
80095: CALL_OW 289
80099: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80100: LD_ADDR_VAR 0 2
80104: PUSH
80105: LD_VAR 0 2
80109: PPUSH
80110: LD_VAR 0 3
80114: PPUSH
80115: LD_VAR 0 4
80119: PPUSH
80120: CALL_OW 1
80124: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80125: LD_ADDR_VAR 0 2
80129: PUSH
80130: LD_VAR 0 2
80134: PPUSH
80135: LD_INT 4
80137: PPUSH
80138: LD_VAR 0 2
80142: PUSH
80143: LD_INT 4
80145: ARRAY
80146: PUSH
80147: LD_VAR 0 4
80151: PLUS
80152: PPUSH
80153: CALL_OW 1
80157: ST_TO_ADDR
// end ;
80158: GO 80077
80160: POP
80161: POP
// end ;
80162: LD_VAR 0 2
80166: RET
// export function Length ( array ) ; begin
80167: LD_INT 0
80169: PPUSH
// result := array + 0 ;
80170: LD_ADDR_VAR 0 2
80174: PUSH
80175: LD_VAR 0 1
80179: PUSH
80180: LD_INT 0
80182: PLUS
80183: ST_TO_ADDR
// end ;
80184: LD_VAR 0 2
80188: RET
// export function PrepareArray ( array ) ; begin
80189: LD_INT 0
80191: PPUSH
// result := array diff 0 ;
80192: LD_ADDR_VAR 0 2
80196: PUSH
80197: LD_VAR 0 1
80201: PUSH
80202: LD_INT 0
80204: DIFF
80205: ST_TO_ADDR
// if not result [ 1 ] then
80206: LD_VAR 0 2
80210: PUSH
80211: LD_INT 1
80213: ARRAY
80214: NOT
80215: IFFALSE 80235
// result := Delete ( result , 1 ) ;
80217: LD_ADDR_VAR 0 2
80221: PUSH
80222: LD_VAR 0 2
80226: PPUSH
80227: LD_INT 1
80229: PPUSH
80230: CALL_OW 3
80234: ST_TO_ADDR
// end ; end_of_file
80235: LD_VAR 0 2
80239: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80240: LD_VAR 0 1
80244: PUSH
80245: LD_INT 200
80247: DOUBLE
80248: GREATEREQUAL
80249: IFFALSE 80257
80251: LD_INT 299
80253: DOUBLE
80254: LESSEQUAL
80255: IFTRUE 80259
80257: GO 80291
80259: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80260: LD_VAR 0 1
80264: PPUSH
80265: LD_VAR 0 2
80269: PPUSH
80270: LD_VAR 0 3
80274: PPUSH
80275: LD_VAR 0 4
80279: PPUSH
80280: LD_VAR 0 5
80284: PPUSH
80285: CALL 35091 0 5
80289: GO 80368
80291: LD_INT 300
80293: DOUBLE
80294: GREATEREQUAL
80295: IFFALSE 80303
80297: LD_INT 399
80299: DOUBLE
80300: LESSEQUAL
80301: IFTRUE 80305
80303: GO 80367
80305: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80306: LD_VAR 0 1
80310: PPUSH
80311: LD_VAR 0 2
80315: PPUSH
80316: LD_VAR 0 3
80320: PPUSH
80321: LD_VAR 0 4
80325: PPUSH
80326: LD_VAR 0 5
80330: PPUSH
80331: LD_VAR 0 6
80335: PPUSH
80336: LD_VAR 0 7
80340: PPUSH
80341: LD_VAR 0 8
80345: PPUSH
80346: LD_VAR 0 9
80350: PPUSH
80351: LD_VAR 0 10
80355: PPUSH
80356: LD_VAR 0 11
80360: PPUSH
80361: CALL 31420 0 11
80365: GO 80368
80367: POP
// end ;
80368: PPOPN 11
80370: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80371: LD_VAR 0 1
80375: PPUSH
80376: LD_VAR 0 2
80380: PPUSH
80381: LD_VAR 0 3
80385: PPUSH
80386: LD_VAR 0 4
80390: PPUSH
80391: LD_VAR 0 5
80395: PPUSH
80396: CALL 34827 0 5
// end ; end_of_file
80400: PPOPN 5
80402: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80403: LD_VAR 0 1
80407: PPUSH
80408: LD_VAR 0 2
80412: PPUSH
80413: LD_VAR 0 3
80417: PPUSH
80418: LD_VAR 0 4
80422: PPUSH
80423: LD_VAR 0 5
80427: PPUSH
80428: LD_VAR 0 6
80432: PPUSH
80433: CALL 19113 0 6
// end ;
80437: PPOPN 6
80439: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80440: LD_INT 0
80442: PPUSH
// begin if not units then
80443: LD_VAR 0 1
80447: NOT
80448: IFFALSE 80452
// exit ;
80450: GO 80452
// end ;
80452: PPOPN 7
80454: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80455: CALL 19084 0 0
// end ;
80459: PPOPN 1
80461: END
