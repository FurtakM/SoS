// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15311 0 0
// PrepareDifficulty ;
 226: CALL 12526 0 0
// PrepareVehicles ;
 230: CALL 1765 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1339 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3153 0 0
// PrepareWestBase ;
 258: CALL 3668 0 0
// PrepareEastBase ;
 262: CALL 3228 0 0
// PrepareOtherRussians ;
 266: CALL 3780 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_STRING 11_
 688: PPUSH
 689: CALL 36828 0 3
 693: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 694: LD_EXP 1
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 21
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 58
 733: PUSH
 734: EMPTY
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 755: LD_STRING 11_Lisa
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: IFFALSE 816
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_STRING Lisa
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 11_
 781: PPUSH
 782: CALL 36828 0 3
 786: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 787: LD_EXP 2
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 799: LD_EXP 2
 803: PPUSH
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end else
 814: GO 832
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL 1339 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 832: LD_STRING 11_Donaldson
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 893
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 845: LD_ADDR_EXP 3
 849: PUSH
 850: LD_STRING Donaldson
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_STRING 11_
 858: PPUSH
 859: CALL 36828 0 3
 863: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 4
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// end else
 891: GO 909
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 909: LD_STRING 11_Cyrus
 911: PPUSH
 912: CALL_OW 28
 916: PUSH
 917: LD_INT 1
 919: EQUAL
 920: IFFALSE 970
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 36828 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1339 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: PUSH
 994: LD_INT 1
 996: EQUAL
 997: IFFALSE 1047
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
 999: LD_ADDR_EXP 6
1003: PUSH
1004: LD_STRING Denis
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_STRING 11_
1012: PPUSH
1013: CALL 36828 0 3
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1063
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1047: LD_INT 4
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 1339 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1063: LD_STRING 11_Frank
1065: PPUSH
1066: CALL_OW 28
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1124
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 36828 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1201
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING Cornell
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_STRING 11_
1166: PPUSH
1167: CALL 36828 0 3
1171: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1184: LD_EXP 10
1188: PPUSH
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// end else
1199: GO 1217
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1201: LD_INT 4
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL 1339 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_EXP 14
1226: PPUSH
1227: LD_INT 26
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: ST_TO_ADDR
// if not tmp then
1242: LD_VAR 0 2
1246: NOT
1247: IFFALSE 1276
// begin PrepareSoldier ( sex_male , 8 ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 8
1254: PPUSH
1255: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// end else
1274: GO 1315
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1276: LD_VAR 0 2
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: DIFF
1314: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1315: LD_ADDR_EXP 22
1319: PUSH
1320: LD_STRING Powell
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: LD_STRING 
1328: PPUSH
1329: CALL 36828 0 3
1333: ST_TO_ADDR
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// if mech = 1 then
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1591
// begin if others11 > 0 then
1356: LD_EXP 14
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1531
// begin for i := 1 to others11 - 1 do
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 14
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1468
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1388: LD_EXP 14
1392: PUSH
1393: LD_VAR 0 6
1397: ARRAY
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: CALL_OW 259
1406: PUSH
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL_OW 259
1429: LESS
1430: IFFALSE 1466
// begin mecha = others11 [ i + 1 ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_EXP 14
1441: PUSH
1442: LD_VAR 0 6
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1452: LD_VAR 0 9
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL_OW 336
// break ;
1464: GO 1468
// end ; end ;
1466: GO 1385
1468: POP
1469: POP
// if spawnMode = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1499
// PlaceUnitArea ( mecha , area , false ) else
1480: LD_VAR 0 9
1484: PPUSH
1485: LD_VAR 0 1
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
1497: GO 1513
// PlaceHumanInUnit ( mecha , veh ) ;
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 52
// others11 = others11 diff mecha ;
1513: LD_ADDR_EXP 14
1517: PUSH
1518: LD_EXP 14
1522: PUSH
1523: LD_VAR 0 9
1527: DIFF
1528: ST_TO_ADDR
// end else
1529: GO 1589
// begin hc_name =  ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING 
1538: ST_TO_ADDR
// hc_gallery =  ;
1539: LD_ADDR_OWVAR 33
1543: PUSH
1544: LD_STRING 
1546: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1547: LD_INT 0
1549: PPUSH
1550: LD_INT 7
1552: PPUSH
1553: LD_INT 9
1555: PPUSH
1556: CALL_OW 12
1560: PPUSH
1561: CALL_OW 383
// un = CreateHuman ;
1565: LD_ADDR_VAR 0 7
1569: PUSH
1570: CALL_OW 44
1574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1575: LD_VAR 0 7
1579: PPUSH
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 52
// end ; end else
1589: GO 1760
// begin if others11 > 0 then
1591: LD_EXP 14
1595: PUSH
1596: LD_INT 0
1598: GREATER
1599: IFFALSE 1672
// begin if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1634
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1611: LD_EXP 14
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
1632: GO 1652
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1634: LD_EXP 14
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_VAR 0 2
1647: PPUSH
1648: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1652: LD_ADDR_EXP 14
1656: PUSH
1657: LD_EXP 14
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 3
1669: ST_TO_ADDR
// end else
1670: GO 1760
// begin hc_name =  ;
1672: LD_ADDR_OWVAR 26
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 3
1699: PUSH
1700: LD_INT 4
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: ARRAY
1720: PPUSH
1721: LD_INT 7
1723: PPUSH
1724: LD_INT 9
1726: PPUSH
1727: CALL_OW 12
1731: PPUSH
1732: CALL_OW 380
// un = CreateHuman ;
1736: LD_ADDR_VAR 0 7
1740: PUSH
1741: CALL_OW 44
1745: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1746: LD_VAR 0 7
1750: PPUSH
1751: LD_VAR 0 2
1755: PPUSH
1756: CALL_OW 52
// end ; end ; end ;
1760: LD_VAR 0 5
1764: RET
// export function PrepareVehicles ; var veh ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1785: LD_ADDR_OWVAR 37
1789: PUSH
1790: LD_INT 3
1792: ST_TO_ADDR
// vc_engine = 3 ;
1793: LD_ADDR_OWVAR 39
1797: PUSH
1798: LD_INT 3
1800: ST_TO_ADDR
// vc_control = 3 ;
1801: LD_ADDR_OWVAR 38
1805: PUSH
1806: LD_INT 3
1808: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// veh = CreateVehicle ;
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: CALL_OW 45
1826: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1827: LD_VAR 0 2
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// vc_weapon = us_double_gun ;
1842: LD_ADDR_OWVAR 40
1846: PUSH
1847: LD_INT 5
1849: ST_TO_ADDR
// vc_control = 1 ;
1850: LD_ADDR_OWVAR 38
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// veh = CreateVehicle ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: CALL_OW 45
1867: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// vc_weapon = us_light_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// vc_control = 3 ;
1891: LD_ADDR_OWVAR 38
1895: PUSH
1896: LD_INT 3
1898: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1899: LD_ADDR_OWVAR 37
1903: PUSH
1904: LD_INT 2
1906: ST_TO_ADDR
// veh = CreateVehicle ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1932: LD_ADDR_OWVAR 40
1936: PUSH
1937: LD_INT 4
1939: ST_TO_ADDR
// veh = CreateVehicle ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: CALL_OW 45
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: LD_INT 4
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PowellSupport1 ; var veh , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
// uc_side = 1 ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// uc_nation = 1 ;
1983: LD_ADDR_OWVAR 21
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1991: LD_STRING 11_Brown
1993: PPUSH
1994: CALL_OW 28
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: IFFALSE 2052
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2004: LD_ADDR_EXP 7
2008: PUSH
2009: LD_STRING Brown
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_STRING 11_
2017: PPUSH
2018: CALL 36828 0 3
2022: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2023: LD_EXP 7
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2035: LD_EXP 7
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL_OW 49
// end else
2050: GO 2068
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2052: LD_INT 4
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL 1339 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2068: LD_STRING 11_Gary
2070: PPUSH
2071: CALL_OW 28
2075: PUSH
2076: LD_INT 1
2078: EQUAL
2079: IFFALSE 2129
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2081: LD_ADDR_EXP 11
2085: PUSH
2086: LD_STRING Gary
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_STRING 11_
2094: PPUSH
2095: CALL 36828 0 3
2099: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2100: LD_EXP 11
2104: PPUSH
2105: LD_INT 2
2107: PPUSH
2108: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2112: LD_EXP 11
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 49
// end else
2127: GO 2145
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 1339 0 4
// end ; vc_chassis = us_medium_tracked ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 3
2152: ST_TO_ADDR
// vc_engine = 3 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 3
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = us_crane ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 13
2176: ST_TO_ADDR
// veh = CreateVehicle ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: CALL_OW 45
2186: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2214: LD_INT 4
2216: PPUSH
2217: LD_VAR 0 2
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL 1339 0 4
// vc_weapon = 9 ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 9
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2277: LD_INT 4
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 2
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: CALL 1339 0 4
// vc_control = 3 ;
2295: LD_ADDR_OWVAR 38
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2303: LD_ADDR_OWVAR 40
2307: PUSH
2308: LD_INT 12
2310: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2311: LD_ADDR_EXP 15
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2321: LD_ADDR_EXP 16
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2331: LD_EXP 15
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2343: LD_EXP 16
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 4
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2385: LD_EXP 15
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 100
2395: PPUSH
2396: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2400: LD_EXP 16
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_INT 80
2410: PPUSH
2411: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2415: LD_EXP 16
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_INT 20
2425: PPUSH
2426: CALL_OW 291
// end ;
2430: LD_VAR 0 1
2434: RET
// export function PowellSupport2 ; var veh , un ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// uc_side = 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 2
2463: ST_TO_ADDR
// vc_engine = 3 ;
2464: LD_ADDR_OWVAR 39
2468: PUSH
2469: LD_INT 3
2471: ST_TO_ADDR
// vc_control = 3 ;
2472: LD_ADDR_OWVAR 38
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2480: LD_ADDR_OWVAR 40
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// veh = CreateVehicle ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: CALL_OW 45
2497: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 4
2505: PPUSH
2506: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// vc_control = 1 ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2533: LD_ADDR_OWVAR 37
2537: PUSH
2538: LD_INT 2
2540: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2559: LD_VAR 0 2
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2571: LD_VAR 0 2
2575: PPUSH
2576: LD_INT 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2586: LD_STRING 11_Bobby
2588: PPUSH
2589: CALL_OW 28
2593: PUSH
2594: LD_INT 1
2596: EQUAL
2597: IFFALSE 2646
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2599: LD_ADDR_EXP 4
2603: PUSH
2604: LD_STRING Bobby
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_STRING 11_
2612: PPUSH
2613: CALL 36828 0 3
2617: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2618: LD_EXP 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2630: LD_EXP 4
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 52
// end else
2644: GO 2664
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 1339 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2664: LD_STRING 11_Houten
2666: PPUSH
2667: CALL_OW 28
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: IFFALSE 2725
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2677: LD_ADDR_EXP 9
2681: PUSH
2682: LD_STRING Houten
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 11_
2690: PPUSH
2691: CALL 36828 0 3
2695: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2696: LD_EXP 9
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2708: LD_EXP 9
2712: PPUSH
2713: LD_INT 4
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 49
// end else
2723: GO 2741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2725: LD_INT 4
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL 1339 0 4
// end ; vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2757: LD_ADDR_EXP 17
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2767: LD_EXP 17
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: CALL_OW 233
// amCargo4 = CreateVehicle ;
2779: LD_ADDR_EXP 18
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2789: LD_EXP 18
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// amCargo5 = CreateVehicle ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: CALL_OW 45
2810: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2811: LD_EXP 19
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2823: LD_EXP 17
2827: PPUSH
2828: LD_INT 4
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2838: LD_EXP 18
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 49
// if kurtStatus > 0 then
2868: LD_EXP 26
2872: PUSH
2873: LD_INT 0
2875: GREATER
2876: IFFALSE 2925
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2878: LD_EXP 17
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2893: LD_EXP 18
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2908: LD_EXP 19
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_INT 80
2918: PPUSH
2919: CALL_OW 291
// end else
2923: GO 2970
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2925: LD_EXP 17
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2940: LD_EXP 18
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: LD_INT 60
2950: PPUSH
2951: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2955: LD_EXP 19
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 100
2965: PPUSH
2966: CALL_OW 291
// end ; end ;
2970: LD_VAR 0 1
2974: RET
// export function PowellSupport3 ; var veh , un ; begin
2975: LD_INT 0
2977: PPUSH
2978: PPUSH
2979: PPUSH
// uc_side = 1 ;
2980: LD_ADDR_OWVAR 20
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// uc_nation = 1 ;
2988: LD_ADDR_OWVAR 21
2992: PUSH
2993: LD_INT 1
2995: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL 1339 0 4
// vc_chassis = us_medium_wheeled ;
3012: LD_ADDR_OWVAR 37
3016: PUSH
3017: LD_INT 2
3019: ST_TO_ADDR
// vc_engine = 3 ;
3020: LD_ADDR_OWVAR 39
3024: PUSH
3025: LD_INT 3
3027: ST_TO_ADDR
// vc_control = 3 ;
3028: LD_ADDR_OWVAR 38
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3036: LD_ADDR_OWVAR 40
3040: PUSH
3041: LD_INT 12
3043: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3044: LD_ADDR_EXP 20
3048: PUSH
3049: CALL_OW 45
3053: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3054: LD_ADDR_EXP 21
3058: PUSH
3059: CALL_OW 45
3063: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3064: LD_EXP 20
3068: PPUSH
3069: LD_INT 4
3071: PPUSH
3072: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3076: LD_EXP 21
3080: PPUSH
3081: LD_INT 4
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3088: LD_EXP 20
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3103: LD_EXP 21
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3118: LD_EXP 20
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 100
3128: PPUSH
3129: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3133: LD_EXP 21
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 100
3143: PPUSH
3144: CALL_OW 291
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareRussianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 3 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3164: LD_ADDR_EXP 23
3168: PUSH
3169: LD_STRING Davidov
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_STRING 
3177: PPUSH
3178: CALL 36828 0 3
3182: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3183: LD_EXP 23
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3195: LD_ADDR_EXP 34
3199: PUSH
3200: LD_EXP 34
3204: PUSH
3205: LD_EXP 23
3209: ADD
3210: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3211: LD_EXP 34
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 336
// end ;
3223: LD_VAR 0 1
3227: RET
// export function PrepareEastBase ; var i , un ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: LD_INT 121
3241: PPUSH
3242: LD_EXP 36
3246: PPUSH
3247: LD_EXP 37
3251: PPUSH
3252: CALL_OW 12
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 121
3275: PPUSH
3276: LD_EXP 36
3280: PPUSH
3281: LD_EXP 37
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 9
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_EXP 36
3314: PPUSH
3315: LD_EXP 37
3319: PPUSH
3320: CALL_OW 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3335: LD_INT 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: LD_INT 112
3343: PPUSH
3344: LD_EXP 36
3348: PPUSH
3349: LD_EXP 37
3353: PPUSH
3354: CALL_OW 12
3358: PPUSH
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 6
3364: PPUSH
3365: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3369: LD_INT 3
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 47
3377: PPUSH
3378: LD_EXP 36
3382: PPUSH
3383: LD_EXP 37
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: LD_INT 4
3395: PPUSH
3396: LD_INT 6
3398: PPUSH
3399: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_INT 129
3411: PPUSH
3412: LD_EXP 36
3416: PPUSH
3417: LD_EXP 37
3421: PPUSH
3422: CALL_OW 12
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 6
3432: PPUSH
3433: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 135
3445: PPUSH
3446: LD_EXP 36
3450: PPUSH
3451: LD_EXP 37
3455: PPUSH
3456: CALL_OW 12
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 6
3466: PPUSH
3467: CALL 12845 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 30
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3546
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_EXP 36
3523: PPUSH
3524: LD_EXP 37
3528: PPUSH
3529: CALL_OW 12
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL 12845 0 6
3544: GO 3505
3546: POP
3547: POP
// for i = 1 to 5 do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 5
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3661
// begin uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// hc_gallery =  ;
3580: LD_ADDR_OWVAR 33
3584: PUSH
3585: LD_STRING 
3587: ST_TO_ADDR
// hc_name =  ;
3588: LD_ADDR_OWVAR 26
3592: PUSH
3593: LD_STRING 
3595: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_EXP 36
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: CALL_OW 12
3616: PPUSH
3617: CALL_OW 380
// un = CreateHuman ;
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3643: LD_ADDR_EXP 34
3647: PUSH
3648: LD_EXP 34
3652: PUSH
3653: LD_VAR 0 3
3657: ADD
3658: ST_TO_ADDR
// end ;
3659: GO 3561
3661: POP
3662: POP
// end ;
3663: LD_VAR 0 1
3667: RET
// export function PrepareWestBase ; var i , un ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: LD_INT 6
3681: PPUSH
3682: LD_EXP 36
3686: PPUSH
3687: LD_EXP 37
3691: PPUSH
3692: CALL_OW 12
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 91
3715: PPUSH
3716: LD_EXP 36
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: CALL_OW 12
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL 12845 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 21
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 6
3770: PPUSH
3771: CALL 12845 0 6
// end ;
3775: LD_VAR 0 1
3779: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side = 3 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// uc_nation = 3 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// for i = 1 to 5 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 5
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3886
// begin hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_EXP 36
3844: PPUSH
3845: LD_EXP 37
3849: PPUSH
3850: CALL_OW 12
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// end ;
3884: GO 3815
3886: POP
3887: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
3888: LD_ADDR_VAR 0 2
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PUSH
3916: LD_OWVAR 67
3920: ARRAY
3921: PUSH
3922: FOR_TO
3923: IFFALSE 3993
// begin hc_gallery =  ;
3925: LD_ADDR_OWVAR 33
3929: PUSH
3930: LD_STRING 
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 4
3946: PPUSH
3947: LD_EXP 36
3951: PPUSH
3952: LD_EXP 37
3956: PPUSH
3957: CALL_OW 12
3961: PPUSH
3962: CALL_OW 380
// un = CreateHuman ;
3966: LD_ADDR_VAR 0 3
3970: PUSH
3971: CALL_OW 44
3975: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3976: LD_VAR 0 3
3980: PPUSH
3981: LD_INT 8
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 49
// end ;
3991: GO 3922
3993: POP
3994: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: DOUBLE
4001: LD_INT 1
4003: DEC
4004: ST_TO_ADDR
4005: LD_INT 3
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: LD_OWVAR 67
4027: ARRAY
4028: PUSH
4029: FOR_TO
4030: IFFALSE 4226
// begin vc_engine = 3 ;
4032: LD_ADDR_OWVAR 39
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// vc_control = 1 ;
4040: LD_ADDR_OWVAR 38
4044: PUSH
4045: LD_INT 1
4047: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4048: LD_ADDR_OWVAR 40
4052: PUSH
4053: LD_INT 42
4055: PUSH
4056: LD_INT 43
4058: PUSH
4059: LD_INT 44
4061: PUSH
4062: LD_INT 45
4064: PUSH
4065: LD_INT 46
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 5
4080: PPUSH
4081: CALL_OW 12
4085: ARRAY
4086: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4087: LD_OWVAR 40
4091: PUSH
4092: LD_INT 46
4094: EQUAL
4095: IFFALSE 4107
// vc_chassis = ru_heavy_tracked else
4097: LD_ADDR_OWVAR 37
4101: PUSH
4102: LD_INT 24
4104: ST_TO_ADDR
4105: GO 4134
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4107: LD_ADDR_OWVAR 37
4111: PUSH
4112: LD_INT 22
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 12
4132: ARRAY
4133: ST_TO_ADDR
// veh = CreateVehicle ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: CALL_OW 45
4143: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4144: LD_VAR 0 4
4148: PPUSH
4149: LD_INT 3
4151: PPUSH
4152: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4156: LD_VAR 0 4
4160: PPUSH
4161: LD_INT 5
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// hc_gallery =  ;
4171: LD_ADDR_OWVAR 33
4175: PUSH
4176: LD_STRING 
4178: ST_TO_ADDR
// hc_name =  ;
4179: LD_ADDR_OWVAR 26
4183: PUSH
4184: LD_STRING 
4186: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4187: LD_INT 0
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 10
4195: PPUSH
4196: CALL_OW 380
// un = CreateHuman ;
4200: LD_ADDR_VAR 0 3
4204: PUSH
4205: CALL_OW 44
4209: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4210: LD_VAR 0 3
4214: PPUSH
4215: LD_VAR 0 4
4219: PPUSH
4220: CALL_OW 52
// end ;
4224: GO 4029
4226: POP
4227: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_OWVAR 67
4260: ARRAY
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4410
// begin vc_engine = 3 ;
4265: LD_ADDR_OWVAR 39
4269: PUSH
4270: LD_INT 3
4272: ST_TO_ADDR
// vc_control = 3 ;
4273: LD_ADDR_OWVAR 38
4277: PUSH
4278: LD_INT 3
4280: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 42
4288: PUSH
4289: LD_INT 43
4291: PUSH
4292: LD_INT 44
4294: PUSH
4295: LD_INT 45
4297: PUSH
4298: LD_INT 46
4300: PUSH
4301: LD_INT 49
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 5
4317: PPUSH
4318: CALL_OW 12
4322: ARRAY
4323: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4324: LD_OWVAR 40
4328: PUSH
4329: LD_INT 46
4331: EQUAL
4332: IFFALSE 4344
// vc_chassis = ru_heavy_tracked else
4334: LD_ADDR_OWVAR 37
4338: PUSH
4339: LD_INT 24
4341: ST_TO_ADDR
4342: GO 4371
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4344: LD_ADDR_OWVAR 37
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 21
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_INT 2
4364: PPUSH
4365: CALL_OW 12
4369: ARRAY
4370: ST_TO_ADDR
// veh = CreateVehicle ;
4371: LD_ADDR_VAR 0 4
4375: PUSH
4376: CALL_OW 45
4380: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_INT 3
4388: PPUSH
4389: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4393: LD_VAR 0 4
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: LD_INT 0
4403: PPUSH
4404: CALL_OW 49
// end ;
4408: GO 4262
4410: POP
4411: POP
// end ; end_of_file
4412: LD_VAR 0 1
4416: RET
// export function PrepareKurt ; begin
4417: LD_INT 0
4419: PPUSH
// uc_side = 8 ;
4420: LD_ADDR_OWVAR 20
4424: PUSH
4425: LD_INT 8
4427: ST_TO_ADDR
// uc_nation = 2 ;
4428: LD_ADDR_OWVAR 21
4432: PUSH
4433: LD_INT 2
4435: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4436: LD_ADDR_OWVAR 37
4440: PUSH
4441: LD_INT 13
4443: ST_TO_ADDR
// vc_engine = 1 ;
4444: LD_ADDR_OWVAR 39
4448: PUSH
4449: LD_INT 1
4451: ST_TO_ADDR
// vc_control = 1 ;
4452: LD_ADDR_OWVAR 38
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// vc_weapon = 24 ;
4460: LD_ADDR_OWVAR 40
4464: PUSH
4465: LD_INT 24
4467: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4468: LD_ADDR_EXP 25
4472: PUSH
4473: CALL_OW 45
4477: ST_TO_ADDR
// if kurtStatus > 0 then
4478: LD_EXP 26
4482: PUSH
4483: LD_INT 0
4485: GREATER
4486: IFFALSE 4538
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4488: LD_ADDR_EXP 24
4492: PUSH
4493: LD_STRING Kurt
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: LD_STRING 
4501: PPUSH
4502: CALL 36828 0 3
4506: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4507: LD_EXP 25
4511: PPUSH
4512: LD_INT 4
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4522: LD_EXP 24
4526: PPUSH
4527: LD_EXP 25
4531: PPUSH
4532: CALL_OW 52
// end else
4536: GO 4615
// begin hc_name =  ;
4538: LD_ADDR_OWVAR 26
4542: PUSH
4543: LD_STRING 
4545: ST_TO_ADDR
// hc_gallery =  ;
4546: LD_ADDR_OWVAR 33
4550: PUSH
4551: LD_STRING 
4553: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 10
4559: PPUSH
4560: CALL_OW 381
// Kurt = CreateHuman ;
4564: LD_ADDR_EXP 24
4568: PUSH
4569: CALL_OW 44
4573: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4574: LD_EXP 25
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4589: LD_EXP 24
4593: PPUSH
4594: LD_EXP 25
4598: PPUSH
4599: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4603: LD_EXP 24
4607: PPUSH
4608: LD_STRING AltKurt
4610: PPUSH
4611: CALL_OW 38
// end ; end ;
4615: LD_VAR 0 1
4619: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4620: LD_INT 0
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
// for i = 1 to 3 do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: DOUBLE
4632: LD_INT 1
4634: DEC
4635: ST_TO_ADDR
4636: LD_INT 3
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4761
// begin uc_side = 1 ;
4642: LD_ADDR_OWVAR 20
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// uc_nation = 2 ;
4650: LD_ADDR_OWVAR 21
4654: PUSH
4655: LD_INT 2
4657: ST_TO_ADDR
// hc_gallery =  ;
4658: LD_ADDR_OWVAR 33
4662: PUSH
4663: LD_STRING 
4665: ST_TO_ADDR
// hc_name =  ;
4666: LD_ADDR_OWVAR 26
4670: PUSH
4671: LD_STRING 
4673: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4674: LD_EXP 26
4678: PUSH
4679: LD_INT 0
4681: EQUAL
4682: PUSH
4683: LD_EXP 26
4687: PUSH
4688: LD_INT 2
4690: EQUAL
4691: OR
4692: IFFALSE 4709
// PrepareHuman ( false , 1 , 6 ) else
4694: LD_INT 0
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 6
4702: PPUSH
4703: CALL_OW 380
4707: GO 4722
// PrepareHuman ( false , 1 , 8 ) ;
4709: LD_INT 0
4711: PPUSH
4712: LD_INT 1
4714: PPUSH
4715: LD_INT 8
4717: PPUSH
4718: CALL_OW 380
// un = CreateHuman ;
4722: LD_ADDR_VAR 0 3
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 4
4739: PPUSH
4740: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4744: LD_VAR 0 3
4748: PPUSH
4749: LD_INT 4
4751: PPUSH
4752: LD_INT 0
4754: PPUSH
4755: CALL_OW 49
// end ;
4759: GO 4639
4761: POP
4762: POP
// vc_chassis = 14 ;
4763: LD_ADDR_OWVAR 37
4767: PUSH
4768: LD_INT 14
4770: ST_TO_ADDR
// vc_engine = 3 ;
4771: LD_ADDR_OWVAR 39
4775: PUSH
4776: LD_INT 3
4778: ST_TO_ADDR
// vc_control = 1 ;
4779: LD_ADDR_OWVAR 38
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4787: LD_ADDR_OWVAR 40
4791: PUSH
4792: LD_INT 27
4794: PUSH
4795: LD_INT 26
4797: PUSH
4798: LD_INT 28
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 1
4808: PPUSH
4809: LD_INT 3
4811: PPUSH
4812: CALL_OW 12
4816: ARRAY
4817: ST_TO_ADDR
// veh = CreateVehicle ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: CALL_OW 45
4827: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4828: LD_VAR 0 4
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4840: LD_VAR 0 4
4844: PPUSH
4845: LD_INT 4
4847: PPUSH
4848: LD_INT 0
4850: PPUSH
4851: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4855: LD_EXP 26
4859: PUSH
4860: LD_INT 0
4862: EQUAL
4863: PUSH
4864: LD_EXP 26
4868: PUSH
4869: LD_INT 2
4871: EQUAL
4872: OR
4873: IFFALSE 4890
// PrepareHuman ( false , 3 , 6 ) else
4875: LD_INT 0
4877: PPUSH
4878: LD_INT 3
4880: PPUSH
4881: LD_INT 6
4883: PPUSH
4884: CALL_OW 380
4888: GO 4903
// PrepareHuman ( false , 3 , 8 ) ;
4890: LD_INT 0
4892: PPUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 8
4898: PPUSH
4899: CALL_OW 380
// un = CreateHuman ;
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: CALL_OW 44
4912: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4913: LD_VAR 0 3
4917: PPUSH
4918: LD_VAR 0 4
4922: PPUSH
4923: CALL_OW 52
// vc_chassis = 14 ;
4927: LD_ADDR_OWVAR 37
4931: PUSH
4932: LD_INT 14
4934: ST_TO_ADDR
// vc_engine = 3 ;
4935: LD_ADDR_OWVAR 39
4939: PUSH
4940: LD_INT 3
4942: ST_TO_ADDR
// vc_control = 1 ;
4943: LD_ADDR_OWVAR 38
4947: PUSH
4948: LD_INT 1
4950: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4951: LD_ADDR_OWVAR 40
4955: PUSH
4956: LD_INT 27
4958: PUSH
4959: LD_INT 26
4961: PUSH
4962: LD_INT 28
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: CALL_OW 12
4980: ARRAY
4981: ST_TO_ADDR
// veh = CreateVehicle ;
4982: LD_ADDR_VAR 0 4
4986: PUSH
4987: CALL_OW 45
4991: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4992: LD_VAR 0 4
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5004: LD_VAR 0 4
5008: PPUSH
5009: LD_INT 4
5011: PPUSH
5012: LD_INT 0
5014: PPUSH
5015: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5019: LD_EXP 26
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: PUSH
5028: LD_EXP 26
5032: PUSH
5033: LD_INT 2
5035: EQUAL
5036: OR
5037: IFFALSE 5054
// PrepareHuman ( false , 4 , 6 ) else
5039: LD_INT 0
5041: PPUSH
5042: LD_INT 4
5044: PPUSH
5045: LD_INT 6
5047: PPUSH
5048: CALL_OW 380
5052: GO 5067
// PrepareHuman ( false , 4 , 8 ) ;
5054: LD_INT 0
5056: PPUSH
5057: LD_INT 4
5059: PPUSH
5060: LD_INT 8
5062: PPUSH
5063: CALL_OW 380
// un = CreateHuman ;
5067: LD_ADDR_VAR 0 3
5071: PUSH
5072: CALL_OW 44
5076: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5089: LD_VAR 0 3
5093: PPUSH
5094: LD_VAR 0 4
5098: PPUSH
5099: CALL_OW 52
// vc_chassis = 14 ;
5103: LD_ADDR_OWVAR 37
5107: PUSH
5108: LD_INT 14
5110: ST_TO_ADDR
// vc_engine = 3 ;
5111: LD_ADDR_OWVAR 39
5115: PUSH
5116: LD_INT 3
5118: ST_TO_ADDR
// vc_control = 1 ;
5119: LD_ADDR_OWVAR 38
5123: PUSH
5124: LD_INT 1
5126: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5127: LD_ADDR_OWVAR 40
5131: PUSH
5132: LD_INT 27
5134: PUSH
5135: LD_INT 26
5137: PUSH
5138: LD_INT 28
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 1
5148: PPUSH
5149: LD_INT 3
5151: PPUSH
5152: CALL_OW 12
5156: ARRAY
5157: ST_TO_ADDR
// veh = CreateVehicle ;
5158: LD_ADDR_VAR 0 4
5162: PUSH
5163: CALL_OW 45
5167: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 4
5175: PPUSH
5176: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5180: LD_VAR 0 4
5184: PPUSH
5185: LD_INT 4
5187: PPUSH
5188: LD_INT 0
5190: PPUSH
5191: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5195: LD_EXP 26
5199: PUSH
5200: LD_INT 0
5202: EQUAL
5203: PUSH
5204: LD_EXP 26
5208: PUSH
5209: LD_INT 2
5211: EQUAL
5212: OR
5213: IFFALSE 5230
// PrepareHuman ( false , 2 , 4 ) else
5215: LD_INT 0
5217: PPUSH
5218: LD_INT 2
5220: PPUSH
5221: LD_INT 4
5223: PPUSH
5224: CALL_OW 380
5228: GO 5243
// PrepareHuman ( false , 2 , 8 ) ;
5230: LD_INT 0
5232: PPUSH
5233: LD_INT 2
5235: PPUSH
5236: LD_INT 8
5238: PPUSH
5239: CALL_OW 380
// un = CreateHuman ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: CALL_OW 44
5252: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_INT 4
5260: PPUSH
5261: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: LD_VAR 0 4
5274: PPUSH
5275: CALL_OW 52
// end ;
5279: LD_VAR 0 1
5283: RET
// export function PrepareAttackLegion ; var i , un ; begin
5284: LD_INT 0
5286: PPUSH
5287: PPUSH
5288: PPUSH
// for i = 1 to 4 do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 4
5301: PUSH
5302: FOR_TO
5303: IFFALSE 5413
// begin uc_side = 8 ;
5305: LD_ADDR_OWVAR 20
5309: PUSH
5310: LD_INT 8
5312: ST_TO_ADDR
// uc_nation = 2 ;
5313: LD_ADDR_OWVAR 21
5317: PUSH
5318: LD_INT 2
5320: ST_TO_ADDR
// hc_gallery =  ;
5321: LD_ADDR_OWVAR 33
5325: PUSH
5326: LD_STRING 
5328: ST_TO_ADDR
// hc_name =  ;
5329: LD_ADDR_OWVAR 26
5333: PUSH
5334: LD_STRING 
5336: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5337: LD_INT 0
5339: PPUSH
5340: LD_INT 1
5342: PUSH
5343: LD_INT 8
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 1
5352: PPUSH
5353: LD_INT 2
5355: PPUSH
5356: CALL_OW 12
5360: ARRAY
5361: PPUSH
5362: LD_INT 6
5364: PPUSH
5365: LD_INT 8
5367: PPUSH
5368: CALL_OW 12
5372: PPUSH
5373: CALL_OW 380
// un = CreateHuman ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: CALL_OW 44
5386: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_INT 19
5394: PPUSH
5395: LD_INT 0
5397: PPUSH
5398: CALL_OW 49
// ComCrawl ( un ) ;
5402: LD_VAR 0 3
5406: PPUSH
5407: CALL_OW 137
// end ;
5411: GO 5302
5413: POP
5414: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5415: LD_INT 1
5417: PPUSH
5418: LD_INT 8
5420: PPUSH
5421: LD_INT 2
5423: PPUSH
5424: LD_INT 1
5426: PPUSH
5427: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5431: LD_INT 20
5433: PPUSH
5434: LD_INT 3
5436: PPUSH
5437: CALL 14823 0 2
// end ; end_of_file
5441: LD_VAR 0 1
5445: RET
// every 1 do var i ;
5446: GO 5448
5448: DISABLE
5449: LD_INT 0
5451: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5452: LD_INT 10
5454: PPUSH
5455: LD_INT 122
5457: PPUSH
5458: LD_INT 145
5460: PPUSH
5461: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5465: LD_INT 137
5467: PPUSH
5468: LD_INT 84
5470: PPUSH
5471: LD_INT 61
5473: PPUSH
5474: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5478: LD_EXP 1
5482: PPUSH
5483: CALL_OW 310
5487: PPUSH
5488: CALL_OW 87
// InGameOn ;
5492: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5496: LD_INT 22
5498: PUSH
5499: LD_INT 1
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: PPUSH
5511: LD_INT 130
5513: PPUSH
5514: LD_INT 103
5516: PPUSH
5517: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5521: LD_VAR 0 1
5525: PPUSH
5526: LD_INT 114
5528: PPUSH
5529: LD_INT 102
5531: PPUSH
5532: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5536: LD_EXP 1
5540: PPUSH
5541: LD_STRING D1-JMM-1
5543: PPUSH
5544: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5548: LD_EXP 1
5552: PPUSH
5553: CALL_OW 310
5557: PPUSH
5558: CALL_OW 87
// if IsOk ( Donaldson ) then
5562: LD_EXP 3
5566: PPUSH
5567: CALL_OW 302
5571: IFFALSE 5651
// begin Say ( Donaldson , D1-Don-1 ) ;
5573: LD_EXP 3
5577: PPUSH
5578: LD_STRING D1-Don-1
5580: PPUSH
5581: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5585: LD_EXP 1
5589: PPUSH
5590: CALL_OW 310
5594: PPUSH
5595: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5599: LD_EXP 1
5603: PPUSH
5604: LD_STRING D1-JMM-2
5606: PPUSH
5607: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5611: LD_EXP 1
5615: PPUSH
5616: CALL_OW 310
5620: PPUSH
5621: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5625: LD_EXP 3
5629: PPUSH
5630: LD_STRING D1-Don-2
5632: PPUSH
5633: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5637: LD_EXP 1
5641: PPUSH
5642: CALL_OW 310
5646: PPUSH
5647: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: CALL_OW 69
5665: PPUSH
5666: LD_INT 110
5668: PPUSH
5669: LD_INT 101
5671: PPUSH
5672: CALL_OW 171
// wait ( 0 0$1 ) ;
5676: LD_INT 35
5678: PPUSH
5679: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 310
5692: PPUSH
5693: CALL_OW 87
// wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5704: LD_EXP 1
5708: PPUSH
5709: CALL_OW 310
5713: PPUSH
5714: CALL_OW 87
// wait ( 0 0$1 ) ;
5718: LD_INT 35
5720: PPUSH
5721: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5725: LD_EXP 1
5729: PPUSH
5730: CALL_OW 310
5734: PPUSH
5735: CALL_OW 87
// wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5746: LD_EXP 1
5750: PPUSH
5751: CALL_OW 310
5755: PPUSH
5756: CALL_OW 87
// end ;
5760: PPOPN 1
5762: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 102
5768: PPUSH
5769: LD_INT 94
5771: PPUSH
5772: CALL_OW 293
5776: IFFALSE 5967
5778: GO 5780
5780: DISABLE
5781: LD_INT 0
5783: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5784: LD_INT 102
5786: PPUSH
5787: LD_INT 94
5789: PPUSH
5790: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5794: LD_INT 22
5796: PUSH
5797: LD_INT 1
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 26
5806: PUSH
5807: LD_INT 1
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 2
5816: PUSH
5817: LD_INT 25
5819: PUSH
5820: LD_INT 1
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 25
5829: PUSH
5830: LD_INT 2
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: LD_INT 25
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 25
5849: PUSH
5850: LD_INT 4
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 25
5869: PUSH
5870: LD_INT 8
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PPUSH
5891: CALL_OW 69
5895: PPUSH
5896: LD_STRING D1-Sol1-2
5898: PPUSH
5899: LD_STRING 
5901: PPUSH
5902: CALL 12340 0 3
// Say ( JMM , D1-JMM-3 ) ;
5906: LD_EXP 1
5910: PPUSH
5911: LD_STRING D1-JMM-3
5913: PPUSH
5914: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5918: LD_STRING M1
5920: PPUSH
5921: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5925: LD_ADDR_VAR 0 1
5929: PUSH
5930: LD_INT 22
5932: PUSH
5933: LD_INT 1
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PPUSH
5940: CALL_OW 69
5944: PUSH
5945: FOR_IN
5946: IFFALSE 5965
// ComMoveXY ( i , 95 , 84 ) ;
5948: LD_VAR 0 1
5952: PPUSH
5953: LD_INT 95
5955: PPUSH
5956: LD_INT 84
5958: PPUSH
5959: CALL_OW 111
5963: GO 5945
5965: POP
5966: POP
// end ;
5967: PPOPN 1
5969: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5979: LD_ADDR_VAR 0 2
5983: PUSH
5984: LD_INT 8
5986: PPUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 25
5999: PUSH
6000: LD_INT 9
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: CALL_OW 70
6015: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: PPUSH
6034: CALL_OW 69
6038: ST_TO_ADDR
// enable ;
6039: ENABLE
// for i in your_units do
6040: LD_ADDR_VAR 0 1
6044: PUSH
6045: LD_VAR 0 3
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6717
// begin if See ( 3 , i ) then
6053: LD_INT 3
6055: PPUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 292
6065: IFFALSE 6715
// begin disable ;
6067: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 96
6075: PPUSH
6076: LD_INT 85
6078: PPUSH
6079: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 96
6090: PPUSH
6091: LD_INT 85
6093: PPUSH
6094: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 96
6105: PPUSH
6106: LD_INT 85
6108: PPUSH
6109: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: LD_INT 96
6120: PPUSH
6121: LD_INT 85
6123: PPUSH
6124: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6128: LD_VAR 0 2
6132: PPUSH
6133: LD_INT 96
6135: PPUSH
6136: LD_INT 85
6138: PPUSH
6139: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6143: LD_VAR 0 2
6147: PPUSH
6148: LD_INT 96
6150: PPUSH
6151: LD_INT 85
6153: PPUSH
6154: CALL_OW 214
// wait ( 0 0$2 ) ;
6158: LD_INT 70
6160: PPUSH
6161: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6165: LD_EXP 1
6169: PPUSH
6170: LD_STRING D1a-JMM-1
6172: PPUSH
6173: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6177: LD_EXP 3
6181: PPUSH
6182: LD_STRING D1a-Don-1
6184: PPUSH
6185: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6189: LD_ADDR_VAR 0 1
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: PUSH
6209: FOR_IN
6210: IFFALSE 6229
// ComMoveXY ( i , 109 , 102 ) ;
6212: LD_VAR 0 1
6216: PPUSH
6217: LD_INT 109
6219: PPUSH
6220: LD_INT 102
6222: PPUSH
6223: CALL_OW 111
6227: GO 6209
6229: POP
6230: POP
// Say ( JMM , D1a-JMM-2 ) ;
6231: LD_EXP 1
6235: PPUSH
6236: LD_STRING D1a-JMM-2
6238: PPUSH
6239: CALL_OW 88
// wait ( 0 0$10 ) ;
6243: LD_INT 350
6245: PPUSH
6246: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6250: LD_EXP 1
6254: PPUSH
6255: CALL_OW 310
6259: PPUSH
6260: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6264: LD_EXP 3
6268: PPUSH
6269: LD_STRING D1b-Don-1
6271: PPUSH
6272: CALL_OW 88
// if IsOk ( Donaldson ) then
6276: LD_EXP 3
6280: PPUSH
6281: CALL_OW 302
6285: IFFALSE 6299
// Say ( JMM , D1b-JMM-1 ) ;
6287: LD_EXP 1
6291: PPUSH
6292: LD_STRING D1b-JMM-1
6294: PPUSH
6295: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6299: LD_INT 22
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 26
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 25
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 25
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 25
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 25
6364: PUSH
6365: LD_INT 5
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 25
6374: PUSH
6375: LD_INT 8
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: PPUSH
6401: LD_STRING D1b-Sol1-1
6403: PPUSH
6404: LD_STRING 
6406: PPUSH
6407: CALL 12340 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6411: LD_EXP 3
6415: PPUSH
6416: LD_STRING D1b-Don-2
6418: PPUSH
6419: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6423: LD_EXP 1
6427: PPUSH
6428: LD_STRING D1b-JMM-2
6430: PPUSH
6431: CALL_OW 88
// dec = ShowQuery1 ;
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: CALL 12803 0 0
6444: ST_TO_ADDR
// if dec = 1 then
6445: LD_VAR 0 4
6449: PUSH
6450: LD_INT 1
6452: EQUAL
6453: IFFALSE 6559
// begin Say ( JMM , D2-JMM-1 ) ;
6455: LD_EXP 1
6459: PPUSH
6460: LD_STRING D2-JMM-1
6462: PPUSH
6463: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6467: LD_EXP 22
6471: PPUSH
6472: LD_STRING D2-Pow-1
6474: PPUSH
6475: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6479: LD_EXP 1
6483: PPUSH
6484: LD_STRING D2a-JMM-1
6486: PPUSH
6487: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6491: LD_EXP 22
6495: PPUSH
6496: LD_STRING D2a-Pow-1
6498: PPUSH
6499: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6503: LD_EXP 1
6507: PPUSH
6508: LD_STRING D2a-JMM-2
6510: PPUSH
6511: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6515: LD_EXP 22
6519: PPUSH
6520: LD_STRING D2a-Pow-2
6522: PPUSH
6523: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D2a-JMM-3
6534: PPUSH
6535: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6539: LD_EXP 22
6543: PPUSH
6544: LD_STRING D2a-Pow-3
6546: PPUSH
6547: CALL_OW 94
// secondPass = 2 ;
6551: LD_ADDR_EXP 27
6555: PUSH
6556: LD_INT 2
6558: ST_TO_ADDR
// end ; if dec = 2 then
6559: LD_VAR 0 4
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: IFFALSE 6661
// begin Say ( JMM , D2-JMM-1 ) ;
6569: LD_EXP 1
6573: PPUSH
6574: LD_STRING D2-JMM-1
6576: PPUSH
6577: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6581: LD_EXP 22
6585: PPUSH
6586: LD_STRING D2-Pow-1
6588: PPUSH
6589: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6593: LD_EXP 1
6597: PPUSH
6598: LD_STRING D2b-JMM-1
6600: PPUSH
6601: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6605: LD_EXP 22
6609: PPUSH
6610: LD_STRING D2b-Pow-1
6612: PPUSH
6613: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6617: LD_EXP 1
6621: PPUSH
6622: LD_STRING D2c-JMM-1
6624: PPUSH
6625: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6629: LD_EXP 22
6633: PPUSH
6634: LD_STRING D2c-Pow-1
6636: PPUSH
6637: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6641: LD_EXP 1
6645: PPUSH
6646: LD_STRING D2c-JMM-2
6648: PPUSH
6649: CALL_OW 88
// secondPass = 2 ;
6653: LD_ADDR_EXP 27
6657: PUSH
6658: LD_INT 2
6660: ST_TO_ADDR
// end ; if dec = 3 then
6661: LD_VAR 0 4
6665: PUSH
6666: LD_INT 3
6668: EQUAL
6669: IFFALSE 6679
// secondPass = 1 ;
6671: LD_ADDR_EXP 27
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// InGameOff ;
6679: CALL_OW 9
// ruAI = 1 ;
6683: LD_ADDR_EXP 41
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 2
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: CALL_OW 80
// SaveForQuickRestart ;
6707: CALL_OW 22
// exit ;
6711: POP
6712: POP
6713: GO 6719
// end ; end ;
6715: GO 6050
6717: POP
6718: POP
// end ;
6719: PPOPN 4
6721: END
// every 1 1$0 trigger secondPass = 2 do
6722: LD_EXP 27
6726: PUSH
6727: LD_INT 2
6729: EQUAL
6730: IFFALSE 6950
6732: GO 6734
6734: DISABLE
// begin PowellSupport1 ;
6735: CALL 1970 0 0
// DialogueOn ;
6739: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6743: LD_EXP 1
6747: PPUSH
6748: LD_STRING DC1-JMM-1
6750: PPUSH
6751: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6755: LD_EXP 22
6759: PPUSH
6760: LD_STRING DC1-Pow-1
6762: PPUSH
6763: CALL_OW 94
// DialogueOff ;
6767: CALL_OW 7
// wait ( 3 3$0 ) ;
6771: LD_INT 6300
6773: PPUSH
6774: CALL_OW 67
// PowellSupport2 ;
6778: CALL 2435 0 0
// DialogueOn ;
6782: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6786: LD_EXP 1
6790: PPUSH
6791: LD_STRING DC2-JMM-1
6793: PPUSH
6794: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6798: LD_EXP 22
6802: PPUSH
6803: LD_STRING DC2-Pow-1
6805: PPUSH
6806: CALL_OW 94
// DialogueOff ;
6810: CALL_OW 7
// wait ( 3 3$00 ) ;
6814: LD_INT 6300
6816: PPUSH
6817: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6828: LD_INT 22
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: LD_INT 30
6843: PUSH
6844: LD_INT 0
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 30
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: PUSH
6875: LD_INT 11
6877: PPUSH
6878: LD_INT 22
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 70
6892: NOT
6893: AND
6894: IFFALSE 6821
// wait ( 0 0$10 ) ;
6896: LD_INT 350
6898: PPUSH
6899: CALL_OW 67
// Legion ;
6903: CALL 6951 0 0
// wait ( 6 6$0 ) ;
6907: LD_INT 12600
6909: PPUSH
6910: CALL_OW 67
// PowellSupport3 ;
6914: CALL 2975 0 0
// DialogueOn ;
6918: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6922: LD_EXP 22
6926: PPUSH
6927: LD_STRING DC3-Pow-1
6929: PPUSH
6930: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6934: LD_EXP 1
6938: PPUSH
6939: LD_STRING DC3-JMM-1
6941: PPUSH
6942: CALL_OW 88
// DialogueOff ;
6946: CALL_OW 7
// end ;
6950: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6951: LD_INT 0
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6969: LD_ADDR_VAR 0 5
6973: PUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 21
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 30
6999: PUSH
7000: LD_INT 0
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 30
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: ST_TO_ADDR
// crates := 0 ;
7032: LD_ADDR_VAR 0 8
7036: PUSH
7037: LD_INT 0
7039: ST_TO_ADDR
// oil := 0 ;
7040: LD_ADDR_VAR 0 9
7044: PUSH
7045: LD_INT 0
7047: ST_TO_ADDR
// siberite := 0 ;
7048: LD_ADDR_VAR 0 10
7052: PUSH
7053: LD_INT 0
7055: ST_TO_ADDR
// payForNeutral := false ;
7056: LD_ADDR_VAR 0 13
7060: PUSH
7061: LD_INT 0
7063: ST_TO_ADDR
// payForHelp := false ;
7064: LD_ADDR_VAR 0 14
7068: PUSH
7069: LD_INT 0
7071: ST_TO_ADDR
// for i in tmp do
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: LD_VAR 0 5
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7174
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7085: LD_ADDR_VAR 0 8
7089: PUSH
7090: LD_VAR 0 8
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 274
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: CALL_OW 275
7112: PLUS
7113: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7114: LD_ADDR_VAR 0 9
7118: PUSH
7119: LD_VAR 0 9
7123: PUSH
7124: LD_VAR 0 2
7128: PPUSH
7129: CALL_OW 274
7133: PPUSH
7134: LD_INT 2
7136: PPUSH
7137: CALL_OW 275
7141: PLUS
7142: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7143: LD_ADDR_VAR 0 10
7147: PUSH
7148: LD_VAR 0 10
7152: PUSH
7153: LD_VAR 0 2
7157: PPUSH
7158: CALL_OW 274
7162: PPUSH
7163: LD_INT 3
7165: PPUSH
7166: CALL_OW 275
7170: PLUS
7171: ST_TO_ADDR
// end ;
7172: GO 7082
7174: POP
7175: POP
// PrepareKurt ;
7176: CALL 4417 0 0
// if not Kurt then
7180: LD_EXP 24
7184: NOT
7185: IFFALSE 7189
// exit ;
7187: GO 9321
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7189: LD_EXP 25
7193: PPUSH
7194: LD_INT 144
7196: PPUSH
7197: LD_INT 111
7199: PPUSH
7200: CALL_OW 111
// wait ( 0 0$2 ) ;
7204: LD_INT 70
7206: PPUSH
7207: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7211: LD_INT 167
7213: PPUSH
7214: LD_INT 121
7216: PPUSH
7217: LD_INT 1
7219: PPUSH
7220: LD_INT 10
7222: NEG
7223: PPUSH
7224: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7228: LD_EXP 24
7232: PPUSH
7233: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7237: LD_EXP 24
7241: PPUSH
7242: CALL_OW 87
// wait ( 0 0$1 ) ;
7246: LD_INT 35
7248: PPUSH
7249: CALL_OW 67
// DialogueOn ;
7253: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7257: LD_INT 22
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 26
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 2
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 25
7302: PUSH
7303: LD_INT 3
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 25
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 25
7322: PUSH
7323: LD_INT 5
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 25
7332: PUSH
7333: LD_INT 8
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: PPUSH
7354: CALL_OW 69
7358: PPUSH
7359: LD_STRING D3-Sol1-1
7361: PPUSH
7362: LD_STRING 
7364: PPUSH
7365: CALL 12340 0 3
// if KurtStatus then
7369: LD_EXP 26
7373: IFFALSE 7473
// begin Say ( Kurt , D3-Kurt-1 ) ;
7375: LD_EXP 24
7379: PPUSH
7380: LD_STRING D3-Kurt-1
7382: PPUSH
7383: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7387: LD_EXP 1
7391: PPUSH
7392: LD_STRING D3-JMM-1
7394: PPUSH
7395: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7399: LD_EXP 24
7403: PPUSH
7404: LD_STRING D3-Kurt-2
7406: PPUSH
7407: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7411: LD_EXP 1
7415: PPUSH
7416: LD_STRING D3-JMM-2
7418: PPUSH
7419: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7423: LD_EXP 24
7427: PPUSH
7428: LD_STRING D3-Kurt-4
7430: PPUSH
7431: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7435: LD_EXP 1
7439: PPUSH
7440: LD_STRING D3-JMM-4
7442: PPUSH
7443: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-5
7454: PPUSH
7455: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7459: LD_EXP 24
7463: PPUSH
7464: LD_STRING D3-Kurt-5a
7466: PPUSH
7467: CALL_OW 88
// end else
7471: GO 7569
// begin Say ( Kurt , D3-Kurt-1 ) ;
7473: LD_EXP 24
7477: PPUSH
7478: LD_STRING D3-Kurt-1
7480: PPUSH
7481: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7485: LD_EXP 1
7489: PPUSH
7490: LD_STRING D3-JMM-1
7492: PPUSH
7493: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7497: LD_EXP 24
7501: PPUSH
7502: LD_STRING D3-Kurt-3
7504: PPUSH
7505: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7509: LD_EXP 1
7513: PPUSH
7514: LD_STRING D3-JMM-3
7516: PPUSH
7517: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7521: LD_EXP 24
7525: PPUSH
7526: LD_STRING D3-Kurt-4
7528: PPUSH
7529: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7533: LD_EXP 1
7537: PPUSH
7538: LD_STRING D3-JMM-4
7540: PPUSH
7541: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7545: LD_EXP 24
7549: PPUSH
7550: LD_STRING D3-Kurt-5
7552: PPUSH
7553: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7557: LD_EXP 24
7561: PPUSH
7562: LD_STRING D3-Kurt-5b
7564: PPUSH
7565: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7569: LD_VAR 0 8
7573: PUSH
7574: LD_INT 120
7576: PUSH
7577: LD_INT 60
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: ARRAY
7593: GREATEREQUAL
7594: PUSH
7595: LD_VAR 0 10
7599: PUSH
7600: LD_INT 120
7602: PUSH
7603: LD_INT 60
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_EXP 26
7614: PUSH
7615: LD_INT 1
7617: PLUS
7618: ARRAY
7619: GREATEREQUAL
7620: AND
7621: IFFALSE 7673
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_STRING Q2
7630: PUSH
7631: LD_STRING Q2K
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_EXP 26
7642: PUSH
7643: LD_INT 1
7645: PLUS
7646: ARRAY
7647: PPUSH
7648: LD_INT 1
7650: PUSH
7651: LD_INT 2
7653: PUSH
7654: LD_INT 3
7656: PUSH
7657: LD_INT 4
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 98
7670: ST_TO_ADDR
7671: GO 7717
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7673: LD_ADDR_VAR 0 3
7677: PUSH
7678: LD_STRING Q2
7680: PUSH
7681: LD_STRING Q2K
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_EXP 26
7692: PUSH
7693: LD_INT 1
7695: PLUS
7696: ARRAY
7697: PPUSH
7698: LD_INT 1
7700: PUSH
7701: LD_INT 3
7703: PUSH
7704: LD_INT 4
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: PPUSH
7712: CALL_OW 98
7716: ST_TO_ADDR
// if dec1 = 1 then
7717: LD_VAR 0 3
7721: PUSH
7722: LD_INT 1
7724: EQUAL
7725: IFFALSE 7759
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7727: LD_EXP 1
7731: PPUSH
7732: LD_STRING D3Ka-JMM-1
7734: PPUSH
7735: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7739: LD_EXP 24
7743: PPUSH
7744: LD_STRING D3Ka-Kurt-1
7746: PPUSH
7747: CALL_OW 88
// warWithLegion = 1 ;
7751: LD_ADDR_EXP 30
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// end ; if dec1 = 2 then
7759: LD_VAR 0 3
7763: PUSH
7764: LD_INT 2
7766: EQUAL
7767: IFFALSE 7851
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7769: LD_EXP 1
7773: PPUSH
7774: LD_STRING D3Kb-JMM-1
7776: PPUSH
7777: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7781: LD_EXP 24
7785: PPUSH
7786: LD_STRING D3Kb-Kurt-1
7788: PPUSH
7789: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7793: LD_ADDR_VAR 0 11
7797: PUSH
7798: LD_INT 120
7800: PUSH
7801: LD_INT 60
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_EXP 26
7812: PUSH
7813: LD_INT 1
7815: PLUS
7816: ARRAY
7817: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7818: LD_ADDR_VAR 0 12
7822: PUSH
7823: LD_INT 120
7825: PUSH
7826: LD_INT 60
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_EXP 26
7837: PUSH
7838: LD_INT 1
7840: PLUS
7841: ARRAY
7842: ST_TO_ADDR
// payForNeutral := true ;
7843: LD_ADDR_VAR 0 13
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// end ; if dec1 = 3 then
7851: LD_VAR 0 3
7855: PUSH
7856: LD_INT 3
7858: EQUAL
7859: IFFALSE 8094
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7861: LD_EXP 1
7865: PPUSH
7866: LD_STRING D3Kc1-JMM-1
7868: PPUSH
7869: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7873: LD_EXP 24
7877: PPUSH
7878: LD_STRING D3Kc1-Kurt-1
7880: PPUSH
7881: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7885: LD_EXP 1
7889: PPUSH
7890: LD_STRING D3Kc1-JMM-2
7892: PPUSH
7893: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7897: LD_EXP 24
7901: PPUSH
7902: LD_STRING D3Kc1-Kurt-2
7904: PPUSH
7905: CALL_OW 88
// askSiberite = 1 ;
7909: LD_ADDR_EXP 32
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7917: LD_ADDR_VAR 0 4
7921: PUSH
7922: LD_STRING Q2b
7924: PPUSH
7925: LD_INT 1
7927: PUSH
7928: LD_INT 2
7930: PUSH
7931: LD_INT 3
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 98
7943: ST_TO_ADDR
// if dec2 = 1 then
7944: LD_VAR 0 4
7948: PUSH
7949: LD_INT 1
7951: EQUAL
7952: IFFALSE 7986
// begin Say ( JMM , D4a-JMM-1 ) ;
7954: LD_EXP 1
7958: PPUSH
7959: LD_STRING D4a-JMM-1
7961: PPUSH
7962: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7966: LD_EXP 24
7970: PPUSH
7971: LD_STRING D4b-Kurt-1
7973: PPUSH
7974: CALL_OW 88
// warWithLegion = 1 ;
7978: LD_ADDR_EXP 30
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// end ; if dec2 = 2 then
7986: LD_VAR 0 4
7990: PUSH
7991: LD_INT 2
7993: EQUAL
7994: IFFALSE 8028
// begin Say ( JMM , D4b-JMM-1 ) ;
7996: LD_EXP 1
8000: PPUSH
8001: LD_STRING D4b-JMM-1
8003: PPUSH
8004: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8008: LD_EXP 24
8012: PPUSH
8013: LD_STRING D4b-Kurt-1
8015: PPUSH
8016: CALL_OW 88
// warWithLegion = 1 ;
8020: LD_ADDR_EXP 30
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// end ; if dec2 = 3 then
8028: LD_VAR 0 4
8032: PUSH
8033: LD_INT 3
8035: EQUAL
8036: IFFALSE 8094
// begin Say ( JMM , D4c-JMM-1 ) ;
8038: LD_EXP 1
8042: PPUSH
8043: LD_STRING D4c-JMM-1
8045: PPUSH
8046: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8050: LD_EXP 24
8054: PPUSH
8055: LD_STRING D4c-Kurt-1
8057: PPUSH
8058: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8062: LD_EXP 1
8066: PPUSH
8067: LD_STRING D4c-JMM-2
8069: PPUSH
8070: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8074: LD_EXP 24
8078: PPUSH
8079: LD_STRING D4c-Kurt-2
8081: PPUSH
8082: CALL_OW 88
// fakeInfo = 1 ;
8086: LD_ADDR_EXP 31
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8094: LD_VAR 0 3
8098: PUSH
8099: LD_INT 4
8101: EQUAL
8102: IFFALSE 9177
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8104: LD_EXP 1
8108: PPUSH
8109: LD_STRING D3Kd-JMM-1
8111: PPUSH
8112: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8116: LD_VAR 0 8
8120: PUSH
8121: LD_INT 200
8123: PUSH
8124: LD_INT 120
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: GREATEREQUAL
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_INT 200
8149: PUSH
8150: LD_INT 120
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_EXP 26
8161: PUSH
8162: LD_INT 1
8164: PLUS
8165: ARRAY
8166: GREATEREQUAL
8167: AND
8168: IFFALSE 8220
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8170: LD_ADDR_VAR 0 4
8174: PUSH
8175: LD_STRING Q2a
8177: PUSH
8178: LD_STRING Q2aK
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_EXP 26
8189: PUSH
8190: LD_INT 1
8192: PLUS
8193: ARRAY
8194: PPUSH
8195: LD_INT 1
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 3
8203: PUSH
8204: LD_INT 4
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 98
8217: ST_TO_ADDR
8218: GO 8397
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8220: LD_VAR 0 8
8224: PUSH
8225: LD_INT 120
8227: PUSH
8228: LD_INT 60
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_EXP 26
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: ARRAY
8244: GREATEREQUAL
8245: PUSH
8246: LD_VAR 0 10
8250: PUSH
8251: LD_INT 120
8253: PUSH
8254: LD_INT 60
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_EXP 26
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ARRAY
8270: GREATEREQUAL
8271: AND
8272: IFFALSE 8320
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8274: LD_ADDR_VAR 0 4
8278: PUSH
8279: LD_STRING Q2a
8281: PUSH
8282: LD_STRING Q2aK
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_EXP 26
8293: PUSH
8294: LD_INT 1
8296: PLUS
8297: ARRAY
8298: PPUSH
8299: LD_INT 1
8301: PUSH
8302: LD_INT 2
8304: PUSH
8305: LD_INT 4
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 98
8317: ST_TO_ADDR
8318: GO 8397
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8320: LD_STRING Q2d
8322: PUSH
8323: LD_STRING Q2dK
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_EXP 26
8334: PUSH
8335: LD_INT 1
8337: PLUS
8338: ARRAY
8339: PPUSH
8340: CALL_OW 97
8344: PUSH
8345: LD_INT 1
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8356
8353: POP
// ; end ;
8354: GO 8357
8356: POP
// dec2 := 0 ;
8357: LD_ADDR_VAR 0 4
8361: PUSH
8362: LD_INT 0
8364: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8365: LD_EXP 1
8369: PPUSH
8370: LD_STRING D3Kc1-JMM-1
8372: PPUSH
8373: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8377: LD_EXP 24
8381: PPUSH
8382: LD_STRING D3Kc2-Kurt-1
8384: PPUSH
8385: CALL_OW 88
// warWithLegion := 1 ;
8389: LD_ADDR_EXP 30
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// end ; if dec2 = 1 then
8397: LD_VAR 0 4
8401: PUSH
8402: LD_INT 1
8404: EQUAL
8405: IFFALSE 8439
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8407: LD_EXP 1
8411: PPUSH
8412: LD_STRING D5Ka-JMM-1
8414: PPUSH
8415: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8419: LD_EXP 24
8423: PPUSH
8424: LD_STRING D5Ka-Kurt-1
8426: PPUSH
8427: CALL_OW 88
// warWithLegion = 1 ;
8431: LD_ADDR_EXP 30
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// end ; if dec2 = 2 then
8439: LD_VAR 0 4
8443: PUSH
8444: LD_INT 2
8446: EQUAL
8447: IFFALSE 8531
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8449: LD_EXP 1
8453: PPUSH
8454: LD_STRING D3Kb-JMM-1
8456: PPUSH
8457: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8461: LD_EXP 24
8465: PPUSH
8466: LD_STRING D3Kb-Kurt-1
8468: PPUSH
8469: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8473: LD_ADDR_VAR 0 11
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: LD_INT 60
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_EXP 26
8492: PUSH
8493: LD_INT 1
8495: PLUS
8496: ARRAY
8497: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8498: LD_ADDR_VAR 0 12
8502: PUSH
8503: LD_INT 120
8505: PUSH
8506: LD_INT 60
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_EXP 26
8517: PUSH
8518: LD_INT 1
8520: PLUS
8521: ARRAY
8522: ST_TO_ADDR
// payForNeutral := true ;
8523: LD_ADDR_VAR 0 13
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// end ; if dec2 = 3 then
8531: LD_VAR 0 4
8535: PUSH
8536: LD_INT 3
8538: EQUAL
8539: IFFALSE 8623
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8541: LD_EXP 1
8545: PPUSH
8546: LD_STRING D3Ke-JMM-1
8548: PPUSH
8549: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8553: LD_EXP 24
8557: PPUSH
8558: LD_STRING D3Ke-Kurt-1
8560: PPUSH
8561: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8565: LD_ADDR_VAR 0 11
8569: PUSH
8570: LD_INT 200
8572: PUSH
8573: LD_INT 120
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_EXP 26
8584: PUSH
8585: LD_INT 1
8587: PLUS
8588: ARRAY
8589: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8590: LD_ADDR_VAR 0 12
8594: PUSH
8595: LD_INT 200
8597: PUSH
8598: LD_INT 120
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 26
8609: PUSH
8610: LD_INT 1
8612: PLUS
8613: ARRAY
8614: ST_TO_ADDR
// payForHelp := true ;
8615: LD_ADDR_VAR 0 14
8619: PUSH
8620: LD_INT 1
8622: ST_TO_ADDR
// end ; if dec2 = 4 then
8623: LD_VAR 0 4
8627: PUSH
8628: LD_INT 4
8630: EQUAL
8631: IFFALSE 8866
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8633: LD_EXP 1
8637: PPUSH
8638: LD_STRING D3Kc1-JMM-1
8640: PPUSH
8641: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8645: LD_EXP 24
8649: PPUSH
8650: LD_STRING D3Kc1-Kurt-1
8652: PPUSH
8653: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8657: LD_EXP 1
8661: PPUSH
8662: LD_STRING D3Kc1-JMM-2
8664: PPUSH
8665: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8669: LD_EXP 24
8673: PPUSH
8674: LD_STRING D3Kc1-Kurt-2
8676: PPUSH
8677: CALL_OW 88
// askSiberite = 1 ;
8681: LD_ADDR_EXP 32
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8689: LD_ADDR_VAR 0 4
8693: PUSH
8694: LD_STRING Q2b
8696: PPUSH
8697: LD_INT 1
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL_OW 98
8715: ST_TO_ADDR
// if dec2 = 1 then
8716: LD_VAR 0 4
8720: PUSH
8721: LD_INT 1
8723: EQUAL
8724: IFFALSE 8758
// begin Say ( JMM , D4a-JMM-1 ) ;
8726: LD_EXP 1
8730: PPUSH
8731: LD_STRING D4a-JMM-1
8733: PPUSH
8734: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8738: LD_EXP 24
8742: PPUSH
8743: LD_STRING D4b-Kurt-1
8745: PPUSH
8746: CALL_OW 88
// warWithLegion = 1 ;
8750: LD_ADDR_EXP 30
8754: PUSH
8755: LD_INT 1
8757: ST_TO_ADDR
// end ; if dec2 = 2 then
8758: LD_VAR 0 4
8762: PUSH
8763: LD_INT 2
8765: EQUAL
8766: IFFALSE 8800
// begin Say ( JMM , D4b-JMM-1 ) ;
8768: LD_EXP 1
8772: PPUSH
8773: LD_STRING D4b-JMM-1
8775: PPUSH
8776: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8780: LD_EXP 24
8784: PPUSH
8785: LD_STRING D4b-Kurt-1
8787: PPUSH
8788: CALL_OW 88
// warWithLegion = 1 ;
8792: LD_ADDR_EXP 30
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// end ; if dec2 = 3 then
8800: LD_VAR 0 4
8804: PUSH
8805: LD_INT 3
8807: EQUAL
8808: IFFALSE 8866
// begin Say ( JMM , D4c-JMM-1 ) ;
8810: LD_EXP 1
8814: PPUSH
8815: LD_STRING D4c-JMM-1
8817: PPUSH
8818: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8822: LD_EXP 24
8826: PPUSH
8827: LD_STRING D4c-Kurt-1
8829: PPUSH
8830: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8834: LD_EXP 1
8838: PPUSH
8839: LD_STRING D4c-JMM-2
8841: PPUSH
8842: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8846: LD_EXP 24
8850: PPUSH
8851: LD_STRING D4c-Kurt-2
8853: PPUSH
8854: CALL_OW 88
// fakeInfo = 1 ;
8858: LD_ADDR_EXP 31
8862: PUSH
8863: LD_INT 1
8865: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8866: LD_VAR 0 13
8870: PUSH
8871: LD_VAR 0 14
8875: OR
8876: IFFALSE 9177
// begin for i in tmp do
8878: LD_ADDR_VAR 0 2
8882: PUSH
8883: LD_VAR 0 5
8887: PUSH
8888: FOR_IN
8889: IFFALSE 9175
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 274
8905: PPUSH
8906: LD_INT 1
8908: PPUSH
8909: CALL_OW 275
8913: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8914: LD_ADDR_VAR 0 7
8918: PUSH
8919: LD_VAR 0 2
8923: PPUSH
8924: CALL_OW 274
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: CALL_OW 275
8936: ST_TO_ADDR
// if cr then
8937: LD_VAR 0 11
8941: IFFALSE 9055
// begin if tmp2 and tmp2 < cr then
8943: LD_VAR 0 6
8947: PUSH
8948: LD_VAR 0 6
8952: PUSH
8953: LD_VAR 0 11
8957: LESS
8958: AND
8959: IFFALSE 9007
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL_OW 274
8970: PPUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 11
8978: PUSH
8979: LD_VAR 0 6
8983: MINUS
8984: PPUSH
8985: CALL_OW 277
// cr := cr - tmp2 ;
8989: LD_ADDR_VAR 0 11
8993: PUSH
8994: LD_VAR 0 11
8998: PUSH
8999: LD_VAR 0 6
9003: MINUS
9004: ST_TO_ADDR
// end else
9005: GO 9055
// if tmp2 > cr then
9007: LD_VAR 0 6
9011: PUSH
9012: LD_VAR 0 11
9016: GREATER
9017: IFFALSE 9055
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9019: LD_VAR 0 2
9023: PPUSH
9024: CALL_OW 274
9028: PPUSH
9029: LD_INT 1
9031: PPUSH
9032: LD_VAR 0 6
9036: PUSH
9037: LD_VAR 0 11
9041: MINUS
9042: PPUSH
9043: CALL_OW 277
// cr := 0 ;
9047: LD_ADDR_VAR 0 11
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// end ; end ; if sb then
9055: LD_VAR 0 12
9059: IFFALSE 9173
// begin if tmp3 and tmp3 < sb then
9061: LD_VAR 0 7
9065: PUSH
9066: LD_VAR 0 7
9070: PUSH
9071: LD_VAR 0 12
9075: LESS
9076: AND
9077: IFFALSE 9125
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9079: LD_VAR 0 2
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: LD_VAR 0 12
9096: PUSH
9097: LD_VAR 0 7
9101: MINUS
9102: PPUSH
9103: CALL_OW 277
// sb := sb - tmp3 ;
9107: LD_ADDR_VAR 0 12
9111: PUSH
9112: LD_VAR 0 12
9116: PUSH
9117: LD_VAR 0 7
9121: MINUS
9122: ST_TO_ADDR
// end else
9123: GO 9173
// if tmp3 > sb then
9125: LD_VAR 0 7
9129: PUSH
9130: LD_VAR 0 12
9134: GREATER
9135: IFFALSE 9173
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9137: LD_VAR 0 2
9141: PPUSH
9142: CALL_OW 274
9146: PPUSH
9147: LD_INT 3
9149: PPUSH
9150: LD_VAR 0 7
9154: PUSH
9155: LD_VAR 0 12
9159: MINUS
9160: PPUSH
9161: CALL_OW 277
// sb := 0 ;
9165: LD_ADDR_VAR 0 12
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// end ; end ; end ;
9173: GO 8888
9175: POP
9176: POP
// end ; end ; DialogueOff ;
9177: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9181: LD_INT 167
9183: PPUSH
9184: LD_INT 121
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9194: LD_EXP 24
9198: PPUSH
9199: LD_EXP 25
9203: PPUSH
9204: CALL_OW 120
// wait ( 0 0$1 ) ;
9208: LD_INT 35
9210: PPUSH
9211: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9215: LD_EXP 25
9219: PPUSH
9220: LD_INT 4
9222: PPUSH
9223: CALL_OW 113
// wait ( 0 0$3 ) ;
9227: LD_INT 105
9229: PPUSH
9230: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9234: LD_EXP 24
9238: PPUSH
9239: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9243: LD_EXP 25
9247: PPUSH
9248: CALL_OW 64
// wait ( 0 0$3 ) ;
9252: LD_INT 105
9254: PPUSH
9255: CALL_OW 67
// if payForHelp then
9259: LD_VAR 0 14
9263: IFFALSE 9321
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9265: LD_INT 36
9267: PPUSH
9268: LD_INT 57
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9278: LD_INT 51
9280: PPUSH
9281: LD_INT 63
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9291: LD_INT 93
9293: PPUSH
9294: LD_INT 65
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9304: LD_INT 42
9306: PPUSH
9307: LD_INT 12
9309: PPUSH
9310: LD_INT 1
9312: PPUSH
9313: CALL_OW 244
// PrepareLegionForPlayer ;
9317: CALL 4620 0 0
// end ; end ;
9321: LD_VAR 0 1
9325: RET
// every 0 0$10 trigger warWithLegion = 1 do
9326: LD_EXP 30
9330: PUSH
9331: LD_INT 1
9333: EQUAL
9334: IFFALSE 9343
9336: GO 9338
9338: DISABLE
// PrepareAttackLegion ;
9339: CALL 5284 0 0
9343: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9344: LD_EXP 15
9348: PPUSH
9349: CALL_OW 305
9353: PUSH
9354: LD_EXP 15
9358: PPUSH
9359: LD_INT 1
9361: PPUSH
9362: CALL_OW 289
9366: NOT
9367: AND
9368: PUSH
9369: LD_EXP 15
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: CALL_OW 289
9381: NOT
9382: AND
9383: PUSH
9384: LD_EXP 15
9388: PPUSH
9389: LD_INT 3
9391: PPUSH
9392: CALL_OW 289
9396: NOT
9397: AND
9398: IFFALSE 9415
9400: GO 9402
9402: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9403: LD_EXP 15
9407: PPUSH
9408: LD_INT 4
9410: PPUSH
9411: CALL_OW 235
9415: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9416: LD_EXP 16
9420: PPUSH
9421: CALL_OW 305
9425: PUSH
9426: LD_EXP 16
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 289
9438: NOT
9439: AND
9440: PUSH
9441: LD_EXP 16
9445: PPUSH
9446: LD_INT 2
9448: PPUSH
9449: CALL_OW 289
9453: NOT
9454: AND
9455: PUSH
9456: LD_EXP 16
9460: PPUSH
9461: LD_INT 3
9463: PPUSH
9464: CALL_OW 289
9468: NOT
9469: AND
9470: IFFALSE 9487
9472: GO 9474
9474: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9475: LD_EXP 16
9479: PPUSH
9480: LD_INT 4
9482: PPUSH
9483: CALL_OW 235
9487: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9488: LD_EXP 17
9492: PPUSH
9493: CALL_OW 305
9497: PUSH
9498: LD_EXP 17
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: CALL_OW 289
9510: NOT
9511: AND
9512: PUSH
9513: LD_EXP 17
9517: PPUSH
9518: LD_INT 2
9520: PPUSH
9521: CALL_OW 289
9525: NOT
9526: AND
9527: PUSH
9528: LD_EXP 17
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: CALL_OW 289
9540: NOT
9541: AND
9542: IFFALSE 9559
9544: GO 9546
9546: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9547: LD_EXP 17
9551: PPUSH
9552: LD_INT 4
9554: PPUSH
9555: CALL_OW 235
9559: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9560: LD_EXP 18
9564: PPUSH
9565: CALL_OW 305
9569: PUSH
9570: LD_EXP 18
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 289
9582: NOT
9583: AND
9584: PUSH
9585: LD_EXP 18
9589: PPUSH
9590: LD_INT 2
9592: PPUSH
9593: CALL_OW 289
9597: NOT
9598: AND
9599: PUSH
9600: LD_EXP 18
9604: PPUSH
9605: LD_INT 3
9607: PPUSH
9608: CALL_OW 289
9612: NOT
9613: AND
9614: IFFALSE 9631
9616: GO 9618
9618: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9619: LD_EXP 18
9623: PPUSH
9624: LD_INT 4
9626: PPUSH
9627: CALL_OW 235
9631: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9632: LD_EXP 19
9636: PPUSH
9637: CALL_OW 305
9641: PUSH
9642: LD_EXP 19
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 289
9654: NOT
9655: AND
9656: PUSH
9657: LD_EXP 19
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: CALL_OW 289
9669: NOT
9670: AND
9671: PUSH
9672: LD_EXP 19
9676: PPUSH
9677: LD_INT 3
9679: PPUSH
9680: CALL_OW 289
9684: NOT
9685: AND
9686: PUSH
9687: LD_EXP 19
9691: PPUSH
9692: LD_INT 2
9694: PPUSH
9695: CALL_OW 289
9699: NOT
9700: AND
9701: IFFALSE 9718
9703: GO 9705
9705: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9706: LD_EXP 19
9710: PPUSH
9711: LD_INT 4
9713: PPUSH
9714: CALL_OW 235
9718: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9719: LD_EXP 20
9723: PPUSH
9724: CALL_OW 305
9728: PUSH
9729: LD_EXP 20
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 289
9741: NOT
9742: AND
9743: PUSH
9744: LD_EXP 20
9748: PPUSH
9749: LD_INT 2
9751: PPUSH
9752: CALL_OW 289
9756: NOT
9757: AND
9758: PUSH
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 3
9766: PPUSH
9767: CALL_OW 289
9771: NOT
9772: AND
9773: IFFALSE 9790
9775: GO 9777
9777: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9778: LD_EXP 20
9782: PPUSH
9783: LD_INT 4
9785: PPUSH
9786: CALL_OW 235
9790: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9791: LD_EXP 21
9795: PPUSH
9796: CALL_OW 305
9800: PUSH
9801: LD_EXP 21
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL_OW 289
9813: NOT
9814: AND
9815: PUSH
9816: LD_EXP 21
9820: PPUSH
9821: LD_INT 2
9823: PPUSH
9824: CALL_OW 289
9828: NOT
9829: AND
9830: PUSH
9831: LD_EXP 21
9835: PPUSH
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 289
9843: NOT
9844: AND
9845: IFFALSE 9862
9847: GO 9849
9849: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9850: LD_EXP 21
9854: PPUSH
9855: LD_INT 4
9857: PPUSH
9858: CALL_OW 235
9862: END
// every 0 0$1 do var i ;
9863: GO 9865
9865: DISABLE
9866: LD_INT 0
9868: PPUSH
// begin enable ;
9869: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9870: LD_ADDR_VAR 0 1
9874: PUSH
9875: LD_INT 22
9877: PUSH
9878: LD_INT 4
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: PUSH
9890: FOR_IN
9891: IFFALSE 9930
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9893: LD_VAR 0 1
9897: PPUSH
9898: LD_INT 4
9900: PPUSH
9901: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9905: LD_VAR 0 1
9909: PPUSH
9910: LD_INT 4
9912: PPUSH
9913: CALL_OW 308
9917: IFFALSE 9928
// RemoveUnit ( i ) ;
9919: LD_VAR 0 1
9923: PPUSH
9924: CALL_OW 64
// end ;
9928: GO 9890
9930: POP
9931: POP
// end ;
9932: PPOPN 1
9934: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9935: LD_EXP 27
9939: PUSH
9940: LD_INT 1
9942: EQUAL
9943: IFFALSE 10382
9945: GO 9947
9947: DISABLE
9948: LD_INT 0
9950: PPUSH
9951: PPUSH
9952: PPUSH
// begin enable ;
9953: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: LD_INT 12
9961: PPUSH
9962: LD_INT 22
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 70
9990: ST_TO_ADDR
// for i in enemyVehs do
9991: LD_ADDR_VAR 0 1
9995: PUSH
9996: LD_VAR 0 2
10000: PUSH
10001: FOR_IN
10002: IFFALSE 10380
// begin if See ( 1 , i ) then
10004: LD_INT 1
10006: PPUSH
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 292
10016: IFFALSE 10378
// begin disable ;
10018: DISABLE
// DialogueOn ;
10019: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10023: LD_VAR 0 1
10027: PPUSH
10028: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10032: LD_INT 22
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 26
10044: PUSH
10045: LD_INT 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: LD_INT 25
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 25
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 25
10077: PUSH
10078: LD_INT 3
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 4
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 25
10107: PUSH
10108: LD_INT 8
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 69
10133: PPUSH
10134: LD_STRING DT1-Sol1-1
10136: PPUSH
10137: LD_STRING DT1-FSol1-1
10139: PPUSH
10140: CALL 12340 0 3
// dec = ShowQuery2 ;
10144: LD_ADDR_VAR 0 3
10148: PUSH
10149: CALL 12824 0 0
10153: ST_TO_ADDR
// if dec = 1 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 1
10161: EQUAL
10162: IFFALSE 10268
// begin Say ( JMM , D2-JMM-1 ) ;
10164: LD_EXP 1
10168: PPUSH
10169: LD_STRING D2-JMM-1
10171: PPUSH
10172: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10176: LD_EXP 22
10180: PPUSH
10181: LD_STRING D2-Pow-1
10183: PPUSH
10184: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10188: LD_EXP 1
10192: PPUSH
10193: LD_STRING D2a-JMM-1
10195: PPUSH
10196: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10200: LD_EXP 22
10204: PPUSH
10205: LD_STRING D2a-Pow-1
10207: PPUSH
10208: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10212: LD_EXP 1
10216: PPUSH
10217: LD_STRING D2a-JMM-2
10219: PPUSH
10220: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10224: LD_EXP 22
10228: PPUSH
10229: LD_STRING D2a-Pow-2
10231: PPUSH
10232: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10236: LD_EXP 1
10240: PPUSH
10241: LD_STRING D2a-JMM-3
10243: PPUSH
10244: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10248: LD_EXP 22
10252: PPUSH
10253: LD_STRING D2a-Pow-3
10255: PPUSH
10256: CALL_OW 94
// secondPass = 2 ;
10260: LD_ADDR_EXP 27
10264: PUSH
10265: LD_INT 2
10267: ST_TO_ADDR
// end ; if dec = 2 then
10268: LD_VAR 0 3
10272: PUSH
10273: LD_INT 2
10275: EQUAL
10276: IFFALSE 10370
// begin Say ( JMM , D2-JMM-1 ) ;
10278: LD_EXP 1
10282: PPUSH
10283: LD_STRING D2-JMM-1
10285: PPUSH
10286: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10290: LD_EXP 22
10294: PPUSH
10295: LD_STRING D2-Pow-1
10297: PPUSH
10298: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10302: LD_EXP 1
10306: PPUSH
10307: LD_STRING D2b-JMM-1
10309: PPUSH
10310: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10314: LD_EXP 22
10318: PPUSH
10319: LD_STRING D2b-Pow-1
10321: PPUSH
10322: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10326: LD_EXP 1
10330: PPUSH
10331: LD_STRING D2c-JMM-1
10333: PPUSH
10334: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10338: LD_EXP 22
10342: PPUSH
10343: LD_STRING D2c-Pow-1
10345: PPUSH
10346: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10350: LD_EXP 1
10354: PPUSH
10355: LD_STRING D2c-JMM-2
10357: PPUSH
10358: CALL_OW 88
// secondPass = 2 ;
10362: LD_ADDR_EXP 27
10366: PUSH
10367: LD_INT 2
10369: ST_TO_ADDR
// end ; DialogueOff ;
10370: CALL_OW 7
// exit ;
10374: POP
10375: POP
10376: GO 10382
// end ; end ;
10378: GO 10001
10380: POP
10381: POP
// end ;
10382: PPOPN 3
10384: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10385: LD_EXP 28
10389: PUSH
10390: LD_INT 1
10392: EQUAL
10393: PUSH
10394: LD_INT 11
10396: PPUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 70
10411: AND
10412: IFFALSE 10640
10414: GO 10416
10416: DISABLE
10417: LD_INT 0
10419: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10420: LD_ADDR_VAR 0 1
10424: PUSH
10425: LD_INT 11
10427: PPUSH
10428: LD_INT 22
10430: PUSH
10431: LD_INT 3
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 70
10442: ST_TO_ADDR
// if not vehicles then
10443: LD_VAR 0 1
10447: NOT
10448: IFFALSE 10452
// exit ;
10450: GO 10640
// repeat wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_INT 101
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PPUSH
10474: CALL_OW 72
10478: IFFALSE 10452
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 101
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PPUSH
10495: CALL_OW 72
10499: PUSH
10500: LD_INT 1
10502: ARRAY
10503: PPUSH
10504: CALL_OW 87
// DialogueOn ;
10508: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10512: LD_INT 22
10514: PUSH
10515: LD_INT 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 26
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 1
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 25
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 25
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: LD_INT 4
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 25
10577: PUSH
10578: LD_INT 5
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 25
10587: PUSH
10588: LD_INT 8
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 69
10613: PPUSH
10614: LD_STRING DT1-Sol1-1
10616: PPUSH
10617: LD_STRING DT1-FSol1-1
10619: PPUSH
10620: CALL 12340 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10624: LD_EXP 1
10628: PPUSH
10629: LD_STRING DT1-JMM-1
10631: PPUSH
10632: CALL_OW 88
// DialogueOff ;
10636: CALL_OW 7
// end ;
10640: PPOPN 1
10642: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10643: LD_EXP 28
10647: PUSH
10648: LD_INT 1
10650: EQUAL
10651: PUSH
10652: LD_INT 11
10654: PPUSH
10655: LD_INT 22
10657: PUSH
10658: LD_INT 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 50
10667: PUSH
10668: EMPTY
10669: LIST
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: LD_INT 21
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 21
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 70
10708: PUSH
10709: LD_INT 0
10711: EQUAL
10712: AND
10713: PUSH
10714: LD_EXP 29
10718: AND
10719: IFFALSE 10876
10721: GO 10723
10723: DISABLE
// begin vehicleTeleported = 2 ;
10724: LD_ADDR_EXP 28
10728: PUSH
10729: LD_INT 2
10731: ST_TO_ADDR
// DialogueOn ;
10732: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10736: LD_EXP 1
10740: PPUSH
10741: LD_STRING DT1a-JMM-1
10743: PPUSH
10744: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 26
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 3
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 4
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 5
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 8
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_STRING DT1a-Sol1-1
10852: PPUSH
10853: LD_STRING DT1a-FSol1-1
10855: PPUSH
10856: CALL 12340 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING DT1a-JMM-2
10867: PPUSH
10868: CALL_OW 88
// DialogueOff ;
10872: CALL_OW 7
// end ;
10876: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10877: LD_EXP 28
10881: PUSH
10882: LD_INT 3
10884: EQUAL
10885: PUSH
10886: LD_INT 11
10888: PPUSH
10889: LD_INT 22
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 101
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 70
10917: AND
10918: IFFALSE 11192
10920: GO 10922
10922: DISABLE
10923: LD_INT 0
10925: PPUSH
10926: PPUSH
10927: PPUSH
// begin wait ( 0 0$0.3 ) ;
10928: LD_INT 10
10930: PPUSH
10931: CALL_OW 67
// DialogueOn ;
10935: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10939: LD_ADDR_VAR 0 3
10943: PUSH
10944: LD_INT 22
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 26
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 2
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 4
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 5
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 8
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PPUSH
11041: CALL_OW 69
11045: PPUSH
11046: LD_STRING DT2-Sol1-1
11048: PPUSH
11049: LD_STRING DT2-FSol1-1
11051: PPUSH
11052: CALL 12340 0 3
11056: ST_TO_ADDR
// DialogueOff ;
11057: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11061: LD_INT 35
11063: PPUSH
11064: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11068: LD_INT 11
11070: PPUSH
11071: LD_INT 22
11073: PUSH
11074: LD_INT 3
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 50
11083: PUSH
11084: EMPTY
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 70
11095: NOT
11096: IFFALSE 11061
// wait ( 0 0$2 ) ;
11098: LD_INT 70
11100: PPUSH
11101: CALL_OW 67
// vehicleTeleported = 4 ;
11105: LD_ADDR_EXP 28
11109: PUSH
11110: LD_INT 4
11112: ST_TO_ADDR
// DialogueOn ;
11113: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11117: LD_EXP 1
11121: PPUSH
11122: LD_STRING DT2a-JMM-1
11124: PPUSH
11125: CALL_OW 88
// if speaker then
11129: LD_VAR 0 3
11133: IFFALSE 11176
// if GetSex ( speaker ) = 1 then
11135: LD_VAR 0 3
11139: PPUSH
11140: CALL_OW 258
11144: PUSH
11145: LD_INT 1
11147: EQUAL
11148: IFFALSE 11164
// Say ( speaker , DT2a-Sol1-1 ) else
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_STRING DT2a-Sol1-1
11157: PPUSH
11158: CALL_OW 88
11162: GO 11176
// Say ( speaker , DT2a-FSol1-1 ) ;
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_STRING DT2a-FSol1-1
11171: PPUSH
11172: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11176: LD_EXP 3
11180: PPUSH
11181: LD_STRING DT2a-Don-1
11183: PPUSH
11184: CALL_OW 88
// DialogueOff ;
11188: CALL_OW 7
// end ;
11192: PPOPN 3
11194: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11195: LD_INT 1
11197: PPUSH
11198: LD_INT 45
11200: PPUSH
11201: LD_INT 74
11203: PPUSH
11204: CALL_OW 293
11208: IFFALSE 11372
11210: GO 11212
11212: DISABLE
// begin DialogueOn ;
11213: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11217: LD_INT 36
11219: PPUSH
11220: LD_INT 55
11222: PPUSH
11223: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11227: LD_INT 22
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 26
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: LD_INT 25
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 25
11262: PUSH
11263: LD_INT 2
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 25
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 25
11282: PUSH
11283: LD_INT 4
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 25
11292: PUSH
11293: LD_INT 5
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 25
11302: PUSH
11303: LD_INT 8
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: PPUSH
11329: LD_STRING D5-Sol1-1
11331: PPUSH
11332: LD_STRING D5-FSol1-
11334: PPUSH
11335: CALL 12340 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11339: LD_EXP 30
11343: PUSH
11344: LD_EXP 3
11348: PPUSH
11349: CALL_OW 302
11353: AND
11354: IFFALSE 11368
// Say ( Donaldson , D5-Don-1 ) ;
11356: LD_EXP 3
11360: PPUSH
11361: LD_STRING D5-Don-1
11363: PPUSH
11364: CALL_OW 88
// DialogueOff ;
11368: CALL_OW 7
// end ;
11372: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11373: LD_INT 1
11375: PPUSH
11376: LD_INT 10
11378: PPUSH
11379: CALL_OW 292
11383: PUSH
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 137
11389: PPUSH
11390: CALL_OW 292
11394: OR
11395: IFFALSE 11539
11397: GO 11399
11399: DISABLE
// begin DialogueOn ;
11400: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11404: LD_INT 22
11406: PUSH
11407: LD_INT 1
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 26
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: LD_INT 25
11429: PUSH
11430: LD_INT 1
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 25
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 3
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 25
11459: PUSH
11460: LD_INT 4
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 25
11479: PUSH
11480: LD_INT 8
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 69
11505: PPUSH
11506: LD_STRING DT3-Sol1-1
11508: PPUSH
11509: LD_STRING DT3-FSol1-1
11511: PPUSH
11512: CALL 12340 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11516: LD_EXP 1
11520: PPUSH
11521: LD_STRING DT3-JMM-1
11523: PPUSH
11524: CALL_OW 88
// DialogueOff ;
11528: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11532: LD_STRING M2
11534: PPUSH
11535: CALL_OW 337
// end ;
11539: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11540: LD_EXP 42
11544: PUSH
11545: LD_INT 0
11547: EQUAL
11548: IFFALSE 11631
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
// begin enable ;
11556: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: LD_INT 10
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 58
11587: PUSH
11588: EMPTY
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 70
11600: PUSH
11601: FOR_IN
11602: IFFALSE 11629
// if GetLives ( i ) < 1000 then
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 256
11613: PUSH
11614: LD_INT 1000
11616: LESS
11617: IFFALSE 11627
// ruEscape = 1 ;
11619: LD_ADDR_EXP 42
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
11627: GO 11601
11629: POP
11630: POP
// end ;
11631: PPOPN 1
11633: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11634: LD_INT 3
11636: PPUSH
11637: CALL_OW 303
11641: PUSH
11642: LD_INT 4
11644: PPUSH
11645: CALL_OW 303
11649: OR
11650: PUSH
11651: LD_INT 22
11653: PPUSH
11654: LD_INT 22
11656: PUSH
11657: LD_INT 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 70
11668: PUSH
11669: LD_INT 0
11671: GREATER
11672: OR
11673: PUSH
11674: LD_EXP 42
11678: PUSH
11679: LD_INT 1
11681: EQUAL
11682: OR
11683: IFFALSE 11914
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
// begin ruAI = 0 ;
11693: LD_ADDR_EXP 41
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11701: LD_ADDR_VAR 0 3
11705: PUSH
11706: LD_INT 10
11708: PPUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 3
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 21
11721: PUSH
11722: LD_INT 2
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 58
11731: PUSH
11732: EMPTY
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: PPUSH
11740: CALL_OW 70
11744: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11745: LD_EXP 34
11749: PPUSH
11750: CALL_OW 122
// wait ( 0 0$1 ) ;
11754: LD_INT 35
11756: PPUSH
11757: CALL_OW 67
// DialogueOn ;
11761: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11765: LD_EXP 1
11769: PPUSH
11770: LD_STRING D6-JMM-1
11772: PPUSH
11773: CALL_OW 88
// DialogueOff ;
11777: CALL_OW 7
// if vehs > 0 then
11781: LD_VAR 0 3
11785: PUSH
11786: LD_INT 0
11788: GREATER
11789: IFFALSE 11859
// for i := 1 to RuScientists do
11791: LD_ADDR_VAR 0 1
11795: PUSH
11796: DOUBLE
11797: LD_INT 1
11799: DEC
11800: ST_TO_ADDR
11801: LD_EXP 34
11805: PUSH
11806: FOR_TO
11807: IFFALSE 11855
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11809: LD_EXP 34
11813: PUSH
11814: LD_VAR 0 1
11818: ARRAY
11819: PPUSH
11820: LD_INT 3
11822: PUSH
11823: LD_INT 60
11825: PUSH
11826: EMPTY
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 72
11837: PPUSH
11838: LD_VAR 0 3
11842: PUSH
11843: LD_VAR 0 1
11847: ARRAY
11848: PPUSH
11849: CALL_OW 120
11853: GO 11806
11855: POP
11856: POP
11857: GO 11914
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11859: LD_EXP 34
11863: PUSH
11864: LD_VAR 0 1
11868: ARRAY
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 60
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_INT 13
11890: PUSH
11891: LD_INT 14
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 2
11903: PPUSH
11904: CALL_OW 12
11908: ARRAY
11909: PPUSH
11910: CALL_OW 113
// end ;
11914: PPOPN 3
11916: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11917: LD_EXP 41
11921: PUSH
11922: LD_INT 0
11924: EQUAL
11925: IFFALSE 12297
11927: GO 11929
11929: DISABLE
11930: LD_INT 0
11932: PPUSH
11933: PPUSH
11934: PPUSH
11935: PPUSH
// begin enable ;
11936: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11937: LD_EXP 34
11941: PPUSH
11942: LD_INT 2
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 13
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 95
11957: PUSH
11958: LD_INT 14
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 72
11974: PUSH
11975: LD_INT 33
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 23
11987: PUSH
11988: LD_INT 3
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 95
12000: PUSH
12001: LD_INT 13
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 95
12010: PUSH
12011: LD_INT 14
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: OR
12033: IFFALSE 12222
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12035: LD_ADDR_VAR 0 2
12039: PUSH
12040: LD_EXP 34
12044: PPUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 95
12050: PUSH
12051: LD_INT 13
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 95
12060: PUSH
12061: LD_INT 14
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 72
12077: PUSH
12078: LD_INT 1
12080: ARRAY
12081: ST_TO_ADDR
// if not unit then
12082: LD_VAR 0 2
12086: NOT
12087: IFFALSE 12222
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12089: LD_ADDR_VAR 0 4
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: LD_INT 95
12099: PUSH
12100: LD_INT 13
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 95
12109: PUSH
12110: LD_INT 14
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 33
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 23
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 69
12151: ST_TO_ADDR
// if not tmp then
12152: LD_VAR 0 4
12156: NOT
12157: IFFALSE 12161
// exit ;
12159: GO 12297
// for i in tmp do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_VAR 0 4
12170: PUSH
12171: FOR_IN
12172: IFFALSE 12220
// if IsDrivenBy ( i ) in RuScientists then
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 311
12183: PUSH
12184: LD_EXP 34
12188: IN
12189: IFFALSE 12218
// begin unit := IsDrivenBy ( i ) ;
12191: LD_ADDR_VAR 0 2
12195: PUSH
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL_OW 311
12205: ST_TO_ADDR
// veh := i ;
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: LD_VAR 0 1
12215: ST_TO_ADDR
// break ;
12216: GO 12220
// end ;
12218: GO 12171
12220: POP
12221: POP
// end ; end ; if not unit then
12222: LD_VAR 0 2
12226: NOT
12227: IFFALSE 12231
// exit ;
12229: GO 12297
// RuScientists = RuScientists diff unit ;
12231: LD_ADDR_EXP 34
12235: PUSH
12236: LD_EXP 34
12240: PUSH
12241: LD_VAR 0 2
12245: DIFF
12246: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12247: LD_VAR 0 2
12251: PPUSH
12252: CALL_OW 64
// if veh then
12256: LD_VAR 0 3
12260: IFFALSE 12297
// begin if GetWeapon ( veh ) = 49 then
12262: LD_VAR 0 3
12266: PPUSH
12267: CALL_OW 264
12271: PUSH
12272: LD_INT 49
12274: EQUAL
12275: IFFALSE 12288
// KillUnit ( veh ) else
12277: LD_VAR 0 3
12281: PPUSH
12282: CALL_OW 66
12286: GO 12297
// RemoveUnit ( veh ) ;
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 64
// end ; end ; end_of_file
12297: PPOPN 4
12299: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12300: LD_INT 0
12302: PPUSH
12303: PPUSH
// for i in charactersList do
12304: LD_ADDR_VAR 0 4
12308: PUSH
12309: LD_VAR 0 1
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12333
// SaveCharacters ( i , ident ) ;
12317: LD_VAR 0 4
12321: PPUSH
12322: LD_VAR 0 2
12326: PPUSH
12327: CALL_OW 38
12331: GO 12314
12333: POP
12334: POP
// end ;
12335: LD_VAR 0 3
12339: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 1
12354: PUSH
12355: LD_EXP 1
12359: PUSH
12360: LD_EXP 7
12364: PUSH
12365: LD_EXP 3
12369: PUSH
12370: LD_EXP 4
12374: PUSH
12375: LD_EXP 5
12379: PUSH
12380: LD_EXP 2
12384: PUSH
12385: LD_EXP 12
12389: PUSH
12390: LD_EXP 13
12394: PUSH
12395: LD_EXP 9
12399: PUSH
12400: LD_EXP 11
12404: PUSH
12405: LD_EXP 6
12409: PUSH
12410: LD_EXP 8
12414: PUSH
12415: LD_EXP 10
12419: PUSH
12420: LD_EXP 22
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: DIFF
12441: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12442: LD_ADDR_VAR 0 6
12446: PUSH
12447: LD_VAR 0 1
12451: PUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 12
12464: ARRAY
12465: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12466: LD_VAR 0 6
12470: PPUSH
12471: CALL_OW 258
12475: PUSH
12476: LD_INT 1
12478: EQUAL
12479: IFFALSE 12497
// Say ( speaker , dialogMID ) else
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL_OW 88
12495: GO 12511
// Say ( speaker , dialogFID ) ;
12497: LD_VAR 0 6
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: CALL_OW 88
// result := speaker ;
12511: LD_ADDR_VAR 0 4
12515: PUSH
12516: LD_VAR 0 6
12520: ST_TO_ADDR
// end ;
12521: LD_VAR 0 4
12525: RET
// export function PrepareDifficulty ; var tmp ; begin
12526: LD_INT 0
12528: PPUSH
12529: PPUSH
// if Difficulty = 1 then
12530: LD_OWVAR 67
12534: PUSH
12535: LD_INT 1
12537: EQUAL
12538: IFFALSE 12558
// begin RuSolMinLevel = 8 ;
12540: LD_ADDR_EXP 36
12544: PUSH
12545: LD_INT 8
12547: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12548: LD_ADDR_EXP 37
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// end else
12556: GO 12798
// if Difficulty = 2 then
12558: LD_OWVAR 67
12562: PUSH
12563: LD_INT 2
12565: EQUAL
12566: IFFALSE 12662
// begin RuSolMinLevel = 9 ;
12568: LD_ADDR_EXP 36
12572: PUSH
12573: LD_INT 9
12575: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12576: LD_ADDR_EXP 37
12580: PUSH
12581: LD_INT 10
12583: ST_TO_ADDR
// uc_nation = 3 ;
12584: LD_ADDR_OWVAR 21
12588: PUSH
12589: LD_INT 3
12591: ST_TO_ADDR
// uc_side = 3 ;
12592: LD_ADDR_OWVAR 20
12596: PUSH
12597: LD_INT 3
12599: ST_TO_ADDR
// bc_level = 10 ;
12600: LD_ADDR_OWVAR 43
12604: PUSH
12605: LD_INT 10
12607: ST_TO_ADDR
// bc_type = b_turret ;
12608: LD_ADDR_OWVAR 42
12612: PUSH
12613: LD_INT 33
12615: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12616: LD_ADDR_VAR 0 2
12620: PUSH
12621: LD_INT 86
12623: PPUSH
12624: LD_INT 34
12626: PPUSH
12627: LD_INT 2
12629: PPUSH
12630: CALL_OW 47
12634: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12635: LD_VAR 0 2
12639: PPUSH
12640: LD_INT 49
12642: PPUSH
12643: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12647: LD_INT 64
12649: PPUSH
12650: LD_INT 3
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 322
// end else
12660: GO 12798
// begin RuSolMinLevel = 10 ;
12662: LD_ADDR_EXP 36
12666: PUSH
12667: LD_INT 10
12669: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12670: LD_ADDR_EXP 37
12674: PUSH
12675: LD_INT 10
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// uc_side = 3 ;
12686: LD_ADDR_OWVAR 20
12690: PUSH
12691: LD_INT 3
12693: ST_TO_ADDR
// bc_level = 10 ;
12694: LD_ADDR_OWVAR 43
12698: PUSH
12699: LD_INT 10
12701: ST_TO_ADDR
// bc_type = b_turret ;
12702: LD_ADDR_OWVAR 42
12706: PUSH
12707: LD_INT 33
12709: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 86
12717: PPUSH
12718: LD_INT 34
12720: PPUSH
12721: LD_INT 2
12723: PPUSH
12724: CALL_OW 47
12728: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12729: LD_VAR 0 2
12733: PPUSH
12734: LD_INT 49
12736: PPUSH
12737: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12741: LD_ADDR_VAR 0 2
12745: PUSH
12746: LD_INT 93
12748: PPUSH
12749: LD_INT 31
12751: PPUSH
12752: LD_INT 2
12754: PPUSH
12755: CALL_OW 47
12759: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12760: LD_VAR 0 2
12764: PPUSH
12765: LD_INT 49
12767: PPUSH
12768: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12772: LD_INT 64
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12785: LD_INT 65
12787: PPUSH
12788: LD_INT 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// end ; end ;
12798: LD_VAR 0 1
12802: RET
// export function ShowQuery1 ; begin
12803: LD_INT 0
12805: PPUSH
// result := Query ( Q1 ) ;
12806: LD_ADDR_VAR 0 1
12810: PUSH
12811: LD_STRING Q1
12813: PPUSH
12814: CALL_OW 97
12818: ST_TO_ADDR
// end ;
12819: LD_VAR 0 1
12823: RET
// export function ShowQuery2 ; begin
12824: LD_INT 0
12826: PPUSH
// result := Query ( Q1a ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_STRING Q1a
12834: PPUSH
12835: CALL_OW 97
12839: ST_TO_ADDR
// end ;
12840: LD_VAR 0 1
12844: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12845: LD_INT 0
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
// for i = 1 to count do
12852: LD_ADDR_VAR 0 8
12856: PUSH
12857: DOUBLE
12858: LD_INT 1
12860: DEC
12861: ST_TO_ADDR
12862: LD_VAR 0 6
12866: PUSH
12867: FOR_TO
12868: IFFALSE 12949
// begin uc_side = side ;
12870: LD_ADDR_OWVAR 20
12874: PUSH
12875: LD_VAR 0 1
12879: ST_TO_ADDR
// uc_nation = nation ;
12880: LD_ADDR_OWVAR 21
12884: PUSH
12885: LD_VAR 0 2
12889: ST_TO_ADDR
// hc_gallery =  ;
12890: LD_ADDR_OWVAR 33
12894: PUSH
12895: LD_STRING 
12897: ST_TO_ADDR
// hc_name =  ;
12898: LD_ADDR_OWVAR 26
12902: PUSH
12903: LD_STRING 
12905: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12906: LD_INT 0
12908: PPUSH
12909: LD_VAR 0 5
12913: PPUSH
12914: LD_VAR 0 4
12918: PPUSH
12919: CALL_OW 380
// un = CreateHuman ;
12923: LD_ADDR_VAR 0 10
12927: PUSH
12928: CALL_OW 44
12932: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12933: LD_VAR 0 10
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: CALL_OW 52
// end ;
12947: GO 12867
12949: POP
12950: POP
// end ;
12951: LD_VAR 0 7
12955: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12956: LD_INT 0
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12963: LD_ADDR_VAR 0 8
12967: PUSH
12968: LD_INT 48
12970: PUSH
12971: LD_INT 49
12973: PUSH
12974: LD_INT 50
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: LD_INT 51
12985: PUSH
12986: LD_INT 52
12988: PUSH
12989: LD_INT 69
12991: PUSH
12992: LD_INT 39
12994: PUSH
12995: LD_INT 34
12997: PUSH
12998: LD_INT 40
13000: PUSH
13001: LD_INT 53
13003: PUSH
13004: LD_INT 71
13006: PUSH
13007: LD_INT 57
13009: PUSH
13010: LD_INT 58
13012: PUSH
13013: LD_INT 44
13015: PUSH
13016: LD_INT 32
13018: PUSH
13019: LD_INT 27
13021: PUSH
13022: LD_INT 23
13024: PUSH
13025: LD_INT 33
13027: PUSH
13028: LD_INT 59
13030: PUSH
13031: LD_INT 54
13033: PUSH
13034: LD_INT 55
13036: PUSH
13037: LD_INT 56
13039: PUSH
13040: LD_INT 63
13042: PUSH
13043: LD_INT 64
13045: PUSH
13046: LD_INT 65
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 31
13054: PUSH
13055: LD_INT 21
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_INT 25
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13098: LD_ADDR_VAR 0 5
13102: PUSH
13103: DOUBLE
13104: LD_INT 1
13106: DEC
13107: ST_TO_ADDR
13108: LD_VAR 0 8
13112: PUSH
13113: FOR_TO
13114: IFFALSE 13190
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13116: LD_VAR 0 8
13120: PUSH
13121: LD_VAR 0 5
13125: ARRAY
13126: PPUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 321
13136: PUSH
13137: LD_INT 1
13139: EQUAL
13140: PUSH
13141: LD_VAR 0 8
13145: PUSH
13146: LD_VAR 0 5
13150: ARRAY
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: CALL_OW 482
13161: PUSH
13162: LD_INT 1
13164: EQUAL
13165: AND
13166: IFFALSE 13188
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13168: LD_VAR 0 2
13172: PPUSH
13173: LD_VAR 0 8
13177: PUSH
13178: LD_VAR 0 5
13182: ARRAY
13183: PPUSH
13184: CALL_OW 184
13188: GO 13113
13190: POP
13191: POP
// end ;
13192: LD_VAR 0 4
13196: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13197: LD_INT 0
13199: PPUSH
13200: PPUSH
13201: PPUSH
13202: PPUSH
13203: PPUSH
13204: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13205: LD_ADDR_VAR 0 8
13209: PUSH
13210: LD_VAR 0 2
13214: PPUSH
13215: CALL_OW 313
13219: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13220: LD_ADDR_VAR 0 9
13224: PUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 22
13232: PUSH
13233: LD_VAR 0 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 24
13254: PUSH
13255: LD_INT 750
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: LD_INT 54
13267: PUSH
13268: EMPTY
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 70
13285: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13286: LD_ADDR_VAR 0 6
13290: PUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_INT 22
13298: PUSH
13299: LD_VAR 0 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 3
13320: PUSH
13321: LD_INT 24
13323: PUSH
13324: LD_INT 1000
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: PPUSH
13343: CALL_OW 70
13347: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13348: LD_VAR 0 6
13352: NOT
13353: PUSH
13354: LD_INT 22
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 24
13378: PUSH
13379: LD_INT 250
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 69
13395: NOT
13396: AND
13397: IFFALSE 13401
// exit ;
13399: GO 13583
// if buildings_list > 0 and engineerOkInside then
13401: LD_VAR 0 6
13405: PUSH
13406: LD_INT 0
13408: GREATER
13409: PUSH
13410: LD_VAR 0 8
13414: AND
13415: IFFALSE 13426
// ComExitBuilding ( engineerOkInside ) ;
13417: LD_VAR 0 8
13421: PPUSH
13422: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13426: LD_VAR 0 6
13430: PUSH
13431: LD_INT 0
13433: GREATER
13434: PUSH
13435: LD_VAR 0 9
13439: PUSH
13440: LD_INT 0
13442: GREATER
13443: AND
13444: IFFALSE 13464
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13446: LD_VAR 0 9
13450: PPUSH
13451: LD_VAR 0 6
13455: PUSH
13456: LD_INT 1
13458: ARRAY
13459: PPUSH
13460: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13464: LD_VAR 0 6
13468: PUSH
13469: LD_INT 0
13471: EQUAL
13472: PUSH
13473: LD_VAR 0 4
13477: PUSH
13478: LD_INT 0
13480: EQUAL
13481: AND
13482: PUSH
13483: LD_VAR 0 9
13487: PUSH
13488: LD_INT 0
13490: GREATER
13491: AND
13492: IFFALSE 13508
// ComEnterUnit ( engineerOkOutside , building ) ;
13494: LD_VAR 0 9
13498: PPUSH
13499: LD_VAR 0 2
13503: PPUSH
13504: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13508: LD_VAR 0 9
13512: PUSH
13513: LD_INT 0
13515: GREATER
13516: PUSH
13517: LD_VAR 0 6
13521: PUSH
13522: LD_INT 0
13524: EQUAL
13525: AND
13526: PUSH
13527: LD_VAR 0 4
13531: PUSH
13532: LD_INT 0
13534: GREATER
13535: AND
13536: IFFALSE 13583
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13538: LD_VAR 0 9
13542: PPUSH
13543: LD_VAR 0 4
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: LD_VAR 0 4
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 4
13565: PUSH
13566: LD_INT 3
13568: ARRAY
13569: PPUSH
13570: LD_VAR 0 4
13574: PUSH
13575: LD_INT 4
13577: ARRAY
13578: PPUSH
13579: CALL_OW 145
// end ;
13583: LD_VAR 0 5
13587: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13588: LD_INT 0
13590: PPUSH
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
13597: PPUSH
13598: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13599: LD_ADDR_VAR 0 6
13603: PUSH
13604: LD_INT 22
13606: PUSH
13607: LD_VAR 0 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 25
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 24
13628: PUSH
13629: LD_INT 251
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 69
13645: PUSH
13646: LD_EXP 34
13650: PUSH
13651: EMPTY
13652: LIST
13653: DIFF
13654: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13655: LD_ADDR_VAR 0 7
13659: PUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: LD_INT 22
13667: PUSH
13668: LD_VAR 0 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 25
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 50
13689: PUSH
13690: EMPTY
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 70
13702: PUSH
13703: LD_EXP 34
13707: PUSH
13708: EMPTY
13709: LIST
13710: DIFF
13711: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13712: LD_ADDR_VAR 0 10
13716: PUSH
13717: LD_VAR 0 3
13721: PPUSH
13722: LD_INT 22
13724: PUSH
13725: LD_VAR 0 1
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 21
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 3
13746: PUSH
13747: LD_INT 24
13749: PUSH
13750: LD_INT 750
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 70
13770: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13771: LD_ADDR_VAR 0 11
13775: PUSH
13776: LD_VAR 0 2
13780: PPUSH
13781: LD_INT 22
13783: PUSH
13784: LD_VAR 0 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 21
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 3
13805: PUSH
13806: LD_INT 24
13808: PUSH
13809: LD_INT 1000
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: PPUSH
13825: CALL_OW 70
13829: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13830: LD_VAR 0 10
13834: PUSH
13835: LD_INT 0
13837: GREATER
13838: PUSH
13839: LD_VAR 0 6
13843: PUSH
13844: LD_INT 0
13846: GREATER
13847: AND
13848: IFFALSE 13864
// ComMoveToArea ( damageUnits , healArea ) ;
13850: LD_VAR 0 10
13854: PPUSH
13855: LD_VAR 0 2
13859: PPUSH
13860: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13864: LD_VAR 0 11
13868: PUSH
13869: LD_INT 0
13871: GREATER
13872: PUSH
13873: LD_VAR 0 7
13877: PUSH
13878: LD_INT 0
13880: GREATER
13881: AND
13882: IFFALSE 13902
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13884: LD_VAR 0 7
13888: PPUSH
13889: LD_VAR 0 11
13893: PUSH
13894: LD_INT 1
13896: ARRAY
13897: PPUSH
13898: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13902: LD_VAR 0 10
13906: PUSH
13907: LD_INT 0
13909: EQUAL
13910: PUSH
13911: LD_VAR 0 11
13915: PUSH
13916: LD_INT 0
13918: EQUAL
13919: AND
13920: PUSH
13921: LD_VAR 0 7
13925: PUSH
13926: LD_INT 0
13928: GREATER
13929: AND
13930: IFFALSE 14035
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13932: LD_ADDR_VAR 0 12
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_VAR 0 1
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 3
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 30
13961: PUSH
13962: LD_INT 8
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 69
13978: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13979: LD_ADDR_VAR 0 13
13983: PUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_VAR 0 12
13991: PPUSH
13992: CALL_OW 12
13996: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13997: LD_VAR 0 7
14001: PPUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 60
14007: PUSH
14008: EMPTY
14009: LIST
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 72
14019: PPUSH
14020: LD_VAR 0 12
14024: PUSH
14025: LD_VAR 0 13
14029: ARRAY
14030: PPUSH
14031: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14035: LD_VAR 0 3
14039: PPUSH
14040: LD_INT 22
14042: PUSH
14043: LD_VAR 0 1
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 24
14064: PUSH
14065: LD_INT 751
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 70
14081: PUSH
14082: LD_INT 0
14084: GREATER
14085: PUSH
14086: LD_INT 21
14088: PPUSH
14089: CALL_OW 302
14093: AND
14094: PUSH
14095: LD_INT 21
14097: PPUSH
14098: CALL_OW 255
14102: PUSH
14103: LD_INT 3
14105: EQUAL
14106: AND
14107: IFFALSE 14163
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 22
14116: PUSH
14117: LD_VAR 0 1
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 25
14128: PUSH
14129: LD_INT 3
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 24
14138: PUSH
14139: LD_INT 751
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 70
14155: PPUSH
14156: LD_INT 21
14158: PPUSH
14159: CALL_OW 120
// end ;
14163: LD_VAR 0 5
14167: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14168: LD_INT 0
14170: PPUSH
14171: PPUSH
14172: PPUSH
14173: PPUSH
14174: PPUSH
14175: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14176: LD_ADDR_VAR 0 7
14180: PUSH
14181: LD_VAR 0 2
14185: PPUSH
14186: LD_INT 22
14188: PUSH
14189: LD_VAR 0 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 34
14210: PUSH
14211: LD_INT 52
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 70
14227: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14228: LD_ADDR_VAR 0 8
14232: PUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_INT 22
14240: PUSH
14241: LD_VAR 0 1
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 3
14262: PUSH
14263: LD_INT 24
14265: PUSH
14266: LD_INT 1000
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 70
14289: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14290: LD_VAR 0 8
14294: PUSH
14295: LD_INT 0
14297: GREATER
14298: PUSH
14299: LD_VAR 0 7
14303: PPUSH
14304: LD_INT 24
14306: PUSH
14307: LD_INT 750
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 72
14318: PUSH
14319: LD_INT 0
14321: GREATER
14322: AND
14323: IFFALSE 14343
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14325: LD_VAR 0 7
14329: PPUSH
14330: LD_VAR 0 8
14334: PUSH
14335: LD_INT 1
14337: ARRAY
14338: PPUSH
14339: CALL_OW 130
// end ;
14343: LD_VAR 0 3
14347: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14348: LD_INT 0
14350: PPUSH
14351: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14352: LD_INT 22
14354: PUSH
14355: LD_VAR 0 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: PUSH
14383: LD_INT 18
14385: PPUSH
14386: LD_INT 22
14388: PUSH
14389: LD_VAR 0 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 70
14416: PUSH
14417: LD_VAR 0 3
14421: LESSEQUAL
14422: DIFF
14423: IFFALSE 14490
// for i = 1 to vehCount do
14425: LD_ADDR_VAR 0 9
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_VAR 0 3
14439: PUSH
14440: FOR_TO
14441: IFFALSE 14488
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_VAR 0 7
14452: PPUSH
14453: LD_VAR 0 5
14457: PPUSH
14458: LD_VAR 0 6
14462: PPUSH
14463: LD_VAR 0 4
14467: PUSH
14468: LD_INT 1
14470: PPUSH
14471: LD_VAR 0 4
14475: PPUSH
14476: CALL_OW 12
14480: ARRAY
14481: PPUSH
14482: CALL_OW 185
14486: GO 14440
14488: POP
14489: POP
// end ;
14490: LD_VAR 0 8
14494: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14503: LD_ADDR_VAR 0 6
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_VAR 0 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 25
14522: PUSH
14523: LD_INT 9
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14539: LD_ADDR_VAR 0 7
14543: PUSH
14544: LD_INT 81
14546: PUSH
14547: LD_VAR 0 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 69
14581: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14582: LD_ADDR_VAR 0 4
14586: PUSH
14587: LD_INT 1
14589: PPUSH
14590: LD_INT 3
14592: PPUSH
14593: CALL_OW 12
14597: ST_TO_ADDR
// for i = 1 to list do
14598: LD_ADDR_VAR 0 5
14602: PUSH
14603: DOUBLE
14604: LD_INT 1
14606: DEC
14607: ST_TO_ADDR
14608: LD_VAR 0 6
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14816
// for ta in filter do
14616: LD_ADDR_VAR 0 3
14620: PUSH
14621: LD_VAR 0 7
14625: PUSH
14626: FOR_IN
14627: IFFALSE 14812
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14629: LD_VAR 0 6
14633: PUSH
14634: LD_VAR 0 5
14638: ARRAY
14639: PPUSH
14640: LD_VAR 0 3
14644: PPUSH
14645: CALL_OW 296
14649: PUSH
14650: LD_INT 15
14652: LESSEQUAL
14653: IFFALSE 14810
// begin case c of 1 :
14655: LD_VAR 0 4
14659: PUSH
14660: LD_INT 1
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14706
14668: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14669: LD_VAR 0 6
14673: PUSH
14674: LD_VAR 0 5
14678: ARRAY
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: CALL_OW 250
14689: PPUSH
14690: LD_VAR 0 3
14694: PPUSH
14695: CALL_OW 251
14699: PPUSH
14700: CALL_OW 154
14704: GO 14810
14706: LD_INT 2
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14778
14714: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14715: LD_VAR 0 6
14719: PUSH
14720: LD_VAR 0 5
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 3
14730: PPUSH
14731: CALL_OW 250
14735: PUSH
14736: LD_INT 1
14738: NEG
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 12
14747: PLUS
14748: PPUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: CALL_OW 251
14758: PUSH
14759: LD_INT 1
14761: NEG
14762: PPUSH
14763: LD_INT 1
14765: PPUSH
14766: CALL_OW 12
14770: PLUS
14771: PPUSH
14772: CALL_OW 153
14776: GO 14810
14778: LD_INT 3
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14809
14786: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14787: LD_VAR 0 6
14791: PUSH
14792: LD_VAR 0 5
14796: ARRAY
14797: PPUSH
14798: LD_VAR 0 3
14802: PPUSH
14803: CALL_OW 115
14807: GO 14810
14809: POP
// end ; end ;
14810: GO 14626
14812: POP
14813: POP
14814: GO 14613
14816: POP
14817: POP
// end ;
14818: LD_VAR 0 2
14822: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
// r := 100 ;
14829: LD_ADDR_VAR 0 5
14833: PUSH
14834: LD_INT 100
14836: ST_TO_ADDR
// x := 0 ;
14837: LD_ADDR_VAR 0 6
14841: PUSH
14842: LD_INT 0
14844: ST_TO_ADDR
// while ( x < n ) do
14845: LD_VAR 0 6
14849: PUSH
14850: LD_VAR 0 2
14854: LESS
14855: IFFALSE 15142
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14857: LD_ADDR_VAR 0 4
14861: PUSH
14862: DOUBLE
14863: LD_INT 1
14865: DEC
14866: ST_TO_ADDR
14867: LD_VAR 0 1
14871: PPUSH
14872: LD_INT 0
14874: PPUSH
14875: CALL_OW 517
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PUSH
14884: FOR_TO
14885: IFFALSE 15138
// begin if r > 50 then
14887: LD_VAR 0 5
14891: PUSH
14892: LD_INT 50
14894: GREATER
14895: IFFALSE 15114
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 0
14904: PPUSH
14905: CALL_OW 517
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PUSH
14914: LD_VAR 0 4
14918: ARRAY
14919: PPUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: LD_INT 0
14927: PPUSH
14928: CALL_OW 517
14932: PUSH
14933: LD_INT 2
14935: ARRAY
14936: PUSH
14937: LD_VAR 0 4
14941: ARRAY
14942: PPUSH
14943: CALL_OW 458
14947: NOT
14948: IFFALSE 15098
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: LD_INT 0
14957: PPUSH
14958: CALL_OW 517
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PUSH
14967: LD_VAR 0 4
14971: ARRAY
14972: PPUSH
14973: LD_VAR 0 1
14977: PPUSH
14978: LD_INT 0
14980: PPUSH
14981: CALL_OW 517
14985: PUSH
14986: LD_INT 2
14988: ARRAY
14989: PUSH
14990: LD_VAR 0 4
14994: ARRAY
14995: PPUSH
14996: LD_INT 8
14998: PPUSH
14999: LD_INT 0
15001: PPUSH
15002: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15006: LD_ADDR_EXP 44
15010: PUSH
15011: LD_EXP 44
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: LD_INT 0
15026: PPUSH
15027: CALL_OW 517
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PUSH
15036: LD_VAR 0 4
15040: ARRAY
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_INT 0
15049: PPUSH
15050: CALL_OW 517
15054: PUSH
15055: LD_INT 2
15057: ARRAY
15058: PUSH
15059: LD_VAR 0 4
15063: ARRAY
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 2
15073: ST_TO_ADDR
// r := 0 ;
15074: LD_ADDR_VAR 0 5
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// x := x + 1 ;
15082: LD_ADDR_VAR 0 6
15086: PUSH
15087: LD_VAR 0 6
15091: PUSH
15092: LD_INT 1
15094: PLUS
15095: ST_TO_ADDR
// end else
15096: GO 15112
// r := r + 35 ;
15098: LD_ADDR_VAR 0 5
15102: PUSH
15103: LD_VAR 0 5
15107: PUSH
15108: LD_INT 35
15110: PLUS
15111: ST_TO_ADDR
// end else
15112: GO 15136
// r := r + rand ( 10 , 25 ) ;
15114: LD_ADDR_VAR 0 5
15118: PUSH
15119: LD_VAR 0 5
15123: PUSH
15124: LD_INT 10
15126: PPUSH
15127: LD_INT 25
15129: PPUSH
15130: CALL_OW 12
15134: PLUS
15135: ST_TO_ADDR
// end ;
15136: GO 14884
15138: POP
15139: POP
15140: GO 14845
// end ;
15142: LD_VAR 0 3
15146: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
// tmpTab = [ ] ;
15153: LD_ADDR_VAR 0 6
15157: PUSH
15158: EMPTY
15159: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15160: LD_INT 22
15162: PUSH
15163: LD_VAR 0 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 30
15174: PUSH
15175: LD_INT 32
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PUSH
15191: LD_INT 0
15193: GREATER
15194: IFFALSE 15277
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15196: LD_ADDR_VAR 0 4
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_VAR 0 1
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 30
15215: PUSH
15216: LD_INT 32
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL_OW 69
15231: PUSH
15232: FOR_IN
15233: IFFALSE 15275
// begin for j in UnitsInside ( i ) do
15235: LD_ADDR_VAR 0 5
15239: PUSH
15240: LD_VAR 0 4
15244: PPUSH
15245: CALL_OW 313
15249: PUSH
15250: FOR_IN
15251: IFFALSE 15271
// tmpTab = tmpTab ^ j ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: LD_VAR 0 6
15262: PUSH
15263: LD_VAR 0 5
15267: ADD
15268: ST_TO_ADDR
15269: GO 15250
15271: POP
15272: POP
// end ;
15273: GO 15232
15275: POP
15276: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15277: LD_VAR 0 6
15281: PPUSH
15282: LD_VAR 0 2
15286: PPUSH
15287: CALL_OW 250
15291: PPUSH
15292: LD_VAR 0 2
15296: PPUSH
15297: CALL_OW 251
15301: PPUSH
15302: CALL_OW 114
// end ;
15306: LD_VAR 0 3
15310: RET
// export function CreateNature ; var i , un ; begin
15311: LD_INT 0
15313: PPUSH
15314: PPUSH
15315: PPUSH
// uc_side := 0 ;
15316: LD_ADDR_OWVAR 20
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// uc_nation := 0 ;
15324: LD_ADDR_OWVAR 21
15328: PUSH
15329: LD_INT 0
15331: ST_TO_ADDR
// InitHc ;
15332: CALL_OW 19
// hc_class := class_fish ;
15336: LD_ADDR_OWVAR 28
15340: PUSH
15341: LD_INT 20
15343: ST_TO_ADDR
// for i = 1 to 6 do
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_INT 6
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15377
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15360: CALL_OW 44
15364: PPUSH
15365: LD_INT 23
15367: PPUSH
15368: LD_INT 0
15370: PPUSH
15371: CALL_OW 49
15375: GO 15357
15377: POP
15378: POP
// for i = 1 to Difficulty + 2 do
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: DOUBLE
15385: LD_INT 1
15387: DEC
15388: ST_TO_ADDR
15389: LD_OWVAR 67
15393: PUSH
15394: LD_INT 2
15396: PLUS
15397: PUSH
15398: FOR_TO
15399: IFFALSE 15508
// begin hc_sex = sex_male ;
15401: LD_ADDR_OWVAR 27
15405: PUSH
15406: LD_INT 1
15408: ST_TO_ADDR
// uc_side = 0 ;
15409: LD_ADDR_OWVAR 20
15413: PUSH
15414: LD_INT 0
15416: ST_TO_ADDR
// uc_nation = nation_nature ;
15417: LD_ADDR_OWVAR 21
15421: PUSH
15422: LD_INT 0
15424: ST_TO_ADDR
// hc_class = class_tiger ;
15425: LD_ADDR_OWVAR 28
15429: PUSH
15430: LD_INT 14
15432: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15433: LD_ADDR_OWVAR 31
15437: PUSH
15438: LD_EXP 37
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: LD_INT 0
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15458: LD_ADDR_OWVAR 35
15462: PUSH
15463: LD_INT 5
15465: NEG
15466: PPUSH
15467: LD_INT 5
15469: PPUSH
15470: CALL_OW 12
15474: PUSH
15475: LD_OWVAR 67
15479: MUL
15480: ST_TO_ADDR
// un = CreateHuman ;
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: CALL_OW 44
15490: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_INT 24
15498: PPUSH
15499: LD_INT 0
15501: PPUSH
15502: CALL_OW 49
// end ;
15506: GO 15398
15508: POP
15509: POP
// for i = 1 to rand ( 3 , 4 ) do
15510: LD_ADDR_VAR 0 2
15514: PUSH
15515: DOUBLE
15516: LD_INT 1
15518: DEC
15519: ST_TO_ADDR
15520: LD_INT 3
15522: PPUSH
15523: LD_INT 4
15525: PPUSH
15526: CALL_OW 12
15530: PUSH
15531: FOR_TO
15532: IFFALSE 15624
// begin hc_sex = sex_male ;
15534: LD_ADDR_OWVAR 27
15538: PUSH
15539: LD_INT 1
15541: ST_TO_ADDR
// uc_side = 0 ;
15542: LD_ADDR_OWVAR 20
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// uc_nation = nation_nature ;
15550: LD_ADDR_OWVAR 21
15554: PUSH
15555: LD_INT 0
15557: ST_TO_ADDR
// hc_class = 18 ;
15558: LD_ADDR_OWVAR 28
15562: PUSH
15563: LD_INT 18
15565: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15566: LD_ADDR_OWVAR 31
15570: PUSH
15571: LD_INT 0
15573: PUSH
15574: LD_INT 0
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: LD_INT 0
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: ST_TO_ADDR
// hc_agressivity = 0 ;
15589: LD_ADDR_OWVAR 35
15593: PUSH
15594: LD_INT 0
15596: ST_TO_ADDR
// un = CreateHuman ;
15597: LD_ADDR_VAR 0 3
15601: PUSH
15602: CALL_OW 44
15606: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_INT 24
15614: PPUSH
15615: LD_INT 0
15617: PPUSH
15618: CALL_OW 49
// end ;
15622: GO 15531
15624: POP
15625: POP
// for i = 1 to rand ( 1 , 3 ) do
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: DOUBLE
15632: LD_INT 1
15634: DEC
15635: ST_TO_ADDR
15636: LD_INT 1
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 12
15646: PUSH
15647: FOR_TO
15648: IFFALSE 15796
// begin hc_sex = sex_male ;
15650: LD_ADDR_OWVAR 27
15654: PUSH
15655: LD_INT 1
15657: ST_TO_ADDR
// uc_side = 0 ;
15658: LD_ADDR_OWVAR 20
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// uc_nation = nation_nature ;
15666: LD_ADDR_OWVAR 21
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// hc_class = class_apeman ;
15674: LD_ADDR_OWVAR 28
15678: PUSH
15679: LD_INT 12
15681: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15682: LD_ADDR_OWVAR 31
15686: PUSH
15687: LD_EXP 36
15691: PPUSH
15692: LD_EXP 37
15696: PPUSH
15697: CALL_OW 12
15701: PUSH
15702: LD_EXP 36
15706: PPUSH
15707: LD_EXP 37
15711: PPUSH
15712: CALL_OW 12
15716: PUSH
15717: LD_EXP 36
15721: PPUSH
15722: LD_EXP 37
15726: PPUSH
15727: CALL_OW 12
15731: PUSH
15732: LD_EXP 36
15736: PPUSH
15737: LD_EXP 37
15741: PPUSH
15742: CALL_OW 12
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15753: LD_ADDR_OWVAR 35
15757: PUSH
15758: LD_INT 1
15760: PPUSH
15761: LD_INT 20
15763: PPUSH
15764: CALL_OW 12
15768: ST_TO_ADDR
// un = CreateHuman ;
15769: LD_ADDR_VAR 0 3
15773: PUSH
15774: CALL_OW 44
15778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15779: LD_VAR 0 3
15783: PPUSH
15784: LD_INT 24
15786: PPUSH
15787: LD_INT 0
15789: PPUSH
15790: CALL_OW 49
// end ;
15794: GO 15647
15796: POP
15797: POP
// end ; end_of_file
15798: LD_VAR 0 1
15802: RET
// on UnitDestroyed ( unit ) do var i ;
15803: LD_INT 0
15805: PPUSH
// begin if unit in russianTanks then
15806: LD_VAR 0 1
15810: PUSH
15811: LD_EXP 39
15815: IN
15816: IFFALSE 15834
// russianTanks := russianTanks diff unit ;
15818: LD_ADDR_EXP 39
15822: PUSH
15823: LD_EXP 39
15827: PUSH
15828: LD_VAR 0 1
15832: DIFF
15833: ST_TO_ADDR
// if unit in russianTimeLapsers then
15834: LD_VAR 0 1
15838: PUSH
15839: LD_EXP 40
15843: IN
15844: IFFALSE 15862
// russianTimeLapsers := russianTimeLapsers diff unit ;
15846: LD_ADDR_EXP 40
15850: PUSH
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 1
15860: DIFF
15861: ST_TO_ADDR
// if unit in RuScientists then
15862: LD_VAR 0 1
15866: PUSH
15867: LD_EXP 34
15871: IN
15872: IFFALSE 15904
// begin RuScientists = RuScientists diff unit ;
15874: LD_ADDR_EXP 34
15878: PUSH
15879: LD_EXP 34
15883: PUSH
15884: LD_VAR 0 1
15888: DIFF
15889: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15890: LD_ADDR_EXP 35
15894: PUSH
15895: LD_EXP 35
15899: PUSH
15900: LD_INT 1
15902: PLUS
15903: ST_TO_ADDR
// end ; end ;
15904: PPOPN 2
15906: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15907: LD_VAR 0 3
15911: PPUSH
15912: CALL_OW 264
15916: PUSH
15917: LD_INT 9
15919: EQUAL
15920: IFFALSE 15936
// laserCounterDestroy := laserCounterDestroy + 1 ;
15922: LD_ADDR_EXP 50
15926: PUSH
15927: LD_EXP 50
15931: PUSH
15932: LD_INT 1
15934: PLUS
15935: ST_TO_ADDR
// end ;
15936: PPOPN 3
15938: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15939: LD_VAR 0 1
15943: PUSH
15944: LD_INT 10
15946: EQUAL
15947: PUSH
15948: LD_VAR 0 2
15952: PPUSH
15953: CALL_OW 255
15957: PUSH
15958: LD_INT 1
15960: EQUAL
15961: AND
15962: PUSH
15963: LD_EXP 47
15967: PUSH
15968: LD_INT 0
15970: EQUAL
15971: AND
15972: IFFALSE 16084
// begin eventVar1 = 1 ;
15974: LD_ADDR_EXP 47
15978: PUSH
15979: LD_INT 1
15981: ST_TO_ADDR
// teleportExplored = 1 ;
15982: LD_ADDR_EXP 33
15986: PUSH
15987: LD_INT 1
15989: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15990: LD_STRING M2a
15992: PPUSH
15993: CALL_OW 337
// wait ( 0 0$2 ) ;
15997: LD_INT 70
15999: PPUSH
16000: CALL_OW 67
// DialogueOn ;
16004: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16008: LD_INT 22
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 21
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PPUSH
16032: CALL_OW 69
16036: PPUSH
16037: LD_STRING DT3a-Sol1-1
16039: PPUSH
16040: LD_STRING DT3a-FSol1-1
16042: PPUSH
16043: CALL 12340 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16047: LD_EXP 1
16051: PPUSH
16052: LD_STRING DT3a-JMM-1
16054: PPUSH
16055: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16068: LD_EXP 1
16072: PPUSH
16073: LD_STRING DT3a-JMM-1a
16075: PPUSH
16076: CALL_OW 88
// DialogueOff ;
16080: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 10
16091: EQUAL
16092: PUSH
16093: LD_VAR 0 2
16097: PPUSH
16098: CALL_OW 247
16102: PUSH
16103: LD_INT 2
16105: EQUAL
16106: AND
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 255
16117: PUSH
16118: LD_INT 3
16120: EQUAL
16121: AND
16122: PUSH
16123: LD_EXP 28
16127: PUSH
16128: LD_INT 0
16130: EQUAL
16131: AND
16132: IFFALSE 16149
// begin wait ( 0 0$3 ) ;
16134: LD_INT 105
16136: PPUSH
16137: CALL_OW 67
// vehicleTeleported = 1 ;
16141: LD_ADDR_EXP 28
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16149: LD_VAR 0 1
16153: PUSH
16154: LD_INT 10
16156: EQUAL
16157: PUSH
16158: LD_VAR 0 2
16162: PPUSH
16163: CALL_OW 247
16167: PUSH
16168: LD_INT 2
16170: EQUAL
16171: AND
16172: PUSH
16173: LD_VAR 0 2
16177: PPUSH
16178: CALL_OW 255
16182: PUSH
16183: LD_INT 3
16185: EQUAL
16186: AND
16187: PUSH
16188: LD_EXP 28
16192: PUSH
16193: LD_INT 2
16195: EQUAL
16196: AND
16197: IFFALSE 16214
// begin wait ( 0 0$3 ) ;
16199: LD_INT 105
16201: PPUSH
16202: CALL_OW 67
// vehicleTeleported = 3 ;
16206: LD_ADDR_EXP 28
16210: PUSH
16211: LD_INT 3
16213: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16214: LD_VAR 0 1
16218: PUSH
16219: LD_INT 10
16221: EQUAL
16222: PUSH
16223: LD_VAR 0 2
16227: PPUSH
16228: CALL_OW 247
16232: PUSH
16233: LD_INT 2
16235: EQUAL
16236: AND
16237: PUSH
16238: LD_VAR 0 2
16242: PPUSH
16243: CALL_OW 255
16247: PUSH
16248: LD_INT 3
16250: EQUAL
16251: AND
16252: IFFALSE 16268
// tpCounter = tpCounter + 1 ;
16254: LD_ADDR_EXP 29
16258: PUSH
16259: LD_EXP 29
16263: PUSH
16264: LD_INT 1
16266: PLUS
16267: ST_TO_ADDR
// end ;
16268: PPOPN 2
16270: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 264
16280: PUSH
16281: LD_INT 7
16283: EQUAL
16284: IFFALSE 16294
// rocketBuilded := true ;
16286: LD_ADDR_EXP 51
16290: PUSH
16291: LD_INT 1
16293: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16294: LD_VAR 0 2
16298: PUSH
16299: LD_INT 21
16301: EQUAL
16302: PUSH
16303: LD_VAR 0 2
16307: PUSH
16308: LD_INT 112
16310: EQUAL
16311: OR
16312: IFFALSE 16433
// if GetSide ( vehicle ) = 3 then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 255
16323: PUSH
16324: LD_INT 3
16326: EQUAL
16327: IFFALSE 16433
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 264
16338: PUSH
16339: LD_INT 46
16341: EQUAL
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 264
16352: PUSH
16353: LD_INT 45
16355: EQUAL
16356: OR
16357: PUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 264
16367: PUSH
16368: LD_INT 44
16370: EQUAL
16371: OR
16372: IFFALSE 16390
// begin russianTanks = russianTanks ^ vehicle ;
16374: LD_ADDR_EXP 39
16378: PUSH
16379: LD_EXP 39
16383: PUSH
16384: LD_VAR 0 1
16388: ADD
16389: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 264
16399: PUSH
16400: LD_INT 49
16402: EQUAL
16403: IFFALSE 16433
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16405: LD_ADDR_EXP 40
16409: PUSH
16410: LD_EXP 40
16414: PUSH
16415: LD_VAR 0 1
16419: ADD
16420: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 137
16428: PPUSH
16429: CALL_OW 120
// end ; end ; end ;
16433: PPOPN 2
16435: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16436: LD_INT 0
16438: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL_OW 255
16448: PUSH
16449: LD_INT 3
16451: EQUAL
16452: PUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: CALL_OW 257
16462: PUSH
16463: LD_INT 3
16465: EQUAL
16466: AND
16467: PUSH
16468: LD_INT 21
16470: PPUSH
16471: CALL_OW 255
16475: PUSH
16476: LD_INT 3
16478: EQUAL
16479: AND
16480: PUSH
16481: LD_INT 21
16483: PPUSH
16484: CALL_OW 302
16488: AND
16489: IFFALSE 16503
// ComEnterUnit ( human , ru_fact ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_INT 21
16498: PPUSH
16499: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16503: LD_VAR 0 2
16507: PPUSH
16508: CALL_OW 257
16512: PUSH
16513: LD_INT 4
16515: EQUAL
16516: PUSH
16517: LD_VAR 0 2
16521: PPUSH
16522: CALL_OW 255
16526: PUSH
16527: LD_INT 3
16529: EQUAL
16530: AND
16531: PUSH
16532: LD_EXP 41
16536: PUSH
16537: LD_INT 0
16539: EQUAL
16540: AND
16541: IFFALSE 16603
// for i in RuScientists do
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_EXP 34
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16601
// if i = human then
16556: LD_VAR 0 3
16560: PUSH
16561: LD_VAR 0 2
16565: EQUAL
16566: IFFALSE 16599
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16568: LD_VAR 0 3
16572: PPUSH
16573: LD_INT 13
16575: PUSH
16576: LD_INT 14
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 1
16585: PPUSH
16586: LD_INT 2
16588: PPUSH
16589: CALL_OW 12
16593: ARRAY
16594: PPUSH
16595: CALL_OW 113
16599: GO 16553
16601: POP
16602: POP
// end ;
16603: PPOPN 3
16605: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16606: LD_INT 0
16608: PPUSH
16609: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 255
16619: PUSH
16620: LD_INT 3
16622: EQUAL
16623: PUSH
16624: LD_VAR 0 2
16628: PPUSH
16629: CALL_OW 257
16633: PUSH
16634: LD_INT 4
16636: EQUAL
16637: AND
16638: IFFALSE 16780
// for i in RuScientists do
16640: LD_ADDR_VAR 0 3
16644: PUSH
16645: LD_EXP 34
16649: PUSH
16650: FOR_IN
16651: IFFALSE 16778
// if i = human then
16653: LD_VAR 0 3
16657: PUSH
16658: LD_VAR 0 2
16662: EQUAL
16663: IFFALSE 16776
// if IsOk ( rutp ) then
16665: LD_INT 137
16667: PPUSH
16668: CALL_OW 302
16672: IFFALSE 16745
// begin rnd = rand ( 1 , 2 ) ;
16674: LD_ADDR_VAR 0 4
16678: PUSH
16679: LD_INT 1
16681: PPUSH
16682: LD_INT 2
16684: PPUSH
16685: CALL_OW 12
16689: ST_TO_ADDR
// if rnd = 1 then
16690: LD_VAR 0 4
16694: PUSH
16695: LD_INT 1
16697: EQUAL
16698: IFFALSE 16712
// ComEnterUnit ( vehicle , rutp ) ;
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_INT 137
16707: PPUSH
16708: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_INT 13
16719: PUSH
16720: LD_INT 14
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 1
16729: PPUSH
16730: LD_INT 2
16732: PPUSH
16733: CALL_OW 12
16737: ARRAY
16738: PPUSH
16739: CALL_OW 173
// end else
16743: GO 16776
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 13
16752: PUSH
16753: LD_INT 14
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PPUSH
16763: LD_INT 2
16765: PPUSH
16766: CALL_OW 12
16770: ARRAY
16771: PPUSH
16772: CALL_OW 113
// end ;
16776: GO 16650
16778: POP
16779: POP
// end ;
16780: PPOPN 4
16782: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL 32919 0 1
// end ; end_of_file
16792: PPOPN 1
16794: END
// every 0 0$1 trigger ruAI = 1 do
16795: LD_EXP 41
16799: PUSH
16800: LD_INT 1
16802: EQUAL
16803: IFFALSE 16915
16805: GO 16807
16807: DISABLE
// begin enable ;
16808: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16809: LD_INT 3
16811: PPUSH
16812: LD_INT 6
16814: PPUSH
16815: LD_INT 9
16817: PPUSH
16818: LD_EXP 38
16822: PPUSH
16823: CALL 13197 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16827: LD_INT 3
16829: PPUSH
16830: LD_INT 4
16832: PPUSH
16833: LD_INT 10
16835: PPUSH
16836: LD_EXP 38
16840: PPUSH
16841: CALL 13197 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16845: LD_INT 3
16847: PPUSH
16848: LD_INT 9
16850: PPUSH
16851: CALL 14168 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16855: LD_INT 3
16857: PPUSH
16858: LD_INT 10
16860: PPUSH
16861: CALL 14168 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16865: LD_INT 3
16867: PPUSH
16868: LD_INT 16
16870: PPUSH
16871: LD_INT 9
16873: PPUSH
16874: LD_INT 91
16876: PPUSH
16877: CALL 13588 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16881: LD_INT 3
16883: PPUSH
16884: LD_INT 17
16886: PPUSH
16887: LD_INT 10
16889: PPUSH
16890: LD_INT 47
16892: PUSH
16893: LD_INT 129
16895: PUSH
16896: LD_INT 135
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL 13588 0 4
// IntBazooka ( 3 ) ;
16908: LD_INT 3
16910: PPUSH
16911: CALL 14495 0 1
// end ;
16915: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 , 5 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16916: LD_EXP 39
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: LD_INT 4
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_OWVAR 67
16943: ARRAY
16944: GREATEREQUAL
16945: IFFALSE 17445
16947: GO 16949
16949: DISABLE
16950: LD_INT 0
16952: PPUSH
16953: PPUSH
16954: PPUSH
16955: PPUSH
// begin enable ;
16956: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16957: LD_ADDR_VAR 0 2
16961: PUSH
16962: LD_EXP 39
16966: PUSH
16967: LD_EXP 40
16971: UNION
16972: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16973: LD_ADDR_EXP 39
16977: PUSH
16978: LD_EXP 39
16982: PUSH
16983: LD_VAR 0 2
16987: DIFF
16988: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16989: LD_ADDR_EXP 40
16993: PUSH
16994: LD_EXP 40
16998: PUSH
16999: LD_VAR 0 2
17003: DIFF
17004: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17005: LD_INT 10
17007: PPUSH
17008: CALL_OW 302
17012: IFFALSE 17095
// begin for j in tmp do
17014: LD_ADDR_VAR 0 1
17018: PUSH
17019: LD_VAR 0 2
17023: PUSH
17024: FOR_IN
17025: IFFALSE 17068
// if attackTactic < 2 then
17027: LD_EXP 43
17031: PUSH
17032: LD_INT 2
17034: LESS
17035: IFFALSE 17051
// ComEnterUnit ( j , ruteleprt ) else
17037: LD_VAR 0 1
17041: PPUSH
17042: LD_INT 10
17044: PPUSH
17045: CALL_OW 120
17049: GO 17066
// ComMoveXY ( j , 88 , 69 ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 88
17058: PPUSH
17059: LD_INT 69
17061: PPUSH
17062: CALL_OW 111
17066: GO 17024
17068: POP
17069: POP
// repeat wait ( 0 0$1 ) ;
17070: LD_INT 35
17072: PPUSH
17073: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17077: LD_VAR 0 2
17081: PPUSH
17082: LD_INT 60
17084: PUSH
17085: EMPTY
17086: LIST
17087: PPUSH
17088: CALL_OW 72
17092: NOT
17093: IFFALSE 17070
// end ; repeat wait ( 0 0$1 ) ;
17095: LD_INT 35
17097: PPUSH
17098: CALL_OW 67
// for j in tmp do
17102: LD_ADDR_VAR 0 1
17106: PUSH
17107: LD_VAR 0 2
17111: PUSH
17112: FOR_IN
17113: IFFALSE 17436
// begin if IsDead ( j ) then
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 301
17124: IFFALSE 17142
// tmp := tmp diff j ;
17126: LD_ADDR_VAR 0 2
17130: PUSH
17131: LD_VAR 0 2
17135: PUSH
17136: LD_VAR 0 1
17140: DIFF
17141: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: LD_INT 81
17149: PUSH
17150: LD_INT 3
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: PPUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 74
17171: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17172: LD_ADDR_VAR 0 4
17176: PUSH
17177: LD_INT 81
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: PPUSH
17204: CALL_OW 69
17208: PPUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 74
17218: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 264
17228: PUSH
17229: LD_INT 49
17231: EQUAL
17232: IFFALSE 17368
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
17234: LD_VAR 0 2
17238: PPUSH
17239: LD_INT 3
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 49
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 72
17260: PUSH
17261: LD_INT 1
17263: GREATER
17264: PUSH
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_INT 3
17272: PUSH
17273: LD_INT 34
17275: PUSH
17276: LD_INT 49
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PPUSH
17287: CALL_OW 72
17291: AND
17292: IFFALSE 17342
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_VAR 0 2
17303: PPUSH
17304: LD_INT 3
17306: PUSH
17307: LD_INT 34
17309: PUSH
17310: LD_INT 49
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 72
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 74
17335: PPUSH
17336: CALL_OW 112
17340: GO 17366
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17342: LD_VAR 0 1
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 74
17361: PPUSH
17362: CALL_OW 112
// end else
17366: GO 17434
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_VAR 0 4
17377: PPUSH
17378: CALL_OW 296
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: CALL_OW 296
17397: PUSH
17398: LD_INT 2
17400: PLUS
17401: LESS
17402: IFFALSE 17420
// ComAttackUnit ( j , target2 ) else
17404: LD_VAR 0 1
17408: PPUSH
17409: LD_VAR 0 4
17413: PPUSH
17414: CALL_OW 115
17418: GO 17434
// ComAttackUnit ( j , target1 ) ;
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: CALL_OW 115
// end ; end ;
17434: GO 17112
17436: POP
17437: POP
// until not tmp ;
17438: LD_VAR 0 2
17442: NOT
17443: IFFALSE 17095
// end ;
17445: PPOPN 4
17447: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17448: LD_INT 4
17450: PPUSH
17451: CALL_OW 303
17455: IFFALSE 17470
17457: GO 17459
17459: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17460: LD_INT 3
17462: PPUSH
17463: LD_INT 4
17465: PPUSH
17466: CALL 15147 0 2
17470: END
// every 0 0$1 do
17471: GO 17473
17473: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17474: LD_INT 3
17476: PPUSH
17477: LD_INT 91
17479: PPUSH
17480: LD_INT 3
17482: PPUSH
17483: CALL 12956 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17487: LD_INT 3
17489: PPUSH
17490: LD_INT 47
17492: PPUSH
17493: LD_INT 3
17495: PPUSH
17496: CALL 12956 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17500: LD_INT 3
17502: PPUSH
17503: LD_INT 129
17505: PPUSH
17506: LD_INT 3
17508: PPUSH
17509: CALL 12956 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17513: LD_INT 3
17515: PPUSH
17516: LD_INT 3
17518: PPUSH
17519: LD_INT 3
17521: PPUSH
17522: CALL 12956 0 3
// end ;
17526: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17527: LD_INT 22
17529: PUSH
17530: LD_INT 1
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 21
17539: PUSH
17540: LD_INT 3
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 69
17555: IFFALSE 17624
17557: GO 17559
17559: DISABLE
// begin wait ( 0 0$40 ) ;
17560: LD_INT 1400
17562: PPUSH
17563: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17567: LD_INT 3
17569: PPUSH
17570: LD_INT 21
17572: PPUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 4
17578: PUSH
17579: LD_INT 4
17581: PUSH
17582: LD_INT 5
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: PUSH
17591: LD_OWVAR 67
17595: ARRAY
17596: PPUSH
17597: LD_INT 46
17599: PUSH
17600: LD_INT 45
17602: PUSH
17603: LD_INT 44
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PPUSH
17611: LD_INT 3
17613: PPUSH
17614: LD_INT 3
17616: PPUSH
17617: LD_INT 24
17619: PPUSH
17620: CALL 14348 0 7
// end ;
17624: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17625: LD_EXP 27
17629: PUSH
17630: LD_INT 2
17632: EQUAL
17633: PUSH
17634: LD_INT 21
17636: PPUSH
17637: CALL_OW 255
17641: PUSH
17642: LD_INT 3
17644: EQUAL
17645: AND
17646: PUSH
17647: LD_INT 112
17649: PPUSH
17650: CALL_OW 255
17654: PUSH
17655: LD_INT 3
17657: EQUAL
17658: AND
17659: PUSH
17660: LD_INT 21
17662: PPUSH
17663: CALL_OW 302
17667: AND
17668: PUSH
17669: LD_INT 112
17671: PPUSH
17672: CALL_OW 302
17676: AND
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 21
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 50
17700: PUSH
17701: EMPTY
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 58
17709: PUSH
17710: EMPTY
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: PUSH
17728: LD_INT 18
17730: PPUSH
17731: LD_INT 22
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 70
17759: PUSH
17760: LD_INT 0
17762: EQUAL
17763: DIFF
17764: AND
17765: IFFALSE 17891
17767: GO 17769
17769: DISABLE
// begin enable ;
17770: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17771: LD_INT 3
17773: PPUSH
17774: LD_INT 21
17776: PPUSH
17777: LD_INT 3
17779: PUSH
17780: LD_INT 4
17782: PUSH
17783: LD_INT 4
17785: PUSH
17786: LD_INT 5
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: PUSH
17795: LD_OWVAR 67
17799: ARRAY
17800: PPUSH
17801: LD_INT 46
17803: PUSH
17804: LD_INT 45
17806: PUSH
17807: LD_INT 44
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: PPUSH
17815: LD_INT 3
17817: PPUSH
17818: LD_INT 3
17820: PPUSH
17821: LD_INT 24
17823: PPUSH
17824: CALL 14348 0 7
// if russianTimeLapsers = 0 then
17828: LD_EXP 40
17832: PUSH
17833: LD_INT 0
17835: EQUAL
17836: IFFALSE 17891
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17838: LD_INT 3
17840: PPUSH
17841: LD_INT 112
17843: PPUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: PUSH
17862: LD_OWVAR 67
17866: ARRAY
17867: PPUSH
17868: LD_INT 49
17870: PUSH
17871: LD_INT 49
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 3
17883: PPUSH
17884: LD_INT 24
17886: PPUSH
17887: CALL 14348 0 7
// end ;
17891: END
// every 0 0$1 trigger arabianMines do var i ;
17892: LD_EXP 44
17896: IFFALSE 18017
17898: GO 17900
17900: DISABLE
17901: LD_INT 0
17903: PPUSH
// begin enable ;
17904: ENABLE
// for i in arabianMines do
17905: LD_ADDR_VAR 0 1
17909: PUSH
17910: LD_EXP 44
17914: PUSH
17915: FOR_IN
17916: IFFALSE 18015
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17918: LD_INT 22
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 92
17930: PUSH
17931: LD_VAR 0 1
17935: PUSH
17936: LD_INT 1
17938: ARRAY
17939: PUSH
17940: LD_VAR 0 1
17944: PUSH
17945: LD_INT 2
17947: ARRAY
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PPUSH
17962: CALL_OW 69
17966: IFFALSE 18013
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17968: LD_VAR 0 1
17972: PUSH
17973: LD_INT 1
17975: ARRAY
17976: PPUSH
17977: LD_VAR 0 1
17981: PUSH
17982: LD_INT 2
17984: ARRAY
17985: PPUSH
17986: LD_INT 5
17988: PPUSH
17989: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17993: LD_ADDR_EXP 44
17997: PUSH
17998: LD_EXP 44
18002: PPUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 3
18012: ST_TO_ADDR
// end ; end ;
18013: GO 17915
18015: POP
18016: POP
// end ;
18017: PPOPN 1
18019: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 , 8 ] [ Difficulty ] do
18020: LD_EXP 28
18024: PUSH
18025: LD_INT 4
18027: EQUAL
18028: PUSH
18029: LD_EXP 29
18033: PUSH
18034: LD_INT 6
18036: PUSH
18037: LD_INT 8
18039: PUSH
18040: LD_INT 8
18042: PUSH
18043: LD_INT 8
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: LD_OWVAR 67
18056: ARRAY
18057: EQUAL
18058: AND
18059: IFFALSE 18077
18061: GO 18063
18063: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18064: LD_INT 10
18066: PPUSH
18067: LD_INT 47
18069: PPUSH
18070: LD_INT 82
18072: PPUSH
18073: CALL_OW 243
18077: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18078: LD_EXP 28
18082: PUSH
18083: LD_INT 4
18085: EQUAL
18086: IFFALSE 18108
18088: GO 18090
18090: DISABLE
// begin enable ;
18091: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18092: LD_ADDR_EXP 43
18096: PUSH
18097: LD_INT 1
18099: PPUSH
18100: LD_INT 2
18102: PPUSH
18103: CALL_OW 12
18107: ST_TO_ADDR
// end ; end_of_file
18108: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18109: LD_INT 3
18111: PPUSH
18112: CALL_OW 301
18116: IFFALSE 18305
18118: GO 18120
18120: DISABLE
// begin if sciCounter = 0 then
18121: LD_EXP 35
18125: PUSH
18126: LD_INT 0
18128: EQUAL
18129: IFFALSE 18157
// begin Say ( JMM , D7a-JMM-1 ) ;
18131: LD_EXP 1
18135: PPUSH
18136: LD_STRING D7a-JMM-1
18138: PPUSH
18139: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18143: LD_EXP 22
18147: PPUSH
18148: LD_STRING D7a-Pow-1
18150: PPUSH
18151: CALL_OW 94
// end else
18155: GO 18301
// if sciCounter < 6 then
18157: LD_EXP 35
18161: PUSH
18162: LD_INT 6
18164: LESS
18165: IFFALSE 18193
// begin Say ( JMM , D7b-JMM-1 ) ;
18167: LD_EXP 1
18171: PPUSH
18172: LD_STRING D7b-JMM-1
18174: PPUSH
18175: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18179: LD_EXP 22
18183: PPUSH
18184: LD_STRING D7b-Pow-1
18186: PPUSH
18187: CALL_OW 94
// end else
18191: GO 18301
// begin Say ( JMM , D7c-JMM-1 ) ;
18193: LD_EXP 1
18197: PPUSH
18198: LD_STRING D7c-JMM-1
18200: PPUSH
18201: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18205: LD_EXP 22
18209: PPUSH
18210: LD_STRING D7c-Pow-1
18212: PPUSH
18213: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18217: LD_EXP 1
18221: PPUSH
18222: LD_STRING D7d-JMM-1
18224: PPUSH
18225: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18229: LD_EXP 22
18233: PPUSH
18234: LD_STRING D7d-Pow-1
18236: PPUSH
18237: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18241: LD_EXP 1
18245: PPUSH
18246: LD_STRING D7d-JMM-2
18248: PPUSH
18249: CALL_OW 88
// if askSiberite = 1 then
18253: LD_EXP 32
18257: PUSH
18258: LD_INT 1
18260: EQUAL
18261: IFFALSE 18277
// Say ( JMM , D7d-JMM-2a ) else
18263: LD_EXP 1
18267: PPUSH
18268: LD_STRING D7d-JMM-2a
18270: PPUSH
18271: CALL_OW 88
18275: GO 18289
// SayRadio ( Powell , D7d-Pow-2 ) ;
18277: LD_EXP 22
18281: PPUSH
18282: LD_STRING D7d-Pow-2
18284: PPUSH
18285: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18289: LD_EXP 22
18293: PPUSH
18294: LD_STRING D7d-Pow-2a
18296: PPUSH
18297: CALL_OW 94
// end ; FinishMission ;
18301: CALL 18306 0 0
// end ;
18305: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18306: LD_INT 0
18308: PPUSH
18309: PPUSH
18310: PPUSH
18311: PPUSH
// m1 := false ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// m2 := false ;
18320: LD_ADDR_VAR 0 3
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// m3 := false ;
18328: LD_ADDR_VAR 0 4
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// if not westPathUsed then
18336: LD_EXP 49
18340: NOT
18341: IFFALSE 18350
// SetAchievement ( ACH_PATH ) ;
18343: LD_STRING ACH_PATH
18345: PPUSH
18346: CALL_OW 543
// if not rocketBuilded then
18350: LD_EXP 51
18354: NOT
18355: IFFALSE 18371
// begin wait ( 3 ) ;
18357: LD_INT 3
18359: PPUSH
18360: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18364: LD_STRING ACH_ROCKET
18366: PPUSH
18367: CALL_OW 543
// end ; if tick <= 40 40$00 then
18371: LD_OWVAR 1
18375: PUSH
18376: LD_INT 84000
18378: LESSEQUAL
18379: IFFALSE 18395
// begin wait ( 3 ) ;
18381: LD_INT 3
18383: PPUSH
18384: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18388: LD_STRING ACH_ASPEED_12
18390: PPUSH
18391: CALL_OW 543
// end ; if teleportExplored = 1 then
18395: LD_EXP 33
18399: PUSH
18400: LD_INT 1
18402: EQUAL
18403: IFFALSE 18425
// begin m1 := true ;
18405: LD_ADDR_VAR 0 2
18409: PUSH
18410: LD_INT 1
18412: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18413: LD_STRING Teleport
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL_OW 101
// end else
18423: GO 18436
// AddMedal ( Teleport , - 1 ) ;
18425: LD_STRING Teleport
18427: PPUSH
18428: LD_INT 1
18430: NEG
18431: PPUSH
18432: CALL_OW 101
// if sciCounter > 2 then
18436: LD_EXP 35
18440: PUSH
18441: LD_INT 2
18443: GREATER
18444: IFFALSE 18466
// begin m2 := true ;
18446: LD_ADDR_VAR 0 3
18450: PUSH
18451: LD_INT 1
18453: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18454: LD_STRING Materials
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 101
// end else
18464: GO 18477
// AddMedal ( Materials , - 1 ) ;
18466: LD_STRING Materials
18468: PPUSH
18469: LD_INT 1
18471: NEG
18472: PPUSH
18473: CALL_OW 101
// if sciCounter >= 6 then
18477: LD_EXP 35
18481: PUSH
18482: LD_INT 6
18484: GREATEREQUAL
18485: IFFALSE 18517
// begin m3 := true ;
18487: LD_ADDR_VAR 0 4
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18495: LD_STRING Scientists
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18505: LD_INT 1
18507: PPUSH
18508: LD_STRING 12_SciDed_1
18510: PPUSH
18511: CALL_OW 39
// end else
18515: GO 18538
// begin AddMedal ( Scientists , - 1 ) ;
18517: LD_STRING Scientists
18519: PPUSH
18520: LD_INT 1
18522: NEG
18523: PPUSH
18524: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18528: LD_INT 0
18530: PPUSH
18531: LD_STRING 12_SciDed_1
18533: PPUSH
18534: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18538: LD_EXP 31
18542: PPUSH
18543: LD_STRING 12_MainDepositFake_1
18545: PPUSH
18546: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18550: LD_VAR 0 2
18554: PUSH
18555: LD_VAR 0 3
18559: AND
18560: PUSH
18561: LD_VAR 0 4
18565: AND
18566: PUSH
18567: LD_OWVAR 67
18571: PUSH
18572: LD_INT 3
18574: GREATEREQUAL
18575: AND
18576: IFFALSE 18588
// SetAchievementEX ( ACH_AMER , 12 ) ;
18578: LD_STRING ACH_AMER
18580: PPUSH
18581: LD_INT 12
18583: PPUSH
18584: CALL_OW 564
// GiveMedals ( MAIN ) ;
18588: LD_STRING MAIN
18590: PPUSH
18591: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18595: LD_INT 22
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 25
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 25
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 25
18650: PUSH
18651: LD_INT 4
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 5
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 8
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: PPUSH
18692: CALL_OW 69
18696: PPUSH
18697: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18701: LD_EXP 1
18705: PPUSH
18706: LD_EXP 46
18710: PUSH
18711: LD_STRING JMM
18713: STR
18714: PPUSH
18715: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18719: LD_EXP 7
18723: PPUSH
18724: LD_EXP 46
18728: PUSH
18729: LD_STRING Brown
18731: STR
18732: PPUSH
18733: CALL 12300 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18737: LD_EXP 3
18741: PPUSH
18742: LD_EXP 46
18746: PUSH
18747: LD_STRING Donaldson
18749: STR
18750: PPUSH
18751: CALL 12300 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18755: LD_EXP 4
18759: PPUSH
18760: LD_EXP 46
18764: PUSH
18765: LD_STRING Bobby
18767: STR
18768: PPUSH
18769: CALL 12300 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18773: LD_EXP 5
18777: PPUSH
18778: LD_EXP 46
18782: PUSH
18783: LD_STRING Cyrus
18785: STR
18786: PPUSH
18787: CALL 12300 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18791: LD_EXP 2
18795: PPUSH
18796: LD_EXP 46
18800: PUSH
18801: LD_STRING Lisa
18803: STR
18804: PPUSH
18805: CALL 12300 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18809: LD_EXP 12
18813: PPUSH
18814: LD_EXP 46
18818: PUSH
18819: LD_STRING Frank
18821: STR
18822: PPUSH
18823: CALL 12300 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18827: LD_EXP 13
18831: PPUSH
18832: LD_EXP 46
18836: PUSH
18837: LD_STRING Kikuchi
18839: STR
18840: PPUSH
18841: CALL 12300 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18845: LD_EXP 9
18849: PPUSH
18850: LD_EXP 46
18854: PUSH
18855: LD_STRING Houten
18857: STR
18858: PPUSH
18859: CALL 12300 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18863: LD_EXP 11
18867: PPUSH
18868: LD_EXP 46
18872: PUSH
18873: LD_STRING Gary
18875: STR
18876: PPUSH
18877: CALL 12300 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18881: LD_EXP 10
18885: PPUSH
18886: LD_EXP 46
18890: PUSH
18891: LD_STRING Cornell
18893: STR
18894: PPUSH
18895: CALL 12300 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18899: LD_EXP 6
18903: PPUSH
18904: LD_EXP 46
18908: PUSH
18909: LD_STRING Denis
18911: STR
18912: PPUSH
18913: CALL 12300 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18917: LD_EXP 8
18921: PPUSH
18922: LD_EXP 46
18926: PUSH
18927: LD_STRING Gladstone
18929: STR
18930: PPUSH
18931: CALL 12300 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18935: LD_INT 22
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 23
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 21
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 25
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 25
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 25
19000: PUSH
19001: LD_INT 4
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 25
19010: PUSH
19011: LD_INT 5
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 25
19020: PUSH
19021: LD_INT 8
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: PUSH
19048: LD_EXP 1
19052: PUSH
19053: LD_EXP 7
19057: PUSH
19058: LD_EXP 3
19062: PUSH
19063: LD_EXP 4
19067: PUSH
19068: LD_EXP 5
19072: PUSH
19073: LD_EXP 2
19077: PUSH
19078: LD_EXP 12
19082: PUSH
19083: LD_EXP 8
19087: PUSH
19088: LD_EXP 13
19092: PUSH
19093: LD_EXP 6
19097: PUSH
19098: LD_EXP 9
19102: PUSH
19103: LD_EXP 11
19107: PUSH
19108: LD_EXP 10
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: DIFF
19128: PPUSH
19129: LD_STRING 12_other_survivors
19131: PPUSH
19132: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19136: LD_INT 22
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 23
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: LD_INT 25
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 25
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 25
19201: PUSH
19202: LD_INT 4
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 25
19211: PUSH
19212: LD_INT 5
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 25
19221: PUSH
19222: LD_INT 8
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: PPUSH
19244: CALL_OW 69
19248: PPUSH
19249: LD_STRING 12_kurt_squad
19251: PPUSH
19252: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19256: LD_EXP 14
19260: PPUSH
19261: LD_STRING 12_others
19263: PPUSH
19264: CALL_OW 38
// YouWin ;
19268: CALL_OW 103
// end ; end_of_file
19272: LD_VAR 0 1
19276: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19277: LD_EXP 1
19281: PPUSH
19282: CALL_OW 301
19286: IFFALSE 19298
19288: GO 19290
19290: DISABLE
// YouLost ( JMM ) ; end_of_file
19291: LD_STRING JMM
19293: PPUSH
19294: CALL_OW 104
19298: END
// every 0 0$01 do
19299: GO 19301
19301: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19302: LD_INT 1050
19304: PPUSH
19305: CALL_OW 67
// if cratesSpawned < 6 then
19309: LD_EXP 45
19313: PUSH
19314: LD_INT 6
19316: LESS
19317: IFFALSE 19354
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19319: LD_INT 3
19321: PPUSH
19322: LD_INT 5
19324: PPUSH
19325: CALL_OW 12
19329: PPUSH
19330: LD_INT 21
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19340: LD_ADDR_EXP 45
19344: PUSH
19345: LD_EXP 45
19349: PUSH
19350: LD_INT 1
19352: PLUS
19353: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19354: LD_EXP 45
19358: PUSH
19359: LD_INT 6
19361: GREATEREQUAL
19362: PUSH
19363: LD_EXP 45
19367: PUSH
19368: LD_INT 12
19370: LESS
19371: AND
19372: IFFALSE 19416
// begin wait ( 0 0$50 ) ;
19374: LD_INT 1750
19376: PPUSH
19377: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19381: LD_INT 3
19383: PPUSH
19384: LD_INT 5
19386: PPUSH
19387: CALL_OW 12
19391: PPUSH
19392: LD_INT 21
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19402: LD_ADDR_EXP 45
19406: PUSH
19407: LD_EXP 45
19411: PUSH
19412: LD_INT 1
19414: PLUS
19415: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19416: LD_EXP 45
19420: PUSH
19421: LD_INT 12
19423: GREATEREQUAL
19424: IFFALSE 19468
// begin wait ( 1 1$40 ) ;
19426: LD_INT 3500
19428: PPUSH
19429: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19433: LD_INT 3
19435: PPUSH
19436: LD_INT 5
19438: PPUSH
19439: CALL_OW 12
19443: PPUSH
19444: LD_INT 21
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19454: LD_ADDR_EXP 45
19458: PUSH
19459: LD_EXP 45
19463: PUSH
19464: LD_INT 1
19466: PLUS
19467: ST_TO_ADDR
// end ; until false ;
19468: LD_INT 0
19470: IFFALSE 19302
// end ; end_of_file
19472: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19473: LD_INT 0
19475: PPUSH
// ar_miner := 81 ;
19476: LD_ADDR_EXP 59
19480: PUSH
19481: LD_INT 81
19483: ST_TO_ADDR
// ar_crane := 88 ;
19484: LD_ADDR_EXP 58
19488: PUSH
19489: LD_INT 88
19491: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19492: LD_ADDR_EXP 53
19496: PUSH
19497: LD_INT 89
19499: ST_TO_ADDR
// us_hack := 99 ;
19500: LD_ADDR_EXP 54
19504: PUSH
19505: LD_INT 99
19507: ST_TO_ADDR
// us_artillery := 97 ;
19508: LD_ADDR_EXP 55
19512: PUSH
19513: LD_INT 97
19515: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19516: LD_ADDR_EXP 56
19520: PUSH
19521: LD_INT 91
19523: ST_TO_ADDR
// ar_mortar := 92 ;
19524: LD_ADDR_EXP 57
19528: PUSH
19529: LD_INT 92
19531: ST_TO_ADDR
// ru_radar := 98 ;
19532: LD_ADDR_EXP 52
19536: PUSH
19537: LD_INT 98
19539: ST_TO_ADDR
// tech_Artillery := 80 ;
19540: LD_ADDR_EXP 60
19544: PUSH
19545: LD_INT 80
19547: ST_TO_ADDR
// tech_RadMat := 81 ;
19548: LD_ADDR_EXP 61
19552: PUSH
19553: LD_INT 81
19555: ST_TO_ADDR
// tech_BasicTools := 82 ;
19556: LD_ADDR_EXP 62
19560: PUSH
19561: LD_INT 82
19563: ST_TO_ADDR
// tech_Cargo := 83 ;
19564: LD_ADDR_EXP 63
19568: PUSH
19569: LD_INT 83
19571: ST_TO_ADDR
// tech_Track := 84 ;
19572: LD_ADDR_EXP 64
19576: PUSH
19577: LD_INT 84
19579: ST_TO_ADDR
// tech_Crane := 85 ;
19580: LD_ADDR_EXP 65
19584: PUSH
19585: LD_INT 85
19587: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19588: LD_ADDR_EXP 66
19592: PUSH
19593: LD_INT 86
19595: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19596: LD_ADDR_EXP 67
19600: PUSH
19601: LD_INT 87
19603: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19604: LD_ADDR_EXP 68
19608: PUSH
19609: LD_INT 88
19611: ST_TO_ADDR
// class_mastodont := 31 ;
19612: LD_ADDR_EXP 69
19616: PUSH
19617: LD_INT 31
19619: ST_TO_ADDR
// class_horse := 21 ;
19620: LD_ADDR_EXP 70
19624: PUSH
19625: LD_INT 21
19627: ST_TO_ADDR
// end ;
19628: LD_VAR 0 1
19632: RET
// every 1 do
19633: GO 19635
19635: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19636: CALL 19473 0 0
19640: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19641: LD_INT 0
19643: PPUSH
// if p2 = 100 then
19644: LD_VAR 0 2
19648: PUSH
19649: LD_INT 100
19651: EQUAL
19652: IFFALSE 20601
// begin if not StreamModeActive then
19654: LD_EXP 71
19658: NOT
19659: IFFALSE 19669
// StreamModeActive := true ;
19661: LD_ADDR_EXP 71
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 0 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 0
19676: EQUAL
19677: IFFALSE 19683
// InitStreamMode ;
19679: CALL 20761 0 0
// if p3 = 1 then
19683: LD_VAR 0 3
19687: PUSH
19688: LD_INT 1
19690: EQUAL
19691: IFFALSE 19701
// sRocket := true ;
19693: LD_ADDR_EXP 76
19697: PUSH
19698: LD_INT 1
19700: ST_TO_ADDR
// if p3 = 2 then
19701: LD_VAR 0 3
19705: PUSH
19706: LD_INT 2
19708: EQUAL
19709: IFFALSE 19719
// sSpeed := true ;
19711: LD_ADDR_EXP 75
19715: PUSH
19716: LD_INT 1
19718: ST_TO_ADDR
// if p3 = 3 then
19719: LD_VAR 0 3
19723: PUSH
19724: LD_INT 3
19726: EQUAL
19727: IFFALSE 19737
// sEngine := true ;
19729: LD_ADDR_EXP 77
19733: PUSH
19734: LD_INT 1
19736: ST_TO_ADDR
// if p3 = 4 then
19737: LD_VAR 0 3
19741: PUSH
19742: LD_INT 4
19744: EQUAL
19745: IFFALSE 19755
// sSpec := true ;
19747: LD_ADDR_EXP 74
19751: PUSH
19752: LD_INT 1
19754: ST_TO_ADDR
// if p3 = 5 then
19755: LD_VAR 0 3
19759: PUSH
19760: LD_INT 5
19762: EQUAL
19763: IFFALSE 19773
// sLevel := true ;
19765: LD_ADDR_EXP 78
19769: PUSH
19770: LD_INT 1
19772: ST_TO_ADDR
// if p3 = 6 then
19773: LD_VAR 0 3
19777: PUSH
19778: LD_INT 6
19780: EQUAL
19781: IFFALSE 19791
// sArmoury := true ;
19783: LD_ADDR_EXP 79
19787: PUSH
19788: LD_INT 1
19790: ST_TO_ADDR
// if p3 = 7 then
19791: LD_VAR 0 3
19795: PUSH
19796: LD_INT 7
19798: EQUAL
19799: IFFALSE 19809
// sRadar := true ;
19801: LD_ADDR_EXP 80
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// if p3 = 8 then
19809: LD_VAR 0 3
19813: PUSH
19814: LD_INT 8
19816: EQUAL
19817: IFFALSE 19827
// sBunker := true ;
19819: LD_ADDR_EXP 81
19823: PUSH
19824: LD_INT 1
19826: ST_TO_ADDR
// if p3 = 9 then
19827: LD_VAR 0 3
19831: PUSH
19832: LD_INT 9
19834: EQUAL
19835: IFFALSE 19845
// sHack := true ;
19837: LD_ADDR_EXP 82
19841: PUSH
19842: LD_INT 1
19844: ST_TO_ADDR
// if p3 = 10 then
19845: LD_VAR 0 3
19849: PUSH
19850: LD_INT 10
19852: EQUAL
19853: IFFALSE 19863
// sFire := true ;
19855: LD_ADDR_EXP 83
19859: PUSH
19860: LD_INT 1
19862: ST_TO_ADDR
// if p3 = 11 then
19863: LD_VAR 0 3
19867: PUSH
19868: LD_INT 11
19870: EQUAL
19871: IFFALSE 19881
// sRefresh := true ;
19873: LD_ADDR_EXP 84
19877: PUSH
19878: LD_INT 1
19880: ST_TO_ADDR
// if p3 = 12 then
19881: LD_VAR 0 3
19885: PUSH
19886: LD_INT 12
19888: EQUAL
19889: IFFALSE 19899
// sExp := true ;
19891: LD_ADDR_EXP 85
19895: PUSH
19896: LD_INT 1
19898: ST_TO_ADDR
// if p3 = 13 then
19899: LD_VAR 0 3
19903: PUSH
19904: LD_INT 13
19906: EQUAL
19907: IFFALSE 19917
// sDepot := true ;
19909: LD_ADDR_EXP 86
19913: PUSH
19914: LD_INT 1
19916: ST_TO_ADDR
// if p3 = 14 then
19917: LD_VAR 0 3
19921: PUSH
19922: LD_INT 14
19924: EQUAL
19925: IFFALSE 19935
// sFlag := true ;
19927: LD_ADDR_EXP 87
19931: PUSH
19932: LD_INT 1
19934: ST_TO_ADDR
// if p3 = 15 then
19935: LD_VAR 0 3
19939: PUSH
19940: LD_INT 15
19942: EQUAL
19943: IFFALSE 19953
// sKamikadze := true ;
19945: LD_ADDR_EXP 95
19949: PUSH
19950: LD_INT 1
19952: ST_TO_ADDR
// if p3 = 16 then
19953: LD_VAR 0 3
19957: PUSH
19958: LD_INT 16
19960: EQUAL
19961: IFFALSE 19971
// sTroll := true ;
19963: LD_ADDR_EXP 96
19967: PUSH
19968: LD_INT 1
19970: ST_TO_ADDR
// if p3 = 17 then
19971: LD_VAR 0 3
19975: PUSH
19976: LD_INT 17
19978: EQUAL
19979: IFFALSE 19989
// sSlow := true ;
19981: LD_ADDR_EXP 97
19985: PUSH
19986: LD_INT 1
19988: ST_TO_ADDR
// if p3 = 18 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 18
19996: EQUAL
19997: IFFALSE 20007
// sLack := true ;
19999: LD_ADDR_EXP 98
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// if p3 = 19 then
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 19
20014: EQUAL
20015: IFFALSE 20025
// sTank := true ;
20017: LD_ADDR_EXP 100
20021: PUSH
20022: LD_INT 1
20024: ST_TO_ADDR
// if p3 = 20 then
20025: LD_VAR 0 3
20029: PUSH
20030: LD_INT 20
20032: EQUAL
20033: IFFALSE 20043
// sRemote := true ;
20035: LD_ADDR_EXP 101
20039: PUSH
20040: LD_INT 1
20042: ST_TO_ADDR
// if p3 = 21 then
20043: LD_VAR 0 3
20047: PUSH
20048: LD_INT 21
20050: EQUAL
20051: IFFALSE 20061
// sPowell := true ;
20053: LD_ADDR_EXP 102
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// if p3 = 22 then
20061: LD_VAR 0 3
20065: PUSH
20066: LD_INT 22
20068: EQUAL
20069: IFFALSE 20079
// sTeleport := true ;
20071: LD_ADDR_EXP 105
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// if p3 = 23 then
20079: LD_VAR 0 3
20083: PUSH
20084: LD_INT 23
20086: EQUAL
20087: IFFALSE 20097
// sOilTower := true ;
20089: LD_ADDR_EXP 107
20093: PUSH
20094: LD_INT 1
20096: ST_TO_ADDR
// if p3 = 24 then
20097: LD_VAR 0 3
20101: PUSH
20102: LD_INT 24
20104: EQUAL
20105: IFFALSE 20115
// sShovel := true ;
20107: LD_ADDR_EXP 108
20111: PUSH
20112: LD_INT 1
20114: ST_TO_ADDR
// if p3 = 25 then
20115: LD_VAR 0 3
20119: PUSH
20120: LD_INT 25
20122: EQUAL
20123: IFFALSE 20133
// sSheik := true ;
20125: LD_ADDR_EXP 109
20129: PUSH
20130: LD_INT 1
20132: ST_TO_ADDR
// if p3 = 26 then
20133: LD_VAR 0 3
20137: PUSH
20138: LD_INT 26
20140: EQUAL
20141: IFFALSE 20151
// sEarthquake := true ;
20143: LD_ADDR_EXP 111
20147: PUSH
20148: LD_INT 1
20150: ST_TO_ADDR
// if p3 = 27 then
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 27
20158: EQUAL
20159: IFFALSE 20169
// sAI := true ;
20161: LD_ADDR_EXP 112
20165: PUSH
20166: LD_INT 1
20168: ST_TO_ADDR
// if p3 = 28 then
20169: LD_VAR 0 3
20173: PUSH
20174: LD_INT 28
20176: EQUAL
20177: IFFALSE 20187
// sCargo := true ;
20179: LD_ADDR_EXP 115
20183: PUSH
20184: LD_INT 1
20186: ST_TO_ADDR
// if p3 = 29 then
20187: LD_VAR 0 3
20191: PUSH
20192: LD_INT 29
20194: EQUAL
20195: IFFALSE 20205
// sDLaser := true ;
20197: LD_ADDR_EXP 116
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// if p3 = 30 then
20205: LD_VAR 0 3
20209: PUSH
20210: LD_INT 30
20212: EQUAL
20213: IFFALSE 20223
// sExchange := true ;
20215: LD_ADDR_EXP 117
20219: PUSH
20220: LD_INT 1
20222: ST_TO_ADDR
// if p3 = 31 then
20223: LD_VAR 0 3
20227: PUSH
20228: LD_INT 31
20230: EQUAL
20231: IFFALSE 20241
// sFac := true ;
20233: LD_ADDR_EXP 118
20237: PUSH
20238: LD_INT 1
20240: ST_TO_ADDR
// if p3 = 32 then
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 32
20248: EQUAL
20249: IFFALSE 20259
// sPower := true ;
20251: LD_ADDR_EXP 119
20255: PUSH
20256: LD_INT 1
20258: ST_TO_ADDR
// if p3 = 33 then
20259: LD_VAR 0 3
20263: PUSH
20264: LD_INT 33
20266: EQUAL
20267: IFFALSE 20277
// sRandom := true ;
20269: LD_ADDR_EXP 120
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if p3 = 34 then
20277: LD_VAR 0 3
20281: PUSH
20282: LD_INT 34
20284: EQUAL
20285: IFFALSE 20295
// sShield := true ;
20287: LD_ADDR_EXP 121
20291: PUSH
20292: LD_INT 1
20294: ST_TO_ADDR
// if p3 = 35 then
20295: LD_VAR 0 3
20299: PUSH
20300: LD_INT 35
20302: EQUAL
20303: IFFALSE 20313
// sTime := true ;
20305: LD_ADDR_EXP 122
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// if p3 = 36 then
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 36
20320: EQUAL
20321: IFFALSE 20331
// sTools := true ;
20323: LD_ADDR_EXP 123
20327: PUSH
20328: LD_INT 1
20330: ST_TO_ADDR
// if p3 = 101 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 101
20338: EQUAL
20339: IFFALSE 20349
// sSold := true ;
20341: LD_ADDR_EXP 88
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 102 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 102
20356: EQUAL
20357: IFFALSE 20367
// sDiff := true ;
20359: LD_ADDR_EXP 89
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 103 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 103
20374: EQUAL
20375: IFFALSE 20385
// sFog := true ;
20377: LD_ADDR_EXP 92
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 104 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 104
20392: EQUAL
20393: IFFALSE 20403
// sReset := true ;
20395: LD_ADDR_EXP 93
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 105 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 105
20410: EQUAL
20411: IFFALSE 20421
// sSun := true ;
20413: LD_ADDR_EXP 94
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 106 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 106
20428: EQUAL
20429: IFFALSE 20439
// sTiger := true ;
20431: LD_ADDR_EXP 90
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 107 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 107
20446: EQUAL
20447: IFFALSE 20457
// sBomb := true ;
20449: LD_ADDR_EXP 91
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 108 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 108
20464: EQUAL
20465: IFFALSE 20475
// sWound := true ;
20467: LD_ADDR_EXP 99
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 109 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 109
20482: EQUAL
20483: IFFALSE 20493
// sBetray := true ;
20485: LD_ADDR_EXP 103
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 110 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 110
20500: EQUAL
20501: IFFALSE 20511
// sContamin := true ;
20503: LD_ADDR_EXP 104
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 111 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 111
20518: EQUAL
20519: IFFALSE 20529
// sOil := true ;
20521: LD_ADDR_EXP 106
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 112 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 112
20536: EQUAL
20537: IFFALSE 20547
// sStu := true ;
20539: LD_ADDR_EXP 110
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 113 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 113
20554: EQUAL
20555: IFFALSE 20565
// sBazooka := true ;
20557: LD_ADDR_EXP 113
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 114 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 114
20572: EQUAL
20573: IFFALSE 20583
// sMortar := true ;
20575: LD_ADDR_EXP 114
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 115 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 115
20590: EQUAL
20591: IFFALSE 20601
// sRanger := true ;
20593: LD_ADDR_EXP 124
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// end ; if p2 = 101 then
20601: LD_VAR 0 2
20605: PUSH
20606: LD_INT 101
20608: EQUAL
20609: IFFALSE 20737
// begin case p3 of 1 :
20611: LD_VAR 0 3
20615: PUSH
20616: LD_INT 1
20618: DOUBLE
20619: EQUAL
20620: IFTRUE 20624
20622: GO 20631
20624: POP
// hHackUnlimitedResources ; 2 :
20625: CALL 31774 0 0
20629: GO 20737
20631: LD_INT 2
20633: DOUBLE
20634: EQUAL
20635: IFTRUE 20639
20637: GO 20646
20639: POP
// hHackSetLevel10 ; 3 :
20640: CALL 31907 0 0
20644: GO 20737
20646: LD_INT 3
20648: DOUBLE
20649: EQUAL
20650: IFTRUE 20654
20652: GO 20661
20654: POP
// hHackSetLevel10YourUnits ; 4 :
20655: CALL 31992 0 0
20659: GO 20737
20661: LD_INT 4
20663: DOUBLE
20664: EQUAL
20665: IFTRUE 20669
20667: GO 20676
20669: POP
// hHackInvincible ; 5 :
20670: CALL 32440 0 0
20674: GO 20737
20676: LD_INT 5
20678: DOUBLE
20679: EQUAL
20680: IFTRUE 20684
20682: GO 20691
20684: POP
// hHackInvisible ; 6 :
20685: CALL 32551 0 0
20689: GO 20737
20691: LD_INT 6
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20706
20699: POP
// hHackChangeYourSide ; 7 :
20700: CALL 32608 0 0
20704: GO 20737
20706: LD_INT 7
20708: DOUBLE
20709: EQUAL
20710: IFTRUE 20714
20712: GO 20721
20714: POP
// hHackChangeUnitSide ; 8 :
20715: CALL 32650 0 0
20719: GO 20737
20721: LD_INT 8
20723: DOUBLE
20724: EQUAL
20725: IFTRUE 20729
20727: GO 20736
20729: POP
// hHackFog ; end ;
20730: CALL 32751 0 0
20734: GO 20737
20736: POP
// end ; end ;
20737: LD_VAR 0 7
20741: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20742: GO 20744
20744: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20745: LD_STRING initStreamRollete();
20747: PPUSH
20748: CALL_OW 559
// InitStreamMode ;
20752: CALL 20761 0 0
// DefineStreamItems ( ) ;
20756: CALL 21201 0 0
// end ;
20760: END
// function InitStreamMode ; begin
20761: LD_INT 0
20763: PPUSH
// streamModeActive := false ;
20764: LD_ADDR_EXP 71
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// normalCounter := 36 ;
20772: LD_ADDR_EXP 72
20776: PUSH
20777: LD_INT 36
20779: ST_TO_ADDR
// hardcoreCounter := 16 ;
20780: LD_ADDR_EXP 73
20784: PUSH
20785: LD_INT 16
20787: ST_TO_ADDR
// sRocket := false ;
20788: LD_ADDR_EXP 76
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sSpeed := false ;
20796: LD_ADDR_EXP 75
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sEngine := false ;
20804: LD_ADDR_EXP 77
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sSpec := false ;
20812: LD_ADDR_EXP 74
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sLevel := false ;
20820: LD_ADDR_EXP 78
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sArmoury := false ;
20828: LD_ADDR_EXP 79
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sRadar := false ;
20836: LD_ADDR_EXP 80
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sBunker := false ;
20844: LD_ADDR_EXP 81
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sHack := false ;
20852: LD_ADDR_EXP 82
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sFire := false ;
20860: LD_ADDR_EXP 83
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sRefresh := false ;
20868: LD_ADDR_EXP 84
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sExp := false ;
20876: LD_ADDR_EXP 85
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sDepot := false ;
20884: LD_ADDR_EXP 86
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sFlag := false ;
20892: LD_ADDR_EXP 87
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sKamikadze := false ;
20900: LD_ADDR_EXP 95
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sTroll := false ;
20908: LD_ADDR_EXP 96
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sSlow := false ;
20916: LD_ADDR_EXP 97
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sLack := false ;
20924: LD_ADDR_EXP 98
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sTank := false ;
20932: LD_ADDR_EXP 100
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sRemote := false ;
20940: LD_ADDR_EXP 101
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sPowell := false ;
20948: LD_ADDR_EXP 102
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTeleport := false ;
20956: LD_ADDR_EXP 105
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sOilTower := false ;
20964: LD_ADDR_EXP 107
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sShovel := false ;
20972: LD_ADDR_EXP 108
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sSheik := false ;
20980: LD_ADDR_EXP 109
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sEarthquake := false ;
20988: LD_ADDR_EXP 111
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sAI := false ;
20996: LD_ADDR_EXP 112
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sCargo := false ;
21004: LD_ADDR_EXP 115
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sDLaser := false ;
21012: LD_ADDR_EXP 116
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sExchange := false ;
21020: LD_ADDR_EXP 117
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sFac := false ;
21028: LD_ADDR_EXP 118
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sPower := false ;
21036: LD_ADDR_EXP 119
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sRandom := false ;
21044: LD_ADDR_EXP 120
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sShield := false ;
21052: LD_ADDR_EXP 121
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sTime := false ;
21060: LD_ADDR_EXP 122
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sTools := false ;
21068: LD_ADDR_EXP 123
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sSold := false ;
21076: LD_ADDR_EXP 88
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sDiff := false ;
21084: LD_ADDR_EXP 89
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sFog := false ;
21092: LD_ADDR_EXP 92
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// sReset := false ;
21100: LD_ADDR_EXP 93
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// sSun := false ;
21108: LD_ADDR_EXP 94
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// sTiger := false ;
21116: LD_ADDR_EXP 90
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
// sBomb := false ;
21124: LD_ADDR_EXP 91
21128: PUSH
21129: LD_INT 0
21131: ST_TO_ADDR
// sWound := false ;
21132: LD_ADDR_EXP 99
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// sBetray := false ;
21140: LD_ADDR_EXP 103
21144: PUSH
21145: LD_INT 0
21147: ST_TO_ADDR
// sContamin := false ;
21148: LD_ADDR_EXP 104
21152: PUSH
21153: LD_INT 0
21155: ST_TO_ADDR
// sOil := false ;
21156: LD_ADDR_EXP 106
21160: PUSH
21161: LD_INT 0
21163: ST_TO_ADDR
// sStu := false ;
21164: LD_ADDR_EXP 110
21168: PUSH
21169: LD_INT 0
21171: ST_TO_ADDR
// sBazooka := false ;
21172: LD_ADDR_EXP 113
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
// sMortar := false ;
21180: LD_ADDR_EXP 114
21184: PUSH
21185: LD_INT 0
21187: ST_TO_ADDR
// sRanger := false ;
21188: LD_ADDR_EXP 124
21192: PUSH
21193: LD_INT 0
21195: ST_TO_ADDR
// end ;
21196: LD_VAR 0 1
21200: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21201: LD_INT 0
21203: PPUSH
21204: PPUSH
21205: PPUSH
21206: PPUSH
21207: PPUSH
// result := [ ] ;
21208: LD_ADDR_VAR 0 1
21212: PUSH
21213: EMPTY
21214: ST_TO_ADDR
// if campaign_id = 1 then
21215: LD_OWVAR 69
21219: PUSH
21220: LD_INT 1
21222: EQUAL
21223: IFFALSE 24161
// begin case mission_number of 1 :
21225: LD_OWVAR 70
21229: PUSH
21230: LD_INT 1
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21302
21238: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 4
21249: PUSH
21250: LD_INT 11
21252: PUSH
21253: LD_INT 12
21255: PUSH
21256: LD_INT 15
21258: PUSH
21259: LD_INT 16
21261: PUSH
21262: LD_INT 22
21264: PUSH
21265: LD_INT 23
21267: PUSH
21268: LD_INT 26
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 101
21284: PUSH
21285: LD_INT 102
21287: PUSH
21288: LD_INT 106
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: ST_TO_ADDR
21300: GO 24159
21302: LD_INT 2
21304: DOUBLE
21305: EQUAL
21306: IFTRUE 21310
21308: GO 21382
21310: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21311: LD_ADDR_VAR 0 1
21315: PUSH
21316: LD_INT 2
21318: PUSH
21319: LD_INT 4
21321: PUSH
21322: LD_INT 11
21324: PUSH
21325: LD_INT 12
21327: PUSH
21328: LD_INT 15
21330: PUSH
21331: LD_INT 16
21333: PUSH
21334: LD_INT 22
21336: PUSH
21337: LD_INT 23
21339: PUSH
21340: LD_INT 26
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 101
21356: PUSH
21357: LD_INT 102
21359: PUSH
21360: LD_INT 105
21362: PUSH
21363: LD_INT 106
21365: PUSH
21366: LD_INT 108
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: ST_TO_ADDR
21380: GO 24159
21382: LD_INT 3
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21466
21390: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21391: LD_ADDR_VAR 0 1
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: LD_INT 4
21401: PUSH
21402: LD_INT 5
21404: PUSH
21405: LD_INT 11
21407: PUSH
21408: LD_INT 12
21410: PUSH
21411: LD_INT 15
21413: PUSH
21414: LD_INT 16
21416: PUSH
21417: LD_INT 22
21419: PUSH
21420: LD_INT 26
21422: PUSH
21423: LD_INT 36
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 101
21440: PUSH
21441: LD_INT 102
21443: PUSH
21444: LD_INT 105
21446: PUSH
21447: LD_INT 106
21449: PUSH
21450: LD_INT 108
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: ST_TO_ADDR
21464: GO 24159
21466: LD_INT 4
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21558
21474: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21475: LD_ADDR_VAR 0 1
21479: PUSH
21480: LD_INT 2
21482: PUSH
21483: LD_INT 4
21485: PUSH
21486: LD_INT 5
21488: PUSH
21489: LD_INT 8
21491: PUSH
21492: LD_INT 11
21494: PUSH
21495: LD_INT 12
21497: PUSH
21498: LD_INT 15
21500: PUSH
21501: LD_INT 16
21503: PUSH
21504: LD_INT 22
21506: PUSH
21507: LD_INT 23
21509: PUSH
21510: LD_INT 26
21512: PUSH
21513: LD_INT 36
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 101
21532: PUSH
21533: LD_INT 102
21535: PUSH
21536: LD_INT 105
21538: PUSH
21539: LD_INT 106
21541: PUSH
21542: LD_INT 108
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: ST_TO_ADDR
21556: GO 24159
21558: LD_INT 5
21560: DOUBLE
21561: EQUAL
21562: IFTRUE 21566
21564: GO 21666
21566: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21567: LD_ADDR_VAR 0 1
21571: PUSH
21572: LD_INT 2
21574: PUSH
21575: LD_INT 4
21577: PUSH
21578: LD_INT 5
21580: PUSH
21581: LD_INT 6
21583: PUSH
21584: LD_INT 8
21586: PUSH
21587: LD_INT 11
21589: PUSH
21590: LD_INT 12
21592: PUSH
21593: LD_INT 15
21595: PUSH
21596: LD_INT 16
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_INT 23
21604: PUSH
21605: LD_INT 25
21607: PUSH
21608: LD_INT 26
21610: PUSH
21611: LD_INT 36
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 101
21632: PUSH
21633: LD_INT 102
21635: PUSH
21636: LD_INT 105
21638: PUSH
21639: LD_INT 106
21641: PUSH
21642: LD_INT 108
21644: PUSH
21645: LD_INT 109
21647: PUSH
21648: LD_INT 112
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: ST_TO_ADDR
21664: GO 24159
21666: LD_INT 6
21668: DOUBLE
21669: EQUAL
21670: IFTRUE 21674
21672: GO 21794
21674: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21675: LD_ADDR_VAR 0 1
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: LD_INT 4
21685: PUSH
21686: LD_INT 5
21688: PUSH
21689: LD_INT 6
21691: PUSH
21692: LD_INT 8
21694: PUSH
21695: LD_INT 11
21697: PUSH
21698: LD_INT 12
21700: PUSH
21701: LD_INT 15
21703: PUSH
21704: LD_INT 16
21706: PUSH
21707: LD_INT 20
21709: PUSH
21710: LD_INT 21
21712: PUSH
21713: LD_INT 22
21715: PUSH
21716: LD_INT 23
21718: PUSH
21719: LD_INT 25
21721: PUSH
21722: LD_INT 26
21724: PUSH
21725: LD_INT 30
21727: PUSH
21728: LD_INT 31
21730: PUSH
21731: LD_INT 32
21733: PUSH
21734: LD_INT 36
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 101
21760: PUSH
21761: LD_INT 102
21763: PUSH
21764: LD_INT 105
21766: PUSH
21767: LD_INT 106
21769: PUSH
21770: LD_INT 108
21772: PUSH
21773: LD_INT 109
21775: PUSH
21776: LD_INT 112
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: ST_TO_ADDR
21792: GO 24159
21794: LD_INT 7
21796: DOUBLE
21797: EQUAL
21798: IFTRUE 21802
21800: GO 21902
21802: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21803: LD_ADDR_VAR 0 1
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: LD_INT 4
21813: PUSH
21814: LD_INT 5
21816: PUSH
21817: LD_INT 7
21819: PUSH
21820: LD_INT 11
21822: PUSH
21823: LD_INT 12
21825: PUSH
21826: LD_INT 15
21828: PUSH
21829: LD_INT 16
21831: PUSH
21832: LD_INT 20
21834: PUSH
21835: LD_INT 21
21837: PUSH
21838: LD_INT 22
21840: PUSH
21841: LD_INT 23
21843: PUSH
21844: LD_INT 25
21846: PUSH
21847: LD_INT 26
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 101
21868: PUSH
21869: LD_INT 102
21871: PUSH
21872: LD_INT 103
21874: PUSH
21875: LD_INT 105
21877: PUSH
21878: LD_INT 106
21880: PUSH
21881: LD_INT 108
21883: PUSH
21884: LD_INT 112
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: ST_TO_ADDR
21900: GO 24159
21902: LD_INT 8
21904: DOUBLE
21905: EQUAL
21906: IFTRUE 21910
21908: GO 22038
21910: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21911: LD_ADDR_VAR 0 1
21915: PUSH
21916: LD_INT 2
21918: PUSH
21919: LD_INT 4
21921: PUSH
21922: LD_INT 5
21924: PUSH
21925: LD_INT 6
21927: PUSH
21928: LD_INT 7
21930: PUSH
21931: LD_INT 8
21933: PUSH
21934: LD_INT 11
21936: PUSH
21937: LD_INT 12
21939: PUSH
21940: LD_INT 15
21942: PUSH
21943: LD_INT 16
21945: PUSH
21946: LD_INT 20
21948: PUSH
21949: LD_INT 21
21951: PUSH
21952: LD_INT 22
21954: PUSH
21955: LD_INT 23
21957: PUSH
21958: LD_INT 25
21960: PUSH
21961: LD_INT 26
21963: PUSH
21964: LD_INT 30
21966: PUSH
21967: LD_INT 31
21969: PUSH
21970: LD_INT 32
21972: PUSH
21973: LD_INT 36
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 101
22000: PUSH
22001: LD_INT 102
22003: PUSH
22004: LD_INT 103
22006: PUSH
22007: LD_INT 105
22009: PUSH
22010: LD_INT 106
22012: PUSH
22013: LD_INT 108
22015: PUSH
22016: LD_INT 109
22018: PUSH
22019: LD_INT 112
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: ST_TO_ADDR
22036: GO 24159
22038: LD_INT 9
22040: DOUBLE
22041: EQUAL
22042: IFTRUE 22046
22044: GO 22182
22046: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22047: LD_ADDR_VAR 0 1
22051: PUSH
22052: LD_INT 2
22054: PUSH
22055: LD_INT 4
22057: PUSH
22058: LD_INT 5
22060: PUSH
22061: LD_INT 6
22063: PUSH
22064: LD_INT 7
22066: PUSH
22067: LD_INT 8
22069: PUSH
22070: LD_INT 11
22072: PUSH
22073: LD_INT 12
22075: PUSH
22076: LD_INT 15
22078: PUSH
22079: LD_INT 16
22081: PUSH
22082: LD_INT 20
22084: PUSH
22085: LD_INT 21
22087: PUSH
22088: LD_INT 22
22090: PUSH
22091: LD_INT 23
22093: PUSH
22094: LD_INT 25
22096: PUSH
22097: LD_INT 26
22099: PUSH
22100: LD_INT 28
22102: PUSH
22103: LD_INT 30
22105: PUSH
22106: LD_INT 31
22108: PUSH
22109: LD_INT 32
22111: PUSH
22112: LD_INT 36
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 101
22140: PUSH
22141: LD_INT 102
22143: PUSH
22144: LD_INT 103
22146: PUSH
22147: LD_INT 105
22149: PUSH
22150: LD_INT 106
22152: PUSH
22153: LD_INT 108
22155: PUSH
22156: LD_INT 109
22158: PUSH
22159: LD_INT 112
22161: PUSH
22162: LD_INT 114
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: ST_TO_ADDR
22180: GO 24159
22182: LD_INT 10
22184: DOUBLE
22185: EQUAL
22186: IFTRUE 22190
22188: GO 22374
22190: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22191: LD_ADDR_VAR 0 1
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: LD_INT 4
22201: PUSH
22202: LD_INT 5
22204: PUSH
22205: LD_INT 6
22207: PUSH
22208: LD_INT 7
22210: PUSH
22211: LD_INT 8
22213: PUSH
22214: LD_INT 9
22216: PUSH
22217: LD_INT 10
22219: PUSH
22220: LD_INT 11
22222: PUSH
22223: LD_INT 12
22225: PUSH
22226: LD_INT 13
22228: PUSH
22229: LD_INT 14
22231: PUSH
22232: LD_INT 15
22234: PUSH
22235: LD_INT 16
22237: PUSH
22238: LD_INT 17
22240: PUSH
22241: LD_INT 18
22243: PUSH
22244: LD_INT 19
22246: PUSH
22247: LD_INT 20
22249: PUSH
22250: LD_INT 21
22252: PUSH
22253: LD_INT 22
22255: PUSH
22256: LD_INT 23
22258: PUSH
22259: LD_INT 24
22261: PUSH
22262: LD_INT 25
22264: PUSH
22265: LD_INT 26
22267: PUSH
22268: LD_INT 28
22270: PUSH
22271: LD_INT 30
22273: PUSH
22274: LD_INT 31
22276: PUSH
22277: LD_INT 32
22279: PUSH
22280: LD_INT 36
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 101
22316: PUSH
22317: LD_INT 102
22319: PUSH
22320: LD_INT 103
22322: PUSH
22323: LD_INT 104
22325: PUSH
22326: LD_INT 105
22328: PUSH
22329: LD_INT 106
22331: PUSH
22332: LD_INT 107
22334: PUSH
22335: LD_INT 108
22337: PUSH
22338: LD_INT 109
22340: PUSH
22341: LD_INT 110
22343: PUSH
22344: LD_INT 111
22346: PUSH
22347: LD_INT 112
22349: PUSH
22350: LD_INT 114
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: ST_TO_ADDR
22372: GO 24159
22374: LD_INT 11
22376: DOUBLE
22377: EQUAL
22378: IFTRUE 22382
22380: GO 22574
22382: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22383: LD_ADDR_VAR 0 1
22387: PUSH
22388: LD_INT 2
22390: PUSH
22391: LD_INT 3
22393: PUSH
22394: LD_INT 4
22396: PUSH
22397: LD_INT 5
22399: PUSH
22400: LD_INT 6
22402: PUSH
22403: LD_INT 7
22405: PUSH
22406: LD_INT 8
22408: PUSH
22409: LD_INT 9
22411: PUSH
22412: LD_INT 10
22414: PUSH
22415: LD_INT 11
22417: PUSH
22418: LD_INT 12
22420: PUSH
22421: LD_INT 13
22423: PUSH
22424: LD_INT 14
22426: PUSH
22427: LD_INT 15
22429: PUSH
22430: LD_INT 16
22432: PUSH
22433: LD_INT 17
22435: PUSH
22436: LD_INT 18
22438: PUSH
22439: LD_INT 19
22441: PUSH
22442: LD_INT 20
22444: PUSH
22445: LD_INT 21
22447: PUSH
22448: LD_INT 22
22450: PUSH
22451: LD_INT 23
22453: PUSH
22454: LD_INT 24
22456: PUSH
22457: LD_INT 25
22459: PUSH
22460: LD_INT 26
22462: PUSH
22463: LD_INT 28
22465: PUSH
22466: LD_INT 30
22468: PUSH
22469: LD_INT 31
22471: PUSH
22472: LD_INT 32
22474: PUSH
22475: LD_INT 34
22477: PUSH
22478: LD_INT 36
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 101
22516: PUSH
22517: LD_INT 102
22519: PUSH
22520: LD_INT 103
22522: PUSH
22523: LD_INT 104
22525: PUSH
22526: LD_INT 105
22528: PUSH
22529: LD_INT 106
22531: PUSH
22532: LD_INT 107
22534: PUSH
22535: LD_INT 108
22537: PUSH
22538: LD_INT 109
22540: PUSH
22541: LD_INT 110
22543: PUSH
22544: LD_INT 111
22546: PUSH
22547: LD_INT 112
22549: PUSH
22550: LD_INT 114
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: ST_TO_ADDR
22572: GO 24159
22574: LD_INT 12
22576: DOUBLE
22577: EQUAL
22578: IFTRUE 22582
22580: GO 22790
22582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22583: LD_ADDR_VAR 0 1
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: LD_INT 3
22596: PUSH
22597: LD_INT 4
22599: PUSH
22600: LD_INT 5
22602: PUSH
22603: LD_INT 6
22605: PUSH
22606: LD_INT 7
22608: PUSH
22609: LD_INT 8
22611: PUSH
22612: LD_INT 9
22614: PUSH
22615: LD_INT 10
22617: PUSH
22618: LD_INT 11
22620: PUSH
22621: LD_INT 12
22623: PUSH
22624: LD_INT 13
22626: PUSH
22627: LD_INT 14
22629: PUSH
22630: LD_INT 15
22632: PUSH
22633: LD_INT 16
22635: PUSH
22636: LD_INT 17
22638: PUSH
22639: LD_INT 18
22641: PUSH
22642: LD_INT 19
22644: PUSH
22645: LD_INT 20
22647: PUSH
22648: LD_INT 21
22650: PUSH
22651: LD_INT 22
22653: PUSH
22654: LD_INT 23
22656: PUSH
22657: LD_INT 24
22659: PUSH
22660: LD_INT 25
22662: PUSH
22663: LD_INT 26
22665: PUSH
22666: LD_INT 27
22668: PUSH
22669: LD_INT 28
22671: PUSH
22672: LD_INT 30
22674: PUSH
22675: LD_INT 31
22677: PUSH
22678: LD_INT 32
22680: PUSH
22681: LD_INT 33
22683: PUSH
22684: LD_INT 34
22686: PUSH
22687: LD_INT 36
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 101
22728: PUSH
22729: LD_INT 102
22731: PUSH
22732: LD_INT 103
22734: PUSH
22735: LD_INT 104
22737: PUSH
22738: LD_INT 105
22740: PUSH
22741: LD_INT 106
22743: PUSH
22744: LD_INT 107
22746: PUSH
22747: LD_INT 108
22749: PUSH
22750: LD_INT 109
22752: PUSH
22753: LD_INT 110
22755: PUSH
22756: LD_INT 111
22758: PUSH
22759: LD_INT 112
22761: PUSH
22762: LD_INT 113
22764: PUSH
22765: LD_INT 114
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: ST_TO_ADDR
22788: GO 24159
22790: LD_INT 13
22792: DOUBLE
22793: EQUAL
22794: IFTRUE 22798
22796: GO 22994
22798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22799: LD_ADDR_VAR 0 1
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: LD_INT 3
22812: PUSH
22813: LD_INT 4
22815: PUSH
22816: LD_INT 5
22818: PUSH
22819: LD_INT 8
22821: PUSH
22822: LD_INT 9
22824: PUSH
22825: LD_INT 10
22827: PUSH
22828: LD_INT 11
22830: PUSH
22831: LD_INT 12
22833: PUSH
22834: LD_INT 14
22836: PUSH
22837: LD_INT 15
22839: PUSH
22840: LD_INT 16
22842: PUSH
22843: LD_INT 17
22845: PUSH
22846: LD_INT 18
22848: PUSH
22849: LD_INT 19
22851: PUSH
22852: LD_INT 20
22854: PUSH
22855: LD_INT 21
22857: PUSH
22858: LD_INT 22
22860: PUSH
22861: LD_INT 23
22863: PUSH
22864: LD_INT 24
22866: PUSH
22867: LD_INT 25
22869: PUSH
22870: LD_INT 26
22872: PUSH
22873: LD_INT 27
22875: PUSH
22876: LD_INT 28
22878: PUSH
22879: LD_INT 30
22881: PUSH
22882: LD_INT 31
22884: PUSH
22885: LD_INT 32
22887: PUSH
22888: LD_INT 33
22890: PUSH
22891: LD_INT 34
22893: PUSH
22894: LD_INT 36
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 101
22932: PUSH
22933: LD_INT 102
22935: PUSH
22936: LD_INT 103
22938: PUSH
22939: LD_INT 104
22941: PUSH
22942: LD_INT 105
22944: PUSH
22945: LD_INT 106
22947: PUSH
22948: LD_INT 107
22950: PUSH
22951: LD_INT 108
22953: PUSH
22954: LD_INT 109
22956: PUSH
22957: LD_INT 110
22959: PUSH
22960: LD_INT 111
22962: PUSH
22963: LD_INT 112
22965: PUSH
22966: LD_INT 113
22968: PUSH
22969: LD_INT 114
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: ST_TO_ADDR
22992: GO 24159
22994: LD_INT 14
22996: DOUBLE
22997: EQUAL
22998: IFTRUE 23002
23000: GO 23214
23002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23003: LD_ADDR_VAR 0 1
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: LD_INT 4
23019: PUSH
23020: LD_INT 5
23022: PUSH
23023: LD_INT 6
23025: PUSH
23026: LD_INT 7
23028: PUSH
23029: LD_INT 8
23031: PUSH
23032: LD_INT 9
23034: PUSH
23035: LD_INT 10
23037: PUSH
23038: LD_INT 11
23040: PUSH
23041: LD_INT 12
23043: PUSH
23044: LD_INT 13
23046: PUSH
23047: LD_INT 14
23049: PUSH
23050: LD_INT 15
23052: PUSH
23053: LD_INT 16
23055: PUSH
23056: LD_INT 17
23058: PUSH
23059: LD_INT 18
23061: PUSH
23062: LD_INT 19
23064: PUSH
23065: LD_INT 20
23067: PUSH
23068: LD_INT 21
23070: PUSH
23071: LD_INT 22
23073: PUSH
23074: LD_INT 23
23076: PUSH
23077: LD_INT 24
23079: PUSH
23080: LD_INT 25
23082: PUSH
23083: LD_INT 26
23085: PUSH
23086: LD_INT 27
23088: PUSH
23089: LD_INT 28
23091: PUSH
23092: LD_INT 29
23094: PUSH
23095: LD_INT 30
23097: PUSH
23098: LD_INT 31
23100: PUSH
23101: LD_INT 32
23103: PUSH
23104: LD_INT 33
23106: PUSH
23107: LD_INT 34
23109: PUSH
23110: LD_INT 36
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 101
23152: PUSH
23153: LD_INT 102
23155: PUSH
23156: LD_INT 103
23158: PUSH
23159: LD_INT 104
23161: PUSH
23162: LD_INT 105
23164: PUSH
23165: LD_INT 106
23167: PUSH
23168: LD_INT 107
23170: PUSH
23171: LD_INT 108
23173: PUSH
23174: LD_INT 109
23176: PUSH
23177: LD_INT 110
23179: PUSH
23180: LD_INT 111
23182: PUSH
23183: LD_INT 112
23185: PUSH
23186: LD_INT 113
23188: PUSH
23189: LD_INT 114
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: ST_TO_ADDR
23212: GO 24159
23214: LD_INT 15
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23434
23222: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23223: LD_ADDR_VAR 0 1
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 2
23233: PUSH
23234: LD_INT 3
23236: PUSH
23237: LD_INT 4
23239: PUSH
23240: LD_INT 5
23242: PUSH
23243: LD_INT 6
23245: PUSH
23246: LD_INT 7
23248: PUSH
23249: LD_INT 8
23251: PUSH
23252: LD_INT 9
23254: PUSH
23255: LD_INT 10
23257: PUSH
23258: LD_INT 11
23260: PUSH
23261: LD_INT 12
23263: PUSH
23264: LD_INT 13
23266: PUSH
23267: LD_INT 14
23269: PUSH
23270: LD_INT 15
23272: PUSH
23273: LD_INT 16
23275: PUSH
23276: LD_INT 17
23278: PUSH
23279: LD_INT 18
23281: PUSH
23282: LD_INT 19
23284: PUSH
23285: LD_INT 20
23287: PUSH
23288: LD_INT 21
23290: PUSH
23291: LD_INT 22
23293: PUSH
23294: LD_INT 23
23296: PUSH
23297: LD_INT 24
23299: PUSH
23300: LD_INT 25
23302: PUSH
23303: LD_INT 26
23305: PUSH
23306: LD_INT 27
23308: PUSH
23309: LD_INT 28
23311: PUSH
23312: LD_INT 29
23314: PUSH
23315: LD_INT 30
23317: PUSH
23318: LD_INT 31
23320: PUSH
23321: LD_INT 32
23323: PUSH
23324: LD_INT 33
23326: PUSH
23327: LD_INT 34
23329: PUSH
23330: LD_INT 36
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 101
23372: PUSH
23373: LD_INT 102
23375: PUSH
23376: LD_INT 103
23378: PUSH
23379: LD_INT 104
23381: PUSH
23382: LD_INT 105
23384: PUSH
23385: LD_INT 106
23387: PUSH
23388: LD_INT 107
23390: PUSH
23391: LD_INT 108
23393: PUSH
23394: LD_INT 109
23396: PUSH
23397: LD_INT 110
23399: PUSH
23400: LD_INT 111
23402: PUSH
23403: LD_INT 112
23405: PUSH
23406: LD_INT 113
23408: PUSH
23409: LD_INT 114
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: ST_TO_ADDR
23432: GO 24159
23434: LD_INT 16
23436: DOUBLE
23437: EQUAL
23438: IFTRUE 23442
23440: GO 23566
23442: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23443: LD_ADDR_VAR 0 1
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: LD_INT 4
23453: PUSH
23454: LD_INT 5
23456: PUSH
23457: LD_INT 7
23459: PUSH
23460: LD_INT 11
23462: PUSH
23463: LD_INT 12
23465: PUSH
23466: LD_INT 15
23468: PUSH
23469: LD_INT 16
23471: PUSH
23472: LD_INT 20
23474: PUSH
23475: LD_INT 21
23477: PUSH
23478: LD_INT 22
23480: PUSH
23481: LD_INT 23
23483: PUSH
23484: LD_INT 25
23486: PUSH
23487: LD_INT 26
23489: PUSH
23490: LD_INT 30
23492: PUSH
23493: LD_INT 31
23495: PUSH
23496: LD_INT 32
23498: PUSH
23499: LD_INT 33
23501: PUSH
23502: LD_INT 34
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 101
23528: PUSH
23529: LD_INT 102
23531: PUSH
23532: LD_INT 103
23534: PUSH
23535: LD_INT 106
23537: PUSH
23538: LD_INT 108
23540: PUSH
23541: LD_INT 112
23543: PUSH
23544: LD_INT 113
23546: PUSH
23547: LD_INT 114
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: ST_TO_ADDR
23564: GO 24159
23566: LD_INT 17
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23786
23574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23575: LD_ADDR_VAR 0 1
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: LD_INT 4
23591: PUSH
23592: LD_INT 5
23594: PUSH
23595: LD_INT 6
23597: PUSH
23598: LD_INT 7
23600: PUSH
23601: LD_INT 8
23603: PUSH
23604: LD_INT 9
23606: PUSH
23607: LD_INT 10
23609: PUSH
23610: LD_INT 11
23612: PUSH
23613: LD_INT 12
23615: PUSH
23616: LD_INT 13
23618: PUSH
23619: LD_INT 14
23621: PUSH
23622: LD_INT 15
23624: PUSH
23625: LD_INT 16
23627: PUSH
23628: LD_INT 17
23630: PUSH
23631: LD_INT 18
23633: PUSH
23634: LD_INT 19
23636: PUSH
23637: LD_INT 20
23639: PUSH
23640: LD_INT 21
23642: PUSH
23643: LD_INT 22
23645: PUSH
23646: LD_INT 23
23648: PUSH
23649: LD_INT 24
23651: PUSH
23652: LD_INT 25
23654: PUSH
23655: LD_INT 26
23657: PUSH
23658: LD_INT 27
23660: PUSH
23661: LD_INT 28
23663: PUSH
23664: LD_INT 29
23666: PUSH
23667: LD_INT 30
23669: PUSH
23670: LD_INT 31
23672: PUSH
23673: LD_INT 32
23675: PUSH
23676: LD_INT 33
23678: PUSH
23679: LD_INT 34
23681: PUSH
23682: LD_INT 36
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 101
23724: PUSH
23725: LD_INT 102
23727: PUSH
23728: LD_INT 103
23730: PUSH
23731: LD_INT 104
23733: PUSH
23734: LD_INT 105
23736: PUSH
23737: LD_INT 106
23739: PUSH
23740: LD_INT 107
23742: PUSH
23743: LD_INT 108
23745: PUSH
23746: LD_INT 109
23748: PUSH
23749: LD_INT 110
23751: PUSH
23752: LD_INT 111
23754: PUSH
23755: LD_INT 112
23757: PUSH
23758: LD_INT 113
23760: PUSH
23761: LD_INT 114
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: ST_TO_ADDR
23784: GO 24159
23786: LD_INT 18
23788: DOUBLE
23789: EQUAL
23790: IFTRUE 23794
23792: GO 23930
23794: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23795: LD_ADDR_VAR 0 1
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: LD_INT 4
23805: PUSH
23806: LD_INT 5
23808: PUSH
23809: LD_INT 7
23811: PUSH
23812: LD_INT 11
23814: PUSH
23815: LD_INT 12
23817: PUSH
23818: LD_INT 15
23820: PUSH
23821: LD_INT 16
23823: PUSH
23824: LD_INT 20
23826: PUSH
23827: LD_INT 21
23829: PUSH
23830: LD_INT 22
23832: PUSH
23833: LD_INT 23
23835: PUSH
23836: LD_INT 25
23838: PUSH
23839: LD_INT 26
23841: PUSH
23842: LD_INT 30
23844: PUSH
23845: LD_INT 31
23847: PUSH
23848: LD_INT 32
23850: PUSH
23851: LD_INT 33
23853: PUSH
23854: LD_INT 34
23856: PUSH
23857: LD_INT 35
23859: PUSH
23860: LD_INT 36
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 101
23888: PUSH
23889: LD_INT 102
23891: PUSH
23892: LD_INT 103
23894: PUSH
23895: LD_INT 106
23897: PUSH
23898: LD_INT 108
23900: PUSH
23901: LD_INT 112
23903: PUSH
23904: LD_INT 113
23906: PUSH
23907: LD_INT 114
23909: PUSH
23910: LD_INT 115
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: ST_TO_ADDR
23928: GO 24159
23930: LD_INT 19
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 24158
23938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23939: LD_ADDR_VAR 0 1
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: LD_INT 2
23949: PUSH
23950: LD_INT 3
23952: PUSH
23953: LD_INT 4
23955: PUSH
23956: LD_INT 5
23958: PUSH
23959: LD_INT 6
23961: PUSH
23962: LD_INT 7
23964: PUSH
23965: LD_INT 8
23967: PUSH
23968: LD_INT 9
23970: PUSH
23971: LD_INT 10
23973: PUSH
23974: LD_INT 11
23976: PUSH
23977: LD_INT 12
23979: PUSH
23980: LD_INT 13
23982: PUSH
23983: LD_INT 14
23985: PUSH
23986: LD_INT 15
23988: PUSH
23989: LD_INT 16
23991: PUSH
23992: LD_INT 17
23994: PUSH
23995: LD_INT 18
23997: PUSH
23998: LD_INT 19
24000: PUSH
24001: LD_INT 20
24003: PUSH
24004: LD_INT 21
24006: PUSH
24007: LD_INT 22
24009: PUSH
24010: LD_INT 23
24012: PUSH
24013: LD_INT 24
24015: PUSH
24016: LD_INT 25
24018: PUSH
24019: LD_INT 26
24021: PUSH
24022: LD_INT 27
24024: PUSH
24025: LD_INT 28
24027: PUSH
24028: LD_INT 29
24030: PUSH
24031: LD_INT 30
24033: PUSH
24034: LD_INT 31
24036: PUSH
24037: LD_INT 32
24039: PUSH
24040: LD_INT 33
24042: PUSH
24043: LD_INT 34
24045: PUSH
24046: LD_INT 35
24048: PUSH
24049: LD_INT 36
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 101
24092: PUSH
24093: LD_INT 102
24095: PUSH
24096: LD_INT 103
24098: PUSH
24099: LD_INT 104
24101: PUSH
24102: LD_INT 105
24104: PUSH
24105: LD_INT 106
24107: PUSH
24108: LD_INT 107
24110: PUSH
24111: LD_INT 108
24113: PUSH
24114: LD_INT 109
24116: PUSH
24117: LD_INT 110
24119: PUSH
24120: LD_INT 111
24122: PUSH
24123: LD_INT 112
24125: PUSH
24126: LD_INT 113
24128: PUSH
24129: LD_INT 114
24131: PUSH
24132: LD_INT 115
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: ST_TO_ADDR
24156: GO 24159
24158: POP
// end else
24159: GO 24378
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24161: LD_ADDR_VAR 0 1
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: LD_INT 4
24177: PUSH
24178: LD_INT 5
24180: PUSH
24181: LD_INT 6
24183: PUSH
24184: LD_INT 7
24186: PUSH
24187: LD_INT 8
24189: PUSH
24190: LD_INT 9
24192: PUSH
24193: LD_INT 10
24195: PUSH
24196: LD_INT 11
24198: PUSH
24199: LD_INT 12
24201: PUSH
24202: LD_INT 13
24204: PUSH
24205: LD_INT 14
24207: PUSH
24208: LD_INT 15
24210: PUSH
24211: LD_INT 16
24213: PUSH
24214: LD_INT 17
24216: PUSH
24217: LD_INT 18
24219: PUSH
24220: LD_INT 19
24222: PUSH
24223: LD_INT 20
24225: PUSH
24226: LD_INT 21
24228: PUSH
24229: LD_INT 22
24231: PUSH
24232: LD_INT 23
24234: PUSH
24235: LD_INT 24
24237: PUSH
24238: LD_INT 25
24240: PUSH
24241: LD_INT 26
24243: PUSH
24244: LD_INT 27
24246: PUSH
24247: LD_INT 28
24249: PUSH
24250: LD_INT 29
24252: PUSH
24253: LD_INT 30
24255: PUSH
24256: LD_INT 31
24258: PUSH
24259: LD_INT 32
24261: PUSH
24262: LD_INT 33
24264: PUSH
24265: LD_INT 34
24267: PUSH
24268: LD_INT 35
24270: PUSH
24271: LD_INT 36
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 101
24314: PUSH
24315: LD_INT 102
24317: PUSH
24318: LD_INT 103
24320: PUSH
24321: LD_INT 104
24323: PUSH
24324: LD_INT 105
24326: PUSH
24327: LD_INT 106
24329: PUSH
24330: LD_INT 107
24332: PUSH
24333: LD_INT 108
24335: PUSH
24336: LD_INT 109
24338: PUSH
24339: LD_INT 110
24341: PUSH
24342: LD_INT 111
24344: PUSH
24345: LD_INT 112
24347: PUSH
24348: LD_INT 113
24350: PUSH
24351: LD_INT 114
24353: PUSH
24354: LD_INT 115
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: ST_TO_ADDR
// if result then
24378: LD_VAR 0 1
24382: IFFALSE 24671
// begin normal :=  ;
24384: LD_ADDR_VAR 0 3
24388: PUSH
24389: LD_STRING 
24391: ST_TO_ADDR
// hardcore :=  ;
24392: LD_ADDR_VAR 0 4
24396: PUSH
24397: LD_STRING 
24399: ST_TO_ADDR
// for i = 1 to normalCounter do
24400: LD_ADDR_VAR 0 5
24404: PUSH
24405: DOUBLE
24406: LD_INT 1
24408: DEC
24409: ST_TO_ADDR
24410: LD_EXP 72
24414: PUSH
24415: FOR_TO
24416: IFFALSE 24517
// begin tmp := 0 ;
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_STRING 0
24425: ST_TO_ADDR
// if result [ 1 ] then
24426: LD_VAR 0 1
24430: PUSH
24431: LD_INT 1
24433: ARRAY
24434: IFFALSE 24499
// if result [ 1 ] [ 1 ] = i then
24436: LD_VAR 0 1
24440: PUSH
24441: LD_INT 1
24443: ARRAY
24444: PUSH
24445: LD_INT 1
24447: ARRAY
24448: PUSH
24449: LD_VAR 0 5
24453: EQUAL
24454: IFFALSE 24499
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24456: LD_ADDR_VAR 0 1
24460: PUSH
24461: LD_VAR 0 1
24465: PPUSH
24466: LD_INT 1
24468: PPUSH
24469: LD_VAR 0 1
24473: PUSH
24474: LD_INT 1
24476: ARRAY
24477: PPUSH
24478: LD_INT 1
24480: PPUSH
24481: CALL_OW 3
24485: PPUSH
24486: CALL_OW 1
24490: ST_TO_ADDR
// tmp := 1 ;
24491: LD_ADDR_VAR 0 2
24495: PUSH
24496: LD_STRING 1
24498: ST_TO_ADDR
// end ; normal := normal & tmp ;
24499: LD_ADDR_VAR 0 3
24503: PUSH
24504: LD_VAR 0 3
24508: PUSH
24509: LD_VAR 0 2
24513: STR
24514: ST_TO_ADDR
// end ;
24515: GO 24415
24517: POP
24518: POP
// for i = 1 to hardcoreCounter do
24519: LD_ADDR_VAR 0 5
24523: PUSH
24524: DOUBLE
24525: LD_INT 1
24527: DEC
24528: ST_TO_ADDR
24529: LD_EXP 73
24533: PUSH
24534: FOR_TO
24535: IFFALSE 24640
// begin tmp := 0 ;
24537: LD_ADDR_VAR 0 2
24541: PUSH
24542: LD_STRING 0
24544: ST_TO_ADDR
// if result [ 2 ] then
24545: LD_VAR 0 1
24549: PUSH
24550: LD_INT 2
24552: ARRAY
24553: IFFALSE 24622
// if result [ 2 ] [ 1 ] = 100 + i then
24555: LD_VAR 0 1
24559: PUSH
24560: LD_INT 2
24562: ARRAY
24563: PUSH
24564: LD_INT 1
24566: ARRAY
24567: PUSH
24568: LD_INT 100
24570: PUSH
24571: LD_VAR 0 5
24575: PLUS
24576: EQUAL
24577: IFFALSE 24622
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24579: LD_ADDR_VAR 0 1
24583: PUSH
24584: LD_VAR 0 1
24588: PPUSH
24589: LD_INT 2
24591: PPUSH
24592: LD_VAR 0 1
24596: PUSH
24597: LD_INT 2
24599: ARRAY
24600: PPUSH
24601: LD_INT 1
24603: PPUSH
24604: CALL_OW 3
24608: PPUSH
24609: CALL_OW 1
24613: ST_TO_ADDR
// tmp := 1 ;
24614: LD_ADDR_VAR 0 2
24618: PUSH
24619: LD_STRING 1
24621: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24622: LD_ADDR_VAR 0 4
24626: PUSH
24627: LD_VAR 0 4
24631: PUSH
24632: LD_VAR 0 2
24636: STR
24637: ST_TO_ADDR
// end ;
24638: GO 24534
24640: POP
24641: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24642: LD_STRING getStreamItemsFromMission("
24644: PUSH
24645: LD_VAR 0 3
24649: STR
24650: PUSH
24651: LD_STRING ","
24653: STR
24654: PUSH
24655: LD_VAR 0 4
24659: STR
24660: PUSH
24661: LD_STRING ")
24663: STR
24664: PPUSH
24665: CALL_OW 559
// end else
24669: GO 24678
// ToLua ( getStreamItemsFromMission("","") ) ;
24671: LD_STRING getStreamItemsFromMission("","")
24673: PPUSH
24674: CALL_OW 559
// end ;
24678: LD_VAR 0 1
24682: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24683: LD_EXP 71
24687: PUSH
24688: LD_EXP 76
24692: AND
24693: IFFALSE 24817
24695: GO 24697
24697: DISABLE
24698: LD_INT 0
24700: PPUSH
24701: PPUSH
// begin enable ;
24702: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24703: LD_ADDR_VAR 0 2
24707: PUSH
24708: LD_INT 22
24710: PUSH
24711: LD_OWVAR 2
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: PUSH
24723: LD_INT 34
24725: PUSH
24726: LD_INT 7
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 34
24735: PUSH
24736: LD_INT 45
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 34
24745: PUSH
24746: LD_INT 28
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 34
24755: PUSH
24756: LD_INT 47
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PPUSH
24774: CALL_OW 69
24778: ST_TO_ADDR
// if not tmp then
24779: LD_VAR 0 2
24783: NOT
24784: IFFALSE 24788
// exit ;
24786: GO 24817
// for i in tmp do
24788: LD_ADDR_VAR 0 1
24792: PUSH
24793: LD_VAR 0 2
24797: PUSH
24798: FOR_IN
24799: IFFALSE 24815
// begin SetLives ( i , 0 ) ;
24801: LD_VAR 0 1
24805: PPUSH
24806: LD_INT 0
24808: PPUSH
24809: CALL_OW 234
// end ;
24813: GO 24798
24815: POP
24816: POP
// end ;
24817: PPOPN 2
24819: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24820: LD_EXP 71
24824: PUSH
24825: LD_EXP 77
24829: AND
24830: IFFALSE 24914
24832: GO 24834
24834: DISABLE
24835: LD_INT 0
24837: PPUSH
24838: PPUSH
// begin enable ;
24839: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24840: LD_ADDR_VAR 0 2
24844: PUSH
24845: LD_INT 22
24847: PUSH
24848: LD_OWVAR 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 32
24859: PUSH
24860: LD_INT 3
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PPUSH
24871: CALL_OW 69
24875: ST_TO_ADDR
// if not tmp then
24876: LD_VAR 0 2
24880: NOT
24881: IFFALSE 24885
// exit ;
24883: GO 24914
// for i in tmp do
24885: LD_ADDR_VAR 0 1
24889: PUSH
24890: LD_VAR 0 2
24894: PUSH
24895: FOR_IN
24896: IFFALSE 24912
// begin SetLives ( i , 0 ) ;
24898: LD_VAR 0 1
24902: PPUSH
24903: LD_INT 0
24905: PPUSH
24906: CALL_OW 234
// end ;
24910: GO 24895
24912: POP
24913: POP
// end ;
24914: PPOPN 2
24916: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24917: LD_EXP 71
24921: PUSH
24922: LD_EXP 74
24926: AND
24927: IFFALSE 25020
24929: GO 24931
24931: DISABLE
24932: LD_INT 0
24934: PPUSH
// begin enable ;
24935: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24936: LD_ADDR_VAR 0 1
24940: PUSH
24941: LD_INT 22
24943: PUSH
24944: LD_OWVAR 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 25
24958: PUSH
24959: LD_INT 5
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 25
24968: PUSH
24969: LD_INT 9
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 25
24978: PUSH
24979: LD_INT 8
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 69
25000: PUSH
25001: FOR_IN
25002: IFFALSE 25018
// begin SetClass ( i , 1 ) ;
25004: LD_VAR 0 1
25008: PPUSH
25009: LD_INT 1
25011: PPUSH
25012: CALL_OW 336
// end ;
25016: GO 25001
25018: POP
25019: POP
// end ;
25020: PPOPN 1
25022: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25023: LD_EXP 71
25027: PUSH
25028: LD_EXP 75
25032: AND
25033: PUSH
25034: LD_OWVAR 65
25038: PUSH
25039: LD_INT 7
25041: LESS
25042: AND
25043: IFFALSE 25057
25045: GO 25047
25047: DISABLE
// begin enable ;
25048: ENABLE
// game_speed := 7 ;
25049: LD_ADDR_OWVAR 65
25053: PUSH
25054: LD_INT 7
25056: ST_TO_ADDR
// end ;
25057: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25058: LD_EXP 71
25062: PUSH
25063: LD_EXP 78
25067: AND
25068: IFFALSE 25270
25070: GO 25072
25072: DISABLE
25073: LD_INT 0
25075: PPUSH
25076: PPUSH
25077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25078: LD_ADDR_VAR 0 3
25082: PUSH
25083: LD_INT 81
25085: PUSH
25086: LD_OWVAR 2
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 21
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PPUSH
25109: CALL_OW 69
25113: ST_TO_ADDR
// if not tmp then
25114: LD_VAR 0 3
25118: NOT
25119: IFFALSE 25123
// exit ;
25121: GO 25270
// if tmp > 5 then
25123: LD_VAR 0 3
25127: PUSH
25128: LD_INT 5
25130: GREATER
25131: IFFALSE 25143
// k := 5 else
25133: LD_ADDR_VAR 0 2
25137: PUSH
25138: LD_INT 5
25140: ST_TO_ADDR
25141: GO 25153
// k := tmp ;
25143: LD_ADDR_VAR 0 2
25147: PUSH
25148: LD_VAR 0 3
25152: ST_TO_ADDR
// for i := 1 to k do
25153: LD_ADDR_VAR 0 1
25157: PUSH
25158: DOUBLE
25159: LD_INT 1
25161: DEC
25162: ST_TO_ADDR
25163: LD_VAR 0 2
25167: PUSH
25168: FOR_TO
25169: IFFALSE 25268
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25171: LD_VAR 0 3
25175: PUSH
25176: LD_VAR 0 1
25180: ARRAY
25181: PPUSH
25182: LD_VAR 0 1
25186: PUSH
25187: LD_INT 4
25189: MOD
25190: PUSH
25191: LD_INT 1
25193: PLUS
25194: PPUSH
25195: CALL_OW 259
25199: PUSH
25200: LD_INT 10
25202: LESS
25203: IFFALSE 25266
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25205: LD_VAR 0 3
25209: PUSH
25210: LD_VAR 0 1
25214: ARRAY
25215: PPUSH
25216: LD_VAR 0 1
25220: PUSH
25221: LD_INT 4
25223: MOD
25224: PUSH
25225: LD_INT 1
25227: PLUS
25228: PPUSH
25229: LD_VAR 0 3
25233: PUSH
25234: LD_VAR 0 1
25238: ARRAY
25239: PPUSH
25240: LD_VAR 0 1
25244: PUSH
25245: LD_INT 4
25247: MOD
25248: PUSH
25249: LD_INT 1
25251: PLUS
25252: PPUSH
25253: CALL_OW 259
25257: PUSH
25258: LD_INT 1
25260: PLUS
25261: PPUSH
25262: CALL_OW 237
25266: GO 25168
25268: POP
25269: POP
// end ;
25270: PPOPN 3
25272: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25273: LD_EXP 71
25277: PUSH
25278: LD_EXP 79
25282: AND
25283: IFFALSE 25303
25285: GO 25287
25287: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25288: LD_INT 4
25290: PPUSH
25291: LD_OWVAR 2
25295: PPUSH
25296: LD_INT 0
25298: PPUSH
25299: CALL_OW 324
25303: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25304: LD_EXP 71
25308: PUSH
25309: LD_EXP 108
25313: AND
25314: IFFALSE 25334
25316: GO 25318
25318: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25319: LD_INT 19
25321: PPUSH
25322: LD_OWVAR 2
25326: PPUSH
25327: LD_INT 0
25329: PPUSH
25330: CALL_OW 324
25334: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25335: LD_EXP 71
25339: PUSH
25340: LD_EXP 80
25344: AND
25345: IFFALSE 25447
25347: GO 25349
25349: DISABLE
25350: LD_INT 0
25352: PPUSH
25353: PPUSH
// begin enable ;
25354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25355: LD_ADDR_VAR 0 2
25359: PUSH
25360: LD_INT 22
25362: PUSH
25363: LD_OWVAR 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: LD_INT 34
25377: PUSH
25378: LD_INT 11
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 34
25387: PUSH
25388: LD_INT 30
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PPUSH
25404: CALL_OW 69
25408: ST_TO_ADDR
// if not tmp then
25409: LD_VAR 0 2
25413: NOT
25414: IFFALSE 25418
// exit ;
25416: GO 25447
// for i in tmp do
25418: LD_ADDR_VAR 0 1
25422: PUSH
25423: LD_VAR 0 2
25427: PUSH
25428: FOR_IN
25429: IFFALSE 25445
// begin SetLives ( i , 0 ) ;
25431: LD_VAR 0 1
25435: PPUSH
25436: LD_INT 0
25438: PPUSH
25439: CALL_OW 234
// end ;
25443: GO 25428
25445: POP
25446: POP
// end ;
25447: PPOPN 2
25449: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25450: LD_EXP 71
25454: PUSH
25455: LD_EXP 81
25459: AND
25460: IFFALSE 25480
25462: GO 25464
25464: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25465: LD_INT 32
25467: PPUSH
25468: LD_OWVAR 2
25472: PPUSH
25473: LD_INT 0
25475: PPUSH
25476: CALL_OW 324
25480: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25481: LD_EXP 71
25485: PUSH
25486: LD_EXP 82
25490: AND
25491: IFFALSE 25672
25493: GO 25495
25495: DISABLE
25496: LD_INT 0
25498: PPUSH
25499: PPUSH
25500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25501: LD_ADDR_VAR 0 2
25505: PUSH
25506: LD_INT 22
25508: PUSH
25509: LD_OWVAR 2
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 33
25520: PUSH
25521: LD_INT 3
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PPUSH
25532: CALL_OW 69
25536: ST_TO_ADDR
// if not tmp then
25537: LD_VAR 0 2
25541: NOT
25542: IFFALSE 25546
// exit ;
25544: GO 25672
// side := 0 ;
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_INT 0
25553: ST_TO_ADDR
// for i := 1 to 8 do
25554: LD_ADDR_VAR 0 1
25558: PUSH
25559: DOUBLE
25560: LD_INT 1
25562: DEC
25563: ST_TO_ADDR
25564: LD_INT 8
25566: PUSH
25567: FOR_TO
25568: IFFALSE 25616
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25570: LD_OWVAR 2
25574: PUSH
25575: LD_VAR 0 1
25579: NONEQUAL
25580: PUSH
25581: LD_OWVAR 2
25585: PPUSH
25586: LD_VAR 0 1
25590: PPUSH
25591: CALL_OW 81
25595: PUSH
25596: LD_INT 2
25598: EQUAL
25599: AND
25600: IFFALSE 25614
// begin side := i ;
25602: LD_ADDR_VAR 0 3
25606: PUSH
25607: LD_VAR 0 1
25611: ST_TO_ADDR
// break ;
25612: GO 25616
// end ;
25614: GO 25567
25616: POP
25617: POP
// if not side then
25618: LD_VAR 0 3
25622: NOT
25623: IFFALSE 25627
// exit ;
25625: GO 25672
// for i := 1 to tmp do
25627: LD_ADDR_VAR 0 1
25631: PUSH
25632: DOUBLE
25633: LD_INT 1
25635: DEC
25636: ST_TO_ADDR
25637: LD_VAR 0 2
25641: PUSH
25642: FOR_TO
25643: IFFALSE 25670
// if Prob ( 60 ) then
25645: LD_INT 60
25647: PPUSH
25648: CALL_OW 13
25652: IFFALSE 25668
// SetSide ( i , side ) ;
25654: LD_VAR 0 1
25658: PPUSH
25659: LD_VAR 0 3
25663: PPUSH
25664: CALL_OW 235
25668: GO 25642
25670: POP
25671: POP
// end ;
25672: PPOPN 3
25674: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25675: LD_EXP 71
25679: PUSH
25680: LD_EXP 84
25684: AND
25685: IFFALSE 25804
25687: GO 25689
25689: DISABLE
25690: LD_INT 0
25692: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25693: LD_ADDR_VAR 0 1
25697: PUSH
25698: LD_INT 22
25700: PUSH
25701: LD_OWVAR 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 21
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 3
25722: PUSH
25723: LD_INT 23
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 69
25746: PUSH
25747: FOR_IN
25748: IFFALSE 25802
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25750: LD_VAR 0 1
25754: PPUSH
25755: CALL_OW 257
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: LD_INT 4
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: IN
25778: IFFALSE 25800
// SetClass ( un , rand ( 1 , 4 ) ) ;
25780: LD_VAR 0 1
25784: PPUSH
25785: LD_INT 1
25787: PPUSH
25788: LD_INT 4
25790: PPUSH
25791: CALL_OW 12
25795: PPUSH
25796: CALL_OW 336
25800: GO 25747
25802: POP
25803: POP
// end ;
25804: PPOPN 1
25806: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25807: LD_EXP 71
25811: PUSH
25812: LD_EXP 83
25816: AND
25817: IFFALSE 25896
25819: GO 25821
25821: DISABLE
25822: LD_INT 0
25824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25825: LD_ADDR_VAR 0 1
25829: PUSH
25830: LD_INT 22
25832: PUSH
25833: LD_OWVAR 2
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 21
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PPUSH
25856: CALL_OW 69
25860: ST_TO_ADDR
// if not tmp then
25861: LD_VAR 0 1
25865: NOT
25866: IFFALSE 25870
// exit ;
25868: GO 25896
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25870: LD_VAR 0 1
25874: PUSH
25875: LD_INT 1
25877: PPUSH
25878: LD_VAR 0 1
25882: PPUSH
25883: CALL_OW 12
25887: ARRAY
25888: PPUSH
25889: LD_INT 100
25891: PPUSH
25892: CALL_OW 234
// end ;
25896: PPOPN 1
25898: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25899: LD_EXP 71
25903: PUSH
25904: LD_EXP 85
25908: AND
25909: IFFALSE 26007
25911: GO 25913
25913: DISABLE
25914: LD_INT 0
25916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25917: LD_ADDR_VAR 0 1
25921: PUSH
25922: LD_INT 22
25924: PUSH
25925: LD_OWVAR 2
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 21
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PPUSH
25948: CALL_OW 69
25952: ST_TO_ADDR
// if not tmp then
25953: LD_VAR 0 1
25957: NOT
25958: IFFALSE 25962
// exit ;
25960: GO 26007
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25962: LD_VAR 0 1
25966: PUSH
25967: LD_INT 1
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 12
25979: ARRAY
25980: PPUSH
25981: LD_INT 1
25983: PPUSH
25984: LD_INT 4
25986: PPUSH
25987: CALL_OW 12
25991: PPUSH
25992: LD_INT 3000
25994: PPUSH
25995: LD_INT 9000
25997: PPUSH
25998: CALL_OW 12
26002: PPUSH
26003: CALL_OW 492
// end ;
26007: PPOPN 1
26009: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26010: LD_EXP 71
26014: PUSH
26015: LD_EXP 86
26019: AND
26020: IFFALSE 26040
26022: GO 26024
26024: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26025: LD_INT 1
26027: PPUSH
26028: LD_OWVAR 2
26032: PPUSH
26033: LD_INT 0
26035: PPUSH
26036: CALL_OW 324
26040: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26041: LD_EXP 71
26045: PUSH
26046: LD_EXP 87
26050: AND
26051: IFFALSE 26134
26053: GO 26055
26055: DISABLE
26056: LD_INT 0
26058: PPUSH
26059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26060: LD_ADDR_VAR 0 2
26064: PUSH
26065: LD_INT 22
26067: PUSH
26068: LD_OWVAR 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 21
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PPUSH
26091: CALL_OW 69
26095: ST_TO_ADDR
// if not tmp then
26096: LD_VAR 0 2
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26134
// for i in tmp do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: LD_VAR 0 2
26114: PUSH
26115: FOR_IN
26116: IFFALSE 26132
// SetBLevel ( i , 10 ) ;
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_INT 10
26125: PPUSH
26126: CALL_OW 241
26130: GO 26115
26132: POP
26133: POP
// end ;
26134: PPOPN 2
26136: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26137: LD_EXP 71
26141: PUSH
26142: LD_EXP 88
26146: AND
26147: IFFALSE 26258
26149: GO 26151
26151: DISABLE
26152: LD_INT 0
26154: PPUSH
26155: PPUSH
26156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26157: LD_ADDR_VAR 0 3
26161: PUSH
26162: LD_INT 22
26164: PUSH
26165: LD_OWVAR 2
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 25
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PPUSH
26188: CALL_OW 69
26192: ST_TO_ADDR
// if not tmp then
26193: LD_VAR 0 3
26197: NOT
26198: IFFALSE 26202
// exit ;
26200: GO 26258
// un := tmp [ rand ( 1 , tmp ) ] ;
26202: LD_ADDR_VAR 0 2
26206: PUSH
26207: LD_VAR 0 3
26211: PUSH
26212: LD_INT 1
26214: PPUSH
26215: LD_VAR 0 3
26219: PPUSH
26220: CALL_OW 12
26224: ARRAY
26225: ST_TO_ADDR
// if Crawls ( un ) then
26226: LD_VAR 0 2
26230: PPUSH
26231: CALL_OW 318
26235: IFFALSE 26246
// ComWalk ( un ) ;
26237: LD_VAR 0 2
26241: PPUSH
26242: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26246: LD_VAR 0 2
26250: PPUSH
26251: LD_INT 5
26253: PPUSH
26254: CALL_OW 336
// end ;
26258: PPOPN 3
26260: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26261: LD_EXP 71
26265: PUSH
26266: LD_EXP 89
26270: AND
26271: PUSH
26272: LD_OWVAR 67
26276: PUSH
26277: LD_INT 3
26279: LESS
26280: AND
26281: IFFALSE 26300
26283: GO 26285
26285: DISABLE
// Difficulty := Difficulty + 1 ;
26286: LD_ADDR_OWVAR 67
26290: PUSH
26291: LD_OWVAR 67
26295: PUSH
26296: LD_INT 1
26298: PLUS
26299: ST_TO_ADDR
26300: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26301: LD_EXP 71
26305: PUSH
26306: LD_EXP 90
26310: AND
26311: IFFALSE 26414
26313: GO 26315
26315: DISABLE
26316: LD_INT 0
26318: PPUSH
// begin for i := 1 to 5 do
26319: LD_ADDR_VAR 0 1
26323: PUSH
26324: DOUBLE
26325: LD_INT 1
26327: DEC
26328: ST_TO_ADDR
26329: LD_INT 5
26331: PUSH
26332: FOR_TO
26333: IFFALSE 26412
// begin uc_nation := nation_nature ;
26335: LD_ADDR_OWVAR 21
26339: PUSH
26340: LD_INT 0
26342: ST_TO_ADDR
// uc_side := 0 ;
26343: LD_ADDR_OWVAR 20
26347: PUSH
26348: LD_INT 0
26350: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26351: LD_ADDR_OWVAR 29
26355: PUSH
26356: LD_INT 12
26358: PUSH
26359: LD_INT 12
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: ST_TO_ADDR
// hc_agressivity := 20 ;
26366: LD_ADDR_OWVAR 35
26370: PUSH
26371: LD_INT 20
26373: ST_TO_ADDR
// hc_class := class_tiger ;
26374: LD_ADDR_OWVAR 28
26378: PUSH
26379: LD_INT 14
26381: ST_TO_ADDR
// hc_gallery :=  ;
26382: LD_ADDR_OWVAR 33
26386: PUSH
26387: LD_STRING 
26389: ST_TO_ADDR
// hc_name :=  ;
26390: LD_ADDR_OWVAR 26
26394: PUSH
26395: LD_STRING 
26397: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26398: CALL_OW 44
26402: PPUSH
26403: LD_INT 0
26405: PPUSH
26406: CALL_OW 51
// end ;
26410: GO 26332
26412: POP
26413: POP
// end ;
26414: PPOPN 1
26416: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26417: LD_EXP 71
26421: PUSH
26422: LD_EXP 91
26426: AND
26427: IFFALSE 26436
26429: GO 26431
26431: DISABLE
// StreamSibBomb ;
26432: CALL 26437 0 0
26436: END
// export function StreamSibBomb ; var i , x , y ; begin
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
26441: PPUSH
26442: PPUSH
// result := false ;
26443: LD_ADDR_VAR 0 1
26447: PUSH
26448: LD_INT 0
26450: ST_TO_ADDR
// for i := 1 to 16 do
26451: LD_ADDR_VAR 0 2
26455: PUSH
26456: DOUBLE
26457: LD_INT 1
26459: DEC
26460: ST_TO_ADDR
26461: LD_INT 16
26463: PUSH
26464: FOR_TO
26465: IFFALSE 26664
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26467: LD_ADDR_VAR 0 3
26471: PUSH
26472: LD_INT 10
26474: PUSH
26475: LD_INT 20
26477: PUSH
26478: LD_INT 30
26480: PUSH
26481: LD_INT 40
26483: PUSH
26484: LD_INT 50
26486: PUSH
26487: LD_INT 60
26489: PUSH
26490: LD_INT 70
26492: PUSH
26493: LD_INT 80
26495: PUSH
26496: LD_INT 90
26498: PUSH
26499: LD_INT 100
26501: PUSH
26502: LD_INT 110
26504: PUSH
26505: LD_INT 120
26507: PUSH
26508: LD_INT 130
26510: PUSH
26511: LD_INT 140
26513: PUSH
26514: LD_INT 150
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: PPUSH
26537: LD_INT 15
26539: PPUSH
26540: CALL_OW 12
26544: ARRAY
26545: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26546: LD_ADDR_VAR 0 4
26550: PUSH
26551: LD_INT 10
26553: PUSH
26554: LD_INT 20
26556: PUSH
26557: LD_INT 30
26559: PUSH
26560: LD_INT 40
26562: PUSH
26563: LD_INT 50
26565: PUSH
26566: LD_INT 60
26568: PUSH
26569: LD_INT 70
26571: PUSH
26572: LD_INT 80
26574: PUSH
26575: LD_INT 90
26577: PUSH
26578: LD_INT 100
26580: PUSH
26581: LD_INT 110
26583: PUSH
26584: LD_INT 120
26586: PUSH
26587: LD_INT 130
26589: PUSH
26590: LD_INT 140
26592: PUSH
26593: LD_INT 150
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: PPUSH
26616: LD_INT 15
26618: PPUSH
26619: CALL_OW 12
26623: ARRAY
26624: ST_TO_ADDR
// if ValidHex ( x , y ) then
26625: LD_VAR 0 3
26629: PPUSH
26630: LD_VAR 0 4
26634: PPUSH
26635: CALL_OW 488
26639: IFFALSE 26662
// begin result := [ x , y ] ;
26641: LD_ADDR_VAR 0 1
26645: PUSH
26646: LD_VAR 0 3
26650: PUSH
26651: LD_VAR 0 4
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: ST_TO_ADDR
// break ;
26660: GO 26664
// end ; end ;
26662: GO 26464
26664: POP
26665: POP
// if result then
26666: LD_VAR 0 1
26670: IFFALSE 26730
// begin ToLua ( playSibBomb() ) ;
26672: LD_STRING playSibBomb()
26674: PPUSH
26675: CALL_OW 559
// wait ( 0 0$14 ) ;
26679: LD_INT 490
26681: PPUSH
26682: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26686: LD_VAR 0 1
26690: PUSH
26691: LD_INT 1
26693: ARRAY
26694: PPUSH
26695: LD_VAR 0 1
26699: PUSH
26700: LD_INT 2
26702: ARRAY
26703: PPUSH
26704: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26708: LD_VAR 0 1
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: PPUSH
26717: LD_VAR 0 1
26721: PUSH
26722: LD_INT 2
26724: ARRAY
26725: PPUSH
26726: CALL_OW 429
// end ; end ;
26730: LD_VAR 0 1
26734: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26735: LD_EXP 71
26739: PUSH
26740: LD_EXP 93
26744: AND
26745: IFFALSE 26757
26747: GO 26749
26749: DISABLE
// YouLost (  ) ;
26750: LD_STRING 
26752: PPUSH
26753: CALL_OW 104
26757: END
// every 0 0$1 trigger StreamModeActive and sFog do
26758: LD_EXP 71
26762: PUSH
26763: LD_EXP 92
26767: AND
26768: IFFALSE 26782
26770: GO 26772
26772: DISABLE
// FogOff ( your_side ) ;
26773: LD_OWVAR 2
26777: PPUSH
26778: CALL_OW 344
26782: END
// every 0 0$1 trigger StreamModeActive and sSun do
26783: LD_EXP 71
26787: PUSH
26788: LD_EXP 94
26792: AND
26793: IFFALSE 26821
26795: GO 26797
26797: DISABLE
// begin solar_recharge_percent := 0 ;
26798: LD_ADDR_OWVAR 79
26802: PUSH
26803: LD_INT 0
26805: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26806: LD_INT 10500
26808: PPUSH
26809: CALL_OW 67
// solar_recharge_percent := 100 ;
26813: LD_ADDR_OWVAR 79
26817: PUSH
26818: LD_INT 100
26820: ST_TO_ADDR
// end ;
26821: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26822: LD_EXP 71
26826: PUSH
26827: LD_EXP 95
26831: AND
26832: IFFALSE 27071
26834: GO 26836
26836: DISABLE
26837: LD_INT 0
26839: PPUSH
26840: PPUSH
26841: PPUSH
// begin tmp := [ ] ;
26842: LD_ADDR_VAR 0 3
26846: PUSH
26847: EMPTY
26848: ST_TO_ADDR
// for i := 1 to 6 do
26849: LD_ADDR_VAR 0 1
26853: PUSH
26854: DOUBLE
26855: LD_INT 1
26857: DEC
26858: ST_TO_ADDR
26859: LD_INT 6
26861: PUSH
26862: FOR_TO
26863: IFFALSE 26968
// begin uc_nation := nation_nature ;
26865: LD_ADDR_OWVAR 21
26869: PUSH
26870: LD_INT 0
26872: ST_TO_ADDR
// uc_side := 0 ;
26873: LD_ADDR_OWVAR 20
26877: PUSH
26878: LD_INT 0
26880: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26881: LD_ADDR_OWVAR 29
26885: PUSH
26886: LD_INT 12
26888: PUSH
26889: LD_INT 12
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: ST_TO_ADDR
// hc_agressivity := 20 ;
26896: LD_ADDR_OWVAR 35
26900: PUSH
26901: LD_INT 20
26903: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26904: LD_ADDR_OWVAR 28
26908: PUSH
26909: LD_INT 17
26911: ST_TO_ADDR
// hc_gallery :=  ;
26912: LD_ADDR_OWVAR 33
26916: PUSH
26917: LD_STRING 
26919: ST_TO_ADDR
// hc_name :=  ;
26920: LD_ADDR_OWVAR 26
26924: PUSH
26925: LD_STRING 
26927: ST_TO_ADDR
// un := CreateHuman ;
26928: LD_ADDR_VAR 0 2
26932: PUSH
26933: CALL_OW 44
26937: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26938: LD_VAR 0 2
26942: PPUSH
26943: LD_INT 1
26945: PPUSH
26946: CALL_OW 51
// tmp := tmp ^ un ;
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_VAR 0 3
26959: PUSH
26960: LD_VAR 0 2
26964: ADD
26965: ST_TO_ADDR
// end ;
26966: GO 26862
26968: POP
26969: POP
// repeat wait ( 0 0$1 ) ;
26970: LD_INT 35
26972: PPUSH
26973: CALL_OW 67
// for un in tmp do
26977: LD_ADDR_VAR 0 2
26981: PUSH
26982: LD_VAR 0 3
26986: PUSH
26987: FOR_IN
26988: IFFALSE 27062
// begin if IsDead ( un ) then
26990: LD_VAR 0 2
26994: PPUSH
26995: CALL_OW 301
26999: IFFALSE 27019
// begin tmp := tmp diff un ;
27001: LD_ADDR_VAR 0 3
27005: PUSH
27006: LD_VAR 0 3
27010: PUSH
27011: LD_VAR 0 2
27015: DIFF
27016: ST_TO_ADDR
// continue ;
27017: GO 26987
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27019: LD_VAR 0 2
27023: PPUSH
27024: LD_INT 3
27026: PUSH
27027: LD_INT 22
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PPUSH
27041: CALL_OW 69
27045: PPUSH
27046: LD_VAR 0 2
27050: PPUSH
27051: CALL_OW 74
27055: PPUSH
27056: CALL_OW 115
// end ;
27060: GO 26987
27062: POP
27063: POP
// until not tmp ;
27064: LD_VAR 0 3
27068: NOT
27069: IFFALSE 26970
// end ;
27071: PPOPN 3
27073: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27074: LD_EXP 71
27078: PUSH
27079: LD_EXP 96
27083: AND
27084: IFFALSE 27138
27086: GO 27088
27088: DISABLE
// begin ToLua ( displayTroll(); ) ;
27089: LD_STRING displayTroll();
27091: PPUSH
27092: CALL_OW 559
// wait ( 3 3$00 ) ;
27096: LD_INT 6300
27098: PPUSH
27099: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27103: LD_STRING hideTroll();
27105: PPUSH
27106: CALL_OW 559
// wait ( 1 1$00 ) ;
27110: LD_INT 2100
27112: PPUSH
27113: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27117: LD_STRING displayTroll();
27119: PPUSH
27120: CALL_OW 559
// wait ( 1 1$00 ) ;
27124: LD_INT 2100
27126: PPUSH
27127: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27131: LD_STRING hideTroll();
27133: PPUSH
27134: CALL_OW 559
// end ;
27138: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27139: LD_EXP 71
27143: PUSH
27144: LD_EXP 97
27148: AND
27149: IFFALSE 27212
27151: GO 27153
27153: DISABLE
27154: LD_INT 0
27156: PPUSH
// begin p := 0 ;
27157: LD_ADDR_VAR 0 1
27161: PUSH
27162: LD_INT 0
27164: ST_TO_ADDR
// repeat game_speed := 1 ;
27165: LD_ADDR_OWVAR 65
27169: PUSH
27170: LD_INT 1
27172: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27173: LD_INT 35
27175: PPUSH
27176: CALL_OW 67
// p := p + 1 ;
27180: LD_ADDR_VAR 0 1
27184: PUSH
27185: LD_VAR 0 1
27189: PUSH
27190: LD_INT 1
27192: PLUS
27193: ST_TO_ADDR
// until p >= 60 ;
27194: LD_VAR 0 1
27198: PUSH
27199: LD_INT 60
27201: GREATEREQUAL
27202: IFFALSE 27165
// game_speed := 4 ;
27204: LD_ADDR_OWVAR 65
27208: PUSH
27209: LD_INT 4
27211: ST_TO_ADDR
// end ;
27212: PPOPN 1
27214: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27215: LD_EXP 71
27219: PUSH
27220: LD_EXP 98
27224: AND
27225: IFFALSE 27371
27227: GO 27229
27229: DISABLE
27230: LD_INT 0
27232: PPUSH
27233: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27234: LD_ADDR_VAR 0 1
27238: PUSH
27239: LD_INT 22
27241: PUSH
27242: LD_OWVAR 2
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 30
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 30
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 69
27287: ST_TO_ADDR
// if not depot then
27288: LD_VAR 0 1
27292: NOT
27293: IFFALSE 27297
// exit ;
27295: GO 27371
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27297: LD_ADDR_VAR 0 2
27301: PUSH
27302: LD_VAR 0 1
27306: PUSH
27307: LD_INT 1
27309: PPUSH
27310: LD_VAR 0 1
27314: PPUSH
27315: CALL_OW 12
27319: ARRAY
27320: PPUSH
27321: CALL_OW 274
27325: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27326: LD_VAR 0 2
27330: PPUSH
27331: LD_INT 1
27333: PPUSH
27334: LD_INT 0
27336: PPUSH
27337: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27341: LD_VAR 0 2
27345: PPUSH
27346: LD_INT 2
27348: PPUSH
27349: LD_INT 0
27351: PPUSH
27352: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27356: LD_VAR 0 2
27360: PPUSH
27361: LD_INT 3
27363: PPUSH
27364: LD_INT 0
27366: PPUSH
27367: CALL_OW 277
// end ;
27371: PPOPN 2
27373: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27374: LD_EXP 71
27378: PUSH
27379: LD_EXP 99
27383: AND
27384: IFFALSE 27481
27386: GO 27388
27388: DISABLE
27389: LD_INT 0
27391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27392: LD_ADDR_VAR 0 1
27396: PUSH
27397: LD_INT 22
27399: PUSH
27400: LD_OWVAR 2
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 21
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 3
27421: PUSH
27422: LD_INT 23
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: PPUSH
27441: CALL_OW 69
27445: ST_TO_ADDR
// if not tmp then
27446: LD_VAR 0 1
27450: NOT
27451: IFFALSE 27455
// exit ;
27453: GO 27481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27455: LD_VAR 0 1
27459: PUSH
27460: LD_INT 1
27462: PPUSH
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL_OW 12
27472: ARRAY
27473: PPUSH
27474: LD_INT 200
27476: PPUSH
27477: CALL_OW 234
// end ;
27481: PPOPN 1
27483: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27484: LD_EXP 71
27488: PUSH
27489: LD_EXP 100
27493: AND
27494: IFFALSE 27573
27496: GO 27498
27498: DISABLE
27499: LD_INT 0
27501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27502: LD_ADDR_VAR 0 1
27506: PUSH
27507: LD_INT 22
27509: PUSH
27510: LD_OWVAR 2
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 21
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PPUSH
27533: CALL_OW 69
27537: ST_TO_ADDR
// if not tmp then
27538: LD_VAR 0 1
27542: NOT
27543: IFFALSE 27547
// exit ;
27545: GO 27573
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27547: LD_VAR 0 1
27551: PUSH
27552: LD_INT 1
27554: PPUSH
27555: LD_VAR 0 1
27559: PPUSH
27560: CALL_OW 12
27564: ARRAY
27565: PPUSH
27566: LD_INT 60
27568: PPUSH
27569: CALL_OW 234
// end ;
27573: PPOPN 1
27575: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27576: LD_EXP 71
27580: PUSH
27581: LD_EXP 101
27585: AND
27586: IFFALSE 27685
27588: GO 27590
27590: DISABLE
27591: LD_INT 0
27593: PPUSH
27594: PPUSH
// begin enable ;
27595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27596: LD_ADDR_VAR 0 1
27600: PUSH
27601: LD_INT 22
27603: PUSH
27604: LD_OWVAR 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 61
27615: PUSH
27616: EMPTY
27617: LIST
27618: PUSH
27619: LD_INT 33
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: PPUSH
27634: CALL_OW 69
27638: ST_TO_ADDR
// if not tmp then
27639: LD_VAR 0 1
27643: NOT
27644: IFFALSE 27648
// exit ;
27646: GO 27685
// for i in tmp do
27648: LD_ADDR_VAR 0 2
27652: PUSH
27653: LD_VAR 0 1
27657: PUSH
27658: FOR_IN
27659: IFFALSE 27683
// if IsControledBy ( i ) then
27661: LD_VAR 0 2
27665: PPUSH
27666: CALL_OW 312
27670: IFFALSE 27681
// ComUnlink ( i ) ;
27672: LD_VAR 0 2
27676: PPUSH
27677: CALL_OW 136
27681: GO 27658
27683: POP
27684: POP
// end ;
27685: PPOPN 2
27687: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27688: LD_EXP 71
27692: PUSH
27693: LD_EXP 102
27697: AND
27698: IFFALSE 27838
27700: GO 27702
27702: DISABLE
27703: LD_INT 0
27705: PPUSH
27706: PPUSH
// begin ToLua ( displayPowell(); ) ;
27707: LD_STRING displayPowell();
27709: PPUSH
27710: CALL_OW 559
// uc_side := 0 ;
27714: LD_ADDR_OWVAR 20
27718: PUSH
27719: LD_INT 0
27721: ST_TO_ADDR
// uc_nation := 2 ;
27722: LD_ADDR_OWVAR 21
27726: PUSH
27727: LD_INT 2
27729: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27730: LD_ADDR_OWVAR 37
27734: PUSH
27735: LD_INT 14
27737: ST_TO_ADDR
// vc_engine := engine_siberite ;
27738: LD_ADDR_OWVAR 39
27742: PUSH
27743: LD_INT 3
27745: ST_TO_ADDR
// vc_control := control_apeman ;
27746: LD_ADDR_OWVAR 38
27750: PUSH
27751: LD_INT 5
27753: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27754: LD_ADDR_OWVAR 40
27758: PUSH
27759: LD_INT 29
27761: ST_TO_ADDR
// un := CreateVehicle ;
27762: LD_ADDR_VAR 0 2
27766: PUSH
27767: CALL_OW 45
27771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27772: LD_VAR 0 2
27776: PPUSH
27777: LD_INT 1
27779: PPUSH
27780: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27784: LD_INT 35
27786: PPUSH
27787: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27791: LD_VAR 0 2
27795: PPUSH
27796: LD_INT 22
27798: PUSH
27799: LD_OWVAR 2
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PPUSH
27808: CALL_OW 69
27812: PPUSH
27813: LD_VAR 0 2
27817: PPUSH
27818: CALL_OW 74
27822: PPUSH
27823: CALL_OW 115
// until IsDead ( un ) ;
27827: LD_VAR 0 2
27831: PPUSH
27832: CALL_OW 301
27836: IFFALSE 27784
// end ;
27838: PPOPN 2
27840: END
// every 0 0$1 trigger StreamModeActive and sStu do
27841: LD_EXP 71
27845: PUSH
27846: LD_EXP 110
27850: AND
27851: IFFALSE 27867
27853: GO 27855
27855: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27856: LD_STRING displayStucuk();
27858: PPUSH
27859: CALL_OW 559
// ResetFog ;
27863: CALL_OW 335
// end ;
27867: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27868: LD_EXP 71
27872: PUSH
27873: LD_EXP 103
27877: AND
27878: IFFALSE 28019
27880: GO 27882
27882: DISABLE
27883: LD_INT 0
27885: PPUSH
27886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27887: LD_ADDR_VAR 0 2
27891: PUSH
27892: LD_INT 22
27894: PUSH
27895: LD_OWVAR 2
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 21
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PPUSH
27918: CALL_OW 69
27922: ST_TO_ADDR
// if not tmp then
27923: LD_VAR 0 2
27927: NOT
27928: IFFALSE 27932
// exit ;
27930: GO 28019
// un := tmp [ rand ( 1 , tmp ) ] ;
27932: LD_ADDR_VAR 0 1
27936: PUSH
27937: LD_VAR 0 2
27941: PUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_VAR 0 2
27949: PPUSH
27950: CALL_OW 12
27954: ARRAY
27955: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27956: LD_VAR 0 1
27960: PPUSH
27961: LD_INT 0
27963: PPUSH
27964: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27968: LD_VAR 0 1
27972: PPUSH
27973: LD_OWVAR 3
27977: PUSH
27978: LD_VAR 0 1
27982: DIFF
27983: PPUSH
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 74
27993: PPUSH
27994: CALL_OW 115
// wait ( 0 0$20 ) ;
27998: LD_INT 700
28000: PPUSH
28001: CALL_OW 67
// SetSide ( un , your_side ) ;
28005: LD_VAR 0 1
28009: PPUSH
28010: LD_OWVAR 2
28014: PPUSH
28015: CALL_OW 235
// end ;
28019: PPOPN 2
28021: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28022: LD_EXP 71
28026: PUSH
28027: LD_EXP 104
28031: AND
28032: IFFALSE 28138
28034: GO 28036
28036: DISABLE
28037: LD_INT 0
28039: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28040: LD_ADDR_VAR 0 1
28044: PUSH
28045: LD_INT 22
28047: PUSH
28048: LD_OWVAR 2
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: LD_INT 30
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 30
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: LIST
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PPUSH
28089: CALL_OW 69
28093: ST_TO_ADDR
// if not depot then
28094: LD_VAR 0 1
28098: NOT
28099: IFFALSE 28103
// exit ;
28101: GO 28138
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28103: LD_VAR 0 1
28107: PUSH
28108: LD_INT 1
28110: ARRAY
28111: PPUSH
28112: CALL_OW 250
28116: PPUSH
28117: LD_VAR 0 1
28121: PUSH
28122: LD_INT 1
28124: ARRAY
28125: PPUSH
28126: CALL_OW 251
28130: PPUSH
28131: LD_INT 70
28133: PPUSH
28134: CALL_OW 495
// end ;
28138: PPOPN 1
28140: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28141: LD_EXP 71
28145: PUSH
28146: LD_EXP 105
28150: AND
28151: IFFALSE 28362
28153: GO 28155
28155: DISABLE
28156: LD_INT 0
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28163: LD_ADDR_VAR 0 5
28167: PUSH
28168: LD_INT 22
28170: PUSH
28171: LD_OWVAR 2
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 21
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PPUSH
28194: CALL_OW 69
28198: ST_TO_ADDR
// if not tmp then
28199: LD_VAR 0 5
28203: NOT
28204: IFFALSE 28208
// exit ;
28206: GO 28362
// for i in tmp do
28208: LD_ADDR_VAR 0 1
28212: PUSH
28213: LD_VAR 0 5
28217: PUSH
28218: FOR_IN
28219: IFFALSE 28360
// begin d := rand ( 0 , 5 ) ;
28221: LD_ADDR_VAR 0 4
28225: PUSH
28226: LD_INT 0
28228: PPUSH
28229: LD_INT 5
28231: PPUSH
28232: CALL_OW 12
28236: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28237: LD_ADDR_VAR 0 2
28241: PUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 250
28251: PPUSH
28252: LD_VAR 0 4
28256: PPUSH
28257: LD_INT 3
28259: PPUSH
28260: LD_INT 12
28262: PPUSH
28263: CALL_OW 12
28267: PPUSH
28268: CALL_OW 272
28272: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28273: LD_ADDR_VAR 0 3
28277: PUSH
28278: LD_VAR 0 1
28282: PPUSH
28283: CALL_OW 251
28287: PPUSH
28288: LD_VAR 0 4
28292: PPUSH
28293: LD_INT 3
28295: PPUSH
28296: LD_INT 12
28298: PPUSH
28299: CALL_OW 12
28303: PPUSH
28304: CALL_OW 273
28308: ST_TO_ADDR
// if ValidHex ( x , y ) then
28309: LD_VAR 0 2
28313: PPUSH
28314: LD_VAR 0 3
28318: PPUSH
28319: CALL_OW 488
28323: IFFALSE 28358
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28325: LD_VAR 0 1
28329: PPUSH
28330: LD_VAR 0 2
28334: PPUSH
28335: LD_VAR 0 3
28339: PPUSH
28340: LD_INT 3
28342: PPUSH
28343: LD_INT 6
28345: PPUSH
28346: CALL_OW 12
28350: PPUSH
28351: LD_INT 1
28353: PPUSH
28354: CALL_OW 483
// end ;
28358: GO 28218
28360: POP
28361: POP
// end ;
28362: PPOPN 5
28364: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28365: LD_EXP 71
28369: PUSH
28370: LD_EXP 106
28374: AND
28375: IFFALSE 28469
28377: GO 28379
28379: DISABLE
28380: LD_INT 0
28382: PPUSH
28383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28384: LD_ADDR_VAR 0 2
28388: PUSH
28389: LD_INT 22
28391: PUSH
28392: LD_OWVAR 2
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 32
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 21
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: LIST
28425: PPUSH
28426: CALL_OW 69
28430: ST_TO_ADDR
// if not tmp then
28431: LD_VAR 0 2
28435: NOT
28436: IFFALSE 28440
// exit ;
28438: GO 28469
// for i in tmp do
28440: LD_ADDR_VAR 0 1
28444: PUSH
28445: LD_VAR 0 2
28449: PUSH
28450: FOR_IN
28451: IFFALSE 28467
// SetFuel ( i , 0 ) ;
28453: LD_VAR 0 1
28457: PPUSH
28458: LD_INT 0
28460: PPUSH
28461: CALL_OW 240
28465: GO 28450
28467: POP
28468: POP
// end ;
28469: PPOPN 2
28471: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28472: LD_EXP 71
28476: PUSH
28477: LD_EXP 107
28481: AND
28482: IFFALSE 28548
28484: GO 28486
28486: DISABLE
28487: LD_INT 0
28489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28490: LD_ADDR_VAR 0 1
28494: PUSH
28495: LD_INT 22
28497: PUSH
28498: LD_OWVAR 2
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 30
28509: PUSH
28510: LD_INT 29
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PPUSH
28521: CALL_OW 69
28525: ST_TO_ADDR
// if not tmp then
28526: LD_VAR 0 1
28530: NOT
28531: IFFALSE 28535
// exit ;
28533: GO 28548
// DestroyUnit ( tmp [ 1 ] ) ;
28535: LD_VAR 0 1
28539: PUSH
28540: LD_INT 1
28542: ARRAY
28543: PPUSH
28544: CALL_OW 65
// end ;
28548: PPOPN 1
28550: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28551: LD_EXP 71
28555: PUSH
28556: LD_EXP 109
28560: AND
28561: IFFALSE 28690
28563: GO 28565
28565: DISABLE
28566: LD_INT 0
28568: PPUSH
// begin uc_side := 0 ;
28569: LD_ADDR_OWVAR 20
28573: PUSH
28574: LD_INT 0
28576: ST_TO_ADDR
// uc_nation := nation_arabian ;
28577: LD_ADDR_OWVAR 21
28581: PUSH
28582: LD_INT 2
28584: ST_TO_ADDR
// hc_gallery :=  ;
28585: LD_ADDR_OWVAR 33
28589: PUSH
28590: LD_STRING 
28592: ST_TO_ADDR
// hc_name :=  ;
28593: LD_ADDR_OWVAR 26
28597: PUSH
28598: LD_STRING 
28600: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28601: LD_INT 1
28603: PPUSH
28604: LD_INT 11
28606: PPUSH
28607: LD_INT 10
28609: PPUSH
28610: CALL_OW 380
// un := CreateHuman ;
28614: LD_ADDR_VAR 0 1
28618: PUSH
28619: CALL_OW 44
28623: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28624: LD_VAR 0 1
28628: PPUSH
28629: LD_INT 1
28631: PPUSH
28632: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28636: LD_INT 35
28638: PPUSH
28639: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28643: LD_VAR 0 1
28647: PPUSH
28648: LD_INT 22
28650: PUSH
28651: LD_OWVAR 2
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PPUSH
28660: CALL_OW 69
28664: PPUSH
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 74
28674: PPUSH
28675: CALL_OW 115
// until IsDead ( un ) ;
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 301
28688: IFFALSE 28636
// end ;
28690: PPOPN 1
28692: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28693: LD_EXP 71
28697: PUSH
28698: LD_EXP 111
28702: AND
28703: IFFALSE 28715
28705: GO 28707
28707: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28708: LD_STRING earthquake(getX(game), 0, 32)
28710: PPUSH
28711: CALL_OW 559
28715: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28716: LD_EXP 71
28720: PUSH
28721: LD_EXP 112
28725: AND
28726: IFFALSE 28817
28728: GO 28730
28730: DISABLE
28731: LD_INT 0
28733: PPUSH
// begin enable ;
28734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28735: LD_ADDR_VAR 0 1
28739: PUSH
28740: LD_INT 22
28742: PUSH
28743: LD_OWVAR 2
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 21
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 33
28764: PUSH
28765: LD_INT 3
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: PPUSH
28777: CALL_OW 69
28781: ST_TO_ADDR
// if not tmp then
28782: LD_VAR 0 1
28786: NOT
28787: IFFALSE 28791
// exit ;
28789: GO 28817
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28791: LD_VAR 0 1
28795: PUSH
28796: LD_INT 1
28798: PPUSH
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 12
28808: ARRAY
28809: PPUSH
28810: LD_INT 1
28812: PPUSH
28813: CALL_OW 234
// end ;
28817: PPOPN 1
28819: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28820: LD_EXP 71
28824: PUSH
28825: LD_EXP 113
28829: AND
28830: IFFALSE 28971
28832: GO 28834
28834: DISABLE
28835: LD_INT 0
28837: PPUSH
28838: PPUSH
28839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28840: LD_ADDR_VAR 0 3
28844: PUSH
28845: LD_INT 22
28847: PUSH
28848: LD_OWVAR 2
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 25
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PPUSH
28871: CALL_OW 69
28875: ST_TO_ADDR
// if not tmp then
28876: LD_VAR 0 3
28880: NOT
28881: IFFALSE 28885
// exit ;
28883: GO 28971
// un := tmp [ rand ( 1 , tmp ) ] ;
28885: LD_ADDR_VAR 0 2
28889: PUSH
28890: LD_VAR 0 3
28894: PUSH
28895: LD_INT 1
28897: PPUSH
28898: LD_VAR 0 3
28902: PPUSH
28903: CALL_OW 12
28907: ARRAY
28908: ST_TO_ADDR
// if Crawls ( un ) then
28909: LD_VAR 0 2
28913: PPUSH
28914: CALL_OW 318
28918: IFFALSE 28929
// ComWalk ( un ) ;
28920: LD_VAR 0 2
28924: PPUSH
28925: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28929: LD_VAR 0 2
28933: PPUSH
28934: LD_INT 9
28936: PPUSH
28937: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28941: LD_INT 28
28943: PPUSH
28944: LD_OWVAR 2
28948: PPUSH
28949: LD_INT 2
28951: PPUSH
28952: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28956: LD_INT 29
28958: PPUSH
28959: LD_OWVAR 2
28963: PPUSH
28964: LD_INT 2
28966: PPUSH
28967: CALL_OW 322
// end ;
28971: PPOPN 3
28973: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28974: LD_EXP 71
28978: PUSH
28979: LD_EXP 114
28983: AND
28984: IFFALSE 29095
28986: GO 28988
28988: DISABLE
28989: LD_INT 0
28991: PPUSH
28992: PPUSH
28993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28994: LD_ADDR_VAR 0 3
28998: PUSH
28999: LD_INT 22
29001: PUSH
29002: LD_OWVAR 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 25
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PPUSH
29025: CALL_OW 69
29029: ST_TO_ADDR
// if not tmp then
29030: LD_VAR 0 3
29034: NOT
29035: IFFALSE 29039
// exit ;
29037: GO 29095
// un := tmp [ rand ( 1 , tmp ) ] ;
29039: LD_ADDR_VAR 0 2
29043: PUSH
29044: LD_VAR 0 3
29048: PUSH
29049: LD_INT 1
29051: PPUSH
29052: LD_VAR 0 3
29056: PPUSH
29057: CALL_OW 12
29061: ARRAY
29062: ST_TO_ADDR
// if Crawls ( un ) then
29063: LD_VAR 0 2
29067: PPUSH
29068: CALL_OW 318
29072: IFFALSE 29083
// ComWalk ( un ) ;
29074: LD_VAR 0 2
29078: PPUSH
29079: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29083: LD_VAR 0 2
29087: PPUSH
29088: LD_INT 8
29090: PPUSH
29091: CALL_OW 336
// end ;
29095: PPOPN 3
29097: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29098: LD_EXP 71
29102: PUSH
29103: LD_EXP 115
29107: AND
29108: IFFALSE 29252
29110: GO 29112
29112: DISABLE
29113: LD_INT 0
29115: PPUSH
29116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29117: LD_ADDR_VAR 0 2
29121: PUSH
29122: LD_INT 22
29124: PUSH
29125: LD_OWVAR 2
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 21
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: LD_INT 34
29149: PUSH
29150: LD_INT 12
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 34
29159: PUSH
29160: LD_INT 51
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 34
29169: PUSH
29170: LD_INT 32
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: PPUSH
29188: CALL_OW 69
29192: ST_TO_ADDR
// if not tmp then
29193: LD_VAR 0 2
29197: NOT
29198: IFFALSE 29202
// exit ;
29200: GO 29252
// for i in tmp do
29202: LD_ADDR_VAR 0 1
29206: PUSH
29207: LD_VAR 0 2
29211: PUSH
29212: FOR_IN
29213: IFFALSE 29250
// if GetCargo ( i , mat_artifact ) = 0 then
29215: LD_VAR 0 1
29219: PPUSH
29220: LD_INT 4
29222: PPUSH
29223: CALL_OW 289
29227: PUSH
29228: LD_INT 0
29230: EQUAL
29231: IFFALSE 29248
// SetCargo ( i , mat_siberit , 100 ) ;
29233: LD_VAR 0 1
29237: PPUSH
29238: LD_INT 3
29240: PPUSH
29241: LD_INT 100
29243: PPUSH
29244: CALL_OW 290
29248: GO 29212
29250: POP
29251: POP
// end ;
29252: PPOPN 2
29254: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29255: LD_EXP 71
29259: PUSH
29260: LD_EXP 116
29264: AND
29265: IFFALSE 29448
29267: GO 29269
29269: DISABLE
29270: LD_INT 0
29272: PPUSH
29273: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29274: LD_ADDR_VAR 0 2
29278: PUSH
29279: LD_INT 22
29281: PUSH
29282: LD_OWVAR 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PPUSH
29291: CALL_OW 69
29295: ST_TO_ADDR
// if not tmp then
29296: LD_VAR 0 2
29300: NOT
29301: IFFALSE 29305
// exit ;
29303: GO 29448
// for i := 1 to 2 do
29305: LD_ADDR_VAR 0 1
29309: PUSH
29310: DOUBLE
29311: LD_INT 1
29313: DEC
29314: ST_TO_ADDR
29315: LD_INT 2
29317: PUSH
29318: FOR_TO
29319: IFFALSE 29446
// begin uc_side := your_side ;
29321: LD_ADDR_OWVAR 20
29325: PUSH
29326: LD_OWVAR 2
29330: ST_TO_ADDR
// uc_nation := nation_american ;
29331: LD_ADDR_OWVAR 21
29335: PUSH
29336: LD_INT 1
29338: ST_TO_ADDR
// vc_chassis := us_morphling ;
29339: LD_ADDR_OWVAR 37
29343: PUSH
29344: LD_INT 5
29346: ST_TO_ADDR
// vc_engine := engine_siberite ;
29347: LD_ADDR_OWVAR 39
29351: PUSH
29352: LD_INT 3
29354: ST_TO_ADDR
// vc_control := control_computer ;
29355: LD_ADDR_OWVAR 38
29359: PUSH
29360: LD_INT 3
29362: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29363: LD_ADDR_OWVAR 40
29367: PUSH
29368: LD_INT 10
29370: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29371: LD_VAR 0 2
29375: PUSH
29376: LD_INT 1
29378: ARRAY
29379: PPUSH
29380: CALL_OW 310
29384: NOT
29385: IFFALSE 29432
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29387: CALL_OW 45
29391: PPUSH
29392: LD_VAR 0 2
29396: PUSH
29397: LD_INT 1
29399: ARRAY
29400: PPUSH
29401: CALL_OW 250
29405: PPUSH
29406: LD_VAR 0 2
29410: PUSH
29411: LD_INT 1
29413: ARRAY
29414: PPUSH
29415: CALL_OW 251
29419: PPUSH
29420: LD_INT 12
29422: PPUSH
29423: LD_INT 1
29425: PPUSH
29426: CALL_OW 50
29430: GO 29444
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29432: CALL_OW 45
29436: PPUSH
29437: LD_INT 1
29439: PPUSH
29440: CALL_OW 51
// end ;
29444: GO 29318
29446: POP
29447: POP
// end ;
29448: PPOPN 2
29450: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29451: LD_EXP 71
29455: PUSH
29456: LD_EXP 117
29460: AND
29461: IFFALSE 29683
29463: GO 29465
29465: DISABLE
29466: LD_INT 0
29468: PPUSH
29469: PPUSH
29470: PPUSH
29471: PPUSH
29472: PPUSH
29473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29474: LD_ADDR_VAR 0 6
29478: PUSH
29479: LD_INT 22
29481: PUSH
29482: LD_OWVAR 2
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 21
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: LD_INT 23
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: PPUSH
29523: CALL_OW 69
29527: ST_TO_ADDR
// if not tmp then
29528: LD_VAR 0 6
29532: NOT
29533: IFFALSE 29537
// exit ;
29535: GO 29683
// s1 := rand ( 1 , 4 ) ;
29537: LD_ADDR_VAR 0 2
29541: PUSH
29542: LD_INT 1
29544: PPUSH
29545: LD_INT 4
29547: PPUSH
29548: CALL_OW 12
29552: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29553: LD_ADDR_VAR 0 4
29557: PUSH
29558: LD_VAR 0 6
29562: PUSH
29563: LD_INT 1
29565: ARRAY
29566: PPUSH
29567: LD_VAR 0 2
29571: PPUSH
29572: CALL_OW 259
29576: ST_TO_ADDR
// if s1 = 1 then
29577: LD_VAR 0 2
29581: PUSH
29582: LD_INT 1
29584: EQUAL
29585: IFFALSE 29605
// s2 := rand ( 2 , 4 ) else
29587: LD_ADDR_VAR 0 3
29591: PUSH
29592: LD_INT 2
29594: PPUSH
29595: LD_INT 4
29597: PPUSH
29598: CALL_OW 12
29602: ST_TO_ADDR
29603: GO 29613
// s2 := 1 ;
29605: LD_ADDR_VAR 0 3
29609: PUSH
29610: LD_INT 1
29612: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29613: LD_ADDR_VAR 0 5
29617: PUSH
29618: LD_VAR 0 6
29622: PUSH
29623: LD_INT 1
29625: ARRAY
29626: PPUSH
29627: LD_VAR 0 3
29631: PPUSH
29632: CALL_OW 259
29636: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29637: LD_VAR 0 6
29641: PUSH
29642: LD_INT 1
29644: ARRAY
29645: PPUSH
29646: LD_VAR 0 2
29650: PPUSH
29651: LD_VAR 0 5
29655: PPUSH
29656: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29660: LD_VAR 0 6
29664: PUSH
29665: LD_INT 1
29667: ARRAY
29668: PPUSH
29669: LD_VAR 0 3
29673: PPUSH
29674: LD_VAR 0 4
29678: PPUSH
29679: CALL_OW 237
// end ;
29683: PPOPN 6
29685: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29686: LD_EXP 71
29690: PUSH
29691: LD_EXP 118
29695: AND
29696: IFFALSE 29775
29698: GO 29700
29700: DISABLE
29701: LD_INT 0
29703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29704: LD_ADDR_VAR 0 1
29708: PUSH
29709: LD_INT 22
29711: PUSH
29712: LD_OWVAR 2
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 30
29723: PUSH
29724: LD_INT 3
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PPUSH
29735: CALL_OW 69
29739: ST_TO_ADDR
// if not tmp then
29740: LD_VAR 0 1
29744: NOT
29745: IFFALSE 29749
// exit ;
29747: GO 29775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29749: LD_VAR 0 1
29753: PUSH
29754: LD_INT 1
29756: PPUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL_OW 12
29766: ARRAY
29767: PPUSH
29768: LD_INT 1
29770: PPUSH
29771: CALL_OW 234
// end ;
29775: PPOPN 1
29777: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29778: LD_EXP 71
29782: PUSH
29783: LD_EXP 119
29787: AND
29788: IFFALSE 29900
29790: GO 29792
29792: DISABLE
29793: LD_INT 0
29795: PPUSH
29796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29797: LD_ADDR_VAR 0 2
29801: PUSH
29802: LD_INT 22
29804: PUSH
29805: LD_OWVAR 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 30
29819: PUSH
29820: LD_INT 27
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 30
29829: PUSH
29830: LD_INT 26
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 30
29839: PUSH
29840: LD_INT 28
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PPUSH
29857: CALL_OW 69
29861: ST_TO_ADDR
// if not tmp then
29862: LD_VAR 0 2
29866: NOT
29867: IFFALSE 29871
// exit ;
29869: GO 29900
// for i in tmp do
29871: LD_ADDR_VAR 0 1
29875: PUSH
29876: LD_VAR 0 2
29880: PUSH
29881: FOR_IN
29882: IFFALSE 29898
// SetLives ( i , 1 ) ;
29884: LD_VAR 0 1
29888: PPUSH
29889: LD_INT 1
29891: PPUSH
29892: CALL_OW 234
29896: GO 29881
29898: POP
29899: POP
// end ;
29900: PPOPN 2
29902: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29903: LD_EXP 71
29907: PUSH
29908: LD_EXP 120
29912: AND
29913: IFFALSE 30187
29915: GO 29917
29917: DISABLE
29918: LD_INT 0
29920: PPUSH
29921: PPUSH
29922: PPUSH
// begin i := rand ( 1 , 7 ) ;
29923: LD_ADDR_VAR 0 1
29927: PUSH
29928: LD_INT 1
29930: PPUSH
29931: LD_INT 7
29933: PPUSH
29934: CALL_OW 12
29938: ST_TO_ADDR
// case i of 1 :
29939: LD_VAR 0 1
29943: PUSH
29944: LD_INT 1
29946: DOUBLE
29947: EQUAL
29948: IFTRUE 29952
29950: GO 29962
29952: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29953: LD_STRING earthquake(getX(game), 0, 32)
29955: PPUSH
29956: CALL_OW 559
29960: GO 30187
29962: LD_INT 2
29964: DOUBLE
29965: EQUAL
29966: IFTRUE 29970
29968: GO 29984
29970: POP
// begin ToLua ( displayStucuk(); ) ;
29971: LD_STRING displayStucuk();
29973: PPUSH
29974: CALL_OW 559
// ResetFog ;
29978: CALL_OW 335
// end ; 3 :
29982: GO 30187
29984: LD_INT 3
29986: DOUBLE
29987: EQUAL
29988: IFTRUE 29992
29990: GO 30096
29992: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29993: LD_ADDR_VAR 0 2
29997: PUSH
29998: LD_INT 22
30000: PUSH
30001: LD_OWVAR 2
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 25
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PPUSH
30024: CALL_OW 69
30028: ST_TO_ADDR
// if not tmp then
30029: LD_VAR 0 2
30033: NOT
30034: IFFALSE 30038
// exit ;
30036: GO 30187
// un := tmp [ rand ( 1 , tmp ) ] ;
30038: LD_ADDR_VAR 0 3
30042: PUSH
30043: LD_VAR 0 2
30047: PUSH
30048: LD_INT 1
30050: PPUSH
30051: LD_VAR 0 2
30055: PPUSH
30056: CALL_OW 12
30060: ARRAY
30061: ST_TO_ADDR
// if Crawls ( un ) then
30062: LD_VAR 0 3
30066: PPUSH
30067: CALL_OW 318
30071: IFFALSE 30082
// ComWalk ( un ) ;
30073: LD_VAR 0 3
30077: PPUSH
30078: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30082: LD_VAR 0 3
30086: PPUSH
30087: LD_INT 8
30089: PPUSH
30090: CALL_OW 336
// end ; 4 :
30094: GO 30187
30096: LD_INT 4
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30165
30104: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30105: LD_ADDR_VAR 0 2
30109: PUSH
30110: LD_INT 22
30112: PUSH
30113: LD_OWVAR 2
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 30
30124: PUSH
30125: LD_INT 29
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PPUSH
30136: CALL_OW 69
30140: ST_TO_ADDR
// if not tmp then
30141: LD_VAR 0 2
30145: NOT
30146: IFFALSE 30150
// exit ;
30148: GO 30187
// DestroyUnit ( tmp [ 1 ] ) ;
30150: LD_VAR 0 2
30154: PUSH
30155: LD_INT 1
30157: ARRAY
30158: PPUSH
30159: CALL_OW 65
// end ; 5 .. 7 :
30163: GO 30187
30165: LD_INT 5
30167: DOUBLE
30168: GREATEREQUAL
30169: IFFALSE 30177
30171: LD_INT 7
30173: DOUBLE
30174: LESSEQUAL
30175: IFTRUE 30179
30177: GO 30186
30179: POP
// StreamSibBomb ; end ;
30180: CALL 26437 0 0
30184: GO 30187
30186: POP
// end ;
30187: PPOPN 3
30189: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30190: LD_EXP 71
30194: PUSH
30195: LD_EXP 121
30199: AND
30200: IFFALSE 30356
30202: GO 30204
30204: DISABLE
30205: LD_INT 0
30207: PPUSH
30208: PPUSH
30209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30210: LD_ADDR_VAR 0 2
30214: PUSH
30215: LD_INT 81
30217: PUSH
30218: LD_OWVAR 2
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: LD_INT 21
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 21
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PPUSH
30259: CALL_OW 69
30263: ST_TO_ADDR
// if not tmp then
30264: LD_VAR 0 2
30268: NOT
30269: IFFALSE 30273
// exit ;
30271: GO 30356
// p := 0 ;
30273: LD_ADDR_VAR 0 3
30277: PUSH
30278: LD_INT 0
30280: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30281: LD_INT 35
30283: PPUSH
30284: CALL_OW 67
// p := p + 1 ;
30288: LD_ADDR_VAR 0 3
30292: PUSH
30293: LD_VAR 0 3
30297: PUSH
30298: LD_INT 1
30300: PLUS
30301: ST_TO_ADDR
// for i in tmp do
30302: LD_ADDR_VAR 0 1
30306: PUSH
30307: LD_VAR 0 2
30311: PUSH
30312: FOR_IN
30313: IFFALSE 30344
// if GetLives ( i ) < 1000 then
30315: LD_VAR 0 1
30319: PPUSH
30320: CALL_OW 256
30324: PUSH
30325: LD_INT 1000
30327: LESS
30328: IFFALSE 30342
// SetLives ( i , 1000 ) ;
30330: LD_VAR 0 1
30334: PPUSH
30335: LD_INT 1000
30337: PPUSH
30338: CALL_OW 234
30342: GO 30312
30344: POP
30345: POP
// until p > 20 ;
30346: LD_VAR 0 3
30350: PUSH
30351: LD_INT 20
30353: GREATER
30354: IFFALSE 30281
// end ;
30356: PPOPN 3
30358: END
// every 0 0$1 trigger StreamModeActive and sTime do
30359: LD_EXP 71
30363: PUSH
30364: LD_EXP 122
30368: AND
30369: IFFALSE 30404
30371: GO 30373
30373: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30374: LD_INT 28
30376: PPUSH
30377: LD_OWVAR 2
30381: PPUSH
30382: LD_INT 2
30384: PPUSH
30385: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30389: LD_INT 30
30391: PPUSH
30392: LD_OWVAR 2
30396: PPUSH
30397: LD_INT 2
30399: PPUSH
30400: CALL_OW 322
// end ;
30404: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30405: LD_EXP 71
30409: PUSH
30410: LD_EXP 123
30414: AND
30415: IFFALSE 30536
30417: GO 30419
30419: DISABLE
30420: LD_INT 0
30422: PPUSH
30423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30424: LD_ADDR_VAR 0 2
30428: PUSH
30429: LD_INT 22
30431: PUSH
30432: LD_OWVAR 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 21
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: LD_INT 23
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL_OW 69
30477: ST_TO_ADDR
// if not tmp then
30478: LD_VAR 0 2
30482: NOT
30483: IFFALSE 30487
// exit ;
30485: GO 30536
// for i in tmp do
30487: LD_ADDR_VAR 0 1
30491: PUSH
30492: LD_VAR 0 2
30496: PUSH
30497: FOR_IN
30498: IFFALSE 30534
// begin if Crawls ( i ) then
30500: LD_VAR 0 1
30504: PPUSH
30505: CALL_OW 318
30509: IFFALSE 30520
// ComWalk ( i ) ;
30511: LD_VAR 0 1
30515: PPUSH
30516: CALL_OW 138
// SetClass ( i , 2 ) ;
30520: LD_VAR 0 1
30524: PPUSH
30525: LD_INT 2
30527: PPUSH
30528: CALL_OW 336
// end ;
30532: GO 30497
30534: POP
30535: POP
// end ;
30536: PPOPN 2
30538: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30539: LD_EXP 71
30543: PUSH
30544: LD_EXP 124
30548: AND
30549: IFFALSE 30830
30551: GO 30553
30553: DISABLE
30554: LD_INT 0
30556: PPUSH
30557: PPUSH
30558: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30559: LD_OWVAR 2
30563: PPUSH
30564: LD_INT 9
30566: PPUSH
30567: LD_INT 1
30569: PPUSH
30570: LD_INT 1
30572: PPUSH
30573: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30577: LD_INT 9
30579: PPUSH
30580: LD_OWVAR 2
30584: PPUSH
30585: CALL_OW 343
// uc_side := 9 ;
30589: LD_ADDR_OWVAR 20
30593: PUSH
30594: LD_INT 9
30596: ST_TO_ADDR
// uc_nation := 2 ;
30597: LD_ADDR_OWVAR 21
30601: PUSH
30602: LD_INT 2
30604: ST_TO_ADDR
// hc_name := Dark Warrior ;
30605: LD_ADDR_OWVAR 26
30609: PUSH
30610: LD_STRING Dark Warrior
30612: ST_TO_ADDR
// hc_gallery :=  ;
30613: LD_ADDR_OWVAR 33
30617: PUSH
30618: LD_STRING 
30620: ST_TO_ADDR
// hc_noskilllimit := true ;
30621: LD_ADDR_OWVAR 76
30625: PUSH
30626: LD_INT 1
30628: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30629: LD_ADDR_OWVAR 31
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_INT 30
30639: PUSH
30640: LD_INT 30
30642: PUSH
30643: LD_INT 30
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: ST_TO_ADDR
// un := CreateHuman ;
30652: LD_ADDR_VAR 0 3
30656: PUSH
30657: CALL_OW 44
30661: ST_TO_ADDR
// hc_noskilllimit := false ;
30662: LD_ADDR_OWVAR 76
30666: PUSH
30667: LD_INT 0
30669: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30670: LD_VAR 0 3
30674: PPUSH
30675: LD_INT 1
30677: PPUSH
30678: CALL_OW 51
// p := 0 ;
30682: LD_ADDR_VAR 0 2
30686: PUSH
30687: LD_INT 0
30689: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30690: LD_INT 35
30692: PPUSH
30693: CALL_OW 67
// p := p + 1 ;
30697: LD_ADDR_VAR 0 2
30701: PUSH
30702: LD_VAR 0 2
30706: PUSH
30707: LD_INT 1
30709: PLUS
30710: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30711: LD_VAR 0 3
30715: PPUSH
30716: CALL_OW 256
30720: PUSH
30721: LD_INT 1000
30723: LESS
30724: IFFALSE 30738
// SetLives ( un , 1000 ) ;
30726: LD_VAR 0 3
30730: PPUSH
30731: LD_INT 1000
30733: PPUSH
30734: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30738: LD_VAR 0 3
30742: PPUSH
30743: LD_INT 81
30745: PUSH
30746: LD_OWVAR 2
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 91
30757: PUSH
30758: LD_VAR 0 3
30762: PUSH
30763: LD_INT 30
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PPUSH
30775: CALL_OW 69
30779: PPUSH
30780: LD_VAR 0 3
30784: PPUSH
30785: CALL_OW 74
30789: PPUSH
30790: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30794: LD_VAR 0 2
30798: PUSH
30799: LD_INT 60
30801: GREATER
30802: PUSH
30803: LD_VAR 0 3
30807: PPUSH
30808: CALL_OW 301
30812: OR
30813: IFFALSE 30690
// if un then
30815: LD_VAR 0 3
30819: IFFALSE 30830
// RemoveUnit ( un ) ;
30821: LD_VAR 0 3
30825: PPUSH
30826: CALL_OW 64
// end ;
30830: PPOPN 3
30832: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30833: LD_INT 0
30835: PPUSH
// case cmd of 301 :
30836: LD_VAR 0 1
30840: PUSH
30841: LD_INT 301
30843: DOUBLE
30844: EQUAL
30845: IFTRUE 30849
30847: GO 30881
30849: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30850: LD_VAR 0 6
30854: PPUSH
30855: LD_VAR 0 7
30859: PPUSH
30860: LD_VAR 0 8
30864: PPUSH
30865: LD_VAR 0 4
30869: PPUSH
30870: LD_VAR 0 5
30874: PPUSH
30875: CALL 32082 0 5
30879: GO 31002
30881: LD_INT 302
30883: DOUBLE
30884: EQUAL
30885: IFTRUE 30889
30887: GO 30926
30889: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30890: LD_VAR 0 6
30894: PPUSH
30895: LD_VAR 0 7
30899: PPUSH
30900: LD_VAR 0 8
30904: PPUSH
30905: LD_VAR 0 9
30909: PPUSH
30910: LD_VAR 0 4
30914: PPUSH
30915: LD_VAR 0 5
30919: PPUSH
30920: CALL 32173 0 6
30924: GO 31002
30926: LD_INT 303
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30934
30932: GO 30971
30934: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30935: LD_VAR 0 6
30939: PPUSH
30940: LD_VAR 0 7
30944: PPUSH
30945: LD_VAR 0 8
30949: PPUSH
30950: LD_VAR 0 9
30954: PPUSH
30955: LD_VAR 0 4
30959: PPUSH
30960: LD_VAR 0 5
30964: PPUSH
30965: CALL 31007 0 6
30969: GO 31002
30971: LD_INT 304
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 31001
30979: POP
// hHackTeleport ( unit , x , y ) ; end ;
30980: LD_VAR 0 2
30984: PPUSH
30985: LD_VAR 0 4
30989: PPUSH
30990: LD_VAR 0 5
30994: PPUSH
30995: CALL 32766 0 3
30999: GO 31002
31001: POP
// end ;
31002: LD_VAR 0 12
31006: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31007: LD_INT 0
31009: PPUSH
31010: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31011: LD_VAR 0 1
31015: PUSH
31016: LD_INT 1
31018: LESS
31019: PUSH
31020: LD_VAR 0 1
31024: PUSH
31025: LD_INT 3
31027: GREATER
31028: OR
31029: PUSH
31030: LD_VAR 0 5
31034: PPUSH
31035: LD_VAR 0 6
31039: PPUSH
31040: CALL_OW 428
31044: OR
31045: IFFALSE 31049
// exit ;
31047: GO 31769
// uc_side := your_side ;
31049: LD_ADDR_OWVAR 20
31053: PUSH
31054: LD_OWVAR 2
31058: ST_TO_ADDR
// uc_nation := nation ;
31059: LD_ADDR_OWVAR 21
31063: PUSH
31064: LD_VAR 0 1
31068: ST_TO_ADDR
// bc_level = 1 ;
31069: LD_ADDR_OWVAR 43
31073: PUSH
31074: LD_INT 1
31076: ST_TO_ADDR
// case btype of 1 :
31077: LD_VAR 0 2
31081: PUSH
31082: LD_INT 1
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31101
31090: POP
// bc_type := b_depot ; 2 :
31091: LD_ADDR_OWVAR 42
31095: PUSH
31096: LD_INT 0
31098: ST_TO_ADDR
31099: GO 31713
31101: LD_INT 2
31103: DOUBLE
31104: EQUAL
31105: IFTRUE 31109
31107: GO 31120
31109: POP
// bc_type := b_warehouse ; 3 :
31110: LD_ADDR_OWVAR 42
31114: PUSH
31115: LD_INT 1
31117: ST_TO_ADDR
31118: GO 31713
31120: LD_INT 3
31122: DOUBLE
31123: EQUAL
31124: IFTRUE 31128
31126: GO 31139
31128: POP
// bc_type := b_lab ; 4 .. 9 :
31129: LD_ADDR_OWVAR 42
31133: PUSH
31134: LD_INT 6
31136: ST_TO_ADDR
31137: GO 31713
31139: LD_INT 4
31141: DOUBLE
31142: GREATEREQUAL
31143: IFFALSE 31151
31145: LD_INT 9
31147: DOUBLE
31148: LESSEQUAL
31149: IFTRUE 31153
31151: GO 31205
31153: POP
// begin bc_type := b_lab_half ;
31154: LD_ADDR_OWVAR 42
31158: PUSH
31159: LD_INT 7
31161: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31162: LD_ADDR_OWVAR 44
31166: PUSH
31167: LD_INT 10
31169: PUSH
31170: LD_INT 11
31172: PUSH
31173: LD_INT 12
31175: PUSH
31176: LD_INT 15
31178: PUSH
31179: LD_INT 14
31181: PUSH
31182: LD_INT 13
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: PUSH
31193: LD_VAR 0 2
31197: PUSH
31198: LD_INT 3
31200: MINUS
31201: ARRAY
31202: ST_TO_ADDR
// end ; 10 .. 13 :
31203: GO 31713
31205: LD_INT 10
31207: DOUBLE
31208: GREATEREQUAL
31209: IFFALSE 31217
31211: LD_INT 13
31213: DOUBLE
31214: LESSEQUAL
31215: IFTRUE 31219
31217: GO 31296
31219: POP
// begin bc_type := b_lab_full ;
31220: LD_ADDR_OWVAR 42
31224: PUSH
31225: LD_INT 8
31227: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31228: LD_ADDR_OWVAR 44
31232: PUSH
31233: LD_INT 10
31235: PUSH
31236: LD_INT 12
31238: PUSH
31239: LD_INT 14
31241: PUSH
31242: LD_INT 13
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: PUSH
31251: LD_VAR 0 2
31255: PUSH
31256: LD_INT 9
31258: MINUS
31259: ARRAY
31260: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31261: LD_ADDR_OWVAR 45
31265: PUSH
31266: LD_INT 11
31268: PUSH
31269: LD_INT 15
31271: PUSH
31272: LD_INT 12
31274: PUSH
31275: LD_INT 15
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: PUSH
31284: LD_VAR 0 2
31288: PUSH
31289: LD_INT 9
31291: MINUS
31292: ARRAY
31293: ST_TO_ADDR
// end ; 14 :
31294: GO 31713
31296: LD_INT 14
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31315
31304: POP
// bc_type := b_workshop ; 15 :
31305: LD_ADDR_OWVAR 42
31309: PUSH
31310: LD_INT 2
31312: ST_TO_ADDR
31313: GO 31713
31315: LD_INT 15
31317: DOUBLE
31318: EQUAL
31319: IFTRUE 31323
31321: GO 31334
31323: POP
// bc_type := b_factory ; 16 :
31324: LD_ADDR_OWVAR 42
31328: PUSH
31329: LD_INT 3
31331: ST_TO_ADDR
31332: GO 31713
31334: LD_INT 16
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31353
31342: POP
// bc_type := b_ext_gun ; 17 :
31343: LD_ADDR_OWVAR 42
31347: PUSH
31348: LD_INT 17
31350: ST_TO_ADDR
31351: GO 31713
31353: LD_INT 17
31355: DOUBLE
31356: EQUAL
31357: IFTRUE 31361
31359: GO 31389
31361: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31362: LD_ADDR_OWVAR 42
31366: PUSH
31367: LD_INT 19
31369: PUSH
31370: LD_INT 23
31372: PUSH
31373: LD_INT 19
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: PUSH
31381: LD_VAR 0 1
31385: ARRAY
31386: ST_TO_ADDR
31387: GO 31713
31389: LD_INT 18
31391: DOUBLE
31392: EQUAL
31393: IFTRUE 31397
31395: GO 31408
31397: POP
// bc_type := b_ext_radar ; 19 :
31398: LD_ADDR_OWVAR 42
31402: PUSH
31403: LD_INT 20
31405: ST_TO_ADDR
31406: GO 31713
31408: LD_INT 19
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31427
31416: POP
// bc_type := b_ext_radio ; 20 :
31417: LD_ADDR_OWVAR 42
31421: PUSH
31422: LD_INT 22
31424: ST_TO_ADDR
31425: GO 31713
31427: LD_INT 20
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31446
31435: POP
// bc_type := b_ext_siberium ; 21 :
31436: LD_ADDR_OWVAR 42
31440: PUSH
31441: LD_INT 21
31443: ST_TO_ADDR
31444: GO 31713
31446: LD_INT 21
31448: DOUBLE
31449: EQUAL
31450: IFTRUE 31454
31452: GO 31465
31454: POP
// bc_type := b_ext_computer ; 22 :
31455: LD_ADDR_OWVAR 42
31459: PUSH
31460: LD_INT 24
31462: ST_TO_ADDR
31463: GO 31713
31465: LD_INT 22
31467: DOUBLE
31468: EQUAL
31469: IFTRUE 31473
31471: GO 31484
31473: POP
// bc_type := b_ext_track ; 23 :
31474: LD_ADDR_OWVAR 42
31478: PUSH
31479: LD_INT 16
31481: ST_TO_ADDR
31482: GO 31713
31484: LD_INT 23
31486: DOUBLE
31487: EQUAL
31488: IFTRUE 31492
31490: GO 31503
31492: POP
// bc_type := b_ext_laser ; 24 :
31493: LD_ADDR_OWVAR 42
31497: PUSH
31498: LD_INT 25
31500: ST_TO_ADDR
31501: GO 31713
31503: LD_INT 24
31505: DOUBLE
31506: EQUAL
31507: IFTRUE 31511
31509: GO 31522
31511: POP
// bc_type := b_control_tower ; 25 :
31512: LD_ADDR_OWVAR 42
31516: PUSH
31517: LD_INT 36
31519: ST_TO_ADDR
31520: GO 31713
31522: LD_INT 25
31524: DOUBLE
31525: EQUAL
31526: IFTRUE 31530
31528: GO 31541
31530: POP
// bc_type := b_breastwork ; 26 :
31531: LD_ADDR_OWVAR 42
31535: PUSH
31536: LD_INT 31
31538: ST_TO_ADDR
31539: GO 31713
31541: LD_INT 26
31543: DOUBLE
31544: EQUAL
31545: IFTRUE 31549
31547: GO 31560
31549: POP
// bc_type := b_bunker ; 27 :
31550: LD_ADDR_OWVAR 42
31554: PUSH
31555: LD_INT 32
31557: ST_TO_ADDR
31558: GO 31713
31560: LD_INT 27
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31579
31568: POP
// bc_type := b_turret ; 28 :
31569: LD_ADDR_OWVAR 42
31573: PUSH
31574: LD_INT 33
31576: ST_TO_ADDR
31577: GO 31713
31579: LD_INT 28
31581: DOUBLE
31582: EQUAL
31583: IFTRUE 31587
31585: GO 31598
31587: POP
// bc_type := b_armoury ; 29 :
31588: LD_ADDR_OWVAR 42
31592: PUSH
31593: LD_INT 4
31595: ST_TO_ADDR
31596: GO 31713
31598: LD_INT 29
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31617
31606: POP
// bc_type := b_barracks ; 30 :
31607: LD_ADDR_OWVAR 42
31611: PUSH
31612: LD_INT 5
31614: ST_TO_ADDR
31615: GO 31713
31617: LD_INT 30
31619: DOUBLE
31620: EQUAL
31621: IFTRUE 31625
31623: GO 31636
31625: POP
// bc_type := b_solar_power ; 31 :
31626: LD_ADDR_OWVAR 42
31630: PUSH
31631: LD_INT 27
31633: ST_TO_ADDR
31634: GO 31713
31636: LD_INT 31
31638: DOUBLE
31639: EQUAL
31640: IFTRUE 31644
31642: GO 31655
31644: POP
// bc_type := b_oil_power ; 32 :
31645: LD_ADDR_OWVAR 42
31649: PUSH
31650: LD_INT 26
31652: ST_TO_ADDR
31653: GO 31713
31655: LD_INT 32
31657: DOUBLE
31658: EQUAL
31659: IFTRUE 31663
31661: GO 31674
31663: POP
// bc_type := b_siberite_power ; 33 :
31664: LD_ADDR_OWVAR 42
31668: PUSH
31669: LD_INT 28
31671: ST_TO_ADDR
31672: GO 31713
31674: LD_INT 33
31676: DOUBLE
31677: EQUAL
31678: IFTRUE 31682
31680: GO 31693
31682: POP
// bc_type := b_oil_mine ; 34 :
31683: LD_ADDR_OWVAR 42
31687: PUSH
31688: LD_INT 29
31690: ST_TO_ADDR
31691: GO 31713
31693: LD_INT 34
31695: DOUBLE
31696: EQUAL
31697: IFTRUE 31701
31699: GO 31712
31701: POP
// bc_type := b_siberite_mine ; end ;
31702: LD_ADDR_OWVAR 42
31706: PUSH
31707: LD_INT 30
31709: ST_TO_ADDR
31710: GO 31713
31712: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31713: LD_ADDR_VAR 0 8
31717: PUSH
31718: LD_VAR 0 5
31722: PPUSH
31723: LD_VAR 0 6
31727: PPUSH
31728: LD_VAR 0 3
31732: PPUSH
31733: CALL_OW 47
31737: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31738: LD_OWVAR 42
31742: PUSH
31743: LD_INT 32
31745: PUSH
31746: LD_INT 33
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: IN
31753: IFFALSE 31769
// PlaceWeaponTurret ( b , weapon ) ;
31755: LD_VAR 0 8
31759: PPUSH
31760: LD_VAR 0 4
31764: PPUSH
31765: CALL_OW 431
// end ;
31769: LD_VAR 0 7
31773: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31774: LD_INT 0
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31780: LD_ADDR_VAR 0 4
31784: PUSH
31785: LD_INT 22
31787: PUSH
31788: LD_OWVAR 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: LD_INT 30
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 30
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PPUSH
31829: CALL_OW 69
31833: ST_TO_ADDR
// if not tmp then
31834: LD_VAR 0 4
31838: NOT
31839: IFFALSE 31843
// exit ;
31841: GO 31902
// for i in tmp do
31843: LD_ADDR_VAR 0 2
31847: PUSH
31848: LD_VAR 0 4
31852: PUSH
31853: FOR_IN
31854: IFFALSE 31900
// for j = 1 to 3 do
31856: LD_ADDR_VAR 0 3
31860: PUSH
31861: DOUBLE
31862: LD_INT 1
31864: DEC
31865: ST_TO_ADDR
31866: LD_INT 3
31868: PUSH
31869: FOR_TO
31870: IFFALSE 31896
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31872: LD_VAR 0 2
31876: PPUSH
31877: CALL_OW 274
31881: PPUSH
31882: LD_VAR 0 3
31886: PPUSH
31887: LD_INT 99999
31889: PPUSH
31890: CALL_OW 277
31894: GO 31869
31896: POP
31897: POP
31898: GO 31853
31900: POP
31901: POP
// end ;
31902: LD_VAR 0 1
31906: RET
// export function hHackSetLevel10 ; var i , j ; begin
31907: LD_INT 0
31909: PPUSH
31910: PPUSH
31911: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31912: LD_ADDR_VAR 0 2
31916: PUSH
31917: LD_INT 21
31919: PUSH
31920: LD_INT 1
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PPUSH
31927: CALL_OW 69
31931: PUSH
31932: FOR_IN
31933: IFFALSE 31985
// if IsSelected ( i ) then
31935: LD_VAR 0 2
31939: PPUSH
31940: CALL_OW 306
31944: IFFALSE 31983
// begin for j := 1 to 4 do
31946: LD_ADDR_VAR 0 3
31950: PUSH
31951: DOUBLE
31952: LD_INT 1
31954: DEC
31955: ST_TO_ADDR
31956: LD_INT 4
31958: PUSH
31959: FOR_TO
31960: IFFALSE 31981
// SetSkill ( i , j , 10 ) ;
31962: LD_VAR 0 2
31966: PPUSH
31967: LD_VAR 0 3
31971: PPUSH
31972: LD_INT 10
31974: PPUSH
31975: CALL_OW 237
31979: GO 31959
31981: POP
31982: POP
// end ;
31983: GO 31932
31985: POP
31986: POP
// end ;
31987: LD_VAR 0 1
31991: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31992: LD_INT 0
31994: PPUSH
31995: PPUSH
31996: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31997: LD_ADDR_VAR 0 2
32001: PUSH
32002: LD_INT 22
32004: PUSH
32005: LD_OWVAR 2
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 21
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PPUSH
32028: CALL_OW 69
32032: PUSH
32033: FOR_IN
32034: IFFALSE 32075
// begin for j := 1 to 4 do
32036: LD_ADDR_VAR 0 3
32040: PUSH
32041: DOUBLE
32042: LD_INT 1
32044: DEC
32045: ST_TO_ADDR
32046: LD_INT 4
32048: PUSH
32049: FOR_TO
32050: IFFALSE 32071
// SetSkill ( i , j , 10 ) ;
32052: LD_VAR 0 2
32056: PPUSH
32057: LD_VAR 0 3
32061: PPUSH
32062: LD_INT 10
32064: PPUSH
32065: CALL_OW 237
32069: GO 32049
32071: POP
32072: POP
// end ;
32073: GO 32033
32075: POP
32076: POP
// end ;
32077: LD_VAR 0 1
32081: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32082: LD_INT 0
32084: PPUSH
// uc_side := your_side ;
32085: LD_ADDR_OWVAR 20
32089: PUSH
32090: LD_OWVAR 2
32094: ST_TO_ADDR
// uc_nation := nation ;
32095: LD_ADDR_OWVAR 21
32099: PUSH
32100: LD_VAR 0 1
32104: ST_TO_ADDR
// InitHc ;
32105: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32109: LD_INT 0
32111: PPUSH
32112: LD_VAR 0 2
32116: PPUSH
32117: LD_VAR 0 3
32121: PPUSH
32122: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32126: LD_VAR 0 4
32130: PPUSH
32131: LD_VAR 0 5
32135: PPUSH
32136: CALL_OW 428
32140: PUSH
32141: LD_INT 0
32143: EQUAL
32144: IFFALSE 32168
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32146: CALL_OW 44
32150: PPUSH
32151: LD_VAR 0 4
32155: PPUSH
32156: LD_VAR 0 5
32160: PPUSH
32161: LD_INT 1
32163: PPUSH
32164: CALL_OW 48
// end ;
32168: LD_VAR 0 6
32172: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32173: LD_INT 0
32175: PPUSH
32176: PPUSH
// uc_side := your_side ;
32177: LD_ADDR_OWVAR 20
32181: PUSH
32182: LD_OWVAR 2
32186: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32187: LD_VAR 0 1
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: IN
32214: IFFALSE 32226
// uc_nation := nation_american else
32216: LD_ADDR_OWVAR 21
32220: PUSH
32221: LD_INT 1
32223: ST_TO_ADDR
32224: GO 32269
// if chassis in [ 11 , 12 , 13 , 14 ] then
32226: LD_VAR 0 1
32230: PUSH
32231: LD_INT 11
32233: PUSH
32234: LD_INT 12
32236: PUSH
32237: LD_INT 13
32239: PUSH
32240: LD_INT 14
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: IN
32249: IFFALSE 32261
// uc_nation := nation_arabian else
32251: LD_ADDR_OWVAR 21
32255: PUSH
32256: LD_INT 2
32258: ST_TO_ADDR
32259: GO 32269
// uc_nation := nation_russian ;
32261: LD_ADDR_OWVAR 21
32265: PUSH
32266: LD_INT 3
32268: ST_TO_ADDR
// vc_chassis := chassis ;
32269: LD_ADDR_OWVAR 37
32273: PUSH
32274: LD_VAR 0 1
32278: ST_TO_ADDR
// vc_engine := engine ;
32279: LD_ADDR_OWVAR 39
32283: PUSH
32284: LD_VAR 0 2
32288: ST_TO_ADDR
// vc_control := control ;
32289: LD_ADDR_OWVAR 38
32293: PUSH
32294: LD_VAR 0 3
32298: ST_TO_ADDR
// vc_weapon := weapon ;
32299: LD_ADDR_OWVAR 40
32303: PUSH
32304: LD_VAR 0 4
32308: ST_TO_ADDR
// un := CreateVehicle ;
32309: LD_ADDR_VAR 0 8
32313: PUSH
32314: CALL_OW 45
32318: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32319: LD_VAR 0 8
32323: PPUSH
32324: LD_INT 0
32326: PPUSH
32327: LD_INT 5
32329: PPUSH
32330: CALL_OW 12
32334: PPUSH
32335: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32339: LD_VAR 0 8
32343: PPUSH
32344: LD_VAR 0 5
32348: PPUSH
32349: LD_VAR 0 6
32353: PPUSH
32354: LD_INT 1
32356: PPUSH
32357: CALL_OW 48
// end ;
32361: LD_VAR 0 7
32365: RET
// export hInvincible ; every 1 do
32366: GO 32368
32368: DISABLE
// hInvincible := [ ] ;
32369: LD_ADDR_EXP 125
32373: PUSH
32374: EMPTY
32375: ST_TO_ADDR
32376: END
// every 10 do var i ;
32377: GO 32379
32379: DISABLE
32380: LD_INT 0
32382: PPUSH
// begin enable ;
32383: ENABLE
// if not hInvincible then
32384: LD_EXP 125
32388: NOT
32389: IFFALSE 32393
// exit ;
32391: GO 32437
// for i in hInvincible do
32393: LD_ADDR_VAR 0 1
32397: PUSH
32398: LD_EXP 125
32402: PUSH
32403: FOR_IN
32404: IFFALSE 32435
// if GetLives ( i ) < 1000 then
32406: LD_VAR 0 1
32410: PPUSH
32411: CALL_OW 256
32415: PUSH
32416: LD_INT 1000
32418: LESS
32419: IFFALSE 32433
// SetLives ( i , 1000 ) ;
32421: LD_VAR 0 1
32425: PPUSH
32426: LD_INT 1000
32428: PPUSH
32429: CALL_OW 234
32433: GO 32403
32435: POP
32436: POP
// end ;
32437: PPOPN 1
32439: END
// export function hHackInvincible ; var i ; begin
32440: LD_INT 0
32442: PPUSH
32443: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32444: LD_ADDR_VAR 0 2
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: LD_INT 21
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 21
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: PPUSH
32477: CALL_OW 69
32481: PUSH
32482: FOR_IN
32483: IFFALSE 32544
// if IsSelected ( i ) then
32485: LD_VAR 0 2
32489: PPUSH
32490: CALL_OW 306
32494: IFFALSE 32542
// begin if i in hInvincible then
32496: LD_VAR 0 2
32500: PUSH
32501: LD_EXP 125
32505: IN
32506: IFFALSE 32526
// hInvincible := hInvincible diff i else
32508: LD_ADDR_EXP 125
32512: PUSH
32513: LD_EXP 125
32517: PUSH
32518: LD_VAR 0 2
32522: DIFF
32523: ST_TO_ADDR
32524: GO 32542
// hInvincible := hInvincible union i ;
32526: LD_ADDR_EXP 125
32530: PUSH
32531: LD_EXP 125
32535: PUSH
32536: LD_VAR 0 2
32540: UNION
32541: ST_TO_ADDR
// end ;
32542: GO 32482
32544: POP
32545: POP
// end ;
32546: LD_VAR 0 1
32550: RET
// export function hHackInvisible ; var i , j ; begin
32551: LD_INT 0
32553: PPUSH
32554: PPUSH
32555: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32556: LD_ADDR_VAR 0 2
32560: PUSH
32561: LD_INT 21
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PPUSH
32571: CALL_OW 69
32575: PUSH
32576: FOR_IN
32577: IFFALSE 32601
// if IsSelected ( i ) then
32579: LD_VAR 0 2
32583: PPUSH
32584: CALL_OW 306
32588: IFFALSE 32599
// ComForceInvisible ( i ) ;
32590: LD_VAR 0 2
32594: PPUSH
32595: CALL_OW 496
32599: GO 32576
32601: POP
32602: POP
// end ;
32603: LD_VAR 0 1
32607: RET
// export function hHackChangeYourSide ; begin
32608: LD_INT 0
32610: PPUSH
// if your_side = 8 then
32611: LD_OWVAR 2
32615: PUSH
32616: LD_INT 8
32618: EQUAL
32619: IFFALSE 32631
// your_side := 0 else
32621: LD_ADDR_OWVAR 2
32625: PUSH
32626: LD_INT 0
32628: ST_TO_ADDR
32629: GO 32645
// your_side := your_side + 1 ;
32631: LD_ADDR_OWVAR 2
32635: PUSH
32636: LD_OWVAR 2
32640: PUSH
32641: LD_INT 1
32643: PLUS
32644: ST_TO_ADDR
// end ;
32645: LD_VAR 0 1
32649: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32650: LD_INT 0
32652: PPUSH
32653: PPUSH
32654: PPUSH
// for i in all_units do
32655: LD_ADDR_VAR 0 2
32659: PUSH
32660: LD_OWVAR 3
32664: PUSH
32665: FOR_IN
32666: IFFALSE 32744
// if IsSelected ( i ) then
32668: LD_VAR 0 2
32672: PPUSH
32673: CALL_OW 306
32677: IFFALSE 32742
// begin j := GetSide ( i ) ;
32679: LD_ADDR_VAR 0 3
32683: PUSH
32684: LD_VAR 0 2
32688: PPUSH
32689: CALL_OW 255
32693: ST_TO_ADDR
// if j = 8 then
32694: LD_VAR 0 3
32698: PUSH
32699: LD_INT 8
32701: EQUAL
32702: IFFALSE 32714
// j := 0 else
32704: LD_ADDR_VAR 0 3
32708: PUSH
32709: LD_INT 0
32711: ST_TO_ADDR
32712: GO 32728
// j := j + 1 ;
32714: LD_ADDR_VAR 0 3
32718: PUSH
32719: LD_VAR 0 3
32723: PUSH
32724: LD_INT 1
32726: PLUS
32727: ST_TO_ADDR
// SetSide ( i , j ) ;
32728: LD_VAR 0 2
32732: PPUSH
32733: LD_VAR 0 3
32737: PPUSH
32738: CALL_OW 235
// end ;
32742: GO 32665
32744: POP
32745: POP
// end ;
32746: LD_VAR 0 1
32750: RET
// export function hHackFog ; begin
32751: LD_INT 0
32753: PPUSH
// FogOff ( true ) ;
32754: LD_INT 1
32756: PPUSH
32757: CALL_OW 344
// end ;
32761: LD_VAR 0 1
32765: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32766: LD_INT 0
32768: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32769: LD_VAR 0 1
32773: PPUSH
32774: LD_VAR 0 2
32778: PPUSH
32779: LD_VAR 0 3
32783: PPUSH
32784: LD_INT 1
32786: PPUSH
32787: LD_INT 1
32789: PPUSH
32790: CALL_OW 483
// CenterOnXY ( x , y ) ;
32794: LD_VAR 0 2
32798: PPUSH
32799: LD_VAR 0 3
32803: PPUSH
32804: CALL_OW 84
// end ; end_of_file
32808: LD_VAR 0 4
32812: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32813: LD_INT 0
32815: PPUSH
32816: PPUSH
32817: PPUSH
32818: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32819: LD_VAR 0 1
32823: PPUSH
32824: CALL_OW 264
32828: PUSH
32829: LD_EXP 56
32833: EQUAL
32834: IFFALSE 32906
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32836: LD_INT 68
32838: PPUSH
32839: LD_VAR 0 1
32843: PPUSH
32844: CALL_OW 255
32848: PPUSH
32849: CALL_OW 321
32853: PUSH
32854: LD_INT 2
32856: EQUAL
32857: IFFALSE 32869
// eff := 70 else
32859: LD_ADDR_VAR 0 4
32863: PUSH
32864: LD_INT 70
32866: ST_TO_ADDR
32867: GO 32877
// eff := 30 ;
32869: LD_ADDR_VAR 0 4
32873: PUSH
32874: LD_INT 30
32876: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL_OW 250
32886: PPUSH
32887: LD_VAR 0 1
32891: PPUSH
32892: CALL_OW 251
32896: PPUSH
32897: LD_VAR 0 4
32901: PPUSH
32902: CALL_OW 495
// end ; end ;
32906: LD_VAR 0 2
32910: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32911: LD_INT 0
32913: PPUSH
// end ;
32914: LD_VAR 0 4
32918: RET
// export function SOS_Command ( cmd ) ; begin
32919: LD_INT 0
32921: PPUSH
// end ;
32922: LD_VAR 0 2
32926: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32927: LD_INT 0
32929: PPUSH
// if cmd = 121 then
32930: LD_VAR 0 1
32934: PUSH
32935: LD_INT 121
32937: EQUAL
32938: IFFALSE 32940
// end ;
32940: LD_VAR 0 6
32944: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32945: LD_INT 0
32947: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32948: LD_VAR 0 1
32952: PUSH
32953: LD_INT 250
32955: EQUAL
32956: PUSH
32957: LD_VAR 0 2
32961: PPUSH
32962: CALL_OW 264
32966: PUSH
32967: LD_EXP 59
32971: EQUAL
32972: AND
32973: IFFALSE 32994
// MinerPlaceMine ( unit , x , y ) ;
32975: LD_VAR 0 2
32979: PPUSH
32980: LD_VAR 0 4
32984: PPUSH
32985: LD_VAR 0 5
32989: PPUSH
32990: CALL 35343 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32994: LD_VAR 0 1
32998: PUSH
32999: LD_INT 251
33001: EQUAL
33002: PUSH
33003: LD_VAR 0 2
33007: PPUSH
33008: CALL_OW 264
33012: PUSH
33013: LD_EXP 59
33017: EQUAL
33018: AND
33019: IFFALSE 33040
// MinerDetonateMine ( unit , x , y ) ;
33021: LD_VAR 0 2
33025: PPUSH
33026: LD_VAR 0 4
33030: PPUSH
33031: LD_VAR 0 5
33035: PPUSH
33036: CALL 35620 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33040: LD_VAR 0 1
33044: PUSH
33045: LD_INT 252
33047: EQUAL
33048: PUSH
33049: LD_VAR 0 2
33053: PPUSH
33054: CALL_OW 264
33058: PUSH
33059: LD_EXP 59
33063: EQUAL
33064: AND
33065: IFFALSE 33086
// MinerCreateMinefield ( unit , x , y ) ;
33067: LD_VAR 0 2
33071: PPUSH
33072: LD_VAR 0 4
33076: PPUSH
33077: LD_VAR 0 5
33081: PPUSH
33082: CALL 36037 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33086: LD_VAR 0 1
33090: PUSH
33091: LD_INT 253
33093: EQUAL
33094: PUSH
33095: LD_VAR 0 2
33099: PPUSH
33100: CALL_OW 257
33104: PUSH
33105: LD_INT 5
33107: EQUAL
33108: AND
33109: IFFALSE 33130
// ComBinocular ( unit , x , y ) ;
33111: LD_VAR 0 2
33115: PPUSH
33116: LD_VAR 0 4
33120: PPUSH
33121: LD_VAR 0 5
33125: PPUSH
33126: CALL 36408 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33130: LD_VAR 0 1
33134: PUSH
33135: LD_INT 254
33137: EQUAL
33138: PUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: CALL_OW 264
33148: PUSH
33149: LD_EXP 54
33153: EQUAL
33154: AND
33155: PUSH
33156: LD_VAR 0 3
33160: PPUSH
33161: CALL_OW 263
33165: PUSH
33166: LD_INT 3
33168: EQUAL
33169: AND
33170: IFFALSE 33186
// HackDestroyVehicle ( unit , selectedUnit ) ;
33172: LD_VAR 0 2
33176: PPUSH
33177: LD_VAR 0 3
33181: PPUSH
33182: CALL 34703 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33186: LD_VAR 0 1
33190: PUSH
33191: LD_INT 255
33193: EQUAL
33194: PUSH
33195: LD_VAR 0 2
33199: PPUSH
33200: CALL_OW 264
33204: PUSH
33205: LD_INT 14
33207: PUSH
33208: LD_INT 53
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: IN
33215: AND
33216: PUSH
33217: LD_VAR 0 4
33221: PPUSH
33222: LD_VAR 0 5
33226: PPUSH
33227: CALL_OW 488
33231: AND
33232: IFFALSE 33256
// CutTreeXYR ( unit , x , y , 12 ) ;
33234: LD_VAR 0 2
33238: PPUSH
33239: LD_VAR 0 4
33243: PPUSH
33244: LD_VAR 0 5
33248: PPUSH
33249: LD_INT 12
33251: PPUSH
33252: CALL 33269 0 4
// end ;
33256: LD_VAR 0 6
33260: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33261: LD_INT 0
33263: PPUSH
// end ;
33264: LD_VAR 0 4
33268: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33269: LD_INT 0
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33280: LD_VAR 0 1
33284: NOT
33285: PUSH
33286: LD_VAR 0 2
33290: PPUSH
33291: LD_VAR 0 3
33295: PPUSH
33296: CALL_OW 488
33300: NOT
33301: OR
33302: PUSH
33303: LD_VAR 0 4
33307: NOT
33308: OR
33309: IFFALSE 33313
// exit ;
33311: GO 33653
// list := [ ] ;
33313: LD_ADDR_VAR 0 13
33317: PUSH
33318: EMPTY
33319: ST_TO_ADDR
// if x - r < 0 then
33320: LD_VAR 0 2
33324: PUSH
33325: LD_VAR 0 4
33329: MINUS
33330: PUSH
33331: LD_INT 0
33333: LESS
33334: IFFALSE 33346
// min_x := 0 else
33336: LD_ADDR_VAR 0 7
33340: PUSH
33341: LD_INT 0
33343: ST_TO_ADDR
33344: GO 33362
// min_x := x - r ;
33346: LD_ADDR_VAR 0 7
33350: PUSH
33351: LD_VAR 0 2
33355: PUSH
33356: LD_VAR 0 4
33360: MINUS
33361: ST_TO_ADDR
// if y - r < 0 then
33362: LD_VAR 0 3
33366: PUSH
33367: LD_VAR 0 4
33371: MINUS
33372: PUSH
33373: LD_INT 0
33375: LESS
33376: IFFALSE 33388
// min_y := 0 else
33378: LD_ADDR_VAR 0 8
33382: PUSH
33383: LD_INT 0
33385: ST_TO_ADDR
33386: GO 33404
// min_y := y - r ;
33388: LD_ADDR_VAR 0 8
33392: PUSH
33393: LD_VAR 0 3
33397: PUSH
33398: LD_VAR 0 4
33402: MINUS
33403: ST_TO_ADDR
// max_x := x + r ;
33404: LD_ADDR_VAR 0 9
33408: PUSH
33409: LD_VAR 0 2
33413: PUSH
33414: LD_VAR 0 4
33418: PLUS
33419: ST_TO_ADDR
// max_y := y + r ;
33420: LD_ADDR_VAR 0 10
33424: PUSH
33425: LD_VAR 0 3
33429: PUSH
33430: LD_VAR 0 4
33434: PLUS
33435: ST_TO_ADDR
// for _x = min_x to max_x do
33436: LD_ADDR_VAR 0 11
33440: PUSH
33441: DOUBLE
33442: LD_VAR 0 7
33446: DEC
33447: ST_TO_ADDR
33448: LD_VAR 0 9
33452: PUSH
33453: FOR_TO
33454: IFFALSE 33571
// for _y = min_y to max_y do
33456: LD_ADDR_VAR 0 12
33460: PUSH
33461: DOUBLE
33462: LD_VAR 0 8
33466: DEC
33467: ST_TO_ADDR
33468: LD_VAR 0 10
33472: PUSH
33473: FOR_TO
33474: IFFALSE 33567
// begin if not ValidHex ( _x , _y ) then
33476: LD_VAR 0 11
33480: PPUSH
33481: LD_VAR 0 12
33485: PPUSH
33486: CALL_OW 488
33490: NOT
33491: IFFALSE 33495
// continue ;
33493: GO 33473
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33495: LD_VAR 0 11
33499: PPUSH
33500: LD_VAR 0 12
33504: PPUSH
33505: CALL_OW 351
33509: PUSH
33510: LD_VAR 0 11
33514: PPUSH
33515: LD_VAR 0 12
33519: PPUSH
33520: CALL_OW 554
33524: AND
33525: IFFALSE 33565
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33527: LD_ADDR_VAR 0 13
33531: PUSH
33532: LD_VAR 0 13
33536: PPUSH
33537: LD_VAR 0 13
33541: PUSH
33542: LD_INT 1
33544: PLUS
33545: PPUSH
33546: LD_VAR 0 11
33550: PUSH
33551: LD_VAR 0 12
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PPUSH
33560: CALL_OW 2
33564: ST_TO_ADDR
// end ;
33565: GO 33473
33567: POP
33568: POP
33569: GO 33453
33571: POP
33572: POP
// if not list then
33573: LD_VAR 0 13
33577: NOT
33578: IFFALSE 33582
// exit ;
33580: GO 33653
// for i in list do
33582: LD_ADDR_VAR 0 6
33586: PUSH
33587: LD_VAR 0 13
33591: PUSH
33592: FOR_IN
33593: IFFALSE 33651
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33595: LD_VAR 0 1
33599: PPUSH
33600: LD_STRING M
33602: PUSH
33603: LD_VAR 0 6
33607: PUSH
33608: LD_INT 1
33610: ARRAY
33611: PUSH
33612: LD_VAR 0 6
33616: PUSH
33617: LD_INT 2
33619: ARRAY
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: PUSH
33642: EMPTY
33643: LIST
33644: PPUSH
33645: CALL_OW 447
33649: GO 33592
33651: POP
33652: POP
// end ;
33653: LD_VAR 0 5
33657: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33658: LD_EXP 128
33662: NOT
33663: IFFALSE 33713
33665: GO 33667
33667: DISABLE
// begin initHack := true ;
33668: LD_ADDR_EXP 128
33672: PUSH
33673: LD_INT 1
33675: ST_TO_ADDR
// hackTanks := [ ] ;
33676: LD_ADDR_EXP 129
33680: PUSH
33681: EMPTY
33682: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33683: LD_ADDR_EXP 130
33687: PUSH
33688: EMPTY
33689: ST_TO_ADDR
// hackLimit := 3 ;
33690: LD_ADDR_EXP 131
33694: PUSH
33695: LD_INT 3
33697: ST_TO_ADDR
// hackDist := 12 ;
33698: LD_ADDR_EXP 132
33702: PUSH
33703: LD_INT 12
33705: ST_TO_ADDR
// hackCounter := [ ] ;
33706: LD_ADDR_EXP 133
33710: PUSH
33711: EMPTY
33712: ST_TO_ADDR
// end ;
33713: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33714: LD_EXP 128
33718: PUSH
33719: LD_INT 34
33721: PUSH
33722: LD_EXP 54
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PPUSH
33731: CALL_OW 69
33735: AND
33736: IFFALSE 33991
33738: GO 33740
33740: DISABLE
33741: LD_INT 0
33743: PPUSH
33744: PPUSH
// begin enable ;
33745: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33746: LD_ADDR_VAR 0 1
33750: PUSH
33751: LD_INT 34
33753: PUSH
33754: LD_EXP 54
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PPUSH
33763: CALL_OW 69
33767: PUSH
33768: FOR_IN
33769: IFFALSE 33989
// begin if not i in hackTanks then
33771: LD_VAR 0 1
33775: PUSH
33776: LD_EXP 129
33780: IN
33781: NOT
33782: IFFALSE 33865
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33784: LD_ADDR_EXP 129
33788: PUSH
33789: LD_EXP 129
33793: PPUSH
33794: LD_EXP 129
33798: PUSH
33799: LD_INT 1
33801: PLUS
33802: PPUSH
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL_OW 1
33812: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33813: LD_ADDR_EXP 130
33817: PUSH
33818: LD_EXP 130
33822: PPUSH
33823: LD_EXP 130
33827: PUSH
33828: LD_INT 1
33830: PLUS
33831: PPUSH
33832: EMPTY
33833: PPUSH
33834: CALL_OW 1
33838: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33839: LD_ADDR_EXP 133
33843: PUSH
33844: LD_EXP 133
33848: PPUSH
33849: LD_EXP 133
33853: PUSH
33854: LD_INT 1
33856: PLUS
33857: PPUSH
33858: EMPTY
33859: PPUSH
33860: CALL_OW 1
33864: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33865: LD_VAR 0 1
33869: PPUSH
33870: CALL_OW 302
33874: NOT
33875: IFFALSE 33888
// begin HackUnlinkAll ( i ) ;
33877: LD_VAR 0 1
33881: PPUSH
33882: CALL 33994 0 1
// continue ;
33886: GO 33768
// end ; HackCheckCapturedStatus ( i ) ;
33888: LD_VAR 0 1
33892: PPUSH
33893: CALL 34437 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33897: LD_ADDR_VAR 0 2
33901: PUSH
33902: LD_INT 81
33904: PUSH
33905: LD_VAR 0 1
33909: PPUSH
33910: CALL_OW 255
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 33
33921: PUSH
33922: LD_INT 3
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 91
33931: PUSH
33932: LD_VAR 0 1
33936: PUSH
33937: LD_EXP 132
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 50
33949: PUSH
33950: EMPTY
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: PPUSH
33959: CALL_OW 69
33963: ST_TO_ADDR
// if not tmp then
33964: LD_VAR 0 2
33968: NOT
33969: IFFALSE 33973
// continue ;
33971: GO 33768
// HackLink ( i , tmp ) ;
33973: LD_VAR 0 1
33977: PPUSH
33978: LD_VAR 0 2
33982: PPUSH
33983: CALL 34130 0 2
// end ;
33987: GO 33768
33989: POP
33990: POP
// end ;
33991: PPOPN 2
33993: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33994: LD_INT 0
33996: PPUSH
33997: PPUSH
33998: PPUSH
// if not hack in hackTanks then
33999: LD_VAR 0 1
34003: PUSH
34004: LD_EXP 129
34008: IN
34009: NOT
34010: IFFALSE 34014
// exit ;
34012: GO 34125
// index := GetElementIndex ( hackTanks , hack ) ;
34014: LD_ADDR_VAR 0 4
34018: PUSH
34019: LD_EXP 129
34023: PPUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: CALL 41599 0 2
34033: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34034: LD_EXP 130
34038: PUSH
34039: LD_VAR 0 4
34043: ARRAY
34044: IFFALSE 34125
// begin for i in hackTanksCaptured [ index ] do
34046: LD_ADDR_VAR 0 3
34050: PUSH
34051: LD_EXP 130
34055: PUSH
34056: LD_VAR 0 4
34060: ARRAY
34061: PUSH
34062: FOR_IN
34063: IFFALSE 34089
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34065: LD_VAR 0 3
34069: PUSH
34070: LD_INT 1
34072: ARRAY
34073: PPUSH
34074: LD_VAR 0 3
34078: PUSH
34079: LD_INT 2
34081: ARRAY
34082: PPUSH
34083: CALL_OW 235
34087: GO 34062
34089: POP
34090: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34091: LD_ADDR_EXP 130
34095: PUSH
34096: LD_EXP 130
34100: PPUSH
34101: LD_VAR 0 4
34105: PPUSH
34106: EMPTY
34107: PPUSH
34108: CALL_OW 1
34112: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34113: LD_VAR 0 1
34117: PPUSH
34118: LD_INT 0
34120: PPUSH
34121: CALL_OW 505
// end ; end ;
34125: LD_VAR 0 2
34129: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34130: LD_INT 0
34132: PPUSH
34133: PPUSH
34134: PPUSH
// if not hack in hackTanks or not vehicles then
34135: LD_VAR 0 1
34139: PUSH
34140: LD_EXP 129
34144: IN
34145: NOT
34146: PUSH
34147: LD_VAR 0 2
34151: NOT
34152: OR
34153: IFFALSE 34157
// exit ;
34155: GO 34432
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34157: LD_ADDR_VAR 0 2
34161: PUSH
34162: LD_VAR 0 1
34166: PPUSH
34167: LD_VAR 0 2
34171: PPUSH
34172: LD_INT 1
34174: PPUSH
34175: LD_INT 1
34177: PPUSH
34178: CALL 42249 0 4
34182: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34183: LD_ADDR_VAR 0 5
34187: PUSH
34188: LD_EXP 129
34192: PPUSH
34193: LD_VAR 0 1
34197: PPUSH
34198: CALL 41599 0 2
34202: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34203: LD_EXP 130
34207: PUSH
34208: LD_VAR 0 5
34212: ARRAY
34213: PUSH
34214: LD_EXP 131
34218: LESS
34219: IFFALSE 34408
// begin for i := 1 to vehicles do
34221: LD_ADDR_VAR 0 4
34225: PUSH
34226: DOUBLE
34227: LD_INT 1
34229: DEC
34230: ST_TO_ADDR
34231: LD_VAR 0 2
34235: PUSH
34236: FOR_TO
34237: IFFALSE 34406
// begin if hackTanksCaptured [ index ] = hackLimit then
34239: LD_EXP 130
34243: PUSH
34244: LD_VAR 0 5
34248: ARRAY
34249: PUSH
34250: LD_EXP 131
34254: EQUAL
34255: IFFALSE 34259
// break ;
34257: GO 34406
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34259: LD_ADDR_EXP 133
34263: PUSH
34264: LD_EXP 133
34268: PPUSH
34269: LD_VAR 0 5
34273: PPUSH
34274: LD_EXP 133
34278: PUSH
34279: LD_VAR 0 5
34283: ARRAY
34284: PUSH
34285: LD_INT 1
34287: PLUS
34288: PPUSH
34289: CALL_OW 1
34293: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34294: LD_ADDR_EXP 130
34298: PUSH
34299: LD_EXP 130
34303: PPUSH
34304: LD_VAR 0 5
34308: PUSH
34309: LD_EXP 130
34313: PUSH
34314: LD_VAR 0 5
34318: ARRAY
34319: PUSH
34320: LD_INT 1
34322: PLUS
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PPUSH
34328: LD_VAR 0 2
34332: PUSH
34333: LD_VAR 0 4
34337: ARRAY
34338: PUSH
34339: LD_VAR 0 2
34343: PUSH
34344: LD_VAR 0 4
34348: ARRAY
34349: PPUSH
34350: CALL_OW 255
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PPUSH
34359: CALL 41814 0 3
34363: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34364: LD_VAR 0 2
34368: PUSH
34369: LD_VAR 0 4
34373: ARRAY
34374: PPUSH
34375: LD_VAR 0 1
34379: PPUSH
34380: CALL_OW 255
34384: PPUSH
34385: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34389: LD_VAR 0 2
34393: PUSH
34394: LD_VAR 0 4
34398: ARRAY
34399: PPUSH
34400: CALL_OW 141
// end ;
34404: GO 34236
34406: POP
34407: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34408: LD_VAR 0 1
34412: PPUSH
34413: LD_EXP 130
34417: PUSH
34418: LD_VAR 0 5
34422: ARRAY
34423: PUSH
34424: LD_INT 0
34426: PLUS
34427: PPUSH
34428: CALL_OW 505
// end ;
34432: LD_VAR 0 3
34436: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34437: LD_INT 0
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
// if not hack in hackTanks then
34443: LD_VAR 0 1
34447: PUSH
34448: LD_EXP 129
34452: IN
34453: NOT
34454: IFFALSE 34458
// exit ;
34456: GO 34698
// index := GetElementIndex ( hackTanks , hack ) ;
34458: LD_ADDR_VAR 0 4
34462: PUSH
34463: LD_EXP 129
34467: PPUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL 41599 0 2
34477: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34478: LD_ADDR_VAR 0 3
34482: PUSH
34483: DOUBLE
34484: LD_EXP 130
34488: PUSH
34489: LD_VAR 0 4
34493: ARRAY
34494: INC
34495: ST_TO_ADDR
34496: LD_INT 1
34498: PUSH
34499: FOR_DOWNTO
34500: IFFALSE 34672
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34502: LD_ADDR_VAR 0 5
34506: PUSH
34507: LD_EXP 130
34511: PUSH
34512: LD_VAR 0 4
34516: ARRAY
34517: PUSH
34518: LD_VAR 0 3
34522: ARRAY
34523: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34524: LD_VAR 0 5
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: PPUSH
34533: CALL_OW 302
34537: NOT
34538: PUSH
34539: LD_VAR 0 5
34543: PUSH
34544: LD_INT 1
34546: ARRAY
34547: PPUSH
34548: CALL_OW 255
34552: PUSH
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL_OW 255
34562: NONEQUAL
34563: OR
34564: IFFALSE 34670
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34566: LD_VAR 0 5
34570: PUSH
34571: LD_INT 1
34573: ARRAY
34574: PPUSH
34575: CALL_OW 305
34579: PUSH
34580: LD_VAR 0 5
34584: PUSH
34585: LD_INT 1
34587: ARRAY
34588: PPUSH
34589: CALL_OW 255
34593: PUSH
34594: LD_VAR 0 1
34598: PPUSH
34599: CALL_OW 255
34603: EQUAL
34604: AND
34605: IFFALSE 34629
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34607: LD_VAR 0 5
34611: PUSH
34612: LD_INT 1
34614: ARRAY
34615: PPUSH
34616: LD_VAR 0 5
34620: PUSH
34621: LD_INT 2
34623: ARRAY
34624: PPUSH
34625: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34629: LD_ADDR_EXP 130
34633: PUSH
34634: LD_EXP 130
34638: PPUSH
34639: LD_VAR 0 4
34643: PPUSH
34644: LD_EXP 130
34648: PUSH
34649: LD_VAR 0 4
34653: ARRAY
34654: PPUSH
34655: LD_VAR 0 3
34659: PPUSH
34660: CALL_OW 3
34664: PPUSH
34665: CALL_OW 1
34669: ST_TO_ADDR
// end ; end ;
34670: GO 34499
34672: POP
34673: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34674: LD_VAR 0 1
34678: PPUSH
34679: LD_EXP 130
34683: PUSH
34684: LD_VAR 0 4
34688: ARRAY
34689: PUSH
34690: LD_INT 0
34692: PLUS
34693: PPUSH
34694: CALL_OW 505
// end ;
34698: LD_VAR 0 2
34702: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34703: LD_INT 0
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
// if not hack in hackTanks then
34709: LD_VAR 0 1
34713: PUSH
34714: LD_EXP 129
34718: IN
34719: NOT
34720: IFFALSE 34724
// exit ;
34722: GO 34809
// index := GetElementIndex ( hackTanks , hack ) ;
34724: LD_ADDR_VAR 0 5
34728: PUSH
34729: LD_EXP 129
34733: PPUSH
34734: LD_VAR 0 1
34738: PPUSH
34739: CALL 41599 0 2
34743: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34744: LD_ADDR_VAR 0 4
34748: PUSH
34749: DOUBLE
34750: LD_INT 1
34752: DEC
34753: ST_TO_ADDR
34754: LD_EXP 130
34758: PUSH
34759: LD_VAR 0 5
34763: ARRAY
34764: PUSH
34765: FOR_TO
34766: IFFALSE 34807
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34768: LD_EXP 130
34772: PUSH
34773: LD_VAR 0 5
34777: ARRAY
34778: PUSH
34779: LD_VAR 0 4
34783: ARRAY
34784: PUSH
34785: LD_INT 1
34787: ARRAY
34788: PUSH
34789: LD_VAR 0 2
34793: EQUAL
34794: IFFALSE 34805
// KillUnit ( vehicle ) ;
34796: LD_VAR 0 2
34800: PPUSH
34801: CALL_OW 66
34805: GO 34765
34807: POP
34808: POP
// end ;
34809: LD_VAR 0 3
34813: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34814: LD_EXP 134
34818: NOT
34819: IFFALSE 34854
34821: GO 34823
34823: DISABLE
// begin initMiner := true ;
34824: LD_ADDR_EXP 134
34828: PUSH
34829: LD_INT 1
34831: ST_TO_ADDR
// minersList := [ ] ;
34832: LD_ADDR_EXP 135
34836: PUSH
34837: EMPTY
34838: ST_TO_ADDR
// minerMinesList := [ ] ;
34839: LD_ADDR_EXP 136
34843: PUSH
34844: EMPTY
34845: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34846: LD_ADDR_EXP 137
34850: PUSH
34851: LD_INT 5
34853: ST_TO_ADDR
// end ;
34854: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34855: LD_EXP 134
34859: PUSH
34860: LD_INT 34
34862: PUSH
34863: LD_EXP 59
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PPUSH
34872: CALL_OW 69
34876: AND
34877: IFFALSE 35340
34879: GO 34881
34881: DISABLE
34882: LD_INT 0
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
// begin enable ;
34888: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34889: LD_ADDR_VAR 0 1
34893: PUSH
34894: LD_INT 34
34896: PUSH
34897: LD_EXP 59
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PPUSH
34906: CALL_OW 69
34910: PUSH
34911: FOR_IN
34912: IFFALSE 34984
// begin if not i in minersList then
34914: LD_VAR 0 1
34918: PUSH
34919: LD_EXP 135
34923: IN
34924: NOT
34925: IFFALSE 34982
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34927: LD_ADDR_EXP 135
34931: PUSH
34932: LD_EXP 135
34936: PPUSH
34937: LD_EXP 135
34941: PUSH
34942: LD_INT 1
34944: PLUS
34945: PPUSH
34946: LD_VAR 0 1
34950: PPUSH
34951: CALL_OW 1
34955: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34956: LD_ADDR_EXP 136
34960: PUSH
34961: LD_EXP 136
34965: PPUSH
34966: LD_EXP 136
34970: PUSH
34971: LD_INT 1
34973: PLUS
34974: PPUSH
34975: EMPTY
34976: PPUSH
34977: CALL_OW 1
34981: ST_TO_ADDR
// end end ;
34982: GO 34911
34984: POP
34985: POP
// for i := minerMinesList downto 1 do
34986: LD_ADDR_VAR 0 1
34990: PUSH
34991: DOUBLE
34992: LD_EXP 136
34996: INC
34997: ST_TO_ADDR
34998: LD_INT 1
35000: PUSH
35001: FOR_DOWNTO
35002: IFFALSE 35338
// begin if IsLive ( minersList [ i ] ) then
35004: LD_EXP 135
35008: PUSH
35009: LD_VAR 0 1
35013: ARRAY
35014: PPUSH
35015: CALL_OW 300
35019: IFFALSE 35047
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35021: LD_EXP 135
35025: PUSH
35026: LD_VAR 0 1
35030: ARRAY
35031: PPUSH
35032: LD_EXP 136
35036: PUSH
35037: LD_VAR 0 1
35041: ARRAY
35042: PPUSH
35043: CALL_OW 505
// if not minerMinesList [ i ] then
35047: LD_EXP 136
35051: PUSH
35052: LD_VAR 0 1
35056: ARRAY
35057: NOT
35058: IFFALSE 35062
// continue ;
35060: GO 35001
// for j := minerMinesList [ i ] downto 1 do
35062: LD_ADDR_VAR 0 2
35066: PUSH
35067: DOUBLE
35068: LD_EXP 136
35072: PUSH
35073: LD_VAR 0 1
35077: ARRAY
35078: INC
35079: ST_TO_ADDR
35080: LD_INT 1
35082: PUSH
35083: FOR_DOWNTO
35084: IFFALSE 35334
// begin side := GetSide ( minersList [ i ] ) ;
35086: LD_ADDR_VAR 0 3
35090: PUSH
35091: LD_EXP 135
35095: PUSH
35096: LD_VAR 0 1
35100: ARRAY
35101: PPUSH
35102: CALL_OW 255
35106: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35107: LD_ADDR_VAR 0 4
35111: PUSH
35112: LD_EXP 136
35116: PUSH
35117: LD_VAR 0 1
35121: ARRAY
35122: PUSH
35123: LD_VAR 0 2
35127: ARRAY
35128: PUSH
35129: LD_INT 1
35131: ARRAY
35132: PPUSH
35133: LD_EXP 136
35137: PUSH
35138: LD_VAR 0 1
35142: ARRAY
35143: PUSH
35144: LD_VAR 0 2
35148: ARRAY
35149: PUSH
35150: LD_INT 2
35152: ARRAY
35153: PPUSH
35154: CALL_OW 428
35158: ST_TO_ADDR
// if not tmp then
35159: LD_VAR 0 4
35163: NOT
35164: IFFALSE 35168
// continue ;
35166: GO 35083
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35168: LD_VAR 0 4
35172: PUSH
35173: LD_INT 81
35175: PUSH
35176: LD_VAR 0 3
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PPUSH
35185: CALL_OW 69
35189: IN
35190: PUSH
35191: LD_EXP 136
35195: PUSH
35196: LD_VAR 0 1
35200: ARRAY
35201: PUSH
35202: LD_VAR 0 2
35206: ARRAY
35207: PUSH
35208: LD_INT 1
35210: ARRAY
35211: PPUSH
35212: LD_EXP 136
35216: PUSH
35217: LD_VAR 0 1
35221: ARRAY
35222: PUSH
35223: LD_VAR 0 2
35227: ARRAY
35228: PUSH
35229: LD_INT 2
35231: ARRAY
35232: PPUSH
35233: CALL_OW 458
35237: AND
35238: IFFALSE 35332
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35240: LD_EXP 136
35244: PUSH
35245: LD_VAR 0 1
35249: ARRAY
35250: PUSH
35251: LD_VAR 0 2
35255: ARRAY
35256: PUSH
35257: LD_INT 1
35259: ARRAY
35260: PPUSH
35261: LD_EXP 136
35265: PUSH
35266: LD_VAR 0 1
35270: ARRAY
35271: PUSH
35272: LD_VAR 0 2
35276: ARRAY
35277: PUSH
35278: LD_INT 2
35280: ARRAY
35281: PPUSH
35282: LD_VAR 0 3
35286: PPUSH
35287: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35291: LD_ADDR_EXP 136
35295: PUSH
35296: LD_EXP 136
35300: PPUSH
35301: LD_VAR 0 1
35305: PPUSH
35306: LD_EXP 136
35310: PUSH
35311: LD_VAR 0 1
35315: ARRAY
35316: PPUSH
35317: LD_VAR 0 2
35321: PPUSH
35322: CALL_OW 3
35326: PPUSH
35327: CALL_OW 1
35331: ST_TO_ADDR
// end ; end ;
35332: GO 35083
35334: POP
35335: POP
// end ;
35336: GO 35001
35338: POP
35339: POP
// end ;
35340: PPOPN 4
35342: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35343: LD_INT 0
35345: PPUSH
35346: PPUSH
// result := false ;
35347: LD_ADDR_VAR 0 4
35351: PUSH
35352: LD_INT 0
35354: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35355: LD_VAR 0 1
35359: PPUSH
35360: CALL_OW 264
35364: PUSH
35365: LD_EXP 59
35369: EQUAL
35370: NOT
35371: IFFALSE 35375
// exit ;
35373: GO 35615
// index := GetElementIndex ( minersList , unit ) ;
35375: LD_ADDR_VAR 0 5
35379: PUSH
35380: LD_EXP 135
35384: PPUSH
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL 41599 0 2
35394: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35395: LD_EXP 136
35399: PUSH
35400: LD_VAR 0 5
35404: ARRAY
35405: PUSH
35406: LD_EXP 137
35410: GREATEREQUAL
35411: IFFALSE 35415
// exit ;
35413: GO 35615
// ComMoveXY ( unit , x , y ) ;
35415: LD_VAR 0 1
35419: PPUSH
35420: LD_VAR 0 2
35424: PPUSH
35425: LD_VAR 0 3
35429: PPUSH
35430: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35434: LD_INT 35
35436: PPUSH
35437: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35441: LD_VAR 0 1
35445: PPUSH
35446: LD_VAR 0 2
35450: PPUSH
35451: LD_VAR 0 3
35455: PPUSH
35456: CALL 72371 0 3
35460: NOT
35461: PUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 314
35471: AND
35472: IFFALSE 35476
// exit ;
35474: GO 35615
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35476: LD_VAR 0 2
35480: PPUSH
35481: LD_VAR 0 3
35485: PPUSH
35486: CALL_OW 428
35490: PUSH
35491: LD_VAR 0 1
35495: EQUAL
35496: PUSH
35497: LD_VAR 0 1
35501: PPUSH
35502: CALL_OW 314
35506: NOT
35507: AND
35508: IFFALSE 35434
// PlaySoundXY ( x , y , PlantMine ) ;
35510: LD_VAR 0 2
35514: PPUSH
35515: LD_VAR 0 3
35519: PPUSH
35520: LD_STRING PlantMine
35522: PPUSH
35523: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35527: LD_VAR 0 2
35531: PPUSH
35532: LD_VAR 0 3
35536: PPUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL_OW 255
35546: PPUSH
35547: LD_INT 0
35549: PPUSH
35550: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35554: LD_ADDR_EXP 136
35558: PUSH
35559: LD_EXP 136
35563: PPUSH
35564: LD_VAR 0 5
35568: PUSH
35569: LD_EXP 136
35573: PUSH
35574: LD_VAR 0 5
35578: ARRAY
35579: PUSH
35580: LD_INT 1
35582: PLUS
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PPUSH
35588: LD_VAR 0 2
35592: PUSH
35593: LD_VAR 0 3
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PPUSH
35602: CALL 41814 0 3
35606: ST_TO_ADDR
// result := true ;
35607: LD_ADDR_VAR 0 4
35611: PUSH
35612: LD_INT 1
35614: ST_TO_ADDR
// end ;
35615: LD_VAR 0 4
35619: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35620: LD_INT 0
35622: PPUSH
35623: PPUSH
35624: PPUSH
// if not unit in minersList then
35625: LD_VAR 0 1
35629: PUSH
35630: LD_EXP 135
35634: IN
35635: NOT
35636: IFFALSE 35640
// exit ;
35638: GO 36032
// index := GetElementIndex ( minersList , unit ) ;
35640: LD_ADDR_VAR 0 6
35644: PUSH
35645: LD_EXP 135
35649: PPUSH
35650: LD_VAR 0 1
35654: PPUSH
35655: CALL 41599 0 2
35659: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35660: LD_ADDR_VAR 0 5
35664: PUSH
35665: DOUBLE
35666: LD_EXP 136
35670: PUSH
35671: LD_VAR 0 6
35675: ARRAY
35676: INC
35677: ST_TO_ADDR
35678: LD_INT 1
35680: PUSH
35681: FOR_DOWNTO
35682: IFFALSE 35843
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35684: LD_EXP 136
35688: PUSH
35689: LD_VAR 0 6
35693: ARRAY
35694: PUSH
35695: LD_VAR 0 5
35699: ARRAY
35700: PUSH
35701: LD_INT 1
35703: ARRAY
35704: PUSH
35705: LD_VAR 0 2
35709: EQUAL
35710: PUSH
35711: LD_EXP 136
35715: PUSH
35716: LD_VAR 0 6
35720: ARRAY
35721: PUSH
35722: LD_VAR 0 5
35726: ARRAY
35727: PUSH
35728: LD_INT 2
35730: ARRAY
35731: PUSH
35732: LD_VAR 0 3
35736: EQUAL
35737: AND
35738: IFFALSE 35841
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35740: LD_EXP 136
35744: PUSH
35745: LD_VAR 0 6
35749: ARRAY
35750: PUSH
35751: LD_VAR 0 5
35755: ARRAY
35756: PUSH
35757: LD_INT 1
35759: ARRAY
35760: PPUSH
35761: LD_EXP 136
35765: PUSH
35766: LD_VAR 0 6
35770: ARRAY
35771: PUSH
35772: LD_VAR 0 5
35776: ARRAY
35777: PUSH
35778: LD_INT 2
35780: ARRAY
35781: PPUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL_OW 255
35791: PPUSH
35792: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35796: LD_ADDR_EXP 136
35800: PUSH
35801: LD_EXP 136
35805: PPUSH
35806: LD_VAR 0 6
35810: PPUSH
35811: LD_EXP 136
35815: PUSH
35816: LD_VAR 0 6
35820: ARRAY
35821: PPUSH
35822: LD_VAR 0 5
35826: PPUSH
35827: CALL_OW 3
35831: PPUSH
35832: CALL_OW 1
35836: ST_TO_ADDR
// exit ;
35837: POP
35838: POP
35839: GO 36032
// end ; end ;
35841: GO 35681
35843: POP
35844: POP
// for i := minerMinesList [ index ] downto 1 do
35845: LD_ADDR_VAR 0 5
35849: PUSH
35850: DOUBLE
35851: LD_EXP 136
35855: PUSH
35856: LD_VAR 0 6
35860: ARRAY
35861: INC
35862: ST_TO_ADDR
35863: LD_INT 1
35865: PUSH
35866: FOR_DOWNTO
35867: IFFALSE 36030
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35869: LD_EXP 136
35873: PUSH
35874: LD_VAR 0 6
35878: ARRAY
35879: PUSH
35880: LD_VAR 0 5
35884: ARRAY
35885: PUSH
35886: LD_INT 1
35888: ARRAY
35889: PPUSH
35890: LD_EXP 136
35894: PUSH
35895: LD_VAR 0 6
35899: ARRAY
35900: PUSH
35901: LD_VAR 0 5
35905: ARRAY
35906: PUSH
35907: LD_INT 2
35909: ARRAY
35910: PPUSH
35911: LD_VAR 0 2
35915: PPUSH
35916: LD_VAR 0 3
35920: PPUSH
35921: CALL_OW 298
35925: PUSH
35926: LD_INT 6
35928: LESS
35929: IFFALSE 36028
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35931: LD_EXP 136
35935: PUSH
35936: LD_VAR 0 6
35940: ARRAY
35941: PUSH
35942: LD_VAR 0 5
35946: ARRAY
35947: PUSH
35948: LD_INT 1
35950: ARRAY
35951: PPUSH
35952: LD_EXP 136
35956: PUSH
35957: LD_VAR 0 6
35961: ARRAY
35962: PUSH
35963: LD_VAR 0 5
35967: ARRAY
35968: PUSH
35969: LD_INT 2
35971: ARRAY
35972: PPUSH
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 255
35982: PPUSH
35983: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35987: LD_ADDR_EXP 136
35991: PUSH
35992: LD_EXP 136
35996: PPUSH
35997: LD_VAR 0 6
36001: PPUSH
36002: LD_EXP 136
36006: PUSH
36007: LD_VAR 0 6
36011: ARRAY
36012: PPUSH
36013: LD_VAR 0 5
36017: PPUSH
36018: CALL_OW 3
36022: PPUSH
36023: CALL_OW 1
36027: ST_TO_ADDR
// end ; end ;
36028: GO 35866
36030: POP
36031: POP
// end ;
36032: LD_VAR 0 4
36036: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36037: LD_INT 0
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36048: LD_VAR 0 1
36052: PPUSH
36053: CALL_OW 264
36057: PUSH
36058: LD_EXP 59
36062: EQUAL
36063: NOT
36064: PUSH
36065: LD_VAR 0 1
36069: PUSH
36070: LD_EXP 135
36074: IN
36075: NOT
36076: OR
36077: IFFALSE 36081
// exit ;
36079: GO 36403
// index := GetElementIndex ( minersList , unit ) ;
36081: LD_ADDR_VAR 0 6
36085: PUSH
36086: LD_EXP 135
36090: PPUSH
36091: LD_VAR 0 1
36095: PPUSH
36096: CALL 41599 0 2
36100: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36101: LD_ADDR_VAR 0 8
36105: PUSH
36106: LD_EXP 137
36110: PUSH
36111: LD_EXP 136
36115: PUSH
36116: LD_VAR 0 6
36120: ARRAY
36121: MINUS
36122: ST_TO_ADDR
// if not minesFreeAmount then
36123: LD_VAR 0 8
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 36403
// tmp := [ ] ;
36132: LD_ADDR_VAR 0 7
36136: PUSH
36137: EMPTY
36138: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36139: LD_ADDR_VAR 0 5
36143: PUSH
36144: DOUBLE
36145: LD_INT 1
36147: DEC
36148: ST_TO_ADDR
36149: LD_VAR 0 8
36153: PUSH
36154: FOR_TO
36155: IFFALSE 36350
// begin _d := rand ( 0 , 5 ) ;
36157: LD_ADDR_VAR 0 11
36161: PUSH
36162: LD_INT 0
36164: PPUSH
36165: LD_INT 5
36167: PPUSH
36168: CALL_OW 12
36172: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36173: LD_ADDR_VAR 0 12
36177: PUSH
36178: LD_INT 2
36180: PPUSH
36181: LD_INT 6
36183: PPUSH
36184: CALL_OW 12
36188: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36189: LD_ADDR_VAR 0 9
36193: PUSH
36194: LD_VAR 0 2
36198: PPUSH
36199: LD_VAR 0 11
36203: PPUSH
36204: LD_VAR 0 12
36208: PPUSH
36209: CALL_OW 272
36213: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36214: LD_ADDR_VAR 0 10
36218: PUSH
36219: LD_VAR 0 3
36223: PPUSH
36224: LD_VAR 0 11
36228: PPUSH
36229: LD_VAR 0 12
36233: PPUSH
36234: CALL_OW 273
36238: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36239: LD_VAR 0 9
36243: PPUSH
36244: LD_VAR 0 10
36248: PPUSH
36249: CALL_OW 488
36253: PUSH
36254: LD_VAR 0 9
36258: PUSH
36259: LD_VAR 0 10
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_VAR 0 7
36272: IN
36273: NOT
36274: AND
36275: PUSH
36276: LD_VAR 0 9
36280: PPUSH
36281: LD_VAR 0 10
36285: PPUSH
36286: CALL_OW 458
36290: NOT
36291: AND
36292: IFFALSE 36334
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36294: LD_ADDR_VAR 0 7
36298: PUSH
36299: LD_VAR 0 7
36303: PPUSH
36304: LD_VAR 0 7
36308: PUSH
36309: LD_INT 1
36311: PLUS
36312: PPUSH
36313: LD_VAR 0 9
36317: PUSH
36318: LD_VAR 0 10
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PPUSH
36327: CALL_OW 1
36331: ST_TO_ADDR
36332: GO 36348
// i := i - 1 ;
36334: LD_ADDR_VAR 0 5
36338: PUSH
36339: LD_VAR 0 5
36343: PUSH
36344: LD_INT 1
36346: MINUS
36347: ST_TO_ADDR
// end ;
36348: GO 36154
36350: POP
36351: POP
// for i in tmp do
36352: LD_ADDR_VAR 0 5
36356: PUSH
36357: LD_VAR 0 7
36361: PUSH
36362: FOR_IN
36363: IFFALSE 36401
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36365: LD_VAR 0 1
36369: PPUSH
36370: LD_VAR 0 5
36374: PUSH
36375: LD_INT 1
36377: ARRAY
36378: PPUSH
36379: LD_VAR 0 5
36383: PUSH
36384: LD_INT 2
36386: ARRAY
36387: PPUSH
36388: CALL 35343 0 3
36392: NOT
36393: IFFALSE 36399
// exit ;
36395: POP
36396: POP
36397: GO 36403
36399: GO 36362
36401: POP
36402: POP
// end ;
36403: LD_VAR 0 4
36407: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36408: LD_INT 0
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
// if not GetClass ( unit ) = class_sniper then
36417: LD_VAR 0 1
36421: PPUSH
36422: CALL_OW 257
36426: PUSH
36427: LD_INT 5
36429: EQUAL
36430: NOT
36431: IFFALSE 36435
// exit ;
36433: GO 36823
// dist := 8 ;
36435: LD_ADDR_VAR 0 5
36439: PUSH
36440: LD_INT 8
36442: ST_TO_ADDR
// viewRange := 12 ;
36443: LD_ADDR_VAR 0 7
36447: PUSH
36448: LD_INT 12
36450: ST_TO_ADDR
// side := GetSide ( unit ) ;
36451: LD_ADDR_VAR 0 6
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 255
36465: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36466: LD_INT 61
36468: PPUSH
36469: LD_VAR 0 6
36473: PPUSH
36474: CALL_OW 321
36478: PUSH
36479: LD_INT 2
36481: EQUAL
36482: IFFALSE 36492
// viewRange := 16 ;
36484: LD_ADDR_VAR 0 7
36488: PUSH
36489: LD_INT 16
36491: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36492: LD_VAR 0 1
36496: PPUSH
36497: LD_VAR 0 2
36501: PPUSH
36502: LD_VAR 0 3
36506: PPUSH
36507: CALL_OW 297
36511: PUSH
36512: LD_VAR 0 5
36516: GREATER
36517: IFFALSE 36596
// begin ComMoveXY ( unit , x , y ) ;
36519: LD_VAR 0 1
36523: PPUSH
36524: LD_VAR 0 2
36528: PPUSH
36529: LD_VAR 0 3
36533: PPUSH
36534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36538: LD_INT 35
36540: PPUSH
36541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36545: LD_VAR 0 1
36549: PPUSH
36550: LD_VAR 0 2
36554: PPUSH
36555: LD_VAR 0 3
36559: PPUSH
36560: CALL 72371 0 3
36564: NOT
36565: IFFALSE 36569
// exit ;
36567: GO 36823
// until GetDistUnitXY ( unit , x , y ) < dist ;
36569: LD_VAR 0 1
36573: PPUSH
36574: LD_VAR 0 2
36578: PPUSH
36579: LD_VAR 0 3
36583: PPUSH
36584: CALL_OW 297
36588: PUSH
36589: LD_VAR 0 5
36593: LESS
36594: IFFALSE 36538
// end ; ComTurnXY ( unit , x , y ) ;
36596: LD_VAR 0 1
36600: PPUSH
36601: LD_VAR 0 2
36605: PPUSH
36606: LD_VAR 0 3
36610: PPUSH
36611: CALL_OW 118
// wait ( 5 ) ;
36615: LD_INT 5
36617: PPUSH
36618: CALL_OW 67
// _d := GetDir ( unit ) ;
36622: LD_ADDR_VAR 0 10
36626: PUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: CALL_OW 254
36636: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36637: LD_ADDR_VAR 0 8
36641: PUSH
36642: LD_VAR 0 1
36646: PPUSH
36647: CALL_OW 250
36651: PPUSH
36652: LD_VAR 0 10
36656: PPUSH
36657: LD_VAR 0 5
36661: PPUSH
36662: CALL_OW 272
36666: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36667: LD_ADDR_VAR 0 9
36671: PUSH
36672: LD_VAR 0 1
36676: PPUSH
36677: CALL_OW 251
36681: PPUSH
36682: LD_VAR 0 10
36686: PPUSH
36687: LD_VAR 0 5
36691: PPUSH
36692: CALL_OW 273
36696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36697: LD_VAR 0 8
36701: PPUSH
36702: LD_VAR 0 9
36706: PPUSH
36707: CALL_OW 488
36711: NOT
36712: IFFALSE 36716
// exit ;
36714: GO 36823
// ComAnimCustom ( unit , 1 ) ;
36716: LD_VAR 0 1
36720: PPUSH
36721: LD_INT 1
36723: PPUSH
36724: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36728: LD_VAR 0 8
36732: PPUSH
36733: LD_VAR 0 9
36737: PPUSH
36738: LD_VAR 0 6
36742: PPUSH
36743: LD_VAR 0 7
36747: PPUSH
36748: CALL_OW 330
// repeat wait ( 1 ) ;
36752: LD_INT 1
36754: PPUSH
36755: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36759: LD_VAR 0 1
36763: PPUSH
36764: CALL_OW 316
36768: PUSH
36769: LD_VAR 0 1
36773: PPUSH
36774: CALL_OW 314
36778: OR
36779: PUSH
36780: LD_VAR 0 1
36784: PPUSH
36785: CALL_OW 302
36789: NOT
36790: OR
36791: PUSH
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 301
36801: OR
36802: IFFALSE 36752
// RemoveSeeing ( _x , _y , side ) ;
36804: LD_VAR 0 8
36808: PPUSH
36809: LD_VAR 0 9
36813: PPUSH
36814: LD_VAR 0 6
36818: PPUSH
36819: CALL_OW 331
// end ; end_of_file
36823: LD_VAR 0 4
36827: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36828: LD_INT 0
36830: PPUSH
36831: PPUSH
// if exist_mode then
36832: LD_VAR 0 2
36836: IFFALSE 36861
// unit := CreateCharacter ( prefix & ident ) else
36838: LD_ADDR_VAR 0 5
36842: PUSH
36843: LD_VAR 0 3
36847: PUSH
36848: LD_VAR 0 1
36852: STR
36853: PPUSH
36854: CALL_OW 34
36858: ST_TO_ADDR
36859: GO 36876
// unit := NewCharacter ( ident ) ;
36861: LD_ADDR_VAR 0 5
36865: PUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 25
36875: ST_TO_ADDR
// result := unit ;
36876: LD_ADDR_VAR 0 4
36880: PUSH
36881: LD_VAR 0 5
36885: ST_TO_ADDR
// end ;
36886: LD_VAR 0 4
36890: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36891: LD_INT 0
36893: PPUSH
36894: PPUSH
// if not side or not nation then
36895: LD_VAR 0 1
36899: NOT
36900: PUSH
36901: LD_VAR 0 2
36905: NOT
36906: OR
36907: IFFALSE 36911
// exit ;
36909: GO 37679
// case nation of nation_american :
36911: LD_VAR 0 2
36915: PUSH
36916: LD_INT 1
36918: DOUBLE
36919: EQUAL
36920: IFTRUE 36924
36922: GO 37138
36924: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36925: LD_ADDR_VAR 0 4
36929: PUSH
36930: LD_INT 35
36932: PUSH
36933: LD_INT 45
36935: PUSH
36936: LD_INT 46
36938: PUSH
36939: LD_INT 47
36941: PUSH
36942: LD_INT 82
36944: PUSH
36945: LD_INT 83
36947: PUSH
36948: LD_INT 84
36950: PUSH
36951: LD_INT 85
36953: PUSH
36954: LD_INT 86
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 6
36965: PUSH
36966: LD_INT 15
36968: PUSH
36969: LD_INT 16
36971: PUSH
36972: LD_INT 7
36974: PUSH
36975: LD_INT 12
36977: PUSH
36978: LD_INT 13
36980: PUSH
36981: LD_INT 10
36983: PUSH
36984: LD_INT 14
36986: PUSH
36987: LD_INT 20
36989: PUSH
36990: LD_INT 21
36992: PUSH
36993: LD_INT 22
36995: PUSH
36996: LD_INT 25
36998: PUSH
36999: LD_INT 32
37001: PUSH
37002: LD_INT 27
37004: PUSH
37005: LD_INT 36
37007: PUSH
37008: LD_INT 69
37010: PUSH
37011: LD_INT 39
37013: PUSH
37014: LD_INT 34
37016: PUSH
37017: LD_INT 40
37019: PUSH
37020: LD_INT 48
37022: PUSH
37023: LD_INT 49
37025: PUSH
37026: LD_INT 50
37028: PUSH
37029: LD_INT 51
37031: PUSH
37032: LD_INT 52
37034: PUSH
37035: LD_INT 53
37037: PUSH
37038: LD_INT 54
37040: PUSH
37041: LD_INT 55
37043: PUSH
37044: LD_INT 56
37046: PUSH
37047: LD_INT 57
37049: PUSH
37050: LD_INT 58
37052: PUSH
37053: LD_INT 59
37055: PUSH
37056: LD_INT 60
37058: PUSH
37059: LD_INT 61
37061: PUSH
37062: LD_INT 62
37064: PUSH
37065: LD_INT 80
37067: PUSH
37068: LD_INT 82
37070: PUSH
37071: LD_INT 83
37073: PUSH
37074: LD_INT 84
37076: PUSH
37077: LD_INT 85
37079: PUSH
37080: LD_INT 86
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
37136: GO 37603
37138: LD_INT 2
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37146
37144: GO 37372
37146: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37147: LD_ADDR_VAR 0 4
37151: PUSH
37152: LD_INT 35
37154: PUSH
37155: LD_INT 45
37157: PUSH
37158: LD_INT 46
37160: PUSH
37161: LD_INT 47
37163: PUSH
37164: LD_INT 82
37166: PUSH
37167: LD_INT 83
37169: PUSH
37170: LD_INT 84
37172: PUSH
37173: LD_INT 85
37175: PUSH
37176: LD_INT 87
37178: PUSH
37179: LD_INT 70
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: LD_INT 11
37187: PUSH
37188: LD_INT 3
37190: PUSH
37191: LD_INT 4
37193: PUSH
37194: LD_INT 5
37196: PUSH
37197: LD_INT 6
37199: PUSH
37200: LD_INT 15
37202: PUSH
37203: LD_INT 18
37205: PUSH
37206: LD_INT 7
37208: PUSH
37209: LD_INT 17
37211: PUSH
37212: LD_INT 8
37214: PUSH
37215: LD_INT 20
37217: PUSH
37218: LD_INT 21
37220: PUSH
37221: LD_INT 22
37223: PUSH
37224: LD_INT 72
37226: PUSH
37227: LD_INT 26
37229: PUSH
37230: LD_INT 69
37232: PUSH
37233: LD_INT 39
37235: PUSH
37236: LD_INT 40
37238: PUSH
37239: LD_INT 41
37241: PUSH
37242: LD_INT 42
37244: PUSH
37245: LD_INT 43
37247: PUSH
37248: LD_INT 48
37250: PUSH
37251: LD_INT 49
37253: PUSH
37254: LD_INT 50
37256: PUSH
37257: LD_INT 51
37259: PUSH
37260: LD_INT 52
37262: PUSH
37263: LD_INT 53
37265: PUSH
37266: LD_INT 54
37268: PUSH
37269: LD_INT 55
37271: PUSH
37272: LD_INT 56
37274: PUSH
37275: LD_INT 60
37277: PUSH
37278: LD_INT 61
37280: PUSH
37281: LD_INT 62
37283: PUSH
37284: LD_INT 66
37286: PUSH
37287: LD_INT 67
37289: PUSH
37290: LD_INT 68
37292: PUSH
37293: LD_INT 81
37295: PUSH
37296: LD_INT 82
37298: PUSH
37299: LD_INT 83
37301: PUSH
37302: LD_INT 84
37304: PUSH
37305: LD_INT 85
37307: PUSH
37308: LD_INT 87
37310: PUSH
37311: LD_INT 88
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
37370: GO 37603
37372: LD_INT 3
37374: DOUBLE
37375: EQUAL
37376: IFTRUE 37380
37378: GO 37602
37380: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37381: LD_ADDR_VAR 0 4
37385: PUSH
37386: LD_INT 46
37388: PUSH
37389: LD_INT 47
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: LD_INT 2
37397: PUSH
37398: LD_INT 82
37400: PUSH
37401: LD_INT 83
37403: PUSH
37404: LD_INT 84
37406: PUSH
37407: LD_INT 85
37409: PUSH
37410: LD_INT 86
37412: PUSH
37413: LD_INT 11
37415: PUSH
37416: LD_INT 9
37418: PUSH
37419: LD_INT 20
37421: PUSH
37422: LD_INT 19
37424: PUSH
37425: LD_INT 21
37427: PUSH
37428: LD_INT 24
37430: PUSH
37431: LD_INT 22
37433: PUSH
37434: LD_INT 25
37436: PUSH
37437: LD_INT 28
37439: PUSH
37440: LD_INT 29
37442: PUSH
37443: LD_INT 30
37445: PUSH
37446: LD_INT 31
37448: PUSH
37449: LD_INT 37
37451: PUSH
37452: LD_INT 38
37454: PUSH
37455: LD_INT 32
37457: PUSH
37458: LD_INT 27
37460: PUSH
37461: LD_INT 33
37463: PUSH
37464: LD_INT 69
37466: PUSH
37467: LD_INT 39
37469: PUSH
37470: LD_INT 34
37472: PUSH
37473: LD_INT 40
37475: PUSH
37476: LD_INT 71
37478: PUSH
37479: LD_INT 23
37481: PUSH
37482: LD_INT 44
37484: PUSH
37485: LD_INT 48
37487: PUSH
37488: LD_INT 49
37490: PUSH
37491: LD_INT 50
37493: PUSH
37494: LD_INT 51
37496: PUSH
37497: LD_INT 52
37499: PUSH
37500: LD_INT 53
37502: PUSH
37503: LD_INT 54
37505: PUSH
37506: LD_INT 55
37508: PUSH
37509: LD_INT 56
37511: PUSH
37512: LD_INT 57
37514: PUSH
37515: LD_INT 58
37517: PUSH
37518: LD_INT 59
37520: PUSH
37521: LD_INT 63
37523: PUSH
37524: LD_INT 64
37526: PUSH
37527: LD_INT 65
37529: PUSH
37530: LD_INT 82
37532: PUSH
37533: LD_INT 83
37535: PUSH
37536: LD_INT 84
37538: PUSH
37539: LD_INT 85
37541: PUSH
37542: LD_INT 86
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: ST_TO_ADDR
37600: GO 37603
37602: POP
// if state > - 1 and state < 3 then
37603: LD_VAR 0 3
37607: PUSH
37608: LD_INT 1
37610: NEG
37611: GREATER
37612: PUSH
37613: LD_VAR 0 3
37617: PUSH
37618: LD_INT 3
37620: LESS
37621: AND
37622: IFFALSE 37679
// for i in result do
37624: LD_ADDR_VAR 0 5
37628: PUSH
37629: LD_VAR 0 4
37633: PUSH
37634: FOR_IN
37635: IFFALSE 37677
// if GetTech ( i , side ) <> state then
37637: LD_VAR 0 5
37641: PPUSH
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 321
37651: PUSH
37652: LD_VAR 0 3
37656: NONEQUAL
37657: IFFALSE 37675
// result := result diff i ;
37659: LD_ADDR_VAR 0 4
37663: PUSH
37664: LD_VAR 0 4
37668: PUSH
37669: LD_VAR 0 5
37673: DIFF
37674: ST_TO_ADDR
37675: GO 37634
37677: POP
37678: POP
// end ;
37679: LD_VAR 0 4
37683: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37684: LD_INT 0
37686: PPUSH
37687: PPUSH
37688: PPUSH
// result := true ;
37689: LD_ADDR_VAR 0 3
37693: PUSH
37694: LD_INT 1
37696: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37697: LD_ADDR_VAR 0 5
37701: PUSH
37702: LD_VAR 0 2
37706: PPUSH
37707: CALL_OW 480
37711: ST_TO_ADDR
// if not tmp then
37712: LD_VAR 0 5
37716: NOT
37717: IFFALSE 37721
// exit ;
37719: GO 37770
// for i in tmp do
37721: LD_ADDR_VAR 0 4
37725: PUSH
37726: LD_VAR 0 5
37730: PUSH
37731: FOR_IN
37732: IFFALSE 37768
// if GetTech ( i , side ) <> state_researched then
37734: LD_VAR 0 4
37738: PPUSH
37739: LD_VAR 0 1
37743: PPUSH
37744: CALL_OW 321
37748: PUSH
37749: LD_INT 2
37751: NONEQUAL
37752: IFFALSE 37766
// begin result := false ;
37754: LD_ADDR_VAR 0 3
37758: PUSH
37759: LD_INT 0
37761: ST_TO_ADDR
// exit ;
37762: POP
37763: POP
37764: GO 37770
// end ;
37766: GO 37731
37768: POP
37769: POP
// end ;
37770: LD_VAR 0 3
37774: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37775: LD_INT 0
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37790: LD_VAR 0 1
37794: NOT
37795: PUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL_OW 257
37805: PUSH
37806: LD_INT 9
37808: NONEQUAL
37809: OR
37810: IFFALSE 37814
// exit ;
37812: GO 38387
// side := GetSide ( unit ) ;
37814: LD_ADDR_VAR 0 9
37818: PUSH
37819: LD_VAR 0 1
37823: PPUSH
37824: CALL_OW 255
37828: ST_TO_ADDR
// tech_space := tech_spacanom ;
37829: LD_ADDR_VAR 0 12
37833: PUSH
37834: LD_INT 29
37836: ST_TO_ADDR
// tech_time := tech_taurad ;
37837: LD_ADDR_VAR 0 13
37841: PUSH
37842: LD_INT 28
37844: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37845: LD_ADDR_VAR 0 11
37849: PUSH
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 310
37859: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37860: LD_VAR 0 11
37864: PPUSH
37865: CALL_OW 247
37869: PUSH
37870: LD_INT 2
37872: EQUAL
37873: IFFALSE 37877
// exit ;
37875: GO 38387
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37877: LD_ADDR_VAR 0 8
37881: PUSH
37882: LD_INT 81
37884: PUSH
37885: LD_VAR 0 9
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 3
37896: PUSH
37897: LD_INT 21
37899: PUSH
37900: LD_INT 3
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PPUSH
37915: CALL_OW 69
37919: ST_TO_ADDR
// if not tmp then
37920: LD_VAR 0 8
37924: NOT
37925: IFFALSE 37929
// exit ;
37927: GO 38387
// if in_unit then
37929: LD_VAR 0 11
37933: IFFALSE 37957
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37935: LD_ADDR_VAR 0 10
37939: PUSH
37940: LD_VAR 0 8
37944: PPUSH
37945: LD_VAR 0 11
37949: PPUSH
37950: CALL_OW 74
37954: ST_TO_ADDR
37955: GO 37977
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37957: LD_ADDR_VAR 0 10
37961: PUSH
37962: LD_VAR 0 8
37966: PPUSH
37967: LD_VAR 0 1
37971: PPUSH
37972: CALL_OW 74
37976: ST_TO_ADDR
// if not enemy then
37977: LD_VAR 0 10
37981: NOT
37982: IFFALSE 37986
// exit ;
37984: GO 38387
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37986: LD_VAR 0 11
37990: PUSH
37991: LD_VAR 0 11
37995: PPUSH
37996: LD_VAR 0 10
38000: PPUSH
38001: CALL_OW 296
38005: PUSH
38006: LD_INT 13
38008: GREATER
38009: AND
38010: PUSH
38011: LD_VAR 0 1
38015: PPUSH
38016: LD_VAR 0 10
38020: PPUSH
38021: CALL_OW 296
38025: PUSH
38026: LD_INT 12
38028: GREATER
38029: OR
38030: IFFALSE 38034
// exit ;
38032: GO 38387
// missile := [ 1 ] ;
38034: LD_ADDR_VAR 0 14
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38045: LD_VAR 0 9
38049: PPUSH
38050: LD_VAR 0 12
38054: PPUSH
38055: CALL_OW 325
38059: IFFALSE 38088
// missile := Insert ( missile , missile + 1 , 2 ) ;
38061: LD_ADDR_VAR 0 14
38065: PUSH
38066: LD_VAR 0 14
38070: PPUSH
38071: LD_VAR 0 14
38075: PUSH
38076: LD_INT 1
38078: PLUS
38079: PPUSH
38080: LD_INT 2
38082: PPUSH
38083: CALL_OW 2
38087: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38088: LD_VAR 0 9
38092: PPUSH
38093: LD_VAR 0 13
38097: PPUSH
38098: CALL_OW 325
38102: PUSH
38103: LD_VAR 0 10
38107: PPUSH
38108: CALL_OW 255
38112: PPUSH
38113: LD_VAR 0 13
38117: PPUSH
38118: CALL_OW 325
38122: NOT
38123: AND
38124: IFFALSE 38153
// missile := Insert ( missile , missile + 1 , 3 ) ;
38126: LD_ADDR_VAR 0 14
38130: PUSH
38131: LD_VAR 0 14
38135: PPUSH
38136: LD_VAR 0 14
38140: PUSH
38141: LD_INT 1
38143: PLUS
38144: PPUSH
38145: LD_INT 3
38147: PPUSH
38148: CALL_OW 2
38152: ST_TO_ADDR
// if missile < 2 then
38153: LD_VAR 0 14
38157: PUSH
38158: LD_INT 2
38160: LESS
38161: IFFALSE 38165
// exit ;
38163: GO 38387
// x := GetX ( enemy ) ;
38165: LD_ADDR_VAR 0 4
38169: PUSH
38170: LD_VAR 0 10
38174: PPUSH
38175: CALL_OW 250
38179: ST_TO_ADDR
// y := GetY ( enemy ) ;
38180: LD_ADDR_VAR 0 5
38184: PUSH
38185: LD_VAR 0 10
38189: PPUSH
38190: CALL_OW 251
38194: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38195: LD_ADDR_VAR 0 6
38199: PUSH
38200: LD_VAR 0 4
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PPUSH
38209: LD_INT 1
38211: PPUSH
38212: CALL_OW 12
38216: PLUS
38217: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38218: LD_ADDR_VAR 0 7
38222: PUSH
38223: LD_VAR 0 5
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PPUSH
38232: LD_INT 1
38234: PPUSH
38235: CALL_OW 12
38239: PLUS
38240: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38241: LD_VAR 0 6
38245: PPUSH
38246: LD_VAR 0 7
38250: PPUSH
38251: CALL_OW 488
38255: NOT
38256: IFFALSE 38278
// begin _x := x ;
38258: LD_ADDR_VAR 0 6
38262: PUSH
38263: LD_VAR 0 4
38267: ST_TO_ADDR
// _y := y ;
38268: LD_ADDR_VAR 0 7
38272: PUSH
38273: LD_VAR 0 5
38277: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38278: LD_ADDR_VAR 0 3
38282: PUSH
38283: LD_INT 1
38285: PPUSH
38286: LD_VAR 0 14
38290: PPUSH
38291: CALL_OW 12
38295: ST_TO_ADDR
// case i of 1 :
38296: LD_VAR 0 3
38300: PUSH
38301: LD_INT 1
38303: DOUBLE
38304: EQUAL
38305: IFTRUE 38309
38307: GO 38326
38309: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38310: LD_VAR 0 1
38314: PPUSH
38315: LD_VAR 0 10
38319: PPUSH
38320: CALL_OW 115
38324: GO 38387
38326: LD_INT 2
38328: DOUBLE
38329: EQUAL
38330: IFTRUE 38334
38332: GO 38356
38334: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38335: LD_VAR 0 1
38339: PPUSH
38340: LD_VAR 0 6
38344: PPUSH
38345: LD_VAR 0 7
38349: PPUSH
38350: CALL_OW 153
38354: GO 38387
38356: LD_INT 3
38358: DOUBLE
38359: EQUAL
38360: IFTRUE 38364
38362: GO 38386
38364: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38365: LD_VAR 0 1
38369: PPUSH
38370: LD_VAR 0 6
38374: PPUSH
38375: LD_VAR 0 7
38379: PPUSH
38380: CALL_OW 154
38384: GO 38387
38386: POP
// end ;
38387: LD_VAR 0 2
38391: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38392: LD_INT 0
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
// if not unit or not building then
38400: LD_VAR 0 1
38404: NOT
38405: PUSH
38406: LD_VAR 0 2
38410: NOT
38411: OR
38412: IFFALSE 38416
// exit ;
38414: GO 38574
// x := GetX ( building ) ;
38416: LD_ADDR_VAR 0 5
38420: PUSH
38421: LD_VAR 0 2
38425: PPUSH
38426: CALL_OW 250
38430: ST_TO_ADDR
// y := GetY ( building ) ;
38431: LD_ADDR_VAR 0 6
38435: PUSH
38436: LD_VAR 0 2
38440: PPUSH
38441: CALL_OW 251
38445: ST_TO_ADDR
// for i = 0 to 5 do
38446: LD_ADDR_VAR 0 4
38450: PUSH
38451: DOUBLE
38452: LD_INT 0
38454: DEC
38455: ST_TO_ADDR
38456: LD_INT 5
38458: PUSH
38459: FOR_TO
38460: IFFALSE 38572
// begin _x := ShiftX ( x , i , 3 ) ;
38462: LD_ADDR_VAR 0 7
38466: PUSH
38467: LD_VAR 0 5
38471: PPUSH
38472: LD_VAR 0 4
38476: PPUSH
38477: LD_INT 3
38479: PPUSH
38480: CALL_OW 272
38484: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38485: LD_ADDR_VAR 0 8
38489: PUSH
38490: LD_VAR 0 6
38494: PPUSH
38495: LD_VAR 0 4
38499: PPUSH
38500: LD_INT 3
38502: PPUSH
38503: CALL_OW 273
38507: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38508: LD_VAR 0 7
38512: PPUSH
38513: LD_VAR 0 8
38517: PPUSH
38518: CALL_OW 488
38522: NOT
38523: IFFALSE 38527
// continue ;
38525: GO 38459
// if HexInfo ( _x , _y ) = 0 then
38527: LD_VAR 0 7
38531: PPUSH
38532: LD_VAR 0 8
38536: PPUSH
38537: CALL_OW 428
38541: PUSH
38542: LD_INT 0
38544: EQUAL
38545: IFFALSE 38570
// begin ComMoveXY ( unit , _x , _y ) ;
38547: LD_VAR 0 1
38551: PPUSH
38552: LD_VAR 0 7
38556: PPUSH
38557: LD_VAR 0 8
38561: PPUSH
38562: CALL_OW 111
// exit ;
38566: POP
38567: POP
38568: GO 38574
// end ; end ;
38570: GO 38459
38572: POP
38573: POP
// end ;
38574: LD_VAR 0 3
38578: RET
// export function ScanBase ( side , base_area ) ; begin
38579: LD_INT 0
38581: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38582: LD_ADDR_VAR 0 3
38586: PUSH
38587: LD_VAR 0 2
38591: PPUSH
38592: LD_INT 81
38594: PUSH
38595: LD_VAR 0 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PPUSH
38604: CALL_OW 70
38608: ST_TO_ADDR
// end ;
38609: LD_VAR 0 3
38613: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38614: LD_INT 0
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
// result := false ;
38620: LD_ADDR_VAR 0 2
38624: PUSH
38625: LD_INT 0
38627: ST_TO_ADDR
// side := GetSide ( unit ) ;
38628: LD_ADDR_VAR 0 3
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 255
38642: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38643: LD_ADDR_VAR 0 4
38647: PUSH
38648: LD_VAR 0 1
38652: PPUSH
38653: CALL_OW 248
38657: ST_TO_ADDR
// case nat of 1 :
38658: LD_VAR 0 4
38662: PUSH
38663: LD_INT 1
38665: DOUBLE
38666: EQUAL
38667: IFTRUE 38671
38669: GO 38682
38671: POP
// tech := tech_lassight ; 2 :
38672: LD_ADDR_VAR 0 5
38676: PUSH
38677: LD_INT 12
38679: ST_TO_ADDR
38680: GO 38721
38682: LD_INT 2
38684: DOUBLE
38685: EQUAL
38686: IFTRUE 38690
38688: GO 38701
38690: POP
// tech := tech_mortar ; 3 :
38691: LD_ADDR_VAR 0 5
38695: PUSH
38696: LD_INT 41
38698: ST_TO_ADDR
38699: GO 38721
38701: LD_INT 3
38703: DOUBLE
38704: EQUAL
38705: IFTRUE 38709
38707: GO 38720
38709: POP
// tech := tech_bazooka ; end ;
38710: LD_ADDR_VAR 0 5
38714: PUSH
38715: LD_INT 44
38717: ST_TO_ADDR
38718: GO 38721
38720: POP
// if Researched ( side , tech ) then
38721: LD_VAR 0 3
38725: PPUSH
38726: LD_VAR 0 5
38730: PPUSH
38731: CALL_OW 325
38735: IFFALSE 38762
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38737: LD_ADDR_VAR 0 2
38741: PUSH
38742: LD_INT 5
38744: PUSH
38745: LD_INT 8
38747: PUSH
38748: LD_INT 9
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: PUSH
38756: LD_VAR 0 4
38760: ARRAY
38761: ST_TO_ADDR
// end ;
38762: LD_VAR 0 2
38766: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38767: LD_INT 0
38769: PPUSH
38770: PPUSH
38771: PPUSH
// if not mines then
38772: LD_VAR 0 2
38776: NOT
38777: IFFALSE 38781
// exit ;
38779: GO 38925
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38781: LD_ADDR_VAR 0 5
38785: PUSH
38786: LD_INT 81
38788: PUSH
38789: LD_VAR 0 1
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 3
38800: PUSH
38801: LD_INT 21
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PPUSH
38819: CALL_OW 69
38823: ST_TO_ADDR
// for i in mines do
38824: LD_ADDR_VAR 0 4
38828: PUSH
38829: LD_VAR 0 2
38833: PUSH
38834: FOR_IN
38835: IFFALSE 38923
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38837: LD_VAR 0 4
38841: PUSH
38842: LD_INT 1
38844: ARRAY
38845: PPUSH
38846: LD_VAR 0 4
38850: PUSH
38851: LD_INT 2
38853: ARRAY
38854: PPUSH
38855: CALL_OW 458
38859: NOT
38860: IFFALSE 38864
// continue ;
38862: GO 38834
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38864: LD_VAR 0 4
38868: PUSH
38869: LD_INT 1
38871: ARRAY
38872: PPUSH
38873: LD_VAR 0 4
38877: PUSH
38878: LD_INT 2
38880: ARRAY
38881: PPUSH
38882: CALL_OW 428
38886: PUSH
38887: LD_VAR 0 5
38891: IN
38892: IFFALSE 38921
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38894: LD_VAR 0 4
38898: PUSH
38899: LD_INT 1
38901: ARRAY
38902: PPUSH
38903: LD_VAR 0 4
38907: PUSH
38908: LD_INT 2
38910: ARRAY
38911: PPUSH
38912: LD_VAR 0 1
38916: PPUSH
38917: CALL_OW 456
// end ;
38921: GO 38834
38923: POP
38924: POP
// end ;
38925: LD_VAR 0 3
38929: RET
// export function Count ( array ) ; var i ; begin
38930: LD_INT 0
38932: PPUSH
38933: PPUSH
// result := 0 ;
38934: LD_ADDR_VAR 0 2
38938: PUSH
38939: LD_INT 0
38941: ST_TO_ADDR
// for i in array do
38942: LD_ADDR_VAR 0 3
38946: PUSH
38947: LD_VAR 0 1
38951: PUSH
38952: FOR_IN
38953: IFFALSE 38977
// if i then
38955: LD_VAR 0 3
38959: IFFALSE 38975
// result := result + 1 ;
38961: LD_ADDR_VAR 0 2
38965: PUSH
38966: LD_VAR 0 2
38970: PUSH
38971: LD_INT 1
38973: PLUS
38974: ST_TO_ADDR
38975: GO 38952
38977: POP
38978: POP
// end ;
38979: LD_VAR 0 2
38983: RET
// export function IsEmpty ( building ) ; begin
38984: LD_INT 0
38986: PPUSH
// if not building then
38987: LD_VAR 0 1
38991: NOT
38992: IFFALSE 38996
// exit ;
38994: GO 39039
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38996: LD_ADDR_VAR 0 2
39000: PUSH
39001: LD_VAR 0 1
39005: PUSH
39006: LD_INT 22
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 255
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 58
39025: PUSH
39026: EMPTY
39027: LIST
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PPUSH
39033: CALL_OW 69
39037: IN
39038: ST_TO_ADDR
// end ;
39039: LD_VAR 0 2
39043: RET
// export function IsNotFull ( building ) ; begin
39044: LD_INT 0
39046: PPUSH
// if not building then
39047: LD_VAR 0 1
39051: NOT
39052: IFFALSE 39056
// exit ;
39054: GO 39075
// result := UnitsInside ( building ) < 6 ;
39056: LD_ADDR_VAR 0 2
39060: PUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: CALL_OW 313
39070: PUSH
39071: LD_INT 6
39073: LESS
39074: ST_TO_ADDR
// end ;
39075: LD_VAR 0 2
39079: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39080: LD_INT 0
39082: PPUSH
39083: PPUSH
39084: PPUSH
39085: PPUSH
// tmp := [ ] ;
39086: LD_ADDR_VAR 0 3
39090: PUSH
39091: EMPTY
39092: ST_TO_ADDR
// list := [ ] ;
39093: LD_ADDR_VAR 0 5
39097: PUSH
39098: EMPTY
39099: ST_TO_ADDR
// for i = 16 to 25 do
39100: LD_ADDR_VAR 0 4
39104: PUSH
39105: DOUBLE
39106: LD_INT 16
39108: DEC
39109: ST_TO_ADDR
39110: LD_INT 25
39112: PUSH
39113: FOR_TO
39114: IFFALSE 39187
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39116: LD_ADDR_VAR 0 3
39120: PUSH
39121: LD_VAR 0 3
39125: PUSH
39126: LD_INT 22
39128: PUSH
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 255
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 91
39145: PUSH
39146: LD_VAR 0 1
39150: PUSH
39151: LD_INT 6
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 30
39161: PUSH
39162: LD_VAR 0 4
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: LIST
39175: PUSH
39176: EMPTY
39177: LIST
39178: PPUSH
39179: CALL_OW 69
39183: ADD
39184: ST_TO_ADDR
39185: GO 39113
39187: POP
39188: POP
// for i = 1 to tmp do
39189: LD_ADDR_VAR 0 4
39193: PUSH
39194: DOUBLE
39195: LD_INT 1
39197: DEC
39198: ST_TO_ADDR
39199: LD_VAR 0 3
39203: PUSH
39204: FOR_TO
39205: IFFALSE 39293
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39207: LD_ADDR_VAR 0 5
39211: PUSH
39212: LD_VAR 0 5
39216: PUSH
39217: LD_VAR 0 3
39221: PUSH
39222: LD_VAR 0 4
39226: ARRAY
39227: PPUSH
39228: CALL_OW 266
39232: PUSH
39233: LD_VAR 0 3
39237: PUSH
39238: LD_VAR 0 4
39242: ARRAY
39243: PPUSH
39244: CALL_OW 250
39248: PUSH
39249: LD_VAR 0 3
39253: PUSH
39254: LD_VAR 0 4
39258: ARRAY
39259: PPUSH
39260: CALL_OW 251
39264: PUSH
39265: LD_VAR 0 3
39269: PUSH
39270: LD_VAR 0 4
39274: ARRAY
39275: PPUSH
39276: CALL_OW 254
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: PUSH
39287: EMPTY
39288: LIST
39289: ADD
39290: ST_TO_ADDR
39291: GO 39204
39293: POP
39294: POP
// result := list ;
39295: LD_ADDR_VAR 0 2
39299: PUSH
39300: LD_VAR 0 5
39304: ST_TO_ADDR
// end ;
39305: LD_VAR 0 2
39309: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39310: LD_INT 0
39312: PPUSH
39313: PPUSH
39314: PPUSH
39315: PPUSH
39316: PPUSH
39317: PPUSH
39318: PPUSH
// if not factory then
39319: LD_VAR 0 1
39323: NOT
39324: IFFALSE 39328
// exit ;
39326: GO 39921
// if control = control_apeman then
39328: LD_VAR 0 4
39332: PUSH
39333: LD_INT 5
39335: EQUAL
39336: IFFALSE 39445
// begin tmp := UnitsInside ( factory ) ;
39338: LD_ADDR_VAR 0 8
39342: PUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 313
39352: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39353: LD_VAR 0 8
39357: PPUSH
39358: LD_INT 25
39360: PUSH
39361: LD_INT 12
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PPUSH
39368: CALL_OW 72
39372: NOT
39373: IFFALSE 39383
// control := control_manual ;
39375: LD_ADDR_VAR 0 4
39379: PUSH
39380: LD_INT 1
39382: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39383: LD_ADDR_VAR 0 8
39387: PUSH
39388: LD_VAR 0 1
39392: PPUSH
39393: CALL 39080 0 1
39397: ST_TO_ADDR
// if tmp then
39398: LD_VAR 0 8
39402: IFFALSE 39445
// begin for i in tmp do
39404: LD_ADDR_VAR 0 7
39408: PUSH
39409: LD_VAR 0 8
39413: PUSH
39414: FOR_IN
39415: IFFALSE 39443
// if i [ 1 ] = b_ext_radio then
39417: LD_VAR 0 7
39421: PUSH
39422: LD_INT 1
39424: ARRAY
39425: PUSH
39426: LD_INT 22
39428: EQUAL
39429: IFFALSE 39441
// begin control := control_remote ;
39431: LD_ADDR_VAR 0 4
39435: PUSH
39436: LD_INT 2
39438: ST_TO_ADDR
// break ;
39439: GO 39443
// end ;
39441: GO 39414
39443: POP
39444: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39445: LD_VAR 0 1
39449: PPUSH
39450: LD_VAR 0 2
39454: PPUSH
39455: LD_VAR 0 3
39459: PPUSH
39460: LD_VAR 0 4
39464: PPUSH
39465: LD_VAR 0 5
39469: PPUSH
39470: CALL_OW 448
39474: IFFALSE 39509
// begin result := [ chassis , engine , control , weapon ] ;
39476: LD_ADDR_VAR 0 6
39480: PUSH
39481: LD_VAR 0 2
39485: PUSH
39486: LD_VAR 0 3
39490: PUSH
39491: LD_VAR 0 4
39495: PUSH
39496: LD_VAR 0 5
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: ST_TO_ADDR
// exit ;
39507: GO 39921
// end ; _chassis := AvailableChassisList ( factory ) ;
39509: LD_ADDR_VAR 0 9
39513: PUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: CALL_OW 475
39523: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39524: LD_ADDR_VAR 0 11
39528: PUSH
39529: LD_VAR 0 1
39533: PPUSH
39534: CALL_OW 476
39538: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39539: LD_ADDR_VAR 0 12
39543: PUSH
39544: LD_VAR 0 1
39548: PPUSH
39549: CALL_OW 477
39553: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39554: LD_ADDR_VAR 0 10
39558: PUSH
39559: LD_VAR 0 1
39563: PPUSH
39564: CALL_OW 478
39568: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39569: LD_VAR 0 9
39573: NOT
39574: PUSH
39575: LD_VAR 0 11
39579: NOT
39580: OR
39581: PUSH
39582: LD_VAR 0 12
39586: NOT
39587: OR
39588: PUSH
39589: LD_VAR 0 10
39593: NOT
39594: OR
39595: IFFALSE 39630
// begin result := [ chassis , engine , control , weapon ] ;
39597: LD_ADDR_VAR 0 6
39601: PUSH
39602: LD_VAR 0 2
39606: PUSH
39607: LD_VAR 0 3
39611: PUSH
39612: LD_VAR 0 4
39616: PUSH
39617: LD_VAR 0 5
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: ST_TO_ADDR
// exit ;
39628: GO 39921
// end ; if not chassis in _chassis then
39630: LD_VAR 0 2
39634: PUSH
39635: LD_VAR 0 9
39639: IN
39640: NOT
39641: IFFALSE 39667
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39643: LD_ADDR_VAR 0 2
39647: PUSH
39648: LD_VAR 0 9
39652: PUSH
39653: LD_INT 1
39655: PPUSH
39656: LD_VAR 0 9
39660: PPUSH
39661: CALL_OW 12
39665: ARRAY
39666: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39667: LD_VAR 0 2
39671: PPUSH
39672: LD_VAR 0 3
39676: PPUSH
39677: CALL 39926 0 2
39681: NOT
39682: IFFALSE 39741
// repeat engine := _engine [ 1 ] ;
39684: LD_ADDR_VAR 0 3
39688: PUSH
39689: LD_VAR 0 11
39693: PUSH
39694: LD_INT 1
39696: ARRAY
39697: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39698: LD_ADDR_VAR 0 11
39702: PUSH
39703: LD_VAR 0 11
39707: PPUSH
39708: LD_INT 1
39710: PPUSH
39711: CALL_OW 3
39715: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39716: LD_VAR 0 2
39720: PPUSH
39721: LD_VAR 0 3
39725: PPUSH
39726: CALL 39926 0 2
39730: PUSH
39731: LD_VAR 0 11
39735: PUSH
39736: EMPTY
39737: EQUAL
39738: OR
39739: IFFALSE 39684
// if not control in _control then
39741: LD_VAR 0 4
39745: PUSH
39746: LD_VAR 0 12
39750: IN
39751: NOT
39752: IFFALSE 39778
// control := _control [ rand ( 1 , _control ) ] ;
39754: LD_ADDR_VAR 0 4
39758: PUSH
39759: LD_VAR 0 12
39763: PUSH
39764: LD_INT 1
39766: PPUSH
39767: LD_VAR 0 12
39771: PPUSH
39772: CALL_OW 12
39776: ARRAY
39777: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39778: LD_VAR 0 2
39782: PPUSH
39783: LD_VAR 0 5
39787: PPUSH
39788: CALL 40146 0 2
39792: NOT
39793: IFFALSE 39852
// repeat weapon := _weapon [ 1 ] ;
39795: LD_ADDR_VAR 0 5
39799: PUSH
39800: LD_VAR 0 10
39804: PUSH
39805: LD_INT 1
39807: ARRAY
39808: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39809: LD_ADDR_VAR 0 10
39813: PUSH
39814: LD_VAR 0 10
39818: PPUSH
39819: LD_INT 1
39821: PPUSH
39822: CALL_OW 3
39826: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39827: LD_VAR 0 2
39831: PPUSH
39832: LD_VAR 0 5
39836: PPUSH
39837: CALL 40146 0 2
39841: PUSH
39842: LD_VAR 0 10
39846: PUSH
39847: EMPTY
39848: EQUAL
39849: OR
39850: IFFALSE 39795
// result := [ ] ;
39852: LD_ADDR_VAR 0 6
39856: PUSH
39857: EMPTY
39858: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39859: LD_VAR 0 1
39863: PPUSH
39864: LD_VAR 0 2
39868: PPUSH
39869: LD_VAR 0 3
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: LD_VAR 0 5
39883: PPUSH
39884: CALL_OW 448
39888: IFFALSE 39921
// result := [ chassis , engine , control , weapon ] ;
39890: LD_ADDR_VAR 0 6
39894: PUSH
39895: LD_VAR 0 2
39899: PUSH
39900: LD_VAR 0 3
39904: PUSH
39905: LD_VAR 0 4
39909: PUSH
39910: LD_VAR 0 5
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: ST_TO_ADDR
// end ;
39921: LD_VAR 0 6
39925: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39926: LD_INT 0
39928: PPUSH
// if not chassis or not engine then
39929: LD_VAR 0 1
39933: NOT
39934: PUSH
39935: LD_VAR 0 2
39939: NOT
39940: OR
39941: IFFALSE 39945
// exit ;
39943: GO 40141
// case engine of engine_solar :
39945: LD_VAR 0 2
39949: PUSH
39950: LD_INT 2
39952: DOUBLE
39953: EQUAL
39954: IFTRUE 39958
39956: GO 39996
39958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39959: LD_ADDR_VAR 0 3
39963: PUSH
39964: LD_INT 11
39966: PUSH
39967: LD_INT 12
39969: PUSH
39970: LD_INT 13
39972: PUSH
39973: LD_INT 14
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: LD_INT 3
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
39994: GO 40125
39996: LD_INT 1
39998: DOUBLE
39999: EQUAL
40000: IFTRUE 40004
40002: GO 40066
40004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40005: LD_ADDR_VAR 0 3
40009: PUSH
40010: LD_INT 11
40012: PUSH
40013: LD_INT 12
40015: PUSH
40016: LD_INT 13
40018: PUSH
40019: LD_INT 14
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: LD_INT 3
40030: PUSH
40031: LD_INT 4
40033: PUSH
40034: LD_INT 5
40036: PUSH
40037: LD_INT 21
40039: PUSH
40040: LD_INT 23
40042: PUSH
40043: LD_INT 22
40045: PUSH
40046: LD_INT 24
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: ST_TO_ADDR
40064: GO 40125
40066: LD_INT 3
40068: DOUBLE
40069: EQUAL
40070: IFTRUE 40074
40072: GO 40124
40074: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: LD_INT 13
40082: PUSH
40083: LD_INT 14
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 3
40091: PUSH
40092: LD_INT 4
40094: PUSH
40095: LD_INT 5
40097: PUSH
40098: LD_INT 21
40100: PUSH
40101: LD_INT 22
40103: PUSH
40104: LD_INT 23
40106: PUSH
40107: LD_INT 24
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: ST_TO_ADDR
40122: GO 40125
40124: POP
// result := ( chassis in result ) ;
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_VAR 0 1
40134: PUSH
40135: LD_VAR 0 3
40139: IN
40140: ST_TO_ADDR
// end ;
40141: LD_VAR 0 3
40145: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40146: LD_INT 0
40148: PPUSH
// if not chassis or not weapon then
40149: LD_VAR 0 1
40153: NOT
40154: PUSH
40155: LD_VAR 0 2
40159: NOT
40160: OR
40161: IFFALSE 40165
// exit ;
40163: GO 41227
// case weapon of us_machine_gun :
40165: LD_VAR 0 2
40169: PUSH
40170: LD_INT 2
40172: DOUBLE
40173: EQUAL
40174: IFTRUE 40178
40176: GO 40208
40178: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40179: LD_ADDR_VAR 0 3
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 3
40192: PUSH
40193: LD_INT 4
40195: PUSH
40196: LD_INT 5
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: ST_TO_ADDR
40206: GO 41211
40208: LD_INT 3
40210: DOUBLE
40211: EQUAL
40212: IFTRUE 40216
40214: GO 40246
40216: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40217: LD_ADDR_VAR 0 3
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: LD_INT 4
40233: PUSH
40234: LD_INT 5
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: ST_TO_ADDR
40244: GO 41211
40246: LD_INT 11
40248: DOUBLE
40249: EQUAL
40250: IFTRUE 40254
40252: GO 40284
40254: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40255: LD_ADDR_VAR 0 3
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: LD_INT 4
40271: PUSH
40272: LD_INT 5
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: ST_TO_ADDR
40282: GO 41211
40284: LD_INT 4
40286: DOUBLE
40287: EQUAL
40288: IFTRUE 40292
40290: GO 40318
40292: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40293: LD_ADDR_VAR 0 3
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: LD_INT 3
40303: PUSH
40304: LD_INT 4
40306: PUSH
40307: LD_INT 5
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: ST_TO_ADDR
40316: GO 41211
40318: LD_INT 5
40320: DOUBLE
40321: EQUAL
40322: IFTRUE 40326
40324: GO 40352
40326: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40327: LD_ADDR_VAR 0 3
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 3
40337: PUSH
40338: LD_INT 4
40340: PUSH
40341: LD_INT 5
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
40350: GO 41211
40352: LD_INT 9
40354: DOUBLE
40355: EQUAL
40356: IFTRUE 40360
40358: GO 40386
40360: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40361: LD_ADDR_VAR 0 3
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: LD_INT 3
40371: PUSH
40372: LD_INT 4
40374: PUSH
40375: LD_INT 5
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
40384: GO 41211
40386: LD_INT 7
40388: DOUBLE
40389: EQUAL
40390: IFTRUE 40394
40392: GO 40420
40394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40395: LD_ADDR_VAR 0 3
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: LD_INT 3
40405: PUSH
40406: LD_INT 4
40408: PUSH
40409: LD_INT 5
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: ST_TO_ADDR
40418: GO 41211
40420: LD_INT 12
40422: DOUBLE
40423: EQUAL
40424: IFTRUE 40428
40426: GO 40454
40428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40429: LD_ADDR_VAR 0 3
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: LD_INT 3
40439: PUSH
40440: LD_INT 4
40442: PUSH
40443: LD_INT 5
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: ST_TO_ADDR
40452: GO 41211
40454: LD_INT 13
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40488
40462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40463: LD_ADDR_VAR 0 3
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: LD_INT 4
40476: PUSH
40477: LD_INT 5
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: ST_TO_ADDR
40486: GO 41211
40488: LD_INT 14
40490: DOUBLE
40491: EQUAL
40492: IFTRUE 40496
40494: GO 40514
40496: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40497: LD_ADDR_VAR 0 3
40501: PUSH
40502: LD_INT 4
40504: PUSH
40505: LD_INT 5
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: ST_TO_ADDR
40512: GO 41211
40514: LD_INT 6
40516: DOUBLE
40517: EQUAL
40518: IFTRUE 40522
40520: GO 40540
40522: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40523: LD_ADDR_VAR 0 3
40527: PUSH
40528: LD_INT 4
40530: PUSH
40531: LD_INT 5
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: ST_TO_ADDR
40538: GO 41211
40540: LD_INT 10
40542: DOUBLE
40543: EQUAL
40544: IFTRUE 40548
40546: GO 40566
40548: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40549: LD_ADDR_VAR 0 3
40553: PUSH
40554: LD_INT 4
40556: PUSH
40557: LD_INT 5
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: ST_TO_ADDR
40564: GO 41211
40566: LD_INT 22
40568: DOUBLE
40569: EQUAL
40570: IFTRUE 40574
40572: GO 40600
40574: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40575: LD_ADDR_VAR 0 3
40579: PUSH
40580: LD_INT 11
40582: PUSH
40583: LD_INT 12
40585: PUSH
40586: LD_INT 13
40588: PUSH
40589: LD_INT 14
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
40598: GO 41211
40600: LD_INT 23
40602: DOUBLE
40603: EQUAL
40604: IFTRUE 40608
40606: GO 40634
40608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40609: LD_ADDR_VAR 0 3
40613: PUSH
40614: LD_INT 11
40616: PUSH
40617: LD_INT 12
40619: PUSH
40620: LD_INT 13
40622: PUSH
40623: LD_INT 14
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: ST_TO_ADDR
40632: GO 41211
40634: LD_INT 24
40636: DOUBLE
40637: EQUAL
40638: IFTRUE 40642
40640: GO 40668
40642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: LD_INT 11
40650: PUSH
40651: LD_INT 12
40653: PUSH
40654: LD_INT 13
40656: PUSH
40657: LD_INT 14
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: ST_TO_ADDR
40666: GO 41211
40668: LD_INT 30
40670: DOUBLE
40671: EQUAL
40672: IFTRUE 40676
40674: GO 40702
40676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40677: LD_ADDR_VAR 0 3
40681: PUSH
40682: LD_INT 11
40684: PUSH
40685: LD_INT 12
40687: PUSH
40688: LD_INT 13
40690: PUSH
40691: LD_INT 14
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
40700: GO 41211
40702: LD_INT 25
40704: DOUBLE
40705: EQUAL
40706: IFTRUE 40710
40708: GO 40728
40710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40711: LD_ADDR_VAR 0 3
40715: PUSH
40716: LD_INT 13
40718: PUSH
40719: LD_INT 14
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: ST_TO_ADDR
40726: GO 41211
40728: LD_INT 27
40730: DOUBLE
40731: EQUAL
40732: IFTRUE 40736
40734: GO 40754
40736: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40737: LD_ADDR_VAR 0 3
40741: PUSH
40742: LD_INT 13
40744: PUSH
40745: LD_INT 14
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: ST_TO_ADDR
40752: GO 41211
40754: LD_EXP 57
40758: DOUBLE
40759: EQUAL
40760: IFTRUE 40764
40762: GO 40790
40764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40765: LD_ADDR_VAR 0 3
40769: PUSH
40770: LD_INT 11
40772: PUSH
40773: LD_INT 12
40775: PUSH
40776: LD_INT 13
40778: PUSH
40779: LD_INT 14
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: ST_TO_ADDR
40788: GO 41211
40790: LD_INT 28
40792: DOUBLE
40793: EQUAL
40794: IFTRUE 40798
40796: GO 40816
40798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40799: LD_ADDR_VAR 0 3
40803: PUSH
40804: LD_INT 13
40806: PUSH
40807: LD_INT 14
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: ST_TO_ADDR
40814: GO 41211
40816: LD_INT 29
40818: DOUBLE
40819: EQUAL
40820: IFTRUE 40824
40822: GO 40842
40824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40825: LD_ADDR_VAR 0 3
40829: PUSH
40830: LD_INT 13
40832: PUSH
40833: LD_INT 14
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: ST_TO_ADDR
40840: GO 41211
40842: LD_INT 31
40844: DOUBLE
40845: EQUAL
40846: IFTRUE 40850
40848: GO 40868
40850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40851: LD_ADDR_VAR 0 3
40855: PUSH
40856: LD_INT 13
40858: PUSH
40859: LD_INT 14
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: ST_TO_ADDR
40866: GO 41211
40868: LD_INT 26
40870: DOUBLE
40871: EQUAL
40872: IFTRUE 40876
40874: GO 40894
40876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40877: LD_ADDR_VAR 0 3
40881: PUSH
40882: LD_INT 13
40884: PUSH
40885: LD_INT 14
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: ST_TO_ADDR
40892: GO 41211
40894: LD_INT 42
40896: DOUBLE
40897: EQUAL
40898: IFTRUE 40902
40900: GO 40928
40902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40903: LD_ADDR_VAR 0 3
40907: PUSH
40908: LD_INT 21
40910: PUSH
40911: LD_INT 22
40913: PUSH
40914: LD_INT 23
40916: PUSH
40917: LD_INT 24
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: ST_TO_ADDR
40926: GO 41211
40928: LD_INT 43
40930: DOUBLE
40931: EQUAL
40932: IFTRUE 40936
40934: GO 40962
40936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40937: LD_ADDR_VAR 0 3
40941: PUSH
40942: LD_INT 21
40944: PUSH
40945: LD_INT 22
40947: PUSH
40948: LD_INT 23
40950: PUSH
40951: LD_INT 24
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: ST_TO_ADDR
40960: GO 41211
40962: LD_INT 44
40964: DOUBLE
40965: EQUAL
40966: IFTRUE 40970
40968: GO 40996
40970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: LD_INT 21
40978: PUSH
40979: LD_INT 22
40981: PUSH
40982: LD_INT 23
40984: PUSH
40985: LD_INT 24
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
40994: GO 41211
40996: LD_INT 45
40998: DOUBLE
40999: EQUAL
41000: IFTRUE 41004
41002: GO 41030
41004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41005: LD_ADDR_VAR 0 3
41009: PUSH
41010: LD_INT 21
41012: PUSH
41013: LD_INT 22
41015: PUSH
41016: LD_INT 23
41018: PUSH
41019: LD_INT 24
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: ST_TO_ADDR
41028: GO 41211
41030: LD_INT 49
41032: DOUBLE
41033: EQUAL
41034: IFTRUE 41038
41036: GO 41064
41038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41039: LD_ADDR_VAR 0 3
41043: PUSH
41044: LD_INT 21
41046: PUSH
41047: LD_INT 22
41049: PUSH
41050: LD_INT 23
41052: PUSH
41053: LD_INT 24
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
41062: GO 41211
41064: LD_INT 51
41066: DOUBLE
41067: EQUAL
41068: IFTRUE 41072
41070: GO 41098
41072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41073: LD_ADDR_VAR 0 3
41077: PUSH
41078: LD_INT 21
41080: PUSH
41081: LD_INT 22
41083: PUSH
41084: LD_INT 23
41086: PUSH
41087: LD_INT 24
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: ST_TO_ADDR
41096: GO 41211
41098: LD_INT 52
41100: DOUBLE
41101: EQUAL
41102: IFTRUE 41106
41104: GO 41132
41106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41107: LD_ADDR_VAR 0 3
41111: PUSH
41112: LD_INT 21
41114: PUSH
41115: LD_INT 22
41117: PUSH
41118: LD_INT 23
41120: PUSH
41121: LD_INT 24
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
41130: GO 41211
41132: LD_INT 53
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41140
41138: GO 41158
41140: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41141: LD_ADDR_VAR 0 3
41145: PUSH
41146: LD_INT 23
41148: PUSH
41149: LD_INT 24
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: ST_TO_ADDR
41156: GO 41211
41158: LD_INT 46
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41184
41166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_INT 23
41174: PUSH
41175: LD_INT 24
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: ST_TO_ADDR
41182: GO 41211
41184: LD_INT 47
41186: DOUBLE
41187: EQUAL
41188: IFTRUE 41192
41190: GO 41210
41192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41193: LD_ADDR_VAR 0 3
41197: PUSH
41198: LD_INT 23
41200: PUSH
41201: LD_INT 24
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: ST_TO_ADDR
41208: GO 41211
41210: POP
// result := ( chassis in result ) ;
41211: LD_ADDR_VAR 0 3
41215: PUSH
41216: LD_VAR 0 1
41220: PUSH
41221: LD_VAR 0 3
41225: IN
41226: ST_TO_ADDR
// end ;
41227: LD_VAR 0 3
41231: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41232: LD_INT 0
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
// result := array ;
41241: LD_ADDR_VAR 0 5
41245: PUSH
41246: LD_VAR 0 1
41250: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41251: LD_VAR 0 1
41255: NOT
41256: PUSH
41257: LD_VAR 0 2
41261: NOT
41262: OR
41263: PUSH
41264: LD_VAR 0 3
41268: NOT
41269: OR
41270: PUSH
41271: LD_VAR 0 2
41275: PUSH
41276: LD_VAR 0 1
41280: GREATER
41281: OR
41282: PUSH
41283: LD_VAR 0 3
41287: PUSH
41288: LD_VAR 0 1
41292: GREATER
41293: OR
41294: IFFALSE 41298
// exit ;
41296: GO 41594
// if direction then
41298: LD_VAR 0 4
41302: IFFALSE 41366
// begin d := 1 ;
41304: LD_ADDR_VAR 0 9
41308: PUSH
41309: LD_INT 1
41311: ST_TO_ADDR
// if i_from > i_to then
41312: LD_VAR 0 2
41316: PUSH
41317: LD_VAR 0 3
41321: GREATER
41322: IFFALSE 41348
// length := ( array - i_from ) + i_to else
41324: LD_ADDR_VAR 0 11
41328: PUSH
41329: LD_VAR 0 1
41333: PUSH
41334: LD_VAR 0 2
41338: MINUS
41339: PUSH
41340: LD_VAR 0 3
41344: PLUS
41345: ST_TO_ADDR
41346: GO 41364
// length := i_to - i_from ;
41348: LD_ADDR_VAR 0 11
41352: PUSH
41353: LD_VAR 0 3
41357: PUSH
41358: LD_VAR 0 2
41362: MINUS
41363: ST_TO_ADDR
// end else
41364: GO 41427
// begin d := - 1 ;
41366: LD_ADDR_VAR 0 9
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: ST_TO_ADDR
// if i_from > i_to then
41375: LD_VAR 0 2
41379: PUSH
41380: LD_VAR 0 3
41384: GREATER
41385: IFFALSE 41405
// length := i_from - i_to else
41387: LD_ADDR_VAR 0 11
41391: PUSH
41392: LD_VAR 0 2
41396: PUSH
41397: LD_VAR 0 3
41401: MINUS
41402: ST_TO_ADDR
41403: GO 41427
// length := ( array - i_to ) + i_from ;
41405: LD_ADDR_VAR 0 11
41409: PUSH
41410: LD_VAR 0 1
41414: PUSH
41415: LD_VAR 0 3
41419: MINUS
41420: PUSH
41421: LD_VAR 0 2
41425: PLUS
41426: ST_TO_ADDR
// end ; if not length then
41427: LD_VAR 0 11
41431: NOT
41432: IFFALSE 41436
// exit ;
41434: GO 41594
// tmp := array ;
41436: LD_ADDR_VAR 0 10
41440: PUSH
41441: LD_VAR 0 1
41445: ST_TO_ADDR
// for i = 1 to length do
41446: LD_ADDR_VAR 0 6
41450: PUSH
41451: DOUBLE
41452: LD_INT 1
41454: DEC
41455: ST_TO_ADDR
41456: LD_VAR 0 11
41460: PUSH
41461: FOR_TO
41462: IFFALSE 41582
// begin for j = 1 to array do
41464: LD_ADDR_VAR 0 7
41468: PUSH
41469: DOUBLE
41470: LD_INT 1
41472: DEC
41473: ST_TO_ADDR
41474: LD_VAR 0 1
41478: PUSH
41479: FOR_TO
41480: IFFALSE 41568
// begin k := j + d ;
41482: LD_ADDR_VAR 0 8
41486: PUSH
41487: LD_VAR 0 7
41491: PUSH
41492: LD_VAR 0 9
41496: PLUS
41497: ST_TO_ADDR
// if k > array then
41498: LD_VAR 0 8
41502: PUSH
41503: LD_VAR 0 1
41507: GREATER
41508: IFFALSE 41518
// k := 1 ;
41510: LD_ADDR_VAR 0 8
41514: PUSH
41515: LD_INT 1
41517: ST_TO_ADDR
// if not k then
41518: LD_VAR 0 8
41522: NOT
41523: IFFALSE 41535
// k := array ;
41525: LD_ADDR_VAR 0 8
41529: PUSH
41530: LD_VAR 0 1
41534: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41535: LD_ADDR_VAR 0 10
41539: PUSH
41540: LD_VAR 0 10
41544: PPUSH
41545: LD_VAR 0 8
41549: PPUSH
41550: LD_VAR 0 1
41554: PUSH
41555: LD_VAR 0 7
41559: ARRAY
41560: PPUSH
41561: CALL_OW 1
41565: ST_TO_ADDR
// end ;
41566: GO 41479
41568: POP
41569: POP
// array := tmp ;
41570: LD_ADDR_VAR 0 1
41574: PUSH
41575: LD_VAR 0 10
41579: ST_TO_ADDR
// end ;
41580: GO 41461
41582: POP
41583: POP
// result := array ;
41584: LD_ADDR_VAR 0 5
41588: PUSH
41589: LD_VAR 0 1
41593: ST_TO_ADDR
// end ;
41594: LD_VAR 0 5
41598: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41599: LD_INT 0
41601: PPUSH
41602: PPUSH
// result := 0 ;
41603: LD_ADDR_VAR 0 3
41607: PUSH
41608: LD_INT 0
41610: ST_TO_ADDR
// if not array or not value in array then
41611: LD_VAR 0 1
41615: NOT
41616: PUSH
41617: LD_VAR 0 2
41621: PUSH
41622: LD_VAR 0 1
41626: IN
41627: NOT
41628: OR
41629: IFFALSE 41633
// exit ;
41631: GO 41687
// for i = 1 to array do
41633: LD_ADDR_VAR 0 4
41637: PUSH
41638: DOUBLE
41639: LD_INT 1
41641: DEC
41642: ST_TO_ADDR
41643: LD_VAR 0 1
41647: PUSH
41648: FOR_TO
41649: IFFALSE 41685
// if value = array [ i ] then
41651: LD_VAR 0 2
41655: PUSH
41656: LD_VAR 0 1
41660: PUSH
41661: LD_VAR 0 4
41665: ARRAY
41666: EQUAL
41667: IFFALSE 41683
// begin result := i ;
41669: LD_ADDR_VAR 0 3
41673: PUSH
41674: LD_VAR 0 4
41678: ST_TO_ADDR
// exit ;
41679: POP
41680: POP
41681: GO 41687
// end ;
41683: GO 41648
41685: POP
41686: POP
// end ;
41687: LD_VAR 0 3
41691: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41692: LD_INT 0
41694: PPUSH
// vc_chassis := chassis ;
41695: LD_ADDR_OWVAR 37
41699: PUSH
41700: LD_VAR 0 1
41704: ST_TO_ADDR
// vc_engine := engine ;
41705: LD_ADDR_OWVAR 39
41709: PUSH
41710: LD_VAR 0 2
41714: ST_TO_ADDR
// vc_control := control ;
41715: LD_ADDR_OWVAR 38
41719: PUSH
41720: LD_VAR 0 3
41724: ST_TO_ADDR
// vc_weapon := weapon ;
41725: LD_ADDR_OWVAR 40
41729: PUSH
41730: LD_VAR 0 4
41734: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41735: LD_ADDR_OWVAR 41
41739: PUSH
41740: LD_VAR 0 5
41744: ST_TO_ADDR
// end ;
41745: LD_VAR 0 6
41749: RET
// export function WantPlant ( unit ) ; var task ; begin
41750: LD_INT 0
41752: PPUSH
41753: PPUSH
// result := false ;
41754: LD_ADDR_VAR 0 2
41758: PUSH
41759: LD_INT 0
41761: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41762: LD_ADDR_VAR 0 3
41766: PUSH
41767: LD_VAR 0 1
41771: PPUSH
41772: CALL_OW 437
41776: ST_TO_ADDR
// if task then
41777: LD_VAR 0 3
41781: IFFALSE 41809
// if task [ 1 ] [ 1 ] = p then
41783: LD_VAR 0 3
41787: PUSH
41788: LD_INT 1
41790: ARRAY
41791: PUSH
41792: LD_INT 1
41794: ARRAY
41795: PUSH
41796: LD_STRING p
41798: EQUAL
41799: IFFALSE 41809
// result := true ;
41801: LD_ADDR_VAR 0 2
41805: PUSH
41806: LD_INT 1
41808: ST_TO_ADDR
// end ;
41809: LD_VAR 0 2
41813: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41814: LD_INT 0
41816: PPUSH
41817: PPUSH
41818: PPUSH
41819: PPUSH
// if pos < 1 then
41820: LD_VAR 0 2
41824: PUSH
41825: LD_INT 1
41827: LESS
41828: IFFALSE 41832
// exit ;
41830: GO 42135
// if pos = 1 then
41832: LD_VAR 0 2
41836: PUSH
41837: LD_INT 1
41839: EQUAL
41840: IFFALSE 41873
// result := Replace ( arr , pos [ 1 ] , value ) else
41842: LD_ADDR_VAR 0 4
41846: PUSH
41847: LD_VAR 0 1
41851: PPUSH
41852: LD_VAR 0 2
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: PPUSH
41861: LD_VAR 0 3
41865: PPUSH
41866: CALL_OW 1
41870: ST_TO_ADDR
41871: GO 42135
// begin tmp := arr ;
41873: LD_ADDR_VAR 0 6
41877: PUSH
41878: LD_VAR 0 1
41882: ST_TO_ADDR
// s_arr := [ tmp ] ;
41883: LD_ADDR_VAR 0 7
41887: PUSH
41888: LD_VAR 0 6
41892: PUSH
41893: EMPTY
41894: LIST
41895: ST_TO_ADDR
// for i = 1 to pos - 1 do
41896: LD_ADDR_VAR 0 5
41900: PUSH
41901: DOUBLE
41902: LD_INT 1
41904: DEC
41905: ST_TO_ADDR
41906: LD_VAR 0 2
41910: PUSH
41911: LD_INT 1
41913: MINUS
41914: PUSH
41915: FOR_TO
41916: IFFALSE 41961
// begin tmp := tmp [ pos [ i ] ] ;
41918: LD_ADDR_VAR 0 6
41922: PUSH
41923: LD_VAR 0 6
41927: PUSH
41928: LD_VAR 0 2
41932: PUSH
41933: LD_VAR 0 5
41937: ARRAY
41938: ARRAY
41939: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41940: LD_ADDR_VAR 0 7
41944: PUSH
41945: LD_VAR 0 7
41949: PUSH
41950: LD_VAR 0 6
41954: PUSH
41955: EMPTY
41956: LIST
41957: ADD
41958: ST_TO_ADDR
// end ;
41959: GO 41915
41961: POP
41962: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41963: LD_ADDR_VAR 0 6
41967: PUSH
41968: LD_VAR 0 6
41972: PPUSH
41973: LD_VAR 0 2
41977: PUSH
41978: LD_VAR 0 2
41982: ARRAY
41983: PPUSH
41984: LD_VAR 0 3
41988: PPUSH
41989: CALL_OW 1
41993: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41994: LD_ADDR_VAR 0 7
41998: PUSH
41999: LD_VAR 0 7
42003: PPUSH
42004: LD_VAR 0 7
42008: PPUSH
42009: LD_VAR 0 6
42013: PPUSH
42014: CALL_OW 1
42018: ST_TO_ADDR
// for i = s_arr downto 2 do
42019: LD_ADDR_VAR 0 5
42023: PUSH
42024: DOUBLE
42025: LD_VAR 0 7
42029: INC
42030: ST_TO_ADDR
42031: LD_INT 2
42033: PUSH
42034: FOR_DOWNTO
42035: IFFALSE 42119
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42037: LD_ADDR_VAR 0 6
42041: PUSH
42042: LD_VAR 0 7
42046: PUSH
42047: LD_VAR 0 5
42051: PUSH
42052: LD_INT 1
42054: MINUS
42055: ARRAY
42056: PPUSH
42057: LD_VAR 0 2
42061: PUSH
42062: LD_VAR 0 5
42066: PUSH
42067: LD_INT 1
42069: MINUS
42070: ARRAY
42071: PPUSH
42072: LD_VAR 0 7
42076: PUSH
42077: LD_VAR 0 5
42081: ARRAY
42082: PPUSH
42083: CALL_OW 1
42087: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42088: LD_ADDR_VAR 0 7
42092: PUSH
42093: LD_VAR 0 7
42097: PPUSH
42098: LD_VAR 0 5
42102: PUSH
42103: LD_INT 1
42105: MINUS
42106: PPUSH
42107: LD_VAR 0 6
42111: PPUSH
42112: CALL_OW 1
42116: ST_TO_ADDR
// end ;
42117: GO 42034
42119: POP
42120: POP
// result := s_arr [ 1 ] ;
42121: LD_ADDR_VAR 0 4
42125: PUSH
42126: LD_VAR 0 7
42130: PUSH
42131: LD_INT 1
42133: ARRAY
42134: ST_TO_ADDR
// end ; end ;
42135: LD_VAR 0 4
42139: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42140: LD_INT 0
42142: PPUSH
42143: PPUSH
// if not list then
42144: LD_VAR 0 1
42148: NOT
42149: IFFALSE 42153
// exit ;
42151: GO 42244
// i := list [ pos1 ] ;
42153: LD_ADDR_VAR 0 5
42157: PUSH
42158: LD_VAR 0 1
42162: PUSH
42163: LD_VAR 0 2
42167: ARRAY
42168: ST_TO_ADDR
// if not i then
42169: LD_VAR 0 5
42173: NOT
42174: IFFALSE 42178
// exit ;
42176: GO 42244
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42178: LD_ADDR_VAR 0 1
42182: PUSH
42183: LD_VAR 0 1
42187: PPUSH
42188: LD_VAR 0 2
42192: PPUSH
42193: LD_VAR 0 1
42197: PUSH
42198: LD_VAR 0 3
42202: ARRAY
42203: PPUSH
42204: CALL_OW 1
42208: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42209: LD_ADDR_VAR 0 1
42213: PUSH
42214: LD_VAR 0 1
42218: PPUSH
42219: LD_VAR 0 3
42223: PPUSH
42224: LD_VAR 0 5
42228: PPUSH
42229: CALL_OW 1
42233: ST_TO_ADDR
// result := list ;
42234: LD_ADDR_VAR 0 4
42238: PUSH
42239: LD_VAR 0 1
42243: ST_TO_ADDR
// end ;
42244: LD_VAR 0 4
42248: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42249: LD_INT 0
42251: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42252: LD_ADDR_VAR 0 5
42256: PUSH
42257: LD_VAR 0 1
42261: PPUSH
42262: CALL_OW 250
42266: PPUSH
42267: LD_VAR 0 1
42271: PPUSH
42272: CALL_OW 251
42276: PPUSH
42277: LD_VAR 0 2
42281: PPUSH
42282: LD_VAR 0 3
42286: PPUSH
42287: LD_VAR 0 4
42291: PPUSH
42292: CALL 42302 0 5
42296: ST_TO_ADDR
// end ;
42297: LD_VAR 0 5
42301: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42302: LD_INT 0
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
// if not list then
42308: LD_VAR 0 3
42312: NOT
42313: IFFALSE 42317
// exit ;
42315: GO 42705
// result := [ ] ;
42317: LD_ADDR_VAR 0 6
42321: PUSH
42322: EMPTY
42323: ST_TO_ADDR
// for i in list do
42324: LD_ADDR_VAR 0 7
42328: PUSH
42329: LD_VAR 0 3
42333: PUSH
42334: FOR_IN
42335: IFFALSE 42537
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42337: LD_ADDR_VAR 0 9
42341: PUSH
42342: LD_VAR 0 7
42346: PPUSH
42347: LD_VAR 0 1
42351: PPUSH
42352: LD_VAR 0 2
42356: PPUSH
42357: CALL_OW 297
42361: ST_TO_ADDR
// if not result then
42362: LD_VAR 0 6
42366: NOT
42367: IFFALSE 42393
// result := [ [ i , tmp ] ] else
42369: LD_ADDR_VAR 0 6
42373: PUSH
42374: LD_VAR 0 7
42378: PUSH
42379: LD_VAR 0 9
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: EMPTY
42389: LIST
42390: ST_TO_ADDR
42391: GO 42535
// begin if result [ result ] [ 2 ] < tmp then
42393: LD_VAR 0 6
42397: PUSH
42398: LD_VAR 0 6
42402: ARRAY
42403: PUSH
42404: LD_INT 2
42406: ARRAY
42407: PUSH
42408: LD_VAR 0 9
42412: LESS
42413: IFFALSE 42455
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42415: LD_ADDR_VAR 0 6
42419: PUSH
42420: LD_VAR 0 6
42424: PPUSH
42425: LD_VAR 0 6
42429: PUSH
42430: LD_INT 1
42432: PLUS
42433: PPUSH
42434: LD_VAR 0 7
42438: PUSH
42439: LD_VAR 0 9
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PPUSH
42448: CALL_OW 2
42452: ST_TO_ADDR
42453: GO 42535
// for j = 1 to result do
42455: LD_ADDR_VAR 0 8
42459: PUSH
42460: DOUBLE
42461: LD_INT 1
42463: DEC
42464: ST_TO_ADDR
42465: LD_VAR 0 6
42469: PUSH
42470: FOR_TO
42471: IFFALSE 42533
// begin if tmp < result [ j ] [ 2 ] then
42473: LD_VAR 0 9
42477: PUSH
42478: LD_VAR 0 6
42482: PUSH
42483: LD_VAR 0 8
42487: ARRAY
42488: PUSH
42489: LD_INT 2
42491: ARRAY
42492: LESS
42493: IFFALSE 42531
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42495: LD_ADDR_VAR 0 6
42499: PUSH
42500: LD_VAR 0 6
42504: PPUSH
42505: LD_VAR 0 8
42509: PPUSH
42510: LD_VAR 0 7
42514: PUSH
42515: LD_VAR 0 9
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PPUSH
42524: CALL_OW 2
42528: ST_TO_ADDR
// break ;
42529: GO 42533
// end ; end ;
42531: GO 42470
42533: POP
42534: POP
// end ; end ;
42535: GO 42334
42537: POP
42538: POP
// if result and not asc then
42539: LD_VAR 0 6
42543: PUSH
42544: LD_VAR 0 4
42548: NOT
42549: AND
42550: IFFALSE 42625
// begin tmp := result ;
42552: LD_ADDR_VAR 0 9
42556: PUSH
42557: LD_VAR 0 6
42561: ST_TO_ADDR
// for i = tmp downto 1 do
42562: LD_ADDR_VAR 0 7
42566: PUSH
42567: DOUBLE
42568: LD_VAR 0 9
42572: INC
42573: ST_TO_ADDR
42574: LD_INT 1
42576: PUSH
42577: FOR_DOWNTO
42578: IFFALSE 42623
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42580: LD_ADDR_VAR 0 6
42584: PUSH
42585: LD_VAR 0 6
42589: PPUSH
42590: LD_VAR 0 9
42594: PUSH
42595: LD_VAR 0 7
42599: MINUS
42600: PUSH
42601: LD_INT 1
42603: PLUS
42604: PPUSH
42605: LD_VAR 0 9
42609: PUSH
42610: LD_VAR 0 7
42614: ARRAY
42615: PPUSH
42616: CALL_OW 1
42620: ST_TO_ADDR
42621: GO 42577
42623: POP
42624: POP
// end ; tmp := [ ] ;
42625: LD_ADDR_VAR 0 9
42629: PUSH
42630: EMPTY
42631: ST_TO_ADDR
// if mode then
42632: LD_VAR 0 5
42636: IFFALSE 42705
// begin for i = 1 to result do
42638: LD_ADDR_VAR 0 7
42642: PUSH
42643: DOUBLE
42644: LD_INT 1
42646: DEC
42647: ST_TO_ADDR
42648: LD_VAR 0 6
42652: PUSH
42653: FOR_TO
42654: IFFALSE 42693
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42656: LD_ADDR_VAR 0 9
42660: PUSH
42661: LD_VAR 0 9
42665: PPUSH
42666: LD_VAR 0 7
42670: PPUSH
42671: LD_VAR 0 6
42675: PUSH
42676: LD_VAR 0 7
42680: ARRAY
42681: PUSH
42682: LD_INT 1
42684: ARRAY
42685: PPUSH
42686: CALL_OW 1
42690: ST_TO_ADDR
42691: GO 42653
42693: POP
42694: POP
// result := tmp ;
42695: LD_ADDR_VAR 0 6
42699: PUSH
42700: LD_VAR 0 9
42704: ST_TO_ADDR
// end ; end ;
42705: LD_VAR 0 6
42709: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42710: LD_INT 0
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42718: LD_ADDR_VAR 0 5
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: ST_TO_ADDR
// if not x or not y then
42740: LD_VAR 0 2
42744: NOT
42745: PUSH
42746: LD_VAR 0 3
42750: NOT
42751: OR
42752: IFFALSE 42756
// exit ;
42754: GO 44408
// if not range then
42756: LD_VAR 0 4
42760: NOT
42761: IFFALSE 42771
// range := 10 ;
42763: LD_ADDR_VAR 0 4
42767: PUSH
42768: LD_INT 10
42770: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42771: LD_ADDR_VAR 0 8
42775: PUSH
42776: LD_INT 81
42778: PUSH
42779: LD_VAR 0 1
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 92
42790: PUSH
42791: LD_VAR 0 2
42795: PUSH
42796: LD_VAR 0 3
42800: PUSH
42801: LD_VAR 0 4
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: LD_INT 21
42817: PUSH
42818: LD_INT 3
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: PPUSH
42834: CALL_OW 69
42838: ST_TO_ADDR
// if not tmp then
42839: LD_VAR 0 8
42843: NOT
42844: IFFALSE 42848
// exit ;
42846: GO 44408
// for i in tmp do
42848: LD_ADDR_VAR 0 6
42852: PUSH
42853: LD_VAR 0 8
42857: PUSH
42858: FOR_IN
42859: IFFALSE 44383
// begin points := [ 0 , 0 , 0 ] ;
42861: LD_ADDR_VAR 0 9
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
// bpoints := 1 ;
42880: LD_ADDR_VAR 0 10
42884: PUSH
42885: LD_INT 1
42887: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42888: LD_VAR 0 6
42892: PPUSH
42893: CALL_OW 247
42897: PUSH
42898: LD_INT 1
42900: DOUBLE
42901: EQUAL
42902: IFTRUE 42906
42904: GO 43484
42906: POP
// begin if GetClass ( i ) = 1 then
42907: LD_VAR 0 6
42911: PPUSH
42912: CALL_OW 257
42916: PUSH
42917: LD_INT 1
42919: EQUAL
42920: IFFALSE 42941
// points := [ 10 , 5 , 3 ] ;
42922: LD_ADDR_VAR 0 9
42926: PUSH
42927: LD_INT 10
42929: PUSH
42930: LD_INT 5
42932: PUSH
42933: LD_INT 3
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42941: LD_VAR 0 6
42945: PPUSH
42946: CALL_OW 257
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 3
42956: PUSH
42957: LD_INT 4
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: IN
42965: IFFALSE 42986
// points := [ 3 , 2 , 1 ] ;
42967: LD_ADDR_VAR 0 9
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42986: LD_VAR 0 6
42990: PPUSH
42991: CALL_OW 257
42995: PUSH
42996: LD_INT 5
42998: EQUAL
42999: IFFALSE 43020
// points := [ 130 , 5 , 2 ] ;
43001: LD_ADDR_VAR 0 9
43005: PUSH
43006: LD_INT 130
43008: PUSH
43009: LD_INT 5
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43020: LD_VAR 0 6
43024: PPUSH
43025: CALL_OW 257
43029: PUSH
43030: LD_INT 8
43032: EQUAL
43033: IFFALSE 43054
// points := [ 35 , 35 , 30 ] ;
43035: LD_ADDR_VAR 0 9
43039: PUSH
43040: LD_INT 35
43042: PUSH
43043: LD_INT 35
43045: PUSH
43046: LD_INT 30
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: LIST
43053: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43054: LD_VAR 0 6
43058: PPUSH
43059: CALL_OW 257
43063: PUSH
43064: LD_INT 9
43066: EQUAL
43067: IFFALSE 43088
// points := [ 20 , 55 , 40 ] ;
43069: LD_ADDR_VAR 0 9
43073: PUSH
43074: LD_INT 20
43076: PUSH
43077: LD_INT 55
43079: PUSH
43080: LD_INT 40
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43088: LD_VAR 0 6
43092: PPUSH
43093: CALL_OW 257
43097: PUSH
43098: LD_INT 12
43100: PUSH
43101: LD_INT 16
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: IN
43108: IFFALSE 43129
// points := [ 5 , 3 , 2 ] ;
43110: LD_ADDR_VAR 0 9
43114: PUSH
43115: LD_INT 5
43117: PUSH
43118: LD_INT 3
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43129: LD_VAR 0 6
43133: PPUSH
43134: CALL_OW 257
43138: PUSH
43139: LD_INT 17
43141: EQUAL
43142: IFFALSE 43163
// points := [ 100 , 50 , 75 ] ;
43144: LD_ADDR_VAR 0 9
43148: PUSH
43149: LD_INT 100
43151: PUSH
43152: LD_INT 50
43154: PUSH
43155: LD_INT 75
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43163: LD_VAR 0 6
43167: PPUSH
43168: CALL_OW 257
43172: PUSH
43173: LD_INT 15
43175: EQUAL
43176: IFFALSE 43197
// points := [ 10 , 5 , 3 ] ;
43178: LD_ADDR_VAR 0 9
43182: PUSH
43183: LD_INT 10
43185: PUSH
43186: LD_INT 5
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43197: LD_VAR 0 6
43201: PPUSH
43202: CALL_OW 257
43206: PUSH
43207: LD_INT 14
43209: EQUAL
43210: IFFALSE 43231
// points := [ 10 , 0 , 0 ] ;
43212: LD_ADDR_VAR 0 9
43216: PUSH
43217: LD_INT 10
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43231: LD_VAR 0 6
43235: PPUSH
43236: CALL_OW 257
43240: PUSH
43241: LD_INT 11
43243: EQUAL
43244: IFFALSE 43265
// points := [ 30 , 10 , 5 ] ;
43246: LD_ADDR_VAR 0 9
43250: PUSH
43251: LD_INT 30
43253: PUSH
43254: LD_INT 10
43256: PUSH
43257: LD_INT 5
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43265: LD_VAR 0 1
43269: PPUSH
43270: LD_INT 5
43272: PPUSH
43273: CALL_OW 321
43277: PUSH
43278: LD_INT 2
43280: EQUAL
43281: IFFALSE 43298
// bpoints := bpoints * 1.8 ;
43283: LD_ADDR_VAR 0 10
43287: PUSH
43288: LD_VAR 0 10
43292: PUSH
43293: LD_REAL  1.80000000000000E+0000
43296: MUL
43297: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43298: LD_VAR 0 6
43302: PPUSH
43303: CALL_OW 257
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: LD_INT 3
43316: PUSH
43317: LD_INT 4
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: IN
43326: PUSH
43327: LD_VAR 0 1
43331: PPUSH
43332: LD_INT 51
43334: PPUSH
43335: CALL_OW 321
43339: PUSH
43340: LD_INT 2
43342: EQUAL
43343: AND
43344: IFFALSE 43361
// bpoints := bpoints * 1.2 ;
43346: LD_ADDR_VAR 0 10
43350: PUSH
43351: LD_VAR 0 10
43355: PUSH
43356: LD_REAL  1.20000000000000E+0000
43359: MUL
43360: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43361: LD_VAR 0 6
43365: PPUSH
43366: CALL_OW 257
43370: PUSH
43371: LD_INT 5
43373: PUSH
43374: LD_INT 7
43376: PUSH
43377: LD_INT 9
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: IN
43385: PUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: LD_INT 52
43393: PPUSH
43394: CALL_OW 321
43398: PUSH
43399: LD_INT 2
43401: EQUAL
43402: AND
43403: IFFALSE 43420
// bpoints := bpoints * 1.5 ;
43405: LD_ADDR_VAR 0 10
43409: PUSH
43410: LD_VAR 0 10
43414: PUSH
43415: LD_REAL  1.50000000000000E+0000
43418: MUL
43419: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43420: LD_VAR 0 1
43424: PPUSH
43425: LD_INT 66
43427: PPUSH
43428: CALL_OW 321
43432: PUSH
43433: LD_INT 2
43435: EQUAL
43436: IFFALSE 43453
// bpoints := bpoints * 1.1 ;
43438: LD_ADDR_VAR 0 10
43442: PUSH
43443: LD_VAR 0 10
43447: PUSH
43448: LD_REAL  1.10000000000000E+0000
43451: MUL
43452: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43453: LD_ADDR_VAR 0 10
43457: PUSH
43458: LD_VAR 0 10
43462: PUSH
43463: LD_VAR 0 6
43467: PPUSH
43468: LD_INT 1
43470: PPUSH
43471: CALL_OW 259
43475: PUSH
43476: LD_REAL  1.15000000000000E+0000
43479: MUL
43480: MUL
43481: ST_TO_ADDR
// end ; unit_vehicle :
43482: GO 44312
43484: LD_INT 2
43486: DOUBLE
43487: EQUAL
43488: IFTRUE 43492
43490: GO 44300
43492: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43493: LD_VAR 0 6
43497: PPUSH
43498: CALL_OW 264
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 42
43508: PUSH
43509: LD_INT 24
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: IN
43517: IFFALSE 43538
// points := [ 25 , 5 , 3 ] ;
43519: LD_ADDR_VAR 0 9
43523: PUSH
43524: LD_INT 25
43526: PUSH
43527: LD_INT 5
43529: PUSH
43530: LD_INT 3
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43538: LD_VAR 0 6
43542: PPUSH
43543: CALL_OW 264
43547: PUSH
43548: LD_INT 4
43550: PUSH
43551: LD_INT 43
43553: PUSH
43554: LD_INT 25
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: IN
43562: IFFALSE 43583
// points := [ 40 , 15 , 5 ] ;
43564: LD_ADDR_VAR 0 9
43568: PUSH
43569: LD_INT 40
43571: PUSH
43572: LD_INT 15
43574: PUSH
43575: LD_INT 5
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43583: LD_VAR 0 6
43587: PPUSH
43588: CALL_OW 264
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: LD_INT 23
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: IN
43603: IFFALSE 43624
// points := [ 7 , 25 , 8 ] ;
43605: LD_ADDR_VAR 0 9
43609: PUSH
43610: LD_INT 7
43612: PUSH
43613: LD_INT 25
43615: PUSH
43616: LD_INT 8
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43624: LD_VAR 0 6
43628: PPUSH
43629: CALL_OW 264
43633: PUSH
43634: LD_INT 5
43636: PUSH
43637: LD_INT 27
43639: PUSH
43640: LD_INT 44
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: LIST
43647: IN
43648: IFFALSE 43669
// points := [ 14 , 50 , 16 ] ;
43650: LD_ADDR_VAR 0 9
43654: PUSH
43655: LD_INT 14
43657: PUSH
43658: LD_INT 50
43660: PUSH
43661: LD_INT 16
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: LIST
43668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43669: LD_VAR 0 6
43673: PPUSH
43674: CALL_OW 264
43678: PUSH
43679: LD_INT 6
43681: PUSH
43682: LD_INT 46
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: IN
43689: IFFALSE 43710
// points := [ 32 , 120 , 70 ] ;
43691: LD_ADDR_VAR 0 9
43695: PUSH
43696: LD_INT 32
43698: PUSH
43699: LD_INT 120
43701: PUSH
43702: LD_INT 70
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43710: LD_VAR 0 6
43714: PPUSH
43715: CALL_OW 264
43719: PUSH
43720: LD_INT 7
43722: PUSH
43723: LD_INT 28
43725: PUSH
43726: LD_INT 45
43728: PUSH
43729: LD_EXP 57
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: IN
43740: IFFALSE 43761
// points := [ 35 , 20 , 45 ] ;
43742: LD_ADDR_VAR 0 9
43746: PUSH
43747: LD_INT 35
43749: PUSH
43750: LD_INT 20
43752: PUSH
43753: LD_INT 45
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43761: LD_VAR 0 6
43765: PPUSH
43766: CALL_OW 264
43770: PUSH
43771: LD_INT 47
43773: PUSH
43774: EMPTY
43775: LIST
43776: IN
43777: IFFALSE 43798
// points := [ 67 , 45 , 75 ] ;
43779: LD_ADDR_VAR 0 9
43783: PUSH
43784: LD_INT 67
43786: PUSH
43787: LD_INT 45
43789: PUSH
43790: LD_INT 75
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43798: LD_VAR 0 6
43802: PPUSH
43803: CALL_OW 264
43807: PUSH
43808: LD_INT 26
43810: PUSH
43811: EMPTY
43812: LIST
43813: IN
43814: IFFALSE 43835
// points := [ 120 , 30 , 80 ] ;
43816: LD_ADDR_VAR 0 9
43820: PUSH
43821: LD_INT 120
43823: PUSH
43824: LD_INT 30
43826: PUSH
43827: LD_INT 80
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43835: LD_VAR 0 6
43839: PPUSH
43840: CALL_OW 264
43844: PUSH
43845: LD_INT 22
43847: PUSH
43848: EMPTY
43849: LIST
43850: IN
43851: IFFALSE 43872
// points := [ 40 , 1 , 1 ] ;
43853: LD_ADDR_VAR 0 9
43857: PUSH
43858: LD_INT 40
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43872: LD_VAR 0 6
43876: PPUSH
43877: CALL_OW 264
43881: PUSH
43882: LD_INT 29
43884: PUSH
43885: EMPTY
43886: LIST
43887: IN
43888: IFFALSE 43909
// points := [ 70 , 200 , 400 ] ;
43890: LD_ADDR_VAR 0 9
43894: PUSH
43895: LD_INT 70
43897: PUSH
43898: LD_INT 200
43900: PUSH
43901: LD_INT 400
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43909: LD_VAR 0 6
43913: PPUSH
43914: CALL_OW 264
43918: PUSH
43919: LD_INT 14
43921: PUSH
43922: LD_INT 53
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: IN
43929: IFFALSE 43950
// points := [ 40 , 10 , 20 ] ;
43931: LD_ADDR_VAR 0 9
43935: PUSH
43936: LD_INT 40
43938: PUSH
43939: LD_INT 10
43941: PUSH
43942: LD_INT 20
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43950: LD_VAR 0 6
43954: PPUSH
43955: CALL_OW 264
43959: PUSH
43960: LD_INT 9
43962: PUSH
43963: EMPTY
43964: LIST
43965: IN
43966: IFFALSE 43987
// points := [ 5 , 70 , 20 ] ;
43968: LD_ADDR_VAR 0 9
43972: PUSH
43973: LD_INT 5
43975: PUSH
43976: LD_INT 70
43978: PUSH
43979: LD_INT 20
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43987: LD_VAR 0 6
43991: PPUSH
43992: CALL_OW 264
43996: PUSH
43997: LD_INT 10
43999: PUSH
44000: EMPTY
44001: LIST
44002: IN
44003: IFFALSE 44024
// points := [ 35 , 110 , 70 ] ;
44005: LD_ADDR_VAR 0 9
44009: PUSH
44010: LD_INT 35
44012: PUSH
44013: LD_INT 110
44015: PUSH
44016: LD_INT 70
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44024: LD_VAR 0 6
44028: PPUSH
44029: CALL_OW 265
44033: PUSH
44034: LD_INT 25
44036: EQUAL
44037: IFFALSE 44058
// points := [ 80 , 65 , 100 ] ;
44039: LD_ADDR_VAR 0 9
44043: PUSH
44044: LD_INT 80
44046: PUSH
44047: LD_INT 65
44049: PUSH
44050: LD_INT 100
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44058: LD_VAR 0 6
44062: PPUSH
44063: CALL_OW 263
44067: PUSH
44068: LD_INT 1
44070: EQUAL
44071: IFFALSE 44106
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44073: LD_ADDR_VAR 0 10
44077: PUSH
44078: LD_VAR 0 10
44082: PUSH
44083: LD_VAR 0 6
44087: PPUSH
44088: CALL_OW 311
44092: PPUSH
44093: LD_INT 3
44095: PPUSH
44096: CALL_OW 259
44100: PUSH
44101: LD_INT 4
44103: MUL
44104: MUL
44105: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44106: LD_VAR 0 6
44110: PPUSH
44111: CALL_OW 263
44115: PUSH
44116: LD_INT 2
44118: EQUAL
44119: IFFALSE 44170
// begin j := IsControledBy ( i ) ;
44121: LD_ADDR_VAR 0 7
44125: PUSH
44126: LD_VAR 0 6
44130: PPUSH
44131: CALL_OW 312
44135: ST_TO_ADDR
// if j then
44136: LD_VAR 0 7
44140: IFFALSE 44170
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44142: LD_ADDR_VAR 0 10
44146: PUSH
44147: LD_VAR 0 10
44151: PUSH
44152: LD_VAR 0 7
44156: PPUSH
44157: LD_INT 3
44159: PPUSH
44160: CALL_OW 259
44164: PUSH
44165: LD_INT 3
44167: MUL
44168: MUL
44169: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44170: LD_VAR 0 6
44174: PPUSH
44175: CALL_OW 264
44179: PUSH
44180: LD_INT 5
44182: PUSH
44183: LD_INT 6
44185: PUSH
44186: LD_INT 46
44188: PUSH
44189: LD_INT 44
44191: PUSH
44192: LD_INT 47
44194: PUSH
44195: LD_INT 45
44197: PUSH
44198: LD_INT 28
44200: PUSH
44201: LD_INT 7
44203: PUSH
44204: LD_INT 27
44206: PUSH
44207: LD_INT 29
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: IN
44222: PUSH
44223: LD_VAR 0 1
44227: PPUSH
44228: LD_INT 52
44230: PPUSH
44231: CALL_OW 321
44235: PUSH
44236: LD_INT 2
44238: EQUAL
44239: AND
44240: IFFALSE 44257
// bpoints := bpoints * 1.2 ;
44242: LD_ADDR_VAR 0 10
44246: PUSH
44247: LD_VAR 0 10
44251: PUSH
44252: LD_REAL  1.20000000000000E+0000
44255: MUL
44256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44257: LD_VAR 0 6
44261: PPUSH
44262: CALL_OW 264
44266: PUSH
44267: LD_INT 6
44269: PUSH
44270: LD_INT 46
44272: PUSH
44273: LD_INT 47
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: IN
44281: IFFALSE 44298
// bpoints := bpoints * 1.2 ;
44283: LD_ADDR_VAR 0 10
44287: PUSH
44288: LD_VAR 0 10
44292: PUSH
44293: LD_REAL  1.20000000000000E+0000
44296: MUL
44297: ST_TO_ADDR
// end ; unit_building :
44298: GO 44312
44300: LD_INT 3
44302: DOUBLE
44303: EQUAL
44304: IFTRUE 44308
44306: GO 44311
44308: POP
// ; end ;
44309: GO 44312
44311: POP
// for j = 1 to 3 do
44312: LD_ADDR_VAR 0 7
44316: PUSH
44317: DOUBLE
44318: LD_INT 1
44320: DEC
44321: ST_TO_ADDR
44322: LD_INT 3
44324: PUSH
44325: FOR_TO
44326: IFFALSE 44379
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44328: LD_ADDR_VAR 0 5
44332: PUSH
44333: LD_VAR 0 5
44337: PPUSH
44338: LD_VAR 0 7
44342: PPUSH
44343: LD_VAR 0 5
44347: PUSH
44348: LD_VAR 0 7
44352: ARRAY
44353: PUSH
44354: LD_VAR 0 9
44358: PUSH
44359: LD_VAR 0 7
44363: ARRAY
44364: PUSH
44365: LD_VAR 0 10
44369: MUL
44370: PLUS
44371: PPUSH
44372: CALL_OW 1
44376: ST_TO_ADDR
44377: GO 44325
44379: POP
44380: POP
// end ;
44381: GO 42858
44383: POP
44384: POP
// result := Replace ( result , 4 , tmp ) ;
44385: LD_ADDR_VAR 0 5
44389: PUSH
44390: LD_VAR 0 5
44394: PPUSH
44395: LD_INT 4
44397: PPUSH
44398: LD_VAR 0 8
44402: PPUSH
44403: CALL_OW 1
44407: ST_TO_ADDR
// end ;
44408: LD_VAR 0 5
44412: RET
// export function DangerAtRange ( unit , range ) ; begin
44413: LD_INT 0
44415: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44416: LD_ADDR_VAR 0 3
44420: PUSH
44421: LD_VAR 0 1
44425: PPUSH
44426: CALL_OW 255
44430: PPUSH
44431: LD_VAR 0 1
44435: PPUSH
44436: CALL_OW 250
44440: PPUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 251
44450: PPUSH
44451: LD_VAR 0 2
44455: PPUSH
44456: CALL 42710 0 4
44460: ST_TO_ADDR
// end ;
44461: LD_VAR 0 3
44465: RET
// export function DangerInArea ( side , area ) ; begin
44466: LD_INT 0
44468: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44469: LD_ADDR_VAR 0 3
44473: PUSH
44474: LD_VAR 0 2
44478: PPUSH
44479: LD_INT 81
44481: PUSH
44482: LD_VAR 0 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PPUSH
44491: CALL_OW 70
44495: ST_TO_ADDR
// end ;
44496: LD_VAR 0 3
44500: RET
// export function IsExtension ( b ) ; begin
44501: LD_INT 0
44503: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44504: LD_ADDR_VAR 0 2
44508: PUSH
44509: LD_VAR 0 1
44513: PUSH
44514: LD_INT 23
44516: PUSH
44517: LD_INT 20
44519: PUSH
44520: LD_INT 22
44522: PUSH
44523: LD_INT 17
44525: PUSH
44526: LD_INT 24
44528: PUSH
44529: LD_INT 21
44531: PUSH
44532: LD_INT 19
44534: PUSH
44535: LD_INT 16
44537: PUSH
44538: LD_INT 25
44540: PUSH
44541: LD_INT 18
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: IN
44556: ST_TO_ADDR
// end ;
44557: LD_VAR 0 2
44561: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44562: LD_INT 0
44564: PPUSH
44565: PPUSH
44566: PPUSH
// result := [ ] ;
44567: LD_ADDR_VAR 0 4
44571: PUSH
44572: EMPTY
44573: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44574: LD_ADDR_VAR 0 5
44578: PUSH
44579: LD_VAR 0 2
44583: PPUSH
44584: LD_INT 21
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PPUSH
44594: CALL_OW 70
44598: ST_TO_ADDR
// if not tmp then
44599: LD_VAR 0 5
44603: NOT
44604: IFFALSE 44608
// exit ;
44606: GO 44672
// if checkLink then
44608: LD_VAR 0 3
44612: IFFALSE 44662
// begin for i in tmp do
44614: LD_ADDR_VAR 0 6
44618: PUSH
44619: LD_VAR 0 5
44623: PUSH
44624: FOR_IN
44625: IFFALSE 44660
// if GetBase ( i ) <> base then
44627: LD_VAR 0 6
44631: PPUSH
44632: CALL_OW 274
44636: PUSH
44637: LD_VAR 0 1
44641: NONEQUAL
44642: IFFALSE 44658
// ComLinkToBase ( base , i ) ;
44644: LD_VAR 0 1
44648: PPUSH
44649: LD_VAR 0 6
44653: PPUSH
44654: CALL_OW 169
44658: GO 44624
44660: POP
44661: POP
// end ; result := tmp ;
44662: LD_ADDR_VAR 0 4
44666: PUSH
44667: LD_VAR 0 5
44671: ST_TO_ADDR
// end ;
44672: LD_VAR 0 4
44676: RET
// export function ComComplete ( units , b ) ; var i ; begin
44677: LD_INT 0
44679: PPUSH
44680: PPUSH
// if not units then
44681: LD_VAR 0 1
44685: NOT
44686: IFFALSE 44690
// exit ;
44688: GO 44780
// for i in units do
44690: LD_ADDR_VAR 0 4
44694: PUSH
44695: LD_VAR 0 1
44699: PUSH
44700: FOR_IN
44701: IFFALSE 44778
// if BuildingStatus ( b ) = bs_build then
44703: LD_VAR 0 2
44707: PPUSH
44708: CALL_OW 461
44712: PUSH
44713: LD_INT 1
44715: EQUAL
44716: IFFALSE 44776
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44718: LD_VAR 0 4
44722: PPUSH
44723: LD_STRING h
44725: PUSH
44726: LD_VAR 0 2
44730: PPUSH
44731: CALL_OW 250
44735: PUSH
44736: LD_VAR 0 2
44740: PPUSH
44741: CALL_OW 251
44745: PUSH
44746: LD_VAR 0 2
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: PUSH
44769: EMPTY
44770: LIST
44771: PPUSH
44772: CALL_OW 446
44776: GO 44700
44778: POP
44779: POP
// end ;
44780: LD_VAR 0 3
44784: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44785: LD_INT 0
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44793: LD_VAR 0 1
44797: NOT
44798: PUSH
44799: LD_VAR 0 1
44803: PPUSH
44804: CALL_OW 263
44808: PUSH
44809: LD_INT 2
44811: NONEQUAL
44812: OR
44813: IFFALSE 44817
// exit ;
44815: GO 45133
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44817: LD_ADDR_VAR 0 6
44821: PUSH
44822: LD_INT 22
44824: PUSH
44825: LD_VAR 0 1
44829: PPUSH
44830: CALL_OW 255
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 30
44844: PUSH
44845: LD_INT 36
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 34
44854: PUSH
44855: LD_INT 31
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: LIST
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PPUSH
44871: CALL_OW 69
44875: ST_TO_ADDR
// if not tmp then
44876: LD_VAR 0 6
44880: NOT
44881: IFFALSE 44885
// exit ;
44883: GO 45133
// result := [ ] ;
44885: LD_ADDR_VAR 0 2
44889: PUSH
44890: EMPTY
44891: ST_TO_ADDR
// for i in tmp do
44892: LD_ADDR_VAR 0 3
44896: PUSH
44897: LD_VAR 0 6
44901: PUSH
44902: FOR_IN
44903: IFFALSE 44974
// begin t := UnitsInside ( i ) ;
44905: LD_ADDR_VAR 0 4
44909: PUSH
44910: LD_VAR 0 3
44914: PPUSH
44915: CALL_OW 313
44919: ST_TO_ADDR
// if t then
44920: LD_VAR 0 4
44924: IFFALSE 44972
// for j in t do
44926: LD_ADDR_VAR 0 7
44930: PUSH
44931: LD_VAR 0 4
44935: PUSH
44936: FOR_IN
44937: IFFALSE 44970
// result := Replace ( result , result + 1 , j ) ;
44939: LD_ADDR_VAR 0 2
44943: PUSH
44944: LD_VAR 0 2
44948: PPUSH
44949: LD_VAR 0 2
44953: PUSH
44954: LD_INT 1
44956: PLUS
44957: PPUSH
44958: LD_VAR 0 7
44962: PPUSH
44963: CALL_OW 1
44967: ST_TO_ADDR
44968: GO 44936
44970: POP
44971: POP
// end ;
44972: GO 44902
44974: POP
44975: POP
// if not result then
44976: LD_VAR 0 2
44980: NOT
44981: IFFALSE 44985
// exit ;
44983: GO 45133
// mech := result [ 1 ] ;
44985: LD_ADDR_VAR 0 5
44989: PUSH
44990: LD_VAR 0 2
44994: PUSH
44995: LD_INT 1
44997: ARRAY
44998: ST_TO_ADDR
// if result > 1 then
44999: LD_VAR 0 2
45003: PUSH
45004: LD_INT 1
45006: GREATER
45007: IFFALSE 45119
// begin for i = 2 to result do
45009: LD_ADDR_VAR 0 3
45013: PUSH
45014: DOUBLE
45015: LD_INT 2
45017: DEC
45018: ST_TO_ADDR
45019: LD_VAR 0 2
45023: PUSH
45024: FOR_TO
45025: IFFALSE 45117
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45027: LD_ADDR_VAR 0 4
45031: PUSH
45032: LD_VAR 0 2
45036: PUSH
45037: LD_VAR 0 3
45041: ARRAY
45042: PPUSH
45043: LD_INT 3
45045: PPUSH
45046: CALL_OW 259
45050: PUSH
45051: LD_VAR 0 2
45055: PUSH
45056: LD_VAR 0 3
45060: ARRAY
45061: PPUSH
45062: CALL_OW 432
45066: MINUS
45067: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45068: LD_VAR 0 4
45072: PUSH
45073: LD_VAR 0 5
45077: PPUSH
45078: LD_INT 3
45080: PPUSH
45081: CALL_OW 259
45085: PUSH
45086: LD_VAR 0 5
45090: PPUSH
45091: CALL_OW 432
45095: MINUS
45096: GREATEREQUAL
45097: IFFALSE 45115
// mech := result [ i ] ;
45099: LD_ADDR_VAR 0 5
45103: PUSH
45104: LD_VAR 0 2
45108: PUSH
45109: LD_VAR 0 3
45113: ARRAY
45114: ST_TO_ADDR
// end ;
45115: GO 45024
45117: POP
45118: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45119: LD_VAR 0 1
45123: PPUSH
45124: LD_VAR 0 5
45128: PPUSH
45129: CALL_OW 135
// end ;
45133: LD_VAR 0 2
45137: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45138: LD_INT 0
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
// result := [ ] ;
45153: LD_ADDR_VAR 0 7
45157: PUSH
45158: EMPTY
45159: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45160: LD_VAR 0 1
45164: PPUSH
45165: CALL_OW 266
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: IN
45180: NOT
45181: IFFALSE 45185
// exit ;
45183: GO 46819
// if name then
45185: LD_VAR 0 3
45189: IFFALSE 45205
// SetBName ( base_dep , name ) ;
45191: LD_VAR 0 1
45195: PPUSH
45196: LD_VAR 0 3
45200: PPUSH
45201: CALL_OW 500
// base := GetBase ( base_dep ) ;
45205: LD_ADDR_VAR 0 15
45209: PUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL_OW 274
45219: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45220: LD_ADDR_VAR 0 16
45224: PUSH
45225: LD_VAR 0 1
45229: PPUSH
45230: CALL_OW 255
45234: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45235: LD_ADDR_VAR 0 17
45239: PUSH
45240: LD_VAR 0 1
45244: PPUSH
45245: CALL_OW 248
45249: ST_TO_ADDR
// if sources then
45250: LD_VAR 0 5
45254: IFFALSE 45301
// for i = 1 to 3 do
45256: LD_ADDR_VAR 0 8
45260: PUSH
45261: DOUBLE
45262: LD_INT 1
45264: DEC
45265: ST_TO_ADDR
45266: LD_INT 3
45268: PUSH
45269: FOR_TO
45270: IFFALSE 45299
// AddResourceType ( base , i , sources [ i ] ) ;
45272: LD_VAR 0 15
45276: PPUSH
45277: LD_VAR 0 8
45281: PPUSH
45282: LD_VAR 0 5
45286: PUSH
45287: LD_VAR 0 8
45291: ARRAY
45292: PPUSH
45293: CALL_OW 276
45297: GO 45269
45299: POP
45300: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45301: LD_ADDR_VAR 0 18
45305: PUSH
45306: LD_VAR 0 15
45310: PPUSH
45311: LD_VAR 0 2
45315: PPUSH
45316: LD_INT 1
45318: PPUSH
45319: CALL 44562 0 3
45323: ST_TO_ADDR
// InitHc ;
45324: CALL_OW 19
// InitUc ;
45328: CALL_OW 18
// uc_side := side ;
45332: LD_ADDR_OWVAR 20
45336: PUSH
45337: LD_VAR 0 16
45341: ST_TO_ADDR
// uc_nation := nation ;
45342: LD_ADDR_OWVAR 21
45346: PUSH
45347: LD_VAR 0 17
45351: ST_TO_ADDR
// if buildings then
45352: LD_VAR 0 18
45356: IFFALSE 46678
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45358: LD_ADDR_VAR 0 19
45362: PUSH
45363: LD_VAR 0 18
45367: PPUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 30
45373: PUSH
45374: LD_INT 29
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 30
45383: PUSH
45384: LD_INT 30
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: LIST
45395: PPUSH
45396: CALL_OW 72
45400: ST_TO_ADDR
// if tmp then
45401: LD_VAR 0 19
45405: IFFALSE 45453
// for i in tmp do
45407: LD_ADDR_VAR 0 8
45411: PUSH
45412: LD_VAR 0 19
45416: PUSH
45417: FOR_IN
45418: IFFALSE 45451
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45420: LD_VAR 0 8
45424: PPUSH
45425: CALL_OW 250
45429: PPUSH
45430: LD_VAR 0 8
45434: PPUSH
45435: CALL_OW 251
45439: PPUSH
45440: LD_VAR 0 16
45444: PPUSH
45445: CALL_OW 441
45449: GO 45417
45451: POP
45452: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45453: LD_VAR 0 18
45457: PPUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 30
45463: PUSH
45464: LD_INT 32
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 30
45473: PUSH
45474: LD_INT 33
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: PPUSH
45486: CALL_OW 72
45490: IFFALSE 45578
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45492: LD_ADDR_VAR 0 8
45496: PUSH
45497: LD_VAR 0 18
45501: PPUSH
45502: LD_INT 2
45504: PUSH
45505: LD_INT 30
45507: PUSH
45508: LD_INT 32
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 30
45517: PUSH
45518: LD_INT 33
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: LIST
45529: PPUSH
45530: CALL_OW 72
45534: PUSH
45535: FOR_IN
45536: IFFALSE 45576
// begin if not GetBWeapon ( i ) then
45538: LD_VAR 0 8
45542: PPUSH
45543: CALL_OW 269
45547: NOT
45548: IFFALSE 45574
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45550: LD_VAR 0 8
45554: PPUSH
45555: LD_VAR 0 8
45559: PPUSH
45560: LD_VAR 0 2
45564: PPUSH
45565: CALL 46824 0 2
45569: PPUSH
45570: CALL_OW 431
// end ;
45574: GO 45535
45576: POP
45577: POP
// end ; for i = 1 to personel do
45578: LD_ADDR_VAR 0 8
45582: PUSH
45583: DOUBLE
45584: LD_INT 1
45586: DEC
45587: ST_TO_ADDR
45588: LD_VAR 0 6
45592: PUSH
45593: FOR_TO
45594: IFFALSE 46658
// begin if i > 4 then
45596: LD_VAR 0 8
45600: PUSH
45601: LD_INT 4
45603: GREATER
45604: IFFALSE 45608
// break ;
45606: GO 46658
// case i of 1 :
45608: LD_VAR 0 8
45612: PUSH
45613: LD_INT 1
45615: DOUBLE
45616: EQUAL
45617: IFTRUE 45621
45619: GO 45701
45621: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45622: LD_ADDR_VAR 0 12
45626: PUSH
45627: LD_VAR 0 18
45631: PPUSH
45632: LD_INT 22
45634: PUSH
45635: LD_VAR 0 16
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 58
45646: PUSH
45647: EMPTY
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 30
45655: PUSH
45656: LD_INT 32
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 30
45665: PUSH
45666: LD_INT 4
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 30
45675: PUSH
45676: LD_INT 5
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: PPUSH
45694: CALL_OW 72
45698: ST_TO_ADDR
45699: GO 45923
45701: LD_INT 2
45703: DOUBLE
45704: EQUAL
45705: IFTRUE 45709
45707: GO 45771
45709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45710: LD_ADDR_VAR 0 12
45714: PUSH
45715: LD_VAR 0 18
45719: PPUSH
45720: LD_INT 22
45722: PUSH
45723: LD_VAR 0 16
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 30
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 30
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PPUSH
45764: CALL_OW 72
45768: ST_TO_ADDR
45769: GO 45923
45771: LD_INT 3
45773: DOUBLE
45774: EQUAL
45775: IFTRUE 45779
45777: GO 45841
45779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45780: LD_ADDR_VAR 0 12
45784: PUSH
45785: LD_VAR 0 18
45789: PPUSH
45790: LD_INT 22
45792: PUSH
45793: LD_VAR 0 16
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 30
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 30
45817: PUSH
45818: LD_INT 3
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PPUSH
45834: CALL_OW 72
45838: ST_TO_ADDR
45839: GO 45923
45841: LD_INT 4
45843: DOUBLE
45844: EQUAL
45845: IFTRUE 45849
45847: GO 45922
45849: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45850: LD_ADDR_VAR 0 12
45854: PUSH
45855: LD_VAR 0 18
45859: PPUSH
45860: LD_INT 22
45862: PUSH
45863: LD_VAR 0 16
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 30
45877: PUSH
45878: LD_INT 6
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 30
45887: PUSH
45888: LD_INT 7
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 30
45897: PUSH
45898: LD_INT 8
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PPUSH
45915: CALL_OW 72
45919: ST_TO_ADDR
45920: GO 45923
45922: POP
// if i = 1 then
45923: LD_VAR 0 8
45927: PUSH
45928: LD_INT 1
45930: EQUAL
45931: IFFALSE 46042
// begin tmp := [ ] ;
45933: LD_ADDR_VAR 0 19
45937: PUSH
45938: EMPTY
45939: ST_TO_ADDR
// for j in f do
45940: LD_ADDR_VAR 0 9
45944: PUSH
45945: LD_VAR 0 12
45949: PUSH
45950: FOR_IN
45951: IFFALSE 46024
// if GetBType ( j ) = b_bunker then
45953: LD_VAR 0 9
45957: PPUSH
45958: CALL_OW 266
45962: PUSH
45963: LD_INT 32
45965: EQUAL
45966: IFFALSE 45993
// tmp := Insert ( tmp , 1 , j ) else
45968: LD_ADDR_VAR 0 19
45972: PUSH
45973: LD_VAR 0 19
45977: PPUSH
45978: LD_INT 1
45980: PPUSH
45981: LD_VAR 0 9
45985: PPUSH
45986: CALL_OW 2
45990: ST_TO_ADDR
45991: GO 46022
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45993: LD_ADDR_VAR 0 19
45997: PUSH
45998: LD_VAR 0 19
46002: PPUSH
46003: LD_VAR 0 19
46007: PUSH
46008: LD_INT 1
46010: PLUS
46011: PPUSH
46012: LD_VAR 0 9
46016: PPUSH
46017: CALL_OW 2
46021: ST_TO_ADDR
46022: GO 45950
46024: POP
46025: POP
// if tmp then
46026: LD_VAR 0 19
46030: IFFALSE 46042
// f := tmp ;
46032: LD_ADDR_VAR 0 12
46036: PUSH
46037: LD_VAR 0 19
46041: ST_TO_ADDR
// end ; x := personel [ i ] ;
46042: LD_ADDR_VAR 0 13
46046: PUSH
46047: LD_VAR 0 6
46051: PUSH
46052: LD_VAR 0 8
46056: ARRAY
46057: ST_TO_ADDR
// if x = - 1 then
46058: LD_VAR 0 13
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: EQUAL
46067: IFFALSE 46276
// begin for j in f do
46069: LD_ADDR_VAR 0 9
46073: PUSH
46074: LD_VAR 0 12
46078: PUSH
46079: FOR_IN
46080: IFFALSE 46272
// repeat InitHc ;
46082: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46086: LD_VAR 0 9
46090: PPUSH
46091: CALL_OW 266
46095: PUSH
46096: LD_INT 5
46098: EQUAL
46099: IFFALSE 46169
// begin if UnitsInside ( j ) < 3 then
46101: LD_VAR 0 9
46105: PPUSH
46106: CALL_OW 313
46110: PUSH
46111: LD_INT 3
46113: LESS
46114: IFFALSE 46150
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46116: LD_INT 0
46118: PPUSH
46119: LD_INT 5
46121: PUSH
46122: LD_INT 8
46124: PUSH
46125: LD_INT 9
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: PUSH
46133: LD_VAR 0 17
46137: ARRAY
46138: PPUSH
46139: LD_VAR 0 4
46143: PPUSH
46144: CALL_OW 380
46148: GO 46167
// PrepareHuman ( false , i , skill ) ;
46150: LD_INT 0
46152: PPUSH
46153: LD_VAR 0 8
46157: PPUSH
46158: LD_VAR 0 4
46162: PPUSH
46163: CALL_OW 380
// end else
46167: GO 46186
// PrepareHuman ( false , i , skill ) ;
46169: LD_INT 0
46171: PPUSH
46172: LD_VAR 0 8
46176: PPUSH
46177: LD_VAR 0 4
46181: PPUSH
46182: CALL_OW 380
// un := CreateHuman ;
46186: LD_ADDR_VAR 0 14
46190: PUSH
46191: CALL_OW 44
46195: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46196: LD_ADDR_VAR 0 7
46200: PUSH
46201: LD_VAR 0 7
46205: PPUSH
46206: LD_INT 1
46208: PPUSH
46209: LD_VAR 0 14
46213: PPUSH
46214: CALL_OW 2
46218: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46219: LD_VAR 0 14
46223: PPUSH
46224: LD_VAR 0 9
46228: PPUSH
46229: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46233: LD_VAR 0 9
46237: PPUSH
46238: CALL_OW 313
46242: PUSH
46243: LD_INT 6
46245: EQUAL
46246: PUSH
46247: LD_VAR 0 9
46251: PPUSH
46252: CALL_OW 266
46256: PUSH
46257: LD_INT 32
46259: PUSH
46260: LD_INT 31
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: IN
46267: OR
46268: IFFALSE 46082
46270: GO 46079
46272: POP
46273: POP
// end else
46274: GO 46656
// for j = 1 to x do
46276: LD_ADDR_VAR 0 9
46280: PUSH
46281: DOUBLE
46282: LD_INT 1
46284: DEC
46285: ST_TO_ADDR
46286: LD_VAR 0 13
46290: PUSH
46291: FOR_TO
46292: IFFALSE 46654
// begin InitHc ;
46294: CALL_OW 19
// if not f then
46298: LD_VAR 0 12
46302: NOT
46303: IFFALSE 46392
// begin PrepareHuman ( false , i , skill ) ;
46305: LD_INT 0
46307: PPUSH
46308: LD_VAR 0 8
46312: PPUSH
46313: LD_VAR 0 4
46317: PPUSH
46318: CALL_OW 380
// un := CreateHuman ;
46322: LD_ADDR_VAR 0 14
46326: PUSH
46327: CALL_OW 44
46331: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46332: LD_ADDR_VAR 0 7
46336: PUSH
46337: LD_VAR 0 7
46341: PPUSH
46342: LD_INT 1
46344: PPUSH
46345: LD_VAR 0 14
46349: PPUSH
46350: CALL_OW 2
46354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46355: LD_VAR 0 14
46359: PPUSH
46360: LD_VAR 0 1
46364: PPUSH
46365: CALL_OW 250
46369: PPUSH
46370: LD_VAR 0 1
46374: PPUSH
46375: CALL_OW 251
46379: PPUSH
46380: LD_INT 10
46382: PPUSH
46383: LD_INT 0
46385: PPUSH
46386: CALL_OW 50
// continue ;
46390: GO 46291
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46392: LD_VAR 0 12
46396: PUSH
46397: LD_INT 1
46399: ARRAY
46400: PPUSH
46401: CALL_OW 313
46405: PUSH
46406: LD_VAR 0 12
46410: PUSH
46411: LD_INT 1
46413: ARRAY
46414: PPUSH
46415: CALL_OW 266
46419: PUSH
46420: LD_INT 32
46422: PUSH
46423: LD_INT 31
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: IN
46430: AND
46431: PUSH
46432: LD_VAR 0 12
46436: PUSH
46437: LD_INT 1
46439: ARRAY
46440: PPUSH
46441: CALL_OW 313
46445: PUSH
46446: LD_INT 6
46448: EQUAL
46449: OR
46450: IFFALSE 46470
// f := Delete ( f , 1 ) ;
46452: LD_ADDR_VAR 0 12
46456: PUSH
46457: LD_VAR 0 12
46461: PPUSH
46462: LD_INT 1
46464: PPUSH
46465: CALL_OW 3
46469: ST_TO_ADDR
// if not f then
46470: LD_VAR 0 12
46474: NOT
46475: IFFALSE 46493
// begin x := x + 2 ;
46477: LD_ADDR_VAR 0 13
46481: PUSH
46482: LD_VAR 0 13
46486: PUSH
46487: LD_INT 2
46489: PLUS
46490: ST_TO_ADDR
// continue ;
46491: GO 46291
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46493: LD_VAR 0 12
46497: PUSH
46498: LD_INT 1
46500: ARRAY
46501: PPUSH
46502: CALL_OW 266
46506: PUSH
46507: LD_INT 5
46509: EQUAL
46510: IFFALSE 46584
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46512: LD_VAR 0 12
46516: PUSH
46517: LD_INT 1
46519: ARRAY
46520: PPUSH
46521: CALL_OW 313
46525: PUSH
46526: LD_INT 3
46528: LESS
46529: IFFALSE 46565
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46531: LD_INT 0
46533: PPUSH
46534: LD_INT 5
46536: PUSH
46537: LD_INT 8
46539: PUSH
46540: LD_INT 9
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: PUSH
46548: LD_VAR 0 17
46552: ARRAY
46553: PPUSH
46554: LD_VAR 0 4
46558: PPUSH
46559: CALL_OW 380
46563: GO 46582
// PrepareHuman ( false , i , skill ) ;
46565: LD_INT 0
46567: PPUSH
46568: LD_VAR 0 8
46572: PPUSH
46573: LD_VAR 0 4
46577: PPUSH
46578: CALL_OW 380
// end else
46582: GO 46601
// PrepareHuman ( false , i , skill ) ;
46584: LD_INT 0
46586: PPUSH
46587: LD_VAR 0 8
46591: PPUSH
46592: LD_VAR 0 4
46596: PPUSH
46597: CALL_OW 380
// un := CreateHuman ;
46601: LD_ADDR_VAR 0 14
46605: PUSH
46606: CALL_OW 44
46610: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46611: LD_ADDR_VAR 0 7
46615: PUSH
46616: LD_VAR 0 7
46620: PPUSH
46621: LD_INT 1
46623: PPUSH
46624: LD_VAR 0 14
46628: PPUSH
46629: CALL_OW 2
46633: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46634: LD_VAR 0 14
46638: PPUSH
46639: LD_VAR 0 12
46643: PUSH
46644: LD_INT 1
46646: ARRAY
46647: PPUSH
46648: CALL_OW 52
// end ;
46652: GO 46291
46654: POP
46655: POP
// end ;
46656: GO 45593
46658: POP
46659: POP
// result := result ^ buildings ;
46660: LD_ADDR_VAR 0 7
46664: PUSH
46665: LD_VAR 0 7
46669: PUSH
46670: LD_VAR 0 18
46674: ADD
46675: ST_TO_ADDR
// end else
46676: GO 46819
// begin for i = 1 to personel do
46678: LD_ADDR_VAR 0 8
46682: PUSH
46683: DOUBLE
46684: LD_INT 1
46686: DEC
46687: ST_TO_ADDR
46688: LD_VAR 0 6
46692: PUSH
46693: FOR_TO
46694: IFFALSE 46817
// begin if i > 4 then
46696: LD_VAR 0 8
46700: PUSH
46701: LD_INT 4
46703: GREATER
46704: IFFALSE 46708
// break ;
46706: GO 46817
// x := personel [ i ] ;
46708: LD_ADDR_VAR 0 13
46712: PUSH
46713: LD_VAR 0 6
46717: PUSH
46718: LD_VAR 0 8
46722: ARRAY
46723: ST_TO_ADDR
// if x = - 1 then
46724: LD_VAR 0 13
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: EQUAL
46733: IFFALSE 46737
// continue ;
46735: GO 46693
// PrepareHuman ( false , i , skill ) ;
46737: LD_INT 0
46739: PPUSH
46740: LD_VAR 0 8
46744: PPUSH
46745: LD_VAR 0 4
46749: PPUSH
46750: CALL_OW 380
// un := CreateHuman ;
46754: LD_ADDR_VAR 0 14
46758: PUSH
46759: CALL_OW 44
46763: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46764: LD_VAR 0 14
46768: PPUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: CALL_OW 250
46778: PPUSH
46779: LD_VAR 0 1
46783: PPUSH
46784: CALL_OW 251
46788: PPUSH
46789: LD_INT 10
46791: PPUSH
46792: LD_INT 0
46794: PPUSH
46795: CALL_OW 50
// result := result ^ un ;
46799: LD_ADDR_VAR 0 7
46803: PUSH
46804: LD_VAR 0 7
46808: PUSH
46809: LD_VAR 0 14
46813: ADD
46814: ST_TO_ADDR
// end ;
46815: GO 46693
46817: POP
46818: POP
// end ; end ;
46819: LD_VAR 0 7
46823: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46824: LD_INT 0
46826: PPUSH
46827: PPUSH
46828: PPUSH
46829: PPUSH
46830: PPUSH
46831: PPUSH
46832: PPUSH
46833: PPUSH
46834: PPUSH
46835: PPUSH
46836: PPUSH
46837: PPUSH
46838: PPUSH
46839: PPUSH
46840: PPUSH
46841: PPUSH
// result := false ;
46842: LD_ADDR_VAR 0 3
46846: PUSH
46847: LD_INT 0
46849: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46850: LD_VAR 0 1
46854: NOT
46855: PUSH
46856: LD_VAR 0 1
46860: PPUSH
46861: CALL_OW 266
46865: PUSH
46866: LD_INT 32
46868: PUSH
46869: LD_INT 33
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: IN
46876: NOT
46877: OR
46878: IFFALSE 46882
// exit ;
46880: GO 47991
// nat := GetNation ( tower ) ;
46882: LD_ADDR_VAR 0 12
46886: PUSH
46887: LD_VAR 0 1
46891: PPUSH
46892: CALL_OW 248
46896: ST_TO_ADDR
// side := GetSide ( tower ) ;
46897: LD_ADDR_VAR 0 16
46901: PUSH
46902: LD_VAR 0 1
46906: PPUSH
46907: CALL_OW 255
46911: ST_TO_ADDR
// x := GetX ( tower ) ;
46912: LD_ADDR_VAR 0 10
46916: PUSH
46917: LD_VAR 0 1
46921: PPUSH
46922: CALL_OW 250
46926: ST_TO_ADDR
// y := GetY ( tower ) ;
46927: LD_ADDR_VAR 0 11
46931: PUSH
46932: LD_VAR 0 1
46936: PPUSH
46937: CALL_OW 251
46941: ST_TO_ADDR
// if not x or not y then
46942: LD_VAR 0 10
46946: NOT
46947: PUSH
46948: LD_VAR 0 11
46952: NOT
46953: OR
46954: IFFALSE 46958
// exit ;
46956: GO 47991
// weapon := 0 ;
46958: LD_ADDR_VAR 0 18
46962: PUSH
46963: LD_INT 0
46965: ST_TO_ADDR
// fac_list := [ ] ;
46966: LD_ADDR_VAR 0 17
46970: PUSH
46971: EMPTY
46972: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46973: LD_ADDR_VAR 0 6
46977: PUSH
46978: LD_VAR 0 1
46982: PPUSH
46983: CALL_OW 274
46987: PPUSH
46988: LD_VAR 0 2
46992: PPUSH
46993: LD_INT 0
46995: PPUSH
46996: CALL 44562 0 3
47000: PPUSH
47001: LD_INT 30
47003: PUSH
47004: LD_INT 3
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PPUSH
47011: CALL_OW 72
47015: ST_TO_ADDR
// if not factories then
47016: LD_VAR 0 6
47020: NOT
47021: IFFALSE 47025
// exit ;
47023: GO 47991
// for i in factories do
47025: LD_ADDR_VAR 0 8
47029: PUSH
47030: LD_VAR 0 6
47034: PUSH
47035: FOR_IN
47036: IFFALSE 47061
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47038: LD_ADDR_VAR 0 17
47042: PUSH
47043: LD_VAR 0 17
47047: PUSH
47048: LD_VAR 0 8
47052: PPUSH
47053: CALL_OW 478
47057: UNION
47058: ST_TO_ADDR
47059: GO 47035
47061: POP
47062: POP
// if not fac_list then
47063: LD_VAR 0 17
47067: NOT
47068: IFFALSE 47072
// exit ;
47070: GO 47991
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47072: LD_ADDR_VAR 0 5
47076: PUSH
47077: LD_INT 4
47079: PUSH
47080: LD_INT 5
47082: PUSH
47083: LD_INT 9
47085: PUSH
47086: LD_INT 10
47088: PUSH
47089: LD_INT 6
47091: PUSH
47092: LD_INT 7
47094: PUSH
47095: LD_INT 11
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 27
47109: PUSH
47110: LD_INT 28
47112: PUSH
47113: LD_INT 26
47115: PUSH
47116: LD_INT 30
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 43
47127: PUSH
47128: LD_INT 44
47130: PUSH
47131: LD_INT 46
47133: PUSH
47134: LD_INT 45
47136: PUSH
47137: LD_INT 47
47139: PUSH
47140: LD_INT 49
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: PUSH
47156: LD_VAR 0 12
47160: ARRAY
47161: ST_TO_ADDR
// list := list isect fac_list ;
47162: LD_ADDR_VAR 0 5
47166: PUSH
47167: LD_VAR 0 5
47171: PUSH
47172: LD_VAR 0 17
47176: ISECT
47177: ST_TO_ADDR
// if not list then
47178: LD_VAR 0 5
47182: NOT
47183: IFFALSE 47187
// exit ;
47185: GO 47991
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47187: LD_VAR 0 12
47191: PUSH
47192: LD_INT 3
47194: EQUAL
47195: PUSH
47196: LD_INT 49
47198: PUSH
47199: LD_VAR 0 5
47203: IN
47204: AND
47205: PUSH
47206: LD_INT 31
47208: PPUSH
47209: LD_VAR 0 16
47213: PPUSH
47214: CALL_OW 321
47218: PUSH
47219: LD_INT 2
47221: EQUAL
47222: AND
47223: IFFALSE 47283
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47225: LD_INT 22
47227: PUSH
47228: LD_VAR 0 16
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 35
47239: PUSH
47240: LD_INT 49
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 91
47249: PUSH
47250: LD_VAR 0 1
47254: PUSH
47255: LD_INT 10
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: PPUSH
47268: CALL_OW 69
47272: NOT
47273: IFFALSE 47283
// weapon := ru_time_lapser ;
47275: LD_ADDR_VAR 0 18
47279: PUSH
47280: LD_INT 49
47282: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47283: LD_VAR 0 12
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: IN
47298: PUSH
47299: LD_INT 11
47301: PUSH
47302: LD_VAR 0 5
47306: IN
47307: PUSH
47308: LD_INT 30
47310: PUSH
47311: LD_VAR 0 5
47315: IN
47316: OR
47317: AND
47318: PUSH
47319: LD_INT 6
47321: PPUSH
47322: LD_VAR 0 16
47326: PPUSH
47327: CALL_OW 321
47331: PUSH
47332: LD_INT 2
47334: EQUAL
47335: AND
47336: IFFALSE 47501
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47338: LD_INT 22
47340: PUSH
47341: LD_VAR 0 16
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 35
47355: PUSH
47356: LD_INT 11
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 35
47365: PUSH
47366: LD_INT 30
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 91
47380: PUSH
47381: LD_VAR 0 1
47385: PUSH
47386: LD_INT 18
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: PPUSH
47399: CALL_OW 69
47403: NOT
47404: PUSH
47405: LD_INT 22
47407: PUSH
47408: LD_VAR 0 16
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 30
47422: PUSH
47423: LD_INT 32
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 30
47432: PUSH
47433: LD_INT 33
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 91
47447: PUSH
47448: LD_VAR 0 1
47452: PUSH
47453: LD_INT 12
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: PUSH
47466: EMPTY
47467: LIST
47468: PPUSH
47469: CALL_OW 69
47473: PUSH
47474: LD_INT 2
47476: GREATER
47477: AND
47478: IFFALSE 47501
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47480: LD_ADDR_VAR 0 18
47484: PUSH
47485: LD_INT 11
47487: PUSH
47488: LD_INT 30
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_VAR 0 12
47499: ARRAY
47500: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47501: LD_VAR 0 18
47505: NOT
47506: PUSH
47507: LD_INT 40
47509: PPUSH
47510: LD_VAR 0 16
47514: PPUSH
47515: CALL_OW 321
47519: PUSH
47520: LD_INT 2
47522: EQUAL
47523: AND
47524: PUSH
47525: LD_INT 7
47527: PUSH
47528: LD_VAR 0 5
47532: IN
47533: PUSH
47534: LD_INT 28
47536: PUSH
47537: LD_VAR 0 5
47541: IN
47542: OR
47543: PUSH
47544: LD_INT 45
47546: PUSH
47547: LD_VAR 0 5
47551: IN
47552: OR
47553: AND
47554: IFFALSE 47808
// begin hex := GetHexInfo ( x , y ) ;
47556: LD_ADDR_VAR 0 4
47560: PUSH
47561: LD_VAR 0 10
47565: PPUSH
47566: LD_VAR 0 11
47570: PPUSH
47571: CALL_OW 546
47575: ST_TO_ADDR
// if hex [ 1 ] then
47576: LD_VAR 0 4
47580: PUSH
47581: LD_INT 1
47583: ARRAY
47584: IFFALSE 47588
// exit ;
47586: GO 47991
// height := hex [ 2 ] ;
47588: LD_ADDR_VAR 0 15
47592: PUSH
47593: LD_VAR 0 4
47597: PUSH
47598: LD_INT 2
47600: ARRAY
47601: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47602: LD_ADDR_VAR 0 14
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 5
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// for i in tmp do
47625: LD_ADDR_VAR 0 8
47629: PUSH
47630: LD_VAR 0 14
47634: PUSH
47635: FOR_IN
47636: IFFALSE 47806
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47638: LD_ADDR_VAR 0 9
47642: PUSH
47643: LD_VAR 0 10
47647: PPUSH
47648: LD_VAR 0 8
47652: PPUSH
47653: LD_INT 5
47655: PPUSH
47656: CALL_OW 272
47660: PUSH
47661: LD_VAR 0 11
47665: PPUSH
47666: LD_VAR 0 8
47670: PPUSH
47671: LD_INT 5
47673: PPUSH
47674: CALL_OW 273
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47683: LD_VAR 0 9
47687: PUSH
47688: LD_INT 1
47690: ARRAY
47691: PPUSH
47692: LD_VAR 0 9
47696: PUSH
47697: LD_INT 2
47699: ARRAY
47700: PPUSH
47701: CALL_OW 488
47705: IFFALSE 47804
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47707: LD_ADDR_VAR 0 4
47711: PUSH
47712: LD_VAR 0 9
47716: PUSH
47717: LD_INT 1
47719: ARRAY
47720: PPUSH
47721: LD_VAR 0 9
47725: PUSH
47726: LD_INT 2
47728: ARRAY
47729: PPUSH
47730: CALL_OW 546
47734: ST_TO_ADDR
// if hex [ 1 ] then
47735: LD_VAR 0 4
47739: PUSH
47740: LD_INT 1
47742: ARRAY
47743: IFFALSE 47747
// continue ;
47745: GO 47635
// h := hex [ 2 ] ;
47747: LD_ADDR_VAR 0 13
47751: PUSH
47752: LD_VAR 0 4
47756: PUSH
47757: LD_INT 2
47759: ARRAY
47760: ST_TO_ADDR
// if h + 7 < height then
47761: LD_VAR 0 13
47765: PUSH
47766: LD_INT 7
47768: PLUS
47769: PUSH
47770: LD_VAR 0 15
47774: LESS
47775: IFFALSE 47804
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47777: LD_ADDR_VAR 0 18
47781: PUSH
47782: LD_INT 7
47784: PUSH
47785: LD_INT 28
47787: PUSH
47788: LD_INT 45
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: PUSH
47796: LD_VAR 0 12
47800: ARRAY
47801: ST_TO_ADDR
// break ;
47802: GO 47806
// end ; end ; end ;
47804: GO 47635
47806: POP
47807: POP
// end ; if not weapon then
47808: LD_VAR 0 18
47812: NOT
47813: IFFALSE 47873
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47815: LD_ADDR_VAR 0 5
47819: PUSH
47820: LD_VAR 0 5
47824: PUSH
47825: LD_INT 11
47827: PUSH
47828: LD_INT 30
47830: PUSH
47831: LD_INT 49
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: DIFF
47839: ST_TO_ADDR
// if not list then
47840: LD_VAR 0 5
47844: NOT
47845: IFFALSE 47849
// exit ;
47847: GO 47991
// weapon := list [ rand ( 1 , list ) ] ;
47849: LD_ADDR_VAR 0 18
47853: PUSH
47854: LD_VAR 0 5
47858: PUSH
47859: LD_INT 1
47861: PPUSH
47862: LD_VAR 0 5
47866: PPUSH
47867: CALL_OW 12
47871: ARRAY
47872: ST_TO_ADDR
// end ; if weapon then
47873: LD_VAR 0 18
47877: IFFALSE 47991
// begin tmp := CostOfWeapon ( weapon ) ;
47879: LD_ADDR_VAR 0 14
47883: PUSH
47884: LD_VAR 0 18
47888: PPUSH
47889: CALL_OW 451
47893: ST_TO_ADDR
// j := GetBase ( tower ) ;
47894: LD_ADDR_VAR 0 9
47898: PUSH
47899: LD_VAR 0 1
47903: PPUSH
47904: CALL_OW 274
47908: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47909: LD_VAR 0 9
47913: PPUSH
47914: LD_INT 1
47916: PPUSH
47917: CALL_OW 275
47921: PUSH
47922: LD_VAR 0 14
47926: PUSH
47927: LD_INT 1
47929: ARRAY
47930: GREATEREQUAL
47931: PUSH
47932: LD_VAR 0 9
47936: PPUSH
47937: LD_INT 2
47939: PPUSH
47940: CALL_OW 275
47944: PUSH
47945: LD_VAR 0 14
47949: PUSH
47950: LD_INT 2
47952: ARRAY
47953: GREATEREQUAL
47954: AND
47955: PUSH
47956: LD_VAR 0 9
47960: PPUSH
47961: LD_INT 3
47963: PPUSH
47964: CALL_OW 275
47968: PUSH
47969: LD_VAR 0 14
47973: PUSH
47974: LD_INT 3
47976: ARRAY
47977: GREATEREQUAL
47978: AND
47979: IFFALSE 47991
// result := weapon ;
47981: LD_ADDR_VAR 0 3
47985: PUSH
47986: LD_VAR 0 18
47990: ST_TO_ADDR
// end ; end ;
47991: LD_VAR 0 3
47995: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47996: LD_INT 0
47998: PPUSH
47999: PPUSH
// result := true ;
48000: LD_ADDR_VAR 0 3
48004: PUSH
48005: LD_INT 1
48007: ST_TO_ADDR
// if array1 = array2 then
48008: LD_VAR 0 1
48012: PUSH
48013: LD_VAR 0 2
48017: EQUAL
48018: IFFALSE 48078
// begin for i = 1 to array1 do
48020: LD_ADDR_VAR 0 4
48024: PUSH
48025: DOUBLE
48026: LD_INT 1
48028: DEC
48029: ST_TO_ADDR
48030: LD_VAR 0 1
48034: PUSH
48035: FOR_TO
48036: IFFALSE 48074
// if array1 [ i ] <> array2 [ i ] then
48038: LD_VAR 0 1
48042: PUSH
48043: LD_VAR 0 4
48047: ARRAY
48048: PUSH
48049: LD_VAR 0 2
48053: PUSH
48054: LD_VAR 0 4
48058: ARRAY
48059: NONEQUAL
48060: IFFALSE 48072
// begin result := false ;
48062: LD_ADDR_VAR 0 3
48066: PUSH
48067: LD_INT 0
48069: ST_TO_ADDR
// break ;
48070: GO 48074
// end ;
48072: GO 48035
48074: POP
48075: POP
// end else
48076: GO 48086
// result := false ;
48078: LD_ADDR_VAR 0 3
48082: PUSH
48083: LD_INT 0
48085: ST_TO_ADDR
// end ;
48086: LD_VAR 0 3
48090: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48091: LD_INT 0
48093: PPUSH
48094: PPUSH
// if not array1 or not array2 then
48095: LD_VAR 0 1
48099: NOT
48100: PUSH
48101: LD_VAR 0 2
48105: NOT
48106: OR
48107: IFFALSE 48111
// exit ;
48109: GO 48175
// result := true ;
48111: LD_ADDR_VAR 0 3
48115: PUSH
48116: LD_INT 1
48118: ST_TO_ADDR
// for i = 1 to array1 do
48119: LD_ADDR_VAR 0 4
48123: PUSH
48124: DOUBLE
48125: LD_INT 1
48127: DEC
48128: ST_TO_ADDR
48129: LD_VAR 0 1
48133: PUSH
48134: FOR_TO
48135: IFFALSE 48173
// if array1 [ i ] <> array2 [ i ] then
48137: LD_VAR 0 1
48141: PUSH
48142: LD_VAR 0 4
48146: ARRAY
48147: PUSH
48148: LD_VAR 0 2
48152: PUSH
48153: LD_VAR 0 4
48157: ARRAY
48158: NONEQUAL
48159: IFFALSE 48171
// begin result := false ;
48161: LD_ADDR_VAR 0 3
48165: PUSH
48166: LD_INT 0
48168: ST_TO_ADDR
// break ;
48169: GO 48173
// end ;
48171: GO 48134
48173: POP
48174: POP
// end ;
48175: LD_VAR 0 3
48179: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48180: LD_INT 0
48182: PPUSH
48183: PPUSH
48184: PPUSH
// pom := GetBase ( fac ) ;
48185: LD_ADDR_VAR 0 5
48189: PUSH
48190: LD_VAR 0 1
48194: PPUSH
48195: CALL_OW 274
48199: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48200: LD_ADDR_VAR 0 4
48204: PUSH
48205: LD_VAR 0 2
48209: PUSH
48210: LD_INT 1
48212: ARRAY
48213: PPUSH
48214: LD_VAR 0 2
48218: PUSH
48219: LD_INT 2
48221: ARRAY
48222: PPUSH
48223: LD_VAR 0 2
48227: PUSH
48228: LD_INT 3
48230: ARRAY
48231: PPUSH
48232: LD_VAR 0 2
48236: PUSH
48237: LD_INT 4
48239: ARRAY
48240: PPUSH
48241: CALL_OW 449
48245: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48246: LD_ADDR_VAR 0 3
48250: PUSH
48251: LD_VAR 0 5
48255: PPUSH
48256: LD_INT 1
48258: PPUSH
48259: CALL_OW 275
48263: PUSH
48264: LD_VAR 0 4
48268: PUSH
48269: LD_INT 1
48271: ARRAY
48272: GREATEREQUAL
48273: PUSH
48274: LD_VAR 0 5
48278: PPUSH
48279: LD_INT 2
48281: PPUSH
48282: CALL_OW 275
48286: PUSH
48287: LD_VAR 0 4
48291: PUSH
48292: LD_INT 2
48294: ARRAY
48295: GREATEREQUAL
48296: AND
48297: PUSH
48298: LD_VAR 0 5
48302: PPUSH
48303: LD_INT 3
48305: PPUSH
48306: CALL_OW 275
48310: PUSH
48311: LD_VAR 0 4
48315: PUSH
48316: LD_INT 3
48318: ARRAY
48319: GREATEREQUAL
48320: AND
48321: ST_TO_ADDR
// end ;
48322: LD_VAR 0 3
48326: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48327: LD_INT 0
48329: PPUSH
48330: PPUSH
48331: PPUSH
48332: PPUSH
// pom := GetBase ( building ) ;
48333: LD_ADDR_VAR 0 3
48337: PUSH
48338: LD_VAR 0 1
48342: PPUSH
48343: CALL_OW 274
48347: ST_TO_ADDR
// if not pom then
48348: LD_VAR 0 3
48352: NOT
48353: IFFALSE 48357
// exit ;
48355: GO 48527
// btype := GetBType ( building ) ;
48357: LD_ADDR_VAR 0 5
48361: PUSH
48362: LD_VAR 0 1
48366: PPUSH
48367: CALL_OW 266
48371: ST_TO_ADDR
// if btype = b_armoury then
48372: LD_VAR 0 5
48376: PUSH
48377: LD_INT 4
48379: EQUAL
48380: IFFALSE 48390
// btype := b_barracks ;
48382: LD_ADDR_VAR 0 5
48386: PUSH
48387: LD_INT 5
48389: ST_TO_ADDR
// if btype = b_depot then
48390: LD_VAR 0 5
48394: PUSH
48395: LD_INT 0
48397: EQUAL
48398: IFFALSE 48408
// btype := b_warehouse ;
48400: LD_ADDR_VAR 0 5
48404: PUSH
48405: LD_INT 1
48407: ST_TO_ADDR
// if btype = b_workshop then
48408: LD_VAR 0 5
48412: PUSH
48413: LD_INT 2
48415: EQUAL
48416: IFFALSE 48426
// btype := b_factory ;
48418: LD_ADDR_VAR 0 5
48422: PUSH
48423: LD_INT 3
48425: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48426: LD_ADDR_VAR 0 4
48430: PUSH
48431: LD_VAR 0 5
48435: PPUSH
48436: LD_VAR 0 1
48440: PPUSH
48441: CALL_OW 248
48445: PPUSH
48446: CALL_OW 450
48450: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48451: LD_ADDR_VAR 0 2
48455: PUSH
48456: LD_VAR 0 3
48460: PPUSH
48461: LD_INT 1
48463: PPUSH
48464: CALL_OW 275
48468: PUSH
48469: LD_VAR 0 4
48473: PUSH
48474: LD_INT 1
48476: ARRAY
48477: GREATEREQUAL
48478: PUSH
48479: LD_VAR 0 3
48483: PPUSH
48484: LD_INT 2
48486: PPUSH
48487: CALL_OW 275
48491: PUSH
48492: LD_VAR 0 4
48496: PUSH
48497: LD_INT 2
48499: ARRAY
48500: GREATEREQUAL
48501: AND
48502: PUSH
48503: LD_VAR 0 3
48507: PPUSH
48508: LD_INT 3
48510: PPUSH
48511: CALL_OW 275
48515: PUSH
48516: LD_VAR 0 4
48520: PUSH
48521: LD_INT 3
48523: ARRAY
48524: GREATEREQUAL
48525: AND
48526: ST_TO_ADDR
// end ;
48527: LD_VAR 0 2
48531: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48532: LD_INT 0
48534: PPUSH
48535: PPUSH
48536: PPUSH
// pom := GetBase ( building ) ;
48537: LD_ADDR_VAR 0 4
48541: PUSH
48542: LD_VAR 0 1
48546: PPUSH
48547: CALL_OW 274
48551: ST_TO_ADDR
// if not pom then
48552: LD_VAR 0 4
48556: NOT
48557: IFFALSE 48561
// exit ;
48559: GO 48662
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48561: LD_ADDR_VAR 0 5
48565: PUSH
48566: LD_VAR 0 2
48570: PPUSH
48571: LD_VAR 0 1
48575: PPUSH
48576: CALL_OW 248
48580: PPUSH
48581: CALL_OW 450
48585: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48586: LD_ADDR_VAR 0 3
48590: PUSH
48591: LD_VAR 0 4
48595: PPUSH
48596: LD_INT 1
48598: PPUSH
48599: CALL_OW 275
48603: PUSH
48604: LD_VAR 0 5
48608: PUSH
48609: LD_INT 1
48611: ARRAY
48612: GREATEREQUAL
48613: PUSH
48614: LD_VAR 0 4
48618: PPUSH
48619: LD_INT 2
48621: PPUSH
48622: CALL_OW 275
48626: PUSH
48627: LD_VAR 0 5
48631: PUSH
48632: LD_INT 2
48634: ARRAY
48635: GREATEREQUAL
48636: AND
48637: PUSH
48638: LD_VAR 0 4
48642: PPUSH
48643: LD_INT 3
48645: PPUSH
48646: CALL_OW 275
48650: PUSH
48651: LD_VAR 0 5
48655: PUSH
48656: LD_INT 3
48658: ARRAY
48659: GREATEREQUAL
48660: AND
48661: ST_TO_ADDR
// end ;
48662: LD_VAR 0 3
48666: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48667: LD_INT 0
48669: PPUSH
48670: PPUSH
48671: PPUSH
48672: PPUSH
48673: PPUSH
48674: PPUSH
48675: PPUSH
48676: PPUSH
48677: PPUSH
48678: PPUSH
48679: PPUSH
// result := false ;
48680: LD_ADDR_VAR 0 8
48684: PUSH
48685: LD_INT 0
48687: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48688: LD_VAR 0 5
48692: NOT
48693: PUSH
48694: LD_VAR 0 1
48698: NOT
48699: OR
48700: PUSH
48701: LD_VAR 0 2
48705: NOT
48706: OR
48707: PUSH
48708: LD_VAR 0 3
48712: NOT
48713: OR
48714: IFFALSE 48718
// exit ;
48716: GO 49532
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48718: LD_ADDR_VAR 0 14
48722: PUSH
48723: LD_VAR 0 1
48727: PPUSH
48728: LD_VAR 0 2
48732: PPUSH
48733: LD_VAR 0 3
48737: PPUSH
48738: LD_VAR 0 4
48742: PPUSH
48743: LD_VAR 0 5
48747: PUSH
48748: LD_INT 1
48750: ARRAY
48751: PPUSH
48752: CALL_OW 248
48756: PPUSH
48757: LD_INT 0
48759: PPUSH
48760: CALL 50769 0 6
48764: ST_TO_ADDR
// if not hexes then
48765: LD_VAR 0 14
48769: NOT
48770: IFFALSE 48774
// exit ;
48772: GO 49532
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48774: LD_ADDR_VAR 0 17
48778: PUSH
48779: LD_VAR 0 5
48783: PPUSH
48784: LD_INT 22
48786: PUSH
48787: LD_VAR 0 13
48791: PPUSH
48792: CALL_OW 255
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 30
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 30
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PPUSH
48833: CALL_OW 72
48837: ST_TO_ADDR
// for i = 1 to hexes do
48838: LD_ADDR_VAR 0 9
48842: PUSH
48843: DOUBLE
48844: LD_INT 1
48846: DEC
48847: ST_TO_ADDR
48848: LD_VAR 0 14
48852: PUSH
48853: FOR_TO
48854: IFFALSE 49530
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48856: LD_ADDR_VAR 0 13
48860: PUSH
48861: LD_VAR 0 14
48865: PUSH
48866: LD_VAR 0 9
48870: ARRAY
48871: PUSH
48872: LD_INT 1
48874: ARRAY
48875: PPUSH
48876: LD_VAR 0 14
48880: PUSH
48881: LD_VAR 0 9
48885: ARRAY
48886: PUSH
48887: LD_INT 2
48889: ARRAY
48890: PPUSH
48891: CALL_OW 428
48895: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48896: LD_VAR 0 14
48900: PUSH
48901: LD_VAR 0 9
48905: ARRAY
48906: PUSH
48907: LD_INT 1
48909: ARRAY
48910: PPUSH
48911: LD_VAR 0 14
48915: PUSH
48916: LD_VAR 0 9
48920: ARRAY
48921: PUSH
48922: LD_INT 2
48924: ARRAY
48925: PPUSH
48926: CALL_OW 351
48930: PUSH
48931: LD_VAR 0 14
48935: PUSH
48936: LD_VAR 0 9
48940: ARRAY
48941: PUSH
48942: LD_INT 1
48944: ARRAY
48945: PPUSH
48946: LD_VAR 0 14
48950: PUSH
48951: LD_VAR 0 9
48955: ARRAY
48956: PUSH
48957: LD_INT 2
48959: ARRAY
48960: PPUSH
48961: CALL_OW 488
48965: NOT
48966: OR
48967: PUSH
48968: LD_VAR 0 13
48972: PPUSH
48973: CALL_OW 247
48977: PUSH
48978: LD_INT 3
48980: EQUAL
48981: OR
48982: IFFALSE 48988
// exit ;
48984: POP
48985: POP
48986: GO 49532
// if not tmp then
48988: LD_VAR 0 13
48992: NOT
48993: IFFALSE 48997
// continue ;
48995: GO 48853
// result := true ;
48997: LD_ADDR_VAR 0 8
49001: PUSH
49002: LD_INT 1
49004: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49005: LD_VAR 0 6
49009: PUSH
49010: LD_VAR 0 13
49014: PPUSH
49015: CALL_OW 247
49019: PUSH
49020: LD_INT 2
49022: EQUAL
49023: AND
49024: PUSH
49025: LD_VAR 0 13
49029: PPUSH
49030: CALL_OW 263
49034: PUSH
49035: LD_INT 1
49037: EQUAL
49038: AND
49039: IFFALSE 49203
// begin if IsDrivenBy ( tmp ) then
49041: LD_VAR 0 13
49045: PPUSH
49046: CALL_OW 311
49050: IFFALSE 49054
// continue ;
49052: GO 48853
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49054: LD_VAR 0 6
49058: PPUSH
49059: LD_INT 3
49061: PUSH
49062: LD_INT 60
49064: PUSH
49065: EMPTY
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 55
49077: PUSH
49078: EMPTY
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PPUSH
49089: CALL_OW 72
49093: IFFALSE 49201
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49095: LD_ADDR_VAR 0 18
49099: PUSH
49100: LD_VAR 0 6
49104: PPUSH
49105: LD_INT 3
49107: PUSH
49108: LD_INT 60
49110: PUSH
49111: EMPTY
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: PUSH
49121: LD_INT 55
49123: PUSH
49124: EMPTY
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PPUSH
49135: CALL_OW 72
49139: PUSH
49140: LD_INT 1
49142: ARRAY
49143: ST_TO_ADDR
// if IsInUnit ( driver ) then
49144: LD_VAR 0 18
49148: PPUSH
49149: CALL_OW 310
49153: IFFALSE 49164
// ComExit ( driver ) ;
49155: LD_VAR 0 18
49159: PPUSH
49160: CALL 73953 0 1
// AddComEnterUnit ( driver , tmp ) ;
49164: LD_VAR 0 18
49168: PPUSH
49169: LD_VAR 0 13
49173: PPUSH
49174: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49178: LD_VAR 0 18
49182: PPUSH
49183: LD_VAR 0 7
49187: PPUSH
49188: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49192: LD_VAR 0 18
49196: PPUSH
49197: CALL_OW 181
// end ; continue ;
49201: GO 48853
// end ; if not cleaners or not tmp in cleaners then
49203: LD_VAR 0 6
49207: NOT
49208: PUSH
49209: LD_VAR 0 13
49213: PUSH
49214: LD_VAR 0 6
49218: IN
49219: NOT
49220: OR
49221: IFFALSE 49528
// begin if dep then
49223: LD_VAR 0 17
49227: IFFALSE 49363
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49229: LD_ADDR_VAR 0 16
49233: PUSH
49234: LD_VAR 0 17
49238: PUSH
49239: LD_INT 1
49241: ARRAY
49242: PPUSH
49243: CALL_OW 250
49247: PPUSH
49248: LD_VAR 0 17
49252: PUSH
49253: LD_INT 1
49255: ARRAY
49256: PPUSH
49257: CALL_OW 254
49261: PPUSH
49262: LD_INT 5
49264: PPUSH
49265: CALL_OW 272
49269: PUSH
49270: LD_VAR 0 17
49274: PUSH
49275: LD_INT 1
49277: ARRAY
49278: PPUSH
49279: CALL_OW 251
49283: PPUSH
49284: LD_VAR 0 17
49288: PUSH
49289: LD_INT 1
49291: ARRAY
49292: PPUSH
49293: CALL_OW 254
49297: PPUSH
49298: LD_INT 5
49300: PPUSH
49301: CALL_OW 273
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49310: LD_VAR 0 16
49314: PUSH
49315: LD_INT 1
49317: ARRAY
49318: PPUSH
49319: LD_VAR 0 16
49323: PUSH
49324: LD_INT 2
49326: ARRAY
49327: PPUSH
49328: CALL_OW 488
49332: IFFALSE 49363
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49334: LD_VAR 0 13
49338: PPUSH
49339: LD_VAR 0 16
49343: PUSH
49344: LD_INT 1
49346: ARRAY
49347: PPUSH
49348: LD_VAR 0 16
49352: PUSH
49353: LD_INT 2
49355: ARRAY
49356: PPUSH
49357: CALL_OW 111
// continue ;
49361: GO 48853
// end ; end ; r := GetDir ( tmp ) ;
49363: LD_ADDR_VAR 0 15
49367: PUSH
49368: LD_VAR 0 13
49372: PPUSH
49373: CALL_OW 254
49377: ST_TO_ADDR
// if r = 5 then
49378: LD_VAR 0 15
49382: PUSH
49383: LD_INT 5
49385: EQUAL
49386: IFFALSE 49396
// r := 0 ;
49388: LD_ADDR_VAR 0 15
49392: PUSH
49393: LD_INT 0
49395: ST_TO_ADDR
// for j = r to 5 do
49396: LD_ADDR_VAR 0 10
49400: PUSH
49401: DOUBLE
49402: LD_VAR 0 15
49406: DEC
49407: ST_TO_ADDR
49408: LD_INT 5
49410: PUSH
49411: FOR_TO
49412: IFFALSE 49526
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49414: LD_ADDR_VAR 0 11
49418: PUSH
49419: LD_VAR 0 13
49423: PPUSH
49424: CALL_OW 250
49428: PPUSH
49429: LD_VAR 0 10
49433: PPUSH
49434: LD_INT 2
49436: PPUSH
49437: CALL_OW 272
49441: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49442: LD_ADDR_VAR 0 12
49446: PUSH
49447: LD_VAR 0 13
49451: PPUSH
49452: CALL_OW 251
49456: PPUSH
49457: LD_VAR 0 10
49461: PPUSH
49462: LD_INT 2
49464: PPUSH
49465: CALL_OW 273
49469: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49470: LD_VAR 0 11
49474: PPUSH
49475: LD_VAR 0 12
49479: PPUSH
49480: CALL_OW 488
49484: PUSH
49485: LD_VAR 0 11
49489: PPUSH
49490: LD_VAR 0 12
49494: PPUSH
49495: CALL_OW 428
49499: NOT
49500: AND
49501: IFFALSE 49524
// begin ComMoveXY ( tmp , _x , _y ) ;
49503: LD_VAR 0 13
49507: PPUSH
49508: LD_VAR 0 11
49512: PPUSH
49513: LD_VAR 0 12
49517: PPUSH
49518: CALL_OW 111
// break ;
49522: GO 49526
// end ; end ;
49524: GO 49411
49526: POP
49527: POP
// end ; end ;
49528: GO 48853
49530: POP
49531: POP
// end ;
49532: LD_VAR 0 8
49536: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49537: LD_INT 0
49539: PPUSH
// result := true ;
49540: LD_ADDR_VAR 0 3
49544: PUSH
49545: LD_INT 1
49547: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49548: LD_VAR 0 2
49552: PUSH
49553: LD_INT 24
49555: DOUBLE
49556: EQUAL
49557: IFTRUE 49567
49559: LD_INT 33
49561: DOUBLE
49562: EQUAL
49563: IFTRUE 49567
49565: GO 49592
49567: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49568: LD_ADDR_VAR 0 3
49572: PUSH
49573: LD_INT 32
49575: PPUSH
49576: LD_VAR 0 1
49580: PPUSH
49581: CALL_OW 321
49585: PUSH
49586: LD_INT 2
49588: EQUAL
49589: ST_TO_ADDR
49590: GO 49912
49592: LD_INT 20
49594: DOUBLE
49595: EQUAL
49596: IFTRUE 49600
49598: GO 49625
49600: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49601: LD_ADDR_VAR 0 3
49605: PUSH
49606: LD_INT 6
49608: PPUSH
49609: LD_VAR 0 1
49613: PPUSH
49614: CALL_OW 321
49618: PUSH
49619: LD_INT 2
49621: EQUAL
49622: ST_TO_ADDR
49623: GO 49912
49625: LD_INT 22
49627: DOUBLE
49628: EQUAL
49629: IFTRUE 49639
49631: LD_INT 36
49633: DOUBLE
49634: EQUAL
49635: IFTRUE 49639
49637: GO 49664
49639: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49640: LD_ADDR_VAR 0 3
49644: PUSH
49645: LD_INT 15
49647: PPUSH
49648: LD_VAR 0 1
49652: PPUSH
49653: CALL_OW 321
49657: PUSH
49658: LD_INT 2
49660: EQUAL
49661: ST_TO_ADDR
49662: GO 49912
49664: LD_INT 30
49666: DOUBLE
49667: EQUAL
49668: IFTRUE 49672
49670: GO 49697
49672: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49673: LD_ADDR_VAR 0 3
49677: PUSH
49678: LD_INT 20
49680: PPUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 321
49690: PUSH
49691: LD_INT 2
49693: EQUAL
49694: ST_TO_ADDR
49695: GO 49912
49697: LD_INT 28
49699: DOUBLE
49700: EQUAL
49701: IFTRUE 49711
49703: LD_INT 21
49705: DOUBLE
49706: EQUAL
49707: IFTRUE 49711
49709: GO 49736
49711: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49712: LD_ADDR_VAR 0 3
49716: PUSH
49717: LD_INT 21
49719: PPUSH
49720: LD_VAR 0 1
49724: PPUSH
49725: CALL_OW 321
49729: PUSH
49730: LD_INT 2
49732: EQUAL
49733: ST_TO_ADDR
49734: GO 49912
49736: LD_INT 16
49738: DOUBLE
49739: EQUAL
49740: IFTRUE 49744
49742: GO 49771
49744: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49745: LD_ADDR_VAR 0 3
49749: PUSH
49750: LD_EXP 64
49754: PPUSH
49755: LD_VAR 0 1
49759: PPUSH
49760: CALL_OW 321
49764: PUSH
49765: LD_INT 2
49767: EQUAL
49768: ST_TO_ADDR
49769: GO 49912
49771: LD_INT 19
49773: DOUBLE
49774: EQUAL
49775: IFTRUE 49785
49777: LD_INT 23
49779: DOUBLE
49780: EQUAL
49781: IFTRUE 49785
49783: GO 49812
49785: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49786: LD_ADDR_VAR 0 3
49790: PUSH
49791: LD_EXP 63
49795: PPUSH
49796: LD_VAR 0 1
49800: PPUSH
49801: CALL_OW 321
49805: PUSH
49806: LD_INT 2
49808: EQUAL
49809: ST_TO_ADDR
49810: GO 49912
49812: LD_INT 17
49814: DOUBLE
49815: EQUAL
49816: IFTRUE 49820
49818: GO 49845
49820: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49821: LD_ADDR_VAR 0 3
49825: PUSH
49826: LD_INT 39
49828: PPUSH
49829: LD_VAR 0 1
49833: PPUSH
49834: CALL_OW 321
49838: PUSH
49839: LD_INT 2
49841: EQUAL
49842: ST_TO_ADDR
49843: GO 49912
49845: LD_INT 18
49847: DOUBLE
49848: EQUAL
49849: IFTRUE 49853
49851: GO 49878
49853: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49854: LD_ADDR_VAR 0 3
49858: PUSH
49859: LD_INT 40
49861: PPUSH
49862: LD_VAR 0 1
49866: PPUSH
49867: CALL_OW 321
49871: PUSH
49872: LD_INT 2
49874: EQUAL
49875: ST_TO_ADDR
49876: GO 49912
49878: LD_INT 27
49880: DOUBLE
49881: EQUAL
49882: IFTRUE 49886
49884: GO 49911
49886: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49887: LD_ADDR_VAR 0 3
49891: PUSH
49892: LD_INT 35
49894: PPUSH
49895: LD_VAR 0 1
49899: PPUSH
49900: CALL_OW 321
49904: PUSH
49905: LD_INT 2
49907: EQUAL
49908: ST_TO_ADDR
49909: GO 49912
49911: POP
// end ;
49912: LD_VAR 0 3
49916: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49917: LD_INT 0
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
49929: PPUSH
// result := false ;
49930: LD_ADDR_VAR 0 6
49934: PUSH
49935: LD_INT 0
49937: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49938: LD_VAR 0 1
49942: NOT
49943: PUSH
49944: LD_VAR 0 1
49948: PPUSH
49949: CALL_OW 266
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: IN
49964: NOT
49965: OR
49966: PUSH
49967: LD_VAR 0 2
49971: NOT
49972: OR
49973: PUSH
49974: LD_VAR 0 5
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: LD_INT 3
49990: PUSH
49991: LD_INT 4
49993: PUSH
49994: LD_INT 5
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: IN
50005: NOT
50006: OR
50007: PUSH
50008: LD_VAR 0 3
50012: PPUSH
50013: LD_VAR 0 4
50017: PPUSH
50018: CALL_OW 488
50022: NOT
50023: OR
50024: IFFALSE 50028
// exit ;
50026: GO 50764
// side := GetSide ( depot ) ;
50028: LD_ADDR_VAR 0 9
50032: PUSH
50033: LD_VAR 0 1
50037: PPUSH
50038: CALL_OW 255
50042: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50043: LD_VAR 0 9
50047: PPUSH
50048: LD_VAR 0 2
50052: PPUSH
50053: CALL 49537 0 2
50057: NOT
50058: IFFALSE 50062
// exit ;
50060: GO 50764
// pom := GetBase ( depot ) ;
50062: LD_ADDR_VAR 0 10
50066: PUSH
50067: LD_VAR 0 1
50071: PPUSH
50072: CALL_OW 274
50076: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50077: LD_ADDR_VAR 0 11
50081: PUSH
50082: LD_VAR 0 2
50086: PPUSH
50087: LD_VAR 0 1
50091: PPUSH
50092: CALL_OW 248
50096: PPUSH
50097: CALL_OW 450
50101: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50102: LD_VAR 0 10
50106: PPUSH
50107: LD_INT 1
50109: PPUSH
50110: CALL_OW 275
50114: PUSH
50115: LD_VAR 0 11
50119: PUSH
50120: LD_INT 1
50122: ARRAY
50123: GREATEREQUAL
50124: PUSH
50125: LD_VAR 0 10
50129: PPUSH
50130: LD_INT 2
50132: PPUSH
50133: CALL_OW 275
50137: PUSH
50138: LD_VAR 0 11
50142: PUSH
50143: LD_INT 2
50145: ARRAY
50146: GREATEREQUAL
50147: AND
50148: PUSH
50149: LD_VAR 0 10
50153: PPUSH
50154: LD_INT 3
50156: PPUSH
50157: CALL_OW 275
50161: PUSH
50162: LD_VAR 0 11
50166: PUSH
50167: LD_INT 3
50169: ARRAY
50170: GREATEREQUAL
50171: AND
50172: NOT
50173: IFFALSE 50177
// exit ;
50175: GO 50764
// if GetBType ( depot ) = b_depot then
50177: LD_VAR 0 1
50181: PPUSH
50182: CALL_OW 266
50186: PUSH
50187: LD_INT 0
50189: EQUAL
50190: IFFALSE 50202
// dist := 28 else
50192: LD_ADDR_VAR 0 14
50196: PUSH
50197: LD_INT 28
50199: ST_TO_ADDR
50200: GO 50210
// dist := 36 ;
50202: LD_ADDR_VAR 0 14
50206: PUSH
50207: LD_INT 36
50209: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50210: LD_VAR 0 1
50214: PPUSH
50215: LD_VAR 0 3
50219: PPUSH
50220: LD_VAR 0 4
50224: PPUSH
50225: CALL_OW 297
50229: PUSH
50230: LD_VAR 0 14
50234: GREATER
50235: IFFALSE 50239
// exit ;
50237: GO 50764
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50239: LD_ADDR_VAR 0 12
50243: PUSH
50244: LD_VAR 0 2
50248: PPUSH
50249: LD_VAR 0 3
50253: PPUSH
50254: LD_VAR 0 4
50258: PPUSH
50259: LD_VAR 0 5
50263: PPUSH
50264: LD_VAR 0 1
50268: PPUSH
50269: CALL_OW 248
50273: PPUSH
50274: LD_INT 0
50276: PPUSH
50277: CALL 50769 0 6
50281: ST_TO_ADDR
// if not hexes then
50282: LD_VAR 0 12
50286: NOT
50287: IFFALSE 50291
// exit ;
50289: GO 50764
// hex := GetHexInfo ( x , y ) ;
50291: LD_ADDR_VAR 0 15
50295: PUSH
50296: LD_VAR 0 3
50300: PPUSH
50301: LD_VAR 0 4
50305: PPUSH
50306: CALL_OW 546
50310: ST_TO_ADDR
// if hex [ 1 ] then
50311: LD_VAR 0 15
50315: PUSH
50316: LD_INT 1
50318: ARRAY
50319: IFFALSE 50323
// exit ;
50321: GO 50764
// height := hex [ 2 ] ;
50323: LD_ADDR_VAR 0 13
50327: PUSH
50328: LD_VAR 0 15
50332: PUSH
50333: LD_INT 2
50335: ARRAY
50336: ST_TO_ADDR
// for i = 1 to hexes do
50337: LD_ADDR_VAR 0 7
50341: PUSH
50342: DOUBLE
50343: LD_INT 1
50345: DEC
50346: ST_TO_ADDR
50347: LD_VAR 0 12
50351: PUSH
50352: FOR_TO
50353: IFFALSE 50683
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50355: LD_VAR 0 12
50359: PUSH
50360: LD_VAR 0 7
50364: ARRAY
50365: PUSH
50366: LD_INT 1
50368: ARRAY
50369: PPUSH
50370: LD_VAR 0 12
50374: PUSH
50375: LD_VAR 0 7
50379: ARRAY
50380: PUSH
50381: LD_INT 2
50383: ARRAY
50384: PPUSH
50385: CALL_OW 488
50389: NOT
50390: PUSH
50391: LD_VAR 0 12
50395: PUSH
50396: LD_VAR 0 7
50400: ARRAY
50401: PUSH
50402: LD_INT 1
50404: ARRAY
50405: PPUSH
50406: LD_VAR 0 12
50410: PUSH
50411: LD_VAR 0 7
50415: ARRAY
50416: PUSH
50417: LD_INT 2
50419: ARRAY
50420: PPUSH
50421: CALL_OW 428
50425: PUSH
50426: LD_INT 0
50428: GREATER
50429: OR
50430: PUSH
50431: LD_VAR 0 12
50435: PUSH
50436: LD_VAR 0 7
50440: ARRAY
50441: PUSH
50442: LD_INT 1
50444: ARRAY
50445: PPUSH
50446: LD_VAR 0 12
50450: PUSH
50451: LD_VAR 0 7
50455: ARRAY
50456: PUSH
50457: LD_INT 2
50459: ARRAY
50460: PPUSH
50461: CALL_OW 351
50465: OR
50466: IFFALSE 50472
// exit ;
50468: POP
50469: POP
50470: GO 50764
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50472: LD_ADDR_VAR 0 8
50476: PUSH
50477: LD_VAR 0 12
50481: PUSH
50482: LD_VAR 0 7
50486: ARRAY
50487: PUSH
50488: LD_INT 1
50490: ARRAY
50491: PPUSH
50492: LD_VAR 0 12
50496: PUSH
50497: LD_VAR 0 7
50501: ARRAY
50502: PUSH
50503: LD_INT 2
50505: ARRAY
50506: PPUSH
50507: CALL_OW 546
50511: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50512: LD_VAR 0 8
50516: PUSH
50517: LD_INT 1
50519: ARRAY
50520: PUSH
50521: LD_VAR 0 8
50525: PUSH
50526: LD_INT 2
50528: ARRAY
50529: PUSH
50530: LD_VAR 0 13
50534: PUSH
50535: LD_INT 2
50537: PLUS
50538: GREATER
50539: OR
50540: PUSH
50541: LD_VAR 0 8
50545: PUSH
50546: LD_INT 2
50548: ARRAY
50549: PUSH
50550: LD_VAR 0 13
50554: PUSH
50555: LD_INT 2
50557: MINUS
50558: LESS
50559: OR
50560: PUSH
50561: LD_VAR 0 8
50565: PUSH
50566: LD_INT 3
50568: ARRAY
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 8
50575: PUSH
50576: LD_INT 9
50578: PUSH
50579: LD_INT 10
50581: PUSH
50582: LD_INT 11
50584: PUSH
50585: LD_INT 12
50587: PUSH
50588: LD_INT 13
50590: PUSH
50591: LD_INT 16
50593: PUSH
50594: LD_INT 17
50596: PUSH
50597: LD_INT 18
50599: PUSH
50600: LD_INT 19
50602: PUSH
50603: LD_INT 20
50605: PUSH
50606: LD_INT 21
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: IN
50624: NOT
50625: OR
50626: PUSH
50627: LD_VAR 0 8
50631: PUSH
50632: LD_INT 5
50634: ARRAY
50635: NOT
50636: OR
50637: PUSH
50638: LD_VAR 0 8
50642: PUSH
50643: LD_INT 6
50645: ARRAY
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 7
50655: PUSH
50656: LD_INT 9
50658: PUSH
50659: LD_INT 10
50661: PUSH
50662: LD_INT 11
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: IN
50673: NOT
50674: OR
50675: IFFALSE 50681
// exit ;
50677: POP
50678: POP
50679: GO 50764
// end ;
50681: GO 50352
50683: POP
50684: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50685: LD_VAR 0 9
50689: PPUSH
50690: LD_VAR 0 3
50694: PPUSH
50695: LD_VAR 0 4
50699: PPUSH
50700: LD_INT 20
50702: PPUSH
50703: CALL 42710 0 4
50707: PUSH
50708: LD_INT 4
50710: ARRAY
50711: IFFALSE 50715
// exit ;
50713: GO 50764
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50715: LD_VAR 0 2
50719: PUSH
50720: LD_INT 29
50722: PUSH
50723: LD_INT 30
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: IN
50730: PUSH
50731: LD_VAR 0 3
50735: PPUSH
50736: LD_VAR 0 4
50740: PPUSH
50741: LD_VAR 0 9
50745: PPUSH
50746: CALL_OW 440
50750: NOT
50751: AND
50752: IFFALSE 50756
// exit ;
50754: GO 50764
// result := true ;
50756: LD_ADDR_VAR 0 6
50760: PUSH
50761: LD_INT 1
50763: ST_TO_ADDR
// end ;
50764: LD_VAR 0 6
50768: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50769: LD_INT 0
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
50779: PPUSH
50780: PPUSH
50781: PPUSH
50782: PPUSH
50783: PPUSH
50784: PPUSH
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
50789: PPUSH
50790: PPUSH
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
50795: PPUSH
50796: PPUSH
50797: PPUSH
50798: PPUSH
50799: PPUSH
50800: PPUSH
50801: PPUSH
50802: PPUSH
50803: PPUSH
50804: PPUSH
50805: PPUSH
50806: PPUSH
50807: PPUSH
50808: PPUSH
50809: PPUSH
50810: PPUSH
50811: PPUSH
50812: PPUSH
50813: PPUSH
50814: PPUSH
50815: PPUSH
50816: PPUSH
50817: PPUSH
50818: PPUSH
50819: PPUSH
50820: PPUSH
50821: PPUSH
50822: PPUSH
50823: PPUSH
50824: PPUSH
50825: PPUSH
50826: PPUSH
50827: PPUSH
50828: PPUSH
// result = [ ] ;
50829: LD_ADDR_VAR 0 7
50833: PUSH
50834: EMPTY
50835: ST_TO_ADDR
// temp_list = [ ] ;
50836: LD_ADDR_VAR 0 9
50840: PUSH
50841: EMPTY
50842: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50843: LD_VAR 0 4
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: LD_INT 4
50862: PUSH
50863: LD_INT 5
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: IN
50874: NOT
50875: PUSH
50876: LD_VAR 0 1
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: IN
50891: PUSH
50892: LD_VAR 0 5
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 3
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: IN
50911: NOT
50912: AND
50913: OR
50914: IFFALSE 50918
// exit ;
50916: GO 69309
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50918: LD_VAR 0 1
50922: PUSH
50923: LD_INT 6
50925: PUSH
50926: LD_INT 7
50928: PUSH
50929: LD_INT 8
50931: PUSH
50932: LD_INT 13
50934: PUSH
50935: LD_INT 12
50937: PUSH
50938: LD_INT 15
50940: PUSH
50941: LD_INT 11
50943: PUSH
50944: LD_INT 14
50946: PUSH
50947: LD_INT 10
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: IN
50961: IFFALSE 50971
// btype = b_lab ;
50963: LD_ADDR_VAR 0 1
50967: PUSH
50968: LD_INT 6
50970: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50971: LD_VAR 0 6
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: IN
50990: NOT
50991: PUSH
50992: LD_VAR 0 1
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: LD_INT 6
51011: PUSH
51012: LD_INT 36
51014: PUSH
51015: LD_INT 4
51017: PUSH
51018: LD_INT 5
51020: PUSH
51021: LD_INT 31
51023: PUSH
51024: LD_INT 32
51026: PUSH
51027: LD_INT 33
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: IN
51043: NOT
51044: PUSH
51045: LD_VAR 0 6
51049: PUSH
51050: LD_INT 1
51052: EQUAL
51053: AND
51054: OR
51055: PUSH
51056: LD_VAR 0 1
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 3
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: IN
51071: NOT
51072: PUSH
51073: LD_VAR 0 6
51077: PUSH
51078: LD_INT 2
51080: EQUAL
51081: AND
51082: OR
51083: IFFALSE 51093
// mode = 0 ;
51085: LD_ADDR_VAR 0 6
51089: PUSH
51090: LD_INT 0
51092: ST_TO_ADDR
// case mode of 0 :
51093: LD_VAR 0 6
51097: PUSH
51098: LD_INT 0
51100: DOUBLE
51101: EQUAL
51102: IFTRUE 51106
51104: GO 62559
51106: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51107: LD_ADDR_VAR 0 11
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51300: LD_ADDR_VAR 0 12
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51496: LD_ADDR_VAR 0 13
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 3
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51695: LD_ADDR_VAR 0 14
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51891: LD_ADDR_VAR 0 15
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52084: LD_ADDR_VAR 0 16
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: NEG
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52277: LD_ADDR_VAR 0 17
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52507: LD_ADDR_VAR 0 18
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52737: LD_ADDR_VAR 0 19
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52967: LD_ADDR_VAR 0 20
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53197: LD_ADDR_VAR 0 21
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53427: LD_ADDR_VAR 0 22
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53657: LD_ADDR_VAR 0 23
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53937: LD_ADDR_VAR 0 24
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 3
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54213: LD_ADDR_VAR 0 25
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54487: LD_ADDR_VAR 0 26
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54763: LD_ADDR_VAR 0 27
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55043: LD_ADDR_VAR 0 28
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 3
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 3
55290: NEG
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55325: LD_ADDR_VAR 0 29
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 3
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55604: LD_ADDR_VAR 0 30
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 3
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55882: LD_ADDR_VAR 0 31
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: LD_INT 3
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56160: LD_ADDR_VAR 0 32
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56438: LD_ADDR_VAR 0 33
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 3
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56717: LD_ADDR_VAR 0 34
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56997: LD_ADDR_VAR 0 35
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57109: LD_ADDR_VAR 0 36
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57221: LD_ADDR_VAR 0 37
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57333: LD_ADDR_VAR 0 38
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57445: LD_ADDR_VAR 0 39
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57557: LD_ADDR_VAR 0 40
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57669: LD_ADDR_VAR 0 41
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: LD_INT 3
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 3
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: LD_INT 3
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58019: LD_ADDR_VAR 0 42
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 3
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 3
58316: NEG
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58369: LD_ADDR_VAR 0 43
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 3
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58717: LD_ADDR_VAR 0 44
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 3
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: NEG
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: NEG
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: LD_INT 3
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59067: LD_ADDR_VAR 0 45
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 2
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: LD_INT 3
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 3
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 3
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: LD_INT 3
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: LD_INT 3
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 3
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: NEG
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59417: LD_ADDR_VAR 0 46
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 3
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59765: LD_ADDR_VAR 0 47
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59916: LD_ADDR_VAR 0 48
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60063: LD_ADDR_VAR 0 49
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60207: LD_ADDR_VAR 0 50
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60351: LD_ADDR_VAR 0 51
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60498: LD_ADDR_VAR 0 52
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60649: LD_ADDR_VAR 0 53
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60879: LD_ADDR_VAR 0 54
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 2
61078: NEG
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61109: LD_ADDR_VAR 0 55
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61339: LD_ADDR_VAR 0 56
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: LD_INT 2
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: LD_INT 2
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: NEG
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61569: LD_ADDR_VAR 0 57
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 2
61768: NEG
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61799: LD_ADDR_VAR 0 58
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 2
61975: NEG
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62029: LD_ADDR_VAR 0 59
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62117: LD_ADDR_VAR 0 60
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62205: LD_ADDR_VAR 0 61
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62293: LD_ADDR_VAR 0 62
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62381: LD_ADDR_VAR 0 63
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62469: LD_ADDR_VAR 0 64
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: ST_TO_ADDR
// end ; 1 :
62557: GO 68454
62559: LD_INT 1
62561: DOUBLE
62562: EQUAL
62563: IFTRUE 62567
62565: GO 65190
62567: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62568: LD_ADDR_VAR 0 11
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: LD_INT 2
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62612: LD_ADDR_VAR 0 12
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 3
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62653: LD_ADDR_VAR 0 13
62657: PUSH
62658: LD_INT 3
62660: PUSH
62661: LD_INT 2
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 3
62670: PUSH
62671: LD_INT 3
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: LD_INT 3
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: LIST
62692: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62693: LD_ADDR_VAR 0 14
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 3
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62734: LD_ADDR_VAR 0 15
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 3
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62778: LD_ADDR_VAR 0 16
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 3
62797: NEG
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 3
62809: NEG
62810: PUSH
62811: LD_INT 3
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62824: LD_ADDR_VAR 0 17
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: LD_INT 3
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 3
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 2
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62868: LD_ADDR_VAR 0 18
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62909: LD_ADDR_VAR 0 19
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 3
62926: PUSH
62927: LD_INT 3
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: LD_INT 3
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: LIST
62948: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62949: LD_ADDR_VAR 0 20
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 3
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: LIST
62989: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62990: LD_ADDR_VAR 0 21
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: NEG
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 3
63019: NEG
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63034: LD_ADDR_VAR 0 22
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: LD_INT 3
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 3
63053: NEG
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 3
63065: NEG
63066: PUSH
63067: LD_INT 3
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: LIST
63079: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63080: LD_ADDR_VAR 0 23
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: LD_INT 4
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: LD_INT 3
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63124: LD_ADDR_VAR 0 24
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 4
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: LIST
63164: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63165: LD_ADDR_VAR 0 25
63169: PUSH
63170: LD_INT 3
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 4
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: PUSH
63193: LD_INT 4
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63205: LD_ADDR_VAR 0 26
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 3
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 4
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63246: LD_ADDR_VAR 0 27
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 3
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 4
63275: NEG
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: LIST
63289: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63290: LD_ADDR_VAR 0 28
63294: PUSH
63295: LD_INT 3
63297: NEG
63298: PUSH
63299: LD_INT 3
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 3
63309: NEG
63310: PUSH
63311: LD_INT 4
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 4
63321: NEG
63322: PUSH
63323: LD_INT 3
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63336: LD_ADDR_VAR 0 29
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 3
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 3
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: LD_INT 4
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: LD_INT 4
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: LD_INT 3
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: LD_INT 5
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 5
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: PUSH
63435: LD_INT 4
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: LD_INT 6
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 6
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 5
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63491: LD_ADDR_VAR 0 30
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 3
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 4
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 4
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 4
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 5
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 5
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 5
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 6
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 6
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63634: LD_ADDR_VAR 0 31
63638: PUSH
63639: LD_INT 3
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: LD_INT 3
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: LD_INT 3
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 4
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 4
63681: PUSH
63682: LD_INT 4
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 3
63691: PUSH
63692: LD_INT 4
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 5
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 5
63711: PUSH
63712: LD_INT 5
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 4
63721: PUSH
63722: LD_INT 5
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 6
63731: PUSH
63732: LD_INT 5
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 6
63741: PUSH
63742: LD_INT 6
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 5
63751: PUSH
63752: LD_INT 6
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63773: LD_ADDR_VAR 0 32
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 3
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 3
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 4
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 4
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: LD_INT 5
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 5
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 4
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: LD_INT 6
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 6
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: LD_INT 5
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63916: LD_ADDR_VAR 0 33
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 3
63934: NEG
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: NEG
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 3
63957: NEG
63958: PUSH
63959: LD_INT 1
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 4
63968: NEG
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 4
63979: NEG
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 4
63991: NEG
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 5
64002: NEG
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 5
64013: NEG
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 5
64025: NEG
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 6
64036: NEG
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 6
64047: NEG
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64071: LD_ADDR_VAR 0 34
64075: PUSH
64076: LD_INT 2
64078: NEG
64079: PUSH
64080: LD_INT 3
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 3
64090: NEG
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 3
64102: NEG
64103: PUSH
64104: LD_INT 3
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 3
64114: NEG
64115: PUSH
64116: LD_INT 4
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 4
64126: NEG
64127: PUSH
64128: LD_INT 3
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 4
64138: NEG
64139: PUSH
64140: LD_INT 4
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 4
64150: NEG
64151: PUSH
64152: LD_INT 5
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 5
64162: NEG
64163: PUSH
64164: LD_INT 4
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 5
64174: NEG
64175: PUSH
64176: LD_INT 5
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 5
64186: NEG
64187: PUSH
64188: LD_INT 6
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 6
64198: NEG
64199: PUSH
64200: LD_INT 5
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 6
64210: NEG
64211: PUSH
64212: LD_INT 6
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64234: LD_ADDR_VAR 0 41
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: LD_INT 3
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: LIST
64277: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64278: LD_ADDR_VAR 0 42
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: LIST
64318: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64319: LD_ADDR_VAR 0 43
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: LIST
64358: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64359: LD_ADDR_VAR 0 44
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64400: LD_ADDR_VAR 0 45
64404: PUSH
64405: LD_INT 2
64407: NEG
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 3
64429: NEG
64430: PUSH
64431: LD_INT 1
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64444: LD_ADDR_VAR 0 46
64448: PUSH
64449: LD_INT 2
64451: NEG
64452: PUSH
64453: LD_INT 2
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: NEG
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 3
64475: NEG
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64490: LD_ADDR_VAR 0 47
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: LD_INT 3
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: LD_INT 3
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64523: LD_ADDR_VAR 0 48
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: LD_INT 2
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64554: LD_ADDR_VAR 0 49
64558: PUSH
64559: LD_INT 3
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 3
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64583: LD_ADDR_VAR 0 50
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64612: LD_ADDR_VAR 0 51
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64643: LD_ADDR_VAR 0 52
64647: PUSH
64648: LD_INT 3
64650: NEG
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 3
64662: NEG
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64676: LD_ADDR_VAR 0 53
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: LD_INT 3
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: LD_INT 3
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: LD_INT 2
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: LIST
64719: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64720: LD_ADDR_VAR 0 54
64724: PUSH
64725: LD_INT 2
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 3
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 3
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64761: LD_ADDR_VAR 0 55
64765: PUSH
64766: LD_INT 3
64768: PUSH
64769: LD_INT 2
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 3
64778: PUSH
64779: LD_INT 3
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 2
64788: PUSH
64789: LD_INT 3
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64801: LD_ADDR_VAR 0 56
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: LD_INT 3
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 3
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64842: LD_ADDR_VAR 0 57
64846: PUSH
64847: LD_INT 2
64849: NEG
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 3
64860: NEG
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 3
64871: NEG
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64886: LD_ADDR_VAR 0 58
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 3
64905: NEG
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: LD_INT 3
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64932: LD_ADDR_VAR 0 59
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 2
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: LIST
64975: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64976: LD_ADDR_VAR 0 60
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65017: LD_ADDR_VAR 0 61
65021: PUSH
65022: LD_INT 2
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 2
65034: PUSH
65035: LD_INT 2
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 2
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65057: LD_ADDR_VAR 0 62
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 2
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: LIST
65097: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65098: LD_ADDR_VAR 0 63
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: LIST
65141: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65142: LD_ADDR_VAR 0 64
65146: PUSH
65147: LD_INT 1
65149: NEG
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: NEG
65174: PUSH
65175: LD_INT 2
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: ST_TO_ADDR
// end ; 2 :
65188: GO 68454
65190: LD_INT 2
65192: DOUBLE
65193: EQUAL
65194: IFTRUE 65198
65196: GO 68453
65198: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65199: LD_ADDR_VAR 0 29
65203: PUSH
65204: LD_INT 4
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 4
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 5
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 5
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 4
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 5
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 3
65299: PUSH
65300: LD_INT 3
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 3
65309: PUSH
65310: LD_INT 2
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 4
65319: PUSH
65320: LD_INT 3
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 4
65329: PUSH
65330: LD_INT 4
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 3
65339: PUSH
65340: LD_INT 4
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: LD_INT 3
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 4
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: LD_INT 4
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 4
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 3
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: LD_INT 4
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: LD_INT 5
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: LD_INT 5
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: LD_INT 4
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 2
65461: PUSH
65462: LD_INT 5
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: LD_INT 3
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: NEG
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 2
65505: NEG
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 2
65516: NEG
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 3
65527: NEG
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 4
65538: NEG
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 4
65549: NEG
65550: PUSH
65551: LD_INT 1
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 4
65561: NEG
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: NEG
65574: PUSH
65575: LD_INT 2
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 4
65584: NEG
65585: PUSH
65586: LD_INT 4
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 4
65596: NEG
65597: PUSH
65598: LD_INT 5
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 3
65608: NEG
65609: PUSH
65610: LD_INT 4
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 3
65620: NEG
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 4
65632: NEG
65633: PUSH
65634: LD_INT 3
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 5
65644: NEG
65645: PUSH
65646: LD_INT 4
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 5
65656: NEG
65657: PUSH
65658: LD_INT 5
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 3
65668: NEG
65669: PUSH
65670: LD_INT 5
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 5
65680: NEG
65681: PUSH
65682: LD_INT 3
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65737: LD_ADDR_VAR 0 30
65741: PUSH
65742: LD_INT 4
65744: PUSH
65745: LD_INT 4
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 4
65754: PUSH
65755: LD_INT 3
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 5
65764: PUSH
65765: LD_INT 4
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 5
65774: PUSH
65775: LD_INT 5
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 4
65784: PUSH
65785: LD_INT 5
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 3
65794: PUSH
65795: LD_INT 4
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 3
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 5
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: LD_INT 5
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: LD_INT 2
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: LD_INT 4
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 4
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: LD_INT 3
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: LD_INT 2
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 2
65906: PUSH
65907: LD_INT 4
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: NEG
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 4
65927: NEG
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 4
65938: NEG
65939: PUSH
65940: LD_INT 1
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 3
65950: NEG
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 3
65961: NEG
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 4
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 5
65983: NEG
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 5
65994: NEG
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 5
66006: NEG
66007: PUSH
66008: LD_INT 2
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 3
66018: NEG
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 3
66029: NEG
66030: PUSH
66031: LD_INT 3
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 3
66041: NEG
66042: PUSH
66043: LD_INT 4
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: LD_INT 3
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 2
66065: NEG
66066: PUSH
66067: LD_INT 2
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 3
66077: NEG
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 4
66089: NEG
66090: PUSH
66091: LD_INT 3
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 4
66101: NEG
66102: PUSH
66103: LD_INT 4
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 2
66113: NEG
66114: PUSH
66115: LD_INT 4
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 4
66125: NEG
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: LD_INT 4
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 5
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: LD_INT 4
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: LD_INT 3
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: LD_INT 3
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: LD_INT 4
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 5
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: LD_INT 3
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 2
66227: NEG
66228: PUSH
66229: LD_INT 5
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66284: LD_ADDR_VAR 0 31
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 4
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 3
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 1
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: LD_INT 5
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: LD_INT 5
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 1
66341: NEG
66342: PUSH
66343: LD_INT 4
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 1
66352: NEG
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 2
66363: PUSH
66364: LD_INT 5
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 2
66373: NEG
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 3
66384: NEG
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 3
66395: NEG
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 2
66407: NEG
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 2
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 3
66429: NEG
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 4
66440: NEG
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 4
66451: NEG
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 4
66463: NEG
66464: PUSH
66465: LD_INT 2
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 2
66475: NEG
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 4
66486: NEG
66487: PUSH
66488: LD_INT 4
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 4
66498: NEG
66499: PUSH
66500: LD_INT 5
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: LD_INT 4
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 3
66522: NEG
66523: PUSH
66524: LD_INT 3
66526: NEG
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 4
66534: NEG
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 5
66546: NEG
66547: PUSH
66548: LD_INT 4
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 5
66558: NEG
66559: PUSH
66560: LD_INT 5
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: NEG
66571: PUSH
66572: LD_INT 5
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 5
66582: NEG
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 4
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: LD_INT 3
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: LD_INT 2
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: LD_INT 2
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: LD_INT 3
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: NEG
66662: PUSH
66663: LD_INT 4
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 2
66684: NEG
66685: PUSH
66686: LD_INT 4
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 4
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 4
66706: PUSH
66707: LD_INT 1
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 5
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 5
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 4
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 3
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 5
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66834: LD_ADDR_VAR 0 32
66838: PUSH
66839: LD_INT 4
66841: NEG
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 4
66852: NEG
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 3
66864: NEG
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 3
66875: NEG
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 4
66886: NEG
66887: PUSH
66888: LD_INT 1
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 5
66897: NEG
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 5
66908: NEG
66909: PUSH
66910: LD_INT 1
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 5
66920: NEG
66921: PUSH
66922: LD_INT 2
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 3
66932: NEG
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 3
66943: NEG
66944: PUSH
66945: LD_INT 3
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 3
66955: NEG
66956: PUSH
66957: LD_INT 4
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 2
66967: NEG
66968: PUSH
66969: LD_INT 3
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 2
66979: NEG
66980: PUSH
66981: LD_INT 2
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: NEG
66992: PUSH
66993: LD_INT 2
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 4
67003: NEG
67004: PUSH
67005: LD_INT 3
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 4
67015: NEG
67016: PUSH
67017: LD_INT 4
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 2
67027: NEG
67028: PUSH
67029: LD_INT 4
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 4
67039: NEG
67040: PUSH
67041: LD_INT 2
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: LD_INT 4
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 5
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: LD_INT 4
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: LD_INT 3
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: NEG
67107: PUSH
67108: LD_INT 4
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: LD_INT 5
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 2
67130: PUSH
67131: LD_INT 3
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 2
67141: NEG
67142: PUSH
67143: LD_INT 5
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 3
67163: PUSH
67164: LD_INT 1
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 4
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 4
67184: PUSH
67185: LD_INT 1
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 3
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 2
67214: PUSH
67215: LD_INT 1
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: LD_INT 2
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 4
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 4
67246: PUSH
67247: LD_INT 4
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 4
67256: PUSH
67257: LD_INT 3
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 5
67266: PUSH
67267: LD_INT 4
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 5
67276: PUSH
67277: LD_INT 5
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 4
67286: PUSH
67287: LD_INT 5
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 3
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 3
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 5
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 3
67326: PUSH
67327: LD_INT 5
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67381: LD_ADDR_VAR 0 33
67385: PUSH
67386: LD_INT 4
67388: NEG
67389: PUSH
67390: LD_INT 4
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 4
67400: NEG
67401: PUSH
67402: LD_INT 5
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: NEG
67413: PUSH
67414: LD_INT 4
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: LD_INT 3
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 4
67436: NEG
67437: PUSH
67438: LD_INT 3
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 5
67448: NEG
67449: PUSH
67450: LD_INT 4
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 5
67460: NEG
67461: PUSH
67462: LD_INT 5
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: LD_INT 5
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 5
67484: NEG
67485: PUSH
67486: LD_INT 3
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 0
67496: PUSH
67497: LD_INT 3
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 4
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 1
67518: PUSH
67519: LD_INT 3
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 1
67529: PUSH
67530: LD_INT 2
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 1
67551: NEG
67552: PUSH
67553: LD_INT 3
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: PUSH
67565: LD_INT 4
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: PUSH
67576: LD_INT 2
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: LD_INT 4
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: LD_INT 0
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: LD_INT 1
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 5
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 5
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 4
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 3
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: LD_INT 2
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 5
67681: PUSH
67682: LD_INT 2
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: LD_INT 3
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 4
67711: PUSH
67712: LD_INT 3
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 4
67721: PUSH
67722: LD_INT 4
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 3
67731: PUSH
67732: LD_INT 4
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 2
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: LD_INT 2
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 4
67761: PUSH
67762: LD_INT 2
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 2
67771: PUSH
67772: LD_INT 4
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: LD_INT 4
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: LD_INT 4
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: LD_INT 5
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: LD_INT 5
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: PUSH
67833: LD_INT 4
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: LD_INT 3
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 2
67853: PUSH
67854: LD_INT 5
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 2
67863: NEG
67864: PUSH
67865: LD_INT 3
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67919: LD_ADDR_VAR 0 34
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: LD_INT 4
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: LD_INT 5
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: PUSH
67949: LD_INT 4
67951: NEG
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 1
67959: PUSH
67960: LD_INT 3
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 0
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: PUSH
67983: LD_INT 4
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: LD_INT 5
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 2
68005: PUSH
68006: LD_INT 3
68008: NEG
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 2
68016: NEG
68017: PUSH
68018: LD_INT 5
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 3
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 4
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 4
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 3
68069: PUSH
68070: LD_INT 1
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 2
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 2
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: LD_INT 2
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 4
68111: PUSH
68112: LD_INT 2
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 4
68121: PUSH
68122: LD_INT 4
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 4
68131: PUSH
68132: LD_INT 3
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 5
68141: PUSH
68142: LD_INT 4
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 5
68151: PUSH
68152: LD_INT 5
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 4
68161: PUSH
68162: LD_INT 5
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 3
68171: PUSH
68172: LD_INT 4
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 3
68181: PUSH
68182: LD_INT 3
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 5
68191: PUSH
68192: LD_INT 3
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 3
68201: PUSH
68202: LD_INT 5
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 3
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: LD_INT 2
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 1
68241: PUSH
68242: LD_INT 4
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 0
68251: PUSH
68252: LD_INT 4
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: LD_INT 3
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: PUSH
68274: LD_INT 2
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 2
68283: PUSH
68284: LD_INT 4
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 2
68293: NEG
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 4
68304: NEG
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 4
68315: NEG
68316: PUSH
68317: LD_INT 1
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 3
68327: NEG
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 3
68338: NEG
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 4
68349: NEG
68350: PUSH
68351: LD_INT 1
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 5
68360: NEG
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 5
68371: NEG
68372: PUSH
68373: LD_INT 1
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 5
68383: NEG
68384: PUSH
68385: LD_INT 2
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: LD_INT 2
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: ST_TO_ADDR
// end ; end ;
68451: GO 68454
68453: POP
// case btype of b_depot , b_warehouse :
68454: LD_VAR 0 1
68458: PUSH
68459: LD_INT 0
68461: DOUBLE
68462: EQUAL
68463: IFTRUE 68473
68465: LD_INT 1
68467: DOUBLE
68468: EQUAL
68469: IFTRUE 68473
68471: GO 68674
68473: POP
// case nation of nation_american :
68474: LD_VAR 0 5
68478: PUSH
68479: LD_INT 1
68481: DOUBLE
68482: EQUAL
68483: IFTRUE 68487
68485: GO 68543
68487: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68488: LD_ADDR_VAR 0 9
68492: PUSH
68493: LD_VAR 0 11
68497: PUSH
68498: LD_VAR 0 12
68502: PUSH
68503: LD_VAR 0 13
68507: PUSH
68508: LD_VAR 0 14
68512: PUSH
68513: LD_VAR 0 15
68517: PUSH
68518: LD_VAR 0 16
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: PUSH
68531: LD_VAR 0 4
68535: PUSH
68536: LD_INT 1
68538: PLUS
68539: ARRAY
68540: ST_TO_ADDR
68541: GO 68672
68543: LD_INT 2
68545: DOUBLE
68546: EQUAL
68547: IFTRUE 68551
68549: GO 68607
68551: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68552: LD_ADDR_VAR 0 9
68556: PUSH
68557: LD_VAR 0 17
68561: PUSH
68562: LD_VAR 0 18
68566: PUSH
68567: LD_VAR 0 19
68571: PUSH
68572: LD_VAR 0 20
68576: PUSH
68577: LD_VAR 0 21
68581: PUSH
68582: LD_VAR 0 22
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: PUSH
68595: LD_VAR 0 4
68599: PUSH
68600: LD_INT 1
68602: PLUS
68603: ARRAY
68604: ST_TO_ADDR
68605: GO 68672
68607: LD_INT 3
68609: DOUBLE
68610: EQUAL
68611: IFTRUE 68615
68613: GO 68671
68615: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68616: LD_ADDR_VAR 0 9
68620: PUSH
68621: LD_VAR 0 23
68625: PUSH
68626: LD_VAR 0 24
68630: PUSH
68631: LD_VAR 0 25
68635: PUSH
68636: LD_VAR 0 26
68640: PUSH
68641: LD_VAR 0 27
68645: PUSH
68646: LD_VAR 0 28
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: PUSH
68659: LD_VAR 0 4
68663: PUSH
68664: LD_INT 1
68666: PLUS
68667: ARRAY
68668: ST_TO_ADDR
68669: GO 68672
68671: POP
68672: GO 69227
68674: LD_INT 2
68676: DOUBLE
68677: EQUAL
68678: IFTRUE 68688
68680: LD_INT 3
68682: DOUBLE
68683: EQUAL
68684: IFTRUE 68688
68686: GO 68744
68688: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68689: LD_ADDR_VAR 0 9
68693: PUSH
68694: LD_VAR 0 29
68698: PUSH
68699: LD_VAR 0 30
68703: PUSH
68704: LD_VAR 0 31
68708: PUSH
68709: LD_VAR 0 32
68713: PUSH
68714: LD_VAR 0 33
68718: PUSH
68719: LD_VAR 0 34
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: PUSH
68732: LD_VAR 0 4
68736: PUSH
68737: LD_INT 1
68739: PLUS
68740: ARRAY
68741: ST_TO_ADDR
68742: GO 69227
68744: LD_INT 16
68746: DOUBLE
68747: EQUAL
68748: IFTRUE 68806
68750: LD_INT 17
68752: DOUBLE
68753: EQUAL
68754: IFTRUE 68806
68756: LD_INT 18
68758: DOUBLE
68759: EQUAL
68760: IFTRUE 68806
68762: LD_INT 19
68764: DOUBLE
68765: EQUAL
68766: IFTRUE 68806
68768: LD_INT 22
68770: DOUBLE
68771: EQUAL
68772: IFTRUE 68806
68774: LD_INT 20
68776: DOUBLE
68777: EQUAL
68778: IFTRUE 68806
68780: LD_INT 21
68782: DOUBLE
68783: EQUAL
68784: IFTRUE 68806
68786: LD_INT 23
68788: DOUBLE
68789: EQUAL
68790: IFTRUE 68806
68792: LD_INT 24
68794: DOUBLE
68795: EQUAL
68796: IFTRUE 68806
68798: LD_INT 25
68800: DOUBLE
68801: EQUAL
68802: IFTRUE 68806
68804: GO 68862
68806: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68807: LD_ADDR_VAR 0 9
68811: PUSH
68812: LD_VAR 0 35
68816: PUSH
68817: LD_VAR 0 36
68821: PUSH
68822: LD_VAR 0 37
68826: PUSH
68827: LD_VAR 0 38
68831: PUSH
68832: LD_VAR 0 39
68836: PUSH
68837: LD_VAR 0 40
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: PUSH
68850: LD_VAR 0 4
68854: PUSH
68855: LD_INT 1
68857: PLUS
68858: ARRAY
68859: ST_TO_ADDR
68860: GO 69227
68862: LD_INT 6
68864: DOUBLE
68865: EQUAL
68866: IFTRUE 68918
68868: LD_INT 7
68870: DOUBLE
68871: EQUAL
68872: IFTRUE 68918
68874: LD_INT 8
68876: DOUBLE
68877: EQUAL
68878: IFTRUE 68918
68880: LD_INT 13
68882: DOUBLE
68883: EQUAL
68884: IFTRUE 68918
68886: LD_INT 12
68888: DOUBLE
68889: EQUAL
68890: IFTRUE 68918
68892: LD_INT 15
68894: DOUBLE
68895: EQUAL
68896: IFTRUE 68918
68898: LD_INT 11
68900: DOUBLE
68901: EQUAL
68902: IFTRUE 68918
68904: LD_INT 14
68906: DOUBLE
68907: EQUAL
68908: IFTRUE 68918
68910: LD_INT 10
68912: DOUBLE
68913: EQUAL
68914: IFTRUE 68918
68916: GO 68974
68918: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68919: LD_ADDR_VAR 0 9
68923: PUSH
68924: LD_VAR 0 41
68928: PUSH
68929: LD_VAR 0 42
68933: PUSH
68934: LD_VAR 0 43
68938: PUSH
68939: LD_VAR 0 44
68943: PUSH
68944: LD_VAR 0 45
68948: PUSH
68949: LD_VAR 0 46
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: PUSH
68962: LD_VAR 0 4
68966: PUSH
68967: LD_INT 1
68969: PLUS
68970: ARRAY
68971: ST_TO_ADDR
68972: GO 69227
68974: LD_INT 36
68976: DOUBLE
68977: EQUAL
68978: IFTRUE 68982
68980: GO 69038
68982: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68983: LD_ADDR_VAR 0 9
68987: PUSH
68988: LD_VAR 0 47
68992: PUSH
68993: LD_VAR 0 48
68997: PUSH
68998: LD_VAR 0 49
69002: PUSH
69003: LD_VAR 0 50
69007: PUSH
69008: LD_VAR 0 51
69012: PUSH
69013: LD_VAR 0 52
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: PUSH
69026: LD_VAR 0 4
69030: PUSH
69031: LD_INT 1
69033: PLUS
69034: ARRAY
69035: ST_TO_ADDR
69036: GO 69227
69038: LD_INT 4
69040: DOUBLE
69041: EQUAL
69042: IFTRUE 69064
69044: LD_INT 5
69046: DOUBLE
69047: EQUAL
69048: IFTRUE 69064
69050: LD_INT 34
69052: DOUBLE
69053: EQUAL
69054: IFTRUE 69064
69056: LD_INT 37
69058: DOUBLE
69059: EQUAL
69060: IFTRUE 69064
69062: GO 69120
69064: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69065: LD_ADDR_VAR 0 9
69069: PUSH
69070: LD_VAR 0 53
69074: PUSH
69075: LD_VAR 0 54
69079: PUSH
69080: LD_VAR 0 55
69084: PUSH
69085: LD_VAR 0 56
69089: PUSH
69090: LD_VAR 0 57
69094: PUSH
69095: LD_VAR 0 58
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: PUSH
69108: LD_VAR 0 4
69112: PUSH
69113: LD_INT 1
69115: PLUS
69116: ARRAY
69117: ST_TO_ADDR
69118: GO 69227
69120: LD_INT 31
69122: DOUBLE
69123: EQUAL
69124: IFTRUE 69170
69126: LD_INT 32
69128: DOUBLE
69129: EQUAL
69130: IFTRUE 69170
69132: LD_INT 33
69134: DOUBLE
69135: EQUAL
69136: IFTRUE 69170
69138: LD_INT 27
69140: DOUBLE
69141: EQUAL
69142: IFTRUE 69170
69144: LD_INT 26
69146: DOUBLE
69147: EQUAL
69148: IFTRUE 69170
69150: LD_INT 28
69152: DOUBLE
69153: EQUAL
69154: IFTRUE 69170
69156: LD_INT 29
69158: DOUBLE
69159: EQUAL
69160: IFTRUE 69170
69162: LD_INT 30
69164: DOUBLE
69165: EQUAL
69166: IFTRUE 69170
69168: GO 69226
69170: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69171: LD_ADDR_VAR 0 9
69175: PUSH
69176: LD_VAR 0 59
69180: PUSH
69181: LD_VAR 0 60
69185: PUSH
69186: LD_VAR 0 61
69190: PUSH
69191: LD_VAR 0 62
69195: PUSH
69196: LD_VAR 0 63
69200: PUSH
69201: LD_VAR 0 64
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: PUSH
69214: LD_VAR 0 4
69218: PUSH
69219: LD_INT 1
69221: PLUS
69222: ARRAY
69223: ST_TO_ADDR
69224: GO 69227
69226: POP
// temp_list2 = [ ] ;
69227: LD_ADDR_VAR 0 10
69231: PUSH
69232: EMPTY
69233: ST_TO_ADDR
// for i in temp_list do
69234: LD_ADDR_VAR 0 8
69238: PUSH
69239: LD_VAR 0 9
69243: PUSH
69244: FOR_IN
69245: IFFALSE 69297
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69247: LD_ADDR_VAR 0 10
69251: PUSH
69252: LD_VAR 0 10
69256: PUSH
69257: LD_VAR 0 8
69261: PUSH
69262: LD_INT 1
69264: ARRAY
69265: PUSH
69266: LD_VAR 0 2
69270: PLUS
69271: PUSH
69272: LD_VAR 0 8
69276: PUSH
69277: LD_INT 2
69279: ARRAY
69280: PUSH
69281: LD_VAR 0 3
69285: PLUS
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: EMPTY
69292: LIST
69293: ADD
69294: ST_TO_ADDR
69295: GO 69244
69297: POP
69298: POP
// result = temp_list2 ;
69299: LD_ADDR_VAR 0 7
69303: PUSH
69304: LD_VAR 0 10
69308: ST_TO_ADDR
// end ;
69309: LD_VAR 0 7
69313: RET
// export function EnemyInRange ( unit , dist ) ; begin
69314: LD_INT 0
69316: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69317: LD_ADDR_VAR 0 3
69321: PUSH
69322: LD_VAR 0 1
69326: PPUSH
69327: CALL_OW 255
69331: PPUSH
69332: LD_VAR 0 1
69336: PPUSH
69337: CALL_OW 250
69341: PPUSH
69342: LD_VAR 0 1
69346: PPUSH
69347: CALL_OW 251
69351: PPUSH
69352: LD_VAR 0 2
69356: PPUSH
69357: CALL 42710 0 4
69361: PUSH
69362: LD_INT 4
69364: ARRAY
69365: ST_TO_ADDR
// end ;
69366: LD_VAR 0 3
69370: RET
// export function PlayerSeeMe ( unit ) ; begin
69371: LD_INT 0
69373: PPUSH
// result := See ( your_side , unit ) ;
69374: LD_ADDR_VAR 0 2
69378: PUSH
69379: LD_OWVAR 2
69383: PPUSH
69384: LD_VAR 0 1
69388: PPUSH
69389: CALL_OW 292
69393: ST_TO_ADDR
// end ;
69394: LD_VAR 0 2
69398: RET
// export function ReverseDir ( unit ) ; begin
69399: LD_INT 0
69401: PPUSH
// if not unit then
69402: LD_VAR 0 1
69406: NOT
69407: IFFALSE 69411
// exit ;
69409: GO 69434
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69411: LD_ADDR_VAR 0 2
69415: PUSH
69416: LD_VAR 0 1
69420: PPUSH
69421: CALL_OW 254
69425: PUSH
69426: LD_INT 3
69428: PLUS
69429: PUSH
69430: LD_INT 6
69432: MOD
69433: ST_TO_ADDR
// end ;
69434: LD_VAR 0 2
69438: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69439: LD_INT 0
69441: PPUSH
69442: PPUSH
69443: PPUSH
69444: PPUSH
69445: PPUSH
// if not hexes then
69446: LD_VAR 0 2
69450: NOT
69451: IFFALSE 69455
// exit ;
69453: GO 69603
// dist := 9999 ;
69455: LD_ADDR_VAR 0 5
69459: PUSH
69460: LD_INT 9999
69462: ST_TO_ADDR
// for i = 1 to hexes do
69463: LD_ADDR_VAR 0 4
69467: PUSH
69468: DOUBLE
69469: LD_INT 1
69471: DEC
69472: ST_TO_ADDR
69473: LD_VAR 0 2
69477: PUSH
69478: FOR_TO
69479: IFFALSE 69591
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69481: LD_VAR 0 1
69485: PPUSH
69486: LD_VAR 0 2
69490: PUSH
69491: LD_VAR 0 4
69495: ARRAY
69496: PUSH
69497: LD_INT 1
69499: ARRAY
69500: PPUSH
69501: LD_VAR 0 2
69505: PUSH
69506: LD_VAR 0 4
69510: ARRAY
69511: PUSH
69512: LD_INT 2
69514: ARRAY
69515: PPUSH
69516: CALL_OW 297
69520: PUSH
69521: LD_VAR 0 5
69525: LESS
69526: IFFALSE 69589
// begin hex := hexes [ i ] ;
69528: LD_ADDR_VAR 0 7
69532: PUSH
69533: LD_VAR 0 2
69537: PUSH
69538: LD_VAR 0 4
69542: ARRAY
69543: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69544: LD_ADDR_VAR 0 5
69548: PUSH
69549: LD_VAR 0 1
69553: PPUSH
69554: LD_VAR 0 2
69558: PUSH
69559: LD_VAR 0 4
69563: ARRAY
69564: PUSH
69565: LD_INT 1
69567: ARRAY
69568: PPUSH
69569: LD_VAR 0 2
69573: PUSH
69574: LD_VAR 0 4
69578: ARRAY
69579: PUSH
69580: LD_INT 2
69582: ARRAY
69583: PPUSH
69584: CALL_OW 297
69588: ST_TO_ADDR
// end ; end ;
69589: GO 69478
69591: POP
69592: POP
// result := hex ;
69593: LD_ADDR_VAR 0 3
69597: PUSH
69598: LD_VAR 0 7
69602: ST_TO_ADDR
// end ;
69603: LD_VAR 0 3
69607: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69608: LD_INT 0
69610: PPUSH
69611: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69612: LD_VAR 0 1
69616: NOT
69617: PUSH
69618: LD_VAR 0 1
69622: PUSH
69623: LD_INT 21
69625: PUSH
69626: LD_INT 2
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 23
69635: PUSH
69636: LD_INT 2
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PPUSH
69647: CALL_OW 69
69651: IN
69652: NOT
69653: OR
69654: IFFALSE 69658
// exit ;
69656: GO 69705
// for i = 1 to 3 do
69658: LD_ADDR_VAR 0 3
69662: PUSH
69663: DOUBLE
69664: LD_INT 1
69666: DEC
69667: ST_TO_ADDR
69668: LD_INT 3
69670: PUSH
69671: FOR_TO
69672: IFFALSE 69703
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69674: LD_VAR 0 1
69678: PPUSH
69679: CALL_OW 250
69683: PPUSH
69684: LD_VAR 0 1
69688: PPUSH
69689: CALL_OW 251
69693: PPUSH
69694: LD_INT 1
69696: PPUSH
69697: CALL_OW 453
69701: GO 69671
69703: POP
69704: POP
// end ;
69705: LD_VAR 0 2
69709: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69710: LD_INT 0
69712: PPUSH
69713: PPUSH
69714: PPUSH
69715: PPUSH
69716: PPUSH
69717: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69718: LD_VAR 0 1
69722: NOT
69723: PUSH
69724: LD_VAR 0 2
69728: NOT
69729: OR
69730: PUSH
69731: LD_VAR 0 1
69735: PPUSH
69736: CALL_OW 314
69740: OR
69741: IFFALSE 69745
// exit ;
69743: GO 70186
// x := GetX ( enemy_unit ) ;
69745: LD_ADDR_VAR 0 7
69749: PUSH
69750: LD_VAR 0 2
69754: PPUSH
69755: CALL_OW 250
69759: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69760: LD_ADDR_VAR 0 8
69764: PUSH
69765: LD_VAR 0 2
69769: PPUSH
69770: CALL_OW 251
69774: ST_TO_ADDR
// if not x or not y then
69775: LD_VAR 0 7
69779: NOT
69780: PUSH
69781: LD_VAR 0 8
69785: NOT
69786: OR
69787: IFFALSE 69791
// exit ;
69789: GO 70186
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69791: LD_ADDR_VAR 0 6
69795: PUSH
69796: LD_VAR 0 7
69800: PPUSH
69801: LD_INT 0
69803: PPUSH
69804: LD_INT 4
69806: PPUSH
69807: CALL_OW 272
69811: PUSH
69812: LD_VAR 0 8
69816: PPUSH
69817: LD_INT 0
69819: PPUSH
69820: LD_INT 4
69822: PPUSH
69823: CALL_OW 273
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_VAR 0 7
69836: PPUSH
69837: LD_INT 1
69839: PPUSH
69840: LD_INT 4
69842: PPUSH
69843: CALL_OW 272
69847: PUSH
69848: LD_VAR 0 8
69852: PPUSH
69853: LD_INT 1
69855: PPUSH
69856: LD_INT 4
69858: PPUSH
69859: CALL_OW 273
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_VAR 0 7
69872: PPUSH
69873: LD_INT 2
69875: PPUSH
69876: LD_INT 4
69878: PPUSH
69879: CALL_OW 272
69883: PUSH
69884: LD_VAR 0 8
69888: PPUSH
69889: LD_INT 2
69891: PPUSH
69892: LD_INT 4
69894: PPUSH
69895: CALL_OW 273
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_VAR 0 7
69908: PPUSH
69909: LD_INT 3
69911: PPUSH
69912: LD_INT 4
69914: PPUSH
69915: CALL_OW 272
69919: PUSH
69920: LD_VAR 0 8
69924: PPUSH
69925: LD_INT 3
69927: PPUSH
69928: LD_INT 4
69930: PPUSH
69931: CALL_OW 273
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_VAR 0 7
69944: PPUSH
69945: LD_INT 4
69947: PPUSH
69948: LD_INT 4
69950: PPUSH
69951: CALL_OW 272
69955: PUSH
69956: LD_VAR 0 8
69960: PPUSH
69961: LD_INT 4
69963: PPUSH
69964: LD_INT 4
69966: PPUSH
69967: CALL_OW 273
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_VAR 0 7
69980: PPUSH
69981: LD_INT 5
69983: PPUSH
69984: LD_INT 4
69986: PPUSH
69987: CALL_OW 272
69991: PUSH
69992: LD_VAR 0 8
69996: PPUSH
69997: LD_INT 5
69999: PPUSH
70000: LD_INT 4
70002: PPUSH
70003: CALL_OW 273
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: ST_TO_ADDR
// for i = tmp downto 1 do
70020: LD_ADDR_VAR 0 4
70024: PUSH
70025: DOUBLE
70026: LD_VAR 0 6
70030: INC
70031: ST_TO_ADDR
70032: LD_INT 1
70034: PUSH
70035: FOR_DOWNTO
70036: IFFALSE 70137
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70038: LD_VAR 0 6
70042: PUSH
70043: LD_VAR 0 4
70047: ARRAY
70048: PUSH
70049: LD_INT 1
70051: ARRAY
70052: PPUSH
70053: LD_VAR 0 6
70057: PUSH
70058: LD_VAR 0 4
70062: ARRAY
70063: PUSH
70064: LD_INT 2
70066: ARRAY
70067: PPUSH
70068: CALL_OW 488
70072: NOT
70073: PUSH
70074: LD_VAR 0 6
70078: PUSH
70079: LD_VAR 0 4
70083: ARRAY
70084: PUSH
70085: LD_INT 1
70087: ARRAY
70088: PPUSH
70089: LD_VAR 0 6
70093: PUSH
70094: LD_VAR 0 4
70098: ARRAY
70099: PUSH
70100: LD_INT 2
70102: ARRAY
70103: PPUSH
70104: CALL_OW 428
70108: PUSH
70109: LD_INT 0
70111: NONEQUAL
70112: OR
70113: IFFALSE 70135
// tmp := Delete ( tmp , i ) ;
70115: LD_ADDR_VAR 0 6
70119: PUSH
70120: LD_VAR 0 6
70124: PPUSH
70125: LD_VAR 0 4
70129: PPUSH
70130: CALL_OW 3
70134: ST_TO_ADDR
70135: GO 70035
70137: POP
70138: POP
// j := GetClosestHex ( unit , tmp ) ;
70139: LD_ADDR_VAR 0 5
70143: PUSH
70144: LD_VAR 0 1
70148: PPUSH
70149: LD_VAR 0 6
70153: PPUSH
70154: CALL 69439 0 2
70158: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70159: LD_VAR 0 1
70163: PPUSH
70164: LD_VAR 0 5
70168: PUSH
70169: LD_INT 1
70171: ARRAY
70172: PPUSH
70173: LD_VAR 0 5
70177: PUSH
70178: LD_INT 2
70180: ARRAY
70181: PPUSH
70182: CALL_OW 111
// end ;
70186: LD_VAR 0 3
70190: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70191: LD_INT 0
70193: PPUSH
70194: PPUSH
70195: PPUSH
// uc_side = 0 ;
70196: LD_ADDR_OWVAR 20
70200: PUSH
70201: LD_INT 0
70203: ST_TO_ADDR
// uc_nation = 0 ;
70204: LD_ADDR_OWVAR 21
70208: PUSH
70209: LD_INT 0
70211: ST_TO_ADDR
// InitHc_All ( ) ;
70212: CALL_OW 584
// InitVc ;
70216: CALL_OW 20
// if mastodonts then
70220: LD_VAR 0 6
70224: IFFALSE 70291
// for i = 1 to mastodonts do
70226: LD_ADDR_VAR 0 11
70230: PUSH
70231: DOUBLE
70232: LD_INT 1
70234: DEC
70235: ST_TO_ADDR
70236: LD_VAR 0 6
70240: PUSH
70241: FOR_TO
70242: IFFALSE 70289
// begin vc_chassis := 31 ;
70244: LD_ADDR_OWVAR 37
70248: PUSH
70249: LD_INT 31
70251: ST_TO_ADDR
// vc_control := control_rider ;
70252: LD_ADDR_OWVAR 38
70256: PUSH
70257: LD_INT 4
70259: ST_TO_ADDR
// animal := CreateVehicle ;
70260: LD_ADDR_VAR 0 12
70264: PUSH
70265: CALL_OW 45
70269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70270: LD_VAR 0 12
70274: PPUSH
70275: LD_VAR 0 8
70279: PPUSH
70280: LD_INT 0
70282: PPUSH
70283: CALL 72479 0 3
// end ;
70287: GO 70241
70289: POP
70290: POP
// if horses then
70291: LD_VAR 0 5
70295: IFFALSE 70362
// for i = 1 to horses do
70297: LD_ADDR_VAR 0 11
70301: PUSH
70302: DOUBLE
70303: LD_INT 1
70305: DEC
70306: ST_TO_ADDR
70307: LD_VAR 0 5
70311: PUSH
70312: FOR_TO
70313: IFFALSE 70360
// begin hc_class := 21 ;
70315: LD_ADDR_OWVAR 28
70319: PUSH
70320: LD_INT 21
70322: ST_TO_ADDR
// hc_gallery :=  ;
70323: LD_ADDR_OWVAR 33
70327: PUSH
70328: LD_STRING 
70330: ST_TO_ADDR
// animal := CreateHuman ;
70331: LD_ADDR_VAR 0 12
70335: PUSH
70336: CALL_OW 44
70340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70341: LD_VAR 0 12
70345: PPUSH
70346: LD_VAR 0 8
70350: PPUSH
70351: LD_INT 0
70353: PPUSH
70354: CALL 72479 0 3
// end ;
70358: GO 70312
70360: POP
70361: POP
// if birds then
70362: LD_VAR 0 1
70366: IFFALSE 70433
// for i = 1 to birds do
70368: LD_ADDR_VAR 0 11
70372: PUSH
70373: DOUBLE
70374: LD_INT 1
70376: DEC
70377: ST_TO_ADDR
70378: LD_VAR 0 1
70382: PUSH
70383: FOR_TO
70384: IFFALSE 70431
// begin hc_class = 18 ;
70386: LD_ADDR_OWVAR 28
70390: PUSH
70391: LD_INT 18
70393: ST_TO_ADDR
// hc_gallery =  ;
70394: LD_ADDR_OWVAR 33
70398: PUSH
70399: LD_STRING 
70401: ST_TO_ADDR
// animal := CreateHuman ;
70402: LD_ADDR_VAR 0 12
70406: PUSH
70407: CALL_OW 44
70411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70412: LD_VAR 0 12
70416: PPUSH
70417: LD_VAR 0 8
70421: PPUSH
70422: LD_INT 0
70424: PPUSH
70425: CALL 72479 0 3
// end ;
70429: GO 70383
70431: POP
70432: POP
// if tigers then
70433: LD_VAR 0 2
70437: IFFALSE 70521
// for i = 1 to tigers do
70439: LD_ADDR_VAR 0 11
70443: PUSH
70444: DOUBLE
70445: LD_INT 1
70447: DEC
70448: ST_TO_ADDR
70449: LD_VAR 0 2
70453: PUSH
70454: FOR_TO
70455: IFFALSE 70519
// begin hc_class = class_tiger ;
70457: LD_ADDR_OWVAR 28
70461: PUSH
70462: LD_INT 14
70464: ST_TO_ADDR
// hc_gallery =  ;
70465: LD_ADDR_OWVAR 33
70469: PUSH
70470: LD_STRING 
70472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70473: LD_ADDR_OWVAR 35
70477: PUSH
70478: LD_INT 7
70480: NEG
70481: PPUSH
70482: LD_INT 7
70484: PPUSH
70485: CALL_OW 12
70489: ST_TO_ADDR
// animal := CreateHuman ;
70490: LD_ADDR_VAR 0 12
70494: PUSH
70495: CALL_OW 44
70499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70500: LD_VAR 0 12
70504: PPUSH
70505: LD_VAR 0 8
70509: PPUSH
70510: LD_INT 0
70512: PPUSH
70513: CALL 72479 0 3
// end ;
70517: GO 70454
70519: POP
70520: POP
// if apemans then
70521: LD_VAR 0 3
70525: IFFALSE 70648
// for i = 1 to apemans do
70527: LD_ADDR_VAR 0 11
70531: PUSH
70532: DOUBLE
70533: LD_INT 1
70535: DEC
70536: ST_TO_ADDR
70537: LD_VAR 0 3
70541: PUSH
70542: FOR_TO
70543: IFFALSE 70646
// begin hc_class = class_apeman ;
70545: LD_ADDR_OWVAR 28
70549: PUSH
70550: LD_INT 12
70552: ST_TO_ADDR
// hc_gallery =  ;
70553: LD_ADDR_OWVAR 33
70557: PUSH
70558: LD_STRING 
70560: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70561: LD_ADDR_OWVAR 35
70565: PUSH
70566: LD_INT 2
70568: NEG
70569: PPUSH
70570: LD_INT 2
70572: PPUSH
70573: CALL_OW 12
70577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70578: LD_ADDR_OWVAR 31
70582: PUSH
70583: LD_INT 1
70585: PPUSH
70586: LD_INT 3
70588: PPUSH
70589: CALL_OW 12
70593: PUSH
70594: LD_INT 1
70596: PPUSH
70597: LD_INT 3
70599: PPUSH
70600: CALL_OW 12
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: LD_INT 0
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: ST_TO_ADDR
// animal := CreateHuman ;
70617: LD_ADDR_VAR 0 12
70621: PUSH
70622: CALL_OW 44
70626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70627: LD_VAR 0 12
70631: PPUSH
70632: LD_VAR 0 8
70636: PPUSH
70637: LD_INT 0
70639: PPUSH
70640: CALL 72479 0 3
// end ;
70644: GO 70542
70646: POP
70647: POP
// if enchidnas then
70648: LD_VAR 0 4
70652: IFFALSE 70719
// for i = 1 to enchidnas do
70654: LD_ADDR_VAR 0 11
70658: PUSH
70659: DOUBLE
70660: LD_INT 1
70662: DEC
70663: ST_TO_ADDR
70664: LD_VAR 0 4
70668: PUSH
70669: FOR_TO
70670: IFFALSE 70717
// begin hc_class = 13 ;
70672: LD_ADDR_OWVAR 28
70676: PUSH
70677: LD_INT 13
70679: ST_TO_ADDR
// hc_gallery =  ;
70680: LD_ADDR_OWVAR 33
70684: PUSH
70685: LD_STRING 
70687: ST_TO_ADDR
// animal := CreateHuman ;
70688: LD_ADDR_VAR 0 12
70692: PUSH
70693: CALL_OW 44
70697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70698: LD_VAR 0 12
70702: PPUSH
70703: LD_VAR 0 8
70707: PPUSH
70708: LD_INT 0
70710: PPUSH
70711: CALL 72479 0 3
// end ;
70715: GO 70669
70717: POP
70718: POP
// if fishes then
70719: LD_VAR 0 7
70723: IFFALSE 70790
// for i = 1 to fishes do
70725: LD_ADDR_VAR 0 11
70729: PUSH
70730: DOUBLE
70731: LD_INT 1
70733: DEC
70734: ST_TO_ADDR
70735: LD_VAR 0 7
70739: PUSH
70740: FOR_TO
70741: IFFALSE 70788
// begin hc_class = 20 ;
70743: LD_ADDR_OWVAR 28
70747: PUSH
70748: LD_INT 20
70750: ST_TO_ADDR
// hc_gallery =  ;
70751: LD_ADDR_OWVAR 33
70755: PUSH
70756: LD_STRING 
70758: ST_TO_ADDR
// animal := CreateHuman ;
70759: LD_ADDR_VAR 0 12
70763: PUSH
70764: CALL_OW 44
70768: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70769: LD_VAR 0 12
70773: PPUSH
70774: LD_VAR 0 9
70778: PPUSH
70779: LD_INT 0
70781: PPUSH
70782: CALL 72479 0 3
// end ;
70786: GO 70740
70788: POP
70789: POP
// end ;
70790: LD_VAR 0 10
70794: RET
// export function WantHeal ( sci , unit ) ; begin
70795: LD_INT 0
70797: PPUSH
// if GetTaskList ( sci ) > 0 then
70798: LD_VAR 0 1
70802: PPUSH
70803: CALL_OW 437
70807: PUSH
70808: LD_INT 0
70810: GREATER
70811: IFFALSE 70881
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70813: LD_VAR 0 1
70817: PPUSH
70818: CALL_OW 437
70822: PUSH
70823: LD_INT 1
70825: ARRAY
70826: PUSH
70827: LD_INT 1
70829: ARRAY
70830: PUSH
70831: LD_STRING l
70833: EQUAL
70834: PUSH
70835: LD_VAR 0 1
70839: PPUSH
70840: CALL_OW 437
70844: PUSH
70845: LD_INT 1
70847: ARRAY
70848: PUSH
70849: LD_INT 4
70851: ARRAY
70852: PUSH
70853: LD_VAR 0 2
70857: EQUAL
70858: AND
70859: IFFALSE 70871
// result := true else
70861: LD_ADDR_VAR 0 3
70865: PUSH
70866: LD_INT 1
70868: ST_TO_ADDR
70869: GO 70879
// result := false ;
70871: LD_ADDR_VAR 0 3
70875: PUSH
70876: LD_INT 0
70878: ST_TO_ADDR
// end else
70879: GO 70889
// result := false ;
70881: LD_ADDR_VAR 0 3
70885: PUSH
70886: LD_INT 0
70888: ST_TO_ADDR
// end ;
70889: LD_VAR 0 3
70893: RET
// export function HealTarget ( sci ) ; begin
70894: LD_INT 0
70896: PPUSH
// if not sci then
70897: LD_VAR 0 1
70901: NOT
70902: IFFALSE 70906
// exit ;
70904: GO 70971
// result := 0 ;
70906: LD_ADDR_VAR 0 2
70910: PUSH
70911: LD_INT 0
70913: ST_TO_ADDR
// if GetTaskList ( sci ) then
70914: LD_VAR 0 1
70918: PPUSH
70919: CALL_OW 437
70923: IFFALSE 70971
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70925: LD_VAR 0 1
70929: PPUSH
70930: CALL_OW 437
70934: PUSH
70935: LD_INT 1
70937: ARRAY
70938: PUSH
70939: LD_INT 1
70941: ARRAY
70942: PUSH
70943: LD_STRING l
70945: EQUAL
70946: IFFALSE 70971
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70948: LD_ADDR_VAR 0 2
70952: PUSH
70953: LD_VAR 0 1
70957: PPUSH
70958: CALL_OW 437
70962: PUSH
70963: LD_INT 1
70965: ARRAY
70966: PUSH
70967: LD_INT 4
70969: ARRAY
70970: ST_TO_ADDR
// end ;
70971: LD_VAR 0 2
70975: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70976: LD_INT 0
70978: PPUSH
70979: PPUSH
70980: PPUSH
70981: PPUSH
// if not base_units then
70982: LD_VAR 0 1
70986: NOT
70987: IFFALSE 70991
// exit ;
70989: GO 71078
// result := false ;
70991: LD_ADDR_VAR 0 2
70995: PUSH
70996: LD_INT 0
70998: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70999: LD_ADDR_VAR 0 5
71003: PUSH
71004: LD_VAR 0 1
71008: PPUSH
71009: LD_INT 21
71011: PUSH
71012: LD_INT 3
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PPUSH
71019: CALL_OW 72
71023: ST_TO_ADDR
// if not tmp then
71024: LD_VAR 0 5
71028: NOT
71029: IFFALSE 71033
// exit ;
71031: GO 71078
// for i in tmp do
71033: LD_ADDR_VAR 0 3
71037: PUSH
71038: LD_VAR 0 5
71042: PUSH
71043: FOR_IN
71044: IFFALSE 71076
// begin result := EnemyInRange ( i , 22 ) ;
71046: LD_ADDR_VAR 0 2
71050: PUSH
71051: LD_VAR 0 3
71055: PPUSH
71056: LD_INT 22
71058: PPUSH
71059: CALL 69314 0 2
71063: ST_TO_ADDR
// if result then
71064: LD_VAR 0 2
71068: IFFALSE 71074
// exit ;
71070: POP
71071: POP
71072: GO 71078
// end ;
71074: GO 71043
71076: POP
71077: POP
// end ;
71078: LD_VAR 0 2
71082: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71083: LD_INT 0
71085: PPUSH
71086: PPUSH
// if not units then
71087: LD_VAR 0 1
71091: NOT
71092: IFFALSE 71096
// exit ;
71094: GO 71166
// result := [ ] ;
71096: LD_ADDR_VAR 0 3
71100: PUSH
71101: EMPTY
71102: ST_TO_ADDR
// for i in units do
71103: LD_ADDR_VAR 0 4
71107: PUSH
71108: LD_VAR 0 1
71112: PUSH
71113: FOR_IN
71114: IFFALSE 71164
// if GetTag ( i ) = tag then
71116: LD_VAR 0 4
71120: PPUSH
71121: CALL_OW 110
71125: PUSH
71126: LD_VAR 0 2
71130: EQUAL
71131: IFFALSE 71162
// result := Replace ( result , result + 1 , i ) ;
71133: LD_ADDR_VAR 0 3
71137: PUSH
71138: LD_VAR 0 3
71142: PPUSH
71143: LD_VAR 0 3
71147: PUSH
71148: LD_INT 1
71150: PLUS
71151: PPUSH
71152: LD_VAR 0 4
71156: PPUSH
71157: CALL_OW 1
71161: ST_TO_ADDR
71162: GO 71113
71164: POP
71165: POP
// end ;
71166: LD_VAR 0 3
71170: RET
// export function IsDriver ( un ) ; begin
71171: LD_INT 0
71173: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71174: LD_ADDR_VAR 0 2
71178: PUSH
71179: LD_VAR 0 1
71183: PUSH
71184: LD_INT 55
71186: PUSH
71187: EMPTY
71188: LIST
71189: PPUSH
71190: CALL_OW 69
71194: IN
71195: ST_TO_ADDR
// end ;
71196: LD_VAR 0 2
71200: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71201: LD_INT 0
71203: PPUSH
71204: PPUSH
// list := [ ] ;
71205: LD_ADDR_VAR 0 5
71209: PUSH
71210: EMPTY
71211: ST_TO_ADDR
// case d of 0 :
71212: LD_VAR 0 3
71216: PUSH
71217: LD_INT 0
71219: DOUBLE
71220: EQUAL
71221: IFTRUE 71225
71223: GO 71358
71225: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71226: LD_ADDR_VAR 0 5
71230: PUSH
71231: LD_VAR 0 1
71235: PUSH
71236: LD_INT 4
71238: MINUS
71239: PUSH
71240: LD_VAR 0 2
71244: PUSH
71245: LD_INT 4
71247: MINUS
71248: PUSH
71249: LD_INT 2
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: LIST
71256: PUSH
71257: LD_VAR 0 1
71261: PUSH
71262: LD_INT 3
71264: MINUS
71265: PUSH
71266: LD_VAR 0 2
71270: PUSH
71271: LD_INT 1
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: LIST
71278: PUSH
71279: LD_VAR 0 1
71283: PUSH
71284: LD_INT 4
71286: PLUS
71287: PUSH
71288: LD_VAR 0 2
71292: PUSH
71293: LD_INT 4
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: LIST
71300: PUSH
71301: LD_VAR 0 1
71305: PUSH
71306: LD_INT 3
71308: PLUS
71309: PUSH
71310: LD_VAR 0 2
71314: PUSH
71315: LD_INT 3
71317: PLUS
71318: PUSH
71319: LD_INT 5
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: LIST
71326: PUSH
71327: LD_VAR 0 1
71331: PUSH
71332: LD_VAR 0 2
71336: PUSH
71337: LD_INT 4
71339: PLUS
71340: PUSH
71341: LD_INT 0
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: LIST
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: ST_TO_ADDR
// end ; 1 :
71356: GO 72056
71358: LD_INT 1
71360: DOUBLE
71361: EQUAL
71362: IFTRUE 71366
71364: GO 71499
71366: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71367: LD_ADDR_VAR 0 5
71371: PUSH
71372: LD_VAR 0 1
71376: PUSH
71377: LD_VAR 0 2
71381: PUSH
71382: LD_INT 4
71384: MINUS
71385: PUSH
71386: LD_INT 3
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: PUSH
71394: LD_VAR 0 1
71398: PUSH
71399: LD_INT 3
71401: MINUS
71402: PUSH
71403: LD_VAR 0 2
71407: PUSH
71408: LD_INT 3
71410: MINUS
71411: PUSH
71412: LD_INT 2
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: PUSH
71420: LD_VAR 0 1
71424: PUSH
71425: LD_INT 4
71427: MINUS
71428: PUSH
71429: LD_VAR 0 2
71433: PUSH
71434: LD_INT 1
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: LIST
71441: PUSH
71442: LD_VAR 0 1
71446: PUSH
71447: LD_VAR 0 2
71451: PUSH
71452: LD_INT 3
71454: PLUS
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: LIST
71463: PUSH
71464: LD_VAR 0 1
71468: PUSH
71469: LD_INT 4
71471: PLUS
71472: PUSH
71473: LD_VAR 0 2
71477: PUSH
71478: LD_INT 4
71480: PLUS
71481: PUSH
71482: LD_INT 5
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: ST_TO_ADDR
// end ; 2 :
71497: GO 72056
71499: LD_INT 2
71501: DOUBLE
71502: EQUAL
71503: IFTRUE 71507
71505: GO 71636
71507: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71508: LD_ADDR_VAR 0 5
71512: PUSH
71513: LD_VAR 0 1
71517: PUSH
71518: LD_VAR 0 2
71522: PUSH
71523: LD_INT 3
71525: MINUS
71526: PUSH
71527: LD_INT 3
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: PUSH
71535: LD_VAR 0 1
71539: PUSH
71540: LD_INT 4
71542: PLUS
71543: PUSH
71544: LD_VAR 0 2
71548: PUSH
71549: LD_INT 4
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: LIST
71556: PUSH
71557: LD_VAR 0 1
71561: PUSH
71562: LD_VAR 0 2
71566: PUSH
71567: LD_INT 4
71569: PLUS
71570: PUSH
71571: LD_INT 0
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: LIST
71578: PUSH
71579: LD_VAR 0 1
71583: PUSH
71584: LD_INT 3
71586: MINUS
71587: PUSH
71588: LD_VAR 0 2
71592: PUSH
71593: LD_INT 1
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: PUSH
71601: LD_VAR 0 1
71605: PUSH
71606: LD_INT 4
71608: MINUS
71609: PUSH
71610: LD_VAR 0 2
71614: PUSH
71615: LD_INT 4
71617: MINUS
71618: PUSH
71619: LD_INT 2
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: LIST
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: ST_TO_ADDR
// end ; 3 :
71634: GO 72056
71636: LD_INT 3
71638: DOUBLE
71639: EQUAL
71640: IFTRUE 71644
71642: GO 71777
71644: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71645: LD_ADDR_VAR 0 5
71649: PUSH
71650: LD_VAR 0 1
71654: PUSH
71655: LD_INT 3
71657: PLUS
71658: PUSH
71659: LD_VAR 0 2
71663: PUSH
71664: LD_INT 4
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: LIST
71671: PUSH
71672: LD_VAR 0 1
71676: PUSH
71677: LD_INT 4
71679: PLUS
71680: PUSH
71681: LD_VAR 0 2
71685: PUSH
71686: LD_INT 4
71688: PLUS
71689: PUSH
71690: LD_INT 5
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: LIST
71697: PUSH
71698: LD_VAR 0 1
71702: PUSH
71703: LD_INT 4
71705: MINUS
71706: PUSH
71707: LD_VAR 0 2
71711: PUSH
71712: LD_INT 1
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: LIST
71719: PUSH
71720: LD_VAR 0 1
71724: PUSH
71725: LD_VAR 0 2
71729: PUSH
71730: LD_INT 4
71732: MINUS
71733: PUSH
71734: LD_INT 3
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: LIST
71741: PUSH
71742: LD_VAR 0 1
71746: PUSH
71747: LD_INT 3
71749: MINUS
71750: PUSH
71751: LD_VAR 0 2
71755: PUSH
71756: LD_INT 3
71758: MINUS
71759: PUSH
71760: LD_INT 2
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: LIST
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: ST_TO_ADDR
// end ; 4 :
71775: GO 72056
71777: LD_INT 4
71779: DOUBLE
71780: EQUAL
71781: IFTRUE 71785
71783: GO 71918
71785: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71786: LD_ADDR_VAR 0 5
71790: PUSH
71791: LD_VAR 0 1
71795: PUSH
71796: LD_VAR 0 2
71800: PUSH
71801: LD_INT 4
71803: PLUS
71804: PUSH
71805: LD_INT 0
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: LIST
71812: PUSH
71813: LD_VAR 0 1
71817: PUSH
71818: LD_INT 3
71820: PLUS
71821: PUSH
71822: LD_VAR 0 2
71826: PUSH
71827: LD_INT 3
71829: PLUS
71830: PUSH
71831: LD_INT 5
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: LIST
71838: PUSH
71839: LD_VAR 0 1
71843: PUSH
71844: LD_INT 4
71846: PLUS
71847: PUSH
71848: LD_VAR 0 2
71852: PUSH
71853: LD_INT 4
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: LIST
71860: PUSH
71861: LD_VAR 0 1
71865: PUSH
71866: LD_VAR 0 2
71870: PUSH
71871: LD_INT 3
71873: MINUS
71874: PUSH
71875: LD_INT 3
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: LIST
71882: PUSH
71883: LD_VAR 0 1
71887: PUSH
71888: LD_INT 4
71890: MINUS
71891: PUSH
71892: LD_VAR 0 2
71896: PUSH
71897: LD_INT 4
71899: MINUS
71900: PUSH
71901: LD_INT 2
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: LIST
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: ST_TO_ADDR
// end ; 5 :
71916: GO 72056
71918: LD_INT 5
71920: DOUBLE
71921: EQUAL
71922: IFTRUE 71926
71924: GO 72055
71926: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71927: LD_ADDR_VAR 0 5
71931: PUSH
71932: LD_VAR 0 1
71936: PUSH
71937: LD_INT 4
71939: MINUS
71940: PUSH
71941: LD_VAR 0 2
71945: PUSH
71946: LD_INT 1
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: LIST
71953: PUSH
71954: LD_VAR 0 1
71958: PUSH
71959: LD_VAR 0 2
71963: PUSH
71964: LD_INT 4
71966: MINUS
71967: PUSH
71968: LD_INT 3
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: PUSH
71976: LD_VAR 0 1
71980: PUSH
71981: LD_INT 4
71983: PLUS
71984: PUSH
71985: LD_VAR 0 2
71989: PUSH
71990: LD_INT 4
71992: PLUS
71993: PUSH
71994: LD_INT 5
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: LIST
72001: PUSH
72002: LD_VAR 0 1
72006: PUSH
72007: LD_INT 3
72009: PLUS
72010: PUSH
72011: LD_VAR 0 2
72015: PUSH
72016: LD_INT 4
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: LIST
72023: PUSH
72024: LD_VAR 0 1
72028: PUSH
72029: LD_VAR 0 2
72033: PUSH
72034: LD_INT 3
72036: PLUS
72037: PUSH
72038: LD_INT 0
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: LIST
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: ST_TO_ADDR
// end ; end ;
72053: GO 72056
72055: POP
// result := list ;
72056: LD_ADDR_VAR 0 4
72060: PUSH
72061: LD_VAR 0 5
72065: ST_TO_ADDR
// end ;
72066: LD_VAR 0 4
72070: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72071: LD_INT 0
72073: PPUSH
72074: PPUSH
72075: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72076: LD_VAR 0 1
72080: NOT
72081: PUSH
72082: LD_VAR 0 2
72086: PUSH
72087: LD_INT 1
72089: PUSH
72090: LD_INT 2
72092: PUSH
72093: LD_INT 3
72095: PUSH
72096: LD_INT 4
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: IN
72105: NOT
72106: OR
72107: IFFALSE 72111
// exit ;
72109: GO 72203
// tmp := [ ] ;
72111: LD_ADDR_VAR 0 5
72115: PUSH
72116: EMPTY
72117: ST_TO_ADDR
// for i in units do
72118: LD_ADDR_VAR 0 4
72122: PUSH
72123: LD_VAR 0 1
72127: PUSH
72128: FOR_IN
72129: IFFALSE 72172
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72131: LD_ADDR_VAR 0 5
72135: PUSH
72136: LD_VAR 0 5
72140: PPUSH
72141: LD_VAR 0 5
72145: PUSH
72146: LD_INT 1
72148: PLUS
72149: PPUSH
72150: LD_VAR 0 4
72154: PPUSH
72155: LD_VAR 0 2
72159: PPUSH
72160: CALL_OW 259
72164: PPUSH
72165: CALL_OW 2
72169: ST_TO_ADDR
72170: GO 72128
72172: POP
72173: POP
// if not tmp then
72174: LD_VAR 0 5
72178: NOT
72179: IFFALSE 72183
// exit ;
72181: GO 72203
// result := SortListByListDesc ( units , tmp ) ;
72183: LD_ADDR_VAR 0 3
72187: PUSH
72188: LD_VAR 0 1
72192: PPUSH
72193: LD_VAR 0 5
72197: PPUSH
72198: CALL_OW 77
72202: ST_TO_ADDR
// end ;
72203: LD_VAR 0 3
72207: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72208: LD_INT 0
72210: PPUSH
72211: PPUSH
72212: PPUSH
// result := false ;
72213: LD_ADDR_VAR 0 3
72217: PUSH
72218: LD_INT 0
72220: ST_TO_ADDR
// x := GetX ( building ) ;
72221: LD_ADDR_VAR 0 4
72225: PUSH
72226: LD_VAR 0 2
72230: PPUSH
72231: CALL_OW 250
72235: ST_TO_ADDR
// y := GetY ( building ) ;
72236: LD_ADDR_VAR 0 5
72240: PUSH
72241: LD_VAR 0 2
72245: PPUSH
72246: CALL_OW 251
72250: ST_TO_ADDR
// if not building or not x or not y then
72251: LD_VAR 0 2
72255: NOT
72256: PUSH
72257: LD_VAR 0 4
72261: NOT
72262: OR
72263: PUSH
72264: LD_VAR 0 5
72268: NOT
72269: OR
72270: IFFALSE 72274
// exit ;
72272: GO 72366
// if GetTaskList ( unit ) then
72274: LD_VAR 0 1
72278: PPUSH
72279: CALL_OW 437
72283: IFFALSE 72366
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72285: LD_STRING e
72287: PUSH
72288: LD_VAR 0 1
72292: PPUSH
72293: CALL_OW 437
72297: PUSH
72298: LD_INT 1
72300: ARRAY
72301: PUSH
72302: LD_INT 1
72304: ARRAY
72305: EQUAL
72306: PUSH
72307: LD_VAR 0 4
72311: PUSH
72312: LD_VAR 0 1
72316: PPUSH
72317: CALL_OW 437
72321: PUSH
72322: LD_INT 1
72324: ARRAY
72325: PUSH
72326: LD_INT 2
72328: ARRAY
72329: EQUAL
72330: AND
72331: PUSH
72332: LD_VAR 0 5
72336: PUSH
72337: LD_VAR 0 1
72341: PPUSH
72342: CALL_OW 437
72346: PUSH
72347: LD_INT 1
72349: ARRAY
72350: PUSH
72351: LD_INT 3
72353: ARRAY
72354: EQUAL
72355: AND
72356: IFFALSE 72366
// result := true end ;
72358: LD_ADDR_VAR 0 3
72362: PUSH
72363: LD_INT 1
72365: ST_TO_ADDR
// end ;
72366: LD_VAR 0 3
72370: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72371: LD_INT 0
72373: PPUSH
// result := false ;
72374: LD_ADDR_VAR 0 4
72378: PUSH
72379: LD_INT 0
72381: ST_TO_ADDR
// if GetTaskList ( unit ) then
72382: LD_VAR 0 1
72386: PPUSH
72387: CALL_OW 437
72391: IFFALSE 72474
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72393: LD_STRING M
72395: PUSH
72396: LD_VAR 0 1
72400: PPUSH
72401: CALL_OW 437
72405: PUSH
72406: LD_INT 1
72408: ARRAY
72409: PUSH
72410: LD_INT 1
72412: ARRAY
72413: EQUAL
72414: PUSH
72415: LD_VAR 0 2
72419: PUSH
72420: LD_VAR 0 1
72424: PPUSH
72425: CALL_OW 437
72429: PUSH
72430: LD_INT 1
72432: ARRAY
72433: PUSH
72434: LD_INT 2
72436: ARRAY
72437: EQUAL
72438: AND
72439: PUSH
72440: LD_VAR 0 3
72444: PUSH
72445: LD_VAR 0 1
72449: PPUSH
72450: CALL_OW 437
72454: PUSH
72455: LD_INT 1
72457: ARRAY
72458: PUSH
72459: LD_INT 3
72461: ARRAY
72462: EQUAL
72463: AND
72464: IFFALSE 72474
// result := true ;
72466: LD_ADDR_VAR 0 4
72470: PUSH
72471: LD_INT 1
72473: ST_TO_ADDR
// end ; end ;
72474: LD_VAR 0 4
72478: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72479: LD_INT 0
72481: PPUSH
72482: PPUSH
72483: PPUSH
72484: PPUSH
// if not unit or not area then
72485: LD_VAR 0 1
72489: NOT
72490: PUSH
72491: LD_VAR 0 2
72495: NOT
72496: OR
72497: IFFALSE 72501
// exit ;
72499: GO 72665
// tmp := AreaToList ( area , i ) ;
72501: LD_ADDR_VAR 0 6
72505: PUSH
72506: LD_VAR 0 2
72510: PPUSH
72511: LD_VAR 0 5
72515: PPUSH
72516: CALL_OW 517
72520: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72521: LD_ADDR_VAR 0 5
72525: PUSH
72526: DOUBLE
72527: LD_INT 1
72529: DEC
72530: ST_TO_ADDR
72531: LD_VAR 0 6
72535: PUSH
72536: LD_INT 1
72538: ARRAY
72539: PUSH
72540: FOR_TO
72541: IFFALSE 72663
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72543: LD_ADDR_VAR 0 7
72547: PUSH
72548: LD_VAR 0 6
72552: PUSH
72553: LD_INT 1
72555: ARRAY
72556: PUSH
72557: LD_VAR 0 5
72561: ARRAY
72562: PUSH
72563: LD_VAR 0 6
72567: PUSH
72568: LD_INT 2
72570: ARRAY
72571: PUSH
72572: LD_VAR 0 5
72576: ARRAY
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72582: LD_VAR 0 7
72586: PUSH
72587: LD_INT 1
72589: ARRAY
72590: PPUSH
72591: LD_VAR 0 7
72595: PUSH
72596: LD_INT 2
72598: ARRAY
72599: PPUSH
72600: CALL_OW 428
72604: PUSH
72605: LD_INT 0
72607: EQUAL
72608: IFFALSE 72661
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72610: LD_VAR 0 1
72614: PPUSH
72615: LD_VAR 0 7
72619: PUSH
72620: LD_INT 1
72622: ARRAY
72623: PPUSH
72624: LD_VAR 0 7
72628: PUSH
72629: LD_INT 2
72631: ARRAY
72632: PPUSH
72633: LD_VAR 0 3
72637: PPUSH
72638: CALL_OW 48
// result := IsPlaced ( unit ) ;
72642: LD_ADDR_VAR 0 4
72646: PUSH
72647: LD_VAR 0 1
72651: PPUSH
72652: CALL_OW 305
72656: ST_TO_ADDR
// exit ;
72657: POP
72658: POP
72659: GO 72665
// end ; end ;
72661: GO 72540
72663: POP
72664: POP
// end ;
72665: LD_VAR 0 4
72669: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72670: LD_INT 0
72672: PPUSH
72673: PPUSH
72674: PPUSH
// if not side or side > 8 then
72675: LD_VAR 0 1
72679: NOT
72680: PUSH
72681: LD_VAR 0 1
72685: PUSH
72686: LD_INT 8
72688: GREATER
72689: OR
72690: IFFALSE 72694
// exit ;
72692: GO 72881
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72694: LD_ADDR_VAR 0 4
72698: PUSH
72699: LD_INT 22
72701: PUSH
72702: LD_VAR 0 1
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 21
72713: PUSH
72714: LD_INT 3
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PPUSH
72725: CALL_OW 69
72729: ST_TO_ADDR
// if not tmp then
72730: LD_VAR 0 4
72734: NOT
72735: IFFALSE 72739
// exit ;
72737: GO 72881
// enable_addtolog := true ;
72739: LD_ADDR_OWVAR 81
72743: PUSH
72744: LD_INT 1
72746: ST_TO_ADDR
// AddToLog ( [ ) ;
72747: LD_STRING [
72749: PPUSH
72750: CALL_OW 561
// for i in tmp do
72754: LD_ADDR_VAR 0 3
72758: PUSH
72759: LD_VAR 0 4
72763: PUSH
72764: FOR_IN
72765: IFFALSE 72872
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72767: LD_STRING [
72769: PUSH
72770: LD_VAR 0 3
72774: PPUSH
72775: CALL_OW 266
72779: STR
72780: PUSH
72781: LD_STRING , 
72783: STR
72784: PUSH
72785: LD_VAR 0 3
72789: PPUSH
72790: CALL_OW 250
72794: STR
72795: PUSH
72796: LD_STRING , 
72798: STR
72799: PUSH
72800: LD_VAR 0 3
72804: PPUSH
72805: CALL_OW 251
72809: STR
72810: PUSH
72811: LD_STRING , 
72813: STR
72814: PUSH
72815: LD_VAR 0 3
72819: PPUSH
72820: CALL_OW 254
72824: STR
72825: PUSH
72826: LD_STRING , 
72828: STR
72829: PUSH
72830: LD_VAR 0 3
72834: PPUSH
72835: LD_INT 1
72837: PPUSH
72838: CALL_OW 268
72842: STR
72843: PUSH
72844: LD_STRING , 
72846: STR
72847: PUSH
72848: LD_VAR 0 3
72852: PPUSH
72853: LD_INT 2
72855: PPUSH
72856: CALL_OW 268
72860: STR
72861: PUSH
72862: LD_STRING ],
72864: STR
72865: PPUSH
72866: CALL_OW 561
// end ;
72870: GO 72764
72872: POP
72873: POP
// AddToLog ( ]; ) ;
72874: LD_STRING ];
72876: PPUSH
72877: CALL_OW 561
// end ;
72881: LD_VAR 0 2
72885: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72886: LD_INT 0
72888: PPUSH
72889: PPUSH
72890: PPUSH
72891: PPUSH
72892: PPUSH
// if not area or not rate or not max then
72893: LD_VAR 0 1
72897: NOT
72898: PUSH
72899: LD_VAR 0 2
72903: NOT
72904: OR
72905: PUSH
72906: LD_VAR 0 4
72910: NOT
72911: OR
72912: IFFALSE 72916
// exit ;
72914: GO 73108
// while 1 do
72916: LD_INT 1
72918: IFFALSE 73108
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72920: LD_ADDR_VAR 0 9
72924: PUSH
72925: LD_VAR 0 1
72929: PPUSH
72930: LD_INT 1
72932: PPUSH
72933: CALL_OW 287
72937: PUSH
72938: LD_INT 10
72940: MUL
72941: ST_TO_ADDR
// r := rate / 10 ;
72942: LD_ADDR_VAR 0 7
72946: PUSH
72947: LD_VAR 0 2
72951: PUSH
72952: LD_INT 10
72954: DIVREAL
72955: ST_TO_ADDR
// time := 1 1$00 ;
72956: LD_ADDR_VAR 0 8
72960: PUSH
72961: LD_INT 2100
72963: ST_TO_ADDR
// if amount < min then
72964: LD_VAR 0 9
72968: PUSH
72969: LD_VAR 0 3
72973: LESS
72974: IFFALSE 72992
// r := r * 2 else
72976: LD_ADDR_VAR 0 7
72980: PUSH
72981: LD_VAR 0 7
72985: PUSH
72986: LD_INT 2
72988: MUL
72989: ST_TO_ADDR
72990: GO 73018
// if amount > max then
72992: LD_VAR 0 9
72996: PUSH
72997: LD_VAR 0 4
73001: GREATER
73002: IFFALSE 73018
// r := r / 2 ;
73004: LD_ADDR_VAR 0 7
73008: PUSH
73009: LD_VAR 0 7
73013: PUSH
73014: LD_INT 2
73016: DIVREAL
73017: ST_TO_ADDR
// time := time / r ;
73018: LD_ADDR_VAR 0 8
73022: PUSH
73023: LD_VAR 0 8
73027: PUSH
73028: LD_VAR 0 7
73032: DIVREAL
73033: ST_TO_ADDR
// if time < 0 then
73034: LD_VAR 0 8
73038: PUSH
73039: LD_INT 0
73041: LESS
73042: IFFALSE 73059
// time := time * - 1 ;
73044: LD_ADDR_VAR 0 8
73048: PUSH
73049: LD_VAR 0 8
73053: PUSH
73054: LD_INT 1
73056: NEG
73057: MUL
73058: ST_TO_ADDR
// wait ( time ) ;
73059: LD_VAR 0 8
73063: PPUSH
73064: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73068: LD_INT 35
73070: PPUSH
73071: LD_INT 875
73073: PPUSH
73074: CALL_OW 12
73078: PPUSH
73079: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73083: LD_INT 1
73085: PPUSH
73086: LD_INT 5
73088: PPUSH
73089: CALL_OW 12
73093: PPUSH
73094: LD_VAR 0 1
73098: PPUSH
73099: LD_INT 1
73101: PPUSH
73102: CALL_OW 55
// end ;
73106: GO 72916
// end ;
73108: LD_VAR 0 5
73112: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73113: LD_INT 0
73115: PPUSH
73116: PPUSH
73117: PPUSH
73118: PPUSH
73119: PPUSH
73120: PPUSH
73121: PPUSH
73122: PPUSH
// if not turrets or not factories then
73123: LD_VAR 0 1
73127: NOT
73128: PUSH
73129: LD_VAR 0 2
73133: NOT
73134: OR
73135: IFFALSE 73139
// exit ;
73137: GO 73446
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73139: LD_ADDR_VAR 0 10
73143: PUSH
73144: LD_INT 5
73146: PUSH
73147: LD_INT 6
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 2
73156: PUSH
73157: LD_INT 4
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 3
73166: PUSH
73167: LD_INT 5
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 24
73181: PUSH
73182: LD_INT 25
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 23
73191: PUSH
73192: LD_INT 27
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 42
73205: PUSH
73206: LD_INT 43
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: PUSH
73213: LD_INT 44
73215: PUSH
73216: LD_INT 46
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 45
73225: PUSH
73226: LD_INT 47
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: LIST
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: LIST
73242: ST_TO_ADDR
// result := [ ] ;
73243: LD_ADDR_VAR 0 3
73247: PUSH
73248: EMPTY
73249: ST_TO_ADDR
// for i in turrets do
73250: LD_ADDR_VAR 0 4
73254: PUSH
73255: LD_VAR 0 1
73259: PUSH
73260: FOR_IN
73261: IFFALSE 73444
// begin nat := GetNation ( i ) ;
73263: LD_ADDR_VAR 0 7
73267: PUSH
73268: LD_VAR 0 4
73272: PPUSH
73273: CALL_OW 248
73277: ST_TO_ADDR
// weapon := 0 ;
73278: LD_ADDR_VAR 0 8
73282: PUSH
73283: LD_INT 0
73285: ST_TO_ADDR
// if not nat then
73286: LD_VAR 0 7
73290: NOT
73291: IFFALSE 73295
// continue ;
73293: GO 73260
// for j in list [ nat ] do
73295: LD_ADDR_VAR 0 5
73299: PUSH
73300: LD_VAR 0 10
73304: PUSH
73305: LD_VAR 0 7
73309: ARRAY
73310: PUSH
73311: FOR_IN
73312: IFFALSE 73353
// if GetBWeapon ( i ) = j [ 1 ] then
73314: LD_VAR 0 4
73318: PPUSH
73319: CALL_OW 269
73323: PUSH
73324: LD_VAR 0 5
73328: PUSH
73329: LD_INT 1
73331: ARRAY
73332: EQUAL
73333: IFFALSE 73351
// begin weapon := j [ 2 ] ;
73335: LD_ADDR_VAR 0 8
73339: PUSH
73340: LD_VAR 0 5
73344: PUSH
73345: LD_INT 2
73347: ARRAY
73348: ST_TO_ADDR
// break ;
73349: GO 73353
// end ;
73351: GO 73311
73353: POP
73354: POP
// if not weapon then
73355: LD_VAR 0 8
73359: NOT
73360: IFFALSE 73364
// continue ;
73362: GO 73260
// for k in factories do
73364: LD_ADDR_VAR 0 6
73368: PUSH
73369: LD_VAR 0 2
73373: PUSH
73374: FOR_IN
73375: IFFALSE 73440
// begin weapons := AvailableWeaponList ( k ) ;
73377: LD_ADDR_VAR 0 9
73381: PUSH
73382: LD_VAR 0 6
73386: PPUSH
73387: CALL_OW 478
73391: ST_TO_ADDR
// if not weapons then
73392: LD_VAR 0 9
73396: NOT
73397: IFFALSE 73401
// continue ;
73399: GO 73374
// if weapon in weapons then
73401: LD_VAR 0 8
73405: PUSH
73406: LD_VAR 0 9
73410: IN
73411: IFFALSE 73438
// begin result := [ i , weapon ] ;
73413: LD_ADDR_VAR 0 3
73417: PUSH
73418: LD_VAR 0 4
73422: PUSH
73423: LD_VAR 0 8
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: ST_TO_ADDR
// exit ;
73432: POP
73433: POP
73434: POP
73435: POP
73436: GO 73446
// end ; end ;
73438: GO 73374
73440: POP
73441: POP
// end ;
73442: GO 73260
73444: POP
73445: POP
// end ;
73446: LD_VAR 0 3
73450: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73451: LD_INT 0
73453: PPUSH
// if not side or side > 8 then
73454: LD_VAR 0 3
73458: NOT
73459: PUSH
73460: LD_VAR 0 3
73464: PUSH
73465: LD_INT 8
73467: GREATER
73468: OR
73469: IFFALSE 73473
// exit ;
73471: GO 73532
// if not range then
73473: LD_VAR 0 4
73477: NOT
73478: IFFALSE 73489
// range := - 12 ;
73480: LD_ADDR_VAR 0 4
73484: PUSH
73485: LD_INT 12
73487: NEG
73488: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73489: LD_VAR 0 1
73493: PPUSH
73494: LD_VAR 0 2
73498: PPUSH
73499: LD_VAR 0 3
73503: PPUSH
73504: LD_VAR 0 4
73508: PPUSH
73509: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73513: LD_VAR 0 1
73517: PPUSH
73518: LD_VAR 0 2
73522: PPUSH
73523: LD_VAR 0 3
73527: PPUSH
73528: CALL_OW 331
// end ;
73532: LD_VAR 0 5
73536: RET
// export function Video ( mode ) ; begin
73537: LD_INT 0
73539: PPUSH
// ingame_video = mode ;
73540: LD_ADDR_OWVAR 52
73544: PUSH
73545: LD_VAR 0 1
73549: ST_TO_ADDR
// interface_hidden = mode ;
73550: LD_ADDR_OWVAR 54
73554: PUSH
73555: LD_VAR 0 1
73559: ST_TO_ADDR
// end ;
73560: LD_VAR 0 2
73564: RET
// export function Join ( array , element ) ; begin
73565: LD_INT 0
73567: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73568: LD_ADDR_VAR 0 3
73572: PUSH
73573: LD_VAR 0 1
73577: PPUSH
73578: LD_VAR 0 1
73582: PUSH
73583: LD_INT 1
73585: PLUS
73586: PPUSH
73587: LD_VAR 0 2
73591: PPUSH
73592: CALL_OW 1
73596: ST_TO_ADDR
// end ;
73597: LD_VAR 0 3
73601: RET
// export function JoinUnion ( array , element ) ; begin
73602: LD_INT 0
73604: PPUSH
// result := array union element ;
73605: LD_ADDR_VAR 0 3
73609: PUSH
73610: LD_VAR 0 1
73614: PUSH
73615: LD_VAR 0 2
73619: UNION
73620: ST_TO_ADDR
// end ;
73621: LD_VAR 0 3
73625: RET
// export function GetBehemoths ( side ) ; begin
73626: LD_INT 0
73628: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73629: LD_ADDR_VAR 0 2
73633: PUSH
73634: LD_INT 22
73636: PUSH
73637: LD_VAR 0 1
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: LD_INT 31
73648: PUSH
73649: LD_INT 25
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PPUSH
73660: CALL_OW 69
73664: ST_TO_ADDR
// end ;
73665: LD_VAR 0 2
73669: RET
// export function Shuffle ( array ) ; var i , index ; begin
73670: LD_INT 0
73672: PPUSH
73673: PPUSH
73674: PPUSH
// result := [ ] ;
73675: LD_ADDR_VAR 0 2
73679: PUSH
73680: EMPTY
73681: ST_TO_ADDR
// if not array then
73682: LD_VAR 0 1
73686: NOT
73687: IFFALSE 73691
// exit ;
73689: GO 73790
// Randomize ;
73691: CALL_OW 10
// for i = array downto 1 do
73695: LD_ADDR_VAR 0 3
73699: PUSH
73700: DOUBLE
73701: LD_VAR 0 1
73705: INC
73706: ST_TO_ADDR
73707: LD_INT 1
73709: PUSH
73710: FOR_DOWNTO
73711: IFFALSE 73788
// begin index := rand ( 1 , array ) ;
73713: LD_ADDR_VAR 0 4
73717: PUSH
73718: LD_INT 1
73720: PPUSH
73721: LD_VAR 0 1
73725: PPUSH
73726: CALL_OW 12
73730: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73731: LD_ADDR_VAR 0 2
73735: PUSH
73736: LD_VAR 0 2
73740: PPUSH
73741: LD_VAR 0 2
73745: PUSH
73746: LD_INT 1
73748: PLUS
73749: PPUSH
73750: LD_VAR 0 1
73754: PUSH
73755: LD_VAR 0 4
73759: ARRAY
73760: PPUSH
73761: CALL_OW 2
73765: ST_TO_ADDR
// array := Delete ( array , index ) ;
73766: LD_ADDR_VAR 0 1
73770: PUSH
73771: LD_VAR 0 1
73775: PPUSH
73776: LD_VAR 0 4
73780: PPUSH
73781: CALL_OW 3
73785: ST_TO_ADDR
// end ;
73786: GO 73710
73788: POP
73789: POP
// end ;
73790: LD_VAR 0 2
73794: RET
// export function GetBaseMaterials ( base ) ; begin
73795: LD_INT 0
73797: PPUSH
// result := [ 0 , 0 , 0 ] ;
73798: LD_ADDR_VAR 0 2
73802: PUSH
73803: LD_INT 0
73805: PUSH
73806: LD_INT 0
73808: PUSH
73809: LD_INT 0
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: LIST
73816: ST_TO_ADDR
// if not base then
73817: LD_VAR 0 1
73821: NOT
73822: IFFALSE 73826
// exit ;
73824: GO 73875
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73826: LD_ADDR_VAR 0 2
73830: PUSH
73831: LD_VAR 0 1
73835: PPUSH
73836: LD_INT 1
73838: PPUSH
73839: CALL_OW 275
73843: PUSH
73844: LD_VAR 0 1
73848: PPUSH
73849: LD_INT 2
73851: PPUSH
73852: CALL_OW 275
73856: PUSH
73857: LD_VAR 0 1
73861: PPUSH
73862: LD_INT 3
73864: PPUSH
73865: CALL_OW 275
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: LIST
73874: ST_TO_ADDR
// end ;
73875: LD_VAR 0 2
73879: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73880: LD_INT 0
73882: PPUSH
73883: PPUSH
// result := array ;
73884: LD_ADDR_VAR 0 3
73888: PUSH
73889: LD_VAR 0 1
73893: ST_TO_ADDR
// if size > 0 then
73894: LD_VAR 0 2
73898: PUSH
73899: LD_INT 0
73901: GREATER
73902: IFFALSE 73948
// for i := array downto size do
73904: LD_ADDR_VAR 0 4
73908: PUSH
73909: DOUBLE
73910: LD_VAR 0 1
73914: INC
73915: ST_TO_ADDR
73916: LD_VAR 0 2
73920: PUSH
73921: FOR_DOWNTO
73922: IFFALSE 73946
// result := Delete ( result , result ) ;
73924: LD_ADDR_VAR 0 3
73928: PUSH
73929: LD_VAR 0 3
73933: PPUSH
73934: LD_VAR 0 3
73938: PPUSH
73939: CALL_OW 3
73943: ST_TO_ADDR
73944: GO 73921
73946: POP
73947: POP
// end ;
73948: LD_VAR 0 3
73952: RET
// export function ComExit ( unit ) ; var tmp ; begin
73953: LD_INT 0
73955: PPUSH
73956: PPUSH
// if not IsInUnit ( unit ) then
73957: LD_VAR 0 1
73961: PPUSH
73962: CALL_OW 310
73966: NOT
73967: IFFALSE 73971
// exit ;
73969: GO 74031
// tmp := IsInUnit ( unit ) ;
73971: LD_ADDR_VAR 0 3
73975: PUSH
73976: LD_VAR 0 1
73980: PPUSH
73981: CALL_OW 310
73985: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73986: LD_VAR 0 3
73990: PPUSH
73991: CALL_OW 247
73995: PUSH
73996: LD_INT 2
73998: EQUAL
73999: IFFALSE 74012
// ComExitVehicle ( unit ) else
74001: LD_VAR 0 1
74005: PPUSH
74006: CALL_OW 121
74010: GO 74021
// ComExitBuilding ( unit ) ;
74012: LD_VAR 0 1
74016: PPUSH
74017: CALL_OW 122
// result := tmp ;
74021: LD_ADDR_VAR 0 2
74025: PUSH
74026: LD_VAR 0 3
74030: ST_TO_ADDR
// end ;
74031: LD_VAR 0 2
74035: RET
// export function ComExitAll ( units ) ; var i ; begin
74036: LD_INT 0
74038: PPUSH
74039: PPUSH
// if not units then
74040: LD_VAR 0 1
74044: NOT
74045: IFFALSE 74049
// exit ;
74047: GO 74075
// for i in units do
74049: LD_ADDR_VAR 0 3
74053: PUSH
74054: LD_VAR 0 1
74058: PUSH
74059: FOR_IN
74060: IFFALSE 74073
// ComExit ( i ) ;
74062: LD_VAR 0 3
74066: PPUSH
74067: CALL 73953 0 1
74071: GO 74059
74073: POP
74074: POP
// end ;
74075: LD_VAR 0 2
74079: RET
// export function ResetHc ; begin
74080: LD_INT 0
74082: PPUSH
// InitHc ;
74083: CALL_OW 19
// hc_importance := 0 ;
74087: LD_ADDR_OWVAR 32
74091: PUSH
74092: LD_INT 0
74094: ST_TO_ADDR
// end ;
74095: LD_VAR 0 1
74099: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74100: LD_INT 0
74102: PPUSH
74103: PPUSH
74104: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74105: LD_ADDR_VAR 0 6
74109: PUSH
74110: LD_VAR 0 1
74114: PUSH
74115: LD_VAR 0 3
74119: PLUS
74120: PUSH
74121: LD_INT 2
74123: DIV
74124: ST_TO_ADDR
// if _x < 0 then
74125: LD_VAR 0 6
74129: PUSH
74130: LD_INT 0
74132: LESS
74133: IFFALSE 74150
// _x := _x * - 1 ;
74135: LD_ADDR_VAR 0 6
74139: PUSH
74140: LD_VAR 0 6
74144: PUSH
74145: LD_INT 1
74147: NEG
74148: MUL
74149: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74150: LD_ADDR_VAR 0 7
74154: PUSH
74155: LD_VAR 0 2
74159: PUSH
74160: LD_VAR 0 4
74164: PLUS
74165: PUSH
74166: LD_INT 2
74168: DIV
74169: ST_TO_ADDR
// if _y < 0 then
74170: LD_VAR 0 7
74174: PUSH
74175: LD_INT 0
74177: LESS
74178: IFFALSE 74195
// _y := _y * - 1 ;
74180: LD_ADDR_VAR 0 7
74184: PUSH
74185: LD_VAR 0 7
74189: PUSH
74190: LD_INT 1
74192: NEG
74193: MUL
74194: ST_TO_ADDR
// result := [ _x , _y ] ;
74195: LD_ADDR_VAR 0 5
74199: PUSH
74200: LD_VAR 0 6
74204: PUSH
74205: LD_VAR 0 7
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: ST_TO_ADDR
// end ;
74214: LD_VAR 0 5
74218: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74219: LD_INT 0
74221: PPUSH
74222: PPUSH
74223: PPUSH
74224: PPUSH
// task := GetTaskList ( unit ) ;
74225: LD_ADDR_VAR 0 7
74229: PUSH
74230: LD_VAR 0 1
74234: PPUSH
74235: CALL_OW 437
74239: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74240: LD_VAR 0 7
74244: NOT
74245: PUSH
74246: LD_VAR 0 1
74250: PPUSH
74251: LD_VAR 0 2
74255: PPUSH
74256: CALL_OW 308
74260: NOT
74261: AND
74262: IFFALSE 74266
// exit ;
74264: GO 74384
// if IsInArea ( unit , area ) then
74266: LD_VAR 0 1
74270: PPUSH
74271: LD_VAR 0 2
74275: PPUSH
74276: CALL_OW 308
74280: IFFALSE 74298
// begin ComMoveToArea ( unit , goAway ) ;
74282: LD_VAR 0 1
74286: PPUSH
74287: LD_VAR 0 3
74291: PPUSH
74292: CALL_OW 113
// exit ;
74296: GO 74384
// end ; if task [ 1 ] [ 1 ] <> M then
74298: LD_VAR 0 7
74302: PUSH
74303: LD_INT 1
74305: ARRAY
74306: PUSH
74307: LD_INT 1
74309: ARRAY
74310: PUSH
74311: LD_STRING M
74313: NONEQUAL
74314: IFFALSE 74318
// exit ;
74316: GO 74384
// x := task [ 1 ] [ 2 ] ;
74318: LD_ADDR_VAR 0 5
74322: PUSH
74323: LD_VAR 0 7
74327: PUSH
74328: LD_INT 1
74330: ARRAY
74331: PUSH
74332: LD_INT 2
74334: ARRAY
74335: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74336: LD_ADDR_VAR 0 6
74340: PUSH
74341: LD_VAR 0 7
74345: PUSH
74346: LD_INT 1
74348: ARRAY
74349: PUSH
74350: LD_INT 3
74352: ARRAY
74353: ST_TO_ADDR
// if InArea ( x , y , area ) then
74354: LD_VAR 0 5
74358: PPUSH
74359: LD_VAR 0 6
74363: PPUSH
74364: LD_VAR 0 2
74368: PPUSH
74369: CALL_OW 309
74373: IFFALSE 74384
// ComStop ( unit ) ;
74375: LD_VAR 0 1
74379: PPUSH
74380: CALL_OW 141
// end ;
74384: LD_VAR 0 4
74388: RET
// export function Abs ( value ) ; begin
74389: LD_INT 0
74391: PPUSH
// result := value ;
74392: LD_ADDR_VAR 0 2
74396: PUSH
74397: LD_VAR 0 1
74401: ST_TO_ADDR
// if value < 0 then
74402: LD_VAR 0 1
74406: PUSH
74407: LD_INT 0
74409: LESS
74410: IFFALSE 74427
// result := value * - 1 ;
74412: LD_ADDR_VAR 0 2
74416: PUSH
74417: LD_VAR 0 1
74421: PUSH
74422: LD_INT 1
74424: NEG
74425: MUL
74426: ST_TO_ADDR
// end ;
74427: LD_VAR 0 2
74431: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74432: LD_INT 0
74434: PPUSH
74435: PPUSH
74436: PPUSH
74437: PPUSH
74438: PPUSH
74439: PPUSH
74440: PPUSH
74441: PPUSH
// if not unit or not building then
74442: LD_VAR 0 1
74446: NOT
74447: PUSH
74448: LD_VAR 0 2
74452: NOT
74453: OR
74454: IFFALSE 74458
// exit ;
74456: GO 74684
// x := GetX ( building ) ;
74458: LD_ADDR_VAR 0 4
74462: PUSH
74463: LD_VAR 0 2
74467: PPUSH
74468: CALL_OW 250
74472: ST_TO_ADDR
// y := GetY ( building ) ;
74473: LD_ADDR_VAR 0 6
74477: PUSH
74478: LD_VAR 0 2
74482: PPUSH
74483: CALL_OW 251
74487: ST_TO_ADDR
// d := GetDir ( building ) ;
74488: LD_ADDR_VAR 0 8
74492: PUSH
74493: LD_VAR 0 2
74497: PPUSH
74498: CALL_OW 254
74502: ST_TO_ADDR
// r := 4 ;
74503: LD_ADDR_VAR 0 9
74507: PUSH
74508: LD_INT 4
74510: ST_TO_ADDR
// for i := 1 to 5 do
74511: LD_ADDR_VAR 0 10
74515: PUSH
74516: DOUBLE
74517: LD_INT 1
74519: DEC
74520: ST_TO_ADDR
74521: LD_INT 5
74523: PUSH
74524: FOR_TO
74525: IFFALSE 74682
// begin _x := ShiftX ( x , d , r + i ) ;
74527: LD_ADDR_VAR 0 5
74531: PUSH
74532: LD_VAR 0 4
74536: PPUSH
74537: LD_VAR 0 8
74541: PPUSH
74542: LD_VAR 0 9
74546: PUSH
74547: LD_VAR 0 10
74551: PLUS
74552: PPUSH
74553: CALL_OW 272
74557: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74558: LD_ADDR_VAR 0 7
74562: PUSH
74563: LD_VAR 0 6
74567: PPUSH
74568: LD_VAR 0 8
74572: PPUSH
74573: LD_VAR 0 9
74577: PUSH
74578: LD_VAR 0 10
74582: PLUS
74583: PPUSH
74584: CALL_OW 273
74588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74589: LD_VAR 0 5
74593: PPUSH
74594: LD_VAR 0 7
74598: PPUSH
74599: CALL_OW 488
74603: PUSH
74604: LD_VAR 0 5
74608: PPUSH
74609: LD_VAR 0 7
74613: PPUSH
74614: CALL_OW 428
74618: PPUSH
74619: CALL_OW 247
74623: PUSH
74624: LD_INT 3
74626: PUSH
74627: LD_INT 2
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: IN
74634: NOT
74635: AND
74636: IFFALSE 74680
// begin ComMoveXY ( unit , _x , _y ) ;
74638: LD_VAR 0 1
74642: PPUSH
74643: LD_VAR 0 5
74647: PPUSH
74648: LD_VAR 0 7
74652: PPUSH
74653: CALL_OW 111
// result := [ _x , _y ] ;
74657: LD_ADDR_VAR 0 3
74661: PUSH
74662: LD_VAR 0 5
74666: PUSH
74667: LD_VAR 0 7
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: ST_TO_ADDR
// exit ;
74676: POP
74677: POP
74678: GO 74684
// end ; end ;
74680: GO 74524
74682: POP
74683: POP
// end ;
74684: LD_VAR 0 3
74688: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74689: LD_INT 0
74691: PPUSH
74692: PPUSH
74693: PPUSH
// result := 0 ;
74694: LD_ADDR_VAR 0 3
74698: PUSH
74699: LD_INT 0
74701: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74702: LD_VAR 0 1
74706: PUSH
74707: LD_INT 0
74709: LESS
74710: PUSH
74711: LD_VAR 0 1
74715: PUSH
74716: LD_INT 8
74718: GREATER
74719: OR
74720: PUSH
74721: LD_VAR 0 2
74725: PUSH
74726: LD_INT 0
74728: LESS
74729: OR
74730: PUSH
74731: LD_VAR 0 2
74735: PUSH
74736: LD_INT 8
74738: GREATER
74739: OR
74740: IFFALSE 74744
// exit ;
74742: GO 74819
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74744: LD_ADDR_VAR 0 4
74748: PUSH
74749: LD_INT 22
74751: PUSH
74752: LD_VAR 0 2
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PPUSH
74761: CALL_OW 69
74765: PUSH
74766: FOR_IN
74767: IFFALSE 74817
// begin un := UnitShoot ( i ) ;
74769: LD_ADDR_VAR 0 5
74773: PUSH
74774: LD_VAR 0 4
74778: PPUSH
74779: CALL_OW 504
74783: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74784: LD_VAR 0 5
74788: PPUSH
74789: CALL_OW 255
74793: PUSH
74794: LD_VAR 0 1
74798: EQUAL
74799: IFFALSE 74815
// begin result := un ;
74801: LD_ADDR_VAR 0 3
74805: PUSH
74806: LD_VAR 0 5
74810: ST_TO_ADDR
// exit ;
74811: POP
74812: POP
74813: GO 74819
// end ; end ;
74815: GO 74766
74817: POP
74818: POP
// end ;
74819: LD_VAR 0 3
74823: RET
// export function GetCargoBay ( units ) ; begin
74824: LD_INT 0
74826: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74827: LD_ADDR_VAR 0 2
74831: PUSH
74832: LD_VAR 0 1
74836: PPUSH
74837: LD_INT 2
74839: PUSH
74840: LD_INT 34
74842: PUSH
74843: LD_INT 12
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 34
74852: PUSH
74853: LD_INT 51
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 34
74862: PUSH
74863: LD_INT 32
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: LD_INT 34
74872: PUSH
74873: LD_EXP 53
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: PPUSH
74889: CALL_OW 72
74893: ST_TO_ADDR
// end ;
74894: LD_VAR 0 2
74898: RET
// export function Negate ( value ) ; begin
74899: LD_INT 0
74901: PPUSH
// result := not value ;
74902: LD_ADDR_VAR 0 2
74906: PUSH
74907: LD_VAR 0 1
74911: NOT
74912: ST_TO_ADDR
// end ;
74913: LD_VAR 0 2
74917: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74918: LD_INT 0
74920: PPUSH
// if x1 = x2 then
74921: LD_VAR 0 1
74925: PUSH
74926: LD_VAR 0 3
74930: EQUAL
74931: IFFALSE 74965
// begin if y1 > y2 then
74933: LD_VAR 0 2
74937: PUSH
74938: LD_VAR 0 4
74942: GREATER
74943: IFFALSE 74955
// result := 0 else
74945: LD_ADDR_VAR 0 5
74949: PUSH
74950: LD_INT 0
74952: ST_TO_ADDR
74953: GO 74963
// result := 3 ;
74955: LD_ADDR_VAR 0 5
74959: PUSH
74960: LD_INT 3
74962: ST_TO_ADDR
// exit ;
74963: GO 75051
// end ; if y1 = y2 then
74965: LD_VAR 0 2
74969: PUSH
74970: LD_VAR 0 4
74974: EQUAL
74975: IFFALSE 75009
// begin if x1 > x2 then
74977: LD_VAR 0 1
74981: PUSH
74982: LD_VAR 0 3
74986: GREATER
74987: IFFALSE 74999
// result := 1 else
74989: LD_ADDR_VAR 0 5
74993: PUSH
74994: LD_INT 1
74996: ST_TO_ADDR
74997: GO 75007
// result := 4 ;
74999: LD_ADDR_VAR 0 5
75003: PUSH
75004: LD_INT 4
75006: ST_TO_ADDR
// exit ;
75007: GO 75051
// end ; if x1 > x2 and y1 > y2 then
75009: LD_VAR 0 1
75013: PUSH
75014: LD_VAR 0 3
75018: GREATER
75019: PUSH
75020: LD_VAR 0 2
75024: PUSH
75025: LD_VAR 0 4
75029: GREATER
75030: AND
75031: IFFALSE 75043
// result := 2 else
75033: LD_ADDR_VAR 0 5
75037: PUSH
75038: LD_INT 2
75040: ST_TO_ADDR
75041: GO 75051
// result := 5 ;
75043: LD_ADDR_VAR 0 5
75047: PUSH
75048: LD_INT 5
75050: ST_TO_ADDR
// end ;
75051: LD_VAR 0 5
75055: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75056: LD_INT 0
75058: PPUSH
75059: PPUSH
// if not driver or not IsInUnit ( driver ) then
75060: LD_VAR 0 1
75064: NOT
75065: PUSH
75066: LD_VAR 0 1
75070: PPUSH
75071: CALL_OW 310
75075: NOT
75076: OR
75077: IFFALSE 75081
// exit ;
75079: GO 75171
// vehicle := IsInUnit ( driver ) ;
75081: LD_ADDR_VAR 0 3
75085: PUSH
75086: LD_VAR 0 1
75090: PPUSH
75091: CALL_OW 310
75095: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75096: LD_VAR 0 1
75100: PPUSH
75101: LD_STRING \
75103: PUSH
75104: LD_INT 0
75106: PUSH
75107: LD_INT 0
75109: PUSH
75110: LD_INT 0
75112: PUSH
75113: LD_INT 0
75115: PUSH
75116: LD_INT 0
75118: PUSH
75119: LD_INT 0
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: PUSH
75131: LD_STRING E
75133: PUSH
75134: LD_INT 0
75136: PUSH
75137: LD_INT 0
75139: PUSH
75140: LD_VAR 0 3
75144: PUSH
75145: LD_INT 0
75147: PUSH
75148: LD_INT 0
75150: PUSH
75151: LD_INT 0
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: LIST
75160: LIST
75161: LIST
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PPUSH
75167: CALL_OW 446
// end ;
75171: LD_VAR 0 2
75175: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75176: LD_INT 0
75178: PPUSH
75179: PPUSH
// if not driver or not IsInUnit ( driver ) then
75180: LD_VAR 0 1
75184: NOT
75185: PUSH
75186: LD_VAR 0 1
75190: PPUSH
75191: CALL_OW 310
75195: NOT
75196: OR
75197: IFFALSE 75201
// exit ;
75199: GO 75291
// vehicle := IsInUnit ( driver ) ;
75201: LD_ADDR_VAR 0 3
75205: PUSH
75206: LD_VAR 0 1
75210: PPUSH
75211: CALL_OW 310
75215: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75216: LD_VAR 0 1
75220: PPUSH
75221: LD_STRING \
75223: PUSH
75224: LD_INT 0
75226: PUSH
75227: LD_INT 0
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: LD_INT 0
75235: PUSH
75236: LD_INT 0
75238: PUSH
75239: LD_INT 0
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: PUSH
75251: LD_STRING E
75253: PUSH
75254: LD_INT 0
75256: PUSH
75257: LD_INT 0
75259: PUSH
75260: LD_VAR 0 3
75264: PUSH
75265: LD_INT 0
75267: PUSH
75268: LD_INT 0
75270: PUSH
75271: LD_INT 0
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: LIST
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PPUSH
75287: CALL_OW 447
// end ;
75291: LD_VAR 0 2
75295: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75296: LD_INT 0
75298: PPUSH
75299: PPUSH
75300: PPUSH
// tmp := [ ] ;
75301: LD_ADDR_VAR 0 5
75305: PUSH
75306: EMPTY
75307: ST_TO_ADDR
// for i in units do
75308: LD_ADDR_VAR 0 4
75312: PUSH
75313: LD_VAR 0 1
75317: PUSH
75318: FOR_IN
75319: IFFALSE 75357
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75321: LD_ADDR_VAR 0 5
75325: PUSH
75326: LD_VAR 0 5
75330: PPUSH
75331: LD_VAR 0 5
75335: PUSH
75336: LD_INT 1
75338: PLUS
75339: PPUSH
75340: LD_VAR 0 4
75344: PPUSH
75345: CALL_OW 256
75349: PPUSH
75350: CALL_OW 2
75354: ST_TO_ADDR
75355: GO 75318
75357: POP
75358: POP
// if not tmp then
75359: LD_VAR 0 5
75363: NOT
75364: IFFALSE 75368
// exit ;
75366: GO 75416
// if asc then
75368: LD_VAR 0 2
75372: IFFALSE 75396
// result := SortListByListAsc ( units , tmp ) else
75374: LD_ADDR_VAR 0 3
75378: PUSH
75379: LD_VAR 0 1
75383: PPUSH
75384: LD_VAR 0 5
75388: PPUSH
75389: CALL_OW 76
75393: ST_TO_ADDR
75394: GO 75416
// result := SortListByListDesc ( units , tmp ) ;
75396: LD_ADDR_VAR 0 3
75400: PUSH
75401: LD_VAR 0 1
75405: PPUSH
75406: LD_VAR 0 5
75410: PPUSH
75411: CALL_OW 77
75415: ST_TO_ADDR
// end ;
75416: LD_VAR 0 3
75420: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75421: LD_INT 0
75423: PPUSH
75424: PPUSH
// task := GetTaskList ( mech ) ;
75425: LD_ADDR_VAR 0 4
75429: PUSH
75430: LD_VAR 0 1
75434: PPUSH
75435: CALL_OW 437
75439: ST_TO_ADDR
// if not task then
75440: LD_VAR 0 4
75444: NOT
75445: IFFALSE 75449
// exit ;
75447: GO 75491
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75449: LD_ADDR_VAR 0 3
75453: PUSH
75454: LD_VAR 0 4
75458: PUSH
75459: LD_INT 1
75461: ARRAY
75462: PUSH
75463: LD_INT 1
75465: ARRAY
75466: PUSH
75467: LD_STRING r
75469: EQUAL
75470: PUSH
75471: LD_VAR 0 4
75475: PUSH
75476: LD_INT 1
75478: ARRAY
75479: PUSH
75480: LD_INT 4
75482: ARRAY
75483: PUSH
75484: LD_VAR 0 2
75488: EQUAL
75489: AND
75490: ST_TO_ADDR
// end ;
75491: LD_VAR 0 3
75495: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75496: LD_INT 0
75498: PPUSH
// SetDir ( unit , d ) ;
75499: LD_VAR 0 1
75503: PPUSH
75504: LD_VAR 0 4
75508: PPUSH
75509: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75513: LD_VAR 0 1
75517: PPUSH
75518: LD_VAR 0 2
75522: PPUSH
75523: LD_VAR 0 3
75527: PPUSH
75528: LD_VAR 0 5
75532: PPUSH
75533: CALL_OW 48
// end ;
75537: LD_VAR 0 6
75541: RET
// export function ToNaturalNumber ( number ) ; begin
75542: LD_INT 0
75544: PPUSH
// result := number div 1 ;
75545: LD_ADDR_VAR 0 2
75549: PUSH
75550: LD_VAR 0 1
75554: PUSH
75555: LD_INT 1
75557: DIV
75558: ST_TO_ADDR
// if number < 0 then
75559: LD_VAR 0 1
75563: PUSH
75564: LD_INT 0
75566: LESS
75567: IFFALSE 75577
// result := 0 ;
75569: LD_ADDR_VAR 0 2
75573: PUSH
75574: LD_INT 0
75576: ST_TO_ADDR
// end ;
75577: LD_VAR 0 2
75581: RET
// export function SortByClass ( units , class ) ; var un ; begin
75582: LD_INT 0
75584: PPUSH
75585: PPUSH
// if not units or not class then
75586: LD_VAR 0 1
75590: NOT
75591: PUSH
75592: LD_VAR 0 2
75596: NOT
75597: OR
75598: IFFALSE 75602
// exit ;
75600: GO 75697
// result := [ ] ;
75602: LD_ADDR_VAR 0 3
75606: PUSH
75607: EMPTY
75608: ST_TO_ADDR
// for un in units do
75609: LD_ADDR_VAR 0 4
75613: PUSH
75614: LD_VAR 0 1
75618: PUSH
75619: FOR_IN
75620: IFFALSE 75695
// if GetClass ( un ) = class then
75622: LD_VAR 0 4
75626: PPUSH
75627: CALL_OW 257
75631: PUSH
75632: LD_VAR 0 2
75636: EQUAL
75637: IFFALSE 75664
// result := Insert ( result , 1 , un ) else
75639: LD_ADDR_VAR 0 3
75643: PUSH
75644: LD_VAR 0 3
75648: PPUSH
75649: LD_INT 1
75651: PPUSH
75652: LD_VAR 0 4
75656: PPUSH
75657: CALL_OW 2
75661: ST_TO_ADDR
75662: GO 75693
// result := Replace ( result , result + 1 , un ) ;
75664: LD_ADDR_VAR 0 3
75668: PUSH
75669: LD_VAR 0 3
75673: PPUSH
75674: LD_VAR 0 3
75678: PUSH
75679: LD_INT 1
75681: PLUS
75682: PPUSH
75683: LD_VAR 0 4
75687: PPUSH
75688: CALL_OW 1
75692: ST_TO_ADDR
75693: GO 75619
75695: POP
75696: POP
// end ;
75697: LD_VAR 0 3
75701: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75702: LD_INT 0
75704: PPUSH
75705: PPUSH
75706: PPUSH
75707: PPUSH
75708: PPUSH
75709: PPUSH
75710: PPUSH
// result := [ ] ;
75711: LD_ADDR_VAR 0 4
75715: PUSH
75716: EMPTY
75717: ST_TO_ADDR
// if x - r < 0 then
75718: LD_VAR 0 1
75722: PUSH
75723: LD_VAR 0 3
75727: MINUS
75728: PUSH
75729: LD_INT 0
75731: LESS
75732: IFFALSE 75744
// min_x := 0 else
75734: LD_ADDR_VAR 0 8
75738: PUSH
75739: LD_INT 0
75741: ST_TO_ADDR
75742: GO 75760
// min_x := x - r ;
75744: LD_ADDR_VAR 0 8
75748: PUSH
75749: LD_VAR 0 1
75753: PUSH
75754: LD_VAR 0 3
75758: MINUS
75759: ST_TO_ADDR
// if y - r < 0 then
75760: LD_VAR 0 2
75764: PUSH
75765: LD_VAR 0 3
75769: MINUS
75770: PUSH
75771: LD_INT 0
75773: LESS
75774: IFFALSE 75786
// min_y := 0 else
75776: LD_ADDR_VAR 0 7
75780: PUSH
75781: LD_INT 0
75783: ST_TO_ADDR
75784: GO 75802
// min_y := y - r ;
75786: LD_ADDR_VAR 0 7
75790: PUSH
75791: LD_VAR 0 2
75795: PUSH
75796: LD_VAR 0 3
75800: MINUS
75801: ST_TO_ADDR
// max_x := x + r ;
75802: LD_ADDR_VAR 0 9
75806: PUSH
75807: LD_VAR 0 1
75811: PUSH
75812: LD_VAR 0 3
75816: PLUS
75817: ST_TO_ADDR
// max_y := y + r ;
75818: LD_ADDR_VAR 0 10
75822: PUSH
75823: LD_VAR 0 2
75827: PUSH
75828: LD_VAR 0 3
75832: PLUS
75833: ST_TO_ADDR
// for _x = min_x to max_x do
75834: LD_ADDR_VAR 0 5
75838: PUSH
75839: DOUBLE
75840: LD_VAR 0 8
75844: DEC
75845: ST_TO_ADDR
75846: LD_VAR 0 9
75850: PUSH
75851: FOR_TO
75852: IFFALSE 75953
// for _y = min_y to max_y do
75854: LD_ADDR_VAR 0 6
75858: PUSH
75859: DOUBLE
75860: LD_VAR 0 7
75864: DEC
75865: ST_TO_ADDR
75866: LD_VAR 0 10
75870: PUSH
75871: FOR_TO
75872: IFFALSE 75949
// begin if not ValidHex ( _x , _y ) then
75874: LD_VAR 0 5
75878: PPUSH
75879: LD_VAR 0 6
75883: PPUSH
75884: CALL_OW 488
75888: NOT
75889: IFFALSE 75893
// continue ;
75891: GO 75871
// if GetResourceTypeXY ( _x , _y ) then
75893: LD_VAR 0 5
75897: PPUSH
75898: LD_VAR 0 6
75902: PPUSH
75903: CALL_OW 283
75907: IFFALSE 75947
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75909: LD_ADDR_VAR 0 4
75913: PUSH
75914: LD_VAR 0 4
75918: PPUSH
75919: LD_VAR 0 4
75923: PUSH
75924: LD_INT 1
75926: PLUS
75927: PPUSH
75928: LD_VAR 0 5
75932: PUSH
75933: LD_VAR 0 6
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: PPUSH
75942: CALL_OW 1
75946: ST_TO_ADDR
// end ;
75947: GO 75871
75949: POP
75950: POP
75951: GO 75851
75953: POP
75954: POP
// end ;
75955: LD_VAR 0 4
75959: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
75960: LD_INT 0
75962: PPUSH
75963: PPUSH
75964: PPUSH
75965: PPUSH
75966: PPUSH
75967: PPUSH
// if not units then
75968: LD_VAR 0 1
75972: NOT
75973: IFFALSE 75977
// exit ;
75975: GO 76378
// result := UnitFilter ( units , [ f_ok ] ) ;
75977: LD_ADDR_VAR 0 3
75981: PUSH
75982: LD_VAR 0 1
75986: PPUSH
75987: LD_INT 50
75989: PUSH
75990: EMPTY
75991: LIST
75992: PPUSH
75993: CALL_OW 72
75997: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75998: LD_ADDR_VAR 0 7
76002: PUSH
76003: LD_VAR 0 1
76007: PUSH
76008: LD_INT 1
76010: ARRAY
76011: PPUSH
76012: CALL_OW 255
76016: ST_TO_ADDR
// if not result then
76017: LD_VAR 0 3
76021: NOT
76022: IFFALSE 76026
// exit ;
76024: GO 76378
// for i in result do
76026: LD_ADDR_VAR 0 4
76030: PUSH
76031: LD_VAR 0 3
76035: PUSH
76036: FOR_IN
76037: IFFALSE 76376
// begin tag := GetTag ( i ) + 1 ;
76039: LD_ADDR_VAR 0 8
76043: PUSH
76044: LD_VAR 0 4
76048: PPUSH
76049: CALL_OW 110
76053: PUSH
76054: LD_INT 1
76056: PLUS
76057: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76058: LD_ADDR_VAR 0 6
76062: PUSH
76063: LD_VAR 0 4
76067: PPUSH
76068: CALL_OW 250
76072: PPUSH
76073: LD_VAR 0 4
76077: PPUSH
76078: CALL_OW 251
76082: PPUSH
76083: LD_INT 6
76085: PPUSH
76086: CALL 75702 0 3
76090: ST_TO_ADDR
// if cr then
76091: LD_VAR 0 6
76095: IFFALSE 76134
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76097: LD_VAR 0 4
76101: PPUSH
76102: LD_VAR 0 6
76106: PUSH
76107: LD_INT 1
76109: ARRAY
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PPUSH
76115: LD_VAR 0 6
76119: PUSH
76120: LD_INT 1
76122: ARRAY
76123: PUSH
76124: LD_INT 2
76126: ARRAY
76127: PPUSH
76128: CALL_OW 116
76132: GO 76374
// if path > tag then
76134: LD_VAR 0 2
76138: PUSH
76139: LD_VAR 0 8
76143: GREATER
76144: IFFALSE 76322
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76146: LD_ADDR_VAR 0 5
76150: PUSH
76151: LD_INT 81
76153: PUSH
76154: LD_VAR 0 7
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: PUSH
76163: LD_INT 91
76165: PUSH
76166: LD_VAR 0 4
76170: PUSH
76171: LD_INT 12
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: LIST
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: PPUSH
76183: CALL_OW 69
76187: ST_TO_ADDR
// if enemy then
76188: LD_VAR 0 5
76192: IFFALSE 76220
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76194: LD_VAR 0 4
76198: PPUSH
76199: LD_VAR 0 5
76203: PPUSH
76204: LD_VAR 0 4
76208: PPUSH
76209: CALL_OW 74
76213: PPUSH
76214: CALL_OW 115
76218: GO 76320
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76220: LD_VAR 0 4
76224: PPUSH
76225: LD_VAR 0 2
76229: PUSH
76230: LD_VAR 0 8
76234: ARRAY
76235: PUSH
76236: LD_INT 1
76238: ARRAY
76239: PPUSH
76240: LD_VAR 0 2
76244: PUSH
76245: LD_VAR 0 8
76249: ARRAY
76250: PUSH
76251: LD_INT 2
76253: ARRAY
76254: PPUSH
76255: CALL_OW 297
76259: PUSH
76260: LD_INT 6
76262: GREATER
76263: IFFALSE 76306
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76265: LD_VAR 0 4
76269: PPUSH
76270: LD_VAR 0 2
76274: PUSH
76275: LD_VAR 0 8
76279: ARRAY
76280: PUSH
76281: LD_INT 1
76283: ARRAY
76284: PPUSH
76285: LD_VAR 0 2
76289: PUSH
76290: LD_VAR 0 8
76294: ARRAY
76295: PUSH
76296: LD_INT 2
76298: ARRAY
76299: PPUSH
76300: CALL_OW 114
76304: GO 76320
// SetTag ( i , tag ) ;
76306: LD_VAR 0 4
76310: PPUSH
76311: LD_VAR 0 8
76315: PPUSH
76316: CALL_OW 109
// end else
76320: GO 76374
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76322: LD_ADDR_VAR 0 5
76326: PUSH
76327: LD_INT 81
76329: PUSH
76330: LD_VAR 0 7
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PPUSH
76339: CALL_OW 69
76343: ST_TO_ADDR
// if enemy then
76344: LD_VAR 0 5
76348: IFFALSE 76374
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76350: LD_VAR 0 4
76354: PPUSH
76355: LD_VAR 0 5
76359: PPUSH
76360: LD_VAR 0 4
76364: PPUSH
76365: CALL_OW 74
76369: PPUSH
76370: CALL_OW 115
// end ; end ;
76374: GO 76036
76376: POP
76377: POP
// end ; end_of_file
76378: LD_VAR 0 3
76382: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76383: LD_VAR 0 1
76387: PUSH
76388: LD_INT 200
76390: DOUBLE
76391: GREATEREQUAL
76392: IFFALSE 76400
76394: LD_INT 299
76396: DOUBLE
76397: LESSEQUAL
76398: IFTRUE 76402
76400: GO 76434
76402: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76403: LD_VAR 0 1
76407: PPUSH
76408: LD_VAR 0 2
76412: PPUSH
76413: LD_VAR 0 3
76417: PPUSH
76418: LD_VAR 0 4
76422: PPUSH
76423: LD_VAR 0 5
76427: PPUSH
76428: CALL 32945 0 5
76432: GO 76511
76434: LD_INT 300
76436: DOUBLE
76437: GREATEREQUAL
76438: IFFALSE 76446
76440: LD_INT 399
76442: DOUBLE
76443: LESSEQUAL
76444: IFTRUE 76448
76446: GO 76510
76448: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76449: LD_VAR 0 1
76453: PPUSH
76454: LD_VAR 0 2
76458: PPUSH
76459: LD_VAR 0 3
76463: PPUSH
76464: LD_VAR 0 4
76468: PPUSH
76469: LD_VAR 0 5
76473: PPUSH
76474: LD_VAR 0 6
76478: PPUSH
76479: LD_VAR 0 7
76483: PPUSH
76484: LD_VAR 0 8
76488: PPUSH
76489: LD_VAR 0 9
76493: PPUSH
76494: LD_VAR 0 10
76498: PPUSH
76499: LD_VAR 0 11
76503: PPUSH
76504: CALL 30833 0 11
76508: GO 76511
76510: POP
// end ;
76511: PPOPN 11
76513: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76514: LD_VAR 0 1
76518: PPUSH
76519: LD_VAR 0 2
76523: PPUSH
76524: LD_VAR 0 3
76528: PPUSH
76529: LD_VAR 0 4
76533: PPUSH
76534: LD_VAR 0 5
76538: PPUSH
76539: CALL 32927 0 5
// end ; end_of_file
76543: PPOPN 5
76545: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76546: LD_VAR 0 1
76550: PPUSH
76551: LD_VAR 0 2
76555: PPUSH
76556: LD_VAR 0 3
76560: PPUSH
76561: LD_VAR 0 4
76565: PPUSH
76566: LD_VAR 0 5
76570: PPUSH
76571: LD_VAR 0 6
76575: PPUSH
76576: CALL 19641 0 6
// end ;
76580: PPOPN 6
76582: END
