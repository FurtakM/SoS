// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15039 0 0
// PrepareDifficulty ;
  43: CALL 12412 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5578 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 39069 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 39069 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 39069 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 39069 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 39069 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 39069 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 39069 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 39069 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 39069 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 39069 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 39069 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 39069 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 39069 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76537 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12731 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12731 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 76537 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12731 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12731 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side := 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation := 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i := 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery :=  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name :=  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un := CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery :=  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name :=  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un := CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4381
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis := ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh := CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery :=  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name :=  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 6
4329: PUSH
4330: LD_INT 7
4332: PUSH
4333: LD_INT 8
4335: PUSH
4336: LD_INT 10
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_OWVAR 67
4349: ARRAY
4350: PPUSH
4351: CALL_OW 380
// un = CreateHuman ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: CALL_OW 44
4364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4365: LD_VAR 0 3
4369: PPUSH
4370: LD_VAR 0 4
4374: PPUSH
4375: CALL_OW 52
// end ;
4379: GO 4163
4381: POP
4382: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: DOUBLE
4389: LD_INT 1
4391: DEC
4392: ST_TO_ADDR
4393: LD_INT 3
4395: PUSH
4396: LD_INT 4
4398: PUSH
4399: LD_INT 5
4401: PUSH
4402: LD_INT 5
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_OWVAR 67
4415: ARRAY
4416: PUSH
4417: FOR_TO
4418: IFFALSE 4565
// begin vc_engine := 3 ;
4420: LD_ADDR_OWVAR 39
4424: PUSH
4425: LD_INT 3
4427: ST_TO_ADDR
// vc_control := 3 ;
4428: LD_ADDR_OWVAR 38
4432: PUSH
4433: LD_INT 3
4435: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4436: LD_ADDR_OWVAR 40
4440: PUSH
4441: LD_INT 42
4443: PUSH
4444: LD_INT 43
4446: PUSH
4447: LD_INT 44
4449: PUSH
4450: LD_INT 45
4452: PUSH
4453: LD_INT 46
4455: PUSH
4456: LD_INT 49
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 1
4469: PPUSH
4470: LD_INT 5
4472: PPUSH
4473: CALL_OW 12
4477: ARRAY
4478: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4479: LD_OWVAR 40
4483: PUSH
4484: LD_INT 46
4486: EQUAL
4487: IFFALSE 4499
// vc_chassis := ru_heavy_tracked else
4489: LD_ADDR_OWVAR 37
4493: PUSH
4494: LD_INT 24
4496: ST_TO_ADDR
4497: GO 4526
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4499: LD_ADDR_OWVAR 37
4503: PUSH
4504: LD_INT 22
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: CALL_OW 12
4524: ARRAY
4525: ST_TO_ADDR
// veh := CreateVehicle ;
4526: LD_ADDR_VAR 0 4
4530: PUSH
4531: CALL_OW 45
4535: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4536: LD_VAR 0 4
4540: PPUSH
4541: LD_INT 3
4543: PPUSH
4544: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_INT 6
4555: PPUSH
4556: LD_INT 0
4558: PPUSH
4559: CALL_OW 49
// end ;
4563: GO 4417
4565: POP
4566: POP
// end ; end_of_file
4567: LD_VAR 0 1
4571: RET
// export function PrepareKurt ; begin
4572: LD_INT 0
4574: PPUSH
// uc_side := 8 ;
4575: LD_ADDR_OWVAR 20
4579: PUSH
4580: LD_INT 8
4582: ST_TO_ADDR
// uc_nation := 2 ;
4583: LD_ADDR_OWVAR 21
4587: PUSH
4588: LD_INT 2
4590: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4591: LD_ADDR_OWVAR 37
4595: PUSH
4596: LD_INT 13
4598: ST_TO_ADDR
// vc_engine := 1 ;
4599: LD_ADDR_OWVAR 39
4603: PUSH
4604: LD_INT 1
4606: ST_TO_ADDR
// vc_control := 1 ;
4607: LD_ADDR_OWVAR 38
4611: PUSH
4612: LD_INT 1
4614: ST_TO_ADDR
// vc_weapon := 24 ;
4615: LD_ADDR_OWVAR 40
4619: PUSH
4620: LD_INT 24
4622: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4623: LD_ADDR_EXP 18
4627: PUSH
4628: CALL_OW 45
4632: ST_TO_ADDR
// if kurtStatus > 0 then
4633: LD_EXP 19
4637: PUSH
4638: LD_INT 0
4640: GREATER
4641: IFFALSE 4693
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4643: LD_ADDR_EXP 17
4647: PUSH
4648: LD_STRING Kurt
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: LD_STRING 
4656: PPUSH
4657: CALL 39069 0 3
4661: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4662: LD_EXP 18
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4677: LD_EXP 17
4681: PPUSH
4682: LD_EXP 18
4686: PPUSH
4687: CALL_OW 52
// end else
4691: GO 4770
// begin hc_name :=  ;
4693: LD_ADDR_OWVAR 26
4697: PUSH
4698: LD_STRING 
4700: ST_TO_ADDR
// hc_gallery :=  ;
4701: LD_ADDR_OWVAR 33
4705: PUSH
4706: LD_STRING 
4708: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4709: LD_INT 1
4711: PPUSH
4712: LD_INT 10
4714: PPUSH
4715: CALL_OW 381
// Kurt := CreateHuman ;
4719: LD_ADDR_EXP 17
4723: PUSH
4724: CALL_OW 44
4728: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4729: LD_EXP 18
4733: PPUSH
4734: LD_INT 4
4736: PPUSH
4737: LD_INT 0
4739: PPUSH
4740: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4744: LD_EXP 17
4748: PPUSH
4749: LD_EXP 18
4753: PPUSH
4754: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_STRING AltKurt
4765: PPUSH
4766: CALL_OW 38
// end ; end ;
4770: LD_VAR 0 1
4774: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4775: LD_INT 0
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// for i := 1 to 3 do
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: DOUBLE
4787: LD_INT 1
4789: DEC
4790: ST_TO_ADDR
4791: LD_INT 3
4793: PUSH
4794: FOR_TO
4795: IFFALSE 4916
// begin uc_side := 1 ;
4797: LD_ADDR_OWVAR 20
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// uc_nation := 2 ;
4805: LD_ADDR_OWVAR 21
4809: PUSH
4810: LD_INT 2
4812: ST_TO_ADDR
// hc_gallery =  ;
4813: LD_ADDR_OWVAR 33
4817: PUSH
4818: LD_STRING 
4820: ST_TO_ADDR
// hc_name =  ;
4821: LD_ADDR_OWVAR 26
4825: PUSH
4826: LD_STRING 
4828: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4829: LD_EXP 19
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: PUSH
4838: LD_EXP 19
4842: PUSH
4843: LD_INT 2
4845: EQUAL
4846: OR
4847: IFFALSE 4864
// PrepareHuman ( false , 1 , 6 ) else
4849: LD_INT 0
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: LD_INT 6
4857: PPUSH
4858: CALL_OW 380
4862: GO 4877
// PrepareHuman ( false , 1 , 8 ) ;
4864: LD_INT 0
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: LD_INT 8
4872: PPUSH
4873: CALL_OW 380
// un := CreateHuman ;
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: CALL_OW 44
4886: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4887: LD_VAR 0 3
4891: PPUSH
4892: LD_INT 4
4894: PPUSH
4895: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 4
4906: PPUSH
4907: LD_INT 0
4909: PPUSH
4910: CALL_OW 49
// end ;
4914: GO 4794
4916: POP
4917: POP
// vc_chassis := 14 ;
4918: LD_ADDR_OWVAR 37
4922: PUSH
4923: LD_INT 14
4925: ST_TO_ADDR
// vc_engine := 3 ;
4926: LD_ADDR_OWVAR 39
4930: PUSH
4931: LD_INT 3
4933: ST_TO_ADDR
// vc_control := 1 ;
4934: LD_ADDR_OWVAR 38
4938: PUSH
4939: LD_INT 1
4941: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4942: LD_ADDR_OWVAR 40
4946: PUSH
4947: LD_INT 27
4949: PUSH
4950: LD_INT 26
4952: PUSH
4953: LD_INT 28
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 1
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 12
4971: ARRAY
4972: ST_TO_ADDR
// veh := CreateVehicle ;
4973: LD_ADDR_VAR 0 4
4977: PUSH
4978: CALL_OW 45
4982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4983: LD_VAR 0 4
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4995: LD_VAR 0 4
4999: PPUSH
5000: LD_INT 4
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5010: LD_EXP 19
5014: PUSH
5015: LD_INT 0
5017: EQUAL
5018: PUSH
5019: LD_EXP 19
5023: PUSH
5024: LD_INT 2
5026: EQUAL
5027: OR
5028: IFFALSE 5045
// PrepareHuman ( false , 3 , 6 ) else
5030: LD_INT 0
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 6
5038: PPUSH
5039: CALL_OW 380
5043: GO 5058
// PrepareHuman ( false , 3 , 8 ) ;
5045: LD_INT 0
5047: PPUSH
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 8
5053: PPUSH
5054: CALL_OW 380
// un := CreateHuman ;
5058: LD_ADDR_VAR 0 3
5062: PUSH
5063: CALL_OW 44
5067: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5068: LD_VAR 0 3
5072: PPUSH
5073: LD_VAR 0 4
5077: PPUSH
5078: CALL_OW 52
// vc_chassis := 14 ;
5082: LD_ADDR_OWVAR 37
5086: PUSH
5087: LD_INT 14
5089: ST_TO_ADDR
// vc_engine := 3 ;
5090: LD_ADDR_OWVAR 39
5094: PUSH
5095: LD_INT 3
5097: ST_TO_ADDR
// vc_control := 1 ;
5098: LD_ADDR_OWVAR 38
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5106: LD_ADDR_OWVAR 40
5110: PUSH
5111: LD_INT 27
5113: PUSH
5114: LD_INT 26
5116: PUSH
5117: LD_INT 28
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 1
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL_OW 12
5135: ARRAY
5136: ST_TO_ADDR
// veh := CreateVehicle ;
5137: LD_ADDR_VAR 0 4
5141: PUSH
5142: CALL_OW 45
5146: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5147: LD_VAR 0 4
5151: PPUSH
5152: LD_INT 4
5154: PPUSH
5155: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5159: LD_VAR 0 4
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: LD_INT 0
5169: PPUSH
5170: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5174: LD_EXP 19
5178: PUSH
5179: LD_INT 0
5181: EQUAL
5182: PUSH
5183: LD_EXP 19
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: OR
5192: IFFALSE 5209
// PrepareHuman ( false , 4 , 6 ) else
5194: LD_INT 0
5196: PPUSH
5197: LD_INT 4
5199: PPUSH
5200: LD_INT 6
5202: PPUSH
5203: CALL_OW 380
5207: GO 5222
// PrepareHuman ( false , 4 , 8 ) ;
5209: LD_INT 0
5211: PPUSH
5212: LD_INT 4
5214: PPUSH
5215: LD_INT 8
5217: PPUSH
5218: CALL_OW 380
// un := CreateHuman ;
5222: LD_ADDR_VAR 0 3
5226: PUSH
5227: CALL_OW 44
5231: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5232: LD_VAR 0 3
5236: PPUSH
5237: LD_INT 4
5239: PPUSH
5240: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5244: LD_VAR 0 3
5248: PPUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: CALL_OW 52
// vc_chassis := 14 ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := 3 ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := 1 ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := 26 ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 26
5289: ST_TO_ADDR
// veh := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_INT 4
5307: PPUSH
5308: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5312: LD_VAR 0 4
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: LD_INT 0
5322: PPUSH
5323: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5327: LD_EXP 19
5331: PUSH
5332: LD_INT 0
5334: EQUAL
5335: PUSH
5336: LD_EXP 19
5340: PUSH
5341: LD_INT 2
5343: EQUAL
5344: OR
5345: IFFALSE 5362
// PrepareHuman ( false , 2 , 4 ) else
5347: LD_INT 0
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: LD_INT 4
5355: PPUSH
5356: CALL_OW 380
5360: GO 5375
// PrepareHuman ( false , 2 , 8 ) ;
5362: LD_INT 0
5364: PPUSH
5365: LD_INT 2
5367: PPUSH
5368: LD_INT 8
5370: PPUSH
5371: CALL_OW 380
// un := CreateHuman ;
5375: LD_ADDR_VAR 0 3
5379: PUSH
5380: CALL_OW 44
5384: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5385: LD_VAR 0 3
5389: PPUSH
5390: LD_INT 4
5392: PPUSH
5393: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_VAR 0 4
5406: PPUSH
5407: CALL_OW 52
// end ;
5411: LD_VAR 0 1
5415: RET
// export function PrepareAttackLegion ; var i , un ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
// for i := 1 to 4 do
5421: LD_ADDR_VAR 0 2
5425: PUSH
5426: DOUBLE
5427: LD_INT 1
5429: DEC
5430: ST_TO_ADDR
5431: LD_INT 4
5433: PUSH
5434: FOR_TO
5435: IFFALSE 5545
// begin uc_side := 8 ;
5437: LD_ADDR_OWVAR 20
5441: PUSH
5442: LD_INT 8
5444: ST_TO_ADDR
// uc_nation := 2 ;
5445: LD_ADDR_OWVAR 21
5449: PUSH
5450: LD_INT 2
5452: ST_TO_ADDR
// hc_gallery :=  ;
5453: LD_ADDR_OWVAR 33
5457: PUSH
5458: LD_STRING 
5460: ST_TO_ADDR
// hc_name :=  ;
5461: LD_ADDR_OWVAR 26
5465: PUSH
5466: LD_STRING 
5468: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5469: LD_INT 0
5471: PPUSH
5472: LD_INT 1
5474: PUSH
5475: LD_INT 8
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 1
5484: PPUSH
5485: LD_INT 2
5487: PPUSH
5488: CALL_OW 12
5492: ARRAY
5493: PPUSH
5494: LD_INT 6
5496: PPUSH
5497: LD_INT 8
5499: PPUSH
5500: CALL_OW 12
5504: PPUSH
5505: CALL_OW 380
// un := CreateHuman ;
5509: LD_ADDR_VAR 0 3
5513: PUSH
5514: CALL_OW 44
5518: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 19
5526: PPUSH
5527: LD_INT 0
5529: PPUSH
5530: CALL_OW 49
// ComCrawl ( un ) ;
5534: LD_VAR 0 3
5538: PPUSH
5539: CALL_OW 137
// end ;
5543: GO 5434
5545: POP
5546: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 8
5552: PPUSH
5553: LD_INT 2
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5563: LD_INT 20
5565: PPUSH
5566: LD_INT 3
5568: PPUSH
5569: CALL 14566 0 2
// end ; end_of_file
5573: LD_VAR 0 1
5577: RET
// export function Action ; var i , tmp , group ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
// InGameOn ;
5584: CALL_OW 8
// music_nat := 1 ;
5588: LD_ADDR_OWVAR 71
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5596: LD_ADDR_VAR 0 4
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5616: LD_ADDR_VAR 0 3
5620: PUSH
5621: LD_EXP 1
5625: PPUSH
5626: CALL_OW 310
5630: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5631: LD_VAR 0 3
5635: PPUSH
5636: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_INT 130
5647: PPUSH
5648: LD_INT 103
5650: PPUSH
5651: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5655: LD_VAR 0 3
5659: PPUSH
5660: LD_INT 114
5662: PPUSH
5663: LD_INT 102
5665: PPUSH
5666: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5670: LD_EXP 1
5674: PPUSH
5675: LD_STRING D1-JMM-1
5677: PPUSH
5678: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 87
// if IsOk ( Donaldson ) then
5691: LD_EXP 3
5695: PPUSH
5696: CALL_OW 302
5700: IFFALSE 5765
// begin Say ( Donaldson , D1-Don-1 ) ;
5702: LD_EXP 3
5706: PPUSH
5707: LD_STRING D1-Don-1
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5723: LD_EXP 1
5727: PPUSH
5728: LD_STRING D1-JMM-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5744: LD_EXP 3
5748: PPUSH
5749: LD_STRING D1-Don-2
5751: PPUSH
5752: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5765: LD_VAR 0 4
5769: PPUSH
5770: LD_INT 110
5772: PPUSH
5773: LD_INT 101
5775: PPUSH
5776: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5780: LD_INT 35
5782: PPUSH
5783: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5796: LD_INT 1
5798: PPUSH
5799: LD_INT 102
5801: PPUSH
5802: LD_INT 94
5804: PPUSH
5805: CALL_OW 293
5809: IFFALSE 5780
// CenterOnXY ( 102 , 94 ) ;
5811: LD_INT 102
5813: PPUSH
5814: LD_INT 94
5816: PPUSH
5817: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5821: LD_VAR 0 4
5825: PPUSH
5826: LD_INT 26
5828: PUSH
5829: LD_INT 1
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PPUSH
5836: CALL_OW 72
5840: PPUSH
5841: LD_STRING D1-Sol1-2
5843: PPUSH
5844: LD_STRING 
5846: PPUSH
5847: CALL 12226 0 3
// Say ( JMM , D1-JMM-3 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_STRING D1-JMM-3
5858: PPUSH
5859: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5863: LD_STRING M1
5865: PPUSH
5866: CALL_OW 337
// for i in group do
5870: LD_ADDR_VAR 0 2
5874: PUSH
5875: LD_VAR 0 4
5879: PUSH
5880: FOR_IN
5881: IFFALSE 5900
// ComMoveXY ( i , 95 , 84 ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_INT 95
5890: PPUSH
5891: LD_INT 84
5893: PPUSH
5894: CALL_OW 111
5898: GO 5880
5900: POP
5901: POP
// end ;
5902: LD_VAR 0 1
5906: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5907: LD_INT 7
5909: PPUSH
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: PUSH
5925: LD_INT 1
5927: GREATER
5928: IFFALSE 6578
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: LD_INT 8
5945: PPUSH
5946: LD_INT 22
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 25
5958: PUSH
5959: LD_INT 9
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 70
5974: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
5975: LD_VAR 0 2
5979: PPUSH
5980: LD_INT 96
5982: PPUSH
5983: LD_INT 85
5985: PPUSH
5986: CALL_OW 154
// for i := 1 to 5 do
5990: LD_ADDR_VAR 0 1
5994: PUSH
5995: DOUBLE
5996: LD_INT 1
5998: DEC
5999: ST_TO_ADDR
6000: LD_INT 5
6002: PUSH
6003: FOR_TO
6004: IFFALSE 6023
// AddComTimeShift ( tmp , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
6021: GO 6003
6023: POP
6024: POP
// wait ( 0 0$2 ) ;
6025: LD_INT 70
6027: PPUSH
6028: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6032: LD_EXP 1
6036: PPUSH
6037: LD_STRING D1a-JMM-1
6039: PPUSH
6040: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6044: LD_EXP 3
6048: PPUSH
6049: LD_STRING D1a-Don-1
6051: PPUSH
6052: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 1
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PPUSH
6071: CALL_OW 69
6075: PUSH
6076: FOR_IN
6077: IFFALSE 6096
// ComMoveXY ( i , 109 , 102 ) ;
6079: LD_VAR 0 1
6083: PPUSH
6084: LD_INT 109
6086: PPUSH
6087: LD_INT 102
6089: PPUSH
6090: CALL_OW 111
6094: GO 6076
6096: POP
6097: POP
// Say ( JMM , D1a-JMM-2 ) ;
6098: LD_EXP 1
6102: PPUSH
6103: LD_STRING D1a-JMM-2
6105: PPUSH
6106: CALL_OW 88
// wait ( 0 0$10 ) ;
6110: LD_INT 350
6112: PPUSH
6113: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6117: LD_EXP 1
6121: PPUSH
6122: CALL_OW 310
6126: PPUSH
6127: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6131: LD_EXP 3
6135: PPUSH
6136: LD_STRING D1b-Don-1
6138: PPUSH
6139: CALL_OW 88
// if IsOk ( Donaldson ) then
6143: LD_EXP 3
6147: PPUSH
6148: CALL_OW 302
6152: IFFALSE 6166
// Say ( JMM , D1b-JMM-1 ) ;
6154: LD_EXP 1
6158: PPUSH
6159: LD_STRING D1b-JMM-1
6161: PPUSH
6162: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6166: LD_INT 22
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 26
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 2
6188: PUSH
6189: LD_INT 25
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 4
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 25
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 25
6241: PUSH
6242: LD_INT 8
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: PPUSH
6263: CALL_OW 69
6267: PPUSH
6268: LD_STRING D1b-Sol1-1
6270: PPUSH
6271: LD_STRING 
6273: PPUSH
6274: CALL 12226 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D1b-Don-2
6285: PPUSH
6286: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6290: LD_EXP 1
6294: PPUSH
6295: LD_STRING D1b-JMM-2
6297: PPUSH
6298: CALL_OW 88
// dec := ShowQuery1 ;
6302: LD_ADDR_VAR 0 3
6306: PUSH
6307: CALL 12689 0 0
6311: ST_TO_ADDR
// if dec = 1 then
6312: LD_VAR 0 3
6316: PUSH
6317: LD_INT 1
6319: EQUAL
6320: IFFALSE 6426
// begin Say ( JMM , D2-JMM-1 ) ;
6322: LD_EXP 1
6326: PPUSH
6327: LD_STRING D2-JMM-1
6329: PPUSH
6330: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6334: LD_EXP 15
6338: PPUSH
6339: LD_STRING D2-Pow-1
6341: PPUSH
6342: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6346: LD_EXP 1
6350: PPUSH
6351: LD_STRING D2a-JMM-1
6353: PPUSH
6354: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6358: LD_EXP 15
6362: PPUSH
6363: LD_STRING D2a-Pow-1
6365: PPUSH
6366: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6370: LD_EXP 1
6374: PPUSH
6375: LD_STRING D2a-JMM-2
6377: PPUSH
6378: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6382: LD_EXP 15
6386: PPUSH
6387: LD_STRING D2a-Pow-2
6389: PPUSH
6390: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D2a-JMM-3
6401: PPUSH
6402: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6406: LD_EXP 15
6410: PPUSH
6411: LD_STRING D2a-Pow-3
6413: PPUSH
6414: CALL_OW 94
// secondPass := 2 ;
6418: LD_ADDR_EXP 20
6422: PUSH
6423: LD_INT 2
6425: ST_TO_ADDR
// end ; if dec = 2 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 2
6433: EQUAL
6434: IFFALSE 6528
// begin Say ( JMM , D2-JMM-1 ) ;
6436: LD_EXP 1
6440: PPUSH
6441: LD_STRING D2-JMM-1
6443: PPUSH
6444: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6448: LD_EXP 15
6452: PPUSH
6453: LD_STRING D2-Pow-1
6455: PPUSH
6456: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6460: LD_EXP 1
6464: PPUSH
6465: LD_STRING D2b-JMM-1
6467: PPUSH
6468: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6472: LD_EXP 15
6476: PPUSH
6477: LD_STRING D2b-Pow-1
6479: PPUSH
6480: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6484: LD_EXP 1
6488: PPUSH
6489: LD_STRING D2c-JMM-1
6491: PPUSH
6492: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6496: LD_EXP 15
6500: PPUSH
6501: LD_STRING D2c-Pow-1
6503: PPUSH
6504: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6508: LD_EXP 1
6512: PPUSH
6513: LD_STRING D2c-JMM-2
6515: PPUSH
6516: CALL_OW 88
// secondPass := 2 ;
6520: LD_ADDR_EXP 20
6524: PUSH
6525: LD_INT 2
6527: ST_TO_ADDR
// end ; if dec = 3 then
6528: LD_VAR 0 3
6532: PUSH
6533: LD_INT 3
6535: EQUAL
6536: IFFALSE 6546
// secondPass := 1 ;
6538: LD_ADDR_EXP 20
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// InGameOff ;
6546: CALL_OW 9
// ruAI := 1 ;
6550: LD_ADDR_EXP 34
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6558: LD_INT 1
6560: PPUSH
6561: LD_INT 3
6563: PPUSH
6564: LD_INT 2
6566: PPUSH
6567: LD_INT 1
6569: PPUSH
6570: CALL_OW 80
// SaveForQuickRestart ;
6574: CALL_OW 22
// end ;
6578: PPOPN 3
6580: END
// every 1 1$0 trigger secondPass = 2 do
6581: LD_EXP 20
6585: PUSH
6586: LD_INT 2
6588: EQUAL
6589: IFFALSE 6809
6591: GO 6593
6593: DISABLE
// begin PowellSupport1 ;
6594: CALL 1985 0 0
// DialogueOn ;
6598: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6602: LD_EXP 1
6606: PPUSH
6607: LD_STRING DC1-JMM-1
6609: PPUSH
6610: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6614: LD_EXP 15
6618: PPUSH
6619: LD_STRING DC1-Pow-1
6621: PPUSH
6622: CALL_OW 94
// DialogueOff ;
6626: CALL_OW 7
// wait ( 3 3$0 ) ;
6630: LD_INT 6300
6632: PPUSH
6633: CALL_OW 67
// PowellSupport2 ;
6637: CALL 2466 0 0
// DialogueOn ;
6641: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6645: LD_EXP 1
6649: PPUSH
6650: LD_STRING DC2-JMM-1
6652: PPUSH
6653: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6657: LD_EXP 15
6661: PPUSH
6662: LD_STRING DC2-Pow-1
6664: PPUSH
6665: CALL_OW 94
// DialogueOff ;
6669: CALL_OW 7
// wait ( 3 3$00 ) ;
6673: LD_INT 6300
6675: PPUSH
6676: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6680: LD_INT 35
6682: PPUSH
6683: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 30
6702: PUSH
6703: LD_INT 0
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: PUSH
6734: LD_INT 11
6736: PPUSH
6737: LD_INT 22
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PPUSH
6747: CALL_OW 70
6751: NOT
6752: AND
6753: IFFALSE 6680
// wait ( 0 0$10 ) ;
6755: LD_INT 350
6757: PPUSH
6758: CALL_OW 67
// Legion ;
6762: CALL 6810 0 0
// wait ( 5 5$0 ) ;
6766: LD_INT 10500
6768: PPUSH
6769: CALL_OW 67
// PowellSupport3 ;
6773: CALL 3079 0 0
// DialogueOn ;
6777: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6781: LD_EXP 15
6785: PPUSH
6786: LD_STRING DC3-Pow-1
6788: PPUSH
6789: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6793: LD_EXP 1
6797: PPUSH
6798: LD_STRING DC3-JMM-1
6800: PPUSH
6801: CALL_OW 88
// DialogueOff ;
6805: CALL_OW 7
// end ;
6809: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
6826: PPUSH
6827: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: ST_TO_ADDR
// crates := 0 ;
6891: LD_ADDR_VAR 0 8
6895: PUSH
6896: LD_INT 0
6898: ST_TO_ADDR
// oil := 0 ;
6899: LD_ADDR_VAR 0 9
6903: PUSH
6904: LD_INT 0
6906: ST_TO_ADDR
// siberite := 0 ;
6907: LD_ADDR_VAR 0 10
6911: PUSH
6912: LD_INT 0
6914: ST_TO_ADDR
// payForNeutral := false ;
6915: LD_ADDR_VAR 0 13
6919: PUSH
6920: LD_INT 0
6922: ST_TO_ADDR
// payForHelp := false ;
6923: LD_ADDR_VAR 0 14
6927: PUSH
6928: LD_INT 0
6930: ST_TO_ADDR
// for i in tmp do
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: LD_VAR 0 5
6940: PUSH
6941: FOR_IN
6942: IFFALSE 7033
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6944: LD_ADDR_VAR 0 8
6948: PUSH
6949: LD_VAR 0 8
6953: PUSH
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 274
6963: PPUSH
6964: LD_INT 1
6966: PPUSH
6967: CALL_OW 275
6971: PLUS
6972: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6973: LD_ADDR_VAR 0 9
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 274
6992: PPUSH
6993: LD_INT 2
6995: PPUSH
6996: CALL_OW 275
7000: PLUS
7001: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7002: LD_ADDR_VAR 0 10
7006: PUSH
7007: LD_VAR 0 10
7011: PUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: CALL_OW 274
7021: PPUSH
7022: LD_INT 3
7024: PPUSH
7025: CALL_OW 275
7029: PLUS
7030: ST_TO_ADDR
// end ;
7031: GO 6941
7033: POP
7034: POP
// PrepareKurt ;
7035: CALL 4572 0 0
// if not Kurt then
7039: LD_EXP 17
7043: NOT
7044: IFFALSE 7048
// exit ;
7046: GO 9167
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7048: LD_EXP 18
7052: PPUSH
7053: LD_INT 144
7055: PPUSH
7056: LD_INT 111
7058: PPUSH
7059: CALL_OW 111
// wait ( 0 0$2 ) ;
7063: LD_INT 70
7065: PPUSH
7066: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7070: LD_INT 167
7072: PPUSH
7073: LD_INT 121
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: LD_INT 10
7081: NEG
7082: PPUSH
7083: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7087: LD_EXP 17
7091: PPUSH
7092: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7096: LD_EXP 17
7100: PPUSH
7101: CALL_OW 87
// wait ( 0 0$1 ) ;
7105: LD_INT 35
7107: PPUSH
7108: CALL_OW 67
// DialogueOn ;
7112: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7116: LD_INT 22
7118: PUSH
7119: LD_INT 1
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 26
7128: PUSH
7129: LD_INT 1
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 2
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 25
7161: PUSH
7162: LD_INT 3
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 69
7217: PPUSH
7218: LD_STRING D3-Sol1-1
7220: PPUSH
7221: LD_STRING 
7223: PPUSH
7224: CALL 12226 0 3
// if KurtStatus then
7228: LD_EXP 19
7232: IFFALSE 7332
// begin Say ( Kurt , D3-Kurt-1 ) ;
7234: LD_EXP 17
7238: PPUSH
7239: LD_STRING D3-Kurt-1
7241: PPUSH
7242: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7246: LD_EXP 1
7250: PPUSH
7251: LD_STRING D3-JMM-1
7253: PPUSH
7254: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7258: LD_EXP 17
7262: PPUSH
7263: LD_STRING D3-Kurt-2
7265: PPUSH
7266: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7270: LD_EXP 1
7274: PPUSH
7275: LD_STRING D3-JMM-2
7277: PPUSH
7278: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7282: LD_EXP 17
7286: PPUSH
7287: LD_STRING D3-Kurt-4
7289: PPUSH
7290: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7294: LD_EXP 1
7298: PPUSH
7299: LD_STRING D3-JMM-4
7301: PPUSH
7302: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7306: LD_EXP 17
7310: PPUSH
7311: LD_STRING D3-Kurt-5
7313: PPUSH
7314: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7318: LD_EXP 17
7322: PPUSH
7323: LD_STRING D3-Kurt-5a
7325: PPUSH
7326: CALL_OW 88
// end else
7330: GO 7428
// begin Say ( Kurt , D3-Kurt-1 ) ;
7332: LD_EXP 17
7336: PPUSH
7337: LD_STRING D3-Kurt-1
7339: PPUSH
7340: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7344: LD_EXP 1
7348: PPUSH
7349: LD_STRING D3-JMM-1
7351: PPUSH
7352: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7356: LD_EXP 17
7360: PPUSH
7361: LD_STRING D3-Kurt-3
7363: PPUSH
7364: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7368: LD_EXP 1
7372: PPUSH
7373: LD_STRING D3-JMM-3
7375: PPUSH
7376: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7380: LD_EXP 17
7384: PPUSH
7385: LD_STRING D3-Kurt-4
7387: PPUSH
7388: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7392: LD_EXP 1
7396: PPUSH
7397: LD_STRING D3-JMM-4
7399: PPUSH
7400: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7404: LD_EXP 17
7408: PPUSH
7409: LD_STRING D3-Kurt-5
7411: PPUSH
7412: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7416: LD_EXP 17
7420: PPUSH
7421: LD_STRING D3-Kurt-5b
7423: PPUSH
7424: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7428: LD_VAR 0 8
7432: PUSH
7433: LD_INT 120
7435: PUSH
7436: LD_INT 60
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_EXP 19
7447: PUSH
7448: LD_INT 1
7450: PLUS
7451: ARRAY
7452: GREATEREQUAL
7453: PUSH
7454: LD_VAR 0 10
7458: PUSH
7459: LD_INT 120
7461: PUSH
7462: LD_INT 60
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_EXP 19
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ARRAY
7478: GREATEREQUAL
7479: AND
7480: IFFALSE 7532
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_STRING Q2
7489: PUSH
7490: LD_STRING Q2K
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_EXP 19
7501: PUSH
7502: LD_INT 1
7504: PLUS
7505: ARRAY
7506: PPUSH
7507: LD_INT 1
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 98
7529: ST_TO_ADDR
7530: GO 7576
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_STRING Q2
7539: PUSH
7540: LD_STRING Q2K
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_EXP 19
7551: PUSH
7552: LD_INT 1
7554: PLUS
7555: ARRAY
7556: PPUSH
7557: LD_INT 1
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 98
7575: ST_TO_ADDR
// if dec1 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7618
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7586: LD_EXP 1
7590: PPUSH
7591: LD_STRING D3Ka-JMM-1
7593: PPUSH
7594: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7598: LD_EXP 17
7602: PPUSH
7603: LD_STRING D3Ka-Kurt-1
7605: PPUSH
7606: CALL_OW 88
// warWithLegion = 1 ;
7610: LD_ADDR_EXP 23
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// end ; if dec1 = 2 then
7618: LD_VAR 0 3
7622: PUSH
7623: LD_INT 2
7625: EQUAL
7626: IFFALSE 7710
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7628: LD_EXP 1
7632: PPUSH
7633: LD_STRING D3Kb-JMM-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7640: LD_EXP 17
7644: PPUSH
7645: LD_STRING D3Kb-Kurt-1
7647: PPUSH
7648: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7652: LD_ADDR_VAR 0 11
7656: PUSH
7657: LD_INT 120
7659: PUSH
7660: LD_INT 60
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_EXP 19
7671: PUSH
7672: LD_INT 1
7674: PLUS
7675: ARRAY
7676: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7677: LD_ADDR_VAR 0 12
7681: PUSH
7682: LD_INT 120
7684: PUSH
7685: LD_INT 60
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_EXP 19
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: ARRAY
7701: ST_TO_ADDR
// payForNeutral := true ;
7702: LD_ADDR_VAR 0 13
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// end ; if dec1 = 3 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 3
7717: EQUAL
7718: IFFALSE 7953
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7720: LD_EXP 1
7724: PPUSH
7725: LD_STRING D3Kc1-JMM-1
7727: PPUSH
7728: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7732: LD_EXP 17
7736: PPUSH
7737: LD_STRING D3Kc1-Kurt-1
7739: PPUSH
7740: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7744: LD_EXP 1
7748: PPUSH
7749: LD_STRING D3Kc1-JMM-2
7751: PPUSH
7752: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7756: LD_EXP 17
7760: PPUSH
7761: LD_STRING D3Kc1-Kurt-2
7763: PPUSH
7764: CALL_OW 88
// askSiberite = 1 ;
7768: LD_ADDR_EXP 25
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_STRING Q2b
7783: PPUSH
7784: LD_INT 1
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 98
7802: ST_TO_ADDR
// if dec2 = 1 then
7803: LD_VAR 0 4
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: IFFALSE 7845
// begin Say ( JMM , D4a-JMM-1 ) ;
7813: LD_EXP 1
7817: PPUSH
7818: LD_STRING D4a-JMM-1
7820: PPUSH
7821: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7825: LD_EXP 17
7829: PPUSH
7830: LD_STRING D4b-Kurt-1
7832: PPUSH
7833: CALL_OW 88
// warWithLegion = 1 ;
7837: LD_ADDR_EXP 23
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// end ; if dec2 = 2 then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7887
// begin Say ( JMM , D4b-JMM-1 ) ;
7855: LD_EXP 1
7859: PPUSH
7860: LD_STRING D4b-JMM-1
7862: PPUSH
7863: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7867: LD_EXP 17
7871: PPUSH
7872: LD_STRING D4b-Kurt-1
7874: PPUSH
7875: CALL_OW 88
// warWithLegion = 1 ;
7879: LD_ADDR_EXP 23
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// end ; if dec2 = 3 then
7887: LD_VAR 0 4
7891: PUSH
7892: LD_INT 3
7894: EQUAL
7895: IFFALSE 7953
// begin Say ( JMM , D4c-JMM-1 ) ;
7897: LD_EXP 1
7901: PPUSH
7902: LD_STRING D4c-JMM-1
7904: PPUSH
7905: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7909: LD_EXP 17
7913: PPUSH
7914: LD_STRING D4c-Kurt-1
7916: PPUSH
7917: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7921: LD_EXP 1
7925: PPUSH
7926: LD_STRING D4c-JMM-2
7928: PPUSH
7929: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7933: LD_EXP 17
7937: PPUSH
7938: LD_STRING D4c-Kurt-2
7940: PPUSH
7941: CALL_OW 88
// fakeInfo = 1 ;
7945: LD_ADDR_EXP 24
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 4
7960: EQUAL
7961: IFFALSE 9023
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7963: LD_EXP 1
7967: PPUSH
7968: LD_STRING D3Kd-JMM-1
7970: PPUSH
7971: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
7975: LD_VAR 0 8
7979: PUSH
7980: LD_INT 200
7982: PUSH
7983: LD_INT 120
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_EXP 19
7994: PUSH
7995: LD_INT 1
7997: PLUS
7998: ARRAY
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 10
8005: PUSH
8006: LD_INT 200
8008: PUSH
8009: LD_INT 120
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_EXP 19
8020: PUSH
8021: LD_INT 1
8023: PLUS
8024: ARRAY
8025: GREATEREQUAL
8026: AND
8027: IFFALSE 8079
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8029: LD_ADDR_VAR 0 4
8033: PUSH
8034: LD_STRING Q2a
8036: PUSH
8037: LD_STRING Q2aK
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_EXP 19
8048: PUSH
8049: LD_INT 1
8051: PLUS
8052: ARRAY
8053: PPUSH
8054: LD_INT 1
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: LD_INT 3
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 98
8076: ST_TO_ADDR
8077: GO 8243
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8079: LD_VAR 0 8
8083: PUSH
8084: LD_INT 120
8086: PUSH
8087: LD_INT 60
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_EXP 19
8098: PUSH
8099: LD_INT 1
8101: PLUS
8102: ARRAY
8103: GREATEREQUAL
8104: PUSH
8105: LD_VAR 0 10
8109: PUSH
8110: LD_INT 120
8112: PUSH
8113: LD_INT 60
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_EXP 19
8124: PUSH
8125: LD_INT 1
8127: PLUS
8128: ARRAY
8129: GREATEREQUAL
8130: AND
8131: IFFALSE 8179
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_STRING Q2a
8140: PUSH
8141: LD_STRING Q2aK
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_EXP 19
8152: PUSH
8153: LD_INT 1
8155: PLUS
8156: ARRAY
8157: PPUSH
8158: LD_INT 1
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: LD_INT 4
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 98
8176: ST_TO_ADDR
8177: GO 8243
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8179: LD_STRING Q2d
8181: PUSH
8182: LD_STRING Q2dK
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_EXP 19
8193: PUSH
8194: LD_INT 1
8196: PLUS
8197: ARRAY
8198: PPUSH
8199: CALL_OW 97
// dec2 := 0 ;
8203: LD_ADDR_VAR 0 4
8207: PUSH
8208: LD_INT 0
8210: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8211: LD_EXP 1
8215: PPUSH
8216: LD_STRING D3Kc1-JMM-1
8218: PPUSH
8219: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8223: LD_EXP 17
8227: PPUSH
8228: LD_STRING D3Kc2-Kurt-1
8230: PPUSH
8231: CALL_OW 88
// warWithLegion := 1 ;
8235: LD_ADDR_EXP 23
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// end ; if dec2 = 1 then
8243: LD_VAR 0 4
8247: PUSH
8248: LD_INT 1
8250: EQUAL
8251: IFFALSE 8285
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8253: LD_EXP 1
8257: PPUSH
8258: LD_STRING D5Ka-JMM-1
8260: PPUSH
8261: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8265: LD_EXP 17
8269: PPUSH
8270: LD_STRING D5Ka-Kurt-1
8272: PPUSH
8273: CALL_OW 88
// warWithLegion = 1 ;
8277: LD_ADDR_EXP 23
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// end ; if dec2 = 2 then
8285: LD_VAR 0 4
8289: PUSH
8290: LD_INT 2
8292: EQUAL
8293: IFFALSE 8377
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8295: LD_EXP 1
8299: PPUSH
8300: LD_STRING D3Kb-JMM-1
8302: PPUSH
8303: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8307: LD_EXP 17
8311: PPUSH
8312: LD_STRING D3Kb-Kurt-1
8314: PPUSH
8315: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8319: LD_ADDR_VAR 0 11
8323: PUSH
8324: LD_INT 120
8326: PUSH
8327: LD_INT 60
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_EXP 19
8338: PUSH
8339: LD_INT 1
8341: PLUS
8342: ARRAY
8343: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8344: LD_ADDR_VAR 0 12
8348: PUSH
8349: LD_INT 120
8351: PUSH
8352: LD_INT 60
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_EXP 19
8363: PUSH
8364: LD_INT 1
8366: PLUS
8367: ARRAY
8368: ST_TO_ADDR
// payForNeutral := true ;
8369: LD_ADDR_VAR 0 13
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// end ; if dec2 = 3 then
8377: LD_VAR 0 4
8381: PUSH
8382: LD_INT 3
8384: EQUAL
8385: IFFALSE 8469
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8387: LD_EXP 1
8391: PPUSH
8392: LD_STRING D3Ke-JMM-1
8394: PPUSH
8395: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8399: LD_EXP 17
8403: PPUSH
8404: LD_STRING D3Ke-Kurt-1
8406: PPUSH
8407: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8411: LD_ADDR_VAR 0 11
8415: PUSH
8416: LD_INT 200
8418: PUSH
8419: LD_INT 120
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_EXP 19
8430: PUSH
8431: LD_INT 1
8433: PLUS
8434: ARRAY
8435: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8436: LD_ADDR_VAR 0 12
8440: PUSH
8441: LD_INT 200
8443: PUSH
8444: LD_INT 120
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_EXP 19
8455: PUSH
8456: LD_INT 1
8458: PLUS
8459: ARRAY
8460: ST_TO_ADDR
// payForHelp := true ;
8461: LD_ADDR_VAR 0 14
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// end ; if dec2 = 4 then
8469: LD_VAR 0 4
8473: PUSH
8474: LD_INT 4
8476: EQUAL
8477: IFFALSE 8712
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8479: LD_EXP 1
8483: PPUSH
8484: LD_STRING D3Kc1-JMM-1
8486: PPUSH
8487: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8491: LD_EXP 17
8495: PPUSH
8496: LD_STRING D3Kc1-Kurt-1
8498: PPUSH
8499: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8503: LD_EXP 1
8507: PPUSH
8508: LD_STRING D3Kc1-JMM-2
8510: PPUSH
8511: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8515: LD_EXP 17
8519: PPUSH
8520: LD_STRING D3Kc1-Kurt-2
8522: PPUSH
8523: CALL_OW 88
// askSiberite = 1 ;
8527: LD_ADDR_EXP 25
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8535: LD_ADDR_VAR 0 4
8539: PUSH
8540: LD_STRING Q2b
8542: PPUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 98
8561: ST_TO_ADDR
// if dec2 = 1 then
8562: LD_VAR 0 4
8566: PUSH
8567: LD_INT 1
8569: EQUAL
8570: IFFALSE 8604
// begin Say ( JMM , D4a-JMM-1 ) ;
8572: LD_EXP 1
8576: PPUSH
8577: LD_STRING D4a-JMM-1
8579: PPUSH
8580: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING D4b-Kurt-1
8591: PPUSH
8592: CALL_OW 88
// warWithLegion = 1 ;
8596: LD_ADDR_EXP 23
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// end ; if dec2 = 2 then
8604: LD_VAR 0 4
8608: PUSH
8609: LD_INT 2
8611: EQUAL
8612: IFFALSE 8646
// begin Say ( JMM , D4b-JMM-1 ) ;
8614: LD_EXP 1
8618: PPUSH
8619: LD_STRING D4b-JMM-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D4b-Kurt-1
8633: PPUSH
8634: CALL_OW 88
// warWithLegion = 1 ;
8638: LD_ADDR_EXP 23
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// end ; if dec2 = 3 then
8646: LD_VAR 0 4
8650: PUSH
8651: LD_INT 3
8653: EQUAL
8654: IFFALSE 8712
// begin Say ( JMM , D4c-JMM-1 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D4c-JMM-1
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D4c-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8680: LD_EXP 1
8684: PPUSH
8685: LD_STRING D4c-JMM-2
8687: PPUSH
8688: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8692: LD_EXP 17
8696: PPUSH
8697: LD_STRING D4c-Kurt-2
8699: PPUSH
8700: CALL_OW 88
// fakeInfo = 1 ;
8704: LD_ADDR_EXP 24
8708: PUSH
8709: LD_INT 1
8711: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8712: LD_VAR 0 13
8716: PUSH
8717: LD_VAR 0 14
8721: OR
8722: IFFALSE 9023
// begin for i in tmp do
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 5
8733: PUSH
8734: FOR_IN
8735: IFFALSE 9021
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8737: LD_ADDR_VAR 0 6
8741: PUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: CALL_OW 274
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 275
8759: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8760: LD_ADDR_VAR 0 7
8764: PUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 274
8774: PPUSH
8775: LD_INT 3
8777: PPUSH
8778: CALL_OW 275
8782: ST_TO_ADDR
// if cr then
8783: LD_VAR 0 11
8787: IFFALSE 8901
// begin if tmp2 and tmp2 < cr then
8789: LD_VAR 0 6
8793: PUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_VAR 0 11
8803: LESS
8804: AND
8805: IFFALSE 8853
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 274
8816: PPUSH
8817: LD_INT 1
8819: PPUSH
8820: LD_VAR 0 11
8824: PUSH
8825: LD_VAR 0 6
8829: MINUS
8830: PPUSH
8831: CALL_OW 277
// cr := cr - tmp2 ;
8835: LD_ADDR_VAR 0 11
8839: PUSH
8840: LD_VAR 0 11
8844: PUSH
8845: LD_VAR 0 6
8849: MINUS
8850: ST_TO_ADDR
// end else
8851: GO 8901
// if tmp2 > cr then
8853: LD_VAR 0 6
8857: PUSH
8858: LD_VAR 0 11
8862: GREATER
8863: IFFALSE 8901
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 274
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: LD_VAR 0 6
8882: PUSH
8883: LD_VAR 0 11
8887: MINUS
8888: PPUSH
8889: CALL_OW 277
// cr := 0 ;
8893: LD_ADDR_VAR 0 11
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// end ; end ; if sb then
8901: LD_VAR 0 12
8905: IFFALSE 9019
// begin if tmp3 and tmp3 < sb then
8907: LD_VAR 0 7
8911: PUSH
8912: LD_VAR 0 7
8916: PUSH
8917: LD_VAR 0 12
8921: LESS
8922: AND
8923: IFFALSE 8971
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8925: LD_VAR 0 2
8929: PPUSH
8930: CALL_OW 274
8934: PPUSH
8935: LD_INT 3
8937: PPUSH
8938: LD_VAR 0 12
8942: PUSH
8943: LD_VAR 0 7
8947: MINUS
8948: PPUSH
8949: CALL_OW 277
// sb := sb - tmp3 ;
8953: LD_ADDR_VAR 0 12
8957: PUSH
8958: LD_VAR 0 12
8962: PUSH
8963: LD_VAR 0 7
8967: MINUS
8968: ST_TO_ADDR
// end else
8969: GO 9019
// if tmp3 > sb then
8971: LD_VAR 0 7
8975: PUSH
8976: LD_VAR 0 12
8980: GREATER
8981: IFFALSE 9019
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 274
8992: PPUSH
8993: LD_INT 3
8995: PPUSH
8996: LD_VAR 0 7
9000: PUSH
9001: LD_VAR 0 12
9005: MINUS
9006: PPUSH
9007: CALL_OW 277
// sb := 0 ;
9011: LD_ADDR_VAR 0 12
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// end ; end ; end ;
9019: GO 8734
9021: POP
9022: POP
// end ; end ; DialogueOff ;
9023: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9027: LD_INT 167
9029: PPUSH
9030: LD_INT 121
9032: PPUSH
9033: LD_INT 1
9035: PPUSH
9036: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9040: LD_EXP 17
9044: PPUSH
9045: LD_EXP 18
9049: PPUSH
9050: CALL_OW 120
// wait ( 0 0$1 ) ;
9054: LD_INT 35
9056: PPUSH
9057: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9061: LD_EXP 18
9065: PPUSH
9066: LD_INT 4
9068: PPUSH
9069: CALL_OW 113
// wait ( 0 0$3 ) ;
9073: LD_INT 105
9075: PPUSH
9076: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9080: LD_EXP 17
9084: PPUSH
9085: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9089: LD_EXP 18
9093: PPUSH
9094: CALL_OW 64
// wait ( 0 0$3 ) ;
9098: LD_INT 105
9100: PPUSH
9101: CALL_OW 67
// if payForHelp then
9105: LD_VAR 0 14
9109: IFFALSE 9167
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9111: LD_INT 36
9113: PPUSH
9114: LD_INT 57
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9124: LD_INT 51
9126: PPUSH
9127: LD_INT 63
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9137: LD_INT 93
9139: PPUSH
9140: LD_INT 65
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9150: LD_INT 42
9152: PPUSH
9153: LD_INT 12
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 244
// PrepareLegionForPlayer ;
9163: CALL 4775 0 0
// end ; end ;
9167: LD_VAR 0 1
9171: RET
// every 0 0$10 trigger warWithLegion = 1 do
9172: LD_EXP 23
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: IFFALSE 9196
9182: GO 9184
9184: DISABLE
// begin wait ( 0 0$30 ) ;
9185: LD_INT 1050
9187: PPUSH
9188: CALL_OW 67
// PrepareAttackLegion ;
9192: CALL 5416 0 0
// end ;
9196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9197: LD_INT 120
9199: PUSH
9200: LD_INT 17
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: EMPTY
9211: LIST
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PPUSH
9217: CALL_OW 69
9221: IFFALSE 9366
9223: GO 9225
9225: DISABLE
9226: LD_INT 0
9228: PPUSH
// begin enable ;
9229: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_INT 120
9237: PUSH
9238: LD_INT 17
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 52
9247: PUSH
9248: EMPTY
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PPUSH
9255: CALL_OW 69
9259: PUSH
9260: FOR_IN
9261: IFFALSE 9364
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL 80102 0 1
9272: PUSH
9273: LD_INT 4
9275: ARRAY
9276: PUSH
9277: LD_INT 0
9279: EQUAL
9280: PUSH
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 255
9290: PUSH
9291: LD_INT 1
9293: EQUAL
9294: AND
9295: IFFALSE 9309
// SetSide ( i , 4 ) ;
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_INT 4
9304: PPUSH
9305: CALL_OW 235
// if GetSide ( i ) = 4 then
9309: LD_VAR 0 1
9313: PPUSH
9314: CALL_OW 255
9318: PUSH
9319: LD_INT 4
9321: EQUAL
9322: IFFALSE 9362
// if not IsInArea ( i , PlayerSpawn ) then
9324: LD_VAR 0 1
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: CALL_OW 308
9336: NOT
9337: IFFALSE 9353
// ComMoveToArea ( i , PlayerSpawn ) else
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 113
9351: GO 9362
// RemoveUnit ( i ) ;
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 64
// end ;
9362: GO 9260
9364: POP
9365: POP
// end ;
9366: PPOPN 1
9368: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9369: LD_EXP 20
9373: PUSH
9374: LD_INT 1
9376: EQUAL
9377: PUSH
9378: LD_INT 12
9380: PPUSH
9381: LD_INT 22
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 101
9393: PUSH
9394: LD_INT 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 21
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 70
9420: AND
9421: IFFALSE 9970
9423: GO 9425
9425: DISABLE
9426: LD_INT 0
9428: PPUSH
9429: PPUSH
9430: PPUSH
// begin DialogueOn ;
9431: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9444: LD_INT 22
9446: PUSH
9447: LD_INT 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 26
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 25
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 25
9519: PUSH
9520: LD_INT 8
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: PPUSH
9541: CALL_OW 69
9545: PPUSH
9546: LD_STRING DT1-Sol1-1
9548: PPUSH
9549: LD_STRING DT1-FSol1-1
9551: PPUSH
9552: CALL 12226 0 3
// dec := ShowQuery2 ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: CALL 12710 0 0
9565: ST_TO_ADDR
// if dec = 1 then
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 1
9573: EQUAL
9574: IFFALSE 9680
// begin Say ( JMM , D2-JMM-1 ) ;
9576: LD_EXP 1
9580: PPUSH
9581: LD_STRING D2-JMM-1
9583: PPUSH
9584: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9588: LD_EXP 15
9592: PPUSH
9593: LD_STRING D2-Pow-1
9595: PPUSH
9596: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9600: LD_EXP 1
9604: PPUSH
9605: LD_STRING D2a-JMM-1
9607: PPUSH
9608: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9612: LD_EXP 15
9616: PPUSH
9617: LD_STRING D2a-Pow-1
9619: PPUSH
9620: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9624: LD_EXP 1
9628: PPUSH
9629: LD_STRING D2a-JMM-2
9631: PPUSH
9632: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9636: LD_EXP 15
9640: PPUSH
9641: LD_STRING D2a-Pow-2
9643: PPUSH
9644: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9648: LD_EXP 1
9652: PPUSH
9653: LD_STRING D2a-JMM-3
9655: PPUSH
9656: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9660: LD_EXP 15
9664: PPUSH
9665: LD_STRING D2a-Pow-3
9667: PPUSH
9668: CALL_OW 94
// secondPass := 2 ;
9672: LD_ADDR_EXP 20
9676: PUSH
9677: LD_INT 2
9679: ST_TO_ADDR
// end ; if dec = 2 then
9680: LD_VAR 0 3
9684: PUSH
9685: LD_INT 2
9687: EQUAL
9688: IFFALSE 9782
// begin Say ( JMM , D2-JMM-1 ) ;
9690: LD_EXP 1
9694: PPUSH
9695: LD_STRING D2-JMM-1
9697: PPUSH
9698: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9702: LD_EXP 15
9706: PPUSH
9707: LD_STRING D2-Pow-1
9709: PPUSH
9710: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9714: LD_EXP 1
9718: PPUSH
9719: LD_STRING D2b-JMM-1
9721: PPUSH
9722: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9726: LD_EXP 15
9730: PPUSH
9731: LD_STRING D2b-Pow-1
9733: PPUSH
9734: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9738: LD_EXP 1
9742: PPUSH
9743: LD_STRING D2c-JMM-1
9745: PPUSH
9746: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9750: LD_EXP 15
9754: PPUSH
9755: LD_STRING D2c-Pow-1
9757: PPUSH
9758: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9762: LD_EXP 1
9766: PPUSH
9767: LD_STRING D2c-JMM-2
9769: PPUSH
9770: CALL_OW 88
// secondPass := 2 ;
9774: LD_ADDR_EXP 20
9778: PUSH
9779: LD_INT 2
9781: ST_TO_ADDR
// end ; DialogueOff ;
9782: CALL_OW 7
// if secondPass = 2 then
9786: LD_EXP 20
9790: PUSH
9791: LD_INT 2
9793: EQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 9970
// Query ( HelpRequest ) ;
9798: LD_STRING HelpRequest
9800: PPUSH
9801: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9805: LD_INT 27
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9815: LD_INT 35
9817: PPUSH
9818: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_INT 27
9829: PPUSH
9830: CALL_OW 308
9834: IFFALSE 9815
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9836: LD_INT 27
9838: PPUSH
9839: LD_INT 0
9841: PPUSH
9842: CALL_OW 424
// DialogueOn ;
9846: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9850: LD_EXP 1
9854: PPUSH
9855: LD_STRING D2-JMM-1
9857: PPUSH
9858: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9862: LD_EXP 15
9866: PPUSH
9867: LD_STRING D2-Pow-1
9869: PPUSH
9870: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9874: LD_EXP 1
9878: PPUSH
9879: LD_STRING D2b-JMM-1
9881: PPUSH
9882: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9886: LD_EXP 15
9890: PPUSH
9891: LD_STRING D2a-Pow-2
9893: PPUSH
9894: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9898: LD_EXP 1
9902: PPUSH
9903: LD_STRING D2a-JMM-3
9905: PPUSH
9906: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9910: LD_EXP 15
9914: PPUSH
9915: LD_STRING D2a-Pow-3
9917: PPUSH
9918: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9922: LD_EXP 1
9926: PPUSH
9927: LD_STRING D2c-JMM-1
9929: PPUSH
9930: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9934: LD_EXP 15
9938: PPUSH
9939: LD_STRING D2c-Pow-1
9941: PPUSH
9942: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9946: LD_EXP 1
9950: PPUSH
9951: LD_STRING D2c-JMM-2
9953: PPUSH
9954: CALL_OW 88
// DialogueOff ;
9958: CALL_OW 7
// secondPass := 2 ;
9962: LD_ADDR_EXP 20
9966: PUSH
9967: LD_INT 2
9969: ST_TO_ADDR
// end ;
9970: PPOPN 3
9972: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9973: LD_EXP 21
9977: PUSH
9978: LD_INT 1
9980: EQUAL
9981: PUSH
9982: LD_INT 11
9984: PPUSH
9985: LD_INT 22
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 70
9999: AND
10000: IFFALSE 10481
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10008: LD_ADDR_VAR 0 1
10012: PUSH
10013: LD_INT 11
10015: PPUSH
10016: LD_INT 22
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 70
10030: ST_TO_ADDR
// if not vehicles then
10031: LD_VAR 0 1
10035: NOT
10036: IFFALSE 10040
// exit ;
10038: GO 10481
// repeat wait ( 0 0$1 ) ;
10040: LD_INT 35
10042: PPUSH
10043: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10047: LD_VAR 0 1
10051: PPUSH
10052: LD_INT 101
10054: PUSH
10055: LD_INT 1
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 72
10066: IFFALSE 10040
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10068: LD_VAR 0 1
10072: PPUSH
10073: LD_INT 101
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 72
10087: PUSH
10088: LD_INT 1
10090: ARRAY
10091: PPUSH
10092: CALL_OW 87
// DialogueOn ;
10096: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10100: LD_INT 22
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 26
10112: PUSH
10113: LD_INT 1
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 1
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 25
10155: PUSH
10156: LD_INT 3
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 25
10165: PUSH
10166: LD_INT 4
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 25
10185: PUSH
10186: LD_INT 8
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 69
10212: PPUSH
10213: LD_STRING DT1-Sol1-1
10215: PPUSH
10216: LD_STRING DT1-FSol1-1
10218: PPUSH
10219: CALL 12226 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10223: LD_EXP 1
10227: PPUSH
10228: LD_STRING DT1-JMM-1
10230: PPUSH
10231: CALL_OW 88
// DialogueOff ;
10235: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10239: LD_INT 175
10241: PPUSH
10242: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10246: LD_INT 11
10248: PPUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 50
10261: PUSH
10262: EMPTY
10263: LIST
10264: PUSH
10265: LD_INT 2
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 70
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: PUSH
10307: LD_EXP 22
10311: PUSH
10312: LD_INT 2
10314: GREATER
10315: AND
10316: IFFALSE 10239
// DialogueOn ;
10318: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10322: LD_EXP 1
10326: PPUSH
10327: LD_STRING DT1a-JMM-1
10329: PPUSH
10330: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10334: LD_INT 22
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 26
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 23
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 25
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 25
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 3
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 25
10409: PUSH
10410: LD_INT 5
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 25
10419: PUSH
10420: LD_INT 8
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: PPUSH
10447: LD_STRING DT1a-Sol1-1
10449: PPUSH
10450: LD_STRING DT1a-FSol1-1
10452: PPUSH
10453: CALL 12226 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10457: LD_EXP 1
10461: PPUSH
10462: LD_STRING DT1a-JMM-2
10464: PPUSH
10465: CALL_OW 88
// DialogueOff ;
10469: CALL_OW 7
// vehicleTeleported := 2 ;
10473: LD_ADDR_EXP 21
10477: PUSH
10478: LD_INT 2
10480: ST_TO_ADDR
// end ;
10481: PPOPN 1
10483: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10484: LD_EXP 21
10488: PUSH
10489: LD_INT 3
10491: EQUAL
10492: PUSH
10493: LD_INT 11
10495: PPUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 101
10508: PUSH
10509: LD_INT 1
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 70
10524: AND
10525: IFFALSE 10810
10527: GO 10529
10529: DISABLE
10530: LD_INT 0
10532: PPUSH
10533: PPUSH
10534: PPUSH
// begin wait ( 0 0$0.3 ) ;
10535: LD_INT 10
10537: PPUSH
10538: CALL_OW 67
// DialogueOn ;
10542: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10546: LD_ADDR_VAR 0 3
10550: PUSH
10551: LD_INT 22
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 23
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 26
10573: PUSH
10574: LD_INT 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 25
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 4
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 5
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 8
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 69
10663: PPUSH
10664: LD_STRING DT2-Sol1-1
10666: PPUSH
10667: LD_STRING DT2-FSol1-1
10669: PPUSH
10670: CALL 12226 0 3
10674: ST_TO_ADDR
// DialogueOff ;
10675: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10679: LD_INT 175
10681: PPUSH
10682: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10686: LD_INT 11
10688: PPUSH
10689: LD_INT 22
10691: PUSH
10692: LD_INT 3
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 50
10701: PUSH
10702: EMPTY
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PPUSH
10709: CALL_OW 70
10713: NOT
10714: IFFALSE 10679
// wait ( 0 0$2 ) ;
10716: LD_INT 70
10718: PPUSH
10719: CALL_OW 67
// vehicleTeleported := 4 ;
10723: LD_ADDR_EXP 21
10727: PUSH
10728: LD_INT 4
10730: ST_TO_ADDR
// DialogueOn ;
10731: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10735: LD_EXP 1
10739: PPUSH
10740: LD_STRING DT2a-JMM-1
10742: PPUSH
10743: CALL_OW 88
// if speaker then
10747: LD_VAR 0 3
10751: IFFALSE 10794
// if GetSex ( speaker ) = 1 then
10753: LD_VAR 0 3
10757: PPUSH
10758: CALL_OW 258
10762: PUSH
10763: LD_INT 1
10765: EQUAL
10766: IFFALSE 10782
// Say ( speaker , DT2a-Sol1-1 ) else
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_STRING DT2a-Sol1-1
10775: PPUSH
10776: CALL_OW 88
10780: GO 10794
// Say ( speaker , DT2a-FSol1-1 ) ;
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_STRING DT2a-FSol1-1
10789: PPUSH
10790: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10794: LD_EXP 3
10798: PPUSH
10799: LD_STRING DT2a-Don-1
10801: PPUSH
10802: CALL_OW 88
// DialogueOff ;
10806: CALL_OW 7
// end ;
10810: PPOPN 3
10812: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10813: LD_INT 1
10815: PPUSH
10816: LD_INT 45
10818: PPUSH
10819: LD_INT 74
10821: PPUSH
10822: CALL_OW 293
10826: IFFALSE 11001
10828: GO 10830
10830: DISABLE
// begin DialogueOn ;
10831: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10835: LD_INT 36
10837: PPUSH
10838: LD_INT 55
10840: PPUSH
10841: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10845: LD_INT 22
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 23
10857: PUSH
10858: LD_INT 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 26
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 25
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 25
10910: PUSH
10911: LD_INT 4
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 5
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 8
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: PPUSH
10958: LD_STRING D5-Sol1-1
10960: PPUSH
10961: LD_STRING D5-FSol1-
10963: PPUSH
10964: CALL 12226 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10968: LD_EXP 23
10972: PUSH
10973: LD_EXP 3
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 10997
// Say ( Donaldson , D5-Don-1 ) ;
10985: LD_EXP 3
10989: PPUSH
10990: LD_STRING D5-Don-1
10992: PPUSH
10993: CALL_OW 88
// DialogueOff ;
10997: CALL_OW 7
// end ;
11001: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11002: LD_INT 1
11004: PPUSH
11005: LD_INT 10
11007: PPUSH
11008: CALL_OW 292
11012: PUSH
11013: LD_INT 1
11015: PPUSH
11016: LD_INT 137
11018: PPUSH
11019: CALL_OW 292
11023: OR
11024: IFFALSE 11179
11026: GO 11028
11028: DISABLE
// begin DialogueOn ;
11029: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11033: LD_INT 22
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 23
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 26
11055: PUSH
11056: LD_INT 1
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 25
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 25
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 25
11088: PUSH
11089: LD_INT 3
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 5
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PPUSH
11141: CALL_OW 69
11145: PPUSH
11146: LD_STRING DT3-Sol1-1
11148: PPUSH
11149: LD_STRING DT3-FSol1-1
11151: PPUSH
11152: CALL 12226 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11156: LD_EXP 1
11160: PPUSH
11161: LD_STRING DT3-JMM-1
11163: PPUSH
11164: CALL_OW 88
// DialogueOff ;
11168: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11172: LD_STRING M2
11174: PPUSH
11175: CALL_OW 337
// end ;
11179: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11180: LD_EXP 35
11184: PUSH
11185: LD_INT 0
11187: EQUAL
11188: PUSH
11189: LD_INT 10
11191: PPUSH
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 70
11206: PUSH
11207: LD_INT 10
11209: PPUSH
11210: LD_INT 22
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 24
11225: PUSH
11226: LD_INT 800
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 21
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 58
11249: PUSH
11250: EMPTY
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 70
11263: OR
11264: AND
11265: IFFALSE 11278
11267: GO 11269
11269: DISABLE
// ruEscape := 1 ;
11270: LD_ADDR_EXP 35
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
11278: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11279: LD_INT 3
11281: PPUSH
11282: CALL_OW 303
11286: PUSH
11287: LD_INT 4
11289: PPUSH
11290: CALL_OW 303
11294: OR
11295: PUSH
11296: LD_EXP 35
11300: PUSH
11301: LD_INT 1
11303: EQUAL
11304: OR
11305: IFFALSE 11894
11307: GO 11309
11309: DISABLE
11310: LD_INT 0
11312: PPUSH
11313: PPUSH
11314: PPUSH
// begin ruAI := 0 ;
11315: LD_ADDR_EXP 34
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11323: LD_EXP 27
11327: PPUSH
11328: CALL_OW 122
// wait ( 0 0$1 ) ;
11332: LD_INT 35
11334: PPUSH
11335: CALL_OW 67
// DialogueOn ;
11339: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11343: LD_INT 75
11345: PPUSH
11346: LD_INT 21
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: LD_INT 12
11354: PPUSH
11355: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11359: LD_INT 75
11361: PPUSH
11362: LD_INT 21
11364: PPUSH
11365: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11369: LD_INT 10
11371: PPUSH
11372: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11376: LD_EXP 1
11380: PPUSH
11381: LD_STRING D6-JMM-1
11383: PPUSH
11384: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11388: LD_INT 75
11390: PPUSH
11391: LD_INT 21
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 331
// DialogueOff ;
11401: CALL_OW 7
// for i in RuScientists do
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: LD_EXP 27
11414: PUSH
11415: FOR_IN
11416: IFFALSE 11452
// begin SetSide ( i , 6 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 6
11425: PPUSH
11426: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11430: LD_VAR 0 1
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: LD_INT 3
11440: PPUSH
11441: CALL_OW 12
11445: PPUSH
11446: CALL_OW 109
// end ;
11450: GO 11415
11452: POP
11453: POP
// repeat wait ( 0 0$1 ) ;
11454: LD_INT 35
11456: PPUSH
11457: CALL_OW 67
// for i in RuScientists do
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: LD_EXP 27
11470: PUSH
11471: FOR_IN
11472: IFFALSE 11885
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_INT 3
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 91
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: LD_INT 10
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 21
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 58
11517: PUSH
11518: EMPTY
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL_OW 310
11546: NOT
11547: AND
11548: IFFALSE 11576
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11550: LD_VAR 0 1
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 74
11569: PPUSH
11570: CALL_OW 120
// continue ;
11574: GO 11471
// end ; if IsInUnit ( i ) then
11576: LD_VAR 0 1
11580: PPUSH
11581: CALL_OW 310
11585: IFFALSE 11604
// unit := IsInUnit ( i ) else
11587: LD_ADDR_VAR 0 2
11591: PUSH
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 310
11601: ST_TO_ADDR
11602: GO 11614
// unit := i ;
11604: LD_ADDR_VAR 0 2
11608: PUSH
11609: LD_VAR 0 1
11613: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 110
11623: PUSH
11624: LD_INT 1
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11691
11632: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11633: LD_VAR 0 2
11637: PPUSH
11638: LD_INT 137
11640: PPUSH
11641: CALL_OW 296
11645: PUSH
11646: LD_INT 13
11648: LESS
11649: PUSH
11650: LD_INT 137
11652: PPUSH
11653: CALL_OW 302
11657: AND
11658: IFFALSE 11674
// ComEnterUnit ( unit , rutp ) else
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_INT 137
11667: PPUSH
11668: CALL_OW 120
11672: GO 11689
// ComMoveXY ( unit , 16 , 28 ) ;
11674: LD_VAR 0 2
11678: PPUSH
11679: LD_INT 16
11681: PPUSH
11682: LD_INT 28
11684: PPUSH
11685: CALL_OW 111
// end ; 2 :
11689: GO 11883
11691: LD_INT 2
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11717
11699: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11700: LD_VAR 0 2
11704: PPUSH
11705: LD_INT 97
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 111
11715: GO 11883
11717: LD_INT 3
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11784
11725: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_INT 137
11733: PPUSH
11734: CALL_OW 296
11738: PUSH
11739: LD_INT 13
11741: LESS
11742: PUSH
11743: LD_INT 137
11745: PPUSH
11746: CALL_OW 302
11750: AND
11751: IFFALSE 11767
// ComEnterUnit ( unit , rutp ) else
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_INT 137
11760: PPUSH
11761: CALL_OW 120
11765: GO 11782
// ComMoveXY ( unit , 128 , 155 ) ;
11767: LD_VAR 0 2
11771: PPUSH
11772: LD_INT 128
11774: PPUSH
11775: LD_INT 155
11777: PPUSH
11778: CALL_OW 111
// end ; 11 :
11782: GO 11883
11784: LD_INT 11
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11810
11792: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: LD_INT 28
11803: PPUSH
11804: CALL_OW 111
11808: GO 11883
11810: LD_INT 13
11812: DOUBLE
11813: EQUAL
11814: IFTRUE 11818
11816: GO 11856
11818: POP
// begin if IsOk ( ruteleprt ) then
11819: LD_INT 10
11821: PPUSH
11822: CALL_OW 302
11826: IFFALSE 11842
// ComEnterUnit ( unit , ruteleprt ) else
11828: LD_VAR 0 2
11832: PPUSH
11833: LD_INT 10
11835: PPUSH
11836: CALL_OW 120
11840: GO 11854
// SetTag ( unit , 23 ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 23
11849: PPUSH
11850: CALL_OW 109
// end ; 23 :
11854: GO 11883
11856: LD_INT 23
11858: DOUBLE
11859: EQUAL
11860: IFTRUE 11864
11862: GO 11882
11864: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 128
11872: PPUSH
11873: LD_INT 155
11875: PPUSH
11876: CALL_OW 111
11880: GO 11883
11882: POP
// end ;
11883: GO 11471
11885: POP
11886: POP
// until not RuScientists ;
11887: LD_EXP 27
11891: NOT
11892: IFFALSE 11454
// end ;
11894: PPOPN 3
11896: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11897: LD_EXP 34
11901: PUSH
11902: LD_INT 0
11904: EQUAL
11905: PUSH
11906: LD_EXP 27
11910: AND
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 6
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: LD_INT 95
11927: PUSH
11928: LD_INT 13
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 95
11937: PUSH
11938: LD_INT 14
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 25
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PPUSH
11965: CALL_OW 69
11969: AND
11970: IFFALSE 12183
11972: GO 11974
11974: DISABLE
11975: LD_INT 0
11977: PPUSH
11978: PPUSH
11979: PPUSH
11980: PPUSH
// begin enable ;
11981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 6
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 2
11999: PUSH
12000: LD_INT 95
12002: PUSH
12003: LD_INT 13
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 95
12012: PUSH
12013: LD_INT 14
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 95
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 69
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12181
// begin if i in RuScientists then
12048: LD_VAR 0 1
12052: PUSH
12053: LD_EXP 27
12057: IN
12058: IFFALSE 12087
// begin RuScientists = RuScientists diff i ;
12060: LD_ADDR_EXP 27
12064: PUSH
12065: LD_EXP 27
12069: PUSH
12070: LD_VAR 0 1
12074: DIFF
12075: ST_TO_ADDR
// RemoveUnit ( i ) ;
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 64
// continue ;
12085: GO 12045
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12087: LD_VAR 0 1
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_INT 6
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 1
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 69
12120: IN
12121: IFFALSE 12179
// begin if IsDrivenBy ( i ) in RuScientists then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 311
12132: PUSH
12133: LD_EXP 27
12137: IN
12138: IFFALSE 12156
// RuScientists = RuScientists diff i ;
12140: LD_ADDR_EXP 27
12144: PUSH
12145: LD_EXP 27
12149: PUSH
12150: LD_VAR 0 1
12154: DIFF
12155: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12156: LD_VAR 0 1
12160: PPUSH
12161: CALL_OW 311
12165: PPUSH
12166: CALL_OW 64
// RemoveUnit ( i ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 64
// end ; end ;
12179: GO 12045
12181: POP
12182: POP
// end ; end_of_file
12183: PPOPN 4
12185: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
// for i in charactersList do
12190: LD_ADDR_VAR 0 4
12194: PUSH
12195: LD_VAR 0 1
12199: PUSH
12200: FOR_IN
12201: IFFALSE 12219
// SaveCharacters ( i , ident ) ;
12203: LD_VAR 0 4
12207: PPUSH
12208: LD_VAR 0 2
12212: PPUSH
12213: CALL_OW 38
12217: GO 12200
12219: POP
12220: POP
// end ;
12221: LD_VAR 0 3
12225: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12226: LD_INT 0
12228: PPUSH
12229: PPUSH
12230: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_EXP 1
12245: PUSH
12246: LD_EXP 7
12250: PUSH
12251: LD_EXP 3
12255: PUSH
12256: LD_EXP 4
12260: PUSH
12261: LD_EXP 5
12265: PUSH
12266: LD_EXP 2
12270: PUSH
12271: LD_EXP 12
12275: PUSH
12276: LD_EXP 13
12280: PUSH
12281: LD_EXP 9
12285: PUSH
12286: LD_EXP 11
12290: PUSH
12291: LD_EXP 6
12295: PUSH
12296: LD_EXP 8
12300: PUSH
12301: LD_EXP 10
12305: PUSH
12306: LD_EXP 15
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: DIFF
12327: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12328: LD_ADDR_VAR 0 6
12332: PUSH
12333: LD_VAR 0 1
12337: PUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 12
12350: ARRAY
12351: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12352: LD_VAR 0 6
12356: PPUSH
12357: CALL_OW 258
12361: PUSH
12362: LD_INT 1
12364: EQUAL
12365: IFFALSE 12383
// Say ( speaker , dialogMID ) else
12367: LD_VAR 0 6
12371: PPUSH
12372: LD_VAR 0 2
12376: PPUSH
12377: CALL_OW 88
12381: GO 12397
// Say ( speaker , dialogFID ) ;
12383: LD_VAR 0 6
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: CALL_OW 88
// result := speaker ;
12397: LD_ADDR_VAR 0 4
12401: PUSH
12402: LD_VAR 0 6
12406: ST_TO_ADDR
// end ;
12407: LD_VAR 0 4
12411: RET
// export function PrepareDifficulty ; var tmp ; begin
12412: LD_INT 0
12414: PPUSH
12415: PPUSH
// if Difficulty = 1 then
12416: LD_OWVAR 67
12420: PUSH
12421: LD_INT 1
12423: EQUAL
12424: IFFALSE 12444
// begin RuSolMinLevel = 8 ;
12426: LD_ADDR_EXP 29
12430: PUSH
12431: LD_INT 8
12433: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12434: LD_ADDR_EXP 30
12438: PUSH
12439: LD_INT 10
12441: ST_TO_ADDR
// end else
12442: GO 12684
// if Difficulty = 2 then
12444: LD_OWVAR 67
12448: PUSH
12449: LD_INT 2
12451: EQUAL
12452: IFFALSE 12548
// begin RuSolMinLevel = 9 ;
12454: LD_ADDR_EXP 29
12458: PUSH
12459: LD_INT 9
12461: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12462: LD_ADDR_EXP 30
12466: PUSH
12467: LD_INT 10
12469: ST_TO_ADDR
// uc_nation = 3 ;
12470: LD_ADDR_OWVAR 21
12474: PUSH
12475: LD_INT 3
12477: ST_TO_ADDR
// uc_side = 3 ;
12478: LD_ADDR_OWVAR 20
12482: PUSH
12483: LD_INT 3
12485: ST_TO_ADDR
// bc_level = 10 ;
12486: LD_ADDR_OWVAR 43
12490: PUSH
12491: LD_INT 10
12493: ST_TO_ADDR
// bc_type = b_turret ;
12494: LD_ADDR_OWVAR 42
12498: PUSH
12499: LD_INT 33
12501: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: LD_INT 86
12509: PPUSH
12510: LD_INT 34
12512: PPUSH
12513: LD_INT 2
12515: PPUSH
12516: CALL_OW 47
12520: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_INT 49
12528: PPUSH
12529: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12533: LD_INT 64
12535: PPUSH
12536: LD_INT 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// end else
12546: GO 12684
// begin RuSolMinLevel = 10 ;
12548: LD_ADDR_EXP 29
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12556: LD_ADDR_EXP 30
12560: PUSH
12561: LD_INT 10
12563: ST_TO_ADDR
// uc_nation = 3 ;
12564: LD_ADDR_OWVAR 21
12568: PUSH
12569: LD_INT 3
12571: ST_TO_ADDR
// uc_side = 3 ;
12572: LD_ADDR_OWVAR 20
12576: PUSH
12577: LD_INT 3
12579: ST_TO_ADDR
// bc_level = 10 ;
12580: LD_ADDR_OWVAR 43
12584: PUSH
12585: LD_INT 10
12587: ST_TO_ADDR
// bc_type = b_turret ;
12588: LD_ADDR_OWVAR 42
12592: PUSH
12593: LD_INT 33
12595: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12596: LD_ADDR_VAR 0 2
12600: PUSH
12601: LD_INT 86
12603: PPUSH
12604: LD_INT 34
12606: PPUSH
12607: LD_INT 2
12609: PPUSH
12610: CALL_OW 47
12614: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12615: LD_VAR 0 2
12619: PPUSH
12620: LD_INT 49
12622: PPUSH
12623: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_INT 93
12634: PPUSH
12635: LD_INT 31
12637: PPUSH
12638: LD_INT 2
12640: PPUSH
12641: CALL_OW 47
12645: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 49
12653: PPUSH
12654: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12658: LD_INT 64
12660: PPUSH
12661: LD_INT 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12671: LD_INT 65
12673: PPUSH
12674: LD_INT 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 322
// end ; end ;
12684: LD_VAR 0 1
12688: RET
// export function ShowQuery1 ; begin
12689: LD_INT 0
12691: PPUSH
// result := Query ( Q1 ) ;
12692: LD_ADDR_VAR 0 1
12696: PUSH
12697: LD_STRING Q1
12699: PPUSH
12700: CALL_OW 97
12704: ST_TO_ADDR
// end ;
12705: LD_VAR 0 1
12709: RET
// export function ShowQuery2 ; begin
12710: LD_INT 0
12712: PPUSH
// result := Query ( Q1a ) ;
12713: LD_ADDR_VAR 0 1
12717: PUSH
12718: LD_STRING Q1a
12720: PPUSH
12721: CALL_OW 97
12725: ST_TO_ADDR
// end ;
12726: LD_VAR 0 1
12730: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12731: LD_INT 0
12733: PPUSH
12734: PPUSH
12735: PPUSH
12736: PPUSH
// for i = 1 to count do
12737: LD_ADDR_VAR 0 8
12741: PUSH
12742: DOUBLE
12743: LD_INT 1
12745: DEC
12746: ST_TO_ADDR
12747: LD_VAR 0 6
12751: PUSH
12752: FOR_TO
12753: IFFALSE 12834
// begin uc_side = side ;
12755: LD_ADDR_OWVAR 20
12759: PUSH
12760: LD_VAR 0 1
12764: ST_TO_ADDR
// uc_nation = nation ;
12765: LD_ADDR_OWVAR 21
12769: PUSH
12770: LD_VAR 0 2
12774: ST_TO_ADDR
// hc_gallery =  ;
12775: LD_ADDR_OWVAR 33
12779: PUSH
12780: LD_STRING 
12782: ST_TO_ADDR
// hc_name =  ;
12783: LD_ADDR_OWVAR 26
12787: PUSH
12788: LD_STRING 
12790: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_VAR 0 5
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: CALL_OW 380
// un = CreateHuman ;
12808: LD_ADDR_VAR 0 10
12812: PUSH
12813: CALL_OW 44
12817: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12818: LD_VAR 0 10
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end ;
12832: GO 12752
12834: POP
12835: POP
// end ;
12836: LD_VAR 0 7
12840: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12841: LD_INT 0
12843: PPUSH
12844: PPUSH
12845: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12846: LD_ADDR_VAR 0 6
12850: PUSH
12851: LD_INT 48
12853: PUSH
12854: LD_INT 49
12856: PUSH
12857: LD_INT 50
12859: PUSH
12860: LD_INT 20
12862: PUSH
12863: LD_INT 1
12865: PUSH
12866: LD_INT 51
12868: PUSH
12869: LD_INT 52
12871: PUSH
12872: LD_INT 69
12874: PUSH
12875: LD_INT 39
12877: PUSH
12878: LD_INT 34
12880: PUSH
12881: LD_INT 40
12883: PUSH
12884: LD_INT 53
12886: PUSH
12887: LD_INT 71
12889: PUSH
12890: LD_INT 57
12892: PUSH
12893: LD_INT 58
12895: PUSH
12896: LD_INT 44
12898: PUSH
12899: LD_INT 32
12901: PUSH
12902: LD_INT 27
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 59
12913: PUSH
12914: LD_INT 54
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: LD_INT 56
12922: PUSH
12923: LD_INT 63
12925: PUSH
12926: LD_INT 64
12928: PUSH
12929: LD_INT 65
12931: PUSH
12932: LD_INT 30
12934: PUSH
12935: LD_INT 31
12937: PUSH
12938: LD_INT 21
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_INT 25
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: ST_TO_ADDR
// for i := 1 to list do
12981: LD_ADDR_VAR 0 5
12985: PUSH
12986: DOUBLE
12987: LD_INT 1
12989: DEC
12990: ST_TO_ADDR
12991: LD_VAR 0 6
12995: PUSH
12996: FOR_TO
12997: IFFALSE 13069
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12999: LD_VAR 0 6
13003: PUSH
13004: LD_VAR 0 5
13008: ARRAY
13009: PPUSH
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 321
13019: PUSH
13020: LD_INT 1
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 6
13028: PUSH
13029: LD_VAR 0 5
13033: ARRAY
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: CALL_OW 482
13044: AND
13045: IFFALSE 13067
// AddComResearch ( lab , list [ i ] ) ;
13047: LD_VAR 0 2
13051: PPUSH
13052: LD_VAR 0 6
13056: PUSH
13057: LD_VAR 0 5
13061: ARRAY
13062: PPUSH
13063: CALL_OW 184
13067: GO 12996
13069: POP
13070: POP
// end ;
13071: LD_VAR 0 4
13075: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
13083: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13084: LD_ADDR_VAR 0 8
13088: PUSH
13089: LD_VAR 0 2
13093: PPUSH
13094: CALL_OW 313
13098: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13099: LD_ADDR_VAR 0 9
13103: PUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 22
13111: PUSH
13112: LD_VAR 0 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 24
13133: PUSH
13134: LD_INT 750
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 54
13146: PUSH
13147: EMPTY
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: CALL_OW 70
13164: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13165: LD_ADDR_VAR 0 6
13169: PUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 22
13177: PUSH
13178: LD_VAR 0 1
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 3
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 3
13199: PUSH
13200: LD_INT 24
13202: PUSH
13203: LD_INT 1000
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: PPUSH
13222: CALL_OW 70
13226: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13227: LD_VAR 0 6
13231: NOT
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_VAR 0 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 24
13257: PUSH
13258: LD_INT 250
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: PPUSH
13270: CALL_OW 69
13274: NOT
13275: AND
13276: IFFALSE 13280
// exit ;
13278: GO 13438
// if buildingsList and engineerOkInside then
13280: LD_VAR 0 6
13284: PUSH
13285: LD_VAR 0 8
13289: AND
13290: IFFALSE 13301
// ComExitBuilding ( engineerOkInside ) ;
13292: LD_VAR 0 8
13296: PPUSH
13297: CALL_OW 122
// if buildingsList and engineerOkOutside then
13301: LD_VAR 0 6
13305: PUSH
13306: LD_VAR 0 9
13310: AND
13311: IFFALSE 13331
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13313: LD_VAR 0 9
13317: PPUSH
13318: LD_VAR 0 6
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13331: LD_VAR 0 6
13335: PUSH
13336: LD_INT 0
13338: EQUAL
13339: PUSH
13340: LD_VAR 0 4
13344: PUSH
13345: LD_INT 0
13347: EQUAL
13348: AND
13349: PUSH
13350: LD_VAR 0 9
13354: AND
13355: IFFALSE 13371
// ComEnterUnit ( engineerOkOutside , depot ) ;
13357: LD_VAR 0 9
13361: PPUSH
13362: LD_VAR 0 2
13366: PPUSH
13367: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13371: LD_VAR 0 9
13375: PUSH
13376: LD_VAR 0 6
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: AND
13385: PUSH
13386: LD_VAR 0 4
13390: AND
13391: IFFALSE 13438
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13393: LD_VAR 0 9
13397: PPUSH
13398: LD_VAR 0 4
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 4
13411: PUSH
13412: LD_INT 2
13414: ARRAY
13415: PPUSH
13416: LD_VAR 0 4
13420: PUSH
13421: LD_INT 3
13423: ARRAY
13424: PPUSH
13425: LD_VAR 0 4
13429: PUSH
13430: LD_INT 4
13432: ARRAY
13433: PPUSH
13434: CALL_OW 145
// end ;
13438: LD_VAR 0 5
13442: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
13452: PPUSH
13453: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13454: LD_ADDR_VAR 0 6
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_VAR 0 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 25
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 24
13483: PUSH
13484: LD_INT 251
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PUSH
13501: LD_EXP 27
13505: PUSH
13506: EMPTY
13507: LIST
13508: DIFF
13509: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13510: LD_ADDR_VAR 0 7
13514: PUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 22
13522: PUSH
13523: LD_VAR 0 1
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 56
13534: PUSH
13535: EMPTY
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 50
13550: PUSH
13551: EMPTY
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 70
13564: PUSH
13565: LD_EXP 27
13569: PUSH
13570: EMPTY
13571: LIST
13572: DIFF
13573: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13574: LD_ADDR_VAR 0 10
13578: PUSH
13579: LD_VAR 0 3
13583: PPUSH
13584: LD_INT 22
13586: PUSH
13587: LD_VAR 0 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 21
13598: PUSH
13599: LD_INT 1
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: LD_INT 24
13611: PUSH
13612: LD_INT 750
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13633: LD_ADDR_VAR 0 11
13637: PUSH
13638: LD_VAR 0 2
13642: PPUSH
13643: LD_INT 22
13645: PUSH
13646: LD_VAR 0 1
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 21
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 24
13670: PUSH
13671: LD_INT 1000
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 70
13691: ST_TO_ADDR
// if damageUnits and sciList then
13692: LD_VAR 0 10
13696: PUSH
13697: LD_VAR 0 6
13701: AND
13702: IFFALSE 13718
// ComMoveToArea ( damageUnits , healArea ) ;
13704: LD_VAR 0 10
13708: PPUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13718: LD_VAR 0 11
13722: PUSH
13723: LD_VAR 0 6
13727: AND
13728: PUSH
13729: LD_VAR 0 7
13733: PUSH
13734: LD_INT 0
13736: EQUAL
13737: AND
13738: IFFALSE 13784
// for i in buildings do
13740: LD_ADDR_VAR 0 8
13744: PUSH
13745: LD_VAR 0 4
13749: PUSH
13750: FOR_IN
13751: IFFALSE 13782
// begin if UnitsInside ( i ) then
13753: LD_VAR 0 8
13757: PPUSH
13758: CALL_OW 313
13762: IFFALSE 13780
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13764: LD_VAR 0 8
13768: PPUSH
13769: CALL_OW 313
13773: PPUSH
13774: CALL_OW 122
// break ;
13778: GO 13782
// end ; end ;
13780: GO 13750
13782: POP
13783: POP
// if unitsToHeal and sciListOutside then
13784: LD_VAR 0 11
13788: PUSH
13789: LD_VAR 0 7
13793: AND
13794: IFFALSE 13814
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13796: LD_VAR 0 7
13800: PPUSH
13801: LD_VAR 0 11
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: PPUSH
13810: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13814: LD_VAR 0 10
13818: PUSH
13819: LD_INT 0
13821: EQUAL
13822: PUSH
13823: LD_VAR 0 11
13827: PUSH
13828: LD_INT 0
13830: EQUAL
13831: AND
13832: PUSH
13833: LD_VAR 0 7
13837: AND
13838: IFFALSE 13906
// begin tmp := buildings ;
13840: LD_ADDR_VAR 0 12
13844: PUSH
13845: LD_VAR 0 4
13849: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13850: LD_ADDR_VAR 0 13
13854: PUSH
13855: LD_INT 1
13857: PPUSH
13858: LD_VAR 0 12
13862: PPUSH
13863: CALL_OW 12
13867: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13868: LD_VAR 0 7
13872: PPUSH
13873: LD_INT 3
13875: PUSH
13876: LD_INT 60
13878: PUSH
13879: EMPTY
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 72
13890: PPUSH
13891: LD_VAR 0 12
13895: PUSH
13896: LD_VAR 0 13
13900: ARRAY
13901: PPUSH
13902: CALL_OW 120
// end ; end ;
13906: LD_VAR 0 5
13910: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13911: LD_INT 0
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13919: LD_ADDR_VAR 0 7
13923: PUSH
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 22
13931: PUSH
13932: LD_VAR 0 1
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 34
13953: PUSH
13954: LD_INT 52
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 70
13970: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13971: LD_ADDR_VAR 0 8
13975: PUSH
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_INT 22
13983: PUSH
13984: LD_VAR 0 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 3
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 3
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 1000
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: PPUSH
14028: CALL_OW 70
14032: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14033: LD_VAR 0 8
14037: PUSH
14038: LD_INT 0
14040: GREATER
14041: PUSH
14042: LD_VAR 0 7
14046: PPUSH
14047: LD_INT 24
14049: PUSH
14050: LD_INT 750
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 72
14061: PUSH
14062: LD_INT 0
14064: GREATER
14065: AND
14066: IFFALSE 14086
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14068: LD_VAR 0 7
14072: PPUSH
14073: LD_VAR 0 8
14077: PUSH
14078: LD_INT 1
14080: ARRAY
14081: PPUSH
14082: CALL_OW 130
// end ;
14086: LD_VAR 0 3
14090: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14095: LD_INT 22
14097: PUSH
14098: LD_VAR 0 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: PUSH
14126: LD_INT 18
14128: PPUSH
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 70
14159: PUSH
14160: LD_VAR 0 3
14164: LESSEQUAL
14165: DIFF
14166: IFFALSE 14233
// for i := 1 to vehCount do
14168: LD_ADDR_VAR 0 9
14172: PUSH
14173: DOUBLE
14174: LD_INT 1
14176: DEC
14177: ST_TO_ADDR
14178: LD_VAR 0 3
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14231
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: LD_VAR 0 7
14195: PPUSH
14196: LD_VAR 0 5
14200: PPUSH
14201: LD_VAR 0 6
14205: PPUSH
14206: LD_VAR 0 4
14210: PUSH
14211: LD_INT 1
14213: PPUSH
14214: LD_VAR 0 4
14218: PPUSH
14219: CALL_OW 12
14223: ARRAY
14224: PPUSH
14225: CALL_OW 185
14229: GO 14183
14231: POP
14232: POP
// end ;
14233: LD_VAR 0 8
14237: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14246: LD_ADDR_VAR 0 6
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 9
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14282: LD_ADDR_VAR 0 7
14286: PUSH
14287: LD_INT 81
14289: PUSH
14290: LD_VAR 0 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 3
14335: PPUSH
14336: CALL_OW 12
14340: ST_TO_ADDR
// for i := 1 to list do
14341: LD_ADDR_VAR 0 5
14345: PUSH
14346: DOUBLE
14347: LD_INT 1
14349: DEC
14350: ST_TO_ADDR
14351: LD_VAR 0 6
14355: PUSH
14356: FOR_TO
14357: IFFALSE 14559
// for ta in filter do
14359: LD_ADDR_VAR 0 3
14363: PUSH
14364: LD_VAR 0 7
14368: PUSH
14369: FOR_IN
14370: IFFALSE 14555
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14372: LD_VAR 0 6
14376: PUSH
14377: LD_VAR 0 5
14381: ARRAY
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: CALL_OW 296
14392: PUSH
14393: LD_INT 15
14395: LESSEQUAL
14396: IFFALSE 14553
// begin case c of 1 :
14398: LD_VAR 0 4
14402: PUSH
14403: LD_INT 1
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14449
14411: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14412: LD_VAR 0 6
14416: PUSH
14417: LD_VAR 0 5
14421: ARRAY
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: CALL_OW 250
14432: PPUSH
14433: LD_VAR 0 3
14437: PPUSH
14438: CALL_OW 251
14442: PPUSH
14443: CALL_OW 154
14447: GO 14553
14449: LD_INT 2
14451: DOUBLE
14452: EQUAL
14453: IFTRUE 14457
14455: GO 14521
14457: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14458: LD_VAR 0 6
14462: PUSH
14463: LD_VAR 0 5
14467: ARRAY
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: CALL_OW 250
14478: PUSH
14479: LD_INT 1
14481: NEG
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 12
14490: PLUS
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: CALL_OW 251
14501: PUSH
14502: LD_INT 1
14504: NEG
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 12
14513: PLUS
14514: PPUSH
14515: CALL_OW 153
14519: GO 14553
14521: LD_INT 3
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14552
14529: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14530: LD_VAR 0 6
14534: PUSH
14535: LD_VAR 0 5
14539: ARRAY
14540: PPUSH
14541: LD_VAR 0 3
14545: PPUSH
14546: CALL_OW 115
14550: GO 14553
14552: POP
// end ; end ;
14553: GO 14369
14555: POP
14556: POP
14557: GO 14356
14559: POP
14560: POP
// end ;
14561: LD_VAR 0 2
14565: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14566: LD_INT 0
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
// r := 100 ;
14572: LD_ADDR_VAR 0 5
14576: PUSH
14577: LD_INT 100
14579: ST_TO_ADDR
// x := 0 ;
14580: LD_ADDR_VAR 0 6
14584: PUSH
14585: LD_INT 0
14587: ST_TO_ADDR
// while ( x < n ) do
14588: LD_VAR 0 6
14592: PUSH
14593: LD_VAR 0 2
14597: LESS
14598: IFFALSE 14861
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14600: LD_ADDR_VAR 0 4
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_VAR 0 1
14614: PPUSH
14615: LD_INT 0
14617: PPUSH
14618: CALL_OW 517
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PUSH
14627: FOR_TO
14628: IFFALSE 14857
// begin if r > 50 then
14630: LD_VAR 0 5
14634: PUSH
14635: LD_INT 50
14637: GREATER
14638: IFFALSE 14841
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 517
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PUSH
14657: LD_VAR 0 4
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 0
14670: PPUSH
14671: CALL_OW 517
14675: PUSH
14676: LD_INT 2
14678: ARRAY
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PPUSH
14686: CALL_OW 458
14690: NOT
14691: IFFALSE 14839
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14693: LD_VAR 0 1
14697: PPUSH
14698: LD_INT 0
14700: PPUSH
14701: CALL_OW 517
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 4
14714: ARRAY
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 0
14723: PPUSH
14724: CALL_OW 517
14728: PUSH
14729: LD_INT 2
14731: ARRAY
14732: PUSH
14733: LD_VAR 0 4
14737: ARRAY
14738: PPUSH
14739: LD_INT 8
14741: PPUSH
14742: LD_INT 0
14744: PPUSH
14745: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14749: LD_ADDR_EXP 37
14753: PUSH
14754: LD_EXP 37
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: CALL_OW 517
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PUSH
14779: LD_VAR 0 4
14783: ARRAY
14784: PUSH
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 517
14797: PUSH
14798: LD_INT 2
14800: ARRAY
14801: PUSH
14802: LD_VAR 0 4
14806: ARRAY
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 2
14816: ST_TO_ADDR
// r := 0 ;
14817: LD_ADDR_VAR 0 5
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// x := x + 1 ;
14825: LD_ADDR_VAR 0 6
14829: PUSH
14830: LD_VAR 0 6
14834: PUSH
14835: LD_INT 1
14837: PLUS
14838: ST_TO_ADDR
// end end else
14839: GO 14855
// r := r + 35 ;
14841: LD_ADDR_VAR 0 5
14845: PUSH
14846: LD_VAR 0 5
14850: PUSH
14851: LD_INT 35
14853: PLUS
14854: ST_TO_ADDR
// end end ;
14855: GO 14627
14857: POP
14858: POP
14859: GO 14588
14861: LD_VAR 0 3
14865: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14866: LD_INT 0
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
// tmp := [ ] ;
14873: LD_ADDR_VAR 0 6
14877: PUSH
14878: EMPTY
14879: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14880: LD_ADDR_VAR 0 7
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_VAR 0 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 32
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PPUSH
14911: CALL_OW 69
14915: ST_TO_ADDR
// if bunkers then
14916: LD_VAR 0 7
14920: IFFALSE 14990
// for i in bunkers do
14922: LD_ADDR_VAR 0 4
14926: PUSH
14927: LD_VAR 0 7
14931: PUSH
14932: FOR_IN
14933: IFFALSE 14988
// for j in UnitsInside ( i ) do
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 4
14944: PPUSH
14945: CALL_OW 313
14949: PUSH
14950: FOR_IN
14951: IFFALSE 14984
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14953: LD_ADDR_VAR 0 6
14957: PUSH
14958: LD_VAR 0 6
14962: PPUSH
14963: LD_VAR 0 6
14967: PUSH
14968: LD_INT 1
14970: PLUS
14971: PPUSH
14972: LD_VAR 0 5
14976: PPUSH
14977: CALL_OW 1
14981: ST_TO_ADDR
14982: GO 14950
14984: POP
14985: POP
14986: GO 14932
14988: POP
14989: POP
// if tmp then
14990: LD_VAR 0 6
14994: IFFALSE 15034
// begin ComExitBuilding ( tmp ) ;
14996: LD_VAR 0 6
15000: PPUSH
15001: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15005: LD_VAR 0 6
15009: PPUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 250
15019: PPUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: CALL_OW 251
15029: PPUSH
15030: CALL_OW 174
// end ; end ;
15034: LD_VAR 0 3
15038: RET
// export function CreateNature ; var i , un ; begin
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
15043: PPUSH
// uc_side := 0 ;
15044: LD_ADDR_OWVAR 20
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// uc_nation := 0 ;
15052: LD_ADDR_OWVAR 21
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// InitHc ;
15060: CALL_OW 19
// hc_class := class_fish ;
15064: LD_ADDR_OWVAR 28
15068: PUSH
15069: LD_INT 20
15071: ST_TO_ADDR
// for i := 1 to 6 do
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: DOUBLE
15078: LD_INT 1
15080: DEC
15081: ST_TO_ADDR
15082: LD_INT 6
15084: PUSH
15085: FOR_TO
15086: IFFALSE 15105
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15088: CALL_OW 44
15092: PPUSH
15093: LD_INT 22
15095: PPUSH
15096: LD_INT 0
15098: PPUSH
15099: CALL_OW 49
15103: GO 15085
15105: POP
15106: POP
// for i := 1 to Difficulty + 2 do
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: DOUBLE
15113: LD_INT 1
15115: DEC
15116: ST_TO_ADDR
15117: LD_OWVAR 67
15121: PUSH
15122: LD_INT 2
15124: PLUS
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15236
// begin hc_sex := sex_male ;
15129: LD_ADDR_OWVAR 27
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// uc_side := 0 ;
15137: LD_ADDR_OWVAR 20
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// uc_nation := nation_nature ;
15145: LD_ADDR_OWVAR 21
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// hc_class := class_tiger ;
15153: LD_ADDR_OWVAR 28
15157: PUSH
15158: LD_INT 14
15160: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15161: LD_ADDR_OWVAR 31
15165: PUSH
15166: LD_EXP 30
15170: PUSH
15171: LD_INT 0
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15186: LD_ADDR_OWVAR 35
15190: PUSH
15191: LD_INT 5
15193: NEG
15194: PPUSH
15195: LD_INT 5
15197: PPUSH
15198: CALL_OW 12
15202: PUSH
15203: LD_OWVAR 67
15207: MUL
15208: ST_TO_ADDR
// un := CreateHuman ;
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: CALL_OW 44
15218: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 23
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL_OW 49
// end ;
15234: GO 15126
15236: POP
15237: POP
// for i := 1 to rand ( 3 , 4 ) do
15238: LD_ADDR_VAR 0 2
15242: PUSH
15243: DOUBLE
15244: LD_INT 1
15246: DEC
15247: ST_TO_ADDR
15248: LD_INT 3
15250: PPUSH
15251: LD_INT 4
15253: PPUSH
15254: CALL_OW 12
15258: PUSH
15259: FOR_TO
15260: IFFALSE 15352
// begin hc_sex := sex_male ;
15262: LD_ADDR_OWVAR 27
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// uc_side := 0 ;
15270: LD_ADDR_OWVAR 20
15274: PUSH
15275: LD_INT 0
15277: ST_TO_ADDR
// uc_nation := nation_nature ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 0
15285: ST_TO_ADDR
// hc_class := 18 ;
15286: LD_ADDR_OWVAR 28
15290: PUSH
15291: LD_INT 18
15293: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15294: LD_ADDR_OWVAR 31
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: ST_TO_ADDR
// hc_agressivity := 0 ;
15317: LD_ADDR_OWVAR 35
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// un := CreateHuman ;
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: CALL_OW 44
15334: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15335: LD_VAR 0 3
15339: PPUSH
15340: LD_INT 23
15342: PPUSH
15343: LD_INT 0
15345: PPUSH
15346: CALL_OW 49
// end ;
15350: GO 15259
15352: POP
15353: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: DOUBLE
15360: LD_INT 1
15362: DEC
15363: ST_TO_ADDR
15364: LD_INT 4
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 3
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: LD_OWVAR 67
15386: ARRAY
15387: PUSH
15388: FOR_TO
15389: IFFALSE 15498
// begin hc_sex := sex_male ;
15391: LD_ADDR_OWVAR 27
15395: PUSH
15396: LD_INT 1
15398: ST_TO_ADDR
// uc_side := 0 ;
15399: LD_ADDR_OWVAR 20
15403: PUSH
15404: LD_INT 0
15406: ST_TO_ADDR
// uc_nation := nation_nature ;
15407: LD_ADDR_OWVAR 21
15411: PUSH
15412: LD_INT 0
15414: ST_TO_ADDR
// hc_class := class_apeman ;
15415: LD_ADDR_OWVAR 28
15419: PUSH
15420: LD_INT 12
15422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15423: LD_ADDR_OWVAR 31
15427: PUSH
15428: LD_INT 0
15430: PPUSH
15431: LD_INT 2
15433: PPUSH
15434: CALL_OW 12
15438: PUSH
15439: LD_INT 0
15441: PUSH
15442: LD_INT 0
15444: PUSH
15445: LD_INT 0
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15454: LD_ADDR_OWVAR 35
15458: PUSH
15459: LD_INT 10
15461: NEG
15462: PPUSH
15463: LD_INT 10
15465: PPUSH
15466: CALL_OW 12
15470: ST_TO_ADDR
// un := CreateHuman ;
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: CALL_OW 44
15480: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15481: LD_VAR 0 3
15485: PPUSH
15486: LD_INT 26
15488: PPUSH
15489: LD_INT 0
15491: PPUSH
15492: CALL_OW 49
// end ;
15496: GO 15388
15498: POP
15499: POP
// end ; end_of_file
15500: LD_VAR 0 1
15504: RET
// on UnitDestroyed ( unit ) do var i ;
15505: LD_INT 0
15507: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL 34780 0 1
// if unit = JMM then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_EXP 1
15526: EQUAL
15527: IFFALSE 15536
// YouLost ( JMM ) ;
15529: LD_STRING JMM
15531: PPUSH
15532: CALL_OW 104
// if unit in russianTanks then
15536: LD_VAR 0 1
15540: PUSH
15541: LD_EXP 32
15545: IN
15546: IFFALSE 15564
// russianTanks := russianTanks diff unit ;
15548: LD_ADDR_EXP 32
15552: PUSH
15553: LD_EXP 32
15557: PUSH
15558: LD_VAR 0 1
15562: DIFF
15563: ST_TO_ADDR
// if unit in russianTimeLapsers then
15564: LD_VAR 0 1
15568: PUSH
15569: LD_EXP 33
15573: IN
15574: IFFALSE 15592
// russianTimeLapsers := russianTimeLapsers diff unit ;
15576: LD_ADDR_EXP 33
15580: PUSH
15581: LD_EXP 33
15585: PUSH
15586: LD_VAR 0 1
15590: DIFF
15591: ST_TO_ADDR
// if unit in RuScientists then
15592: LD_VAR 0 1
15596: PUSH
15597: LD_EXP 27
15601: IN
15602: IFFALSE 15634
// begin RuScientists := RuScientists diff unit ;
15604: LD_ADDR_EXP 27
15608: PUSH
15609: LD_EXP 27
15613: PUSH
15614: LD_VAR 0 1
15618: DIFF
15619: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15620: LD_ADDR_EXP 28
15624: PUSH
15625: LD_EXP 28
15629: PUSH
15630: LD_INT 1
15632: PLUS
15633: ST_TO_ADDR
// end ; end ;
15634: PPOPN 2
15636: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15637: LD_VAR 0 3
15641: PPUSH
15642: CALL_OW 264
15646: PUSH
15647: LD_INT 9
15649: EQUAL
15650: IFFALSE 15666
// laserCounterDestroy := laserCounterDestroy + 1 ;
15652: LD_ADDR_EXP 43
15656: PUSH
15657: LD_EXP 43
15661: PUSH
15662: LD_INT 1
15664: PLUS
15665: ST_TO_ADDR
// end ;
15666: PPOPN 3
15668: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15669: LD_VAR 0 2
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_INT 6
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: IN
15689: IFFALSE 15744
// begin if GetType ( human ) = unit_vehicle then
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL_OW 247
15700: PUSH
15701: LD_INT 2
15703: EQUAL
15704: IFFALSE 15721
// human := IsDrivenBy ( human ) ;
15706: LD_ADDR_VAR 0 2
15710: PUSH
15711: LD_VAR 0 2
15715: PPUSH
15716: CALL_OW 311
15720: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15721: LD_VAR 0 2
15725: PPUSH
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 110
15735: PUSH
15736: LD_INT 10
15738: PLUS
15739: PPUSH
15740: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15744: LD_VAR 0 2
15748: PPUSH
15749: CALL_OW 255
15753: PUSH
15754: LD_INT 1
15756: EQUAL
15757: PUSH
15758: LD_EXP 40
15762: PUSH
15763: LD_INT 0
15765: EQUAL
15766: AND
15767: IFFALSE 15879
// begin eventVar1 = 1 ;
15769: LD_ADDR_EXP 40
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// teleportExplored = 1 ;
15777: LD_ADDR_EXP 26
15781: PUSH
15782: LD_INT 1
15784: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15785: LD_STRING M2a
15787: PPUSH
15788: CALL_OW 337
// wait ( 0 0$2 ) ;
15792: LD_INT 70
15794: PPUSH
15795: CALL_OW 67
// DialogueOn ;
15799: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15803: LD_INT 22
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 21
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PPUSH
15827: CALL_OW 69
15831: PPUSH
15832: LD_STRING DT3a-Sol1-1
15834: PPUSH
15835: LD_STRING DT3a-FSol1-1
15837: PPUSH
15838: CALL 12226 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15842: LD_EXP 1
15846: PPUSH
15847: LD_STRING DT3a-JMM-1
15849: PPUSH
15850: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15854: LD_VAR 0 2
15858: PPUSH
15859: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15863: LD_EXP 1
15867: PPUSH
15868: LD_STRING DT3a-JMM-1a
15870: PPUSH
15871: CALL_OW 88
// DialogueOff ;
15875: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15879: LD_VAR 0 1
15883: PUSH
15884: LD_INT 10
15886: EQUAL
15887: PUSH
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 247
15897: PUSH
15898: LD_INT 2
15900: EQUAL
15901: AND
15902: PUSH
15903: LD_VAR 0 2
15907: PPUSH
15908: CALL_OW 255
15912: PUSH
15913: LD_INT 3
15915: EQUAL
15916: AND
15917: IFFALSE 15983
// begin if vehicleTeleported = 0 then
15919: LD_EXP 21
15923: PUSH
15924: LD_INT 0
15926: EQUAL
15927: IFFALSE 15944
// begin wait ( 0 0$03 ) ;
15929: LD_INT 105
15931: PPUSH
15932: CALL_OW 67
// vehicleTeleported := 1 ;
15936: LD_ADDR_EXP 21
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15944: LD_EXP 21
15948: PUSH
15949: LD_INT 2
15951: EQUAL
15952: IFFALSE 15969
// begin wait ( 0 0$03 ) ;
15954: LD_INT 105
15956: PPUSH
15957: CALL_OW 67
// vehicleTeleported := 3 ;
15961: LD_ADDR_EXP 21
15965: PUSH
15966: LD_INT 3
15968: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15969: LD_ADDR_EXP 22
15973: PUSH
15974: LD_EXP 22
15978: PUSH
15979: LD_INT 1
15981: PLUS
15982: ST_TO_ADDR
// end ; end ;
15983: PPOPN 2
15985: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15986: LD_VAR 0 1
15990: PPUSH
15991: LD_VAR 0 2
15995: PPUSH
15996: CALL 34900 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 264
16009: PUSH
16010: LD_INT 7
16012: EQUAL
16013: IFFALSE 16023
// rocketBuilded := true ;
16015: LD_ADDR_EXP 44
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 3
16035: NONEQUAL
16036: IFFALSE 16040
// exit ;
16038: GO 16157
// if factory in [ ru_fact , rufab2 ] then
16040: LD_VAR 0 2
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 112
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: IN
16055: IFFALSE 16157
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 264
16066: PUSH
16067: LD_INT 49
16069: EQUAL
16070: IFFALSE 16106
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16072: LD_ADDR_EXP 33
16076: PUSH
16077: LD_EXP 33
16081: PPUSH
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL 76537 0 2
16091: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 137
16099: PPUSH
16100: CALL_OW 120
// end else
16104: GO 16157
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 264
16115: PUSH
16116: LD_INT 51
16118: PUSH
16119: LD_INT 89
16121: PUSH
16122: LD_INT 52
16124: PUSH
16125: LD_INT 53
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: IN
16134: NOT
16135: IFFALSE 16157
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16137: LD_ADDR_EXP 32
16141: PUSH
16142: LD_EXP 32
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL 76537 0 2
16156: ST_TO_ADDR
// end ; end ; end ;
16157: PPOPN 2
16159: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16160: LD_INT 0
16162: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 255
16172: PUSH
16173: LD_INT 3
16175: EQUAL
16176: PUSH
16177: LD_VAR 0 2
16181: PPUSH
16182: CALL_OW 257
16186: PUSH
16187: LD_INT 3
16189: EQUAL
16190: AND
16191: PUSH
16192: LD_INT 21
16194: PPUSH
16195: CALL_OW 255
16199: PUSH
16200: LD_INT 3
16202: EQUAL
16203: AND
16204: PUSH
16205: LD_INT 21
16207: PPUSH
16208: CALL_OW 302
16212: AND
16213: IFFALSE 16227
// ComEnterUnit ( human , ru_fact ) ;
16215: LD_VAR 0 2
16219: PPUSH
16220: LD_INT 21
16222: PPUSH
16223: CALL_OW 120
// end ;
16227: PPOPN 3
16229: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL 34884 0 1
// end ; end_of_file
16239: PPOPN 1
16241: END
// every 0 0$1 trigger ruAI = 1 do
16242: LD_EXP 34
16246: PUSH
16247: LD_INT 1
16249: EQUAL
16250: IFFALSE 16362
16252: GO 16254
16254: DISABLE
// begin enable ;
16255: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16256: LD_INT 3
16258: PPUSH
16259: LD_INT 6
16261: PPUSH
16262: LD_INT 9
16264: PPUSH
16265: LD_EXP 31
16269: PPUSH
16270: CALL 13076 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16274: LD_INT 3
16276: PPUSH
16277: LD_INT 4
16279: PPUSH
16280: LD_INT 10
16282: PPUSH
16283: LD_EXP 31
16287: PPUSH
16288: CALL 13076 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16292: LD_INT 3
16294: PPUSH
16295: LD_INT 9
16297: PPUSH
16298: CALL 13911 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16302: LD_INT 3
16304: PPUSH
16305: LD_INT 10
16307: PPUSH
16308: CALL 13911 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16312: LD_INT 3
16314: PPUSH
16315: LD_INT 16
16317: PPUSH
16318: LD_INT 9
16320: PPUSH
16321: LD_INT 91
16323: PPUSH
16324: CALL 13443 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16328: LD_INT 3
16330: PPUSH
16331: LD_INT 17
16333: PPUSH
16334: LD_INT 10
16336: PPUSH
16337: LD_INT 47
16339: PUSH
16340: LD_INT 129
16342: PUSH
16343: LD_INT 135
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL 13443 0 4
// IntBazooka ( 3 ) ;
16355: LD_INT 3
16357: PPUSH
16358: CALL 14238 0 1
// end ;
16362: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16363: LD_EXP 32
16367: PUSH
16368: LD_INT 3
16370: PUSH
16371: LD_INT 4
16373: PUSH
16374: LD_INT 5
16376: PUSH
16377: LD_INT 6
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_OWVAR 67
16390: ARRAY
16391: GREATEREQUAL
16392: IFFALSE 16746
16394: GO 16396
16396: DISABLE
16397: LD_INT 0
16399: PPUSH
16400: PPUSH
16401: PPUSH
16402: PPUSH
// begin enable ;
16403: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16404: LD_ADDR_VAR 0 2
16408: PUSH
16409: LD_EXP 32
16413: PUSH
16414: LD_EXP 33
16418: UNION
16419: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16420: LD_ADDR_EXP 32
16424: PUSH
16425: LD_EXP 32
16429: PUSH
16430: LD_VAR 0 2
16434: DIFF
16435: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16436: LD_ADDR_EXP 33
16440: PUSH
16441: LD_EXP 33
16445: PUSH
16446: LD_VAR 0 2
16450: DIFF
16451: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16452: LD_EXP 21
16456: PUSH
16457: LD_INT 4
16459: GREATEREQUAL
16460: IFFALSE 16478
// attackTactic := rand ( 1 , 2 ) ;
16462: LD_ADDR_EXP 36
16466: PUSH
16467: LD_INT 1
16469: PPUSH
16470: LD_INT 2
16472: PPUSH
16473: CALL_OW 12
16477: ST_TO_ADDR
// path := [ 93 , 77 , 107 , 99 , 123 , 112 , 140 , 112 ] ;
16478: LD_ADDR_VAR 0 4
16482: PUSH
16483: LD_INT 93
16485: PUSH
16486: LD_INT 77
16488: PUSH
16489: LD_INT 107
16491: PUSH
16492: LD_INT 99
16494: PUSH
16495: LD_INT 123
16497: PUSH
16498: LD_INT 112
16500: PUSH
16501: LD_INT 140
16503: PUSH
16504: LD_INT 112
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: ST_TO_ADDR
// if attackTactic < 2 then
16517: LD_EXP 36
16521: PUSH
16522: LD_INT 2
16524: LESS
16525: IFFALSE 16550
// path := [ 131 , 136 , 140 , 112 ] ;
16527: LD_ADDR_VAR 0 4
16531: PUSH
16532: LD_INT 131
16534: PUSH
16535: LD_INT 136
16537: PUSH
16538: LD_INT 140
16540: PUSH
16541: LD_INT 112
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16550: LD_INT 10
16552: PPUSH
16553: CALL_OW 302
16557: IFFALSE 16673
// begin for i in tmp do
16559: LD_ADDR_VAR 0 1
16563: PUSH
16564: LD_VAR 0 2
16568: PUSH
16569: FOR_IN
16570: IFFALSE 16613
// if attackTactic < 2 then
16572: LD_EXP 36
16576: PUSH
16577: LD_INT 2
16579: LESS
16580: IFFALSE 16596
// ComEnterUnit ( i , ruteleprt ) else
16582: LD_VAR 0 1
16586: PPUSH
16587: LD_INT 10
16589: PPUSH
16590: CALL_OW 120
16594: GO 16611
// ComMoveXY ( i , 88 , 69 ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_INT 88
16603: PPUSH
16604: LD_INT 69
16606: PPUSH
16607: CALL_OW 111
16611: GO 16569
16613: POP
16614: POP
// p := 0 ;
16615: LD_ADDR_VAR 0 3
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16623: LD_INT 70
16625: PPUSH
16626: CALL_OW 67
// p := Inc ( p ) ;
16630: LD_ADDR_VAR 0 3
16634: PUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: CALL 77898 0 1
16644: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 12 ;
16645: LD_VAR 0 2
16649: PPUSH
16650: LD_INT 60
16652: PUSH
16653: EMPTY
16654: LIST
16655: PPUSH
16656: CALL_OW 72
16660: NOT
16661: PUSH
16662: LD_VAR 0 3
16666: PUSH
16667: LD_INT 12
16669: GREATER
16670: OR
16671: IFFALSE 16623
// end ; repeat wait ( 0 0$1 ) ;
16673: LD_INT 35
16675: PPUSH
16676: CALL_OW 67
// for i in tmp do
16680: LD_ADDR_VAR 0 1
16684: PUSH
16685: LD_VAR 0 2
16689: PUSH
16690: FOR_IN
16691: IFFALSE 16723
// if not IsOk ( i ) then
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 302
16702: NOT
16703: IFFALSE 16721
// tmp := tmp diff i ;
16705: LD_ADDR_VAR 0 2
16709: PUSH
16710: LD_VAR 0 2
16714: PUSH
16715: LD_VAR 0 1
16719: DIFF
16720: ST_TO_ADDR
16721: GO 16690
16723: POP
16724: POP
// AgressiveMove ( tmp , path ) ;
16725: LD_VAR 0 2
16729: PPUSH
16730: LD_VAR 0 4
16734: PPUSH
16735: CALL 79141 0 2
// until not tmp ;
16739: LD_VAR 0 2
16743: NOT
16744: IFFALSE 16673
// end ;
16746: PPOPN 4
16748: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16749: LD_INT 4
16751: PPUSH
16752: CALL_OW 303
16756: IFFALSE 16771
16758: GO 16760
16760: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16761: LD_INT 3
16763: PPUSH
16764: LD_INT 4
16766: PPUSH
16767: CALL 14866 0 2
16771: END
// every 0 0$1 do
16772: GO 16774
16774: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16775: LD_INT 3
16777: PPUSH
16778: LD_INT 91
16780: PPUSH
16781: LD_INT 3
16783: PPUSH
16784: CALL 12841 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16788: LD_INT 3
16790: PPUSH
16791: LD_INT 47
16793: PPUSH
16794: LD_INT 3
16796: PPUSH
16797: CALL 12841 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16801: LD_INT 3
16803: PPUSH
16804: LD_INT 129
16806: PPUSH
16807: LD_INT 3
16809: PPUSH
16810: CALL 12841 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16814: LD_INT 3
16816: PPUSH
16817: LD_INT 3
16819: PPUSH
16820: LD_INT 3
16822: PPUSH
16823: CALL 12841 0 3
// end ;
16827: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16828: LD_INT 22
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 21
16840: PUSH
16841: LD_INT 3
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 69
16856: IFFALSE 16925
16858: GO 16860
16860: DISABLE
// begin wait ( 0 0$40 ) ;
16861: LD_INT 1400
16863: PPUSH
16864: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16868: LD_INT 3
16870: PPUSH
16871: LD_INT 21
16873: PPUSH
16874: LD_INT 3
16876: PUSH
16877: LD_INT 4
16879: PUSH
16880: LD_INT 5
16882: PUSH
16883: LD_INT 6
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: LD_OWVAR 67
16896: ARRAY
16897: PPUSH
16898: LD_INT 46
16900: PUSH
16901: LD_INT 45
16903: PUSH
16904: LD_INT 44
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: LIST
16911: PPUSH
16912: LD_INT 3
16914: PPUSH
16915: LD_INT 3
16917: PPUSH
16918: LD_INT 24
16920: PPUSH
16921: CALL 14091 0 7
// end ;
16925: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16926: LD_EXP 20
16930: PUSH
16931: LD_INT 2
16933: EQUAL
16934: PUSH
16935: LD_INT 21
16937: PPUSH
16938: CALL_OW 255
16942: PUSH
16943: LD_INT 3
16945: EQUAL
16946: AND
16947: PUSH
16948: LD_INT 112
16950: PPUSH
16951: CALL_OW 255
16955: PUSH
16956: LD_INT 3
16958: EQUAL
16959: AND
16960: PUSH
16961: LD_INT 21
16963: PPUSH
16964: CALL_OW 302
16968: AND
16969: PUSH
16970: LD_INT 112
16972: PPUSH
16973: CALL_OW 302
16977: AND
16978: PUSH
16979: LD_INT 22
16981: PUSH
16982: LD_INT 3
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 21
16991: PUSH
16992: LD_INT 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 50
17001: PUSH
17002: EMPTY
17003: LIST
17004: PUSH
17005: LD_INT 3
17007: PUSH
17008: LD_INT 58
17010: PUSH
17011: EMPTY
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: PPUSH
17024: CALL_OW 69
17028: PUSH
17029: LD_INT 18
17031: PPUSH
17032: LD_INT 22
17034: PUSH
17035: LD_INT 3
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 21
17044: PUSH
17045: LD_INT 2
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 70
17060: PUSH
17061: LD_INT 0
17063: EQUAL
17064: DIFF
17065: AND
17066: IFFALSE 17192
17068: GO 17070
17070: DISABLE
// begin enable ;
17071: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17072: LD_INT 3
17074: PPUSH
17075: LD_INT 21
17077: PPUSH
17078: LD_INT 3
17080: PUSH
17081: LD_INT 4
17083: PUSH
17084: LD_INT 5
17086: PUSH
17087: LD_INT 6
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: LD_OWVAR 67
17100: ARRAY
17101: PPUSH
17102: LD_INT 46
17104: PUSH
17105: LD_INT 45
17107: PUSH
17108: LD_INT 44
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: PPUSH
17116: LD_INT 3
17118: PPUSH
17119: LD_INT 3
17121: PPUSH
17122: LD_INT 24
17124: PPUSH
17125: CALL 14091 0 7
// if russianTimeLapsers = 0 then
17129: LD_EXP 33
17133: PUSH
17134: LD_INT 0
17136: EQUAL
17137: IFFALSE 17192
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17139: LD_INT 3
17141: PPUSH
17142: LD_INT 112
17144: PPUSH
17145: LD_INT 1
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: LD_INT 2
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: PUSH
17163: LD_OWVAR 67
17167: ARRAY
17168: PPUSH
17169: LD_INT 49
17171: PUSH
17172: LD_INT 49
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PPUSH
17179: LD_INT 3
17181: PPUSH
17182: LD_INT 3
17184: PPUSH
17185: LD_INT 24
17187: PPUSH
17188: CALL 14091 0 7
// end ;
17192: END
// every 0 0$1 trigger arabianMines do var i ;
17193: LD_EXP 37
17197: IFFALSE 17318
17199: GO 17201
17201: DISABLE
17202: LD_INT 0
17204: PPUSH
// begin enable ;
17205: ENABLE
// for i in arabianMines do
17206: LD_ADDR_VAR 0 1
17210: PUSH
17211: LD_EXP 37
17215: PUSH
17216: FOR_IN
17217: IFFALSE 17316
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17219: LD_INT 22
17221: PUSH
17222: LD_INT 1
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 92
17231: PUSH
17232: LD_VAR 0 1
17236: PUSH
17237: LD_INT 1
17239: ARRAY
17240: PUSH
17241: LD_VAR 0 1
17245: PUSH
17246: LD_INT 2
17248: ARRAY
17249: PUSH
17250: LD_INT 3
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PPUSH
17263: CALL_OW 69
17267: IFFALSE 17314
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17269: LD_VAR 0 1
17273: PUSH
17274: LD_INT 1
17276: ARRAY
17277: PPUSH
17278: LD_VAR 0 1
17282: PUSH
17283: LD_INT 2
17285: ARRAY
17286: PPUSH
17287: LD_INT 5
17289: PPUSH
17290: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17294: LD_ADDR_EXP 37
17298: PUSH
17299: LD_EXP 37
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 3
17313: ST_TO_ADDR
// end ; end ;
17314: GO 17216
17316: POP
17317: POP
// end ;
17318: PPOPN 1
17320: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17321: LD_EXP 21
17325: PUSH
17326: LD_INT 4
17328: GREATEREQUAL
17329: PUSH
17330: LD_EXP 22
17334: PUSH
17335: LD_INT 12
17337: MOD
17338: PUSH
17339: LD_INT 0
17341: EQUAL
17342: AND
17343: IFFALSE 17457
17345: GO 17347
17347: DISABLE
17348: LD_INT 0
17350: PPUSH
17351: PPUSH
// begin enable ;
17352: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: LD_INT 122
17360: PUSH
17361: LD_INT 142
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 101
17370: PUSH
17371: LD_INT 127
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 104
17380: PUSH
17381: LD_INT 104
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 46
17390: PUSH
17391: LD_INT 81
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: LD_INT 1
17411: PPUSH
17412: LD_INT 4
17414: PPUSH
17415: CALL_OW 12
17419: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17420: LD_INT 10
17422: PPUSH
17423: LD_VAR 0 2
17427: PUSH
17428: LD_VAR 0 1
17432: ARRAY
17433: PUSH
17434: LD_INT 1
17436: ARRAY
17437: PPUSH
17438: LD_VAR 0 2
17442: PUSH
17443: LD_VAR 0 1
17447: ARRAY
17448: PUSH
17449: LD_INT 2
17451: ARRAY
17452: PPUSH
17453: CALL_OW 243
// end ; end_of_file
17457: PPOPN 2
17459: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17460: LD_INT 3
17462: PPUSH
17463: CALL_OW 301
17467: IFFALSE 17688
17469: GO 17471
17471: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17472: LD_EXP 27
17476: PPUSH
17477: LD_INT 50
17479: PUSH
17480: EMPTY
17481: LIST
17482: PPUSH
17483: CALL_OW 72
17487: IFFALSE 17496
// wait ( 0 0$10 ) ;
17489: LD_INT 350
17491: PPUSH
17492: CALL_OW 67
// DialogueOn ;
17496: CALL_OW 6
// if sciCounter = 0 then
17500: LD_EXP 28
17504: PUSH
17505: LD_INT 0
17507: EQUAL
17508: IFFALSE 17536
// begin Say ( JMM , D7a-JMM-1 ) ;
17510: LD_EXP 1
17514: PPUSH
17515: LD_STRING D7a-JMM-1
17517: PPUSH
17518: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17522: LD_EXP 15
17526: PPUSH
17527: LD_STRING D7a-Pow-1
17529: PPUSH
17530: CALL_OW 94
// end else
17534: GO 17680
// if sciCounter < 6 then
17536: LD_EXP 28
17540: PUSH
17541: LD_INT 6
17543: LESS
17544: IFFALSE 17572
// begin Say ( JMM , D7b-JMM-1 ) ;
17546: LD_EXP 1
17550: PPUSH
17551: LD_STRING D7b-JMM-1
17553: PPUSH
17554: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17558: LD_EXP 15
17562: PPUSH
17563: LD_STRING D7b-Pow-1
17565: PPUSH
17566: CALL_OW 94
// end else
17570: GO 17680
// begin Say ( JMM , D7c-JMM-1 ) ;
17572: LD_EXP 1
17576: PPUSH
17577: LD_STRING D7c-JMM-1
17579: PPUSH
17580: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17584: LD_EXP 15
17588: PPUSH
17589: LD_STRING D7c-Pow-1
17591: PPUSH
17592: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17596: LD_EXP 1
17600: PPUSH
17601: LD_STRING D7d-JMM-1
17603: PPUSH
17604: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17608: LD_EXP 15
17612: PPUSH
17613: LD_STRING D7d-Pow-1
17615: PPUSH
17616: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17620: LD_EXP 1
17624: PPUSH
17625: LD_STRING D7d-JMM-2
17627: PPUSH
17628: CALL_OW 88
// if askSiberite = 1 then
17632: LD_EXP 25
17636: PUSH
17637: LD_INT 1
17639: EQUAL
17640: IFFALSE 17656
// Say ( JMM , D7d-JMM-2a ) else
17642: LD_EXP 1
17646: PPUSH
17647: LD_STRING D7d-JMM-2a
17649: PPUSH
17650: CALL_OW 88
17654: GO 17668
// SayRadio ( Powell , D7d-Pow-2 ) ;
17656: LD_EXP 15
17660: PPUSH
17661: LD_STRING D7d-Pow-2
17663: PPUSH
17664: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17668: LD_EXP 15
17672: PPUSH
17673: LD_STRING D7d-Pow-2a
17675: PPUSH
17676: CALL_OW 94
// end ; DialogueOff ;
17680: CALL_OW 7
// FinishMission ;
17684: CALL 17689 0 0
// end ;
17688: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17689: LD_INT 0
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
// m1 := false ;
17695: LD_ADDR_VAR 0 2
17699: PUSH
17700: LD_INT 0
17702: ST_TO_ADDR
// m2 := false ;
17703: LD_ADDR_VAR 0 3
17707: PUSH
17708: LD_INT 0
17710: ST_TO_ADDR
// m3 := false ;
17711: LD_ADDR_VAR 0 4
17715: PUSH
17716: LD_INT 0
17718: ST_TO_ADDR
// if not westPathUsed then
17719: LD_EXP 42
17723: NOT
17724: IFFALSE 17733
// SetAchievement ( ACH_PATH ) ;
17726: LD_STRING ACH_PATH
17728: PPUSH
17729: CALL_OW 543
// if not rocketBuilded then
17733: LD_EXP 44
17737: NOT
17738: IFFALSE 17754
// begin wait ( 3 ) ;
17740: LD_INT 3
17742: PPUSH
17743: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17747: LD_STRING ACH_ROCKET
17749: PPUSH
17750: CALL_OW 543
// end ; if tick <= 40 40$00 then
17754: LD_OWVAR 1
17758: PUSH
17759: LD_INT 84000
17761: LESSEQUAL
17762: IFFALSE 17778
// begin wait ( 3 ) ;
17764: LD_INT 3
17766: PPUSH
17767: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17771: LD_STRING ACH_ASPEED_12
17773: PPUSH
17774: CALL_OW 543
// end ; if teleportExplored = 1 then
17778: LD_EXP 26
17782: PUSH
17783: LD_INT 1
17785: EQUAL
17786: IFFALSE 17808
// begin m1 := true ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_INT 1
17795: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17796: LD_STRING Teleport
17798: PPUSH
17799: LD_INT 1
17801: PPUSH
17802: CALL_OW 101
// end else
17806: GO 17819
// AddMedal ( Teleport , - 1 ) ;
17808: LD_STRING Teleport
17810: PPUSH
17811: LD_INT 1
17813: NEG
17814: PPUSH
17815: CALL_OW 101
// if sciCounter > 2 then
17819: LD_EXP 28
17823: PUSH
17824: LD_INT 2
17826: GREATER
17827: IFFALSE 17849
// begin m2 := true ;
17829: LD_ADDR_VAR 0 3
17833: PUSH
17834: LD_INT 1
17836: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17837: LD_STRING Materials
17839: PPUSH
17840: LD_INT 1
17842: PPUSH
17843: CALL_OW 101
// end else
17847: GO 17860
// AddMedal ( Materials , - 1 ) ;
17849: LD_STRING Materials
17851: PPUSH
17852: LD_INT 1
17854: NEG
17855: PPUSH
17856: CALL_OW 101
// if sciCounter >= 6 then
17860: LD_EXP 28
17864: PUSH
17865: LD_INT 6
17867: GREATEREQUAL
17868: IFFALSE 17900
// begin m3 := true ;
17870: LD_ADDR_VAR 0 4
17874: PUSH
17875: LD_INT 1
17877: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17878: LD_STRING Scientists
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17888: LD_INT 1
17890: PPUSH
17891: LD_STRING 12_SciDed_1
17893: PPUSH
17894: CALL_OW 39
// end else
17898: GO 17921
// begin AddMedal ( Scientists , - 1 ) ;
17900: LD_STRING Scientists
17902: PPUSH
17903: LD_INT 1
17905: NEG
17906: PPUSH
17907: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17911: LD_INT 0
17913: PPUSH
17914: LD_STRING 12_SciDed_1
17916: PPUSH
17917: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17921: LD_EXP 24
17925: PPUSH
17926: LD_STRING 12_MainDepositFake_1
17928: PPUSH
17929: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17933: LD_VAR 0 2
17937: PUSH
17938: LD_VAR 0 3
17942: AND
17943: PUSH
17944: LD_VAR 0 4
17948: AND
17949: PUSH
17950: LD_OWVAR 67
17954: PUSH
17955: LD_INT 3
17957: GREATEREQUAL
17958: AND
17959: IFFALSE 17971
// SetAchievementEX ( ACH_AMER , 12 ) ;
17961: LD_STRING ACH_AMER
17963: PPUSH
17964: LD_INT 12
17966: PPUSH
17967: CALL_OW 564
// GiveMedals ( MAIN ) ;
17971: LD_STRING MAIN
17973: PPUSH
17974: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17978: LD_INT 22
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 23
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 21
18000: PUSH
18001: LD_INT 1
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 2
18010: PUSH
18011: LD_INT 25
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 25
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 25
18033: PUSH
18034: LD_INT 3
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 25
18043: PUSH
18044: LD_INT 4
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 25
18053: PUSH
18054: LD_INT 5
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 25
18063: PUSH
18064: LD_INT 8
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: PPUSH
18091: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18095: LD_EXP 1
18099: PPUSH
18100: LD_EXP 39
18104: PUSH
18105: LD_STRING JMM
18107: STR
18108: PPUSH
18109: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18113: LD_EXP 7
18117: PPUSH
18118: LD_EXP 39
18122: PUSH
18123: LD_STRING Brown
18125: STR
18126: PPUSH
18127: CALL 12186 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18131: LD_EXP 3
18135: PPUSH
18136: LD_EXP 39
18140: PUSH
18141: LD_STRING Donaldson
18143: STR
18144: PPUSH
18145: CALL 12186 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18149: LD_EXP 4
18153: PPUSH
18154: LD_EXP 39
18158: PUSH
18159: LD_STRING Bobby
18161: STR
18162: PPUSH
18163: CALL 12186 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18167: LD_EXP 5
18171: PPUSH
18172: LD_EXP 39
18176: PUSH
18177: LD_STRING Cyrus
18179: STR
18180: PPUSH
18181: CALL 12186 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18185: LD_EXP 2
18189: PPUSH
18190: LD_EXP 39
18194: PUSH
18195: LD_STRING Lisa
18197: STR
18198: PPUSH
18199: CALL 12186 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18203: LD_EXP 12
18207: PPUSH
18208: LD_EXP 39
18212: PUSH
18213: LD_STRING Frank
18215: STR
18216: PPUSH
18217: CALL 12186 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18221: LD_EXP 13
18225: PPUSH
18226: LD_EXP 39
18230: PUSH
18231: LD_STRING Kikuchi
18233: STR
18234: PPUSH
18235: CALL 12186 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18239: LD_EXP 9
18243: PPUSH
18244: LD_EXP 39
18248: PUSH
18249: LD_STRING Houten
18251: STR
18252: PPUSH
18253: CALL 12186 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18257: LD_EXP 11
18261: PPUSH
18262: LD_EXP 39
18266: PUSH
18267: LD_STRING Gary
18269: STR
18270: PPUSH
18271: CALL 12186 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18275: LD_EXP 10
18279: PPUSH
18280: LD_EXP 39
18284: PUSH
18285: LD_STRING Cornell
18287: STR
18288: PPUSH
18289: CALL 12186 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18293: LD_EXP 6
18297: PPUSH
18298: LD_EXP 39
18302: PUSH
18303: LD_STRING Denis
18305: STR
18306: PPUSH
18307: CALL 12186 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18311: LD_EXP 8
18315: PPUSH
18316: LD_EXP 39
18320: PUSH
18321: LD_STRING Gladstone
18323: STR
18324: PPUSH
18325: CALL 12186 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18329: LD_INT 22
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 23
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 21
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 25
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 25
18374: PUSH
18375: LD_INT 2
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 25
18384: PUSH
18385: LD_INT 3
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 25
18394: PUSH
18395: LD_INT 4
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 25
18404: PUSH
18405: LD_INT 5
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 25
18414: PUSH
18415: LD_INT 8
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 69
18441: PUSH
18442: LD_EXP 1
18446: PUSH
18447: LD_EXP 7
18451: PUSH
18452: LD_EXP 3
18456: PUSH
18457: LD_EXP 4
18461: PUSH
18462: LD_EXP 5
18466: PUSH
18467: LD_EXP 2
18471: PUSH
18472: LD_EXP 12
18476: PUSH
18477: LD_EXP 8
18481: PUSH
18482: LD_EXP 13
18486: PUSH
18487: LD_EXP 6
18491: PUSH
18492: LD_EXP 9
18496: PUSH
18497: LD_EXP 11
18501: PUSH
18502: LD_EXP 10
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: DIFF
18522: PPUSH
18523: LD_STRING 12_other_survivors
18525: PPUSH
18526: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18530: LD_INT 22
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 23
18542: PUSH
18543: LD_INT 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 21
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 25
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 25
18575: PUSH
18576: LD_INT 2
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 25
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 25
18595: PUSH
18596: LD_INT 4
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 25
18605: PUSH
18606: LD_INT 5
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 25
18615: PUSH
18616: LD_INT 8
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: PPUSH
18638: CALL_OW 69
18642: PPUSH
18643: LD_STRING 12_kurt_squad
18645: PPUSH
18646: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18650: LD_EXP 14
18654: PPUSH
18655: LD_STRING 12_others
18657: PPUSH
18658: CALL_OW 38
// YouWin ;
18662: CALL_OW 103
// end ; end_of_file
18666: LD_VAR 0 1
18670: RET
// every 0 0$01 trigger ruAI do
18671: LD_EXP 34
18675: IFFALSE 18985
18677: GO 18679
18679: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18680: LD_INT 280
18682: PPUSH
18683: CALL_OW 67
// if cratesSpawned < 12 then
18687: LD_EXP 38
18691: PUSH
18692: LD_INT 12
18694: LESS
18695: IFFALSE 18747
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18697: LD_INT 105
18699: PPUSH
18700: LD_INT 350
18702: PPUSH
18703: CALL_OW 12
18707: PPUSH
18708: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18712: LD_INT 3
18714: PPUSH
18715: LD_INT 5
18717: PPUSH
18718: CALL_OW 12
18722: PPUSH
18723: LD_INT 21
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18733: LD_ADDR_EXP 38
18737: PUSH
18738: LD_EXP 38
18742: PUSH
18743: LD_INT 1
18745: PLUS
18746: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18747: LD_EXP 38
18751: PUSH
18752: LD_INT 12
18754: GREATEREQUAL
18755: PUSH
18756: LD_EXP 38
18760: PUSH
18761: LD_INT 32
18763: LESS
18764: AND
18765: IFFALSE 18817
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18767: LD_INT 420
18769: PPUSH
18770: LD_INT 700
18772: PPUSH
18773: CALL_OW 12
18777: PPUSH
18778: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18782: LD_INT 3
18784: PPUSH
18785: LD_INT 5
18787: PPUSH
18788: CALL_OW 12
18792: PPUSH
18793: LD_INT 21
18795: PPUSH
18796: LD_INT 1
18798: PPUSH
18799: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18803: LD_ADDR_EXP 38
18807: PUSH
18808: LD_EXP 38
18812: PUSH
18813: LD_INT 1
18815: PLUS
18816: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18817: LD_EXP 38
18821: PUSH
18822: LD_INT 32
18824: GREATEREQUAL
18825: IFFALSE 18899
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18827: LD_INT 21
18829: PPUSH
18830: CALL_OW 435
18834: PUSH
18835: LD_INT 14
18837: LESS
18838: IFFALSE 18849
// wait ( 0 0$10 ) else
18840: LD_INT 350
18842: PPUSH
18843: CALL_OW 67
18847: GO 18864
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18849: LD_INT 1750
18851: PPUSH
18852: LD_INT 3150
18854: PPUSH
18855: CALL_OW 12
18859: PPUSH
18860: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18864: LD_INT 2
18866: PPUSH
18867: LD_INT 5
18869: PPUSH
18870: CALL_OW 12
18874: PPUSH
18875: LD_INT 21
18877: PPUSH
18878: LD_INT 1
18880: PPUSH
18881: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18885: LD_ADDR_EXP 38
18889: PUSH
18890: LD_EXP 38
18894: PUSH
18895: LD_INT 1
18897: PLUS
18898: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18899: LD_EXP 38
18903: PUSH
18904: LD_INT 110
18906: GREATEREQUAL
18907: IFFALSE 18981
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18909: LD_INT 21
18911: PPUSH
18912: CALL_OW 435
18916: PUSH
18917: LD_INT 14
18919: LESS
18920: IFFALSE 18931
// wait ( 0 0$20 ) else
18922: LD_INT 700
18924: PPUSH
18925: CALL_OW 67
18929: GO 18946
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18931: LD_INT 2450
18933: PPUSH
18934: LD_INT 3850
18936: PPUSH
18937: CALL_OW 12
18941: PPUSH
18942: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18946: LD_INT 1
18948: PPUSH
18949: LD_INT 5
18951: PPUSH
18952: CALL_OW 12
18956: PPUSH
18957: LD_INT 21
18959: PPUSH
18960: LD_INT 1
18962: PPUSH
18963: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18967: LD_ADDR_EXP 38
18971: PUSH
18972: LD_EXP 38
18976: PUSH
18977: LD_INT 1
18979: PLUS
18980: ST_TO_ADDR
// end ; until false ;
18981: LD_INT 0
18983: IFFALSE 18680
// end ; end_of_file end_of_file
18985: END
// export globalGameSaveCounter ; every 0 0$1 do
18986: GO 18988
18988: DISABLE
// begin enable ;
18989: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18990: LD_STRING updateTimer(
18992: PUSH
18993: LD_OWVAR 1
18997: STR
18998: PUSH
18999: LD_STRING );
19001: STR
19002: PPUSH
19003: CALL_OW 559
// end ;
19007: END
// every 0 0$1 do
19008: GO 19010
19010: DISABLE
// begin globalGameSaveCounter := 0 ;
19011: LD_ADDR_EXP 45
19015: PUSH
19016: LD_INT 0
19018: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19019: LD_STRING setGameSaveCounter(0)
19021: PPUSH
19022: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19026: LD_STRING initStreamRollete();
19028: PPUSH
19029: CALL_OW 559
// InitStreamMode ;
19033: CALL 20359 0 0
// DefineStreamItems ( false ) ;
19037: LD_INT 0
19039: PPUSH
19040: CALL 20823 0 1
// end ;
19044: END
// export function SOS_MapStart ( ) ; begin
19045: LD_INT 0
19047: PPUSH
// if streamModeActive then
19048: LD_EXP 46
19052: IFFALSE 19061
// DefineStreamItems ( true ) ;
19054: LD_INT 1
19056: PPUSH
19057: CALL 20823 0 1
// UpdateLuaVariables ( ) ;
19061: CALL 19078 0 0
// UpdateFactoryWaypoints ( ) ;
19065: CALL 33684 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19069: CALL 33941 0 0
// end ;
19073: LD_VAR 0 1
19077: RET
// function UpdateLuaVariables ( ) ; begin
19078: LD_INT 0
19080: PPUSH
// if globalGameSaveCounter then
19081: LD_EXP 45
19085: IFFALSE 19119
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19087: LD_ADDR_EXP 45
19091: PUSH
19092: LD_EXP 45
19096: PPUSH
19097: CALL 77898 0 1
19101: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19102: LD_STRING setGameSaveCounter(
19104: PUSH
19105: LD_EXP 45
19109: STR
19110: PUSH
19111: LD_STRING )
19113: STR
19114: PPUSH
19115: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19119: LD_STRING setGameDifficulty(
19121: PUSH
19122: LD_OWVAR 67
19126: STR
19127: PUSH
19128: LD_STRING )
19130: STR
19131: PPUSH
19132: CALL_OW 559
// end ;
19136: LD_VAR 0 1
19140: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19141: LD_INT 0
19143: PPUSH
// if p2 = stream_mode then
19144: LD_VAR 0 2
19148: PUSH
19149: LD_INT 100
19151: EQUAL
19152: IFFALSE 20155
// begin if not StreamModeActive then
19154: LD_EXP 46
19158: NOT
19159: IFFALSE 19169
// StreamModeActive := true ;
19161: LD_ADDR_EXP 46
19165: PUSH
19166: LD_INT 1
19168: ST_TO_ADDR
// if p3 = 0 then
19169: LD_VAR 0 3
19173: PUSH
19174: LD_INT 0
19176: EQUAL
19177: IFFALSE 19183
// InitStreamMode ;
19179: CALL 20359 0 0
// if p3 = 1 then
19183: LD_VAR 0 3
19187: PUSH
19188: LD_INT 1
19190: EQUAL
19191: IFFALSE 19201
// sRocket := true ;
19193: LD_ADDR_EXP 51
19197: PUSH
19198: LD_INT 1
19200: ST_TO_ADDR
// if p3 = 2 then
19201: LD_VAR 0 3
19205: PUSH
19206: LD_INT 2
19208: EQUAL
19209: IFFALSE 19219
// sSpeed := true ;
19211: LD_ADDR_EXP 50
19215: PUSH
19216: LD_INT 1
19218: ST_TO_ADDR
// if p3 = 3 then
19219: LD_VAR 0 3
19223: PUSH
19224: LD_INT 3
19226: EQUAL
19227: IFFALSE 19237
// sEngine := true ;
19229: LD_ADDR_EXP 52
19233: PUSH
19234: LD_INT 1
19236: ST_TO_ADDR
// if p3 = 4 then
19237: LD_VAR 0 3
19241: PUSH
19242: LD_INT 4
19244: EQUAL
19245: IFFALSE 19255
// sSpec := true ;
19247: LD_ADDR_EXP 49
19251: PUSH
19252: LD_INT 1
19254: ST_TO_ADDR
// if p3 = 5 then
19255: LD_VAR 0 3
19259: PUSH
19260: LD_INT 5
19262: EQUAL
19263: IFFALSE 19273
// sLevel := true ;
19265: LD_ADDR_EXP 53
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// if p3 = 6 then
19273: LD_VAR 0 3
19277: PUSH
19278: LD_INT 6
19280: EQUAL
19281: IFFALSE 19291
// sArmoury := true ;
19283: LD_ADDR_EXP 54
19287: PUSH
19288: LD_INT 1
19290: ST_TO_ADDR
// if p3 = 7 then
19291: LD_VAR 0 3
19295: PUSH
19296: LD_INT 7
19298: EQUAL
19299: IFFALSE 19309
// sRadar := true ;
19301: LD_ADDR_EXP 55
19305: PUSH
19306: LD_INT 1
19308: ST_TO_ADDR
// if p3 = 8 then
19309: LD_VAR 0 3
19313: PUSH
19314: LD_INT 8
19316: EQUAL
19317: IFFALSE 19327
// sBunker := true ;
19319: LD_ADDR_EXP 56
19323: PUSH
19324: LD_INT 1
19326: ST_TO_ADDR
// if p3 = 9 then
19327: LD_VAR 0 3
19331: PUSH
19332: LD_INT 9
19334: EQUAL
19335: IFFALSE 19345
// sHack := true ;
19337: LD_ADDR_EXP 57
19341: PUSH
19342: LD_INT 1
19344: ST_TO_ADDR
// if p3 = 10 then
19345: LD_VAR 0 3
19349: PUSH
19350: LD_INT 10
19352: EQUAL
19353: IFFALSE 19363
// sFire := true ;
19355: LD_ADDR_EXP 58
19359: PUSH
19360: LD_INT 1
19362: ST_TO_ADDR
// if p3 = 11 then
19363: LD_VAR 0 3
19367: PUSH
19368: LD_INT 11
19370: EQUAL
19371: IFFALSE 19381
// sRefresh := true ;
19373: LD_ADDR_EXP 59
19377: PUSH
19378: LD_INT 1
19380: ST_TO_ADDR
// if p3 = 12 then
19381: LD_VAR 0 3
19385: PUSH
19386: LD_INT 12
19388: EQUAL
19389: IFFALSE 19399
// sExp := true ;
19391: LD_ADDR_EXP 60
19395: PUSH
19396: LD_INT 1
19398: ST_TO_ADDR
// if p3 = 13 then
19399: LD_VAR 0 3
19403: PUSH
19404: LD_INT 13
19406: EQUAL
19407: IFFALSE 19417
// sDepot := true ;
19409: LD_ADDR_EXP 61
19413: PUSH
19414: LD_INT 1
19416: ST_TO_ADDR
// if p3 = 14 then
19417: LD_VAR 0 3
19421: PUSH
19422: LD_INT 14
19424: EQUAL
19425: IFFALSE 19435
// sFlag := true ;
19427: LD_ADDR_EXP 62
19431: PUSH
19432: LD_INT 1
19434: ST_TO_ADDR
// if p3 = 15 then
19435: LD_VAR 0 3
19439: PUSH
19440: LD_INT 15
19442: EQUAL
19443: IFFALSE 19453
// sKamikadze := true ;
19445: LD_ADDR_EXP 70
19449: PUSH
19450: LD_INT 1
19452: ST_TO_ADDR
// if p3 = 16 then
19453: LD_VAR 0 3
19457: PUSH
19458: LD_INT 16
19460: EQUAL
19461: IFFALSE 19471
// sTroll := true ;
19463: LD_ADDR_EXP 71
19467: PUSH
19468: LD_INT 1
19470: ST_TO_ADDR
// if p3 = 17 then
19471: LD_VAR 0 3
19475: PUSH
19476: LD_INT 17
19478: EQUAL
19479: IFFALSE 19489
// sSlow := true ;
19481: LD_ADDR_EXP 72
19485: PUSH
19486: LD_INT 1
19488: ST_TO_ADDR
// if p3 = 18 then
19489: LD_VAR 0 3
19493: PUSH
19494: LD_INT 18
19496: EQUAL
19497: IFFALSE 19507
// sLack := true ;
19499: LD_ADDR_EXP 73
19503: PUSH
19504: LD_INT 1
19506: ST_TO_ADDR
// if p3 = 19 then
19507: LD_VAR 0 3
19511: PUSH
19512: LD_INT 19
19514: EQUAL
19515: IFFALSE 19525
// sTank := true ;
19517: LD_ADDR_EXP 75
19521: PUSH
19522: LD_INT 1
19524: ST_TO_ADDR
// if p3 = 20 then
19525: LD_VAR 0 3
19529: PUSH
19530: LD_INT 20
19532: EQUAL
19533: IFFALSE 19543
// sRemote := true ;
19535: LD_ADDR_EXP 76
19539: PUSH
19540: LD_INT 1
19542: ST_TO_ADDR
// if p3 = 21 then
19543: LD_VAR 0 3
19547: PUSH
19548: LD_INT 21
19550: EQUAL
19551: IFFALSE 19561
// sPowell := true ;
19553: LD_ADDR_EXP 77
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// if p3 = 22 then
19561: LD_VAR 0 3
19565: PUSH
19566: LD_INT 22
19568: EQUAL
19569: IFFALSE 19579
// sTeleport := true ;
19571: LD_ADDR_EXP 80
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// if p3 = 23 then
19579: LD_VAR 0 3
19583: PUSH
19584: LD_INT 23
19586: EQUAL
19587: IFFALSE 19597
// sOilTower := true ;
19589: LD_ADDR_EXP 82
19593: PUSH
19594: LD_INT 1
19596: ST_TO_ADDR
// if p3 = 24 then
19597: LD_VAR 0 3
19601: PUSH
19602: LD_INT 24
19604: EQUAL
19605: IFFALSE 19615
// sShovel := true ;
19607: LD_ADDR_EXP 83
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// if p3 = 25 then
19615: LD_VAR 0 3
19619: PUSH
19620: LD_INT 25
19622: EQUAL
19623: IFFALSE 19633
// sSheik := true ;
19625: LD_ADDR_EXP 84
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if p3 = 26 then
19633: LD_VAR 0 3
19637: PUSH
19638: LD_INT 26
19640: EQUAL
19641: IFFALSE 19651
// sEarthquake := true ;
19643: LD_ADDR_EXP 86
19647: PUSH
19648: LD_INT 1
19650: ST_TO_ADDR
// if p3 = 27 then
19651: LD_VAR 0 3
19655: PUSH
19656: LD_INT 27
19658: EQUAL
19659: IFFALSE 19669
// sAI := true ;
19661: LD_ADDR_EXP 87
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 28 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 28
19676: EQUAL
19677: IFFALSE 19687
// sCargo := true ;
19679: LD_ADDR_EXP 90
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if p3 = 29 then
19687: LD_VAR 0 3
19691: PUSH
19692: LD_INT 29
19694: EQUAL
19695: IFFALSE 19705
// sDLaser := true ;
19697: LD_ADDR_EXP 91
19701: PUSH
19702: LD_INT 1
19704: ST_TO_ADDR
// if p3 = 30 then
19705: LD_VAR 0 3
19709: PUSH
19710: LD_INT 30
19712: EQUAL
19713: IFFALSE 19723
// sExchange := true ;
19715: LD_ADDR_EXP 92
19719: PUSH
19720: LD_INT 1
19722: ST_TO_ADDR
// if p3 = 31 then
19723: LD_VAR 0 3
19727: PUSH
19728: LD_INT 31
19730: EQUAL
19731: IFFALSE 19741
// sFac := true ;
19733: LD_ADDR_EXP 93
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if p3 = 32 then
19741: LD_VAR 0 3
19745: PUSH
19746: LD_INT 32
19748: EQUAL
19749: IFFALSE 19759
// sPower := true ;
19751: LD_ADDR_EXP 94
19755: PUSH
19756: LD_INT 1
19758: ST_TO_ADDR
// if p3 = 33 then
19759: LD_VAR 0 3
19763: PUSH
19764: LD_INT 33
19766: EQUAL
19767: IFFALSE 19777
// sRandom := true ;
19769: LD_ADDR_EXP 95
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// if p3 = 34 then
19777: LD_VAR 0 3
19781: PUSH
19782: LD_INT 34
19784: EQUAL
19785: IFFALSE 19795
// sShield := true ;
19787: LD_ADDR_EXP 96
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
// if p3 = 35 then
19795: LD_VAR 0 3
19799: PUSH
19800: LD_INT 35
19802: EQUAL
19803: IFFALSE 19813
// sTime := true ;
19805: LD_ADDR_EXP 97
19809: PUSH
19810: LD_INT 1
19812: ST_TO_ADDR
// if p3 = 36 then
19813: LD_VAR 0 3
19817: PUSH
19818: LD_INT 36
19820: EQUAL
19821: IFFALSE 19831
// sTools := true ;
19823: LD_ADDR_EXP 98
19827: PUSH
19828: LD_INT 1
19830: ST_TO_ADDR
// if p3 = 101 then
19831: LD_VAR 0 3
19835: PUSH
19836: LD_INT 101
19838: EQUAL
19839: IFFALSE 19849
// sSold := true ;
19841: LD_ADDR_EXP 63
19845: PUSH
19846: LD_INT 1
19848: ST_TO_ADDR
// if p3 = 102 then
19849: LD_VAR 0 3
19853: PUSH
19854: LD_INT 102
19856: EQUAL
19857: IFFALSE 19867
// sDiff := true ;
19859: LD_ADDR_EXP 64
19863: PUSH
19864: LD_INT 1
19866: ST_TO_ADDR
// if p3 = 103 then
19867: LD_VAR 0 3
19871: PUSH
19872: LD_INT 103
19874: EQUAL
19875: IFFALSE 19885
// sFog := true ;
19877: LD_ADDR_EXP 67
19881: PUSH
19882: LD_INT 1
19884: ST_TO_ADDR
// if p3 = 104 then
19885: LD_VAR 0 3
19889: PUSH
19890: LD_INT 104
19892: EQUAL
19893: IFFALSE 19903
// sReset := true ;
19895: LD_ADDR_EXP 68
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// if p3 = 105 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 105
19910: EQUAL
19911: IFFALSE 19921
// sSun := true ;
19913: LD_ADDR_EXP 69
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 106 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 106
19928: EQUAL
19929: IFFALSE 19939
// sTiger := true ;
19931: LD_ADDR_EXP 65
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 107 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 107
19946: EQUAL
19947: IFFALSE 19957
// sBomb := true ;
19949: LD_ADDR_EXP 66
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 108 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 108
19964: EQUAL
19965: IFFALSE 19975
// sWound := true ;
19967: LD_ADDR_EXP 74
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 109 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 109
19982: EQUAL
19983: IFFALSE 19993
// sBetray := true ;
19985: LD_ADDR_EXP 78
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 110 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 110
20000: EQUAL
20001: IFFALSE 20011
// sContamin := true ;
20003: LD_ADDR_EXP 79
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 111 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 111
20018: EQUAL
20019: IFFALSE 20029
// sOil := true ;
20021: LD_ADDR_EXP 81
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 112 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 112
20036: EQUAL
20037: IFFALSE 20047
// sStu := true ;
20039: LD_ADDR_EXP 85
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 113 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 113
20054: EQUAL
20055: IFFALSE 20065
// sBazooka := true ;
20057: LD_ADDR_EXP 88
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 114 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 114
20072: EQUAL
20073: IFFALSE 20083
// sMortar := true ;
20075: LD_ADDR_EXP 89
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 115 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 115
20090: EQUAL
20091: IFFALSE 20101
// sRanger := true ;
20093: LD_ADDR_EXP 99
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 116 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 116
20108: EQUAL
20109: IFFALSE 20119
// sComputer := true ;
20111: LD_ADDR_EXP 100
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 117 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 117
20126: EQUAL
20127: IFFALSE 20137
// s30 := true ;
20129: LD_ADDR_EXP 101
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 118 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 118
20144: EQUAL
20145: IFFALSE 20155
// s60 := true ;
20147: LD_ADDR_EXP 102
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// end ; if p2 = hack_mode then
20155: LD_VAR 0 2
20159: PUSH
20160: LD_INT 101
20162: EQUAL
20163: IFFALSE 20291
// begin case p3 of 1 :
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 1
20172: DOUBLE
20173: EQUAL
20174: IFTRUE 20178
20176: GO 20185
20178: POP
// hHackUnlimitedResources ; 2 :
20179: CALL 32430 0 0
20183: GO 20291
20185: LD_INT 2
20187: DOUBLE
20188: EQUAL
20189: IFTRUE 20193
20191: GO 20200
20193: POP
// hHackSetLevel10 ; 3 :
20194: CALL 32563 0 0
20198: GO 20291
20200: LD_INT 3
20202: DOUBLE
20203: EQUAL
20204: IFTRUE 20208
20206: GO 20215
20208: POP
// hHackSetLevel10YourUnits ; 4 :
20209: CALL 32648 0 0
20213: GO 20291
20215: LD_INT 4
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20230
20223: POP
// hHackInvincible ; 5 :
20224: CALL 33096 0 0
20228: GO 20291
20230: LD_INT 5
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20245
20238: POP
// hHackInvisible ; 6 :
20239: CALL 33207 0 0
20243: GO 20291
20245: LD_INT 6
20247: DOUBLE
20248: EQUAL
20249: IFTRUE 20253
20251: GO 20260
20253: POP
// hHackChangeYourSide ; 7 :
20254: CALL 33264 0 0
20258: GO 20291
20260: LD_INT 7
20262: DOUBLE
20263: EQUAL
20264: IFTRUE 20268
20266: GO 20275
20268: POP
// hHackChangeUnitSide ; 8 :
20269: CALL 33306 0 0
20273: GO 20291
20275: LD_INT 8
20277: DOUBLE
20278: EQUAL
20279: IFTRUE 20283
20281: GO 20290
20283: POP
// hHackFog ; end ;
20284: CALL 33407 0 0
20288: GO 20291
20290: POP
// end ; if p2 = game_save_mode then
20291: LD_VAR 0 2
20295: PUSH
20296: LD_INT 102
20298: EQUAL
20299: IFFALSE 20354
// begin if p3 = 1 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 1
20308: EQUAL
20309: IFFALSE 20321
// globalGameSaveCounter := p4 ;
20311: LD_ADDR_EXP 45
20315: PUSH
20316: LD_VAR 0 4
20320: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 2
20328: EQUAL
20329: PUSH
20330: LD_EXP 45
20334: AND
20335: IFFALSE 20354
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20337: LD_STRING setGameSaveCounter(
20339: PUSH
20340: LD_EXP 45
20344: STR
20345: PUSH
20346: LD_STRING )
20348: STR
20349: PPUSH
20350: CALL_OW 559
// end ; end ;
20354: LD_VAR 0 7
20358: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20359: LD_INT 0
20361: PPUSH
// streamModeActive := false ;
20362: LD_ADDR_EXP 46
20366: PUSH
20367: LD_INT 0
20369: ST_TO_ADDR
// normalCounter := 36 ;
20370: LD_ADDR_EXP 47
20374: PUSH
20375: LD_INT 36
20377: ST_TO_ADDR
// hardcoreCounter := 18 ;
20378: LD_ADDR_EXP 48
20382: PUSH
20383: LD_INT 18
20385: ST_TO_ADDR
// sRocket := false ;
20386: LD_ADDR_EXP 51
20390: PUSH
20391: LD_INT 0
20393: ST_TO_ADDR
// sSpeed := false ;
20394: LD_ADDR_EXP 50
20398: PUSH
20399: LD_INT 0
20401: ST_TO_ADDR
// sEngine := false ;
20402: LD_ADDR_EXP 52
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// sSpec := false ;
20410: LD_ADDR_EXP 49
20414: PUSH
20415: LD_INT 0
20417: ST_TO_ADDR
// sLevel := false ;
20418: LD_ADDR_EXP 53
20422: PUSH
20423: LD_INT 0
20425: ST_TO_ADDR
// sArmoury := false ;
20426: LD_ADDR_EXP 54
20430: PUSH
20431: LD_INT 0
20433: ST_TO_ADDR
// sRadar := false ;
20434: LD_ADDR_EXP 55
20438: PUSH
20439: LD_INT 0
20441: ST_TO_ADDR
// sBunker := false ;
20442: LD_ADDR_EXP 56
20446: PUSH
20447: LD_INT 0
20449: ST_TO_ADDR
// sHack := false ;
20450: LD_ADDR_EXP 57
20454: PUSH
20455: LD_INT 0
20457: ST_TO_ADDR
// sFire := false ;
20458: LD_ADDR_EXP 58
20462: PUSH
20463: LD_INT 0
20465: ST_TO_ADDR
// sRefresh := false ;
20466: LD_ADDR_EXP 59
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// sExp := false ;
20474: LD_ADDR_EXP 60
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// sDepot := false ;
20482: LD_ADDR_EXP 61
20486: PUSH
20487: LD_INT 0
20489: ST_TO_ADDR
// sFlag := false ;
20490: LD_ADDR_EXP 62
20494: PUSH
20495: LD_INT 0
20497: ST_TO_ADDR
// sKamikadze := false ;
20498: LD_ADDR_EXP 70
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// sTroll := false ;
20506: LD_ADDR_EXP 71
20510: PUSH
20511: LD_INT 0
20513: ST_TO_ADDR
// sSlow := false ;
20514: LD_ADDR_EXP 72
20518: PUSH
20519: LD_INT 0
20521: ST_TO_ADDR
// sLack := false ;
20522: LD_ADDR_EXP 73
20526: PUSH
20527: LD_INT 0
20529: ST_TO_ADDR
// sTank := false ;
20530: LD_ADDR_EXP 75
20534: PUSH
20535: LD_INT 0
20537: ST_TO_ADDR
// sRemote := false ;
20538: LD_ADDR_EXP 76
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// sPowell := false ;
20546: LD_ADDR_EXP 77
20550: PUSH
20551: LD_INT 0
20553: ST_TO_ADDR
// sTeleport := false ;
20554: LD_ADDR_EXP 80
20558: PUSH
20559: LD_INT 0
20561: ST_TO_ADDR
// sOilTower := false ;
20562: LD_ADDR_EXP 82
20566: PUSH
20567: LD_INT 0
20569: ST_TO_ADDR
// sShovel := false ;
20570: LD_ADDR_EXP 83
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// sSheik := false ;
20578: LD_ADDR_EXP 84
20582: PUSH
20583: LD_INT 0
20585: ST_TO_ADDR
// sEarthquake := false ;
20586: LD_ADDR_EXP 86
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// sAI := false ;
20594: LD_ADDR_EXP 87
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
// sCargo := false ;
20602: LD_ADDR_EXP 90
20606: PUSH
20607: LD_INT 0
20609: ST_TO_ADDR
// sDLaser := false ;
20610: LD_ADDR_EXP 91
20614: PUSH
20615: LD_INT 0
20617: ST_TO_ADDR
// sExchange := false ;
20618: LD_ADDR_EXP 92
20622: PUSH
20623: LD_INT 0
20625: ST_TO_ADDR
// sFac := false ;
20626: LD_ADDR_EXP 93
20630: PUSH
20631: LD_INT 0
20633: ST_TO_ADDR
// sPower := false ;
20634: LD_ADDR_EXP 94
20638: PUSH
20639: LD_INT 0
20641: ST_TO_ADDR
// sRandom := false ;
20642: LD_ADDR_EXP 95
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
// sShield := false ;
20650: LD_ADDR_EXP 96
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// sTime := false ;
20658: LD_ADDR_EXP 97
20662: PUSH
20663: LD_INT 0
20665: ST_TO_ADDR
// sTools := false ;
20666: LD_ADDR_EXP 98
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// sSold := false ;
20674: LD_ADDR_EXP 63
20678: PUSH
20679: LD_INT 0
20681: ST_TO_ADDR
// sDiff := false ;
20682: LD_ADDR_EXP 64
20686: PUSH
20687: LD_INT 0
20689: ST_TO_ADDR
// sFog := false ;
20690: LD_ADDR_EXP 67
20694: PUSH
20695: LD_INT 0
20697: ST_TO_ADDR
// sReset := false ;
20698: LD_ADDR_EXP 68
20702: PUSH
20703: LD_INT 0
20705: ST_TO_ADDR
// sSun := false ;
20706: LD_ADDR_EXP 69
20710: PUSH
20711: LD_INT 0
20713: ST_TO_ADDR
// sTiger := false ;
20714: LD_ADDR_EXP 65
20718: PUSH
20719: LD_INT 0
20721: ST_TO_ADDR
// sBomb := false ;
20722: LD_ADDR_EXP 66
20726: PUSH
20727: LD_INT 0
20729: ST_TO_ADDR
// sWound := false ;
20730: LD_ADDR_EXP 74
20734: PUSH
20735: LD_INT 0
20737: ST_TO_ADDR
// sBetray := false ;
20738: LD_ADDR_EXP 78
20742: PUSH
20743: LD_INT 0
20745: ST_TO_ADDR
// sContamin := false ;
20746: LD_ADDR_EXP 79
20750: PUSH
20751: LD_INT 0
20753: ST_TO_ADDR
// sOil := false ;
20754: LD_ADDR_EXP 81
20758: PUSH
20759: LD_INT 0
20761: ST_TO_ADDR
// sStu := false ;
20762: LD_ADDR_EXP 85
20766: PUSH
20767: LD_INT 0
20769: ST_TO_ADDR
// sBazooka := false ;
20770: LD_ADDR_EXP 88
20774: PUSH
20775: LD_INT 0
20777: ST_TO_ADDR
// sMortar := false ;
20778: LD_ADDR_EXP 89
20782: PUSH
20783: LD_INT 0
20785: ST_TO_ADDR
// sRanger := false ;
20786: LD_ADDR_EXP 99
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// sComputer := false ;
20794: LD_ADDR_EXP 100
20798: PUSH
20799: LD_INT 0
20801: ST_TO_ADDR
// s30 := false ;
20802: LD_ADDR_EXP 101
20806: PUSH
20807: LD_INT 0
20809: ST_TO_ADDR
// s60 := false ;
20810: LD_ADDR_EXP 102
20814: PUSH
20815: LD_INT 0
20817: ST_TO_ADDR
// end ;
20818: LD_VAR 0 1
20822: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20823: LD_INT 0
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
// result := [ ] ;
20832: LD_ADDR_VAR 0 2
20836: PUSH
20837: EMPTY
20838: ST_TO_ADDR
// if campaign_id = 1 then
20839: LD_OWVAR 69
20843: PUSH
20844: LD_INT 1
20846: EQUAL
20847: IFFALSE 24013
// begin case mission_number of 1 :
20849: LD_OWVAR 70
20853: PUSH
20854: LD_INT 1
20856: DOUBLE
20857: EQUAL
20858: IFTRUE 20862
20860: GO 20938
20862: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20863: LD_ADDR_VAR 0 2
20867: PUSH
20868: LD_INT 2
20870: PUSH
20871: LD_INT 4
20873: PUSH
20874: LD_INT 11
20876: PUSH
20877: LD_INT 12
20879: PUSH
20880: LD_INT 15
20882: PUSH
20883: LD_INT 16
20885: PUSH
20886: LD_INT 22
20888: PUSH
20889: LD_INT 23
20891: PUSH
20892: LD_INT 26
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 101
20908: PUSH
20909: LD_INT 102
20911: PUSH
20912: LD_INT 106
20914: PUSH
20915: LD_INT 116
20917: PUSH
20918: LD_INT 117
20920: PUSH
20921: LD_INT 118
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: ST_TO_ADDR
20936: GO 24011
20938: LD_INT 2
20940: DOUBLE
20941: EQUAL
20942: IFTRUE 20946
20944: GO 21030
20946: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20947: LD_ADDR_VAR 0 2
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 4
20957: PUSH
20958: LD_INT 11
20960: PUSH
20961: LD_INT 12
20963: PUSH
20964: LD_INT 15
20966: PUSH
20967: LD_INT 16
20969: PUSH
20970: LD_INT 22
20972: PUSH
20973: LD_INT 23
20975: PUSH
20976: LD_INT 26
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 101
20992: PUSH
20993: LD_INT 102
20995: PUSH
20996: LD_INT 105
20998: PUSH
20999: LD_INT 106
21001: PUSH
21002: LD_INT 108
21004: PUSH
21005: LD_INT 116
21007: PUSH
21008: LD_INT 117
21010: PUSH
21011: LD_INT 118
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: ST_TO_ADDR
21028: GO 24011
21030: LD_INT 3
21032: DOUBLE
21033: EQUAL
21034: IFTRUE 21038
21036: GO 21126
21038: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21039: LD_ADDR_VAR 0 2
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: LD_INT 4
21049: PUSH
21050: LD_INT 5
21052: PUSH
21053: LD_INT 11
21055: PUSH
21056: LD_INT 12
21058: PUSH
21059: LD_INT 15
21061: PUSH
21062: LD_INT 16
21064: PUSH
21065: LD_INT 22
21067: PUSH
21068: LD_INT 26
21070: PUSH
21071: LD_INT 36
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 101
21088: PUSH
21089: LD_INT 102
21091: PUSH
21092: LD_INT 105
21094: PUSH
21095: LD_INT 106
21097: PUSH
21098: LD_INT 108
21100: PUSH
21101: LD_INT 116
21103: PUSH
21104: LD_INT 117
21106: PUSH
21107: LD_INT 118
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: ST_TO_ADDR
21124: GO 24011
21126: LD_INT 4
21128: DOUBLE
21129: EQUAL
21130: IFTRUE 21134
21132: GO 21230
21134: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21135: LD_ADDR_VAR 0 2
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: LD_INT 4
21145: PUSH
21146: LD_INT 5
21148: PUSH
21149: LD_INT 8
21151: PUSH
21152: LD_INT 11
21154: PUSH
21155: LD_INT 12
21157: PUSH
21158: LD_INT 15
21160: PUSH
21161: LD_INT 16
21163: PUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 23
21169: PUSH
21170: LD_INT 26
21172: PUSH
21173: LD_INT 36
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 101
21192: PUSH
21193: LD_INT 102
21195: PUSH
21196: LD_INT 105
21198: PUSH
21199: LD_INT 106
21201: PUSH
21202: LD_INT 108
21204: PUSH
21205: LD_INT 116
21207: PUSH
21208: LD_INT 117
21210: PUSH
21211: LD_INT 118
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: ST_TO_ADDR
21228: GO 24011
21230: LD_INT 5
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21350
21238: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 4
21249: PUSH
21250: LD_INT 5
21252: PUSH
21253: LD_INT 6
21255: PUSH
21256: LD_INT 8
21258: PUSH
21259: LD_INT 11
21261: PUSH
21262: LD_INT 12
21264: PUSH
21265: LD_INT 15
21267: PUSH
21268: LD_INT 16
21270: PUSH
21271: LD_INT 22
21273: PUSH
21274: LD_INT 23
21276: PUSH
21277: LD_INT 25
21279: PUSH
21280: LD_INT 26
21282: PUSH
21283: LD_INT 36
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 101
21304: PUSH
21305: LD_INT 102
21307: PUSH
21308: LD_INT 105
21310: PUSH
21311: LD_INT 106
21313: PUSH
21314: LD_INT 108
21316: PUSH
21317: LD_INT 109
21319: PUSH
21320: LD_INT 112
21322: PUSH
21323: LD_INT 116
21325: PUSH
21326: LD_INT 117
21328: PUSH
21329: LD_INT 118
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: ST_TO_ADDR
21348: GO 24011
21350: LD_INT 6
21352: DOUBLE
21353: EQUAL
21354: IFTRUE 21358
21356: GO 21490
21358: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21359: LD_ADDR_VAR 0 2
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: LD_INT 4
21369: PUSH
21370: LD_INT 5
21372: PUSH
21373: LD_INT 6
21375: PUSH
21376: LD_INT 8
21378: PUSH
21379: LD_INT 11
21381: PUSH
21382: LD_INT 12
21384: PUSH
21385: LD_INT 15
21387: PUSH
21388: LD_INT 16
21390: PUSH
21391: LD_INT 20
21393: PUSH
21394: LD_INT 21
21396: PUSH
21397: LD_INT 22
21399: PUSH
21400: LD_INT 23
21402: PUSH
21403: LD_INT 25
21405: PUSH
21406: LD_INT 26
21408: PUSH
21409: LD_INT 30
21411: PUSH
21412: LD_INT 31
21414: PUSH
21415: LD_INT 32
21417: PUSH
21418: LD_INT 36
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 101
21444: PUSH
21445: LD_INT 102
21447: PUSH
21448: LD_INT 105
21450: PUSH
21451: LD_INT 106
21453: PUSH
21454: LD_INT 108
21456: PUSH
21457: LD_INT 109
21459: PUSH
21460: LD_INT 112
21462: PUSH
21463: LD_INT 116
21465: PUSH
21466: LD_INT 117
21468: PUSH
21469: LD_INT 118
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: ST_TO_ADDR
21488: GO 24011
21490: LD_INT 7
21492: DOUBLE
21493: EQUAL
21494: IFTRUE 21498
21496: GO 21610
21498: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21499: LD_ADDR_VAR 0 2
21503: PUSH
21504: LD_INT 2
21506: PUSH
21507: LD_INT 4
21509: PUSH
21510: LD_INT 5
21512: PUSH
21513: LD_INT 7
21515: PUSH
21516: LD_INT 11
21518: PUSH
21519: LD_INT 12
21521: PUSH
21522: LD_INT 15
21524: PUSH
21525: LD_INT 16
21527: PUSH
21528: LD_INT 20
21530: PUSH
21531: LD_INT 21
21533: PUSH
21534: LD_INT 22
21536: PUSH
21537: LD_INT 23
21539: PUSH
21540: LD_INT 25
21542: PUSH
21543: LD_INT 26
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 101
21564: PUSH
21565: LD_INT 102
21567: PUSH
21568: LD_INT 103
21570: PUSH
21571: LD_INT 105
21573: PUSH
21574: LD_INT 106
21576: PUSH
21577: LD_INT 108
21579: PUSH
21580: LD_INT 112
21582: PUSH
21583: LD_INT 116
21585: PUSH
21586: LD_INT 117
21588: PUSH
21589: LD_INT 118
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: ST_TO_ADDR
21608: GO 24011
21610: LD_INT 8
21612: DOUBLE
21613: EQUAL
21614: IFTRUE 21618
21616: GO 21758
21618: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 4
21629: PUSH
21630: LD_INT 5
21632: PUSH
21633: LD_INT 6
21635: PUSH
21636: LD_INT 7
21638: PUSH
21639: LD_INT 8
21641: PUSH
21642: LD_INT 11
21644: PUSH
21645: LD_INT 12
21647: PUSH
21648: LD_INT 15
21650: PUSH
21651: LD_INT 16
21653: PUSH
21654: LD_INT 20
21656: PUSH
21657: LD_INT 21
21659: PUSH
21660: LD_INT 22
21662: PUSH
21663: LD_INT 23
21665: PUSH
21666: LD_INT 25
21668: PUSH
21669: LD_INT 26
21671: PUSH
21672: LD_INT 30
21674: PUSH
21675: LD_INT 31
21677: PUSH
21678: LD_INT 32
21680: PUSH
21681: LD_INT 36
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 101
21708: PUSH
21709: LD_INT 102
21711: PUSH
21712: LD_INT 103
21714: PUSH
21715: LD_INT 105
21717: PUSH
21718: LD_INT 106
21720: PUSH
21721: LD_INT 108
21723: PUSH
21724: LD_INT 109
21726: PUSH
21727: LD_INT 112
21729: PUSH
21730: LD_INT 116
21732: PUSH
21733: LD_INT 117
21735: PUSH
21736: LD_INT 118
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: ST_TO_ADDR
21756: GO 24011
21758: LD_INT 9
21760: DOUBLE
21761: EQUAL
21762: IFTRUE 21766
21764: GO 21914
21766: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21767: LD_ADDR_VAR 0 2
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: LD_INT 4
21777: PUSH
21778: LD_INT 5
21780: PUSH
21781: LD_INT 6
21783: PUSH
21784: LD_INT 7
21786: PUSH
21787: LD_INT 8
21789: PUSH
21790: LD_INT 11
21792: PUSH
21793: LD_INT 12
21795: PUSH
21796: LD_INT 15
21798: PUSH
21799: LD_INT 16
21801: PUSH
21802: LD_INT 20
21804: PUSH
21805: LD_INT 21
21807: PUSH
21808: LD_INT 22
21810: PUSH
21811: LD_INT 23
21813: PUSH
21814: LD_INT 25
21816: PUSH
21817: LD_INT 26
21819: PUSH
21820: LD_INT 28
21822: PUSH
21823: LD_INT 30
21825: PUSH
21826: LD_INT 31
21828: PUSH
21829: LD_INT 32
21831: PUSH
21832: LD_INT 36
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 101
21860: PUSH
21861: LD_INT 102
21863: PUSH
21864: LD_INT 103
21866: PUSH
21867: LD_INT 105
21869: PUSH
21870: LD_INT 106
21872: PUSH
21873: LD_INT 108
21875: PUSH
21876: LD_INT 109
21878: PUSH
21879: LD_INT 112
21881: PUSH
21882: LD_INT 114
21884: PUSH
21885: LD_INT 116
21887: PUSH
21888: LD_INT 117
21890: PUSH
21891: LD_INT 118
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: ST_TO_ADDR
21912: GO 24011
21914: LD_INT 10
21916: DOUBLE
21917: EQUAL
21918: IFTRUE 21922
21920: GO 22118
21922: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21923: LD_ADDR_VAR 0 2
21927: PUSH
21928: LD_INT 2
21930: PUSH
21931: LD_INT 4
21933: PUSH
21934: LD_INT 5
21936: PUSH
21937: LD_INT 6
21939: PUSH
21940: LD_INT 7
21942: PUSH
21943: LD_INT 8
21945: PUSH
21946: LD_INT 9
21948: PUSH
21949: LD_INT 10
21951: PUSH
21952: LD_INT 11
21954: PUSH
21955: LD_INT 12
21957: PUSH
21958: LD_INT 13
21960: PUSH
21961: LD_INT 14
21963: PUSH
21964: LD_INT 15
21966: PUSH
21967: LD_INT 16
21969: PUSH
21970: LD_INT 17
21972: PUSH
21973: LD_INT 18
21975: PUSH
21976: LD_INT 19
21978: PUSH
21979: LD_INT 20
21981: PUSH
21982: LD_INT 21
21984: PUSH
21985: LD_INT 22
21987: PUSH
21988: LD_INT 23
21990: PUSH
21991: LD_INT 24
21993: PUSH
21994: LD_INT 25
21996: PUSH
21997: LD_INT 26
21999: PUSH
22000: LD_INT 28
22002: PUSH
22003: LD_INT 30
22005: PUSH
22006: LD_INT 31
22008: PUSH
22009: LD_INT 32
22011: PUSH
22012: LD_INT 36
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 101
22048: PUSH
22049: LD_INT 102
22051: PUSH
22052: LD_INT 103
22054: PUSH
22055: LD_INT 104
22057: PUSH
22058: LD_INT 105
22060: PUSH
22061: LD_INT 106
22063: PUSH
22064: LD_INT 107
22066: PUSH
22067: LD_INT 108
22069: PUSH
22070: LD_INT 109
22072: PUSH
22073: LD_INT 110
22075: PUSH
22076: LD_INT 111
22078: PUSH
22079: LD_INT 112
22081: PUSH
22082: LD_INT 114
22084: PUSH
22085: LD_INT 116
22087: PUSH
22088: LD_INT 117
22090: PUSH
22091: LD_INT 118
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: ST_TO_ADDR
22116: GO 24011
22118: LD_INT 11
22120: DOUBLE
22121: EQUAL
22122: IFTRUE 22126
22124: GO 22330
22126: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22127: LD_ADDR_VAR 0 2
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: LD_INT 3
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: LD_INT 5
22143: PUSH
22144: LD_INT 6
22146: PUSH
22147: LD_INT 7
22149: PUSH
22150: LD_INT 8
22152: PUSH
22153: LD_INT 9
22155: PUSH
22156: LD_INT 10
22158: PUSH
22159: LD_INT 11
22161: PUSH
22162: LD_INT 12
22164: PUSH
22165: LD_INT 13
22167: PUSH
22168: LD_INT 14
22170: PUSH
22171: LD_INT 15
22173: PUSH
22174: LD_INT 16
22176: PUSH
22177: LD_INT 17
22179: PUSH
22180: LD_INT 18
22182: PUSH
22183: LD_INT 19
22185: PUSH
22186: LD_INT 20
22188: PUSH
22189: LD_INT 21
22191: PUSH
22192: LD_INT 22
22194: PUSH
22195: LD_INT 23
22197: PUSH
22198: LD_INT 24
22200: PUSH
22201: LD_INT 25
22203: PUSH
22204: LD_INT 26
22206: PUSH
22207: LD_INT 28
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 31
22215: PUSH
22216: LD_INT 32
22218: PUSH
22219: LD_INT 34
22221: PUSH
22222: LD_INT 36
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 101
22260: PUSH
22261: LD_INT 102
22263: PUSH
22264: LD_INT 103
22266: PUSH
22267: LD_INT 104
22269: PUSH
22270: LD_INT 105
22272: PUSH
22273: LD_INT 106
22275: PUSH
22276: LD_INT 107
22278: PUSH
22279: LD_INT 108
22281: PUSH
22282: LD_INT 109
22284: PUSH
22285: LD_INT 110
22287: PUSH
22288: LD_INT 111
22290: PUSH
22291: LD_INT 112
22293: PUSH
22294: LD_INT 114
22296: PUSH
22297: LD_INT 116
22299: PUSH
22300: LD_INT 117
22302: PUSH
22303: LD_INT 118
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: ST_TO_ADDR
22328: GO 24011
22330: LD_INT 12
22332: DOUBLE
22333: EQUAL
22334: IFTRUE 22338
22336: GO 22558
22338: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: LD_INT 2
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: LD_INT 4
22355: PUSH
22356: LD_INT 5
22358: PUSH
22359: LD_INT 6
22361: PUSH
22362: LD_INT 7
22364: PUSH
22365: LD_INT 8
22367: PUSH
22368: LD_INT 9
22370: PUSH
22371: LD_INT 10
22373: PUSH
22374: LD_INT 11
22376: PUSH
22377: LD_INT 12
22379: PUSH
22380: LD_INT 13
22382: PUSH
22383: LD_INT 14
22385: PUSH
22386: LD_INT 15
22388: PUSH
22389: LD_INT 16
22391: PUSH
22392: LD_INT 17
22394: PUSH
22395: LD_INT 18
22397: PUSH
22398: LD_INT 19
22400: PUSH
22401: LD_INT 20
22403: PUSH
22404: LD_INT 21
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_INT 23
22412: PUSH
22413: LD_INT 24
22415: PUSH
22416: LD_INT 25
22418: PUSH
22419: LD_INT 26
22421: PUSH
22422: LD_INT 27
22424: PUSH
22425: LD_INT 28
22427: PUSH
22428: LD_INT 30
22430: PUSH
22431: LD_INT 31
22433: PUSH
22434: LD_INT 32
22436: PUSH
22437: LD_INT 33
22439: PUSH
22440: LD_INT 34
22442: PUSH
22443: LD_INT 36
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 101
22484: PUSH
22485: LD_INT 102
22487: PUSH
22488: LD_INT 103
22490: PUSH
22491: LD_INT 104
22493: PUSH
22494: LD_INT 105
22496: PUSH
22497: LD_INT 106
22499: PUSH
22500: LD_INT 107
22502: PUSH
22503: LD_INT 108
22505: PUSH
22506: LD_INT 109
22508: PUSH
22509: LD_INT 110
22511: PUSH
22512: LD_INT 111
22514: PUSH
22515: LD_INT 112
22517: PUSH
22518: LD_INT 113
22520: PUSH
22521: LD_INT 114
22523: PUSH
22524: LD_INT 116
22526: PUSH
22527: LD_INT 117
22529: PUSH
22530: LD_INT 118
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: ST_TO_ADDR
22556: GO 24011
22558: LD_INT 13
22560: DOUBLE
22561: EQUAL
22562: IFTRUE 22566
22564: GO 22774
22566: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22567: LD_ADDR_VAR 0 2
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: LD_INT 4
22583: PUSH
22584: LD_INT 5
22586: PUSH
22587: LD_INT 8
22589: PUSH
22590: LD_INT 9
22592: PUSH
22593: LD_INT 10
22595: PUSH
22596: LD_INT 11
22598: PUSH
22599: LD_INT 12
22601: PUSH
22602: LD_INT 14
22604: PUSH
22605: LD_INT 15
22607: PUSH
22608: LD_INT 16
22610: PUSH
22611: LD_INT 17
22613: PUSH
22614: LD_INT 18
22616: PUSH
22617: LD_INT 19
22619: PUSH
22620: LD_INT 20
22622: PUSH
22623: LD_INT 21
22625: PUSH
22626: LD_INT 22
22628: PUSH
22629: LD_INT 23
22631: PUSH
22632: LD_INT 24
22634: PUSH
22635: LD_INT 25
22637: PUSH
22638: LD_INT 26
22640: PUSH
22641: LD_INT 27
22643: PUSH
22644: LD_INT 28
22646: PUSH
22647: LD_INT 30
22649: PUSH
22650: LD_INT 31
22652: PUSH
22653: LD_INT 32
22655: PUSH
22656: LD_INT 33
22658: PUSH
22659: LD_INT 34
22661: PUSH
22662: LD_INT 36
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 101
22700: PUSH
22701: LD_INT 102
22703: PUSH
22704: LD_INT 103
22706: PUSH
22707: LD_INT 104
22709: PUSH
22710: LD_INT 105
22712: PUSH
22713: LD_INT 106
22715: PUSH
22716: LD_INT 107
22718: PUSH
22719: LD_INT 108
22721: PUSH
22722: LD_INT 109
22724: PUSH
22725: LD_INT 110
22727: PUSH
22728: LD_INT 111
22730: PUSH
22731: LD_INT 112
22733: PUSH
22734: LD_INT 113
22736: PUSH
22737: LD_INT 114
22739: PUSH
22740: LD_INT 116
22742: PUSH
22743: LD_INT 117
22745: PUSH
22746: LD_INT 118
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: ST_TO_ADDR
22772: GO 24011
22774: LD_INT 14
22776: DOUBLE
22777: EQUAL
22778: IFTRUE 22782
22780: GO 23006
22782: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22783: LD_ADDR_VAR 0 2
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: LD_INT 2
22793: PUSH
22794: LD_INT 3
22796: PUSH
22797: LD_INT 4
22799: PUSH
22800: LD_INT 5
22802: PUSH
22803: LD_INT 6
22805: PUSH
22806: LD_INT 7
22808: PUSH
22809: LD_INT 8
22811: PUSH
22812: LD_INT 9
22814: PUSH
22815: LD_INT 10
22817: PUSH
22818: LD_INT 11
22820: PUSH
22821: LD_INT 12
22823: PUSH
22824: LD_INT 13
22826: PUSH
22827: LD_INT 14
22829: PUSH
22830: LD_INT 15
22832: PUSH
22833: LD_INT 16
22835: PUSH
22836: LD_INT 17
22838: PUSH
22839: LD_INT 18
22841: PUSH
22842: LD_INT 19
22844: PUSH
22845: LD_INT 20
22847: PUSH
22848: LD_INT 21
22850: PUSH
22851: LD_INT 22
22853: PUSH
22854: LD_INT 23
22856: PUSH
22857: LD_INT 24
22859: PUSH
22860: LD_INT 25
22862: PUSH
22863: LD_INT 26
22865: PUSH
22866: LD_INT 27
22868: PUSH
22869: LD_INT 28
22871: PUSH
22872: LD_INT 29
22874: PUSH
22875: LD_INT 30
22877: PUSH
22878: LD_INT 31
22880: PUSH
22881: LD_INT 32
22883: PUSH
22884: LD_INT 33
22886: PUSH
22887: LD_INT 34
22889: PUSH
22890: LD_INT 36
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 101
22932: PUSH
22933: LD_INT 102
22935: PUSH
22936: LD_INT 103
22938: PUSH
22939: LD_INT 104
22941: PUSH
22942: LD_INT 105
22944: PUSH
22945: LD_INT 106
22947: PUSH
22948: LD_INT 107
22950: PUSH
22951: LD_INT 108
22953: PUSH
22954: LD_INT 109
22956: PUSH
22957: LD_INT 110
22959: PUSH
22960: LD_INT 111
22962: PUSH
22963: LD_INT 112
22965: PUSH
22966: LD_INT 113
22968: PUSH
22969: LD_INT 114
22971: PUSH
22972: LD_INT 116
22974: PUSH
22975: LD_INT 117
22977: PUSH
22978: LD_INT 118
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: ST_TO_ADDR
23004: GO 24011
23006: LD_INT 15
23008: DOUBLE
23009: EQUAL
23010: IFTRUE 23014
23012: GO 23238
23014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23015: LD_ADDR_VAR 0 2
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: LD_INT 4
23031: PUSH
23032: LD_INT 5
23034: PUSH
23035: LD_INT 6
23037: PUSH
23038: LD_INT 7
23040: PUSH
23041: LD_INT 8
23043: PUSH
23044: LD_INT 9
23046: PUSH
23047: LD_INT 10
23049: PUSH
23050: LD_INT 11
23052: PUSH
23053: LD_INT 12
23055: PUSH
23056: LD_INT 13
23058: PUSH
23059: LD_INT 14
23061: PUSH
23062: LD_INT 15
23064: PUSH
23065: LD_INT 16
23067: PUSH
23068: LD_INT 17
23070: PUSH
23071: LD_INT 18
23073: PUSH
23074: LD_INT 19
23076: PUSH
23077: LD_INT 20
23079: PUSH
23080: LD_INT 21
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_INT 23
23088: PUSH
23089: LD_INT 24
23091: PUSH
23092: LD_INT 25
23094: PUSH
23095: LD_INT 26
23097: PUSH
23098: LD_INT 27
23100: PUSH
23101: LD_INT 28
23103: PUSH
23104: LD_INT 29
23106: PUSH
23107: LD_INT 30
23109: PUSH
23110: LD_INT 31
23112: PUSH
23113: LD_INT 32
23115: PUSH
23116: LD_INT 33
23118: PUSH
23119: LD_INT 34
23121: PUSH
23122: LD_INT 36
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 101
23164: PUSH
23165: LD_INT 102
23167: PUSH
23168: LD_INT 103
23170: PUSH
23171: LD_INT 104
23173: PUSH
23174: LD_INT 105
23176: PUSH
23177: LD_INT 106
23179: PUSH
23180: LD_INT 107
23182: PUSH
23183: LD_INT 108
23185: PUSH
23186: LD_INT 109
23188: PUSH
23189: LD_INT 110
23191: PUSH
23192: LD_INT 111
23194: PUSH
23195: LD_INT 112
23197: PUSH
23198: LD_INT 113
23200: PUSH
23201: LD_INT 114
23203: PUSH
23204: LD_INT 116
23206: PUSH
23207: LD_INT 117
23209: PUSH
23210: LD_INT 118
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: ST_TO_ADDR
23236: GO 24011
23238: LD_INT 16
23240: DOUBLE
23241: EQUAL
23242: IFTRUE 23246
23244: GO 23382
23246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23247: LD_ADDR_VAR 0 2
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: LD_INT 4
23257: PUSH
23258: LD_INT 5
23260: PUSH
23261: LD_INT 7
23263: PUSH
23264: LD_INT 11
23266: PUSH
23267: LD_INT 12
23269: PUSH
23270: LD_INT 15
23272: PUSH
23273: LD_INT 16
23275: PUSH
23276: LD_INT 20
23278: PUSH
23279: LD_INT 21
23281: PUSH
23282: LD_INT 22
23284: PUSH
23285: LD_INT 23
23287: PUSH
23288: LD_INT 25
23290: PUSH
23291: LD_INT 26
23293: PUSH
23294: LD_INT 30
23296: PUSH
23297: LD_INT 31
23299: PUSH
23300: LD_INT 32
23302: PUSH
23303: LD_INT 33
23305: PUSH
23306: LD_INT 34
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 101
23332: PUSH
23333: LD_INT 102
23335: PUSH
23336: LD_INT 103
23338: PUSH
23339: LD_INT 106
23341: PUSH
23342: LD_INT 108
23344: PUSH
23345: LD_INT 112
23347: PUSH
23348: LD_INT 113
23350: PUSH
23351: LD_INT 114
23353: PUSH
23354: LD_INT 116
23356: PUSH
23357: LD_INT 117
23359: PUSH
23360: LD_INT 118
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: ST_TO_ADDR
23380: GO 24011
23382: LD_INT 17
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23614
23390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23391: LD_ADDR_VAR 0 2
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 3
23404: PUSH
23405: LD_INT 4
23407: PUSH
23408: LD_INT 5
23410: PUSH
23411: LD_INT 6
23413: PUSH
23414: LD_INT 7
23416: PUSH
23417: LD_INT 8
23419: PUSH
23420: LD_INT 9
23422: PUSH
23423: LD_INT 10
23425: PUSH
23426: LD_INT 11
23428: PUSH
23429: LD_INT 12
23431: PUSH
23432: LD_INT 13
23434: PUSH
23435: LD_INT 14
23437: PUSH
23438: LD_INT 15
23440: PUSH
23441: LD_INT 16
23443: PUSH
23444: LD_INT 17
23446: PUSH
23447: LD_INT 18
23449: PUSH
23450: LD_INT 19
23452: PUSH
23453: LD_INT 20
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: LD_INT 25
23470: PUSH
23471: LD_INT 26
23473: PUSH
23474: LD_INT 27
23476: PUSH
23477: LD_INT 28
23479: PUSH
23480: LD_INT 29
23482: PUSH
23483: LD_INT 30
23485: PUSH
23486: LD_INT 31
23488: PUSH
23489: LD_INT 32
23491: PUSH
23492: LD_INT 33
23494: PUSH
23495: LD_INT 34
23497: PUSH
23498: LD_INT 36
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 101
23540: PUSH
23541: LD_INT 102
23543: PUSH
23544: LD_INT 103
23546: PUSH
23547: LD_INT 104
23549: PUSH
23550: LD_INT 105
23552: PUSH
23553: LD_INT 106
23555: PUSH
23556: LD_INT 107
23558: PUSH
23559: LD_INT 108
23561: PUSH
23562: LD_INT 109
23564: PUSH
23565: LD_INT 110
23567: PUSH
23568: LD_INT 111
23570: PUSH
23571: LD_INT 112
23573: PUSH
23574: LD_INT 113
23576: PUSH
23577: LD_INT 114
23579: PUSH
23580: LD_INT 116
23582: PUSH
23583: LD_INT 117
23585: PUSH
23586: LD_INT 118
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: ST_TO_ADDR
23612: GO 24011
23614: LD_INT 18
23616: DOUBLE
23617: EQUAL
23618: IFTRUE 23622
23620: GO 23770
23622: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23623: LD_ADDR_VAR 0 2
23627: PUSH
23628: LD_INT 2
23630: PUSH
23631: LD_INT 4
23633: PUSH
23634: LD_INT 5
23636: PUSH
23637: LD_INT 7
23639: PUSH
23640: LD_INT 11
23642: PUSH
23643: LD_INT 12
23645: PUSH
23646: LD_INT 15
23648: PUSH
23649: LD_INT 16
23651: PUSH
23652: LD_INT 20
23654: PUSH
23655: LD_INT 21
23657: PUSH
23658: LD_INT 22
23660: PUSH
23661: LD_INT 23
23663: PUSH
23664: LD_INT 25
23666: PUSH
23667: LD_INT 26
23669: PUSH
23670: LD_INT 30
23672: PUSH
23673: LD_INT 31
23675: PUSH
23676: LD_INT 32
23678: PUSH
23679: LD_INT 33
23681: PUSH
23682: LD_INT 34
23684: PUSH
23685: LD_INT 35
23687: PUSH
23688: LD_INT 36
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 101
23716: PUSH
23717: LD_INT 102
23719: PUSH
23720: LD_INT 103
23722: PUSH
23723: LD_INT 106
23725: PUSH
23726: LD_INT 108
23728: PUSH
23729: LD_INT 112
23731: PUSH
23732: LD_INT 113
23734: PUSH
23735: LD_INT 114
23737: PUSH
23738: LD_INT 115
23740: PUSH
23741: LD_INT 116
23743: PUSH
23744: LD_INT 117
23746: PUSH
23747: LD_INT 118
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: ST_TO_ADDR
23768: GO 24011
23770: LD_INT 19
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 24010
23778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23779: LD_ADDR_VAR 0 2
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: LD_INT 2
23789: PUSH
23790: LD_INT 3
23792: PUSH
23793: LD_INT 4
23795: PUSH
23796: LD_INT 5
23798: PUSH
23799: LD_INT 6
23801: PUSH
23802: LD_INT 7
23804: PUSH
23805: LD_INT 8
23807: PUSH
23808: LD_INT 9
23810: PUSH
23811: LD_INT 10
23813: PUSH
23814: LD_INT 11
23816: PUSH
23817: LD_INT 12
23819: PUSH
23820: LD_INT 13
23822: PUSH
23823: LD_INT 14
23825: PUSH
23826: LD_INT 15
23828: PUSH
23829: LD_INT 16
23831: PUSH
23832: LD_INT 17
23834: PUSH
23835: LD_INT 18
23837: PUSH
23838: LD_INT 19
23840: PUSH
23841: LD_INT 20
23843: PUSH
23844: LD_INT 21
23846: PUSH
23847: LD_INT 22
23849: PUSH
23850: LD_INT 23
23852: PUSH
23853: LD_INT 24
23855: PUSH
23856: LD_INT 25
23858: PUSH
23859: LD_INT 26
23861: PUSH
23862: LD_INT 27
23864: PUSH
23865: LD_INT 28
23867: PUSH
23868: LD_INT 29
23870: PUSH
23871: LD_INT 30
23873: PUSH
23874: LD_INT 31
23876: PUSH
23877: LD_INT 32
23879: PUSH
23880: LD_INT 33
23882: PUSH
23883: LD_INT 34
23885: PUSH
23886: LD_INT 35
23888: PUSH
23889: LD_INT 36
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 101
23932: PUSH
23933: LD_INT 102
23935: PUSH
23936: LD_INT 103
23938: PUSH
23939: LD_INT 104
23941: PUSH
23942: LD_INT 105
23944: PUSH
23945: LD_INT 106
23947: PUSH
23948: LD_INT 107
23950: PUSH
23951: LD_INT 108
23953: PUSH
23954: LD_INT 109
23956: PUSH
23957: LD_INT 110
23959: PUSH
23960: LD_INT 111
23962: PUSH
23963: LD_INT 112
23965: PUSH
23966: LD_INT 113
23968: PUSH
23969: LD_INT 114
23971: PUSH
23972: LD_INT 115
23974: PUSH
23975: LD_INT 116
23977: PUSH
23978: LD_INT 117
23980: PUSH
23981: LD_INT 118
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: ST_TO_ADDR
24008: GO 24011
24010: POP
// end else
24011: GO 24242
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24013: LD_ADDR_VAR 0 2
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: LD_INT 4
24029: PUSH
24030: LD_INT 5
24032: PUSH
24033: LD_INT 6
24035: PUSH
24036: LD_INT 7
24038: PUSH
24039: LD_INT 8
24041: PUSH
24042: LD_INT 9
24044: PUSH
24045: LD_INT 10
24047: PUSH
24048: LD_INT 11
24050: PUSH
24051: LD_INT 12
24053: PUSH
24054: LD_INT 13
24056: PUSH
24057: LD_INT 14
24059: PUSH
24060: LD_INT 15
24062: PUSH
24063: LD_INT 16
24065: PUSH
24066: LD_INT 17
24068: PUSH
24069: LD_INT 18
24071: PUSH
24072: LD_INT 19
24074: PUSH
24075: LD_INT 20
24077: PUSH
24078: LD_INT 21
24080: PUSH
24081: LD_INT 22
24083: PUSH
24084: LD_INT 23
24086: PUSH
24087: LD_INT 24
24089: PUSH
24090: LD_INT 25
24092: PUSH
24093: LD_INT 26
24095: PUSH
24096: LD_INT 27
24098: PUSH
24099: LD_INT 28
24101: PUSH
24102: LD_INT 29
24104: PUSH
24105: LD_INT 30
24107: PUSH
24108: LD_INT 31
24110: PUSH
24111: LD_INT 32
24113: PUSH
24114: LD_INT 33
24116: PUSH
24117: LD_INT 34
24119: PUSH
24120: LD_INT 35
24122: PUSH
24123: LD_INT 36
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 101
24166: PUSH
24167: LD_INT 102
24169: PUSH
24170: LD_INT 103
24172: PUSH
24173: LD_INT 104
24175: PUSH
24176: LD_INT 105
24178: PUSH
24179: LD_INT 106
24181: PUSH
24182: LD_INT 107
24184: PUSH
24185: LD_INT 108
24187: PUSH
24188: LD_INT 109
24190: PUSH
24191: LD_INT 110
24193: PUSH
24194: LD_INT 111
24196: PUSH
24197: LD_INT 112
24199: PUSH
24200: LD_INT 113
24202: PUSH
24203: LD_INT 114
24205: PUSH
24206: LD_INT 115
24208: PUSH
24209: LD_INT 116
24211: PUSH
24212: LD_INT 117
24214: PUSH
24215: LD_INT 118
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: ST_TO_ADDR
// if result then
24242: LD_VAR 0 2
24246: IFFALSE 25032
// begin normal :=  ;
24248: LD_ADDR_VAR 0 5
24252: PUSH
24253: LD_STRING 
24255: ST_TO_ADDR
// hardcore :=  ;
24256: LD_ADDR_VAR 0 6
24260: PUSH
24261: LD_STRING 
24263: ST_TO_ADDR
// active :=  ;
24264: LD_ADDR_VAR 0 7
24268: PUSH
24269: LD_STRING 
24271: ST_TO_ADDR
// for i = 1 to normalCounter do
24272: LD_ADDR_VAR 0 8
24276: PUSH
24277: DOUBLE
24278: LD_INT 1
24280: DEC
24281: ST_TO_ADDR
24282: LD_EXP 47
24286: PUSH
24287: FOR_TO
24288: IFFALSE 24389
// begin tmp := 0 ;
24290: LD_ADDR_VAR 0 3
24294: PUSH
24295: LD_STRING 0
24297: ST_TO_ADDR
// if result [ 1 ] then
24298: LD_VAR 0 2
24302: PUSH
24303: LD_INT 1
24305: ARRAY
24306: IFFALSE 24371
// if result [ 1 ] [ 1 ] = i then
24308: LD_VAR 0 2
24312: PUSH
24313: LD_INT 1
24315: ARRAY
24316: PUSH
24317: LD_INT 1
24319: ARRAY
24320: PUSH
24321: LD_VAR 0 8
24325: EQUAL
24326: IFFALSE 24371
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24328: LD_ADDR_VAR 0 2
24332: PUSH
24333: LD_VAR 0 2
24337: PPUSH
24338: LD_INT 1
24340: PPUSH
24341: LD_VAR 0 2
24345: PUSH
24346: LD_INT 1
24348: ARRAY
24349: PPUSH
24350: LD_INT 1
24352: PPUSH
24353: CALL_OW 3
24357: PPUSH
24358: CALL_OW 1
24362: ST_TO_ADDR
// tmp := 1 ;
24363: LD_ADDR_VAR 0 3
24367: PUSH
24368: LD_STRING 1
24370: ST_TO_ADDR
// end ; normal := normal & tmp ;
24371: LD_ADDR_VAR 0 5
24375: PUSH
24376: LD_VAR 0 5
24380: PUSH
24381: LD_VAR 0 3
24385: STR
24386: ST_TO_ADDR
// end ;
24387: GO 24287
24389: POP
24390: POP
// for i = 1 to hardcoreCounter do
24391: LD_ADDR_VAR 0 8
24395: PUSH
24396: DOUBLE
24397: LD_INT 1
24399: DEC
24400: ST_TO_ADDR
24401: LD_EXP 48
24405: PUSH
24406: FOR_TO
24407: IFFALSE 24512
// begin tmp := 0 ;
24409: LD_ADDR_VAR 0 3
24413: PUSH
24414: LD_STRING 0
24416: ST_TO_ADDR
// if result [ 2 ] then
24417: LD_VAR 0 2
24421: PUSH
24422: LD_INT 2
24424: ARRAY
24425: IFFALSE 24494
// if result [ 2 ] [ 1 ] = 100 + i then
24427: LD_VAR 0 2
24431: PUSH
24432: LD_INT 2
24434: ARRAY
24435: PUSH
24436: LD_INT 1
24438: ARRAY
24439: PUSH
24440: LD_INT 100
24442: PUSH
24443: LD_VAR 0 8
24447: PLUS
24448: EQUAL
24449: IFFALSE 24494
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24451: LD_ADDR_VAR 0 2
24455: PUSH
24456: LD_VAR 0 2
24460: PPUSH
24461: LD_INT 2
24463: PPUSH
24464: LD_VAR 0 2
24468: PUSH
24469: LD_INT 2
24471: ARRAY
24472: PPUSH
24473: LD_INT 1
24475: PPUSH
24476: CALL_OW 3
24480: PPUSH
24481: CALL_OW 1
24485: ST_TO_ADDR
// tmp := 1 ;
24486: LD_ADDR_VAR 0 3
24490: PUSH
24491: LD_STRING 1
24493: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24494: LD_ADDR_VAR 0 6
24498: PUSH
24499: LD_VAR 0 6
24503: PUSH
24504: LD_VAR 0 3
24508: STR
24509: ST_TO_ADDR
// end ;
24510: GO 24406
24512: POP
24513: POP
// if isGameLoad then
24514: LD_VAR 0 1
24518: IFFALSE 24993
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24520: LD_ADDR_VAR 0 4
24524: PUSH
24525: LD_EXP 51
24529: PUSH
24530: LD_EXP 50
24534: PUSH
24535: LD_EXP 52
24539: PUSH
24540: LD_EXP 49
24544: PUSH
24545: LD_EXP 53
24549: PUSH
24550: LD_EXP 54
24554: PUSH
24555: LD_EXP 55
24559: PUSH
24560: LD_EXP 56
24564: PUSH
24565: LD_EXP 57
24569: PUSH
24570: LD_EXP 58
24574: PUSH
24575: LD_EXP 59
24579: PUSH
24580: LD_EXP 60
24584: PUSH
24585: LD_EXP 61
24589: PUSH
24590: LD_EXP 62
24594: PUSH
24595: LD_EXP 70
24599: PUSH
24600: LD_EXP 71
24604: PUSH
24605: LD_EXP 72
24609: PUSH
24610: LD_EXP 73
24614: PUSH
24615: LD_EXP 75
24619: PUSH
24620: LD_EXP 76
24624: PUSH
24625: LD_EXP 77
24629: PUSH
24630: LD_EXP 80
24634: PUSH
24635: LD_EXP 82
24639: PUSH
24640: LD_EXP 83
24644: PUSH
24645: LD_EXP 84
24649: PUSH
24650: LD_EXP 86
24654: PUSH
24655: LD_EXP 87
24659: PUSH
24660: LD_EXP 90
24664: PUSH
24665: LD_EXP 91
24669: PUSH
24670: LD_EXP 92
24674: PUSH
24675: LD_EXP 93
24679: PUSH
24680: LD_EXP 94
24684: PUSH
24685: LD_EXP 95
24689: PUSH
24690: LD_EXP 96
24694: PUSH
24695: LD_EXP 97
24699: PUSH
24700: LD_EXP 98
24704: PUSH
24705: LD_EXP 63
24709: PUSH
24710: LD_EXP 64
24714: PUSH
24715: LD_EXP 67
24719: PUSH
24720: LD_EXP 68
24724: PUSH
24725: LD_EXP 69
24729: PUSH
24730: LD_EXP 65
24734: PUSH
24735: LD_EXP 66
24739: PUSH
24740: LD_EXP 74
24744: PUSH
24745: LD_EXP 78
24749: PUSH
24750: LD_EXP 79
24754: PUSH
24755: LD_EXP 81
24759: PUSH
24760: LD_EXP 85
24764: PUSH
24765: LD_EXP 88
24769: PUSH
24770: LD_EXP 89
24774: PUSH
24775: LD_EXP 99
24779: PUSH
24780: LD_EXP 100
24784: PUSH
24785: LD_EXP 101
24789: PUSH
24790: LD_EXP 102
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: ST_TO_ADDR
// tmp :=  ;
24851: LD_ADDR_VAR 0 3
24855: PUSH
24856: LD_STRING 
24858: ST_TO_ADDR
// for i = 1 to normalCounter do
24859: LD_ADDR_VAR 0 8
24863: PUSH
24864: DOUBLE
24865: LD_INT 1
24867: DEC
24868: ST_TO_ADDR
24869: LD_EXP 47
24873: PUSH
24874: FOR_TO
24875: IFFALSE 24911
// begin if flags [ i ] then
24877: LD_VAR 0 4
24881: PUSH
24882: LD_VAR 0 8
24886: ARRAY
24887: IFFALSE 24909
// tmp := tmp & i & ; ;
24889: LD_ADDR_VAR 0 3
24893: PUSH
24894: LD_VAR 0 3
24898: PUSH
24899: LD_VAR 0 8
24903: STR
24904: PUSH
24905: LD_STRING ;
24907: STR
24908: ST_TO_ADDR
// end ;
24909: GO 24874
24911: POP
24912: POP
// for i = 1 to hardcoreCounter do
24913: LD_ADDR_VAR 0 8
24917: PUSH
24918: DOUBLE
24919: LD_INT 1
24921: DEC
24922: ST_TO_ADDR
24923: LD_EXP 48
24927: PUSH
24928: FOR_TO
24929: IFFALSE 24975
// begin if flags [ normalCounter + i ] then
24931: LD_VAR 0 4
24935: PUSH
24936: LD_EXP 47
24940: PUSH
24941: LD_VAR 0 8
24945: PLUS
24946: ARRAY
24947: IFFALSE 24973
// tmp := tmp & ( 100 + i ) & ; ;
24949: LD_ADDR_VAR 0 3
24953: PUSH
24954: LD_VAR 0 3
24958: PUSH
24959: LD_INT 100
24961: PUSH
24962: LD_VAR 0 8
24966: PLUS
24967: STR
24968: PUSH
24969: LD_STRING ;
24971: STR
24972: ST_TO_ADDR
// end ;
24973: GO 24928
24975: POP
24976: POP
// if tmp then
24977: LD_VAR 0 3
24981: IFFALSE 24993
// active := tmp ;
24983: LD_ADDR_VAR 0 7
24987: PUSH
24988: LD_VAR 0 3
24992: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24993: LD_STRING getStreamItemsFromMission("
24995: PUSH
24996: LD_VAR 0 5
25000: STR
25001: PUSH
25002: LD_STRING ","
25004: STR
25005: PUSH
25006: LD_VAR 0 6
25010: STR
25011: PUSH
25012: LD_STRING ","
25014: STR
25015: PUSH
25016: LD_VAR 0 7
25020: STR
25021: PUSH
25022: LD_STRING ")
25024: STR
25025: PPUSH
25026: CALL_OW 559
// end else
25030: GO 25039
// ToLua ( getStreamItemsFromMission("","","") ) ;
25032: LD_STRING getStreamItemsFromMission("","","")
25034: PPUSH
25035: CALL_OW 559
// end ;
25039: LD_VAR 0 2
25043: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25044: LD_EXP 46
25048: PUSH
25049: LD_EXP 51
25053: AND
25054: IFFALSE 25178
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
// begin enable ;
25063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25064: LD_ADDR_VAR 0 2
25068: PUSH
25069: LD_INT 22
25071: PUSH
25072: LD_OWVAR 2
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: LD_INT 34
25086: PUSH
25087: LD_INT 7
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 34
25096: PUSH
25097: LD_INT 45
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 34
25106: PUSH
25107: LD_INT 28
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 34
25116: PUSH
25117: LD_INT 47
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PPUSH
25135: CALL_OW 69
25139: ST_TO_ADDR
// if not tmp then
25140: LD_VAR 0 2
25144: NOT
25145: IFFALSE 25149
// exit ;
25147: GO 25178
// for i in tmp do
25149: LD_ADDR_VAR 0 1
25153: PUSH
25154: LD_VAR 0 2
25158: PUSH
25159: FOR_IN
25160: IFFALSE 25176
// begin SetLives ( i , 0 ) ;
25162: LD_VAR 0 1
25166: PPUSH
25167: LD_INT 0
25169: PPUSH
25170: CALL_OW 234
// end ;
25174: GO 25159
25176: POP
25177: POP
// end ;
25178: PPOPN 2
25180: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25181: LD_EXP 46
25185: PUSH
25186: LD_EXP 52
25190: AND
25191: IFFALSE 25275
25193: GO 25195
25195: DISABLE
25196: LD_INT 0
25198: PPUSH
25199: PPUSH
// begin enable ;
25200: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25201: LD_ADDR_VAR 0 2
25205: PUSH
25206: LD_INT 22
25208: PUSH
25209: LD_OWVAR 2
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 32
25220: PUSH
25221: LD_INT 3
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PPUSH
25232: CALL_OW 69
25236: ST_TO_ADDR
// if not tmp then
25237: LD_VAR 0 2
25241: NOT
25242: IFFALSE 25246
// exit ;
25244: GO 25275
// for i in tmp do
25246: LD_ADDR_VAR 0 1
25250: PUSH
25251: LD_VAR 0 2
25255: PUSH
25256: FOR_IN
25257: IFFALSE 25273
// begin SetLives ( i , 0 ) ;
25259: LD_VAR 0 1
25263: PPUSH
25264: LD_INT 0
25266: PPUSH
25267: CALL_OW 234
// end ;
25271: GO 25256
25273: POP
25274: POP
// end ;
25275: PPOPN 2
25277: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25278: LD_EXP 46
25282: PUSH
25283: LD_EXP 49
25287: AND
25288: IFFALSE 25381
25290: GO 25292
25292: DISABLE
25293: LD_INT 0
25295: PPUSH
// begin enable ;
25296: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25297: LD_ADDR_VAR 0 1
25301: PUSH
25302: LD_INT 22
25304: PUSH
25305: LD_OWVAR 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 25
25319: PUSH
25320: LD_INT 5
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 25
25329: PUSH
25330: LD_INT 9
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 25
25339: PUSH
25340: LD_INT 8
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PPUSH
25357: CALL_OW 69
25361: PUSH
25362: FOR_IN
25363: IFFALSE 25379
// begin SetClass ( i , 1 ) ;
25365: LD_VAR 0 1
25369: PPUSH
25370: LD_INT 1
25372: PPUSH
25373: CALL_OW 336
// end ;
25377: GO 25362
25379: POP
25380: POP
// end ;
25381: PPOPN 1
25383: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25384: LD_EXP 46
25388: PUSH
25389: LD_EXP 50
25393: AND
25394: PUSH
25395: LD_OWVAR 65
25399: PUSH
25400: LD_INT 7
25402: LESS
25403: AND
25404: IFFALSE 25418
25406: GO 25408
25408: DISABLE
// begin enable ;
25409: ENABLE
// game_speed := 7 ;
25410: LD_ADDR_OWVAR 65
25414: PUSH
25415: LD_INT 7
25417: ST_TO_ADDR
// end ;
25418: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25419: LD_EXP 46
25423: PUSH
25424: LD_EXP 53
25428: AND
25429: IFFALSE 25631
25431: GO 25433
25433: DISABLE
25434: LD_INT 0
25436: PPUSH
25437: PPUSH
25438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_INT 81
25446: PUSH
25447: LD_OWVAR 2
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 21
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PPUSH
25470: CALL_OW 69
25474: ST_TO_ADDR
// if not tmp then
25475: LD_VAR 0 3
25479: NOT
25480: IFFALSE 25484
// exit ;
25482: GO 25631
// if tmp > 5 then
25484: LD_VAR 0 3
25488: PUSH
25489: LD_INT 5
25491: GREATER
25492: IFFALSE 25504
// k := 5 else
25494: LD_ADDR_VAR 0 2
25498: PUSH
25499: LD_INT 5
25501: ST_TO_ADDR
25502: GO 25514
// k := tmp ;
25504: LD_ADDR_VAR 0 2
25508: PUSH
25509: LD_VAR 0 3
25513: ST_TO_ADDR
// for i := 1 to k do
25514: LD_ADDR_VAR 0 1
25518: PUSH
25519: DOUBLE
25520: LD_INT 1
25522: DEC
25523: ST_TO_ADDR
25524: LD_VAR 0 2
25528: PUSH
25529: FOR_TO
25530: IFFALSE 25629
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25532: LD_VAR 0 3
25536: PUSH
25537: LD_VAR 0 1
25541: ARRAY
25542: PPUSH
25543: LD_VAR 0 1
25547: PUSH
25548: LD_INT 4
25550: MOD
25551: PUSH
25552: LD_INT 1
25554: PLUS
25555: PPUSH
25556: CALL_OW 259
25560: PUSH
25561: LD_INT 10
25563: LESS
25564: IFFALSE 25627
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25566: LD_VAR 0 3
25570: PUSH
25571: LD_VAR 0 1
25575: ARRAY
25576: PPUSH
25577: LD_VAR 0 1
25581: PUSH
25582: LD_INT 4
25584: MOD
25585: PUSH
25586: LD_INT 1
25588: PLUS
25589: PPUSH
25590: LD_VAR 0 3
25594: PUSH
25595: LD_VAR 0 1
25599: ARRAY
25600: PPUSH
25601: LD_VAR 0 1
25605: PUSH
25606: LD_INT 4
25608: MOD
25609: PUSH
25610: LD_INT 1
25612: PLUS
25613: PPUSH
25614: CALL_OW 259
25618: PUSH
25619: LD_INT 1
25621: PLUS
25622: PPUSH
25623: CALL_OW 237
25627: GO 25529
25629: POP
25630: POP
// end ;
25631: PPOPN 3
25633: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25634: LD_EXP 46
25638: PUSH
25639: LD_EXP 54
25643: AND
25644: IFFALSE 25664
25646: GO 25648
25648: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25649: LD_INT 4
25651: PPUSH
25652: LD_OWVAR 2
25656: PPUSH
25657: LD_INT 0
25659: PPUSH
25660: CALL_OW 324
25664: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25665: LD_EXP 46
25669: PUSH
25670: LD_EXP 83
25674: AND
25675: IFFALSE 25695
25677: GO 25679
25679: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25680: LD_INT 19
25682: PPUSH
25683: LD_OWVAR 2
25687: PPUSH
25688: LD_INT 0
25690: PPUSH
25691: CALL_OW 324
25695: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25696: LD_EXP 46
25700: PUSH
25701: LD_EXP 55
25705: AND
25706: IFFALSE 25808
25708: GO 25710
25710: DISABLE
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
// begin enable ;
25715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25716: LD_ADDR_VAR 0 2
25720: PUSH
25721: LD_INT 22
25723: PUSH
25724: LD_OWVAR 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: PUSH
25736: LD_INT 34
25738: PUSH
25739: LD_INT 11
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 34
25748: PUSH
25749: LD_INT 30
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PPUSH
25765: CALL_OW 69
25769: ST_TO_ADDR
// if not tmp then
25770: LD_VAR 0 2
25774: NOT
25775: IFFALSE 25779
// exit ;
25777: GO 25808
// for i in tmp do
25779: LD_ADDR_VAR 0 1
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: FOR_IN
25790: IFFALSE 25806
// begin SetLives ( i , 0 ) ;
25792: LD_VAR 0 1
25796: PPUSH
25797: LD_INT 0
25799: PPUSH
25800: CALL_OW 234
// end ;
25804: GO 25789
25806: POP
25807: POP
// end ;
25808: PPOPN 2
25810: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25811: LD_EXP 46
25815: PUSH
25816: LD_EXP 56
25820: AND
25821: IFFALSE 25841
25823: GO 25825
25825: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25826: LD_INT 32
25828: PPUSH
25829: LD_OWVAR 2
25833: PPUSH
25834: LD_INT 0
25836: PPUSH
25837: CALL_OW 324
25841: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25842: LD_EXP 46
25846: PUSH
25847: LD_EXP 57
25851: AND
25852: IFFALSE 26033
25854: GO 25856
25856: DISABLE
25857: LD_INT 0
25859: PPUSH
25860: PPUSH
25861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25862: LD_ADDR_VAR 0 2
25866: PUSH
25867: LD_INT 22
25869: PUSH
25870: LD_OWVAR 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 33
25881: PUSH
25882: LD_INT 3
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PPUSH
25893: CALL_OW 69
25897: ST_TO_ADDR
// if not tmp then
25898: LD_VAR 0 2
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 26033
// side := 0 ;
25907: LD_ADDR_VAR 0 3
25911: PUSH
25912: LD_INT 0
25914: ST_TO_ADDR
// for i := 1 to 8 do
25915: LD_ADDR_VAR 0 1
25919: PUSH
25920: DOUBLE
25921: LD_INT 1
25923: DEC
25924: ST_TO_ADDR
25925: LD_INT 8
25927: PUSH
25928: FOR_TO
25929: IFFALSE 25977
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25931: LD_OWVAR 2
25935: PUSH
25936: LD_VAR 0 1
25940: NONEQUAL
25941: PUSH
25942: LD_OWVAR 2
25946: PPUSH
25947: LD_VAR 0 1
25951: PPUSH
25952: CALL_OW 81
25956: PUSH
25957: LD_INT 2
25959: EQUAL
25960: AND
25961: IFFALSE 25975
// begin side := i ;
25963: LD_ADDR_VAR 0 3
25967: PUSH
25968: LD_VAR 0 1
25972: ST_TO_ADDR
// break ;
25973: GO 25977
// end ;
25975: GO 25928
25977: POP
25978: POP
// if not side then
25979: LD_VAR 0 3
25983: NOT
25984: IFFALSE 25988
// exit ;
25986: GO 26033
// for i := 1 to tmp do
25988: LD_ADDR_VAR 0 1
25992: PUSH
25993: DOUBLE
25994: LD_INT 1
25996: DEC
25997: ST_TO_ADDR
25998: LD_VAR 0 2
26002: PUSH
26003: FOR_TO
26004: IFFALSE 26031
// if Prob ( 60 ) then
26006: LD_INT 60
26008: PPUSH
26009: CALL_OW 13
26013: IFFALSE 26029
// SetSide ( i , side ) ;
26015: LD_VAR 0 1
26019: PPUSH
26020: LD_VAR 0 3
26024: PPUSH
26025: CALL_OW 235
26029: GO 26003
26031: POP
26032: POP
// end ;
26033: PPOPN 3
26035: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26036: LD_EXP 46
26040: PUSH
26041: LD_EXP 59
26045: AND
26046: IFFALSE 26165
26048: GO 26050
26050: DISABLE
26051: LD_INT 0
26053: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26054: LD_ADDR_VAR 0 1
26058: PUSH
26059: LD_INT 22
26061: PUSH
26062: LD_OWVAR 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 21
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 3
26083: PUSH
26084: LD_INT 23
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: PPUSH
26103: CALL_OW 69
26107: PUSH
26108: FOR_IN
26109: IFFALSE 26163
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 257
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: LD_INT 3
26129: PUSH
26130: LD_INT 4
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: IN
26139: IFFALSE 26161
// SetClass ( un , rand ( 1 , 4 ) ) ;
26141: LD_VAR 0 1
26145: PPUSH
26146: LD_INT 1
26148: PPUSH
26149: LD_INT 4
26151: PPUSH
26152: CALL_OW 12
26156: PPUSH
26157: CALL_OW 336
26161: GO 26108
26163: POP
26164: POP
// end ;
26165: PPOPN 1
26167: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26168: LD_EXP 46
26172: PUSH
26173: LD_EXP 58
26177: AND
26178: IFFALSE 26257
26180: GO 26182
26182: DISABLE
26183: LD_INT 0
26185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26186: LD_ADDR_VAR 0 1
26190: PUSH
26191: LD_INT 22
26193: PUSH
26194: LD_OWVAR 2
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 21
26205: PUSH
26206: LD_INT 3
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PPUSH
26217: CALL_OW 69
26221: ST_TO_ADDR
// if not tmp then
26222: LD_VAR 0 1
26226: NOT
26227: IFFALSE 26231
// exit ;
26229: GO 26257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26231: LD_VAR 0 1
26235: PUSH
26236: LD_INT 1
26238: PPUSH
26239: LD_VAR 0 1
26243: PPUSH
26244: CALL_OW 12
26248: ARRAY
26249: PPUSH
26250: LD_INT 100
26252: PPUSH
26253: CALL_OW 234
// end ;
26257: PPOPN 1
26259: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26260: LD_EXP 46
26264: PUSH
26265: LD_EXP 60
26269: AND
26270: IFFALSE 26368
26272: GO 26274
26274: DISABLE
26275: LD_INT 0
26277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26278: LD_ADDR_VAR 0 1
26282: PUSH
26283: LD_INT 22
26285: PUSH
26286: LD_OWVAR 2
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 21
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PPUSH
26309: CALL_OW 69
26313: ST_TO_ADDR
// if not tmp then
26314: LD_VAR 0 1
26318: NOT
26319: IFFALSE 26323
// exit ;
26321: GO 26368
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26323: LD_VAR 0 1
26327: PUSH
26328: LD_INT 1
26330: PPUSH
26331: LD_VAR 0 1
26335: PPUSH
26336: CALL_OW 12
26340: ARRAY
26341: PPUSH
26342: LD_INT 1
26344: PPUSH
26345: LD_INT 4
26347: PPUSH
26348: CALL_OW 12
26352: PPUSH
26353: LD_INT 3000
26355: PPUSH
26356: LD_INT 9000
26358: PPUSH
26359: CALL_OW 12
26363: PPUSH
26364: CALL_OW 492
// end ;
26368: PPOPN 1
26370: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26371: LD_EXP 46
26375: PUSH
26376: LD_EXP 61
26380: AND
26381: IFFALSE 26401
26383: GO 26385
26385: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26386: LD_INT 1
26388: PPUSH
26389: LD_OWVAR 2
26393: PPUSH
26394: LD_INT 0
26396: PPUSH
26397: CALL_OW 324
26401: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26402: LD_EXP 46
26406: PUSH
26407: LD_EXP 62
26411: AND
26412: IFFALSE 26495
26414: GO 26416
26416: DISABLE
26417: LD_INT 0
26419: PPUSH
26420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26421: LD_ADDR_VAR 0 2
26425: PUSH
26426: LD_INT 22
26428: PUSH
26429: LD_OWVAR 2
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 21
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PPUSH
26452: CALL_OW 69
26456: ST_TO_ADDR
// if not tmp then
26457: LD_VAR 0 2
26461: NOT
26462: IFFALSE 26466
// exit ;
26464: GO 26495
// for i in tmp do
26466: LD_ADDR_VAR 0 1
26470: PUSH
26471: LD_VAR 0 2
26475: PUSH
26476: FOR_IN
26477: IFFALSE 26493
// SetBLevel ( i , 10 ) ;
26479: LD_VAR 0 1
26483: PPUSH
26484: LD_INT 10
26486: PPUSH
26487: CALL_OW 241
26491: GO 26476
26493: POP
26494: POP
// end ;
26495: PPOPN 2
26497: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26498: LD_EXP 46
26502: PUSH
26503: LD_EXP 63
26507: AND
26508: IFFALSE 26619
26510: GO 26512
26512: DISABLE
26513: LD_INT 0
26515: PPUSH
26516: PPUSH
26517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26518: LD_ADDR_VAR 0 3
26522: PUSH
26523: LD_INT 22
26525: PUSH
26526: LD_OWVAR 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 25
26537: PUSH
26538: LD_INT 1
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PPUSH
26549: CALL_OW 69
26553: ST_TO_ADDR
// if not tmp then
26554: LD_VAR 0 3
26558: NOT
26559: IFFALSE 26563
// exit ;
26561: GO 26619
// un := tmp [ rand ( 1 , tmp ) ] ;
26563: LD_ADDR_VAR 0 2
26567: PUSH
26568: LD_VAR 0 3
26572: PUSH
26573: LD_INT 1
26575: PPUSH
26576: LD_VAR 0 3
26580: PPUSH
26581: CALL_OW 12
26585: ARRAY
26586: ST_TO_ADDR
// if Crawls ( un ) then
26587: LD_VAR 0 2
26591: PPUSH
26592: CALL_OW 318
26596: IFFALSE 26607
// ComWalk ( un ) ;
26598: LD_VAR 0 2
26602: PPUSH
26603: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26607: LD_VAR 0 2
26611: PPUSH
26612: LD_INT 5
26614: PPUSH
26615: CALL_OW 336
// end ;
26619: PPOPN 3
26621: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26622: LD_EXP 46
26626: PUSH
26627: LD_EXP 64
26631: AND
26632: PUSH
26633: LD_OWVAR 67
26637: PUSH
26638: LD_INT 4
26640: LESS
26641: AND
26642: IFFALSE 26661
26644: GO 26646
26646: DISABLE
// begin Difficulty := Difficulty + 1 ;
26647: LD_ADDR_OWVAR 67
26651: PUSH
26652: LD_OWVAR 67
26656: PUSH
26657: LD_INT 1
26659: PLUS
26660: ST_TO_ADDR
// end ;
26661: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26662: LD_EXP 46
26666: PUSH
26667: LD_EXP 65
26671: AND
26672: IFFALSE 26775
26674: GO 26676
26676: DISABLE
26677: LD_INT 0
26679: PPUSH
// begin for i := 1 to 5 do
26680: LD_ADDR_VAR 0 1
26684: PUSH
26685: DOUBLE
26686: LD_INT 1
26688: DEC
26689: ST_TO_ADDR
26690: LD_INT 5
26692: PUSH
26693: FOR_TO
26694: IFFALSE 26773
// begin uc_nation := nation_nature ;
26696: LD_ADDR_OWVAR 21
26700: PUSH
26701: LD_INT 0
26703: ST_TO_ADDR
// uc_side := 0 ;
26704: LD_ADDR_OWVAR 20
26708: PUSH
26709: LD_INT 0
26711: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26712: LD_ADDR_OWVAR 29
26716: PUSH
26717: LD_INT 12
26719: PUSH
26720: LD_INT 12
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: ST_TO_ADDR
// hc_agressivity := 20 ;
26727: LD_ADDR_OWVAR 35
26731: PUSH
26732: LD_INT 20
26734: ST_TO_ADDR
// hc_class := class_tiger ;
26735: LD_ADDR_OWVAR 28
26739: PUSH
26740: LD_INT 14
26742: ST_TO_ADDR
// hc_gallery :=  ;
26743: LD_ADDR_OWVAR 33
26747: PUSH
26748: LD_STRING 
26750: ST_TO_ADDR
// hc_name :=  ;
26751: LD_ADDR_OWVAR 26
26755: PUSH
26756: LD_STRING 
26758: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26759: CALL_OW 44
26763: PPUSH
26764: LD_INT 0
26766: PPUSH
26767: CALL_OW 51
// end ;
26771: GO 26693
26773: POP
26774: POP
// end ;
26775: PPOPN 1
26777: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26778: LD_EXP 46
26782: PUSH
26783: LD_EXP 66
26787: AND
26788: IFFALSE 26797
26790: GO 26792
26792: DISABLE
// StreamSibBomb ;
26793: CALL 26798 0 0
26797: END
// export function StreamSibBomb ; var i , x , y ; begin
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
// result := false ;
26804: LD_ADDR_VAR 0 1
26808: PUSH
26809: LD_INT 0
26811: ST_TO_ADDR
// for i := 1 to 16 do
26812: LD_ADDR_VAR 0 2
26816: PUSH
26817: DOUBLE
26818: LD_INT 1
26820: DEC
26821: ST_TO_ADDR
26822: LD_INT 16
26824: PUSH
26825: FOR_TO
26826: IFFALSE 27025
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26828: LD_ADDR_VAR 0 3
26832: PUSH
26833: LD_INT 10
26835: PUSH
26836: LD_INT 20
26838: PUSH
26839: LD_INT 30
26841: PUSH
26842: LD_INT 40
26844: PUSH
26845: LD_INT 50
26847: PUSH
26848: LD_INT 60
26850: PUSH
26851: LD_INT 70
26853: PUSH
26854: LD_INT 80
26856: PUSH
26857: LD_INT 90
26859: PUSH
26860: LD_INT 100
26862: PUSH
26863: LD_INT 110
26865: PUSH
26866: LD_INT 120
26868: PUSH
26869: LD_INT 130
26871: PUSH
26872: LD_INT 140
26874: PUSH
26875: LD_INT 150
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: PPUSH
26898: LD_INT 15
26900: PPUSH
26901: CALL_OW 12
26905: ARRAY
26906: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26907: LD_ADDR_VAR 0 4
26911: PUSH
26912: LD_INT 10
26914: PUSH
26915: LD_INT 20
26917: PUSH
26918: LD_INT 30
26920: PUSH
26921: LD_INT 40
26923: PUSH
26924: LD_INT 50
26926: PUSH
26927: LD_INT 60
26929: PUSH
26930: LD_INT 70
26932: PUSH
26933: LD_INT 80
26935: PUSH
26936: LD_INT 90
26938: PUSH
26939: LD_INT 100
26941: PUSH
26942: LD_INT 110
26944: PUSH
26945: LD_INT 120
26947: PUSH
26948: LD_INT 130
26950: PUSH
26951: LD_INT 140
26953: PUSH
26954: LD_INT 150
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PPUSH
26977: LD_INT 15
26979: PPUSH
26980: CALL_OW 12
26984: ARRAY
26985: ST_TO_ADDR
// if ValidHex ( x , y ) then
26986: LD_VAR 0 3
26990: PPUSH
26991: LD_VAR 0 4
26995: PPUSH
26996: CALL_OW 488
27000: IFFALSE 27023
// begin result := [ x , y ] ;
27002: LD_ADDR_VAR 0 1
27006: PUSH
27007: LD_VAR 0 3
27011: PUSH
27012: LD_VAR 0 4
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: ST_TO_ADDR
// break ;
27021: GO 27025
// end ; end ;
27023: GO 26825
27025: POP
27026: POP
// if result then
27027: LD_VAR 0 1
27031: IFFALSE 27091
// begin ToLua ( playSibBomb() ) ;
27033: LD_STRING playSibBomb()
27035: PPUSH
27036: CALL_OW 559
// wait ( 0 0$14 ) ;
27040: LD_INT 490
27042: PPUSH
27043: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27047: LD_VAR 0 1
27051: PUSH
27052: LD_INT 1
27054: ARRAY
27055: PPUSH
27056: LD_VAR 0 1
27060: PUSH
27061: LD_INT 2
27063: ARRAY
27064: PPUSH
27065: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27069: LD_VAR 0 1
27073: PUSH
27074: LD_INT 1
27076: ARRAY
27077: PPUSH
27078: LD_VAR 0 1
27082: PUSH
27083: LD_INT 2
27085: ARRAY
27086: PPUSH
27087: CALL_OW 429
// end ; end ;
27091: LD_VAR 0 1
27095: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27096: LD_EXP 46
27100: PUSH
27101: LD_EXP 68
27105: AND
27106: IFFALSE 27118
27108: GO 27110
27110: DISABLE
// YouLost (  ) ;
27111: LD_STRING 
27113: PPUSH
27114: CALL_OW 104
27118: END
// every 0 0$1 trigger StreamModeActive and sFog do
27119: LD_EXP 46
27123: PUSH
27124: LD_EXP 67
27128: AND
27129: IFFALSE 27143
27131: GO 27133
27133: DISABLE
// FogOff ( your_side ) ;
27134: LD_OWVAR 2
27138: PPUSH
27139: CALL_OW 344
27143: END
// every 0 0$1 trigger StreamModeActive and sSun do
27144: LD_EXP 46
27148: PUSH
27149: LD_EXP 69
27153: AND
27154: IFFALSE 27182
27156: GO 27158
27158: DISABLE
// begin solar_recharge_percent := 0 ;
27159: LD_ADDR_OWVAR 79
27163: PUSH
27164: LD_INT 0
27166: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27167: LD_INT 10500
27169: PPUSH
27170: CALL_OW 67
// solar_recharge_percent := 100 ;
27174: LD_ADDR_OWVAR 79
27178: PUSH
27179: LD_INT 100
27181: ST_TO_ADDR
// end ;
27182: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27183: LD_EXP 46
27187: PUSH
27188: LD_EXP 70
27192: AND
27193: IFFALSE 27432
27195: GO 27197
27197: DISABLE
27198: LD_INT 0
27200: PPUSH
27201: PPUSH
27202: PPUSH
// begin tmp := [ ] ;
27203: LD_ADDR_VAR 0 3
27207: PUSH
27208: EMPTY
27209: ST_TO_ADDR
// for i := 1 to 6 do
27210: LD_ADDR_VAR 0 1
27214: PUSH
27215: DOUBLE
27216: LD_INT 1
27218: DEC
27219: ST_TO_ADDR
27220: LD_INT 6
27222: PUSH
27223: FOR_TO
27224: IFFALSE 27329
// begin uc_nation := nation_nature ;
27226: LD_ADDR_OWVAR 21
27230: PUSH
27231: LD_INT 0
27233: ST_TO_ADDR
// uc_side := 0 ;
27234: LD_ADDR_OWVAR 20
27238: PUSH
27239: LD_INT 0
27241: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27242: LD_ADDR_OWVAR 29
27246: PUSH
27247: LD_INT 12
27249: PUSH
27250: LD_INT 12
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: ST_TO_ADDR
// hc_agressivity := 20 ;
27257: LD_ADDR_OWVAR 35
27261: PUSH
27262: LD_INT 20
27264: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27265: LD_ADDR_OWVAR 28
27269: PUSH
27270: LD_INT 17
27272: ST_TO_ADDR
// hc_gallery :=  ;
27273: LD_ADDR_OWVAR 33
27277: PUSH
27278: LD_STRING 
27280: ST_TO_ADDR
// hc_name :=  ;
27281: LD_ADDR_OWVAR 26
27285: PUSH
27286: LD_STRING 
27288: ST_TO_ADDR
// un := CreateHuman ;
27289: LD_ADDR_VAR 0 2
27293: PUSH
27294: CALL_OW 44
27298: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27299: LD_VAR 0 2
27303: PPUSH
27304: LD_INT 1
27306: PPUSH
27307: CALL_OW 51
// tmp := tmp ^ un ;
27311: LD_ADDR_VAR 0 3
27315: PUSH
27316: LD_VAR 0 3
27320: PUSH
27321: LD_VAR 0 2
27325: ADD
27326: ST_TO_ADDR
// end ;
27327: GO 27223
27329: POP
27330: POP
// repeat wait ( 0 0$1 ) ;
27331: LD_INT 35
27333: PPUSH
27334: CALL_OW 67
// for un in tmp do
27338: LD_ADDR_VAR 0 2
27342: PUSH
27343: LD_VAR 0 3
27347: PUSH
27348: FOR_IN
27349: IFFALSE 27423
// begin if IsDead ( un ) then
27351: LD_VAR 0 2
27355: PPUSH
27356: CALL_OW 301
27360: IFFALSE 27380
// begin tmp := tmp diff un ;
27362: LD_ADDR_VAR 0 3
27366: PUSH
27367: LD_VAR 0 3
27371: PUSH
27372: LD_VAR 0 2
27376: DIFF
27377: ST_TO_ADDR
// continue ;
27378: GO 27348
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27380: LD_VAR 0 2
27384: PPUSH
27385: LD_INT 3
27387: PUSH
27388: LD_INT 22
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PPUSH
27402: CALL_OW 69
27406: PPUSH
27407: LD_VAR 0 2
27411: PPUSH
27412: CALL_OW 74
27416: PPUSH
27417: CALL_OW 115
// end ;
27421: GO 27348
27423: POP
27424: POP
// until not tmp ;
27425: LD_VAR 0 3
27429: NOT
27430: IFFALSE 27331
// end ;
27432: PPOPN 3
27434: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27435: LD_EXP 46
27439: PUSH
27440: LD_EXP 71
27444: AND
27445: IFFALSE 27499
27447: GO 27449
27449: DISABLE
// begin ToLua ( displayTroll(); ) ;
27450: LD_STRING displayTroll();
27452: PPUSH
27453: CALL_OW 559
// wait ( 3 3$00 ) ;
27457: LD_INT 6300
27459: PPUSH
27460: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27464: LD_STRING hideTroll();
27466: PPUSH
27467: CALL_OW 559
// wait ( 1 1$00 ) ;
27471: LD_INT 2100
27473: PPUSH
27474: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27478: LD_STRING displayTroll();
27480: PPUSH
27481: CALL_OW 559
// wait ( 1 1$00 ) ;
27485: LD_INT 2100
27487: PPUSH
27488: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27492: LD_STRING hideTroll();
27494: PPUSH
27495: CALL_OW 559
// end ;
27499: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27500: LD_EXP 46
27504: PUSH
27505: LD_EXP 72
27509: AND
27510: IFFALSE 27573
27512: GO 27514
27514: DISABLE
27515: LD_INT 0
27517: PPUSH
// begin p := 0 ;
27518: LD_ADDR_VAR 0 1
27522: PUSH
27523: LD_INT 0
27525: ST_TO_ADDR
// repeat game_speed := 1 ;
27526: LD_ADDR_OWVAR 65
27530: PUSH
27531: LD_INT 1
27533: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27534: LD_INT 35
27536: PPUSH
27537: CALL_OW 67
// p := p + 1 ;
27541: LD_ADDR_VAR 0 1
27545: PUSH
27546: LD_VAR 0 1
27550: PUSH
27551: LD_INT 1
27553: PLUS
27554: ST_TO_ADDR
// until p >= 60 ;
27555: LD_VAR 0 1
27559: PUSH
27560: LD_INT 60
27562: GREATEREQUAL
27563: IFFALSE 27526
// game_speed := 4 ;
27565: LD_ADDR_OWVAR 65
27569: PUSH
27570: LD_INT 4
27572: ST_TO_ADDR
// end ;
27573: PPOPN 1
27575: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27576: LD_EXP 46
27580: PUSH
27581: LD_EXP 73
27585: AND
27586: IFFALSE 27732
27588: GO 27590
27590: DISABLE
27591: LD_INT 0
27593: PPUSH
27594: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27595: LD_ADDR_VAR 0 1
27599: PUSH
27600: LD_INT 22
27602: PUSH
27603: LD_OWVAR 2
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 30
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 30
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PPUSH
27644: CALL_OW 69
27648: ST_TO_ADDR
// if not depot then
27649: LD_VAR 0 1
27653: NOT
27654: IFFALSE 27658
// exit ;
27656: GO 27732
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27658: LD_ADDR_VAR 0 2
27662: PUSH
27663: LD_VAR 0 1
27667: PUSH
27668: LD_INT 1
27670: PPUSH
27671: LD_VAR 0 1
27675: PPUSH
27676: CALL_OW 12
27680: ARRAY
27681: PPUSH
27682: CALL_OW 274
27686: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27687: LD_VAR 0 2
27691: PPUSH
27692: LD_INT 1
27694: PPUSH
27695: LD_INT 0
27697: PPUSH
27698: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27702: LD_VAR 0 2
27706: PPUSH
27707: LD_INT 2
27709: PPUSH
27710: LD_INT 0
27712: PPUSH
27713: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27717: LD_VAR 0 2
27721: PPUSH
27722: LD_INT 3
27724: PPUSH
27725: LD_INT 0
27727: PPUSH
27728: CALL_OW 277
// end ;
27732: PPOPN 2
27734: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27735: LD_EXP 46
27739: PUSH
27740: LD_EXP 74
27744: AND
27745: IFFALSE 27842
27747: GO 27749
27749: DISABLE
27750: LD_INT 0
27752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27753: LD_ADDR_VAR 0 1
27757: PUSH
27758: LD_INT 22
27760: PUSH
27761: LD_OWVAR 2
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 21
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: LD_INT 23
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: PPUSH
27802: CALL_OW 69
27806: ST_TO_ADDR
// if not tmp then
27807: LD_VAR 0 1
27811: NOT
27812: IFFALSE 27816
// exit ;
27814: GO 27842
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27816: LD_VAR 0 1
27820: PUSH
27821: LD_INT 1
27823: PPUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: CALL_OW 12
27833: ARRAY
27834: PPUSH
27835: LD_INT 200
27837: PPUSH
27838: CALL_OW 234
// end ;
27842: PPOPN 1
27844: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27845: LD_EXP 46
27849: PUSH
27850: LD_EXP 75
27854: AND
27855: IFFALSE 27934
27857: GO 27859
27859: DISABLE
27860: LD_INT 0
27862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27863: LD_ADDR_VAR 0 1
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_OWVAR 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 21
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PPUSH
27894: CALL_OW 69
27898: ST_TO_ADDR
// if not tmp then
27899: LD_VAR 0 1
27903: NOT
27904: IFFALSE 27908
// exit ;
27906: GO 27934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27908: LD_VAR 0 1
27912: PUSH
27913: LD_INT 1
27915: PPUSH
27916: LD_VAR 0 1
27920: PPUSH
27921: CALL_OW 12
27925: ARRAY
27926: PPUSH
27927: LD_INT 60
27929: PPUSH
27930: CALL_OW 234
// end ;
27934: PPOPN 1
27936: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27937: LD_EXP 46
27941: PUSH
27942: LD_EXP 76
27946: AND
27947: IFFALSE 28046
27949: GO 27951
27951: DISABLE
27952: LD_INT 0
27954: PPUSH
27955: PPUSH
// begin enable ;
27956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27957: LD_ADDR_VAR 0 1
27961: PUSH
27962: LD_INT 22
27964: PUSH
27965: LD_OWVAR 2
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 61
27976: PUSH
27977: EMPTY
27978: LIST
27979: PUSH
27980: LD_INT 33
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: PPUSH
27995: CALL_OW 69
27999: ST_TO_ADDR
// if not tmp then
28000: LD_VAR 0 1
28004: NOT
28005: IFFALSE 28009
// exit ;
28007: GO 28046
// for i in tmp do
28009: LD_ADDR_VAR 0 2
28013: PUSH
28014: LD_VAR 0 1
28018: PUSH
28019: FOR_IN
28020: IFFALSE 28044
// if IsControledBy ( i ) then
28022: LD_VAR 0 2
28026: PPUSH
28027: CALL_OW 312
28031: IFFALSE 28042
// ComUnlink ( i ) ;
28033: LD_VAR 0 2
28037: PPUSH
28038: CALL_OW 136
28042: GO 28019
28044: POP
28045: POP
// end ;
28046: PPOPN 2
28048: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28049: LD_EXP 46
28053: PUSH
28054: LD_EXP 77
28058: AND
28059: IFFALSE 28199
28061: GO 28063
28063: DISABLE
28064: LD_INT 0
28066: PPUSH
28067: PPUSH
// begin ToLua ( displayPowell(); ) ;
28068: LD_STRING displayPowell();
28070: PPUSH
28071: CALL_OW 559
// uc_side := 0 ;
28075: LD_ADDR_OWVAR 20
28079: PUSH
28080: LD_INT 0
28082: ST_TO_ADDR
// uc_nation := 2 ;
28083: LD_ADDR_OWVAR 21
28087: PUSH
28088: LD_INT 2
28090: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28091: LD_ADDR_OWVAR 37
28095: PUSH
28096: LD_INT 14
28098: ST_TO_ADDR
// vc_engine := engine_siberite ;
28099: LD_ADDR_OWVAR 39
28103: PUSH
28104: LD_INT 3
28106: ST_TO_ADDR
// vc_control := control_apeman ;
28107: LD_ADDR_OWVAR 38
28111: PUSH
28112: LD_INT 5
28114: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28115: LD_ADDR_OWVAR 40
28119: PUSH
28120: LD_INT 29
28122: ST_TO_ADDR
// un := CreateVehicle ;
28123: LD_ADDR_VAR 0 2
28127: PUSH
28128: CALL_OW 45
28132: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28133: LD_VAR 0 2
28137: PPUSH
28138: LD_INT 1
28140: PPUSH
28141: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28145: LD_INT 35
28147: PPUSH
28148: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_INT 22
28159: PUSH
28160: LD_OWVAR 2
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PPUSH
28169: CALL_OW 69
28173: PPUSH
28174: LD_VAR 0 2
28178: PPUSH
28179: CALL_OW 74
28183: PPUSH
28184: CALL_OW 115
// until IsDead ( un ) ;
28188: LD_VAR 0 2
28192: PPUSH
28193: CALL_OW 301
28197: IFFALSE 28145
// end ;
28199: PPOPN 2
28201: END
// every 0 0$1 trigger StreamModeActive and sStu do
28202: LD_EXP 46
28206: PUSH
28207: LD_EXP 85
28211: AND
28212: IFFALSE 28228
28214: GO 28216
28216: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28217: LD_STRING displayStucuk();
28219: PPUSH
28220: CALL_OW 559
// ResetFog ;
28224: CALL_OW 335
// end ;
28228: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28229: LD_EXP 46
28233: PUSH
28234: LD_EXP 78
28238: AND
28239: IFFALSE 28380
28241: GO 28243
28243: DISABLE
28244: LD_INT 0
28246: PPUSH
28247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28248: LD_ADDR_VAR 0 2
28252: PUSH
28253: LD_INT 22
28255: PUSH
28256: LD_OWVAR 2
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 21
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PPUSH
28279: CALL_OW 69
28283: ST_TO_ADDR
// if not tmp then
28284: LD_VAR 0 2
28288: NOT
28289: IFFALSE 28293
// exit ;
28291: GO 28380
// un := tmp [ rand ( 1 , tmp ) ] ;
28293: LD_ADDR_VAR 0 1
28297: PUSH
28298: LD_VAR 0 2
28302: PUSH
28303: LD_INT 1
28305: PPUSH
28306: LD_VAR 0 2
28310: PPUSH
28311: CALL_OW 12
28315: ARRAY
28316: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28317: LD_VAR 0 1
28321: PPUSH
28322: LD_INT 0
28324: PPUSH
28325: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28329: LD_VAR 0 1
28333: PPUSH
28334: LD_OWVAR 3
28338: PUSH
28339: LD_VAR 0 1
28343: DIFF
28344: PPUSH
28345: LD_VAR 0 1
28349: PPUSH
28350: CALL_OW 74
28354: PPUSH
28355: CALL_OW 115
// wait ( 0 0$20 ) ;
28359: LD_INT 700
28361: PPUSH
28362: CALL_OW 67
// SetSide ( un , your_side ) ;
28366: LD_VAR 0 1
28370: PPUSH
28371: LD_OWVAR 2
28375: PPUSH
28376: CALL_OW 235
// end ;
28380: PPOPN 2
28382: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28383: LD_EXP 46
28387: PUSH
28388: LD_EXP 79
28392: AND
28393: IFFALSE 28499
28395: GO 28397
28397: DISABLE
28398: LD_INT 0
28400: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28401: LD_ADDR_VAR 0 1
28405: PUSH
28406: LD_INT 22
28408: PUSH
28409: LD_OWVAR 2
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: LD_INT 30
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 30
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PPUSH
28450: CALL_OW 69
28454: ST_TO_ADDR
// if not depot then
28455: LD_VAR 0 1
28459: NOT
28460: IFFALSE 28464
// exit ;
28462: GO 28499
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28464: LD_VAR 0 1
28468: PUSH
28469: LD_INT 1
28471: ARRAY
28472: PPUSH
28473: CALL_OW 250
28477: PPUSH
28478: LD_VAR 0 1
28482: PUSH
28483: LD_INT 1
28485: ARRAY
28486: PPUSH
28487: CALL_OW 251
28491: PPUSH
28492: LD_INT 70
28494: PPUSH
28495: CALL_OW 495
// end ;
28499: PPOPN 1
28501: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28502: LD_EXP 46
28506: PUSH
28507: LD_EXP 80
28511: AND
28512: IFFALSE 28723
28514: GO 28516
28516: DISABLE
28517: LD_INT 0
28519: PPUSH
28520: PPUSH
28521: PPUSH
28522: PPUSH
28523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28524: LD_ADDR_VAR 0 5
28528: PUSH
28529: LD_INT 22
28531: PUSH
28532: LD_OWVAR 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 21
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PPUSH
28555: CALL_OW 69
28559: ST_TO_ADDR
// if not tmp then
28560: LD_VAR 0 5
28564: NOT
28565: IFFALSE 28569
// exit ;
28567: GO 28723
// for i in tmp do
28569: LD_ADDR_VAR 0 1
28573: PUSH
28574: LD_VAR 0 5
28578: PUSH
28579: FOR_IN
28580: IFFALSE 28721
// begin d := rand ( 0 , 5 ) ;
28582: LD_ADDR_VAR 0 4
28586: PUSH
28587: LD_INT 0
28589: PPUSH
28590: LD_INT 5
28592: PPUSH
28593: CALL_OW 12
28597: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28598: LD_ADDR_VAR 0 2
28602: PUSH
28603: LD_VAR 0 1
28607: PPUSH
28608: CALL_OW 250
28612: PPUSH
28613: LD_VAR 0 4
28617: PPUSH
28618: LD_INT 3
28620: PPUSH
28621: LD_INT 12
28623: PPUSH
28624: CALL_OW 12
28628: PPUSH
28629: CALL_OW 272
28633: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28634: LD_ADDR_VAR 0 3
28638: PUSH
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 251
28648: PPUSH
28649: LD_VAR 0 4
28653: PPUSH
28654: LD_INT 3
28656: PPUSH
28657: LD_INT 12
28659: PPUSH
28660: CALL_OW 12
28664: PPUSH
28665: CALL_OW 273
28669: ST_TO_ADDR
// if ValidHex ( x , y ) then
28670: LD_VAR 0 2
28674: PPUSH
28675: LD_VAR 0 3
28679: PPUSH
28680: CALL_OW 488
28684: IFFALSE 28719
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28686: LD_VAR 0 1
28690: PPUSH
28691: LD_VAR 0 2
28695: PPUSH
28696: LD_VAR 0 3
28700: PPUSH
28701: LD_INT 3
28703: PPUSH
28704: LD_INT 6
28706: PPUSH
28707: CALL_OW 12
28711: PPUSH
28712: LD_INT 1
28714: PPUSH
28715: CALL_OW 483
// end ;
28719: GO 28579
28721: POP
28722: POP
// end ;
28723: PPOPN 5
28725: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28726: LD_EXP 46
28730: PUSH
28731: LD_EXP 81
28735: AND
28736: IFFALSE 28830
28738: GO 28740
28740: DISABLE
28741: LD_INT 0
28743: PPUSH
28744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28745: LD_ADDR_VAR 0 2
28749: PUSH
28750: LD_INT 22
28752: PUSH
28753: LD_OWVAR 2
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 32
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 21
28774: PUSH
28775: LD_INT 2
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: LIST
28786: PPUSH
28787: CALL_OW 69
28791: ST_TO_ADDR
// if not tmp then
28792: LD_VAR 0 2
28796: NOT
28797: IFFALSE 28801
// exit ;
28799: GO 28830
// for i in tmp do
28801: LD_ADDR_VAR 0 1
28805: PUSH
28806: LD_VAR 0 2
28810: PUSH
28811: FOR_IN
28812: IFFALSE 28828
// SetFuel ( i , 0 ) ;
28814: LD_VAR 0 1
28818: PPUSH
28819: LD_INT 0
28821: PPUSH
28822: CALL_OW 240
28826: GO 28811
28828: POP
28829: POP
// end ;
28830: PPOPN 2
28832: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28833: LD_EXP 46
28837: PUSH
28838: LD_EXP 82
28842: AND
28843: IFFALSE 28909
28845: GO 28847
28847: DISABLE
28848: LD_INT 0
28850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28851: LD_ADDR_VAR 0 1
28855: PUSH
28856: LD_INT 22
28858: PUSH
28859: LD_OWVAR 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 30
28870: PUSH
28871: LD_INT 29
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PPUSH
28882: CALL_OW 69
28886: ST_TO_ADDR
// if not tmp then
28887: LD_VAR 0 1
28891: NOT
28892: IFFALSE 28896
// exit ;
28894: GO 28909
// DestroyUnit ( tmp [ 1 ] ) ;
28896: LD_VAR 0 1
28900: PUSH
28901: LD_INT 1
28903: ARRAY
28904: PPUSH
28905: CALL_OW 65
// end ;
28909: PPOPN 1
28911: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28912: LD_EXP 46
28916: PUSH
28917: LD_EXP 84
28921: AND
28922: IFFALSE 29051
28924: GO 28926
28926: DISABLE
28927: LD_INT 0
28929: PPUSH
// begin uc_side := 0 ;
28930: LD_ADDR_OWVAR 20
28934: PUSH
28935: LD_INT 0
28937: ST_TO_ADDR
// uc_nation := nation_arabian ;
28938: LD_ADDR_OWVAR 21
28942: PUSH
28943: LD_INT 2
28945: ST_TO_ADDR
// hc_gallery :=  ;
28946: LD_ADDR_OWVAR 33
28950: PUSH
28951: LD_STRING 
28953: ST_TO_ADDR
// hc_name :=  ;
28954: LD_ADDR_OWVAR 26
28958: PUSH
28959: LD_STRING 
28961: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28962: LD_INT 1
28964: PPUSH
28965: LD_INT 11
28967: PPUSH
28968: LD_INT 10
28970: PPUSH
28971: CALL_OW 380
// un := CreateHuman ;
28975: LD_ADDR_VAR 0 1
28979: PUSH
28980: CALL_OW 44
28984: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28985: LD_VAR 0 1
28989: PPUSH
28990: LD_INT 1
28992: PPUSH
28993: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28997: LD_INT 35
28999: PPUSH
29000: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29004: LD_VAR 0 1
29008: PPUSH
29009: LD_INT 22
29011: PUSH
29012: LD_OWVAR 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PPUSH
29021: CALL_OW 69
29025: PPUSH
29026: LD_VAR 0 1
29030: PPUSH
29031: CALL_OW 74
29035: PPUSH
29036: CALL_OW 115
// until IsDead ( un ) ;
29040: LD_VAR 0 1
29044: PPUSH
29045: CALL_OW 301
29049: IFFALSE 28997
// end ;
29051: PPOPN 1
29053: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29054: LD_EXP 46
29058: PUSH
29059: LD_EXP 86
29063: AND
29064: IFFALSE 29076
29066: GO 29068
29068: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29069: LD_STRING earthquake(getX(game), 0, 32)
29071: PPUSH
29072: CALL_OW 559
29076: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29077: LD_EXP 46
29081: PUSH
29082: LD_EXP 87
29086: AND
29087: IFFALSE 29178
29089: GO 29091
29091: DISABLE
29092: LD_INT 0
29094: PPUSH
// begin enable ;
29095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29096: LD_ADDR_VAR 0 1
29100: PUSH
29101: LD_INT 22
29103: PUSH
29104: LD_OWVAR 2
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 21
29115: PUSH
29116: LD_INT 2
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 33
29125: PUSH
29126: LD_INT 3
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 69
29142: ST_TO_ADDR
// if not tmp then
29143: LD_VAR 0 1
29147: NOT
29148: IFFALSE 29152
// exit ;
29150: GO 29178
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29152: LD_VAR 0 1
29156: PUSH
29157: LD_INT 1
29159: PPUSH
29160: LD_VAR 0 1
29164: PPUSH
29165: CALL_OW 12
29169: ARRAY
29170: PPUSH
29171: LD_INT 1
29173: PPUSH
29174: CALL_OW 234
// end ;
29178: PPOPN 1
29180: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29181: LD_EXP 46
29185: PUSH
29186: LD_EXP 88
29190: AND
29191: IFFALSE 29332
29193: GO 29195
29195: DISABLE
29196: LD_INT 0
29198: PPUSH
29199: PPUSH
29200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29201: LD_ADDR_VAR 0 3
29205: PUSH
29206: LD_INT 22
29208: PUSH
29209: LD_OWVAR 2
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 25
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PPUSH
29232: CALL_OW 69
29236: ST_TO_ADDR
// if not tmp then
29237: LD_VAR 0 3
29241: NOT
29242: IFFALSE 29246
// exit ;
29244: GO 29332
// un := tmp [ rand ( 1 , tmp ) ] ;
29246: LD_ADDR_VAR 0 2
29250: PUSH
29251: LD_VAR 0 3
29255: PUSH
29256: LD_INT 1
29258: PPUSH
29259: LD_VAR 0 3
29263: PPUSH
29264: CALL_OW 12
29268: ARRAY
29269: ST_TO_ADDR
// if Crawls ( un ) then
29270: LD_VAR 0 2
29274: PPUSH
29275: CALL_OW 318
29279: IFFALSE 29290
// ComWalk ( un ) ;
29281: LD_VAR 0 2
29285: PPUSH
29286: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29290: LD_VAR 0 2
29294: PPUSH
29295: LD_INT 9
29297: PPUSH
29298: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29302: LD_INT 28
29304: PPUSH
29305: LD_OWVAR 2
29309: PPUSH
29310: LD_INT 2
29312: PPUSH
29313: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29317: LD_INT 29
29319: PPUSH
29320: LD_OWVAR 2
29324: PPUSH
29325: LD_INT 2
29327: PPUSH
29328: CALL_OW 322
// end ;
29332: PPOPN 3
29334: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29335: LD_EXP 46
29339: PUSH
29340: LD_EXP 89
29344: AND
29345: IFFALSE 29456
29347: GO 29349
29349: DISABLE
29350: LD_INT 0
29352: PPUSH
29353: PPUSH
29354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_INT 22
29362: PUSH
29363: LD_OWVAR 2
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 25
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PPUSH
29386: CALL_OW 69
29390: ST_TO_ADDR
// if not tmp then
29391: LD_VAR 0 3
29395: NOT
29396: IFFALSE 29400
// exit ;
29398: GO 29456
// un := tmp [ rand ( 1 , tmp ) ] ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_VAR 0 3
29409: PUSH
29410: LD_INT 1
29412: PPUSH
29413: LD_VAR 0 3
29417: PPUSH
29418: CALL_OW 12
29422: ARRAY
29423: ST_TO_ADDR
// if Crawls ( un ) then
29424: LD_VAR 0 2
29428: PPUSH
29429: CALL_OW 318
29433: IFFALSE 29444
// ComWalk ( un ) ;
29435: LD_VAR 0 2
29439: PPUSH
29440: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29444: LD_VAR 0 2
29448: PPUSH
29449: LD_INT 8
29451: PPUSH
29452: CALL_OW 336
// end ;
29456: PPOPN 3
29458: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29459: LD_EXP 46
29463: PUSH
29464: LD_EXP 90
29468: AND
29469: IFFALSE 29613
29471: GO 29473
29473: DISABLE
29474: LD_INT 0
29476: PPUSH
29477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29478: LD_ADDR_VAR 0 2
29482: PUSH
29483: LD_INT 22
29485: PUSH
29486: LD_OWVAR 2
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 21
29497: PUSH
29498: LD_INT 2
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: LD_INT 34
29510: PUSH
29511: LD_INT 12
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 34
29520: PUSH
29521: LD_INT 51
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 34
29530: PUSH
29531: LD_INT 32
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: PPUSH
29549: CALL_OW 69
29553: ST_TO_ADDR
// if not tmp then
29554: LD_VAR 0 2
29558: NOT
29559: IFFALSE 29563
// exit ;
29561: GO 29613
// for i in tmp do
29563: LD_ADDR_VAR 0 1
29567: PUSH
29568: LD_VAR 0 2
29572: PUSH
29573: FOR_IN
29574: IFFALSE 29611
// if GetCargo ( i , mat_artifact ) = 0 then
29576: LD_VAR 0 1
29580: PPUSH
29581: LD_INT 4
29583: PPUSH
29584: CALL_OW 289
29588: PUSH
29589: LD_INT 0
29591: EQUAL
29592: IFFALSE 29609
// SetCargo ( i , mat_siberit , 100 ) ;
29594: LD_VAR 0 1
29598: PPUSH
29599: LD_INT 3
29601: PPUSH
29602: LD_INT 100
29604: PPUSH
29605: CALL_OW 290
29609: GO 29573
29611: POP
29612: POP
// end ;
29613: PPOPN 2
29615: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29616: LD_EXP 46
29620: PUSH
29621: LD_EXP 91
29625: AND
29626: IFFALSE 29809
29628: GO 29630
29630: DISABLE
29631: LD_INT 0
29633: PPUSH
29634: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29635: LD_ADDR_VAR 0 2
29639: PUSH
29640: LD_INT 22
29642: PUSH
29643: LD_OWVAR 2
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PPUSH
29652: CALL_OW 69
29656: ST_TO_ADDR
// if not tmp then
29657: LD_VAR 0 2
29661: NOT
29662: IFFALSE 29666
// exit ;
29664: GO 29809
// for i := 1 to 2 do
29666: LD_ADDR_VAR 0 1
29670: PUSH
29671: DOUBLE
29672: LD_INT 1
29674: DEC
29675: ST_TO_ADDR
29676: LD_INT 2
29678: PUSH
29679: FOR_TO
29680: IFFALSE 29807
// begin uc_side := your_side ;
29682: LD_ADDR_OWVAR 20
29686: PUSH
29687: LD_OWVAR 2
29691: ST_TO_ADDR
// uc_nation := nation_american ;
29692: LD_ADDR_OWVAR 21
29696: PUSH
29697: LD_INT 1
29699: ST_TO_ADDR
// vc_chassis := us_morphling ;
29700: LD_ADDR_OWVAR 37
29704: PUSH
29705: LD_INT 5
29707: ST_TO_ADDR
// vc_engine := engine_siberite ;
29708: LD_ADDR_OWVAR 39
29712: PUSH
29713: LD_INT 3
29715: ST_TO_ADDR
// vc_control := control_computer ;
29716: LD_ADDR_OWVAR 38
29720: PUSH
29721: LD_INT 3
29723: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29724: LD_ADDR_OWVAR 40
29728: PUSH
29729: LD_INT 10
29731: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29732: LD_VAR 0 2
29736: PUSH
29737: LD_INT 1
29739: ARRAY
29740: PPUSH
29741: CALL_OW 310
29745: NOT
29746: IFFALSE 29793
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29748: CALL_OW 45
29752: PPUSH
29753: LD_VAR 0 2
29757: PUSH
29758: LD_INT 1
29760: ARRAY
29761: PPUSH
29762: CALL_OW 250
29766: PPUSH
29767: LD_VAR 0 2
29771: PUSH
29772: LD_INT 1
29774: ARRAY
29775: PPUSH
29776: CALL_OW 251
29780: PPUSH
29781: LD_INT 12
29783: PPUSH
29784: LD_INT 1
29786: PPUSH
29787: CALL_OW 50
29791: GO 29805
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29793: CALL_OW 45
29797: PPUSH
29798: LD_INT 1
29800: PPUSH
29801: CALL_OW 51
// end ;
29805: GO 29679
29807: POP
29808: POP
// end ;
29809: PPOPN 2
29811: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29812: LD_EXP 46
29816: PUSH
29817: LD_EXP 92
29821: AND
29822: IFFALSE 30044
29824: GO 29826
29826: DISABLE
29827: LD_INT 0
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29835: LD_ADDR_VAR 0 6
29839: PUSH
29840: LD_INT 22
29842: PUSH
29843: LD_OWVAR 2
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 21
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: LD_INT 23
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: LIST
29883: PPUSH
29884: CALL_OW 69
29888: ST_TO_ADDR
// if not tmp then
29889: LD_VAR 0 6
29893: NOT
29894: IFFALSE 29898
// exit ;
29896: GO 30044
// s1 := rand ( 1 , 4 ) ;
29898: LD_ADDR_VAR 0 2
29902: PUSH
29903: LD_INT 1
29905: PPUSH
29906: LD_INT 4
29908: PPUSH
29909: CALL_OW 12
29913: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29914: LD_ADDR_VAR 0 4
29918: PUSH
29919: LD_VAR 0 6
29923: PUSH
29924: LD_INT 1
29926: ARRAY
29927: PPUSH
29928: LD_VAR 0 2
29932: PPUSH
29933: CALL_OW 259
29937: ST_TO_ADDR
// if s1 = 1 then
29938: LD_VAR 0 2
29942: PUSH
29943: LD_INT 1
29945: EQUAL
29946: IFFALSE 29966
// s2 := rand ( 2 , 4 ) else
29948: LD_ADDR_VAR 0 3
29952: PUSH
29953: LD_INT 2
29955: PPUSH
29956: LD_INT 4
29958: PPUSH
29959: CALL_OW 12
29963: ST_TO_ADDR
29964: GO 29974
// s2 := 1 ;
29966: LD_ADDR_VAR 0 3
29970: PUSH
29971: LD_INT 1
29973: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29974: LD_ADDR_VAR 0 5
29978: PUSH
29979: LD_VAR 0 6
29983: PUSH
29984: LD_INT 1
29986: ARRAY
29987: PPUSH
29988: LD_VAR 0 3
29992: PPUSH
29993: CALL_OW 259
29997: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29998: LD_VAR 0 6
30002: PUSH
30003: LD_INT 1
30005: ARRAY
30006: PPUSH
30007: LD_VAR 0 2
30011: PPUSH
30012: LD_VAR 0 5
30016: PPUSH
30017: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30021: LD_VAR 0 6
30025: PUSH
30026: LD_INT 1
30028: ARRAY
30029: PPUSH
30030: LD_VAR 0 3
30034: PPUSH
30035: LD_VAR 0 4
30039: PPUSH
30040: CALL_OW 237
// end ;
30044: PPOPN 6
30046: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30047: LD_EXP 46
30051: PUSH
30052: LD_EXP 93
30056: AND
30057: IFFALSE 30136
30059: GO 30061
30061: DISABLE
30062: LD_INT 0
30064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30065: LD_ADDR_VAR 0 1
30069: PUSH
30070: LD_INT 22
30072: PUSH
30073: LD_OWVAR 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 30
30084: PUSH
30085: LD_INT 3
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PPUSH
30096: CALL_OW 69
30100: ST_TO_ADDR
// if not tmp then
30101: LD_VAR 0 1
30105: NOT
30106: IFFALSE 30110
// exit ;
30108: GO 30136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30110: LD_VAR 0 1
30114: PUSH
30115: LD_INT 1
30117: PPUSH
30118: LD_VAR 0 1
30122: PPUSH
30123: CALL_OW 12
30127: ARRAY
30128: PPUSH
30129: LD_INT 1
30131: PPUSH
30132: CALL_OW 234
// end ;
30136: PPOPN 1
30138: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30139: LD_EXP 46
30143: PUSH
30144: LD_EXP 94
30148: AND
30149: IFFALSE 30261
30151: GO 30153
30153: DISABLE
30154: LD_INT 0
30156: PPUSH
30157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30158: LD_ADDR_VAR 0 2
30162: PUSH
30163: LD_INT 22
30165: PUSH
30166: LD_OWVAR 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: LD_INT 30
30180: PUSH
30181: LD_INT 27
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 30
30190: PUSH
30191: LD_INT 26
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 30
30200: PUSH
30201: LD_INT 28
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: ST_TO_ADDR
// if not tmp then
30223: LD_VAR 0 2
30227: NOT
30228: IFFALSE 30232
// exit ;
30230: GO 30261
// for i in tmp do
30232: LD_ADDR_VAR 0 1
30236: PUSH
30237: LD_VAR 0 2
30241: PUSH
30242: FOR_IN
30243: IFFALSE 30259
// SetLives ( i , 1 ) ;
30245: LD_VAR 0 1
30249: PPUSH
30250: LD_INT 1
30252: PPUSH
30253: CALL_OW 234
30257: GO 30242
30259: POP
30260: POP
// end ;
30261: PPOPN 2
30263: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30264: LD_EXP 46
30268: PUSH
30269: LD_EXP 95
30273: AND
30274: IFFALSE 30561
30276: GO 30278
30278: DISABLE
30279: LD_INT 0
30281: PPUSH
30282: PPUSH
30283: PPUSH
// begin i := rand ( 1 , 7 ) ;
30284: LD_ADDR_VAR 0 1
30288: PUSH
30289: LD_INT 1
30291: PPUSH
30292: LD_INT 7
30294: PPUSH
30295: CALL_OW 12
30299: ST_TO_ADDR
// case i of 1 :
30300: LD_VAR 0 1
30304: PUSH
30305: LD_INT 1
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 30323
30313: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30314: LD_STRING earthquake(getX(game), 0, 32)
30316: PPUSH
30317: CALL_OW 559
30321: GO 30561
30323: LD_INT 2
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30345
30331: POP
// begin ToLua ( displayStucuk(); ) ;
30332: LD_STRING displayStucuk();
30334: PPUSH
30335: CALL_OW 559
// ResetFog ;
30339: CALL_OW 335
// end ; 3 :
30343: GO 30561
30345: LD_INT 3
30347: DOUBLE
30348: EQUAL
30349: IFTRUE 30353
30351: GO 30457
30353: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30354: LD_ADDR_VAR 0 2
30358: PUSH
30359: LD_INT 22
30361: PUSH
30362: LD_OWVAR 2
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 25
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PPUSH
30385: CALL_OW 69
30389: ST_TO_ADDR
// if not tmp then
30390: LD_VAR 0 2
30394: NOT
30395: IFFALSE 30399
// exit ;
30397: GO 30561
// un := tmp [ rand ( 1 , tmp ) ] ;
30399: LD_ADDR_VAR 0 3
30403: PUSH
30404: LD_VAR 0 2
30408: PUSH
30409: LD_INT 1
30411: PPUSH
30412: LD_VAR 0 2
30416: PPUSH
30417: CALL_OW 12
30421: ARRAY
30422: ST_TO_ADDR
// if Crawls ( un ) then
30423: LD_VAR 0 3
30427: PPUSH
30428: CALL_OW 318
30432: IFFALSE 30443
// ComWalk ( un ) ;
30434: LD_VAR 0 3
30438: PPUSH
30439: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30443: LD_VAR 0 3
30447: PPUSH
30448: LD_INT 8
30450: PPUSH
30451: CALL_OW 336
// end ; 4 :
30455: GO 30561
30457: LD_INT 4
30459: DOUBLE
30460: EQUAL
30461: IFTRUE 30465
30463: GO 30539
30465: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30466: LD_ADDR_VAR 0 2
30470: PUSH
30471: LD_INT 22
30473: PUSH
30474: LD_OWVAR 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 30
30485: PUSH
30486: LD_INT 29
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PPUSH
30497: CALL_OW 69
30501: ST_TO_ADDR
// if not tmp then
30502: LD_VAR 0 2
30506: NOT
30507: IFFALSE 30511
// exit ;
30509: GO 30561
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30511: LD_VAR 0 2
30515: PUSH
30516: LD_INT 1
30518: ARRAY
30519: PPUSH
30520: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30524: LD_VAR 0 2
30528: PUSH
30529: LD_INT 1
30531: ARRAY
30532: PPUSH
30533: CALL_OW 65
// end ; 5 .. 7 :
30537: GO 30561
30539: LD_INT 5
30541: DOUBLE
30542: GREATEREQUAL
30543: IFFALSE 30551
30545: LD_INT 7
30547: DOUBLE
30548: LESSEQUAL
30549: IFTRUE 30553
30551: GO 30560
30553: POP
// StreamSibBomb ; end ;
30554: CALL 26798 0 0
30558: GO 30561
30560: POP
// end ;
30561: PPOPN 3
30563: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30564: LD_EXP 46
30568: PUSH
30569: LD_EXP 96
30573: AND
30574: IFFALSE 30730
30576: GO 30578
30578: DISABLE
30579: LD_INT 0
30581: PPUSH
30582: PPUSH
30583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30584: LD_ADDR_VAR 0 2
30588: PUSH
30589: LD_INT 81
30591: PUSH
30592: LD_OWVAR 2
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 21
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PPUSH
30633: CALL_OW 69
30637: ST_TO_ADDR
// if not tmp then
30638: LD_VAR 0 2
30642: NOT
30643: IFFALSE 30647
// exit ;
30645: GO 30730
// p := 0 ;
30647: LD_ADDR_VAR 0 3
30651: PUSH
30652: LD_INT 0
30654: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30655: LD_INT 35
30657: PPUSH
30658: CALL_OW 67
// p := p + 1 ;
30662: LD_ADDR_VAR 0 3
30666: PUSH
30667: LD_VAR 0 3
30671: PUSH
30672: LD_INT 1
30674: PLUS
30675: ST_TO_ADDR
// for i in tmp do
30676: LD_ADDR_VAR 0 1
30680: PUSH
30681: LD_VAR 0 2
30685: PUSH
30686: FOR_IN
30687: IFFALSE 30718
// if GetLives ( i ) < 1000 then
30689: LD_VAR 0 1
30693: PPUSH
30694: CALL_OW 256
30698: PUSH
30699: LD_INT 1000
30701: LESS
30702: IFFALSE 30716
// SetLives ( i , 1000 ) ;
30704: LD_VAR 0 1
30708: PPUSH
30709: LD_INT 1000
30711: PPUSH
30712: CALL_OW 234
30716: GO 30686
30718: POP
30719: POP
// until p > 20 ;
30720: LD_VAR 0 3
30724: PUSH
30725: LD_INT 20
30727: GREATER
30728: IFFALSE 30655
// end ;
30730: PPOPN 3
30732: END
// every 0 0$1 trigger StreamModeActive and sTime do
30733: LD_EXP 46
30737: PUSH
30738: LD_EXP 97
30742: AND
30743: IFFALSE 30778
30745: GO 30747
30747: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30748: LD_INT 28
30750: PPUSH
30751: LD_OWVAR 2
30755: PPUSH
30756: LD_INT 2
30758: PPUSH
30759: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30763: LD_INT 30
30765: PPUSH
30766: LD_OWVAR 2
30770: PPUSH
30771: LD_INT 2
30773: PPUSH
30774: CALL_OW 322
// end ;
30778: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30779: LD_EXP 46
30783: PUSH
30784: LD_EXP 98
30788: AND
30789: IFFALSE 30910
30791: GO 30793
30793: DISABLE
30794: LD_INT 0
30796: PPUSH
30797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30798: LD_ADDR_VAR 0 2
30802: PUSH
30803: LD_INT 22
30805: PUSH
30806: LD_OWVAR 2
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 21
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: PUSH
30828: LD_INT 23
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: PPUSH
30847: CALL_OW 69
30851: ST_TO_ADDR
// if not tmp then
30852: LD_VAR 0 2
30856: NOT
30857: IFFALSE 30861
// exit ;
30859: GO 30910
// for i in tmp do
30861: LD_ADDR_VAR 0 1
30865: PUSH
30866: LD_VAR 0 2
30870: PUSH
30871: FOR_IN
30872: IFFALSE 30908
// begin if Crawls ( i ) then
30874: LD_VAR 0 1
30878: PPUSH
30879: CALL_OW 318
30883: IFFALSE 30894
// ComWalk ( i ) ;
30885: LD_VAR 0 1
30889: PPUSH
30890: CALL_OW 138
// SetClass ( i , 2 ) ;
30894: LD_VAR 0 1
30898: PPUSH
30899: LD_INT 2
30901: PPUSH
30902: CALL_OW 336
// end ;
30906: GO 30871
30908: POP
30909: POP
// end ;
30910: PPOPN 2
30912: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30913: LD_EXP 46
30917: PUSH
30918: LD_EXP 99
30922: AND
30923: IFFALSE 31211
30925: GO 30927
30927: DISABLE
30928: LD_INT 0
30930: PPUSH
30931: PPUSH
30932: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30933: LD_OWVAR 2
30937: PPUSH
30938: LD_INT 9
30940: PPUSH
30941: LD_INT 1
30943: PPUSH
30944: LD_INT 1
30946: PPUSH
30947: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30951: LD_INT 9
30953: PPUSH
30954: LD_OWVAR 2
30958: PPUSH
30959: CALL_OW 343
// uc_side := 9 ;
30963: LD_ADDR_OWVAR 20
30967: PUSH
30968: LD_INT 9
30970: ST_TO_ADDR
// uc_nation := 2 ;
30971: LD_ADDR_OWVAR 21
30975: PUSH
30976: LD_INT 2
30978: ST_TO_ADDR
// hc_name := Dark Warrior ;
30979: LD_ADDR_OWVAR 26
30983: PUSH
30984: LD_STRING Dark Warrior
30986: ST_TO_ADDR
// hc_gallery :=  ;
30987: LD_ADDR_OWVAR 33
30991: PUSH
30992: LD_STRING 
30994: ST_TO_ADDR
// hc_noskilllimit := true ;
30995: LD_ADDR_OWVAR 76
30999: PUSH
31000: LD_INT 1
31002: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31003: LD_ADDR_OWVAR 31
31007: PUSH
31008: LD_INT 30
31010: PUSH
31011: LD_INT 30
31013: PUSH
31014: LD_INT 30
31016: PUSH
31017: LD_INT 30
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
// un := CreateHuman ;
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: CALL_OW 44
31035: ST_TO_ADDR
// hc_noskilllimit := false ;
31036: LD_ADDR_OWVAR 76
31040: PUSH
31041: LD_INT 0
31043: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31044: LD_VAR 0 3
31048: PPUSH
31049: LD_INT 1
31051: PPUSH
31052: CALL_OW 51
// ToLua ( playRanger() ) ;
31056: LD_STRING playRanger()
31058: PPUSH
31059: CALL_OW 559
// p := 0 ;
31063: LD_ADDR_VAR 0 2
31067: PUSH
31068: LD_INT 0
31070: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31071: LD_INT 35
31073: PPUSH
31074: CALL_OW 67
// p := p + 1 ;
31078: LD_ADDR_VAR 0 2
31082: PUSH
31083: LD_VAR 0 2
31087: PUSH
31088: LD_INT 1
31090: PLUS
31091: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31092: LD_VAR 0 3
31096: PPUSH
31097: CALL_OW 256
31101: PUSH
31102: LD_INT 1000
31104: LESS
31105: IFFALSE 31119
// SetLives ( un , 1000 ) ;
31107: LD_VAR 0 3
31111: PPUSH
31112: LD_INT 1000
31114: PPUSH
31115: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31119: LD_VAR 0 3
31123: PPUSH
31124: LD_INT 81
31126: PUSH
31127: LD_OWVAR 2
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 91
31138: PUSH
31139: LD_VAR 0 3
31143: PUSH
31144: LD_INT 30
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PPUSH
31156: CALL_OW 69
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: CALL_OW 74
31170: PPUSH
31171: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31175: LD_VAR 0 2
31179: PUSH
31180: LD_INT 80
31182: GREATER
31183: PUSH
31184: LD_VAR 0 3
31188: PPUSH
31189: CALL_OW 301
31193: OR
31194: IFFALSE 31071
// if un then
31196: LD_VAR 0 3
31200: IFFALSE 31211
// RemoveUnit ( un ) ;
31202: LD_VAR 0 3
31206: PPUSH
31207: CALL_OW 64
// end ;
31211: PPOPN 3
31213: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31214: LD_EXP 100
31218: IFFALSE 31334
31220: GO 31222
31222: DISABLE
31223: LD_INT 0
31225: PPUSH
31226: PPUSH
31227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31228: LD_ADDR_VAR 0 2
31232: PUSH
31233: LD_INT 81
31235: PUSH
31236: LD_OWVAR 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 21
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PPUSH
31259: CALL_OW 69
31263: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31264: LD_STRING playComputer()
31266: PPUSH
31267: CALL_OW 559
// if not tmp then
31271: LD_VAR 0 2
31275: NOT
31276: IFFALSE 31280
// exit ;
31278: GO 31334
// for i in tmp do
31280: LD_ADDR_VAR 0 1
31284: PUSH
31285: LD_VAR 0 2
31289: PUSH
31290: FOR_IN
31291: IFFALSE 31332
// for j := 1 to 4 do
31293: LD_ADDR_VAR 0 3
31297: PUSH
31298: DOUBLE
31299: LD_INT 1
31301: DEC
31302: ST_TO_ADDR
31303: LD_INT 4
31305: PUSH
31306: FOR_TO
31307: IFFALSE 31328
// SetSkill ( i , j , 10 ) ;
31309: LD_VAR 0 1
31313: PPUSH
31314: LD_VAR 0 3
31318: PPUSH
31319: LD_INT 10
31321: PPUSH
31322: CALL_OW 237
31326: GO 31306
31328: POP
31329: POP
31330: GO 31290
31332: POP
31333: POP
// end ;
31334: PPOPN 3
31336: END
// every 0 0$1 trigger s30 do var i , tmp ;
31337: LD_EXP 101
31341: IFFALSE 31410
31343: GO 31345
31345: DISABLE
31346: LD_INT 0
31348: PPUSH
31349: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31350: LD_ADDR_VAR 0 2
31354: PUSH
31355: LD_INT 22
31357: PUSH
31358: LD_OWVAR 2
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PPUSH
31367: CALL_OW 69
31371: ST_TO_ADDR
// if not tmp then
31372: LD_VAR 0 2
31376: NOT
31377: IFFALSE 31381
// exit ;
31379: GO 31410
// for i in tmp do
31381: LD_ADDR_VAR 0 1
31385: PUSH
31386: LD_VAR 0 2
31390: PUSH
31391: FOR_IN
31392: IFFALSE 31408
// SetLives ( i , 300 ) ;
31394: LD_VAR 0 1
31398: PPUSH
31399: LD_INT 300
31401: PPUSH
31402: CALL_OW 234
31406: GO 31391
31408: POP
31409: POP
// end ;
31410: PPOPN 2
31412: END
// every 0 0$1 trigger s60 do var i , tmp ;
31413: LD_EXP 102
31417: IFFALSE 31486
31419: GO 31421
31421: DISABLE
31422: LD_INT 0
31424: PPUSH
31425: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31426: LD_ADDR_VAR 0 2
31430: PUSH
31431: LD_INT 22
31433: PUSH
31434: LD_OWVAR 2
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PPUSH
31443: CALL_OW 69
31447: ST_TO_ADDR
// if not tmp then
31448: LD_VAR 0 2
31452: NOT
31453: IFFALSE 31457
// exit ;
31455: GO 31486
// for i in tmp do
31457: LD_ADDR_VAR 0 1
31461: PUSH
31462: LD_VAR 0 2
31466: PUSH
31467: FOR_IN
31468: IFFALSE 31484
// SetLives ( i , 600 ) ;
31470: LD_VAR 0 1
31474: PPUSH
31475: LD_INT 600
31477: PPUSH
31478: CALL_OW 234
31482: GO 31467
31484: POP
31485: POP
// end ;
31486: PPOPN 2
31488: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31489: LD_INT 0
31491: PPUSH
// case cmd of 301 :
31492: LD_VAR 0 1
31496: PUSH
31497: LD_INT 301
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31537
31505: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31506: LD_VAR 0 6
31510: PPUSH
31511: LD_VAR 0 7
31515: PPUSH
31516: LD_VAR 0 8
31520: PPUSH
31521: LD_VAR 0 4
31525: PPUSH
31526: LD_VAR 0 5
31530: PPUSH
31531: CALL 32738 0 5
31535: GO 31658
31537: LD_INT 302
31539: DOUBLE
31540: EQUAL
31541: IFTRUE 31545
31543: GO 31582
31545: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31546: LD_VAR 0 6
31550: PPUSH
31551: LD_VAR 0 7
31555: PPUSH
31556: LD_VAR 0 8
31560: PPUSH
31561: LD_VAR 0 9
31565: PPUSH
31566: LD_VAR 0 4
31570: PPUSH
31571: LD_VAR 0 5
31575: PPUSH
31576: CALL 32829 0 6
31580: GO 31658
31582: LD_INT 303
31584: DOUBLE
31585: EQUAL
31586: IFTRUE 31590
31588: GO 31627
31590: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31591: LD_VAR 0 6
31595: PPUSH
31596: LD_VAR 0 7
31600: PPUSH
31601: LD_VAR 0 8
31605: PPUSH
31606: LD_VAR 0 9
31610: PPUSH
31611: LD_VAR 0 4
31615: PPUSH
31616: LD_VAR 0 5
31620: PPUSH
31621: CALL 31663 0 6
31625: GO 31658
31627: LD_INT 304
31629: DOUBLE
31630: EQUAL
31631: IFTRUE 31635
31633: GO 31657
31635: POP
// hHackTeleport ( unit , x , y ) ; end ;
31636: LD_VAR 0 2
31640: PPUSH
31641: LD_VAR 0 4
31645: PPUSH
31646: LD_VAR 0 5
31650: PPUSH
31651: CALL 33422 0 3
31655: GO 31658
31657: POP
// end ;
31658: LD_VAR 0 12
31662: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31663: LD_INT 0
31665: PPUSH
31666: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31667: LD_VAR 0 1
31671: PUSH
31672: LD_INT 1
31674: LESS
31675: PUSH
31676: LD_VAR 0 1
31680: PUSH
31681: LD_INT 3
31683: GREATER
31684: OR
31685: PUSH
31686: LD_VAR 0 5
31690: PPUSH
31691: LD_VAR 0 6
31695: PPUSH
31696: CALL_OW 428
31700: OR
31701: IFFALSE 31705
// exit ;
31703: GO 32425
// uc_side := your_side ;
31705: LD_ADDR_OWVAR 20
31709: PUSH
31710: LD_OWVAR 2
31714: ST_TO_ADDR
// uc_nation := nation ;
31715: LD_ADDR_OWVAR 21
31719: PUSH
31720: LD_VAR 0 1
31724: ST_TO_ADDR
// bc_level = 1 ;
31725: LD_ADDR_OWVAR 43
31729: PUSH
31730: LD_INT 1
31732: ST_TO_ADDR
// case btype of 1 :
31733: LD_VAR 0 2
31737: PUSH
31738: LD_INT 1
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31757
31746: POP
// bc_type := b_depot ; 2 :
31747: LD_ADDR_OWVAR 42
31751: PUSH
31752: LD_INT 0
31754: ST_TO_ADDR
31755: GO 32369
31757: LD_INT 2
31759: DOUBLE
31760: EQUAL
31761: IFTRUE 31765
31763: GO 31776
31765: POP
// bc_type := b_warehouse ; 3 :
31766: LD_ADDR_OWVAR 42
31770: PUSH
31771: LD_INT 1
31773: ST_TO_ADDR
31774: GO 32369
31776: LD_INT 3
31778: DOUBLE
31779: EQUAL
31780: IFTRUE 31784
31782: GO 31795
31784: POP
// bc_type := b_lab ; 4 .. 9 :
31785: LD_ADDR_OWVAR 42
31789: PUSH
31790: LD_INT 6
31792: ST_TO_ADDR
31793: GO 32369
31795: LD_INT 4
31797: DOUBLE
31798: GREATEREQUAL
31799: IFFALSE 31807
31801: LD_INT 9
31803: DOUBLE
31804: LESSEQUAL
31805: IFTRUE 31809
31807: GO 31861
31809: POP
// begin bc_type := b_lab_half ;
31810: LD_ADDR_OWVAR 42
31814: PUSH
31815: LD_INT 7
31817: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31818: LD_ADDR_OWVAR 44
31822: PUSH
31823: LD_INT 10
31825: PUSH
31826: LD_INT 11
31828: PUSH
31829: LD_INT 12
31831: PUSH
31832: LD_INT 15
31834: PUSH
31835: LD_INT 14
31837: PUSH
31838: LD_INT 13
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: PUSH
31849: LD_VAR 0 2
31853: PUSH
31854: LD_INT 3
31856: MINUS
31857: ARRAY
31858: ST_TO_ADDR
// end ; 10 .. 13 :
31859: GO 32369
31861: LD_INT 10
31863: DOUBLE
31864: GREATEREQUAL
31865: IFFALSE 31873
31867: LD_INT 13
31869: DOUBLE
31870: LESSEQUAL
31871: IFTRUE 31875
31873: GO 31952
31875: POP
// begin bc_type := b_lab_full ;
31876: LD_ADDR_OWVAR 42
31880: PUSH
31881: LD_INT 8
31883: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31884: LD_ADDR_OWVAR 44
31888: PUSH
31889: LD_INT 10
31891: PUSH
31892: LD_INT 12
31894: PUSH
31895: LD_INT 14
31897: PUSH
31898: LD_INT 13
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: PUSH
31907: LD_VAR 0 2
31911: PUSH
31912: LD_INT 9
31914: MINUS
31915: ARRAY
31916: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31917: LD_ADDR_OWVAR 45
31921: PUSH
31922: LD_INT 11
31924: PUSH
31925: LD_INT 15
31927: PUSH
31928: LD_INT 12
31930: PUSH
31931: LD_INT 15
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: PUSH
31940: LD_VAR 0 2
31944: PUSH
31945: LD_INT 9
31947: MINUS
31948: ARRAY
31949: ST_TO_ADDR
// end ; 14 :
31950: GO 32369
31952: LD_INT 14
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31971
31960: POP
// bc_type := b_workshop ; 15 :
31961: LD_ADDR_OWVAR 42
31965: PUSH
31966: LD_INT 2
31968: ST_TO_ADDR
31969: GO 32369
31971: LD_INT 15
31973: DOUBLE
31974: EQUAL
31975: IFTRUE 31979
31977: GO 31990
31979: POP
// bc_type := b_factory ; 16 :
31980: LD_ADDR_OWVAR 42
31984: PUSH
31985: LD_INT 3
31987: ST_TO_ADDR
31988: GO 32369
31990: LD_INT 16
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32009
31998: POP
// bc_type := b_ext_gun ; 17 :
31999: LD_ADDR_OWVAR 42
32003: PUSH
32004: LD_INT 17
32006: ST_TO_ADDR
32007: GO 32369
32009: LD_INT 17
32011: DOUBLE
32012: EQUAL
32013: IFTRUE 32017
32015: GO 32045
32017: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32018: LD_ADDR_OWVAR 42
32022: PUSH
32023: LD_INT 19
32025: PUSH
32026: LD_INT 23
32028: PUSH
32029: LD_INT 19
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: PUSH
32037: LD_VAR 0 1
32041: ARRAY
32042: ST_TO_ADDR
32043: GO 32369
32045: LD_INT 18
32047: DOUBLE
32048: EQUAL
32049: IFTRUE 32053
32051: GO 32064
32053: POP
// bc_type := b_ext_radar ; 19 :
32054: LD_ADDR_OWVAR 42
32058: PUSH
32059: LD_INT 20
32061: ST_TO_ADDR
32062: GO 32369
32064: LD_INT 19
32066: DOUBLE
32067: EQUAL
32068: IFTRUE 32072
32070: GO 32083
32072: POP
// bc_type := b_ext_radio ; 20 :
32073: LD_ADDR_OWVAR 42
32077: PUSH
32078: LD_INT 22
32080: ST_TO_ADDR
32081: GO 32369
32083: LD_INT 20
32085: DOUBLE
32086: EQUAL
32087: IFTRUE 32091
32089: GO 32102
32091: POP
// bc_type := b_ext_siberium ; 21 :
32092: LD_ADDR_OWVAR 42
32096: PUSH
32097: LD_INT 21
32099: ST_TO_ADDR
32100: GO 32369
32102: LD_INT 21
32104: DOUBLE
32105: EQUAL
32106: IFTRUE 32110
32108: GO 32121
32110: POP
// bc_type := b_ext_computer ; 22 :
32111: LD_ADDR_OWVAR 42
32115: PUSH
32116: LD_INT 24
32118: ST_TO_ADDR
32119: GO 32369
32121: LD_INT 22
32123: DOUBLE
32124: EQUAL
32125: IFTRUE 32129
32127: GO 32140
32129: POP
// bc_type := b_ext_track ; 23 :
32130: LD_ADDR_OWVAR 42
32134: PUSH
32135: LD_INT 16
32137: ST_TO_ADDR
32138: GO 32369
32140: LD_INT 23
32142: DOUBLE
32143: EQUAL
32144: IFTRUE 32148
32146: GO 32159
32148: POP
// bc_type := b_ext_laser ; 24 :
32149: LD_ADDR_OWVAR 42
32153: PUSH
32154: LD_INT 25
32156: ST_TO_ADDR
32157: GO 32369
32159: LD_INT 24
32161: DOUBLE
32162: EQUAL
32163: IFTRUE 32167
32165: GO 32178
32167: POP
// bc_type := b_control_tower ; 25 :
32168: LD_ADDR_OWVAR 42
32172: PUSH
32173: LD_INT 36
32175: ST_TO_ADDR
32176: GO 32369
32178: LD_INT 25
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32197
32186: POP
// bc_type := b_breastwork ; 26 :
32187: LD_ADDR_OWVAR 42
32191: PUSH
32192: LD_INT 31
32194: ST_TO_ADDR
32195: GO 32369
32197: LD_INT 26
32199: DOUBLE
32200: EQUAL
32201: IFTRUE 32205
32203: GO 32216
32205: POP
// bc_type := b_bunker ; 27 :
32206: LD_ADDR_OWVAR 42
32210: PUSH
32211: LD_INT 32
32213: ST_TO_ADDR
32214: GO 32369
32216: LD_INT 27
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32224
32222: GO 32235
32224: POP
// bc_type := b_turret ; 28 :
32225: LD_ADDR_OWVAR 42
32229: PUSH
32230: LD_INT 33
32232: ST_TO_ADDR
32233: GO 32369
32235: LD_INT 28
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 32254
32243: POP
// bc_type := b_armoury ; 29 :
32244: LD_ADDR_OWVAR 42
32248: PUSH
32249: LD_INT 4
32251: ST_TO_ADDR
32252: GO 32369
32254: LD_INT 29
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32273
32262: POP
// bc_type := b_barracks ; 30 :
32263: LD_ADDR_OWVAR 42
32267: PUSH
32268: LD_INT 5
32270: ST_TO_ADDR
32271: GO 32369
32273: LD_INT 30
32275: DOUBLE
32276: EQUAL
32277: IFTRUE 32281
32279: GO 32292
32281: POP
// bc_type := b_solar_power ; 31 :
32282: LD_ADDR_OWVAR 42
32286: PUSH
32287: LD_INT 27
32289: ST_TO_ADDR
32290: GO 32369
32292: LD_INT 31
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32311
32300: POP
// bc_type := b_oil_power ; 32 :
32301: LD_ADDR_OWVAR 42
32305: PUSH
32306: LD_INT 26
32308: ST_TO_ADDR
32309: GO 32369
32311: LD_INT 32
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32319
32317: GO 32330
32319: POP
// bc_type := b_siberite_power ; 33 :
32320: LD_ADDR_OWVAR 42
32324: PUSH
32325: LD_INT 28
32327: ST_TO_ADDR
32328: GO 32369
32330: LD_INT 33
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32349
32338: POP
// bc_type := b_oil_mine ; 34 :
32339: LD_ADDR_OWVAR 42
32343: PUSH
32344: LD_INT 29
32346: ST_TO_ADDR
32347: GO 32369
32349: LD_INT 34
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32357
32355: GO 32368
32357: POP
// bc_type := b_siberite_mine ; end ;
32358: LD_ADDR_OWVAR 42
32362: PUSH
32363: LD_INT 30
32365: ST_TO_ADDR
32366: GO 32369
32368: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32369: LD_ADDR_VAR 0 8
32373: PUSH
32374: LD_VAR 0 5
32378: PPUSH
32379: LD_VAR 0 6
32383: PPUSH
32384: LD_VAR 0 3
32388: PPUSH
32389: CALL_OW 47
32393: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32394: LD_OWVAR 42
32398: PUSH
32399: LD_INT 32
32401: PUSH
32402: LD_INT 33
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: IN
32409: IFFALSE 32425
// PlaceWeaponTurret ( b , weapon ) ;
32411: LD_VAR 0 8
32415: PPUSH
32416: LD_VAR 0 4
32420: PPUSH
32421: CALL_OW 431
// end ;
32425: LD_VAR 0 7
32429: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32430: LD_INT 0
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32436: LD_ADDR_VAR 0 4
32440: PUSH
32441: LD_INT 22
32443: PUSH
32444: LD_OWVAR 2
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 30
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 30
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PPUSH
32485: CALL_OW 69
32489: ST_TO_ADDR
// if not tmp then
32490: LD_VAR 0 4
32494: NOT
32495: IFFALSE 32499
// exit ;
32497: GO 32558
// for i in tmp do
32499: LD_ADDR_VAR 0 2
32503: PUSH
32504: LD_VAR 0 4
32508: PUSH
32509: FOR_IN
32510: IFFALSE 32556
// for j = 1 to 3 do
32512: LD_ADDR_VAR 0 3
32516: PUSH
32517: DOUBLE
32518: LD_INT 1
32520: DEC
32521: ST_TO_ADDR
32522: LD_INT 3
32524: PUSH
32525: FOR_TO
32526: IFFALSE 32552
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32528: LD_VAR 0 2
32532: PPUSH
32533: CALL_OW 274
32537: PPUSH
32538: LD_VAR 0 3
32542: PPUSH
32543: LD_INT 99999
32545: PPUSH
32546: CALL_OW 277
32550: GO 32525
32552: POP
32553: POP
32554: GO 32509
32556: POP
32557: POP
// end ;
32558: LD_VAR 0 1
32562: RET
// export function hHackSetLevel10 ; var i , j ; begin
32563: LD_INT 0
32565: PPUSH
32566: PPUSH
32567: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32568: LD_ADDR_VAR 0 2
32572: PUSH
32573: LD_INT 21
32575: PUSH
32576: LD_INT 1
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PPUSH
32583: CALL_OW 69
32587: PUSH
32588: FOR_IN
32589: IFFALSE 32641
// if IsSelected ( i ) then
32591: LD_VAR 0 2
32595: PPUSH
32596: CALL_OW 306
32600: IFFALSE 32639
// begin for j := 1 to 4 do
32602: LD_ADDR_VAR 0 3
32606: PUSH
32607: DOUBLE
32608: LD_INT 1
32610: DEC
32611: ST_TO_ADDR
32612: LD_INT 4
32614: PUSH
32615: FOR_TO
32616: IFFALSE 32637
// SetSkill ( i , j , 10 ) ;
32618: LD_VAR 0 2
32622: PPUSH
32623: LD_VAR 0 3
32627: PPUSH
32628: LD_INT 10
32630: PPUSH
32631: CALL_OW 237
32635: GO 32615
32637: POP
32638: POP
// end ;
32639: GO 32588
32641: POP
32642: POP
// end ;
32643: LD_VAR 0 1
32647: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32648: LD_INT 0
32650: PPUSH
32651: PPUSH
32652: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32653: LD_ADDR_VAR 0 2
32657: PUSH
32658: LD_INT 22
32660: PUSH
32661: LD_OWVAR 2
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 21
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PPUSH
32684: CALL_OW 69
32688: PUSH
32689: FOR_IN
32690: IFFALSE 32731
// begin for j := 1 to 4 do
32692: LD_ADDR_VAR 0 3
32696: PUSH
32697: DOUBLE
32698: LD_INT 1
32700: DEC
32701: ST_TO_ADDR
32702: LD_INT 4
32704: PUSH
32705: FOR_TO
32706: IFFALSE 32727
// SetSkill ( i , j , 10 ) ;
32708: LD_VAR 0 2
32712: PPUSH
32713: LD_VAR 0 3
32717: PPUSH
32718: LD_INT 10
32720: PPUSH
32721: CALL_OW 237
32725: GO 32705
32727: POP
32728: POP
// end ;
32729: GO 32689
32731: POP
32732: POP
// end ;
32733: LD_VAR 0 1
32737: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32738: LD_INT 0
32740: PPUSH
// uc_side := your_side ;
32741: LD_ADDR_OWVAR 20
32745: PUSH
32746: LD_OWVAR 2
32750: ST_TO_ADDR
// uc_nation := nation ;
32751: LD_ADDR_OWVAR 21
32755: PUSH
32756: LD_VAR 0 1
32760: ST_TO_ADDR
// InitHc ;
32761: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32765: LD_INT 0
32767: PPUSH
32768: LD_VAR 0 2
32772: PPUSH
32773: LD_VAR 0 3
32777: PPUSH
32778: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32782: LD_VAR 0 4
32786: PPUSH
32787: LD_VAR 0 5
32791: PPUSH
32792: CALL_OW 428
32796: PUSH
32797: LD_INT 0
32799: EQUAL
32800: IFFALSE 32824
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32802: CALL_OW 44
32806: PPUSH
32807: LD_VAR 0 4
32811: PPUSH
32812: LD_VAR 0 5
32816: PPUSH
32817: LD_INT 1
32819: PPUSH
32820: CALL_OW 48
// end ;
32824: LD_VAR 0 6
32828: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32829: LD_INT 0
32831: PPUSH
32832: PPUSH
// uc_side := your_side ;
32833: LD_ADDR_OWVAR 20
32837: PUSH
32838: LD_OWVAR 2
32842: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32843: LD_VAR 0 1
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: LD_INT 2
32853: PUSH
32854: LD_INT 3
32856: PUSH
32857: LD_INT 4
32859: PUSH
32860: LD_INT 5
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: IN
32870: IFFALSE 32882
// uc_nation := nation_american else
32872: LD_ADDR_OWVAR 21
32876: PUSH
32877: LD_INT 1
32879: ST_TO_ADDR
32880: GO 32925
// if chassis in [ 11 , 12 , 13 , 14 ] then
32882: LD_VAR 0 1
32886: PUSH
32887: LD_INT 11
32889: PUSH
32890: LD_INT 12
32892: PUSH
32893: LD_INT 13
32895: PUSH
32896: LD_INT 14
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: IN
32905: IFFALSE 32917
// uc_nation := nation_arabian else
32907: LD_ADDR_OWVAR 21
32911: PUSH
32912: LD_INT 2
32914: ST_TO_ADDR
32915: GO 32925
// uc_nation := nation_russian ;
32917: LD_ADDR_OWVAR 21
32921: PUSH
32922: LD_INT 3
32924: ST_TO_ADDR
// vc_chassis := chassis ;
32925: LD_ADDR_OWVAR 37
32929: PUSH
32930: LD_VAR 0 1
32934: ST_TO_ADDR
// vc_engine := engine ;
32935: LD_ADDR_OWVAR 39
32939: PUSH
32940: LD_VAR 0 2
32944: ST_TO_ADDR
// vc_control := control ;
32945: LD_ADDR_OWVAR 38
32949: PUSH
32950: LD_VAR 0 3
32954: ST_TO_ADDR
// vc_weapon := weapon ;
32955: LD_ADDR_OWVAR 40
32959: PUSH
32960: LD_VAR 0 4
32964: ST_TO_ADDR
// un := CreateVehicle ;
32965: LD_ADDR_VAR 0 8
32969: PUSH
32970: CALL_OW 45
32974: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32975: LD_VAR 0 8
32979: PPUSH
32980: LD_INT 0
32982: PPUSH
32983: LD_INT 5
32985: PPUSH
32986: CALL_OW 12
32990: PPUSH
32991: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32995: LD_VAR 0 8
32999: PPUSH
33000: LD_VAR 0 5
33004: PPUSH
33005: LD_VAR 0 6
33009: PPUSH
33010: LD_INT 1
33012: PPUSH
33013: CALL_OW 48
// end ;
33017: LD_VAR 0 7
33021: RET
// export hInvincible ; every 1 do
33022: GO 33024
33024: DISABLE
// hInvincible := [ ] ;
33025: LD_ADDR_EXP 103
33029: PUSH
33030: EMPTY
33031: ST_TO_ADDR
33032: END
// every 10 do var i ;
33033: GO 33035
33035: DISABLE
33036: LD_INT 0
33038: PPUSH
// begin enable ;
33039: ENABLE
// if not hInvincible then
33040: LD_EXP 103
33044: NOT
33045: IFFALSE 33049
// exit ;
33047: GO 33093
// for i in hInvincible do
33049: LD_ADDR_VAR 0 1
33053: PUSH
33054: LD_EXP 103
33058: PUSH
33059: FOR_IN
33060: IFFALSE 33091
// if GetLives ( i ) < 1000 then
33062: LD_VAR 0 1
33066: PPUSH
33067: CALL_OW 256
33071: PUSH
33072: LD_INT 1000
33074: LESS
33075: IFFALSE 33089
// SetLives ( i , 1000 ) ;
33077: LD_VAR 0 1
33081: PPUSH
33082: LD_INT 1000
33084: PPUSH
33085: CALL_OW 234
33089: GO 33059
33091: POP
33092: POP
// end ;
33093: PPOPN 1
33095: END
// export function hHackInvincible ; var i ; begin
33096: LD_INT 0
33098: PPUSH
33099: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33100: LD_ADDR_VAR 0 2
33104: PUSH
33105: LD_INT 2
33107: PUSH
33108: LD_INT 21
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 21
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: PPUSH
33133: CALL_OW 69
33137: PUSH
33138: FOR_IN
33139: IFFALSE 33200
// if IsSelected ( i ) then
33141: LD_VAR 0 2
33145: PPUSH
33146: CALL_OW 306
33150: IFFALSE 33198
// begin if i in hInvincible then
33152: LD_VAR 0 2
33156: PUSH
33157: LD_EXP 103
33161: IN
33162: IFFALSE 33182
// hInvincible := hInvincible diff i else
33164: LD_ADDR_EXP 103
33168: PUSH
33169: LD_EXP 103
33173: PUSH
33174: LD_VAR 0 2
33178: DIFF
33179: ST_TO_ADDR
33180: GO 33198
// hInvincible := hInvincible union i ;
33182: LD_ADDR_EXP 103
33186: PUSH
33187: LD_EXP 103
33191: PUSH
33192: LD_VAR 0 2
33196: UNION
33197: ST_TO_ADDR
// end ;
33198: GO 33138
33200: POP
33201: POP
// end ;
33202: LD_VAR 0 1
33206: RET
// export function hHackInvisible ; var i , j ; begin
33207: LD_INT 0
33209: PPUSH
33210: PPUSH
33211: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33212: LD_ADDR_VAR 0 2
33216: PUSH
33217: LD_INT 21
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PPUSH
33227: CALL_OW 69
33231: PUSH
33232: FOR_IN
33233: IFFALSE 33257
// if IsSelected ( i ) then
33235: LD_VAR 0 2
33239: PPUSH
33240: CALL_OW 306
33244: IFFALSE 33255
// ComForceInvisible ( i ) ;
33246: LD_VAR 0 2
33250: PPUSH
33251: CALL_OW 496
33255: GO 33232
33257: POP
33258: POP
// end ;
33259: LD_VAR 0 1
33263: RET
// export function hHackChangeYourSide ; begin
33264: LD_INT 0
33266: PPUSH
// if your_side = 8 then
33267: LD_OWVAR 2
33271: PUSH
33272: LD_INT 8
33274: EQUAL
33275: IFFALSE 33287
// your_side := 0 else
33277: LD_ADDR_OWVAR 2
33281: PUSH
33282: LD_INT 0
33284: ST_TO_ADDR
33285: GO 33301
// your_side := your_side + 1 ;
33287: LD_ADDR_OWVAR 2
33291: PUSH
33292: LD_OWVAR 2
33296: PUSH
33297: LD_INT 1
33299: PLUS
33300: ST_TO_ADDR
// end ;
33301: LD_VAR 0 1
33305: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33306: LD_INT 0
33308: PPUSH
33309: PPUSH
33310: PPUSH
// for i in all_units do
33311: LD_ADDR_VAR 0 2
33315: PUSH
33316: LD_OWVAR 3
33320: PUSH
33321: FOR_IN
33322: IFFALSE 33400
// if IsSelected ( i ) then
33324: LD_VAR 0 2
33328: PPUSH
33329: CALL_OW 306
33333: IFFALSE 33398
// begin j := GetSide ( i ) ;
33335: LD_ADDR_VAR 0 3
33339: PUSH
33340: LD_VAR 0 2
33344: PPUSH
33345: CALL_OW 255
33349: ST_TO_ADDR
// if j = 8 then
33350: LD_VAR 0 3
33354: PUSH
33355: LD_INT 8
33357: EQUAL
33358: IFFALSE 33370
// j := 0 else
33360: LD_ADDR_VAR 0 3
33364: PUSH
33365: LD_INT 0
33367: ST_TO_ADDR
33368: GO 33384
// j := j + 1 ;
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: LD_VAR 0 3
33379: PUSH
33380: LD_INT 1
33382: PLUS
33383: ST_TO_ADDR
// SetSide ( i , j ) ;
33384: LD_VAR 0 2
33388: PPUSH
33389: LD_VAR 0 3
33393: PPUSH
33394: CALL_OW 235
// end ;
33398: GO 33321
33400: POP
33401: POP
// end ;
33402: LD_VAR 0 1
33406: RET
// export function hHackFog ; begin
33407: LD_INT 0
33409: PPUSH
// FogOff ( true ) ;
33410: LD_INT 1
33412: PPUSH
33413: CALL_OW 344
// end ;
33417: LD_VAR 0 1
33421: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33422: LD_INT 0
33424: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33425: LD_VAR 0 1
33429: PPUSH
33430: LD_VAR 0 2
33434: PPUSH
33435: LD_VAR 0 3
33439: PPUSH
33440: LD_INT 1
33442: PPUSH
33443: LD_INT 1
33445: PPUSH
33446: CALL_OW 483
// CenterOnXY ( x , y ) ;
33450: LD_VAR 0 2
33454: PPUSH
33455: LD_VAR 0 3
33459: PPUSH
33460: CALL_OW 84
// end ;
33464: LD_VAR 0 4
33468: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33469: LD_INT 0
33471: PPUSH
33472: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33473: LD_VAR 0 1
33477: NOT
33478: PUSH
33479: LD_VAR 0 2
33483: PPUSH
33484: LD_VAR 0 3
33488: PPUSH
33489: CALL_OW 488
33493: NOT
33494: OR
33495: PUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL_OW 266
33505: PUSH
33506: LD_INT 3
33508: NONEQUAL
33509: PUSH
33510: LD_VAR 0 1
33514: PPUSH
33515: CALL_OW 247
33519: PUSH
33520: LD_INT 1
33522: EQUAL
33523: NOT
33524: AND
33525: OR
33526: IFFALSE 33530
// exit ;
33528: GO 33679
// if GetType ( factory ) = unit_human then
33530: LD_VAR 0 1
33534: PPUSH
33535: CALL_OW 247
33539: PUSH
33540: LD_INT 1
33542: EQUAL
33543: IFFALSE 33560
// factory := IsInUnit ( factory ) ;
33545: LD_ADDR_VAR 0 1
33549: PUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 310
33559: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33560: LD_VAR 0 1
33564: PPUSH
33565: CALL_OW 266
33569: PUSH
33570: LD_INT 3
33572: NONEQUAL
33573: IFFALSE 33577
// exit ;
33575: GO 33679
// if HexInfo ( x , y ) = factory then
33577: LD_VAR 0 2
33581: PPUSH
33582: LD_VAR 0 3
33586: PPUSH
33587: CALL_OW 428
33591: PUSH
33592: LD_VAR 0 1
33596: EQUAL
33597: IFFALSE 33624
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33599: LD_ADDR_EXP 104
33603: PUSH
33604: LD_EXP 104
33608: PPUSH
33609: LD_VAR 0 1
33613: PPUSH
33614: LD_INT 0
33616: PPUSH
33617: CALL_OW 1
33621: ST_TO_ADDR
33622: GO 33675
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33624: LD_ADDR_EXP 104
33628: PUSH
33629: LD_EXP 104
33633: PPUSH
33634: LD_VAR 0 1
33638: PPUSH
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL_OW 255
33648: PUSH
33649: LD_VAR 0 1
33653: PUSH
33654: LD_VAR 0 2
33658: PUSH
33659: LD_VAR 0 3
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: PPUSH
33670: CALL_OW 1
33674: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33675: CALL 33684 0 0
// end ;
33679: LD_VAR 0 4
33683: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33684: LD_INT 0
33686: PPUSH
33687: PPUSH
33688: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33689: LD_STRING resetFactoryWaypoint();
33691: PPUSH
33692: CALL_OW 559
// if factoryWaypoints then
33696: LD_EXP 104
33700: IFFALSE 33826
// begin list := PrepareArray ( factoryWaypoints ) ;
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_EXP 104
33711: PPUSH
33712: CALL 80295 0 1
33716: ST_TO_ADDR
// for i := 1 to list do
33717: LD_ADDR_VAR 0 2
33721: PUSH
33722: DOUBLE
33723: LD_INT 1
33725: DEC
33726: ST_TO_ADDR
33727: LD_VAR 0 3
33731: PUSH
33732: FOR_TO
33733: IFFALSE 33824
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33735: LD_STRING setFactoryWaypointXY(
33737: PUSH
33738: LD_VAR 0 3
33742: PUSH
33743: LD_VAR 0 2
33747: ARRAY
33748: PUSH
33749: LD_INT 1
33751: ARRAY
33752: STR
33753: PUSH
33754: LD_STRING ,
33756: STR
33757: PUSH
33758: LD_VAR 0 3
33762: PUSH
33763: LD_VAR 0 2
33767: ARRAY
33768: PUSH
33769: LD_INT 2
33771: ARRAY
33772: STR
33773: PUSH
33774: LD_STRING ,
33776: STR
33777: PUSH
33778: LD_VAR 0 3
33782: PUSH
33783: LD_VAR 0 2
33787: ARRAY
33788: PUSH
33789: LD_INT 3
33791: ARRAY
33792: STR
33793: PUSH
33794: LD_STRING ,
33796: STR
33797: PUSH
33798: LD_VAR 0 3
33802: PUSH
33803: LD_VAR 0 2
33807: ARRAY
33808: PUSH
33809: LD_INT 4
33811: ARRAY
33812: STR
33813: PUSH
33814: LD_STRING )
33816: STR
33817: PPUSH
33818: CALL_OW 559
33822: GO 33732
33824: POP
33825: POP
// end ; end ;
33826: LD_VAR 0 1
33830: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33831: LD_INT 0
33833: PPUSH
// if HexInfo ( x , y ) = warehouse then
33834: LD_VAR 0 2
33838: PPUSH
33839: LD_VAR 0 3
33843: PPUSH
33844: CALL_OW 428
33848: PUSH
33849: LD_VAR 0 1
33853: EQUAL
33854: IFFALSE 33881
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33856: LD_ADDR_EXP 105
33860: PUSH
33861: LD_EXP 105
33865: PPUSH
33866: LD_VAR 0 1
33870: PPUSH
33871: LD_INT 0
33873: PPUSH
33874: CALL_OW 1
33878: ST_TO_ADDR
33879: GO 33932
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33881: LD_ADDR_EXP 105
33885: PUSH
33886: LD_EXP 105
33890: PPUSH
33891: LD_VAR 0 1
33895: PPUSH
33896: LD_VAR 0 1
33900: PPUSH
33901: CALL_OW 255
33905: PUSH
33906: LD_VAR 0 1
33910: PUSH
33911: LD_VAR 0 2
33915: PUSH
33916: LD_VAR 0 3
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: PPUSH
33927: CALL_OW 1
33931: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33932: CALL 33941 0 0
// end ;
33936: LD_VAR 0 4
33940: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33941: LD_INT 0
33943: PPUSH
33944: PPUSH
33945: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33946: LD_STRING resetWarehouseGatheringPoints();
33948: PPUSH
33949: CALL_OW 559
// if warehouseGatheringPoints then
33953: LD_EXP 105
33957: IFFALSE 34083
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33959: LD_ADDR_VAR 0 3
33963: PUSH
33964: LD_EXP 105
33968: PPUSH
33969: CALL 80295 0 1
33973: ST_TO_ADDR
// for i := 1 to list do
33974: LD_ADDR_VAR 0 2
33978: PUSH
33979: DOUBLE
33980: LD_INT 1
33982: DEC
33983: ST_TO_ADDR
33984: LD_VAR 0 3
33988: PUSH
33989: FOR_TO
33990: IFFALSE 34081
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33992: LD_STRING setWarehouseGatheringPointXY(
33994: PUSH
33995: LD_VAR 0 3
33999: PUSH
34000: LD_VAR 0 2
34004: ARRAY
34005: PUSH
34006: LD_INT 1
34008: ARRAY
34009: STR
34010: PUSH
34011: LD_STRING ,
34013: STR
34014: PUSH
34015: LD_VAR 0 3
34019: PUSH
34020: LD_VAR 0 2
34024: ARRAY
34025: PUSH
34026: LD_INT 2
34028: ARRAY
34029: STR
34030: PUSH
34031: LD_STRING ,
34033: STR
34034: PUSH
34035: LD_VAR 0 3
34039: PUSH
34040: LD_VAR 0 2
34044: ARRAY
34045: PUSH
34046: LD_INT 3
34048: ARRAY
34049: STR
34050: PUSH
34051: LD_STRING ,
34053: STR
34054: PUSH
34055: LD_VAR 0 3
34059: PUSH
34060: LD_VAR 0 2
34064: ARRAY
34065: PUSH
34066: LD_INT 4
34068: ARRAY
34069: STR
34070: PUSH
34071: LD_STRING )
34073: STR
34074: PPUSH
34075: CALL_OW 559
34079: GO 33989
34081: POP
34082: POP
// end ; end ;
34083: LD_VAR 0 1
34087: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34088: LD_EXP 105
34092: IFFALSE 34777
34094: GO 34096
34096: DISABLE
34097: LD_INT 0
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
34106: PPUSH
34107: PPUSH
// begin enable ;
34108: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_EXP 105
34118: PPUSH
34119: CALL 80295 0 1
34123: ST_TO_ADDR
// if not list then
34124: LD_VAR 0 3
34128: NOT
34129: IFFALSE 34133
// exit ;
34131: GO 34777
// for i := 1 to list do
34133: LD_ADDR_VAR 0 1
34137: PUSH
34138: DOUBLE
34139: LD_INT 1
34141: DEC
34142: ST_TO_ADDR
34143: LD_VAR 0 3
34147: PUSH
34148: FOR_TO
34149: IFFALSE 34775
// begin depot := list [ i ] [ 2 ] ;
34151: LD_ADDR_VAR 0 8
34155: PUSH
34156: LD_VAR 0 3
34160: PUSH
34161: LD_VAR 0 1
34165: ARRAY
34166: PUSH
34167: LD_INT 2
34169: ARRAY
34170: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34171: LD_ADDR_VAR 0 5
34175: PUSH
34176: LD_VAR 0 3
34180: PUSH
34181: LD_VAR 0 1
34185: ARRAY
34186: PUSH
34187: LD_INT 1
34189: ARRAY
34190: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34191: LD_VAR 0 8
34195: PPUSH
34196: CALL_OW 301
34200: PUSH
34201: LD_VAR 0 5
34205: PUSH
34206: LD_VAR 0 8
34210: PPUSH
34211: CALL_OW 255
34215: NONEQUAL
34216: OR
34217: IFFALSE 34246
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34219: LD_ADDR_EXP 105
34223: PUSH
34224: LD_EXP 105
34228: PPUSH
34229: LD_VAR 0 8
34233: PPUSH
34234: LD_INT 0
34236: PPUSH
34237: CALL_OW 1
34241: ST_TO_ADDR
// exit ;
34242: POP
34243: POP
34244: GO 34777
// end ; x := list [ i ] [ 3 ] ;
34246: LD_ADDR_VAR 0 6
34250: PUSH
34251: LD_VAR 0 3
34255: PUSH
34256: LD_VAR 0 1
34260: ARRAY
34261: PUSH
34262: LD_INT 3
34264: ARRAY
34265: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34266: LD_ADDR_VAR 0 7
34270: PUSH
34271: LD_VAR 0 3
34275: PUSH
34276: LD_VAR 0 1
34280: ARRAY
34281: PUSH
34282: LD_INT 4
34284: ARRAY
34285: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34286: LD_ADDR_VAR 0 9
34290: PUSH
34291: LD_VAR 0 6
34295: PPUSH
34296: LD_VAR 0 7
34300: PPUSH
34301: LD_INT 16
34303: PPUSH
34304: CALL 78883 0 3
34308: ST_TO_ADDR
// if not cratesNearbyPoint then
34309: LD_VAR 0 9
34313: NOT
34314: IFFALSE 34320
// exit ;
34316: POP
34317: POP
34318: GO 34777
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34320: LD_ADDR_VAR 0 4
34324: PUSH
34325: LD_INT 22
34327: PUSH
34328: LD_VAR 0 5
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 3
34339: PUSH
34340: LD_INT 60
34342: PUSH
34343: EMPTY
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 91
34352: PUSH
34353: LD_VAR 0 8
34357: PUSH
34358: LD_INT 6
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 25
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 25
34381: PUSH
34382: LD_INT 16
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: LIST
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PPUSH
34400: CALL_OW 69
34404: PUSH
34405: LD_VAR 0 8
34409: PPUSH
34410: CALL_OW 313
34414: PPUSH
34415: LD_INT 3
34417: PUSH
34418: LD_INT 60
34420: PUSH
34421: EMPTY
34422: LIST
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 2
34430: PUSH
34431: LD_INT 25
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 25
34443: PUSH
34444: LD_INT 16
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PPUSH
34460: CALL_OW 72
34464: UNION
34465: ST_TO_ADDR
// if tmp then
34466: LD_VAR 0 4
34470: IFFALSE 34550
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34472: LD_ADDR_VAR 0 4
34476: PUSH
34477: LD_VAR 0 4
34481: PPUSH
34482: LD_INT 3
34484: PPUSH
34485: CALL 76852 0 2
34489: ST_TO_ADDR
// for j in tmp do
34490: LD_ADDR_VAR 0 2
34494: PUSH
34495: LD_VAR 0 4
34499: PUSH
34500: FOR_IN
34501: IFFALSE 34544
// begin if IsInUnit ( j ) then
34503: LD_VAR 0 2
34507: PPUSH
34508: CALL_OW 310
34512: IFFALSE 34523
// ComExit ( j ) ;
34514: LD_VAR 0 2
34518: PPUSH
34519: CALL 76935 0 1
// AddComCollect ( j , x , y ) ;
34523: LD_VAR 0 2
34527: PPUSH
34528: LD_VAR 0 6
34532: PPUSH
34533: LD_VAR 0 7
34537: PPUSH
34538: CALL_OW 177
// end ;
34542: GO 34500
34544: POP
34545: POP
// exit ;
34546: POP
34547: POP
34548: GO 34777
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34550: LD_ADDR_VAR 0 4
34554: PUSH
34555: LD_INT 22
34557: PUSH
34558: LD_VAR 0 5
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 91
34569: PUSH
34570: LD_VAR 0 8
34574: PUSH
34575: LD_INT 8
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: LD_INT 34
34588: PUSH
34589: LD_INT 12
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 34
34598: PUSH
34599: LD_INT 51
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 34
34608: PUSH
34609: LD_INT 32
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 34
34618: PUSH
34619: LD_INT 89
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: PPUSH
34638: CALL_OW 69
34642: ST_TO_ADDR
// if tmp then
34643: LD_VAR 0 4
34647: IFFALSE 34773
// begin for j in tmp do
34649: LD_ADDR_VAR 0 2
34653: PUSH
34654: LD_VAR 0 4
34658: PUSH
34659: FOR_IN
34660: IFFALSE 34771
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34662: LD_VAR 0 2
34666: PPUSH
34667: CALL_OW 262
34671: PUSH
34672: LD_INT 3
34674: EQUAL
34675: PUSH
34676: LD_VAR 0 2
34680: PPUSH
34681: CALL_OW 261
34685: PUSH
34686: LD_INT 20
34688: GREATER
34689: OR
34690: PUSH
34691: LD_VAR 0 2
34695: PPUSH
34696: CALL_OW 314
34700: NOT
34701: AND
34702: PUSH
34703: LD_VAR 0 2
34707: PPUSH
34708: CALL_OW 263
34712: PUSH
34713: LD_INT 1
34715: NONEQUAL
34716: PUSH
34717: LD_VAR 0 2
34721: PPUSH
34722: CALL_OW 311
34726: OR
34727: AND
34728: IFFALSE 34769
// begin ComCollect ( j , x , y ) ;
34730: LD_VAR 0 2
34734: PPUSH
34735: LD_VAR 0 6
34739: PPUSH
34740: LD_VAR 0 7
34744: PPUSH
34745: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34749: LD_VAR 0 2
34753: PPUSH
34754: LD_VAR 0 8
34758: PPUSH
34759: CALL_OW 172
// exit ;
34763: POP
34764: POP
34765: POP
34766: POP
34767: GO 34777
// end ;
34769: GO 34659
34771: POP
34772: POP
// end ; end ;
34773: GO 34148
34775: POP
34776: POP
// end ; end_of_file
34777: PPOPN 9
34779: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34780: LD_INT 0
34782: PPUSH
34783: PPUSH
34784: PPUSH
34785: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34786: LD_VAR 0 1
34790: PPUSH
34791: CALL_OW 264
34795: PUSH
34796: LD_INT 91
34798: EQUAL
34799: IFFALSE 34871
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34801: LD_INT 68
34803: PPUSH
34804: LD_VAR 0 1
34808: PPUSH
34809: CALL_OW 255
34813: PPUSH
34814: CALL_OW 321
34818: PUSH
34819: LD_INT 2
34821: EQUAL
34822: IFFALSE 34834
// eff := 70 else
34824: LD_ADDR_VAR 0 4
34828: PUSH
34829: LD_INT 70
34831: ST_TO_ADDR
34832: GO 34842
// eff := 30 ;
34834: LD_ADDR_VAR 0 4
34838: PUSH
34839: LD_INT 30
34841: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34842: LD_VAR 0 1
34846: PPUSH
34847: CALL_OW 250
34851: PPUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 251
34861: PPUSH
34862: LD_VAR 0 4
34866: PPUSH
34867: CALL_OW 495
// end ; end ;
34871: LD_VAR 0 2
34875: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34876: LD_INT 0
34878: PPUSH
// end ;
34879: LD_VAR 0 4
34883: RET
// export function SOS_Command ( cmd ) ; begin
34884: LD_INT 0
34886: PPUSH
// end ;
34887: LD_VAR 0 2
34891: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34892: LD_INT 0
34894: PPUSH
// end ;
34895: LD_VAR 0 6
34899: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34900: LD_INT 0
34902: PPUSH
34903: PPUSH
// if not vehicle or not factory then
34904: LD_VAR 0 1
34908: NOT
34909: PUSH
34910: LD_VAR 0 2
34914: NOT
34915: OR
34916: IFFALSE 34920
// exit ;
34918: GO 35151
// if factoryWaypoints >= factory then
34920: LD_EXP 104
34924: PUSH
34925: LD_VAR 0 2
34929: GREATEREQUAL
34930: IFFALSE 35151
// if factoryWaypoints [ factory ] then
34932: LD_EXP 104
34936: PUSH
34937: LD_VAR 0 2
34941: ARRAY
34942: IFFALSE 35151
// begin if GetControl ( vehicle ) = control_manual then
34944: LD_VAR 0 1
34948: PPUSH
34949: CALL_OW 263
34953: PUSH
34954: LD_INT 1
34956: EQUAL
34957: IFFALSE 35038
// begin driver := IsDrivenBy ( vehicle ) ;
34959: LD_ADDR_VAR 0 4
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 311
34973: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34974: LD_VAR 0 4
34978: PPUSH
34979: LD_EXP 104
34983: PUSH
34984: LD_VAR 0 2
34988: ARRAY
34989: PUSH
34990: LD_INT 3
34992: ARRAY
34993: PPUSH
34994: LD_EXP 104
34998: PUSH
34999: LD_VAR 0 2
35003: ARRAY
35004: PUSH
35005: LD_INT 4
35007: ARRAY
35008: PPUSH
35009: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35013: LD_VAR 0 4
35017: PPUSH
35018: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35022: LD_VAR 0 4
35026: PPUSH
35027: LD_VAR 0 2
35031: PPUSH
35032: CALL_OW 180
// end else
35036: GO 35151
// if GetControl ( vehicle ) = control_remote then
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL_OW 263
35047: PUSH
35048: LD_INT 2
35050: EQUAL
35051: IFFALSE 35112
// begin wait ( 0 0$2 ) ;
35053: LD_INT 70
35055: PPUSH
35056: CALL_OW 67
// if Connect ( vehicle ) then
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL 47175 0 1
35069: IFFALSE 35110
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35071: LD_VAR 0 1
35075: PPUSH
35076: LD_EXP 104
35080: PUSH
35081: LD_VAR 0 2
35085: ARRAY
35086: PUSH
35087: LD_INT 3
35089: ARRAY
35090: PPUSH
35091: LD_EXP 104
35095: PUSH
35096: LD_VAR 0 2
35100: ARRAY
35101: PUSH
35102: LD_INT 4
35104: ARRAY
35105: PPUSH
35106: CALL_OW 171
// end else
35110: GO 35151
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35112: LD_VAR 0 1
35116: PPUSH
35117: LD_EXP 104
35121: PUSH
35122: LD_VAR 0 2
35126: ARRAY
35127: PUSH
35128: LD_INT 3
35130: ARRAY
35131: PPUSH
35132: LD_EXP 104
35136: PUSH
35137: LD_VAR 0 2
35141: ARRAY
35142: PUSH
35143: LD_INT 4
35145: ARRAY
35146: PPUSH
35147: CALL_OW 171
// end ; end ;
35151: LD_VAR 0 3
35155: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35156: LD_INT 0
35158: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35159: LD_VAR 0 1
35163: PUSH
35164: LD_INT 250
35166: EQUAL
35167: PUSH
35168: LD_VAR 0 2
35172: PPUSH
35173: CALL_OW 264
35177: PUSH
35178: LD_INT 81
35180: EQUAL
35181: AND
35182: IFFALSE 35203
// MinerPlaceMine ( unit , x , y ) ;
35184: LD_VAR 0 2
35188: PPUSH
35189: LD_VAR 0 4
35193: PPUSH
35194: LD_VAR 0 5
35198: PPUSH
35199: CALL 37588 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35203: LD_VAR 0 1
35207: PUSH
35208: LD_INT 251
35210: EQUAL
35211: PUSH
35212: LD_VAR 0 2
35216: PPUSH
35217: CALL_OW 264
35221: PUSH
35222: LD_INT 81
35224: EQUAL
35225: AND
35226: IFFALSE 35247
// MinerDetonateMine ( unit , x , y ) ;
35228: LD_VAR 0 2
35232: PPUSH
35233: LD_VAR 0 4
35237: PPUSH
35238: LD_VAR 0 5
35242: PPUSH
35243: CALL 37863 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35247: LD_VAR 0 1
35251: PUSH
35252: LD_INT 252
35254: EQUAL
35255: PUSH
35256: LD_VAR 0 2
35260: PPUSH
35261: CALL_OW 264
35265: PUSH
35266: LD_INT 81
35268: EQUAL
35269: AND
35270: IFFALSE 35291
// MinerCreateMinefield ( unit , x , y ) ;
35272: LD_VAR 0 2
35276: PPUSH
35277: LD_VAR 0 4
35281: PPUSH
35282: LD_VAR 0 5
35286: PPUSH
35287: CALL 38280 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35291: LD_VAR 0 1
35295: PUSH
35296: LD_INT 253
35298: EQUAL
35299: PUSH
35300: LD_VAR 0 2
35304: PPUSH
35305: CALL_OW 257
35309: PUSH
35310: LD_INT 5
35312: EQUAL
35313: AND
35314: IFFALSE 35335
// ComBinocular ( unit , x , y ) ;
35316: LD_VAR 0 2
35320: PPUSH
35321: LD_VAR 0 4
35325: PPUSH
35326: LD_VAR 0 5
35330: PPUSH
35331: CALL 38649 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35335: LD_VAR 0 1
35339: PUSH
35340: LD_INT 254
35342: EQUAL
35343: PUSH
35344: LD_VAR 0 2
35348: PPUSH
35349: CALL_OW 264
35353: PUSH
35354: LD_INT 99
35356: EQUAL
35357: AND
35358: PUSH
35359: LD_VAR 0 3
35363: PPUSH
35364: CALL_OW 263
35368: PUSH
35369: LD_INT 3
35371: EQUAL
35372: AND
35373: IFFALSE 35389
// HackDestroyVehicle ( unit , selectedUnit ) ;
35375: LD_VAR 0 2
35379: PPUSH
35380: LD_VAR 0 3
35384: PPUSH
35385: CALL 36952 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35389: LD_VAR 0 1
35393: PUSH
35394: LD_INT 255
35396: EQUAL
35397: PUSH
35398: LD_VAR 0 2
35402: PPUSH
35403: CALL_OW 264
35407: PUSH
35408: LD_INT 14
35410: PUSH
35411: LD_INT 53
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: IN
35418: AND
35419: PUSH
35420: LD_VAR 0 4
35424: PPUSH
35425: LD_VAR 0 5
35429: PPUSH
35430: CALL_OW 488
35434: AND
35435: IFFALSE 35459
// CutTreeXYR ( unit , x , y , 12 ) ;
35437: LD_VAR 0 2
35441: PPUSH
35442: LD_VAR 0 4
35446: PPUSH
35447: LD_VAR 0 5
35451: PPUSH
35452: LD_INT 12
35454: PPUSH
35455: CALL 35522 0 4
// if cmd = 256 then
35459: LD_VAR 0 1
35463: PUSH
35464: LD_INT 256
35466: EQUAL
35467: IFFALSE 35488
// SetFactoryWaypoint ( unit , x , y ) ;
35469: LD_VAR 0 2
35473: PPUSH
35474: LD_VAR 0 4
35478: PPUSH
35479: LD_VAR 0 5
35483: PPUSH
35484: CALL 33469 0 3
// if cmd = 257 then
35488: LD_VAR 0 1
35492: PUSH
35493: LD_INT 257
35495: EQUAL
35496: IFFALSE 35517
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35498: LD_VAR 0 2
35502: PPUSH
35503: LD_VAR 0 4
35507: PPUSH
35508: LD_VAR 0 5
35512: PPUSH
35513: CALL 33831 0 3
// end ;
35517: LD_VAR 0 6
35521: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35522: LD_INT 0
35524: PPUSH
35525: PPUSH
35526: PPUSH
35527: PPUSH
35528: PPUSH
35529: PPUSH
35530: PPUSH
35531: PPUSH
35532: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35533: LD_VAR 0 1
35537: NOT
35538: PUSH
35539: LD_VAR 0 2
35543: PPUSH
35544: LD_VAR 0 3
35548: PPUSH
35549: CALL_OW 488
35553: NOT
35554: OR
35555: PUSH
35556: LD_VAR 0 4
35560: NOT
35561: OR
35562: IFFALSE 35566
// exit ;
35564: GO 35906
// list := [ ] ;
35566: LD_ADDR_VAR 0 13
35570: PUSH
35571: EMPTY
35572: ST_TO_ADDR
// if x - r < 0 then
35573: LD_VAR 0 2
35577: PUSH
35578: LD_VAR 0 4
35582: MINUS
35583: PUSH
35584: LD_INT 0
35586: LESS
35587: IFFALSE 35599
// min_x := 0 else
35589: LD_ADDR_VAR 0 7
35593: PUSH
35594: LD_INT 0
35596: ST_TO_ADDR
35597: GO 35615
// min_x := x - r ;
35599: LD_ADDR_VAR 0 7
35603: PUSH
35604: LD_VAR 0 2
35608: PUSH
35609: LD_VAR 0 4
35613: MINUS
35614: ST_TO_ADDR
// if y - r < 0 then
35615: LD_VAR 0 3
35619: PUSH
35620: LD_VAR 0 4
35624: MINUS
35625: PUSH
35626: LD_INT 0
35628: LESS
35629: IFFALSE 35641
// min_y := 0 else
35631: LD_ADDR_VAR 0 8
35635: PUSH
35636: LD_INT 0
35638: ST_TO_ADDR
35639: GO 35657
// min_y := y - r ;
35641: LD_ADDR_VAR 0 8
35645: PUSH
35646: LD_VAR 0 3
35650: PUSH
35651: LD_VAR 0 4
35655: MINUS
35656: ST_TO_ADDR
// max_x := x + r ;
35657: LD_ADDR_VAR 0 9
35661: PUSH
35662: LD_VAR 0 2
35666: PUSH
35667: LD_VAR 0 4
35671: PLUS
35672: ST_TO_ADDR
// max_y := y + r ;
35673: LD_ADDR_VAR 0 10
35677: PUSH
35678: LD_VAR 0 3
35682: PUSH
35683: LD_VAR 0 4
35687: PLUS
35688: ST_TO_ADDR
// for _x = min_x to max_x do
35689: LD_ADDR_VAR 0 11
35693: PUSH
35694: DOUBLE
35695: LD_VAR 0 7
35699: DEC
35700: ST_TO_ADDR
35701: LD_VAR 0 9
35705: PUSH
35706: FOR_TO
35707: IFFALSE 35824
// for _y = min_y to max_y do
35709: LD_ADDR_VAR 0 12
35713: PUSH
35714: DOUBLE
35715: LD_VAR 0 8
35719: DEC
35720: ST_TO_ADDR
35721: LD_VAR 0 10
35725: PUSH
35726: FOR_TO
35727: IFFALSE 35820
// begin if not ValidHex ( _x , _y ) then
35729: LD_VAR 0 11
35733: PPUSH
35734: LD_VAR 0 12
35738: PPUSH
35739: CALL_OW 488
35743: NOT
35744: IFFALSE 35748
// continue ;
35746: GO 35726
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35748: LD_VAR 0 11
35752: PPUSH
35753: LD_VAR 0 12
35757: PPUSH
35758: CALL_OW 351
35762: PUSH
35763: LD_VAR 0 11
35767: PPUSH
35768: LD_VAR 0 12
35772: PPUSH
35773: CALL_OW 554
35777: AND
35778: IFFALSE 35818
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35780: LD_ADDR_VAR 0 13
35784: PUSH
35785: LD_VAR 0 13
35789: PPUSH
35790: LD_VAR 0 13
35794: PUSH
35795: LD_INT 1
35797: PLUS
35798: PPUSH
35799: LD_VAR 0 11
35803: PUSH
35804: LD_VAR 0 12
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PPUSH
35813: CALL_OW 2
35817: ST_TO_ADDR
// end ;
35818: GO 35726
35820: POP
35821: POP
35822: GO 35706
35824: POP
35825: POP
// if not list then
35826: LD_VAR 0 13
35830: NOT
35831: IFFALSE 35835
// exit ;
35833: GO 35906
// for i in list do
35835: LD_ADDR_VAR 0 6
35839: PUSH
35840: LD_VAR 0 13
35844: PUSH
35845: FOR_IN
35846: IFFALSE 35904
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35848: LD_VAR 0 1
35852: PPUSH
35853: LD_STRING M
35855: PUSH
35856: LD_VAR 0 6
35860: PUSH
35861: LD_INT 1
35863: ARRAY
35864: PUSH
35865: LD_VAR 0 6
35869: PUSH
35870: LD_INT 2
35872: ARRAY
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: PUSH
35895: EMPTY
35896: LIST
35897: PPUSH
35898: CALL_OW 447
35902: GO 35845
35904: POP
35905: POP
// end ;
35906: LD_VAR 0 5
35910: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35911: LD_EXP 107
35915: NOT
35916: IFFALSE 35966
35918: GO 35920
35920: DISABLE
// begin initHack := true ;
35921: LD_ADDR_EXP 107
35925: PUSH
35926: LD_INT 1
35928: ST_TO_ADDR
// hackTanks := [ ] ;
35929: LD_ADDR_EXP 108
35933: PUSH
35934: EMPTY
35935: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35936: LD_ADDR_EXP 109
35940: PUSH
35941: EMPTY
35942: ST_TO_ADDR
// hackLimit := 3 ;
35943: LD_ADDR_EXP 110
35947: PUSH
35948: LD_INT 3
35950: ST_TO_ADDR
// hackDist := 12 ;
35951: LD_ADDR_EXP 111
35955: PUSH
35956: LD_INT 12
35958: ST_TO_ADDR
// hackCounter := [ ] ;
35959: LD_ADDR_EXP 112
35963: PUSH
35964: EMPTY
35965: ST_TO_ADDR
// end ;
35966: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35967: LD_EXP 107
35971: PUSH
35972: LD_INT 34
35974: PUSH
35975: LD_INT 99
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PPUSH
35982: CALL_OW 69
35986: AND
35987: IFFALSE 36240
35989: GO 35991
35991: DISABLE
35992: LD_INT 0
35994: PPUSH
35995: PPUSH
// begin enable ;
35996: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35997: LD_ADDR_VAR 0 1
36001: PUSH
36002: LD_INT 34
36004: PUSH
36005: LD_INT 99
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PPUSH
36012: CALL_OW 69
36016: PUSH
36017: FOR_IN
36018: IFFALSE 36238
// begin if not i in hackTanks then
36020: LD_VAR 0 1
36024: PUSH
36025: LD_EXP 108
36029: IN
36030: NOT
36031: IFFALSE 36114
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36033: LD_ADDR_EXP 108
36037: PUSH
36038: LD_EXP 108
36042: PPUSH
36043: LD_EXP 108
36047: PUSH
36048: LD_INT 1
36050: PLUS
36051: PPUSH
36052: LD_VAR 0 1
36056: PPUSH
36057: CALL_OW 1
36061: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36062: LD_ADDR_EXP 109
36066: PUSH
36067: LD_EXP 109
36071: PPUSH
36072: LD_EXP 109
36076: PUSH
36077: LD_INT 1
36079: PLUS
36080: PPUSH
36081: EMPTY
36082: PPUSH
36083: CALL_OW 1
36087: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36088: LD_ADDR_EXP 112
36092: PUSH
36093: LD_EXP 112
36097: PPUSH
36098: LD_EXP 112
36102: PUSH
36103: LD_INT 1
36105: PLUS
36106: PPUSH
36107: EMPTY
36108: PPUSH
36109: CALL_OW 1
36113: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36114: LD_VAR 0 1
36118: PPUSH
36119: CALL_OW 302
36123: NOT
36124: IFFALSE 36137
// begin HackUnlinkAll ( i ) ;
36126: LD_VAR 0 1
36130: PPUSH
36131: CALL 36243 0 1
// continue ;
36135: GO 36017
// end ; HackCheckCapturedStatus ( i ) ;
36137: LD_VAR 0 1
36141: PPUSH
36142: CALL 36686 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36146: LD_ADDR_VAR 0 2
36150: PUSH
36151: LD_INT 81
36153: PUSH
36154: LD_VAR 0 1
36158: PPUSH
36159: CALL_OW 255
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 33
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 91
36180: PUSH
36181: LD_VAR 0 1
36185: PUSH
36186: LD_EXP 111
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 50
36198: PUSH
36199: EMPTY
36200: LIST
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: PPUSH
36208: CALL_OW 69
36212: ST_TO_ADDR
// if not tmp then
36213: LD_VAR 0 2
36217: NOT
36218: IFFALSE 36222
// continue ;
36220: GO 36017
// HackLink ( i , tmp ) ;
36222: LD_VAR 0 1
36226: PPUSH
36227: LD_VAR 0 2
36231: PPUSH
36232: CALL 36379 0 2
// end ;
36236: GO 36017
36238: POP
36239: POP
// end ;
36240: PPOPN 2
36242: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36243: LD_INT 0
36245: PPUSH
36246: PPUSH
36247: PPUSH
// if not hack in hackTanks then
36248: LD_VAR 0 1
36252: PUSH
36253: LD_EXP 108
36257: IN
36258: NOT
36259: IFFALSE 36263
// exit ;
36261: GO 36374
// index := GetElementIndex ( hackTanks , hack ) ;
36263: LD_ADDR_VAR 0 4
36267: PUSH
36268: LD_EXP 108
36272: PPUSH
36273: LD_VAR 0 1
36277: PPUSH
36278: CALL 43991 0 2
36282: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36283: LD_EXP 109
36287: PUSH
36288: LD_VAR 0 4
36292: ARRAY
36293: IFFALSE 36374
// begin for i in hackTanksCaptured [ index ] do
36295: LD_ADDR_VAR 0 3
36299: PUSH
36300: LD_EXP 109
36304: PUSH
36305: LD_VAR 0 4
36309: ARRAY
36310: PUSH
36311: FOR_IN
36312: IFFALSE 36338
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36314: LD_VAR 0 3
36318: PUSH
36319: LD_INT 1
36321: ARRAY
36322: PPUSH
36323: LD_VAR 0 3
36327: PUSH
36328: LD_INT 2
36330: ARRAY
36331: PPUSH
36332: CALL_OW 235
36336: GO 36311
36338: POP
36339: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36340: LD_ADDR_EXP 109
36344: PUSH
36345: LD_EXP 109
36349: PPUSH
36350: LD_VAR 0 4
36354: PPUSH
36355: EMPTY
36356: PPUSH
36357: CALL_OW 1
36361: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36362: LD_VAR 0 1
36366: PPUSH
36367: LD_INT 0
36369: PPUSH
36370: CALL_OW 505
// end ; end ;
36374: LD_VAR 0 2
36378: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36379: LD_INT 0
36381: PPUSH
36382: PPUSH
36383: PPUSH
// if not hack in hackTanks or not vehicles then
36384: LD_VAR 0 1
36388: PUSH
36389: LD_EXP 108
36393: IN
36394: NOT
36395: PUSH
36396: LD_VAR 0 2
36400: NOT
36401: OR
36402: IFFALSE 36406
// exit ;
36404: GO 36681
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36406: LD_ADDR_VAR 0 2
36410: PUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: LD_VAR 0 2
36420: PPUSH
36421: LD_INT 1
36423: PPUSH
36424: LD_INT 1
36426: PPUSH
36427: CALL 44641 0 4
36431: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36432: LD_ADDR_VAR 0 5
36436: PUSH
36437: LD_EXP 108
36441: PPUSH
36442: LD_VAR 0 1
36446: PPUSH
36447: CALL 43991 0 2
36451: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36452: LD_EXP 109
36456: PUSH
36457: LD_VAR 0 5
36461: ARRAY
36462: PUSH
36463: LD_EXP 110
36467: LESS
36468: IFFALSE 36657
// begin for i := 1 to vehicles do
36470: LD_ADDR_VAR 0 4
36474: PUSH
36475: DOUBLE
36476: LD_INT 1
36478: DEC
36479: ST_TO_ADDR
36480: LD_VAR 0 2
36484: PUSH
36485: FOR_TO
36486: IFFALSE 36655
// begin if hackTanksCaptured [ index ] = hackLimit then
36488: LD_EXP 109
36492: PUSH
36493: LD_VAR 0 5
36497: ARRAY
36498: PUSH
36499: LD_EXP 110
36503: EQUAL
36504: IFFALSE 36508
// break ;
36506: GO 36655
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36508: LD_ADDR_EXP 112
36512: PUSH
36513: LD_EXP 112
36517: PPUSH
36518: LD_VAR 0 5
36522: PPUSH
36523: LD_EXP 112
36527: PUSH
36528: LD_VAR 0 5
36532: ARRAY
36533: PUSH
36534: LD_INT 1
36536: PLUS
36537: PPUSH
36538: CALL_OW 1
36542: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36543: LD_ADDR_EXP 109
36547: PUSH
36548: LD_EXP 109
36552: PPUSH
36553: LD_VAR 0 5
36557: PUSH
36558: LD_EXP 109
36562: PUSH
36563: LD_VAR 0 5
36567: ARRAY
36568: PUSH
36569: LD_INT 1
36571: PLUS
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PPUSH
36577: LD_VAR 0 2
36581: PUSH
36582: LD_VAR 0 4
36586: ARRAY
36587: PUSH
36588: LD_VAR 0 2
36592: PUSH
36593: LD_VAR 0 4
36597: ARRAY
36598: PPUSH
36599: CALL_OW 255
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PPUSH
36608: CALL 44206 0 3
36612: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36613: LD_VAR 0 2
36617: PUSH
36618: LD_VAR 0 4
36622: ARRAY
36623: PPUSH
36624: LD_VAR 0 1
36628: PPUSH
36629: CALL_OW 255
36633: PPUSH
36634: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36638: LD_VAR 0 2
36642: PUSH
36643: LD_VAR 0 4
36647: ARRAY
36648: PPUSH
36649: CALL_OW 141
// end ;
36653: GO 36485
36655: POP
36656: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36657: LD_VAR 0 1
36661: PPUSH
36662: LD_EXP 109
36666: PUSH
36667: LD_VAR 0 5
36671: ARRAY
36672: PUSH
36673: LD_INT 0
36675: PLUS
36676: PPUSH
36677: CALL_OW 505
// end ;
36681: LD_VAR 0 3
36685: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36686: LD_INT 0
36688: PPUSH
36689: PPUSH
36690: PPUSH
36691: PPUSH
// if not hack in hackTanks then
36692: LD_VAR 0 1
36696: PUSH
36697: LD_EXP 108
36701: IN
36702: NOT
36703: IFFALSE 36707
// exit ;
36705: GO 36947
// index := GetElementIndex ( hackTanks , hack ) ;
36707: LD_ADDR_VAR 0 4
36711: PUSH
36712: LD_EXP 108
36716: PPUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: CALL 43991 0 2
36726: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36727: LD_ADDR_VAR 0 3
36731: PUSH
36732: DOUBLE
36733: LD_EXP 109
36737: PUSH
36738: LD_VAR 0 4
36742: ARRAY
36743: INC
36744: ST_TO_ADDR
36745: LD_INT 1
36747: PUSH
36748: FOR_DOWNTO
36749: IFFALSE 36921
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36751: LD_ADDR_VAR 0 5
36755: PUSH
36756: LD_EXP 109
36760: PUSH
36761: LD_VAR 0 4
36765: ARRAY
36766: PUSH
36767: LD_VAR 0 3
36771: ARRAY
36772: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36773: LD_VAR 0 5
36777: PUSH
36778: LD_INT 1
36780: ARRAY
36781: PPUSH
36782: CALL_OW 302
36786: NOT
36787: PUSH
36788: LD_VAR 0 5
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: CALL_OW 255
36801: PUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: CALL_OW 255
36811: NONEQUAL
36812: OR
36813: IFFALSE 36919
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36815: LD_VAR 0 5
36819: PUSH
36820: LD_INT 1
36822: ARRAY
36823: PPUSH
36824: CALL_OW 305
36828: PUSH
36829: LD_VAR 0 5
36833: PUSH
36834: LD_INT 1
36836: ARRAY
36837: PPUSH
36838: CALL_OW 255
36842: PUSH
36843: LD_VAR 0 1
36847: PPUSH
36848: CALL_OW 255
36852: EQUAL
36853: AND
36854: IFFALSE 36878
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36856: LD_VAR 0 5
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: PPUSH
36865: LD_VAR 0 5
36869: PUSH
36870: LD_INT 2
36872: ARRAY
36873: PPUSH
36874: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36878: LD_ADDR_EXP 109
36882: PUSH
36883: LD_EXP 109
36887: PPUSH
36888: LD_VAR 0 4
36892: PPUSH
36893: LD_EXP 109
36897: PUSH
36898: LD_VAR 0 4
36902: ARRAY
36903: PPUSH
36904: LD_VAR 0 3
36908: PPUSH
36909: CALL_OW 3
36913: PPUSH
36914: CALL_OW 1
36918: ST_TO_ADDR
// end ; end ;
36919: GO 36748
36921: POP
36922: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36923: LD_VAR 0 1
36927: PPUSH
36928: LD_EXP 109
36932: PUSH
36933: LD_VAR 0 4
36937: ARRAY
36938: PUSH
36939: LD_INT 0
36941: PLUS
36942: PPUSH
36943: CALL_OW 505
// end ;
36947: LD_VAR 0 2
36951: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36952: LD_INT 0
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
// if not hack in hackTanks then
36958: LD_VAR 0 1
36962: PUSH
36963: LD_EXP 108
36967: IN
36968: NOT
36969: IFFALSE 36973
// exit ;
36971: GO 37058
// index := GetElementIndex ( hackTanks , hack ) ;
36973: LD_ADDR_VAR 0 5
36977: PUSH
36978: LD_EXP 108
36982: PPUSH
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL 43991 0 2
36992: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36993: LD_ADDR_VAR 0 4
36997: PUSH
36998: DOUBLE
36999: LD_INT 1
37001: DEC
37002: ST_TO_ADDR
37003: LD_EXP 109
37007: PUSH
37008: LD_VAR 0 5
37012: ARRAY
37013: PUSH
37014: FOR_TO
37015: IFFALSE 37056
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37017: LD_EXP 109
37021: PUSH
37022: LD_VAR 0 5
37026: ARRAY
37027: PUSH
37028: LD_VAR 0 4
37032: ARRAY
37033: PUSH
37034: LD_INT 1
37036: ARRAY
37037: PUSH
37038: LD_VAR 0 2
37042: EQUAL
37043: IFFALSE 37054
// KillUnit ( vehicle ) ;
37045: LD_VAR 0 2
37049: PPUSH
37050: CALL_OW 66
37054: GO 37014
37056: POP
37057: POP
// end ;
37058: LD_VAR 0 3
37062: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37063: LD_EXP 113
37067: NOT
37068: IFFALSE 37103
37070: GO 37072
37072: DISABLE
// begin initMiner := true ;
37073: LD_ADDR_EXP 113
37077: PUSH
37078: LD_INT 1
37080: ST_TO_ADDR
// minersList := [ ] ;
37081: LD_ADDR_EXP 114
37085: PUSH
37086: EMPTY
37087: ST_TO_ADDR
// minerMinesList := [ ] ;
37088: LD_ADDR_EXP 115
37092: PUSH
37093: EMPTY
37094: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37095: LD_ADDR_EXP 116
37099: PUSH
37100: LD_INT 5
37102: ST_TO_ADDR
// end ;
37103: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37104: LD_EXP 113
37108: PUSH
37109: LD_INT 34
37111: PUSH
37112: LD_INT 81
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PPUSH
37119: CALL_OW 69
37123: AND
37124: IFFALSE 37585
37126: GO 37128
37128: DISABLE
37129: LD_INT 0
37131: PPUSH
37132: PPUSH
37133: PPUSH
37134: PPUSH
// begin enable ;
37135: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37136: LD_ADDR_VAR 0 1
37140: PUSH
37141: LD_INT 34
37143: PUSH
37144: LD_INT 81
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PPUSH
37151: CALL_OW 69
37155: PUSH
37156: FOR_IN
37157: IFFALSE 37229
// begin if not i in minersList then
37159: LD_VAR 0 1
37163: PUSH
37164: LD_EXP 114
37168: IN
37169: NOT
37170: IFFALSE 37227
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37172: LD_ADDR_EXP 114
37176: PUSH
37177: LD_EXP 114
37181: PPUSH
37182: LD_EXP 114
37186: PUSH
37187: LD_INT 1
37189: PLUS
37190: PPUSH
37191: LD_VAR 0 1
37195: PPUSH
37196: CALL_OW 1
37200: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37201: LD_ADDR_EXP 115
37205: PUSH
37206: LD_EXP 115
37210: PPUSH
37211: LD_EXP 115
37215: PUSH
37216: LD_INT 1
37218: PLUS
37219: PPUSH
37220: EMPTY
37221: PPUSH
37222: CALL_OW 1
37226: ST_TO_ADDR
// end end ;
37227: GO 37156
37229: POP
37230: POP
// for i := minerMinesList downto 1 do
37231: LD_ADDR_VAR 0 1
37235: PUSH
37236: DOUBLE
37237: LD_EXP 115
37241: INC
37242: ST_TO_ADDR
37243: LD_INT 1
37245: PUSH
37246: FOR_DOWNTO
37247: IFFALSE 37583
// begin if IsLive ( minersList [ i ] ) then
37249: LD_EXP 114
37253: PUSH
37254: LD_VAR 0 1
37258: ARRAY
37259: PPUSH
37260: CALL_OW 300
37264: IFFALSE 37292
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37266: LD_EXP 114
37270: PUSH
37271: LD_VAR 0 1
37275: ARRAY
37276: PPUSH
37277: LD_EXP 115
37281: PUSH
37282: LD_VAR 0 1
37286: ARRAY
37287: PPUSH
37288: CALL_OW 505
// if not minerMinesList [ i ] then
37292: LD_EXP 115
37296: PUSH
37297: LD_VAR 0 1
37301: ARRAY
37302: NOT
37303: IFFALSE 37307
// continue ;
37305: GO 37246
// for j := minerMinesList [ i ] downto 1 do
37307: LD_ADDR_VAR 0 2
37311: PUSH
37312: DOUBLE
37313: LD_EXP 115
37317: PUSH
37318: LD_VAR 0 1
37322: ARRAY
37323: INC
37324: ST_TO_ADDR
37325: LD_INT 1
37327: PUSH
37328: FOR_DOWNTO
37329: IFFALSE 37579
// begin side := GetSide ( minersList [ i ] ) ;
37331: LD_ADDR_VAR 0 3
37335: PUSH
37336: LD_EXP 114
37340: PUSH
37341: LD_VAR 0 1
37345: ARRAY
37346: PPUSH
37347: CALL_OW 255
37351: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37352: LD_ADDR_VAR 0 4
37356: PUSH
37357: LD_EXP 115
37361: PUSH
37362: LD_VAR 0 1
37366: ARRAY
37367: PUSH
37368: LD_VAR 0 2
37372: ARRAY
37373: PUSH
37374: LD_INT 1
37376: ARRAY
37377: PPUSH
37378: LD_EXP 115
37382: PUSH
37383: LD_VAR 0 1
37387: ARRAY
37388: PUSH
37389: LD_VAR 0 2
37393: ARRAY
37394: PUSH
37395: LD_INT 2
37397: ARRAY
37398: PPUSH
37399: CALL_OW 428
37403: ST_TO_ADDR
// if not tmp then
37404: LD_VAR 0 4
37408: NOT
37409: IFFALSE 37413
// continue ;
37411: GO 37328
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37413: LD_VAR 0 4
37417: PUSH
37418: LD_INT 81
37420: PUSH
37421: LD_VAR 0 3
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PPUSH
37430: CALL_OW 69
37434: IN
37435: PUSH
37436: LD_EXP 115
37440: PUSH
37441: LD_VAR 0 1
37445: ARRAY
37446: PUSH
37447: LD_VAR 0 2
37451: ARRAY
37452: PUSH
37453: LD_INT 1
37455: ARRAY
37456: PPUSH
37457: LD_EXP 115
37461: PUSH
37462: LD_VAR 0 1
37466: ARRAY
37467: PUSH
37468: LD_VAR 0 2
37472: ARRAY
37473: PUSH
37474: LD_INT 2
37476: ARRAY
37477: PPUSH
37478: CALL_OW 458
37482: AND
37483: IFFALSE 37577
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37485: LD_EXP 115
37489: PUSH
37490: LD_VAR 0 1
37494: ARRAY
37495: PUSH
37496: LD_VAR 0 2
37500: ARRAY
37501: PUSH
37502: LD_INT 1
37504: ARRAY
37505: PPUSH
37506: LD_EXP 115
37510: PUSH
37511: LD_VAR 0 1
37515: ARRAY
37516: PUSH
37517: LD_VAR 0 2
37521: ARRAY
37522: PUSH
37523: LD_INT 2
37525: ARRAY
37526: PPUSH
37527: LD_VAR 0 3
37531: PPUSH
37532: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37536: LD_ADDR_EXP 115
37540: PUSH
37541: LD_EXP 115
37545: PPUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: LD_EXP 115
37555: PUSH
37556: LD_VAR 0 1
37560: ARRAY
37561: PPUSH
37562: LD_VAR 0 2
37566: PPUSH
37567: CALL_OW 3
37571: PPUSH
37572: CALL_OW 1
37576: ST_TO_ADDR
// end ; end ;
37577: GO 37328
37579: POP
37580: POP
// end ;
37581: GO 37246
37583: POP
37584: POP
// end ;
37585: PPOPN 4
37587: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37588: LD_INT 0
37590: PPUSH
37591: PPUSH
// result := false ;
37592: LD_ADDR_VAR 0 4
37596: PUSH
37597: LD_INT 0
37599: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 264
37609: PUSH
37610: LD_INT 81
37612: EQUAL
37613: NOT
37614: IFFALSE 37618
// exit ;
37616: GO 37858
// index := GetElementIndex ( minersList , unit ) ;
37618: LD_ADDR_VAR 0 5
37622: PUSH
37623: LD_EXP 114
37627: PPUSH
37628: LD_VAR 0 1
37632: PPUSH
37633: CALL 43991 0 2
37637: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37638: LD_EXP 115
37642: PUSH
37643: LD_VAR 0 5
37647: ARRAY
37648: PUSH
37649: LD_EXP 116
37653: GREATEREQUAL
37654: IFFALSE 37658
// exit ;
37656: GO 37858
// ComMoveXY ( unit , x , y ) ;
37658: LD_VAR 0 1
37662: PPUSH
37663: LD_VAR 0 2
37667: PPUSH
37668: LD_VAR 0 3
37672: PPUSH
37673: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37677: LD_INT 35
37679: PPUSH
37680: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37684: LD_VAR 0 1
37688: PPUSH
37689: LD_VAR 0 2
37693: PPUSH
37694: LD_VAR 0 3
37698: PPUSH
37699: CALL 75346 0 3
37703: NOT
37704: PUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: CALL_OW 314
37714: AND
37715: IFFALSE 37719
// exit ;
37717: GO 37858
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37719: LD_VAR 0 2
37723: PPUSH
37724: LD_VAR 0 3
37728: PPUSH
37729: CALL_OW 428
37733: PUSH
37734: LD_VAR 0 1
37738: EQUAL
37739: PUSH
37740: LD_VAR 0 1
37744: PPUSH
37745: CALL_OW 314
37749: NOT
37750: AND
37751: IFFALSE 37677
// PlaySoundXY ( x , y , PlantMine ) ;
37753: LD_VAR 0 2
37757: PPUSH
37758: LD_VAR 0 3
37762: PPUSH
37763: LD_STRING PlantMine
37765: PPUSH
37766: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37770: LD_VAR 0 2
37774: PPUSH
37775: LD_VAR 0 3
37779: PPUSH
37780: LD_VAR 0 1
37784: PPUSH
37785: CALL_OW 255
37789: PPUSH
37790: LD_INT 0
37792: PPUSH
37793: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37797: LD_ADDR_EXP 115
37801: PUSH
37802: LD_EXP 115
37806: PPUSH
37807: LD_VAR 0 5
37811: PUSH
37812: LD_EXP 115
37816: PUSH
37817: LD_VAR 0 5
37821: ARRAY
37822: PUSH
37823: LD_INT 1
37825: PLUS
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PPUSH
37831: LD_VAR 0 2
37835: PUSH
37836: LD_VAR 0 3
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PPUSH
37845: CALL 44206 0 3
37849: ST_TO_ADDR
// result := true ;
37850: LD_ADDR_VAR 0 4
37854: PUSH
37855: LD_INT 1
37857: ST_TO_ADDR
// end ;
37858: LD_VAR 0 4
37862: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37863: LD_INT 0
37865: PPUSH
37866: PPUSH
37867: PPUSH
// if not unit in minersList then
37868: LD_VAR 0 1
37872: PUSH
37873: LD_EXP 114
37877: IN
37878: NOT
37879: IFFALSE 37883
// exit ;
37881: GO 38275
// index := GetElementIndex ( minersList , unit ) ;
37883: LD_ADDR_VAR 0 6
37887: PUSH
37888: LD_EXP 114
37892: PPUSH
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL 43991 0 2
37902: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37903: LD_ADDR_VAR 0 5
37907: PUSH
37908: DOUBLE
37909: LD_EXP 115
37913: PUSH
37914: LD_VAR 0 6
37918: ARRAY
37919: INC
37920: ST_TO_ADDR
37921: LD_INT 1
37923: PUSH
37924: FOR_DOWNTO
37925: IFFALSE 38086
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37927: LD_EXP 115
37931: PUSH
37932: LD_VAR 0 6
37936: ARRAY
37937: PUSH
37938: LD_VAR 0 5
37942: ARRAY
37943: PUSH
37944: LD_INT 1
37946: ARRAY
37947: PUSH
37948: LD_VAR 0 2
37952: EQUAL
37953: PUSH
37954: LD_EXP 115
37958: PUSH
37959: LD_VAR 0 6
37963: ARRAY
37964: PUSH
37965: LD_VAR 0 5
37969: ARRAY
37970: PUSH
37971: LD_INT 2
37973: ARRAY
37974: PUSH
37975: LD_VAR 0 3
37979: EQUAL
37980: AND
37981: IFFALSE 38084
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37983: LD_EXP 115
37987: PUSH
37988: LD_VAR 0 6
37992: ARRAY
37993: PUSH
37994: LD_VAR 0 5
37998: ARRAY
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PPUSH
38004: LD_EXP 115
38008: PUSH
38009: LD_VAR 0 6
38013: ARRAY
38014: PUSH
38015: LD_VAR 0 5
38019: ARRAY
38020: PUSH
38021: LD_INT 2
38023: ARRAY
38024: PPUSH
38025: LD_VAR 0 1
38029: PPUSH
38030: CALL_OW 255
38034: PPUSH
38035: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38039: LD_ADDR_EXP 115
38043: PUSH
38044: LD_EXP 115
38048: PPUSH
38049: LD_VAR 0 6
38053: PPUSH
38054: LD_EXP 115
38058: PUSH
38059: LD_VAR 0 6
38063: ARRAY
38064: PPUSH
38065: LD_VAR 0 5
38069: PPUSH
38070: CALL_OW 3
38074: PPUSH
38075: CALL_OW 1
38079: ST_TO_ADDR
// exit ;
38080: POP
38081: POP
38082: GO 38275
// end ; end ;
38084: GO 37924
38086: POP
38087: POP
// for i := minerMinesList [ index ] downto 1 do
38088: LD_ADDR_VAR 0 5
38092: PUSH
38093: DOUBLE
38094: LD_EXP 115
38098: PUSH
38099: LD_VAR 0 6
38103: ARRAY
38104: INC
38105: ST_TO_ADDR
38106: LD_INT 1
38108: PUSH
38109: FOR_DOWNTO
38110: IFFALSE 38273
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38112: LD_EXP 115
38116: PUSH
38117: LD_VAR 0 6
38121: ARRAY
38122: PUSH
38123: LD_VAR 0 5
38127: ARRAY
38128: PUSH
38129: LD_INT 1
38131: ARRAY
38132: PPUSH
38133: LD_EXP 115
38137: PUSH
38138: LD_VAR 0 6
38142: ARRAY
38143: PUSH
38144: LD_VAR 0 5
38148: ARRAY
38149: PUSH
38150: LD_INT 2
38152: ARRAY
38153: PPUSH
38154: LD_VAR 0 2
38158: PPUSH
38159: LD_VAR 0 3
38163: PPUSH
38164: CALL_OW 298
38168: PUSH
38169: LD_INT 6
38171: LESS
38172: IFFALSE 38271
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38174: LD_EXP 115
38178: PUSH
38179: LD_VAR 0 6
38183: ARRAY
38184: PUSH
38185: LD_VAR 0 5
38189: ARRAY
38190: PUSH
38191: LD_INT 1
38193: ARRAY
38194: PPUSH
38195: LD_EXP 115
38199: PUSH
38200: LD_VAR 0 6
38204: ARRAY
38205: PUSH
38206: LD_VAR 0 5
38210: ARRAY
38211: PUSH
38212: LD_INT 2
38214: ARRAY
38215: PPUSH
38216: LD_VAR 0 1
38220: PPUSH
38221: CALL_OW 255
38225: PPUSH
38226: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38230: LD_ADDR_EXP 115
38234: PUSH
38235: LD_EXP 115
38239: PPUSH
38240: LD_VAR 0 6
38244: PPUSH
38245: LD_EXP 115
38249: PUSH
38250: LD_VAR 0 6
38254: ARRAY
38255: PPUSH
38256: LD_VAR 0 5
38260: PPUSH
38261: CALL_OW 3
38265: PPUSH
38266: CALL_OW 1
38270: ST_TO_ADDR
// end ; end ;
38271: GO 38109
38273: POP
38274: POP
// end ;
38275: LD_VAR 0 4
38279: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38280: LD_INT 0
38282: PPUSH
38283: PPUSH
38284: PPUSH
38285: PPUSH
38286: PPUSH
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38291: LD_VAR 0 1
38295: PPUSH
38296: CALL_OW 264
38300: PUSH
38301: LD_INT 81
38303: EQUAL
38304: NOT
38305: PUSH
38306: LD_VAR 0 1
38310: PUSH
38311: LD_EXP 114
38315: IN
38316: NOT
38317: OR
38318: IFFALSE 38322
// exit ;
38320: GO 38644
// index := GetElementIndex ( minersList , unit ) ;
38322: LD_ADDR_VAR 0 6
38326: PUSH
38327: LD_EXP 114
38331: PPUSH
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL 43991 0 2
38341: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38342: LD_ADDR_VAR 0 8
38346: PUSH
38347: LD_EXP 116
38351: PUSH
38352: LD_EXP 115
38356: PUSH
38357: LD_VAR 0 6
38361: ARRAY
38362: MINUS
38363: ST_TO_ADDR
// if not minesFreeAmount then
38364: LD_VAR 0 8
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38644
// tmp := [ ] ;
38373: LD_ADDR_VAR 0 7
38377: PUSH
38378: EMPTY
38379: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38380: LD_ADDR_VAR 0 5
38384: PUSH
38385: DOUBLE
38386: LD_INT 1
38388: DEC
38389: ST_TO_ADDR
38390: LD_VAR 0 8
38394: PUSH
38395: FOR_TO
38396: IFFALSE 38591
// begin _d := rand ( 0 , 5 ) ;
38398: LD_ADDR_VAR 0 11
38402: PUSH
38403: LD_INT 0
38405: PPUSH
38406: LD_INT 5
38408: PPUSH
38409: CALL_OW 12
38413: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38414: LD_ADDR_VAR 0 12
38418: PUSH
38419: LD_INT 2
38421: PPUSH
38422: LD_INT 6
38424: PPUSH
38425: CALL_OW 12
38429: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38430: LD_ADDR_VAR 0 9
38434: PUSH
38435: LD_VAR 0 2
38439: PPUSH
38440: LD_VAR 0 11
38444: PPUSH
38445: LD_VAR 0 12
38449: PPUSH
38450: CALL_OW 272
38454: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38455: LD_ADDR_VAR 0 10
38459: PUSH
38460: LD_VAR 0 3
38464: PPUSH
38465: LD_VAR 0 11
38469: PPUSH
38470: LD_VAR 0 12
38474: PPUSH
38475: CALL_OW 273
38479: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38480: LD_VAR 0 9
38484: PPUSH
38485: LD_VAR 0 10
38489: PPUSH
38490: CALL_OW 488
38494: PUSH
38495: LD_VAR 0 9
38499: PUSH
38500: LD_VAR 0 10
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_VAR 0 7
38513: IN
38514: NOT
38515: AND
38516: PUSH
38517: LD_VAR 0 9
38521: PPUSH
38522: LD_VAR 0 10
38526: PPUSH
38527: CALL_OW 458
38531: NOT
38532: AND
38533: IFFALSE 38575
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38535: LD_ADDR_VAR 0 7
38539: PUSH
38540: LD_VAR 0 7
38544: PPUSH
38545: LD_VAR 0 7
38549: PUSH
38550: LD_INT 1
38552: PLUS
38553: PPUSH
38554: LD_VAR 0 9
38558: PUSH
38559: LD_VAR 0 10
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PPUSH
38568: CALL_OW 1
38572: ST_TO_ADDR
38573: GO 38589
// i := i - 1 ;
38575: LD_ADDR_VAR 0 5
38579: PUSH
38580: LD_VAR 0 5
38584: PUSH
38585: LD_INT 1
38587: MINUS
38588: ST_TO_ADDR
// end ;
38589: GO 38395
38591: POP
38592: POP
// for i in tmp do
38593: LD_ADDR_VAR 0 5
38597: PUSH
38598: LD_VAR 0 7
38602: PUSH
38603: FOR_IN
38604: IFFALSE 38642
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38606: LD_VAR 0 1
38610: PPUSH
38611: LD_VAR 0 5
38615: PUSH
38616: LD_INT 1
38618: ARRAY
38619: PPUSH
38620: LD_VAR 0 5
38624: PUSH
38625: LD_INT 2
38627: ARRAY
38628: PPUSH
38629: CALL 37588 0 3
38633: NOT
38634: IFFALSE 38640
// exit ;
38636: POP
38637: POP
38638: GO 38644
38640: GO 38603
38642: POP
38643: POP
// end ;
38644: LD_VAR 0 4
38648: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38649: LD_INT 0
38651: PPUSH
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
// if not GetClass ( unit ) = class_sniper then
38658: LD_VAR 0 1
38662: PPUSH
38663: CALL_OW 257
38667: PUSH
38668: LD_INT 5
38670: EQUAL
38671: NOT
38672: IFFALSE 38676
// exit ;
38674: GO 39064
// dist := 8 ;
38676: LD_ADDR_VAR 0 5
38680: PUSH
38681: LD_INT 8
38683: ST_TO_ADDR
// viewRange := 12 ;
38684: LD_ADDR_VAR 0 7
38688: PUSH
38689: LD_INT 12
38691: ST_TO_ADDR
// side := GetSide ( unit ) ;
38692: LD_ADDR_VAR 0 6
38696: PUSH
38697: LD_VAR 0 1
38701: PPUSH
38702: CALL_OW 255
38706: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38707: LD_INT 61
38709: PPUSH
38710: LD_VAR 0 6
38714: PPUSH
38715: CALL_OW 321
38719: PUSH
38720: LD_INT 2
38722: EQUAL
38723: IFFALSE 38733
// viewRange := 16 ;
38725: LD_ADDR_VAR 0 7
38729: PUSH
38730: LD_INT 16
38732: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38733: LD_VAR 0 1
38737: PPUSH
38738: LD_VAR 0 2
38742: PPUSH
38743: LD_VAR 0 3
38747: PPUSH
38748: CALL_OW 297
38752: PUSH
38753: LD_VAR 0 5
38757: GREATER
38758: IFFALSE 38837
// begin ComMoveXY ( unit , x , y ) ;
38760: LD_VAR 0 1
38764: PPUSH
38765: LD_VAR 0 2
38769: PPUSH
38770: LD_VAR 0 3
38774: PPUSH
38775: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38779: LD_INT 35
38781: PPUSH
38782: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38786: LD_VAR 0 1
38790: PPUSH
38791: LD_VAR 0 2
38795: PPUSH
38796: LD_VAR 0 3
38800: PPUSH
38801: CALL 75346 0 3
38805: NOT
38806: IFFALSE 38810
// exit ;
38808: GO 39064
// until GetDistUnitXY ( unit , x , y ) < dist ;
38810: LD_VAR 0 1
38814: PPUSH
38815: LD_VAR 0 2
38819: PPUSH
38820: LD_VAR 0 3
38824: PPUSH
38825: CALL_OW 297
38829: PUSH
38830: LD_VAR 0 5
38834: LESS
38835: IFFALSE 38779
// end ; ComTurnXY ( unit , x , y ) ;
38837: LD_VAR 0 1
38841: PPUSH
38842: LD_VAR 0 2
38846: PPUSH
38847: LD_VAR 0 3
38851: PPUSH
38852: CALL_OW 118
// wait ( 5 ) ;
38856: LD_INT 5
38858: PPUSH
38859: CALL_OW 67
// _d := GetDir ( unit ) ;
38863: LD_ADDR_VAR 0 10
38867: PUSH
38868: LD_VAR 0 1
38872: PPUSH
38873: CALL_OW 254
38877: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38878: LD_ADDR_VAR 0 8
38882: PUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: CALL_OW 250
38892: PPUSH
38893: LD_VAR 0 10
38897: PPUSH
38898: LD_VAR 0 5
38902: PPUSH
38903: CALL_OW 272
38907: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38908: LD_ADDR_VAR 0 9
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 251
38922: PPUSH
38923: LD_VAR 0 10
38927: PPUSH
38928: LD_VAR 0 5
38932: PPUSH
38933: CALL_OW 273
38937: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38938: LD_VAR 0 8
38942: PPUSH
38943: LD_VAR 0 9
38947: PPUSH
38948: CALL_OW 488
38952: NOT
38953: IFFALSE 38957
// exit ;
38955: GO 39064
// ComAnimCustom ( unit , 1 ) ;
38957: LD_VAR 0 1
38961: PPUSH
38962: LD_INT 1
38964: PPUSH
38965: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38969: LD_VAR 0 8
38973: PPUSH
38974: LD_VAR 0 9
38978: PPUSH
38979: LD_VAR 0 6
38983: PPUSH
38984: LD_VAR 0 7
38988: PPUSH
38989: CALL_OW 330
// repeat wait ( 1 ) ;
38993: LD_INT 1
38995: PPUSH
38996: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39000: LD_VAR 0 1
39004: PPUSH
39005: CALL_OW 316
39009: PUSH
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL_OW 314
39019: OR
39020: PUSH
39021: LD_VAR 0 1
39025: PPUSH
39026: CALL_OW 302
39030: NOT
39031: OR
39032: PUSH
39033: LD_VAR 0 1
39037: PPUSH
39038: CALL_OW 301
39042: OR
39043: IFFALSE 38993
// RemoveSeeing ( _x , _y , side ) ;
39045: LD_VAR 0 8
39049: PPUSH
39050: LD_VAR 0 9
39054: PPUSH
39055: LD_VAR 0 6
39059: PPUSH
39060: CALL_OW 331
// end ; end_of_file
39064: LD_VAR 0 4
39068: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39069: LD_INT 0
39071: PPUSH
39072: PPUSH
// if exist_mode then
39073: LD_VAR 0 2
39077: IFFALSE 39102
// unit := CreateCharacter ( prefix & ident ) else
39079: LD_ADDR_VAR 0 5
39083: PUSH
39084: LD_VAR 0 3
39088: PUSH
39089: LD_VAR 0 1
39093: STR
39094: PPUSH
39095: CALL_OW 34
39099: ST_TO_ADDR
39100: GO 39117
// unit := NewCharacter ( ident ) ;
39102: LD_ADDR_VAR 0 5
39106: PUSH
39107: LD_VAR 0 1
39111: PPUSH
39112: CALL_OW 25
39116: ST_TO_ADDR
// result := unit ;
39117: LD_ADDR_VAR 0 4
39121: PUSH
39122: LD_VAR 0 5
39126: ST_TO_ADDR
// end ;
39127: LD_VAR 0 4
39131: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39132: LD_INT 0
39134: PPUSH
39135: PPUSH
// if not side or not nation then
39136: LD_VAR 0 1
39140: NOT
39141: PUSH
39142: LD_VAR 0 2
39146: NOT
39147: OR
39148: IFFALSE 39152
// exit ;
39150: GO 39920
// case nation of nation_american :
39152: LD_VAR 0 2
39156: PUSH
39157: LD_INT 1
39159: DOUBLE
39160: EQUAL
39161: IFTRUE 39165
39163: GO 39379
39165: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39166: LD_ADDR_VAR 0 4
39170: PUSH
39171: LD_INT 35
39173: PUSH
39174: LD_INT 45
39176: PUSH
39177: LD_INT 46
39179: PUSH
39180: LD_INT 47
39182: PUSH
39183: LD_INT 82
39185: PUSH
39186: LD_INT 83
39188: PUSH
39189: LD_INT 84
39191: PUSH
39192: LD_INT 85
39194: PUSH
39195: LD_INT 86
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 6
39206: PUSH
39207: LD_INT 15
39209: PUSH
39210: LD_INT 16
39212: PUSH
39213: LD_INT 7
39215: PUSH
39216: LD_INT 12
39218: PUSH
39219: LD_INT 13
39221: PUSH
39222: LD_INT 10
39224: PUSH
39225: LD_INT 14
39227: PUSH
39228: LD_INT 20
39230: PUSH
39231: LD_INT 21
39233: PUSH
39234: LD_INT 22
39236: PUSH
39237: LD_INT 25
39239: PUSH
39240: LD_INT 32
39242: PUSH
39243: LD_INT 27
39245: PUSH
39246: LD_INT 36
39248: PUSH
39249: LD_INT 69
39251: PUSH
39252: LD_INT 39
39254: PUSH
39255: LD_INT 34
39257: PUSH
39258: LD_INT 40
39260: PUSH
39261: LD_INT 48
39263: PUSH
39264: LD_INT 49
39266: PUSH
39267: LD_INT 50
39269: PUSH
39270: LD_INT 51
39272: PUSH
39273: LD_INT 52
39275: PUSH
39276: LD_INT 53
39278: PUSH
39279: LD_INT 54
39281: PUSH
39282: LD_INT 55
39284: PUSH
39285: LD_INT 56
39287: PUSH
39288: LD_INT 57
39290: PUSH
39291: LD_INT 58
39293: PUSH
39294: LD_INT 59
39296: PUSH
39297: LD_INT 60
39299: PUSH
39300: LD_INT 61
39302: PUSH
39303: LD_INT 62
39305: PUSH
39306: LD_INT 80
39308: PUSH
39309: LD_INT 82
39311: PUSH
39312: LD_INT 83
39314: PUSH
39315: LD_INT 84
39317: PUSH
39318: LD_INT 85
39320: PUSH
39321: LD_INT 86
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: ST_TO_ADDR
39377: GO 39844
39379: LD_INT 2
39381: DOUBLE
39382: EQUAL
39383: IFTRUE 39387
39385: GO 39613
39387: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39388: LD_ADDR_VAR 0 4
39392: PUSH
39393: LD_INT 35
39395: PUSH
39396: LD_INT 45
39398: PUSH
39399: LD_INT 46
39401: PUSH
39402: LD_INT 47
39404: PUSH
39405: LD_INT 82
39407: PUSH
39408: LD_INT 83
39410: PUSH
39411: LD_INT 84
39413: PUSH
39414: LD_INT 85
39416: PUSH
39417: LD_INT 87
39419: PUSH
39420: LD_INT 70
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 11
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: LD_INT 4
39434: PUSH
39435: LD_INT 5
39437: PUSH
39438: LD_INT 6
39440: PUSH
39441: LD_INT 15
39443: PUSH
39444: LD_INT 18
39446: PUSH
39447: LD_INT 7
39449: PUSH
39450: LD_INT 17
39452: PUSH
39453: LD_INT 8
39455: PUSH
39456: LD_INT 20
39458: PUSH
39459: LD_INT 21
39461: PUSH
39462: LD_INT 22
39464: PUSH
39465: LD_INT 72
39467: PUSH
39468: LD_INT 26
39470: PUSH
39471: LD_INT 69
39473: PUSH
39474: LD_INT 39
39476: PUSH
39477: LD_INT 40
39479: PUSH
39480: LD_INT 41
39482: PUSH
39483: LD_INT 42
39485: PUSH
39486: LD_INT 43
39488: PUSH
39489: LD_INT 48
39491: PUSH
39492: LD_INT 49
39494: PUSH
39495: LD_INT 50
39497: PUSH
39498: LD_INT 51
39500: PUSH
39501: LD_INT 52
39503: PUSH
39504: LD_INT 53
39506: PUSH
39507: LD_INT 54
39509: PUSH
39510: LD_INT 55
39512: PUSH
39513: LD_INT 56
39515: PUSH
39516: LD_INT 60
39518: PUSH
39519: LD_INT 61
39521: PUSH
39522: LD_INT 62
39524: PUSH
39525: LD_INT 66
39527: PUSH
39528: LD_INT 67
39530: PUSH
39531: LD_INT 68
39533: PUSH
39534: LD_INT 81
39536: PUSH
39537: LD_INT 82
39539: PUSH
39540: LD_INT 83
39542: PUSH
39543: LD_INT 84
39545: PUSH
39546: LD_INT 85
39548: PUSH
39549: LD_INT 87
39551: PUSH
39552: LD_INT 88
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
39611: GO 39844
39613: LD_INT 3
39615: DOUBLE
39616: EQUAL
39617: IFTRUE 39621
39619: GO 39843
39621: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39622: LD_ADDR_VAR 0 4
39626: PUSH
39627: LD_INT 46
39629: PUSH
39630: LD_INT 47
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: LD_INT 82
39641: PUSH
39642: LD_INT 83
39644: PUSH
39645: LD_INT 84
39647: PUSH
39648: LD_INT 85
39650: PUSH
39651: LD_INT 86
39653: PUSH
39654: LD_INT 11
39656: PUSH
39657: LD_INT 9
39659: PUSH
39660: LD_INT 20
39662: PUSH
39663: LD_INT 19
39665: PUSH
39666: LD_INT 21
39668: PUSH
39669: LD_INT 24
39671: PUSH
39672: LD_INT 22
39674: PUSH
39675: LD_INT 25
39677: PUSH
39678: LD_INT 28
39680: PUSH
39681: LD_INT 29
39683: PUSH
39684: LD_INT 30
39686: PUSH
39687: LD_INT 31
39689: PUSH
39690: LD_INT 37
39692: PUSH
39693: LD_INT 38
39695: PUSH
39696: LD_INT 32
39698: PUSH
39699: LD_INT 27
39701: PUSH
39702: LD_INT 33
39704: PUSH
39705: LD_INT 69
39707: PUSH
39708: LD_INT 39
39710: PUSH
39711: LD_INT 34
39713: PUSH
39714: LD_INT 40
39716: PUSH
39717: LD_INT 71
39719: PUSH
39720: LD_INT 23
39722: PUSH
39723: LD_INT 44
39725: PUSH
39726: LD_INT 48
39728: PUSH
39729: LD_INT 49
39731: PUSH
39732: LD_INT 50
39734: PUSH
39735: LD_INT 51
39737: PUSH
39738: LD_INT 52
39740: PUSH
39741: LD_INT 53
39743: PUSH
39744: LD_INT 54
39746: PUSH
39747: LD_INT 55
39749: PUSH
39750: LD_INT 56
39752: PUSH
39753: LD_INT 57
39755: PUSH
39756: LD_INT 58
39758: PUSH
39759: LD_INT 59
39761: PUSH
39762: LD_INT 63
39764: PUSH
39765: LD_INT 64
39767: PUSH
39768: LD_INT 65
39770: PUSH
39771: LD_INT 82
39773: PUSH
39774: LD_INT 83
39776: PUSH
39777: LD_INT 84
39779: PUSH
39780: LD_INT 85
39782: PUSH
39783: LD_INT 86
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: ST_TO_ADDR
39841: GO 39844
39843: POP
// if state > - 1 and state < 3 then
39844: LD_VAR 0 3
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: GREATER
39853: PUSH
39854: LD_VAR 0 3
39858: PUSH
39859: LD_INT 3
39861: LESS
39862: AND
39863: IFFALSE 39920
// for i in result do
39865: LD_ADDR_VAR 0 5
39869: PUSH
39870: LD_VAR 0 4
39874: PUSH
39875: FOR_IN
39876: IFFALSE 39918
// if GetTech ( i , side ) <> state then
39878: LD_VAR 0 5
39882: PPUSH
39883: LD_VAR 0 1
39887: PPUSH
39888: CALL_OW 321
39892: PUSH
39893: LD_VAR 0 3
39897: NONEQUAL
39898: IFFALSE 39916
// result := result diff i ;
39900: LD_ADDR_VAR 0 4
39904: PUSH
39905: LD_VAR 0 4
39909: PUSH
39910: LD_VAR 0 5
39914: DIFF
39915: ST_TO_ADDR
39916: GO 39875
39918: POP
39919: POP
// end ;
39920: LD_VAR 0 4
39924: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39925: LD_INT 0
39927: PPUSH
39928: PPUSH
39929: PPUSH
// result := true ;
39930: LD_ADDR_VAR 0 3
39934: PUSH
39935: LD_INT 1
39937: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39938: LD_ADDR_VAR 0 5
39942: PUSH
39943: LD_VAR 0 2
39947: PPUSH
39948: CALL_OW 480
39952: ST_TO_ADDR
// if not tmp then
39953: LD_VAR 0 5
39957: NOT
39958: IFFALSE 39962
// exit ;
39960: GO 40011
// for i in tmp do
39962: LD_ADDR_VAR 0 4
39966: PUSH
39967: LD_VAR 0 5
39971: PUSH
39972: FOR_IN
39973: IFFALSE 40009
// if GetTech ( i , side ) <> state_researched then
39975: LD_VAR 0 4
39979: PPUSH
39980: LD_VAR 0 1
39984: PPUSH
39985: CALL_OW 321
39989: PUSH
39990: LD_INT 2
39992: NONEQUAL
39993: IFFALSE 40007
// begin result := false ;
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_INT 0
40002: ST_TO_ADDR
// exit ;
40003: POP
40004: POP
40005: GO 40011
// end ;
40007: GO 39972
40009: POP
40010: POP
// end ;
40011: LD_VAR 0 3
40015: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40016: LD_INT 0
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
40029: PPUSH
40030: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40031: LD_VAR 0 1
40035: NOT
40036: PUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: CALL_OW 257
40046: PUSH
40047: LD_INT 9
40049: NONEQUAL
40050: OR
40051: IFFALSE 40055
// exit ;
40053: GO 40628
// side := GetSide ( unit ) ;
40055: LD_ADDR_VAR 0 9
40059: PUSH
40060: LD_VAR 0 1
40064: PPUSH
40065: CALL_OW 255
40069: ST_TO_ADDR
// tech_space := tech_spacanom ;
40070: LD_ADDR_VAR 0 12
40074: PUSH
40075: LD_INT 29
40077: ST_TO_ADDR
// tech_time := tech_taurad ;
40078: LD_ADDR_VAR 0 13
40082: PUSH
40083: LD_INT 28
40085: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40086: LD_ADDR_VAR 0 11
40090: PUSH
40091: LD_VAR 0 1
40095: PPUSH
40096: CALL_OW 310
40100: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40101: LD_VAR 0 11
40105: PPUSH
40106: CALL_OW 247
40110: PUSH
40111: LD_INT 2
40113: EQUAL
40114: IFFALSE 40118
// exit ;
40116: GO 40628
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40118: LD_ADDR_VAR 0 8
40122: PUSH
40123: LD_INT 81
40125: PUSH
40126: LD_VAR 0 9
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: LD_INT 21
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PPUSH
40156: CALL_OW 69
40160: ST_TO_ADDR
// if not tmp then
40161: LD_VAR 0 8
40165: NOT
40166: IFFALSE 40170
// exit ;
40168: GO 40628
// if in_unit then
40170: LD_VAR 0 11
40174: IFFALSE 40198
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40176: LD_ADDR_VAR 0 10
40180: PUSH
40181: LD_VAR 0 8
40185: PPUSH
40186: LD_VAR 0 11
40190: PPUSH
40191: CALL_OW 74
40195: ST_TO_ADDR
40196: GO 40218
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40198: LD_ADDR_VAR 0 10
40202: PUSH
40203: LD_VAR 0 8
40207: PPUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 74
40217: ST_TO_ADDR
// if not enemy then
40218: LD_VAR 0 10
40222: NOT
40223: IFFALSE 40227
// exit ;
40225: GO 40628
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40227: LD_VAR 0 11
40231: PUSH
40232: LD_VAR 0 11
40236: PPUSH
40237: LD_VAR 0 10
40241: PPUSH
40242: CALL_OW 296
40246: PUSH
40247: LD_INT 13
40249: GREATER
40250: AND
40251: PUSH
40252: LD_VAR 0 1
40256: PPUSH
40257: LD_VAR 0 10
40261: PPUSH
40262: CALL_OW 296
40266: PUSH
40267: LD_INT 12
40269: GREATER
40270: OR
40271: IFFALSE 40275
// exit ;
40273: GO 40628
// missile := [ 1 ] ;
40275: LD_ADDR_VAR 0 14
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40286: LD_VAR 0 9
40290: PPUSH
40291: LD_VAR 0 12
40295: PPUSH
40296: CALL_OW 325
40300: IFFALSE 40329
// missile := Replace ( missile , missile + 1 , 2 ) ;
40302: LD_ADDR_VAR 0 14
40306: PUSH
40307: LD_VAR 0 14
40311: PPUSH
40312: LD_VAR 0 14
40316: PUSH
40317: LD_INT 1
40319: PLUS
40320: PPUSH
40321: LD_INT 2
40323: PPUSH
40324: CALL_OW 1
40328: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40329: LD_VAR 0 9
40333: PPUSH
40334: LD_VAR 0 13
40338: PPUSH
40339: CALL_OW 325
40343: PUSH
40344: LD_VAR 0 10
40348: PPUSH
40349: CALL_OW 255
40353: PPUSH
40354: LD_VAR 0 13
40358: PPUSH
40359: CALL_OW 325
40363: NOT
40364: AND
40365: IFFALSE 40394
// missile := Replace ( missile , missile + 1 , 3 ) ;
40367: LD_ADDR_VAR 0 14
40371: PUSH
40372: LD_VAR 0 14
40376: PPUSH
40377: LD_VAR 0 14
40381: PUSH
40382: LD_INT 1
40384: PLUS
40385: PPUSH
40386: LD_INT 3
40388: PPUSH
40389: CALL_OW 1
40393: ST_TO_ADDR
// if missile < 2 then
40394: LD_VAR 0 14
40398: PUSH
40399: LD_INT 2
40401: LESS
40402: IFFALSE 40406
// exit ;
40404: GO 40628
// x := GetX ( enemy ) ;
40406: LD_ADDR_VAR 0 4
40410: PUSH
40411: LD_VAR 0 10
40415: PPUSH
40416: CALL_OW 250
40420: ST_TO_ADDR
// y := GetY ( enemy ) ;
40421: LD_ADDR_VAR 0 5
40425: PUSH
40426: LD_VAR 0 10
40430: PPUSH
40431: CALL_OW 251
40435: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40436: LD_ADDR_VAR 0 6
40440: PUSH
40441: LD_VAR 0 4
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PPUSH
40450: LD_INT 1
40452: PPUSH
40453: CALL_OW 12
40457: PLUS
40458: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40459: LD_ADDR_VAR 0 7
40463: PUSH
40464: LD_VAR 0 5
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PPUSH
40473: LD_INT 1
40475: PPUSH
40476: CALL_OW 12
40480: PLUS
40481: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40482: LD_VAR 0 6
40486: PPUSH
40487: LD_VAR 0 7
40491: PPUSH
40492: CALL_OW 488
40496: NOT
40497: IFFALSE 40519
// begin _x := x ;
40499: LD_ADDR_VAR 0 6
40503: PUSH
40504: LD_VAR 0 4
40508: ST_TO_ADDR
// _y := y ;
40509: LD_ADDR_VAR 0 7
40513: PUSH
40514: LD_VAR 0 5
40518: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40519: LD_ADDR_VAR 0 3
40523: PUSH
40524: LD_INT 1
40526: PPUSH
40527: LD_VAR 0 14
40531: PPUSH
40532: CALL_OW 12
40536: ST_TO_ADDR
// case i of 1 :
40537: LD_VAR 0 3
40541: PUSH
40542: LD_INT 1
40544: DOUBLE
40545: EQUAL
40546: IFTRUE 40550
40548: GO 40567
40550: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40551: LD_VAR 0 1
40555: PPUSH
40556: LD_VAR 0 10
40560: PPUSH
40561: CALL_OW 115
40565: GO 40628
40567: LD_INT 2
40569: DOUBLE
40570: EQUAL
40571: IFTRUE 40575
40573: GO 40597
40575: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40576: LD_VAR 0 1
40580: PPUSH
40581: LD_VAR 0 6
40585: PPUSH
40586: LD_VAR 0 7
40590: PPUSH
40591: CALL_OW 153
40595: GO 40628
40597: LD_INT 3
40599: DOUBLE
40600: EQUAL
40601: IFTRUE 40605
40603: GO 40627
40605: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40606: LD_VAR 0 1
40610: PPUSH
40611: LD_VAR 0 6
40615: PPUSH
40616: LD_VAR 0 7
40620: PPUSH
40621: CALL_OW 154
40625: GO 40628
40627: POP
// end ;
40628: LD_VAR 0 2
40632: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40633: LD_INT 0
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
// if not unit or not building then
40641: LD_VAR 0 1
40645: NOT
40646: PUSH
40647: LD_VAR 0 2
40651: NOT
40652: OR
40653: IFFALSE 40657
// exit ;
40655: GO 40815
// x := GetX ( building ) ;
40657: LD_ADDR_VAR 0 5
40661: PUSH
40662: LD_VAR 0 2
40666: PPUSH
40667: CALL_OW 250
40671: ST_TO_ADDR
// y := GetY ( building ) ;
40672: LD_ADDR_VAR 0 6
40676: PUSH
40677: LD_VAR 0 2
40681: PPUSH
40682: CALL_OW 251
40686: ST_TO_ADDR
// for i = 0 to 5 do
40687: LD_ADDR_VAR 0 4
40691: PUSH
40692: DOUBLE
40693: LD_INT 0
40695: DEC
40696: ST_TO_ADDR
40697: LD_INT 5
40699: PUSH
40700: FOR_TO
40701: IFFALSE 40813
// begin _x := ShiftX ( x , i , 3 ) ;
40703: LD_ADDR_VAR 0 7
40707: PUSH
40708: LD_VAR 0 5
40712: PPUSH
40713: LD_VAR 0 4
40717: PPUSH
40718: LD_INT 3
40720: PPUSH
40721: CALL_OW 272
40725: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40726: LD_ADDR_VAR 0 8
40730: PUSH
40731: LD_VAR 0 6
40735: PPUSH
40736: LD_VAR 0 4
40740: PPUSH
40741: LD_INT 3
40743: PPUSH
40744: CALL_OW 273
40748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40749: LD_VAR 0 7
40753: PPUSH
40754: LD_VAR 0 8
40758: PPUSH
40759: CALL_OW 488
40763: NOT
40764: IFFALSE 40768
// continue ;
40766: GO 40700
// if HexInfo ( _x , _y ) = 0 then
40768: LD_VAR 0 7
40772: PPUSH
40773: LD_VAR 0 8
40777: PPUSH
40778: CALL_OW 428
40782: PUSH
40783: LD_INT 0
40785: EQUAL
40786: IFFALSE 40811
// begin ComMoveXY ( unit , _x , _y ) ;
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_VAR 0 7
40797: PPUSH
40798: LD_VAR 0 8
40802: PPUSH
40803: CALL_OW 111
// exit ;
40807: POP
40808: POP
40809: GO 40815
// end ; end ;
40811: GO 40700
40813: POP
40814: POP
// end ;
40815: LD_VAR 0 3
40819: RET
// export function ScanBase ( side , base_area ) ; begin
40820: LD_INT 0
40822: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40823: LD_ADDR_VAR 0 3
40827: PUSH
40828: LD_VAR 0 2
40832: PPUSH
40833: LD_INT 81
40835: PUSH
40836: LD_VAR 0 1
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PPUSH
40845: CALL_OW 70
40849: ST_TO_ADDR
// end ;
40850: LD_VAR 0 3
40854: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40855: LD_INT 0
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
// result := false ;
40861: LD_ADDR_VAR 0 2
40865: PUSH
40866: LD_INT 0
40868: ST_TO_ADDR
// side := GetSide ( unit ) ;
40869: LD_ADDR_VAR 0 3
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 255
40883: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40884: LD_ADDR_VAR 0 4
40888: PUSH
40889: LD_VAR 0 1
40893: PPUSH
40894: CALL_OW 248
40898: ST_TO_ADDR
// case nat of 1 :
40899: LD_VAR 0 4
40903: PUSH
40904: LD_INT 1
40906: DOUBLE
40907: EQUAL
40908: IFTRUE 40912
40910: GO 40923
40912: POP
// tech := tech_lassight ; 2 :
40913: LD_ADDR_VAR 0 5
40917: PUSH
40918: LD_INT 12
40920: ST_TO_ADDR
40921: GO 40962
40923: LD_INT 2
40925: DOUBLE
40926: EQUAL
40927: IFTRUE 40931
40929: GO 40942
40931: POP
// tech := tech_mortar ; 3 :
40932: LD_ADDR_VAR 0 5
40936: PUSH
40937: LD_INT 41
40939: ST_TO_ADDR
40940: GO 40962
40942: LD_INT 3
40944: DOUBLE
40945: EQUAL
40946: IFTRUE 40950
40948: GO 40961
40950: POP
// tech := tech_bazooka ; end ;
40951: LD_ADDR_VAR 0 5
40955: PUSH
40956: LD_INT 44
40958: ST_TO_ADDR
40959: GO 40962
40961: POP
// if Researched ( side , tech ) then
40962: LD_VAR 0 3
40966: PPUSH
40967: LD_VAR 0 5
40971: PPUSH
40972: CALL_OW 325
40976: IFFALSE 41003
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40978: LD_ADDR_VAR 0 2
40982: PUSH
40983: LD_INT 5
40985: PUSH
40986: LD_INT 8
40988: PUSH
40989: LD_INT 9
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: PUSH
40997: LD_VAR 0 4
41001: ARRAY
41002: ST_TO_ADDR
// end ;
41003: LD_VAR 0 2
41007: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41008: LD_INT 0
41010: PPUSH
41011: PPUSH
41012: PPUSH
// if not mines then
41013: LD_VAR 0 2
41017: NOT
41018: IFFALSE 41022
// exit ;
41020: GO 41166
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41022: LD_ADDR_VAR 0 5
41026: PUSH
41027: LD_INT 81
41029: PUSH
41030: LD_VAR 0 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 3
41041: PUSH
41042: LD_INT 21
41044: PUSH
41045: LD_INT 3
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PPUSH
41060: CALL_OW 69
41064: ST_TO_ADDR
// for i in mines do
41065: LD_ADDR_VAR 0 4
41069: PUSH
41070: LD_VAR 0 2
41074: PUSH
41075: FOR_IN
41076: IFFALSE 41164
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41078: LD_VAR 0 4
41082: PUSH
41083: LD_INT 1
41085: ARRAY
41086: PPUSH
41087: LD_VAR 0 4
41091: PUSH
41092: LD_INT 2
41094: ARRAY
41095: PPUSH
41096: CALL_OW 458
41100: NOT
41101: IFFALSE 41105
// continue ;
41103: GO 41075
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41105: LD_VAR 0 4
41109: PUSH
41110: LD_INT 1
41112: ARRAY
41113: PPUSH
41114: LD_VAR 0 4
41118: PUSH
41119: LD_INT 2
41121: ARRAY
41122: PPUSH
41123: CALL_OW 428
41127: PUSH
41128: LD_VAR 0 5
41132: IN
41133: IFFALSE 41162
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41135: LD_VAR 0 4
41139: PUSH
41140: LD_INT 1
41142: ARRAY
41143: PPUSH
41144: LD_VAR 0 4
41148: PUSH
41149: LD_INT 2
41151: ARRAY
41152: PPUSH
41153: LD_VAR 0 1
41157: PPUSH
41158: CALL_OW 456
// end ;
41162: GO 41075
41164: POP
41165: POP
// end ;
41166: LD_VAR 0 3
41170: RET
// export function Count ( array ) ; var i ; begin
41171: LD_INT 0
41173: PPUSH
41174: PPUSH
// result := 0 ;
41175: LD_ADDR_VAR 0 2
41179: PUSH
41180: LD_INT 0
41182: ST_TO_ADDR
// for i in array do
41183: LD_ADDR_VAR 0 3
41187: PUSH
41188: LD_VAR 0 1
41192: PUSH
41193: FOR_IN
41194: IFFALSE 41218
// if i then
41196: LD_VAR 0 3
41200: IFFALSE 41216
// result := result + 1 ;
41202: LD_ADDR_VAR 0 2
41206: PUSH
41207: LD_VAR 0 2
41211: PUSH
41212: LD_INT 1
41214: PLUS
41215: ST_TO_ADDR
41216: GO 41193
41218: POP
41219: POP
// end ;
41220: LD_VAR 0 2
41224: RET
// export function IsEmpty ( building ) ; begin
41225: LD_INT 0
41227: PPUSH
// if not building then
41228: LD_VAR 0 1
41232: NOT
41233: IFFALSE 41237
// exit ;
41235: GO 41280
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41237: LD_ADDR_VAR 0 2
41241: PUSH
41242: LD_VAR 0 1
41246: PUSH
41247: LD_INT 22
41249: PUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: CALL_OW 255
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 58
41266: PUSH
41267: EMPTY
41268: LIST
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PPUSH
41274: CALL_OW 69
41278: IN
41279: ST_TO_ADDR
// end ;
41280: LD_VAR 0 2
41284: RET
// export function IsNotFull ( building ) ; var places ; begin
41285: LD_INT 0
41287: PPUSH
41288: PPUSH
// if not building then
41289: LD_VAR 0 1
41293: NOT
41294: IFFALSE 41298
// exit ;
41296: GO 41469
// result := false ;
41298: LD_ADDR_VAR 0 2
41302: PUSH
41303: LD_INT 0
41305: ST_TO_ADDR
// places := 0 ;
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_INT 0
41313: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41314: LD_VAR 0 1
41318: PPUSH
41319: CALL_OW 266
41323: PUSH
41324: LD_INT 0
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41386
41330: LD_INT 1
41332: DOUBLE
41333: EQUAL
41334: IFTRUE 41386
41336: LD_INT 6
41338: DOUBLE
41339: EQUAL
41340: IFTRUE 41386
41342: LD_INT 7
41344: DOUBLE
41345: EQUAL
41346: IFTRUE 41386
41348: LD_INT 8
41350: DOUBLE
41351: EQUAL
41352: IFTRUE 41386
41354: LD_INT 4
41356: DOUBLE
41357: EQUAL
41358: IFTRUE 41386
41360: LD_INT 5
41362: DOUBLE
41363: EQUAL
41364: IFTRUE 41386
41366: LD_INT 2
41368: DOUBLE
41369: EQUAL
41370: IFTRUE 41386
41372: LD_INT 3
41374: DOUBLE
41375: EQUAL
41376: IFTRUE 41386
41378: LD_INT 35
41380: DOUBLE
41381: EQUAL
41382: IFTRUE 41386
41384: GO 41397
41386: POP
// places := 6 ; b_bunker , b_breastwork :
41387: LD_ADDR_VAR 0 3
41391: PUSH
41392: LD_INT 6
41394: ST_TO_ADDR
41395: GO 41442
41397: LD_INT 32
41399: DOUBLE
41400: EQUAL
41401: IFTRUE 41411
41403: LD_INT 31
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 41422
41411: POP
// places := 1 ; b_control_tower :
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_INT 1
41419: ST_TO_ADDR
41420: GO 41442
41422: LD_INT 36
41424: DOUBLE
41425: EQUAL
41426: IFTRUE 41430
41428: GO 41441
41430: POP
// places := 3 ; end ;
41431: LD_ADDR_VAR 0 3
41435: PUSH
41436: LD_INT 3
41438: ST_TO_ADDR
41439: GO 41442
41441: POP
// if places then
41442: LD_VAR 0 3
41446: IFFALSE 41469
// result := UnitsInside ( building ) < places ;
41448: LD_ADDR_VAR 0 2
41452: PUSH
41453: LD_VAR 0 1
41457: PPUSH
41458: CALL_OW 313
41462: PUSH
41463: LD_VAR 0 3
41467: LESS
41468: ST_TO_ADDR
// end ;
41469: LD_VAR 0 2
41473: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41474: LD_INT 0
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
// tmp := [ ] ;
41480: LD_ADDR_VAR 0 3
41484: PUSH
41485: EMPTY
41486: ST_TO_ADDR
// list := [ ] ;
41487: LD_ADDR_VAR 0 5
41491: PUSH
41492: EMPTY
41493: ST_TO_ADDR
// for i = 16 to 25 do
41494: LD_ADDR_VAR 0 4
41498: PUSH
41499: DOUBLE
41500: LD_INT 16
41502: DEC
41503: ST_TO_ADDR
41504: LD_INT 25
41506: PUSH
41507: FOR_TO
41508: IFFALSE 41581
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41510: LD_ADDR_VAR 0 3
41514: PUSH
41515: LD_VAR 0 3
41519: PUSH
41520: LD_INT 22
41522: PUSH
41523: LD_VAR 0 1
41527: PPUSH
41528: CALL_OW 255
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 91
41539: PUSH
41540: LD_VAR 0 1
41544: PUSH
41545: LD_INT 6
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 30
41555: PUSH
41556: LD_VAR 0 4
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: PUSH
41570: EMPTY
41571: LIST
41572: PPUSH
41573: CALL_OW 69
41577: ADD
41578: ST_TO_ADDR
41579: GO 41507
41581: POP
41582: POP
// for i = 1 to tmp do
41583: LD_ADDR_VAR 0 4
41587: PUSH
41588: DOUBLE
41589: LD_INT 1
41591: DEC
41592: ST_TO_ADDR
41593: LD_VAR 0 3
41597: PUSH
41598: FOR_TO
41599: IFFALSE 41687
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41601: LD_ADDR_VAR 0 5
41605: PUSH
41606: LD_VAR 0 5
41610: PUSH
41611: LD_VAR 0 3
41615: PUSH
41616: LD_VAR 0 4
41620: ARRAY
41621: PPUSH
41622: CALL_OW 266
41626: PUSH
41627: LD_VAR 0 3
41631: PUSH
41632: LD_VAR 0 4
41636: ARRAY
41637: PPUSH
41638: CALL_OW 250
41642: PUSH
41643: LD_VAR 0 3
41647: PUSH
41648: LD_VAR 0 4
41652: ARRAY
41653: PPUSH
41654: CALL_OW 251
41658: PUSH
41659: LD_VAR 0 3
41663: PUSH
41664: LD_VAR 0 4
41668: ARRAY
41669: PPUSH
41670: CALL_OW 254
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: ADD
41684: ST_TO_ADDR
41685: GO 41598
41687: POP
41688: POP
// result := list ;
41689: LD_ADDR_VAR 0 2
41693: PUSH
41694: LD_VAR 0 5
41698: ST_TO_ADDR
// end ;
41699: LD_VAR 0 2
41703: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41704: LD_INT 0
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
// if not factory then
41713: LD_VAR 0 1
41717: NOT
41718: IFFALSE 41722
// exit ;
41720: GO 42315
// if control = control_apeman then
41722: LD_VAR 0 4
41726: PUSH
41727: LD_INT 5
41729: EQUAL
41730: IFFALSE 41839
// begin tmp := UnitsInside ( factory ) ;
41732: LD_ADDR_VAR 0 8
41736: PUSH
41737: LD_VAR 0 1
41741: PPUSH
41742: CALL_OW 313
41746: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41747: LD_VAR 0 8
41751: PPUSH
41752: LD_INT 25
41754: PUSH
41755: LD_INT 12
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PPUSH
41762: CALL_OW 72
41766: NOT
41767: IFFALSE 41777
// control := control_manual ;
41769: LD_ADDR_VAR 0 4
41773: PUSH
41774: LD_INT 1
41776: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41777: LD_ADDR_VAR 0 8
41781: PUSH
41782: LD_VAR 0 1
41786: PPUSH
41787: CALL 41474 0 1
41791: ST_TO_ADDR
// if tmp then
41792: LD_VAR 0 8
41796: IFFALSE 41839
// begin for i in tmp do
41798: LD_ADDR_VAR 0 7
41802: PUSH
41803: LD_VAR 0 8
41807: PUSH
41808: FOR_IN
41809: IFFALSE 41837
// if i [ 1 ] = b_ext_radio then
41811: LD_VAR 0 7
41815: PUSH
41816: LD_INT 1
41818: ARRAY
41819: PUSH
41820: LD_INT 22
41822: EQUAL
41823: IFFALSE 41835
// begin control := control_remote ;
41825: LD_ADDR_VAR 0 4
41829: PUSH
41830: LD_INT 2
41832: ST_TO_ADDR
// break ;
41833: GO 41837
// end ;
41835: GO 41808
41837: POP
41838: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41839: LD_VAR 0 1
41843: PPUSH
41844: LD_VAR 0 2
41848: PPUSH
41849: LD_VAR 0 3
41853: PPUSH
41854: LD_VAR 0 4
41858: PPUSH
41859: LD_VAR 0 5
41863: PPUSH
41864: CALL_OW 448
41868: IFFALSE 41903
// begin result := [ chassis , engine , control , weapon ] ;
41870: LD_ADDR_VAR 0 6
41874: PUSH
41875: LD_VAR 0 2
41879: PUSH
41880: LD_VAR 0 3
41884: PUSH
41885: LD_VAR 0 4
41889: PUSH
41890: LD_VAR 0 5
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: ST_TO_ADDR
// exit ;
41901: GO 42315
// end ; _chassis := AvailableChassisList ( factory ) ;
41903: LD_ADDR_VAR 0 9
41907: PUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: CALL_OW 475
41917: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41918: LD_ADDR_VAR 0 11
41922: PUSH
41923: LD_VAR 0 1
41927: PPUSH
41928: CALL_OW 476
41932: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41933: LD_ADDR_VAR 0 12
41937: PUSH
41938: LD_VAR 0 1
41942: PPUSH
41943: CALL_OW 477
41947: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41948: LD_ADDR_VAR 0 10
41952: PUSH
41953: LD_VAR 0 1
41957: PPUSH
41958: CALL_OW 478
41962: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41963: LD_VAR 0 9
41967: NOT
41968: PUSH
41969: LD_VAR 0 11
41973: NOT
41974: OR
41975: PUSH
41976: LD_VAR 0 12
41980: NOT
41981: OR
41982: PUSH
41983: LD_VAR 0 10
41987: NOT
41988: OR
41989: IFFALSE 42024
// begin result := [ chassis , engine , control , weapon ] ;
41991: LD_ADDR_VAR 0 6
41995: PUSH
41996: LD_VAR 0 2
42000: PUSH
42001: LD_VAR 0 3
42005: PUSH
42006: LD_VAR 0 4
42010: PUSH
42011: LD_VAR 0 5
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
// exit ;
42022: GO 42315
// end ; if not chassis in _chassis then
42024: LD_VAR 0 2
42028: PUSH
42029: LD_VAR 0 9
42033: IN
42034: NOT
42035: IFFALSE 42061
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42037: LD_ADDR_VAR 0 2
42041: PUSH
42042: LD_VAR 0 9
42046: PUSH
42047: LD_INT 1
42049: PPUSH
42050: LD_VAR 0 9
42054: PPUSH
42055: CALL_OW 12
42059: ARRAY
42060: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42061: LD_VAR 0 2
42065: PPUSH
42066: LD_VAR 0 3
42070: PPUSH
42071: CALL 42320 0 2
42075: NOT
42076: IFFALSE 42135
// repeat engine := _engine [ 1 ] ;
42078: LD_ADDR_VAR 0 3
42082: PUSH
42083: LD_VAR 0 11
42087: PUSH
42088: LD_INT 1
42090: ARRAY
42091: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42092: LD_ADDR_VAR 0 11
42096: PUSH
42097: LD_VAR 0 11
42101: PPUSH
42102: LD_INT 1
42104: PPUSH
42105: CALL_OW 3
42109: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42110: LD_VAR 0 2
42114: PPUSH
42115: LD_VAR 0 3
42119: PPUSH
42120: CALL 42320 0 2
42124: PUSH
42125: LD_VAR 0 11
42129: PUSH
42130: EMPTY
42131: EQUAL
42132: OR
42133: IFFALSE 42078
// if not control in _control then
42135: LD_VAR 0 4
42139: PUSH
42140: LD_VAR 0 12
42144: IN
42145: NOT
42146: IFFALSE 42172
// control := _control [ rand ( 1 , _control ) ] ;
42148: LD_ADDR_VAR 0 4
42152: PUSH
42153: LD_VAR 0 12
42157: PUSH
42158: LD_INT 1
42160: PPUSH
42161: LD_VAR 0 12
42165: PPUSH
42166: CALL_OW 12
42170: ARRAY
42171: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42172: LD_VAR 0 2
42176: PPUSH
42177: LD_VAR 0 5
42181: PPUSH
42182: CALL 42540 0 2
42186: NOT
42187: IFFALSE 42246
// repeat weapon := _weapon [ 1 ] ;
42189: LD_ADDR_VAR 0 5
42193: PUSH
42194: LD_VAR 0 10
42198: PUSH
42199: LD_INT 1
42201: ARRAY
42202: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42203: LD_ADDR_VAR 0 10
42207: PUSH
42208: LD_VAR 0 10
42212: PPUSH
42213: LD_INT 1
42215: PPUSH
42216: CALL_OW 3
42220: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42221: LD_VAR 0 2
42225: PPUSH
42226: LD_VAR 0 5
42230: PPUSH
42231: CALL 42540 0 2
42235: PUSH
42236: LD_VAR 0 10
42240: PUSH
42241: EMPTY
42242: EQUAL
42243: OR
42244: IFFALSE 42189
// result := [ ] ;
42246: LD_ADDR_VAR 0 6
42250: PUSH
42251: EMPTY
42252: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42253: LD_VAR 0 1
42257: PPUSH
42258: LD_VAR 0 2
42262: PPUSH
42263: LD_VAR 0 3
42267: PPUSH
42268: LD_VAR 0 4
42272: PPUSH
42273: LD_VAR 0 5
42277: PPUSH
42278: CALL_OW 448
42282: IFFALSE 42315
// result := [ chassis , engine , control , weapon ] ;
42284: LD_ADDR_VAR 0 6
42288: PUSH
42289: LD_VAR 0 2
42293: PUSH
42294: LD_VAR 0 3
42298: PUSH
42299: LD_VAR 0 4
42303: PUSH
42304: LD_VAR 0 5
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: ST_TO_ADDR
// end ;
42315: LD_VAR 0 6
42319: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42320: LD_INT 0
42322: PPUSH
// if not chassis or not engine then
42323: LD_VAR 0 1
42327: NOT
42328: PUSH
42329: LD_VAR 0 2
42333: NOT
42334: OR
42335: IFFALSE 42339
// exit ;
42337: GO 42535
// case engine of engine_solar :
42339: LD_VAR 0 2
42343: PUSH
42344: LD_INT 2
42346: DOUBLE
42347: EQUAL
42348: IFTRUE 42352
42350: GO 42390
42352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42353: LD_ADDR_VAR 0 3
42357: PUSH
42358: LD_INT 11
42360: PUSH
42361: LD_INT 12
42363: PUSH
42364: LD_INT 13
42366: PUSH
42367: LD_INT 14
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
42388: GO 42519
42390: LD_INT 1
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 42460
42398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_INT 11
42406: PUSH
42407: LD_INT 12
42409: PUSH
42410: LD_INT 13
42412: PUSH
42413: LD_INT 14
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: LD_INT 4
42427: PUSH
42428: LD_INT 5
42430: PUSH
42431: LD_INT 21
42433: PUSH
42434: LD_INT 23
42436: PUSH
42437: LD_INT 22
42439: PUSH
42440: LD_INT 24
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: ST_TO_ADDR
42458: GO 42519
42460: LD_INT 3
42462: DOUBLE
42463: EQUAL
42464: IFTRUE 42468
42466: GO 42518
42468: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42469: LD_ADDR_VAR 0 3
42473: PUSH
42474: LD_INT 13
42476: PUSH
42477: LD_INT 14
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: LD_INT 4
42488: PUSH
42489: LD_INT 5
42491: PUSH
42492: LD_INT 21
42494: PUSH
42495: LD_INT 22
42497: PUSH
42498: LD_INT 23
42500: PUSH
42501: LD_INT 24
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: ST_TO_ADDR
42516: GO 42519
42518: POP
// result := ( chassis in result ) ;
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_VAR 0 1
42528: PUSH
42529: LD_VAR 0 3
42533: IN
42534: ST_TO_ADDR
// end ;
42535: LD_VAR 0 3
42539: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42540: LD_INT 0
42542: PPUSH
// if not chassis or not weapon then
42543: LD_VAR 0 1
42547: NOT
42548: PUSH
42549: LD_VAR 0 2
42553: NOT
42554: OR
42555: IFFALSE 42559
// exit ;
42557: GO 43619
// case weapon of us_machine_gun :
42559: LD_VAR 0 2
42563: PUSH
42564: LD_INT 2
42566: DOUBLE
42567: EQUAL
42568: IFTRUE 42572
42570: GO 42602
42572: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42573: LD_ADDR_VAR 0 3
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: LD_INT 4
42589: PUSH
42590: LD_INT 5
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
42600: GO 43603
42602: LD_INT 3
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42640
42610: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: LD_INT 4
42627: PUSH
42628: LD_INT 5
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: ST_TO_ADDR
42638: GO 43603
42640: LD_INT 11
42642: DOUBLE
42643: EQUAL
42644: IFTRUE 42648
42646: GO 42678
42648: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42649: LD_ADDR_VAR 0 3
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 3
42662: PUSH
42663: LD_INT 4
42665: PUSH
42666: LD_INT 5
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: ST_TO_ADDR
42676: GO 43603
42678: LD_INT 4
42680: DOUBLE
42681: EQUAL
42682: IFTRUE 42686
42684: GO 42712
42686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: LD_INT 4
42700: PUSH
42701: LD_INT 5
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
42710: GO 43603
42712: LD_INT 5
42714: DOUBLE
42715: EQUAL
42716: IFTRUE 42720
42718: GO 42746
42720: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42721: LD_ADDR_VAR 0 3
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: LD_INT 4
42734: PUSH
42735: LD_INT 5
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: ST_TO_ADDR
42744: GO 43603
42746: LD_INT 9
42748: DOUBLE
42749: EQUAL
42750: IFTRUE 42754
42752: GO 42780
42754: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42755: LD_ADDR_VAR 0 3
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: LD_INT 4
42768: PUSH
42769: LD_INT 5
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: ST_TO_ADDR
42778: GO 43603
42780: LD_INT 7
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42788
42786: GO 42814
42788: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42789: LD_ADDR_VAR 0 3
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: LD_INT 4
42802: PUSH
42803: LD_INT 5
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: ST_TO_ADDR
42812: GO 43603
42814: LD_INT 12
42816: DOUBLE
42817: EQUAL
42818: IFTRUE 42822
42820: GO 42848
42822: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42823: LD_ADDR_VAR 0 3
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 3
42833: PUSH
42834: LD_INT 4
42836: PUSH
42837: LD_INT 5
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: ST_TO_ADDR
42846: GO 43603
42848: LD_INT 13
42850: DOUBLE
42851: EQUAL
42852: IFTRUE 42856
42854: GO 42882
42856: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42857: LD_ADDR_VAR 0 3
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: LD_INT 3
42867: PUSH
42868: LD_INT 4
42870: PUSH
42871: LD_INT 5
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
42880: GO 43603
42882: LD_INT 14
42884: DOUBLE
42885: EQUAL
42886: IFTRUE 42890
42888: GO 42908
42890: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42891: LD_ADDR_VAR 0 3
42895: PUSH
42896: LD_INT 4
42898: PUSH
42899: LD_INT 5
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: ST_TO_ADDR
42906: GO 43603
42908: LD_INT 6
42910: DOUBLE
42911: EQUAL
42912: IFTRUE 42916
42914: GO 42934
42916: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42917: LD_ADDR_VAR 0 3
42921: PUSH
42922: LD_INT 4
42924: PUSH
42925: LD_INT 5
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: ST_TO_ADDR
42932: GO 43603
42934: LD_INT 10
42936: DOUBLE
42937: EQUAL
42938: IFTRUE 42942
42940: GO 42960
42942: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42943: LD_ADDR_VAR 0 3
42947: PUSH
42948: LD_INT 4
42950: PUSH
42951: LD_INT 5
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: ST_TO_ADDR
42958: GO 43603
42960: LD_INT 22
42962: DOUBLE
42963: EQUAL
42964: IFTRUE 42968
42966: GO 42994
42968: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42969: LD_ADDR_VAR 0 3
42973: PUSH
42974: LD_INT 11
42976: PUSH
42977: LD_INT 12
42979: PUSH
42980: LD_INT 13
42982: PUSH
42983: LD_INT 14
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
42992: GO 43603
42994: LD_INT 23
42996: DOUBLE
42997: EQUAL
42998: IFTRUE 43002
43000: GO 43028
43002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43003: LD_ADDR_VAR 0 3
43007: PUSH
43008: LD_INT 11
43010: PUSH
43011: LD_INT 12
43013: PUSH
43014: LD_INT 13
43016: PUSH
43017: LD_INT 14
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
43026: GO 43603
43028: LD_INT 24
43030: DOUBLE
43031: EQUAL
43032: IFTRUE 43036
43034: GO 43062
43036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43037: LD_ADDR_VAR 0 3
43041: PUSH
43042: LD_INT 11
43044: PUSH
43045: LD_INT 12
43047: PUSH
43048: LD_INT 13
43050: PUSH
43051: LD_INT 14
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
43060: GO 43603
43062: LD_INT 30
43064: DOUBLE
43065: EQUAL
43066: IFTRUE 43070
43068: GO 43096
43070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43071: LD_ADDR_VAR 0 3
43075: PUSH
43076: LD_INT 11
43078: PUSH
43079: LD_INT 12
43081: PUSH
43082: LD_INT 13
43084: PUSH
43085: LD_INT 14
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
43094: GO 43603
43096: LD_INT 25
43098: DOUBLE
43099: EQUAL
43100: IFTRUE 43104
43102: GO 43122
43104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43105: LD_ADDR_VAR 0 3
43109: PUSH
43110: LD_INT 13
43112: PUSH
43113: LD_INT 14
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: ST_TO_ADDR
43120: GO 43603
43122: LD_INT 27
43124: DOUBLE
43125: EQUAL
43126: IFTRUE 43130
43128: GO 43148
43130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43131: LD_ADDR_VAR 0 3
43135: PUSH
43136: LD_INT 13
43138: PUSH
43139: LD_INT 14
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: ST_TO_ADDR
43146: GO 43603
43148: LD_INT 92
43150: DOUBLE
43151: EQUAL
43152: IFTRUE 43156
43154: GO 43182
43156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43157: LD_ADDR_VAR 0 3
43161: PUSH
43162: LD_INT 11
43164: PUSH
43165: LD_INT 12
43167: PUSH
43168: LD_INT 13
43170: PUSH
43171: LD_INT 14
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: ST_TO_ADDR
43180: GO 43603
43182: LD_INT 28
43184: DOUBLE
43185: EQUAL
43186: IFTRUE 43190
43188: GO 43208
43190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43191: LD_ADDR_VAR 0 3
43195: PUSH
43196: LD_INT 13
43198: PUSH
43199: LD_INT 14
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: ST_TO_ADDR
43206: GO 43603
43208: LD_INT 29
43210: DOUBLE
43211: EQUAL
43212: IFTRUE 43216
43214: GO 43234
43216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_INT 13
43224: PUSH
43225: LD_INT 14
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: ST_TO_ADDR
43232: GO 43603
43234: LD_INT 31
43236: DOUBLE
43237: EQUAL
43238: IFTRUE 43242
43240: GO 43260
43242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43243: LD_ADDR_VAR 0 3
43247: PUSH
43248: LD_INT 13
43250: PUSH
43251: LD_INT 14
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: ST_TO_ADDR
43258: GO 43603
43260: LD_INT 26
43262: DOUBLE
43263: EQUAL
43264: IFTRUE 43268
43266: GO 43286
43268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_INT 13
43276: PUSH
43277: LD_INT 14
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: ST_TO_ADDR
43284: GO 43603
43286: LD_INT 42
43288: DOUBLE
43289: EQUAL
43290: IFTRUE 43294
43292: GO 43320
43294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43295: LD_ADDR_VAR 0 3
43299: PUSH
43300: LD_INT 21
43302: PUSH
43303: LD_INT 22
43305: PUSH
43306: LD_INT 23
43308: PUSH
43309: LD_INT 24
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: ST_TO_ADDR
43318: GO 43603
43320: LD_INT 43
43322: DOUBLE
43323: EQUAL
43324: IFTRUE 43328
43326: GO 43354
43328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43329: LD_ADDR_VAR 0 3
43333: PUSH
43334: LD_INT 21
43336: PUSH
43337: LD_INT 22
43339: PUSH
43340: LD_INT 23
43342: PUSH
43343: LD_INT 24
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: ST_TO_ADDR
43352: GO 43603
43354: LD_INT 44
43356: DOUBLE
43357: EQUAL
43358: IFTRUE 43362
43360: GO 43388
43362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43363: LD_ADDR_VAR 0 3
43367: PUSH
43368: LD_INT 21
43370: PUSH
43371: LD_INT 22
43373: PUSH
43374: LD_INT 23
43376: PUSH
43377: LD_INT 24
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: ST_TO_ADDR
43386: GO 43603
43388: LD_INT 45
43390: DOUBLE
43391: EQUAL
43392: IFTRUE 43396
43394: GO 43422
43396: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43397: LD_ADDR_VAR 0 3
43401: PUSH
43402: LD_INT 21
43404: PUSH
43405: LD_INT 22
43407: PUSH
43408: LD_INT 23
43410: PUSH
43411: LD_INT 24
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
43420: GO 43603
43422: LD_INT 49
43424: DOUBLE
43425: EQUAL
43426: IFTRUE 43430
43428: GO 43456
43430: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43431: LD_ADDR_VAR 0 3
43435: PUSH
43436: LD_INT 21
43438: PUSH
43439: LD_INT 22
43441: PUSH
43442: LD_INT 23
43444: PUSH
43445: LD_INT 24
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
43454: GO 43603
43456: LD_INT 51
43458: DOUBLE
43459: EQUAL
43460: IFTRUE 43464
43462: GO 43490
43464: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43465: LD_ADDR_VAR 0 3
43469: PUSH
43470: LD_INT 21
43472: PUSH
43473: LD_INT 22
43475: PUSH
43476: LD_INT 23
43478: PUSH
43479: LD_INT 24
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
43488: GO 43603
43490: LD_INT 52
43492: DOUBLE
43493: EQUAL
43494: IFTRUE 43498
43496: GO 43524
43498: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_INT 21
43506: PUSH
43507: LD_INT 22
43509: PUSH
43510: LD_INT 23
43512: PUSH
43513: LD_INT 24
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: ST_TO_ADDR
43522: GO 43603
43524: LD_INT 53
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43532
43530: GO 43550
43532: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: LD_INT 23
43540: PUSH
43541: LD_INT 24
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 43603
43550: LD_INT 46
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43576
43558: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 23
43566: PUSH
43567: LD_INT 24
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: ST_TO_ADDR
43574: GO 43603
43576: LD_INT 47
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43584
43582: GO 43602
43584: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43585: LD_ADDR_VAR 0 3
43589: PUSH
43590: LD_INT 23
43592: PUSH
43593: LD_INT 24
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: ST_TO_ADDR
43600: GO 43603
43602: POP
// result := ( chassis in result ) ;
43603: LD_ADDR_VAR 0 3
43607: PUSH
43608: LD_VAR 0 1
43612: PUSH
43613: LD_VAR 0 3
43617: IN
43618: ST_TO_ADDR
// end ;
43619: LD_VAR 0 3
43623: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43624: LD_INT 0
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
// result := array ;
43633: LD_ADDR_VAR 0 5
43637: PUSH
43638: LD_VAR 0 1
43642: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43643: LD_VAR 0 1
43647: NOT
43648: PUSH
43649: LD_VAR 0 2
43653: NOT
43654: OR
43655: PUSH
43656: LD_VAR 0 3
43660: NOT
43661: OR
43662: PUSH
43663: LD_VAR 0 2
43667: PUSH
43668: LD_VAR 0 1
43672: GREATER
43673: OR
43674: PUSH
43675: LD_VAR 0 3
43679: PUSH
43680: LD_VAR 0 1
43684: GREATER
43685: OR
43686: IFFALSE 43690
// exit ;
43688: GO 43986
// if direction then
43690: LD_VAR 0 4
43694: IFFALSE 43758
// begin d := 1 ;
43696: LD_ADDR_VAR 0 9
43700: PUSH
43701: LD_INT 1
43703: ST_TO_ADDR
// if i_from > i_to then
43704: LD_VAR 0 2
43708: PUSH
43709: LD_VAR 0 3
43713: GREATER
43714: IFFALSE 43740
// length := ( array - i_from ) + i_to else
43716: LD_ADDR_VAR 0 11
43720: PUSH
43721: LD_VAR 0 1
43725: PUSH
43726: LD_VAR 0 2
43730: MINUS
43731: PUSH
43732: LD_VAR 0 3
43736: PLUS
43737: ST_TO_ADDR
43738: GO 43756
// length := i_to - i_from ;
43740: LD_ADDR_VAR 0 11
43744: PUSH
43745: LD_VAR 0 3
43749: PUSH
43750: LD_VAR 0 2
43754: MINUS
43755: ST_TO_ADDR
// end else
43756: GO 43819
// begin d := - 1 ;
43758: LD_ADDR_VAR 0 9
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: ST_TO_ADDR
// if i_from > i_to then
43767: LD_VAR 0 2
43771: PUSH
43772: LD_VAR 0 3
43776: GREATER
43777: IFFALSE 43797
// length := i_from - i_to else
43779: LD_ADDR_VAR 0 11
43783: PUSH
43784: LD_VAR 0 2
43788: PUSH
43789: LD_VAR 0 3
43793: MINUS
43794: ST_TO_ADDR
43795: GO 43819
// length := ( array - i_to ) + i_from ;
43797: LD_ADDR_VAR 0 11
43801: PUSH
43802: LD_VAR 0 1
43806: PUSH
43807: LD_VAR 0 3
43811: MINUS
43812: PUSH
43813: LD_VAR 0 2
43817: PLUS
43818: ST_TO_ADDR
// end ; if not length then
43819: LD_VAR 0 11
43823: NOT
43824: IFFALSE 43828
// exit ;
43826: GO 43986
// tmp := array ;
43828: LD_ADDR_VAR 0 10
43832: PUSH
43833: LD_VAR 0 1
43837: ST_TO_ADDR
// for i = 1 to length do
43838: LD_ADDR_VAR 0 6
43842: PUSH
43843: DOUBLE
43844: LD_INT 1
43846: DEC
43847: ST_TO_ADDR
43848: LD_VAR 0 11
43852: PUSH
43853: FOR_TO
43854: IFFALSE 43974
// begin for j = 1 to array do
43856: LD_ADDR_VAR 0 7
43860: PUSH
43861: DOUBLE
43862: LD_INT 1
43864: DEC
43865: ST_TO_ADDR
43866: LD_VAR 0 1
43870: PUSH
43871: FOR_TO
43872: IFFALSE 43960
// begin k := j + d ;
43874: LD_ADDR_VAR 0 8
43878: PUSH
43879: LD_VAR 0 7
43883: PUSH
43884: LD_VAR 0 9
43888: PLUS
43889: ST_TO_ADDR
// if k > array then
43890: LD_VAR 0 8
43894: PUSH
43895: LD_VAR 0 1
43899: GREATER
43900: IFFALSE 43910
// k := 1 ;
43902: LD_ADDR_VAR 0 8
43906: PUSH
43907: LD_INT 1
43909: ST_TO_ADDR
// if not k then
43910: LD_VAR 0 8
43914: NOT
43915: IFFALSE 43927
// k := array ;
43917: LD_ADDR_VAR 0 8
43921: PUSH
43922: LD_VAR 0 1
43926: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43927: LD_ADDR_VAR 0 10
43931: PUSH
43932: LD_VAR 0 10
43936: PPUSH
43937: LD_VAR 0 8
43941: PPUSH
43942: LD_VAR 0 1
43946: PUSH
43947: LD_VAR 0 7
43951: ARRAY
43952: PPUSH
43953: CALL_OW 1
43957: ST_TO_ADDR
// end ;
43958: GO 43871
43960: POP
43961: POP
// array := tmp ;
43962: LD_ADDR_VAR 0 1
43966: PUSH
43967: LD_VAR 0 10
43971: ST_TO_ADDR
// end ;
43972: GO 43853
43974: POP
43975: POP
// result := array ;
43976: LD_ADDR_VAR 0 5
43980: PUSH
43981: LD_VAR 0 1
43985: ST_TO_ADDR
// end ;
43986: LD_VAR 0 5
43990: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43991: LD_INT 0
43993: PPUSH
43994: PPUSH
// result := 0 ;
43995: LD_ADDR_VAR 0 3
43999: PUSH
44000: LD_INT 0
44002: ST_TO_ADDR
// if not array or not value in array then
44003: LD_VAR 0 1
44007: NOT
44008: PUSH
44009: LD_VAR 0 2
44013: PUSH
44014: LD_VAR 0 1
44018: IN
44019: NOT
44020: OR
44021: IFFALSE 44025
// exit ;
44023: GO 44079
// for i = 1 to array do
44025: LD_ADDR_VAR 0 4
44029: PUSH
44030: DOUBLE
44031: LD_INT 1
44033: DEC
44034: ST_TO_ADDR
44035: LD_VAR 0 1
44039: PUSH
44040: FOR_TO
44041: IFFALSE 44077
// if value = array [ i ] then
44043: LD_VAR 0 2
44047: PUSH
44048: LD_VAR 0 1
44052: PUSH
44053: LD_VAR 0 4
44057: ARRAY
44058: EQUAL
44059: IFFALSE 44075
// begin result := i ;
44061: LD_ADDR_VAR 0 3
44065: PUSH
44066: LD_VAR 0 4
44070: ST_TO_ADDR
// exit ;
44071: POP
44072: POP
44073: GO 44079
// end ;
44075: GO 44040
44077: POP
44078: POP
// end ;
44079: LD_VAR 0 3
44083: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44084: LD_INT 0
44086: PPUSH
// vc_chassis := chassis ;
44087: LD_ADDR_OWVAR 37
44091: PUSH
44092: LD_VAR 0 1
44096: ST_TO_ADDR
// vc_engine := engine ;
44097: LD_ADDR_OWVAR 39
44101: PUSH
44102: LD_VAR 0 2
44106: ST_TO_ADDR
// vc_control := control ;
44107: LD_ADDR_OWVAR 38
44111: PUSH
44112: LD_VAR 0 3
44116: ST_TO_ADDR
// vc_weapon := weapon ;
44117: LD_ADDR_OWVAR 40
44121: PUSH
44122: LD_VAR 0 4
44126: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44127: LD_ADDR_OWVAR 41
44131: PUSH
44132: LD_VAR 0 5
44136: ST_TO_ADDR
// end ;
44137: LD_VAR 0 6
44141: RET
// export function WantPlant ( unit ) ; var task ; begin
44142: LD_INT 0
44144: PPUSH
44145: PPUSH
// result := false ;
44146: LD_ADDR_VAR 0 2
44150: PUSH
44151: LD_INT 0
44153: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_VAR 0 1
44163: PPUSH
44164: CALL_OW 437
44168: ST_TO_ADDR
// if task then
44169: LD_VAR 0 3
44173: IFFALSE 44201
// if task [ 1 ] [ 1 ] = p then
44175: LD_VAR 0 3
44179: PUSH
44180: LD_INT 1
44182: ARRAY
44183: PUSH
44184: LD_INT 1
44186: ARRAY
44187: PUSH
44188: LD_STRING p
44190: EQUAL
44191: IFFALSE 44201
// result := true ;
44193: LD_ADDR_VAR 0 2
44197: PUSH
44198: LD_INT 1
44200: ST_TO_ADDR
// end ;
44201: LD_VAR 0 2
44205: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44206: LD_INT 0
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
// if pos < 1 then
44212: LD_VAR 0 2
44216: PUSH
44217: LD_INT 1
44219: LESS
44220: IFFALSE 44224
// exit ;
44222: GO 44527
// if pos = 1 then
44224: LD_VAR 0 2
44228: PUSH
44229: LD_INT 1
44231: EQUAL
44232: IFFALSE 44265
// result := Replace ( arr , pos [ 1 ] , value ) else
44234: LD_ADDR_VAR 0 4
44238: PUSH
44239: LD_VAR 0 1
44243: PPUSH
44244: LD_VAR 0 2
44248: PUSH
44249: LD_INT 1
44251: ARRAY
44252: PPUSH
44253: LD_VAR 0 3
44257: PPUSH
44258: CALL_OW 1
44262: ST_TO_ADDR
44263: GO 44527
// begin tmp := arr ;
44265: LD_ADDR_VAR 0 6
44269: PUSH
44270: LD_VAR 0 1
44274: ST_TO_ADDR
// s_arr := [ tmp ] ;
44275: LD_ADDR_VAR 0 7
44279: PUSH
44280: LD_VAR 0 6
44284: PUSH
44285: EMPTY
44286: LIST
44287: ST_TO_ADDR
// for i = 1 to pos - 1 do
44288: LD_ADDR_VAR 0 5
44292: PUSH
44293: DOUBLE
44294: LD_INT 1
44296: DEC
44297: ST_TO_ADDR
44298: LD_VAR 0 2
44302: PUSH
44303: LD_INT 1
44305: MINUS
44306: PUSH
44307: FOR_TO
44308: IFFALSE 44353
// begin tmp := tmp [ pos [ i ] ] ;
44310: LD_ADDR_VAR 0 6
44314: PUSH
44315: LD_VAR 0 6
44319: PUSH
44320: LD_VAR 0 2
44324: PUSH
44325: LD_VAR 0 5
44329: ARRAY
44330: ARRAY
44331: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44332: LD_ADDR_VAR 0 7
44336: PUSH
44337: LD_VAR 0 7
44341: PUSH
44342: LD_VAR 0 6
44346: PUSH
44347: EMPTY
44348: LIST
44349: ADD
44350: ST_TO_ADDR
// end ;
44351: GO 44307
44353: POP
44354: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44355: LD_ADDR_VAR 0 6
44359: PUSH
44360: LD_VAR 0 6
44364: PPUSH
44365: LD_VAR 0 2
44369: PUSH
44370: LD_VAR 0 2
44374: ARRAY
44375: PPUSH
44376: LD_VAR 0 3
44380: PPUSH
44381: CALL_OW 1
44385: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44386: LD_ADDR_VAR 0 7
44390: PUSH
44391: LD_VAR 0 7
44395: PPUSH
44396: LD_VAR 0 7
44400: PPUSH
44401: LD_VAR 0 6
44405: PPUSH
44406: CALL_OW 1
44410: ST_TO_ADDR
// for i = s_arr downto 2 do
44411: LD_ADDR_VAR 0 5
44415: PUSH
44416: DOUBLE
44417: LD_VAR 0 7
44421: INC
44422: ST_TO_ADDR
44423: LD_INT 2
44425: PUSH
44426: FOR_DOWNTO
44427: IFFALSE 44511
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44429: LD_ADDR_VAR 0 6
44433: PUSH
44434: LD_VAR 0 7
44438: PUSH
44439: LD_VAR 0 5
44443: PUSH
44444: LD_INT 1
44446: MINUS
44447: ARRAY
44448: PPUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_VAR 0 5
44458: PUSH
44459: LD_INT 1
44461: MINUS
44462: ARRAY
44463: PPUSH
44464: LD_VAR 0 7
44468: PUSH
44469: LD_VAR 0 5
44473: ARRAY
44474: PPUSH
44475: CALL_OW 1
44479: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44480: LD_ADDR_VAR 0 7
44484: PUSH
44485: LD_VAR 0 7
44489: PPUSH
44490: LD_VAR 0 5
44494: PUSH
44495: LD_INT 1
44497: MINUS
44498: PPUSH
44499: LD_VAR 0 6
44503: PPUSH
44504: CALL_OW 1
44508: ST_TO_ADDR
// end ;
44509: GO 44426
44511: POP
44512: POP
// result := s_arr [ 1 ] ;
44513: LD_ADDR_VAR 0 4
44517: PUSH
44518: LD_VAR 0 7
44522: PUSH
44523: LD_INT 1
44525: ARRAY
44526: ST_TO_ADDR
// end ; end ;
44527: LD_VAR 0 4
44531: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44532: LD_INT 0
44534: PPUSH
44535: PPUSH
// if not list then
44536: LD_VAR 0 1
44540: NOT
44541: IFFALSE 44545
// exit ;
44543: GO 44636
// i := list [ pos1 ] ;
44545: LD_ADDR_VAR 0 5
44549: PUSH
44550: LD_VAR 0 1
44554: PUSH
44555: LD_VAR 0 2
44559: ARRAY
44560: ST_TO_ADDR
// if not i then
44561: LD_VAR 0 5
44565: NOT
44566: IFFALSE 44570
// exit ;
44568: GO 44636
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44570: LD_ADDR_VAR 0 1
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: LD_VAR 0 2
44584: PPUSH
44585: LD_VAR 0 1
44589: PUSH
44590: LD_VAR 0 3
44594: ARRAY
44595: PPUSH
44596: CALL_OW 1
44600: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44601: LD_ADDR_VAR 0 1
44605: PUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: LD_VAR 0 3
44615: PPUSH
44616: LD_VAR 0 5
44620: PPUSH
44621: CALL_OW 1
44625: ST_TO_ADDR
// result := list ;
44626: LD_ADDR_VAR 0 4
44630: PUSH
44631: LD_VAR 0 1
44635: ST_TO_ADDR
// end ;
44636: LD_VAR 0 4
44640: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44641: LD_INT 0
44643: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44644: LD_ADDR_VAR 0 5
44648: PUSH
44649: LD_VAR 0 1
44653: PPUSH
44654: CALL_OW 250
44658: PPUSH
44659: LD_VAR 0 1
44663: PPUSH
44664: CALL_OW 251
44668: PPUSH
44669: LD_VAR 0 2
44673: PPUSH
44674: LD_VAR 0 3
44678: PPUSH
44679: LD_VAR 0 4
44683: PPUSH
44684: CALL 44694 0 5
44688: ST_TO_ADDR
// end ;
44689: LD_VAR 0 5
44693: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44694: LD_INT 0
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
// if not list then
44700: LD_VAR 0 3
44704: NOT
44705: IFFALSE 44709
// exit ;
44707: GO 45097
// result := [ ] ;
44709: LD_ADDR_VAR 0 6
44713: PUSH
44714: EMPTY
44715: ST_TO_ADDR
// for i in list do
44716: LD_ADDR_VAR 0 7
44720: PUSH
44721: LD_VAR 0 3
44725: PUSH
44726: FOR_IN
44727: IFFALSE 44929
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44729: LD_ADDR_VAR 0 9
44733: PUSH
44734: LD_VAR 0 7
44738: PPUSH
44739: LD_VAR 0 1
44743: PPUSH
44744: LD_VAR 0 2
44748: PPUSH
44749: CALL_OW 297
44753: ST_TO_ADDR
// if not result then
44754: LD_VAR 0 6
44758: NOT
44759: IFFALSE 44785
// result := [ [ i , tmp ] ] else
44761: LD_ADDR_VAR 0 6
44765: PUSH
44766: LD_VAR 0 7
44770: PUSH
44771: LD_VAR 0 9
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: ST_TO_ADDR
44783: GO 44927
// begin if result [ result ] [ 2 ] < tmp then
44785: LD_VAR 0 6
44789: PUSH
44790: LD_VAR 0 6
44794: ARRAY
44795: PUSH
44796: LD_INT 2
44798: ARRAY
44799: PUSH
44800: LD_VAR 0 9
44804: LESS
44805: IFFALSE 44847
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44807: LD_ADDR_VAR 0 6
44811: PUSH
44812: LD_VAR 0 6
44816: PPUSH
44817: LD_VAR 0 6
44821: PUSH
44822: LD_INT 1
44824: PLUS
44825: PPUSH
44826: LD_VAR 0 7
44830: PUSH
44831: LD_VAR 0 9
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PPUSH
44840: CALL_OW 2
44844: ST_TO_ADDR
44845: GO 44927
// for j = 1 to result do
44847: LD_ADDR_VAR 0 8
44851: PUSH
44852: DOUBLE
44853: LD_INT 1
44855: DEC
44856: ST_TO_ADDR
44857: LD_VAR 0 6
44861: PUSH
44862: FOR_TO
44863: IFFALSE 44925
// begin if tmp < result [ j ] [ 2 ] then
44865: LD_VAR 0 9
44869: PUSH
44870: LD_VAR 0 6
44874: PUSH
44875: LD_VAR 0 8
44879: ARRAY
44880: PUSH
44881: LD_INT 2
44883: ARRAY
44884: LESS
44885: IFFALSE 44923
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44887: LD_ADDR_VAR 0 6
44891: PUSH
44892: LD_VAR 0 6
44896: PPUSH
44897: LD_VAR 0 8
44901: PPUSH
44902: LD_VAR 0 7
44906: PUSH
44907: LD_VAR 0 9
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PPUSH
44916: CALL_OW 2
44920: ST_TO_ADDR
// break ;
44921: GO 44925
// end ; end ;
44923: GO 44862
44925: POP
44926: POP
// end ; end ;
44927: GO 44726
44929: POP
44930: POP
// if result and not asc then
44931: LD_VAR 0 6
44935: PUSH
44936: LD_VAR 0 4
44940: NOT
44941: AND
44942: IFFALSE 45017
// begin tmp := result ;
44944: LD_ADDR_VAR 0 9
44948: PUSH
44949: LD_VAR 0 6
44953: ST_TO_ADDR
// for i = tmp downto 1 do
44954: LD_ADDR_VAR 0 7
44958: PUSH
44959: DOUBLE
44960: LD_VAR 0 9
44964: INC
44965: ST_TO_ADDR
44966: LD_INT 1
44968: PUSH
44969: FOR_DOWNTO
44970: IFFALSE 45015
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44972: LD_ADDR_VAR 0 6
44976: PUSH
44977: LD_VAR 0 6
44981: PPUSH
44982: LD_VAR 0 9
44986: PUSH
44987: LD_VAR 0 7
44991: MINUS
44992: PUSH
44993: LD_INT 1
44995: PLUS
44996: PPUSH
44997: LD_VAR 0 9
45001: PUSH
45002: LD_VAR 0 7
45006: ARRAY
45007: PPUSH
45008: CALL_OW 1
45012: ST_TO_ADDR
45013: GO 44969
45015: POP
45016: POP
// end ; tmp := [ ] ;
45017: LD_ADDR_VAR 0 9
45021: PUSH
45022: EMPTY
45023: ST_TO_ADDR
// if mode then
45024: LD_VAR 0 5
45028: IFFALSE 45097
// begin for i = 1 to result do
45030: LD_ADDR_VAR 0 7
45034: PUSH
45035: DOUBLE
45036: LD_INT 1
45038: DEC
45039: ST_TO_ADDR
45040: LD_VAR 0 6
45044: PUSH
45045: FOR_TO
45046: IFFALSE 45085
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45048: LD_ADDR_VAR 0 9
45052: PUSH
45053: LD_VAR 0 9
45057: PPUSH
45058: LD_VAR 0 7
45062: PPUSH
45063: LD_VAR 0 6
45067: PUSH
45068: LD_VAR 0 7
45072: ARRAY
45073: PUSH
45074: LD_INT 1
45076: ARRAY
45077: PPUSH
45078: CALL_OW 1
45082: ST_TO_ADDR
45083: GO 45045
45085: POP
45086: POP
// result := tmp ;
45087: LD_ADDR_VAR 0 6
45091: PUSH
45092: LD_VAR 0 9
45096: ST_TO_ADDR
// end ; end ;
45097: LD_VAR 0 6
45101: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45102: LD_INT 0
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45110: LD_ADDR_VAR 0 5
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
// if not x or not y then
45132: LD_VAR 0 2
45136: NOT
45137: PUSH
45138: LD_VAR 0 3
45142: NOT
45143: OR
45144: IFFALSE 45148
// exit ;
45146: GO 46798
// if not range then
45148: LD_VAR 0 4
45152: NOT
45153: IFFALSE 45163
// range := 10 ;
45155: LD_ADDR_VAR 0 4
45159: PUSH
45160: LD_INT 10
45162: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45163: LD_ADDR_VAR 0 8
45167: PUSH
45168: LD_INT 81
45170: PUSH
45171: LD_VAR 0 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 92
45182: PUSH
45183: LD_VAR 0 2
45187: PUSH
45188: LD_VAR 0 3
45192: PUSH
45193: LD_VAR 0 4
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 3
45206: PUSH
45207: LD_INT 21
45209: PUSH
45210: LD_INT 3
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: PPUSH
45226: CALL_OW 69
45230: ST_TO_ADDR
// if not tmp then
45231: LD_VAR 0 8
45235: NOT
45236: IFFALSE 45240
// exit ;
45238: GO 46798
// for i in tmp do
45240: LD_ADDR_VAR 0 6
45244: PUSH
45245: LD_VAR 0 8
45249: PUSH
45250: FOR_IN
45251: IFFALSE 46773
// begin points := [ 0 , 0 , 0 ] ;
45253: LD_ADDR_VAR 0 9
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: ST_TO_ADDR
// bpoints := 1 ;
45272: LD_ADDR_VAR 0 10
45276: PUSH
45277: LD_INT 1
45279: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45280: LD_VAR 0 6
45284: PPUSH
45285: CALL_OW 247
45289: PUSH
45290: LD_INT 1
45292: DOUBLE
45293: EQUAL
45294: IFTRUE 45298
45296: GO 45876
45298: POP
// begin if GetClass ( i ) = 1 then
45299: LD_VAR 0 6
45303: PPUSH
45304: CALL_OW 257
45308: PUSH
45309: LD_INT 1
45311: EQUAL
45312: IFFALSE 45333
// points := [ 10 , 5 , 3 ] ;
45314: LD_ADDR_VAR 0 9
45318: PUSH
45319: LD_INT 10
45321: PUSH
45322: LD_INT 5
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45333: LD_VAR 0 6
45337: PPUSH
45338: CALL_OW 257
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 4
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: IN
45357: IFFALSE 45378
// points := [ 3 , 2 , 1 ] ;
45359: LD_ADDR_VAR 0 9
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: LIST
45377: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45378: LD_VAR 0 6
45382: PPUSH
45383: CALL_OW 257
45387: PUSH
45388: LD_INT 5
45390: EQUAL
45391: IFFALSE 45412
// points := [ 130 , 5 , 2 ] ;
45393: LD_ADDR_VAR 0 9
45397: PUSH
45398: LD_INT 130
45400: PUSH
45401: LD_INT 5
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45412: LD_VAR 0 6
45416: PPUSH
45417: CALL_OW 257
45421: PUSH
45422: LD_INT 8
45424: EQUAL
45425: IFFALSE 45446
// points := [ 35 , 35 , 30 ] ;
45427: LD_ADDR_VAR 0 9
45431: PUSH
45432: LD_INT 35
45434: PUSH
45435: LD_INT 35
45437: PUSH
45438: LD_INT 30
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45446: LD_VAR 0 6
45450: PPUSH
45451: CALL_OW 257
45455: PUSH
45456: LD_INT 9
45458: EQUAL
45459: IFFALSE 45480
// points := [ 20 , 55 , 40 ] ;
45461: LD_ADDR_VAR 0 9
45465: PUSH
45466: LD_INT 20
45468: PUSH
45469: LD_INT 55
45471: PUSH
45472: LD_INT 40
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45480: LD_VAR 0 6
45484: PPUSH
45485: CALL_OW 257
45489: PUSH
45490: LD_INT 12
45492: PUSH
45493: LD_INT 16
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: IN
45500: IFFALSE 45521
// points := [ 5 , 3 , 2 ] ;
45502: LD_ADDR_VAR 0 9
45506: PUSH
45507: LD_INT 5
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45521: LD_VAR 0 6
45525: PPUSH
45526: CALL_OW 257
45530: PUSH
45531: LD_INT 17
45533: EQUAL
45534: IFFALSE 45555
// points := [ 100 , 50 , 75 ] ;
45536: LD_ADDR_VAR 0 9
45540: PUSH
45541: LD_INT 100
45543: PUSH
45544: LD_INT 50
45546: PUSH
45547: LD_INT 75
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45555: LD_VAR 0 6
45559: PPUSH
45560: CALL_OW 257
45564: PUSH
45565: LD_INT 15
45567: EQUAL
45568: IFFALSE 45589
// points := [ 10 , 5 , 3 ] ;
45570: LD_ADDR_VAR 0 9
45574: PUSH
45575: LD_INT 10
45577: PUSH
45578: LD_INT 5
45580: PUSH
45581: LD_INT 3
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45589: LD_VAR 0 6
45593: PPUSH
45594: CALL_OW 257
45598: PUSH
45599: LD_INT 14
45601: EQUAL
45602: IFFALSE 45623
// points := [ 10 , 0 , 0 ] ;
45604: LD_ADDR_VAR 0 9
45608: PUSH
45609: LD_INT 10
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45623: LD_VAR 0 6
45627: PPUSH
45628: CALL_OW 257
45632: PUSH
45633: LD_INT 11
45635: EQUAL
45636: IFFALSE 45657
// points := [ 30 , 10 , 5 ] ;
45638: LD_ADDR_VAR 0 9
45642: PUSH
45643: LD_INT 30
45645: PUSH
45646: LD_INT 10
45648: PUSH
45649: LD_INT 5
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45657: LD_VAR 0 1
45661: PPUSH
45662: LD_INT 5
45664: PPUSH
45665: CALL_OW 321
45669: PUSH
45670: LD_INT 2
45672: EQUAL
45673: IFFALSE 45690
// bpoints := bpoints * 1.8 ;
45675: LD_ADDR_VAR 0 10
45679: PUSH
45680: LD_VAR 0 10
45684: PUSH
45685: LD_REAL  1.80000000000000E+0000
45688: MUL
45689: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45690: LD_VAR 0 6
45694: PPUSH
45695: CALL_OW 257
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 3
45708: PUSH
45709: LD_INT 4
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: IN
45718: PUSH
45719: LD_VAR 0 1
45723: PPUSH
45724: LD_INT 51
45726: PPUSH
45727: CALL_OW 321
45731: PUSH
45732: LD_INT 2
45734: EQUAL
45735: AND
45736: IFFALSE 45753
// bpoints := bpoints * 1.2 ;
45738: LD_ADDR_VAR 0 10
45742: PUSH
45743: LD_VAR 0 10
45747: PUSH
45748: LD_REAL  1.20000000000000E+0000
45751: MUL
45752: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45753: LD_VAR 0 6
45757: PPUSH
45758: CALL_OW 257
45762: PUSH
45763: LD_INT 5
45765: PUSH
45766: LD_INT 7
45768: PUSH
45769: LD_INT 9
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: IN
45777: PUSH
45778: LD_VAR 0 1
45782: PPUSH
45783: LD_INT 52
45785: PPUSH
45786: CALL_OW 321
45790: PUSH
45791: LD_INT 2
45793: EQUAL
45794: AND
45795: IFFALSE 45812
// bpoints := bpoints * 1.5 ;
45797: LD_ADDR_VAR 0 10
45801: PUSH
45802: LD_VAR 0 10
45806: PUSH
45807: LD_REAL  1.50000000000000E+0000
45810: MUL
45811: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45812: LD_VAR 0 1
45816: PPUSH
45817: LD_INT 66
45819: PPUSH
45820: CALL_OW 321
45824: PUSH
45825: LD_INT 2
45827: EQUAL
45828: IFFALSE 45845
// bpoints := bpoints * 1.1 ;
45830: LD_ADDR_VAR 0 10
45834: PUSH
45835: LD_VAR 0 10
45839: PUSH
45840: LD_REAL  1.10000000000000E+0000
45843: MUL
45844: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45845: LD_ADDR_VAR 0 10
45849: PUSH
45850: LD_VAR 0 10
45854: PUSH
45855: LD_VAR 0 6
45859: PPUSH
45860: LD_INT 1
45862: PPUSH
45863: CALL_OW 259
45867: PUSH
45868: LD_REAL  1.15000000000000E+0000
45871: MUL
45872: MUL
45873: ST_TO_ADDR
// end ; unit_vehicle :
45874: GO 46702
45876: LD_INT 2
45878: DOUBLE
45879: EQUAL
45880: IFTRUE 45884
45882: GO 46690
45884: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45885: LD_VAR 0 6
45889: PPUSH
45890: CALL_OW 264
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 42
45900: PUSH
45901: LD_INT 24
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: IN
45909: IFFALSE 45930
// points := [ 25 , 5 , 3 ] ;
45911: LD_ADDR_VAR 0 9
45915: PUSH
45916: LD_INT 25
45918: PUSH
45919: LD_INT 5
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45930: LD_VAR 0 6
45934: PPUSH
45935: CALL_OW 264
45939: PUSH
45940: LD_INT 4
45942: PUSH
45943: LD_INT 43
45945: PUSH
45946: LD_INT 25
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: IN
45954: IFFALSE 45975
// points := [ 40 , 15 , 5 ] ;
45956: LD_ADDR_VAR 0 9
45960: PUSH
45961: LD_INT 40
45963: PUSH
45964: LD_INT 15
45966: PUSH
45967: LD_INT 5
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: LIST
45974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45975: LD_VAR 0 6
45979: PPUSH
45980: CALL_OW 264
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: LD_INT 23
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: IN
45995: IFFALSE 46016
// points := [ 7 , 25 , 8 ] ;
45997: LD_ADDR_VAR 0 9
46001: PUSH
46002: LD_INT 7
46004: PUSH
46005: LD_INT 25
46007: PUSH
46008: LD_INT 8
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46016: LD_VAR 0 6
46020: PPUSH
46021: CALL_OW 264
46025: PUSH
46026: LD_INT 5
46028: PUSH
46029: LD_INT 27
46031: PUSH
46032: LD_INT 44
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: IN
46040: IFFALSE 46061
// points := [ 14 , 50 , 16 ] ;
46042: LD_ADDR_VAR 0 9
46046: PUSH
46047: LD_INT 14
46049: PUSH
46050: LD_INT 50
46052: PUSH
46053: LD_INT 16
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: LIST
46060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46061: LD_VAR 0 6
46065: PPUSH
46066: CALL_OW 264
46070: PUSH
46071: LD_INT 6
46073: PUSH
46074: LD_INT 46
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: IN
46081: IFFALSE 46102
// points := [ 32 , 120 , 70 ] ;
46083: LD_ADDR_VAR 0 9
46087: PUSH
46088: LD_INT 32
46090: PUSH
46091: LD_INT 120
46093: PUSH
46094: LD_INT 70
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46102: LD_VAR 0 6
46106: PPUSH
46107: CALL_OW 264
46111: PUSH
46112: LD_INT 7
46114: PUSH
46115: LD_INT 28
46117: PUSH
46118: LD_INT 45
46120: PUSH
46121: LD_INT 92
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: IN
46130: IFFALSE 46151
// points := [ 35 , 20 , 45 ] ;
46132: LD_ADDR_VAR 0 9
46136: PUSH
46137: LD_INT 35
46139: PUSH
46140: LD_INT 20
46142: PUSH
46143: LD_INT 45
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46151: LD_VAR 0 6
46155: PPUSH
46156: CALL_OW 264
46160: PUSH
46161: LD_INT 47
46163: PUSH
46164: EMPTY
46165: LIST
46166: IN
46167: IFFALSE 46188
// points := [ 67 , 45 , 75 ] ;
46169: LD_ADDR_VAR 0 9
46173: PUSH
46174: LD_INT 67
46176: PUSH
46177: LD_INT 45
46179: PUSH
46180: LD_INT 75
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46188: LD_VAR 0 6
46192: PPUSH
46193: CALL_OW 264
46197: PUSH
46198: LD_INT 26
46200: PUSH
46201: EMPTY
46202: LIST
46203: IN
46204: IFFALSE 46225
// points := [ 120 , 30 , 80 ] ;
46206: LD_ADDR_VAR 0 9
46210: PUSH
46211: LD_INT 120
46213: PUSH
46214: LD_INT 30
46216: PUSH
46217: LD_INT 80
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: LIST
46224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46225: LD_VAR 0 6
46229: PPUSH
46230: CALL_OW 264
46234: PUSH
46235: LD_INT 22
46237: PUSH
46238: EMPTY
46239: LIST
46240: IN
46241: IFFALSE 46262
// points := [ 40 , 1 , 1 ] ;
46243: LD_ADDR_VAR 0 9
46247: PUSH
46248: LD_INT 40
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46262: LD_VAR 0 6
46266: PPUSH
46267: CALL_OW 264
46271: PUSH
46272: LD_INT 29
46274: PUSH
46275: EMPTY
46276: LIST
46277: IN
46278: IFFALSE 46299
// points := [ 70 , 200 , 400 ] ;
46280: LD_ADDR_VAR 0 9
46284: PUSH
46285: LD_INT 70
46287: PUSH
46288: LD_INT 200
46290: PUSH
46291: LD_INT 400
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46299: LD_VAR 0 6
46303: PPUSH
46304: CALL_OW 264
46308: PUSH
46309: LD_INT 14
46311: PUSH
46312: LD_INT 53
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: IN
46319: IFFALSE 46340
// points := [ 40 , 10 , 20 ] ;
46321: LD_ADDR_VAR 0 9
46325: PUSH
46326: LD_INT 40
46328: PUSH
46329: LD_INT 10
46331: PUSH
46332: LD_INT 20
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46340: LD_VAR 0 6
46344: PPUSH
46345: CALL_OW 264
46349: PUSH
46350: LD_INT 9
46352: PUSH
46353: EMPTY
46354: LIST
46355: IN
46356: IFFALSE 46377
// points := [ 5 , 70 , 20 ] ;
46358: LD_ADDR_VAR 0 9
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: LD_INT 70
46368: PUSH
46369: LD_INT 20
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46377: LD_VAR 0 6
46381: PPUSH
46382: CALL_OW 264
46386: PUSH
46387: LD_INT 10
46389: PUSH
46390: EMPTY
46391: LIST
46392: IN
46393: IFFALSE 46414
// points := [ 35 , 110 , 70 ] ;
46395: LD_ADDR_VAR 0 9
46399: PUSH
46400: LD_INT 35
46402: PUSH
46403: LD_INT 110
46405: PUSH
46406: LD_INT 70
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46414: LD_VAR 0 6
46418: PPUSH
46419: CALL_OW 265
46423: PUSH
46424: LD_INT 25
46426: EQUAL
46427: IFFALSE 46448
// points := [ 80 , 65 , 100 ] ;
46429: LD_ADDR_VAR 0 9
46433: PUSH
46434: LD_INT 80
46436: PUSH
46437: LD_INT 65
46439: PUSH
46440: LD_INT 100
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46448: LD_VAR 0 6
46452: PPUSH
46453: CALL_OW 263
46457: PUSH
46458: LD_INT 1
46460: EQUAL
46461: IFFALSE 46496
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46463: LD_ADDR_VAR 0 10
46467: PUSH
46468: LD_VAR 0 10
46472: PUSH
46473: LD_VAR 0 6
46477: PPUSH
46478: CALL_OW 311
46482: PPUSH
46483: LD_INT 3
46485: PPUSH
46486: CALL_OW 259
46490: PUSH
46491: LD_INT 4
46493: MUL
46494: MUL
46495: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46496: LD_VAR 0 6
46500: PPUSH
46501: CALL_OW 263
46505: PUSH
46506: LD_INT 2
46508: EQUAL
46509: IFFALSE 46560
// begin j := IsControledBy ( i ) ;
46511: LD_ADDR_VAR 0 7
46515: PUSH
46516: LD_VAR 0 6
46520: PPUSH
46521: CALL_OW 312
46525: ST_TO_ADDR
// if j then
46526: LD_VAR 0 7
46530: IFFALSE 46560
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46532: LD_ADDR_VAR 0 10
46536: PUSH
46537: LD_VAR 0 10
46541: PUSH
46542: LD_VAR 0 7
46546: PPUSH
46547: LD_INT 3
46549: PPUSH
46550: CALL_OW 259
46554: PUSH
46555: LD_INT 3
46557: MUL
46558: MUL
46559: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46560: LD_VAR 0 6
46564: PPUSH
46565: CALL_OW 264
46569: PUSH
46570: LD_INT 5
46572: PUSH
46573: LD_INT 6
46575: PUSH
46576: LD_INT 46
46578: PUSH
46579: LD_INT 44
46581: PUSH
46582: LD_INT 47
46584: PUSH
46585: LD_INT 45
46587: PUSH
46588: LD_INT 28
46590: PUSH
46591: LD_INT 7
46593: PUSH
46594: LD_INT 27
46596: PUSH
46597: LD_INT 29
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: IN
46612: PUSH
46613: LD_VAR 0 1
46617: PPUSH
46618: LD_INT 52
46620: PPUSH
46621: CALL_OW 321
46625: PUSH
46626: LD_INT 2
46628: EQUAL
46629: AND
46630: IFFALSE 46647
// bpoints := bpoints * 1.2 ;
46632: LD_ADDR_VAR 0 10
46636: PUSH
46637: LD_VAR 0 10
46641: PUSH
46642: LD_REAL  1.20000000000000E+0000
46645: MUL
46646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46647: LD_VAR 0 6
46651: PPUSH
46652: CALL_OW 264
46656: PUSH
46657: LD_INT 6
46659: PUSH
46660: LD_INT 46
46662: PUSH
46663: LD_INT 47
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: IN
46671: IFFALSE 46688
// bpoints := bpoints * 1.2 ;
46673: LD_ADDR_VAR 0 10
46677: PUSH
46678: LD_VAR 0 10
46682: PUSH
46683: LD_REAL  1.20000000000000E+0000
46686: MUL
46687: ST_TO_ADDR
// end ; unit_building :
46688: GO 46702
46690: LD_INT 3
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46701
46698: POP
// ; end ;
46699: GO 46702
46701: POP
// for j = 1 to 3 do
46702: LD_ADDR_VAR 0 7
46706: PUSH
46707: DOUBLE
46708: LD_INT 1
46710: DEC
46711: ST_TO_ADDR
46712: LD_INT 3
46714: PUSH
46715: FOR_TO
46716: IFFALSE 46769
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46718: LD_ADDR_VAR 0 5
46722: PUSH
46723: LD_VAR 0 5
46727: PPUSH
46728: LD_VAR 0 7
46732: PPUSH
46733: LD_VAR 0 5
46737: PUSH
46738: LD_VAR 0 7
46742: ARRAY
46743: PUSH
46744: LD_VAR 0 9
46748: PUSH
46749: LD_VAR 0 7
46753: ARRAY
46754: PUSH
46755: LD_VAR 0 10
46759: MUL
46760: PLUS
46761: PPUSH
46762: CALL_OW 1
46766: ST_TO_ADDR
46767: GO 46715
46769: POP
46770: POP
// end ;
46771: GO 45250
46773: POP
46774: POP
// result := Replace ( result , 4 , tmp ) ;
46775: LD_ADDR_VAR 0 5
46779: PUSH
46780: LD_VAR 0 5
46784: PPUSH
46785: LD_INT 4
46787: PPUSH
46788: LD_VAR 0 8
46792: PPUSH
46793: CALL_OW 1
46797: ST_TO_ADDR
// end ;
46798: LD_VAR 0 5
46802: RET
// export function DangerAtRange ( unit , range ) ; begin
46803: LD_INT 0
46805: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46806: LD_ADDR_VAR 0 3
46810: PUSH
46811: LD_VAR 0 1
46815: PPUSH
46816: CALL_OW 255
46820: PPUSH
46821: LD_VAR 0 1
46825: PPUSH
46826: CALL_OW 250
46830: PPUSH
46831: LD_VAR 0 1
46835: PPUSH
46836: CALL_OW 251
46840: PPUSH
46841: LD_VAR 0 2
46845: PPUSH
46846: CALL 45102 0 4
46850: ST_TO_ADDR
// end ;
46851: LD_VAR 0 3
46855: RET
// export function DangerInArea ( side , area ) ; begin
46856: LD_INT 0
46858: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46859: LD_ADDR_VAR 0 3
46863: PUSH
46864: LD_VAR 0 2
46868: PPUSH
46869: LD_INT 81
46871: PUSH
46872: LD_VAR 0 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PPUSH
46881: CALL_OW 70
46885: ST_TO_ADDR
// end ;
46886: LD_VAR 0 3
46890: RET
// export function IsExtension ( b ) ; begin
46891: LD_INT 0
46893: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46894: LD_ADDR_VAR 0 2
46898: PUSH
46899: LD_VAR 0 1
46903: PUSH
46904: LD_INT 23
46906: PUSH
46907: LD_INT 20
46909: PUSH
46910: LD_INT 22
46912: PUSH
46913: LD_INT 17
46915: PUSH
46916: LD_INT 24
46918: PUSH
46919: LD_INT 21
46921: PUSH
46922: LD_INT 19
46924: PUSH
46925: LD_INT 16
46927: PUSH
46928: LD_INT 25
46930: PUSH
46931: LD_INT 18
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: IN
46946: ST_TO_ADDR
// end ;
46947: LD_VAR 0 2
46951: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46952: LD_INT 0
46954: PPUSH
46955: PPUSH
46956: PPUSH
// result := [ ] ;
46957: LD_ADDR_VAR 0 4
46961: PUSH
46962: EMPTY
46963: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46964: LD_ADDR_VAR 0 5
46968: PUSH
46969: LD_VAR 0 2
46973: PPUSH
46974: LD_INT 21
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PPUSH
46984: CALL_OW 70
46988: ST_TO_ADDR
// if not tmp then
46989: LD_VAR 0 5
46993: NOT
46994: IFFALSE 46998
// exit ;
46996: GO 47062
// if checkLink then
46998: LD_VAR 0 3
47002: IFFALSE 47052
// begin for i in tmp do
47004: LD_ADDR_VAR 0 6
47008: PUSH
47009: LD_VAR 0 5
47013: PUSH
47014: FOR_IN
47015: IFFALSE 47050
// if GetBase ( i ) <> base then
47017: LD_VAR 0 6
47021: PPUSH
47022: CALL_OW 274
47026: PUSH
47027: LD_VAR 0 1
47031: NONEQUAL
47032: IFFALSE 47048
// ComLinkToBase ( base , i ) ;
47034: LD_VAR 0 1
47038: PPUSH
47039: LD_VAR 0 6
47043: PPUSH
47044: CALL_OW 169
47048: GO 47014
47050: POP
47051: POP
// end ; result := tmp ;
47052: LD_ADDR_VAR 0 4
47056: PUSH
47057: LD_VAR 0 5
47061: ST_TO_ADDR
// end ;
47062: LD_VAR 0 4
47066: RET
// export function ComComplete ( units , b ) ; var i ; begin
47067: LD_INT 0
47069: PPUSH
47070: PPUSH
// if not units then
47071: LD_VAR 0 1
47075: NOT
47076: IFFALSE 47080
// exit ;
47078: GO 47170
// for i in units do
47080: LD_ADDR_VAR 0 4
47084: PUSH
47085: LD_VAR 0 1
47089: PUSH
47090: FOR_IN
47091: IFFALSE 47168
// if BuildingStatus ( b ) = bs_build then
47093: LD_VAR 0 2
47097: PPUSH
47098: CALL_OW 461
47102: PUSH
47103: LD_INT 1
47105: EQUAL
47106: IFFALSE 47166
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47108: LD_VAR 0 4
47112: PPUSH
47113: LD_STRING h
47115: PUSH
47116: LD_VAR 0 2
47120: PPUSH
47121: CALL_OW 250
47125: PUSH
47126: LD_VAR 0 2
47130: PPUSH
47131: CALL_OW 251
47135: PUSH
47136: LD_VAR 0 2
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: PPUSH
47162: CALL_OW 446
47166: GO 47090
47168: POP
47169: POP
// end ;
47170: LD_VAR 0 3
47174: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47175: LD_INT 0
47177: PPUSH
47178: PPUSH
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47183: LD_VAR 0 1
47187: NOT
47188: PUSH
47189: LD_VAR 0 1
47193: PPUSH
47194: CALL_OW 263
47198: PUSH
47199: LD_INT 2
47201: NONEQUAL
47202: OR
47203: IFFALSE 47207
// exit ;
47205: GO 47523
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47207: LD_ADDR_VAR 0 6
47211: PUSH
47212: LD_INT 22
47214: PUSH
47215: LD_VAR 0 1
47219: PPUSH
47220: CALL_OW 255
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: LD_INT 30
47234: PUSH
47235: LD_INT 36
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 34
47244: PUSH
47245: LD_INT 31
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PPUSH
47261: CALL_OW 69
47265: ST_TO_ADDR
// if not tmp then
47266: LD_VAR 0 6
47270: NOT
47271: IFFALSE 47275
// exit ;
47273: GO 47523
// result := [ ] ;
47275: LD_ADDR_VAR 0 2
47279: PUSH
47280: EMPTY
47281: ST_TO_ADDR
// for i in tmp do
47282: LD_ADDR_VAR 0 3
47286: PUSH
47287: LD_VAR 0 6
47291: PUSH
47292: FOR_IN
47293: IFFALSE 47364
// begin t := UnitsInside ( i ) ;
47295: LD_ADDR_VAR 0 4
47299: PUSH
47300: LD_VAR 0 3
47304: PPUSH
47305: CALL_OW 313
47309: ST_TO_ADDR
// if t then
47310: LD_VAR 0 4
47314: IFFALSE 47362
// for j in t do
47316: LD_ADDR_VAR 0 7
47320: PUSH
47321: LD_VAR 0 4
47325: PUSH
47326: FOR_IN
47327: IFFALSE 47360
// result := Replace ( result , result + 1 , j ) ;
47329: LD_ADDR_VAR 0 2
47333: PUSH
47334: LD_VAR 0 2
47338: PPUSH
47339: LD_VAR 0 2
47343: PUSH
47344: LD_INT 1
47346: PLUS
47347: PPUSH
47348: LD_VAR 0 7
47352: PPUSH
47353: CALL_OW 1
47357: ST_TO_ADDR
47358: GO 47326
47360: POP
47361: POP
// end ;
47362: GO 47292
47364: POP
47365: POP
// if not result then
47366: LD_VAR 0 2
47370: NOT
47371: IFFALSE 47375
// exit ;
47373: GO 47523
// mech := result [ 1 ] ;
47375: LD_ADDR_VAR 0 5
47379: PUSH
47380: LD_VAR 0 2
47384: PUSH
47385: LD_INT 1
47387: ARRAY
47388: ST_TO_ADDR
// if result > 1 then
47389: LD_VAR 0 2
47393: PUSH
47394: LD_INT 1
47396: GREATER
47397: IFFALSE 47509
// begin for i = 2 to result do
47399: LD_ADDR_VAR 0 3
47403: PUSH
47404: DOUBLE
47405: LD_INT 2
47407: DEC
47408: ST_TO_ADDR
47409: LD_VAR 0 2
47413: PUSH
47414: FOR_TO
47415: IFFALSE 47507
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47417: LD_ADDR_VAR 0 4
47421: PUSH
47422: LD_VAR 0 2
47426: PUSH
47427: LD_VAR 0 3
47431: ARRAY
47432: PPUSH
47433: LD_INT 3
47435: PPUSH
47436: CALL_OW 259
47440: PUSH
47441: LD_VAR 0 2
47445: PUSH
47446: LD_VAR 0 3
47450: ARRAY
47451: PPUSH
47452: CALL_OW 432
47456: MINUS
47457: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47458: LD_VAR 0 4
47462: PUSH
47463: LD_VAR 0 5
47467: PPUSH
47468: LD_INT 3
47470: PPUSH
47471: CALL_OW 259
47475: PUSH
47476: LD_VAR 0 5
47480: PPUSH
47481: CALL_OW 432
47485: MINUS
47486: GREATEREQUAL
47487: IFFALSE 47505
// mech := result [ i ] ;
47489: LD_ADDR_VAR 0 5
47493: PUSH
47494: LD_VAR 0 2
47498: PUSH
47499: LD_VAR 0 3
47503: ARRAY
47504: ST_TO_ADDR
// end ;
47505: GO 47414
47507: POP
47508: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47509: LD_VAR 0 1
47513: PPUSH
47514: LD_VAR 0 5
47518: PPUSH
47519: CALL_OW 135
// end ;
47523: LD_VAR 0 2
47527: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47528: LD_INT 0
47530: PPUSH
47531: PPUSH
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
47536: PPUSH
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
// result := [ ] ;
47543: LD_ADDR_VAR 0 7
47547: PUSH
47548: EMPTY
47549: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47550: LD_VAR 0 1
47554: PPUSH
47555: CALL_OW 266
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: IN
47570: NOT
47571: IFFALSE 47575
// exit ;
47573: GO 49209
// if name then
47575: LD_VAR 0 3
47579: IFFALSE 47595
// SetBName ( base_dep , name ) ;
47581: LD_VAR 0 1
47585: PPUSH
47586: LD_VAR 0 3
47590: PPUSH
47591: CALL_OW 500
// base := GetBase ( base_dep ) ;
47595: LD_ADDR_VAR 0 15
47599: PUSH
47600: LD_VAR 0 1
47604: PPUSH
47605: CALL_OW 274
47609: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47610: LD_ADDR_VAR 0 16
47614: PUSH
47615: LD_VAR 0 1
47619: PPUSH
47620: CALL_OW 255
47624: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47625: LD_ADDR_VAR 0 17
47629: PUSH
47630: LD_VAR 0 1
47634: PPUSH
47635: CALL_OW 248
47639: ST_TO_ADDR
// if sources then
47640: LD_VAR 0 5
47644: IFFALSE 47691
// for i = 1 to 3 do
47646: LD_ADDR_VAR 0 8
47650: PUSH
47651: DOUBLE
47652: LD_INT 1
47654: DEC
47655: ST_TO_ADDR
47656: LD_INT 3
47658: PUSH
47659: FOR_TO
47660: IFFALSE 47689
// AddResourceType ( base , i , sources [ i ] ) ;
47662: LD_VAR 0 15
47666: PPUSH
47667: LD_VAR 0 8
47671: PPUSH
47672: LD_VAR 0 5
47676: PUSH
47677: LD_VAR 0 8
47681: ARRAY
47682: PPUSH
47683: CALL_OW 276
47687: GO 47659
47689: POP
47690: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47691: LD_ADDR_VAR 0 18
47695: PUSH
47696: LD_VAR 0 15
47700: PPUSH
47701: LD_VAR 0 2
47705: PPUSH
47706: LD_INT 1
47708: PPUSH
47709: CALL 46952 0 3
47713: ST_TO_ADDR
// InitHc ;
47714: CALL_OW 19
// InitUc ;
47718: CALL_OW 18
// uc_side := side ;
47722: LD_ADDR_OWVAR 20
47726: PUSH
47727: LD_VAR 0 16
47731: ST_TO_ADDR
// uc_nation := nation ;
47732: LD_ADDR_OWVAR 21
47736: PUSH
47737: LD_VAR 0 17
47741: ST_TO_ADDR
// if buildings then
47742: LD_VAR 0 18
47746: IFFALSE 49068
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47748: LD_ADDR_VAR 0 19
47752: PUSH
47753: LD_VAR 0 18
47757: PPUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 30
47763: PUSH
47764: LD_INT 29
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 30
47773: PUSH
47774: LD_INT 30
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: PPUSH
47786: CALL_OW 72
47790: ST_TO_ADDR
// if tmp then
47791: LD_VAR 0 19
47795: IFFALSE 47843
// for i in tmp do
47797: LD_ADDR_VAR 0 8
47801: PUSH
47802: LD_VAR 0 19
47806: PUSH
47807: FOR_IN
47808: IFFALSE 47841
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47810: LD_VAR 0 8
47814: PPUSH
47815: CALL_OW 250
47819: PPUSH
47820: LD_VAR 0 8
47824: PPUSH
47825: CALL_OW 251
47829: PPUSH
47830: LD_VAR 0 16
47834: PPUSH
47835: CALL_OW 441
47839: GO 47807
47841: POP
47842: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47843: LD_VAR 0 18
47847: PPUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 30
47853: PUSH
47854: LD_INT 32
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 30
47863: PUSH
47864: LD_INT 33
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: PPUSH
47876: CALL_OW 72
47880: IFFALSE 47968
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47882: LD_ADDR_VAR 0 8
47886: PUSH
47887: LD_VAR 0 18
47891: PPUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 30
47897: PUSH
47898: LD_INT 32
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 30
47907: PUSH
47908: LD_INT 33
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: PPUSH
47920: CALL_OW 72
47924: PUSH
47925: FOR_IN
47926: IFFALSE 47966
// begin if not GetBWeapon ( i ) then
47928: LD_VAR 0 8
47932: PPUSH
47933: CALL_OW 269
47937: NOT
47938: IFFALSE 47964
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47940: LD_VAR 0 8
47944: PPUSH
47945: LD_VAR 0 8
47949: PPUSH
47950: LD_VAR 0 2
47954: PPUSH
47955: CALL 49214 0 2
47959: PPUSH
47960: CALL_OW 431
// end ;
47964: GO 47925
47966: POP
47967: POP
// end ; for i = 1 to personel do
47968: LD_ADDR_VAR 0 8
47972: PUSH
47973: DOUBLE
47974: LD_INT 1
47976: DEC
47977: ST_TO_ADDR
47978: LD_VAR 0 6
47982: PUSH
47983: FOR_TO
47984: IFFALSE 49048
// begin if i > 4 then
47986: LD_VAR 0 8
47990: PUSH
47991: LD_INT 4
47993: GREATER
47994: IFFALSE 47998
// break ;
47996: GO 49048
// case i of 1 :
47998: LD_VAR 0 8
48002: PUSH
48003: LD_INT 1
48005: DOUBLE
48006: EQUAL
48007: IFTRUE 48011
48009: GO 48091
48011: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48012: LD_ADDR_VAR 0 12
48016: PUSH
48017: LD_VAR 0 18
48021: PPUSH
48022: LD_INT 22
48024: PUSH
48025: LD_VAR 0 16
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 58
48036: PUSH
48037: EMPTY
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 30
48045: PUSH
48046: LD_INT 32
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 30
48055: PUSH
48056: LD_INT 4
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 30
48065: PUSH
48066: LD_INT 5
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: PPUSH
48084: CALL_OW 72
48088: ST_TO_ADDR
48089: GO 48313
48091: LD_INT 2
48093: DOUBLE
48094: EQUAL
48095: IFTRUE 48099
48097: GO 48161
48099: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48100: LD_ADDR_VAR 0 12
48104: PUSH
48105: LD_VAR 0 18
48109: PPUSH
48110: LD_INT 22
48112: PUSH
48113: LD_VAR 0 16
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 30
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 30
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PPUSH
48154: CALL_OW 72
48158: ST_TO_ADDR
48159: GO 48313
48161: LD_INT 3
48163: DOUBLE
48164: EQUAL
48165: IFTRUE 48169
48167: GO 48231
48169: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48170: LD_ADDR_VAR 0 12
48174: PUSH
48175: LD_VAR 0 18
48179: PPUSH
48180: LD_INT 22
48182: PUSH
48183: LD_VAR 0 16
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 30
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 30
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PPUSH
48224: CALL_OW 72
48228: ST_TO_ADDR
48229: GO 48313
48231: LD_INT 4
48233: DOUBLE
48234: EQUAL
48235: IFTRUE 48239
48237: GO 48312
48239: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48240: LD_ADDR_VAR 0 12
48244: PUSH
48245: LD_VAR 0 18
48249: PPUSH
48250: LD_INT 22
48252: PUSH
48253: LD_VAR 0 16
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: LD_INT 30
48267: PUSH
48268: LD_INT 6
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 30
48277: PUSH
48278: LD_INT 7
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 30
48287: PUSH
48288: LD_INT 8
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PPUSH
48305: CALL_OW 72
48309: ST_TO_ADDR
48310: GO 48313
48312: POP
// if i = 1 then
48313: LD_VAR 0 8
48317: PUSH
48318: LD_INT 1
48320: EQUAL
48321: IFFALSE 48432
// begin tmp := [ ] ;
48323: LD_ADDR_VAR 0 19
48327: PUSH
48328: EMPTY
48329: ST_TO_ADDR
// for j in f do
48330: LD_ADDR_VAR 0 9
48334: PUSH
48335: LD_VAR 0 12
48339: PUSH
48340: FOR_IN
48341: IFFALSE 48414
// if GetBType ( j ) = b_bunker then
48343: LD_VAR 0 9
48347: PPUSH
48348: CALL_OW 266
48352: PUSH
48353: LD_INT 32
48355: EQUAL
48356: IFFALSE 48383
// tmp := Insert ( tmp , 1 , j ) else
48358: LD_ADDR_VAR 0 19
48362: PUSH
48363: LD_VAR 0 19
48367: PPUSH
48368: LD_INT 1
48370: PPUSH
48371: LD_VAR 0 9
48375: PPUSH
48376: CALL_OW 2
48380: ST_TO_ADDR
48381: GO 48412
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48383: LD_ADDR_VAR 0 19
48387: PUSH
48388: LD_VAR 0 19
48392: PPUSH
48393: LD_VAR 0 19
48397: PUSH
48398: LD_INT 1
48400: PLUS
48401: PPUSH
48402: LD_VAR 0 9
48406: PPUSH
48407: CALL_OW 2
48411: ST_TO_ADDR
48412: GO 48340
48414: POP
48415: POP
// if tmp then
48416: LD_VAR 0 19
48420: IFFALSE 48432
// f := tmp ;
48422: LD_ADDR_VAR 0 12
48426: PUSH
48427: LD_VAR 0 19
48431: ST_TO_ADDR
// end ; x := personel [ i ] ;
48432: LD_ADDR_VAR 0 13
48436: PUSH
48437: LD_VAR 0 6
48441: PUSH
48442: LD_VAR 0 8
48446: ARRAY
48447: ST_TO_ADDR
// if x = - 1 then
48448: LD_VAR 0 13
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: EQUAL
48457: IFFALSE 48666
// begin for j in f do
48459: LD_ADDR_VAR 0 9
48463: PUSH
48464: LD_VAR 0 12
48468: PUSH
48469: FOR_IN
48470: IFFALSE 48662
// repeat InitHc ;
48472: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48476: LD_VAR 0 9
48480: PPUSH
48481: CALL_OW 266
48485: PUSH
48486: LD_INT 5
48488: EQUAL
48489: IFFALSE 48559
// begin if UnitsInside ( j ) < 3 then
48491: LD_VAR 0 9
48495: PPUSH
48496: CALL_OW 313
48500: PUSH
48501: LD_INT 3
48503: LESS
48504: IFFALSE 48540
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48506: LD_INT 0
48508: PPUSH
48509: LD_INT 5
48511: PUSH
48512: LD_INT 8
48514: PUSH
48515: LD_INT 9
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: PUSH
48523: LD_VAR 0 17
48527: ARRAY
48528: PPUSH
48529: LD_VAR 0 4
48533: PPUSH
48534: CALL_OW 380
48538: GO 48557
// PrepareHuman ( false , i , skill ) ;
48540: LD_INT 0
48542: PPUSH
48543: LD_VAR 0 8
48547: PPUSH
48548: LD_VAR 0 4
48552: PPUSH
48553: CALL_OW 380
// end else
48557: GO 48576
// PrepareHuman ( false , i , skill ) ;
48559: LD_INT 0
48561: PPUSH
48562: LD_VAR 0 8
48566: PPUSH
48567: LD_VAR 0 4
48571: PPUSH
48572: CALL_OW 380
// un := CreateHuman ;
48576: LD_ADDR_VAR 0 14
48580: PUSH
48581: CALL_OW 44
48585: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48586: LD_ADDR_VAR 0 7
48590: PUSH
48591: LD_VAR 0 7
48595: PPUSH
48596: LD_INT 1
48598: PPUSH
48599: LD_VAR 0 14
48603: PPUSH
48604: CALL_OW 2
48608: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48609: LD_VAR 0 14
48613: PPUSH
48614: LD_VAR 0 9
48618: PPUSH
48619: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48623: LD_VAR 0 9
48627: PPUSH
48628: CALL_OW 313
48632: PUSH
48633: LD_INT 6
48635: EQUAL
48636: PUSH
48637: LD_VAR 0 9
48641: PPUSH
48642: CALL_OW 266
48646: PUSH
48647: LD_INT 32
48649: PUSH
48650: LD_INT 31
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: IN
48657: OR
48658: IFFALSE 48472
48660: GO 48469
48662: POP
48663: POP
// end else
48664: GO 49046
// for j = 1 to x do
48666: LD_ADDR_VAR 0 9
48670: PUSH
48671: DOUBLE
48672: LD_INT 1
48674: DEC
48675: ST_TO_ADDR
48676: LD_VAR 0 13
48680: PUSH
48681: FOR_TO
48682: IFFALSE 49044
// begin InitHc ;
48684: CALL_OW 19
// if not f then
48688: LD_VAR 0 12
48692: NOT
48693: IFFALSE 48782
// begin PrepareHuman ( false , i , skill ) ;
48695: LD_INT 0
48697: PPUSH
48698: LD_VAR 0 8
48702: PPUSH
48703: LD_VAR 0 4
48707: PPUSH
48708: CALL_OW 380
// un := CreateHuman ;
48712: LD_ADDR_VAR 0 14
48716: PUSH
48717: CALL_OW 44
48721: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48722: LD_ADDR_VAR 0 7
48726: PUSH
48727: LD_VAR 0 7
48731: PPUSH
48732: LD_INT 1
48734: PPUSH
48735: LD_VAR 0 14
48739: PPUSH
48740: CALL_OW 2
48744: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48745: LD_VAR 0 14
48749: PPUSH
48750: LD_VAR 0 1
48754: PPUSH
48755: CALL_OW 250
48759: PPUSH
48760: LD_VAR 0 1
48764: PPUSH
48765: CALL_OW 251
48769: PPUSH
48770: LD_INT 10
48772: PPUSH
48773: LD_INT 0
48775: PPUSH
48776: CALL_OW 50
// continue ;
48780: GO 48681
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48782: LD_VAR 0 12
48786: PUSH
48787: LD_INT 1
48789: ARRAY
48790: PPUSH
48791: CALL_OW 313
48795: PUSH
48796: LD_VAR 0 12
48800: PUSH
48801: LD_INT 1
48803: ARRAY
48804: PPUSH
48805: CALL_OW 266
48809: PUSH
48810: LD_INT 32
48812: PUSH
48813: LD_INT 31
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: IN
48820: AND
48821: PUSH
48822: LD_VAR 0 12
48826: PUSH
48827: LD_INT 1
48829: ARRAY
48830: PPUSH
48831: CALL_OW 313
48835: PUSH
48836: LD_INT 6
48838: EQUAL
48839: OR
48840: IFFALSE 48860
// f := Delete ( f , 1 ) ;
48842: LD_ADDR_VAR 0 12
48846: PUSH
48847: LD_VAR 0 12
48851: PPUSH
48852: LD_INT 1
48854: PPUSH
48855: CALL_OW 3
48859: ST_TO_ADDR
// if not f then
48860: LD_VAR 0 12
48864: NOT
48865: IFFALSE 48883
// begin x := x + 2 ;
48867: LD_ADDR_VAR 0 13
48871: PUSH
48872: LD_VAR 0 13
48876: PUSH
48877: LD_INT 2
48879: PLUS
48880: ST_TO_ADDR
// continue ;
48881: GO 48681
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48883: LD_VAR 0 12
48887: PUSH
48888: LD_INT 1
48890: ARRAY
48891: PPUSH
48892: CALL_OW 266
48896: PUSH
48897: LD_INT 5
48899: EQUAL
48900: IFFALSE 48974
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48902: LD_VAR 0 12
48906: PUSH
48907: LD_INT 1
48909: ARRAY
48910: PPUSH
48911: CALL_OW 313
48915: PUSH
48916: LD_INT 3
48918: LESS
48919: IFFALSE 48955
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48921: LD_INT 0
48923: PPUSH
48924: LD_INT 5
48926: PUSH
48927: LD_INT 8
48929: PUSH
48930: LD_INT 9
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: LIST
48937: PUSH
48938: LD_VAR 0 17
48942: ARRAY
48943: PPUSH
48944: LD_VAR 0 4
48948: PPUSH
48949: CALL_OW 380
48953: GO 48972
// PrepareHuman ( false , i , skill ) ;
48955: LD_INT 0
48957: PPUSH
48958: LD_VAR 0 8
48962: PPUSH
48963: LD_VAR 0 4
48967: PPUSH
48968: CALL_OW 380
// end else
48972: GO 48991
// PrepareHuman ( false , i , skill ) ;
48974: LD_INT 0
48976: PPUSH
48977: LD_VAR 0 8
48981: PPUSH
48982: LD_VAR 0 4
48986: PPUSH
48987: CALL_OW 380
// un := CreateHuman ;
48991: LD_ADDR_VAR 0 14
48995: PUSH
48996: CALL_OW 44
49000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49001: LD_ADDR_VAR 0 7
49005: PUSH
49006: LD_VAR 0 7
49010: PPUSH
49011: LD_INT 1
49013: PPUSH
49014: LD_VAR 0 14
49018: PPUSH
49019: CALL_OW 2
49023: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49024: LD_VAR 0 14
49028: PPUSH
49029: LD_VAR 0 12
49033: PUSH
49034: LD_INT 1
49036: ARRAY
49037: PPUSH
49038: CALL_OW 52
// end ;
49042: GO 48681
49044: POP
49045: POP
// end ;
49046: GO 47983
49048: POP
49049: POP
// result := result ^ buildings ;
49050: LD_ADDR_VAR 0 7
49054: PUSH
49055: LD_VAR 0 7
49059: PUSH
49060: LD_VAR 0 18
49064: ADD
49065: ST_TO_ADDR
// end else
49066: GO 49209
// begin for i = 1 to personel do
49068: LD_ADDR_VAR 0 8
49072: PUSH
49073: DOUBLE
49074: LD_INT 1
49076: DEC
49077: ST_TO_ADDR
49078: LD_VAR 0 6
49082: PUSH
49083: FOR_TO
49084: IFFALSE 49207
// begin if i > 4 then
49086: LD_VAR 0 8
49090: PUSH
49091: LD_INT 4
49093: GREATER
49094: IFFALSE 49098
// break ;
49096: GO 49207
// x := personel [ i ] ;
49098: LD_ADDR_VAR 0 13
49102: PUSH
49103: LD_VAR 0 6
49107: PUSH
49108: LD_VAR 0 8
49112: ARRAY
49113: ST_TO_ADDR
// if x = - 1 then
49114: LD_VAR 0 13
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: EQUAL
49123: IFFALSE 49127
// continue ;
49125: GO 49083
// PrepareHuman ( false , i , skill ) ;
49127: LD_INT 0
49129: PPUSH
49130: LD_VAR 0 8
49134: PPUSH
49135: LD_VAR 0 4
49139: PPUSH
49140: CALL_OW 380
// un := CreateHuman ;
49144: LD_ADDR_VAR 0 14
49148: PUSH
49149: CALL_OW 44
49153: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49154: LD_VAR 0 14
49158: PPUSH
49159: LD_VAR 0 1
49163: PPUSH
49164: CALL_OW 250
49168: PPUSH
49169: LD_VAR 0 1
49173: PPUSH
49174: CALL_OW 251
49178: PPUSH
49179: LD_INT 10
49181: PPUSH
49182: LD_INT 0
49184: PPUSH
49185: CALL_OW 50
// result := result ^ un ;
49189: LD_ADDR_VAR 0 7
49193: PUSH
49194: LD_VAR 0 7
49198: PUSH
49199: LD_VAR 0 14
49203: ADD
49204: ST_TO_ADDR
// end ;
49205: GO 49083
49207: POP
49208: POP
// end ; end ;
49209: LD_VAR 0 7
49213: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49214: LD_INT 0
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
49226: PPUSH
49227: PPUSH
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
// result := false ;
49232: LD_ADDR_VAR 0 3
49236: PUSH
49237: LD_INT 0
49239: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49240: LD_VAR 0 1
49244: NOT
49245: PUSH
49246: LD_VAR 0 1
49250: PPUSH
49251: CALL_OW 266
49255: PUSH
49256: LD_INT 32
49258: PUSH
49259: LD_INT 33
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: IN
49266: NOT
49267: OR
49268: IFFALSE 49272
// exit ;
49270: GO 50381
// nat := GetNation ( tower ) ;
49272: LD_ADDR_VAR 0 12
49276: PUSH
49277: LD_VAR 0 1
49281: PPUSH
49282: CALL_OW 248
49286: ST_TO_ADDR
// side := GetSide ( tower ) ;
49287: LD_ADDR_VAR 0 16
49291: PUSH
49292: LD_VAR 0 1
49296: PPUSH
49297: CALL_OW 255
49301: ST_TO_ADDR
// x := GetX ( tower ) ;
49302: LD_ADDR_VAR 0 10
49306: PUSH
49307: LD_VAR 0 1
49311: PPUSH
49312: CALL_OW 250
49316: ST_TO_ADDR
// y := GetY ( tower ) ;
49317: LD_ADDR_VAR 0 11
49321: PUSH
49322: LD_VAR 0 1
49326: PPUSH
49327: CALL_OW 251
49331: ST_TO_ADDR
// if not x or not y then
49332: LD_VAR 0 10
49336: NOT
49337: PUSH
49338: LD_VAR 0 11
49342: NOT
49343: OR
49344: IFFALSE 49348
// exit ;
49346: GO 50381
// weapon := 0 ;
49348: LD_ADDR_VAR 0 18
49352: PUSH
49353: LD_INT 0
49355: ST_TO_ADDR
// fac_list := [ ] ;
49356: LD_ADDR_VAR 0 17
49360: PUSH
49361: EMPTY
49362: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49363: LD_ADDR_VAR 0 6
49367: PUSH
49368: LD_VAR 0 1
49372: PPUSH
49373: CALL_OW 274
49377: PPUSH
49378: LD_VAR 0 2
49382: PPUSH
49383: LD_INT 0
49385: PPUSH
49386: CALL 46952 0 3
49390: PPUSH
49391: LD_INT 30
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PPUSH
49401: CALL_OW 72
49405: ST_TO_ADDR
// if not factories then
49406: LD_VAR 0 6
49410: NOT
49411: IFFALSE 49415
// exit ;
49413: GO 50381
// for i in factories do
49415: LD_ADDR_VAR 0 8
49419: PUSH
49420: LD_VAR 0 6
49424: PUSH
49425: FOR_IN
49426: IFFALSE 49451
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49428: LD_ADDR_VAR 0 17
49432: PUSH
49433: LD_VAR 0 17
49437: PUSH
49438: LD_VAR 0 8
49442: PPUSH
49443: CALL_OW 478
49447: UNION
49448: ST_TO_ADDR
49449: GO 49425
49451: POP
49452: POP
// if not fac_list then
49453: LD_VAR 0 17
49457: NOT
49458: IFFALSE 49462
// exit ;
49460: GO 50381
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49462: LD_ADDR_VAR 0 5
49466: PUSH
49467: LD_INT 4
49469: PUSH
49470: LD_INT 5
49472: PUSH
49473: LD_INT 9
49475: PUSH
49476: LD_INT 10
49478: PUSH
49479: LD_INT 6
49481: PUSH
49482: LD_INT 7
49484: PUSH
49485: LD_INT 11
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 27
49499: PUSH
49500: LD_INT 28
49502: PUSH
49503: LD_INT 26
49505: PUSH
49506: LD_INT 30
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 43
49517: PUSH
49518: LD_INT 44
49520: PUSH
49521: LD_INT 46
49523: PUSH
49524: LD_INT 45
49526: PUSH
49527: LD_INT 47
49529: PUSH
49530: LD_INT 49
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: LIST
49545: PUSH
49546: LD_VAR 0 12
49550: ARRAY
49551: ST_TO_ADDR
// list := list isect fac_list ;
49552: LD_ADDR_VAR 0 5
49556: PUSH
49557: LD_VAR 0 5
49561: PUSH
49562: LD_VAR 0 17
49566: ISECT
49567: ST_TO_ADDR
// if not list then
49568: LD_VAR 0 5
49572: NOT
49573: IFFALSE 49577
// exit ;
49575: GO 50381
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49577: LD_VAR 0 12
49581: PUSH
49582: LD_INT 3
49584: EQUAL
49585: PUSH
49586: LD_INT 49
49588: PUSH
49589: LD_VAR 0 5
49593: IN
49594: AND
49595: PUSH
49596: LD_INT 31
49598: PPUSH
49599: LD_VAR 0 16
49603: PPUSH
49604: CALL_OW 321
49608: PUSH
49609: LD_INT 2
49611: EQUAL
49612: AND
49613: IFFALSE 49673
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49615: LD_INT 22
49617: PUSH
49618: LD_VAR 0 16
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 35
49629: PUSH
49630: LD_INT 49
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 91
49639: PUSH
49640: LD_VAR 0 1
49644: PUSH
49645: LD_INT 10
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: PPUSH
49658: CALL_OW 69
49662: NOT
49663: IFFALSE 49673
// weapon := ru_time_lapser ;
49665: LD_ADDR_VAR 0 18
49669: PUSH
49670: LD_INT 49
49672: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49673: LD_VAR 0 12
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: IN
49688: PUSH
49689: LD_INT 11
49691: PUSH
49692: LD_VAR 0 5
49696: IN
49697: PUSH
49698: LD_INT 30
49700: PUSH
49701: LD_VAR 0 5
49705: IN
49706: OR
49707: AND
49708: PUSH
49709: LD_INT 6
49711: PPUSH
49712: LD_VAR 0 16
49716: PPUSH
49717: CALL_OW 321
49721: PUSH
49722: LD_INT 2
49724: EQUAL
49725: AND
49726: IFFALSE 49891
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49728: LD_INT 22
49730: PUSH
49731: LD_VAR 0 16
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 35
49745: PUSH
49746: LD_INT 11
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 35
49755: PUSH
49756: LD_INT 30
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 91
49770: PUSH
49771: LD_VAR 0 1
49775: PUSH
49776: LD_INT 18
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: PPUSH
49789: CALL_OW 69
49793: NOT
49794: PUSH
49795: LD_INT 22
49797: PUSH
49798: LD_VAR 0 16
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 30
49812: PUSH
49813: LD_INT 32
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 30
49822: PUSH
49823: LD_INT 33
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 91
49837: PUSH
49838: LD_VAR 0 1
49842: PUSH
49843: LD_INT 12
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: PPUSH
49859: CALL_OW 69
49863: PUSH
49864: LD_INT 2
49866: GREATER
49867: AND
49868: IFFALSE 49891
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49870: LD_ADDR_VAR 0 18
49874: PUSH
49875: LD_INT 11
49877: PUSH
49878: LD_INT 30
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_VAR 0 12
49889: ARRAY
49890: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49891: LD_VAR 0 18
49895: NOT
49896: PUSH
49897: LD_INT 40
49899: PPUSH
49900: LD_VAR 0 16
49904: PPUSH
49905: CALL_OW 321
49909: PUSH
49910: LD_INT 2
49912: EQUAL
49913: AND
49914: PUSH
49915: LD_INT 7
49917: PUSH
49918: LD_VAR 0 5
49922: IN
49923: PUSH
49924: LD_INT 28
49926: PUSH
49927: LD_VAR 0 5
49931: IN
49932: OR
49933: PUSH
49934: LD_INT 45
49936: PUSH
49937: LD_VAR 0 5
49941: IN
49942: OR
49943: AND
49944: IFFALSE 50198
// begin hex := GetHexInfo ( x , y ) ;
49946: LD_ADDR_VAR 0 4
49950: PUSH
49951: LD_VAR 0 10
49955: PPUSH
49956: LD_VAR 0 11
49960: PPUSH
49961: CALL_OW 546
49965: ST_TO_ADDR
// if hex [ 1 ] then
49966: LD_VAR 0 4
49970: PUSH
49971: LD_INT 1
49973: ARRAY
49974: IFFALSE 49978
// exit ;
49976: GO 50381
// height := hex [ 2 ] ;
49978: LD_ADDR_VAR 0 15
49982: PUSH
49983: LD_VAR 0 4
49987: PUSH
49988: LD_INT 2
49990: ARRAY
49991: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49992: LD_ADDR_VAR 0 14
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 3
50005: PUSH
50006: LD_INT 5
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: ST_TO_ADDR
// for i in tmp do
50015: LD_ADDR_VAR 0 8
50019: PUSH
50020: LD_VAR 0 14
50024: PUSH
50025: FOR_IN
50026: IFFALSE 50196
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50028: LD_ADDR_VAR 0 9
50032: PUSH
50033: LD_VAR 0 10
50037: PPUSH
50038: LD_VAR 0 8
50042: PPUSH
50043: LD_INT 5
50045: PPUSH
50046: CALL_OW 272
50050: PUSH
50051: LD_VAR 0 11
50055: PPUSH
50056: LD_VAR 0 8
50060: PPUSH
50061: LD_INT 5
50063: PPUSH
50064: CALL_OW 273
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50073: LD_VAR 0 9
50077: PUSH
50078: LD_INT 1
50080: ARRAY
50081: PPUSH
50082: LD_VAR 0 9
50086: PUSH
50087: LD_INT 2
50089: ARRAY
50090: PPUSH
50091: CALL_OW 488
50095: IFFALSE 50194
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50097: LD_ADDR_VAR 0 4
50101: PUSH
50102: LD_VAR 0 9
50106: PUSH
50107: LD_INT 1
50109: ARRAY
50110: PPUSH
50111: LD_VAR 0 9
50115: PUSH
50116: LD_INT 2
50118: ARRAY
50119: PPUSH
50120: CALL_OW 546
50124: ST_TO_ADDR
// if hex [ 1 ] then
50125: LD_VAR 0 4
50129: PUSH
50130: LD_INT 1
50132: ARRAY
50133: IFFALSE 50137
// continue ;
50135: GO 50025
// h := hex [ 2 ] ;
50137: LD_ADDR_VAR 0 13
50141: PUSH
50142: LD_VAR 0 4
50146: PUSH
50147: LD_INT 2
50149: ARRAY
50150: ST_TO_ADDR
// if h + 7 < height then
50151: LD_VAR 0 13
50155: PUSH
50156: LD_INT 7
50158: PLUS
50159: PUSH
50160: LD_VAR 0 15
50164: LESS
50165: IFFALSE 50194
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50167: LD_ADDR_VAR 0 18
50171: PUSH
50172: LD_INT 7
50174: PUSH
50175: LD_INT 28
50177: PUSH
50178: LD_INT 45
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: PUSH
50186: LD_VAR 0 12
50190: ARRAY
50191: ST_TO_ADDR
// break ;
50192: GO 50196
// end ; end ; end ;
50194: GO 50025
50196: POP
50197: POP
// end ; if not weapon then
50198: LD_VAR 0 18
50202: NOT
50203: IFFALSE 50263
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50205: LD_ADDR_VAR 0 5
50209: PUSH
50210: LD_VAR 0 5
50214: PUSH
50215: LD_INT 11
50217: PUSH
50218: LD_INT 30
50220: PUSH
50221: LD_INT 49
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: DIFF
50229: ST_TO_ADDR
// if not list then
50230: LD_VAR 0 5
50234: NOT
50235: IFFALSE 50239
// exit ;
50237: GO 50381
// weapon := list [ rand ( 1 , list ) ] ;
50239: LD_ADDR_VAR 0 18
50243: PUSH
50244: LD_VAR 0 5
50248: PUSH
50249: LD_INT 1
50251: PPUSH
50252: LD_VAR 0 5
50256: PPUSH
50257: CALL_OW 12
50261: ARRAY
50262: ST_TO_ADDR
// end ; if weapon then
50263: LD_VAR 0 18
50267: IFFALSE 50381
// begin tmp := CostOfWeapon ( weapon ) ;
50269: LD_ADDR_VAR 0 14
50273: PUSH
50274: LD_VAR 0 18
50278: PPUSH
50279: CALL_OW 451
50283: ST_TO_ADDR
// j := GetBase ( tower ) ;
50284: LD_ADDR_VAR 0 9
50288: PUSH
50289: LD_VAR 0 1
50293: PPUSH
50294: CALL_OW 274
50298: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50299: LD_VAR 0 9
50303: PPUSH
50304: LD_INT 1
50306: PPUSH
50307: CALL_OW 275
50311: PUSH
50312: LD_VAR 0 14
50316: PUSH
50317: LD_INT 1
50319: ARRAY
50320: GREATEREQUAL
50321: PUSH
50322: LD_VAR 0 9
50326: PPUSH
50327: LD_INT 2
50329: PPUSH
50330: CALL_OW 275
50334: PUSH
50335: LD_VAR 0 14
50339: PUSH
50340: LD_INT 2
50342: ARRAY
50343: GREATEREQUAL
50344: AND
50345: PUSH
50346: LD_VAR 0 9
50350: PPUSH
50351: LD_INT 3
50353: PPUSH
50354: CALL_OW 275
50358: PUSH
50359: LD_VAR 0 14
50363: PUSH
50364: LD_INT 3
50366: ARRAY
50367: GREATEREQUAL
50368: AND
50369: IFFALSE 50381
// result := weapon ;
50371: LD_ADDR_VAR 0 3
50375: PUSH
50376: LD_VAR 0 18
50380: ST_TO_ADDR
// end ; end ;
50381: LD_VAR 0 3
50385: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50386: LD_INT 0
50388: PPUSH
50389: PPUSH
// result := true ;
50390: LD_ADDR_VAR 0 3
50394: PUSH
50395: LD_INT 1
50397: ST_TO_ADDR
// if array1 = array2 then
50398: LD_VAR 0 1
50402: PUSH
50403: LD_VAR 0 2
50407: EQUAL
50408: IFFALSE 50468
// begin for i = 1 to array1 do
50410: LD_ADDR_VAR 0 4
50414: PUSH
50415: DOUBLE
50416: LD_INT 1
50418: DEC
50419: ST_TO_ADDR
50420: LD_VAR 0 1
50424: PUSH
50425: FOR_TO
50426: IFFALSE 50464
// if array1 [ i ] <> array2 [ i ] then
50428: LD_VAR 0 1
50432: PUSH
50433: LD_VAR 0 4
50437: ARRAY
50438: PUSH
50439: LD_VAR 0 2
50443: PUSH
50444: LD_VAR 0 4
50448: ARRAY
50449: NONEQUAL
50450: IFFALSE 50462
// begin result := false ;
50452: LD_ADDR_VAR 0 3
50456: PUSH
50457: LD_INT 0
50459: ST_TO_ADDR
// break ;
50460: GO 50464
// end ;
50462: GO 50425
50464: POP
50465: POP
// end else
50466: GO 50476
// result := false ;
50468: LD_ADDR_VAR 0 3
50472: PUSH
50473: LD_INT 0
50475: ST_TO_ADDR
// end ;
50476: LD_VAR 0 3
50480: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50481: LD_INT 0
50483: PPUSH
50484: PPUSH
// if not array1 or not array2 then
50485: LD_VAR 0 1
50489: NOT
50490: PUSH
50491: LD_VAR 0 2
50495: NOT
50496: OR
50497: IFFALSE 50501
// exit ;
50499: GO 50565
// result := true ;
50501: LD_ADDR_VAR 0 3
50505: PUSH
50506: LD_INT 1
50508: ST_TO_ADDR
// for i = 1 to array1 do
50509: LD_ADDR_VAR 0 4
50513: PUSH
50514: DOUBLE
50515: LD_INT 1
50517: DEC
50518: ST_TO_ADDR
50519: LD_VAR 0 1
50523: PUSH
50524: FOR_TO
50525: IFFALSE 50563
// if array1 [ i ] <> array2 [ i ] then
50527: LD_VAR 0 1
50531: PUSH
50532: LD_VAR 0 4
50536: ARRAY
50537: PUSH
50538: LD_VAR 0 2
50542: PUSH
50543: LD_VAR 0 4
50547: ARRAY
50548: NONEQUAL
50549: IFFALSE 50561
// begin result := false ;
50551: LD_ADDR_VAR 0 3
50555: PUSH
50556: LD_INT 0
50558: ST_TO_ADDR
// break ;
50559: GO 50563
// end ;
50561: GO 50524
50563: POP
50564: POP
// end ;
50565: LD_VAR 0 3
50569: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50570: LD_INT 0
50572: PPUSH
50573: PPUSH
50574: PPUSH
// pom := GetBase ( fac ) ;
50575: LD_ADDR_VAR 0 5
50579: PUSH
50580: LD_VAR 0 1
50584: PPUSH
50585: CALL_OW 274
50589: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50590: LD_ADDR_VAR 0 4
50594: PUSH
50595: LD_VAR 0 2
50599: PUSH
50600: LD_INT 1
50602: ARRAY
50603: PPUSH
50604: LD_VAR 0 2
50608: PUSH
50609: LD_INT 2
50611: ARRAY
50612: PPUSH
50613: LD_VAR 0 2
50617: PUSH
50618: LD_INT 3
50620: ARRAY
50621: PPUSH
50622: LD_VAR 0 2
50626: PUSH
50627: LD_INT 4
50629: ARRAY
50630: PPUSH
50631: CALL_OW 449
50635: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50636: LD_ADDR_VAR 0 3
50640: PUSH
50641: LD_VAR 0 5
50645: PPUSH
50646: LD_INT 1
50648: PPUSH
50649: CALL_OW 275
50653: PUSH
50654: LD_VAR 0 4
50658: PUSH
50659: LD_INT 1
50661: ARRAY
50662: GREATEREQUAL
50663: PUSH
50664: LD_VAR 0 5
50668: PPUSH
50669: LD_INT 2
50671: PPUSH
50672: CALL_OW 275
50676: PUSH
50677: LD_VAR 0 4
50681: PUSH
50682: LD_INT 2
50684: ARRAY
50685: GREATEREQUAL
50686: AND
50687: PUSH
50688: LD_VAR 0 5
50692: PPUSH
50693: LD_INT 3
50695: PPUSH
50696: CALL_OW 275
50700: PUSH
50701: LD_VAR 0 4
50705: PUSH
50706: LD_INT 3
50708: ARRAY
50709: GREATEREQUAL
50710: AND
50711: ST_TO_ADDR
// end ;
50712: LD_VAR 0 3
50716: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50717: LD_INT 0
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
// pom := GetBase ( building ) ;
50723: LD_ADDR_VAR 0 3
50727: PUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: CALL_OW 274
50737: ST_TO_ADDR
// if not pom then
50738: LD_VAR 0 3
50742: NOT
50743: IFFALSE 50747
// exit ;
50745: GO 50917
// btype := GetBType ( building ) ;
50747: LD_ADDR_VAR 0 5
50751: PUSH
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 266
50761: ST_TO_ADDR
// if btype = b_armoury then
50762: LD_VAR 0 5
50766: PUSH
50767: LD_INT 4
50769: EQUAL
50770: IFFALSE 50780
// btype := b_barracks ;
50772: LD_ADDR_VAR 0 5
50776: PUSH
50777: LD_INT 5
50779: ST_TO_ADDR
// if btype = b_depot then
50780: LD_VAR 0 5
50784: PUSH
50785: LD_INT 0
50787: EQUAL
50788: IFFALSE 50798
// btype := b_warehouse ;
50790: LD_ADDR_VAR 0 5
50794: PUSH
50795: LD_INT 1
50797: ST_TO_ADDR
// if btype = b_workshop then
50798: LD_VAR 0 5
50802: PUSH
50803: LD_INT 2
50805: EQUAL
50806: IFFALSE 50816
// btype := b_factory ;
50808: LD_ADDR_VAR 0 5
50812: PUSH
50813: LD_INT 3
50815: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50816: LD_ADDR_VAR 0 4
50820: PUSH
50821: LD_VAR 0 5
50825: PPUSH
50826: LD_VAR 0 1
50830: PPUSH
50831: CALL_OW 248
50835: PPUSH
50836: CALL_OW 450
50840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50841: LD_ADDR_VAR 0 2
50845: PUSH
50846: LD_VAR 0 3
50850: PPUSH
50851: LD_INT 1
50853: PPUSH
50854: CALL_OW 275
50858: PUSH
50859: LD_VAR 0 4
50863: PUSH
50864: LD_INT 1
50866: ARRAY
50867: GREATEREQUAL
50868: PUSH
50869: LD_VAR 0 3
50873: PPUSH
50874: LD_INT 2
50876: PPUSH
50877: CALL_OW 275
50881: PUSH
50882: LD_VAR 0 4
50886: PUSH
50887: LD_INT 2
50889: ARRAY
50890: GREATEREQUAL
50891: AND
50892: PUSH
50893: LD_VAR 0 3
50897: PPUSH
50898: LD_INT 3
50900: PPUSH
50901: CALL_OW 275
50905: PUSH
50906: LD_VAR 0 4
50910: PUSH
50911: LD_INT 3
50913: ARRAY
50914: GREATEREQUAL
50915: AND
50916: ST_TO_ADDR
// end ;
50917: LD_VAR 0 2
50921: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50922: LD_INT 0
50924: PPUSH
50925: PPUSH
50926: PPUSH
// pom := GetBase ( building ) ;
50927: LD_ADDR_VAR 0 4
50931: PUSH
50932: LD_VAR 0 1
50936: PPUSH
50937: CALL_OW 274
50941: ST_TO_ADDR
// if not pom then
50942: LD_VAR 0 4
50946: NOT
50947: IFFALSE 50951
// exit ;
50949: GO 51052
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50951: LD_ADDR_VAR 0 5
50955: PUSH
50956: LD_VAR 0 2
50960: PPUSH
50961: LD_VAR 0 1
50965: PPUSH
50966: CALL_OW 248
50970: PPUSH
50971: CALL_OW 450
50975: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50976: LD_ADDR_VAR 0 3
50980: PUSH
50981: LD_VAR 0 4
50985: PPUSH
50986: LD_INT 1
50988: PPUSH
50989: CALL_OW 275
50993: PUSH
50994: LD_VAR 0 5
50998: PUSH
50999: LD_INT 1
51001: ARRAY
51002: GREATEREQUAL
51003: PUSH
51004: LD_VAR 0 4
51008: PPUSH
51009: LD_INT 2
51011: PPUSH
51012: CALL_OW 275
51016: PUSH
51017: LD_VAR 0 5
51021: PUSH
51022: LD_INT 2
51024: ARRAY
51025: GREATEREQUAL
51026: AND
51027: PUSH
51028: LD_VAR 0 4
51032: PPUSH
51033: LD_INT 3
51035: PPUSH
51036: CALL_OW 275
51040: PUSH
51041: LD_VAR 0 5
51045: PUSH
51046: LD_INT 3
51048: ARRAY
51049: GREATEREQUAL
51050: AND
51051: ST_TO_ADDR
// end ;
51052: LD_VAR 0 3
51056: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51057: LD_INT 0
51059: PPUSH
51060: PPUSH
51061: PPUSH
51062: PPUSH
51063: PPUSH
51064: PPUSH
51065: PPUSH
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
// result := false ;
51070: LD_ADDR_VAR 0 8
51074: PUSH
51075: LD_INT 0
51077: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51078: LD_VAR 0 5
51082: NOT
51083: PUSH
51084: LD_VAR 0 1
51088: NOT
51089: OR
51090: PUSH
51091: LD_VAR 0 2
51095: NOT
51096: OR
51097: PUSH
51098: LD_VAR 0 3
51102: NOT
51103: OR
51104: IFFALSE 51108
// exit ;
51106: GO 51922
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51108: LD_ADDR_VAR 0 14
51112: PUSH
51113: LD_VAR 0 1
51117: PPUSH
51118: LD_VAR 0 2
51122: PPUSH
51123: LD_VAR 0 3
51127: PPUSH
51128: LD_VAR 0 4
51132: PPUSH
51133: LD_VAR 0 5
51137: PUSH
51138: LD_INT 1
51140: ARRAY
51141: PPUSH
51142: CALL_OW 248
51146: PPUSH
51147: LD_INT 0
51149: PPUSH
51150: CALL 53155 0 6
51154: ST_TO_ADDR
// if not hexes then
51155: LD_VAR 0 14
51159: NOT
51160: IFFALSE 51164
// exit ;
51162: GO 51922
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51164: LD_ADDR_VAR 0 17
51168: PUSH
51169: LD_VAR 0 5
51173: PPUSH
51174: LD_INT 22
51176: PUSH
51177: LD_VAR 0 13
51181: PPUSH
51182: CALL_OW 255
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 30
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 30
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PPUSH
51223: CALL_OW 72
51227: ST_TO_ADDR
// for i = 1 to hexes do
51228: LD_ADDR_VAR 0 9
51232: PUSH
51233: DOUBLE
51234: LD_INT 1
51236: DEC
51237: ST_TO_ADDR
51238: LD_VAR 0 14
51242: PUSH
51243: FOR_TO
51244: IFFALSE 51920
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51246: LD_ADDR_VAR 0 13
51250: PUSH
51251: LD_VAR 0 14
51255: PUSH
51256: LD_VAR 0 9
51260: ARRAY
51261: PUSH
51262: LD_INT 1
51264: ARRAY
51265: PPUSH
51266: LD_VAR 0 14
51270: PUSH
51271: LD_VAR 0 9
51275: ARRAY
51276: PUSH
51277: LD_INT 2
51279: ARRAY
51280: PPUSH
51281: CALL_OW 428
51285: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51286: LD_VAR 0 14
51290: PUSH
51291: LD_VAR 0 9
51295: ARRAY
51296: PUSH
51297: LD_INT 1
51299: ARRAY
51300: PPUSH
51301: LD_VAR 0 14
51305: PUSH
51306: LD_VAR 0 9
51310: ARRAY
51311: PUSH
51312: LD_INT 2
51314: ARRAY
51315: PPUSH
51316: CALL_OW 351
51320: PUSH
51321: LD_VAR 0 14
51325: PUSH
51326: LD_VAR 0 9
51330: ARRAY
51331: PUSH
51332: LD_INT 1
51334: ARRAY
51335: PPUSH
51336: LD_VAR 0 14
51340: PUSH
51341: LD_VAR 0 9
51345: ARRAY
51346: PUSH
51347: LD_INT 2
51349: ARRAY
51350: PPUSH
51351: CALL_OW 488
51355: NOT
51356: OR
51357: PUSH
51358: LD_VAR 0 13
51362: PPUSH
51363: CALL_OW 247
51367: PUSH
51368: LD_INT 3
51370: EQUAL
51371: OR
51372: IFFALSE 51378
// exit ;
51374: POP
51375: POP
51376: GO 51922
// if not tmp then
51378: LD_VAR 0 13
51382: NOT
51383: IFFALSE 51387
// continue ;
51385: GO 51243
// result := true ;
51387: LD_ADDR_VAR 0 8
51391: PUSH
51392: LD_INT 1
51394: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51395: LD_VAR 0 6
51399: PUSH
51400: LD_VAR 0 13
51404: PPUSH
51405: CALL_OW 247
51409: PUSH
51410: LD_INT 2
51412: EQUAL
51413: AND
51414: PUSH
51415: LD_VAR 0 13
51419: PPUSH
51420: CALL_OW 263
51424: PUSH
51425: LD_INT 1
51427: EQUAL
51428: AND
51429: IFFALSE 51593
// begin if IsDrivenBy ( tmp ) then
51431: LD_VAR 0 13
51435: PPUSH
51436: CALL_OW 311
51440: IFFALSE 51444
// continue ;
51442: GO 51243
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51444: LD_VAR 0 6
51448: PPUSH
51449: LD_INT 3
51451: PUSH
51452: LD_INT 60
51454: PUSH
51455: EMPTY
51456: LIST
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: LD_INT 55
51467: PUSH
51468: EMPTY
51469: LIST
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PPUSH
51479: CALL_OW 72
51483: IFFALSE 51591
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51485: LD_ADDR_VAR 0 18
51489: PUSH
51490: LD_VAR 0 6
51494: PPUSH
51495: LD_INT 3
51497: PUSH
51498: LD_INT 60
51500: PUSH
51501: EMPTY
51502: LIST
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: LD_INT 55
51513: PUSH
51514: EMPTY
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PPUSH
51525: CALL_OW 72
51529: PUSH
51530: LD_INT 1
51532: ARRAY
51533: ST_TO_ADDR
// if IsInUnit ( driver ) then
51534: LD_VAR 0 18
51538: PPUSH
51539: CALL_OW 310
51543: IFFALSE 51554
// ComExit ( driver ) ;
51545: LD_VAR 0 18
51549: PPUSH
51550: CALL 76935 0 1
// AddComEnterUnit ( driver , tmp ) ;
51554: LD_VAR 0 18
51558: PPUSH
51559: LD_VAR 0 13
51563: PPUSH
51564: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51568: LD_VAR 0 18
51572: PPUSH
51573: LD_VAR 0 7
51577: PPUSH
51578: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51582: LD_VAR 0 18
51586: PPUSH
51587: CALL_OW 181
// end ; continue ;
51591: GO 51243
// end ; if not cleaners or not tmp in cleaners then
51593: LD_VAR 0 6
51597: NOT
51598: PUSH
51599: LD_VAR 0 13
51603: PUSH
51604: LD_VAR 0 6
51608: IN
51609: NOT
51610: OR
51611: IFFALSE 51918
// begin if dep then
51613: LD_VAR 0 17
51617: IFFALSE 51753
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51619: LD_ADDR_VAR 0 16
51623: PUSH
51624: LD_VAR 0 17
51628: PUSH
51629: LD_INT 1
51631: ARRAY
51632: PPUSH
51633: CALL_OW 250
51637: PPUSH
51638: LD_VAR 0 17
51642: PUSH
51643: LD_INT 1
51645: ARRAY
51646: PPUSH
51647: CALL_OW 254
51651: PPUSH
51652: LD_INT 5
51654: PPUSH
51655: CALL_OW 272
51659: PUSH
51660: LD_VAR 0 17
51664: PUSH
51665: LD_INT 1
51667: ARRAY
51668: PPUSH
51669: CALL_OW 251
51673: PPUSH
51674: LD_VAR 0 17
51678: PUSH
51679: LD_INT 1
51681: ARRAY
51682: PPUSH
51683: CALL_OW 254
51687: PPUSH
51688: LD_INT 5
51690: PPUSH
51691: CALL_OW 273
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51700: LD_VAR 0 16
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PPUSH
51709: LD_VAR 0 16
51713: PUSH
51714: LD_INT 2
51716: ARRAY
51717: PPUSH
51718: CALL_OW 488
51722: IFFALSE 51753
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51724: LD_VAR 0 13
51728: PPUSH
51729: LD_VAR 0 16
51733: PUSH
51734: LD_INT 1
51736: ARRAY
51737: PPUSH
51738: LD_VAR 0 16
51742: PUSH
51743: LD_INT 2
51745: ARRAY
51746: PPUSH
51747: CALL_OW 111
// continue ;
51751: GO 51243
// end ; end ; r := GetDir ( tmp ) ;
51753: LD_ADDR_VAR 0 15
51757: PUSH
51758: LD_VAR 0 13
51762: PPUSH
51763: CALL_OW 254
51767: ST_TO_ADDR
// if r = 5 then
51768: LD_VAR 0 15
51772: PUSH
51773: LD_INT 5
51775: EQUAL
51776: IFFALSE 51786
// r := 0 ;
51778: LD_ADDR_VAR 0 15
51782: PUSH
51783: LD_INT 0
51785: ST_TO_ADDR
// for j = r to 5 do
51786: LD_ADDR_VAR 0 10
51790: PUSH
51791: DOUBLE
51792: LD_VAR 0 15
51796: DEC
51797: ST_TO_ADDR
51798: LD_INT 5
51800: PUSH
51801: FOR_TO
51802: IFFALSE 51916
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51804: LD_ADDR_VAR 0 11
51808: PUSH
51809: LD_VAR 0 13
51813: PPUSH
51814: CALL_OW 250
51818: PPUSH
51819: LD_VAR 0 10
51823: PPUSH
51824: LD_INT 2
51826: PPUSH
51827: CALL_OW 272
51831: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51832: LD_ADDR_VAR 0 12
51836: PUSH
51837: LD_VAR 0 13
51841: PPUSH
51842: CALL_OW 251
51846: PPUSH
51847: LD_VAR 0 10
51851: PPUSH
51852: LD_INT 2
51854: PPUSH
51855: CALL_OW 273
51859: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51860: LD_VAR 0 11
51864: PPUSH
51865: LD_VAR 0 12
51869: PPUSH
51870: CALL_OW 488
51874: PUSH
51875: LD_VAR 0 11
51879: PPUSH
51880: LD_VAR 0 12
51884: PPUSH
51885: CALL_OW 428
51889: NOT
51890: AND
51891: IFFALSE 51914
// begin ComMoveXY ( tmp , _x , _y ) ;
51893: LD_VAR 0 13
51897: PPUSH
51898: LD_VAR 0 11
51902: PPUSH
51903: LD_VAR 0 12
51907: PPUSH
51908: CALL_OW 111
// break ;
51912: GO 51916
// end ; end ;
51914: GO 51801
51916: POP
51917: POP
// end ; end ;
51918: GO 51243
51920: POP
51921: POP
// end ;
51922: LD_VAR 0 8
51926: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51927: LD_INT 0
51929: PPUSH
// result := true ;
51930: LD_ADDR_VAR 0 3
51934: PUSH
51935: LD_INT 1
51937: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51938: LD_VAR 0 2
51942: PUSH
51943: LD_INT 24
51945: DOUBLE
51946: EQUAL
51947: IFTRUE 51957
51949: LD_INT 33
51951: DOUBLE
51952: EQUAL
51953: IFTRUE 51957
51955: GO 51982
51957: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51958: LD_ADDR_VAR 0 3
51962: PUSH
51963: LD_INT 32
51965: PPUSH
51966: LD_VAR 0 1
51970: PPUSH
51971: CALL_OW 321
51975: PUSH
51976: LD_INT 2
51978: EQUAL
51979: ST_TO_ADDR
51980: GO 52298
51982: LD_INT 20
51984: DOUBLE
51985: EQUAL
51986: IFTRUE 51990
51988: GO 52015
51990: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51991: LD_ADDR_VAR 0 3
51995: PUSH
51996: LD_INT 6
51998: PPUSH
51999: LD_VAR 0 1
52003: PPUSH
52004: CALL_OW 321
52008: PUSH
52009: LD_INT 2
52011: EQUAL
52012: ST_TO_ADDR
52013: GO 52298
52015: LD_INT 22
52017: DOUBLE
52018: EQUAL
52019: IFTRUE 52029
52021: LD_INT 36
52023: DOUBLE
52024: EQUAL
52025: IFTRUE 52029
52027: GO 52054
52029: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52030: LD_ADDR_VAR 0 3
52034: PUSH
52035: LD_INT 15
52037: PPUSH
52038: LD_VAR 0 1
52042: PPUSH
52043: CALL_OW 321
52047: PUSH
52048: LD_INT 2
52050: EQUAL
52051: ST_TO_ADDR
52052: GO 52298
52054: LD_INT 30
52056: DOUBLE
52057: EQUAL
52058: IFTRUE 52062
52060: GO 52087
52062: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52063: LD_ADDR_VAR 0 3
52067: PUSH
52068: LD_INT 20
52070: PPUSH
52071: LD_VAR 0 1
52075: PPUSH
52076: CALL_OW 321
52080: PUSH
52081: LD_INT 2
52083: EQUAL
52084: ST_TO_ADDR
52085: GO 52298
52087: LD_INT 28
52089: DOUBLE
52090: EQUAL
52091: IFTRUE 52101
52093: LD_INT 21
52095: DOUBLE
52096: EQUAL
52097: IFTRUE 52101
52099: GO 52126
52101: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52102: LD_ADDR_VAR 0 3
52106: PUSH
52107: LD_INT 21
52109: PPUSH
52110: LD_VAR 0 1
52114: PPUSH
52115: CALL_OW 321
52119: PUSH
52120: LD_INT 2
52122: EQUAL
52123: ST_TO_ADDR
52124: GO 52298
52126: LD_INT 16
52128: DOUBLE
52129: EQUAL
52130: IFTRUE 52134
52132: GO 52159
52134: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52135: LD_ADDR_VAR 0 3
52139: PUSH
52140: LD_INT 84
52142: PPUSH
52143: LD_VAR 0 1
52147: PPUSH
52148: CALL_OW 321
52152: PUSH
52153: LD_INT 2
52155: EQUAL
52156: ST_TO_ADDR
52157: GO 52298
52159: LD_INT 19
52161: DOUBLE
52162: EQUAL
52163: IFTRUE 52173
52165: LD_INT 23
52167: DOUBLE
52168: EQUAL
52169: IFTRUE 52173
52171: GO 52198
52173: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52174: LD_ADDR_VAR 0 3
52178: PUSH
52179: LD_INT 83
52181: PPUSH
52182: LD_VAR 0 1
52186: PPUSH
52187: CALL_OW 321
52191: PUSH
52192: LD_INT 2
52194: EQUAL
52195: ST_TO_ADDR
52196: GO 52298
52198: LD_INT 17
52200: DOUBLE
52201: EQUAL
52202: IFTRUE 52206
52204: GO 52231
52206: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52207: LD_ADDR_VAR 0 3
52211: PUSH
52212: LD_INT 39
52214: PPUSH
52215: LD_VAR 0 1
52219: PPUSH
52220: CALL_OW 321
52224: PUSH
52225: LD_INT 2
52227: EQUAL
52228: ST_TO_ADDR
52229: GO 52298
52231: LD_INT 18
52233: DOUBLE
52234: EQUAL
52235: IFTRUE 52239
52237: GO 52264
52239: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52240: LD_ADDR_VAR 0 3
52244: PUSH
52245: LD_INT 40
52247: PPUSH
52248: LD_VAR 0 1
52252: PPUSH
52253: CALL_OW 321
52257: PUSH
52258: LD_INT 2
52260: EQUAL
52261: ST_TO_ADDR
52262: GO 52298
52264: LD_INT 27
52266: DOUBLE
52267: EQUAL
52268: IFTRUE 52272
52270: GO 52297
52272: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52273: LD_ADDR_VAR 0 3
52277: PUSH
52278: LD_INT 35
52280: PPUSH
52281: LD_VAR 0 1
52285: PPUSH
52286: CALL_OW 321
52290: PUSH
52291: LD_INT 2
52293: EQUAL
52294: ST_TO_ADDR
52295: GO 52298
52297: POP
// end ;
52298: LD_VAR 0 3
52302: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52303: LD_INT 0
52305: PPUSH
52306: PPUSH
52307: PPUSH
52308: PPUSH
52309: PPUSH
52310: PPUSH
52311: PPUSH
52312: PPUSH
52313: PPUSH
52314: PPUSH
52315: PPUSH
// result := false ;
52316: LD_ADDR_VAR 0 6
52320: PUSH
52321: LD_INT 0
52323: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52324: LD_VAR 0 1
52328: NOT
52329: PUSH
52330: LD_VAR 0 1
52334: PPUSH
52335: CALL_OW 266
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: IN
52350: NOT
52351: OR
52352: PUSH
52353: LD_VAR 0 2
52357: NOT
52358: OR
52359: PUSH
52360: LD_VAR 0 5
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 4
52379: PUSH
52380: LD_INT 5
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: IN
52391: NOT
52392: OR
52393: PUSH
52394: LD_VAR 0 3
52398: PPUSH
52399: LD_VAR 0 4
52403: PPUSH
52404: CALL_OW 488
52408: NOT
52409: OR
52410: IFFALSE 52414
// exit ;
52412: GO 53150
// side := GetSide ( depot ) ;
52414: LD_ADDR_VAR 0 9
52418: PUSH
52419: LD_VAR 0 1
52423: PPUSH
52424: CALL_OW 255
52428: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52429: LD_VAR 0 9
52433: PPUSH
52434: LD_VAR 0 2
52438: PPUSH
52439: CALL 51927 0 2
52443: NOT
52444: IFFALSE 52448
// exit ;
52446: GO 53150
// pom := GetBase ( depot ) ;
52448: LD_ADDR_VAR 0 10
52452: PUSH
52453: LD_VAR 0 1
52457: PPUSH
52458: CALL_OW 274
52462: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52463: LD_ADDR_VAR 0 11
52467: PUSH
52468: LD_VAR 0 2
52472: PPUSH
52473: LD_VAR 0 1
52477: PPUSH
52478: CALL_OW 248
52482: PPUSH
52483: CALL_OW 450
52487: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52488: LD_VAR 0 10
52492: PPUSH
52493: LD_INT 1
52495: PPUSH
52496: CALL_OW 275
52500: PUSH
52501: LD_VAR 0 11
52505: PUSH
52506: LD_INT 1
52508: ARRAY
52509: GREATEREQUAL
52510: PUSH
52511: LD_VAR 0 10
52515: PPUSH
52516: LD_INT 2
52518: PPUSH
52519: CALL_OW 275
52523: PUSH
52524: LD_VAR 0 11
52528: PUSH
52529: LD_INT 2
52531: ARRAY
52532: GREATEREQUAL
52533: AND
52534: PUSH
52535: LD_VAR 0 10
52539: PPUSH
52540: LD_INT 3
52542: PPUSH
52543: CALL_OW 275
52547: PUSH
52548: LD_VAR 0 11
52552: PUSH
52553: LD_INT 3
52555: ARRAY
52556: GREATEREQUAL
52557: AND
52558: NOT
52559: IFFALSE 52563
// exit ;
52561: GO 53150
// if GetBType ( depot ) = b_depot then
52563: LD_VAR 0 1
52567: PPUSH
52568: CALL_OW 266
52572: PUSH
52573: LD_INT 0
52575: EQUAL
52576: IFFALSE 52588
// dist := 28 else
52578: LD_ADDR_VAR 0 14
52582: PUSH
52583: LD_INT 28
52585: ST_TO_ADDR
52586: GO 52596
// dist := 36 ;
52588: LD_ADDR_VAR 0 14
52592: PUSH
52593: LD_INT 36
52595: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52596: LD_VAR 0 1
52600: PPUSH
52601: LD_VAR 0 3
52605: PPUSH
52606: LD_VAR 0 4
52610: PPUSH
52611: CALL_OW 297
52615: PUSH
52616: LD_VAR 0 14
52620: GREATER
52621: IFFALSE 52625
// exit ;
52623: GO 53150
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52625: LD_ADDR_VAR 0 12
52629: PUSH
52630: LD_VAR 0 2
52634: PPUSH
52635: LD_VAR 0 3
52639: PPUSH
52640: LD_VAR 0 4
52644: PPUSH
52645: LD_VAR 0 5
52649: PPUSH
52650: LD_VAR 0 1
52654: PPUSH
52655: CALL_OW 248
52659: PPUSH
52660: LD_INT 0
52662: PPUSH
52663: CALL 53155 0 6
52667: ST_TO_ADDR
// if not hexes then
52668: LD_VAR 0 12
52672: NOT
52673: IFFALSE 52677
// exit ;
52675: GO 53150
// hex := GetHexInfo ( x , y ) ;
52677: LD_ADDR_VAR 0 15
52681: PUSH
52682: LD_VAR 0 3
52686: PPUSH
52687: LD_VAR 0 4
52691: PPUSH
52692: CALL_OW 546
52696: ST_TO_ADDR
// if hex [ 1 ] then
52697: LD_VAR 0 15
52701: PUSH
52702: LD_INT 1
52704: ARRAY
52705: IFFALSE 52709
// exit ;
52707: GO 53150
// height := hex [ 2 ] ;
52709: LD_ADDR_VAR 0 13
52713: PUSH
52714: LD_VAR 0 15
52718: PUSH
52719: LD_INT 2
52721: ARRAY
52722: ST_TO_ADDR
// for i = 1 to hexes do
52723: LD_ADDR_VAR 0 7
52727: PUSH
52728: DOUBLE
52729: LD_INT 1
52731: DEC
52732: ST_TO_ADDR
52733: LD_VAR 0 12
52737: PUSH
52738: FOR_TO
52739: IFFALSE 53069
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52741: LD_VAR 0 12
52745: PUSH
52746: LD_VAR 0 7
52750: ARRAY
52751: PUSH
52752: LD_INT 1
52754: ARRAY
52755: PPUSH
52756: LD_VAR 0 12
52760: PUSH
52761: LD_VAR 0 7
52765: ARRAY
52766: PUSH
52767: LD_INT 2
52769: ARRAY
52770: PPUSH
52771: CALL_OW 488
52775: NOT
52776: PUSH
52777: LD_VAR 0 12
52781: PUSH
52782: LD_VAR 0 7
52786: ARRAY
52787: PUSH
52788: LD_INT 1
52790: ARRAY
52791: PPUSH
52792: LD_VAR 0 12
52796: PUSH
52797: LD_VAR 0 7
52801: ARRAY
52802: PUSH
52803: LD_INT 2
52805: ARRAY
52806: PPUSH
52807: CALL_OW 428
52811: PUSH
52812: LD_INT 0
52814: GREATER
52815: OR
52816: PUSH
52817: LD_VAR 0 12
52821: PUSH
52822: LD_VAR 0 7
52826: ARRAY
52827: PUSH
52828: LD_INT 1
52830: ARRAY
52831: PPUSH
52832: LD_VAR 0 12
52836: PUSH
52837: LD_VAR 0 7
52841: ARRAY
52842: PUSH
52843: LD_INT 2
52845: ARRAY
52846: PPUSH
52847: CALL_OW 351
52851: OR
52852: IFFALSE 52858
// exit ;
52854: POP
52855: POP
52856: GO 53150
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52858: LD_ADDR_VAR 0 8
52862: PUSH
52863: LD_VAR 0 12
52867: PUSH
52868: LD_VAR 0 7
52872: ARRAY
52873: PUSH
52874: LD_INT 1
52876: ARRAY
52877: PPUSH
52878: LD_VAR 0 12
52882: PUSH
52883: LD_VAR 0 7
52887: ARRAY
52888: PUSH
52889: LD_INT 2
52891: ARRAY
52892: PPUSH
52893: CALL_OW 546
52897: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52898: LD_VAR 0 8
52902: PUSH
52903: LD_INT 1
52905: ARRAY
52906: PUSH
52907: LD_VAR 0 8
52911: PUSH
52912: LD_INT 2
52914: ARRAY
52915: PUSH
52916: LD_VAR 0 13
52920: PUSH
52921: LD_INT 2
52923: PLUS
52924: GREATER
52925: OR
52926: PUSH
52927: LD_VAR 0 8
52931: PUSH
52932: LD_INT 2
52934: ARRAY
52935: PUSH
52936: LD_VAR 0 13
52940: PUSH
52941: LD_INT 2
52943: MINUS
52944: LESS
52945: OR
52946: PUSH
52947: LD_VAR 0 8
52951: PUSH
52952: LD_INT 3
52954: ARRAY
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 8
52961: PUSH
52962: LD_INT 9
52964: PUSH
52965: LD_INT 10
52967: PUSH
52968: LD_INT 11
52970: PUSH
52971: LD_INT 12
52973: PUSH
52974: LD_INT 13
52976: PUSH
52977: LD_INT 16
52979: PUSH
52980: LD_INT 17
52982: PUSH
52983: LD_INT 18
52985: PUSH
52986: LD_INT 19
52988: PUSH
52989: LD_INT 20
52991: PUSH
52992: LD_INT 21
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: IN
53010: NOT
53011: OR
53012: PUSH
53013: LD_VAR 0 8
53017: PUSH
53018: LD_INT 5
53020: ARRAY
53021: NOT
53022: OR
53023: PUSH
53024: LD_VAR 0 8
53028: PUSH
53029: LD_INT 6
53031: ARRAY
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 7
53041: PUSH
53042: LD_INT 9
53044: PUSH
53045: LD_INT 10
53047: PUSH
53048: LD_INT 11
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: IN
53059: NOT
53060: OR
53061: IFFALSE 53067
// exit ;
53063: POP
53064: POP
53065: GO 53150
// end ;
53067: GO 52738
53069: POP
53070: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53071: LD_VAR 0 9
53075: PPUSH
53076: LD_VAR 0 3
53080: PPUSH
53081: LD_VAR 0 4
53085: PPUSH
53086: LD_INT 20
53088: PPUSH
53089: CALL 45102 0 4
53093: PUSH
53094: LD_INT 4
53096: ARRAY
53097: IFFALSE 53101
// exit ;
53099: GO 53150
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53101: LD_VAR 0 2
53105: PUSH
53106: LD_INT 29
53108: PUSH
53109: LD_INT 30
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: IN
53116: PUSH
53117: LD_VAR 0 3
53121: PPUSH
53122: LD_VAR 0 4
53126: PPUSH
53127: LD_VAR 0 9
53131: PPUSH
53132: CALL_OW 440
53136: NOT
53137: AND
53138: IFFALSE 53142
// exit ;
53140: GO 53150
// result := true ;
53142: LD_ADDR_VAR 0 6
53146: PUSH
53147: LD_INT 1
53149: ST_TO_ADDR
// end ;
53150: LD_VAR 0 6
53154: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53155: LD_INT 0
53157: PPUSH
53158: PPUSH
53159: PPUSH
53160: PPUSH
53161: PPUSH
53162: PPUSH
53163: PPUSH
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
// result = [ ] ;
53215: LD_ADDR_VAR 0 7
53219: PUSH
53220: EMPTY
53221: ST_TO_ADDR
// temp_list = [ ] ;
53222: LD_ADDR_VAR 0 9
53226: PUSH
53227: EMPTY
53228: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53229: LD_VAR 0 4
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: LD_INT 4
53248: PUSH
53249: LD_INT 5
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: IN
53260: NOT
53261: PUSH
53262: LD_VAR 0 1
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: IN
53277: PUSH
53278: LD_VAR 0 5
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: LD_INT 3
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: LIST
53296: IN
53297: NOT
53298: AND
53299: OR
53300: IFFALSE 53304
// exit ;
53302: GO 71695
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53304: LD_VAR 0 1
53308: PUSH
53309: LD_INT 6
53311: PUSH
53312: LD_INT 7
53314: PUSH
53315: LD_INT 8
53317: PUSH
53318: LD_INT 13
53320: PUSH
53321: LD_INT 12
53323: PUSH
53324: LD_INT 15
53326: PUSH
53327: LD_INT 11
53329: PUSH
53330: LD_INT 14
53332: PUSH
53333: LD_INT 10
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: IN
53347: IFFALSE 53357
// btype = b_lab ;
53349: LD_ADDR_VAR 0 1
53353: PUSH
53354: LD_INT 6
53356: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53357: LD_VAR 0 6
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: IN
53376: NOT
53377: PUSH
53378: LD_VAR 0 1
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 6
53397: PUSH
53398: LD_INT 36
53400: PUSH
53401: LD_INT 4
53403: PUSH
53404: LD_INT 5
53406: PUSH
53407: LD_INT 31
53409: PUSH
53410: LD_INT 32
53412: PUSH
53413: LD_INT 33
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: IN
53429: NOT
53430: PUSH
53431: LD_VAR 0 6
53435: PUSH
53436: LD_INT 1
53438: EQUAL
53439: AND
53440: OR
53441: PUSH
53442: LD_VAR 0 1
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: IN
53457: NOT
53458: PUSH
53459: LD_VAR 0 6
53463: PUSH
53464: LD_INT 2
53466: EQUAL
53467: AND
53468: OR
53469: IFFALSE 53479
// mode = 0 ;
53471: LD_ADDR_VAR 0 6
53475: PUSH
53476: LD_INT 0
53478: ST_TO_ADDR
// case mode of 0 :
53479: LD_VAR 0 6
53483: PUSH
53484: LD_INT 0
53486: DOUBLE
53487: EQUAL
53488: IFTRUE 53492
53490: GO 64945
53492: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53493: LD_ADDR_VAR 0 11
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53686: LD_ADDR_VAR 0 12
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53882: LD_ADDR_VAR 0 13
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 3
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54081: LD_ADDR_VAR 0 14
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 3
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54277: LD_ADDR_VAR 0 15
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 3
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54470: LD_ADDR_VAR 0 16
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 3
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54663: LD_ADDR_VAR 0 17
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54893: LD_ADDR_VAR 0 18
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55123: LD_ADDR_VAR 0 19
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55353: LD_ADDR_VAR 0 20
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55583: LD_ADDR_VAR 0 21
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55813: LD_ADDR_VAR 0 22
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56043: LD_ADDR_VAR 0 23
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 3
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56323: LD_ADDR_VAR 0 24
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56599: LD_ADDR_VAR 0 25
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56873: LD_ADDR_VAR 0 26
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57149: LD_ADDR_VAR 0 27
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: NEG
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57429: LD_ADDR_VAR 0 28
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57711: LD_ADDR_VAR 0 29
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57990: LD_ADDR_VAR 0 30
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 3
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 3
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58268: LD_ADDR_VAR 0 31
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: LD_INT 3
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58546: LD_ADDR_VAR 0 32
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58824: LD_ADDR_VAR 0 33
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PUSH
59016: LD_INT 3
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59103: LD_ADDR_VAR 0 34
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 3
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 3
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59383: LD_ADDR_VAR 0 35
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59495: LD_ADDR_VAR 0 36
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59607: LD_ADDR_VAR 0 37
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59719: LD_ADDR_VAR 0 38
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59831: LD_ADDR_VAR 0 39
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59943: LD_ADDR_VAR 0 40
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60055: LD_ADDR_VAR 0 41
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 2
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: NEG
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: LD_INT 3
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 3
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60405: LD_ADDR_VAR 0 42
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 3
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: LD_INT 3
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 3
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 3
60714: NEG
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60755: LD_ADDR_VAR 0 43
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 3
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61103: LD_ADDR_VAR 0 44
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: LD_INT 2
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 2
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 3
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: NEG
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61453: LD_ADDR_VAR 0 45
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 2
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: LD_INT 3
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 3
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: LD_INT 3
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: LD_INT 3
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 3
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 3
61750: NEG
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 3
61762: NEG
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61803: LD_ADDR_VAR 0 46
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 2
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: NEG
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: NEG
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 3
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: LD_INT 3
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 2
62088: NEG
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: NEG
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62151: LD_ADDR_VAR 0 47
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 2
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62302: LD_ADDR_VAR 0 48
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 2
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62449: LD_ADDR_VAR 0 49
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: LD_INT 2
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62593: LD_ADDR_VAR 0 50
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 1
62651: NEG
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 2
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 2
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62737: LD_ADDR_VAR 0 51
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 2
62860: NEG
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62884: LD_ADDR_VAR 0 52
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 2
63011: NEG
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63035: LD_ADDR_VAR 0 53
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 2
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: NEG
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63265: LD_ADDR_VAR 0 54
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 2
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 2
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: LD_INT 1
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: NEG
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 2
63452: NEG
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: NEG
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63495: LD_ADDR_VAR 0 55
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 2
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 2
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: LD_INT 2
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: NEG
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: LD_INT 2
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63725: LD_ADDR_VAR 0 56
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63955: LD_ADDR_VAR 0 57
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: LD_INT 2
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 2
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 2
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 2
64142: NEG
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64185: LD_ADDR_VAR 0 58
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 2
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: LD_INT 2
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: LD_INT 1
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: NEG
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64415: LD_ADDR_VAR 0 59
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64503: LD_ADDR_VAR 0 60
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64591: LD_ADDR_VAR 0 61
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: LD_INT 1
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64679: LD_ADDR_VAR 0 62
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64767: LD_ADDR_VAR 0 63
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64855: LD_ADDR_VAR 0 64
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: ST_TO_ADDR
// end ; 1 :
64943: GO 70840
64945: LD_INT 1
64947: DOUBLE
64948: EQUAL
64949: IFTRUE 64953
64951: GO 67576
64953: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64954: LD_ADDR_VAR 0 11
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: LD_INT 3
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 3
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 2
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64998: LD_ADDR_VAR 0 12
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 3
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 3
65026: PUSH
65027: LD_INT 1
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: LIST
65038: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65039: LD_ADDR_VAR 0 13
65043: PUSH
65044: LD_INT 3
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: LD_INT 3
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 2
65066: PUSH
65067: LD_INT 3
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: LIST
65078: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65079: LD_ADDR_VAR 0 14
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 3
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65120: LD_ADDR_VAR 0 15
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65164: LD_ADDR_VAR 0 16
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: LD_INT 3
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 3
65183: NEG
65184: PUSH
65185: LD_INT 2
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: LD_INT 3
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: LIST
65209: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65210: LD_ADDR_VAR 0 17
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: LD_INT 3
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: LD_INT 2
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65254: LD_ADDR_VAR 0 18
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65295: LD_ADDR_VAR 0 19
65299: PUSH
65300: LD_INT 3
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 3
65312: PUSH
65313: LD_INT 3
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 2
65322: PUSH
65323: LD_INT 3
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65335: LD_ADDR_VAR 0 20
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: LD_INT 3
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 3
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: NEG
65363: PUSH
65364: LD_INT 2
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: LIST
65375: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65376: LD_ADDR_VAR 0 21
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 3
65394: NEG
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 3
65405: NEG
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: LIST
65419: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65420: LD_ADDR_VAR 0 22
65424: PUSH
65425: LD_INT 2
65427: NEG
65428: PUSH
65429: LD_INT 3
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 3
65439: NEG
65440: PUSH
65441: LD_INT 2
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 3
65451: NEG
65452: PUSH
65453: LD_INT 3
65455: NEG
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65466: LD_ADDR_VAR 0 23
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: LD_INT 3
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 1
65484: NEG
65485: PUSH
65486: LD_INT 4
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65510: LD_ADDR_VAR 0 24
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 4
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65551: LD_ADDR_VAR 0 25
65555: PUSH
65556: LD_INT 3
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 4
65568: PUSH
65569: LD_INT 3
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: LD_INT 4
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65591: LD_ADDR_VAR 0 26
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: LD_INT 3
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 4
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: NEG
65619: PUSH
65620: LD_INT 3
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65632: LD_ADDR_VAR 0 27
65636: PUSH
65637: LD_INT 3
65639: NEG
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 3
65650: NEG
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 4
65661: NEG
65662: PUSH
65663: LD_INT 1
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: LIST
65675: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65676: LD_ADDR_VAR 0 28
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: LD_INT 3
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 3
65695: NEG
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 4
65707: NEG
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65722: LD_ADDR_VAR 0 29
65726: PUSH
65727: LD_INT 1
65729: NEG
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: LD_INT 3
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 1
65752: PUSH
65753: LD_INT 2
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: LD_INT 4
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: LD_INT 4
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: LD_INT 5
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: LD_INT 5
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 4
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: LD_INT 6
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 6
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: LD_INT 5
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65877: LD_ADDR_VAR 0 30
65881: PUSH
65882: LD_INT 2
65884: PUSH
65885: LD_INT 1
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 3
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 3
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 4
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 4
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 4
65946: PUSH
65947: LD_INT 1
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 5
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 5
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 5
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 6
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 6
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66020: LD_ADDR_VAR 0 31
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: LD_INT 3
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 2
66047: PUSH
66048: LD_INT 3
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 4
66057: PUSH
66058: LD_INT 3
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 4
66067: PUSH
66068: LD_INT 4
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 3
66077: PUSH
66078: LD_INT 4
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 5
66087: PUSH
66088: LD_INT 4
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 5
66097: PUSH
66098: LD_INT 5
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 4
66107: PUSH
66108: LD_INT 5
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 6
66117: PUSH
66118: LD_INT 5
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 6
66127: PUSH
66128: LD_INT 6
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 5
66137: PUSH
66138: LD_INT 6
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66159: LD_ADDR_VAR 0 32
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: LD_INT 3
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: LD_INT 3
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: LD_INT 2
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: LD_INT 4
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: LD_INT 4
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: LD_INT 3
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: LD_INT 5
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 5
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: LD_INT 4
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 6
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: LD_INT 6
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 5
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66302: LD_ADDR_VAR 0 33
66306: PUSH
66307: LD_INT 2
66309: NEG
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 3
66320: NEG
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 3
66331: NEG
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 3
66343: NEG
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 4
66354: NEG
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 4
66365: NEG
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 4
66377: NEG
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 5
66388: NEG
66389: PUSH
66390: LD_INT 0
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 5
66399: NEG
66400: PUSH
66401: LD_INT 1
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 5
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 6
66422: NEG
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 6
66433: NEG
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66457: LD_ADDR_VAR 0 34
66461: PUSH
66462: LD_INT 2
66464: NEG
66465: PUSH
66466: LD_INT 3
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 3
66476: NEG
66477: PUSH
66478: LD_INT 2
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 3
66488: NEG
66489: PUSH
66490: LD_INT 3
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 3
66500: NEG
66501: PUSH
66502: LD_INT 4
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 4
66512: NEG
66513: PUSH
66514: LD_INT 3
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 4
66524: NEG
66525: PUSH
66526: LD_INT 4
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 4
66536: NEG
66537: PUSH
66538: LD_INT 5
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 5
66548: NEG
66549: PUSH
66550: LD_INT 4
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 5
66560: NEG
66561: PUSH
66562: LD_INT 5
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 5
66572: NEG
66573: PUSH
66574: LD_INT 6
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 6
66584: NEG
66585: PUSH
66586: LD_INT 5
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 6
66596: NEG
66597: PUSH
66598: LD_INT 6
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66620: LD_ADDR_VAR 0 41
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: LD_INT 2
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: LD_INT 3
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 1
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66664: LD_ADDR_VAR 0 42
66668: PUSH
66669: LD_INT 2
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 2
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 3
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66705: LD_ADDR_VAR 0 43
66709: PUSH
66710: LD_INT 2
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 3
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 2
66732: PUSH
66733: LD_INT 3
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66745: LD_ADDR_VAR 0 44
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: LD_INT 3
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 2
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: LIST
66785: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66786: LD_ADDR_VAR 0 45
66790: PUSH
66791: LD_INT 2
66793: NEG
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: LD_INT 1
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: LIST
66829: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66830: LD_ADDR_VAR 0 46
66834: PUSH
66835: LD_INT 2
66837: NEG
66838: PUSH
66839: LD_INT 2
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 2
66849: NEG
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: NEG
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66876: LD_ADDR_VAR 0 47
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 3
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66909: LD_ADDR_VAR 0 48
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: LD_INT 2
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66940: LD_ADDR_VAR 0 49
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: LD_INT 1
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66969: LD_ADDR_VAR 0 50
66973: PUSH
66974: LD_INT 2
66976: PUSH
66977: LD_INT 3
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: LD_INT 3
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66998: LD_ADDR_VAR 0 51
67002: PUSH
67003: LD_INT 1
67005: NEG
67006: PUSH
67007: LD_INT 2
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 2
67016: NEG
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67029: LD_ADDR_VAR 0 52
67033: PUSH
67034: LD_INT 3
67036: NEG
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 3
67048: NEG
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67062: LD_ADDR_VAR 0 53
67066: PUSH
67067: LD_INT 1
67069: NEG
67070: PUSH
67071: LD_INT 3
67073: NEG
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 3
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 1
67092: PUSH
67093: LD_INT 2
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67106: LD_ADDR_VAR 0 54
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 3
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: LIST
67146: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67147: LD_ADDR_VAR 0 55
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 3
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 2
67174: PUSH
67175: LD_INT 3
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67187: LD_ADDR_VAR 0 56
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: LD_INT 3
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: NEG
67215: PUSH
67216: LD_INT 2
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: LIST
67227: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67228: LD_ADDR_VAR 0 57
67232: PUSH
67233: LD_INT 2
67235: NEG
67236: PUSH
67237: LD_INT 1
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 3
67246: NEG
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 3
67257: NEG
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67272: LD_ADDR_VAR 0 58
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: LD_INT 3
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 3
67291: NEG
67292: PUSH
67293: LD_INT 2
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 3
67303: NEG
67304: PUSH
67305: LD_INT 3
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67318: LD_ADDR_VAR 0 59
67322: PUSH
67323: LD_INT 1
67325: NEG
67326: PUSH
67327: LD_INT 2
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 2
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67362: LD_ADDR_VAR 0 60
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 2
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 2
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: LIST
67402: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67403: LD_ADDR_VAR 0 61
67407: PUSH
67408: LD_INT 2
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 2
67420: PUSH
67421: LD_INT 2
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67443: LD_ADDR_VAR 0 62
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: LD_INT 2
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 2
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: PUSH
67472: LD_INT 1
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67484: LD_ADDR_VAR 0 63
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: LD_INT 1
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: LD_INT 0
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: LIST
67527: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67528: LD_ADDR_VAR 0 64
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: LD_INT 2
67539: NEG
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 2
67547: NEG
67548: PUSH
67549: LD_INT 1
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 2
67559: NEG
67560: PUSH
67561: LD_INT 2
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: LIST
67573: ST_TO_ADDR
// end ; 2 :
67574: GO 70840
67576: LD_INT 2
67578: DOUBLE
67579: EQUAL
67580: IFTRUE 67584
67582: GO 70839
67584: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67585: LD_ADDR_VAR 0 29
67589: PUSH
67590: LD_INT 4
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 4
67602: PUSH
67603: LD_INT 1
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 5
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 5
67623: PUSH
67624: LD_INT 1
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 4
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 3
67653: PUSH
67654: LD_INT 1
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: LD_INT 2
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 5
67675: PUSH
67676: LD_INT 2
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 3
67685: PUSH
67686: LD_INT 3
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 4
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 4
67715: PUSH
67716: LD_INT 4
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 3
67725: PUSH
67726: LD_INT 4
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 2
67745: PUSH
67746: LD_INT 2
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 4
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 2
67765: PUSH
67766: LD_INT 4
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 4
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 1
67795: PUSH
67796: LD_INT 4
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 1
67805: PUSH
67806: LD_INT 5
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: LD_INT 5
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: NEG
67826: PUSH
67827: LD_INT 4
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: LD_INT 3
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 2
67847: PUSH
67848: LD_INT 5
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 2
67857: NEG
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: NEG
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 3
67879: NEG
67880: PUSH
67881: LD_INT 1
67883: NEG
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 2
67891: NEG
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: NEG
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 4
67924: NEG
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 4
67935: NEG
67936: PUSH
67937: LD_INT 1
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 4
67947: NEG
67948: PUSH
67949: LD_INT 2
67951: NEG
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 2
67959: NEG
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 4
67970: NEG
67971: PUSH
67972: LD_INT 4
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 4
67982: NEG
67983: PUSH
67984: LD_INT 5
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 3
67994: NEG
67995: PUSH
67996: LD_INT 4
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: LD_INT 3
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: LD_INT 3
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 5
68030: NEG
68031: PUSH
68032: LD_INT 4
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 5
68042: NEG
68043: PUSH
68044: LD_INT 5
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: LD_INT 5
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 5
68066: NEG
68067: PUSH
68068: LD_INT 3
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68123: LD_ADDR_VAR 0 30
68127: PUSH
68128: LD_INT 4
68130: PUSH
68131: LD_INT 4
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 4
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 5
68150: PUSH
68151: LD_INT 4
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 5
68160: PUSH
68161: LD_INT 5
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 4
68170: PUSH
68171: LD_INT 5
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 3
68180: PUSH
68181: LD_INT 4
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 3
68190: PUSH
68191: LD_INT 3
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 5
68200: PUSH
68201: LD_INT 3
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: LD_INT 5
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: LD_INT 3
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: LD_INT 3
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: LD_INT 4
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: LD_INT 4
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 1
68270: NEG
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: LD_INT 2
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 2
68292: PUSH
68293: LD_INT 4
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 2
68302: NEG
68303: PUSH
68304: LD_INT 2
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 4
68313: NEG
68314: PUSH
68315: LD_INT 0
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 4
68324: NEG
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 3
68336: NEG
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 4
68358: NEG
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 5
68369: NEG
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 5
68380: NEG
68381: PUSH
68382: LD_INT 1
68384: NEG
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 5
68392: NEG
68393: PUSH
68394: LD_INT 2
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 3
68404: NEG
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: LD_INT 3
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: NEG
68428: PUSH
68429: LD_INT 4
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 2
68439: NEG
68440: PUSH
68441: LD_INT 3
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 2
68451: NEG
68452: PUSH
68453: LD_INT 2
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 3
68463: NEG
68464: PUSH
68465: LD_INT 2
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 4
68475: NEG
68476: PUSH
68477: LD_INT 3
68479: NEG
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 4
68487: NEG
68488: PUSH
68489: LD_INT 4
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 2
68499: NEG
68500: PUSH
68501: LD_INT 4
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 4
68511: NEG
68512: PUSH
68513: LD_INT 2
68515: NEG
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: LD_INT 4
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 0
68534: PUSH
68535: LD_INT 5
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 1
68545: PUSH
68546: LD_INT 4
68548: NEG
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: LD_INT 3
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 3
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: NEG
68579: PUSH
68580: LD_INT 4
68582: NEG
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 1
68590: NEG
68591: PUSH
68592: LD_INT 5
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 2
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 2
68613: NEG
68614: PUSH
68615: LD_INT 5
68617: NEG
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68670: LD_ADDR_VAR 0 31
68674: PUSH
68675: LD_INT 0
68677: PUSH
68678: LD_INT 4
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: LD_INT 3
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 1
68697: PUSH
68698: LD_INT 4
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 1
68707: PUSH
68708: LD_INT 5
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: LD_INT 5
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: PUSH
68729: LD_INT 4
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 1
68738: NEG
68739: PUSH
68740: LD_INT 3
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 2
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 2
68759: NEG
68760: PUSH
68761: LD_INT 3
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 3
68770: NEG
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 3
68781: NEG
68782: PUSH
68783: LD_INT 1
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 2
68793: NEG
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 3
68815: NEG
68816: PUSH
68817: LD_INT 1
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 4
68826: NEG
68827: PUSH
68828: LD_INT 0
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 4
68837: NEG
68838: PUSH
68839: LD_INT 1
68841: NEG
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 4
68849: NEG
68850: PUSH
68851: LD_INT 2
68853: NEG
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 2
68861: NEG
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 4
68872: NEG
68873: PUSH
68874: LD_INT 4
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 4
68884: NEG
68885: PUSH
68886: LD_INT 5
68888: NEG
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 3
68896: NEG
68897: PUSH
68898: LD_INT 4
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: LD_INT 3
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 4
68920: NEG
68921: PUSH
68922: LD_INT 3
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 5
68932: NEG
68933: PUSH
68934: LD_INT 4
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 5
68944: NEG
68945: PUSH
68946: LD_INT 5
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: LD_INT 5
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 5
68968: NEG
68969: PUSH
68970: LD_INT 3
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 0
68980: PUSH
68981: LD_INT 3
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: LD_INT 4
68994: NEG
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: LD_INT 3
69005: NEG
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: LD_INT 2
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: LD_INT 2
69027: NEG
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 1
69035: NEG
69036: PUSH
69037: LD_INT 3
69039: NEG
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 1
69047: NEG
69048: PUSH
69049: LD_INT 4
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 2
69059: PUSH
69060: LD_INT 2
69062: NEG
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 2
69070: NEG
69071: PUSH
69072: LD_INT 4
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 4
69082: PUSH
69083: LD_INT 0
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 4
69092: PUSH
69093: LD_INT 1
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 5
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 5
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 4
69123: PUSH
69124: LD_INT 1
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 3
69133: PUSH
69134: LD_INT 0
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 3
69143: PUSH
69144: LD_INT 1
69146: NEG
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 3
69154: PUSH
69155: LD_INT 2
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 5
69165: PUSH
69166: LD_INT 2
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69220: LD_ADDR_VAR 0 32
69224: PUSH
69225: LD_INT 4
69227: NEG
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 4
69238: NEG
69239: PUSH
69240: LD_INT 1
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 3
69250: NEG
69251: PUSH
69252: LD_INT 0
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 3
69261: NEG
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 4
69272: NEG
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 5
69283: NEG
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 5
69294: NEG
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 5
69306: NEG
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 3
69318: NEG
69319: PUSH
69320: LD_INT 2
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 3
69329: NEG
69330: PUSH
69331: LD_INT 3
69333: NEG
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 3
69341: NEG
69342: PUSH
69343: LD_INT 4
69345: NEG
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 2
69353: NEG
69354: PUSH
69355: LD_INT 3
69357: NEG
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 2
69365: NEG
69366: PUSH
69367: LD_INT 2
69369: NEG
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 3
69377: NEG
69378: PUSH
69379: LD_INT 2
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: LD_INT 3
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 4
69401: NEG
69402: PUSH
69403: LD_INT 4
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: LD_INT 4
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 4
69425: NEG
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 0
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: LD_INT 5
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: PUSH
69460: LD_INT 4
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: LD_INT 3
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: LD_INT 3
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 1
69492: NEG
69493: PUSH
69494: LD_INT 4
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 1
69504: NEG
69505: PUSH
69506: LD_INT 5
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 2
69516: PUSH
69517: LD_INT 3
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 2
69527: NEG
69528: PUSH
69529: LD_INT 5
69531: NEG
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 3
69539: PUSH
69540: LD_INT 0
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 3
69549: PUSH
69550: LD_INT 1
69552: NEG
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 4
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 4
69570: PUSH
69571: LD_INT 1
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: LD_INT 1
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 2
69590: PUSH
69591: LD_INT 0
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 2
69600: PUSH
69601: LD_INT 1
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 4
69622: PUSH
69623: LD_INT 2
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 4
69632: PUSH
69633: LD_INT 4
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 4
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 5
69652: PUSH
69653: LD_INT 4
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 5
69662: PUSH
69663: LD_INT 5
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 4
69672: PUSH
69673: LD_INT 5
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 3
69682: PUSH
69683: LD_INT 4
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 3
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 5
69702: PUSH
69703: LD_INT 3
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 3
69712: PUSH
69713: LD_INT 5
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69767: LD_ADDR_VAR 0 33
69771: PUSH
69772: LD_INT 4
69774: NEG
69775: PUSH
69776: LD_INT 4
69778: NEG
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 4
69786: NEG
69787: PUSH
69788: LD_INT 5
69790: NEG
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 3
69798: NEG
69799: PUSH
69800: LD_INT 4
69802: NEG
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 3
69810: NEG
69811: PUSH
69812: LD_INT 3
69814: NEG
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 4
69822: NEG
69823: PUSH
69824: LD_INT 3
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 5
69834: NEG
69835: PUSH
69836: LD_INT 4
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 5
69846: NEG
69847: PUSH
69848: LD_INT 5
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: LD_INT 5
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 5
69870: NEG
69871: PUSH
69872: LD_INT 3
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: LD_INT 3
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: LD_INT 4
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 1
69904: PUSH
69905: LD_INT 3
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 1
69915: PUSH
69916: LD_INT 2
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 0
69926: PUSH
69927: LD_INT 2
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 1
69937: NEG
69938: PUSH
69939: LD_INT 3
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 4
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 2
69961: PUSH
69962: LD_INT 2
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 2
69972: NEG
69973: PUSH
69974: LD_INT 4
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 4
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 4
69994: PUSH
69995: LD_INT 1
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 5
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 5
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 4
70025: PUSH
70026: LD_INT 1
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 3
70035: PUSH
70036: LD_INT 0
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 3
70045: PUSH
70046: LD_INT 1
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 3
70056: PUSH
70057: LD_INT 2
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 5
70067: PUSH
70068: LD_INT 2
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 3
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: PUSH
70088: LD_INT 2
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 4
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 4
70107: PUSH
70108: LD_INT 4
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 3
70117: PUSH
70118: LD_INT 4
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 2
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 2
70137: PUSH
70138: LD_INT 2
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 4
70147: PUSH
70148: LD_INT 2
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: LD_INT 4
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 0
70167: PUSH
70168: LD_INT 4
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 0
70177: PUSH
70178: LD_INT 3
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 1
70187: PUSH
70188: LD_INT 4
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: LD_INT 5
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 5
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 1
70217: NEG
70218: PUSH
70219: LD_INT 4
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: LD_INT 3
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: LD_INT 5
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 2
70249: NEG
70250: PUSH
70251: LD_INT 3
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70305: LD_ADDR_VAR 0 34
70309: PUSH
70310: LD_INT 0
70312: PUSH
70313: LD_INT 4
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_INT 5
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 1
70334: PUSH
70335: LD_INT 4
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 1
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 0
70356: PUSH
70357: LD_INT 3
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 1
70367: NEG
70368: PUSH
70369: LD_INT 4
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 1
70379: NEG
70380: PUSH
70381: LD_INT 5
70383: NEG
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 2
70391: PUSH
70392: LD_INT 3
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 2
70402: NEG
70403: PUSH
70404: LD_INT 5
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 3
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 3
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 4
70435: PUSH
70436: LD_INT 0
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: LD_INT 1
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 3
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 2
70465: PUSH
70466: LD_INT 0
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 2
70475: PUSH
70476: LD_INT 1
70478: NEG
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 2
70486: PUSH
70487: LD_INT 2
70489: NEG
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 4
70497: PUSH
70498: LD_INT 2
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 4
70507: PUSH
70508: LD_INT 4
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 4
70517: PUSH
70518: LD_INT 3
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 5
70527: PUSH
70528: LD_INT 4
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 5
70537: PUSH
70538: LD_INT 5
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 4
70547: PUSH
70548: LD_INT 5
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 3
70557: PUSH
70558: LD_INT 4
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 3
70567: PUSH
70568: LD_INT 3
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 5
70577: PUSH
70578: LD_INT 3
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 3
70587: PUSH
70588: LD_INT 5
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: LD_INT 3
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: LD_INT 2
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: LD_INT 3
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 1
70627: PUSH
70628: LD_INT 4
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: LD_INT 4
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 1
70647: NEG
70648: PUSH
70649: LD_INT 3
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 1
70658: NEG
70659: PUSH
70660: LD_INT 2
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 2
70669: PUSH
70670: LD_INT 4
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 2
70679: NEG
70680: PUSH
70681: LD_INT 2
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 4
70690: NEG
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 4
70701: NEG
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 3
70713: NEG
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 3
70724: NEG
70725: PUSH
70726: LD_INT 1
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 4
70735: NEG
70736: PUSH
70737: LD_INT 1
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 5
70746: NEG
70747: PUSH
70748: LD_INT 0
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 5
70757: NEG
70758: PUSH
70759: LD_INT 1
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 5
70769: NEG
70770: PUSH
70771: LD_INT 2
70773: NEG
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 3
70781: NEG
70782: PUSH
70783: LD_INT 2
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: ST_TO_ADDR
// end ; end ;
70837: GO 70840
70839: POP
// case btype of b_depot , b_warehouse :
70840: LD_VAR 0 1
70844: PUSH
70845: LD_INT 0
70847: DOUBLE
70848: EQUAL
70849: IFTRUE 70859
70851: LD_INT 1
70853: DOUBLE
70854: EQUAL
70855: IFTRUE 70859
70857: GO 71060
70859: POP
// case nation of nation_american :
70860: LD_VAR 0 5
70864: PUSH
70865: LD_INT 1
70867: DOUBLE
70868: EQUAL
70869: IFTRUE 70873
70871: GO 70929
70873: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70874: LD_ADDR_VAR 0 9
70878: PUSH
70879: LD_VAR 0 11
70883: PUSH
70884: LD_VAR 0 12
70888: PUSH
70889: LD_VAR 0 13
70893: PUSH
70894: LD_VAR 0 14
70898: PUSH
70899: LD_VAR 0 15
70903: PUSH
70904: LD_VAR 0 16
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: PUSH
70917: LD_VAR 0 4
70921: PUSH
70922: LD_INT 1
70924: PLUS
70925: ARRAY
70926: ST_TO_ADDR
70927: GO 71058
70929: LD_INT 2
70931: DOUBLE
70932: EQUAL
70933: IFTRUE 70937
70935: GO 70993
70937: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70938: LD_ADDR_VAR 0 9
70942: PUSH
70943: LD_VAR 0 17
70947: PUSH
70948: LD_VAR 0 18
70952: PUSH
70953: LD_VAR 0 19
70957: PUSH
70958: LD_VAR 0 20
70962: PUSH
70963: LD_VAR 0 21
70967: PUSH
70968: LD_VAR 0 22
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: PUSH
70981: LD_VAR 0 4
70985: PUSH
70986: LD_INT 1
70988: PLUS
70989: ARRAY
70990: ST_TO_ADDR
70991: GO 71058
70993: LD_INT 3
70995: DOUBLE
70996: EQUAL
70997: IFTRUE 71001
70999: GO 71057
71001: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71002: LD_ADDR_VAR 0 9
71006: PUSH
71007: LD_VAR 0 23
71011: PUSH
71012: LD_VAR 0 24
71016: PUSH
71017: LD_VAR 0 25
71021: PUSH
71022: LD_VAR 0 26
71026: PUSH
71027: LD_VAR 0 27
71031: PUSH
71032: LD_VAR 0 28
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: PUSH
71045: LD_VAR 0 4
71049: PUSH
71050: LD_INT 1
71052: PLUS
71053: ARRAY
71054: ST_TO_ADDR
71055: GO 71058
71057: POP
71058: GO 71613
71060: LD_INT 2
71062: DOUBLE
71063: EQUAL
71064: IFTRUE 71074
71066: LD_INT 3
71068: DOUBLE
71069: EQUAL
71070: IFTRUE 71074
71072: GO 71130
71074: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71075: LD_ADDR_VAR 0 9
71079: PUSH
71080: LD_VAR 0 29
71084: PUSH
71085: LD_VAR 0 30
71089: PUSH
71090: LD_VAR 0 31
71094: PUSH
71095: LD_VAR 0 32
71099: PUSH
71100: LD_VAR 0 33
71104: PUSH
71105: LD_VAR 0 34
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: PUSH
71118: LD_VAR 0 4
71122: PUSH
71123: LD_INT 1
71125: PLUS
71126: ARRAY
71127: ST_TO_ADDR
71128: GO 71613
71130: LD_INT 16
71132: DOUBLE
71133: EQUAL
71134: IFTRUE 71192
71136: LD_INT 17
71138: DOUBLE
71139: EQUAL
71140: IFTRUE 71192
71142: LD_INT 18
71144: DOUBLE
71145: EQUAL
71146: IFTRUE 71192
71148: LD_INT 19
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71192
71154: LD_INT 22
71156: DOUBLE
71157: EQUAL
71158: IFTRUE 71192
71160: LD_INT 20
71162: DOUBLE
71163: EQUAL
71164: IFTRUE 71192
71166: LD_INT 21
71168: DOUBLE
71169: EQUAL
71170: IFTRUE 71192
71172: LD_INT 23
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71192
71178: LD_INT 24
71180: DOUBLE
71181: EQUAL
71182: IFTRUE 71192
71184: LD_INT 25
71186: DOUBLE
71187: EQUAL
71188: IFTRUE 71192
71190: GO 71248
71192: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71193: LD_ADDR_VAR 0 9
71197: PUSH
71198: LD_VAR 0 35
71202: PUSH
71203: LD_VAR 0 36
71207: PUSH
71208: LD_VAR 0 37
71212: PUSH
71213: LD_VAR 0 38
71217: PUSH
71218: LD_VAR 0 39
71222: PUSH
71223: LD_VAR 0 40
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: PUSH
71236: LD_VAR 0 4
71240: PUSH
71241: LD_INT 1
71243: PLUS
71244: ARRAY
71245: ST_TO_ADDR
71246: GO 71613
71248: LD_INT 6
71250: DOUBLE
71251: EQUAL
71252: IFTRUE 71304
71254: LD_INT 7
71256: DOUBLE
71257: EQUAL
71258: IFTRUE 71304
71260: LD_INT 8
71262: DOUBLE
71263: EQUAL
71264: IFTRUE 71304
71266: LD_INT 13
71268: DOUBLE
71269: EQUAL
71270: IFTRUE 71304
71272: LD_INT 12
71274: DOUBLE
71275: EQUAL
71276: IFTRUE 71304
71278: LD_INT 15
71280: DOUBLE
71281: EQUAL
71282: IFTRUE 71304
71284: LD_INT 11
71286: DOUBLE
71287: EQUAL
71288: IFTRUE 71304
71290: LD_INT 14
71292: DOUBLE
71293: EQUAL
71294: IFTRUE 71304
71296: LD_INT 10
71298: DOUBLE
71299: EQUAL
71300: IFTRUE 71304
71302: GO 71360
71304: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71305: LD_ADDR_VAR 0 9
71309: PUSH
71310: LD_VAR 0 41
71314: PUSH
71315: LD_VAR 0 42
71319: PUSH
71320: LD_VAR 0 43
71324: PUSH
71325: LD_VAR 0 44
71329: PUSH
71330: LD_VAR 0 45
71334: PUSH
71335: LD_VAR 0 46
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: PUSH
71348: LD_VAR 0 4
71352: PUSH
71353: LD_INT 1
71355: PLUS
71356: ARRAY
71357: ST_TO_ADDR
71358: GO 71613
71360: LD_INT 36
71362: DOUBLE
71363: EQUAL
71364: IFTRUE 71368
71366: GO 71424
71368: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71369: LD_ADDR_VAR 0 9
71373: PUSH
71374: LD_VAR 0 47
71378: PUSH
71379: LD_VAR 0 48
71383: PUSH
71384: LD_VAR 0 49
71388: PUSH
71389: LD_VAR 0 50
71393: PUSH
71394: LD_VAR 0 51
71398: PUSH
71399: LD_VAR 0 52
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: PUSH
71412: LD_VAR 0 4
71416: PUSH
71417: LD_INT 1
71419: PLUS
71420: ARRAY
71421: ST_TO_ADDR
71422: GO 71613
71424: LD_INT 4
71426: DOUBLE
71427: EQUAL
71428: IFTRUE 71450
71430: LD_INT 5
71432: DOUBLE
71433: EQUAL
71434: IFTRUE 71450
71436: LD_INT 34
71438: DOUBLE
71439: EQUAL
71440: IFTRUE 71450
71442: LD_INT 37
71444: DOUBLE
71445: EQUAL
71446: IFTRUE 71450
71448: GO 71506
71450: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71451: LD_ADDR_VAR 0 9
71455: PUSH
71456: LD_VAR 0 53
71460: PUSH
71461: LD_VAR 0 54
71465: PUSH
71466: LD_VAR 0 55
71470: PUSH
71471: LD_VAR 0 56
71475: PUSH
71476: LD_VAR 0 57
71480: PUSH
71481: LD_VAR 0 58
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: PUSH
71494: LD_VAR 0 4
71498: PUSH
71499: LD_INT 1
71501: PLUS
71502: ARRAY
71503: ST_TO_ADDR
71504: GO 71613
71506: LD_INT 31
71508: DOUBLE
71509: EQUAL
71510: IFTRUE 71556
71512: LD_INT 32
71514: DOUBLE
71515: EQUAL
71516: IFTRUE 71556
71518: LD_INT 33
71520: DOUBLE
71521: EQUAL
71522: IFTRUE 71556
71524: LD_INT 27
71526: DOUBLE
71527: EQUAL
71528: IFTRUE 71556
71530: LD_INT 26
71532: DOUBLE
71533: EQUAL
71534: IFTRUE 71556
71536: LD_INT 28
71538: DOUBLE
71539: EQUAL
71540: IFTRUE 71556
71542: LD_INT 29
71544: DOUBLE
71545: EQUAL
71546: IFTRUE 71556
71548: LD_INT 30
71550: DOUBLE
71551: EQUAL
71552: IFTRUE 71556
71554: GO 71612
71556: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71557: LD_ADDR_VAR 0 9
71561: PUSH
71562: LD_VAR 0 59
71566: PUSH
71567: LD_VAR 0 60
71571: PUSH
71572: LD_VAR 0 61
71576: PUSH
71577: LD_VAR 0 62
71581: PUSH
71582: LD_VAR 0 63
71586: PUSH
71587: LD_VAR 0 64
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: PUSH
71600: LD_VAR 0 4
71604: PUSH
71605: LD_INT 1
71607: PLUS
71608: ARRAY
71609: ST_TO_ADDR
71610: GO 71613
71612: POP
// temp_list2 = [ ] ;
71613: LD_ADDR_VAR 0 10
71617: PUSH
71618: EMPTY
71619: ST_TO_ADDR
// for i in temp_list do
71620: LD_ADDR_VAR 0 8
71624: PUSH
71625: LD_VAR 0 9
71629: PUSH
71630: FOR_IN
71631: IFFALSE 71683
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71633: LD_ADDR_VAR 0 10
71637: PUSH
71638: LD_VAR 0 10
71642: PUSH
71643: LD_VAR 0 8
71647: PUSH
71648: LD_INT 1
71650: ARRAY
71651: PUSH
71652: LD_VAR 0 2
71656: PLUS
71657: PUSH
71658: LD_VAR 0 8
71662: PUSH
71663: LD_INT 2
71665: ARRAY
71666: PUSH
71667: LD_VAR 0 3
71671: PLUS
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: EMPTY
71678: LIST
71679: ADD
71680: ST_TO_ADDR
71681: GO 71630
71683: POP
71684: POP
// result = temp_list2 ;
71685: LD_ADDR_VAR 0 7
71689: PUSH
71690: LD_VAR 0 10
71694: ST_TO_ADDR
// end ;
71695: LD_VAR 0 7
71699: RET
// export function EnemyInRange ( unit , dist ) ; begin
71700: LD_INT 0
71702: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71703: LD_ADDR_VAR 0 3
71707: PUSH
71708: LD_VAR 0 1
71712: PPUSH
71713: CALL_OW 255
71717: PPUSH
71718: LD_VAR 0 1
71722: PPUSH
71723: CALL_OW 250
71727: PPUSH
71728: LD_VAR 0 1
71732: PPUSH
71733: CALL_OW 251
71737: PPUSH
71738: LD_VAR 0 2
71742: PPUSH
71743: CALL 45102 0 4
71747: PUSH
71748: LD_INT 4
71750: ARRAY
71751: ST_TO_ADDR
// end ;
71752: LD_VAR 0 3
71756: RET
// export function PlayerSeeMe ( unit ) ; begin
71757: LD_INT 0
71759: PPUSH
// result := See ( your_side , unit ) ;
71760: LD_ADDR_VAR 0 2
71764: PUSH
71765: LD_OWVAR 2
71769: PPUSH
71770: LD_VAR 0 1
71774: PPUSH
71775: CALL_OW 292
71779: ST_TO_ADDR
// end ;
71780: LD_VAR 0 2
71784: RET
// export function ReverseDir ( unit ) ; begin
71785: LD_INT 0
71787: PPUSH
// if not unit then
71788: LD_VAR 0 1
71792: NOT
71793: IFFALSE 71797
// exit ;
71795: GO 71820
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71797: LD_ADDR_VAR 0 2
71801: PUSH
71802: LD_VAR 0 1
71806: PPUSH
71807: CALL_OW 254
71811: PUSH
71812: LD_INT 3
71814: PLUS
71815: PUSH
71816: LD_INT 6
71818: MOD
71819: ST_TO_ADDR
// end ;
71820: LD_VAR 0 2
71824: RET
// export function ReverseArray ( array ) ; var i ; begin
71825: LD_INT 0
71827: PPUSH
71828: PPUSH
// if not array then
71829: LD_VAR 0 1
71833: NOT
71834: IFFALSE 71838
// exit ;
71836: GO 71893
// result := [ ] ;
71838: LD_ADDR_VAR 0 2
71842: PUSH
71843: EMPTY
71844: ST_TO_ADDR
// for i := array downto 1 do
71845: LD_ADDR_VAR 0 3
71849: PUSH
71850: DOUBLE
71851: LD_VAR 0 1
71855: INC
71856: ST_TO_ADDR
71857: LD_INT 1
71859: PUSH
71860: FOR_DOWNTO
71861: IFFALSE 71891
// result := Join ( result , array [ i ] ) ;
71863: LD_ADDR_VAR 0 2
71867: PUSH
71868: LD_VAR 0 2
71872: PPUSH
71873: LD_VAR 0 1
71877: PUSH
71878: LD_VAR 0 3
71882: ARRAY
71883: PPUSH
71884: CALL 76537 0 2
71888: ST_TO_ADDR
71889: GO 71860
71891: POP
71892: POP
// end ;
71893: LD_VAR 0 2
71897: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71898: LD_INT 0
71900: PPUSH
71901: PPUSH
71902: PPUSH
71903: PPUSH
71904: PPUSH
71905: PPUSH
// if not unit or not hexes then
71906: LD_VAR 0 1
71910: NOT
71911: PUSH
71912: LD_VAR 0 2
71916: NOT
71917: OR
71918: IFFALSE 71922
// exit ;
71920: GO 72045
// dist := 9999 ;
71922: LD_ADDR_VAR 0 5
71926: PUSH
71927: LD_INT 9999
71929: ST_TO_ADDR
// for i = 1 to hexes do
71930: LD_ADDR_VAR 0 4
71934: PUSH
71935: DOUBLE
71936: LD_INT 1
71938: DEC
71939: ST_TO_ADDR
71940: LD_VAR 0 2
71944: PUSH
71945: FOR_TO
71946: IFFALSE 72033
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71948: LD_ADDR_VAR 0 6
71952: PUSH
71953: LD_VAR 0 1
71957: PPUSH
71958: LD_VAR 0 2
71962: PUSH
71963: LD_VAR 0 4
71967: ARRAY
71968: PUSH
71969: LD_INT 1
71971: ARRAY
71972: PPUSH
71973: LD_VAR 0 2
71977: PUSH
71978: LD_VAR 0 4
71982: ARRAY
71983: PUSH
71984: LD_INT 2
71986: ARRAY
71987: PPUSH
71988: CALL_OW 297
71992: ST_TO_ADDR
// if tdist < dist then
71993: LD_VAR 0 6
71997: PUSH
71998: LD_VAR 0 5
72002: LESS
72003: IFFALSE 72031
// begin hex := hexes [ i ] ;
72005: LD_ADDR_VAR 0 8
72009: PUSH
72010: LD_VAR 0 2
72014: PUSH
72015: LD_VAR 0 4
72019: ARRAY
72020: ST_TO_ADDR
// dist := tdist ;
72021: LD_ADDR_VAR 0 5
72025: PUSH
72026: LD_VAR 0 6
72030: ST_TO_ADDR
// end ; end ;
72031: GO 71945
72033: POP
72034: POP
// result := hex ;
72035: LD_ADDR_VAR 0 3
72039: PUSH
72040: LD_VAR 0 8
72044: ST_TO_ADDR
// end ;
72045: LD_VAR 0 3
72049: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72050: LD_INT 0
72052: PPUSH
72053: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72054: LD_VAR 0 1
72058: NOT
72059: PUSH
72060: LD_VAR 0 1
72064: PUSH
72065: LD_INT 21
72067: PUSH
72068: LD_INT 2
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 23
72077: PUSH
72078: LD_INT 2
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PPUSH
72089: CALL_OW 69
72093: IN
72094: NOT
72095: OR
72096: IFFALSE 72100
// exit ;
72098: GO 72147
// for i = 1 to 3 do
72100: LD_ADDR_VAR 0 3
72104: PUSH
72105: DOUBLE
72106: LD_INT 1
72108: DEC
72109: ST_TO_ADDR
72110: LD_INT 3
72112: PUSH
72113: FOR_TO
72114: IFFALSE 72145
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72116: LD_VAR 0 1
72120: PPUSH
72121: CALL_OW 250
72125: PPUSH
72126: LD_VAR 0 1
72130: PPUSH
72131: CALL_OW 251
72135: PPUSH
72136: LD_INT 1
72138: PPUSH
72139: CALL_OW 453
72143: GO 72113
72145: POP
72146: POP
// end ;
72147: LD_VAR 0 2
72151: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72152: LD_INT 0
72154: PPUSH
72155: PPUSH
72156: PPUSH
72157: PPUSH
72158: PPUSH
72159: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72160: LD_VAR 0 1
72164: NOT
72165: PUSH
72166: LD_VAR 0 2
72170: NOT
72171: OR
72172: PUSH
72173: LD_VAR 0 1
72177: PPUSH
72178: CALL_OW 314
72182: OR
72183: IFFALSE 72187
// exit ;
72185: GO 72654
// if GetLives ( i ) < 250 then
72187: LD_VAR 0 4
72191: PPUSH
72192: CALL_OW 256
72196: PUSH
72197: LD_INT 250
72199: LESS
72200: IFFALSE 72213
// begin ComAutodestruct ( i ) ;
72202: LD_VAR 0 4
72206: PPUSH
72207: CALL 72050 0 1
// exit ;
72211: GO 72654
// end ; x := GetX ( enemy_unit ) ;
72213: LD_ADDR_VAR 0 7
72217: PUSH
72218: LD_VAR 0 2
72222: PPUSH
72223: CALL_OW 250
72227: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72228: LD_ADDR_VAR 0 8
72232: PUSH
72233: LD_VAR 0 2
72237: PPUSH
72238: CALL_OW 251
72242: ST_TO_ADDR
// if not x or not y then
72243: LD_VAR 0 7
72247: NOT
72248: PUSH
72249: LD_VAR 0 8
72253: NOT
72254: OR
72255: IFFALSE 72259
// exit ;
72257: GO 72654
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72259: LD_ADDR_VAR 0 6
72263: PUSH
72264: LD_VAR 0 7
72268: PPUSH
72269: LD_INT 0
72271: PPUSH
72272: LD_INT 4
72274: PPUSH
72275: CALL_OW 272
72279: PUSH
72280: LD_VAR 0 8
72284: PPUSH
72285: LD_INT 0
72287: PPUSH
72288: LD_INT 4
72290: PPUSH
72291: CALL_OW 273
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_VAR 0 7
72304: PPUSH
72305: LD_INT 1
72307: PPUSH
72308: LD_INT 4
72310: PPUSH
72311: CALL_OW 272
72315: PUSH
72316: LD_VAR 0 8
72320: PPUSH
72321: LD_INT 1
72323: PPUSH
72324: LD_INT 4
72326: PPUSH
72327: CALL_OW 273
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_VAR 0 7
72340: PPUSH
72341: LD_INT 2
72343: PPUSH
72344: LD_INT 4
72346: PPUSH
72347: CALL_OW 272
72351: PUSH
72352: LD_VAR 0 8
72356: PPUSH
72357: LD_INT 2
72359: PPUSH
72360: LD_INT 4
72362: PPUSH
72363: CALL_OW 273
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_VAR 0 7
72376: PPUSH
72377: LD_INT 3
72379: PPUSH
72380: LD_INT 4
72382: PPUSH
72383: CALL_OW 272
72387: PUSH
72388: LD_VAR 0 8
72392: PPUSH
72393: LD_INT 3
72395: PPUSH
72396: LD_INT 4
72398: PPUSH
72399: CALL_OW 273
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_VAR 0 7
72412: PPUSH
72413: LD_INT 4
72415: PPUSH
72416: LD_INT 4
72418: PPUSH
72419: CALL_OW 272
72423: PUSH
72424: LD_VAR 0 8
72428: PPUSH
72429: LD_INT 4
72431: PPUSH
72432: LD_INT 4
72434: PPUSH
72435: CALL_OW 273
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_VAR 0 7
72448: PPUSH
72449: LD_INT 5
72451: PPUSH
72452: LD_INT 4
72454: PPUSH
72455: CALL_OW 272
72459: PUSH
72460: LD_VAR 0 8
72464: PPUSH
72465: LD_INT 5
72467: PPUSH
72468: LD_INT 4
72470: PPUSH
72471: CALL_OW 273
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: ST_TO_ADDR
// for i = tmp downto 1 do
72488: LD_ADDR_VAR 0 4
72492: PUSH
72493: DOUBLE
72494: LD_VAR 0 6
72498: INC
72499: ST_TO_ADDR
72500: LD_INT 1
72502: PUSH
72503: FOR_DOWNTO
72504: IFFALSE 72605
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72506: LD_VAR 0 6
72510: PUSH
72511: LD_VAR 0 4
72515: ARRAY
72516: PUSH
72517: LD_INT 1
72519: ARRAY
72520: PPUSH
72521: LD_VAR 0 6
72525: PUSH
72526: LD_VAR 0 4
72530: ARRAY
72531: PUSH
72532: LD_INT 2
72534: ARRAY
72535: PPUSH
72536: CALL_OW 488
72540: NOT
72541: PUSH
72542: LD_VAR 0 6
72546: PUSH
72547: LD_VAR 0 4
72551: ARRAY
72552: PUSH
72553: LD_INT 1
72555: ARRAY
72556: PPUSH
72557: LD_VAR 0 6
72561: PUSH
72562: LD_VAR 0 4
72566: ARRAY
72567: PUSH
72568: LD_INT 2
72570: ARRAY
72571: PPUSH
72572: CALL_OW 428
72576: PUSH
72577: LD_INT 0
72579: NONEQUAL
72580: OR
72581: IFFALSE 72603
// tmp := Delete ( tmp , i ) ;
72583: LD_ADDR_VAR 0 6
72587: PUSH
72588: LD_VAR 0 6
72592: PPUSH
72593: LD_VAR 0 4
72597: PPUSH
72598: CALL_OW 3
72602: ST_TO_ADDR
72603: GO 72503
72605: POP
72606: POP
// j := GetClosestHex ( unit , tmp ) ;
72607: LD_ADDR_VAR 0 5
72611: PUSH
72612: LD_VAR 0 1
72616: PPUSH
72617: LD_VAR 0 6
72621: PPUSH
72622: CALL 71898 0 2
72626: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72627: LD_VAR 0 1
72631: PPUSH
72632: LD_VAR 0 5
72636: PUSH
72637: LD_INT 1
72639: ARRAY
72640: PPUSH
72641: LD_VAR 0 5
72645: PUSH
72646: LD_INT 2
72648: ARRAY
72649: PPUSH
72650: CALL_OW 111
// end ;
72654: LD_VAR 0 3
72658: RET
// export function PrepareApemanSoldier ( ) ; begin
72659: LD_INT 0
72661: PPUSH
// uc_nation := 0 ;
72662: LD_ADDR_OWVAR 21
72666: PUSH
72667: LD_INT 0
72669: ST_TO_ADDR
// hc_sex := sex_male ;
72670: LD_ADDR_OWVAR 27
72674: PUSH
72675: LD_INT 1
72677: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72678: LD_ADDR_OWVAR 28
72682: PUSH
72683: LD_INT 15
72685: ST_TO_ADDR
// hc_gallery :=  ;
72686: LD_ADDR_OWVAR 33
72690: PUSH
72691: LD_STRING 
72693: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72694: LD_ADDR_OWVAR 31
72698: PUSH
72699: LD_INT 0
72701: PPUSH
72702: LD_INT 3
72704: PPUSH
72705: CALL_OW 12
72709: PUSH
72710: LD_INT 0
72712: PPUSH
72713: LD_INT 3
72715: PPUSH
72716: CALL_OW 12
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: LD_INT 0
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: ST_TO_ADDR
// end ;
72733: LD_VAR 0 1
72737: RET
// export function PrepareApemanEngineer ( ) ; begin
72738: LD_INT 0
72740: PPUSH
// uc_nation := 0 ;
72741: LD_ADDR_OWVAR 21
72745: PUSH
72746: LD_INT 0
72748: ST_TO_ADDR
// hc_sex := sex_male ;
72749: LD_ADDR_OWVAR 27
72753: PUSH
72754: LD_INT 1
72756: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72757: LD_ADDR_OWVAR 28
72761: PUSH
72762: LD_INT 16
72764: ST_TO_ADDR
// hc_gallery :=  ;
72765: LD_ADDR_OWVAR 33
72769: PUSH
72770: LD_STRING 
72772: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72773: LD_ADDR_OWVAR 31
72777: PUSH
72778: LD_INT 0
72780: PPUSH
72781: LD_INT 3
72783: PPUSH
72784: CALL_OW 12
72788: PUSH
72789: LD_INT 0
72791: PPUSH
72792: LD_INT 3
72794: PPUSH
72795: CALL_OW 12
72799: PUSH
72800: LD_INT 0
72802: PUSH
72803: LD_INT 0
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: ST_TO_ADDR
// end ;
72812: LD_VAR 0 1
72816: RET
// export function PrepareApeman ( agressivity ) ; begin
72817: LD_INT 0
72819: PPUSH
// uc_side := 0 ;
72820: LD_ADDR_OWVAR 20
72824: PUSH
72825: LD_INT 0
72827: ST_TO_ADDR
// uc_nation := 0 ;
72828: LD_ADDR_OWVAR 21
72832: PUSH
72833: LD_INT 0
72835: ST_TO_ADDR
// hc_sex := sex_male ;
72836: LD_ADDR_OWVAR 27
72840: PUSH
72841: LD_INT 1
72843: ST_TO_ADDR
// hc_class := class_apeman ;
72844: LD_ADDR_OWVAR 28
72848: PUSH
72849: LD_INT 12
72851: ST_TO_ADDR
// hc_gallery :=  ;
72852: LD_ADDR_OWVAR 33
72856: PUSH
72857: LD_STRING 
72859: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72860: LD_ADDR_OWVAR 35
72864: PUSH
72865: LD_VAR 0 1
72869: NEG
72870: PPUSH
72871: LD_VAR 0 1
72875: PPUSH
72876: CALL_OW 12
72880: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72881: LD_ADDR_OWVAR 31
72885: PUSH
72886: LD_INT 0
72888: PPUSH
72889: LD_INT 3
72891: PPUSH
72892: CALL_OW 12
72896: PUSH
72897: LD_INT 0
72899: PPUSH
72900: LD_INT 3
72902: PPUSH
72903: CALL_OW 12
72907: PUSH
72908: LD_INT 0
72910: PUSH
72911: LD_INT 0
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: ST_TO_ADDR
// end ;
72920: LD_VAR 0 2
72924: RET
// export function PrepareTiger ( agressivity ) ; begin
72925: LD_INT 0
72927: PPUSH
// uc_side := 0 ;
72928: LD_ADDR_OWVAR 20
72932: PUSH
72933: LD_INT 0
72935: ST_TO_ADDR
// uc_nation := 0 ;
72936: LD_ADDR_OWVAR 21
72940: PUSH
72941: LD_INT 0
72943: ST_TO_ADDR
// hc_class := class_tiger ;
72944: LD_ADDR_OWVAR 28
72948: PUSH
72949: LD_INT 14
72951: ST_TO_ADDR
// hc_gallery :=  ;
72952: LD_ADDR_OWVAR 33
72956: PUSH
72957: LD_STRING 
72959: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72960: LD_ADDR_OWVAR 35
72964: PUSH
72965: LD_VAR 0 1
72969: NEG
72970: PPUSH
72971: LD_VAR 0 1
72975: PPUSH
72976: CALL_OW 12
72980: ST_TO_ADDR
// end ;
72981: LD_VAR 0 2
72985: RET
// export function PrepareEnchidna ( ) ; begin
72986: LD_INT 0
72988: PPUSH
// uc_side := 0 ;
72989: LD_ADDR_OWVAR 20
72993: PUSH
72994: LD_INT 0
72996: ST_TO_ADDR
// uc_nation := 0 ;
72997: LD_ADDR_OWVAR 21
73001: PUSH
73002: LD_INT 0
73004: ST_TO_ADDR
// hc_class := class_baggie ;
73005: LD_ADDR_OWVAR 28
73009: PUSH
73010: LD_INT 13
73012: ST_TO_ADDR
// hc_gallery :=  ;
73013: LD_ADDR_OWVAR 33
73017: PUSH
73018: LD_STRING 
73020: ST_TO_ADDR
// end ;
73021: LD_VAR 0 1
73025: RET
// export function PrepareFrog ( ) ; begin
73026: LD_INT 0
73028: PPUSH
// uc_side := 0 ;
73029: LD_ADDR_OWVAR 20
73033: PUSH
73034: LD_INT 0
73036: ST_TO_ADDR
// uc_nation := 0 ;
73037: LD_ADDR_OWVAR 21
73041: PUSH
73042: LD_INT 0
73044: ST_TO_ADDR
// hc_class := class_frog ;
73045: LD_ADDR_OWVAR 28
73049: PUSH
73050: LD_INT 19
73052: ST_TO_ADDR
// hc_gallery :=  ;
73053: LD_ADDR_OWVAR 33
73057: PUSH
73058: LD_STRING 
73060: ST_TO_ADDR
// end ;
73061: LD_VAR 0 1
73065: RET
// export function PrepareFish ( ) ; begin
73066: LD_INT 0
73068: PPUSH
// uc_side := 0 ;
73069: LD_ADDR_OWVAR 20
73073: PUSH
73074: LD_INT 0
73076: ST_TO_ADDR
// uc_nation := 0 ;
73077: LD_ADDR_OWVAR 21
73081: PUSH
73082: LD_INT 0
73084: ST_TO_ADDR
// hc_class := class_fish ;
73085: LD_ADDR_OWVAR 28
73089: PUSH
73090: LD_INT 20
73092: ST_TO_ADDR
// hc_gallery :=  ;
73093: LD_ADDR_OWVAR 33
73097: PUSH
73098: LD_STRING 
73100: ST_TO_ADDR
// end ;
73101: LD_VAR 0 1
73105: RET
// export function PrepareBird ( ) ; begin
73106: LD_INT 0
73108: PPUSH
// uc_side := 0 ;
73109: LD_ADDR_OWVAR 20
73113: PUSH
73114: LD_INT 0
73116: ST_TO_ADDR
// uc_nation := 0 ;
73117: LD_ADDR_OWVAR 21
73121: PUSH
73122: LD_INT 0
73124: ST_TO_ADDR
// hc_class := class_phororhacos ;
73125: LD_ADDR_OWVAR 28
73129: PUSH
73130: LD_INT 18
73132: ST_TO_ADDR
// hc_gallery :=  ;
73133: LD_ADDR_OWVAR 33
73137: PUSH
73138: LD_STRING 
73140: ST_TO_ADDR
// end ;
73141: LD_VAR 0 1
73145: RET
// export function PrepareHorse ( ) ; begin
73146: LD_INT 0
73148: PPUSH
// uc_side := 0 ;
73149: LD_ADDR_OWVAR 20
73153: PUSH
73154: LD_INT 0
73156: ST_TO_ADDR
// uc_nation := 0 ;
73157: LD_ADDR_OWVAR 21
73161: PUSH
73162: LD_INT 0
73164: ST_TO_ADDR
// hc_class := class_horse ;
73165: LD_ADDR_OWVAR 28
73169: PUSH
73170: LD_INT 21
73172: ST_TO_ADDR
// hc_gallery :=  ;
73173: LD_ADDR_OWVAR 33
73177: PUSH
73178: LD_STRING 
73180: ST_TO_ADDR
// end ;
73181: LD_VAR 0 1
73185: RET
// export function PrepareMastodont ( ) ; begin
73186: LD_INT 0
73188: PPUSH
// uc_side := 0 ;
73189: LD_ADDR_OWVAR 20
73193: PUSH
73194: LD_INT 0
73196: ST_TO_ADDR
// uc_nation := 0 ;
73197: LD_ADDR_OWVAR 21
73201: PUSH
73202: LD_INT 0
73204: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73205: LD_ADDR_OWVAR 37
73209: PUSH
73210: LD_INT 31
73212: ST_TO_ADDR
// vc_control := control_rider ;
73213: LD_ADDR_OWVAR 38
73217: PUSH
73218: LD_INT 4
73220: ST_TO_ADDR
// end ;
73221: LD_VAR 0 1
73225: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73226: LD_INT 0
73228: PPUSH
73229: PPUSH
73230: PPUSH
// uc_side = 0 ;
73231: LD_ADDR_OWVAR 20
73235: PUSH
73236: LD_INT 0
73238: ST_TO_ADDR
// uc_nation = 0 ;
73239: LD_ADDR_OWVAR 21
73243: PUSH
73244: LD_INT 0
73246: ST_TO_ADDR
// InitHc_All ( ) ;
73247: CALL_OW 584
// InitVc ;
73251: CALL_OW 20
// if mastodonts then
73255: LD_VAR 0 6
73259: IFFALSE 73326
// for i = 1 to mastodonts do
73261: LD_ADDR_VAR 0 11
73265: PUSH
73266: DOUBLE
73267: LD_INT 1
73269: DEC
73270: ST_TO_ADDR
73271: LD_VAR 0 6
73275: PUSH
73276: FOR_TO
73277: IFFALSE 73324
// begin vc_chassis := 31 ;
73279: LD_ADDR_OWVAR 37
73283: PUSH
73284: LD_INT 31
73286: ST_TO_ADDR
// vc_control := control_rider ;
73287: LD_ADDR_OWVAR 38
73291: PUSH
73292: LD_INT 4
73294: ST_TO_ADDR
// animal := CreateVehicle ;
73295: LD_ADDR_VAR 0 12
73299: PUSH
73300: CALL_OW 45
73304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73305: LD_VAR 0 12
73309: PPUSH
73310: LD_VAR 0 8
73314: PPUSH
73315: LD_INT 0
73317: PPUSH
73318: CALL 75454 0 3
// end ;
73322: GO 73276
73324: POP
73325: POP
// if horses then
73326: LD_VAR 0 5
73330: IFFALSE 73397
// for i = 1 to horses do
73332: LD_ADDR_VAR 0 11
73336: PUSH
73337: DOUBLE
73338: LD_INT 1
73340: DEC
73341: ST_TO_ADDR
73342: LD_VAR 0 5
73346: PUSH
73347: FOR_TO
73348: IFFALSE 73395
// begin hc_class := 21 ;
73350: LD_ADDR_OWVAR 28
73354: PUSH
73355: LD_INT 21
73357: ST_TO_ADDR
// hc_gallery :=  ;
73358: LD_ADDR_OWVAR 33
73362: PUSH
73363: LD_STRING 
73365: ST_TO_ADDR
// animal := CreateHuman ;
73366: LD_ADDR_VAR 0 12
73370: PUSH
73371: CALL_OW 44
73375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73376: LD_VAR 0 12
73380: PPUSH
73381: LD_VAR 0 8
73385: PPUSH
73386: LD_INT 0
73388: PPUSH
73389: CALL 75454 0 3
// end ;
73393: GO 73347
73395: POP
73396: POP
// if birds then
73397: LD_VAR 0 1
73401: IFFALSE 73468
// for i = 1 to birds do
73403: LD_ADDR_VAR 0 11
73407: PUSH
73408: DOUBLE
73409: LD_INT 1
73411: DEC
73412: ST_TO_ADDR
73413: LD_VAR 0 1
73417: PUSH
73418: FOR_TO
73419: IFFALSE 73466
// begin hc_class = 18 ;
73421: LD_ADDR_OWVAR 28
73425: PUSH
73426: LD_INT 18
73428: ST_TO_ADDR
// hc_gallery =  ;
73429: LD_ADDR_OWVAR 33
73433: PUSH
73434: LD_STRING 
73436: ST_TO_ADDR
// animal := CreateHuman ;
73437: LD_ADDR_VAR 0 12
73441: PUSH
73442: CALL_OW 44
73446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73447: LD_VAR 0 12
73451: PPUSH
73452: LD_VAR 0 8
73456: PPUSH
73457: LD_INT 0
73459: PPUSH
73460: CALL 75454 0 3
// end ;
73464: GO 73418
73466: POP
73467: POP
// if tigers then
73468: LD_VAR 0 2
73472: IFFALSE 73556
// for i = 1 to tigers do
73474: LD_ADDR_VAR 0 11
73478: PUSH
73479: DOUBLE
73480: LD_INT 1
73482: DEC
73483: ST_TO_ADDR
73484: LD_VAR 0 2
73488: PUSH
73489: FOR_TO
73490: IFFALSE 73554
// begin hc_class = class_tiger ;
73492: LD_ADDR_OWVAR 28
73496: PUSH
73497: LD_INT 14
73499: ST_TO_ADDR
// hc_gallery =  ;
73500: LD_ADDR_OWVAR 33
73504: PUSH
73505: LD_STRING 
73507: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73508: LD_ADDR_OWVAR 35
73512: PUSH
73513: LD_INT 7
73515: NEG
73516: PPUSH
73517: LD_INT 7
73519: PPUSH
73520: CALL_OW 12
73524: ST_TO_ADDR
// animal := CreateHuman ;
73525: LD_ADDR_VAR 0 12
73529: PUSH
73530: CALL_OW 44
73534: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73535: LD_VAR 0 12
73539: PPUSH
73540: LD_VAR 0 8
73544: PPUSH
73545: LD_INT 0
73547: PPUSH
73548: CALL 75454 0 3
// end ;
73552: GO 73489
73554: POP
73555: POP
// if apemans then
73556: LD_VAR 0 3
73560: IFFALSE 73683
// for i = 1 to apemans do
73562: LD_ADDR_VAR 0 11
73566: PUSH
73567: DOUBLE
73568: LD_INT 1
73570: DEC
73571: ST_TO_ADDR
73572: LD_VAR 0 3
73576: PUSH
73577: FOR_TO
73578: IFFALSE 73681
// begin hc_class = class_apeman ;
73580: LD_ADDR_OWVAR 28
73584: PUSH
73585: LD_INT 12
73587: ST_TO_ADDR
// hc_gallery =  ;
73588: LD_ADDR_OWVAR 33
73592: PUSH
73593: LD_STRING 
73595: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73596: LD_ADDR_OWVAR 35
73600: PUSH
73601: LD_INT 2
73603: NEG
73604: PPUSH
73605: LD_INT 2
73607: PPUSH
73608: CALL_OW 12
73612: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73613: LD_ADDR_OWVAR 31
73617: PUSH
73618: LD_INT 1
73620: PPUSH
73621: LD_INT 3
73623: PPUSH
73624: CALL_OW 12
73628: PUSH
73629: LD_INT 1
73631: PPUSH
73632: LD_INT 3
73634: PPUSH
73635: CALL_OW 12
73639: PUSH
73640: LD_INT 0
73642: PUSH
73643: LD_INT 0
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: ST_TO_ADDR
// animal := CreateHuman ;
73652: LD_ADDR_VAR 0 12
73656: PUSH
73657: CALL_OW 44
73661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73662: LD_VAR 0 12
73666: PPUSH
73667: LD_VAR 0 8
73671: PPUSH
73672: LD_INT 0
73674: PPUSH
73675: CALL 75454 0 3
// end ;
73679: GO 73577
73681: POP
73682: POP
// if enchidnas then
73683: LD_VAR 0 4
73687: IFFALSE 73754
// for i = 1 to enchidnas do
73689: LD_ADDR_VAR 0 11
73693: PUSH
73694: DOUBLE
73695: LD_INT 1
73697: DEC
73698: ST_TO_ADDR
73699: LD_VAR 0 4
73703: PUSH
73704: FOR_TO
73705: IFFALSE 73752
// begin hc_class = 13 ;
73707: LD_ADDR_OWVAR 28
73711: PUSH
73712: LD_INT 13
73714: ST_TO_ADDR
// hc_gallery =  ;
73715: LD_ADDR_OWVAR 33
73719: PUSH
73720: LD_STRING 
73722: ST_TO_ADDR
// animal := CreateHuman ;
73723: LD_ADDR_VAR 0 12
73727: PUSH
73728: CALL_OW 44
73732: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73733: LD_VAR 0 12
73737: PPUSH
73738: LD_VAR 0 8
73742: PPUSH
73743: LD_INT 0
73745: PPUSH
73746: CALL 75454 0 3
// end ;
73750: GO 73704
73752: POP
73753: POP
// if fishes then
73754: LD_VAR 0 7
73758: IFFALSE 73825
// for i = 1 to fishes do
73760: LD_ADDR_VAR 0 11
73764: PUSH
73765: DOUBLE
73766: LD_INT 1
73768: DEC
73769: ST_TO_ADDR
73770: LD_VAR 0 7
73774: PUSH
73775: FOR_TO
73776: IFFALSE 73823
// begin hc_class = 20 ;
73778: LD_ADDR_OWVAR 28
73782: PUSH
73783: LD_INT 20
73785: ST_TO_ADDR
// hc_gallery =  ;
73786: LD_ADDR_OWVAR 33
73790: PUSH
73791: LD_STRING 
73793: ST_TO_ADDR
// animal := CreateHuman ;
73794: LD_ADDR_VAR 0 12
73798: PUSH
73799: CALL_OW 44
73803: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73804: LD_VAR 0 12
73808: PPUSH
73809: LD_VAR 0 9
73813: PPUSH
73814: LD_INT 0
73816: PPUSH
73817: CALL 75454 0 3
// end ;
73821: GO 73775
73823: POP
73824: POP
// end ;
73825: LD_VAR 0 10
73829: RET
// export function WantHeal ( sci , unit ) ; begin
73830: LD_INT 0
73832: PPUSH
// if GetTaskList ( sci ) > 0 then
73833: LD_VAR 0 1
73837: PPUSH
73838: CALL_OW 437
73842: PUSH
73843: LD_INT 0
73845: GREATER
73846: IFFALSE 73916
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73848: LD_VAR 0 1
73852: PPUSH
73853: CALL_OW 437
73857: PUSH
73858: LD_INT 1
73860: ARRAY
73861: PUSH
73862: LD_INT 1
73864: ARRAY
73865: PUSH
73866: LD_STRING l
73868: EQUAL
73869: PUSH
73870: LD_VAR 0 1
73874: PPUSH
73875: CALL_OW 437
73879: PUSH
73880: LD_INT 1
73882: ARRAY
73883: PUSH
73884: LD_INT 4
73886: ARRAY
73887: PUSH
73888: LD_VAR 0 2
73892: EQUAL
73893: AND
73894: IFFALSE 73906
// result := true else
73896: LD_ADDR_VAR 0 3
73900: PUSH
73901: LD_INT 1
73903: ST_TO_ADDR
73904: GO 73914
// result := false ;
73906: LD_ADDR_VAR 0 3
73910: PUSH
73911: LD_INT 0
73913: ST_TO_ADDR
// end else
73914: GO 73924
// result := false ;
73916: LD_ADDR_VAR 0 3
73920: PUSH
73921: LD_INT 0
73923: ST_TO_ADDR
// end ;
73924: LD_VAR 0 3
73928: RET
// export function HealTarget ( sci ) ; begin
73929: LD_INT 0
73931: PPUSH
// if not sci then
73932: LD_VAR 0 1
73936: NOT
73937: IFFALSE 73941
// exit ;
73939: GO 74006
// result := 0 ;
73941: LD_ADDR_VAR 0 2
73945: PUSH
73946: LD_INT 0
73948: ST_TO_ADDR
// if GetTaskList ( sci ) then
73949: LD_VAR 0 1
73953: PPUSH
73954: CALL_OW 437
73958: IFFALSE 74006
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73960: LD_VAR 0 1
73964: PPUSH
73965: CALL_OW 437
73969: PUSH
73970: LD_INT 1
73972: ARRAY
73973: PUSH
73974: LD_INT 1
73976: ARRAY
73977: PUSH
73978: LD_STRING l
73980: EQUAL
73981: IFFALSE 74006
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73983: LD_ADDR_VAR 0 2
73987: PUSH
73988: LD_VAR 0 1
73992: PPUSH
73993: CALL_OW 437
73997: PUSH
73998: LD_INT 1
74000: ARRAY
74001: PUSH
74002: LD_INT 4
74004: ARRAY
74005: ST_TO_ADDR
// end ;
74006: LD_VAR 0 2
74010: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74011: LD_INT 0
74013: PPUSH
74014: PPUSH
74015: PPUSH
74016: PPUSH
// if not base_units then
74017: LD_VAR 0 1
74021: NOT
74022: IFFALSE 74026
// exit ;
74024: GO 74113
// result := false ;
74026: LD_ADDR_VAR 0 2
74030: PUSH
74031: LD_INT 0
74033: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74034: LD_ADDR_VAR 0 5
74038: PUSH
74039: LD_VAR 0 1
74043: PPUSH
74044: LD_INT 21
74046: PUSH
74047: LD_INT 3
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PPUSH
74054: CALL_OW 72
74058: ST_TO_ADDR
// if not tmp then
74059: LD_VAR 0 5
74063: NOT
74064: IFFALSE 74068
// exit ;
74066: GO 74113
// for i in tmp do
74068: LD_ADDR_VAR 0 3
74072: PUSH
74073: LD_VAR 0 5
74077: PUSH
74078: FOR_IN
74079: IFFALSE 74111
// begin result := EnemyInRange ( i , 22 ) ;
74081: LD_ADDR_VAR 0 2
74085: PUSH
74086: LD_VAR 0 3
74090: PPUSH
74091: LD_INT 22
74093: PPUSH
74094: CALL 71700 0 2
74098: ST_TO_ADDR
// if result then
74099: LD_VAR 0 2
74103: IFFALSE 74109
// exit ;
74105: POP
74106: POP
74107: GO 74113
// end ;
74109: GO 74078
74111: POP
74112: POP
// end ;
74113: LD_VAR 0 2
74117: RET
// export function FilterByTag ( units , tag ) ; begin
74118: LD_INT 0
74120: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74121: LD_ADDR_VAR 0 3
74125: PUSH
74126: LD_VAR 0 1
74130: PPUSH
74131: LD_INT 120
74133: PUSH
74134: LD_VAR 0 2
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PPUSH
74143: CALL_OW 72
74147: ST_TO_ADDR
// end ;
74148: LD_VAR 0 3
74152: RET
// export function IsDriver ( un ) ; begin
74153: LD_INT 0
74155: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74156: LD_ADDR_VAR 0 2
74160: PUSH
74161: LD_VAR 0 1
74165: PUSH
74166: LD_INT 55
74168: PUSH
74169: EMPTY
74170: LIST
74171: PPUSH
74172: CALL_OW 69
74176: IN
74177: ST_TO_ADDR
// end ;
74178: LD_VAR 0 2
74182: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74183: LD_INT 0
74185: PPUSH
74186: PPUSH
// list := [ ] ;
74187: LD_ADDR_VAR 0 5
74191: PUSH
74192: EMPTY
74193: ST_TO_ADDR
// case d of 0 :
74194: LD_VAR 0 3
74198: PUSH
74199: LD_INT 0
74201: DOUBLE
74202: EQUAL
74203: IFTRUE 74207
74205: GO 74340
74207: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74208: LD_ADDR_VAR 0 5
74212: PUSH
74213: LD_VAR 0 1
74217: PUSH
74218: LD_INT 4
74220: MINUS
74221: PUSH
74222: LD_VAR 0 2
74226: PUSH
74227: LD_INT 4
74229: MINUS
74230: PUSH
74231: LD_INT 2
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: LIST
74238: PUSH
74239: LD_VAR 0 1
74243: PUSH
74244: LD_INT 3
74246: MINUS
74247: PUSH
74248: LD_VAR 0 2
74252: PUSH
74253: LD_INT 1
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: LIST
74260: PUSH
74261: LD_VAR 0 1
74265: PUSH
74266: LD_INT 4
74268: PLUS
74269: PUSH
74270: LD_VAR 0 2
74274: PUSH
74275: LD_INT 4
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: LIST
74282: PUSH
74283: LD_VAR 0 1
74287: PUSH
74288: LD_INT 3
74290: PLUS
74291: PUSH
74292: LD_VAR 0 2
74296: PUSH
74297: LD_INT 3
74299: PLUS
74300: PUSH
74301: LD_INT 5
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: LIST
74308: PUSH
74309: LD_VAR 0 1
74313: PUSH
74314: LD_VAR 0 2
74318: PUSH
74319: LD_INT 4
74321: PLUS
74322: PUSH
74323: LD_INT 0
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: ST_TO_ADDR
// end ; 1 :
74338: GO 75038
74340: LD_INT 1
74342: DOUBLE
74343: EQUAL
74344: IFTRUE 74348
74346: GO 74481
74348: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74349: LD_ADDR_VAR 0 5
74353: PUSH
74354: LD_VAR 0 1
74358: PUSH
74359: LD_VAR 0 2
74363: PUSH
74364: LD_INT 4
74366: MINUS
74367: PUSH
74368: LD_INT 3
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: LIST
74375: PUSH
74376: LD_VAR 0 1
74380: PUSH
74381: LD_INT 3
74383: MINUS
74384: PUSH
74385: LD_VAR 0 2
74389: PUSH
74390: LD_INT 3
74392: MINUS
74393: PUSH
74394: LD_INT 2
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: LIST
74401: PUSH
74402: LD_VAR 0 1
74406: PUSH
74407: LD_INT 4
74409: MINUS
74410: PUSH
74411: LD_VAR 0 2
74415: PUSH
74416: LD_INT 1
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: LIST
74423: PUSH
74424: LD_VAR 0 1
74428: PUSH
74429: LD_VAR 0 2
74433: PUSH
74434: LD_INT 3
74436: PLUS
74437: PUSH
74438: LD_INT 0
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: LIST
74445: PUSH
74446: LD_VAR 0 1
74450: PUSH
74451: LD_INT 4
74453: PLUS
74454: PUSH
74455: LD_VAR 0 2
74459: PUSH
74460: LD_INT 4
74462: PLUS
74463: PUSH
74464: LD_INT 5
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: LIST
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: ST_TO_ADDR
// end ; 2 :
74479: GO 75038
74481: LD_INT 2
74483: DOUBLE
74484: EQUAL
74485: IFTRUE 74489
74487: GO 74618
74489: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74490: LD_ADDR_VAR 0 5
74494: PUSH
74495: LD_VAR 0 1
74499: PUSH
74500: LD_VAR 0 2
74504: PUSH
74505: LD_INT 3
74507: MINUS
74508: PUSH
74509: LD_INT 3
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: LIST
74516: PUSH
74517: LD_VAR 0 1
74521: PUSH
74522: LD_INT 4
74524: PLUS
74525: PUSH
74526: LD_VAR 0 2
74530: PUSH
74531: LD_INT 4
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: LIST
74538: PUSH
74539: LD_VAR 0 1
74543: PUSH
74544: LD_VAR 0 2
74548: PUSH
74549: LD_INT 4
74551: PLUS
74552: PUSH
74553: LD_INT 0
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: LIST
74560: PUSH
74561: LD_VAR 0 1
74565: PUSH
74566: LD_INT 3
74568: MINUS
74569: PUSH
74570: LD_VAR 0 2
74574: PUSH
74575: LD_INT 1
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: LIST
74582: PUSH
74583: LD_VAR 0 1
74587: PUSH
74588: LD_INT 4
74590: MINUS
74591: PUSH
74592: LD_VAR 0 2
74596: PUSH
74597: LD_INT 4
74599: MINUS
74600: PUSH
74601: LD_INT 2
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: LIST
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: ST_TO_ADDR
// end ; 3 :
74616: GO 75038
74618: LD_INT 3
74620: DOUBLE
74621: EQUAL
74622: IFTRUE 74626
74624: GO 74759
74626: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74627: LD_ADDR_VAR 0 5
74631: PUSH
74632: LD_VAR 0 1
74636: PUSH
74637: LD_INT 3
74639: PLUS
74640: PUSH
74641: LD_VAR 0 2
74645: PUSH
74646: LD_INT 4
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: LIST
74653: PUSH
74654: LD_VAR 0 1
74658: PUSH
74659: LD_INT 4
74661: PLUS
74662: PUSH
74663: LD_VAR 0 2
74667: PUSH
74668: LD_INT 4
74670: PLUS
74671: PUSH
74672: LD_INT 5
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: LIST
74679: PUSH
74680: LD_VAR 0 1
74684: PUSH
74685: LD_INT 4
74687: MINUS
74688: PUSH
74689: LD_VAR 0 2
74693: PUSH
74694: LD_INT 1
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: LIST
74701: PUSH
74702: LD_VAR 0 1
74706: PUSH
74707: LD_VAR 0 2
74711: PUSH
74712: LD_INT 4
74714: MINUS
74715: PUSH
74716: LD_INT 3
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: PUSH
74724: LD_VAR 0 1
74728: PUSH
74729: LD_INT 3
74731: MINUS
74732: PUSH
74733: LD_VAR 0 2
74737: PUSH
74738: LD_INT 3
74740: MINUS
74741: PUSH
74742: LD_INT 2
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: LIST
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: ST_TO_ADDR
// end ; 4 :
74757: GO 75038
74759: LD_INT 4
74761: DOUBLE
74762: EQUAL
74763: IFTRUE 74767
74765: GO 74900
74767: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74768: LD_ADDR_VAR 0 5
74772: PUSH
74773: LD_VAR 0 1
74777: PUSH
74778: LD_VAR 0 2
74782: PUSH
74783: LD_INT 4
74785: PLUS
74786: PUSH
74787: LD_INT 0
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: LIST
74794: PUSH
74795: LD_VAR 0 1
74799: PUSH
74800: LD_INT 3
74802: PLUS
74803: PUSH
74804: LD_VAR 0 2
74808: PUSH
74809: LD_INT 3
74811: PLUS
74812: PUSH
74813: LD_INT 5
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: LIST
74820: PUSH
74821: LD_VAR 0 1
74825: PUSH
74826: LD_INT 4
74828: PLUS
74829: PUSH
74830: LD_VAR 0 2
74834: PUSH
74835: LD_INT 4
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: LIST
74842: PUSH
74843: LD_VAR 0 1
74847: PUSH
74848: LD_VAR 0 2
74852: PUSH
74853: LD_INT 3
74855: MINUS
74856: PUSH
74857: LD_INT 3
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: LIST
74864: PUSH
74865: LD_VAR 0 1
74869: PUSH
74870: LD_INT 4
74872: MINUS
74873: PUSH
74874: LD_VAR 0 2
74878: PUSH
74879: LD_INT 4
74881: MINUS
74882: PUSH
74883: LD_INT 2
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: LIST
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: ST_TO_ADDR
// end ; 5 :
74898: GO 75038
74900: LD_INT 5
74902: DOUBLE
74903: EQUAL
74904: IFTRUE 74908
74906: GO 75037
74908: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74909: LD_ADDR_VAR 0 5
74913: PUSH
74914: LD_VAR 0 1
74918: PUSH
74919: LD_INT 4
74921: MINUS
74922: PUSH
74923: LD_VAR 0 2
74927: PUSH
74928: LD_INT 1
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: LIST
74935: PUSH
74936: LD_VAR 0 1
74940: PUSH
74941: LD_VAR 0 2
74945: PUSH
74946: LD_INT 4
74948: MINUS
74949: PUSH
74950: LD_INT 3
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: LIST
74957: PUSH
74958: LD_VAR 0 1
74962: PUSH
74963: LD_INT 4
74965: PLUS
74966: PUSH
74967: LD_VAR 0 2
74971: PUSH
74972: LD_INT 4
74974: PLUS
74975: PUSH
74976: LD_INT 5
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: LIST
74983: PUSH
74984: LD_VAR 0 1
74988: PUSH
74989: LD_INT 3
74991: PLUS
74992: PUSH
74993: LD_VAR 0 2
74997: PUSH
74998: LD_INT 4
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: LIST
75005: PUSH
75006: LD_VAR 0 1
75010: PUSH
75011: LD_VAR 0 2
75015: PUSH
75016: LD_INT 3
75018: PLUS
75019: PUSH
75020: LD_INT 0
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: LIST
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: ST_TO_ADDR
// end ; end ;
75035: GO 75038
75037: POP
// result := list ;
75038: LD_ADDR_VAR 0 4
75042: PUSH
75043: LD_VAR 0 5
75047: ST_TO_ADDR
// end ;
75048: LD_VAR 0 4
75052: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75053: LD_INT 0
75055: PPUSH
75056: PPUSH
75057: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75058: LD_VAR 0 1
75062: NOT
75063: PUSH
75064: LD_VAR 0 2
75068: PUSH
75069: LD_INT 1
75071: PUSH
75072: LD_INT 2
75074: PUSH
75075: LD_INT 3
75077: PUSH
75078: LD_INT 4
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: LIST
75085: LIST
75086: IN
75087: NOT
75088: OR
75089: IFFALSE 75093
// exit ;
75091: GO 75176
// tmp := [ ] ;
75093: LD_ADDR_VAR 0 5
75097: PUSH
75098: EMPTY
75099: ST_TO_ADDR
// for i in units do
75100: LD_ADDR_VAR 0 4
75104: PUSH
75105: LD_VAR 0 1
75109: PUSH
75110: FOR_IN
75111: IFFALSE 75145
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75113: LD_ADDR_VAR 0 5
75117: PUSH
75118: LD_VAR 0 5
75122: PPUSH
75123: LD_VAR 0 4
75127: PPUSH
75128: LD_VAR 0 2
75132: PPUSH
75133: CALL_OW 259
75137: PPUSH
75138: CALL 76537 0 2
75142: ST_TO_ADDR
75143: GO 75110
75145: POP
75146: POP
// if not tmp then
75147: LD_VAR 0 5
75151: NOT
75152: IFFALSE 75156
// exit ;
75154: GO 75176
// result := SortListByListDesc ( units , tmp ) ;
75156: LD_ADDR_VAR 0 3
75160: PUSH
75161: LD_VAR 0 1
75165: PPUSH
75166: LD_VAR 0 5
75170: PPUSH
75171: CALL_OW 77
75175: ST_TO_ADDR
// end ;
75176: LD_VAR 0 3
75180: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75181: LD_INT 0
75183: PPUSH
75184: PPUSH
75185: PPUSH
// result := false ;
75186: LD_ADDR_VAR 0 3
75190: PUSH
75191: LD_INT 0
75193: ST_TO_ADDR
// if not building then
75194: LD_VAR 0 2
75198: NOT
75199: IFFALSE 75203
// exit ;
75201: GO 75341
// x := GetX ( building ) ;
75203: LD_ADDR_VAR 0 4
75207: PUSH
75208: LD_VAR 0 2
75212: PPUSH
75213: CALL_OW 250
75217: ST_TO_ADDR
// y := GetY ( building ) ;
75218: LD_ADDR_VAR 0 5
75222: PUSH
75223: LD_VAR 0 2
75227: PPUSH
75228: CALL_OW 251
75232: ST_TO_ADDR
// if not x or not y then
75233: LD_VAR 0 4
75237: NOT
75238: PUSH
75239: LD_VAR 0 5
75243: NOT
75244: OR
75245: IFFALSE 75249
// exit ;
75247: GO 75341
// if GetTaskList ( unit ) then
75249: LD_VAR 0 1
75253: PPUSH
75254: CALL_OW 437
75258: IFFALSE 75341
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75260: LD_STRING e
75262: PUSH
75263: LD_VAR 0 1
75267: PPUSH
75268: CALL_OW 437
75272: PUSH
75273: LD_INT 1
75275: ARRAY
75276: PUSH
75277: LD_INT 1
75279: ARRAY
75280: EQUAL
75281: PUSH
75282: LD_VAR 0 4
75286: PUSH
75287: LD_VAR 0 1
75291: PPUSH
75292: CALL_OW 437
75296: PUSH
75297: LD_INT 1
75299: ARRAY
75300: PUSH
75301: LD_INT 2
75303: ARRAY
75304: EQUAL
75305: AND
75306: PUSH
75307: LD_VAR 0 5
75311: PUSH
75312: LD_VAR 0 1
75316: PPUSH
75317: CALL_OW 437
75321: PUSH
75322: LD_INT 1
75324: ARRAY
75325: PUSH
75326: LD_INT 3
75328: ARRAY
75329: EQUAL
75330: AND
75331: IFFALSE 75341
// result := true end ;
75333: LD_ADDR_VAR 0 3
75337: PUSH
75338: LD_INT 1
75340: ST_TO_ADDR
// end ;
75341: LD_VAR 0 3
75345: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75346: LD_INT 0
75348: PPUSH
// result := false ;
75349: LD_ADDR_VAR 0 4
75353: PUSH
75354: LD_INT 0
75356: ST_TO_ADDR
// if GetTaskList ( unit ) then
75357: LD_VAR 0 1
75361: PPUSH
75362: CALL_OW 437
75366: IFFALSE 75449
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75368: LD_STRING M
75370: PUSH
75371: LD_VAR 0 1
75375: PPUSH
75376: CALL_OW 437
75380: PUSH
75381: LD_INT 1
75383: ARRAY
75384: PUSH
75385: LD_INT 1
75387: ARRAY
75388: EQUAL
75389: PUSH
75390: LD_VAR 0 2
75394: PUSH
75395: LD_VAR 0 1
75399: PPUSH
75400: CALL_OW 437
75404: PUSH
75405: LD_INT 1
75407: ARRAY
75408: PUSH
75409: LD_INT 2
75411: ARRAY
75412: EQUAL
75413: AND
75414: PUSH
75415: LD_VAR 0 3
75419: PUSH
75420: LD_VAR 0 1
75424: PPUSH
75425: CALL_OW 437
75429: PUSH
75430: LD_INT 1
75432: ARRAY
75433: PUSH
75434: LD_INT 3
75436: ARRAY
75437: EQUAL
75438: AND
75439: IFFALSE 75449
// result := true ;
75441: LD_ADDR_VAR 0 4
75445: PUSH
75446: LD_INT 1
75448: ST_TO_ADDR
// end ; end ;
75449: LD_VAR 0 4
75453: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75454: LD_INT 0
75456: PPUSH
75457: PPUSH
75458: PPUSH
75459: PPUSH
// if not unit or not area then
75460: LD_VAR 0 1
75464: NOT
75465: PUSH
75466: LD_VAR 0 2
75470: NOT
75471: OR
75472: IFFALSE 75476
// exit ;
75474: GO 75640
// tmp := AreaToList ( area , i ) ;
75476: LD_ADDR_VAR 0 6
75480: PUSH
75481: LD_VAR 0 2
75485: PPUSH
75486: LD_VAR 0 5
75490: PPUSH
75491: CALL_OW 517
75495: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75496: LD_ADDR_VAR 0 5
75500: PUSH
75501: DOUBLE
75502: LD_INT 1
75504: DEC
75505: ST_TO_ADDR
75506: LD_VAR 0 6
75510: PUSH
75511: LD_INT 1
75513: ARRAY
75514: PUSH
75515: FOR_TO
75516: IFFALSE 75638
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75518: LD_ADDR_VAR 0 7
75522: PUSH
75523: LD_VAR 0 6
75527: PUSH
75528: LD_INT 1
75530: ARRAY
75531: PUSH
75532: LD_VAR 0 5
75536: ARRAY
75537: PUSH
75538: LD_VAR 0 6
75542: PUSH
75543: LD_INT 2
75545: ARRAY
75546: PUSH
75547: LD_VAR 0 5
75551: ARRAY
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75557: LD_VAR 0 7
75561: PUSH
75562: LD_INT 1
75564: ARRAY
75565: PPUSH
75566: LD_VAR 0 7
75570: PUSH
75571: LD_INT 2
75573: ARRAY
75574: PPUSH
75575: CALL_OW 428
75579: PUSH
75580: LD_INT 0
75582: EQUAL
75583: IFFALSE 75636
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75585: LD_VAR 0 1
75589: PPUSH
75590: LD_VAR 0 7
75594: PUSH
75595: LD_INT 1
75597: ARRAY
75598: PPUSH
75599: LD_VAR 0 7
75603: PUSH
75604: LD_INT 2
75606: ARRAY
75607: PPUSH
75608: LD_VAR 0 3
75612: PPUSH
75613: CALL_OW 48
// result := IsPlaced ( unit ) ;
75617: LD_ADDR_VAR 0 4
75621: PUSH
75622: LD_VAR 0 1
75626: PPUSH
75627: CALL_OW 305
75631: ST_TO_ADDR
// exit ;
75632: POP
75633: POP
75634: GO 75640
// end ; end ;
75636: GO 75515
75638: POP
75639: POP
// end ;
75640: LD_VAR 0 4
75644: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75645: LD_INT 0
75647: PPUSH
75648: PPUSH
75649: PPUSH
// if not side or side > 8 then
75650: LD_VAR 0 1
75654: NOT
75655: PUSH
75656: LD_VAR 0 1
75660: PUSH
75661: LD_INT 8
75663: GREATER
75664: OR
75665: IFFALSE 75669
// exit ;
75667: GO 75856
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75669: LD_ADDR_VAR 0 4
75673: PUSH
75674: LD_INT 22
75676: PUSH
75677: LD_VAR 0 1
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: PUSH
75686: LD_INT 21
75688: PUSH
75689: LD_INT 3
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PPUSH
75700: CALL_OW 69
75704: ST_TO_ADDR
// if not tmp then
75705: LD_VAR 0 4
75709: NOT
75710: IFFALSE 75714
// exit ;
75712: GO 75856
// enable_addtolog := true ;
75714: LD_ADDR_OWVAR 81
75718: PUSH
75719: LD_INT 1
75721: ST_TO_ADDR
// AddToLog ( [ ) ;
75722: LD_STRING [
75724: PPUSH
75725: CALL_OW 561
// for i in tmp do
75729: LD_ADDR_VAR 0 3
75733: PUSH
75734: LD_VAR 0 4
75738: PUSH
75739: FOR_IN
75740: IFFALSE 75847
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75742: LD_STRING [
75744: PUSH
75745: LD_VAR 0 3
75749: PPUSH
75750: CALL_OW 266
75754: STR
75755: PUSH
75756: LD_STRING , 
75758: STR
75759: PUSH
75760: LD_VAR 0 3
75764: PPUSH
75765: CALL_OW 250
75769: STR
75770: PUSH
75771: LD_STRING , 
75773: STR
75774: PUSH
75775: LD_VAR 0 3
75779: PPUSH
75780: CALL_OW 251
75784: STR
75785: PUSH
75786: LD_STRING , 
75788: STR
75789: PUSH
75790: LD_VAR 0 3
75794: PPUSH
75795: CALL_OW 254
75799: STR
75800: PUSH
75801: LD_STRING , 
75803: STR
75804: PUSH
75805: LD_VAR 0 3
75809: PPUSH
75810: LD_INT 1
75812: PPUSH
75813: CALL_OW 268
75817: STR
75818: PUSH
75819: LD_STRING , 
75821: STR
75822: PUSH
75823: LD_VAR 0 3
75827: PPUSH
75828: LD_INT 2
75830: PPUSH
75831: CALL_OW 268
75835: STR
75836: PUSH
75837: LD_STRING ],
75839: STR
75840: PPUSH
75841: CALL_OW 561
// end ;
75845: GO 75739
75847: POP
75848: POP
// AddToLog ( ]; ) ;
75849: LD_STRING ];
75851: PPUSH
75852: CALL_OW 561
// end ;
75856: LD_VAR 0 2
75860: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75861: LD_INT 0
75863: PPUSH
75864: PPUSH
75865: PPUSH
75866: PPUSH
75867: PPUSH
// if not area or not rate or not max then
75868: LD_VAR 0 1
75872: NOT
75873: PUSH
75874: LD_VAR 0 2
75878: NOT
75879: OR
75880: PUSH
75881: LD_VAR 0 4
75885: NOT
75886: OR
75887: IFFALSE 75891
// exit ;
75889: GO 76080
// while 1 do
75891: LD_INT 1
75893: IFFALSE 76080
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75895: LD_ADDR_VAR 0 9
75899: PUSH
75900: LD_VAR 0 1
75904: PPUSH
75905: LD_INT 1
75907: PPUSH
75908: CALL_OW 287
75912: PUSH
75913: LD_INT 10
75915: MUL
75916: ST_TO_ADDR
// r := rate / 10 ;
75917: LD_ADDR_VAR 0 7
75921: PUSH
75922: LD_VAR 0 2
75926: PUSH
75927: LD_INT 10
75929: DIVREAL
75930: ST_TO_ADDR
// time := 1 1$00 ;
75931: LD_ADDR_VAR 0 8
75935: PUSH
75936: LD_INT 2100
75938: ST_TO_ADDR
// if amount < min then
75939: LD_VAR 0 9
75943: PUSH
75944: LD_VAR 0 3
75948: LESS
75949: IFFALSE 75967
// r := r * 2 else
75951: LD_ADDR_VAR 0 7
75955: PUSH
75956: LD_VAR 0 7
75960: PUSH
75961: LD_INT 2
75963: MUL
75964: ST_TO_ADDR
75965: GO 75993
// if amount > max then
75967: LD_VAR 0 9
75971: PUSH
75972: LD_VAR 0 4
75976: GREATER
75977: IFFALSE 75993
// r := r / 2 ;
75979: LD_ADDR_VAR 0 7
75983: PUSH
75984: LD_VAR 0 7
75988: PUSH
75989: LD_INT 2
75991: DIVREAL
75992: ST_TO_ADDR
// time := time / r ;
75993: LD_ADDR_VAR 0 8
75997: PUSH
75998: LD_VAR 0 8
76002: PUSH
76003: LD_VAR 0 7
76007: DIVREAL
76008: ST_TO_ADDR
// if time < 0 then
76009: LD_VAR 0 8
76013: PUSH
76014: LD_INT 0
76016: LESS
76017: IFFALSE 76034
// time := time * - 1 ;
76019: LD_ADDR_VAR 0 8
76023: PUSH
76024: LD_VAR 0 8
76028: PUSH
76029: LD_INT 1
76031: NEG
76032: MUL
76033: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76034: LD_VAR 0 8
76038: PUSH
76039: LD_INT 35
76041: PPUSH
76042: LD_INT 875
76044: PPUSH
76045: CALL_OW 12
76049: PLUS
76050: PPUSH
76051: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76055: LD_INT 1
76057: PPUSH
76058: LD_INT 5
76060: PPUSH
76061: CALL_OW 12
76065: PPUSH
76066: LD_VAR 0 1
76070: PPUSH
76071: LD_INT 1
76073: PPUSH
76074: CALL_OW 55
// end ;
76078: GO 75891
// end ;
76080: LD_VAR 0 5
76084: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76085: LD_INT 0
76087: PPUSH
76088: PPUSH
76089: PPUSH
76090: PPUSH
76091: PPUSH
76092: PPUSH
76093: PPUSH
76094: PPUSH
// if not turrets or not factories then
76095: LD_VAR 0 1
76099: NOT
76100: PUSH
76101: LD_VAR 0 2
76105: NOT
76106: OR
76107: IFFALSE 76111
// exit ;
76109: GO 76418
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76111: LD_ADDR_VAR 0 10
76115: PUSH
76116: LD_INT 5
76118: PUSH
76119: LD_INT 6
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 2
76128: PUSH
76129: LD_INT 4
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: LD_INT 3
76138: PUSH
76139: LD_INT 5
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: LIST
76150: PUSH
76151: LD_INT 24
76153: PUSH
76154: LD_INT 25
76156: PUSH
76157: EMPTY
76158: LIST
76159: LIST
76160: PUSH
76161: LD_INT 23
76163: PUSH
76164: LD_INT 27
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: PUSH
76175: LD_INT 42
76177: PUSH
76178: LD_INT 43
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: PUSH
76185: LD_INT 44
76187: PUSH
76188: LD_INT 46
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: LD_INT 45
76197: PUSH
76198: LD_INT 47
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: LIST
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: LIST
76214: ST_TO_ADDR
// result := [ ] ;
76215: LD_ADDR_VAR 0 3
76219: PUSH
76220: EMPTY
76221: ST_TO_ADDR
// for i in turrets do
76222: LD_ADDR_VAR 0 4
76226: PUSH
76227: LD_VAR 0 1
76231: PUSH
76232: FOR_IN
76233: IFFALSE 76416
// begin nat := GetNation ( i ) ;
76235: LD_ADDR_VAR 0 7
76239: PUSH
76240: LD_VAR 0 4
76244: PPUSH
76245: CALL_OW 248
76249: ST_TO_ADDR
// weapon := 0 ;
76250: LD_ADDR_VAR 0 8
76254: PUSH
76255: LD_INT 0
76257: ST_TO_ADDR
// if not nat then
76258: LD_VAR 0 7
76262: NOT
76263: IFFALSE 76267
// continue ;
76265: GO 76232
// for j in list [ nat ] do
76267: LD_ADDR_VAR 0 5
76271: PUSH
76272: LD_VAR 0 10
76276: PUSH
76277: LD_VAR 0 7
76281: ARRAY
76282: PUSH
76283: FOR_IN
76284: IFFALSE 76325
// if GetBWeapon ( i ) = j [ 1 ] then
76286: LD_VAR 0 4
76290: PPUSH
76291: CALL_OW 269
76295: PUSH
76296: LD_VAR 0 5
76300: PUSH
76301: LD_INT 1
76303: ARRAY
76304: EQUAL
76305: IFFALSE 76323
// begin weapon := j [ 2 ] ;
76307: LD_ADDR_VAR 0 8
76311: PUSH
76312: LD_VAR 0 5
76316: PUSH
76317: LD_INT 2
76319: ARRAY
76320: ST_TO_ADDR
// break ;
76321: GO 76325
// end ;
76323: GO 76283
76325: POP
76326: POP
// if not weapon then
76327: LD_VAR 0 8
76331: NOT
76332: IFFALSE 76336
// continue ;
76334: GO 76232
// for k in factories do
76336: LD_ADDR_VAR 0 6
76340: PUSH
76341: LD_VAR 0 2
76345: PUSH
76346: FOR_IN
76347: IFFALSE 76412
// begin weapons := AvailableWeaponList ( k ) ;
76349: LD_ADDR_VAR 0 9
76353: PUSH
76354: LD_VAR 0 6
76358: PPUSH
76359: CALL_OW 478
76363: ST_TO_ADDR
// if not weapons then
76364: LD_VAR 0 9
76368: NOT
76369: IFFALSE 76373
// continue ;
76371: GO 76346
// if weapon in weapons then
76373: LD_VAR 0 8
76377: PUSH
76378: LD_VAR 0 9
76382: IN
76383: IFFALSE 76410
// begin result := [ i , weapon ] ;
76385: LD_ADDR_VAR 0 3
76389: PUSH
76390: LD_VAR 0 4
76394: PUSH
76395: LD_VAR 0 8
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: ST_TO_ADDR
// exit ;
76404: POP
76405: POP
76406: POP
76407: POP
76408: GO 76418
// end ; end ;
76410: GO 76346
76412: POP
76413: POP
// end ;
76414: GO 76232
76416: POP
76417: POP
// end ;
76418: LD_VAR 0 3
76422: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76423: LD_INT 0
76425: PPUSH
// if not side or side > 8 then
76426: LD_VAR 0 3
76430: NOT
76431: PUSH
76432: LD_VAR 0 3
76436: PUSH
76437: LD_INT 8
76439: GREATER
76440: OR
76441: IFFALSE 76445
// exit ;
76443: GO 76504
// if not range then
76445: LD_VAR 0 4
76449: NOT
76450: IFFALSE 76461
// range := - 12 ;
76452: LD_ADDR_VAR 0 4
76456: PUSH
76457: LD_INT 12
76459: NEG
76460: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76461: LD_VAR 0 1
76465: PPUSH
76466: LD_VAR 0 2
76470: PPUSH
76471: LD_VAR 0 3
76475: PPUSH
76476: LD_VAR 0 4
76480: PPUSH
76481: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76485: LD_VAR 0 1
76489: PPUSH
76490: LD_VAR 0 2
76494: PPUSH
76495: LD_VAR 0 3
76499: PPUSH
76500: CALL_OW 331
// end ;
76504: LD_VAR 0 5
76508: RET
// export function Video ( mode ) ; begin
76509: LD_INT 0
76511: PPUSH
// ingame_video = mode ;
76512: LD_ADDR_OWVAR 52
76516: PUSH
76517: LD_VAR 0 1
76521: ST_TO_ADDR
// interface_hidden = mode ;
76522: LD_ADDR_OWVAR 54
76526: PUSH
76527: LD_VAR 0 1
76531: ST_TO_ADDR
// end ;
76532: LD_VAR 0 2
76536: RET
// export function Join ( array , element ) ; begin
76537: LD_INT 0
76539: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76540: LD_ADDR_VAR 0 3
76544: PUSH
76545: LD_VAR 0 1
76549: PPUSH
76550: LD_VAR 0 1
76554: PUSH
76555: LD_INT 1
76557: PLUS
76558: PPUSH
76559: LD_VAR 0 2
76563: PPUSH
76564: CALL_OW 1
76568: ST_TO_ADDR
// end ;
76569: LD_VAR 0 3
76573: RET
// export function JoinUnion ( array , element ) ; begin
76574: LD_INT 0
76576: PPUSH
// result := array union element ;
76577: LD_ADDR_VAR 0 3
76581: PUSH
76582: LD_VAR 0 1
76586: PUSH
76587: LD_VAR 0 2
76591: UNION
76592: ST_TO_ADDR
// end ;
76593: LD_VAR 0 3
76597: RET
// export function GetBehemoths ( side ) ; begin
76598: LD_INT 0
76600: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76601: LD_ADDR_VAR 0 2
76605: PUSH
76606: LD_INT 22
76608: PUSH
76609: LD_VAR 0 1
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: PUSH
76618: LD_INT 31
76620: PUSH
76621: LD_INT 25
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PPUSH
76632: CALL_OW 69
76636: ST_TO_ADDR
// end ;
76637: LD_VAR 0 2
76641: RET
// export function Shuffle ( array ) ; var i , index ; begin
76642: LD_INT 0
76644: PPUSH
76645: PPUSH
76646: PPUSH
// result := [ ] ;
76647: LD_ADDR_VAR 0 2
76651: PUSH
76652: EMPTY
76653: ST_TO_ADDR
// if not array then
76654: LD_VAR 0 1
76658: NOT
76659: IFFALSE 76663
// exit ;
76661: GO 76762
// Randomize ;
76663: CALL_OW 10
// for i = array downto 1 do
76667: LD_ADDR_VAR 0 3
76671: PUSH
76672: DOUBLE
76673: LD_VAR 0 1
76677: INC
76678: ST_TO_ADDR
76679: LD_INT 1
76681: PUSH
76682: FOR_DOWNTO
76683: IFFALSE 76760
// begin index := rand ( 1 , array ) ;
76685: LD_ADDR_VAR 0 4
76689: PUSH
76690: LD_INT 1
76692: PPUSH
76693: LD_VAR 0 1
76697: PPUSH
76698: CALL_OW 12
76702: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76703: LD_ADDR_VAR 0 2
76707: PUSH
76708: LD_VAR 0 2
76712: PPUSH
76713: LD_VAR 0 2
76717: PUSH
76718: LD_INT 1
76720: PLUS
76721: PPUSH
76722: LD_VAR 0 1
76726: PUSH
76727: LD_VAR 0 4
76731: ARRAY
76732: PPUSH
76733: CALL_OW 2
76737: ST_TO_ADDR
// array := Delete ( array , index ) ;
76738: LD_ADDR_VAR 0 1
76742: PUSH
76743: LD_VAR 0 1
76747: PPUSH
76748: LD_VAR 0 4
76752: PPUSH
76753: CALL_OW 3
76757: ST_TO_ADDR
// end ;
76758: GO 76682
76760: POP
76761: POP
// end ;
76762: LD_VAR 0 2
76766: RET
// export function GetBaseMaterials ( base ) ; begin
76767: LD_INT 0
76769: PPUSH
// result := [ 0 , 0 , 0 ] ;
76770: LD_ADDR_VAR 0 2
76774: PUSH
76775: LD_INT 0
76777: PUSH
76778: LD_INT 0
76780: PUSH
76781: LD_INT 0
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: LIST
76788: ST_TO_ADDR
// if not base then
76789: LD_VAR 0 1
76793: NOT
76794: IFFALSE 76798
// exit ;
76796: GO 76847
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76798: LD_ADDR_VAR 0 2
76802: PUSH
76803: LD_VAR 0 1
76807: PPUSH
76808: LD_INT 1
76810: PPUSH
76811: CALL_OW 275
76815: PUSH
76816: LD_VAR 0 1
76820: PPUSH
76821: LD_INT 2
76823: PPUSH
76824: CALL_OW 275
76828: PUSH
76829: LD_VAR 0 1
76833: PPUSH
76834: LD_INT 3
76836: PPUSH
76837: CALL_OW 275
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: LIST
76846: ST_TO_ADDR
// end ;
76847: LD_VAR 0 2
76851: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76852: LD_INT 0
76854: PPUSH
76855: PPUSH
// result := array ;
76856: LD_ADDR_VAR 0 3
76860: PUSH
76861: LD_VAR 0 1
76865: ST_TO_ADDR
// if size >= result then
76866: LD_VAR 0 2
76870: PUSH
76871: LD_VAR 0 3
76875: GREATEREQUAL
76876: IFFALSE 76880
// exit ;
76878: GO 76930
// if size then
76880: LD_VAR 0 2
76884: IFFALSE 76930
// for i := array downto size do
76886: LD_ADDR_VAR 0 4
76890: PUSH
76891: DOUBLE
76892: LD_VAR 0 1
76896: INC
76897: ST_TO_ADDR
76898: LD_VAR 0 2
76902: PUSH
76903: FOR_DOWNTO
76904: IFFALSE 76928
// result := Delete ( result , result ) ;
76906: LD_ADDR_VAR 0 3
76910: PUSH
76911: LD_VAR 0 3
76915: PPUSH
76916: LD_VAR 0 3
76920: PPUSH
76921: CALL_OW 3
76925: ST_TO_ADDR
76926: GO 76903
76928: POP
76929: POP
// end ;
76930: LD_VAR 0 3
76934: RET
// export function ComExit ( unit ) ; var tmp ; begin
76935: LD_INT 0
76937: PPUSH
76938: PPUSH
// if not IsInUnit ( unit ) then
76939: LD_VAR 0 1
76943: PPUSH
76944: CALL_OW 310
76948: NOT
76949: IFFALSE 76953
// exit ;
76951: GO 77013
// tmp := IsInUnit ( unit ) ;
76953: LD_ADDR_VAR 0 3
76957: PUSH
76958: LD_VAR 0 1
76962: PPUSH
76963: CALL_OW 310
76967: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76968: LD_VAR 0 3
76972: PPUSH
76973: CALL_OW 247
76977: PUSH
76978: LD_INT 2
76980: EQUAL
76981: IFFALSE 76994
// ComExitVehicle ( unit ) else
76983: LD_VAR 0 1
76987: PPUSH
76988: CALL_OW 121
76992: GO 77003
// ComExitBuilding ( unit ) ;
76994: LD_VAR 0 1
76998: PPUSH
76999: CALL_OW 122
// result := tmp ;
77003: LD_ADDR_VAR 0 2
77007: PUSH
77008: LD_VAR 0 3
77012: ST_TO_ADDR
// end ;
77013: LD_VAR 0 2
77017: RET
// export function ComExitAll ( units ) ; var i ; begin
77018: LD_INT 0
77020: PPUSH
77021: PPUSH
// if not units then
77022: LD_VAR 0 1
77026: NOT
77027: IFFALSE 77031
// exit ;
77029: GO 77057
// for i in units do
77031: LD_ADDR_VAR 0 3
77035: PUSH
77036: LD_VAR 0 1
77040: PUSH
77041: FOR_IN
77042: IFFALSE 77055
// ComExit ( i ) ;
77044: LD_VAR 0 3
77048: PPUSH
77049: CALL 76935 0 1
77053: GO 77041
77055: POP
77056: POP
// end ;
77057: LD_VAR 0 2
77061: RET
// export function ResetHc ; begin
77062: LD_INT 0
77064: PPUSH
// InitHc ;
77065: CALL_OW 19
// hc_importance := 0 ;
77069: LD_ADDR_OWVAR 32
77073: PUSH
77074: LD_INT 0
77076: ST_TO_ADDR
// end ;
77077: LD_VAR 0 1
77081: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77082: LD_INT 0
77084: PPUSH
77085: PPUSH
77086: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77087: LD_ADDR_VAR 0 6
77091: PUSH
77092: LD_VAR 0 1
77096: PUSH
77097: LD_VAR 0 3
77101: PLUS
77102: PUSH
77103: LD_INT 2
77105: DIV
77106: ST_TO_ADDR
// if _x < 0 then
77107: LD_VAR 0 6
77111: PUSH
77112: LD_INT 0
77114: LESS
77115: IFFALSE 77132
// _x := _x * - 1 ;
77117: LD_ADDR_VAR 0 6
77121: PUSH
77122: LD_VAR 0 6
77126: PUSH
77127: LD_INT 1
77129: NEG
77130: MUL
77131: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77132: LD_ADDR_VAR 0 7
77136: PUSH
77137: LD_VAR 0 2
77141: PUSH
77142: LD_VAR 0 4
77146: PLUS
77147: PUSH
77148: LD_INT 2
77150: DIV
77151: ST_TO_ADDR
// if _y < 0 then
77152: LD_VAR 0 7
77156: PUSH
77157: LD_INT 0
77159: LESS
77160: IFFALSE 77177
// _y := _y * - 1 ;
77162: LD_ADDR_VAR 0 7
77166: PUSH
77167: LD_VAR 0 7
77171: PUSH
77172: LD_INT 1
77174: NEG
77175: MUL
77176: ST_TO_ADDR
// result := [ _x , _y ] ;
77177: LD_ADDR_VAR 0 5
77181: PUSH
77182: LD_VAR 0 6
77186: PUSH
77187: LD_VAR 0 7
77191: PUSH
77192: EMPTY
77193: LIST
77194: LIST
77195: ST_TO_ADDR
// end ;
77196: LD_VAR 0 5
77200: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77201: LD_INT 0
77203: PPUSH
77204: PPUSH
77205: PPUSH
77206: PPUSH
// task := GetTaskList ( unit ) ;
77207: LD_ADDR_VAR 0 7
77211: PUSH
77212: LD_VAR 0 1
77216: PPUSH
77217: CALL_OW 437
77221: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77222: LD_VAR 0 7
77226: NOT
77227: PUSH
77228: LD_VAR 0 1
77232: PPUSH
77233: LD_VAR 0 2
77237: PPUSH
77238: CALL_OW 308
77242: NOT
77243: AND
77244: IFFALSE 77248
// exit ;
77246: GO 77366
// if IsInArea ( unit , area ) then
77248: LD_VAR 0 1
77252: PPUSH
77253: LD_VAR 0 2
77257: PPUSH
77258: CALL_OW 308
77262: IFFALSE 77280
// begin ComMoveToArea ( unit , goAway ) ;
77264: LD_VAR 0 1
77268: PPUSH
77269: LD_VAR 0 3
77273: PPUSH
77274: CALL_OW 113
// exit ;
77278: GO 77366
// end ; if task [ 1 ] [ 1 ] <> M then
77280: LD_VAR 0 7
77284: PUSH
77285: LD_INT 1
77287: ARRAY
77288: PUSH
77289: LD_INT 1
77291: ARRAY
77292: PUSH
77293: LD_STRING M
77295: NONEQUAL
77296: IFFALSE 77300
// exit ;
77298: GO 77366
// x := task [ 1 ] [ 2 ] ;
77300: LD_ADDR_VAR 0 5
77304: PUSH
77305: LD_VAR 0 7
77309: PUSH
77310: LD_INT 1
77312: ARRAY
77313: PUSH
77314: LD_INT 2
77316: ARRAY
77317: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77318: LD_ADDR_VAR 0 6
77322: PUSH
77323: LD_VAR 0 7
77327: PUSH
77328: LD_INT 1
77330: ARRAY
77331: PUSH
77332: LD_INT 3
77334: ARRAY
77335: ST_TO_ADDR
// if InArea ( x , y , area ) then
77336: LD_VAR 0 5
77340: PPUSH
77341: LD_VAR 0 6
77345: PPUSH
77346: LD_VAR 0 2
77350: PPUSH
77351: CALL_OW 309
77355: IFFALSE 77366
// ComStop ( unit ) ;
77357: LD_VAR 0 1
77361: PPUSH
77362: CALL_OW 141
// end ;
77366: LD_VAR 0 4
77370: RET
// export function Abs ( value ) ; begin
77371: LD_INT 0
77373: PPUSH
// result := value ;
77374: LD_ADDR_VAR 0 2
77378: PUSH
77379: LD_VAR 0 1
77383: ST_TO_ADDR
// if value < 0 then
77384: LD_VAR 0 1
77388: PUSH
77389: LD_INT 0
77391: LESS
77392: IFFALSE 77409
// result := value * - 1 ;
77394: LD_ADDR_VAR 0 2
77398: PUSH
77399: LD_VAR 0 1
77403: PUSH
77404: LD_INT 1
77406: NEG
77407: MUL
77408: ST_TO_ADDR
// end ;
77409: LD_VAR 0 2
77413: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77414: LD_INT 0
77416: PPUSH
77417: PPUSH
77418: PPUSH
77419: PPUSH
77420: PPUSH
77421: PPUSH
77422: PPUSH
77423: PPUSH
// if not unit or not building then
77424: LD_VAR 0 1
77428: NOT
77429: PUSH
77430: LD_VAR 0 2
77434: NOT
77435: OR
77436: IFFALSE 77440
// exit ;
77438: GO 77666
// x := GetX ( building ) ;
77440: LD_ADDR_VAR 0 4
77444: PUSH
77445: LD_VAR 0 2
77449: PPUSH
77450: CALL_OW 250
77454: ST_TO_ADDR
// y := GetY ( building ) ;
77455: LD_ADDR_VAR 0 6
77459: PUSH
77460: LD_VAR 0 2
77464: PPUSH
77465: CALL_OW 251
77469: ST_TO_ADDR
// d := GetDir ( building ) ;
77470: LD_ADDR_VAR 0 8
77474: PUSH
77475: LD_VAR 0 2
77479: PPUSH
77480: CALL_OW 254
77484: ST_TO_ADDR
// r := 4 ;
77485: LD_ADDR_VAR 0 9
77489: PUSH
77490: LD_INT 4
77492: ST_TO_ADDR
// for i := 1 to 5 do
77493: LD_ADDR_VAR 0 10
77497: PUSH
77498: DOUBLE
77499: LD_INT 1
77501: DEC
77502: ST_TO_ADDR
77503: LD_INT 5
77505: PUSH
77506: FOR_TO
77507: IFFALSE 77664
// begin _x := ShiftX ( x , d , r + i ) ;
77509: LD_ADDR_VAR 0 5
77513: PUSH
77514: LD_VAR 0 4
77518: PPUSH
77519: LD_VAR 0 8
77523: PPUSH
77524: LD_VAR 0 9
77528: PUSH
77529: LD_VAR 0 10
77533: PLUS
77534: PPUSH
77535: CALL_OW 272
77539: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77540: LD_ADDR_VAR 0 7
77544: PUSH
77545: LD_VAR 0 6
77549: PPUSH
77550: LD_VAR 0 8
77554: PPUSH
77555: LD_VAR 0 9
77559: PUSH
77560: LD_VAR 0 10
77564: PLUS
77565: PPUSH
77566: CALL_OW 273
77570: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77571: LD_VAR 0 5
77575: PPUSH
77576: LD_VAR 0 7
77580: PPUSH
77581: CALL_OW 488
77585: PUSH
77586: LD_VAR 0 5
77590: PPUSH
77591: LD_VAR 0 7
77595: PPUSH
77596: CALL_OW 428
77600: PPUSH
77601: CALL_OW 247
77605: PUSH
77606: LD_INT 3
77608: PUSH
77609: LD_INT 2
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: IN
77616: NOT
77617: AND
77618: IFFALSE 77662
// begin ComMoveXY ( unit , _x , _y ) ;
77620: LD_VAR 0 1
77624: PPUSH
77625: LD_VAR 0 5
77629: PPUSH
77630: LD_VAR 0 7
77634: PPUSH
77635: CALL_OW 111
// result := [ _x , _y ] ;
77639: LD_ADDR_VAR 0 3
77643: PUSH
77644: LD_VAR 0 5
77648: PUSH
77649: LD_VAR 0 7
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: ST_TO_ADDR
// exit ;
77658: POP
77659: POP
77660: GO 77666
// end ; end ;
77662: GO 77506
77664: POP
77665: POP
// end ;
77666: LD_VAR 0 3
77670: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77671: LD_INT 0
77673: PPUSH
77674: PPUSH
77675: PPUSH
// result := 0 ;
77676: LD_ADDR_VAR 0 3
77680: PUSH
77681: LD_INT 0
77683: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77684: LD_VAR 0 1
77688: PUSH
77689: LD_INT 0
77691: LESS
77692: PUSH
77693: LD_VAR 0 1
77697: PUSH
77698: LD_INT 8
77700: GREATER
77701: OR
77702: PUSH
77703: LD_VAR 0 2
77707: PUSH
77708: LD_INT 0
77710: LESS
77711: OR
77712: PUSH
77713: LD_VAR 0 2
77717: PUSH
77718: LD_INT 8
77720: GREATER
77721: OR
77722: IFFALSE 77726
// exit ;
77724: GO 77801
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77726: LD_ADDR_VAR 0 4
77730: PUSH
77731: LD_INT 22
77733: PUSH
77734: LD_VAR 0 2
77738: PUSH
77739: EMPTY
77740: LIST
77741: LIST
77742: PPUSH
77743: CALL_OW 69
77747: PUSH
77748: FOR_IN
77749: IFFALSE 77799
// begin un := UnitShoot ( i ) ;
77751: LD_ADDR_VAR 0 5
77755: PUSH
77756: LD_VAR 0 4
77760: PPUSH
77761: CALL_OW 504
77765: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77766: LD_VAR 0 5
77770: PPUSH
77771: CALL_OW 255
77775: PUSH
77776: LD_VAR 0 1
77780: EQUAL
77781: IFFALSE 77797
// begin result := un ;
77783: LD_ADDR_VAR 0 3
77787: PUSH
77788: LD_VAR 0 5
77792: ST_TO_ADDR
// exit ;
77793: POP
77794: POP
77795: GO 77801
// end ; end ;
77797: GO 77748
77799: POP
77800: POP
// end ;
77801: LD_VAR 0 3
77805: RET
// export function GetCargoBay ( units ) ; begin
77806: LD_INT 0
77808: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77809: LD_ADDR_VAR 0 2
77813: PUSH
77814: LD_VAR 0 1
77818: PPUSH
77819: LD_INT 2
77821: PUSH
77822: LD_INT 34
77824: PUSH
77825: LD_INT 12
77827: PUSH
77828: EMPTY
77829: LIST
77830: LIST
77831: PUSH
77832: LD_INT 34
77834: PUSH
77835: LD_INT 51
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: PUSH
77842: LD_INT 34
77844: PUSH
77845: LD_INT 32
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PUSH
77852: LD_INT 34
77854: PUSH
77855: LD_INT 89
77857: PUSH
77858: EMPTY
77859: LIST
77860: LIST
77861: PUSH
77862: EMPTY
77863: LIST
77864: LIST
77865: LIST
77866: LIST
77867: LIST
77868: PPUSH
77869: CALL_OW 72
77873: ST_TO_ADDR
// end ;
77874: LD_VAR 0 2
77878: RET
// export function Negate ( value ) ; begin
77879: LD_INT 0
77881: PPUSH
// result := not value ;
77882: LD_ADDR_VAR 0 2
77886: PUSH
77887: LD_VAR 0 1
77891: NOT
77892: ST_TO_ADDR
// end ;
77893: LD_VAR 0 2
77897: RET
// export function Inc ( value ) ; begin
77898: LD_INT 0
77900: PPUSH
// result := value + 1 ;
77901: LD_ADDR_VAR 0 2
77905: PUSH
77906: LD_VAR 0 1
77910: PUSH
77911: LD_INT 1
77913: PLUS
77914: ST_TO_ADDR
// end ;
77915: LD_VAR 0 2
77919: RET
// export function Dec ( value ) ; begin
77920: LD_INT 0
77922: PPUSH
// result := value - 1 ;
77923: LD_ADDR_VAR 0 2
77927: PUSH
77928: LD_VAR 0 1
77932: PUSH
77933: LD_INT 1
77935: MINUS
77936: ST_TO_ADDR
// end ;
77937: LD_VAR 0 2
77941: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77942: LD_INT 0
77944: PPUSH
77945: PPUSH
77946: PPUSH
77947: PPUSH
77948: PPUSH
77949: PPUSH
77950: PPUSH
77951: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77952: LD_VAR 0 1
77956: PPUSH
77957: LD_VAR 0 2
77961: PPUSH
77962: CALL_OW 488
77966: NOT
77967: PUSH
77968: LD_VAR 0 3
77972: PPUSH
77973: LD_VAR 0 4
77977: PPUSH
77978: CALL_OW 488
77982: NOT
77983: OR
77984: IFFALSE 77997
// begin result := - 1 ;
77986: LD_ADDR_VAR 0 5
77990: PUSH
77991: LD_INT 1
77993: NEG
77994: ST_TO_ADDR
// exit ;
77995: GO 78232
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77997: LD_ADDR_VAR 0 12
78001: PUSH
78002: LD_VAR 0 1
78006: PPUSH
78007: LD_VAR 0 2
78011: PPUSH
78012: LD_VAR 0 3
78016: PPUSH
78017: LD_VAR 0 4
78021: PPUSH
78022: CALL 77082 0 4
78026: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78027: LD_ADDR_VAR 0 11
78031: PUSH
78032: LD_VAR 0 1
78036: PPUSH
78037: LD_VAR 0 2
78041: PPUSH
78042: LD_VAR 0 12
78046: PUSH
78047: LD_INT 1
78049: ARRAY
78050: PPUSH
78051: LD_VAR 0 12
78055: PUSH
78056: LD_INT 2
78058: ARRAY
78059: PPUSH
78060: CALL_OW 298
78064: ST_TO_ADDR
// distance := 9999 ;
78065: LD_ADDR_VAR 0 10
78069: PUSH
78070: LD_INT 9999
78072: ST_TO_ADDR
// for i := 0 to 5 do
78073: LD_ADDR_VAR 0 6
78077: PUSH
78078: DOUBLE
78079: LD_INT 0
78081: DEC
78082: ST_TO_ADDR
78083: LD_INT 5
78085: PUSH
78086: FOR_TO
78087: IFFALSE 78230
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78089: LD_ADDR_VAR 0 7
78093: PUSH
78094: LD_VAR 0 1
78098: PPUSH
78099: LD_VAR 0 6
78103: PPUSH
78104: LD_VAR 0 11
78108: PPUSH
78109: CALL_OW 272
78113: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78114: LD_ADDR_VAR 0 8
78118: PUSH
78119: LD_VAR 0 2
78123: PPUSH
78124: LD_VAR 0 6
78128: PPUSH
78129: LD_VAR 0 11
78133: PPUSH
78134: CALL_OW 273
78138: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78139: LD_VAR 0 7
78143: PPUSH
78144: LD_VAR 0 8
78148: PPUSH
78149: CALL_OW 488
78153: NOT
78154: IFFALSE 78158
// continue ;
78156: GO 78086
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78158: LD_ADDR_VAR 0 9
78162: PUSH
78163: LD_VAR 0 12
78167: PUSH
78168: LD_INT 1
78170: ARRAY
78171: PPUSH
78172: LD_VAR 0 12
78176: PUSH
78177: LD_INT 2
78179: ARRAY
78180: PPUSH
78181: LD_VAR 0 7
78185: PPUSH
78186: LD_VAR 0 8
78190: PPUSH
78191: CALL_OW 298
78195: ST_TO_ADDR
// if tmp < distance then
78196: LD_VAR 0 9
78200: PUSH
78201: LD_VAR 0 10
78205: LESS
78206: IFFALSE 78228
// begin result := i ;
78208: LD_ADDR_VAR 0 5
78212: PUSH
78213: LD_VAR 0 6
78217: ST_TO_ADDR
// distance := tmp ;
78218: LD_ADDR_VAR 0 10
78222: PUSH
78223: LD_VAR 0 9
78227: ST_TO_ADDR
// end ; end ;
78228: GO 78086
78230: POP
78231: POP
// end ;
78232: LD_VAR 0 5
78236: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78237: LD_INT 0
78239: PPUSH
78240: PPUSH
// if not driver or not IsInUnit ( driver ) then
78241: LD_VAR 0 1
78245: NOT
78246: PUSH
78247: LD_VAR 0 1
78251: PPUSH
78252: CALL_OW 310
78256: NOT
78257: OR
78258: IFFALSE 78262
// exit ;
78260: GO 78352
// vehicle := IsInUnit ( driver ) ;
78262: LD_ADDR_VAR 0 3
78266: PUSH
78267: LD_VAR 0 1
78271: PPUSH
78272: CALL_OW 310
78276: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78277: LD_VAR 0 1
78281: PPUSH
78282: LD_STRING \
78284: PUSH
78285: LD_INT 0
78287: PUSH
78288: LD_INT 0
78290: PUSH
78291: LD_INT 0
78293: PUSH
78294: LD_INT 0
78296: PUSH
78297: LD_INT 0
78299: PUSH
78300: LD_INT 0
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: LIST
78307: LIST
78308: LIST
78309: LIST
78310: LIST
78311: PUSH
78312: LD_STRING E
78314: PUSH
78315: LD_INT 0
78317: PUSH
78318: LD_INT 0
78320: PUSH
78321: LD_VAR 0 3
78325: PUSH
78326: LD_INT 0
78328: PUSH
78329: LD_INT 0
78331: PUSH
78332: LD_INT 0
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: LIST
78339: LIST
78340: LIST
78341: LIST
78342: LIST
78343: PUSH
78344: EMPTY
78345: LIST
78346: LIST
78347: PPUSH
78348: CALL_OW 446
// end ;
78352: LD_VAR 0 2
78356: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78357: LD_INT 0
78359: PPUSH
78360: PPUSH
// if not driver or not IsInUnit ( driver ) then
78361: LD_VAR 0 1
78365: NOT
78366: PUSH
78367: LD_VAR 0 1
78371: PPUSH
78372: CALL_OW 310
78376: NOT
78377: OR
78378: IFFALSE 78382
// exit ;
78380: GO 78472
// vehicle := IsInUnit ( driver ) ;
78382: LD_ADDR_VAR 0 3
78386: PUSH
78387: LD_VAR 0 1
78391: PPUSH
78392: CALL_OW 310
78396: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78397: LD_VAR 0 1
78401: PPUSH
78402: LD_STRING \
78404: PUSH
78405: LD_INT 0
78407: PUSH
78408: LD_INT 0
78410: PUSH
78411: LD_INT 0
78413: PUSH
78414: LD_INT 0
78416: PUSH
78417: LD_INT 0
78419: PUSH
78420: LD_INT 0
78422: PUSH
78423: EMPTY
78424: LIST
78425: LIST
78426: LIST
78427: LIST
78428: LIST
78429: LIST
78430: LIST
78431: PUSH
78432: LD_STRING E
78434: PUSH
78435: LD_INT 0
78437: PUSH
78438: LD_INT 0
78440: PUSH
78441: LD_VAR 0 3
78445: PUSH
78446: LD_INT 0
78448: PUSH
78449: LD_INT 0
78451: PUSH
78452: LD_INT 0
78454: PUSH
78455: EMPTY
78456: LIST
78457: LIST
78458: LIST
78459: LIST
78460: LIST
78461: LIST
78462: LIST
78463: PUSH
78464: EMPTY
78465: LIST
78466: LIST
78467: PPUSH
78468: CALL_OW 447
// end ;
78472: LD_VAR 0 2
78476: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78477: LD_INT 0
78479: PPUSH
78480: PPUSH
78481: PPUSH
// tmp := [ ] ;
78482: LD_ADDR_VAR 0 5
78486: PUSH
78487: EMPTY
78488: ST_TO_ADDR
// for i in units do
78489: LD_ADDR_VAR 0 4
78493: PUSH
78494: LD_VAR 0 1
78498: PUSH
78499: FOR_IN
78500: IFFALSE 78538
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78502: LD_ADDR_VAR 0 5
78506: PUSH
78507: LD_VAR 0 5
78511: PPUSH
78512: LD_VAR 0 5
78516: PUSH
78517: LD_INT 1
78519: PLUS
78520: PPUSH
78521: LD_VAR 0 4
78525: PPUSH
78526: CALL_OW 256
78530: PPUSH
78531: CALL_OW 2
78535: ST_TO_ADDR
78536: GO 78499
78538: POP
78539: POP
// if not tmp then
78540: LD_VAR 0 5
78544: NOT
78545: IFFALSE 78549
// exit ;
78547: GO 78597
// if asc then
78549: LD_VAR 0 2
78553: IFFALSE 78577
// result := SortListByListAsc ( units , tmp ) else
78555: LD_ADDR_VAR 0 3
78559: PUSH
78560: LD_VAR 0 1
78564: PPUSH
78565: LD_VAR 0 5
78569: PPUSH
78570: CALL_OW 76
78574: ST_TO_ADDR
78575: GO 78597
// result := SortListByListDesc ( units , tmp ) ;
78577: LD_ADDR_VAR 0 3
78581: PUSH
78582: LD_VAR 0 1
78586: PPUSH
78587: LD_VAR 0 5
78591: PPUSH
78592: CALL_OW 77
78596: ST_TO_ADDR
// end ;
78597: LD_VAR 0 3
78601: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78602: LD_INT 0
78604: PPUSH
78605: PPUSH
// task := GetTaskList ( mech ) ;
78606: LD_ADDR_VAR 0 4
78610: PUSH
78611: LD_VAR 0 1
78615: PPUSH
78616: CALL_OW 437
78620: ST_TO_ADDR
// if not task then
78621: LD_VAR 0 4
78625: NOT
78626: IFFALSE 78630
// exit ;
78628: GO 78672
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78630: LD_ADDR_VAR 0 3
78634: PUSH
78635: LD_VAR 0 4
78639: PUSH
78640: LD_INT 1
78642: ARRAY
78643: PUSH
78644: LD_INT 1
78646: ARRAY
78647: PUSH
78648: LD_STRING r
78650: EQUAL
78651: PUSH
78652: LD_VAR 0 4
78656: PUSH
78657: LD_INT 1
78659: ARRAY
78660: PUSH
78661: LD_INT 4
78663: ARRAY
78664: PUSH
78665: LD_VAR 0 2
78669: EQUAL
78670: AND
78671: ST_TO_ADDR
// end ;
78672: LD_VAR 0 3
78676: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78677: LD_INT 0
78679: PPUSH
// SetDir ( unit , d ) ;
78680: LD_VAR 0 1
78684: PPUSH
78685: LD_VAR 0 4
78689: PPUSH
78690: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78694: LD_VAR 0 1
78698: PPUSH
78699: LD_VAR 0 2
78703: PPUSH
78704: LD_VAR 0 3
78708: PPUSH
78709: LD_VAR 0 5
78713: PPUSH
78714: CALL_OW 48
// end ;
78718: LD_VAR 0 6
78722: RET
// export function ToNaturalNumber ( number ) ; begin
78723: LD_INT 0
78725: PPUSH
// result := number div 1 ;
78726: LD_ADDR_VAR 0 2
78730: PUSH
78731: LD_VAR 0 1
78735: PUSH
78736: LD_INT 1
78738: DIV
78739: ST_TO_ADDR
// if number < 0 then
78740: LD_VAR 0 1
78744: PUSH
78745: LD_INT 0
78747: LESS
78748: IFFALSE 78758
// result := 0 ;
78750: LD_ADDR_VAR 0 2
78754: PUSH
78755: LD_INT 0
78757: ST_TO_ADDR
// end ;
78758: LD_VAR 0 2
78762: RET
// export function SortByClass ( units , class ) ; var un ; begin
78763: LD_INT 0
78765: PPUSH
78766: PPUSH
// if not units or not class then
78767: LD_VAR 0 1
78771: NOT
78772: PUSH
78773: LD_VAR 0 2
78777: NOT
78778: OR
78779: IFFALSE 78783
// exit ;
78781: GO 78878
// result := [ ] ;
78783: LD_ADDR_VAR 0 3
78787: PUSH
78788: EMPTY
78789: ST_TO_ADDR
// for un in units do
78790: LD_ADDR_VAR 0 4
78794: PUSH
78795: LD_VAR 0 1
78799: PUSH
78800: FOR_IN
78801: IFFALSE 78876
// if GetClass ( un ) = class then
78803: LD_VAR 0 4
78807: PPUSH
78808: CALL_OW 257
78812: PUSH
78813: LD_VAR 0 2
78817: EQUAL
78818: IFFALSE 78845
// result := Insert ( result , 1 , un ) else
78820: LD_ADDR_VAR 0 3
78824: PUSH
78825: LD_VAR 0 3
78829: PPUSH
78830: LD_INT 1
78832: PPUSH
78833: LD_VAR 0 4
78837: PPUSH
78838: CALL_OW 2
78842: ST_TO_ADDR
78843: GO 78874
// result := Replace ( result , result + 1 , un ) ;
78845: LD_ADDR_VAR 0 3
78849: PUSH
78850: LD_VAR 0 3
78854: PPUSH
78855: LD_VAR 0 3
78859: PUSH
78860: LD_INT 1
78862: PLUS
78863: PPUSH
78864: LD_VAR 0 4
78868: PPUSH
78869: CALL_OW 1
78873: ST_TO_ADDR
78874: GO 78800
78876: POP
78877: POP
// end ;
78878: LD_VAR 0 3
78882: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78883: LD_INT 0
78885: PPUSH
78886: PPUSH
78887: PPUSH
78888: PPUSH
78889: PPUSH
78890: PPUSH
78891: PPUSH
// result := [ ] ;
78892: LD_ADDR_VAR 0 4
78896: PUSH
78897: EMPTY
78898: ST_TO_ADDR
// if x - r < 0 then
78899: LD_VAR 0 1
78903: PUSH
78904: LD_VAR 0 3
78908: MINUS
78909: PUSH
78910: LD_INT 0
78912: LESS
78913: IFFALSE 78925
// min_x := 0 else
78915: LD_ADDR_VAR 0 8
78919: PUSH
78920: LD_INT 0
78922: ST_TO_ADDR
78923: GO 78941
// min_x := x - r ;
78925: LD_ADDR_VAR 0 8
78929: PUSH
78930: LD_VAR 0 1
78934: PUSH
78935: LD_VAR 0 3
78939: MINUS
78940: ST_TO_ADDR
// if y - r < 0 then
78941: LD_VAR 0 2
78945: PUSH
78946: LD_VAR 0 3
78950: MINUS
78951: PUSH
78952: LD_INT 0
78954: LESS
78955: IFFALSE 78967
// min_y := 0 else
78957: LD_ADDR_VAR 0 7
78961: PUSH
78962: LD_INT 0
78964: ST_TO_ADDR
78965: GO 78983
// min_y := y - r ;
78967: LD_ADDR_VAR 0 7
78971: PUSH
78972: LD_VAR 0 2
78976: PUSH
78977: LD_VAR 0 3
78981: MINUS
78982: ST_TO_ADDR
// max_x := x + r ;
78983: LD_ADDR_VAR 0 9
78987: PUSH
78988: LD_VAR 0 1
78992: PUSH
78993: LD_VAR 0 3
78997: PLUS
78998: ST_TO_ADDR
// max_y := y + r ;
78999: LD_ADDR_VAR 0 10
79003: PUSH
79004: LD_VAR 0 2
79008: PUSH
79009: LD_VAR 0 3
79013: PLUS
79014: ST_TO_ADDR
// for _x = min_x to max_x do
79015: LD_ADDR_VAR 0 5
79019: PUSH
79020: DOUBLE
79021: LD_VAR 0 8
79025: DEC
79026: ST_TO_ADDR
79027: LD_VAR 0 9
79031: PUSH
79032: FOR_TO
79033: IFFALSE 79134
// for _y = min_y to max_y do
79035: LD_ADDR_VAR 0 6
79039: PUSH
79040: DOUBLE
79041: LD_VAR 0 7
79045: DEC
79046: ST_TO_ADDR
79047: LD_VAR 0 10
79051: PUSH
79052: FOR_TO
79053: IFFALSE 79130
// begin if not ValidHex ( _x , _y ) then
79055: LD_VAR 0 5
79059: PPUSH
79060: LD_VAR 0 6
79064: PPUSH
79065: CALL_OW 488
79069: NOT
79070: IFFALSE 79074
// continue ;
79072: GO 79052
// if GetResourceTypeXY ( _x , _y ) then
79074: LD_VAR 0 5
79078: PPUSH
79079: LD_VAR 0 6
79083: PPUSH
79084: CALL_OW 283
79088: IFFALSE 79128
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79090: LD_ADDR_VAR 0 4
79094: PUSH
79095: LD_VAR 0 4
79099: PPUSH
79100: LD_VAR 0 4
79104: PUSH
79105: LD_INT 1
79107: PLUS
79108: PPUSH
79109: LD_VAR 0 5
79113: PUSH
79114: LD_VAR 0 6
79118: PUSH
79119: EMPTY
79120: LIST
79121: LIST
79122: PPUSH
79123: CALL_OW 1
79127: ST_TO_ADDR
// end ;
79128: GO 79052
79130: POP
79131: POP
79132: GO 79032
79134: POP
79135: POP
// end ;
79136: LD_VAR 0 4
79140: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79141: LD_INT 0
79143: PPUSH
79144: PPUSH
79145: PPUSH
79146: PPUSH
79147: PPUSH
79148: PPUSH
79149: PPUSH
79150: PPUSH
// if not units then
79151: LD_VAR 0 1
79155: NOT
79156: IFFALSE 79160
// exit ;
79158: GO 79684
// result := UnitFilter ( units , [ f_ok ] ) ;
79160: LD_ADDR_VAR 0 3
79164: PUSH
79165: LD_VAR 0 1
79169: PPUSH
79170: LD_INT 50
79172: PUSH
79173: EMPTY
79174: LIST
79175: PPUSH
79176: CALL_OW 72
79180: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79181: LD_ADDR_VAR 0 8
79185: PUSH
79186: LD_VAR 0 1
79190: PUSH
79191: LD_INT 1
79193: ARRAY
79194: PPUSH
79195: CALL_OW 255
79199: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79200: LD_ADDR_VAR 0 10
79204: PUSH
79205: LD_INT 29
79207: PUSH
79208: LD_INT 91
79210: PUSH
79211: LD_INT 49
79213: PUSH
79214: EMPTY
79215: LIST
79216: LIST
79217: LIST
79218: ST_TO_ADDR
// if not result then
79219: LD_VAR 0 3
79223: NOT
79224: IFFALSE 79228
// exit ;
79226: GO 79684
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79228: LD_ADDR_VAR 0 5
79232: PUSH
79233: LD_INT 81
79235: PUSH
79236: LD_VAR 0 8
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PPUSH
79245: CALL_OW 69
79249: ST_TO_ADDR
// for i in result do
79250: LD_ADDR_VAR 0 4
79254: PUSH
79255: LD_VAR 0 3
79259: PUSH
79260: FOR_IN
79261: IFFALSE 79682
// begin tag := GetTag ( i ) + 1 ;
79263: LD_ADDR_VAR 0 9
79267: PUSH
79268: LD_VAR 0 4
79272: PPUSH
79273: CALL_OW 110
79277: PUSH
79278: LD_INT 1
79280: PLUS
79281: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79282: LD_ADDR_VAR 0 7
79286: PUSH
79287: LD_VAR 0 4
79291: PPUSH
79292: CALL_OW 250
79296: PPUSH
79297: LD_VAR 0 4
79301: PPUSH
79302: CALL_OW 251
79306: PPUSH
79307: LD_INT 6
79309: PPUSH
79310: CALL 78883 0 3
79314: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79315: LD_VAR 0 4
79319: PPUSH
79320: CALL_OW 247
79324: PUSH
79325: LD_INT 2
79327: EQUAL
79328: PUSH
79329: LD_VAR 0 7
79333: AND
79334: PUSH
79335: LD_VAR 0 4
79339: PPUSH
79340: CALL_OW 264
79344: PUSH
79345: LD_VAR 0 10
79349: IN
79350: NOT
79351: AND
79352: IFFALSE 79391
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79354: LD_VAR 0 4
79358: PPUSH
79359: LD_VAR 0 7
79363: PUSH
79364: LD_INT 1
79366: ARRAY
79367: PUSH
79368: LD_INT 1
79370: ARRAY
79371: PPUSH
79372: LD_VAR 0 7
79376: PUSH
79377: LD_INT 1
79379: ARRAY
79380: PUSH
79381: LD_INT 2
79383: ARRAY
79384: PPUSH
79385: CALL_OW 116
79389: GO 79680
// if path > tag then
79391: LD_VAR 0 2
79395: PUSH
79396: LD_VAR 0 9
79400: GREATER
79401: IFFALSE 79609
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79403: LD_ADDR_VAR 0 6
79407: PUSH
79408: LD_VAR 0 5
79412: PPUSH
79413: LD_INT 91
79415: PUSH
79416: LD_VAR 0 4
79420: PUSH
79421: LD_INT 8
79423: PUSH
79424: EMPTY
79425: LIST
79426: LIST
79427: LIST
79428: PPUSH
79429: CALL_OW 72
79433: ST_TO_ADDR
// if nearEnemy then
79434: LD_VAR 0 6
79438: IFFALSE 79507
// begin if GetWeapon ( i ) = ru_time_lapser then
79440: LD_VAR 0 4
79444: PPUSH
79445: CALL_OW 264
79449: PUSH
79450: LD_INT 49
79452: EQUAL
79453: IFFALSE 79481
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79455: LD_VAR 0 4
79459: PPUSH
79460: LD_VAR 0 6
79464: PPUSH
79465: LD_VAR 0 4
79469: PPUSH
79470: CALL_OW 74
79474: PPUSH
79475: CALL_OW 112
79479: GO 79505
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79481: LD_VAR 0 4
79485: PPUSH
79486: LD_VAR 0 6
79490: PPUSH
79491: LD_VAR 0 4
79495: PPUSH
79496: CALL_OW 74
79500: PPUSH
79501: CALL_OW 115
// end else
79505: GO 79607
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79507: LD_VAR 0 4
79511: PPUSH
79512: LD_VAR 0 2
79516: PUSH
79517: LD_VAR 0 9
79521: ARRAY
79522: PUSH
79523: LD_INT 1
79525: ARRAY
79526: PPUSH
79527: LD_VAR 0 2
79531: PUSH
79532: LD_VAR 0 9
79536: ARRAY
79537: PUSH
79538: LD_INT 2
79540: ARRAY
79541: PPUSH
79542: CALL_OW 297
79546: PUSH
79547: LD_INT 6
79549: GREATER
79550: IFFALSE 79593
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79552: LD_VAR 0 4
79556: PPUSH
79557: LD_VAR 0 2
79561: PUSH
79562: LD_VAR 0 9
79566: ARRAY
79567: PUSH
79568: LD_INT 1
79570: ARRAY
79571: PPUSH
79572: LD_VAR 0 2
79576: PUSH
79577: LD_VAR 0 9
79581: ARRAY
79582: PUSH
79583: LD_INT 2
79585: ARRAY
79586: PPUSH
79587: CALL_OW 114
79591: GO 79607
// SetTag ( i , tag ) ;
79593: LD_VAR 0 4
79597: PPUSH
79598: LD_VAR 0 9
79602: PPUSH
79603: CALL_OW 109
// end else
79607: GO 79680
// if enemy then
79609: LD_VAR 0 5
79613: IFFALSE 79680
// begin if GetWeapon ( i ) = ru_time_lapser then
79615: LD_VAR 0 4
79619: PPUSH
79620: CALL_OW 264
79624: PUSH
79625: LD_INT 49
79627: EQUAL
79628: IFFALSE 79656
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79630: LD_VAR 0 4
79634: PPUSH
79635: LD_VAR 0 5
79639: PPUSH
79640: LD_VAR 0 4
79644: PPUSH
79645: CALL_OW 74
79649: PPUSH
79650: CALL_OW 112
79654: GO 79680
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79656: LD_VAR 0 4
79660: PPUSH
79661: LD_VAR 0 5
79665: PPUSH
79666: LD_VAR 0 4
79670: PPUSH
79671: CALL_OW 74
79675: PPUSH
79676: CALL_OW 115
// end ; end ;
79680: GO 79260
79682: POP
79683: POP
// end ;
79684: LD_VAR 0 3
79688: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79689: LD_INT 0
79691: PPUSH
79692: PPUSH
79693: PPUSH
// if not unit or IsInUnit ( unit ) then
79694: LD_VAR 0 1
79698: NOT
79699: PUSH
79700: LD_VAR 0 1
79704: PPUSH
79705: CALL_OW 310
79709: OR
79710: IFFALSE 79714
// exit ;
79712: GO 79805
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79714: LD_ADDR_VAR 0 4
79718: PUSH
79719: LD_VAR 0 1
79723: PPUSH
79724: CALL_OW 250
79728: PPUSH
79729: LD_VAR 0 2
79733: PPUSH
79734: LD_INT 1
79736: PPUSH
79737: CALL_OW 272
79741: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79742: LD_ADDR_VAR 0 5
79746: PUSH
79747: LD_VAR 0 1
79751: PPUSH
79752: CALL_OW 251
79756: PPUSH
79757: LD_VAR 0 2
79761: PPUSH
79762: LD_INT 1
79764: PPUSH
79765: CALL_OW 273
79769: ST_TO_ADDR
// if ValidHex ( x , y ) then
79770: LD_VAR 0 4
79774: PPUSH
79775: LD_VAR 0 5
79779: PPUSH
79780: CALL_OW 488
79784: IFFALSE 79805
// ComTurnXY ( unit , x , y ) ;
79786: LD_VAR 0 1
79790: PPUSH
79791: LD_VAR 0 4
79795: PPUSH
79796: LD_VAR 0 5
79800: PPUSH
79801: CALL_OW 118
// end ;
79805: LD_VAR 0 3
79809: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79810: LD_INT 0
79812: PPUSH
79813: PPUSH
// result := false ;
79814: LD_ADDR_VAR 0 3
79818: PUSH
79819: LD_INT 0
79821: ST_TO_ADDR
// if not units then
79822: LD_VAR 0 2
79826: NOT
79827: IFFALSE 79831
// exit ;
79829: GO 79876
// for i in units do
79831: LD_ADDR_VAR 0 4
79835: PUSH
79836: LD_VAR 0 2
79840: PUSH
79841: FOR_IN
79842: IFFALSE 79874
// if See ( side , i ) then
79844: LD_VAR 0 1
79848: PPUSH
79849: LD_VAR 0 4
79853: PPUSH
79854: CALL_OW 292
79858: IFFALSE 79872
// begin result := true ;
79860: LD_ADDR_VAR 0 3
79864: PUSH
79865: LD_INT 1
79867: ST_TO_ADDR
// exit ;
79868: POP
79869: POP
79870: GO 79876
// end ;
79872: GO 79841
79874: POP
79875: POP
// end ;
79876: LD_VAR 0 3
79880: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79881: LD_INT 0
79883: PPUSH
79884: PPUSH
79885: PPUSH
79886: PPUSH
// if not unit or not points then
79887: LD_VAR 0 1
79891: NOT
79892: PUSH
79893: LD_VAR 0 2
79897: NOT
79898: OR
79899: IFFALSE 79903
// exit ;
79901: GO 79993
// dist := 99999 ;
79903: LD_ADDR_VAR 0 5
79907: PUSH
79908: LD_INT 99999
79910: ST_TO_ADDR
// for i in points do
79911: LD_ADDR_VAR 0 4
79915: PUSH
79916: LD_VAR 0 2
79920: PUSH
79921: FOR_IN
79922: IFFALSE 79991
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79924: LD_ADDR_VAR 0 6
79928: PUSH
79929: LD_VAR 0 1
79933: PPUSH
79934: LD_VAR 0 4
79938: PUSH
79939: LD_INT 1
79941: ARRAY
79942: PPUSH
79943: LD_VAR 0 4
79947: PUSH
79948: LD_INT 2
79950: ARRAY
79951: PPUSH
79952: CALL_OW 297
79956: ST_TO_ADDR
// if tmpDist < dist then
79957: LD_VAR 0 6
79961: PUSH
79962: LD_VAR 0 5
79966: LESS
79967: IFFALSE 79989
// begin result := i ;
79969: LD_ADDR_VAR 0 3
79973: PUSH
79974: LD_VAR 0 4
79978: ST_TO_ADDR
// dist := tmpDist ;
79979: LD_ADDR_VAR 0 5
79983: PUSH
79984: LD_VAR 0 6
79988: ST_TO_ADDR
// end ; end ;
79989: GO 79921
79991: POP
79992: POP
// end ;
79993: LD_VAR 0 3
79997: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79998: LD_INT 0
80000: PPUSH
// uc_side := side ;
80001: LD_ADDR_OWVAR 20
80005: PUSH
80006: LD_VAR 0 1
80010: ST_TO_ADDR
// uc_nation := 3 ;
80011: LD_ADDR_OWVAR 21
80015: PUSH
80016: LD_INT 3
80018: ST_TO_ADDR
// vc_chassis := 25 ;
80019: LD_ADDR_OWVAR 37
80023: PUSH
80024: LD_INT 25
80026: ST_TO_ADDR
// vc_engine := engine_siberite ;
80027: LD_ADDR_OWVAR 39
80031: PUSH
80032: LD_INT 3
80034: ST_TO_ADDR
// vc_control := control_computer ;
80035: LD_ADDR_OWVAR 38
80039: PUSH
80040: LD_INT 3
80042: ST_TO_ADDR
// vc_weapon := 59 ;
80043: LD_ADDR_OWVAR 40
80047: PUSH
80048: LD_INT 59
80050: ST_TO_ADDR
// result := CreateVehicle ;
80051: LD_ADDR_VAR 0 5
80055: PUSH
80056: CALL_OW 45
80060: ST_TO_ADDR
// SetDir ( result , d ) ;
80061: LD_VAR 0 5
80065: PPUSH
80066: LD_VAR 0 4
80070: PPUSH
80071: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80075: LD_VAR 0 5
80079: PPUSH
80080: LD_VAR 0 2
80084: PPUSH
80085: LD_VAR 0 3
80089: PPUSH
80090: LD_INT 0
80092: PPUSH
80093: CALL_OW 48
// end ;
80097: LD_VAR 0 5
80101: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80102: LD_INT 0
80104: PPUSH
80105: PPUSH
80106: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80107: LD_ADDR_VAR 0 2
80111: PUSH
80112: LD_INT 0
80114: PUSH
80115: LD_INT 0
80117: PUSH
80118: LD_INT 0
80120: PUSH
80121: LD_INT 0
80123: PUSH
80124: EMPTY
80125: LIST
80126: LIST
80127: LIST
80128: LIST
80129: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80130: LD_VAR 0 1
80134: NOT
80135: PUSH
80136: LD_VAR 0 1
80140: PPUSH
80141: CALL_OW 264
80145: PUSH
80146: LD_INT 12
80148: PUSH
80149: LD_INT 51
80151: PUSH
80152: LD_INT 32
80154: PUSH
80155: LD_INT 89
80157: PUSH
80158: EMPTY
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: IN
80164: NOT
80165: OR
80166: IFFALSE 80170
// exit ;
80168: GO 80268
// for i := 1 to 3 do
80170: LD_ADDR_VAR 0 3
80174: PUSH
80175: DOUBLE
80176: LD_INT 1
80178: DEC
80179: ST_TO_ADDR
80180: LD_INT 3
80182: PUSH
80183: FOR_TO
80184: IFFALSE 80266
// begin tmp := GetCargo ( cargo , i ) ;
80186: LD_ADDR_VAR 0 4
80190: PUSH
80191: LD_VAR 0 1
80195: PPUSH
80196: LD_VAR 0 3
80200: PPUSH
80201: CALL_OW 289
80205: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80206: LD_ADDR_VAR 0 2
80210: PUSH
80211: LD_VAR 0 2
80215: PPUSH
80216: LD_VAR 0 3
80220: PPUSH
80221: LD_VAR 0 4
80225: PPUSH
80226: CALL_OW 1
80230: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80231: LD_ADDR_VAR 0 2
80235: PUSH
80236: LD_VAR 0 2
80240: PPUSH
80241: LD_INT 4
80243: PPUSH
80244: LD_VAR 0 2
80248: PUSH
80249: LD_INT 4
80251: ARRAY
80252: PUSH
80253: LD_VAR 0 4
80257: PLUS
80258: PPUSH
80259: CALL_OW 1
80263: ST_TO_ADDR
// end ;
80264: GO 80183
80266: POP
80267: POP
// end ;
80268: LD_VAR 0 2
80272: RET
// export function Length ( array ) ; begin
80273: LD_INT 0
80275: PPUSH
// result := array + 0 ;
80276: LD_ADDR_VAR 0 2
80280: PUSH
80281: LD_VAR 0 1
80285: PUSH
80286: LD_INT 0
80288: PLUS
80289: ST_TO_ADDR
// end ;
80290: LD_VAR 0 2
80294: RET
// export function PrepareArray ( array ) ; begin
80295: LD_INT 0
80297: PPUSH
// result := array diff 0 ;
80298: LD_ADDR_VAR 0 2
80302: PUSH
80303: LD_VAR 0 1
80307: PUSH
80308: LD_INT 0
80310: DIFF
80311: ST_TO_ADDR
// if not result [ 1 ] then
80312: LD_VAR 0 2
80316: PUSH
80317: LD_INT 1
80319: ARRAY
80320: NOT
80321: IFFALSE 80341
// result := Delete ( result , 1 ) ;
80323: LD_ADDR_VAR 0 2
80327: PUSH
80328: LD_VAR 0 2
80332: PPUSH
80333: LD_INT 1
80335: PPUSH
80336: CALL_OW 3
80340: ST_TO_ADDR
// end ;
80341: LD_VAR 0 2
80345: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80346: LD_INT 0
80348: PPUSH
80349: PPUSH
80350: PPUSH
80351: PPUSH
// sibRocketRange := 25 ;
80352: LD_ADDR_VAR 0 6
80356: PUSH
80357: LD_INT 25
80359: ST_TO_ADDR
// result := false ;
80360: LD_ADDR_VAR 0 4
80364: PUSH
80365: LD_INT 0
80367: ST_TO_ADDR
// for i := 0 to 5 do
80368: LD_ADDR_VAR 0 5
80372: PUSH
80373: DOUBLE
80374: LD_INT 0
80376: DEC
80377: ST_TO_ADDR
80378: LD_INT 5
80380: PUSH
80381: FOR_TO
80382: IFFALSE 80449
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80384: LD_VAR 0 1
80388: PPUSH
80389: LD_VAR 0 5
80393: PPUSH
80394: LD_VAR 0 6
80398: PPUSH
80399: CALL_OW 272
80403: PPUSH
80404: LD_VAR 0 2
80408: PPUSH
80409: LD_VAR 0 5
80413: PPUSH
80414: LD_VAR 0 6
80418: PPUSH
80419: CALL_OW 273
80423: PPUSH
80424: LD_VAR 0 3
80428: PPUSH
80429: CALL_OW 309
80433: IFFALSE 80447
// begin result := true ;
80435: LD_ADDR_VAR 0 4
80439: PUSH
80440: LD_INT 1
80442: ST_TO_ADDR
// exit ;
80443: POP
80444: POP
80445: GO 80451
// end ;
80447: GO 80381
80449: POP
80450: POP
// end ;
80451: LD_VAR 0 4
80455: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80456: LD_INT 0
80458: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80459: LD_VAR 0 1
80463: PPUSH
80464: LD_VAR 0 2
80468: PPUSH
80469: LD_INT 0
80471: PPUSH
80472: LD_INT 0
80474: PPUSH
80475: LD_INT 1
80477: PPUSH
80478: LD_INT 0
80480: PPUSH
80481: CALL_OW 587
// end ; end_of_file
80485: LD_VAR 0 3
80489: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80490: LD_VAR 0 1
80494: PUSH
80495: LD_INT 200
80497: DOUBLE
80498: GREATEREQUAL
80499: IFFALSE 80507
80501: LD_INT 299
80503: DOUBLE
80504: LESSEQUAL
80505: IFTRUE 80509
80507: GO 80541
80509: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80510: LD_VAR 0 1
80514: PPUSH
80515: LD_VAR 0 2
80519: PPUSH
80520: LD_VAR 0 3
80524: PPUSH
80525: LD_VAR 0 4
80529: PPUSH
80530: LD_VAR 0 5
80534: PPUSH
80535: CALL 35156 0 5
80539: GO 80618
80541: LD_INT 300
80543: DOUBLE
80544: GREATEREQUAL
80545: IFFALSE 80553
80547: LD_INT 399
80549: DOUBLE
80550: LESSEQUAL
80551: IFTRUE 80555
80553: GO 80617
80555: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80556: LD_VAR 0 1
80560: PPUSH
80561: LD_VAR 0 2
80565: PPUSH
80566: LD_VAR 0 3
80570: PPUSH
80571: LD_VAR 0 4
80575: PPUSH
80576: LD_VAR 0 5
80580: PPUSH
80581: LD_VAR 0 6
80585: PPUSH
80586: LD_VAR 0 7
80590: PPUSH
80591: LD_VAR 0 8
80595: PPUSH
80596: LD_VAR 0 9
80600: PPUSH
80601: LD_VAR 0 10
80605: PPUSH
80606: LD_VAR 0 11
80610: PPUSH
80611: CALL 31489 0 11
80615: GO 80618
80617: POP
// end ;
80618: PPOPN 11
80620: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80621: LD_VAR 0 1
80625: PPUSH
80626: LD_VAR 0 2
80630: PPUSH
80631: LD_VAR 0 3
80635: PPUSH
80636: LD_VAR 0 4
80640: PPUSH
80641: LD_VAR 0 5
80645: PPUSH
80646: CALL 34892 0 5
// end ; end_of_file
80650: PPOPN 5
80652: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80653: LD_VAR 0 1
80657: PPUSH
80658: LD_VAR 0 2
80662: PPUSH
80663: LD_VAR 0 3
80667: PPUSH
80668: LD_VAR 0 4
80672: PPUSH
80673: LD_VAR 0 5
80677: PPUSH
80678: LD_VAR 0 6
80682: PPUSH
80683: CALL 19141 0 6
// end ;
80687: PPOPN 6
80689: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80690: LD_INT 0
80692: PPUSH
// begin if not units then
80693: LD_VAR 0 1
80697: NOT
80698: IFFALSE 80702
// exit ;
80700: GO 80702
// end ;
80702: PPOPN 7
80704: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80705: CALL 19045 0 0
// end ;
80709: PPOPN 1
80711: END
