// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 14942 0 0
// PrepareDifficulty ;
  43: CALL 12315 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5557 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 38188 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 38188 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38188 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 38188 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 38188 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 38188 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 38188 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 38188 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 38188 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 38188 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 38188 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 38188 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 38188 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 74869 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12634 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12634 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 74869 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12634 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12634 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side = 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation = 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i = 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery =  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name =  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un = CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery =  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name =  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un = CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4360
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis = ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh = CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery =  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name =  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 10
4329: PPUSH
4330: CALL_OW 380
// un = CreateHuman ;
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: CALL_OW 44
4343: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_VAR 0 4
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4163
4360: POP
4361: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 3
4374: PUSH
4375: LD_INT 4
4377: PUSH
4378: LD_INT 5
4380: PUSH
4381: LD_INT 5
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4544
// begin vc_engine = 3 ;
4399: LD_ADDR_OWVAR 39
4403: PUSH
4404: LD_INT 3
4406: ST_TO_ADDR
// vc_control = 3 ;
4407: LD_ADDR_OWVAR 38
4411: PUSH
4412: LD_INT 3
4414: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4415: LD_ADDR_OWVAR 40
4419: PUSH
4420: LD_INT 42
4422: PUSH
4423: LD_INT 43
4425: PUSH
4426: LD_INT 44
4428: PUSH
4429: LD_INT 45
4431: PUSH
4432: LD_INT 46
4434: PUSH
4435: LD_INT 49
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 5
4451: PPUSH
4452: CALL_OW 12
4456: ARRAY
4457: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4458: LD_OWVAR 40
4462: PUSH
4463: LD_INT 46
4465: EQUAL
4466: IFFALSE 4478
// vc_chassis = ru_heavy_tracked else
4468: LD_ADDR_OWVAR 37
4472: PUSH
4473: LD_INT 24
4475: ST_TO_ADDR
4476: GO 4505
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4478: LD_ADDR_OWVAR 37
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 1
4495: PPUSH
4496: LD_INT 2
4498: PPUSH
4499: CALL_OW 12
4503: ARRAY
4504: ST_TO_ADDR
// veh = CreateVehicle ;
4505: LD_ADDR_VAR 0 4
4509: PUSH
4510: CALL_OW 45
4514: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4515: LD_VAR 0 4
4519: PPUSH
4520: LD_INT 3
4522: PPUSH
4523: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4527: LD_VAR 0 4
4531: PPUSH
4532: LD_INT 6
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: CALL_OW 49
// end ;
4542: GO 4396
4544: POP
4545: POP
// end ; end_of_file
4546: LD_VAR 0 1
4550: RET
// export function PrepareKurt ; begin
4551: LD_INT 0
4553: PPUSH
// uc_side = 8 ;
4554: LD_ADDR_OWVAR 20
4558: PUSH
4559: LD_INT 8
4561: ST_TO_ADDR
// uc_nation = 2 ;
4562: LD_ADDR_OWVAR 21
4566: PUSH
4567: LD_INT 2
4569: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4570: LD_ADDR_OWVAR 37
4574: PUSH
4575: LD_INT 13
4577: ST_TO_ADDR
// vc_engine = 1 ;
4578: LD_ADDR_OWVAR 39
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// vc_control = 1 ;
4586: LD_ADDR_OWVAR 38
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// vc_weapon = 24 ;
4594: LD_ADDR_OWVAR 40
4598: PUSH
4599: LD_INT 24
4601: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4602: LD_ADDR_EXP 18
4606: PUSH
4607: CALL_OW 45
4611: ST_TO_ADDR
// if kurtStatus > 0 then
4612: LD_EXP 19
4616: PUSH
4617: LD_INT 0
4619: GREATER
4620: IFFALSE 4672
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4622: LD_ADDR_EXP 17
4626: PUSH
4627: LD_STRING Kurt
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_STRING 
4635: PPUSH
4636: CALL 38188 0 3
4640: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4641: LD_EXP 18
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4656: LD_EXP 17
4660: PPUSH
4661: LD_EXP 18
4665: PPUSH
4666: CALL_OW 52
// end else
4670: GO 4749
// begin hc_name =  ;
4672: LD_ADDR_OWVAR 26
4676: PUSH
4677: LD_STRING 
4679: ST_TO_ADDR
// hc_gallery =  ;
4680: LD_ADDR_OWVAR 33
4684: PUSH
4685: LD_STRING 
4687: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4688: LD_INT 1
4690: PPUSH
4691: LD_INT 10
4693: PPUSH
4694: CALL_OW 381
// Kurt = CreateHuman ;
4698: LD_ADDR_EXP 17
4702: PUSH
4703: CALL_OW 44
4707: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4708: LD_EXP 18
4712: PPUSH
4713: LD_INT 4
4715: PPUSH
4716: LD_INT 0
4718: PPUSH
4719: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4723: LD_EXP 17
4727: PPUSH
4728: LD_EXP 18
4732: PPUSH
4733: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4737: LD_EXP 17
4741: PPUSH
4742: LD_STRING AltKurt
4744: PPUSH
4745: CALL_OW 38
// end ; end ;
4749: LD_VAR 0 1
4753: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4754: LD_INT 0
4756: PPUSH
4757: PPUSH
4758: PPUSH
4759: PPUSH
// for i = 1 to 3 do
4760: LD_ADDR_VAR 0 2
4764: PUSH
4765: DOUBLE
4766: LD_INT 1
4768: DEC
4769: ST_TO_ADDR
4770: LD_INT 3
4772: PUSH
4773: FOR_TO
4774: IFFALSE 4895
// begin uc_side = 1 ;
4776: LD_ADDR_OWVAR 20
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// uc_nation = 2 ;
4784: LD_ADDR_OWVAR 21
4788: PUSH
4789: LD_INT 2
4791: ST_TO_ADDR
// hc_gallery =  ;
4792: LD_ADDR_OWVAR 33
4796: PUSH
4797: LD_STRING 
4799: ST_TO_ADDR
// hc_name =  ;
4800: LD_ADDR_OWVAR 26
4804: PUSH
4805: LD_STRING 
4807: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4808: LD_EXP 19
4812: PUSH
4813: LD_INT 0
4815: EQUAL
4816: PUSH
4817: LD_EXP 19
4821: PUSH
4822: LD_INT 2
4824: EQUAL
4825: OR
4826: IFFALSE 4843
// PrepareHuman ( false , 1 , 6 ) else
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: LD_INT 6
4836: PPUSH
4837: CALL_OW 380
4841: GO 4856
// PrepareHuman ( false , 1 , 8 ) ;
4843: LD_INT 0
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: LD_INT 8
4851: PPUSH
4852: CALL_OW 380
// un = CreateHuman ;
4856: LD_ADDR_VAR 0 3
4860: PUSH
4861: CALL_OW 44
4865: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4866: LD_VAR 0 3
4870: PPUSH
4871: LD_INT 4
4873: PPUSH
4874: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4878: LD_VAR 0 3
4882: PPUSH
4883: LD_INT 4
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 49
// end ;
4893: GO 4773
4895: POP
4896: POP
// vc_chassis = 14 ;
4897: LD_ADDR_OWVAR 37
4901: PUSH
4902: LD_INT 14
4904: ST_TO_ADDR
// vc_engine = 3 ;
4905: LD_ADDR_OWVAR 39
4909: PUSH
4910: LD_INT 3
4912: ST_TO_ADDR
// vc_control = 1 ;
4913: LD_ADDR_OWVAR 38
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4921: LD_ADDR_OWVAR 40
4925: PUSH
4926: LD_INT 27
4928: PUSH
4929: LD_INT 26
4931: PUSH
4932: LD_INT 28
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 3
4945: PPUSH
4946: CALL_OW 12
4950: ARRAY
4951: ST_TO_ADDR
// veh = CreateVehicle ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 45
4961: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4962: LD_VAR 0 4
4966: PPUSH
4967: LD_INT 4
4969: PPUSH
4970: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4974: LD_VAR 0 4
4978: PPUSH
4979: LD_INT 4
4981: PPUSH
4982: LD_INT 0
4984: PPUSH
4985: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4989: LD_EXP 19
4993: PUSH
4994: LD_INT 0
4996: EQUAL
4997: PUSH
4998: LD_EXP 19
5002: PUSH
5003: LD_INT 2
5005: EQUAL
5006: OR
5007: IFFALSE 5024
// PrepareHuman ( false , 3 , 6 ) else
5009: LD_INT 0
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: LD_INT 6
5017: PPUSH
5018: CALL_OW 380
5022: GO 5037
// PrepareHuman ( false , 3 , 8 ) ;
5024: LD_INT 0
5026: PPUSH
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 8
5032: PPUSH
5033: CALL_OW 380
// un = CreateHuman ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: CALL_OW 44
5046: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5047: LD_VAR 0 3
5051: PPUSH
5052: LD_VAR 0 4
5056: PPUSH
5057: CALL_OW 52
// vc_chassis = 14 ;
5061: LD_ADDR_OWVAR 37
5065: PUSH
5066: LD_INT 14
5068: ST_TO_ADDR
// vc_engine = 3 ;
5069: LD_ADDR_OWVAR 39
5073: PUSH
5074: LD_INT 3
5076: ST_TO_ADDR
// vc_control = 1 ;
5077: LD_ADDR_OWVAR 38
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5085: LD_ADDR_OWVAR 40
5089: PUSH
5090: LD_INT 27
5092: PUSH
5093: LD_INT 26
5095: PUSH
5096: LD_INT 28
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 3
5109: PPUSH
5110: CALL_OW 12
5114: ARRAY
5115: ST_TO_ADDR
// veh = CreateVehicle ;
5116: LD_ADDR_VAR 0 4
5120: PUSH
5121: CALL_OW 45
5125: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5138: LD_VAR 0 4
5142: PPUSH
5143: LD_INT 4
5145: PPUSH
5146: LD_INT 0
5148: PPUSH
5149: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5153: LD_EXP 19
5157: PUSH
5158: LD_INT 0
5160: EQUAL
5161: PUSH
5162: LD_EXP 19
5166: PUSH
5167: LD_INT 2
5169: EQUAL
5170: OR
5171: IFFALSE 5188
// PrepareHuman ( false , 4 , 6 ) else
5173: LD_INT 0
5175: PPUSH
5176: LD_INT 4
5178: PPUSH
5179: LD_INT 6
5181: PPUSH
5182: CALL_OW 380
5186: GO 5201
// PrepareHuman ( false , 4 , 8 ) ;
5188: LD_INT 0
5190: PPUSH
5191: LD_INT 4
5193: PPUSH
5194: LD_INT 8
5196: PPUSH
5197: CALL_OW 380
// un = CreateHuman ;
5201: LD_ADDR_VAR 0 3
5205: PUSH
5206: CALL_OW 44
5210: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_INT 4
5218: PPUSH
5219: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_VAR 0 4
5232: PPUSH
5233: CALL_OW 52
// vc_chassis = 14 ;
5237: LD_ADDR_OWVAR 37
5241: PUSH
5242: LD_INT 14
5244: ST_TO_ADDR
// vc_engine = 3 ;
5245: LD_ADDR_OWVAR 39
5249: PUSH
5250: LD_INT 3
5252: ST_TO_ADDR
// vc_control = 1 ;
5253: LD_ADDR_OWVAR 38
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// vc_weapon = 26 ;
5261: LD_ADDR_OWVAR 40
5265: PUSH
5266: LD_INT 26
5268: ST_TO_ADDR
// veh = CreateVehicle ;
5269: LD_ADDR_VAR 0 4
5273: PUSH
5274: CALL_OW 45
5278: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5279: LD_VAR 0 4
5283: PPUSH
5284: LD_INT 4
5286: PPUSH
5287: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5291: LD_VAR 0 4
5295: PPUSH
5296: LD_INT 4
5298: PPUSH
5299: LD_INT 0
5301: PPUSH
5302: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5306: LD_EXP 19
5310: PUSH
5311: LD_INT 0
5313: EQUAL
5314: PUSH
5315: LD_EXP 19
5319: PUSH
5320: LD_INT 2
5322: EQUAL
5323: OR
5324: IFFALSE 5341
// PrepareHuman ( false , 2 , 4 ) else
5326: LD_INT 0
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: LD_INT 4
5334: PPUSH
5335: CALL_OW 380
5339: GO 5354
// PrepareHuman ( false , 2 , 8 ) ;
5341: LD_INT 0
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: LD_INT 8
5349: PPUSH
5350: CALL_OW 380
// un = CreateHuman ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: CALL_OW 44
5363: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 4
5371: PPUSH
5372: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_VAR 0 4
5385: PPUSH
5386: CALL_OW 52
// end ;
5390: LD_VAR 0 1
5394: RET
// export function PrepareAttackLegion ; var i , un ; begin
5395: LD_INT 0
5397: PPUSH
5398: PPUSH
5399: PPUSH
// for i = 1 to 4 do
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 4
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5524
// begin uc_side = 8 ;
5416: LD_ADDR_OWVAR 20
5420: PUSH
5421: LD_INT 8
5423: ST_TO_ADDR
// uc_nation = 2 ;
5424: LD_ADDR_OWVAR 21
5428: PUSH
5429: LD_INT 2
5431: ST_TO_ADDR
// hc_gallery =  ;
5432: LD_ADDR_OWVAR 33
5436: PUSH
5437: LD_STRING 
5439: ST_TO_ADDR
// hc_name =  ;
5440: LD_ADDR_OWVAR 26
5444: PUSH
5445: LD_STRING 
5447: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5448: LD_INT 0
5450: PPUSH
5451: LD_INT 1
5453: PUSH
5454: LD_INT 8
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 1
5463: PPUSH
5464: LD_INT 2
5466: PPUSH
5467: CALL_OW 12
5471: ARRAY
5472: PPUSH
5473: LD_INT 6
5475: PPUSH
5476: LD_INT 8
5478: PPUSH
5479: CALL_OW 12
5483: PPUSH
5484: CALL_OW 380
// un = CreateHuman ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: CALL_OW 44
5497: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5498: LD_VAR 0 3
5502: PPUSH
5503: LD_INT 19
5505: PPUSH
5506: LD_INT 0
5508: PPUSH
5509: CALL_OW 49
// ComCrawl ( un ) ;
5513: LD_VAR 0 3
5517: PPUSH
5518: CALL_OW 137
// end ;
5522: GO 5413
5524: POP
5525: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5526: LD_INT 1
5528: PPUSH
5529: LD_INT 8
5531: PPUSH
5532: LD_INT 2
5534: PPUSH
5535: LD_INT 1
5537: PPUSH
5538: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5542: LD_INT 20
5544: PPUSH
5545: LD_INT 3
5547: PPUSH
5548: CALL 14469 0 2
// end ; end_of_file
5552: LD_VAR 0 1
5556: RET
// export function Action ; var i , tmp , group ; begin
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
5561: PPUSH
5562: PPUSH
// InGameOn ;
5563: CALL_OW 8
// music_nat := 1 ;
5567: LD_ADDR_OWVAR 71
5571: PUSH
5572: LD_INT 1
5574: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5575: LD_ADDR_VAR 0 4
5579: PUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PPUSH
5590: CALL_OW 69
5594: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: LD_EXP 1
5604: PPUSH
5605: CALL_OW 310
5609: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5610: LD_VAR 0 3
5614: PPUSH
5615: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5619: LD_VAR 0 4
5623: PPUSH
5624: LD_INT 130
5626: PPUSH
5627: LD_INT 103
5629: PPUSH
5630: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5634: LD_VAR 0 3
5638: PPUSH
5639: LD_INT 114
5641: PPUSH
5642: LD_INT 102
5644: PPUSH
5645: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5649: LD_EXP 1
5653: PPUSH
5654: LD_STRING D1-JMM-1
5656: PPUSH
5657: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5661: LD_VAR 0 3
5665: PPUSH
5666: CALL_OW 87
// if IsOk ( Donaldson ) then
5670: LD_EXP 3
5674: PPUSH
5675: CALL_OW 302
5679: IFFALSE 5744
// begin Say ( Donaldson , D1-Don-1 ) ;
5681: LD_EXP 3
5685: PPUSH
5686: LD_STRING D1-Don-1
5688: PPUSH
5689: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5693: LD_VAR 0 3
5697: PPUSH
5698: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5702: LD_EXP 1
5706: PPUSH
5707: LD_STRING D1-JMM-2
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5723: LD_EXP 3
5727: PPUSH
5728: LD_STRING D1-Don-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5744: LD_VAR 0 4
5748: PPUSH
5749: LD_INT 110
5751: PPUSH
5752: LD_INT 101
5754: PPUSH
5755: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5766: LD_VAR 0 3
5770: PPUSH
5771: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5775: LD_INT 1
5777: PPUSH
5778: LD_INT 102
5780: PPUSH
5781: LD_INT 94
5783: PPUSH
5784: CALL_OW 293
5788: IFFALSE 5759
// CenterOnXY ( 102 , 94 ) ;
5790: LD_INT 102
5792: PPUSH
5793: LD_INT 94
5795: PPUSH
5796: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5800: LD_VAR 0 4
5804: PPUSH
5805: LD_INT 26
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 72
5819: PPUSH
5820: LD_STRING D1-Sol1-2
5822: PPUSH
5823: LD_STRING 
5825: PPUSH
5826: CALL 12129 0 3
// Say ( JMM , D1-JMM-3 ) ;
5830: LD_EXP 1
5834: PPUSH
5835: LD_STRING D1-JMM-3
5837: PPUSH
5838: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5842: LD_STRING M1
5844: PPUSH
5845: CALL_OW 337
// for i in group do
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_VAR 0 4
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5879
// ComMoveXY ( i , 95 , 84 ) ;
5862: LD_VAR 0 2
5866: PPUSH
5867: LD_INT 95
5869: PPUSH
5870: LD_INT 84
5872: PPUSH
5873: CALL_OW 111
5877: GO 5859
5879: POP
5880: POP
// end ;
5881: LD_VAR 0 1
5885: RET
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5886: GO 5888
5888: DISABLE
5889: LD_INT 0
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// begin enable ;
5895: ENABLE
// bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5896: LD_ADDR_VAR 0 2
5900: PUSH
5901: LD_INT 8
5903: PPUSH
5904: LD_INT 22
5906: PUSH
5907: LD_INT 3
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 25
5916: PUSH
5917: LD_INT 9
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PPUSH
5928: CALL_OW 70
5932: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_INT 22
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: ST_TO_ADDR
// for i in your_units do
5956: LD_ADDR_VAR 0 1
5960: PUSH
5961: LD_VAR 0 3
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6633
// begin if See ( 3 , i ) then
5969: LD_INT 3
5971: PPUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 292
5981: IFFALSE 6631
// begin disable ;
5983: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5984: LD_VAR 0 2
5988: PPUSH
5989: LD_INT 96
5991: PPUSH
5992: LD_INT 85
5994: PPUSH
5995: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_INT 96
6006: PPUSH
6007: LD_INT 85
6009: PPUSH
6010: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6014: LD_VAR 0 2
6018: PPUSH
6019: LD_INT 96
6021: PPUSH
6022: LD_INT 85
6024: PPUSH
6025: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 96
6036: PPUSH
6037: LD_INT 85
6039: PPUSH
6040: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_INT 96
6051: PPUSH
6052: LD_INT 85
6054: PPUSH
6055: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_INT 96
6066: PPUSH
6067: LD_INT 85
6069: PPUSH
6070: CALL_OW 214
// wait ( 0 0$2 ) ;
6074: LD_INT 70
6076: PPUSH
6077: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6081: LD_EXP 1
6085: PPUSH
6086: LD_STRING D1a-JMM-1
6088: PPUSH
6089: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6093: LD_EXP 3
6097: PPUSH
6098: LD_STRING D1a-Don-1
6100: PPUSH
6101: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6105: LD_ADDR_VAR 0 1
6109: PUSH
6110: LD_INT 22
6112: PUSH
6113: LD_INT 1
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PPUSH
6120: CALL_OW 69
6124: PUSH
6125: FOR_IN
6126: IFFALSE 6145
// ComMoveXY ( i , 109 , 102 ) ;
6128: LD_VAR 0 1
6132: PPUSH
6133: LD_INT 109
6135: PPUSH
6136: LD_INT 102
6138: PPUSH
6139: CALL_OW 111
6143: GO 6125
6145: POP
6146: POP
// Say ( JMM , D1a-JMM-2 ) ;
6147: LD_EXP 1
6151: PPUSH
6152: LD_STRING D1a-JMM-2
6154: PPUSH
6155: CALL_OW 88
// wait ( 0 0$10 ) ;
6159: LD_INT 350
6161: PPUSH
6162: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6166: LD_EXP 1
6170: PPUSH
6171: CALL_OW 310
6175: PPUSH
6176: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6180: LD_EXP 3
6184: PPUSH
6185: LD_STRING D1b-Don-1
6187: PPUSH
6188: CALL_OW 88
// if IsOk ( Donaldson ) then
6192: LD_EXP 3
6196: PPUSH
6197: CALL_OW 302
6201: IFFALSE 6215
// Say ( JMM , D1b-JMM-1 ) ;
6203: LD_EXP 1
6207: PPUSH
6208: LD_STRING D1b-JMM-1
6210: PPUSH
6211: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6215: LD_INT 22
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 26
6227: PUSH
6228: LD_INT 1
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 25
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 25
6260: PUSH
6261: LD_INT 3
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 4
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 25
6280: PUSH
6281: LD_INT 5
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 8
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: PPUSH
6312: CALL_OW 69
6316: PPUSH
6317: LD_STRING D1b-Sol1-1
6319: PPUSH
6320: LD_STRING 
6322: PPUSH
6323: CALL 12129 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6327: LD_EXP 3
6331: PPUSH
6332: LD_STRING D1b-Don-2
6334: PPUSH
6335: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D1b-JMM-2
6346: PPUSH
6347: CALL_OW 88
// dec = ShowQuery1 ;
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: CALL 12592 0 0
6360: ST_TO_ADDR
// if dec = 1 then
6361: LD_VAR 0 4
6365: PUSH
6366: LD_INT 1
6368: EQUAL
6369: IFFALSE 6475
// begin Say ( JMM , D2-JMM-1 ) ;
6371: LD_EXP 1
6375: PPUSH
6376: LD_STRING D2-JMM-1
6378: PPUSH
6379: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6383: LD_EXP 15
6387: PPUSH
6388: LD_STRING D2-Pow-1
6390: PPUSH
6391: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6395: LD_EXP 1
6399: PPUSH
6400: LD_STRING D2a-JMM-1
6402: PPUSH
6403: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6407: LD_EXP 15
6411: PPUSH
6412: LD_STRING D2a-Pow-1
6414: PPUSH
6415: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6419: LD_EXP 1
6423: PPUSH
6424: LD_STRING D2a-JMM-2
6426: PPUSH
6427: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6431: LD_EXP 15
6435: PPUSH
6436: LD_STRING D2a-Pow-2
6438: PPUSH
6439: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D2a-JMM-3
6450: PPUSH
6451: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6455: LD_EXP 15
6459: PPUSH
6460: LD_STRING D2a-Pow-3
6462: PPUSH
6463: CALL_OW 94
// secondPass = 2 ;
6467: LD_ADDR_EXP 20
6471: PUSH
6472: LD_INT 2
6474: ST_TO_ADDR
// end ; if dec = 2 then
6475: LD_VAR 0 4
6479: PUSH
6480: LD_INT 2
6482: EQUAL
6483: IFFALSE 6577
// begin Say ( JMM , D2-JMM-1 ) ;
6485: LD_EXP 1
6489: PPUSH
6490: LD_STRING D2-JMM-1
6492: PPUSH
6493: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6497: LD_EXP 15
6501: PPUSH
6502: LD_STRING D2-Pow-1
6504: PPUSH
6505: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6509: LD_EXP 1
6513: PPUSH
6514: LD_STRING D2b-JMM-1
6516: PPUSH
6517: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6521: LD_EXP 15
6525: PPUSH
6526: LD_STRING D2b-Pow-1
6528: PPUSH
6529: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6533: LD_EXP 1
6537: PPUSH
6538: LD_STRING D2c-JMM-1
6540: PPUSH
6541: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6545: LD_EXP 15
6549: PPUSH
6550: LD_STRING D2c-Pow-1
6552: PPUSH
6553: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6557: LD_EXP 1
6561: PPUSH
6562: LD_STRING D2c-JMM-2
6564: PPUSH
6565: CALL_OW 88
// secondPass = 2 ;
6569: LD_ADDR_EXP 20
6573: PUSH
6574: LD_INT 2
6576: ST_TO_ADDR
// end ; if dec = 3 then
6577: LD_VAR 0 4
6581: PUSH
6582: LD_INT 3
6584: EQUAL
6585: IFFALSE 6595
// secondPass = 1 ;
6587: LD_ADDR_EXP 20
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// InGameOff ;
6595: CALL_OW 9
// ruAI := 1 ;
6599: LD_ADDR_EXP 34
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6607: LD_INT 1
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 2
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: CALL_OW 80
// SaveForQuickRestart ;
6623: CALL_OW 22
// exit ;
6627: POP
6628: POP
6629: GO 6635
// end ; end ;
6631: GO 5966
6633: POP
6634: POP
// end ;
6635: PPOPN 4
6637: END
// every 1 1$0 trigger secondPass = 2 do
6638: LD_EXP 20
6642: PUSH
6643: LD_INT 2
6645: EQUAL
6646: IFFALSE 6866
6648: GO 6650
6650: DISABLE
// begin PowellSupport1 ;
6651: CALL 1985 0 0
// DialogueOn ;
6655: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6659: LD_EXP 1
6663: PPUSH
6664: LD_STRING DC1-JMM-1
6666: PPUSH
6667: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6671: LD_EXP 15
6675: PPUSH
6676: LD_STRING DC1-Pow-1
6678: PPUSH
6679: CALL_OW 94
// DialogueOff ;
6683: CALL_OW 7
// wait ( 3 3$0 ) ;
6687: LD_INT 6300
6689: PPUSH
6690: CALL_OW 67
// PowellSupport2 ;
6694: CALL 2466 0 0
// DialogueOn ;
6698: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6702: LD_EXP 1
6706: PPUSH
6707: LD_STRING DC2-JMM-1
6709: PPUSH
6710: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6714: LD_EXP 15
6718: PPUSH
6719: LD_STRING DC2-Pow-1
6721: PPUSH
6722: CALL_OW 94
// DialogueOff ;
6726: CALL_OW 7
// wait ( 3 3$00 ) ;
6730: LD_INT 6300
6732: PPUSH
6733: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6737: LD_INT 35
6739: PPUSH
6740: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6744: LD_INT 22
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: LD_INT 30
6759: PUSH
6760: LD_INT 0
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 1
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PPUSH
6786: CALL_OW 69
6790: PUSH
6791: LD_INT 11
6793: PPUSH
6794: LD_INT 22
6796: PUSH
6797: LD_INT 3
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 70
6808: NOT
6809: AND
6810: IFFALSE 6737
// wait ( 0 0$10 ) ;
6812: LD_INT 350
6814: PPUSH
6815: CALL_OW 67
// Legion ;
6819: CALL 6867 0 0
// wait ( 5 5$0 ) ;
6823: LD_INT 10500
6825: PPUSH
6826: CALL_OW 67
// PowellSupport3 ;
6830: CALL 3079 0 0
// DialogueOn ;
6834: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6838: LD_EXP 15
6842: PPUSH
6843: LD_STRING DC3-Pow-1
6845: PPUSH
6846: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6850: LD_EXP 1
6854: PPUSH
6855: LD_STRING DC3-JMM-1
6857: PPUSH
6858: CALL_OW 88
// DialogueOff ;
6862: CALL_OW 7
// end ;
6866: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6867: LD_INT 0
6869: PPUSH
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6885: LD_ADDR_VAR 0 5
6889: PUSH
6890: LD_INT 22
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 21
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 2
6912: PUSH
6913: LD_INT 30
6915: PUSH
6916: LD_INT 0
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 30
6925: PUSH
6926: LD_INT 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 69
6947: ST_TO_ADDR
// crates := 0 ;
6948: LD_ADDR_VAR 0 8
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// oil := 0 ;
6956: LD_ADDR_VAR 0 9
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// siberite := 0 ;
6964: LD_ADDR_VAR 0 10
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// payForNeutral := false ;
6972: LD_ADDR_VAR 0 13
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// payForHelp := false ;
6980: LD_ADDR_VAR 0 14
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// for i in tmp do
6988: LD_ADDR_VAR 0 2
6992: PUSH
6993: LD_VAR 0 5
6997: PUSH
6998: FOR_IN
6999: IFFALSE 7090
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7001: LD_ADDR_VAR 0 8
7005: PUSH
7006: LD_VAR 0 8
7010: PUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 274
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: CALL_OW 275
7028: PLUS
7029: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7030: LD_ADDR_VAR 0 9
7034: PUSH
7035: LD_VAR 0 9
7039: PUSH
7040: LD_VAR 0 2
7044: PPUSH
7045: CALL_OW 274
7049: PPUSH
7050: LD_INT 2
7052: PPUSH
7053: CALL_OW 275
7057: PLUS
7058: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7059: LD_ADDR_VAR 0 10
7063: PUSH
7064: LD_VAR 0 10
7068: PUSH
7069: LD_VAR 0 2
7073: PPUSH
7074: CALL_OW 274
7078: PPUSH
7079: LD_INT 3
7081: PPUSH
7082: CALL_OW 275
7086: PLUS
7087: ST_TO_ADDR
// end ;
7088: GO 6998
7090: POP
7091: POP
// PrepareKurt ;
7092: CALL 4551 0 0
// if not Kurt then
7096: LD_EXP 17
7100: NOT
7101: IFFALSE 7105
// exit ;
7103: GO 9224
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7105: LD_EXP 18
7109: PPUSH
7110: LD_INT 144
7112: PPUSH
7113: LD_INT 111
7115: PPUSH
7116: CALL_OW 111
// wait ( 0 0$2 ) ;
7120: LD_INT 70
7122: PPUSH
7123: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7127: LD_INT 167
7129: PPUSH
7130: LD_INT 121
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: LD_INT 10
7138: NEG
7139: PPUSH
7140: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7144: LD_EXP 17
7148: PPUSH
7149: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7153: LD_EXP 17
7157: PPUSH
7158: CALL_OW 87
// wait ( 0 0$1 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// DialogueOn ;
7169: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7173: LD_INT 22
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 26
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: LD_INT 25
7198: PUSH
7199: LD_INT 1
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 25
7208: PUSH
7209: LD_INT 2
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 25
7218: PUSH
7219: LD_INT 3
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 25
7228: PUSH
7229: LD_INT 4
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 25
7248: PUSH
7249: LD_INT 8
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PPUSH
7275: LD_STRING D3-Sol1-1
7277: PPUSH
7278: LD_STRING 
7280: PPUSH
7281: CALL 12129 0 3
// if KurtStatus then
7285: LD_EXP 19
7289: IFFALSE 7389
// begin Say ( Kurt , D3-Kurt-1 ) ;
7291: LD_EXP 17
7295: PPUSH
7296: LD_STRING D3-Kurt-1
7298: PPUSH
7299: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7303: LD_EXP 1
7307: PPUSH
7308: LD_STRING D3-JMM-1
7310: PPUSH
7311: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7315: LD_EXP 17
7319: PPUSH
7320: LD_STRING D3-Kurt-2
7322: PPUSH
7323: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7327: LD_EXP 1
7331: PPUSH
7332: LD_STRING D3-JMM-2
7334: PPUSH
7335: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7339: LD_EXP 17
7343: PPUSH
7344: LD_STRING D3-Kurt-4
7346: PPUSH
7347: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7351: LD_EXP 1
7355: PPUSH
7356: LD_STRING D3-JMM-4
7358: PPUSH
7359: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7363: LD_EXP 17
7367: PPUSH
7368: LD_STRING D3-Kurt-5
7370: PPUSH
7371: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7375: LD_EXP 17
7379: PPUSH
7380: LD_STRING D3-Kurt-5a
7382: PPUSH
7383: CALL_OW 88
// end else
7387: GO 7485
// begin Say ( Kurt , D3-Kurt-1 ) ;
7389: LD_EXP 17
7393: PPUSH
7394: LD_STRING D3-Kurt-1
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7401: LD_EXP 1
7405: PPUSH
7406: LD_STRING D3-JMM-1
7408: PPUSH
7409: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7413: LD_EXP 17
7417: PPUSH
7418: LD_STRING D3-Kurt-3
7420: PPUSH
7421: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7425: LD_EXP 1
7429: PPUSH
7430: LD_STRING D3-JMM-3
7432: PPUSH
7433: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7437: LD_EXP 17
7441: PPUSH
7442: LD_STRING D3-Kurt-4
7444: PPUSH
7445: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7449: LD_EXP 1
7453: PPUSH
7454: LD_STRING D3-JMM-4
7456: PPUSH
7457: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7461: LD_EXP 17
7465: PPUSH
7466: LD_STRING D3-Kurt-5
7468: PPUSH
7469: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7473: LD_EXP 17
7477: PPUSH
7478: LD_STRING D3-Kurt-5b
7480: PPUSH
7481: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7485: LD_VAR 0 8
7489: PUSH
7490: LD_INT 120
7492: PUSH
7493: LD_INT 60
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: PLUS
7508: ARRAY
7509: GREATEREQUAL
7510: PUSH
7511: LD_VAR 0 10
7515: PUSH
7516: LD_INT 120
7518: PUSH
7519: LD_INT 60
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_EXP 19
7530: PUSH
7531: LD_INT 1
7533: PLUS
7534: ARRAY
7535: GREATEREQUAL
7536: AND
7537: IFFALSE 7589
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: LD_STRING Q2
7546: PUSH
7547: LD_STRING Q2K
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_EXP 19
7558: PUSH
7559: LD_INT 1
7561: PLUS
7562: ARRAY
7563: PPUSH
7564: LD_INT 1
7566: PUSH
7567: LD_INT 2
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 4
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 98
7586: ST_TO_ADDR
7587: GO 7633
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7589: LD_ADDR_VAR 0 3
7593: PUSH
7594: LD_STRING Q2
7596: PUSH
7597: LD_STRING Q2K
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_EXP 19
7608: PUSH
7609: LD_INT 1
7611: PLUS
7612: ARRAY
7613: PPUSH
7614: LD_INT 1
7616: PUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 4
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 98
7632: ST_TO_ADDR
// if dec1 = 1 then
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 1
7640: EQUAL
7641: IFFALSE 7675
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7643: LD_EXP 1
7647: PPUSH
7648: LD_STRING D3Ka-JMM-1
7650: PPUSH
7651: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7655: LD_EXP 17
7659: PPUSH
7660: LD_STRING D3Ka-Kurt-1
7662: PPUSH
7663: CALL_OW 88
// warWithLegion = 1 ;
7667: LD_ADDR_EXP 23
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// end ; if dec1 = 2 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 2
7682: EQUAL
7683: IFFALSE 7767
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7685: LD_EXP 1
7689: PPUSH
7690: LD_STRING D3Kb-JMM-1
7692: PPUSH
7693: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7697: LD_EXP 17
7701: PPUSH
7702: LD_STRING D3Kb-Kurt-1
7704: PPUSH
7705: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7709: LD_ADDR_VAR 0 11
7713: PUSH
7714: LD_INT 120
7716: PUSH
7717: LD_INT 60
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_EXP 19
7728: PUSH
7729: LD_INT 1
7731: PLUS
7732: ARRAY
7733: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7734: LD_ADDR_VAR 0 12
7738: PUSH
7739: LD_INT 120
7741: PUSH
7742: LD_INT 60
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_EXP 19
7753: PUSH
7754: LD_INT 1
7756: PLUS
7757: ARRAY
7758: ST_TO_ADDR
// payForNeutral := true ;
7759: LD_ADDR_VAR 0 13
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// end ; if dec1 = 3 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 3
7774: EQUAL
7775: IFFALSE 8010
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7777: LD_EXP 1
7781: PPUSH
7782: LD_STRING D3Kc1-JMM-1
7784: PPUSH
7785: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7789: LD_EXP 17
7793: PPUSH
7794: LD_STRING D3Kc1-Kurt-1
7796: PPUSH
7797: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7801: LD_EXP 1
7805: PPUSH
7806: LD_STRING D3Kc1-JMM-2
7808: PPUSH
7809: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7813: LD_EXP 17
7817: PPUSH
7818: LD_STRING D3Kc1-Kurt-2
7820: PPUSH
7821: CALL_OW 88
// askSiberite = 1 ;
7825: LD_ADDR_EXP 25
7829: PUSH
7830: LD_INT 1
7832: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7833: LD_ADDR_VAR 0 4
7837: PUSH
7838: LD_STRING Q2b
7840: PPUSH
7841: LD_INT 1
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 3
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: PPUSH
7855: CALL_OW 98
7859: ST_TO_ADDR
// if dec2 = 1 then
7860: LD_VAR 0 4
7864: PUSH
7865: LD_INT 1
7867: EQUAL
7868: IFFALSE 7902
// begin Say ( JMM , D4a-JMM-1 ) ;
7870: LD_EXP 1
7874: PPUSH
7875: LD_STRING D4a-JMM-1
7877: PPUSH
7878: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7882: LD_EXP 17
7886: PPUSH
7887: LD_STRING D4b-Kurt-1
7889: PPUSH
7890: CALL_OW 88
// warWithLegion = 1 ;
7894: LD_ADDR_EXP 23
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// end ; if dec2 = 2 then
7902: LD_VAR 0 4
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 7944
// begin Say ( JMM , D4b-JMM-1 ) ;
7912: LD_EXP 1
7916: PPUSH
7917: LD_STRING D4b-JMM-1
7919: PPUSH
7920: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7924: LD_EXP 17
7928: PPUSH
7929: LD_STRING D4b-Kurt-1
7931: PPUSH
7932: CALL_OW 88
// warWithLegion = 1 ;
7936: LD_ADDR_EXP 23
7940: PUSH
7941: LD_INT 1
7943: ST_TO_ADDR
// end ; if dec2 = 3 then
7944: LD_VAR 0 4
7948: PUSH
7949: LD_INT 3
7951: EQUAL
7952: IFFALSE 8010
// begin Say ( JMM , D4c-JMM-1 ) ;
7954: LD_EXP 1
7958: PPUSH
7959: LD_STRING D4c-JMM-1
7961: PPUSH
7962: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7966: LD_EXP 17
7970: PPUSH
7971: LD_STRING D4c-Kurt-1
7973: PPUSH
7974: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7978: LD_EXP 1
7982: PPUSH
7983: LD_STRING D4c-JMM-2
7985: PPUSH
7986: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7990: LD_EXP 17
7994: PPUSH
7995: LD_STRING D4c-Kurt-2
7997: PPUSH
7998: CALL_OW 88
// fakeInfo = 1 ;
8002: LD_ADDR_EXP 24
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 4
8017: EQUAL
8018: IFFALSE 9080
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8020: LD_EXP 1
8024: PPUSH
8025: LD_STRING D3Kd-JMM-1
8027: PPUSH
8028: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8032: LD_VAR 0 8
8036: PUSH
8037: LD_INT 200
8039: PUSH
8040: LD_INT 120
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_EXP 19
8051: PUSH
8052: LD_INT 1
8054: PLUS
8055: ARRAY
8056: GREATEREQUAL
8057: PUSH
8058: LD_VAR 0 10
8062: PUSH
8063: LD_INT 200
8065: PUSH
8066: LD_INT 120
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_EXP 19
8077: PUSH
8078: LD_INT 1
8080: PLUS
8081: ARRAY
8082: GREATEREQUAL
8083: AND
8084: IFFALSE 8136
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8086: LD_ADDR_VAR 0 4
8090: PUSH
8091: LD_STRING Q2a
8093: PUSH
8094: LD_STRING Q2aK
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_EXP 19
8105: PUSH
8106: LD_INT 1
8108: PLUS
8109: ARRAY
8110: PPUSH
8111: LD_INT 1
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 98
8133: ST_TO_ADDR
8134: GO 8300
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8136: LD_VAR 0 8
8140: PUSH
8141: LD_INT 120
8143: PUSH
8144: LD_INT 60
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_EXP 19
8155: PUSH
8156: LD_INT 1
8158: PLUS
8159: ARRAY
8160: GREATEREQUAL
8161: PUSH
8162: LD_VAR 0 10
8166: PUSH
8167: LD_INT 120
8169: PUSH
8170: LD_INT 60
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_EXP 19
8181: PUSH
8182: LD_INT 1
8184: PLUS
8185: ARRAY
8186: GREATEREQUAL
8187: AND
8188: IFFALSE 8236
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: LD_STRING Q2a
8197: PUSH
8198: LD_STRING Q2aK
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_EXP 19
8209: PUSH
8210: LD_INT 1
8212: PLUS
8213: ARRAY
8214: PPUSH
8215: LD_INT 1
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: LD_INT 4
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 98
8233: ST_TO_ADDR
8234: GO 8300
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8236: LD_STRING Q2d
8238: PUSH
8239: LD_STRING Q2dK
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_EXP 19
8250: PUSH
8251: LD_INT 1
8253: PLUS
8254: ARRAY
8255: PPUSH
8256: CALL_OW 97
// dec2 := 0 ;
8260: LD_ADDR_VAR 0 4
8264: PUSH
8265: LD_INT 0
8267: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8268: LD_EXP 1
8272: PPUSH
8273: LD_STRING D3Kc1-JMM-1
8275: PPUSH
8276: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8280: LD_EXP 17
8284: PPUSH
8285: LD_STRING D3Kc2-Kurt-1
8287: PPUSH
8288: CALL_OW 88
// warWithLegion := 1 ;
8292: LD_ADDR_EXP 23
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// end ; if dec2 = 1 then
8300: LD_VAR 0 4
8304: PUSH
8305: LD_INT 1
8307: EQUAL
8308: IFFALSE 8342
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8310: LD_EXP 1
8314: PPUSH
8315: LD_STRING D5Ka-JMM-1
8317: PPUSH
8318: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8322: LD_EXP 17
8326: PPUSH
8327: LD_STRING D5Ka-Kurt-1
8329: PPUSH
8330: CALL_OW 88
// warWithLegion = 1 ;
8334: LD_ADDR_EXP 23
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ; if dec2 = 2 then
8342: LD_VAR 0 4
8346: PUSH
8347: LD_INT 2
8349: EQUAL
8350: IFFALSE 8434
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8352: LD_EXP 1
8356: PPUSH
8357: LD_STRING D3Kb-JMM-1
8359: PPUSH
8360: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8364: LD_EXP 17
8368: PPUSH
8369: LD_STRING D3Kb-Kurt-1
8371: PPUSH
8372: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8376: LD_ADDR_VAR 0 11
8380: PUSH
8381: LD_INT 120
8383: PUSH
8384: LD_INT 60
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: LD_EXP 19
8395: PUSH
8396: LD_INT 1
8398: PLUS
8399: ARRAY
8400: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8401: LD_ADDR_VAR 0 12
8405: PUSH
8406: LD_INT 120
8408: PUSH
8409: LD_INT 60
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_EXP 19
8420: PUSH
8421: LD_INT 1
8423: PLUS
8424: ARRAY
8425: ST_TO_ADDR
// payForNeutral := true ;
8426: LD_ADDR_VAR 0 13
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// end ; if dec2 = 3 then
8434: LD_VAR 0 4
8438: PUSH
8439: LD_INT 3
8441: EQUAL
8442: IFFALSE 8526
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8444: LD_EXP 1
8448: PPUSH
8449: LD_STRING D3Ke-JMM-1
8451: PPUSH
8452: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8456: LD_EXP 17
8460: PPUSH
8461: LD_STRING D3Ke-Kurt-1
8463: PPUSH
8464: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8468: LD_ADDR_VAR 0 11
8472: PUSH
8473: LD_INT 200
8475: PUSH
8476: LD_INT 120
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_EXP 19
8487: PUSH
8488: LD_INT 1
8490: PLUS
8491: ARRAY
8492: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8493: LD_ADDR_VAR 0 12
8497: PUSH
8498: LD_INT 200
8500: PUSH
8501: LD_INT 120
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_EXP 19
8512: PUSH
8513: LD_INT 1
8515: PLUS
8516: ARRAY
8517: ST_TO_ADDR
// payForHelp := true ;
8518: LD_ADDR_VAR 0 14
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// end ; if dec2 = 4 then
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 4
8533: EQUAL
8534: IFFALSE 8769
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8536: LD_EXP 1
8540: PPUSH
8541: LD_STRING D3Kc1-JMM-1
8543: PPUSH
8544: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8548: LD_EXP 17
8552: PPUSH
8553: LD_STRING D3Kc1-Kurt-1
8555: PPUSH
8556: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_STRING D3Kc1-JMM-2
8567: PPUSH
8568: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8572: LD_EXP 17
8576: PPUSH
8577: LD_STRING D3Kc1-Kurt-2
8579: PPUSH
8580: CALL_OW 88
// askSiberite = 1 ;
8584: LD_ADDR_EXP 25
8588: PUSH
8589: LD_INT 1
8591: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8592: LD_ADDR_VAR 0 4
8596: PUSH
8597: LD_STRING Q2b
8599: PPUSH
8600: LD_INT 1
8602: PUSH
8603: LD_INT 2
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PPUSH
8614: CALL_OW 98
8618: ST_TO_ADDR
// if dec2 = 1 then
8619: LD_VAR 0 4
8623: PUSH
8624: LD_INT 1
8626: EQUAL
8627: IFFALSE 8661
// begin Say ( JMM , D4a-JMM-1 ) ;
8629: LD_EXP 1
8633: PPUSH
8634: LD_STRING D4a-JMM-1
8636: PPUSH
8637: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8641: LD_EXP 17
8645: PPUSH
8646: LD_STRING D4b-Kurt-1
8648: PPUSH
8649: CALL_OW 88
// warWithLegion = 1 ;
8653: LD_ADDR_EXP 23
8657: PUSH
8658: LD_INT 1
8660: ST_TO_ADDR
// end ; if dec2 = 2 then
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 2
8668: EQUAL
8669: IFFALSE 8703
// begin Say ( JMM , D4b-JMM-1 ) ;
8671: LD_EXP 1
8675: PPUSH
8676: LD_STRING D4b-JMM-1
8678: PPUSH
8679: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8683: LD_EXP 17
8687: PPUSH
8688: LD_STRING D4b-Kurt-1
8690: PPUSH
8691: CALL_OW 88
// warWithLegion = 1 ;
8695: LD_ADDR_EXP 23
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// end ; if dec2 = 3 then
8703: LD_VAR 0 4
8707: PUSH
8708: LD_INT 3
8710: EQUAL
8711: IFFALSE 8769
// begin Say ( JMM , D4c-JMM-1 ) ;
8713: LD_EXP 1
8717: PPUSH
8718: LD_STRING D4c-JMM-1
8720: PPUSH
8721: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8725: LD_EXP 17
8729: PPUSH
8730: LD_STRING D4c-Kurt-1
8732: PPUSH
8733: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8737: LD_EXP 1
8741: PPUSH
8742: LD_STRING D4c-JMM-2
8744: PPUSH
8745: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8749: LD_EXP 17
8753: PPUSH
8754: LD_STRING D4c-Kurt-2
8756: PPUSH
8757: CALL_OW 88
// fakeInfo = 1 ;
8761: LD_ADDR_EXP 24
8765: PUSH
8766: LD_INT 1
8768: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8769: LD_VAR 0 13
8773: PUSH
8774: LD_VAR 0 14
8778: OR
8779: IFFALSE 9080
// begin for i in tmp do
8781: LD_ADDR_VAR 0 2
8785: PUSH
8786: LD_VAR 0 5
8790: PUSH
8791: FOR_IN
8792: IFFALSE 9078
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8794: LD_ADDR_VAR 0 6
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 1
8811: PPUSH
8812: CALL_OW 275
8816: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8817: LD_ADDR_VAR 0 7
8821: PUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 274
8831: PPUSH
8832: LD_INT 3
8834: PPUSH
8835: CALL_OW 275
8839: ST_TO_ADDR
// if cr then
8840: LD_VAR 0 11
8844: IFFALSE 8958
// begin if tmp2 and tmp2 < cr then
8846: LD_VAR 0 6
8850: PUSH
8851: LD_VAR 0 6
8855: PUSH
8856: LD_VAR 0 11
8860: LESS
8861: AND
8862: IFFALSE 8910
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 274
8873: PPUSH
8874: LD_INT 1
8876: PPUSH
8877: LD_VAR 0 11
8881: PUSH
8882: LD_VAR 0 6
8886: MINUS
8887: PPUSH
8888: CALL_OW 277
// cr := cr - tmp2 ;
8892: LD_ADDR_VAR 0 11
8896: PUSH
8897: LD_VAR 0 11
8901: PUSH
8902: LD_VAR 0 6
8906: MINUS
8907: ST_TO_ADDR
// end else
8908: GO 8958
// if tmp2 > cr then
8910: LD_VAR 0 6
8914: PUSH
8915: LD_VAR 0 11
8919: GREATER
8920: IFFALSE 8958
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8922: LD_VAR 0 2
8926: PPUSH
8927: CALL_OW 274
8931: PPUSH
8932: LD_INT 1
8934: PPUSH
8935: LD_VAR 0 6
8939: PUSH
8940: LD_VAR 0 11
8944: MINUS
8945: PPUSH
8946: CALL_OW 277
// cr := 0 ;
8950: LD_ADDR_VAR 0 11
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// end ; end ; if sb then
8958: LD_VAR 0 12
8962: IFFALSE 9076
// begin if tmp3 and tmp3 < sb then
8964: LD_VAR 0 7
8968: PUSH
8969: LD_VAR 0 7
8973: PUSH
8974: LD_VAR 0 12
8978: LESS
8979: AND
8980: IFFALSE 9028
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8982: LD_VAR 0 2
8986: PPUSH
8987: CALL_OW 274
8991: PPUSH
8992: LD_INT 3
8994: PPUSH
8995: LD_VAR 0 12
8999: PUSH
9000: LD_VAR 0 7
9004: MINUS
9005: PPUSH
9006: CALL_OW 277
// sb := sb - tmp3 ;
9010: LD_ADDR_VAR 0 12
9014: PUSH
9015: LD_VAR 0 12
9019: PUSH
9020: LD_VAR 0 7
9024: MINUS
9025: ST_TO_ADDR
// end else
9026: GO 9076
// if tmp3 > sb then
9028: LD_VAR 0 7
9032: PUSH
9033: LD_VAR 0 12
9037: GREATER
9038: IFFALSE 9076
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9040: LD_VAR 0 2
9044: PPUSH
9045: CALL_OW 274
9049: PPUSH
9050: LD_INT 3
9052: PPUSH
9053: LD_VAR 0 7
9057: PUSH
9058: LD_VAR 0 12
9062: MINUS
9063: PPUSH
9064: CALL_OW 277
// sb := 0 ;
9068: LD_ADDR_VAR 0 12
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// end ; end ; end ;
9076: GO 8791
9078: POP
9079: POP
// end ; end ; DialogueOff ;
9080: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9084: LD_INT 167
9086: PPUSH
9087: LD_INT 121
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9097: LD_EXP 17
9101: PPUSH
9102: LD_EXP 18
9106: PPUSH
9107: CALL_OW 120
// wait ( 0 0$1 ) ;
9111: LD_INT 35
9113: PPUSH
9114: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9118: LD_EXP 18
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 113
// wait ( 0 0$3 ) ;
9130: LD_INT 105
9132: PPUSH
9133: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9137: LD_EXP 17
9141: PPUSH
9142: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9146: LD_EXP 18
9150: PPUSH
9151: CALL_OW 64
// wait ( 0 0$3 ) ;
9155: LD_INT 105
9157: PPUSH
9158: CALL_OW 67
// if payForHelp then
9162: LD_VAR 0 14
9166: IFFALSE 9224
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9168: LD_INT 36
9170: PPUSH
9171: LD_INT 57
9173: PPUSH
9174: LD_INT 1
9176: PPUSH
9177: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9181: LD_INT 51
9183: PPUSH
9184: LD_INT 63
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9194: LD_INT 93
9196: PPUSH
9197: LD_INT 65
9199: PPUSH
9200: LD_INT 1
9202: PPUSH
9203: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9207: LD_INT 42
9209: PPUSH
9210: LD_INT 12
9212: PPUSH
9213: LD_INT 1
9215: PPUSH
9216: CALL_OW 244
// PrepareLegionForPlayer ;
9220: CALL 4754 0 0
// end ; end ;
9224: LD_VAR 0 1
9228: RET
// every 0 0$10 trigger warWithLegion = 1 do
9229: LD_EXP 23
9233: PUSH
9234: LD_INT 1
9236: EQUAL
9237: IFFALSE 9253
9239: GO 9241
9241: DISABLE
// begin wait ( 0 0$30 ) ;
9242: LD_INT 1050
9244: PPUSH
9245: CALL_OW 67
// PrepareAttackLegion ;
9249: CALL 5395 0 0
// end ;
9253: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9254: LD_INT 120
9256: PUSH
9257: LD_INT 17
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 52
9266: PUSH
9267: EMPTY
9268: LIST
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PPUSH
9274: CALL_OW 69
9278: IFFALSE 9423
9280: GO 9282
9282: DISABLE
9283: LD_INT 0
9285: PPUSH
// begin enable ;
9286: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: LD_INT 120
9294: PUSH
9295: LD_INT 17
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 52
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: PUSH
9317: FOR_IN
9318: IFFALSE 9421
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9320: LD_VAR 0 1
9324: PPUSH
9325: CALL 78413 0 1
9329: PUSH
9330: LD_INT 4
9332: ARRAY
9333: PUSH
9334: LD_INT 0
9336: EQUAL
9337: PUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 255
9347: PUSH
9348: LD_INT 1
9350: EQUAL
9351: AND
9352: IFFALSE 9366
// SetSide ( i , 4 ) ;
9354: LD_VAR 0 1
9358: PPUSH
9359: LD_INT 4
9361: PPUSH
9362: CALL_OW 235
// if GetSide ( i ) = 4 then
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 255
9375: PUSH
9376: LD_INT 4
9378: EQUAL
9379: IFFALSE 9419
// if not IsInArea ( i , PlayerSpawn ) then
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_INT 4
9388: PPUSH
9389: CALL_OW 308
9393: NOT
9394: IFFALSE 9410
// ComMoveToArea ( i , PlayerSpawn ) else
9396: LD_VAR 0 1
9400: PPUSH
9401: LD_INT 4
9403: PPUSH
9404: CALL_OW 113
9408: GO 9419
// RemoveUnit ( i ) ;
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 64
// end ;
9419: GO 9317
9421: POP
9422: POP
// end ;
9423: PPOPN 1
9425: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9426: LD_EXP 20
9430: PUSH
9431: LD_INT 1
9433: EQUAL
9434: IFFALSE 9873
9436: GO 9438
9438: DISABLE
9439: LD_INT 0
9441: PPUSH
9442: PPUSH
9443: PPUSH
// begin enable ;
9444: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9445: LD_ADDR_VAR 0 2
9449: PUSH
9450: LD_INT 12
9452: PPUSH
9453: LD_INT 22
9455: PUSH
9456: LD_INT 3
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 21
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 70
9481: ST_TO_ADDR
// for i in enemyVehs do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 2
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9871
// begin if See ( 1 , i ) then
9495: LD_INT 1
9497: PPUSH
9498: LD_VAR 0 1
9502: PPUSH
9503: CALL_OW 292
9507: IFFALSE 9869
// begin disable ;
9509: DISABLE
// DialogueOn ;
9510: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9523: LD_INT 22
9525: PUSH
9526: LD_INT 1
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 26
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 2
9545: PUSH
9546: LD_INT 25
9548: PUSH
9549: LD_INT 1
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 25
9558: PUSH
9559: LD_INT 2
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 25
9568: PUSH
9569: LD_INT 3
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 25
9578: PUSH
9579: LD_INT 4
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 5
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 8
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: PPUSH
9625: LD_STRING DT1-Sol1-1
9627: PPUSH
9628: LD_STRING DT1-FSol1-1
9630: PPUSH
9631: CALL 12129 0 3
// dec = ShowQuery2 ;
9635: LD_ADDR_VAR 0 3
9639: PUSH
9640: CALL 12613 0 0
9644: ST_TO_ADDR
// if dec = 1 then
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 1
9652: EQUAL
9653: IFFALSE 9759
// begin Say ( JMM , D2-JMM-1 ) ;
9655: LD_EXP 1
9659: PPUSH
9660: LD_STRING D2-JMM-1
9662: PPUSH
9663: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9667: LD_EXP 15
9671: PPUSH
9672: LD_STRING D2-Pow-1
9674: PPUSH
9675: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9679: LD_EXP 1
9683: PPUSH
9684: LD_STRING D2a-JMM-1
9686: PPUSH
9687: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9691: LD_EXP 15
9695: PPUSH
9696: LD_STRING D2a-Pow-1
9698: PPUSH
9699: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9703: LD_EXP 1
9707: PPUSH
9708: LD_STRING D2a-JMM-2
9710: PPUSH
9711: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9715: LD_EXP 15
9719: PPUSH
9720: LD_STRING D2a-Pow-2
9722: PPUSH
9723: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9727: LD_EXP 1
9731: PPUSH
9732: LD_STRING D2a-JMM-3
9734: PPUSH
9735: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9739: LD_EXP 15
9743: PPUSH
9744: LD_STRING D2a-Pow-3
9746: PPUSH
9747: CALL_OW 94
// secondPass = 2 ;
9751: LD_ADDR_EXP 20
9755: PUSH
9756: LD_INT 2
9758: ST_TO_ADDR
// end ; if dec = 2 then
9759: LD_VAR 0 3
9763: PUSH
9764: LD_INT 2
9766: EQUAL
9767: IFFALSE 9861
// begin Say ( JMM , D2-JMM-1 ) ;
9769: LD_EXP 1
9773: PPUSH
9774: LD_STRING D2-JMM-1
9776: PPUSH
9777: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9781: LD_EXP 15
9785: PPUSH
9786: LD_STRING D2-Pow-1
9788: PPUSH
9789: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9793: LD_EXP 1
9797: PPUSH
9798: LD_STRING D2b-JMM-1
9800: PPUSH
9801: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9805: LD_EXP 15
9809: PPUSH
9810: LD_STRING D2b-Pow-1
9812: PPUSH
9813: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9817: LD_EXP 1
9821: PPUSH
9822: LD_STRING D2c-JMM-1
9824: PPUSH
9825: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9829: LD_EXP 15
9833: PPUSH
9834: LD_STRING D2c-Pow-1
9836: PPUSH
9837: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9841: LD_EXP 1
9845: PPUSH
9846: LD_STRING D2c-JMM-2
9848: PPUSH
9849: CALL_OW 88
// secondPass = 2 ;
9853: LD_ADDR_EXP 20
9857: PUSH
9858: LD_INT 2
9860: ST_TO_ADDR
// end ; DialogueOff ;
9861: CALL_OW 7
// exit ;
9865: POP
9866: POP
9867: GO 9873
// end ; end ;
9869: GO 9492
9871: POP
9872: POP
// end ;
9873: PPOPN 3
9875: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9876: LD_EXP 21
9880: PUSH
9881: LD_INT 1
9883: EQUAL
9884: PUSH
9885: LD_INT 11
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 70
9902: AND
9903: IFFALSE 10384
9905: GO 9907
9907: DISABLE
9908: LD_INT 0
9910: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
9911: LD_ADDR_VAR 0 1
9915: PUSH
9916: LD_INT 11
9918: PPUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 3
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PPUSH
9929: CALL_OW 70
9933: ST_TO_ADDR
// if not vehicles then
9934: LD_VAR 0 1
9938: NOT
9939: IFFALSE 9943
// exit ;
9941: GO 10384
// repeat wait ( 0 0$1 ) ;
9943: LD_INT 35
9945: PPUSH
9946: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
9950: LD_VAR 0 1
9954: PPUSH
9955: LD_INT 101
9957: PUSH
9958: LD_INT 1
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PPUSH
9965: CALL_OW 72
9969: IFFALSE 9943
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
9971: LD_VAR 0 1
9975: PPUSH
9976: LD_INT 101
9978: PUSH
9979: LD_INT 1
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 72
9990: PUSH
9991: LD_INT 1
9993: ARRAY
9994: PPUSH
9995: CALL_OW 87
// DialogueOn ;
9999: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10003: LD_INT 22
10005: PUSH
10006: LD_INT 1
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 26
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 23
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: LD_INT 25
10038: PUSH
10039: LD_INT 1
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 25
10068: PUSH
10069: LD_INT 4
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 5
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 25
10088: PUSH
10089: LD_INT 8
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 69
10115: PPUSH
10116: LD_STRING DT1-Sol1-1
10118: PPUSH
10119: LD_STRING DT1-FSol1-1
10121: PPUSH
10122: CALL 12129 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10126: LD_EXP 1
10130: PPUSH
10131: LD_STRING DT1-JMM-1
10133: PPUSH
10134: CALL_OW 88
// DialogueOff ;
10138: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10142: LD_INT 175
10144: PPUSH
10145: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10149: LD_INT 11
10151: PPUSH
10152: LD_INT 22
10154: PUSH
10155: LD_INT 3
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 50
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 2
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 21
10183: PUSH
10184: LD_INT 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 70
10205: PUSH
10206: LD_INT 0
10208: EQUAL
10209: PUSH
10210: LD_EXP 22
10214: PUSH
10215: LD_INT 2
10217: GREATER
10218: AND
10219: IFFALSE 10142
// DialogueOn ;
10221: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10225: LD_EXP 1
10229: PPUSH
10230: LD_STRING DT1a-JMM-1
10232: PPUSH
10233: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10237: LD_INT 22
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 26
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 23
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 2
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 25
10282: PUSH
10283: LD_INT 2
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 25
10292: PUSH
10293: LD_INT 3
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 25
10302: PUSH
10303: LD_INT 4
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 25
10312: PUSH
10313: LD_INT 5
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 25
10322: PUSH
10323: LD_INT 8
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: PPUSH
10350: LD_STRING DT1a-Sol1-1
10352: PPUSH
10353: LD_STRING DT1a-FSol1-1
10355: PPUSH
10356: CALL 12129 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10360: LD_EXP 1
10364: PPUSH
10365: LD_STRING DT1a-JMM-2
10367: PPUSH
10368: CALL_OW 88
// DialogueOff ;
10372: CALL_OW 7
// vehicleTeleported := 2 ;
10376: LD_ADDR_EXP 21
10380: PUSH
10381: LD_INT 2
10383: ST_TO_ADDR
// end ;
10384: PPOPN 1
10386: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10387: LD_EXP 21
10391: PUSH
10392: LD_INT 3
10394: EQUAL
10395: PUSH
10396: LD_INT 11
10398: PPUSH
10399: LD_INT 22
10401: PUSH
10402: LD_INT 3
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 101
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 70
10427: AND
10428: IFFALSE 10713
10430: GO 10432
10432: DISABLE
10433: LD_INT 0
10435: PPUSH
10436: PPUSH
10437: PPUSH
// begin wait ( 0 0$0.3 ) ;
10438: LD_INT 10
10440: PPUSH
10441: CALL_OW 67
// DialogueOn ;
10445: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10449: LD_ADDR_VAR 0 3
10453: PUSH
10454: LD_INT 22
10456: PUSH
10457: LD_INT 1
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 23
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 26
10476: PUSH
10477: LD_INT 1
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 2
10486: PUSH
10487: LD_INT 25
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 25
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 25
10509: PUSH
10510: LD_INT 3
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 25
10519: PUSH
10520: LD_INT 4
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 25
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 25
10539: PUSH
10540: LD_INT 8
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 69
10566: PPUSH
10567: LD_STRING DT2-Sol1-1
10569: PPUSH
10570: LD_STRING DT2-FSol1-1
10572: PPUSH
10573: CALL 12129 0 3
10577: ST_TO_ADDR
// DialogueOff ;
10578: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10582: LD_INT 175
10584: PPUSH
10585: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10589: LD_INT 11
10591: PPUSH
10592: LD_INT 22
10594: PUSH
10595: LD_INT 3
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 50
10604: PUSH
10605: EMPTY
10606: LIST
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 70
10616: NOT
10617: IFFALSE 10582
// wait ( 0 0$2 ) ;
10619: LD_INT 70
10621: PPUSH
10622: CALL_OW 67
// vehicleTeleported := 4 ;
10626: LD_ADDR_EXP 21
10630: PUSH
10631: LD_INT 4
10633: ST_TO_ADDR
// DialogueOn ;
10634: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10638: LD_EXP 1
10642: PPUSH
10643: LD_STRING DT2a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// if speaker then
10650: LD_VAR 0 3
10654: IFFALSE 10697
// if GetSex ( speaker ) = 1 then
10656: LD_VAR 0 3
10660: PPUSH
10661: CALL_OW 258
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10685
// Say ( speaker , DT2a-Sol1-1 ) else
10671: LD_VAR 0 3
10675: PPUSH
10676: LD_STRING DT2a-Sol1-1
10678: PPUSH
10679: CALL_OW 88
10683: GO 10697
// Say ( speaker , DT2a-FSol1-1 ) ;
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_STRING DT2a-FSol1-1
10692: PPUSH
10693: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10697: LD_EXP 3
10701: PPUSH
10702: LD_STRING DT2a-Don-1
10704: PPUSH
10705: CALL_OW 88
// DialogueOff ;
10709: CALL_OW 7
// end ;
10713: PPOPN 3
10715: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10716: LD_INT 1
10718: PPUSH
10719: LD_INT 45
10721: PPUSH
10722: LD_INT 74
10724: PPUSH
10725: CALL_OW 293
10729: IFFALSE 10904
10731: GO 10733
10733: DISABLE
// begin DialogueOn ;
10734: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10738: LD_INT 36
10740: PPUSH
10741: LD_INT 55
10743: PPUSH
10744: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 23
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 26
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 2
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 4
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 5
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 8
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 69
10860: PPUSH
10861: LD_STRING D5-Sol1-1
10863: PPUSH
10864: LD_STRING D5-FSol1-
10866: PPUSH
10867: CALL 12129 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10871: LD_EXP 23
10875: PUSH
10876: LD_EXP 3
10880: PPUSH
10881: CALL_OW 302
10885: AND
10886: IFFALSE 10900
// Say ( Donaldson , D5-Don-1 ) ;
10888: LD_EXP 3
10892: PPUSH
10893: LD_STRING D5-Don-1
10895: PPUSH
10896: CALL_OW 88
// DialogueOff ;
10900: CALL_OW 7
// end ;
10904: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
10905: LD_INT 1
10907: PPUSH
10908: LD_INT 10
10910: PPUSH
10911: CALL_OW 292
10915: PUSH
10916: LD_INT 1
10918: PPUSH
10919: LD_INT 137
10921: PPUSH
10922: CALL_OW 292
10926: OR
10927: IFFALSE 11082
10929: GO 10931
10931: DISABLE
// begin DialogueOn ;
10932: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10936: LD_INT 22
10938: PUSH
10939: LD_INT 1
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 23
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 26
10958: PUSH
10959: LD_INT 1
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: LD_INT 2
10968: PUSH
10969: LD_INT 25
10971: PUSH
10972: LD_INT 1
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 25
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 25
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 25
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 25
11011: PUSH
11012: LD_INT 5
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 25
11021: PUSH
11022: LD_INT 8
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 69
11048: PPUSH
11049: LD_STRING DT3-Sol1-1
11051: PPUSH
11052: LD_STRING DT3-FSol1-1
11054: PPUSH
11055: CALL 12129 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11059: LD_EXP 1
11063: PPUSH
11064: LD_STRING DT3-JMM-1
11066: PPUSH
11067: CALL_OW 88
// DialogueOff ;
11071: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11075: LD_STRING M2
11077: PPUSH
11078: CALL_OW 337
// end ;
11082: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11083: LD_EXP 35
11087: PUSH
11088: LD_INT 0
11090: EQUAL
11091: PUSH
11092: LD_INT 10
11094: PPUSH
11095: LD_INT 22
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 70
11109: PUSH
11110: LD_INT 10
11112: PPUSH
11113: LD_INT 22
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: LD_INT 24
11128: PUSH
11129: LD_INT 800
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 21
11142: PUSH
11143: LD_INT 2
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 58
11152: PUSH
11153: EMPTY
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 70
11166: OR
11167: AND
11168: IFFALSE 11181
11170: GO 11172
11172: DISABLE
// ruEscape := 1 ;
11173: LD_ADDR_EXP 35
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
11181: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11182: LD_INT 3
11184: PPUSH
11185: CALL_OW 303
11189: PUSH
11190: LD_INT 4
11192: PPUSH
11193: CALL_OW 303
11197: OR
11198: PUSH
11199: LD_EXP 35
11203: PUSH
11204: LD_INT 1
11206: EQUAL
11207: OR
11208: IFFALSE 11797
11210: GO 11212
11212: DISABLE
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
11217: PPUSH
// begin ruAI := 0 ;
11218: LD_ADDR_EXP 34
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11226: LD_EXP 27
11230: PPUSH
11231: CALL_OW 122
// wait ( 0 0$1 ) ;
11235: LD_INT 35
11237: PPUSH
11238: CALL_OW 67
// DialogueOn ;
11242: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11246: LD_INT 75
11248: PPUSH
11249: LD_INT 21
11251: PPUSH
11252: LD_INT 1
11254: PPUSH
11255: LD_INT 12
11257: PPUSH
11258: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11262: LD_INT 75
11264: PPUSH
11265: LD_INT 21
11267: PPUSH
11268: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11272: LD_INT 10
11274: PPUSH
11275: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11279: LD_EXP 1
11283: PPUSH
11284: LD_STRING D6-JMM-1
11286: PPUSH
11287: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11291: LD_INT 75
11293: PPUSH
11294: LD_INT 21
11296: PPUSH
11297: LD_INT 1
11299: PPUSH
11300: CALL_OW 331
// DialogueOff ;
11304: CALL_OW 7
// for i in RuScientists do
11308: LD_ADDR_VAR 0 1
11312: PUSH
11313: LD_EXP 27
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11355
// begin SetSide ( i , 6 ) ;
11321: LD_VAR 0 1
11325: PPUSH
11326: LD_INT 6
11328: PPUSH
11329: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11333: LD_VAR 0 1
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: LD_INT 3
11343: PPUSH
11344: CALL_OW 12
11348: PPUSH
11349: CALL_OW 109
// end ;
11353: GO 11318
11355: POP
11356: POP
// repeat wait ( 0 0$1 ) ;
11357: LD_INT 35
11359: PPUSH
11360: CALL_OW 67
// for i in RuScientists do
11364: LD_ADDR_VAR 0 1
11368: PUSH
11369: LD_EXP 27
11373: PUSH
11374: FOR_IN
11375: IFFALSE 11788
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11377: LD_ADDR_VAR 0 3
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_INT 3
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 91
11394: PUSH
11395: LD_VAR 0 1
11399: PUSH
11400: LD_INT 10
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 58
11420: PUSH
11421: EMPTY
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: PPUSH
11430: CALL_OW 69
11434: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11435: LD_VAR 0 3
11439: PUSH
11440: LD_VAR 0 1
11444: PPUSH
11445: CALL_OW 310
11449: NOT
11450: AND
11451: IFFALSE 11479
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11453: LD_VAR 0 1
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_VAR 0 1
11467: PPUSH
11468: CALL_OW 74
11472: PPUSH
11473: CALL_OW 120
// continue ;
11477: GO 11374
// end ; if IsInUnit ( i ) then
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 310
11488: IFFALSE 11507
// unit := IsInUnit ( i ) else
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 310
11504: ST_TO_ADDR
11505: GO 11517
// unit := i ;
11507: LD_ADDR_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11517: LD_VAR 0 1
11521: PPUSH
11522: CALL_OW 110
11526: PUSH
11527: LD_INT 1
11529: DOUBLE
11530: EQUAL
11531: IFTRUE 11535
11533: GO 11594
11535: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11536: LD_VAR 0 2
11540: PPUSH
11541: LD_INT 137
11543: PPUSH
11544: CALL_OW 296
11548: PUSH
11549: LD_INT 13
11551: LESS
11552: PUSH
11553: LD_INT 137
11555: PPUSH
11556: CALL_OW 302
11560: AND
11561: IFFALSE 11577
// ComEnterUnit ( unit , rutp ) else
11563: LD_VAR 0 2
11567: PPUSH
11568: LD_INT 137
11570: PPUSH
11571: CALL_OW 120
11575: GO 11592
// ComMoveXY ( unit , 16 , 28 ) ;
11577: LD_VAR 0 2
11581: PPUSH
11582: LD_INT 16
11584: PPUSH
11585: LD_INT 28
11587: PPUSH
11588: CALL_OW 111
// end ; 2 :
11592: GO 11786
11594: LD_INT 2
11596: DOUBLE
11597: EQUAL
11598: IFTRUE 11602
11600: GO 11620
11602: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11603: LD_VAR 0 2
11607: PPUSH
11608: LD_INT 97
11610: PPUSH
11611: LD_INT 2
11613: PPUSH
11614: CALL_OW 111
11618: GO 11786
11620: LD_INT 3
11622: DOUBLE
11623: EQUAL
11624: IFTRUE 11628
11626: GO 11687
11628: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11629: LD_VAR 0 2
11633: PPUSH
11634: LD_INT 137
11636: PPUSH
11637: CALL_OW 296
11641: PUSH
11642: LD_INT 13
11644: LESS
11645: PUSH
11646: LD_INT 137
11648: PPUSH
11649: CALL_OW 302
11653: AND
11654: IFFALSE 11670
// ComEnterUnit ( unit , rutp ) else
11656: LD_VAR 0 2
11660: PPUSH
11661: LD_INT 137
11663: PPUSH
11664: CALL_OW 120
11668: GO 11685
// ComMoveXY ( unit , 128 , 155 ) ;
11670: LD_VAR 0 2
11674: PPUSH
11675: LD_INT 128
11677: PPUSH
11678: LD_INT 155
11680: PPUSH
11681: CALL_OW 111
// end ; 11 :
11685: GO 11786
11687: LD_INT 11
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11713
11695: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11696: LD_VAR 0 2
11700: PPUSH
11701: LD_INT 16
11703: PPUSH
11704: LD_INT 28
11706: PPUSH
11707: CALL_OW 111
11711: GO 11786
11713: LD_INT 13
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11759
11721: POP
// begin if IsOk ( ruteleprt ) then
11722: LD_INT 10
11724: PPUSH
11725: CALL_OW 302
11729: IFFALSE 11745
// ComEnterUnit ( unit , ruteleprt ) else
11731: LD_VAR 0 2
11735: PPUSH
11736: LD_INT 10
11738: PPUSH
11739: CALL_OW 120
11743: GO 11757
// SetTag ( unit , 23 ) ;
11745: LD_VAR 0 2
11749: PPUSH
11750: LD_INT 23
11752: PPUSH
11753: CALL_OW 109
// end ; 23 :
11757: GO 11786
11759: LD_INT 23
11761: DOUBLE
11762: EQUAL
11763: IFTRUE 11767
11765: GO 11785
11767: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_INT 128
11775: PPUSH
11776: LD_INT 155
11778: PPUSH
11779: CALL_OW 111
11783: GO 11786
11785: POP
// end ;
11786: GO 11374
11788: POP
11789: POP
// until not RuScientists ;
11790: LD_EXP 27
11794: NOT
11795: IFFALSE 11357
// end ;
11797: PPOPN 3
11799: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11800: LD_EXP 34
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: PUSH
11809: LD_EXP 27
11813: AND
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 6
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 95
11830: PUSH
11831: LD_INT 13
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 95
11840: PUSH
11841: LD_INT 14
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 95
11850: PUSH
11851: LD_INT 25
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 69
11872: AND
11873: IFFALSE 12086
11875: GO 11877
11877: DISABLE
11878: LD_INT 0
11880: PPUSH
11881: PPUSH
11882: PPUSH
11883: PPUSH
// begin enable ;
11884: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11885: LD_ADDR_VAR 0 1
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_INT 6
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: LD_INT 95
11905: PUSH
11906: LD_INT 13
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 95
11915: PUSH
11916: LD_INT 14
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 95
11925: PUSH
11926: LD_INT 25
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: PUSH
11948: FOR_IN
11949: IFFALSE 12084
// begin if i in RuScientists then
11951: LD_VAR 0 1
11955: PUSH
11956: LD_EXP 27
11960: IN
11961: IFFALSE 11990
// begin RuScientists = RuScientists diff i ;
11963: LD_ADDR_EXP 27
11967: PUSH
11968: LD_EXP 27
11972: PUSH
11973: LD_VAR 0 1
11977: DIFF
11978: ST_TO_ADDR
// RemoveUnit ( i ) ;
11979: LD_VAR 0 1
11983: PPUSH
11984: CALL_OW 64
// continue ;
11988: GO 11948
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
11990: LD_VAR 0 1
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_INT 6
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 33
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 69
12023: IN
12024: IFFALSE 12082
// begin if IsDrivenBy ( i ) in RuScientists then
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 311
12035: PUSH
12036: LD_EXP 27
12040: IN
12041: IFFALSE 12059
// RuScientists = RuScientists diff i ;
12043: LD_ADDR_EXP 27
12047: PUSH
12048: LD_EXP 27
12052: PUSH
12053: LD_VAR 0 1
12057: DIFF
12058: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12059: LD_VAR 0 1
12063: PPUSH
12064: CALL_OW 311
12068: PPUSH
12069: CALL_OW 64
// RemoveUnit ( i ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 64
// end ; end ;
12082: GO 11948
12084: POP
12085: POP
// end ; end_of_file
12086: PPOPN 4
12088: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12089: LD_INT 0
12091: PPUSH
12092: PPUSH
// for i in charactersList do
12093: LD_ADDR_VAR 0 4
12097: PUSH
12098: LD_VAR 0 1
12102: PUSH
12103: FOR_IN
12104: IFFALSE 12122
// SaveCharacters ( i , ident ) ;
12106: LD_VAR 0 4
12110: PPUSH
12111: LD_VAR 0 2
12115: PPUSH
12116: CALL_OW 38
12120: GO 12103
12122: POP
12123: POP
// end ;
12124: LD_VAR 0 3
12128: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12129: LD_INT 0
12131: PPUSH
12132: PPUSH
12133: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12134: LD_ADDR_VAR 0 1
12138: PUSH
12139: LD_VAR 0 1
12143: PUSH
12144: LD_EXP 1
12148: PUSH
12149: LD_EXP 7
12153: PUSH
12154: LD_EXP 3
12158: PUSH
12159: LD_EXP 4
12163: PUSH
12164: LD_EXP 5
12168: PUSH
12169: LD_EXP 2
12173: PUSH
12174: LD_EXP 12
12178: PUSH
12179: LD_EXP 13
12183: PUSH
12184: LD_EXP 9
12188: PUSH
12189: LD_EXP 11
12193: PUSH
12194: LD_EXP 6
12198: PUSH
12199: LD_EXP 8
12203: PUSH
12204: LD_EXP 10
12208: PUSH
12209: LD_EXP 15
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: DIFF
12230: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12231: LD_ADDR_VAR 0 6
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 1
12243: PPUSH
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 12
12253: ARRAY
12254: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12255: LD_VAR 0 6
12259: PPUSH
12260: CALL_OW 258
12264: PUSH
12265: LD_INT 1
12267: EQUAL
12268: IFFALSE 12286
// Say ( speaker , dialogMID ) else
12270: LD_VAR 0 6
12274: PPUSH
12275: LD_VAR 0 2
12279: PPUSH
12280: CALL_OW 88
12284: GO 12300
// Say ( speaker , dialogFID ) ;
12286: LD_VAR 0 6
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: CALL_OW 88
// result := speaker ;
12300: LD_ADDR_VAR 0 4
12304: PUSH
12305: LD_VAR 0 6
12309: ST_TO_ADDR
// end ;
12310: LD_VAR 0 4
12314: RET
// export function PrepareDifficulty ; var tmp ; begin
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
// if Difficulty = 1 then
12319: LD_OWVAR 67
12323: PUSH
12324: LD_INT 1
12326: EQUAL
12327: IFFALSE 12347
// begin RuSolMinLevel = 8 ;
12329: LD_ADDR_EXP 29
12333: PUSH
12334: LD_INT 8
12336: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12337: LD_ADDR_EXP 30
12341: PUSH
12342: LD_INT 10
12344: ST_TO_ADDR
// end else
12345: GO 12587
// if Difficulty = 2 then
12347: LD_OWVAR 67
12351: PUSH
12352: LD_INT 2
12354: EQUAL
12355: IFFALSE 12451
// begin RuSolMinLevel = 9 ;
12357: LD_ADDR_EXP 29
12361: PUSH
12362: LD_INT 9
12364: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12365: LD_ADDR_EXP 30
12369: PUSH
12370: LD_INT 10
12372: ST_TO_ADDR
// uc_nation = 3 ;
12373: LD_ADDR_OWVAR 21
12377: PUSH
12378: LD_INT 3
12380: ST_TO_ADDR
// uc_side = 3 ;
12381: LD_ADDR_OWVAR 20
12385: PUSH
12386: LD_INT 3
12388: ST_TO_ADDR
// bc_level = 10 ;
12389: LD_ADDR_OWVAR 43
12393: PUSH
12394: LD_INT 10
12396: ST_TO_ADDR
// bc_type = b_turret ;
12397: LD_ADDR_OWVAR 42
12401: PUSH
12402: LD_INT 33
12404: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: LD_INT 86
12412: PPUSH
12413: LD_INT 34
12415: PPUSH
12416: LD_INT 2
12418: PPUSH
12419: CALL_OW 47
12423: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12424: LD_VAR 0 2
12428: PPUSH
12429: LD_INT 49
12431: PPUSH
12432: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12436: LD_INT 64
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// end else
12449: GO 12587
// begin RuSolMinLevel = 10 ;
12451: LD_ADDR_EXP 29
12455: PUSH
12456: LD_INT 10
12458: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12459: LD_ADDR_EXP 30
12463: PUSH
12464: LD_INT 10
12466: ST_TO_ADDR
// uc_nation = 3 ;
12467: LD_ADDR_OWVAR 21
12471: PUSH
12472: LD_INT 3
12474: ST_TO_ADDR
// uc_side = 3 ;
12475: LD_ADDR_OWVAR 20
12479: PUSH
12480: LD_INT 3
12482: ST_TO_ADDR
// bc_level = 10 ;
12483: LD_ADDR_OWVAR 43
12487: PUSH
12488: LD_INT 10
12490: ST_TO_ADDR
// bc_type = b_turret ;
12491: LD_ADDR_OWVAR 42
12495: PUSH
12496: LD_INT 33
12498: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12499: LD_ADDR_VAR 0 2
12503: PUSH
12504: LD_INT 86
12506: PPUSH
12507: LD_INT 34
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 47
12517: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_INT 49
12525: PPUSH
12526: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12530: LD_ADDR_VAR 0 2
12534: PUSH
12535: LD_INT 93
12537: PPUSH
12538: LD_INT 31
12540: PPUSH
12541: LD_INT 2
12543: PPUSH
12544: CALL_OW 47
12548: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12549: LD_VAR 0 2
12553: PPUSH
12554: LD_INT 49
12556: PPUSH
12557: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12561: LD_INT 64
12563: PPUSH
12564: LD_INT 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12574: LD_INT 65
12576: PPUSH
12577: LD_INT 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 322
// end ; end ;
12587: LD_VAR 0 1
12591: RET
// export function ShowQuery1 ; begin
12592: LD_INT 0
12594: PPUSH
// result := Query ( Q1 ) ;
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_STRING Q1
12602: PPUSH
12603: CALL_OW 97
12607: ST_TO_ADDR
// end ;
12608: LD_VAR 0 1
12612: RET
// export function ShowQuery2 ; begin
12613: LD_INT 0
12615: PPUSH
// result := Query ( Q1a ) ;
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_STRING Q1a
12623: PPUSH
12624: CALL_OW 97
12628: ST_TO_ADDR
// end ;
12629: LD_VAR 0 1
12633: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12634: LD_INT 0
12636: PPUSH
12637: PPUSH
12638: PPUSH
12639: PPUSH
// for i = 1 to count do
12640: LD_ADDR_VAR 0 8
12644: PUSH
12645: DOUBLE
12646: LD_INT 1
12648: DEC
12649: ST_TO_ADDR
12650: LD_VAR 0 6
12654: PUSH
12655: FOR_TO
12656: IFFALSE 12737
// begin uc_side = side ;
12658: LD_ADDR_OWVAR 20
12662: PUSH
12663: LD_VAR 0 1
12667: ST_TO_ADDR
// uc_nation = nation ;
12668: LD_ADDR_OWVAR 21
12672: PUSH
12673: LD_VAR 0 2
12677: ST_TO_ADDR
// hc_gallery =  ;
12678: LD_ADDR_OWVAR 33
12682: PUSH
12683: LD_STRING 
12685: ST_TO_ADDR
// hc_name =  ;
12686: LD_ADDR_OWVAR 26
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12694: LD_INT 0
12696: PPUSH
12697: LD_VAR 0 5
12701: PPUSH
12702: LD_VAR 0 4
12706: PPUSH
12707: CALL_OW 380
// un = CreateHuman ;
12711: LD_ADDR_VAR 0 10
12715: PUSH
12716: CALL_OW 44
12720: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12721: LD_VAR 0 10
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: CALL_OW 52
// end ;
12735: GO 12655
12737: POP
12738: POP
// end ;
12739: LD_VAR 0 7
12743: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12744: LD_INT 0
12746: PPUSH
12747: PPUSH
12748: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12749: LD_ADDR_VAR 0 6
12753: PUSH
12754: LD_INT 48
12756: PUSH
12757: LD_INT 49
12759: PUSH
12760: LD_INT 50
12762: PUSH
12763: LD_INT 20
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: LD_INT 51
12771: PUSH
12772: LD_INT 52
12774: PUSH
12775: LD_INT 69
12777: PUSH
12778: LD_INT 39
12780: PUSH
12781: LD_INT 34
12783: PUSH
12784: LD_INT 40
12786: PUSH
12787: LD_INT 53
12789: PUSH
12790: LD_INT 71
12792: PUSH
12793: LD_INT 57
12795: PUSH
12796: LD_INT 58
12798: PUSH
12799: LD_INT 44
12801: PUSH
12802: LD_INT 32
12804: PUSH
12805: LD_INT 27
12807: PUSH
12808: LD_INT 23
12810: PUSH
12811: LD_INT 33
12813: PUSH
12814: LD_INT 59
12816: PUSH
12817: LD_INT 54
12819: PUSH
12820: LD_INT 55
12822: PUSH
12823: LD_INT 56
12825: PUSH
12826: LD_INT 63
12828: PUSH
12829: LD_INT 64
12831: PUSH
12832: LD_INT 65
12834: PUSH
12835: LD_INT 30
12837: PUSH
12838: LD_INT 31
12840: PUSH
12841: LD_INT 21
12843: PUSH
12844: LD_INT 22
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// for i := 1 to list do
12884: LD_ADDR_VAR 0 5
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_VAR 0 6
12898: PUSH
12899: FOR_TO
12900: IFFALSE 12972
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12902: LD_VAR 0 6
12906: PUSH
12907: LD_VAR 0 5
12911: ARRAY
12912: PPUSH
12913: LD_VAR 0 1
12917: PPUSH
12918: CALL_OW 321
12922: PUSH
12923: LD_INT 1
12925: EQUAL
12926: PUSH
12927: LD_VAR 0 6
12931: PUSH
12932: LD_VAR 0 5
12936: ARRAY
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: CALL_OW 482
12947: AND
12948: IFFALSE 12970
// AddComResearch ( lab , list [ i ] ) ;
12950: LD_VAR 0 2
12954: PPUSH
12955: LD_VAR 0 6
12959: PUSH
12960: LD_VAR 0 5
12964: ARRAY
12965: PPUSH
12966: CALL_OW 184
12970: GO 12899
12972: POP
12973: POP
// end ;
12974: LD_VAR 0 4
12978: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
12979: LD_INT 0
12981: PPUSH
12982: PPUSH
12983: PPUSH
12984: PPUSH
12985: PPUSH
12986: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
12987: LD_ADDR_VAR 0 8
12991: PUSH
12992: LD_VAR 0 2
12996: PPUSH
12997: CALL_OW 313
13001: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13002: LD_ADDR_VAR 0 9
13006: PUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 22
13014: PUSH
13015: LD_VAR 0 1
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 2
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 24
13036: PUSH
13037: LD_INT 750
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 3
13046: PUSH
13047: LD_INT 54
13049: PUSH
13050: EMPTY
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PPUSH
13063: CALL_OW 70
13067: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: LD_INT 22
13080: PUSH
13081: LD_VAR 0 1
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 3
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: LD_INT 24
13105: PUSH
13106: LD_INT 1000
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: PPUSH
13125: CALL_OW 70
13129: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13130: LD_VAR 0 6
13134: NOT
13135: PUSH
13136: LD_INT 22
13138: PUSH
13139: LD_VAR 0 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 24
13160: PUSH
13161: LD_INT 250
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: NOT
13178: AND
13179: IFFALSE 13183
// exit ;
13181: GO 13341
// if buildingsList and engineerOkInside then
13183: LD_VAR 0 6
13187: PUSH
13188: LD_VAR 0 8
13192: AND
13193: IFFALSE 13204
// ComExitBuilding ( engineerOkInside ) ;
13195: LD_VAR 0 8
13199: PPUSH
13200: CALL_OW 122
// if buildingsList and engineerOkOutside then
13204: LD_VAR 0 6
13208: PUSH
13209: LD_VAR 0 9
13213: AND
13214: IFFALSE 13234
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13216: LD_VAR 0 9
13220: PPUSH
13221: LD_VAR 0 6
13225: PUSH
13226: LD_INT 1
13228: ARRAY
13229: PPUSH
13230: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13234: LD_VAR 0 6
13238: PUSH
13239: LD_INT 0
13241: EQUAL
13242: PUSH
13243: LD_VAR 0 4
13247: PUSH
13248: LD_INT 0
13250: EQUAL
13251: AND
13252: PUSH
13253: LD_VAR 0 9
13257: AND
13258: IFFALSE 13274
// ComEnterUnit ( engineerOkOutside , depot ) ;
13260: LD_VAR 0 9
13264: PPUSH
13265: LD_VAR 0 2
13269: PPUSH
13270: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13274: LD_VAR 0 9
13278: PUSH
13279: LD_VAR 0 6
13283: PUSH
13284: LD_INT 0
13286: EQUAL
13287: AND
13288: PUSH
13289: LD_VAR 0 4
13293: AND
13294: IFFALSE 13341
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13296: LD_VAR 0 9
13300: PPUSH
13301: LD_VAR 0 4
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: LD_VAR 0 4
13314: PUSH
13315: LD_INT 2
13317: ARRAY
13318: PPUSH
13319: LD_VAR 0 4
13323: PUSH
13324: LD_INT 3
13326: ARRAY
13327: PPUSH
13328: LD_VAR 0 4
13332: PUSH
13333: LD_INT 4
13335: ARRAY
13336: PPUSH
13337: CALL_OW 145
// end ;
13341: LD_VAR 0 5
13345: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13346: LD_INT 0
13348: PPUSH
13349: PPUSH
13350: PPUSH
13351: PPUSH
13352: PPUSH
13353: PPUSH
13354: PPUSH
13355: PPUSH
13356: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13357: LD_ADDR_VAR 0 6
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_VAR 0 1
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 25
13376: PUSH
13377: LD_INT 4
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 24
13386: PUSH
13387: LD_INT 251
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: PUSH
13404: LD_EXP 27
13408: PUSH
13409: EMPTY
13410: LIST
13411: DIFF
13412: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13413: LD_ADDR_VAR 0 7
13417: PUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 22
13425: PUSH
13426: LD_VAR 0 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 56
13437: PUSH
13438: EMPTY
13439: LIST
13440: PUSH
13441: LD_INT 25
13443: PUSH
13444: LD_INT 4
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 50
13453: PUSH
13454: EMPTY
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 70
13467: PUSH
13468: LD_EXP 27
13472: PUSH
13473: EMPTY
13474: LIST
13475: DIFF
13476: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13477: LD_ADDR_VAR 0 10
13481: PUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_INT 22
13489: PUSH
13490: LD_VAR 0 1
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: LD_INT 21
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 24
13514: PUSH
13515: LD_INT 750
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 70
13535: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13536: LD_ADDR_VAR 0 11
13540: PUSH
13541: LD_VAR 0 2
13545: PPUSH
13546: LD_INT 22
13548: PUSH
13549: LD_VAR 0 1
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 3
13570: PUSH
13571: LD_INT 24
13573: PUSH
13574: LD_INT 1000
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: PPUSH
13590: CALL_OW 70
13594: ST_TO_ADDR
// if damageUnits and sciList then
13595: LD_VAR 0 10
13599: PUSH
13600: LD_VAR 0 6
13604: AND
13605: IFFALSE 13621
// ComMoveToArea ( damageUnits , healArea ) ;
13607: LD_VAR 0 10
13611: PPUSH
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13621: LD_VAR 0 11
13625: PUSH
13626: LD_VAR 0 6
13630: AND
13631: PUSH
13632: LD_VAR 0 7
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: AND
13641: IFFALSE 13687
// for i in buildings do
13643: LD_ADDR_VAR 0 8
13647: PUSH
13648: LD_VAR 0 4
13652: PUSH
13653: FOR_IN
13654: IFFALSE 13685
// begin if UnitsInside ( i ) then
13656: LD_VAR 0 8
13660: PPUSH
13661: CALL_OW 313
13665: IFFALSE 13683
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13667: LD_VAR 0 8
13671: PPUSH
13672: CALL_OW 313
13676: PPUSH
13677: CALL_OW 122
// break ;
13681: GO 13685
// end ; end ;
13683: GO 13653
13685: POP
13686: POP
// if unitsToHeal and sciListOutside then
13687: LD_VAR 0 11
13691: PUSH
13692: LD_VAR 0 7
13696: AND
13697: IFFALSE 13717
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13699: LD_VAR 0 7
13703: PPUSH
13704: LD_VAR 0 11
13708: PUSH
13709: LD_INT 1
13711: ARRAY
13712: PPUSH
13713: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13717: LD_VAR 0 10
13721: PUSH
13722: LD_INT 0
13724: EQUAL
13725: PUSH
13726: LD_VAR 0 11
13730: PUSH
13731: LD_INT 0
13733: EQUAL
13734: AND
13735: PUSH
13736: LD_VAR 0 7
13740: AND
13741: IFFALSE 13809
// begin tmp := buildings ;
13743: LD_ADDR_VAR 0 12
13747: PUSH
13748: LD_VAR 0 4
13752: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13753: LD_ADDR_VAR 0 13
13757: PUSH
13758: LD_INT 1
13760: PPUSH
13761: LD_VAR 0 12
13765: PPUSH
13766: CALL_OW 12
13770: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13771: LD_VAR 0 7
13775: PPUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 60
13781: PUSH
13782: EMPTY
13783: LIST
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 72
13793: PPUSH
13794: LD_VAR 0 12
13798: PUSH
13799: LD_VAR 0 13
13803: ARRAY
13804: PPUSH
13805: CALL_OW 120
// end ; end ;
13809: LD_VAR 0 5
13813: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13814: LD_INT 0
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13822: LD_ADDR_VAR 0 7
13826: PUSH
13827: LD_VAR 0 2
13831: PPUSH
13832: LD_INT 22
13834: PUSH
13835: LD_VAR 0 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 34
13856: PUSH
13857: LD_INT 52
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PPUSH
13869: CALL_OW 70
13873: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13874: LD_ADDR_VAR 0 8
13878: PUSH
13879: LD_VAR 0 2
13883: PPUSH
13884: LD_INT 22
13886: PUSH
13887: LD_VAR 0 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 21
13898: PUSH
13899: LD_INT 3
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 3
13908: PUSH
13909: LD_INT 24
13911: PUSH
13912: LD_INT 1000
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: PPUSH
13931: CALL_OW 70
13935: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
13936: LD_VAR 0 8
13940: PUSH
13941: LD_INT 0
13943: GREATER
13944: PUSH
13945: LD_VAR 0 7
13949: PPUSH
13950: LD_INT 24
13952: PUSH
13953: LD_INT 750
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 72
13964: PUSH
13965: LD_INT 0
13967: GREATER
13968: AND
13969: IFFALSE 13989
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
13971: LD_VAR 0 7
13975: PPUSH
13976: LD_VAR 0 8
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: CALL_OW 130
// end ;
13989: LD_VAR 0 3
13993: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
13994: LD_INT 0
13996: PPUSH
13997: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13998: LD_INT 22
14000: PUSH
14001: LD_VAR 0 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: PUSH
14029: LD_INT 18
14031: PPUSH
14032: LD_INT 22
14034: PUSH
14035: LD_VAR 0 1
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 21
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PPUSH
14058: CALL_OW 70
14062: PUSH
14063: LD_VAR 0 3
14067: LESSEQUAL
14068: DIFF
14069: IFFALSE 14136
// for i := 1 to vehCount do
14071: LD_ADDR_VAR 0 9
14075: PUSH
14076: DOUBLE
14077: LD_INT 1
14079: DEC
14080: ST_TO_ADDR
14081: LD_VAR 0 3
14085: PUSH
14086: FOR_TO
14087: IFFALSE 14134
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14089: LD_VAR 0 2
14093: PPUSH
14094: LD_VAR 0 7
14098: PPUSH
14099: LD_VAR 0 5
14103: PPUSH
14104: LD_VAR 0 6
14108: PPUSH
14109: LD_VAR 0 4
14113: PUSH
14114: LD_INT 1
14116: PPUSH
14117: LD_VAR 0 4
14121: PPUSH
14122: CALL_OW 12
14126: ARRAY
14127: PPUSH
14128: CALL_OW 185
14132: GO 14086
14134: POP
14135: POP
// end ;
14136: LD_VAR 0 8
14140: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14141: LD_INT 0
14143: PPUSH
14144: PPUSH
14145: PPUSH
14146: PPUSH
14147: PPUSH
14148: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14149: LD_ADDR_VAR 0 6
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_VAR 0 1
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 9
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PPUSH
14180: CALL_OW 69
14184: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14185: LD_ADDR_VAR 0 7
14189: PUSH
14190: LD_INT 81
14192: PUSH
14193: LD_VAR 0 1
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 3
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14228: LD_ADDR_VAR 0 4
14232: PUSH
14233: LD_INT 1
14235: PPUSH
14236: LD_INT 3
14238: PPUSH
14239: CALL_OW 12
14243: ST_TO_ADDR
// for i := 1 to list do
14244: LD_ADDR_VAR 0 5
14248: PUSH
14249: DOUBLE
14250: LD_INT 1
14252: DEC
14253: ST_TO_ADDR
14254: LD_VAR 0 6
14258: PUSH
14259: FOR_TO
14260: IFFALSE 14462
// for ta in filter do
14262: LD_ADDR_VAR 0 3
14266: PUSH
14267: LD_VAR 0 7
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14458
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14275: LD_VAR 0 6
14279: PUSH
14280: LD_VAR 0 5
14284: ARRAY
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: CALL_OW 296
14295: PUSH
14296: LD_INT 15
14298: LESSEQUAL
14299: IFFALSE 14456
// begin case c of 1 :
14301: LD_VAR 0 4
14305: PUSH
14306: LD_INT 1
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14352
14314: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14315: LD_VAR 0 6
14319: PUSH
14320: LD_VAR 0 5
14324: ARRAY
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: CALL_OW 250
14335: PPUSH
14336: LD_VAR 0 3
14340: PPUSH
14341: CALL_OW 251
14345: PPUSH
14346: CALL_OW 154
14350: GO 14456
14352: LD_INT 2
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14424
14360: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14361: LD_VAR 0 6
14365: PUSH
14366: LD_VAR 0 5
14370: ARRAY
14371: PPUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: CALL_OW 250
14381: PUSH
14382: LD_INT 1
14384: NEG
14385: PPUSH
14386: LD_INT 1
14388: PPUSH
14389: CALL_OW 12
14393: PLUS
14394: PPUSH
14395: LD_VAR 0 3
14399: PPUSH
14400: CALL_OW 251
14404: PUSH
14405: LD_INT 1
14407: NEG
14408: PPUSH
14409: LD_INT 1
14411: PPUSH
14412: CALL_OW 12
14416: PLUS
14417: PPUSH
14418: CALL_OW 153
14422: GO 14456
14424: LD_INT 3
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14455
14432: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14433: LD_VAR 0 6
14437: PUSH
14438: LD_VAR 0 5
14442: ARRAY
14443: PPUSH
14444: LD_VAR 0 3
14448: PPUSH
14449: CALL_OW 115
14453: GO 14456
14455: POP
// end ; end ;
14456: GO 14272
14458: POP
14459: POP
14460: GO 14259
14462: POP
14463: POP
// end ;
14464: LD_VAR 0 2
14468: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14469: LD_INT 0
14471: PPUSH
14472: PPUSH
14473: PPUSH
14474: PPUSH
// r := 100 ;
14475: LD_ADDR_VAR 0 5
14479: PUSH
14480: LD_INT 100
14482: ST_TO_ADDR
// x := 0 ;
14483: LD_ADDR_VAR 0 6
14487: PUSH
14488: LD_INT 0
14490: ST_TO_ADDR
// while ( x < n ) do
14491: LD_VAR 0 6
14495: PUSH
14496: LD_VAR 0 2
14500: LESS
14501: IFFALSE 14764
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14503: LD_ADDR_VAR 0 4
14507: PUSH
14508: DOUBLE
14509: LD_INT 1
14511: DEC
14512: ST_TO_ADDR
14513: LD_VAR 0 1
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 517
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: PUSH
14530: FOR_TO
14531: IFFALSE 14760
// begin if r > 50 then
14533: LD_VAR 0 5
14537: PUSH
14538: LD_INT 50
14540: GREATER
14541: IFFALSE 14744
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14543: LD_VAR 0 1
14547: PPUSH
14548: LD_INT 0
14550: PPUSH
14551: CALL_OW 517
14555: PUSH
14556: LD_INT 1
14558: ARRAY
14559: PUSH
14560: LD_VAR 0 4
14564: ARRAY
14565: PPUSH
14566: LD_VAR 0 1
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL_OW 517
14578: PUSH
14579: LD_INT 2
14581: ARRAY
14582: PUSH
14583: LD_VAR 0 4
14587: ARRAY
14588: PPUSH
14589: CALL_OW 458
14593: NOT
14594: IFFALSE 14742
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14596: LD_VAR 0 1
14600: PPUSH
14601: LD_INT 0
14603: PPUSH
14604: CALL_OW 517
14608: PUSH
14609: LD_INT 1
14611: ARRAY
14612: PUSH
14613: LD_VAR 0 4
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 1
14623: PPUSH
14624: LD_INT 0
14626: PPUSH
14627: CALL_OW 517
14631: PUSH
14632: LD_INT 2
14634: ARRAY
14635: PUSH
14636: LD_VAR 0 4
14640: ARRAY
14641: PPUSH
14642: LD_INT 8
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14652: LD_ADDR_EXP 37
14656: PUSH
14657: LD_EXP 37
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: LD_VAR 0 1
14669: PPUSH
14670: LD_INT 0
14672: PPUSH
14673: CALL_OW 517
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: PUSH
14682: LD_VAR 0 4
14686: ARRAY
14687: PUSH
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 0
14695: PPUSH
14696: CALL_OW 517
14700: PUSH
14701: LD_INT 2
14703: ARRAY
14704: PUSH
14705: LD_VAR 0 4
14709: ARRAY
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 2
14719: ST_TO_ADDR
// r := 0 ;
14720: LD_ADDR_VAR 0 5
14724: PUSH
14725: LD_INT 0
14727: ST_TO_ADDR
// x := x + 1 ;
14728: LD_ADDR_VAR 0 6
14732: PUSH
14733: LD_VAR 0 6
14737: PUSH
14738: LD_INT 1
14740: PLUS
14741: ST_TO_ADDR
// end end else
14742: GO 14758
// r := r + 35 ;
14744: LD_ADDR_VAR 0 5
14748: PUSH
14749: LD_VAR 0 5
14753: PUSH
14754: LD_INT 35
14756: PLUS
14757: ST_TO_ADDR
// end end ;
14758: GO 14530
14760: POP
14761: POP
14762: GO 14491
14764: LD_VAR 0 3
14768: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
// tmp := [ ] ;
14776: LD_ADDR_VAR 0 6
14780: PUSH
14781: EMPTY
14782: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14783: LD_ADDR_VAR 0 7
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_VAR 0 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 30
14802: PUSH
14803: LD_INT 32
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 69
14818: ST_TO_ADDR
// if bunkers then
14819: LD_VAR 0 7
14823: IFFALSE 14893
// for i in bunkers do
14825: LD_ADDR_VAR 0 4
14829: PUSH
14830: LD_VAR 0 7
14834: PUSH
14835: FOR_IN
14836: IFFALSE 14891
// for j in UnitsInside ( i ) do
14838: LD_ADDR_VAR 0 5
14842: PUSH
14843: LD_VAR 0 4
14847: PPUSH
14848: CALL_OW 313
14852: PUSH
14853: FOR_IN
14854: IFFALSE 14887
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14856: LD_ADDR_VAR 0 6
14860: PUSH
14861: LD_VAR 0 6
14865: PPUSH
14866: LD_VAR 0 6
14870: PUSH
14871: LD_INT 1
14873: PLUS
14874: PPUSH
14875: LD_VAR 0 5
14879: PPUSH
14880: CALL_OW 1
14884: ST_TO_ADDR
14885: GO 14853
14887: POP
14888: POP
14889: GO 14835
14891: POP
14892: POP
// if tmp then
14893: LD_VAR 0 6
14897: IFFALSE 14937
// begin ComExitBuilding ( tmp ) ;
14899: LD_VAR 0 6
14903: PPUSH
14904: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
14908: LD_VAR 0 6
14912: PPUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 250
14922: PPUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: CALL_OW 251
14932: PPUSH
14933: CALL_OW 174
// end ; end ;
14937: LD_VAR 0 3
14941: RET
// export function CreateNature ; var i , un ; begin
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
14946: PPUSH
// uc_side := 0 ;
14947: LD_ADDR_OWVAR 20
14951: PUSH
14952: LD_INT 0
14954: ST_TO_ADDR
// uc_nation := 0 ;
14955: LD_ADDR_OWVAR 21
14959: PUSH
14960: LD_INT 0
14962: ST_TO_ADDR
// InitHc ;
14963: CALL_OW 19
// hc_class := class_fish ;
14967: LD_ADDR_OWVAR 28
14971: PUSH
14972: LD_INT 20
14974: ST_TO_ADDR
// for i := 1 to 6 do
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: DOUBLE
14981: LD_INT 1
14983: DEC
14984: ST_TO_ADDR
14985: LD_INT 6
14987: PUSH
14988: FOR_TO
14989: IFFALSE 15008
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
14991: CALL_OW 44
14995: PPUSH
14996: LD_INT 22
14998: PPUSH
14999: LD_INT 0
15001: PPUSH
15002: CALL_OW 49
15006: GO 14988
15008: POP
15009: POP
// for i := 1 to Difficulty + 2 do
15010: LD_ADDR_VAR 0 2
15014: PUSH
15015: DOUBLE
15016: LD_INT 1
15018: DEC
15019: ST_TO_ADDR
15020: LD_OWVAR 67
15024: PUSH
15025: LD_INT 2
15027: PLUS
15028: PUSH
15029: FOR_TO
15030: IFFALSE 15139
// begin hc_sex := sex_male ;
15032: LD_ADDR_OWVAR 27
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// uc_side := 0 ;
15040: LD_ADDR_OWVAR 20
15044: PUSH
15045: LD_INT 0
15047: ST_TO_ADDR
// uc_nation := nation_nature ;
15048: LD_ADDR_OWVAR 21
15052: PUSH
15053: LD_INT 0
15055: ST_TO_ADDR
// hc_class := class_tiger ;
15056: LD_ADDR_OWVAR 28
15060: PUSH
15061: LD_INT 14
15063: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15064: LD_ADDR_OWVAR 31
15068: PUSH
15069: LD_EXP 30
15073: PUSH
15074: LD_INT 0
15076: PUSH
15077: LD_INT 0
15079: PUSH
15080: LD_INT 0
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15089: LD_ADDR_OWVAR 35
15093: PUSH
15094: LD_INT 5
15096: NEG
15097: PPUSH
15098: LD_INT 5
15100: PPUSH
15101: CALL_OW 12
15105: PUSH
15106: LD_OWVAR 67
15110: MUL
15111: ST_TO_ADDR
// un := CreateHuman ;
15112: LD_ADDR_VAR 0 3
15116: PUSH
15117: CALL_OW 44
15121: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_INT 23
15129: PPUSH
15130: LD_INT 0
15132: PPUSH
15133: CALL_OW 49
// end ;
15137: GO 15029
15139: POP
15140: POP
// for i := 1 to rand ( 3 , 4 ) do
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: DOUBLE
15147: LD_INT 1
15149: DEC
15150: ST_TO_ADDR
15151: LD_INT 3
15153: PPUSH
15154: LD_INT 4
15156: PPUSH
15157: CALL_OW 12
15161: PUSH
15162: FOR_TO
15163: IFFALSE 15255
// begin hc_sex := sex_male ;
15165: LD_ADDR_OWVAR 27
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// uc_side := 0 ;
15173: LD_ADDR_OWVAR 20
15177: PUSH
15178: LD_INT 0
15180: ST_TO_ADDR
// uc_nation := nation_nature ;
15181: LD_ADDR_OWVAR 21
15185: PUSH
15186: LD_INT 0
15188: ST_TO_ADDR
// hc_class := 18 ;
15189: LD_ADDR_OWVAR 28
15193: PUSH
15194: LD_INT 18
15196: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15197: LD_ADDR_OWVAR 31
15201: PUSH
15202: LD_INT 0
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
// hc_agressivity := 0 ;
15220: LD_ADDR_OWVAR 35
15224: PUSH
15225: LD_INT 0
15227: ST_TO_ADDR
// un := CreateHuman ;
15228: LD_ADDR_VAR 0 3
15232: PUSH
15233: CALL_OW 44
15237: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15238: LD_VAR 0 3
15242: PPUSH
15243: LD_INT 23
15245: PPUSH
15246: LD_INT 0
15248: PPUSH
15249: CALL_OW 49
// end ;
15253: GO 15162
15255: POP
15256: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: DOUBLE
15263: LD_INT 1
15265: DEC
15266: ST_TO_ADDR
15267: LD_INT 4
15269: PUSH
15270: LD_INT 3
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: LD_INT 3
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: PUSH
15285: LD_OWVAR 67
15289: ARRAY
15290: PUSH
15291: FOR_TO
15292: IFFALSE 15401
// begin hc_sex := sex_male ;
15294: LD_ADDR_OWVAR 27
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// uc_side := 0 ;
15302: LD_ADDR_OWVAR 20
15306: PUSH
15307: LD_INT 0
15309: ST_TO_ADDR
// uc_nation := nation_nature ;
15310: LD_ADDR_OWVAR 21
15314: PUSH
15315: LD_INT 0
15317: ST_TO_ADDR
// hc_class := class_apeman ;
15318: LD_ADDR_OWVAR 28
15322: PUSH
15323: LD_INT 12
15325: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15326: LD_ADDR_OWVAR 31
15330: PUSH
15331: LD_INT 0
15333: PPUSH
15334: LD_INT 2
15336: PPUSH
15337: CALL_OW 12
15341: PUSH
15342: LD_INT 0
15344: PUSH
15345: LD_INT 0
15347: PUSH
15348: LD_INT 0
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15357: LD_ADDR_OWVAR 35
15361: PUSH
15362: LD_INT 10
15364: NEG
15365: PPUSH
15366: LD_INT 10
15368: PPUSH
15369: CALL_OW 12
15373: ST_TO_ADDR
// un := CreateHuman ;
15374: LD_ADDR_VAR 0 3
15378: PUSH
15379: CALL_OW 44
15383: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15384: LD_VAR 0 3
15388: PPUSH
15389: LD_INT 26
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// end ;
15399: GO 15291
15401: POP
15402: POP
// end ; end_of_file
15403: LD_VAR 0 1
15407: RET
// on UnitDestroyed ( unit ) do var i ;
15408: LD_INT 0
15410: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15411: LD_VAR 0 1
15415: PPUSH
15416: CALL 33548 0 1
// if unit = JMM then
15420: LD_VAR 0 1
15424: PUSH
15425: LD_EXP 1
15429: EQUAL
15430: IFFALSE 15439
// YouLost ( JMM ) ;
15432: LD_STRING JMM
15434: PPUSH
15435: CALL_OW 104
// if unit in russianTanks then
15439: LD_VAR 0 1
15443: PUSH
15444: LD_EXP 32
15448: IN
15449: IFFALSE 15467
// russianTanks := russianTanks diff unit ;
15451: LD_ADDR_EXP 32
15455: PUSH
15456: LD_EXP 32
15460: PUSH
15461: LD_VAR 0 1
15465: DIFF
15466: ST_TO_ADDR
// if unit in russianTimeLapsers then
15467: LD_VAR 0 1
15471: PUSH
15472: LD_EXP 33
15476: IN
15477: IFFALSE 15495
// russianTimeLapsers := russianTimeLapsers diff unit ;
15479: LD_ADDR_EXP 33
15483: PUSH
15484: LD_EXP 33
15488: PUSH
15489: LD_VAR 0 1
15493: DIFF
15494: ST_TO_ADDR
// if unit in RuScientists then
15495: LD_VAR 0 1
15499: PUSH
15500: LD_EXP 27
15504: IN
15505: IFFALSE 15537
// begin RuScientists := RuScientists diff unit ;
15507: LD_ADDR_EXP 27
15511: PUSH
15512: LD_EXP 27
15516: PUSH
15517: LD_VAR 0 1
15521: DIFF
15522: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15523: LD_ADDR_EXP 28
15527: PUSH
15528: LD_EXP 28
15532: PUSH
15533: LD_INT 1
15535: PLUS
15536: ST_TO_ADDR
// end ; end ;
15537: PPOPN 2
15539: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15540: LD_VAR 0 3
15544: PPUSH
15545: CALL_OW 264
15549: PUSH
15550: LD_INT 9
15552: EQUAL
15553: IFFALSE 15569
// laserCounterDestroy := laserCounterDestroy + 1 ;
15555: LD_ADDR_EXP 43
15559: PUSH
15560: LD_EXP 43
15564: PUSH
15565: LD_INT 1
15567: PLUS
15568: ST_TO_ADDR
// end ;
15569: PPOPN 3
15571: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15572: LD_VAR 0 2
15576: PUSH
15577: LD_INT 22
15579: PUSH
15580: LD_INT 6
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: IN
15592: IFFALSE 15647
// begin if GetType ( human ) = unit_vehicle then
15594: LD_VAR 0 2
15598: PPUSH
15599: CALL_OW 247
15603: PUSH
15604: LD_INT 2
15606: EQUAL
15607: IFFALSE 15624
// human := IsDrivenBy ( human ) ;
15609: LD_ADDR_VAR 0 2
15613: PUSH
15614: LD_VAR 0 2
15618: PPUSH
15619: CALL_OW 311
15623: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15624: LD_VAR 0 2
15628: PPUSH
15629: LD_VAR 0 2
15633: PPUSH
15634: CALL_OW 110
15638: PUSH
15639: LD_INT 10
15641: PLUS
15642: PPUSH
15643: CALL_OW 109
// end ; if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15647: LD_VAR 0 1
15651: PUSH
15652: LD_INT 10
15654: EQUAL
15655: PUSH
15656: LD_VAR 0 2
15660: PPUSH
15661: CALL_OW 255
15665: PUSH
15666: LD_INT 1
15668: EQUAL
15669: AND
15670: PUSH
15671: LD_EXP 40
15675: PUSH
15676: LD_INT 0
15678: EQUAL
15679: AND
15680: IFFALSE 15792
// begin eventVar1 = 1 ;
15682: LD_ADDR_EXP 40
15686: PUSH
15687: LD_INT 1
15689: ST_TO_ADDR
// teleportExplored = 1 ;
15690: LD_ADDR_EXP 26
15694: PUSH
15695: LD_INT 1
15697: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15698: LD_STRING M2a
15700: PPUSH
15701: CALL_OW 337
// wait ( 0 0$2 ) ;
15705: LD_INT 70
15707: PPUSH
15708: CALL_OW 67
// DialogueOn ;
15712: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15716: LD_INT 22
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 21
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: PPUSH
15745: LD_STRING DT3a-Sol1-1
15747: PPUSH
15748: LD_STRING DT3a-FSol1-1
15750: PPUSH
15751: CALL 12129 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15755: LD_EXP 1
15759: PPUSH
15760: LD_STRING DT3a-JMM-1
15762: PPUSH
15763: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15767: LD_VAR 0 2
15771: PPUSH
15772: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15776: LD_EXP 1
15780: PPUSH
15781: LD_STRING DT3a-JMM-1a
15783: PPUSH
15784: CALL_OW 88
// DialogueOff ;
15788: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15792: LD_VAR 0 1
15796: PUSH
15797: LD_INT 10
15799: EQUAL
15800: PUSH
15801: LD_VAR 0 2
15805: PPUSH
15806: CALL_OW 247
15810: PUSH
15811: LD_INT 2
15813: EQUAL
15814: AND
15815: PUSH
15816: LD_VAR 0 2
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 3
15828: EQUAL
15829: AND
15830: IFFALSE 15896
// begin if vehicleTeleported = 0 then
15832: LD_EXP 21
15836: PUSH
15837: LD_INT 0
15839: EQUAL
15840: IFFALSE 15857
// begin wait ( 0 0$03 ) ;
15842: LD_INT 105
15844: PPUSH
15845: CALL_OW 67
// vehicleTeleported := 1 ;
15849: LD_ADDR_EXP 21
15853: PUSH
15854: LD_INT 1
15856: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15857: LD_EXP 21
15861: PUSH
15862: LD_INT 2
15864: EQUAL
15865: IFFALSE 15882
// begin wait ( 0 0$03 ) ;
15867: LD_INT 105
15869: PPUSH
15870: CALL_OW 67
// vehicleTeleported := 3 ;
15874: LD_ADDR_EXP 21
15878: PUSH
15879: LD_INT 3
15881: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15882: LD_ADDR_EXP 22
15886: PUSH
15887: LD_EXP 22
15891: PUSH
15892: LD_INT 1
15894: PLUS
15895: ST_TO_ADDR
// end ; end ;
15896: PPOPN 2
15898: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL 33670 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 264
15922: PUSH
15923: LD_INT 7
15925: EQUAL
15926: IFFALSE 15936
// rocketBuilded := true ;
15928: LD_ADDR_EXP 44
15932: PUSH
15933: LD_INT 1
15935: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 255
15945: PUSH
15946: LD_INT 3
15948: NONEQUAL
15949: IFFALSE 15953
// exit ;
15951: GO 16072
// if factory in [ ru_fact , rufab2 ] then
15953: LD_VAR 0 2
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 112
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: IN
15968: IFFALSE 16072
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
15970: LD_VAR 0 1
15974: PPUSH
15975: CALL_OW 264
15979: PUSH
15980: LD_INT 49
15982: EQUAL
15983: IFFALSE 16019
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
15985: LD_ADDR_EXP 33
15989: PUSH
15990: LD_EXP 33
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL 74869 0 2
16004: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16005: LD_VAR 0 1
16009: PPUSH
16010: LD_INT 137
16012: PPUSH
16013: CALL_OW 120
// end else
16017: GO 16072
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 264
16028: PUSH
16029: LD_INT 51
16031: PUSH
16032: LD_EXP 46
16036: PUSH
16037: LD_INT 52
16039: PUSH
16040: LD_INT 53
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: IN
16049: NOT
16050: IFFALSE 16072
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16052: LD_ADDR_EXP 32
16056: PUSH
16057: LD_EXP 32
16061: PPUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL 74869 0 2
16071: ST_TO_ADDR
// end ; end ; end ;
16072: PPOPN 2
16074: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16075: LD_INT 0
16077: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 255
16087: PUSH
16088: LD_INT 3
16090: EQUAL
16091: PUSH
16092: LD_VAR 0 2
16096: PPUSH
16097: CALL_OW 257
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: AND
16106: PUSH
16107: LD_INT 21
16109: PPUSH
16110: CALL_OW 255
16114: PUSH
16115: LD_INT 3
16117: EQUAL
16118: AND
16119: PUSH
16120: LD_INT 21
16122: PPUSH
16123: CALL_OW 302
16127: AND
16128: IFFALSE 16142
// ComEnterUnit ( human , ru_fact ) ;
16130: LD_VAR 0 2
16134: PPUSH
16135: LD_INT 21
16137: PPUSH
16138: CALL_OW 120
// end ;
16142: PPOPN 3
16144: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16145: LD_VAR 0 1
16149: PPUSH
16150: CALL 33654 0 1
// end ; end_of_file
16154: PPOPN 1
16156: END
// every 0 0$1 trigger ruAI = 1 do
16157: LD_EXP 34
16161: PUSH
16162: LD_INT 1
16164: EQUAL
16165: IFFALSE 16277
16167: GO 16169
16169: DISABLE
// begin enable ;
16170: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16171: LD_INT 3
16173: PPUSH
16174: LD_INT 6
16176: PPUSH
16177: LD_INT 9
16179: PPUSH
16180: LD_EXP 31
16184: PPUSH
16185: CALL 12979 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16189: LD_INT 3
16191: PPUSH
16192: LD_INT 4
16194: PPUSH
16195: LD_INT 10
16197: PPUSH
16198: LD_EXP 31
16202: PPUSH
16203: CALL 12979 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16207: LD_INT 3
16209: PPUSH
16210: LD_INT 9
16212: PPUSH
16213: CALL 13814 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16217: LD_INT 3
16219: PPUSH
16220: LD_INT 10
16222: PPUSH
16223: CALL 13814 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16227: LD_INT 3
16229: PPUSH
16230: LD_INT 16
16232: PPUSH
16233: LD_INT 9
16235: PPUSH
16236: LD_INT 91
16238: PPUSH
16239: CALL 13346 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16243: LD_INT 3
16245: PPUSH
16246: LD_INT 17
16248: PPUSH
16249: LD_INT 10
16251: PPUSH
16252: LD_INT 47
16254: PUSH
16255: LD_INT 129
16257: PUSH
16258: LD_INT 135
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL 13346 0 4
// IntBazooka ( 3 ) ;
16270: LD_INT 3
16272: PPUSH
16273: CALL 14141 0 1
// end ;
16277: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16278: LD_EXP 32
16282: PUSH
16283: LD_INT 3
16285: PUSH
16286: LD_INT 4
16288: PUSH
16289: LD_INT 5
16291: PUSH
16292: LD_INT 6
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: PUSH
16301: LD_OWVAR 67
16305: ARRAY
16306: GREATEREQUAL
16307: IFFALSE 16833
16309: GO 16311
16311: DISABLE
16312: LD_INT 0
16314: PPUSH
16315: PPUSH
16316: PPUSH
16317: PPUSH
// begin enable ;
16318: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_EXP 32
16328: PUSH
16329: LD_EXP 33
16333: UNION
16334: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16335: LD_ADDR_EXP 32
16339: PUSH
16340: LD_EXP 32
16344: PUSH
16345: LD_VAR 0 2
16349: DIFF
16350: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16351: LD_ADDR_EXP 33
16355: PUSH
16356: LD_EXP 33
16360: PUSH
16361: LD_VAR 0 2
16365: DIFF
16366: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16367: LD_EXP 21
16371: PUSH
16372: LD_INT 4
16374: GREATEREQUAL
16375: IFFALSE 16393
// attackTactic := rand ( 1 , 2 ) ;
16377: LD_ADDR_EXP 36
16381: PUSH
16382: LD_INT 1
16384: PPUSH
16385: LD_INT 2
16387: PPUSH
16388: CALL_OW 12
16392: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16393: LD_INT 10
16395: PPUSH
16396: CALL_OW 302
16400: IFFALSE 16483
// begin for j in tmp do
16402: LD_ADDR_VAR 0 1
16406: PUSH
16407: LD_VAR 0 2
16411: PUSH
16412: FOR_IN
16413: IFFALSE 16456
// if attackTactic < 2 then
16415: LD_EXP 36
16419: PUSH
16420: LD_INT 2
16422: LESS
16423: IFFALSE 16439
// ComEnterUnit ( j , ruteleprt ) else
16425: LD_VAR 0 1
16429: PPUSH
16430: LD_INT 10
16432: PPUSH
16433: CALL_OW 120
16437: GO 16454
// ComMoveXY ( j , 88 , 69 ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: LD_INT 88
16446: PPUSH
16447: LD_INT 69
16449: PPUSH
16450: CALL_OW 111
16454: GO 16412
16456: POP
16457: POP
// repeat wait ( 0 0$1 ) ;
16458: LD_INT 35
16460: PPUSH
16461: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
16465: LD_VAR 0 2
16469: PPUSH
16470: LD_INT 60
16472: PUSH
16473: EMPTY
16474: LIST
16475: PPUSH
16476: CALL_OW 72
16480: NOT
16481: IFFALSE 16458
// end ; repeat wait ( 0 0$1 ) ;
16483: LD_INT 35
16485: PPUSH
16486: CALL_OW 67
// for j in tmp do
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: LD_VAR 0 2
16499: PUSH
16500: FOR_IN
16501: IFFALSE 16824
// begin if IsDead ( j ) then
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 301
16512: IFFALSE 16530
// tmp := tmp diff j ;
16514: LD_ADDR_VAR 0 2
16518: PUSH
16519: LD_VAR 0 2
16523: PUSH
16524: LD_VAR 0 1
16528: DIFF
16529: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
16530: LD_ADDR_VAR 0 3
16534: PUSH
16535: LD_INT 81
16537: PUSH
16538: LD_INT 3
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: PPUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 74
16559: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
16560: LD_ADDR_VAR 0 4
16564: PUSH
16565: LD_INT 81
16567: PUSH
16568: LD_INT 3
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 21
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: EMPTY
16590: LIST
16591: PPUSH
16592: CALL_OW 69
16596: PPUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 74
16606: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 264
16616: PUSH
16617: LD_INT 49
16619: EQUAL
16620: IFFALSE 16756
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
16622: LD_VAR 0 2
16626: PPUSH
16627: LD_INT 3
16629: PUSH
16630: LD_INT 34
16632: PUSH
16633: LD_INT 49
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PPUSH
16644: CALL_OW 72
16648: PUSH
16649: LD_INT 1
16651: GREATER
16652: PUSH
16653: LD_VAR 0 2
16657: PPUSH
16658: LD_INT 3
16660: PUSH
16661: LD_INT 34
16663: PUSH
16664: LD_INT 49
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PPUSH
16675: CALL_OW 72
16679: AND
16680: IFFALSE 16730
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
16682: LD_VAR 0 1
16686: PPUSH
16687: LD_VAR 0 2
16691: PPUSH
16692: LD_INT 3
16694: PUSH
16695: LD_INT 34
16697: PUSH
16698: LD_INT 49
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 72
16713: PPUSH
16714: LD_VAR 0 1
16718: PPUSH
16719: CALL_OW 74
16723: PPUSH
16724: CALL_OW 112
16728: GO 16754
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_VAR 0 3
16739: PPUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: CALL_OW 74
16749: PPUSH
16750: CALL_OW 112
// end else
16754: GO 16822
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
16756: LD_VAR 0 1
16760: PPUSH
16761: LD_VAR 0 4
16765: PPUSH
16766: CALL_OW 296
16770: PUSH
16771: LD_VAR 0 1
16775: PPUSH
16776: LD_VAR 0 3
16780: PPUSH
16781: CALL_OW 296
16785: PUSH
16786: LD_INT 2
16788: PLUS
16789: LESS
16790: IFFALSE 16808
// ComAttackUnit ( j , target2 ) else
16792: LD_VAR 0 1
16796: PPUSH
16797: LD_VAR 0 4
16801: PPUSH
16802: CALL_OW 115
16806: GO 16822
// ComAttackUnit ( j , target1 ) ;
16808: LD_VAR 0 1
16812: PPUSH
16813: LD_VAR 0 3
16817: PPUSH
16818: CALL_OW 115
// end ; end ;
16822: GO 16500
16824: POP
16825: POP
// until not tmp ;
16826: LD_VAR 0 2
16830: NOT
16831: IFFALSE 16483
// end ;
16833: PPOPN 4
16835: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16836: LD_INT 4
16838: PPUSH
16839: CALL_OW 303
16843: IFFALSE 16858
16845: GO 16847
16847: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16848: LD_INT 3
16850: PPUSH
16851: LD_INT 4
16853: PPUSH
16854: CALL 14769 0 2
16858: END
// every 0 0$1 do
16859: GO 16861
16861: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16862: LD_INT 3
16864: PPUSH
16865: LD_INT 91
16867: PPUSH
16868: LD_INT 3
16870: PPUSH
16871: CALL 12744 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16875: LD_INT 3
16877: PPUSH
16878: LD_INT 47
16880: PPUSH
16881: LD_INT 3
16883: PPUSH
16884: CALL 12744 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16888: LD_INT 3
16890: PPUSH
16891: LD_INT 129
16893: PPUSH
16894: LD_INT 3
16896: PPUSH
16897: CALL 12744 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16901: LD_INT 3
16903: PPUSH
16904: LD_INT 3
16906: PPUSH
16907: LD_INT 3
16909: PPUSH
16910: CALL 12744 0 3
// end ;
16914: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16915: LD_INT 22
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 21
16927: PUSH
16928: LD_INT 3
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: IFFALSE 17012
16945: GO 16947
16947: DISABLE
// begin wait ( 0 0$40 ) ;
16948: LD_INT 1400
16950: PPUSH
16951: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16955: LD_INT 3
16957: PPUSH
16958: LD_INT 21
16960: PPUSH
16961: LD_INT 3
16963: PUSH
16964: LD_INT 4
16966: PUSH
16967: LD_INT 5
16969: PUSH
16970: LD_INT 6
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PUSH
16979: LD_OWVAR 67
16983: ARRAY
16984: PPUSH
16985: LD_INT 46
16987: PUSH
16988: LD_INT 45
16990: PUSH
16991: LD_INT 44
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: PPUSH
16999: LD_INT 3
17001: PPUSH
17002: LD_INT 3
17004: PPUSH
17005: LD_INT 24
17007: PPUSH
17008: CALL 13994 0 7
// end ;
17012: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17013: LD_EXP 20
17017: PUSH
17018: LD_INT 2
17020: EQUAL
17021: PUSH
17022: LD_INT 21
17024: PPUSH
17025: CALL_OW 255
17029: PUSH
17030: LD_INT 3
17032: EQUAL
17033: AND
17034: PUSH
17035: LD_INT 112
17037: PPUSH
17038: CALL_OW 255
17042: PUSH
17043: LD_INT 3
17045: EQUAL
17046: AND
17047: PUSH
17048: LD_INT 21
17050: PPUSH
17051: CALL_OW 302
17055: AND
17056: PUSH
17057: LD_INT 112
17059: PPUSH
17060: CALL_OW 302
17064: AND
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_INT 3
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 21
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 50
17088: PUSH
17089: EMPTY
17090: LIST
17091: PUSH
17092: LD_INT 3
17094: PUSH
17095: LD_INT 58
17097: PUSH
17098: EMPTY
17099: LIST
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: PPUSH
17111: CALL_OW 69
17115: PUSH
17116: LD_INT 18
17118: PPUSH
17119: LD_INT 22
17121: PUSH
17122: LD_INT 3
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 21
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PPUSH
17143: CALL_OW 70
17147: PUSH
17148: LD_INT 0
17150: EQUAL
17151: DIFF
17152: AND
17153: IFFALSE 17279
17155: GO 17157
17157: DISABLE
// begin enable ;
17158: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17159: LD_INT 3
17161: PPUSH
17162: LD_INT 21
17164: PPUSH
17165: LD_INT 3
17167: PUSH
17168: LD_INT 4
17170: PUSH
17171: LD_INT 5
17173: PUSH
17174: LD_INT 6
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: LD_OWVAR 67
17187: ARRAY
17188: PPUSH
17189: LD_INT 46
17191: PUSH
17192: LD_INT 45
17194: PUSH
17195: LD_INT 44
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 3
17205: PPUSH
17206: LD_INT 3
17208: PPUSH
17209: LD_INT 24
17211: PPUSH
17212: CALL 13994 0 7
// if russianTimeLapsers = 0 then
17216: LD_EXP 33
17220: PUSH
17221: LD_INT 0
17223: EQUAL
17224: IFFALSE 17279
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17226: LD_INT 3
17228: PPUSH
17229: LD_INT 112
17231: PPUSH
17232: LD_INT 1
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: LD_INT 2
17240: PUSH
17241: LD_INT 2
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: PUSH
17250: LD_OWVAR 67
17254: ARRAY
17255: PPUSH
17256: LD_INT 49
17258: PUSH
17259: LD_INT 49
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: LD_INT 3
17268: PPUSH
17269: LD_INT 3
17271: PPUSH
17272: LD_INT 24
17274: PPUSH
17275: CALL 13994 0 7
// end ;
17279: END
// every 0 0$1 trigger arabianMines do var i ;
17280: LD_EXP 37
17284: IFFALSE 17405
17286: GO 17288
17288: DISABLE
17289: LD_INT 0
17291: PPUSH
// begin enable ;
17292: ENABLE
// for i in arabianMines do
17293: LD_ADDR_VAR 0 1
17297: PUSH
17298: LD_EXP 37
17302: PUSH
17303: FOR_IN
17304: IFFALSE 17403
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17306: LD_INT 22
17308: PUSH
17309: LD_INT 1
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 92
17318: PUSH
17319: LD_VAR 0 1
17323: PUSH
17324: LD_INT 1
17326: ARRAY
17327: PUSH
17328: LD_VAR 0 1
17332: PUSH
17333: LD_INT 2
17335: ARRAY
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PPUSH
17350: CALL_OW 69
17354: IFFALSE 17401
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17356: LD_VAR 0 1
17360: PUSH
17361: LD_INT 1
17363: ARRAY
17364: PPUSH
17365: LD_VAR 0 1
17369: PUSH
17370: LD_INT 2
17372: ARRAY
17373: PPUSH
17374: LD_INT 5
17376: PPUSH
17377: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17381: LD_ADDR_EXP 37
17385: PUSH
17386: LD_EXP 37
17390: PPUSH
17391: LD_VAR 0 1
17395: PPUSH
17396: CALL_OW 3
17400: ST_TO_ADDR
// end ; end ;
17401: GO 17303
17403: POP
17404: POP
// end ;
17405: PPOPN 1
17407: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17408: LD_EXP 21
17412: PUSH
17413: LD_INT 4
17415: GREATEREQUAL
17416: PUSH
17417: LD_EXP 22
17421: PUSH
17422: LD_INT 12
17424: MOD
17425: PUSH
17426: LD_INT 0
17428: EQUAL
17429: AND
17430: IFFALSE 17544
17432: GO 17434
17434: DISABLE
17435: LD_INT 0
17437: PPUSH
17438: PPUSH
// begin enable ;
17439: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17440: LD_ADDR_VAR 0 2
17444: PUSH
17445: LD_INT 122
17447: PUSH
17448: LD_INT 142
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 101
17457: PUSH
17458: LD_INT 127
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 104
17467: PUSH
17468: LD_INT 104
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 46
17477: PUSH
17478: LD_INT 81
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_INT 4
17501: PPUSH
17502: CALL_OW 12
17506: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17507: LD_INT 10
17509: PPUSH
17510: LD_VAR 0 2
17514: PUSH
17515: LD_VAR 0 1
17519: ARRAY
17520: PUSH
17521: LD_INT 1
17523: ARRAY
17524: PPUSH
17525: LD_VAR 0 2
17529: PUSH
17530: LD_VAR 0 1
17534: ARRAY
17535: PUSH
17536: LD_INT 2
17538: ARRAY
17539: PPUSH
17540: CALL_OW 243
// end ; end_of_file
17544: PPOPN 2
17546: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17547: LD_INT 3
17549: PPUSH
17550: CALL_OW 301
17554: IFFALSE 17751
17556: GO 17558
17558: DISABLE
// begin DialogueOn ;
17559: CALL_OW 6
// if sciCounter = 0 then
17563: LD_EXP 28
17567: PUSH
17568: LD_INT 0
17570: EQUAL
17571: IFFALSE 17599
// begin Say ( JMM , D7a-JMM-1 ) ;
17573: LD_EXP 1
17577: PPUSH
17578: LD_STRING D7a-JMM-1
17580: PPUSH
17581: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17585: LD_EXP 15
17589: PPUSH
17590: LD_STRING D7a-Pow-1
17592: PPUSH
17593: CALL_OW 94
// end else
17597: GO 17743
// if sciCounter < 6 then
17599: LD_EXP 28
17603: PUSH
17604: LD_INT 6
17606: LESS
17607: IFFALSE 17635
// begin Say ( JMM , D7b-JMM-1 ) ;
17609: LD_EXP 1
17613: PPUSH
17614: LD_STRING D7b-JMM-1
17616: PPUSH
17617: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17621: LD_EXP 15
17625: PPUSH
17626: LD_STRING D7b-Pow-1
17628: PPUSH
17629: CALL_OW 94
// end else
17633: GO 17743
// begin Say ( JMM , D7c-JMM-1 ) ;
17635: LD_EXP 1
17639: PPUSH
17640: LD_STRING D7c-JMM-1
17642: PPUSH
17643: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17647: LD_EXP 15
17651: PPUSH
17652: LD_STRING D7c-Pow-1
17654: PPUSH
17655: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17659: LD_EXP 1
17663: PPUSH
17664: LD_STRING D7d-JMM-1
17666: PPUSH
17667: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17671: LD_EXP 15
17675: PPUSH
17676: LD_STRING D7d-Pow-1
17678: PPUSH
17679: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17683: LD_EXP 1
17687: PPUSH
17688: LD_STRING D7d-JMM-2
17690: PPUSH
17691: CALL_OW 88
// if askSiberite = 1 then
17695: LD_EXP 25
17699: PUSH
17700: LD_INT 1
17702: EQUAL
17703: IFFALSE 17719
// Say ( JMM , D7d-JMM-2a ) else
17705: LD_EXP 1
17709: PPUSH
17710: LD_STRING D7d-JMM-2a
17712: PPUSH
17713: CALL_OW 88
17717: GO 17731
// SayRadio ( Powell , D7d-Pow-2 ) ;
17719: LD_EXP 15
17723: PPUSH
17724: LD_STRING D7d-Pow-2
17726: PPUSH
17727: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17731: LD_EXP 15
17735: PPUSH
17736: LD_STRING D7d-Pow-2a
17738: PPUSH
17739: CALL_OW 94
// end ; DialogueOff ;
17743: CALL_OW 7
// FinishMission ;
17747: CALL 17752 0 0
// end ;
17751: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17752: LD_INT 0
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
// m1 := false ;
17758: LD_ADDR_VAR 0 2
17762: PUSH
17763: LD_INT 0
17765: ST_TO_ADDR
// m2 := false ;
17766: LD_ADDR_VAR 0 3
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
// m3 := false ;
17774: LD_ADDR_VAR 0 4
17778: PUSH
17779: LD_INT 0
17781: ST_TO_ADDR
// if not westPathUsed then
17782: LD_EXP 42
17786: NOT
17787: IFFALSE 17796
// SetAchievement ( ACH_PATH ) ;
17789: LD_STRING ACH_PATH
17791: PPUSH
17792: CALL_OW 543
// if not rocketBuilded then
17796: LD_EXP 44
17800: NOT
17801: IFFALSE 17817
// begin wait ( 3 ) ;
17803: LD_INT 3
17805: PPUSH
17806: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17810: LD_STRING ACH_ROCKET
17812: PPUSH
17813: CALL_OW 543
// end ; if tick <= 40 40$00 then
17817: LD_OWVAR 1
17821: PUSH
17822: LD_INT 84000
17824: LESSEQUAL
17825: IFFALSE 17841
// begin wait ( 3 ) ;
17827: LD_INT 3
17829: PPUSH
17830: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17834: LD_STRING ACH_ASPEED_12
17836: PPUSH
17837: CALL_OW 543
// end ; if teleportExplored = 1 then
17841: LD_EXP 26
17845: PUSH
17846: LD_INT 1
17848: EQUAL
17849: IFFALSE 17871
// begin m1 := true ;
17851: LD_ADDR_VAR 0 2
17855: PUSH
17856: LD_INT 1
17858: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17859: LD_STRING Teleport
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 101
// end else
17869: GO 17882
// AddMedal ( Teleport , - 1 ) ;
17871: LD_STRING Teleport
17873: PPUSH
17874: LD_INT 1
17876: NEG
17877: PPUSH
17878: CALL_OW 101
// if sciCounter > 2 then
17882: LD_EXP 28
17886: PUSH
17887: LD_INT 2
17889: GREATER
17890: IFFALSE 17912
// begin m2 := true ;
17892: LD_ADDR_VAR 0 3
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17900: LD_STRING Materials
17902: PPUSH
17903: LD_INT 1
17905: PPUSH
17906: CALL_OW 101
// end else
17910: GO 17923
// AddMedal ( Materials , - 1 ) ;
17912: LD_STRING Materials
17914: PPUSH
17915: LD_INT 1
17917: NEG
17918: PPUSH
17919: CALL_OW 101
// if sciCounter >= 6 then
17923: LD_EXP 28
17927: PUSH
17928: LD_INT 6
17930: GREATEREQUAL
17931: IFFALSE 17963
// begin m3 := true ;
17933: LD_ADDR_VAR 0 4
17937: PUSH
17938: LD_INT 1
17940: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17941: LD_STRING Scientists
17943: PPUSH
17944: LD_INT 1
17946: PPUSH
17947: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17951: LD_INT 1
17953: PPUSH
17954: LD_STRING 12_SciDed_1
17956: PPUSH
17957: CALL_OW 39
// end else
17961: GO 17984
// begin AddMedal ( Scientists , - 1 ) ;
17963: LD_STRING Scientists
17965: PPUSH
17966: LD_INT 1
17968: NEG
17969: PPUSH
17970: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17974: LD_INT 0
17976: PPUSH
17977: LD_STRING 12_SciDed_1
17979: PPUSH
17980: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17984: LD_EXP 24
17988: PPUSH
17989: LD_STRING 12_MainDepositFake_1
17991: PPUSH
17992: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17996: LD_VAR 0 2
18000: PUSH
18001: LD_VAR 0 3
18005: AND
18006: PUSH
18007: LD_VAR 0 4
18011: AND
18012: PUSH
18013: LD_OWVAR 67
18017: PUSH
18018: LD_INT 3
18020: GREATEREQUAL
18021: AND
18022: IFFALSE 18034
// SetAchievementEX ( ACH_AMER , 12 ) ;
18024: LD_STRING ACH_AMER
18026: PPUSH
18027: LD_INT 12
18029: PPUSH
18030: CALL_OW 564
// GiveMedals ( MAIN ) ;
18034: LD_STRING MAIN
18036: PPUSH
18037: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18041: LD_INT 22
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 21
18053: PUSH
18054: LD_INT 1
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: PUSH
18064: LD_INT 25
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 25
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 25
18086: PUSH
18087: LD_INT 3
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 25
18096: PUSH
18097: LD_INT 4
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 25
18106: PUSH
18107: LD_INT 5
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 25
18116: PUSH
18117: LD_INT 8
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 69
18142: PPUSH
18143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18147: LD_EXP 1
18151: PPUSH
18152: LD_EXP 39
18156: PUSH
18157: LD_STRING JMM
18159: STR
18160: PPUSH
18161: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18165: LD_EXP 7
18169: PPUSH
18170: LD_EXP 39
18174: PUSH
18175: LD_STRING Brown
18177: STR
18178: PPUSH
18179: CALL 12089 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18183: LD_EXP 3
18187: PPUSH
18188: LD_EXP 39
18192: PUSH
18193: LD_STRING Donaldson
18195: STR
18196: PPUSH
18197: CALL 12089 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18201: LD_EXP 4
18205: PPUSH
18206: LD_EXP 39
18210: PUSH
18211: LD_STRING Bobby
18213: STR
18214: PPUSH
18215: CALL 12089 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18219: LD_EXP 5
18223: PPUSH
18224: LD_EXP 39
18228: PUSH
18229: LD_STRING Cyrus
18231: STR
18232: PPUSH
18233: CALL 12089 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18237: LD_EXP 2
18241: PPUSH
18242: LD_EXP 39
18246: PUSH
18247: LD_STRING Lisa
18249: STR
18250: PPUSH
18251: CALL 12089 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18255: LD_EXP 12
18259: PPUSH
18260: LD_EXP 39
18264: PUSH
18265: LD_STRING Frank
18267: STR
18268: PPUSH
18269: CALL 12089 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18273: LD_EXP 13
18277: PPUSH
18278: LD_EXP 39
18282: PUSH
18283: LD_STRING Kikuchi
18285: STR
18286: PPUSH
18287: CALL 12089 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18291: LD_EXP 9
18295: PPUSH
18296: LD_EXP 39
18300: PUSH
18301: LD_STRING Houten
18303: STR
18304: PPUSH
18305: CALL 12089 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18309: LD_EXP 11
18313: PPUSH
18314: LD_EXP 39
18318: PUSH
18319: LD_STRING Gary
18321: STR
18322: PPUSH
18323: CALL 12089 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18327: LD_EXP 10
18331: PPUSH
18332: LD_EXP 39
18336: PUSH
18337: LD_STRING Cornell
18339: STR
18340: PPUSH
18341: CALL 12089 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18345: LD_EXP 6
18349: PPUSH
18350: LD_EXP 39
18354: PUSH
18355: LD_STRING Denis
18357: STR
18358: PPUSH
18359: CALL 12089 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18363: LD_EXP 8
18367: PPUSH
18368: LD_EXP 39
18372: PUSH
18373: LD_STRING Gladstone
18375: STR
18376: PPUSH
18377: CALL 12089 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18381: LD_INT 22
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 23
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 21
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 25
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 25
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 25
18436: PUSH
18437: LD_INT 3
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 25
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 25
18456: PUSH
18457: LD_INT 5
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 25
18466: PUSH
18467: LD_INT 8
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: PUSH
18494: LD_EXP 1
18498: PUSH
18499: LD_EXP 7
18503: PUSH
18504: LD_EXP 3
18508: PUSH
18509: LD_EXP 4
18513: PUSH
18514: LD_EXP 5
18518: PUSH
18519: LD_EXP 2
18523: PUSH
18524: LD_EXP 12
18528: PUSH
18529: LD_EXP 8
18533: PUSH
18534: LD_EXP 13
18538: PUSH
18539: LD_EXP 6
18543: PUSH
18544: LD_EXP 9
18548: PUSH
18549: LD_EXP 11
18553: PUSH
18554: LD_EXP 10
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: DIFF
18574: PPUSH
18575: LD_STRING 12_other_survivors
18577: PPUSH
18578: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18582: LD_INT 22
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 23
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 21
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 25
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 25
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 25
18637: PUSH
18638: LD_INT 3
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 25
18647: PUSH
18648: LD_INT 4
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 5
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 25
18667: PUSH
18668: LD_INT 8
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 69
18694: PPUSH
18695: LD_STRING 12_kurt_squad
18697: PPUSH
18698: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18702: LD_EXP 14
18706: PPUSH
18707: LD_STRING 12_others
18709: PPUSH
18710: CALL_OW 38
// YouWin ;
18714: CALL_OW 103
// end ; end_of_file
18718: LD_VAR 0 1
18722: RET
// every 0 0$01 trigger ruAI do
18723: LD_EXP 34
18727: IFFALSE 19037
18729: GO 18731
18731: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18732: LD_INT 280
18734: PPUSH
18735: CALL_OW 67
// if cratesSpawned < 12 then
18739: LD_EXP 38
18743: PUSH
18744: LD_INT 12
18746: LESS
18747: IFFALSE 18799
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18749: LD_INT 105
18751: PPUSH
18752: LD_INT 350
18754: PPUSH
18755: CALL_OW 12
18759: PPUSH
18760: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18764: LD_INT 3
18766: PPUSH
18767: LD_INT 5
18769: PPUSH
18770: CALL_OW 12
18774: PPUSH
18775: LD_INT 21
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18785: LD_ADDR_EXP 38
18789: PUSH
18790: LD_EXP 38
18794: PUSH
18795: LD_INT 1
18797: PLUS
18798: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18799: LD_EXP 38
18803: PUSH
18804: LD_INT 12
18806: GREATEREQUAL
18807: PUSH
18808: LD_EXP 38
18812: PUSH
18813: LD_INT 32
18815: LESS
18816: AND
18817: IFFALSE 18869
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18819: LD_INT 420
18821: PPUSH
18822: LD_INT 700
18824: PPUSH
18825: CALL_OW 12
18829: PPUSH
18830: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18834: LD_INT 3
18836: PPUSH
18837: LD_INT 5
18839: PPUSH
18840: CALL_OW 12
18844: PPUSH
18845: LD_INT 21
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18855: LD_ADDR_EXP 38
18859: PUSH
18860: LD_EXP 38
18864: PUSH
18865: LD_INT 1
18867: PLUS
18868: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18869: LD_EXP 38
18873: PUSH
18874: LD_INT 32
18876: GREATEREQUAL
18877: IFFALSE 18951
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18879: LD_INT 21
18881: PPUSH
18882: CALL_OW 435
18886: PUSH
18887: LD_INT 14
18889: LESS
18890: IFFALSE 18901
// wait ( 0 0$10 ) else
18892: LD_INT 350
18894: PPUSH
18895: CALL_OW 67
18899: GO 18916
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18901: LD_INT 1750
18903: PPUSH
18904: LD_INT 3150
18906: PPUSH
18907: CALL_OW 12
18911: PPUSH
18912: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18916: LD_INT 2
18918: PPUSH
18919: LD_INT 5
18921: PPUSH
18922: CALL_OW 12
18926: PPUSH
18927: LD_INT 21
18929: PPUSH
18930: LD_INT 1
18932: PPUSH
18933: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18937: LD_ADDR_EXP 38
18941: PUSH
18942: LD_EXP 38
18946: PUSH
18947: LD_INT 1
18949: PLUS
18950: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18951: LD_EXP 38
18955: PUSH
18956: LD_INT 110
18958: GREATEREQUAL
18959: IFFALSE 19033
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18961: LD_INT 21
18963: PPUSH
18964: CALL_OW 435
18968: PUSH
18969: LD_INT 14
18971: LESS
18972: IFFALSE 18983
// wait ( 0 0$20 ) else
18974: LD_INT 700
18976: PPUSH
18977: CALL_OW 67
18981: GO 18998
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18983: LD_INT 2450
18985: PPUSH
18986: LD_INT 3850
18988: PPUSH
18989: CALL_OW 12
18993: PPUSH
18994: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18998: LD_INT 1
19000: PPUSH
19001: LD_INT 5
19003: PPUSH
19004: CALL_OW 12
19008: PPUSH
19009: LD_INT 21
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19019: LD_ADDR_EXP 38
19023: PUSH
19024: LD_EXP 38
19028: PUSH
19029: LD_INT 1
19031: PLUS
19032: ST_TO_ADDR
// end ; until false ;
19033: LD_INT 0
19035: IFFALSE 18732
// end ; end_of_file
19037: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19038: LD_INT 0
19040: PPUSH
// ar_miner := 81 ;
19041: LD_ADDR_EXP 52
19045: PUSH
19046: LD_INT 81
19048: ST_TO_ADDR
// ar_crane := 88 ;
19049: LD_ADDR_EXP 51
19053: PUSH
19054: LD_INT 88
19056: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19057: LD_ADDR_EXP 46
19061: PUSH
19062: LD_INT 89
19064: ST_TO_ADDR
// us_hack := 99 ;
19065: LD_ADDR_EXP 47
19069: PUSH
19070: LD_INT 99
19072: ST_TO_ADDR
// us_artillery := 97 ;
19073: LD_ADDR_EXP 48
19077: PUSH
19078: LD_INT 97
19080: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19081: LD_ADDR_EXP 49
19085: PUSH
19086: LD_INT 91
19088: ST_TO_ADDR
// ar_mortar := 92 ;
19089: LD_ADDR_EXP 50
19093: PUSH
19094: LD_INT 92
19096: ST_TO_ADDR
// ru_flamethrower := 93 ;
19097: LD_ADDR_EXP 53
19101: PUSH
19102: LD_INT 93
19104: ST_TO_ADDR
// ru_radar := 98 ;
19105: LD_ADDR_EXP 45
19109: PUSH
19110: LD_INT 98
19112: ST_TO_ADDR
// tech_Artillery := 80 ;
19113: LD_ADDR_EXP 54
19117: PUSH
19118: LD_INT 80
19120: ST_TO_ADDR
// tech_RadMat := 81 ;
19121: LD_ADDR_EXP 55
19125: PUSH
19126: LD_INT 81
19128: ST_TO_ADDR
// tech_BasicTools := 82 ;
19129: LD_ADDR_EXP 56
19133: PUSH
19134: LD_INT 82
19136: ST_TO_ADDR
// tech_Cargo := 83 ;
19137: LD_ADDR_EXP 57
19141: PUSH
19142: LD_INT 83
19144: ST_TO_ADDR
// tech_Track := 84 ;
19145: LD_ADDR_EXP 58
19149: PUSH
19150: LD_INT 84
19152: ST_TO_ADDR
// tech_Crane := 85 ;
19153: LD_ADDR_EXP 59
19157: PUSH
19158: LD_INT 85
19160: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19161: LD_ADDR_EXP 60
19165: PUSH
19166: LD_INT 86
19168: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19169: LD_ADDR_EXP 61
19173: PUSH
19174: LD_INT 87
19176: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19177: LD_ADDR_EXP 62
19181: PUSH
19182: LD_INT 88
19184: ST_TO_ADDR
// class_mastodont := 31 ;
19185: LD_ADDR_EXP 63
19189: PUSH
19190: LD_INT 31
19192: ST_TO_ADDR
// class_horse := 21 ;
19193: LD_ADDR_EXP 64
19197: PUSH
19198: LD_INT 21
19200: ST_TO_ADDR
// end ;
19201: LD_VAR 0 1
19205: RET
// every 1 do
19206: GO 19208
19208: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19209: CALL 19038 0 0
19213: END
// every 0 0$1 do
19214: GO 19216
19216: DISABLE
// begin enable ;
19217: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19218: LD_STRING updateTimer(
19220: PUSH
19221: LD_OWVAR 1
19225: STR
19226: PUSH
19227: LD_STRING );
19229: STR
19230: PPUSH
19231: CALL_OW 559
// end ;
19235: END
// export function SOS_MapStart ( ) ; begin
19236: LD_INT 0
19238: PPUSH
// if streamModeActive then
19239: LD_EXP 65
19243: IFFALSE 19252
// DefineStreamItems ( true ) ;
19245: LD_INT 1
19247: PPUSH
19248: CALL 20902 0 1
// UpdateFactoryWaypoints ( ) ;
19252: CALL 34486 0 0
// end ;
19256: LD_VAR 0 1
19260: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19261: LD_INT 0
19263: PPUSH
// if p2 = 100 then
19264: LD_VAR 0 2
19268: PUSH
19269: LD_INT 100
19271: EQUAL
19272: IFFALSE 20275
// begin if not StreamModeActive then
19274: LD_EXP 65
19278: NOT
19279: IFFALSE 19289
// StreamModeActive := true ;
19281: LD_ADDR_EXP 65
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 0 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 0
19296: EQUAL
19297: IFFALSE 19303
// InitStreamMode ;
19299: CALL 20438 0 0
// if p3 = 1 then
19303: LD_VAR 0 3
19307: PUSH
19308: LD_INT 1
19310: EQUAL
19311: IFFALSE 19321
// sRocket := true ;
19313: LD_ADDR_EXP 70
19317: PUSH
19318: LD_INT 1
19320: ST_TO_ADDR
// if p3 = 2 then
19321: LD_VAR 0 3
19325: PUSH
19326: LD_INT 2
19328: EQUAL
19329: IFFALSE 19339
// sSpeed := true ;
19331: LD_ADDR_EXP 69
19335: PUSH
19336: LD_INT 1
19338: ST_TO_ADDR
// if p3 = 3 then
19339: LD_VAR 0 3
19343: PUSH
19344: LD_INT 3
19346: EQUAL
19347: IFFALSE 19357
// sEngine := true ;
19349: LD_ADDR_EXP 71
19353: PUSH
19354: LD_INT 1
19356: ST_TO_ADDR
// if p3 = 4 then
19357: LD_VAR 0 3
19361: PUSH
19362: LD_INT 4
19364: EQUAL
19365: IFFALSE 19375
// sSpec := true ;
19367: LD_ADDR_EXP 68
19371: PUSH
19372: LD_INT 1
19374: ST_TO_ADDR
// if p3 = 5 then
19375: LD_VAR 0 3
19379: PUSH
19380: LD_INT 5
19382: EQUAL
19383: IFFALSE 19393
// sLevel := true ;
19385: LD_ADDR_EXP 72
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// if p3 = 6 then
19393: LD_VAR 0 3
19397: PUSH
19398: LD_INT 6
19400: EQUAL
19401: IFFALSE 19411
// sArmoury := true ;
19403: LD_ADDR_EXP 73
19407: PUSH
19408: LD_INT 1
19410: ST_TO_ADDR
// if p3 = 7 then
19411: LD_VAR 0 3
19415: PUSH
19416: LD_INT 7
19418: EQUAL
19419: IFFALSE 19429
// sRadar := true ;
19421: LD_ADDR_EXP 74
19425: PUSH
19426: LD_INT 1
19428: ST_TO_ADDR
// if p3 = 8 then
19429: LD_VAR 0 3
19433: PUSH
19434: LD_INT 8
19436: EQUAL
19437: IFFALSE 19447
// sBunker := true ;
19439: LD_ADDR_EXP 75
19443: PUSH
19444: LD_INT 1
19446: ST_TO_ADDR
// if p3 = 9 then
19447: LD_VAR 0 3
19451: PUSH
19452: LD_INT 9
19454: EQUAL
19455: IFFALSE 19465
// sHack := true ;
19457: LD_ADDR_EXP 76
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// if p3 = 10 then
19465: LD_VAR 0 3
19469: PUSH
19470: LD_INT 10
19472: EQUAL
19473: IFFALSE 19483
// sFire := true ;
19475: LD_ADDR_EXP 77
19479: PUSH
19480: LD_INT 1
19482: ST_TO_ADDR
// if p3 = 11 then
19483: LD_VAR 0 3
19487: PUSH
19488: LD_INT 11
19490: EQUAL
19491: IFFALSE 19501
// sRefresh := true ;
19493: LD_ADDR_EXP 78
19497: PUSH
19498: LD_INT 1
19500: ST_TO_ADDR
// if p3 = 12 then
19501: LD_VAR 0 3
19505: PUSH
19506: LD_INT 12
19508: EQUAL
19509: IFFALSE 19519
// sExp := true ;
19511: LD_ADDR_EXP 79
19515: PUSH
19516: LD_INT 1
19518: ST_TO_ADDR
// if p3 = 13 then
19519: LD_VAR 0 3
19523: PUSH
19524: LD_INT 13
19526: EQUAL
19527: IFFALSE 19537
// sDepot := true ;
19529: LD_ADDR_EXP 80
19533: PUSH
19534: LD_INT 1
19536: ST_TO_ADDR
// if p3 = 14 then
19537: LD_VAR 0 3
19541: PUSH
19542: LD_INT 14
19544: EQUAL
19545: IFFALSE 19555
// sFlag := true ;
19547: LD_ADDR_EXP 81
19551: PUSH
19552: LD_INT 1
19554: ST_TO_ADDR
// if p3 = 15 then
19555: LD_VAR 0 3
19559: PUSH
19560: LD_INT 15
19562: EQUAL
19563: IFFALSE 19573
// sKamikadze := true ;
19565: LD_ADDR_EXP 89
19569: PUSH
19570: LD_INT 1
19572: ST_TO_ADDR
// if p3 = 16 then
19573: LD_VAR 0 3
19577: PUSH
19578: LD_INT 16
19580: EQUAL
19581: IFFALSE 19591
// sTroll := true ;
19583: LD_ADDR_EXP 90
19587: PUSH
19588: LD_INT 1
19590: ST_TO_ADDR
// if p3 = 17 then
19591: LD_VAR 0 3
19595: PUSH
19596: LD_INT 17
19598: EQUAL
19599: IFFALSE 19609
// sSlow := true ;
19601: LD_ADDR_EXP 91
19605: PUSH
19606: LD_INT 1
19608: ST_TO_ADDR
// if p3 = 18 then
19609: LD_VAR 0 3
19613: PUSH
19614: LD_INT 18
19616: EQUAL
19617: IFFALSE 19627
// sLack := true ;
19619: LD_ADDR_EXP 92
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// if p3 = 19 then
19627: LD_VAR 0 3
19631: PUSH
19632: LD_INT 19
19634: EQUAL
19635: IFFALSE 19645
// sTank := true ;
19637: LD_ADDR_EXP 94
19641: PUSH
19642: LD_INT 1
19644: ST_TO_ADDR
// if p3 = 20 then
19645: LD_VAR 0 3
19649: PUSH
19650: LD_INT 20
19652: EQUAL
19653: IFFALSE 19663
// sRemote := true ;
19655: LD_ADDR_EXP 95
19659: PUSH
19660: LD_INT 1
19662: ST_TO_ADDR
// if p3 = 21 then
19663: LD_VAR 0 3
19667: PUSH
19668: LD_INT 21
19670: EQUAL
19671: IFFALSE 19681
// sPowell := true ;
19673: LD_ADDR_EXP 96
19677: PUSH
19678: LD_INT 1
19680: ST_TO_ADDR
// if p3 = 22 then
19681: LD_VAR 0 3
19685: PUSH
19686: LD_INT 22
19688: EQUAL
19689: IFFALSE 19699
// sTeleport := true ;
19691: LD_ADDR_EXP 99
19695: PUSH
19696: LD_INT 1
19698: ST_TO_ADDR
// if p3 = 23 then
19699: LD_VAR 0 3
19703: PUSH
19704: LD_INT 23
19706: EQUAL
19707: IFFALSE 19717
// sOilTower := true ;
19709: LD_ADDR_EXP 101
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// if p3 = 24 then
19717: LD_VAR 0 3
19721: PUSH
19722: LD_INT 24
19724: EQUAL
19725: IFFALSE 19735
// sShovel := true ;
19727: LD_ADDR_EXP 102
19731: PUSH
19732: LD_INT 1
19734: ST_TO_ADDR
// if p3 = 25 then
19735: LD_VAR 0 3
19739: PUSH
19740: LD_INT 25
19742: EQUAL
19743: IFFALSE 19753
// sSheik := true ;
19745: LD_ADDR_EXP 103
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// if p3 = 26 then
19753: LD_VAR 0 3
19757: PUSH
19758: LD_INT 26
19760: EQUAL
19761: IFFALSE 19771
// sEarthquake := true ;
19763: LD_ADDR_EXP 105
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// if p3 = 27 then
19771: LD_VAR 0 3
19775: PUSH
19776: LD_INT 27
19778: EQUAL
19779: IFFALSE 19789
// sAI := true ;
19781: LD_ADDR_EXP 106
19785: PUSH
19786: LD_INT 1
19788: ST_TO_ADDR
// if p3 = 28 then
19789: LD_VAR 0 3
19793: PUSH
19794: LD_INT 28
19796: EQUAL
19797: IFFALSE 19807
// sCargo := true ;
19799: LD_ADDR_EXP 109
19803: PUSH
19804: LD_INT 1
19806: ST_TO_ADDR
// if p3 = 29 then
19807: LD_VAR 0 3
19811: PUSH
19812: LD_INT 29
19814: EQUAL
19815: IFFALSE 19825
// sDLaser := true ;
19817: LD_ADDR_EXP 110
19821: PUSH
19822: LD_INT 1
19824: ST_TO_ADDR
// if p3 = 30 then
19825: LD_VAR 0 3
19829: PUSH
19830: LD_INT 30
19832: EQUAL
19833: IFFALSE 19843
// sExchange := true ;
19835: LD_ADDR_EXP 111
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
// if p3 = 31 then
19843: LD_VAR 0 3
19847: PUSH
19848: LD_INT 31
19850: EQUAL
19851: IFFALSE 19861
// sFac := true ;
19853: LD_ADDR_EXP 112
19857: PUSH
19858: LD_INT 1
19860: ST_TO_ADDR
// if p3 = 32 then
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 32
19868: EQUAL
19869: IFFALSE 19879
// sPower := true ;
19871: LD_ADDR_EXP 113
19875: PUSH
19876: LD_INT 1
19878: ST_TO_ADDR
// if p3 = 33 then
19879: LD_VAR 0 3
19883: PUSH
19884: LD_INT 33
19886: EQUAL
19887: IFFALSE 19897
// sRandom := true ;
19889: LD_ADDR_EXP 114
19893: PUSH
19894: LD_INT 1
19896: ST_TO_ADDR
// if p3 = 34 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 34
19904: EQUAL
19905: IFFALSE 19915
// sShield := true ;
19907: LD_ADDR_EXP 115
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 35 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 35
19922: EQUAL
19923: IFFALSE 19933
// sTime := true ;
19925: LD_ADDR_EXP 116
19929: PUSH
19930: LD_INT 1
19932: ST_TO_ADDR
// if p3 = 36 then
19933: LD_VAR 0 3
19937: PUSH
19938: LD_INT 36
19940: EQUAL
19941: IFFALSE 19951
// sTools := true ;
19943: LD_ADDR_EXP 117
19947: PUSH
19948: LD_INT 1
19950: ST_TO_ADDR
// if p3 = 101 then
19951: LD_VAR 0 3
19955: PUSH
19956: LD_INT 101
19958: EQUAL
19959: IFFALSE 19969
// sSold := true ;
19961: LD_ADDR_EXP 82
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 102 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 102
19976: EQUAL
19977: IFFALSE 19987
// sDiff := true ;
19979: LD_ADDR_EXP 83
19983: PUSH
19984: LD_INT 1
19986: ST_TO_ADDR
// if p3 = 103 then
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 103
19994: EQUAL
19995: IFFALSE 20005
// sFog := true ;
19997: LD_ADDR_EXP 86
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
// if p3 = 104 then
20005: LD_VAR 0 3
20009: PUSH
20010: LD_INT 104
20012: EQUAL
20013: IFFALSE 20023
// sReset := true ;
20015: LD_ADDR_EXP 87
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// if p3 = 105 then
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 105
20030: EQUAL
20031: IFFALSE 20041
// sSun := true ;
20033: LD_ADDR_EXP 88
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
// if p3 = 106 then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 106
20048: EQUAL
20049: IFFALSE 20059
// sTiger := true ;
20051: LD_ADDR_EXP 84
20055: PUSH
20056: LD_INT 1
20058: ST_TO_ADDR
// if p3 = 107 then
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 107
20066: EQUAL
20067: IFFALSE 20077
// sBomb := true ;
20069: LD_ADDR_EXP 85
20073: PUSH
20074: LD_INT 1
20076: ST_TO_ADDR
// if p3 = 108 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 108
20084: EQUAL
20085: IFFALSE 20095
// sWound := true ;
20087: LD_ADDR_EXP 93
20091: PUSH
20092: LD_INT 1
20094: ST_TO_ADDR
// if p3 = 109 then
20095: LD_VAR 0 3
20099: PUSH
20100: LD_INT 109
20102: EQUAL
20103: IFFALSE 20113
// sBetray := true ;
20105: LD_ADDR_EXP 97
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// if p3 = 110 then
20113: LD_VAR 0 3
20117: PUSH
20118: LD_INT 110
20120: EQUAL
20121: IFFALSE 20131
// sContamin := true ;
20123: LD_ADDR_EXP 98
20127: PUSH
20128: LD_INT 1
20130: ST_TO_ADDR
// if p3 = 111 then
20131: LD_VAR 0 3
20135: PUSH
20136: LD_INT 111
20138: EQUAL
20139: IFFALSE 20149
// sOil := true ;
20141: LD_ADDR_EXP 100
20145: PUSH
20146: LD_INT 1
20148: ST_TO_ADDR
// if p3 = 112 then
20149: LD_VAR 0 3
20153: PUSH
20154: LD_INT 112
20156: EQUAL
20157: IFFALSE 20167
// sStu := true ;
20159: LD_ADDR_EXP 104
20163: PUSH
20164: LD_INT 1
20166: ST_TO_ADDR
// if p3 = 113 then
20167: LD_VAR 0 3
20171: PUSH
20172: LD_INT 113
20174: EQUAL
20175: IFFALSE 20185
// sBazooka := true ;
20177: LD_ADDR_EXP 107
20181: PUSH
20182: LD_INT 1
20184: ST_TO_ADDR
// if p3 = 114 then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 114
20192: EQUAL
20193: IFFALSE 20203
// sMortar := true ;
20195: LD_ADDR_EXP 108
20199: PUSH
20200: LD_INT 1
20202: ST_TO_ADDR
// if p3 = 115 then
20203: LD_VAR 0 3
20207: PUSH
20208: LD_INT 115
20210: EQUAL
20211: IFFALSE 20221
// sRanger := true ;
20213: LD_ADDR_EXP 118
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// if p3 = 116 then
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 116
20228: EQUAL
20229: IFFALSE 20239
// sComputer := true ;
20231: LD_ADDR_EXP 119
20235: PUSH
20236: LD_INT 1
20238: ST_TO_ADDR
// if p3 = 117 then
20239: LD_VAR 0 3
20243: PUSH
20244: LD_INT 117
20246: EQUAL
20247: IFFALSE 20257
// s30 := true ;
20249: LD_ADDR_EXP 120
20253: PUSH
20254: LD_INT 1
20256: ST_TO_ADDR
// if p3 = 118 then
20257: LD_VAR 0 3
20261: PUSH
20262: LD_INT 118
20264: EQUAL
20265: IFFALSE 20275
// s60 := true ;
20267: LD_ADDR_EXP 121
20271: PUSH
20272: LD_INT 1
20274: ST_TO_ADDR
// end ; if p2 = 101 then
20275: LD_VAR 0 2
20279: PUSH
20280: LD_INT 101
20282: EQUAL
20283: IFFALSE 20411
// begin case p3 of 1 :
20285: LD_VAR 0 3
20289: PUSH
20290: LD_INT 1
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 20305
20298: POP
// hHackUnlimitedResources ; 2 :
20299: CALL 32509 0 0
20303: GO 20411
20305: LD_INT 2
20307: DOUBLE
20308: EQUAL
20309: IFTRUE 20313
20311: GO 20320
20313: POP
// hHackSetLevel10 ; 3 :
20314: CALL 32642 0 0
20318: GO 20411
20320: LD_INT 3
20322: DOUBLE
20323: EQUAL
20324: IFTRUE 20328
20326: GO 20335
20328: POP
// hHackSetLevel10YourUnits ; 4 :
20329: CALL 32727 0 0
20333: GO 20411
20335: LD_INT 4
20337: DOUBLE
20338: EQUAL
20339: IFTRUE 20343
20341: GO 20350
20343: POP
// hHackInvincible ; 5 :
20344: CALL 33175 0 0
20348: GO 20411
20350: LD_INT 5
20352: DOUBLE
20353: EQUAL
20354: IFTRUE 20358
20356: GO 20365
20358: POP
// hHackInvisible ; 6 :
20359: CALL 33286 0 0
20363: GO 20411
20365: LD_INT 6
20367: DOUBLE
20368: EQUAL
20369: IFTRUE 20373
20371: GO 20380
20373: POP
// hHackChangeYourSide ; 7 :
20374: CALL 33343 0 0
20378: GO 20411
20380: LD_INT 7
20382: DOUBLE
20383: EQUAL
20384: IFTRUE 20388
20386: GO 20395
20388: POP
// hHackChangeUnitSide ; 8 :
20389: CALL 33385 0 0
20393: GO 20411
20395: LD_INT 8
20397: DOUBLE
20398: EQUAL
20399: IFTRUE 20403
20401: GO 20410
20403: POP
// hHackFog ; end ;
20404: CALL 33486 0 0
20408: GO 20411
20410: POP
// end ; end ;
20411: LD_VAR 0 7
20415: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20416: GO 20418
20418: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20419: LD_STRING initStreamRollete();
20421: PPUSH
20422: CALL_OW 559
// InitStreamMode ;
20426: CALL 20438 0 0
// DefineStreamItems ( false ) ;
20430: LD_INT 0
20432: PPUSH
20433: CALL 20902 0 1
// end ;
20437: END
// function InitStreamMode ; begin
20438: LD_INT 0
20440: PPUSH
// streamModeActive := false ;
20441: LD_ADDR_EXP 65
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// normalCounter := 36 ;
20449: LD_ADDR_EXP 66
20453: PUSH
20454: LD_INT 36
20456: ST_TO_ADDR
// hardcoreCounter := 18 ;
20457: LD_ADDR_EXP 67
20461: PUSH
20462: LD_INT 18
20464: ST_TO_ADDR
// sRocket := false ;
20465: LD_ADDR_EXP 70
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sSpeed := false ;
20473: LD_ADDR_EXP 69
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sEngine := false ;
20481: LD_ADDR_EXP 71
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sSpec := false ;
20489: LD_ADDR_EXP 68
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sLevel := false ;
20497: LD_ADDR_EXP 72
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sArmoury := false ;
20505: LD_ADDR_EXP 73
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sRadar := false ;
20513: LD_ADDR_EXP 74
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sBunker := false ;
20521: LD_ADDR_EXP 75
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sHack := false ;
20529: LD_ADDR_EXP 76
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sFire := false ;
20537: LD_ADDR_EXP 77
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sRefresh := false ;
20545: LD_ADDR_EXP 78
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sExp := false ;
20553: LD_ADDR_EXP 79
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sDepot := false ;
20561: LD_ADDR_EXP 80
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sFlag := false ;
20569: LD_ADDR_EXP 81
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sKamikadze := false ;
20577: LD_ADDR_EXP 89
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sTroll := false ;
20585: LD_ADDR_EXP 90
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sSlow := false ;
20593: LD_ADDR_EXP 91
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sLack := false ;
20601: LD_ADDR_EXP 92
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sTank := false ;
20609: LD_ADDR_EXP 94
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sRemote := false ;
20617: LD_ADDR_EXP 95
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sPowell := false ;
20625: LD_ADDR_EXP 96
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sTeleport := false ;
20633: LD_ADDR_EXP 99
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sOilTower := false ;
20641: LD_ADDR_EXP 101
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sShovel := false ;
20649: LD_ADDR_EXP 102
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sSheik := false ;
20657: LD_ADDR_EXP 103
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sEarthquake := false ;
20665: LD_ADDR_EXP 105
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sAI := false ;
20673: LD_ADDR_EXP 106
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sCargo := false ;
20681: LD_ADDR_EXP 109
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sDLaser := false ;
20689: LD_ADDR_EXP 110
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sExchange := false ;
20697: LD_ADDR_EXP 111
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sFac := false ;
20705: LD_ADDR_EXP 112
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sPower := false ;
20713: LD_ADDR_EXP 113
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sRandom := false ;
20721: LD_ADDR_EXP 114
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sShield := false ;
20729: LD_ADDR_EXP 115
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sTime := false ;
20737: LD_ADDR_EXP 116
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sTools := false ;
20745: LD_ADDR_EXP 117
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sSold := false ;
20753: LD_ADDR_EXP 82
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sDiff := false ;
20761: LD_ADDR_EXP 83
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sFog := false ;
20769: LD_ADDR_EXP 86
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sReset := false ;
20777: LD_ADDR_EXP 87
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sSun := false ;
20785: LD_ADDR_EXP 88
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sTiger := false ;
20793: LD_ADDR_EXP 84
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sBomb := false ;
20801: LD_ADDR_EXP 85
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sWound := false ;
20809: LD_ADDR_EXP 93
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sBetray := false ;
20817: LD_ADDR_EXP 97
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sContamin := false ;
20825: LD_ADDR_EXP 98
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sOil := false ;
20833: LD_ADDR_EXP 100
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sStu := false ;
20841: LD_ADDR_EXP 104
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// sBazooka := false ;
20849: LD_ADDR_EXP 107
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// sMortar := false ;
20857: LD_ADDR_EXP 108
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// sRanger := false ;
20865: LD_ADDR_EXP 118
20869: PUSH
20870: LD_INT 0
20872: ST_TO_ADDR
// sComputer := false ;
20873: LD_ADDR_EXP 119
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// s30 := false ;
20881: LD_ADDR_EXP 120
20885: PUSH
20886: LD_INT 0
20888: ST_TO_ADDR
// s60 := false ;
20889: LD_ADDR_EXP 121
20893: PUSH
20894: LD_INT 0
20896: ST_TO_ADDR
// end ;
20897: LD_VAR 0 1
20901: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20902: LD_INT 0
20904: PPUSH
20905: PPUSH
20906: PPUSH
20907: PPUSH
20908: PPUSH
20909: PPUSH
20910: PPUSH
// result := [ ] ;
20911: LD_ADDR_VAR 0 2
20915: PUSH
20916: EMPTY
20917: ST_TO_ADDR
// if campaign_id = 1 then
20918: LD_OWVAR 69
20922: PUSH
20923: LD_INT 1
20925: EQUAL
20926: IFFALSE 24092
// begin case mission_number of 1 :
20928: LD_OWVAR 70
20932: PUSH
20933: LD_INT 1
20935: DOUBLE
20936: EQUAL
20937: IFTRUE 20941
20939: GO 21017
20941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20942: LD_ADDR_VAR 0 2
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: LD_INT 4
20952: PUSH
20953: LD_INT 11
20955: PUSH
20956: LD_INT 12
20958: PUSH
20959: LD_INT 15
20961: PUSH
20962: LD_INT 16
20964: PUSH
20965: LD_INT 22
20967: PUSH
20968: LD_INT 23
20970: PUSH
20971: LD_INT 26
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 101
20987: PUSH
20988: LD_INT 102
20990: PUSH
20991: LD_INT 106
20993: PUSH
20994: LD_INT 116
20996: PUSH
20997: LD_INT 117
20999: PUSH
21000: LD_INT 118
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: ST_TO_ADDR
21015: GO 24090
21017: LD_INT 2
21019: DOUBLE
21020: EQUAL
21021: IFTRUE 21025
21023: GO 21109
21025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21026: LD_ADDR_VAR 0 2
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 4
21036: PUSH
21037: LD_INT 11
21039: PUSH
21040: LD_INT 12
21042: PUSH
21043: LD_INT 15
21045: PUSH
21046: LD_INT 16
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_INT 23
21054: PUSH
21055: LD_INT 26
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 101
21071: PUSH
21072: LD_INT 102
21074: PUSH
21075: LD_INT 105
21077: PUSH
21078: LD_INT 106
21080: PUSH
21081: LD_INT 108
21083: PUSH
21084: LD_INT 116
21086: PUSH
21087: LD_INT 117
21089: PUSH
21090: LD_INT 118
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: ST_TO_ADDR
21107: GO 24090
21109: LD_INT 3
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21205
21117: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21118: LD_ADDR_VAR 0 2
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 4
21128: PUSH
21129: LD_INT 5
21131: PUSH
21132: LD_INT 11
21134: PUSH
21135: LD_INT 12
21137: PUSH
21138: LD_INT 15
21140: PUSH
21141: LD_INT 16
21143: PUSH
21144: LD_INT 22
21146: PUSH
21147: LD_INT 26
21149: PUSH
21150: LD_INT 36
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 101
21167: PUSH
21168: LD_INT 102
21170: PUSH
21171: LD_INT 105
21173: PUSH
21174: LD_INT 106
21176: PUSH
21177: LD_INT 108
21179: PUSH
21180: LD_INT 116
21182: PUSH
21183: LD_INT 117
21185: PUSH
21186: LD_INT 118
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: ST_TO_ADDR
21203: GO 24090
21205: LD_INT 4
21207: DOUBLE
21208: EQUAL
21209: IFTRUE 21213
21211: GO 21309
21213: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21214: LD_ADDR_VAR 0 2
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: LD_INT 4
21224: PUSH
21225: LD_INT 5
21227: PUSH
21228: LD_INT 8
21230: PUSH
21231: LD_INT 11
21233: PUSH
21234: LD_INT 12
21236: PUSH
21237: LD_INT 15
21239: PUSH
21240: LD_INT 16
21242: PUSH
21243: LD_INT 22
21245: PUSH
21246: LD_INT 23
21248: PUSH
21249: LD_INT 26
21251: PUSH
21252: LD_INT 36
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 101
21271: PUSH
21272: LD_INT 102
21274: PUSH
21275: LD_INT 105
21277: PUSH
21278: LD_INT 106
21280: PUSH
21281: LD_INT 108
21283: PUSH
21284: LD_INT 116
21286: PUSH
21287: LD_INT 117
21289: PUSH
21290: LD_INT 118
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: ST_TO_ADDR
21307: GO 24090
21309: LD_INT 5
21311: DOUBLE
21312: EQUAL
21313: IFTRUE 21317
21315: GO 21429
21317: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21318: LD_ADDR_VAR 0 2
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: LD_INT 4
21328: PUSH
21329: LD_INT 5
21331: PUSH
21332: LD_INT 6
21334: PUSH
21335: LD_INT 8
21337: PUSH
21338: LD_INT 11
21340: PUSH
21341: LD_INT 12
21343: PUSH
21344: LD_INT 15
21346: PUSH
21347: LD_INT 16
21349: PUSH
21350: LD_INT 22
21352: PUSH
21353: LD_INT 23
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 26
21361: PUSH
21362: LD_INT 36
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 101
21383: PUSH
21384: LD_INT 102
21386: PUSH
21387: LD_INT 105
21389: PUSH
21390: LD_INT 106
21392: PUSH
21393: LD_INT 108
21395: PUSH
21396: LD_INT 109
21398: PUSH
21399: LD_INT 112
21401: PUSH
21402: LD_INT 116
21404: PUSH
21405: LD_INT 117
21407: PUSH
21408: LD_INT 118
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: ST_TO_ADDR
21427: GO 24090
21429: LD_INT 6
21431: DOUBLE
21432: EQUAL
21433: IFTRUE 21437
21435: GO 21569
21437: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21438: LD_ADDR_VAR 0 2
21442: PUSH
21443: LD_INT 2
21445: PUSH
21446: LD_INT 4
21448: PUSH
21449: LD_INT 5
21451: PUSH
21452: LD_INT 6
21454: PUSH
21455: LD_INT 8
21457: PUSH
21458: LD_INT 11
21460: PUSH
21461: LD_INT 12
21463: PUSH
21464: LD_INT 15
21466: PUSH
21467: LD_INT 16
21469: PUSH
21470: LD_INT 20
21472: PUSH
21473: LD_INT 21
21475: PUSH
21476: LD_INT 22
21478: PUSH
21479: LD_INT 23
21481: PUSH
21482: LD_INT 25
21484: PUSH
21485: LD_INT 26
21487: PUSH
21488: LD_INT 30
21490: PUSH
21491: LD_INT 31
21493: PUSH
21494: LD_INT 32
21496: PUSH
21497: LD_INT 36
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 101
21523: PUSH
21524: LD_INT 102
21526: PUSH
21527: LD_INT 105
21529: PUSH
21530: LD_INT 106
21532: PUSH
21533: LD_INT 108
21535: PUSH
21536: LD_INT 109
21538: PUSH
21539: LD_INT 112
21541: PUSH
21542: LD_INT 116
21544: PUSH
21545: LD_INT 117
21547: PUSH
21548: LD_INT 118
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: ST_TO_ADDR
21567: GO 24090
21569: LD_INT 7
21571: DOUBLE
21572: EQUAL
21573: IFTRUE 21577
21575: GO 21689
21577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21578: LD_ADDR_VAR 0 2
21582: PUSH
21583: LD_INT 2
21585: PUSH
21586: LD_INT 4
21588: PUSH
21589: LD_INT 5
21591: PUSH
21592: LD_INT 7
21594: PUSH
21595: LD_INT 11
21597: PUSH
21598: LD_INT 12
21600: PUSH
21601: LD_INT 15
21603: PUSH
21604: LD_INT 16
21606: PUSH
21607: LD_INT 20
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 25
21621: PUSH
21622: LD_INT 26
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 101
21643: PUSH
21644: LD_INT 102
21646: PUSH
21647: LD_INT 103
21649: PUSH
21650: LD_INT 105
21652: PUSH
21653: LD_INT 106
21655: PUSH
21656: LD_INT 108
21658: PUSH
21659: LD_INT 112
21661: PUSH
21662: LD_INT 116
21664: PUSH
21665: LD_INT 117
21667: PUSH
21668: LD_INT 118
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: ST_TO_ADDR
21687: GO 24090
21689: LD_INT 8
21691: DOUBLE
21692: EQUAL
21693: IFTRUE 21697
21695: GO 21837
21697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21698: LD_ADDR_VAR 0 2
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: LD_INT 4
21708: PUSH
21709: LD_INT 5
21711: PUSH
21712: LD_INT 6
21714: PUSH
21715: LD_INT 7
21717: PUSH
21718: LD_INT 8
21720: PUSH
21721: LD_INT 11
21723: PUSH
21724: LD_INT 12
21726: PUSH
21727: LD_INT 15
21729: PUSH
21730: LD_INT 16
21732: PUSH
21733: LD_INT 20
21735: PUSH
21736: LD_INT 21
21738: PUSH
21739: LD_INT 22
21741: PUSH
21742: LD_INT 23
21744: PUSH
21745: LD_INT 25
21747: PUSH
21748: LD_INT 26
21750: PUSH
21751: LD_INT 30
21753: PUSH
21754: LD_INT 31
21756: PUSH
21757: LD_INT 32
21759: PUSH
21760: LD_INT 36
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 101
21787: PUSH
21788: LD_INT 102
21790: PUSH
21791: LD_INT 103
21793: PUSH
21794: LD_INT 105
21796: PUSH
21797: LD_INT 106
21799: PUSH
21800: LD_INT 108
21802: PUSH
21803: LD_INT 109
21805: PUSH
21806: LD_INT 112
21808: PUSH
21809: LD_INT 116
21811: PUSH
21812: LD_INT 117
21814: PUSH
21815: LD_INT 118
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: ST_TO_ADDR
21835: GO 24090
21837: LD_INT 9
21839: DOUBLE
21840: EQUAL
21841: IFTRUE 21845
21843: GO 21993
21845: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21846: LD_ADDR_VAR 0 2
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: LD_INT 4
21856: PUSH
21857: LD_INT 5
21859: PUSH
21860: LD_INT 6
21862: PUSH
21863: LD_INT 7
21865: PUSH
21866: LD_INT 8
21868: PUSH
21869: LD_INT 11
21871: PUSH
21872: LD_INT 12
21874: PUSH
21875: LD_INT 15
21877: PUSH
21878: LD_INT 16
21880: PUSH
21881: LD_INT 20
21883: PUSH
21884: LD_INT 21
21886: PUSH
21887: LD_INT 22
21889: PUSH
21890: LD_INT 23
21892: PUSH
21893: LD_INT 25
21895: PUSH
21896: LD_INT 26
21898: PUSH
21899: LD_INT 28
21901: PUSH
21902: LD_INT 30
21904: PUSH
21905: LD_INT 31
21907: PUSH
21908: LD_INT 32
21910: PUSH
21911: LD_INT 36
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 101
21939: PUSH
21940: LD_INT 102
21942: PUSH
21943: LD_INT 103
21945: PUSH
21946: LD_INT 105
21948: PUSH
21949: LD_INT 106
21951: PUSH
21952: LD_INT 108
21954: PUSH
21955: LD_INT 109
21957: PUSH
21958: LD_INT 112
21960: PUSH
21961: LD_INT 114
21963: PUSH
21964: LD_INT 116
21966: PUSH
21967: LD_INT 117
21969: PUSH
21970: LD_INT 118
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: ST_TO_ADDR
21991: GO 24090
21993: LD_INT 10
21995: DOUBLE
21996: EQUAL
21997: IFTRUE 22001
21999: GO 22197
22001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22002: LD_ADDR_VAR 0 2
22006: PUSH
22007: LD_INT 2
22009: PUSH
22010: LD_INT 4
22012: PUSH
22013: LD_INT 5
22015: PUSH
22016: LD_INT 6
22018: PUSH
22019: LD_INT 7
22021: PUSH
22022: LD_INT 8
22024: PUSH
22025: LD_INT 9
22027: PUSH
22028: LD_INT 10
22030: PUSH
22031: LD_INT 11
22033: PUSH
22034: LD_INT 12
22036: PUSH
22037: LD_INT 13
22039: PUSH
22040: LD_INT 14
22042: PUSH
22043: LD_INT 15
22045: PUSH
22046: LD_INT 16
22048: PUSH
22049: LD_INT 17
22051: PUSH
22052: LD_INT 18
22054: PUSH
22055: LD_INT 19
22057: PUSH
22058: LD_INT 20
22060: PUSH
22061: LD_INT 21
22063: PUSH
22064: LD_INT 22
22066: PUSH
22067: LD_INT 23
22069: PUSH
22070: LD_INT 24
22072: PUSH
22073: LD_INT 25
22075: PUSH
22076: LD_INT 26
22078: PUSH
22079: LD_INT 28
22081: PUSH
22082: LD_INT 30
22084: PUSH
22085: LD_INT 31
22087: PUSH
22088: LD_INT 32
22090: PUSH
22091: LD_INT 36
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 101
22127: PUSH
22128: LD_INT 102
22130: PUSH
22131: LD_INT 103
22133: PUSH
22134: LD_INT 104
22136: PUSH
22137: LD_INT 105
22139: PUSH
22140: LD_INT 106
22142: PUSH
22143: LD_INT 107
22145: PUSH
22146: LD_INT 108
22148: PUSH
22149: LD_INT 109
22151: PUSH
22152: LD_INT 110
22154: PUSH
22155: LD_INT 111
22157: PUSH
22158: LD_INT 112
22160: PUSH
22161: LD_INT 114
22163: PUSH
22164: LD_INT 116
22166: PUSH
22167: LD_INT 117
22169: PUSH
22170: LD_INT 118
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: ST_TO_ADDR
22195: GO 24090
22197: LD_INT 11
22199: DOUBLE
22200: EQUAL
22201: IFTRUE 22205
22203: GO 22409
22205: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22206: LD_ADDR_VAR 0 2
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: LD_INT 4
22219: PUSH
22220: LD_INT 5
22222: PUSH
22223: LD_INT 6
22225: PUSH
22226: LD_INT 7
22228: PUSH
22229: LD_INT 8
22231: PUSH
22232: LD_INT 9
22234: PUSH
22235: LD_INT 10
22237: PUSH
22238: LD_INT 11
22240: PUSH
22241: LD_INT 12
22243: PUSH
22244: LD_INT 13
22246: PUSH
22247: LD_INT 14
22249: PUSH
22250: LD_INT 15
22252: PUSH
22253: LD_INT 16
22255: PUSH
22256: LD_INT 17
22258: PUSH
22259: LD_INT 18
22261: PUSH
22262: LD_INT 19
22264: PUSH
22265: LD_INT 20
22267: PUSH
22268: LD_INT 21
22270: PUSH
22271: LD_INT 22
22273: PUSH
22274: LD_INT 23
22276: PUSH
22277: LD_INT 24
22279: PUSH
22280: LD_INT 25
22282: PUSH
22283: LD_INT 26
22285: PUSH
22286: LD_INT 28
22288: PUSH
22289: LD_INT 30
22291: PUSH
22292: LD_INT 31
22294: PUSH
22295: LD_INT 32
22297: PUSH
22298: LD_INT 34
22300: PUSH
22301: LD_INT 36
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 101
22339: PUSH
22340: LD_INT 102
22342: PUSH
22343: LD_INT 103
22345: PUSH
22346: LD_INT 104
22348: PUSH
22349: LD_INT 105
22351: PUSH
22352: LD_INT 106
22354: PUSH
22355: LD_INT 107
22357: PUSH
22358: LD_INT 108
22360: PUSH
22361: LD_INT 109
22363: PUSH
22364: LD_INT 110
22366: PUSH
22367: LD_INT 111
22369: PUSH
22370: LD_INT 112
22372: PUSH
22373: LD_INT 114
22375: PUSH
22376: LD_INT 116
22378: PUSH
22379: LD_INT 117
22381: PUSH
22382: LD_INT 118
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: ST_TO_ADDR
22407: GO 24090
22409: LD_INT 12
22411: DOUBLE
22412: EQUAL
22413: IFTRUE 22417
22415: GO 22637
22417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22418: LD_ADDR_VAR 0 2
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 3
22431: PUSH
22432: LD_INT 4
22434: PUSH
22435: LD_INT 5
22437: PUSH
22438: LD_INT 6
22440: PUSH
22441: LD_INT 7
22443: PUSH
22444: LD_INT 8
22446: PUSH
22447: LD_INT 9
22449: PUSH
22450: LD_INT 10
22452: PUSH
22453: LD_INT 11
22455: PUSH
22456: LD_INT 12
22458: PUSH
22459: LD_INT 13
22461: PUSH
22462: LD_INT 14
22464: PUSH
22465: LD_INT 15
22467: PUSH
22468: LD_INT 16
22470: PUSH
22471: LD_INT 17
22473: PUSH
22474: LD_INT 18
22476: PUSH
22477: LD_INT 19
22479: PUSH
22480: LD_INT 20
22482: PUSH
22483: LD_INT 21
22485: PUSH
22486: LD_INT 22
22488: PUSH
22489: LD_INT 23
22491: PUSH
22492: LD_INT 24
22494: PUSH
22495: LD_INT 25
22497: PUSH
22498: LD_INT 26
22500: PUSH
22501: LD_INT 27
22503: PUSH
22504: LD_INT 28
22506: PUSH
22507: LD_INT 30
22509: PUSH
22510: LD_INT 31
22512: PUSH
22513: LD_INT 32
22515: PUSH
22516: LD_INT 33
22518: PUSH
22519: LD_INT 34
22521: PUSH
22522: LD_INT 36
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 101
22563: PUSH
22564: LD_INT 102
22566: PUSH
22567: LD_INT 103
22569: PUSH
22570: LD_INT 104
22572: PUSH
22573: LD_INT 105
22575: PUSH
22576: LD_INT 106
22578: PUSH
22579: LD_INT 107
22581: PUSH
22582: LD_INT 108
22584: PUSH
22585: LD_INT 109
22587: PUSH
22588: LD_INT 110
22590: PUSH
22591: LD_INT 111
22593: PUSH
22594: LD_INT 112
22596: PUSH
22597: LD_INT 113
22599: PUSH
22600: LD_INT 114
22602: PUSH
22603: LD_INT 116
22605: PUSH
22606: LD_INT 117
22608: PUSH
22609: LD_INT 118
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: ST_TO_ADDR
22635: GO 24090
22637: LD_INT 13
22639: DOUBLE
22640: EQUAL
22641: IFTRUE 22645
22643: GO 22853
22645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22646: LD_ADDR_VAR 0 2
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: LD_INT 8
22668: PUSH
22669: LD_INT 9
22671: PUSH
22672: LD_INT 10
22674: PUSH
22675: LD_INT 11
22677: PUSH
22678: LD_INT 12
22680: PUSH
22681: LD_INT 14
22683: PUSH
22684: LD_INT 15
22686: PUSH
22687: LD_INT 16
22689: PUSH
22690: LD_INT 17
22692: PUSH
22693: LD_INT 18
22695: PUSH
22696: LD_INT 19
22698: PUSH
22699: LD_INT 20
22701: PUSH
22702: LD_INT 21
22704: PUSH
22705: LD_INT 22
22707: PUSH
22708: LD_INT 23
22710: PUSH
22711: LD_INT 24
22713: PUSH
22714: LD_INT 25
22716: PUSH
22717: LD_INT 26
22719: PUSH
22720: LD_INT 27
22722: PUSH
22723: LD_INT 28
22725: PUSH
22726: LD_INT 30
22728: PUSH
22729: LD_INT 31
22731: PUSH
22732: LD_INT 32
22734: PUSH
22735: LD_INT 33
22737: PUSH
22738: LD_INT 34
22740: PUSH
22741: LD_INT 36
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 101
22779: PUSH
22780: LD_INT 102
22782: PUSH
22783: LD_INT 103
22785: PUSH
22786: LD_INT 104
22788: PUSH
22789: LD_INT 105
22791: PUSH
22792: LD_INT 106
22794: PUSH
22795: LD_INT 107
22797: PUSH
22798: LD_INT 108
22800: PUSH
22801: LD_INT 109
22803: PUSH
22804: LD_INT 110
22806: PUSH
22807: LD_INT 111
22809: PUSH
22810: LD_INT 112
22812: PUSH
22813: LD_INT 113
22815: PUSH
22816: LD_INT 114
22818: PUSH
22819: LD_INT 116
22821: PUSH
22822: LD_INT 117
22824: PUSH
22825: LD_INT 118
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: ST_TO_ADDR
22851: GO 24090
22853: LD_INT 14
22855: DOUBLE
22856: EQUAL
22857: IFTRUE 22861
22859: GO 23085
22861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 3
22875: PUSH
22876: LD_INT 4
22878: PUSH
22879: LD_INT 5
22881: PUSH
22882: LD_INT 6
22884: PUSH
22885: LD_INT 7
22887: PUSH
22888: LD_INT 8
22890: PUSH
22891: LD_INT 9
22893: PUSH
22894: LD_INT 10
22896: PUSH
22897: LD_INT 11
22899: PUSH
22900: LD_INT 12
22902: PUSH
22903: LD_INT 13
22905: PUSH
22906: LD_INT 14
22908: PUSH
22909: LD_INT 15
22911: PUSH
22912: LD_INT 16
22914: PUSH
22915: LD_INT 17
22917: PUSH
22918: LD_INT 18
22920: PUSH
22921: LD_INT 19
22923: PUSH
22924: LD_INT 20
22926: PUSH
22927: LD_INT 21
22929: PUSH
22930: LD_INT 22
22932: PUSH
22933: LD_INT 23
22935: PUSH
22936: LD_INT 24
22938: PUSH
22939: LD_INT 25
22941: PUSH
22942: LD_INT 26
22944: PUSH
22945: LD_INT 27
22947: PUSH
22948: LD_INT 28
22950: PUSH
22951: LD_INT 29
22953: PUSH
22954: LD_INT 30
22956: PUSH
22957: LD_INT 31
22959: PUSH
22960: LD_INT 32
22962: PUSH
22963: LD_INT 33
22965: PUSH
22966: LD_INT 34
22968: PUSH
22969: LD_INT 36
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 101
23011: PUSH
23012: LD_INT 102
23014: PUSH
23015: LD_INT 103
23017: PUSH
23018: LD_INT 104
23020: PUSH
23021: LD_INT 105
23023: PUSH
23024: LD_INT 106
23026: PUSH
23027: LD_INT 107
23029: PUSH
23030: LD_INT 108
23032: PUSH
23033: LD_INT 109
23035: PUSH
23036: LD_INT 110
23038: PUSH
23039: LD_INT 111
23041: PUSH
23042: LD_INT 112
23044: PUSH
23045: LD_INT 113
23047: PUSH
23048: LD_INT 114
23050: PUSH
23051: LD_INT 116
23053: PUSH
23054: LD_INT 117
23056: PUSH
23057: LD_INT 118
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: ST_TO_ADDR
23083: GO 24090
23085: LD_INT 15
23087: DOUBLE
23088: EQUAL
23089: IFTRUE 23093
23091: GO 23317
23093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23094: LD_ADDR_VAR 0 2
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: LD_INT 3
23107: PUSH
23108: LD_INT 4
23110: PUSH
23111: LD_INT 5
23113: PUSH
23114: LD_INT 6
23116: PUSH
23117: LD_INT 7
23119: PUSH
23120: LD_INT 8
23122: PUSH
23123: LD_INT 9
23125: PUSH
23126: LD_INT 10
23128: PUSH
23129: LD_INT 11
23131: PUSH
23132: LD_INT 12
23134: PUSH
23135: LD_INT 13
23137: PUSH
23138: LD_INT 14
23140: PUSH
23141: LD_INT 15
23143: PUSH
23144: LD_INT 16
23146: PUSH
23147: LD_INT 17
23149: PUSH
23150: LD_INT 18
23152: PUSH
23153: LD_INT 19
23155: PUSH
23156: LD_INT 20
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 22
23164: PUSH
23165: LD_INT 23
23167: PUSH
23168: LD_INT 24
23170: PUSH
23171: LD_INT 25
23173: PUSH
23174: LD_INT 26
23176: PUSH
23177: LD_INT 27
23179: PUSH
23180: LD_INT 28
23182: PUSH
23183: LD_INT 29
23185: PUSH
23186: LD_INT 30
23188: PUSH
23189: LD_INT 31
23191: PUSH
23192: LD_INT 32
23194: PUSH
23195: LD_INT 33
23197: PUSH
23198: LD_INT 34
23200: PUSH
23201: LD_INT 36
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 101
23243: PUSH
23244: LD_INT 102
23246: PUSH
23247: LD_INT 103
23249: PUSH
23250: LD_INT 104
23252: PUSH
23253: LD_INT 105
23255: PUSH
23256: LD_INT 106
23258: PUSH
23259: LD_INT 107
23261: PUSH
23262: LD_INT 108
23264: PUSH
23265: LD_INT 109
23267: PUSH
23268: LD_INT 110
23270: PUSH
23271: LD_INT 111
23273: PUSH
23274: LD_INT 112
23276: PUSH
23277: LD_INT 113
23279: PUSH
23280: LD_INT 114
23282: PUSH
23283: LD_INT 116
23285: PUSH
23286: LD_INT 117
23288: PUSH
23289: LD_INT 118
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: ST_TO_ADDR
23315: GO 24090
23317: LD_INT 16
23319: DOUBLE
23320: EQUAL
23321: IFTRUE 23325
23323: GO 23461
23325: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23326: LD_ADDR_VAR 0 2
23330: PUSH
23331: LD_INT 2
23333: PUSH
23334: LD_INT 4
23336: PUSH
23337: LD_INT 5
23339: PUSH
23340: LD_INT 7
23342: PUSH
23343: LD_INT 11
23345: PUSH
23346: LD_INT 12
23348: PUSH
23349: LD_INT 15
23351: PUSH
23352: LD_INT 16
23354: PUSH
23355: LD_INT 20
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 22
23363: PUSH
23364: LD_INT 23
23366: PUSH
23367: LD_INT 25
23369: PUSH
23370: LD_INT 26
23372: PUSH
23373: LD_INT 30
23375: PUSH
23376: LD_INT 31
23378: PUSH
23379: LD_INT 32
23381: PUSH
23382: LD_INT 33
23384: PUSH
23385: LD_INT 34
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 101
23411: PUSH
23412: LD_INT 102
23414: PUSH
23415: LD_INT 103
23417: PUSH
23418: LD_INT 106
23420: PUSH
23421: LD_INT 108
23423: PUSH
23424: LD_INT 112
23426: PUSH
23427: LD_INT 113
23429: PUSH
23430: LD_INT 114
23432: PUSH
23433: LD_INT 116
23435: PUSH
23436: LD_INT 117
23438: PUSH
23439: LD_INT 118
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: ST_TO_ADDR
23459: GO 24090
23461: LD_INT 17
23463: DOUBLE
23464: EQUAL
23465: IFTRUE 23469
23467: GO 23693
23469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 3
23483: PUSH
23484: LD_INT 4
23486: PUSH
23487: LD_INT 5
23489: PUSH
23490: LD_INT 6
23492: PUSH
23493: LD_INT 7
23495: PUSH
23496: LD_INT 8
23498: PUSH
23499: LD_INT 9
23501: PUSH
23502: LD_INT 10
23504: PUSH
23505: LD_INT 11
23507: PUSH
23508: LD_INT 12
23510: PUSH
23511: LD_INT 13
23513: PUSH
23514: LD_INT 14
23516: PUSH
23517: LD_INT 15
23519: PUSH
23520: LD_INT 16
23522: PUSH
23523: LD_INT 17
23525: PUSH
23526: LD_INT 18
23528: PUSH
23529: LD_INT 19
23531: PUSH
23532: LD_INT 20
23534: PUSH
23535: LD_INT 21
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 23
23543: PUSH
23544: LD_INT 24
23546: PUSH
23547: LD_INT 25
23549: PUSH
23550: LD_INT 26
23552: PUSH
23553: LD_INT 27
23555: PUSH
23556: LD_INT 28
23558: PUSH
23559: LD_INT 29
23561: PUSH
23562: LD_INT 30
23564: PUSH
23565: LD_INT 31
23567: PUSH
23568: LD_INT 32
23570: PUSH
23571: LD_INT 33
23573: PUSH
23574: LD_INT 34
23576: PUSH
23577: LD_INT 36
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 101
23619: PUSH
23620: LD_INT 102
23622: PUSH
23623: LD_INT 103
23625: PUSH
23626: LD_INT 104
23628: PUSH
23629: LD_INT 105
23631: PUSH
23632: LD_INT 106
23634: PUSH
23635: LD_INT 107
23637: PUSH
23638: LD_INT 108
23640: PUSH
23641: LD_INT 109
23643: PUSH
23644: LD_INT 110
23646: PUSH
23647: LD_INT 111
23649: PUSH
23650: LD_INT 112
23652: PUSH
23653: LD_INT 113
23655: PUSH
23656: LD_INT 114
23658: PUSH
23659: LD_INT 116
23661: PUSH
23662: LD_INT 117
23664: PUSH
23665: LD_INT 118
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: ST_TO_ADDR
23691: GO 24090
23693: LD_INT 18
23695: DOUBLE
23696: EQUAL
23697: IFTRUE 23701
23699: GO 23849
23701: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23702: LD_ADDR_VAR 0 2
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 4
23712: PUSH
23713: LD_INT 5
23715: PUSH
23716: LD_INT 7
23718: PUSH
23719: LD_INT 11
23721: PUSH
23722: LD_INT 12
23724: PUSH
23725: LD_INT 15
23727: PUSH
23728: LD_INT 16
23730: PUSH
23731: LD_INT 20
23733: PUSH
23734: LD_INT 21
23736: PUSH
23737: LD_INT 22
23739: PUSH
23740: LD_INT 23
23742: PUSH
23743: LD_INT 25
23745: PUSH
23746: LD_INT 26
23748: PUSH
23749: LD_INT 30
23751: PUSH
23752: LD_INT 31
23754: PUSH
23755: LD_INT 32
23757: PUSH
23758: LD_INT 33
23760: PUSH
23761: LD_INT 34
23763: PUSH
23764: LD_INT 35
23766: PUSH
23767: LD_INT 36
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 101
23795: PUSH
23796: LD_INT 102
23798: PUSH
23799: LD_INT 103
23801: PUSH
23802: LD_INT 106
23804: PUSH
23805: LD_INT 108
23807: PUSH
23808: LD_INT 112
23810: PUSH
23811: LD_INT 113
23813: PUSH
23814: LD_INT 114
23816: PUSH
23817: LD_INT 115
23819: PUSH
23820: LD_INT 116
23822: PUSH
23823: LD_INT 117
23825: PUSH
23826: LD_INT 118
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: ST_TO_ADDR
23847: GO 24090
23849: LD_INT 19
23851: DOUBLE
23852: EQUAL
23853: IFTRUE 23857
23855: GO 24089
23857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23858: LD_ADDR_VAR 0 2
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 2
23868: PUSH
23869: LD_INT 3
23871: PUSH
23872: LD_INT 4
23874: PUSH
23875: LD_INT 5
23877: PUSH
23878: LD_INT 6
23880: PUSH
23881: LD_INT 7
23883: PUSH
23884: LD_INT 8
23886: PUSH
23887: LD_INT 9
23889: PUSH
23890: LD_INT 10
23892: PUSH
23893: LD_INT 11
23895: PUSH
23896: LD_INT 12
23898: PUSH
23899: LD_INT 13
23901: PUSH
23902: LD_INT 14
23904: PUSH
23905: LD_INT 15
23907: PUSH
23908: LD_INT 16
23910: PUSH
23911: LD_INT 17
23913: PUSH
23914: LD_INT 18
23916: PUSH
23917: LD_INT 19
23919: PUSH
23920: LD_INT 20
23922: PUSH
23923: LD_INT 21
23925: PUSH
23926: LD_INT 22
23928: PUSH
23929: LD_INT 23
23931: PUSH
23932: LD_INT 24
23934: PUSH
23935: LD_INT 25
23937: PUSH
23938: LD_INT 26
23940: PUSH
23941: LD_INT 27
23943: PUSH
23944: LD_INT 28
23946: PUSH
23947: LD_INT 29
23949: PUSH
23950: LD_INT 30
23952: PUSH
23953: LD_INT 31
23955: PUSH
23956: LD_INT 32
23958: PUSH
23959: LD_INT 33
23961: PUSH
23962: LD_INT 34
23964: PUSH
23965: LD_INT 35
23967: PUSH
23968: LD_INT 36
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 101
24011: PUSH
24012: LD_INT 102
24014: PUSH
24015: LD_INT 103
24017: PUSH
24018: LD_INT 104
24020: PUSH
24021: LD_INT 105
24023: PUSH
24024: LD_INT 106
24026: PUSH
24027: LD_INT 107
24029: PUSH
24030: LD_INT 108
24032: PUSH
24033: LD_INT 109
24035: PUSH
24036: LD_INT 110
24038: PUSH
24039: LD_INT 111
24041: PUSH
24042: LD_INT 112
24044: PUSH
24045: LD_INT 113
24047: PUSH
24048: LD_INT 114
24050: PUSH
24051: LD_INT 115
24053: PUSH
24054: LD_INT 116
24056: PUSH
24057: LD_INT 117
24059: PUSH
24060: LD_INT 118
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: ST_TO_ADDR
24087: GO 24090
24089: POP
// end else
24090: GO 24321
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24092: LD_ADDR_VAR 0 2
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: LD_INT 2
24102: PUSH
24103: LD_INT 3
24105: PUSH
24106: LD_INT 4
24108: PUSH
24109: LD_INT 5
24111: PUSH
24112: LD_INT 6
24114: PUSH
24115: LD_INT 7
24117: PUSH
24118: LD_INT 8
24120: PUSH
24121: LD_INT 9
24123: PUSH
24124: LD_INT 10
24126: PUSH
24127: LD_INT 11
24129: PUSH
24130: LD_INT 12
24132: PUSH
24133: LD_INT 13
24135: PUSH
24136: LD_INT 14
24138: PUSH
24139: LD_INT 15
24141: PUSH
24142: LD_INT 16
24144: PUSH
24145: LD_INT 17
24147: PUSH
24148: LD_INT 18
24150: PUSH
24151: LD_INT 19
24153: PUSH
24154: LD_INT 20
24156: PUSH
24157: LD_INT 21
24159: PUSH
24160: LD_INT 22
24162: PUSH
24163: LD_INT 23
24165: PUSH
24166: LD_INT 24
24168: PUSH
24169: LD_INT 25
24171: PUSH
24172: LD_INT 26
24174: PUSH
24175: LD_INT 27
24177: PUSH
24178: LD_INT 28
24180: PUSH
24181: LD_INT 29
24183: PUSH
24184: LD_INT 30
24186: PUSH
24187: LD_INT 31
24189: PUSH
24190: LD_INT 32
24192: PUSH
24193: LD_INT 33
24195: PUSH
24196: LD_INT 34
24198: PUSH
24199: LD_INT 35
24201: PUSH
24202: LD_INT 36
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 101
24245: PUSH
24246: LD_INT 102
24248: PUSH
24249: LD_INT 103
24251: PUSH
24252: LD_INT 104
24254: PUSH
24255: LD_INT 105
24257: PUSH
24258: LD_INT 106
24260: PUSH
24261: LD_INT 107
24263: PUSH
24264: LD_INT 108
24266: PUSH
24267: LD_INT 109
24269: PUSH
24270: LD_INT 110
24272: PUSH
24273: LD_INT 111
24275: PUSH
24276: LD_INT 112
24278: PUSH
24279: LD_INT 113
24281: PUSH
24282: LD_INT 114
24284: PUSH
24285: LD_INT 115
24287: PUSH
24288: LD_INT 116
24290: PUSH
24291: LD_INT 117
24293: PUSH
24294: LD_INT 118
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: ST_TO_ADDR
// if result then
24321: LD_VAR 0 2
24325: IFFALSE 25111
// begin normal :=  ;
24327: LD_ADDR_VAR 0 5
24331: PUSH
24332: LD_STRING 
24334: ST_TO_ADDR
// hardcore :=  ;
24335: LD_ADDR_VAR 0 6
24339: PUSH
24340: LD_STRING 
24342: ST_TO_ADDR
// active :=  ;
24343: LD_ADDR_VAR 0 7
24347: PUSH
24348: LD_STRING 
24350: ST_TO_ADDR
// for i = 1 to normalCounter do
24351: LD_ADDR_VAR 0 8
24355: PUSH
24356: DOUBLE
24357: LD_INT 1
24359: DEC
24360: ST_TO_ADDR
24361: LD_EXP 66
24365: PUSH
24366: FOR_TO
24367: IFFALSE 24468
// begin tmp := 0 ;
24369: LD_ADDR_VAR 0 3
24373: PUSH
24374: LD_STRING 0
24376: ST_TO_ADDR
// if result [ 1 ] then
24377: LD_VAR 0 2
24381: PUSH
24382: LD_INT 1
24384: ARRAY
24385: IFFALSE 24450
// if result [ 1 ] [ 1 ] = i then
24387: LD_VAR 0 2
24391: PUSH
24392: LD_INT 1
24394: ARRAY
24395: PUSH
24396: LD_INT 1
24398: ARRAY
24399: PUSH
24400: LD_VAR 0 8
24404: EQUAL
24405: IFFALSE 24450
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24407: LD_ADDR_VAR 0 2
24411: PUSH
24412: LD_VAR 0 2
24416: PPUSH
24417: LD_INT 1
24419: PPUSH
24420: LD_VAR 0 2
24424: PUSH
24425: LD_INT 1
24427: ARRAY
24428: PPUSH
24429: LD_INT 1
24431: PPUSH
24432: CALL_OW 3
24436: PPUSH
24437: CALL_OW 1
24441: ST_TO_ADDR
// tmp := 1 ;
24442: LD_ADDR_VAR 0 3
24446: PUSH
24447: LD_STRING 1
24449: ST_TO_ADDR
// end ; normal := normal & tmp ;
24450: LD_ADDR_VAR 0 5
24454: PUSH
24455: LD_VAR 0 5
24459: PUSH
24460: LD_VAR 0 3
24464: STR
24465: ST_TO_ADDR
// end ;
24466: GO 24366
24468: POP
24469: POP
// for i = 1 to hardcoreCounter do
24470: LD_ADDR_VAR 0 8
24474: PUSH
24475: DOUBLE
24476: LD_INT 1
24478: DEC
24479: ST_TO_ADDR
24480: LD_EXP 67
24484: PUSH
24485: FOR_TO
24486: IFFALSE 24591
// begin tmp := 0 ;
24488: LD_ADDR_VAR 0 3
24492: PUSH
24493: LD_STRING 0
24495: ST_TO_ADDR
// if result [ 2 ] then
24496: LD_VAR 0 2
24500: PUSH
24501: LD_INT 2
24503: ARRAY
24504: IFFALSE 24573
// if result [ 2 ] [ 1 ] = 100 + i then
24506: LD_VAR 0 2
24510: PUSH
24511: LD_INT 2
24513: ARRAY
24514: PUSH
24515: LD_INT 1
24517: ARRAY
24518: PUSH
24519: LD_INT 100
24521: PUSH
24522: LD_VAR 0 8
24526: PLUS
24527: EQUAL
24528: IFFALSE 24573
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24530: LD_ADDR_VAR 0 2
24534: PUSH
24535: LD_VAR 0 2
24539: PPUSH
24540: LD_INT 2
24542: PPUSH
24543: LD_VAR 0 2
24547: PUSH
24548: LD_INT 2
24550: ARRAY
24551: PPUSH
24552: LD_INT 1
24554: PPUSH
24555: CALL_OW 3
24559: PPUSH
24560: CALL_OW 1
24564: ST_TO_ADDR
// tmp := 1 ;
24565: LD_ADDR_VAR 0 3
24569: PUSH
24570: LD_STRING 1
24572: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24573: LD_ADDR_VAR 0 6
24577: PUSH
24578: LD_VAR 0 6
24582: PUSH
24583: LD_VAR 0 3
24587: STR
24588: ST_TO_ADDR
// end ;
24589: GO 24485
24591: POP
24592: POP
// if isGameLoad then
24593: LD_VAR 0 1
24597: IFFALSE 25072
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24599: LD_ADDR_VAR 0 4
24603: PUSH
24604: LD_EXP 70
24608: PUSH
24609: LD_EXP 69
24613: PUSH
24614: LD_EXP 71
24618: PUSH
24619: LD_EXP 68
24623: PUSH
24624: LD_EXP 72
24628: PUSH
24629: LD_EXP 73
24633: PUSH
24634: LD_EXP 74
24638: PUSH
24639: LD_EXP 75
24643: PUSH
24644: LD_EXP 76
24648: PUSH
24649: LD_EXP 77
24653: PUSH
24654: LD_EXP 78
24658: PUSH
24659: LD_EXP 79
24663: PUSH
24664: LD_EXP 80
24668: PUSH
24669: LD_EXP 81
24673: PUSH
24674: LD_EXP 89
24678: PUSH
24679: LD_EXP 90
24683: PUSH
24684: LD_EXP 91
24688: PUSH
24689: LD_EXP 92
24693: PUSH
24694: LD_EXP 94
24698: PUSH
24699: LD_EXP 95
24703: PUSH
24704: LD_EXP 96
24708: PUSH
24709: LD_EXP 99
24713: PUSH
24714: LD_EXP 101
24718: PUSH
24719: LD_EXP 102
24723: PUSH
24724: LD_EXP 103
24728: PUSH
24729: LD_EXP 105
24733: PUSH
24734: LD_EXP 106
24738: PUSH
24739: LD_EXP 109
24743: PUSH
24744: LD_EXP 110
24748: PUSH
24749: LD_EXP 111
24753: PUSH
24754: LD_EXP 112
24758: PUSH
24759: LD_EXP 113
24763: PUSH
24764: LD_EXP 114
24768: PUSH
24769: LD_EXP 115
24773: PUSH
24774: LD_EXP 116
24778: PUSH
24779: LD_EXP 117
24783: PUSH
24784: LD_EXP 82
24788: PUSH
24789: LD_EXP 83
24793: PUSH
24794: LD_EXP 86
24798: PUSH
24799: LD_EXP 87
24803: PUSH
24804: LD_EXP 88
24808: PUSH
24809: LD_EXP 84
24813: PUSH
24814: LD_EXP 85
24818: PUSH
24819: LD_EXP 93
24823: PUSH
24824: LD_EXP 97
24828: PUSH
24829: LD_EXP 98
24833: PUSH
24834: LD_EXP 100
24838: PUSH
24839: LD_EXP 104
24843: PUSH
24844: LD_EXP 107
24848: PUSH
24849: LD_EXP 108
24853: PUSH
24854: LD_EXP 118
24858: PUSH
24859: LD_EXP 119
24863: PUSH
24864: LD_EXP 120
24868: PUSH
24869: LD_EXP 121
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
// tmp :=  ;
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_STRING 
24937: ST_TO_ADDR
// for i = 1 to normalCounter do
24938: LD_ADDR_VAR 0 8
24942: PUSH
24943: DOUBLE
24944: LD_INT 1
24946: DEC
24947: ST_TO_ADDR
24948: LD_EXP 66
24952: PUSH
24953: FOR_TO
24954: IFFALSE 24990
// begin if flags [ i ] then
24956: LD_VAR 0 4
24960: PUSH
24961: LD_VAR 0 8
24965: ARRAY
24966: IFFALSE 24988
// tmp := tmp & i & ; ;
24968: LD_ADDR_VAR 0 3
24972: PUSH
24973: LD_VAR 0 3
24977: PUSH
24978: LD_VAR 0 8
24982: STR
24983: PUSH
24984: LD_STRING ;
24986: STR
24987: ST_TO_ADDR
// end ;
24988: GO 24953
24990: POP
24991: POP
// for i = 1 to hardcoreCounter do
24992: LD_ADDR_VAR 0 8
24996: PUSH
24997: DOUBLE
24998: LD_INT 1
25000: DEC
25001: ST_TO_ADDR
25002: LD_EXP 67
25006: PUSH
25007: FOR_TO
25008: IFFALSE 25054
// begin if flags [ normalCounter + i ] then
25010: LD_VAR 0 4
25014: PUSH
25015: LD_EXP 66
25019: PUSH
25020: LD_VAR 0 8
25024: PLUS
25025: ARRAY
25026: IFFALSE 25052
// tmp := tmp & ( 100 + i ) & ; ;
25028: LD_ADDR_VAR 0 3
25032: PUSH
25033: LD_VAR 0 3
25037: PUSH
25038: LD_INT 100
25040: PUSH
25041: LD_VAR 0 8
25045: PLUS
25046: STR
25047: PUSH
25048: LD_STRING ;
25050: STR
25051: ST_TO_ADDR
// end ;
25052: GO 25007
25054: POP
25055: POP
// if tmp then
25056: LD_VAR 0 3
25060: IFFALSE 25072
// active := tmp ;
25062: LD_ADDR_VAR 0 7
25066: PUSH
25067: LD_VAR 0 3
25071: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25072: LD_STRING getStreamItemsFromMission("
25074: PUSH
25075: LD_VAR 0 5
25079: STR
25080: PUSH
25081: LD_STRING ","
25083: STR
25084: PUSH
25085: LD_VAR 0 6
25089: STR
25090: PUSH
25091: LD_STRING ","
25093: STR
25094: PUSH
25095: LD_VAR 0 7
25099: STR
25100: PUSH
25101: LD_STRING ")
25103: STR
25104: PPUSH
25105: CALL_OW 559
// end else
25109: GO 25118
// ToLua ( getStreamItemsFromMission("","","") ) ;
25111: LD_STRING getStreamItemsFromMission("","","")
25113: PPUSH
25114: CALL_OW 559
// end ;
25118: LD_VAR 0 2
25122: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25123: LD_EXP 65
25127: PUSH
25128: LD_EXP 70
25132: AND
25133: IFFALSE 25257
25135: GO 25137
25137: DISABLE
25138: LD_INT 0
25140: PPUSH
25141: PPUSH
// begin enable ;
25142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25143: LD_ADDR_VAR 0 2
25147: PUSH
25148: LD_INT 22
25150: PUSH
25151: LD_OWVAR 2
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 34
25165: PUSH
25166: LD_INT 7
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 34
25175: PUSH
25176: LD_INT 45
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 34
25185: PUSH
25186: LD_INT 28
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 34
25195: PUSH
25196: LD_INT 47
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PPUSH
25214: CALL_OW 69
25218: ST_TO_ADDR
// if not tmp then
25219: LD_VAR 0 2
25223: NOT
25224: IFFALSE 25228
// exit ;
25226: GO 25257
// for i in tmp do
25228: LD_ADDR_VAR 0 1
25232: PUSH
25233: LD_VAR 0 2
25237: PUSH
25238: FOR_IN
25239: IFFALSE 25255
// begin SetLives ( i , 0 ) ;
25241: LD_VAR 0 1
25245: PPUSH
25246: LD_INT 0
25248: PPUSH
25249: CALL_OW 234
// end ;
25253: GO 25238
25255: POP
25256: POP
// end ;
25257: PPOPN 2
25259: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25260: LD_EXP 65
25264: PUSH
25265: LD_EXP 71
25269: AND
25270: IFFALSE 25354
25272: GO 25274
25274: DISABLE
25275: LD_INT 0
25277: PPUSH
25278: PPUSH
// begin enable ;
25279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25280: LD_ADDR_VAR 0 2
25284: PUSH
25285: LD_INT 22
25287: PUSH
25288: LD_OWVAR 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 32
25299: PUSH
25300: LD_INT 3
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PPUSH
25311: CALL_OW 69
25315: ST_TO_ADDR
// if not tmp then
25316: LD_VAR 0 2
25320: NOT
25321: IFFALSE 25325
// exit ;
25323: GO 25354
// for i in tmp do
25325: LD_ADDR_VAR 0 1
25329: PUSH
25330: LD_VAR 0 2
25334: PUSH
25335: FOR_IN
25336: IFFALSE 25352
// begin SetLives ( i , 0 ) ;
25338: LD_VAR 0 1
25342: PPUSH
25343: LD_INT 0
25345: PPUSH
25346: CALL_OW 234
// end ;
25350: GO 25335
25352: POP
25353: POP
// end ;
25354: PPOPN 2
25356: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25357: LD_EXP 65
25361: PUSH
25362: LD_EXP 68
25366: AND
25367: IFFALSE 25460
25369: GO 25371
25371: DISABLE
25372: LD_INT 0
25374: PPUSH
// begin enable ;
25375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25376: LD_ADDR_VAR 0 1
25380: PUSH
25381: LD_INT 22
25383: PUSH
25384: LD_OWVAR 2
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: LD_INT 25
25398: PUSH
25399: LD_INT 5
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 25
25408: PUSH
25409: LD_INT 9
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 25
25418: PUSH
25419: LD_INT 8
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PPUSH
25436: CALL_OW 69
25440: PUSH
25441: FOR_IN
25442: IFFALSE 25458
// begin SetClass ( i , 1 ) ;
25444: LD_VAR 0 1
25448: PPUSH
25449: LD_INT 1
25451: PPUSH
25452: CALL_OW 336
// end ;
25456: GO 25441
25458: POP
25459: POP
// end ;
25460: PPOPN 1
25462: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25463: LD_EXP 65
25467: PUSH
25468: LD_EXP 69
25472: AND
25473: PUSH
25474: LD_OWVAR 65
25478: PUSH
25479: LD_INT 7
25481: LESS
25482: AND
25483: IFFALSE 25497
25485: GO 25487
25487: DISABLE
// begin enable ;
25488: ENABLE
// game_speed := 7 ;
25489: LD_ADDR_OWVAR 65
25493: PUSH
25494: LD_INT 7
25496: ST_TO_ADDR
// end ;
25497: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25498: LD_EXP 65
25502: PUSH
25503: LD_EXP 72
25507: AND
25508: IFFALSE 25710
25510: GO 25512
25512: DISABLE
25513: LD_INT 0
25515: PPUSH
25516: PPUSH
25517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25518: LD_ADDR_VAR 0 3
25522: PUSH
25523: LD_INT 81
25525: PUSH
25526: LD_OWVAR 2
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 21
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PPUSH
25549: CALL_OW 69
25553: ST_TO_ADDR
// if not tmp then
25554: LD_VAR 0 3
25558: NOT
25559: IFFALSE 25563
// exit ;
25561: GO 25710
// if tmp > 5 then
25563: LD_VAR 0 3
25567: PUSH
25568: LD_INT 5
25570: GREATER
25571: IFFALSE 25583
// k := 5 else
25573: LD_ADDR_VAR 0 2
25577: PUSH
25578: LD_INT 5
25580: ST_TO_ADDR
25581: GO 25593
// k := tmp ;
25583: LD_ADDR_VAR 0 2
25587: PUSH
25588: LD_VAR 0 3
25592: ST_TO_ADDR
// for i := 1 to k do
25593: LD_ADDR_VAR 0 1
25597: PUSH
25598: DOUBLE
25599: LD_INT 1
25601: DEC
25602: ST_TO_ADDR
25603: LD_VAR 0 2
25607: PUSH
25608: FOR_TO
25609: IFFALSE 25708
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25611: LD_VAR 0 3
25615: PUSH
25616: LD_VAR 0 1
25620: ARRAY
25621: PPUSH
25622: LD_VAR 0 1
25626: PUSH
25627: LD_INT 4
25629: MOD
25630: PUSH
25631: LD_INT 1
25633: PLUS
25634: PPUSH
25635: CALL_OW 259
25639: PUSH
25640: LD_INT 10
25642: LESS
25643: IFFALSE 25706
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25645: LD_VAR 0 3
25649: PUSH
25650: LD_VAR 0 1
25654: ARRAY
25655: PPUSH
25656: LD_VAR 0 1
25660: PUSH
25661: LD_INT 4
25663: MOD
25664: PUSH
25665: LD_INT 1
25667: PLUS
25668: PPUSH
25669: LD_VAR 0 3
25673: PUSH
25674: LD_VAR 0 1
25678: ARRAY
25679: PPUSH
25680: LD_VAR 0 1
25684: PUSH
25685: LD_INT 4
25687: MOD
25688: PUSH
25689: LD_INT 1
25691: PLUS
25692: PPUSH
25693: CALL_OW 259
25697: PUSH
25698: LD_INT 1
25700: PLUS
25701: PPUSH
25702: CALL_OW 237
25706: GO 25608
25708: POP
25709: POP
// end ;
25710: PPOPN 3
25712: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25713: LD_EXP 65
25717: PUSH
25718: LD_EXP 73
25722: AND
25723: IFFALSE 25743
25725: GO 25727
25727: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25728: LD_INT 4
25730: PPUSH
25731: LD_OWVAR 2
25735: PPUSH
25736: LD_INT 0
25738: PPUSH
25739: CALL_OW 324
25743: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25744: LD_EXP 65
25748: PUSH
25749: LD_EXP 102
25753: AND
25754: IFFALSE 25774
25756: GO 25758
25758: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25759: LD_INT 19
25761: PPUSH
25762: LD_OWVAR 2
25766: PPUSH
25767: LD_INT 0
25769: PPUSH
25770: CALL_OW 324
25774: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25775: LD_EXP 65
25779: PUSH
25780: LD_EXP 74
25784: AND
25785: IFFALSE 25887
25787: GO 25789
25789: DISABLE
25790: LD_INT 0
25792: PPUSH
25793: PPUSH
// begin enable ;
25794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25795: LD_ADDR_VAR 0 2
25799: PUSH
25800: LD_INT 22
25802: PUSH
25803: LD_OWVAR 2
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: LD_INT 34
25817: PUSH
25818: LD_INT 11
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 34
25827: PUSH
25828: LD_INT 30
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PPUSH
25844: CALL_OW 69
25848: ST_TO_ADDR
// if not tmp then
25849: LD_VAR 0 2
25853: NOT
25854: IFFALSE 25858
// exit ;
25856: GO 25887
// for i in tmp do
25858: LD_ADDR_VAR 0 1
25862: PUSH
25863: LD_VAR 0 2
25867: PUSH
25868: FOR_IN
25869: IFFALSE 25885
// begin SetLives ( i , 0 ) ;
25871: LD_VAR 0 1
25875: PPUSH
25876: LD_INT 0
25878: PPUSH
25879: CALL_OW 234
// end ;
25883: GO 25868
25885: POP
25886: POP
// end ;
25887: PPOPN 2
25889: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25890: LD_EXP 65
25894: PUSH
25895: LD_EXP 75
25899: AND
25900: IFFALSE 25920
25902: GO 25904
25904: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25905: LD_INT 32
25907: PPUSH
25908: LD_OWVAR 2
25912: PPUSH
25913: LD_INT 0
25915: PPUSH
25916: CALL_OW 324
25920: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25921: LD_EXP 65
25925: PUSH
25926: LD_EXP 76
25930: AND
25931: IFFALSE 26112
25933: GO 25935
25935: DISABLE
25936: LD_INT 0
25938: PPUSH
25939: PPUSH
25940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25941: LD_ADDR_VAR 0 2
25945: PUSH
25946: LD_INT 22
25948: PUSH
25949: LD_OWVAR 2
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 33
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PPUSH
25972: CALL_OW 69
25976: ST_TO_ADDR
// if not tmp then
25977: LD_VAR 0 2
25981: NOT
25982: IFFALSE 25986
// exit ;
25984: GO 26112
// side := 0 ;
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_INT 0
25993: ST_TO_ADDR
// for i := 1 to 8 do
25994: LD_ADDR_VAR 0 1
25998: PUSH
25999: DOUBLE
26000: LD_INT 1
26002: DEC
26003: ST_TO_ADDR
26004: LD_INT 8
26006: PUSH
26007: FOR_TO
26008: IFFALSE 26056
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26010: LD_OWVAR 2
26014: PUSH
26015: LD_VAR 0 1
26019: NONEQUAL
26020: PUSH
26021: LD_OWVAR 2
26025: PPUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 81
26035: PUSH
26036: LD_INT 2
26038: EQUAL
26039: AND
26040: IFFALSE 26054
// begin side := i ;
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_VAR 0 1
26051: ST_TO_ADDR
// break ;
26052: GO 26056
// end ;
26054: GO 26007
26056: POP
26057: POP
// if not side then
26058: LD_VAR 0 3
26062: NOT
26063: IFFALSE 26067
// exit ;
26065: GO 26112
// for i := 1 to tmp do
26067: LD_ADDR_VAR 0 1
26071: PUSH
26072: DOUBLE
26073: LD_INT 1
26075: DEC
26076: ST_TO_ADDR
26077: LD_VAR 0 2
26081: PUSH
26082: FOR_TO
26083: IFFALSE 26110
// if Prob ( 60 ) then
26085: LD_INT 60
26087: PPUSH
26088: CALL_OW 13
26092: IFFALSE 26108
// SetSide ( i , side ) ;
26094: LD_VAR 0 1
26098: PPUSH
26099: LD_VAR 0 3
26103: PPUSH
26104: CALL_OW 235
26108: GO 26082
26110: POP
26111: POP
// end ;
26112: PPOPN 3
26114: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26115: LD_EXP 65
26119: PUSH
26120: LD_EXP 78
26124: AND
26125: IFFALSE 26244
26127: GO 26129
26129: DISABLE
26130: LD_INT 0
26132: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26133: LD_ADDR_VAR 0 1
26137: PUSH
26138: LD_INT 22
26140: PUSH
26141: LD_OWVAR 2
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 21
26152: PUSH
26153: LD_INT 1
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: LD_INT 23
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: PPUSH
26182: CALL_OW 69
26186: PUSH
26187: FOR_IN
26188: IFFALSE 26242
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26190: LD_VAR 0 1
26194: PPUSH
26195: CALL_OW 257
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 3
26208: PUSH
26209: LD_INT 4
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: IN
26218: IFFALSE 26240
// SetClass ( un , rand ( 1 , 4 ) ) ;
26220: LD_VAR 0 1
26224: PPUSH
26225: LD_INT 1
26227: PPUSH
26228: LD_INT 4
26230: PPUSH
26231: CALL_OW 12
26235: PPUSH
26236: CALL_OW 336
26240: GO 26187
26242: POP
26243: POP
// end ;
26244: PPOPN 1
26246: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26247: LD_EXP 65
26251: PUSH
26252: LD_EXP 77
26256: AND
26257: IFFALSE 26336
26259: GO 26261
26261: DISABLE
26262: LD_INT 0
26264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26265: LD_ADDR_VAR 0 1
26269: PUSH
26270: LD_INT 22
26272: PUSH
26273: LD_OWVAR 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 21
26284: PUSH
26285: LD_INT 3
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PPUSH
26296: CALL_OW 69
26300: ST_TO_ADDR
// if not tmp then
26301: LD_VAR 0 1
26305: NOT
26306: IFFALSE 26310
// exit ;
26308: GO 26336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26310: LD_VAR 0 1
26314: PUSH
26315: LD_INT 1
26317: PPUSH
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL_OW 12
26327: ARRAY
26328: PPUSH
26329: LD_INT 100
26331: PPUSH
26332: CALL_OW 234
// end ;
26336: PPOPN 1
26338: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26339: LD_EXP 65
26343: PUSH
26344: LD_EXP 79
26348: AND
26349: IFFALSE 26447
26351: GO 26353
26353: DISABLE
26354: LD_INT 0
26356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26357: LD_ADDR_VAR 0 1
26361: PUSH
26362: LD_INT 22
26364: PUSH
26365: LD_OWVAR 2
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 21
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PPUSH
26388: CALL_OW 69
26392: ST_TO_ADDR
// if not tmp then
26393: LD_VAR 0 1
26397: NOT
26398: IFFALSE 26402
// exit ;
26400: GO 26447
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26402: LD_VAR 0 1
26406: PUSH
26407: LD_INT 1
26409: PPUSH
26410: LD_VAR 0 1
26414: PPUSH
26415: CALL_OW 12
26419: ARRAY
26420: PPUSH
26421: LD_INT 1
26423: PPUSH
26424: LD_INT 4
26426: PPUSH
26427: CALL_OW 12
26431: PPUSH
26432: LD_INT 3000
26434: PPUSH
26435: LD_INT 9000
26437: PPUSH
26438: CALL_OW 12
26442: PPUSH
26443: CALL_OW 492
// end ;
26447: PPOPN 1
26449: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26450: LD_EXP 65
26454: PUSH
26455: LD_EXP 80
26459: AND
26460: IFFALSE 26480
26462: GO 26464
26464: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26465: LD_INT 1
26467: PPUSH
26468: LD_OWVAR 2
26472: PPUSH
26473: LD_INT 0
26475: PPUSH
26476: CALL_OW 324
26480: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26481: LD_EXP 65
26485: PUSH
26486: LD_EXP 81
26490: AND
26491: IFFALSE 26574
26493: GO 26495
26495: DISABLE
26496: LD_INT 0
26498: PPUSH
26499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26500: LD_ADDR_VAR 0 2
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_OWVAR 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 21
26519: PUSH
26520: LD_INT 3
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 69
26535: ST_TO_ADDR
// if not tmp then
26536: LD_VAR 0 2
26540: NOT
26541: IFFALSE 26545
// exit ;
26543: GO 26574
// for i in tmp do
26545: LD_ADDR_VAR 0 1
26549: PUSH
26550: LD_VAR 0 2
26554: PUSH
26555: FOR_IN
26556: IFFALSE 26572
// SetBLevel ( i , 10 ) ;
26558: LD_VAR 0 1
26562: PPUSH
26563: LD_INT 10
26565: PPUSH
26566: CALL_OW 241
26570: GO 26555
26572: POP
26573: POP
// end ;
26574: PPOPN 2
26576: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26577: LD_EXP 65
26581: PUSH
26582: LD_EXP 82
26586: AND
26587: IFFALSE 26698
26589: GO 26591
26591: DISABLE
26592: LD_INT 0
26594: PPUSH
26595: PPUSH
26596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26597: LD_ADDR_VAR 0 3
26601: PUSH
26602: LD_INT 22
26604: PUSH
26605: LD_OWVAR 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 25
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PPUSH
26628: CALL_OW 69
26632: ST_TO_ADDR
// if not tmp then
26633: LD_VAR 0 3
26637: NOT
26638: IFFALSE 26642
// exit ;
26640: GO 26698
// un := tmp [ rand ( 1 , tmp ) ] ;
26642: LD_ADDR_VAR 0 2
26646: PUSH
26647: LD_VAR 0 3
26651: PUSH
26652: LD_INT 1
26654: PPUSH
26655: LD_VAR 0 3
26659: PPUSH
26660: CALL_OW 12
26664: ARRAY
26665: ST_TO_ADDR
// if Crawls ( un ) then
26666: LD_VAR 0 2
26670: PPUSH
26671: CALL_OW 318
26675: IFFALSE 26686
// ComWalk ( un ) ;
26677: LD_VAR 0 2
26681: PPUSH
26682: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26686: LD_VAR 0 2
26690: PPUSH
26691: LD_INT 5
26693: PPUSH
26694: CALL_OW 336
// end ;
26698: PPOPN 3
26700: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26701: LD_EXP 65
26705: PUSH
26706: LD_EXP 83
26710: AND
26711: PUSH
26712: LD_OWVAR 67
26716: PUSH
26717: LD_INT 4
26719: LESS
26720: AND
26721: IFFALSE 26740
26723: GO 26725
26725: DISABLE
// begin Difficulty := Difficulty + 1 ;
26726: LD_ADDR_OWVAR 67
26730: PUSH
26731: LD_OWVAR 67
26735: PUSH
26736: LD_INT 1
26738: PLUS
26739: ST_TO_ADDR
// end ;
26740: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26741: LD_EXP 65
26745: PUSH
26746: LD_EXP 84
26750: AND
26751: IFFALSE 26854
26753: GO 26755
26755: DISABLE
26756: LD_INT 0
26758: PPUSH
// begin for i := 1 to 5 do
26759: LD_ADDR_VAR 0 1
26763: PUSH
26764: DOUBLE
26765: LD_INT 1
26767: DEC
26768: ST_TO_ADDR
26769: LD_INT 5
26771: PUSH
26772: FOR_TO
26773: IFFALSE 26852
// begin uc_nation := nation_nature ;
26775: LD_ADDR_OWVAR 21
26779: PUSH
26780: LD_INT 0
26782: ST_TO_ADDR
// uc_side := 0 ;
26783: LD_ADDR_OWVAR 20
26787: PUSH
26788: LD_INT 0
26790: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26791: LD_ADDR_OWVAR 29
26795: PUSH
26796: LD_INT 12
26798: PUSH
26799: LD_INT 12
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: ST_TO_ADDR
// hc_agressivity := 20 ;
26806: LD_ADDR_OWVAR 35
26810: PUSH
26811: LD_INT 20
26813: ST_TO_ADDR
// hc_class := class_tiger ;
26814: LD_ADDR_OWVAR 28
26818: PUSH
26819: LD_INT 14
26821: ST_TO_ADDR
// hc_gallery :=  ;
26822: LD_ADDR_OWVAR 33
26826: PUSH
26827: LD_STRING 
26829: ST_TO_ADDR
// hc_name :=  ;
26830: LD_ADDR_OWVAR 26
26834: PUSH
26835: LD_STRING 
26837: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26838: CALL_OW 44
26842: PPUSH
26843: LD_INT 0
26845: PPUSH
26846: CALL_OW 51
// end ;
26850: GO 26772
26852: POP
26853: POP
// end ;
26854: PPOPN 1
26856: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26857: LD_EXP 65
26861: PUSH
26862: LD_EXP 85
26866: AND
26867: IFFALSE 26876
26869: GO 26871
26871: DISABLE
// StreamSibBomb ;
26872: CALL 26877 0 0
26876: END
// export function StreamSibBomb ; var i , x , y ; begin
26877: LD_INT 0
26879: PPUSH
26880: PPUSH
26881: PPUSH
26882: PPUSH
// result := false ;
26883: LD_ADDR_VAR 0 1
26887: PUSH
26888: LD_INT 0
26890: ST_TO_ADDR
// for i := 1 to 16 do
26891: LD_ADDR_VAR 0 2
26895: PUSH
26896: DOUBLE
26897: LD_INT 1
26899: DEC
26900: ST_TO_ADDR
26901: LD_INT 16
26903: PUSH
26904: FOR_TO
26905: IFFALSE 27104
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_INT 10
26914: PUSH
26915: LD_INT 20
26917: PUSH
26918: LD_INT 30
26920: PUSH
26921: LD_INT 40
26923: PUSH
26924: LD_INT 50
26926: PUSH
26927: LD_INT 60
26929: PUSH
26930: LD_INT 70
26932: PUSH
26933: LD_INT 80
26935: PUSH
26936: LD_INT 90
26938: PUSH
26939: LD_INT 100
26941: PUSH
26942: LD_INT 110
26944: PUSH
26945: LD_INT 120
26947: PUSH
26948: LD_INT 130
26950: PUSH
26951: LD_INT 140
26953: PUSH
26954: LD_INT 150
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PPUSH
26977: LD_INT 15
26979: PPUSH
26980: CALL_OW 12
26984: ARRAY
26985: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26986: LD_ADDR_VAR 0 4
26990: PUSH
26991: LD_INT 10
26993: PUSH
26994: LD_INT 20
26996: PUSH
26997: LD_INT 30
26999: PUSH
27000: LD_INT 40
27002: PUSH
27003: LD_INT 50
27005: PUSH
27006: LD_INT 60
27008: PUSH
27009: LD_INT 70
27011: PUSH
27012: LD_INT 80
27014: PUSH
27015: LD_INT 90
27017: PUSH
27018: LD_INT 100
27020: PUSH
27021: LD_INT 110
27023: PUSH
27024: LD_INT 120
27026: PUSH
27027: LD_INT 130
27029: PUSH
27030: LD_INT 140
27032: PUSH
27033: LD_INT 150
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PPUSH
27056: LD_INT 15
27058: PPUSH
27059: CALL_OW 12
27063: ARRAY
27064: ST_TO_ADDR
// if ValidHex ( x , y ) then
27065: LD_VAR 0 3
27069: PPUSH
27070: LD_VAR 0 4
27074: PPUSH
27075: CALL_OW 488
27079: IFFALSE 27102
// begin result := [ x , y ] ;
27081: LD_ADDR_VAR 0 1
27085: PUSH
27086: LD_VAR 0 3
27090: PUSH
27091: LD_VAR 0 4
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: ST_TO_ADDR
// break ;
27100: GO 27104
// end ; end ;
27102: GO 26904
27104: POP
27105: POP
// if result then
27106: LD_VAR 0 1
27110: IFFALSE 27170
// begin ToLua ( playSibBomb() ) ;
27112: LD_STRING playSibBomb()
27114: PPUSH
27115: CALL_OW 559
// wait ( 0 0$14 ) ;
27119: LD_INT 490
27121: PPUSH
27122: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27126: LD_VAR 0 1
27130: PUSH
27131: LD_INT 1
27133: ARRAY
27134: PPUSH
27135: LD_VAR 0 1
27139: PUSH
27140: LD_INT 2
27142: ARRAY
27143: PPUSH
27144: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27148: LD_VAR 0 1
27152: PUSH
27153: LD_INT 1
27155: ARRAY
27156: PPUSH
27157: LD_VAR 0 1
27161: PUSH
27162: LD_INT 2
27164: ARRAY
27165: PPUSH
27166: CALL_OW 429
// end ; end ;
27170: LD_VAR 0 1
27174: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27175: LD_EXP 65
27179: PUSH
27180: LD_EXP 87
27184: AND
27185: IFFALSE 27197
27187: GO 27189
27189: DISABLE
// YouLost (  ) ;
27190: LD_STRING 
27192: PPUSH
27193: CALL_OW 104
27197: END
// every 0 0$1 trigger StreamModeActive and sFog do
27198: LD_EXP 65
27202: PUSH
27203: LD_EXP 86
27207: AND
27208: IFFALSE 27222
27210: GO 27212
27212: DISABLE
// FogOff ( your_side ) ;
27213: LD_OWVAR 2
27217: PPUSH
27218: CALL_OW 344
27222: END
// every 0 0$1 trigger StreamModeActive and sSun do
27223: LD_EXP 65
27227: PUSH
27228: LD_EXP 88
27232: AND
27233: IFFALSE 27261
27235: GO 27237
27237: DISABLE
// begin solar_recharge_percent := 0 ;
27238: LD_ADDR_OWVAR 79
27242: PUSH
27243: LD_INT 0
27245: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27246: LD_INT 10500
27248: PPUSH
27249: CALL_OW 67
// solar_recharge_percent := 100 ;
27253: LD_ADDR_OWVAR 79
27257: PUSH
27258: LD_INT 100
27260: ST_TO_ADDR
// end ;
27261: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27262: LD_EXP 65
27266: PUSH
27267: LD_EXP 89
27271: AND
27272: IFFALSE 27511
27274: GO 27276
27276: DISABLE
27277: LD_INT 0
27279: PPUSH
27280: PPUSH
27281: PPUSH
// begin tmp := [ ] ;
27282: LD_ADDR_VAR 0 3
27286: PUSH
27287: EMPTY
27288: ST_TO_ADDR
// for i := 1 to 6 do
27289: LD_ADDR_VAR 0 1
27293: PUSH
27294: DOUBLE
27295: LD_INT 1
27297: DEC
27298: ST_TO_ADDR
27299: LD_INT 6
27301: PUSH
27302: FOR_TO
27303: IFFALSE 27408
// begin uc_nation := nation_nature ;
27305: LD_ADDR_OWVAR 21
27309: PUSH
27310: LD_INT 0
27312: ST_TO_ADDR
// uc_side := 0 ;
27313: LD_ADDR_OWVAR 20
27317: PUSH
27318: LD_INT 0
27320: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27321: LD_ADDR_OWVAR 29
27325: PUSH
27326: LD_INT 12
27328: PUSH
27329: LD_INT 12
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: ST_TO_ADDR
// hc_agressivity := 20 ;
27336: LD_ADDR_OWVAR 35
27340: PUSH
27341: LD_INT 20
27343: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27344: LD_ADDR_OWVAR 28
27348: PUSH
27349: LD_INT 17
27351: ST_TO_ADDR
// hc_gallery :=  ;
27352: LD_ADDR_OWVAR 33
27356: PUSH
27357: LD_STRING 
27359: ST_TO_ADDR
// hc_name :=  ;
27360: LD_ADDR_OWVAR 26
27364: PUSH
27365: LD_STRING 
27367: ST_TO_ADDR
// un := CreateHuman ;
27368: LD_ADDR_VAR 0 2
27372: PUSH
27373: CALL_OW 44
27377: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27378: LD_VAR 0 2
27382: PPUSH
27383: LD_INT 1
27385: PPUSH
27386: CALL_OW 51
// tmp := tmp ^ un ;
27390: LD_ADDR_VAR 0 3
27394: PUSH
27395: LD_VAR 0 3
27399: PUSH
27400: LD_VAR 0 2
27404: ADD
27405: ST_TO_ADDR
// end ;
27406: GO 27302
27408: POP
27409: POP
// repeat wait ( 0 0$1 ) ;
27410: LD_INT 35
27412: PPUSH
27413: CALL_OW 67
// for un in tmp do
27417: LD_ADDR_VAR 0 2
27421: PUSH
27422: LD_VAR 0 3
27426: PUSH
27427: FOR_IN
27428: IFFALSE 27502
// begin if IsDead ( un ) then
27430: LD_VAR 0 2
27434: PPUSH
27435: CALL_OW 301
27439: IFFALSE 27459
// begin tmp := tmp diff un ;
27441: LD_ADDR_VAR 0 3
27445: PUSH
27446: LD_VAR 0 3
27450: PUSH
27451: LD_VAR 0 2
27455: DIFF
27456: ST_TO_ADDR
// continue ;
27457: GO 27427
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27459: LD_VAR 0 2
27463: PPUSH
27464: LD_INT 3
27466: PUSH
27467: LD_INT 22
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PPUSH
27481: CALL_OW 69
27485: PPUSH
27486: LD_VAR 0 2
27490: PPUSH
27491: CALL_OW 74
27495: PPUSH
27496: CALL_OW 115
// end ;
27500: GO 27427
27502: POP
27503: POP
// until not tmp ;
27504: LD_VAR 0 3
27508: NOT
27509: IFFALSE 27410
// end ;
27511: PPOPN 3
27513: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27514: LD_EXP 65
27518: PUSH
27519: LD_EXP 90
27523: AND
27524: IFFALSE 27578
27526: GO 27528
27528: DISABLE
// begin ToLua ( displayTroll(); ) ;
27529: LD_STRING displayTroll();
27531: PPUSH
27532: CALL_OW 559
// wait ( 3 3$00 ) ;
27536: LD_INT 6300
27538: PPUSH
27539: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27543: LD_STRING hideTroll();
27545: PPUSH
27546: CALL_OW 559
// wait ( 1 1$00 ) ;
27550: LD_INT 2100
27552: PPUSH
27553: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27557: LD_STRING displayTroll();
27559: PPUSH
27560: CALL_OW 559
// wait ( 1 1$00 ) ;
27564: LD_INT 2100
27566: PPUSH
27567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27571: LD_STRING hideTroll();
27573: PPUSH
27574: CALL_OW 559
// end ;
27578: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27579: LD_EXP 65
27583: PUSH
27584: LD_EXP 91
27588: AND
27589: IFFALSE 27652
27591: GO 27593
27593: DISABLE
27594: LD_INT 0
27596: PPUSH
// begin p := 0 ;
27597: LD_ADDR_VAR 0 1
27601: PUSH
27602: LD_INT 0
27604: ST_TO_ADDR
// repeat game_speed := 1 ;
27605: LD_ADDR_OWVAR 65
27609: PUSH
27610: LD_INT 1
27612: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27613: LD_INT 35
27615: PPUSH
27616: CALL_OW 67
// p := p + 1 ;
27620: LD_ADDR_VAR 0 1
27624: PUSH
27625: LD_VAR 0 1
27629: PUSH
27630: LD_INT 1
27632: PLUS
27633: ST_TO_ADDR
// until p >= 60 ;
27634: LD_VAR 0 1
27638: PUSH
27639: LD_INT 60
27641: GREATEREQUAL
27642: IFFALSE 27605
// game_speed := 4 ;
27644: LD_ADDR_OWVAR 65
27648: PUSH
27649: LD_INT 4
27651: ST_TO_ADDR
// end ;
27652: PPOPN 1
27654: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27655: LD_EXP 65
27659: PUSH
27660: LD_EXP 92
27664: AND
27665: IFFALSE 27811
27667: GO 27669
27669: DISABLE
27670: LD_INT 0
27672: PPUSH
27673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27674: LD_ADDR_VAR 0 1
27678: PUSH
27679: LD_INT 22
27681: PUSH
27682: LD_OWVAR 2
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: LD_INT 30
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 30
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PPUSH
27723: CALL_OW 69
27727: ST_TO_ADDR
// if not depot then
27728: LD_VAR 0 1
27732: NOT
27733: IFFALSE 27737
// exit ;
27735: GO 27811
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27737: LD_ADDR_VAR 0 2
27741: PUSH
27742: LD_VAR 0 1
27746: PUSH
27747: LD_INT 1
27749: PPUSH
27750: LD_VAR 0 1
27754: PPUSH
27755: CALL_OW 12
27759: ARRAY
27760: PPUSH
27761: CALL_OW 274
27765: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27766: LD_VAR 0 2
27770: PPUSH
27771: LD_INT 1
27773: PPUSH
27774: LD_INT 0
27776: PPUSH
27777: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27781: LD_VAR 0 2
27785: PPUSH
27786: LD_INT 2
27788: PPUSH
27789: LD_INT 0
27791: PPUSH
27792: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27796: LD_VAR 0 2
27800: PPUSH
27801: LD_INT 3
27803: PPUSH
27804: LD_INT 0
27806: PPUSH
27807: CALL_OW 277
// end ;
27811: PPOPN 2
27813: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27814: LD_EXP 65
27818: PUSH
27819: LD_EXP 93
27823: AND
27824: IFFALSE 27921
27826: GO 27828
27828: DISABLE
27829: LD_INT 0
27831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27832: LD_ADDR_VAR 0 1
27836: PUSH
27837: LD_INT 22
27839: PUSH
27840: LD_OWVAR 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 21
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 3
27861: PUSH
27862: LD_INT 23
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: LIST
27880: PPUSH
27881: CALL_OW 69
27885: ST_TO_ADDR
// if not tmp then
27886: LD_VAR 0 1
27890: NOT
27891: IFFALSE 27895
// exit ;
27893: GO 27921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27895: LD_VAR 0 1
27899: PUSH
27900: LD_INT 1
27902: PPUSH
27903: LD_VAR 0 1
27907: PPUSH
27908: CALL_OW 12
27912: ARRAY
27913: PPUSH
27914: LD_INT 200
27916: PPUSH
27917: CALL_OW 234
// end ;
27921: PPOPN 1
27923: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27924: LD_EXP 65
27928: PUSH
27929: LD_EXP 94
27933: AND
27934: IFFALSE 28013
27936: GO 27938
27938: DISABLE
27939: LD_INT 0
27941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27942: LD_ADDR_VAR 0 1
27946: PUSH
27947: LD_INT 22
27949: PUSH
27950: LD_OWVAR 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 21
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PPUSH
27973: CALL_OW 69
27977: ST_TO_ADDR
// if not tmp then
27978: LD_VAR 0 1
27982: NOT
27983: IFFALSE 27987
// exit ;
27985: GO 28013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27987: LD_VAR 0 1
27991: PUSH
27992: LD_INT 1
27994: PPUSH
27995: LD_VAR 0 1
27999: PPUSH
28000: CALL_OW 12
28004: ARRAY
28005: PPUSH
28006: LD_INT 60
28008: PPUSH
28009: CALL_OW 234
// end ;
28013: PPOPN 1
28015: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28016: LD_EXP 65
28020: PUSH
28021: LD_EXP 95
28025: AND
28026: IFFALSE 28125
28028: GO 28030
28030: DISABLE
28031: LD_INT 0
28033: PPUSH
28034: PPUSH
// begin enable ;
28035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28036: LD_ADDR_VAR 0 1
28040: PUSH
28041: LD_INT 22
28043: PUSH
28044: LD_OWVAR 2
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 61
28055: PUSH
28056: EMPTY
28057: LIST
28058: PUSH
28059: LD_INT 33
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: PPUSH
28074: CALL_OW 69
28078: ST_TO_ADDR
// if not tmp then
28079: LD_VAR 0 1
28083: NOT
28084: IFFALSE 28088
// exit ;
28086: GO 28125
// for i in tmp do
28088: LD_ADDR_VAR 0 2
28092: PUSH
28093: LD_VAR 0 1
28097: PUSH
28098: FOR_IN
28099: IFFALSE 28123
// if IsControledBy ( i ) then
28101: LD_VAR 0 2
28105: PPUSH
28106: CALL_OW 312
28110: IFFALSE 28121
// ComUnlink ( i ) ;
28112: LD_VAR 0 2
28116: PPUSH
28117: CALL_OW 136
28121: GO 28098
28123: POP
28124: POP
// end ;
28125: PPOPN 2
28127: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28128: LD_EXP 65
28132: PUSH
28133: LD_EXP 96
28137: AND
28138: IFFALSE 28278
28140: GO 28142
28142: DISABLE
28143: LD_INT 0
28145: PPUSH
28146: PPUSH
// begin ToLua ( displayPowell(); ) ;
28147: LD_STRING displayPowell();
28149: PPUSH
28150: CALL_OW 559
// uc_side := 0 ;
28154: LD_ADDR_OWVAR 20
28158: PUSH
28159: LD_INT 0
28161: ST_TO_ADDR
// uc_nation := 2 ;
28162: LD_ADDR_OWVAR 21
28166: PUSH
28167: LD_INT 2
28169: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28170: LD_ADDR_OWVAR 37
28174: PUSH
28175: LD_INT 14
28177: ST_TO_ADDR
// vc_engine := engine_siberite ;
28178: LD_ADDR_OWVAR 39
28182: PUSH
28183: LD_INT 3
28185: ST_TO_ADDR
// vc_control := control_apeman ;
28186: LD_ADDR_OWVAR 38
28190: PUSH
28191: LD_INT 5
28193: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28194: LD_ADDR_OWVAR 40
28198: PUSH
28199: LD_INT 29
28201: ST_TO_ADDR
// un := CreateVehicle ;
28202: LD_ADDR_VAR 0 2
28206: PUSH
28207: CALL_OW 45
28211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28212: LD_VAR 0 2
28216: PPUSH
28217: LD_INT 1
28219: PPUSH
28220: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28224: LD_INT 35
28226: PPUSH
28227: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28231: LD_VAR 0 2
28235: PPUSH
28236: LD_INT 22
28238: PUSH
28239: LD_OWVAR 2
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PPUSH
28248: CALL_OW 69
28252: PPUSH
28253: LD_VAR 0 2
28257: PPUSH
28258: CALL_OW 74
28262: PPUSH
28263: CALL_OW 115
// until IsDead ( un ) ;
28267: LD_VAR 0 2
28271: PPUSH
28272: CALL_OW 301
28276: IFFALSE 28224
// end ;
28278: PPOPN 2
28280: END
// every 0 0$1 trigger StreamModeActive and sStu do
28281: LD_EXP 65
28285: PUSH
28286: LD_EXP 104
28290: AND
28291: IFFALSE 28307
28293: GO 28295
28295: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28296: LD_STRING displayStucuk();
28298: PPUSH
28299: CALL_OW 559
// ResetFog ;
28303: CALL_OW 335
// end ;
28307: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28308: LD_EXP 65
28312: PUSH
28313: LD_EXP 97
28317: AND
28318: IFFALSE 28459
28320: GO 28322
28322: DISABLE
28323: LD_INT 0
28325: PPUSH
28326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28327: LD_ADDR_VAR 0 2
28331: PUSH
28332: LD_INT 22
28334: PUSH
28335: LD_OWVAR 2
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 21
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PPUSH
28358: CALL_OW 69
28362: ST_TO_ADDR
// if not tmp then
28363: LD_VAR 0 2
28367: NOT
28368: IFFALSE 28372
// exit ;
28370: GO 28459
// un := tmp [ rand ( 1 , tmp ) ] ;
28372: LD_ADDR_VAR 0 1
28376: PUSH
28377: LD_VAR 0 2
28381: PUSH
28382: LD_INT 1
28384: PPUSH
28385: LD_VAR 0 2
28389: PPUSH
28390: CALL_OW 12
28394: ARRAY
28395: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28396: LD_VAR 0 1
28400: PPUSH
28401: LD_INT 0
28403: PPUSH
28404: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28408: LD_VAR 0 1
28412: PPUSH
28413: LD_OWVAR 3
28417: PUSH
28418: LD_VAR 0 1
28422: DIFF
28423: PPUSH
28424: LD_VAR 0 1
28428: PPUSH
28429: CALL_OW 74
28433: PPUSH
28434: CALL_OW 115
// wait ( 0 0$20 ) ;
28438: LD_INT 700
28440: PPUSH
28441: CALL_OW 67
// SetSide ( un , your_side ) ;
28445: LD_VAR 0 1
28449: PPUSH
28450: LD_OWVAR 2
28454: PPUSH
28455: CALL_OW 235
// end ;
28459: PPOPN 2
28461: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28462: LD_EXP 65
28466: PUSH
28467: LD_EXP 98
28471: AND
28472: IFFALSE 28578
28474: GO 28476
28476: DISABLE
28477: LD_INT 0
28479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28480: LD_ADDR_VAR 0 1
28484: PUSH
28485: LD_INT 22
28487: PUSH
28488: LD_OWVAR 2
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: LD_INT 30
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 30
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 69
28533: ST_TO_ADDR
// if not depot then
28534: LD_VAR 0 1
28538: NOT
28539: IFFALSE 28543
// exit ;
28541: GO 28578
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28543: LD_VAR 0 1
28547: PUSH
28548: LD_INT 1
28550: ARRAY
28551: PPUSH
28552: CALL_OW 250
28556: PPUSH
28557: LD_VAR 0 1
28561: PUSH
28562: LD_INT 1
28564: ARRAY
28565: PPUSH
28566: CALL_OW 251
28570: PPUSH
28571: LD_INT 70
28573: PPUSH
28574: CALL_OW 495
// end ;
28578: PPOPN 1
28580: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28581: LD_EXP 65
28585: PUSH
28586: LD_EXP 99
28590: AND
28591: IFFALSE 28802
28593: GO 28595
28595: DISABLE
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28603: LD_ADDR_VAR 0 5
28607: PUSH
28608: LD_INT 22
28610: PUSH
28611: LD_OWVAR 2
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 21
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PPUSH
28634: CALL_OW 69
28638: ST_TO_ADDR
// if not tmp then
28639: LD_VAR 0 5
28643: NOT
28644: IFFALSE 28648
// exit ;
28646: GO 28802
// for i in tmp do
28648: LD_ADDR_VAR 0 1
28652: PUSH
28653: LD_VAR 0 5
28657: PUSH
28658: FOR_IN
28659: IFFALSE 28800
// begin d := rand ( 0 , 5 ) ;
28661: LD_ADDR_VAR 0 4
28665: PUSH
28666: LD_INT 0
28668: PPUSH
28669: LD_INT 5
28671: PPUSH
28672: CALL_OW 12
28676: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28677: LD_ADDR_VAR 0 2
28681: PUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 250
28691: PPUSH
28692: LD_VAR 0 4
28696: PPUSH
28697: LD_INT 3
28699: PPUSH
28700: LD_INT 12
28702: PPUSH
28703: CALL_OW 12
28707: PPUSH
28708: CALL_OW 272
28712: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28713: LD_ADDR_VAR 0 3
28717: PUSH
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL_OW 251
28727: PPUSH
28728: LD_VAR 0 4
28732: PPUSH
28733: LD_INT 3
28735: PPUSH
28736: LD_INT 12
28738: PPUSH
28739: CALL_OW 12
28743: PPUSH
28744: CALL_OW 273
28748: ST_TO_ADDR
// if ValidHex ( x , y ) then
28749: LD_VAR 0 2
28753: PPUSH
28754: LD_VAR 0 3
28758: PPUSH
28759: CALL_OW 488
28763: IFFALSE 28798
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28765: LD_VAR 0 1
28769: PPUSH
28770: LD_VAR 0 2
28774: PPUSH
28775: LD_VAR 0 3
28779: PPUSH
28780: LD_INT 3
28782: PPUSH
28783: LD_INT 6
28785: PPUSH
28786: CALL_OW 12
28790: PPUSH
28791: LD_INT 1
28793: PPUSH
28794: CALL_OW 483
// end ;
28798: GO 28658
28800: POP
28801: POP
// end ;
28802: PPOPN 5
28804: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28805: LD_EXP 65
28809: PUSH
28810: LD_EXP 100
28814: AND
28815: IFFALSE 28909
28817: GO 28819
28819: DISABLE
28820: LD_INT 0
28822: PPUSH
28823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28824: LD_ADDR_VAR 0 2
28828: PUSH
28829: LD_INT 22
28831: PUSH
28832: LD_OWVAR 2
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 32
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 21
28853: PUSH
28854: LD_INT 2
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: PPUSH
28866: CALL_OW 69
28870: ST_TO_ADDR
// if not tmp then
28871: LD_VAR 0 2
28875: NOT
28876: IFFALSE 28880
// exit ;
28878: GO 28909
// for i in tmp do
28880: LD_ADDR_VAR 0 1
28884: PUSH
28885: LD_VAR 0 2
28889: PUSH
28890: FOR_IN
28891: IFFALSE 28907
// SetFuel ( i , 0 ) ;
28893: LD_VAR 0 1
28897: PPUSH
28898: LD_INT 0
28900: PPUSH
28901: CALL_OW 240
28905: GO 28890
28907: POP
28908: POP
// end ;
28909: PPOPN 2
28911: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28912: LD_EXP 65
28916: PUSH
28917: LD_EXP 101
28921: AND
28922: IFFALSE 28988
28924: GO 28926
28926: DISABLE
28927: LD_INT 0
28929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28930: LD_ADDR_VAR 0 1
28934: PUSH
28935: LD_INT 22
28937: PUSH
28938: LD_OWVAR 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 30
28949: PUSH
28950: LD_INT 29
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PPUSH
28961: CALL_OW 69
28965: ST_TO_ADDR
// if not tmp then
28966: LD_VAR 0 1
28970: NOT
28971: IFFALSE 28975
// exit ;
28973: GO 28988
// DestroyUnit ( tmp [ 1 ] ) ;
28975: LD_VAR 0 1
28979: PUSH
28980: LD_INT 1
28982: ARRAY
28983: PPUSH
28984: CALL_OW 65
// end ;
28988: PPOPN 1
28990: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28991: LD_EXP 65
28995: PUSH
28996: LD_EXP 103
29000: AND
29001: IFFALSE 29130
29003: GO 29005
29005: DISABLE
29006: LD_INT 0
29008: PPUSH
// begin uc_side := 0 ;
29009: LD_ADDR_OWVAR 20
29013: PUSH
29014: LD_INT 0
29016: ST_TO_ADDR
// uc_nation := nation_arabian ;
29017: LD_ADDR_OWVAR 21
29021: PUSH
29022: LD_INT 2
29024: ST_TO_ADDR
// hc_gallery :=  ;
29025: LD_ADDR_OWVAR 33
29029: PUSH
29030: LD_STRING 
29032: ST_TO_ADDR
// hc_name :=  ;
29033: LD_ADDR_OWVAR 26
29037: PUSH
29038: LD_STRING 
29040: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29041: LD_INT 1
29043: PPUSH
29044: LD_INT 11
29046: PPUSH
29047: LD_INT 10
29049: PPUSH
29050: CALL_OW 380
// un := CreateHuman ;
29054: LD_ADDR_VAR 0 1
29058: PUSH
29059: CALL_OW 44
29063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29064: LD_VAR 0 1
29068: PPUSH
29069: LD_INT 1
29071: PPUSH
29072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29076: LD_INT 35
29078: PPUSH
29079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_INT 22
29090: PUSH
29091: LD_OWVAR 2
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PPUSH
29100: CALL_OW 69
29104: PPUSH
29105: LD_VAR 0 1
29109: PPUSH
29110: CALL_OW 74
29114: PPUSH
29115: CALL_OW 115
// until IsDead ( un ) ;
29119: LD_VAR 0 1
29123: PPUSH
29124: CALL_OW 301
29128: IFFALSE 29076
// end ;
29130: PPOPN 1
29132: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29133: LD_EXP 65
29137: PUSH
29138: LD_EXP 105
29142: AND
29143: IFFALSE 29155
29145: GO 29147
29147: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29148: LD_STRING earthquake(getX(game), 0, 32)
29150: PPUSH
29151: CALL_OW 559
29155: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29156: LD_EXP 65
29160: PUSH
29161: LD_EXP 106
29165: AND
29166: IFFALSE 29257
29168: GO 29170
29170: DISABLE
29171: LD_INT 0
29173: PPUSH
// begin enable ;
29174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29175: LD_ADDR_VAR 0 1
29179: PUSH
29180: LD_INT 22
29182: PUSH
29183: LD_OWVAR 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 21
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 33
29204: PUSH
29205: LD_INT 3
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: PPUSH
29217: CALL_OW 69
29221: ST_TO_ADDR
// if not tmp then
29222: LD_VAR 0 1
29226: NOT
29227: IFFALSE 29231
// exit ;
29229: GO 29257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29231: LD_VAR 0 1
29235: PUSH
29236: LD_INT 1
29238: PPUSH
29239: LD_VAR 0 1
29243: PPUSH
29244: CALL_OW 12
29248: ARRAY
29249: PPUSH
29250: LD_INT 1
29252: PPUSH
29253: CALL_OW 234
// end ;
29257: PPOPN 1
29259: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29260: LD_EXP 65
29264: PUSH
29265: LD_EXP 107
29269: AND
29270: IFFALSE 29411
29272: GO 29274
29274: DISABLE
29275: LD_INT 0
29277: PPUSH
29278: PPUSH
29279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29280: LD_ADDR_VAR 0 3
29284: PUSH
29285: LD_INT 22
29287: PUSH
29288: LD_OWVAR 2
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 25
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PPUSH
29311: CALL_OW 69
29315: ST_TO_ADDR
// if not tmp then
29316: LD_VAR 0 3
29320: NOT
29321: IFFALSE 29325
// exit ;
29323: GO 29411
// un := tmp [ rand ( 1 , tmp ) ] ;
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_VAR 0 3
29334: PUSH
29335: LD_INT 1
29337: PPUSH
29338: LD_VAR 0 3
29342: PPUSH
29343: CALL_OW 12
29347: ARRAY
29348: ST_TO_ADDR
// if Crawls ( un ) then
29349: LD_VAR 0 2
29353: PPUSH
29354: CALL_OW 318
29358: IFFALSE 29369
// ComWalk ( un ) ;
29360: LD_VAR 0 2
29364: PPUSH
29365: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29369: LD_VAR 0 2
29373: PPUSH
29374: LD_INT 9
29376: PPUSH
29377: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29381: LD_INT 28
29383: PPUSH
29384: LD_OWVAR 2
29388: PPUSH
29389: LD_INT 2
29391: PPUSH
29392: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29396: LD_INT 29
29398: PPUSH
29399: LD_OWVAR 2
29403: PPUSH
29404: LD_INT 2
29406: PPUSH
29407: CALL_OW 322
// end ;
29411: PPOPN 3
29413: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29414: LD_EXP 65
29418: PUSH
29419: LD_EXP 108
29423: AND
29424: IFFALSE 29535
29426: GO 29428
29428: DISABLE
29429: LD_INT 0
29431: PPUSH
29432: PPUSH
29433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29434: LD_ADDR_VAR 0 3
29438: PUSH
29439: LD_INT 22
29441: PUSH
29442: LD_OWVAR 2
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 25
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PPUSH
29465: CALL_OW 69
29469: ST_TO_ADDR
// if not tmp then
29470: LD_VAR 0 3
29474: NOT
29475: IFFALSE 29479
// exit ;
29477: GO 29535
// un := tmp [ rand ( 1 , tmp ) ] ;
29479: LD_ADDR_VAR 0 2
29483: PUSH
29484: LD_VAR 0 3
29488: PUSH
29489: LD_INT 1
29491: PPUSH
29492: LD_VAR 0 3
29496: PPUSH
29497: CALL_OW 12
29501: ARRAY
29502: ST_TO_ADDR
// if Crawls ( un ) then
29503: LD_VAR 0 2
29507: PPUSH
29508: CALL_OW 318
29512: IFFALSE 29523
// ComWalk ( un ) ;
29514: LD_VAR 0 2
29518: PPUSH
29519: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29523: LD_VAR 0 2
29527: PPUSH
29528: LD_INT 8
29530: PPUSH
29531: CALL_OW 336
// end ;
29535: PPOPN 3
29537: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29538: LD_EXP 65
29542: PUSH
29543: LD_EXP 109
29547: AND
29548: IFFALSE 29692
29550: GO 29552
29552: DISABLE
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29557: LD_ADDR_VAR 0 2
29561: PUSH
29562: LD_INT 22
29564: PUSH
29565: LD_OWVAR 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 21
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: LD_INT 34
29589: PUSH
29590: LD_INT 12
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 34
29599: PUSH
29600: LD_INT 51
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 34
29609: PUSH
29610: LD_INT 32
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: LIST
29627: PPUSH
29628: CALL_OW 69
29632: ST_TO_ADDR
// if not tmp then
29633: LD_VAR 0 2
29637: NOT
29638: IFFALSE 29642
// exit ;
29640: GO 29692
// for i in tmp do
29642: LD_ADDR_VAR 0 1
29646: PUSH
29647: LD_VAR 0 2
29651: PUSH
29652: FOR_IN
29653: IFFALSE 29690
// if GetCargo ( i , mat_artifact ) = 0 then
29655: LD_VAR 0 1
29659: PPUSH
29660: LD_INT 4
29662: PPUSH
29663: CALL_OW 289
29667: PUSH
29668: LD_INT 0
29670: EQUAL
29671: IFFALSE 29688
// SetCargo ( i , mat_siberit , 100 ) ;
29673: LD_VAR 0 1
29677: PPUSH
29678: LD_INT 3
29680: PPUSH
29681: LD_INT 100
29683: PPUSH
29684: CALL_OW 290
29688: GO 29652
29690: POP
29691: POP
// end ;
29692: PPOPN 2
29694: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29695: LD_EXP 65
29699: PUSH
29700: LD_EXP 110
29704: AND
29705: IFFALSE 29888
29707: GO 29709
29709: DISABLE
29710: LD_INT 0
29712: PPUSH
29713: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29714: LD_ADDR_VAR 0 2
29718: PUSH
29719: LD_INT 22
29721: PUSH
29722: LD_OWVAR 2
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: ST_TO_ADDR
// if not tmp then
29736: LD_VAR 0 2
29740: NOT
29741: IFFALSE 29745
// exit ;
29743: GO 29888
// for i := 1 to 2 do
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: DOUBLE
29751: LD_INT 1
29753: DEC
29754: ST_TO_ADDR
29755: LD_INT 2
29757: PUSH
29758: FOR_TO
29759: IFFALSE 29886
// begin uc_side := your_side ;
29761: LD_ADDR_OWVAR 20
29765: PUSH
29766: LD_OWVAR 2
29770: ST_TO_ADDR
// uc_nation := nation_american ;
29771: LD_ADDR_OWVAR 21
29775: PUSH
29776: LD_INT 1
29778: ST_TO_ADDR
// vc_chassis := us_morphling ;
29779: LD_ADDR_OWVAR 37
29783: PUSH
29784: LD_INT 5
29786: ST_TO_ADDR
// vc_engine := engine_siberite ;
29787: LD_ADDR_OWVAR 39
29791: PUSH
29792: LD_INT 3
29794: ST_TO_ADDR
// vc_control := control_computer ;
29795: LD_ADDR_OWVAR 38
29799: PUSH
29800: LD_INT 3
29802: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29803: LD_ADDR_OWVAR 40
29807: PUSH
29808: LD_INT 10
29810: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29811: LD_VAR 0 2
29815: PUSH
29816: LD_INT 1
29818: ARRAY
29819: PPUSH
29820: CALL_OW 310
29824: NOT
29825: IFFALSE 29872
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29827: CALL_OW 45
29831: PPUSH
29832: LD_VAR 0 2
29836: PUSH
29837: LD_INT 1
29839: ARRAY
29840: PPUSH
29841: CALL_OW 250
29845: PPUSH
29846: LD_VAR 0 2
29850: PUSH
29851: LD_INT 1
29853: ARRAY
29854: PPUSH
29855: CALL_OW 251
29859: PPUSH
29860: LD_INT 12
29862: PPUSH
29863: LD_INT 1
29865: PPUSH
29866: CALL_OW 50
29870: GO 29884
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29872: CALL_OW 45
29876: PPUSH
29877: LD_INT 1
29879: PPUSH
29880: CALL_OW 51
// end ;
29884: GO 29758
29886: POP
29887: POP
// end ;
29888: PPOPN 2
29890: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29891: LD_EXP 65
29895: PUSH
29896: LD_EXP 111
29900: AND
29901: IFFALSE 30123
29903: GO 29905
29905: DISABLE
29906: LD_INT 0
29908: PPUSH
29909: PPUSH
29910: PPUSH
29911: PPUSH
29912: PPUSH
29913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29914: LD_ADDR_VAR 0 6
29918: PUSH
29919: LD_INT 22
29921: PUSH
29922: LD_OWVAR 2
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 21
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 3
29943: PUSH
29944: LD_INT 23
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: PPUSH
29963: CALL_OW 69
29967: ST_TO_ADDR
// if not tmp then
29968: LD_VAR 0 6
29972: NOT
29973: IFFALSE 29977
// exit ;
29975: GO 30123
// s1 := rand ( 1 , 4 ) ;
29977: LD_ADDR_VAR 0 2
29981: PUSH
29982: LD_INT 1
29984: PPUSH
29985: LD_INT 4
29987: PPUSH
29988: CALL_OW 12
29992: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29993: LD_ADDR_VAR 0 4
29997: PUSH
29998: LD_VAR 0 6
30002: PUSH
30003: LD_INT 1
30005: ARRAY
30006: PPUSH
30007: LD_VAR 0 2
30011: PPUSH
30012: CALL_OW 259
30016: ST_TO_ADDR
// if s1 = 1 then
30017: LD_VAR 0 2
30021: PUSH
30022: LD_INT 1
30024: EQUAL
30025: IFFALSE 30045
// s2 := rand ( 2 , 4 ) else
30027: LD_ADDR_VAR 0 3
30031: PUSH
30032: LD_INT 2
30034: PPUSH
30035: LD_INT 4
30037: PPUSH
30038: CALL_OW 12
30042: ST_TO_ADDR
30043: GO 30053
// s2 := 1 ;
30045: LD_ADDR_VAR 0 3
30049: PUSH
30050: LD_INT 1
30052: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30053: LD_ADDR_VAR 0 5
30057: PUSH
30058: LD_VAR 0 6
30062: PUSH
30063: LD_INT 1
30065: ARRAY
30066: PPUSH
30067: LD_VAR 0 3
30071: PPUSH
30072: CALL_OW 259
30076: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30077: LD_VAR 0 6
30081: PUSH
30082: LD_INT 1
30084: ARRAY
30085: PPUSH
30086: LD_VAR 0 2
30090: PPUSH
30091: LD_VAR 0 5
30095: PPUSH
30096: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30100: LD_VAR 0 6
30104: PUSH
30105: LD_INT 1
30107: ARRAY
30108: PPUSH
30109: LD_VAR 0 3
30113: PPUSH
30114: LD_VAR 0 4
30118: PPUSH
30119: CALL_OW 237
// end ;
30123: PPOPN 6
30125: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30126: LD_EXP 65
30130: PUSH
30131: LD_EXP 112
30135: AND
30136: IFFALSE 30215
30138: GO 30140
30140: DISABLE
30141: LD_INT 0
30143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30144: LD_ADDR_VAR 0 1
30148: PUSH
30149: LD_INT 22
30151: PUSH
30152: LD_OWVAR 2
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 30
30163: PUSH
30164: LD_INT 3
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PPUSH
30175: CALL_OW 69
30179: ST_TO_ADDR
// if not tmp then
30180: LD_VAR 0 1
30184: NOT
30185: IFFALSE 30189
// exit ;
30187: GO 30215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30189: LD_VAR 0 1
30193: PUSH
30194: LD_INT 1
30196: PPUSH
30197: LD_VAR 0 1
30201: PPUSH
30202: CALL_OW 12
30206: ARRAY
30207: PPUSH
30208: LD_INT 1
30210: PPUSH
30211: CALL_OW 234
// end ;
30215: PPOPN 1
30217: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30218: LD_EXP 65
30222: PUSH
30223: LD_EXP 113
30227: AND
30228: IFFALSE 30340
30230: GO 30232
30232: DISABLE
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30237: LD_ADDR_VAR 0 2
30241: PUSH
30242: LD_INT 22
30244: PUSH
30245: LD_OWVAR 2
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: LD_INT 30
30259: PUSH
30260: LD_INT 27
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 30
30269: PUSH
30270: LD_INT 26
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 30
30279: PUSH
30280: LD_INT 28
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PPUSH
30297: CALL_OW 69
30301: ST_TO_ADDR
// if not tmp then
30302: LD_VAR 0 2
30306: NOT
30307: IFFALSE 30311
// exit ;
30309: GO 30340
// for i in tmp do
30311: LD_ADDR_VAR 0 1
30315: PUSH
30316: LD_VAR 0 2
30320: PUSH
30321: FOR_IN
30322: IFFALSE 30338
// SetLives ( i , 1 ) ;
30324: LD_VAR 0 1
30328: PPUSH
30329: LD_INT 1
30331: PPUSH
30332: CALL_OW 234
30336: GO 30321
30338: POP
30339: POP
// end ;
30340: PPOPN 2
30342: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30343: LD_EXP 65
30347: PUSH
30348: LD_EXP 114
30352: AND
30353: IFFALSE 30640
30355: GO 30357
30357: DISABLE
30358: LD_INT 0
30360: PPUSH
30361: PPUSH
30362: PPUSH
// begin i := rand ( 1 , 7 ) ;
30363: LD_ADDR_VAR 0 1
30367: PUSH
30368: LD_INT 1
30370: PPUSH
30371: LD_INT 7
30373: PPUSH
30374: CALL_OW 12
30378: ST_TO_ADDR
// case i of 1 :
30379: LD_VAR 0 1
30383: PUSH
30384: LD_INT 1
30386: DOUBLE
30387: EQUAL
30388: IFTRUE 30392
30390: GO 30402
30392: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30393: LD_STRING earthquake(getX(game), 0, 32)
30395: PPUSH
30396: CALL_OW 559
30400: GO 30640
30402: LD_INT 2
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30424
30410: POP
// begin ToLua ( displayStucuk(); ) ;
30411: LD_STRING displayStucuk();
30413: PPUSH
30414: CALL_OW 559
// ResetFog ;
30418: CALL_OW 335
// end ; 3 :
30422: GO 30640
30424: LD_INT 3
30426: DOUBLE
30427: EQUAL
30428: IFTRUE 30432
30430: GO 30536
30432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30433: LD_ADDR_VAR 0 2
30437: PUSH
30438: LD_INT 22
30440: PUSH
30441: LD_OWVAR 2
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 25
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PPUSH
30464: CALL_OW 69
30468: ST_TO_ADDR
// if not tmp then
30469: LD_VAR 0 2
30473: NOT
30474: IFFALSE 30478
// exit ;
30476: GO 30640
// un := tmp [ rand ( 1 , tmp ) ] ;
30478: LD_ADDR_VAR 0 3
30482: PUSH
30483: LD_VAR 0 2
30487: PUSH
30488: LD_INT 1
30490: PPUSH
30491: LD_VAR 0 2
30495: PPUSH
30496: CALL_OW 12
30500: ARRAY
30501: ST_TO_ADDR
// if Crawls ( un ) then
30502: LD_VAR 0 3
30506: PPUSH
30507: CALL_OW 318
30511: IFFALSE 30522
// ComWalk ( un ) ;
30513: LD_VAR 0 3
30517: PPUSH
30518: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30522: LD_VAR 0 3
30526: PPUSH
30527: LD_INT 8
30529: PPUSH
30530: CALL_OW 336
// end ; 4 :
30534: GO 30640
30536: LD_INT 4
30538: DOUBLE
30539: EQUAL
30540: IFTRUE 30544
30542: GO 30618
30544: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30545: LD_ADDR_VAR 0 2
30549: PUSH
30550: LD_INT 22
30552: PUSH
30553: LD_OWVAR 2
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 30
30564: PUSH
30565: LD_INT 29
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PPUSH
30576: CALL_OW 69
30580: ST_TO_ADDR
// if not tmp then
30581: LD_VAR 0 2
30585: NOT
30586: IFFALSE 30590
// exit ;
30588: GO 30640
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30590: LD_VAR 0 2
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30603: LD_VAR 0 2
30607: PUSH
30608: LD_INT 1
30610: ARRAY
30611: PPUSH
30612: CALL_OW 65
// end ; 5 .. 7 :
30616: GO 30640
30618: LD_INT 5
30620: DOUBLE
30621: GREATEREQUAL
30622: IFFALSE 30630
30624: LD_INT 7
30626: DOUBLE
30627: LESSEQUAL
30628: IFTRUE 30632
30630: GO 30639
30632: POP
// StreamSibBomb ; end ;
30633: CALL 26877 0 0
30637: GO 30640
30639: POP
// end ;
30640: PPOPN 3
30642: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30643: LD_EXP 65
30647: PUSH
30648: LD_EXP 115
30652: AND
30653: IFFALSE 30809
30655: GO 30657
30657: DISABLE
30658: LD_INT 0
30660: PPUSH
30661: PPUSH
30662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30663: LD_ADDR_VAR 0 2
30667: PUSH
30668: LD_INT 81
30670: PUSH
30671: LD_OWVAR 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: LD_INT 21
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 21
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: LIST
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PPUSH
30712: CALL_OW 69
30716: ST_TO_ADDR
// if not tmp then
30717: LD_VAR 0 2
30721: NOT
30722: IFFALSE 30726
// exit ;
30724: GO 30809
// p := 0 ;
30726: LD_ADDR_VAR 0 3
30730: PUSH
30731: LD_INT 0
30733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30734: LD_INT 35
30736: PPUSH
30737: CALL_OW 67
// p := p + 1 ;
30741: LD_ADDR_VAR 0 3
30745: PUSH
30746: LD_VAR 0 3
30750: PUSH
30751: LD_INT 1
30753: PLUS
30754: ST_TO_ADDR
// for i in tmp do
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: LD_VAR 0 2
30764: PUSH
30765: FOR_IN
30766: IFFALSE 30797
// if GetLives ( i ) < 1000 then
30768: LD_VAR 0 1
30772: PPUSH
30773: CALL_OW 256
30777: PUSH
30778: LD_INT 1000
30780: LESS
30781: IFFALSE 30795
// SetLives ( i , 1000 ) ;
30783: LD_VAR 0 1
30787: PPUSH
30788: LD_INT 1000
30790: PPUSH
30791: CALL_OW 234
30795: GO 30765
30797: POP
30798: POP
// until p > 20 ;
30799: LD_VAR 0 3
30803: PUSH
30804: LD_INT 20
30806: GREATER
30807: IFFALSE 30734
// end ;
30809: PPOPN 3
30811: END
// every 0 0$1 trigger StreamModeActive and sTime do
30812: LD_EXP 65
30816: PUSH
30817: LD_EXP 116
30821: AND
30822: IFFALSE 30857
30824: GO 30826
30826: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30827: LD_INT 28
30829: PPUSH
30830: LD_OWVAR 2
30834: PPUSH
30835: LD_INT 2
30837: PPUSH
30838: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30842: LD_INT 30
30844: PPUSH
30845: LD_OWVAR 2
30849: PPUSH
30850: LD_INT 2
30852: PPUSH
30853: CALL_OW 322
// end ;
30857: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30858: LD_EXP 65
30862: PUSH
30863: LD_EXP 117
30867: AND
30868: IFFALSE 30989
30870: GO 30872
30872: DISABLE
30873: LD_INT 0
30875: PPUSH
30876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30877: LD_ADDR_VAR 0 2
30881: PUSH
30882: LD_INT 22
30884: PUSH
30885: LD_OWVAR 2
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 21
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 3
30906: PUSH
30907: LD_INT 23
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: PPUSH
30926: CALL_OW 69
30930: ST_TO_ADDR
// if not tmp then
30931: LD_VAR 0 2
30935: NOT
30936: IFFALSE 30940
// exit ;
30938: GO 30989
// for i in tmp do
30940: LD_ADDR_VAR 0 1
30944: PUSH
30945: LD_VAR 0 2
30949: PUSH
30950: FOR_IN
30951: IFFALSE 30987
// begin if Crawls ( i ) then
30953: LD_VAR 0 1
30957: PPUSH
30958: CALL_OW 318
30962: IFFALSE 30973
// ComWalk ( i ) ;
30964: LD_VAR 0 1
30968: PPUSH
30969: CALL_OW 138
// SetClass ( i , 2 ) ;
30973: LD_VAR 0 1
30977: PPUSH
30978: LD_INT 2
30980: PPUSH
30981: CALL_OW 336
// end ;
30985: GO 30950
30987: POP
30988: POP
// end ;
30989: PPOPN 2
30991: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30992: LD_EXP 65
30996: PUSH
30997: LD_EXP 118
31001: AND
31002: IFFALSE 31290
31004: GO 31006
31006: DISABLE
31007: LD_INT 0
31009: PPUSH
31010: PPUSH
31011: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31012: LD_OWVAR 2
31016: PPUSH
31017: LD_INT 9
31019: PPUSH
31020: LD_INT 1
31022: PPUSH
31023: LD_INT 1
31025: PPUSH
31026: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31030: LD_INT 9
31032: PPUSH
31033: LD_OWVAR 2
31037: PPUSH
31038: CALL_OW 343
// uc_side := 9 ;
31042: LD_ADDR_OWVAR 20
31046: PUSH
31047: LD_INT 9
31049: ST_TO_ADDR
// uc_nation := 2 ;
31050: LD_ADDR_OWVAR 21
31054: PUSH
31055: LD_INT 2
31057: ST_TO_ADDR
// hc_name := Dark Warrior ;
31058: LD_ADDR_OWVAR 26
31062: PUSH
31063: LD_STRING Dark Warrior
31065: ST_TO_ADDR
// hc_gallery :=  ;
31066: LD_ADDR_OWVAR 33
31070: PUSH
31071: LD_STRING 
31073: ST_TO_ADDR
// hc_noskilllimit := true ;
31074: LD_ADDR_OWVAR 76
31078: PUSH
31079: LD_INT 1
31081: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31082: LD_ADDR_OWVAR 31
31086: PUSH
31087: LD_INT 30
31089: PUSH
31090: LD_INT 30
31092: PUSH
31093: LD_INT 30
31095: PUSH
31096: LD_INT 30
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: ST_TO_ADDR
// un := CreateHuman ;
31105: LD_ADDR_VAR 0 3
31109: PUSH
31110: CALL_OW 44
31114: ST_TO_ADDR
// hc_noskilllimit := false ;
31115: LD_ADDR_OWVAR 76
31119: PUSH
31120: LD_INT 0
31122: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31123: LD_VAR 0 3
31127: PPUSH
31128: LD_INT 1
31130: PPUSH
31131: CALL_OW 51
// ToLua ( playRanger() ) ;
31135: LD_STRING playRanger()
31137: PPUSH
31138: CALL_OW 559
// p := 0 ;
31142: LD_ADDR_VAR 0 2
31146: PUSH
31147: LD_INT 0
31149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31150: LD_INT 35
31152: PPUSH
31153: CALL_OW 67
// p := p + 1 ;
31157: LD_ADDR_VAR 0 2
31161: PUSH
31162: LD_VAR 0 2
31166: PUSH
31167: LD_INT 1
31169: PLUS
31170: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31171: LD_VAR 0 3
31175: PPUSH
31176: CALL_OW 256
31180: PUSH
31181: LD_INT 1000
31183: LESS
31184: IFFALSE 31198
// SetLives ( un , 1000 ) ;
31186: LD_VAR 0 3
31190: PPUSH
31191: LD_INT 1000
31193: PPUSH
31194: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31198: LD_VAR 0 3
31202: PPUSH
31203: LD_INT 81
31205: PUSH
31206: LD_OWVAR 2
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 91
31217: PUSH
31218: LD_VAR 0 3
31222: PUSH
31223: LD_INT 30
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PPUSH
31235: CALL_OW 69
31239: PPUSH
31240: LD_VAR 0 3
31244: PPUSH
31245: CALL_OW 74
31249: PPUSH
31250: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31254: LD_VAR 0 2
31258: PUSH
31259: LD_INT 80
31261: GREATER
31262: PUSH
31263: LD_VAR 0 3
31267: PPUSH
31268: CALL_OW 301
31272: OR
31273: IFFALSE 31150
// if un then
31275: LD_VAR 0 3
31279: IFFALSE 31290
// RemoveUnit ( un ) ;
31281: LD_VAR 0 3
31285: PPUSH
31286: CALL_OW 64
// end ;
31290: PPOPN 3
31292: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31293: LD_EXP 119
31297: IFFALSE 31413
31299: GO 31301
31301: DISABLE
31302: LD_INT 0
31304: PPUSH
31305: PPUSH
31306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31307: LD_ADDR_VAR 0 2
31311: PUSH
31312: LD_INT 81
31314: PUSH
31315: LD_OWVAR 2
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 21
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PPUSH
31338: CALL_OW 69
31342: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31343: LD_STRING playComputer()
31345: PPUSH
31346: CALL_OW 559
// if not tmp then
31350: LD_VAR 0 2
31354: NOT
31355: IFFALSE 31359
// exit ;
31357: GO 31413
// for i in tmp do
31359: LD_ADDR_VAR 0 1
31363: PUSH
31364: LD_VAR 0 2
31368: PUSH
31369: FOR_IN
31370: IFFALSE 31411
// for j := 1 to 4 do
31372: LD_ADDR_VAR 0 3
31376: PUSH
31377: DOUBLE
31378: LD_INT 1
31380: DEC
31381: ST_TO_ADDR
31382: LD_INT 4
31384: PUSH
31385: FOR_TO
31386: IFFALSE 31407
// SetSkill ( i , j , 10 ) ;
31388: LD_VAR 0 1
31392: PPUSH
31393: LD_VAR 0 3
31397: PPUSH
31398: LD_INT 10
31400: PPUSH
31401: CALL_OW 237
31405: GO 31385
31407: POP
31408: POP
31409: GO 31369
31411: POP
31412: POP
// end ;
31413: PPOPN 3
31415: END
// every 0 0$1 trigger s30 do var i , tmp ;
31416: LD_EXP 120
31420: IFFALSE 31489
31422: GO 31424
31424: DISABLE
31425: LD_INT 0
31427: PPUSH
31428: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31429: LD_ADDR_VAR 0 2
31433: PUSH
31434: LD_INT 22
31436: PUSH
31437: LD_OWVAR 2
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PPUSH
31446: CALL_OW 69
31450: ST_TO_ADDR
// if not tmp then
31451: LD_VAR 0 2
31455: NOT
31456: IFFALSE 31460
// exit ;
31458: GO 31489
// for i in tmp do
31460: LD_ADDR_VAR 0 1
31464: PUSH
31465: LD_VAR 0 2
31469: PUSH
31470: FOR_IN
31471: IFFALSE 31487
// SetLives ( i , 300 ) ;
31473: LD_VAR 0 1
31477: PPUSH
31478: LD_INT 300
31480: PPUSH
31481: CALL_OW 234
31485: GO 31470
31487: POP
31488: POP
// end ;
31489: PPOPN 2
31491: END
// every 0 0$1 trigger s60 do var i , tmp ;
31492: LD_EXP 121
31496: IFFALSE 31565
31498: GO 31500
31500: DISABLE
31501: LD_INT 0
31503: PPUSH
31504: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31505: LD_ADDR_VAR 0 2
31509: PUSH
31510: LD_INT 22
31512: PUSH
31513: LD_OWVAR 2
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PPUSH
31522: CALL_OW 69
31526: ST_TO_ADDR
// if not tmp then
31527: LD_VAR 0 2
31531: NOT
31532: IFFALSE 31536
// exit ;
31534: GO 31565
// for i in tmp do
31536: LD_ADDR_VAR 0 1
31540: PUSH
31541: LD_VAR 0 2
31545: PUSH
31546: FOR_IN
31547: IFFALSE 31563
// SetLives ( i , 600 ) ;
31549: LD_VAR 0 1
31553: PPUSH
31554: LD_INT 600
31556: PPUSH
31557: CALL_OW 234
31561: GO 31546
31563: POP
31564: POP
// end ;
31565: PPOPN 2
31567: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31568: LD_INT 0
31570: PPUSH
// case cmd of 301 :
31571: LD_VAR 0 1
31575: PUSH
31576: LD_INT 301
31578: DOUBLE
31579: EQUAL
31580: IFTRUE 31584
31582: GO 31616
31584: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31585: LD_VAR 0 6
31589: PPUSH
31590: LD_VAR 0 7
31594: PPUSH
31595: LD_VAR 0 8
31599: PPUSH
31600: LD_VAR 0 4
31604: PPUSH
31605: LD_VAR 0 5
31609: PPUSH
31610: CALL 32817 0 5
31614: GO 31737
31616: LD_INT 302
31618: DOUBLE
31619: EQUAL
31620: IFTRUE 31624
31622: GO 31661
31624: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31625: LD_VAR 0 6
31629: PPUSH
31630: LD_VAR 0 7
31634: PPUSH
31635: LD_VAR 0 8
31639: PPUSH
31640: LD_VAR 0 9
31644: PPUSH
31645: LD_VAR 0 4
31649: PPUSH
31650: LD_VAR 0 5
31654: PPUSH
31655: CALL 32908 0 6
31659: GO 31737
31661: LD_INT 303
31663: DOUBLE
31664: EQUAL
31665: IFTRUE 31669
31667: GO 31706
31669: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31670: LD_VAR 0 6
31674: PPUSH
31675: LD_VAR 0 7
31679: PPUSH
31680: LD_VAR 0 8
31684: PPUSH
31685: LD_VAR 0 9
31689: PPUSH
31690: LD_VAR 0 4
31694: PPUSH
31695: LD_VAR 0 5
31699: PPUSH
31700: CALL 31742 0 6
31704: GO 31737
31706: LD_INT 304
31708: DOUBLE
31709: EQUAL
31710: IFTRUE 31714
31712: GO 31736
31714: POP
// hHackTeleport ( unit , x , y ) ; end ;
31715: LD_VAR 0 2
31719: PPUSH
31720: LD_VAR 0 4
31724: PPUSH
31725: LD_VAR 0 5
31729: PPUSH
31730: CALL 33501 0 3
31734: GO 31737
31736: POP
// end ;
31737: LD_VAR 0 12
31741: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31742: LD_INT 0
31744: PPUSH
31745: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31746: LD_VAR 0 1
31750: PUSH
31751: LD_INT 1
31753: LESS
31754: PUSH
31755: LD_VAR 0 1
31759: PUSH
31760: LD_INT 3
31762: GREATER
31763: OR
31764: PUSH
31765: LD_VAR 0 5
31769: PPUSH
31770: LD_VAR 0 6
31774: PPUSH
31775: CALL_OW 428
31779: OR
31780: IFFALSE 31784
// exit ;
31782: GO 32504
// uc_side := your_side ;
31784: LD_ADDR_OWVAR 20
31788: PUSH
31789: LD_OWVAR 2
31793: ST_TO_ADDR
// uc_nation := nation ;
31794: LD_ADDR_OWVAR 21
31798: PUSH
31799: LD_VAR 0 1
31803: ST_TO_ADDR
// bc_level = 1 ;
31804: LD_ADDR_OWVAR 43
31808: PUSH
31809: LD_INT 1
31811: ST_TO_ADDR
// case btype of 1 :
31812: LD_VAR 0 2
31816: PUSH
31817: LD_INT 1
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31836
31825: POP
// bc_type := b_depot ; 2 :
31826: LD_ADDR_OWVAR 42
31830: PUSH
31831: LD_INT 0
31833: ST_TO_ADDR
31834: GO 32448
31836: LD_INT 2
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31855
31844: POP
// bc_type := b_warehouse ; 3 :
31845: LD_ADDR_OWVAR 42
31849: PUSH
31850: LD_INT 1
31852: ST_TO_ADDR
31853: GO 32448
31855: LD_INT 3
31857: DOUBLE
31858: EQUAL
31859: IFTRUE 31863
31861: GO 31874
31863: POP
// bc_type := b_lab ; 4 .. 9 :
31864: LD_ADDR_OWVAR 42
31868: PUSH
31869: LD_INT 6
31871: ST_TO_ADDR
31872: GO 32448
31874: LD_INT 4
31876: DOUBLE
31877: GREATEREQUAL
31878: IFFALSE 31886
31880: LD_INT 9
31882: DOUBLE
31883: LESSEQUAL
31884: IFTRUE 31888
31886: GO 31940
31888: POP
// begin bc_type := b_lab_half ;
31889: LD_ADDR_OWVAR 42
31893: PUSH
31894: LD_INT 7
31896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31897: LD_ADDR_OWVAR 44
31901: PUSH
31902: LD_INT 10
31904: PUSH
31905: LD_INT 11
31907: PUSH
31908: LD_INT 12
31910: PUSH
31911: LD_INT 15
31913: PUSH
31914: LD_INT 14
31916: PUSH
31917: LD_INT 13
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: PUSH
31928: LD_VAR 0 2
31932: PUSH
31933: LD_INT 3
31935: MINUS
31936: ARRAY
31937: ST_TO_ADDR
// end ; 10 .. 13 :
31938: GO 32448
31940: LD_INT 10
31942: DOUBLE
31943: GREATEREQUAL
31944: IFFALSE 31952
31946: LD_INT 13
31948: DOUBLE
31949: LESSEQUAL
31950: IFTRUE 31954
31952: GO 32031
31954: POP
// begin bc_type := b_lab_full ;
31955: LD_ADDR_OWVAR 42
31959: PUSH
31960: LD_INT 8
31962: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31963: LD_ADDR_OWVAR 44
31967: PUSH
31968: LD_INT 10
31970: PUSH
31971: LD_INT 12
31973: PUSH
31974: LD_INT 14
31976: PUSH
31977: LD_INT 13
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: PUSH
31986: LD_VAR 0 2
31990: PUSH
31991: LD_INT 9
31993: MINUS
31994: ARRAY
31995: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31996: LD_ADDR_OWVAR 45
32000: PUSH
32001: LD_INT 11
32003: PUSH
32004: LD_INT 15
32006: PUSH
32007: LD_INT 12
32009: PUSH
32010: LD_INT 15
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: PUSH
32019: LD_VAR 0 2
32023: PUSH
32024: LD_INT 9
32026: MINUS
32027: ARRAY
32028: ST_TO_ADDR
// end ; 14 :
32029: GO 32448
32031: LD_INT 14
32033: DOUBLE
32034: EQUAL
32035: IFTRUE 32039
32037: GO 32050
32039: POP
// bc_type := b_workshop ; 15 :
32040: LD_ADDR_OWVAR 42
32044: PUSH
32045: LD_INT 2
32047: ST_TO_ADDR
32048: GO 32448
32050: LD_INT 15
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32069
32058: POP
// bc_type := b_factory ; 16 :
32059: LD_ADDR_OWVAR 42
32063: PUSH
32064: LD_INT 3
32066: ST_TO_ADDR
32067: GO 32448
32069: LD_INT 16
32071: DOUBLE
32072: EQUAL
32073: IFTRUE 32077
32075: GO 32088
32077: POP
// bc_type := b_ext_gun ; 17 :
32078: LD_ADDR_OWVAR 42
32082: PUSH
32083: LD_INT 17
32085: ST_TO_ADDR
32086: GO 32448
32088: LD_INT 17
32090: DOUBLE
32091: EQUAL
32092: IFTRUE 32096
32094: GO 32124
32096: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32097: LD_ADDR_OWVAR 42
32101: PUSH
32102: LD_INT 19
32104: PUSH
32105: LD_INT 23
32107: PUSH
32108: LD_INT 19
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: PUSH
32116: LD_VAR 0 1
32120: ARRAY
32121: ST_TO_ADDR
32122: GO 32448
32124: LD_INT 18
32126: DOUBLE
32127: EQUAL
32128: IFTRUE 32132
32130: GO 32143
32132: POP
// bc_type := b_ext_radar ; 19 :
32133: LD_ADDR_OWVAR 42
32137: PUSH
32138: LD_INT 20
32140: ST_TO_ADDR
32141: GO 32448
32143: LD_INT 19
32145: DOUBLE
32146: EQUAL
32147: IFTRUE 32151
32149: GO 32162
32151: POP
// bc_type := b_ext_radio ; 20 :
32152: LD_ADDR_OWVAR 42
32156: PUSH
32157: LD_INT 22
32159: ST_TO_ADDR
32160: GO 32448
32162: LD_INT 20
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32170
32168: GO 32181
32170: POP
// bc_type := b_ext_siberium ; 21 :
32171: LD_ADDR_OWVAR 42
32175: PUSH
32176: LD_INT 21
32178: ST_TO_ADDR
32179: GO 32448
32181: LD_INT 21
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32200
32189: POP
// bc_type := b_ext_computer ; 22 :
32190: LD_ADDR_OWVAR 42
32194: PUSH
32195: LD_INT 24
32197: ST_TO_ADDR
32198: GO 32448
32200: LD_INT 22
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32219
32208: POP
// bc_type := b_ext_track ; 23 :
32209: LD_ADDR_OWVAR 42
32213: PUSH
32214: LD_INT 16
32216: ST_TO_ADDR
32217: GO 32448
32219: LD_INT 23
32221: DOUBLE
32222: EQUAL
32223: IFTRUE 32227
32225: GO 32238
32227: POP
// bc_type := b_ext_laser ; 24 :
32228: LD_ADDR_OWVAR 42
32232: PUSH
32233: LD_INT 25
32235: ST_TO_ADDR
32236: GO 32448
32238: LD_INT 24
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32257
32246: POP
// bc_type := b_control_tower ; 25 :
32247: LD_ADDR_OWVAR 42
32251: PUSH
32252: LD_INT 36
32254: ST_TO_ADDR
32255: GO 32448
32257: LD_INT 25
32259: DOUBLE
32260: EQUAL
32261: IFTRUE 32265
32263: GO 32276
32265: POP
// bc_type := b_breastwork ; 26 :
32266: LD_ADDR_OWVAR 42
32270: PUSH
32271: LD_INT 31
32273: ST_TO_ADDR
32274: GO 32448
32276: LD_INT 26
32278: DOUBLE
32279: EQUAL
32280: IFTRUE 32284
32282: GO 32295
32284: POP
// bc_type := b_bunker ; 27 :
32285: LD_ADDR_OWVAR 42
32289: PUSH
32290: LD_INT 32
32292: ST_TO_ADDR
32293: GO 32448
32295: LD_INT 27
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32303
32301: GO 32314
32303: POP
// bc_type := b_turret ; 28 :
32304: LD_ADDR_OWVAR 42
32308: PUSH
32309: LD_INT 33
32311: ST_TO_ADDR
32312: GO 32448
32314: LD_INT 28
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32333
32322: POP
// bc_type := b_armoury ; 29 :
32323: LD_ADDR_OWVAR 42
32327: PUSH
32328: LD_INT 4
32330: ST_TO_ADDR
32331: GO 32448
32333: LD_INT 29
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32341
32339: GO 32352
32341: POP
// bc_type := b_barracks ; 30 :
32342: LD_ADDR_OWVAR 42
32346: PUSH
32347: LD_INT 5
32349: ST_TO_ADDR
32350: GO 32448
32352: LD_INT 30
32354: DOUBLE
32355: EQUAL
32356: IFTRUE 32360
32358: GO 32371
32360: POP
// bc_type := b_solar_power ; 31 :
32361: LD_ADDR_OWVAR 42
32365: PUSH
32366: LD_INT 27
32368: ST_TO_ADDR
32369: GO 32448
32371: LD_INT 31
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32390
32379: POP
// bc_type := b_oil_power ; 32 :
32380: LD_ADDR_OWVAR 42
32384: PUSH
32385: LD_INT 26
32387: ST_TO_ADDR
32388: GO 32448
32390: LD_INT 32
32392: DOUBLE
32393: EQUAL
32394: IFTRUE 32398
32396: GO 32409
32398: POP
// bc_type := b_siberite_power ; 33 :
32399: LD_ADDR_OWVAR 42
32403: PUSH
32404: LD_INT 28
32406: ST_TO_ADDR
32407: GO 32448
32409: LD_INT 33
32411: DOUBLE
32412: EQUAL
32413: IFTRUE 32417
32415: GO 32428
32417: POP
// bc_type := b_oil_mine ; 34 :
32418: LD_ADDR_OWVAR 42
32422: PUSH
32423: LD_INT 29
32425: ST_TO_ADDR
32426: GO 32448
32428: LD_INT 34
32430: DOUBLE
32431: EQUAL
32432: IFTRUE 32436
32434: GO 32447
32436: POP
// bc_type := b_siberite_mine ; end ;
32437: LD_ADDR_OWVAR 42
32441: PUSH
32442: LD_INT 30
32444: ST_TO_ADDR
32445: GO 32448
32447: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32448: LD_ADDR_VAR 0 8
32452: PUSH
32453: LD_VAR 0 5
32457: PPUSH
32458: LD_VAR 0 6
32462: PPUSH
32463: LD_VAR 0 3
32467: PPUSH
32468: CALL_OW 47
32472: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32473: LD_OWVAR 42
32477: PUSH
32478: LD_INT 32
32480: PUSH
32481: LD_INT 33
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: IN
32488: IFFALSE 32504
// PlaceWeaponTurret ( b , weapon ) ;
32490: LD_VAR 0 8
32494: PPUSH
32495: LD_VAR 0 4
32499: PPUSH
32500: CALL_OW 431
// end ;
32504: LD_VAR 0 7
32508: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32509: LD_INT 0
32511: PPUSH
32512: PPUSH
32513: PPUSH
32514: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32515: LD_ADDR_VAR 0 4
32519: PUSH
32520: LD_INT 22
32522: PUSH
32523: LD_OWVAR 2
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 30
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 30
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PPUSH
32564: CALL_OW 69
32568: ST_TO_ADDR
// if not tmp then
32569: LD_VAR 0 4
32573: NOT
32574: IFFALSE 32578
// exit ;
32576: GO 32637
// for i in tmp do
32578: LD_ADDR_VAR 0 2
32582: PUSH
32583: LD_VAR 0 4
32587: PUSH
32588: FOR_IN
32589: IFFALSE 32635
// for j = 1 to 3 do
32591: LD_ADDR_VAR 0 3
32595: PUSH
32596: DOUBLE
32597: LD_INT 1
32599: DEC
32600: ST_TO_ADDR
32601: LD_INT 3
32603: PUSH
32604: FOR_TO
32605: IFFALSE 32631
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32607: LD_VAR 0 2
32611: PPUSH
32612: CALL_OW 274
32616: PPUSH
32617: LD_VAR 0 3
32621: PPUSH
32622: LD_INT 99999
32624: PPUSH
32625: CALL_OW 277
32629: GO 32604
32631: POP
32632: POP
32633: GO 32588
32635: POP
32636: POP
// end ;
32637: LD_VAR 0 1
32641: RET
// export function hHackSetLevel10 ; var i , j ; begin
32642: LD_INT 0
32644: PPUSH
32645: PPUSH
32646: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32647: LD_ADDR_VAR 0 2
32651: PUSH
32652: LD_INT 21
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PPUSH
32662: CALL_OW 69
32666: PUSH
32667: FOR_IN
32668: IFFALSE 32720
// if IsSelected ( i ) then
32670: LD_VAR 0 2
32674: PPUSH
32675: CALL_OW 306
32679: IFFALSE 32718
// begin for j := 1 to 4 do
32681: LD_ADDR_VAR 0 3
32685: PUSH
32686: DOUBLE
32687: LD_INT 1
32689: DEC
32690: ST_TO_ADDR
32691: LD_INT 4
32693: PUSH
32694: FOR_TO
32695: IFFALSE 32716
// SetSkill ( i , j , 10 ) ;
32697: LD_VAR 0 2
32701: PPUSH
32702: LD_VAR 0 3
32706: PPUSH
32707: LD_INT 10
32709: PPUSH
32710: CALL_OW 237
32714: GO 32694
32716: POP
32717: POP
// end ;
32718: GO 32667
32720: POP
32721: POP
// end ;
32722: LD_VAR 0 1
32726: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32727: LD_INT 0
32729: PPUSH
32730: PPUSH
32731: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32732: LD_ADDR_VAR 0 2
32736: PUSH
32737: LD_INT 22
32739: PUSH
32740: LD_OWVAR 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 21
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PPUSH
32763: CALL_OW 69
32767: PUSH
32768: FOR_IN
32769: IFFALSE 32810
// begin for j := 1 to 4 do
32771: LD_ADDR_VAR 0 3
32775: PUSH
32776: DOUBLE
32777: LD_INT 1
32779: DEC
32780: ST_TO_ADDR
32781: LD_INT 4
32783: PUSH
32784: FOR_TO
32785: IFFALSE 32806
// SetSkill ( i , j , 10 ) ;
32787: LD_VAR 0 2
32791: PPUSH
32792: LD_VAR 0 3
32796: PPUSH
32797: LD_INT 10
32799: PPUSH
32800: CALL_OW 237
32804: GO 32784
32806: POP
32807: POP
// end ;
32808: GO 32768
32810: POP
32811: POP
// end ;
32812: LD_VAR 0 1
32816: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32817: LD_INT 0
32819: PPUSH
// uc_side := your_side ;
32820: LD_ADDR_OWVAR 20
32824: PUSH
32825: LD_OWVAR 2
32829: ST_TO_ADDR
// uc_nation := nation ;
32830: LD_ADDR_OWVAR 21
32834: PUSH
32835: LD_VAR 0 1
32839: ST_TO_ADDR
// InitHc ;
32840: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32844: LD_INT 0
32846: PPUSH
32847: LD_VAR 0 2
32851: PPUSH
32852: LD_VAR 0 3
32856: PPUSH
32857: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32861: LD_VAR 0 4
32865: PPUSH
32866: LD_VAR 0 5
32870: PPUSH
32871: CALL_OW 428
32875: PUSH
32876: LD_INT 0
32878: EQUAL
32879: IFFALSE 32903
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32881: CALL_OW 44
32885: PPUSH
32886: LD_VAR 0 4
32890: PPUSH
32891: LD_VAR 0 5
32895: PPUSH
32896: LD_INT 1
32898: PPUSH
32899: CALL_OW 48
// end ;
32903: LD_VAR 0 6
32907: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32908: LD_INT 0
32910: PPUSH
32911: PPUSH
// uc_side := your_side ;
32912: LD_ADDR_OWVAR 20
32916: PUSH
32917: LD_OWVAR 2
32921: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32922: LD_VAR 0 1
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: LD_INT 4
32938: PUSH
32939: LD_INT 5
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: IN
32949: IFFALSE 32961
// uc_nation := nation_american else
32951: LD_ADDR_OWVAR 21
32955: PUSH
32956: LD_INT 1
32958: ST_TO_ADDR
32959: GO 33004
// if chassis in [ 11 , 12 , 13 , 14 ] then
32961: LD_VAR 0 1
32965: PUSH
32966: LD_INT 11
32968: PUSH
32969: LD_INT 12
32971: PUSH
32972: LD_INT 13
32974: PUSH
32975: LD_INT 14
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: IN
32984: IFFALSE 32996
// uc_nation := nation_arabian else
32986: LD_ADDR_OWVAR 21
32990: PUSH
32991: LD_INT 2
32993: ST_TO_ADDR
32994: GO 33004
// uc_nation := nation_russian ;
32996: LD_ADDR_OWVAR 21
33000: PUSH
33001: LD_INT 3
33003: ST_TO_ADDR
// vc_chassis := chassis ;
33004: LD_ADDR_OWVAR 37
33008: PUSH
33009: LD_VAR 0 1
33013: ST_TO_ADDR
// vc_engine := engine ;
33014: LD_ADDR_OWVAR 39
33018: PUSH
33019: LD_VAR 0 2
33023: ST_TO_ADDR
// vc_control := control ;
33024: LD_ADDR_OWVAR 38
33028: PUSH
33029: LD_VAR 0 3
33033: ST_TO_ADDR
// vc_weapon := weapon ;
33034: LD_ADDR_OWVAR 40
33038: PUSH
33039: LD_VAR 0 4
33043: ST_TO_ADDR
// un := CreateVehicle ;
33044: LD_ADDR_VAR 0 8
33048: PUSH
33049: CALL_OW 45
33053: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33054: LD_VAR 0 8
33058: PPUSH
33059: LD_INT 0
33061: PPUSH
33062: LD_INT 5
33064: PPUSH
33065: CALL_OW 12
33069: PPUSH
33070: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33074: LD_VAR 0 8
33078: PPUSH
33079: LD_VAR 0 5
33083: PPUSH
33084: LD_VAR 0 6
33088: PPUSH
33089: LD_INT 1
33091: PPUSH
33092: CALL_OW 48
// end ;
33096: LD_VAR 0 7
33100: RET
// export hInvincible ; every 1 do
33101: GO 33103
33103: DISABLE
// hInvincible := [ ] ;
33104: LD_ADDR_EXP 122
33108: PUSH
33109: EMPTY
33110: ST_TO_ADDR
33111: END
// every 10 do var i ;
33112: GO 33114
33114: DISABLE
33115: LD_INT 0
33117: PPUSH
// begin enable ;
33118: ENABLE
// if not hInvincible then
33119: LD_EXP 122
33123: NOT
33124: IFFALSE 33128
// exit ;
33126: GO 33172
// for i in hInvincible do
33128: LD_ADDR_VAR 0 1
33132: PUSH
33133: LD_EXP 122
33137: PUSH
33138: FOR_IN
33139: IFFALSE 33170
// if GetLives ( i ) < 1000 then
33141: LD_VAR 0 1
33145: PPUSH
33146: CALL_OW 256
33150: PUSH
33151: LD_INT 1000
33153: LESS
33154: IFFALSE 33168
// SetLives ( i , 1000 ) ;
33156: LD_VAR 0 1
33160: PPUSH
33161: LD_INT 1000
33163: PPUSH
33164: CALL_OW 234
33168: GO 33138
33170: POP
33171: POP
// end ;
33172: PPOPN 1
33174: END
// export function hHackInvincible ; var i ; begin
33175: LD_INT 0
33177: PPUSH
33178: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33179: LD_ADDR_VAR 0 2
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 21
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 21
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: PPUSH
33212: CALL_OW 69
33216: PUSH
33217: FOR_IN
33218: IFFALSE 33279
// if IsSelected ( i ) then
33220: LD_VAR 0 2
33224: PPUSH
33225: CALL_OW 306
33229: IFFALSE 33277
// begin if i in hInvincible then
33231: LD_VAR 0 2
33235: PUSH
33236: LD_EXP 122
33240: IN
33241: IFFALSE 33261
// hInvincible := hInvincible diff i else
33243: LD_ADDR_EXP 122
33247: PUSH
33248: LD_EXP 122
33252: PUSH
33253: LD_VAR 0 2
33257: DIFF
33258: ST_TO_ADDR
33259: GO 33277
// hInvincible := hInvincible union i ;
33261: LD_ADDR_EXP 122
33265: PUSH
33266: LD_EXP 122
33270: PUSH
33271: LD_VAR 0 2
33275: UNION
33276: ST_TO_ADDR
// end ;
33277: GO 33217
33279: POP
33280: POP
// end ;
33281: LD_VAR 0 1
33285: RET
// export function hHackInvisible ; var i , j ; begin
33286: LD_INT 0
33288: PPUSH
33289: PPUSH
33290: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33291: LD_ADDR_VAR 0 2
33295: PUSH
33296: LD_INT 21
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PPUSH
33306: CALL_OW 69
33310: PUSH
33311: FOR_IN
33312: IFFALSE 33336
// if IsSelected ( i ) then
33314: LD_VAR 0 2
33318: PPUSH
33319: CALL_OW 306
33323: IFFALSE 33334
// ComForceInvisible ( i ) ;
33325: LD_VAR 0 2
33329: PPUSH
33330: CALL_OW 496
33334: GO 33311
33336: POP
33337: POP
// end ;
33338: LD_VAR 0 1
33342: RET
// export function hHackChangeYourSide ; begin
33343: LD_INT 0
33345: PPUSH
// if your_side = 8 then
33346: LD_OWVAR 2
33350: PUSH
33351: LD_INT 8
33353: EQUAL
33354: IFFALSE 33366
// your_side := 0 else
33356: LD_ADDR_OWVAR 2
33360: PUSH
33361: LD_INT 0
33363: ST_TO_ADDR
33364: GO 33380
// your_side := your_side + 1 ;
33366: LD_ADDR_OWVAR 2
33370: PUSH
33371: LD_OWVAR 2
33375: PUSH
33376: LD_INT 1
33378: PLUS
33379: ST_TO_ADDR
// end ;
33380: LD_VAR 0 1
33384: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33385: LD_INT 0
33387: PPUSH
33388: PPUSH
33389: PPUSH
// for i in all_units do
33390: LD_ADDR_VAR 0 2
33394: PUSH
33395: LD_OWVAR 3
33399: PUSH
33400: FOR_IN
33401: IFFALSE 33479
// if IsSelected ( i ) then
33403: LD_VAR 0 2
33407: PPUSH
33408: CALL_OW 306
33412: IFFALSE 33477
// begin j := GetSide ( i ) ;
33414: LD_ADDR_VAR 0 3
33418: PUSH
33419: LD_VAR 0 2
33423: PPUSH
33424: CALL_OW 255
33428: ST_TO_ADDR
// if j = 8 then
33429: LD_VAR 0 3
33433: PUSH
33434: LD_INT 8
33436: EQUAL
33437: IFFALSE 33449
// j := 0 else
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: LD_INT 0
33446: ST_TO_ADDR
33447: GO 33463
// j := j + 1 ;
33449: LD_ADDR_VAR 0 3
33453: PUSH
33454: LD_VAR 0 3
33458: PUSH
33459: LD_INT 1
33461: PLUS
33462: ST_TO_ADDR
// SetSide ( i , j ) ;
33463: LD_VAR 0 2
33467: PPUSH
33468: LD_VAR 0 3
33472: PPUSH
33473: CALL_OW 235
// end ;
33477: GO 33400
33479: POP
33480: POP
// end ;
33481: LD_VAR 0 1
33485: RET
// export function hHackFog ; begin
33486: LD_INT 0
33488: PPUSH
// FogOff ( true ) ;
33489: LD_INT 1
33491: PPUSH
33492: CALL_OW 344
// end ;
33496: LD_VAR 0 1
33500: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33501: LD_INT 0
33503: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33504: LD_VAR 0 1
33508: PPUSH
33509: LD_VAR 0 2
33513: PPUSH
33514: LD_VAR 0 3
33518: PPUSH
33519: LD_INT 1
33521: PPUSH
33522: LD_INT 1
33524: PPUSH
33525: CALL_OW 483
// CenterOnXY ( x , y ) ;
33529: LD_VAR 0 2
33533: PPUSH
33534: LD_VAR 0 3
33538: PPUSH
33539: CALL_OW 84
// end ; end_of_file
33543: LD_VAR 0 4
33547: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33548: LD_INT 0
33550: PPUSH
33551: PPUSH
33552: PPUSH
33553: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33554: LD_VAR 0 1
33558: PPUSH
33559: CALL_OW 264
33563: PUSH
33564: LD_EXP 49
33568: EQUAL
33569: IFFALSE 33641
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33571: LD_INT 68
33573: PPUSH
33574: LD_VAR 0 1
33578: PPUSH
33579: CALL_OW 255
33583: PPUSH
33584: CALL_OW 321
33588: PUSH
33589: LD_INT 2
33591: EQUAL
33592: IFFALSE 33604
// eff := 70 else
33594: LD_ADDR_VAR 0 4
33598: PUSH
33599: LD_INT 70
33601: ST_TO_ADDR
33602: GO 33612
// eff := 30 ;
33604: LD_ADDR_VAR 0 4
33608: PUSH
33609: LD_INT 30
33611: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33612: LD_VAR 0 1
33616: PPUSH
33617: CALL_OW 250
33621: PPUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 251
33631: PPUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: CALL_OW 495
// end ; end ;
33641: LD_VAR 0 2
33645: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33646: LD_INT 0
33648: PPUSH
// end ;
33649: LD_VAR 0 4
33653: RET
// export function SOS_Command ( cmd ) ; begin
33654: LD_INT 0
33656: PPUSH
// end ;
33657: LD_VAR 0 2
33661: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33662: LD_INT 0
33664: PPUSH
// end ;
33665: LD_VAR 0 6
33669: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33670: LD_INT 0
33672: PPUSH
33673: PPUSH
// if not vehicle or not factory then
33674: LD_VAR 0 1
33678: NOT
33679: PUSH
33680: LD_VAR 0 2
33684: NOT
33685: OR
33686: IFFALSE 33690
// exit ;
33688: GO 33921
// if factoryWaypoints >= factory then
33690: LD_EXP 123
33694: PUSH
33695: LD_VAR 0 2
33699: GREATEREQUAL
33700: IFFALSE 33921
// if factoryWaypoints [ factory ] then
33702: LD_EXP 123
33706: PUSH
33707: LD_VAR 0 2
33711: ARRAY
33712: IFFALSE 33921
// begin if GetControl ( vehicle ) = control_manual then
33714: LD_VAR 0 1
33718: PPUSH
33719: CALL_OW 263
33723: PUSH
33724: LD_INT 1
33726: EQUAL
33727: IFFALSE 33808
// begin driver := IsDrivenBy ( vehicle ) ;
33729: LD_ADDR_VAR 0 4
33733: PUSH
33734: LD_VAR 0 1
33738: PPUSH
33739: CALL_OW 311
33743: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33744: LD_VAR 0 4
33748: PPUSH
33749: LD_EXP 123
33753: PUSH
33754: LD_VAR 0 2
33758: ARRAY
33759: PUSH
33760: LD_INT 3
33762: ARRAY
33763: PPUSH
33764: LD_EXP 123
33768: PUSH
33769: LD_VAR 0 2
33773: ARRAY
33774: PUSH
33775: LD_INT 4
33777: ARRAY
33778: PPUSH
33779: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33783: LD_VAR 0 4
33787: PPUSH
33788: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33792: LD_VAR 0 4
33796: PPUSH
33797: LD_VAR 0 2
33801: PPUSH
33802: CALL_OW 180
// end else
33806: GO 33921
// if GetControl ( vehicle ) = control_remote then
33808: LD_VAR 0 1
33812: PPUSH
33813: CALL_OW 263
33817: PUSH
33818: LD_INT 2
33820: EQUAL
33821: IFFALSE 33882
// begin wait ( 0 0$2 ) ;
33823: LD_INT 70
33825: PPUSH
33826: CALL_OW 67
// if Connect ( vehicle ) then
33830: LD_VAR 0 1
33834: PPUSH
33835: CALL 46145 0 1
33839: IFFALSE 33880
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33841: LD_VAR 0 1
33845: PPUSH
33846: LD_EXP 123
33850: PUSH
33851: LD_VAR 0 2
33855: ARRAY
33856: PUSH
33857: LD_INT 3
33859: ARRAY
33860: PPUSH
33861: LD_EXP 123
33865: PUSH
33866: LD_VAR 0 2
33870: ARRAY
33871: PUSH
33872: LD_INT 4
33874: ARRAY
33875: PPUSH
33876: CALL_OW 171
// end else
33880: GO 33921
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33882: LD_VAR 0 1
33886: PPUSH
33887: LD_EXP 123
33891: PUSH
33892: LD_VAR 0 2
33896: ARRAY
33897: PUSH
33898: LD_INT 3
33900: ARRAY
33901: PPUSH
33902: LD_EXP 123
33906: PUSH
33907: LD_VAR 0 2
33911: ARRAY
33912: PUSH
33913: LD_INT 4
33915: ARRAY
33916: PPUSH
33917: CALL_OW 171
// end ; end ;
33921: LD_VAR 0 3
33925: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33926: LD_INT 0
33928: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33929: LD_VAR 0 1
33933: PUSH
33934: LD_INT 250
33936: EQUAL
33937: PUSH
33938: LD_VAR 0 2
33942: PPUSH
33943: CALL_OW 264
33947: PUSH
33948: LD_EXP 52
33952: EQUAL
33953: AND
33954: IFFALSE 33975
// MinerPlaceMine ( unit , x , y ) ;
33956: LD_VAR 0 2
33960: PPUSH
33961: LD_VAR 0 4
33965: PPUSH
33966: LD_VAR 0 5
33970: PPUSH
33971: CALL 36703 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33975: LD_VAR 0 1
33979: PUSH
33980: LD_INT 251
33982: EQUAL
33983: PUSH
33984: LD_VAR 0 2
33988: PPUSH
33989: CALL_OW 264
33993: PUSH
33994: LD_EXP 52
33998: EQUAL
33999: AND
34000: IFFALSE 34021
// MinerDetonateMine ( unit , x , y ) ;
34002: LD_VAR 0 2
34006: PPUSH
34007: LD_VAR 0 4
34011: PPUSH
34012: LD_VAR 0 5
34016: PPUSH
34017: CALL 36980 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34021: LD_VAR 0 1
34025: PUSH
34026: LD_INT 252
34028: EQUAL
34029: PUSH
34030: LD_VAR 0 2
34034: PPUSH
34035: CALL_OW 264
34039: PUSH
34040: LD_EXP 52
34044: EQUAL
34045: AND
34046: IFFALSE 34067
// MinerCreateMinefield ( unit , x , y ) ;
34048: LD_VAR 0 2
34052: PPUSH
34053: LD_VAR 0 4
34057: PPUSH
34058: LD_VAR 0 5
34062: PPUSH
34063: CALL 37397 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34067: LD_VAR 0 1
34071: PUSH
34072: LD_INT 253
34074: EQUAL
34075: PUSH
34076: LD_VAR 0 2
34080: PPUSH
34081: CALL_OW 257
34085: PUSH
34086: LD_INT 5
34088: EQUAL
34089: AND
34090: IFFALSE 34111
// ComBinocular ( unit , x , y ) ;
34092: LD_VAR 0 2
34096: PPUSH
34097: LD_VAR 0 4
34101: PPUSH
34102: LD_VAR 0 5
34106: PPUSH
34107: CALL 37768 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34111: LD_VAR 0 1
34115: PUSH
34116: LD_INT 254
34118: EQUAL
34119: PUSH
34120: LD_VAR 0 2
34124: PPUSH
34125: CALL_OW 264
34129: PUSH
34130: LD_EXP 47
34134: EQUAL
34135: AND
34136: PUSH
34137: LD_VAR 0 3
34141: PPUSH
34142: CALL_OW 263
34146: PUSH
34147: LD_INT 3
34149: EQUAL
34150: AND
34151: IFFALSE 34167
// HackDestroyVehicle ( unit , selectedUnit ) ;
34153: LD_VAR 0 2
34157: PPUSH
34158: LD_VAR 0 3
34162: PPUSH
34163: CALL 36063 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34167: LD_VAR 0 1
34171: PUSH
34172: LD_INT 255
34174: EQUAL
34175: PUSH
34176: LD_VAR 0 2
34180: PPUSH
34181: CALL_OW 264
34185: PUSH
34186: LD_INT 14
34188: PUSH
34189: LD_INT 53
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: IN
34196: AND
34197: PUSH
34198: LD_VAR 0 4
34202: PPUSH
34203: LD_VAR 0 5
34207: PPUSH
34208: CALL_OW 488
34212: AND
34213: IFFALSE 34237
// CutTreeXYR ( unit , x , y , 12 ) ;
34215: LD_VAR 0 2
34219: PPUSH
34220: LD_VAR 0 4
34224: PPUSH
34225: LD_VAR 0 5
34229: PPUSH
34230: LD_INT 12
34232: PPUSH
34233: CALL 34629 0 4
// if cmd = 256 then
34237: LD_VAR 0 1
34241: PUSH
34242: LD_INT 256
34244: EQUAL
34245: IFFALSE 34266
// SetFactoryWaypoint ( unit , x , y ) ;
34247: LD_VAR 0 2
34251: PPUSH
34252: LD_VAR 0 4
34256: PPUSH
34257: LD_VAR 0 5
34261: PPUSH
34262: CALL 34271 0 3
// end ;
34266: LD_VAR 0 6
34270: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34271: LD_INT 0
34273: PPUSH
34274: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34275: LD_VAR 0 1
34279: NOT
34280: PUSH
34281: LD_VAR 0 2
34285: PPUSH
34286: LD_VAR 0 3
34290: PPUSH
34291: CALL_OW 488
34295: NOT
34296: OR
34297: PUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: CALL_OW 266
34307: PUSH
34308: LD_INT 3
34310: NONEQUAL
34311: PUSH
34312: LD_VAR 0 1
34316: PPUSH
34317: CALL_OW 247
34321: PUSH
34322: LD_INT 1
34324: EQUAL
34325: NOT
34326: AND
34327: OR
34328: IFFALSE 34332
// exit ;
34330: GO 34481
// if GetType ( factory ) = unit_human then
34332: LD_VAR 0 1
34336: PPUSH
34337: CALL_OW 247
34341: PUSH
34342: LD_INT 1
34344: EQUAL
34345: IFFALSE 34362
// factory := IsInUnit ( factory ) ;
34347: LD_ADDR_VAR 0 1
34351: PUSH
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 310
34361: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34362: LD_VAR 0 1
34366: PPUSH
34367: CALL_OW 266
34371: PUSH
34372: LD_INT 3
34374: NONEQUAL
34375: IFFALSE 34379
// exit ;
34377: GO 34481
// if HexInfo ( x , y ) = factory then
34379: LD_VAR 0 2
34383: PPUSH
34384: LD_VAR 0 3
34388: PPUSH
34389: CALL_OW 428
34393: PUSH
34394: LD_VAR 0 1
34398: EQUAL
34399: IFFALSE 34426
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34401: LD_ADDR_EXP 123
34405: PUSH
34406: LD_EXP 123
34410: PPUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_INT 0
34418: PPUSH
34419: CALL_OW 1
34423: ST_TO_ADDR
34424: GO 34477
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34426: LD_ADDR_EXP 123
34430: PUSH
34431: LD_EXP 123
34435: PPUSH
34436: LD_VAR 0 1
34440: PPUSH
34441: LD_VAR 0 1
34445: PPUSH
34446: CALL_OW 255
34450: PUSH
34451: LD_VAR 0 1
34455: PUSH
34456: LD_VAR 0 2
34460: PUSH
34461: LD_VAR 0 3
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: PPUSH
34472: CALL_OW 1
34476: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34477: CALL 34486 0 0
// end ;
34481: LD_VAR 0 4
34485: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34486: LD_INT 0
34488: PPUSH
34489: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34490: LD_STRING resetFactoryWaypoint();
34492: PPUSH
34493: CALL_OW 559
// if factoryWaypoints then
34497: LD_EXP 123
34501: IFFALSE 34624
// begin for i := 1 to factoryWaypoints do
34503: LD_ADDR_VAR 0 2
34507: PUSH
34508: DOUBLE
34509: LD_INT 1
34511: DEC
34512: ST_TO_ADDR
34513: LD_EXP 123
34517: PUSH
34518: FOR_TO
34519: IFFALSE 34622
// if factoryWaypoints [ i ] then
34521: LD_EXP 123
34525: PUSH
34526: LD_VAR 0 2
34530: ARRAY
34531: IFFALSE 34620
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34533: LD_STRING setFactoryWaypointXY(
34535: PUSH
34536: LD_EXP 123
34540: PUSH
34541: LD_VAR 0 2
34545: ARRAY
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: STR
34551: PUSH
34552: LD_STRING ,
34554: STR
34555: PUSH
34556: LD_EXP 123
34560: PUSH
34561: LD_VAR 0 2
34565: ARRAY
34566: PUSH
34567: LD_INT 2
34569: ARRAY
34570: STR
34571: PUSH
34572: LD_STRING ,
34574: STR
34575: PUSH
34576: LD_EXP 123
34580: PUSH
34581: LD_VAR 0 2
34585: ARRAY
34586: PUSH
34587: LD_INT 3
34589: ARRAY
34590: STR
34591: PUSH
34592: LD_STRING ,
34594: STR
34595: PUSH
34596: LD_EXP 123
34600: PUSH
34601: LD_VAR 0 2
34605: ARRAY
34606: PUSH
34607: LD_INT 4
34609: ARRAY
34610: STR
34611: PUSH
34612: LD_STRING )
34614: STR
34615: PPUSH
34616: CALL_OW 559
34620: GO 34518
34622: POP
34623: POP
// end ; end ;
34624: LD_VAR 0 1
34628: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34629: LD_INT 0
34631: PPUSH
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34640: LD_VAR 0 1
34644: NOT
34645: PUSH
34646: LD_VAR 0 2
34650: PPUSH
34651: LD_VAR 0 3
34655: PPUSH
34656: CALL_OW 488
34660: NOT
34661: OR
34662: PUSH
34663: LD_VAR 0 4
34667: NOT
34668: OR
34669: IFFALSE 34673
// exit ;
34671: GO 35013
// list := [ ] ;
34673: LD_ADDR_VAR 0 13
34677: PUSH
34678: EMPTY
34679: ST_TO_ADDR
// if x - r < 0 then
34680: LD_VAR 0 2
34684: PUSH
34685: LD_VAR 0 4
34689: MINUS
34690: PUSH
34691: LD_INT 0
34693: LESS
34694: IFFALSE 34706
// min_x := 0 else
34696: LD_ADDR_VAR 0 7
34700: PUSH
34701: LD_INT 0
34703: ST_TO_ADDR
34704: GO 34722
// min_x := x - r ;
34706: LD_ADDR_VAR 0 7
34710: PUSH
34711: LD_VAR 0 2
34715: PUSH
34716: LD_VAR 0 4
34720: MINUS
34721: ST_TO_ADDR
// if y - r < 0 then
34722: LD_VAR 0 3
34726: PUSH
34727: LD_VAR 0 4
34731: MINUS
34732: PUSH
34733: LD_INT 0
34735: LESS
34736: IFFALSE 34748
// min_y := 0 else
34738: LD_ADDR_VAR 0 8
34742: PUSH
34743: LD_INT 0
34745: ST_TO_ADDR
34746: GO 34764
// min_y := y - r ;
34748: LD_ADDR_VAR 0 8
34752: PUSH
34753: LD_VAR 0 3
34757: PUSH
34758: LD_VAR 0 4
34762: MINUS
34763: ST_TO_ADDR
// max_x := x + r ;
34764: LD_ADDR_VAR 0 9
34768: PUSH
34769: LD_VAR 0 2
34773: PUSH
34774: LD_VAR 0 4
34778: PLUS
34779: ST_TO_ADDR
// max_y := y + r ;
34780: LD_ADDR_VAR 0 10
34784: PUSH
34785: LD_VAR 0 3
34789: PUSH
34790: LD_VAR 0 4
34794: PLUS
34795: ST_TO_ADDR
// for _x = min_x to max_x do
34796: LD_ADDR_VAR 0 11
34800: PUSH
34801: DOUBLE
34802: LD_VAR 0 7
34806: DEC
34807: ST_TO_ADDR
34808: LD_VAR 0 9
34812: PUSH
34813: FOR_TO
34814: IFFALSE 34931
// for _y = min_y to max_y do
34816: LD_ADDR_VAR 0 12
34820: PUSH
34821: DOUBLE
34822: LD_VAR 0 8
34826: DEC
34827: ST_TO_ADDR
34828: LD_VAR 0 10
34832: PUSH
34833: FOR_TO
34834: IFFALSE 34927
// begin if not ValidHex ( _x , _y ) then
34836: LD_VAR 0 11
34840: PPUSH
34841: LD_VAR 0 12
34845: PPUSH
34846: CALL_OW 488
34850: NOT
34851: IFFALSE 34855
// continue ;
34853: GO 34833
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34855: LD_VAR 0 11
34859: PPUSH
34860: LD_VAR 0 12
34864: PPUSH
34865: CALL_OW 351
34869: PUSH
34870: LD_VAR 0 11
34874: PPUSH
34875: LD_VAR 0 12
34879: PPUSH
34880: CALL_OW 554
34884: AND
34885: IFFALSE 34925
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34887: LD_ADDR_VAR 0 13
34891: PUSH
34892: LD_VAR 0 13
34896: PPUSH
34897: LD_VAR 0 13
34901: PUSH
34902: LD_INT 1
34904: PLUS
34905: PPUSH
34906: LD_VAR 0 11
34910: PUSH
34911: LD_VAR 0 12
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PPUSH
34920: CALL_OW 2
34924: ST_TO_ADDR
// end ;
34925: GO 34833
34927: POP
34928: POP
34929: GO 34813
34931: POP
34932: POP
// if not list then
34933: LD_VAR 0 13
34937: NOT
34938: IFFALSE 34942
// exit ;
34940: GO 35013
// for i in list do
34942: LD_ADDR_VAR 0 6
34946: PUSH
34947: LD_VAR 0 13
34951: PUSH
34952: FOR_IN
34953: IFFALSE 35011
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34955: LD_VAR 0 1
34959: PPUSH
34960: LD_STRING M
34962: PUSH
34963: LD_VAR 0 6
34967: PUSH
34968: LD_INT 1
34970: ARRAY
34971: PUSH
34972: LD_VAR 0 6
34976: PUSH
34977: LD_INT 2
34979: ARRAY
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: PUSH
35002: EMPTY
35003: LIST
35004: PPUSH
35005: CALL_OW 447
35009: GO 34952
35011: POP
35012: POP
// end ;
35013: LD_VAR 0 5
35017: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35018: LD_EXP 124
35022: NOT
35023: IFFALSE 35073
35025: GO 35027
35027: DISABLE
// begin initHack := true ;
35028: LD_ADDR_EXP 124
35032: PUSH
35033: LD_INT 1
35035: ST_TO_ADDR
// hackTanks := [ ] ;
35036: LD_ADDR_EXP 125
35040: PUSH
35041: EMPTY
35042: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35043: LD_ADDR_EXP 126
35047: PUSH
35048: EMPTY
35049: ST_TO_ADDR
// hackLimit := 3 ;
35050: LD_ADDR_EXP 127
35054: PUSH
35055: LD_INT 3
35057: ST_TO_ADDR
// hackDist := 12 ;
35058: LD_ADDR_EXP 128
35062: PUSH
35063: LD_INT 12
35065: ST_TO_ADDR
// hackCounter := [ ] ;
35066: LD_ADDR_EXP 129
35070: PUSH
35071: EMPTY
35072: ST_TO_ADDR
// end ;
35073: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35074: LD_EXP 124
35078: PUSH
35079: LD_INT 34
35081: PUSH
35082: LD_EXP 47
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PPUSH
35091: CALL_OW 69
35095: AND
35096: IFFALSE 35351
35098: GO 35100
35100: DISABLE
35101: LD_INT 0
35103: PPUSH
35104: PPUSH
// begin enable ;
35105: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35106: LD_ADDR_VAR 0 1
35110: PUSH
35111: LD_INT 34
35113: PUSH
35114: LD_EXP 47
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PPUSH
35123: CALL_OW 69
35127: PUSH
35128: FOR_IN
35129: IFFALSE 35349
// begin if not i in hackTanks then
35131: LD_VAR 0 1
35135: PUSH
35136: LD_EXP 125
35140: IN
35141: NOT
35142: IFFALSE 35225
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35144: LD_ADDR_EXP 125
35148: PUSH
35149: LD_EXP 125
35153: PPUSH
35154: LD_EXP 125
35158: PUSH
35159: LD_INT 1
35161: PLUS
35162: PPUSH
35163: LD_VAR 0 1
35167: PPUSH
35168: CALL_OW 1
35172: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35173: LD_ADDR_EXP 126
35177: PUSH
35178: LD_EXP 126
35182: PPUSH
35183: LD_EXP 126
35187: PUSH
35188: LD_INT 1
35190: PLUS
35191: PPUSH
35192: EMPTY
35193: PPUSH
35194: CALL_OW 1
35198: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35199: LD_ADDR_EXP 129
35203: PUSH
35204: LD_EXP 129
35208: PPUSH
35209: LD_EXP 129
35213: PUSH
35214: LD_INT 1
35216: PLUS
35217: PPUSH
35218: EMPTY
35219: PPUSH
35220: CALL_OW 1
35224: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35225: LD_VAR 0 1
35229: PPUSH
35230: CALL_OW 302
35234: NOT
35235: IFFALSE 35248
// begin HackUnlinkAll ( i ) ;
35237: LD_VAR 0 1
35241: PPUSH
35242: CALL 35354 0 1
// continue ;
35246: GO 35128
// end ; HackCheckCapturedStatus ( i ) ;
35248: LD_VAR 0 1
35252: PPUSH
35253: CALL 35797 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35257: LD_ADDR_VAR 0 2
35261: PUSH
35262: LD_INT 81
35264: PUSH
35265: LD_VAR 0 1
35269: PPUSH
35270: CALL_OW 255
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 33
35281: PUSH
35282: LD_INT 3
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 91
35291: PUSH
35292: LD_VAR 0 1
35296: PUSH
35297: LD_EXP 128
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 50
35309: PUSH
35310: EMPTY
35311: LIST
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: PPUSH
35319: CALL_OW 69
35323: ST_TO_ADDR
// if not tmp then
35324: LD_VAR 0 2
35328: NOT
35329: IFFALSE 35333
// continue ;
35331: GO 35128
// HackLink ( i , tmp ) ;
35333: LD_VAR 0 1
35337: PPUSH
35338: LD_VAR 0 2
35342: PPUSH
35343: CALL 35490 0 2
// end ;
35347: GO 35128
35349: POP
35350: POP
// end ;
35351: PPOPN 2
35353: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35354: LD_INT 0
35356: PPUSH
35357: PPUSH
35358: PPUSH
// if not hack in hackTanks then
35359: LD_VAR 0 1
35363: PUSH
35364: LD_EXP 125
35368: IN
35369: NOT
35370: IFFALSE 35374
// exit ;
35372: GO 35485
// index := GetElementIndex ( hackTanks , hack ) ;
35374: LD_ADDR_VAR 0 4
35378: PUSH
35379: LD_EXP 125
35383: PPUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: CALL 42959 0 2
35393: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35394: LD_EXP 126
35398: PUSH
35399: LD_VAR 0 4
35403: ARRAY
35404: IFFALSE 35485
// begin for i in hackTanksCaptured [ index ] do
35406: LD_ADDR_VAR 0 3
35410: PUSH
35411: LD_EXP 126
35415: PUSH
35416: LD_VAR 0 4
35420: ARRAY
35421: PUSH
35422: FOR_IN
35423: IFFALSE 35449
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35425: LD_VAR 0 3
35429: PUSH
35430: LD_INT 1
35432: ARRAY
35433: PPUSH
35434: LD_VAR 0 3
35438: PUSH
35439: LD_INT 2
35441: ARRAY
35442: PPUSH
35443: CALL_OW 235
35447: GO 35422
35449: POP
35450: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35451: LD_ADDR_EXP 126
35455: PUSH
35456: LD_EXP 126
35460: PPUSH
35461: LD_VAR 0 4
35465: PPUSH
35466: EMPTY
35467: PPUSH
35468: CALL_OW 1
35472: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35473: LD_VAR 0 1
35477: PPUSH
35478: LD_INT 0
35480: PPUSH
35481: CALL_OW 505
// end ; end ;
35485: LD_VAR 0 2
35489: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35490: LD_INT 0
35492: PPUSH
35493: PPUSH
35494: PPUSH
// if not hack in hackTanks or not vehicles then
35495: LD_VAR 0 1
35499: PUSH
35500: LD_EXP 125
35504: IN
35505: NOT
35506: PUSH
35507: LD_VAR 0 2
35511: NOT
35512: OR
35513: IFFALSE 35517
// exit ;
35515: GO 35792
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35517: LD_ADDR_VAR 0 2
35521: PUSH
35522: LD_VAR 0 1
35526: PPUSH
35527: LD_VAR 0 2
35531: PPUSH
35532: LD_INT 1
35534: PPUSH
35535: LD_INT 1
35537: PPUSH
35538: CALL 43609 0 4
35542: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35543: LD_ADDR_VAR 0 5
35547: PUSH
35548: LD_EXP 125
35552: PPUSH
35553: LD_VAR 0 1
35557: PPUSH
35558: CALL 42959 0 2
35562: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35563: LD_EXP 126
35567: PUSH
35568: LD_VAR 0 5
35572: ARRAY
35573: PUSH
35574: LD_EXP 127
35578: LESS
35579: IFFALSE 35768
// begin for i := 1 to vehicles do
35581: LD_ADDR_VAR 0 4
35585: PUSH
35586: DOUBLE
35587: LD_INT 1
35589: DEC
35590: ST_TO_ADDR
35591: LD_VAR 0 2
35595: PUSH
35596: FOR_TO
35597: IFFALSE 35766
// begin if hackTanksCaptured [ index ] = hackLimit then
35599: LD_EXP 126
35603: PUSH
35604: LD_VAR 0 5
35608: ARRAY
35609: PUSH
35610: LD_EXP 127
35614: EQUAL
35615: IFFALSE 35619
// break ;
35617: GO 35766
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35619: LD_ADDR_EXP 129
35623: PUSH
35624: LD_EXP 129
35628: PPUSH
35629: LD_VAR 0 5
35633: PPUSH
35634: LD_EXP 129
35638: PUSH
35639: LD_VAR 0 5
35643: ARRAY
35644: PUSH
35645: LD_INT 1
35647: PLUS
35648: PPUSH
35649: CALL_OW 1
35653: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35654: LD_ADDR_EXP 126
35658: PUSH
35659: LD_EXP 126
35663: PPUSH
35664: LD_VAR 0 5
35668: PUSH
35669: LD_EXP 126
35673: PUSH
35674: LD_VAR 0 5
35678: ARRAY
35679: PUSH
35680: LD_INT 1
35682: PLUS
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PPUSH
35688: LD_VAR 0 2
35692: PUSH
35693: LD_VAR 0 4
35697: ARRAY
35698: PUSH
35699: LD_VAR 0 2
35703: PUSH
35704: LD_VAR 0 4
35708: ARRAY
35709: PPUSH
35710: CALL_OW 255
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PPUSH
35719: CALL 43174 0 3
35723: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35724: LD_VAR 0 2
35728: PUSH
35729: LD_VAR 0 4
35733: ARRAY
35734: PPUSH
35735: LD_VAR 0 1
35739: PPUSH
35740: CALL_OW 255
35744: PPUSH
35745: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35749: LD_VAR 0 2
35753: PUSH
35754: LD_VAR 0 4
35758: ARRAY
35759: PPUSH
35760: CALL_OW 141
// end ;
35764: GO 35596
35766: POP
35767: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35768: LD_VAR 0 1
35772: PPUSH
35773: LD_EXP 126
35777: PUSH
35778: LD_VAR 0 5
35782: ARRAY
35783: PUSH
35784: LD_INT 0
35786: PLUS
35787: PPUSH
35788: CALL_OW 505
// end ;
35792: LD_VAR 0 3
35796: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35797: LD_INT 0
35799: PPUSH
35800: PPUSH
35801: PPUSH
35802: PPUSH
// if not hack in hackTanks then
35803: LD_VAR 0 1
35807: PUSH
35808: LD_EXP 125
35812: IN
35813: NOT
35814: IFFALSE 35818
// exit ;
35816: GO 36058
// index := GetElementIndex ( hackTanks , hack ) ;
35818: LD_ADDR_VAR 0 4
35822: PUSH
35823: LD_EXP 125
35827: PPUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL 42959 0 2
35837: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35838: LD_ADDR_VAR 0 3
35842: PUSH
35843: DOUBLE
35844: LD_EXP 126
35848: PUSH
35849: LD_VAR 0 4
35853: ARRAY
35854: INC
35855: ST_TO_ADDR
35856: LD_INT 1
35858: PUSH
35859: FOR_DOWNTO
35860: IFFALSE 36032
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35862: LD_ADDR_VAR 0 5
35866: PUSH
35867: LD_EXP 126
35871: PUSH
35872: LD_VAR 0 4
35876: ARRAY
35877: PUSH
35878: LD_VAR 0 3
35882: ARRAY
35883: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35884: LD_VAR 0 5
35888: PUSH
35889: LD_INT 1
35891: ARRAY
35892: PPUSH
35893: CALL_OW 302
35897: NOT
35898: PUSH
35899: LD_VAR 0 5
35903: PUSH
35904: LD_INT 1
35906: ARRAY
35907: PPUSH
35908: CALL_OW 255
35912: PUSH
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 255
35922: NONEQUAL
35923: OR
35924: IFFALSE 36030
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35926: LD_VAR 0 5
35930: PUSH
35931: LD_INT 1
35933: ARRAY
35934: PPUSH
35935: CALL_OW 305
35939: PUSH
35940: LD_VAR 0 5
35944: PUSH
35945: LD_INT 1
35947: ARRAY
35948: PPUSH
35949: CALL_OW 255
35953: PUSH
35954: LD_VAR 0 1
35958: PPUSH
35959: CALL_OW 255
35963: EQUAL
35964: AND
35965: IFFALSE 35989
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35967: LD_VAR 0 5
35971: PUSH
35972: LD_INT 1
35974: ARRAY
35975: PPUSH
35976: LD_VAR 0 5
35980: PUSH
35981: LD_INT 2
35983: ARRAY
35984: PPUSH
35985: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35989: LD_ADDR_EXP 126
35993: PUSH
35994: LD_EXP 126
35998: PPUSH
35999: LD_VAR 0 4
36003: PPUSH
36004: LD_EXP 126
36008: PUSH
36009: LD_VAR 0 4
36013: ARRAY
36014: PPUSH
36015: LD_VAR 0 3
36019: PPUSH
36020: CALL_OW 3
36024: PPUSH
36025: CALL_OW 1
36029: ST_TO_ADDR
// end ; end ;
36030: GO 35859
36032: POP
36033: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36034: LD_VAR 0 1
36038: PPUSH
36039: LD_EXP 126
36043: PUSH
36044: LD_VAR 0 4
36048: ARRAY
36049: PUSH
36050: LD_INT 0
36052: PLUS
36053: PPUSH
36054: CALL_OW 505
// end ;
36058: LD_VAR 0 2
36062: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
// if not hack in hackTanks then
36069: LD_VAR 0 1
36073: PUSH
36074: LD_EXP 125
36078: IN
36079: NOT
36080: IFFALSE 36084
// exit ;
36082: GO 36169
// index := GetElementIndex ( hackTanks , hack ) ;
36084: LD_ADDR_VAR 0 5
36088: PUSH
36089: LD_EXP 125
36093: PPUSH
36094: LD_VAR 0 1
36098: PPUSH
36099: CALL 42959 0 2
36103: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36104: LD_ADDR_VAR 0 4
36108: PUSH
36109: DOUBLE
36110: LD_INT 1
36112: DEC
36113: ST_TO_ADDR
36114: LD_EXP 126
36118: PUSH
36119: LD_VAR 0 5
36123: ARRAY
36124: PUSH
36125: FOR_TO
36126: IFFALSE 36167
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36128: LD_EXP 126
36132: PUSH
36133: LD_VAR 0 5
36137: ARRAY
36138: PUSH
36139: LD_VAR 0 4
36143: ARRAY
36144: PUSH
36145: LD_INT 1
36147: ARRAY
36148: PUSH
36149: LD_VAR 0 2
36153: EQUAL
36154: IFFALSE 36165
// KillUnit ( vehicle ) ;
36156: LD_VAR 0 2
36160: PPUSH
36161: CALL_OW 66
36165: GO 36125
36167: POP
36168: POP
// end ;
36169: LD_VAR 0 3
36173: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36174: LD_EXP 130
36178: NOT
36179: IFFALSE 36214
36181: GO 36183
36183: DISABLE
// begin initMiner := true ;
36184: LD_ADDR_EXP 130
36188: PUSH
36189: LD_INT 1
36191: ST_TO_ADDR
// minersList := [ ] ;
36192: LD_ADDR_EXP 131
36196: PUSH
36197: EMPTY
36198: ST_TO_ADDR
// minerMinesList := [ ] ;
36199: LD_ADDR_EXP 132
36203: PUSH
36204: EMPTY
36205: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36206: LD_ADDR_EXP 133
36210: PUSH
36211: LD_INT 5
36213: ST_TO_ADDR
// end ;
36214: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36215: LD_EXP 130
36219: PUSH
36220: LD_INT 34
36222: PUSH
36223: LD_EXP 52
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PPUSH
36232: CALL_OW 69
36236: AND
36237: IFFALSE 36700
36239: GO 36241
36241: DISABLE
36242: LD_INT 0
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
// begin enable ;
36248: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36249: LD_ADDR_VAR 0 1
36253: PUSH
36254: LD_INT 34
36256: PUSH
36257: LD_EXP 52
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PPUSH
36266: CALL_OW 69
36270: PUSH
36271: FOR_IN
36272: IFFALSE 36344
// begin if not i in minersList then
36274: LD_VAR 0 1
36278: PUSH
36279: LD_EXP 131
36283: IN
36284: NOT
36285: IFFALSE 36342
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36287: LD_ADDR_EXP 131
36291: PUSH
36292: LD_EXP 131
36296: PPUSH
36297: LD_EXP 131
36301: PUSH
36302: LD_INT 1
36304: PLUS
36305: PPUSH
36306: LD_VAR 0 1
36310: PPUSH
36311: CALL_OW 1
36315: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36316: LD_ADDR_EXP 132
36320: PUSH
36321: LD_EXP 132
36325: PPUSH
36326: LD_EXP 132
36330: PUSH
36331: LD_INT 1
36333: PLUS
36334: PPUSH
36335: EMPTY
36336: PPUSH
36337: CALL_OW 1
36341: ST_TO_ADDR
// end end ;
36342: GO 36271
36344: POP
36345: POP
// for i := minerMinesList downto 1 do
36346: LD_ADDR_VAR 0 1
36350: PUSH
36351: DOUBLE
36352: LD_EXP 132
36356: INC
36357: ST_TO_ADDR
36358: LD_INT 1
36360: PUSH
36361: FOR_DOWNTO
36362: IFFALSE 36698
// begin if IsLive ( minersList [ i ] ) then
36364: LD_EXP 131
36368: PUSH
36369: LD_VAR 0 1
36373: ARRAY
36374: PPUSH
36375: CALL_OW 300
36379: IFFALSE 36407
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36381: LD_EXP 131
36385: PUSH
36386: LD_VAR 0 1
36390: ARRAY
36391: PPUSH
36392: LD_EXP 132
36396: PUSH
36397: LD_VAR 0 1
36401: ARRAY
36402: PPUSH
36403: CALL_OW 505
// if not minerMinesList [ i ] then
36407: LD_EXP 132
36411: PUSH
36412: LD_VAR 0 1
36416: ARRAY
36417: NOT
36418: IFFALSE 36422
// continue ;
36420: GO 36361
// for j := minerMinesList [ i ] downto 1 do
36422: LD_ADDR_VAR 0 2
36426: PUSH
36427: DOUBLE
36428: LD_EXP 132
36432: PUSH
36433: LD_VAR 0 1
36437: ARRAY
36438: INC
36439: ST_TO_ADDR
36440: LD_INT 1
36442: PUSH
36443: FOR_DOWNTO
36444: IFFALSE 36694
// begin side := GetSide ( minersList [ i ] ) ;
36446: LD_ADDR_VAR 0 3
36450: PUSH
36451: LD_EXP 131
36455: PUSH
36456: LD_VAR 0 1
36460: ARRAY
36461: PPUSH
36462: CALL_OW 255
36466: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36467: LD_ADDR_VAR 0 4
36471: PUSH
36472: LD_EXP 132
36476: PUSH
36477: LD_VAR 0 1
36481: ARRAY
36482: PUSH
36483: LD_VAR 0 2
36487: ARRAY
36488: PUSH
36489: LD_INT 1
36491: ARRAY
36492: PPUSH
36493: LD_EXP 132
36497: PUSH
36498: LD_VAR 0 1
36502: ARRAY
36503: PUSH
36504: LD_VAR 0 2
36508: ARRAY
36509: PUSH
36510: LD_INT 2
36512: ARRAY
36513: PPUSH
36514: CALL_OW 428
36518: ST_TO_ADDR
// if not tmp then
36519: LD_VAR 0 4
36523: NOT
36524: IFFALSE 36528
// continue ;
36526: GO 36443
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36528: LD_VAR 0 4
36532: PUSH
36533: LD_INT 81
36535: PUSH
36536: LD_VAR 0 3
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PPUSH
36545: CALL_OW 69
36549: IN
36550: PUSH
36551: LD_EXP 132
36555: PUSH
36556: LD_VAR 0 1
36560: ARRAY
36561: PUSH
36562: LD_VAR 0 2
36566: ARRAY
36567: PUSH
36568: LD_INT 1
36570: ARRAY
36571: PPUSH
36572: LD_EXP 132
36576: PUSH
36577: LD_VAR 0 1
36581: ARRAY
36582: PUSH
36583: LD_VAR 0 2
36587: ARRAY
36588: PUSH
36589: LD_INT 2
36591: ARRAY
36592: PPUSH
36593: CALL_OW 458
36597: AND
36598: IFFALSE 36692
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36600: LD_EXP 132
36604: PUSH
36605: LD_VAR 0 1
36609: ARRAY
36610: PUSH
36611: LD_VAR 0 2
36615: ARRAY
36616: PUSH
36617: LD_INT 1
36619: ARRAY
36620: PPUSH
36621: LD_EXP 132
36625: PUSH
36626: LD_VAR 0 1
36630: ARRAY
36631: PUSH
36632: LD_VAR 0 2
36636: ARRAY
36637: PUSH
36638: LD_INT 2
36640: ARRAY
36641: PPUSH
36642: LD_VAR 0 3
36646: PPUSH
36647: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36651: LD_ADDR_EXP 132
36655: PUSH
36656: LD_EXP 132
36660: PPUSH
36661: LD_VAR 0 1
36665: PPUSH
36666: LD_EXP 132
36670: PUSH
36671: LD_VAR 0 1
36675: ARRAY
36676: PPUSH
36677: LD_VAR 0 2
36681: PPUSH
36682: CALL_OW 3
36686: PPUSH
36687: CALL_OW 1
36691: ST_TO_ADDR
// end ; end ;
36692: GO 36443
36694: POP
36695: POP
// end ;
36696: GO 36361
36698: POP
36699: POP
// end ;
36700: PPOPN 4
36702: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36703: LD_INT 0
36705: PPUSH
36706: PPUSH
// result := false ;
36707: LD_ADDR_VAR 0 4
36711: PUSH
36712: LD_INT 0
36714: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36715: LD_VAR 0 1
36719: PPUSH
36720: CALL_OW 264
36724: PUSH
36725: LD_EXP 52
36729: EQUAL
36730: NOT
36731: IFFALSE 36735
// exit ;
36733: GO 36975
// index := GetElementIndex ( minersList , unit ) ;
36735: LD_ADDR_VAR 0 5
36739: PUSH
36740: LD_EXP 131
36744: PPUSH
36745: LD_VAR 0 1
36749: PPUSH
36750: CALL 42959 0 2
36754: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36755: LD_EXP 132
36759: PUSH
36760: LD_VAR 0 5
36764: ARRAY
36765: PUSH
36766: LD_EXP 133
36770: GREATEREQUAL
36771: IFFALSE 36775
// exit ;
36773: GO 36975
// ComMoveXY ( unit , x , y ) ;
36775: LD_VAR 0 1
36779: PPUSH
36780: LD_VAR 0 2
36784: PPUSH
36785: LD_VAR 0 3
36789: PPUSH
36790: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36794: LD_INT 35
36796: PPUSH
36797: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36801: LD_VAR 0 1
36805: PPUSH
36806: LD_VAR 0 2
36810: PPUSH
36811: LD_VAR 0 3
36815: PPUSH
36816: CALL 73678 0 3
36820: NOT
36821: PUSH
36822: LD_VAR 0 1
36826: PPUSH
36827: CALL_OW 314
36831: AND
36832: IFFALSE 36836
// exit ;
36834: GO 36975
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36836: LD_VAR 0 2
36840: PPUSH
36841: LD_VAR 0 3
36845: PPUSH
36846: CALL_OW 428
36850: PUSH
36851: LD_VAR 0 1
36855: EQUAL
36856: PUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 314
36866: NOT
36867: AND
36868: IFFALSE 36794
// PlaySoundXY ( x , y , PlantMine ) ;
36870: LD_VAR 0 2
36874: PPUSH
36875: LD_VAR 0 3
36879: PPUSH
36880: LD_STRING PlantMine
36882: PPUSH
36883: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36887: LD_VAR 0 2
36891: PPUSH
36892: LD_VAR 0 3
36896: PPUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 255
36906: PPUSH
36907: LD_INT 0
36909: PPUSH
36910: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36914: LD_ADDR_EXP 132
36918: PUSH
36919: LD_EXP 132
36923: PPUSH
36924: LD_VAR 0 5
36928: PUSH
36929: LD_EXP 132
36933: PUSH
36934: LD_VAR 0 5
36938: ARRAY
36939: PUSH
36940: LD_INT 1
36942: PLUS
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PPUSH
36948: LD_VAR 0 2
36952: PUSH
36953: LD_VAR 0 3
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PPUSH
36962: CALL 43174 0 3
36966: ST_TO_ADDR
// result := true ;
36967: LD_ADDR_VAR 0 4
36971: PUSH
36972: LD_INT 1
36974: ST_TO_ADDR
// end ;
36975: LD_VAR 0 4
36979: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36980: LD_INT 0
36982: PPUSH
36983: PPUSH
36984: PPUSH
// if not unit in minersList then
36985: LD_VAR 0 1
36989: PUSH
36990: LD_EXP 131
36994: IN
36995: NOT
36996: IFFALSE 37000
// exit ;
36998: GO 37392
// index := GetElementIndex ( minersList , unit ) ;
37000: LD_ADDR_VAR 0 6
37004: PUSH
37005: LD_EXP 131
37009: PPUSH
37010: LD_VAR 0 1
37014: PPUSH
37015: CALL 42959 0 2
37019: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37020: LD_ADDR_VAR 0 5
37024: PUSH
37025: DOUBLE
37026: LD_EXP 132
37030: PUSH
37031: LD_VAR 0 6
37035: ARRAY
37036: INC
37037: ST_TO_ADDR
37038: LD_INT 1
37040: PUSH
37041: FOR_DOWNTO
37042: IFFALSE 37203
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37044: LD_EXP 132
37048: PUSH
37049: LD_VAR 0 6
37053: ARRAY
37054: PUSH
37055: LD_VAR 0 5
37059: ARRAY
37060: PUSH
37061: LD_INT 1
37063: ARRAY
37064: PUSH
37065: LD_VAR 0 2
37069: EQUAL
37070: PUSH
37071: LD_EXP 132
37075: PUSH
37076: LD_VAR 0 6
37080: ARRAY
37081: PUSH
37082: LD_VAR 0 5
37086: ARRAY
37087: PUSH
37088: LD_INT 2
37090: ARRAY
37091: PUSH
37092: LD_VAR 0 3
37096: EQUAL
37097: AND
37098: IFFALSE 37201
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37100: LD_EXP 132
37104: PUSH
37105: LD_VAR 0 6
37109: ARRAY
37110: PUSH
37111: LD_VAR 0 5
37115: ARRAY
37116: PUSH
37117: LD_INT 1
37119: ARRAY
37120: PPUSH
37121: LD_EXP 132
37125: PUSH
37126: LD_VAR 0 6
37130: ARRAY
37131: PUSH
37132: LD_VAR 0 5
37136: ARRAY
37137: PUSH
37138: LD_INT 2
37140: ARRAY
37141: PPUSH
37142: LD_VAR 0 1
37146: PPUSH
37147: CALL_OW 255
37151: PPUSH
37152: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37156: LD_ADDR_EXP 132
37160: PUSH
37161: LD_EXP 132
37165: PPUSH
37166: LD_VAR 0 6
37170: PPUSH
37171: LD_EXP 132
37175: PUSH
37176: LD_VAR 0 6
37180: ARRAY
37181: PPUSH
37182: LD_VAR 0 5
37186: PPUSH
37187: CALL_OW 3
37191: PPUSH
37192: CALL_OW 1
37196: ST_TO_ADDR
// exit ;
37197: POP
37198: POP
37199: GO 37392
// end ; end ;
37201: GO 37041
37203: POP
37204: POP
// for i := minerMinesList [ index ] downto 1 do
37205: LD_ADDR_VAR 0 5
37209: PUSH
37210: DOUBLE
37211: LD_EXP 132
37215: PUSH
37216: LD_VAR 0 6
37220: ARRAY
37221: INC
37222: ST_TO_ADDR
37223: LD_INT 1
37225: PUSH
37226: FOR_DOWNTO
37227: IFFALSE 37390
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37229: LD_EXP 132
37233: PUSH
37234: LD_VAR 0 6
37238: ARRAY
37239: PUSH
37240: LD_VAR 0 5
37244: ARRAY
37245: PUSH
37246: LD_INT 1
37248: ARRAY
37249: PPUSH
37250: LD_EXP 132
37254: PUSH
37255: LD_VAR 0 6
37259: ARRAY
37260: PUSH
37261: LD_VAR 0 5
37265: ARRAY
37266: PUSH
37267: LD_INT 2
37269: ARRAY
37270: PPUSH
37271: LD_VAR 0 2
37275: PPUSH
37276: LD_VAR 0 3
37280: PPUSH
37281: CALL_OW 298
37285: PUSH
37286: LD_INT 6
37288: LESS
37289: IFFALSE 37388
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37291: LD_EXP 132
37295: PUSH
37296: LD_VAR 0 6
37300: ARRAY
37301: PUSH
37302: LD_VAR 0 5
37306: ARRAY
37307: PUSH
37308: LD_INT 1
37310: ARRAY
37311: PPUSH
37312: LD_EXP 132
37316: PUSH
37317: LD_VAR 0 6
37321: ARRAY
37322: PUSH
37323: LD_VAR 0 5
37327: ARRAY
37328: PUSH
37329: LD_INT 2
37331: ARRAY
37332: PPUSH
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 255
37342: PPUSH
37343: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37347: LD_ADDR_EXP 132
37351: PUSH
37352: LD_EXP 132
37356: PPUSH
37357: LD_VAR 0 6
37361: PPUSH
37362: LD_EXP 132
37366: PUSH
37367: LD_VAR 0 6
37371: ARRAY
37372: PPUSH
37373: LD_VAR 0 5
37377: PPUSH
37378: CALL_OW 3
37382: PPUSH
37383: CALL_OW 1
37387: ST_TO_ADDR
// end ; end ;
37388: GO 37226
37390: POP
37391: POP
// end ;
37392: LD_VAR 0 4
37396: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37397: LD_INT 0
37399: PPUSH
37400: PPUSH
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
37405: PPUSH
37406: PPUSH
37407: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37408: LD_VAR 0 1
37412: PPUSH
37413: CALL_OW 264
37417: PUSH
37418: LD_EXP 52
37422: EQUAL
37423: NOT
37424: PUSH
37425: LD_VAR 0 1
37429: PUSH
37430: LD_EXP 131
37434: IN
37435: NOT
37436: OR
37437: IFFALSE 37441
// exit ;
37439: GO 37763
// index := GetElementIndex ( minersList , unit ) ;
37441: LD_ADDR_VAR 0 6
37445: PUSH
37446: LD_EXP 131
37450: PPUSH
37451: LD_VAR 0 1
37455: PPUSH
37456: CALL 42959 0 2
37460: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37461: LD_ADDR_VAR 0 8
37465: PUSH
37466: LD_EXP 133
37470: PUSH
37471: LD_EXP 132
37475: PUSH
37476: LD_VAR 0 6
37480: ARRAY
37481: MINUS
37482: ST_TO_ADDR
// if not minesFreeAmount then
37483: LD_VAR 0 8
37487: NOT
37488: IFFALSE 37492
// exit ;
37490: GO 37763
// tmp := [ ] ;
37492: LD_ADDR_VAR 0 7
37496: PUSH
37497: EMPTY
37498: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37499: LD_ADDR_VAR 0 5
37503: PUSH
37504: DOUBLE
37505: LD_INT 1
37507: DEC
37508: ST_TO_ADDR
37509: LD_VAR 0 8
37513: PUSH
37514: FOR_TO
37515: IFFALSE 37710
// begin _d := rand ( 0 , 5 ) ;
37517: LD_ADDR_VAR 0 11
37521: PUSH
37522: LD_INT 0
37524: PPUSH
37525: LD_INT 5
37527: PPUSH
37528: CALL_OW 12
37532: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37533: LD_ADDR_VAR 0 12
37537: PUSH
37538: LD_INT 2
37540: PPUSH
37541: LD_INT 6
37543: PPUSH
37544: CALL_OW 12
37548: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37549: LD_ADDR_VAR 0 9
37553: PUSH
37554: LD_VAR 0 2
37558: PPUSH
37559: LD_VAR 0 11
37563: PPUSH
37564: LD_VAR 0 12
37568: PPUSH
37569: CALL_OW 272
37573: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37574: LD_ADDR_VAR 0 10
37578: PUSH
37579: LD_VAR 0 3
37583: PPUSH
37584: LD_VAR 0 11
37588: PPUSH
37589: LD_VAR 0 12
37593: PPUSH
37594: CALL_OW 273
37598: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37599: LD_VAR 0 9
37603: PPUSH
37604: LD_VAR 0 10
37608: PPUSH
37609: CALL_OW 488
37613: PUSH
37614: LD_VAR 0 9
37618: PUSH
37619: LD_VAR 0 10
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_VAR 0 7
37632: IN
37633: NOT
37634: AND
37635: PUSH
37636: LD_VAR 0 9
37640: PPUSH
37641: LD_VAR 0 10
37645: PPUSH
37646: CALL_OW 458
37650: NOT
37651: AND
37652: IFFALSE 37694
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37654: LD_ADDR_VAR 0 7
37658: PUSH
37659: LD_VAR 0 7
37663: PPUSH
37664: LD_VAR 0 7
37668: PUSH
37669: LD_INT 1
37671: PLUS
37672: PPUSH
37673: LD_VAR 0 9
37677: PUSH
37678: LD_VAR 0 10
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PPUSH
37687: CALL_OW 1
37691: ST_TO_ADDR
37692: GO 37708
// i := i - 1 ;
37694: LD_ADDR_VAR 0 5
37698: PUSH
37699: LD_VAR 0 5
37703: PUSH
37704: LD_INT 1
37706: MINUS
37707: ST_TO_ADDR
// end ;
37708: GO 37514
37710: POP
37711: POP
// for i in tmp do
37712: LD_ADDR_VAR 0 5
37716: PUSH
37717: LD_VAR 0 7
37721: PUSH
37722: FOR_IN
37723: IFFALSE 37761
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37725: LD_VAR 0 1
37729: PPUSH
37730: LD_VAR 0 5
37734: PUSH
37735: LD_INT 1
37737: ARRAY
37738: PPUSH
37739: LD_VAR 0 5
37743: PUSH
37744: LD_INT 2
37746: ARRAY
37747: PPUSH
37748: CALL 36703 0 3
37752: NOT
37753: IFFALSE 37759
// exit ;
37755: POP
37756: POP
37757: GO 37763
37759: GO 37722
37761: POP
37762: POP
// end ;
37763: LD_VAR 0 4
37767: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37768: LD_INT 0
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
// if not GetClass ( unit ) = class_sniper then
37777: LD_VAR 0 1
37781: PPUSH
37782: CALL_OW 257
37786: PUSH
37787: LD_INT 5
37789: EQUAL
37790: NOT
37791: IFFALSE 37795
// exit ;
37793: GO 38183
// dist := 8 ;
37795: LD_ADDR_VAR 0 5
37799: PUSH
37800: LD_INT 8
37802: ST_TO_ADDR
// viewRange := 12 ;
37803: LD_ADDR_VAR 0 7
37807: PUSH
37808: LD_INT 12
37810: ST_TO_ADDR
// side := GetSide ( unit ) ;
37811: LD_ADDR_VAR 0 6
37815: PUSH
37816: LD_VAR 0 1
37820: PPUSH
37821: CALL_OW 255
37825: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37826: LD_INT 61
37828: PPUSH
37829: LD_VAR 0 6
37833: PPUSH
37834: CALL_OW 321
37838: PUSH
37839: LD_INT 2
37841: EQUAL
37842: IFFALSE 37852
// viewRange := 16 ;
37844: LD_ADDR_VAR 0 7
37848: PUSH
37849: LD_INT 16
37851: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37852: LD_VAR 0 1
37856: PPUSH
37857: LD_VAR 0 2
37861: PPUSH
37862: LD_VAR 0 3
37866: PPUSH
37867: CALL_OW 297
37871: PUSH
37872: LD_VAR 0 5
37876: GREATER
37877: IFFALSE 37956
// begin ComMoveXY ( unit , x , y ) ;
37879: LD_VAR 0 1
37883: PPUSH
37884: LD_VAR 0 2
37888: PPUSH
37889: LD_VAR 0 3
37893: PPUSH
37894: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37898: LD_INT 35
37900: PPUSH
37901: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37905: LD_VAR 0 1
37909: PPUSH
37910: LD_VAR 0 2
37914: PPUSH
37915: LD_VAR 0 3
37919: PPUSH
37920: CALL 73678 0 3
37924: NOT
37925: IFFALSE 37929
// exit ;
37927: GO 38183
// until GetDistUnitXY ( unit , x , y ) < dist ;
37929: LD_VAR 0 1
37933: PPUSH
37934: LD_VAR 0 2
37938: PPUSH
37939: LD_VAR 0 3
37943: PPUSH
37944: CALL_OW 297
37948: PUSH
37949: LD_VAR 0 5
37953: LESS
37954: IFFALSE 37898
// end ; ComTurnXY ( unit , x , y ) ;
37956: LD_VAR 0 1
37960: PPUSH
37961: LD_VAR 0 2
37965: PPUSH
37966: LD_VAR 0 3
37970: PPUSH
37971: CALL_OW 118
// wait ( 5 ) ;
37975: LD_INT 5
37977: PPUSH
37978: CALL_OW 67
// _d := GetDir ( unit ) ;
37982: LD_ADDR_VAR 0 10
37986: PUSH
37987: LD_VAR 0 1
37991: PPUSH
37992: CALL_OW 254
37996: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37997: LD_ADDR_VAR 0 8
38001: PUSH
38002: LD_VAR 0 1
38006: PPUSH
38007: CALL_OW 250
38011: PPUSH
38012: LD_VAR 0 10
38016: PPUSH
38017: LD_VAR 0 5
38021: PPUSH
38022: CALL_OW 272
38026: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38027: LD_ADDR_VAR 0 9
38031: PUSH
38032: LD_VAR 0 1
38036: PPUSH
38037: CALL_OW 251
38041: PPUSH
38042: LD_VAR 0 10
38046: PPUSH
38047: LD_VAR 0 5
38051: PPUSH
38052: CALL_OW 273
38056: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38057: LD_VAR 0 8
38061: PPUSH
38062: LD_VAR 0 9
38066: PPUSH
38067: CALL_OW 488
38071: NOT
38072: IFFALSE 38076
// exit ;
38074: GO 38183
// ComAnimCustom ( unit , 1 ) ;
38076: LD_VAR 0 1
38080: PPUSH
38081: LD_INT 1
38083: PPUSH
38084: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38088: LD_VAR 0 8
38092: PPUSH
38093: LD_VAR 0 9
38097: PPUSH
38098: LD_VAR 0 6
38102: PPUSH
38103: LD_VAR 0 7
38107: PPUSH
38108: CALL_OW 330
// repeat wait ( 1 ) ;
38112: LD_INT 1
38114: PPUSH
38115: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38119: LD_VAR 0 1
38123: PPUSH
38124: CALL_OW 316
38128: PUSH
38129: LD_VAR 0 1
38133: PPUSH
38134: CALL_OW 314
38138: OR
38139: PUSH
38140: LD_VAR 0 1
38144: PPUSH
38145: CALL_OW 302
38149: NOT
38150: OR
38151: PUSH
38152: LD_VAR 0 1
38156: PPUSH
38157: CALL_OW 301
38161: OR
38162: IFFALSE 38112
// RemoveSeeing ( _x , _y , side ) ;
38164: LD_VAR 0 8
38168: PPUSH
38169: LD_VAR 0 9
38173: PPUSH
38174: LD_VAR 0 6
38178: PPUSH
38179: CALL_OW 331
// end ; end_of_file
38183: LD_VAR 0 4
38187: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38188: LD_INT 0
38190: PPUSH
38191: PPUSH
// if exist_mode then
38192: LD_VAR 0 2
38196: IFFALSE 38221
// unit := CreateCharacter ( prefix & ident ) else
38198: LD_ADDR_VAR 0 5
38202: PUSH
38203: LD_VAR 0 3
38207: PUSH
38208: LD_VAR 0 1
38212: STR
38213: PPUSH
38214: CALL_OW 34
38218: ST_TO_ADDR
38219: GO 38236
// unit := NewCharacter ( ident ) ;
38221: LD_ADDR_VAR 0 5
38225: PUSH
38226: LD_VAR 0 1
38230: PPUSH
38231: CALL_OW 25
38235: ST_TO_ADDR
// result := unit ;
38236: LD_ADDR_VAR 0 4
38240: PUSH
38241: LD_VAR 0 5
38245: ST_TO_ADDR
// end ;
38246: LD_VAR 0 4
38250: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
// if not side or not nation then
38255: LD_VAR 0 1
38259: NOT
38260: PUSH
38261: LD_VAR 0 2
38265: NOT
38266: OR
38267: IFFALSE 38271
// exit ;
38269: GO 39039
// case nation of nation_american :
38271: LD_VAR 0 2
38275: PUSH
38276: LD_INT 1
38278: DOUBLE
38279: EQUAL
38280: IFTRUE 38284
38282: GO 38498
38284: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38285: LD_ADDR_VAR 0 4
38289: PUSH
38290: LD_INT 35
38292: PUSH
38293: LD_INT 45
38295: PUSH
38296: LD_INT 46
38298: PUSH
38299: LD_INT 47
38301: PUSH
38302: LD_INT 82
38304: PUSH
38305: LD_INT 83
38307: PUSH
38308: LD_INT 84
38310: PUSH
38311: LD_INT 85
38313: PUSH
38314: LD_INT 86
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: LD_INT 6
38325: PUSH
38326: LD_INT 15
38328: PUSH
38329: LD_INT 16
38331: PUSH
38332: LD_INT 7
38334: PUSH
38335: LD_INT 12
38337: PUSH
38338: LD_INT 13
38340: PUSH
38341: LD_INT 10
38343: PUSH
38344: LD_INT 14
38346: PUSH
38347: LD_INT 20
38349: PUSH
38350: LD_INT 21
38352: PUSH
38353: LD_INT 22
38355: PUSH
38356: LD_INT 25
38358: PUSH
38359: LD_INT 32
38361: PUSH
38362: LD_INT 27
38364: PUSH
38365: LD_INT 36
38367: PUSH
38368: LD_INT 69
38370: PUSH
38371: LD_INT 39
38373: PUSH
38374: LD_INT 34
38376: PUSH
38377: LD_INT 40
38379: PUSH
38380: LD_INT 48
38382: PUSH
38383: LD_INT 49
38385: PUSH
38386: LD_INT 50
38388: PUSH
38389: LD_INT 51
38391: PUSH
38392: LD_INT 52
38394: PUSH
38395: LD_INT 53
38397: PUSH
38398: LD_INT 54
38400: PUSH
38401: LD_INT 55
38403: PUSH
38404: LD_INT 56
38406: PUSH
38407: LD_INT 57
38409: PUSH
38410: LD_INT 58
38412: PUSH
38413: LD_INT 59
38415: PUSH
38416: LD_INT 60
38418: PUSH
38419: LD_INT 61
38421: PUSH
38422: LD_INT 62
38424: PUSH
38425: LD_INT 80
38427: PUSH
38428: LD_INT 82
38430: PUSH
38431: LD_INT 83
38433: PUSH
38434: LD_INT 84
38436: PUSH
38437: LD_INT 85
38439: PUSH
38440: LD_INT 86
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: ST_TO_ADDR
38496: GO 38963
38498: LD_INT 2
38500: DOUBLE
38501: EQUAL
38502: IFTRUE 38506
38504: GO 38732
38506: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38507: LD_ADDR_VAR 0 4
38511: PUSH
38512: LD_INT 35
38514: PUSH
38515: LD_INT 45
38517: PUSH
38518: LD_INT 46
38520: PUSH
38521: LD_INT 47
38523: PUSH
38524: LD_INT 82
38526: PUSH
38527: LD_INT 83
38529: PUSH
38530: LD_INT 84
38532: PUSH
38533: LD_INT 85
38535: PUSH
38536: LD_INT 87
38538: PUSH
38539: LD_INT 70
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 11
38547: PUSH
38548: LD_INT 3
38550: PUSH
38551: LD_INT 4
38553: PUSH
38554: LD_INT 5
38556: PUSH
38557: LD_INT 6
38559: PUSH
38560: LD_INT 15
38562: PUSH
38563: LD_INT 18
38565: PUSH
38566: LD_INT 7
38568: PUSH
38569: LD_INT 17
38571: PUSH
38572: LD_INT 8
38574: PUSH
38575: LD_INT 20
38577: PUSH
38578: LD_INT 21
38580: PUSH
38581: LD_INT 22
38583: PUSH
38584: LD_INT 72
38586: PUSH
38587: LD_INT 26
38589: PUSH
38590: LD_INT 69
38592: PUSH
38593: LD_INT 39
38595: PUSH
38596: LD_INT 40
38598: PUSH
38599: LD_INT 41
38601: PUSH
38602: LD_INT 42
38604: PUSH
38605: LD_INT 43
38607: PUSH
38608: LD_INT 48
38610: PUSH
38611: LD_INT 49
38613: PUSH
38614: LD_INT 50
38616: PUSH
38617: LD_INT 51
38619: PUSH
38620: LD_INT 52
38622: PUSH
38623: LD_INT 53
38625: PUSH
38626: LD_INT 54
38628: PUSH
38629: LD_INT 55
38631: PUSH
38632: LD_INT 56
38634: PUSH
38635: LD_INT 60
38637: PUSH
38638: LD_INT 61
38640: PUSH
38641: LD_INT 62
38643: PUSH
38644: LD_INT 66
38646: PUSH
38647: LD_INT 67
38649: PUSH
38650: LD_INT 68
38652: PUSH
38653: LD_INT 81
38655: PUSH
38656: LD_INT 82
38658: PUSH
38659: LD_INT 83
38661: PUSH
38662: LD_INT 84
38664: PUSH
38665: LD_INT 85
38667: PUSH
38668: LD_INT 87
38670: PUSH
38671: LD_INT 88
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
38730: GO 38963
38732: LD_INT 3
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38740
38738: GO 38962
38740: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38741: LD_ADDR_VAR 0 4
38745: PUSH
38746: LD_INT 46
38748: PUSH
38749: LD_INT 47
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: LD_INT 82
38760: PUSH
38761: LD_INT 83
38763: PUSH
38764: LD_INT 84
38766: PUSH
38767: LD_INT 85
38769: PUSH
38770: LD_INT 86
38772: PUSH
38773: LD_INT 11
38775: PUSH
38776: LD_INT 9
38778: PUSH
38779: LD_INT 20
38781: PUSH
38782: LD_INT 19
38784: PUSH
38785: LD_INT 21
38787: PUSH
38788: LD_INT 24
38790: PUSH
38791: LD_INT 22
38793: PUSH
38794: LD_INT 25
38796: PUSH
38797: LD_INT 28
38799: PUSH
38800: LD_INT 29
38802: PUSH
38803: LD_INT 30
38805: PUSH
38806: LD_INT 31
38808: PUSH
38809: LD_INT 37
38811: PUSH
38812: LD_INT 38
38814: PUSH
38815: LD_INT 32
38817: PUSH
38818: LD_INT 27
38820: PUSH
38821: LD_INT 33
38823: PUSH
38824: LD_INT 69
38826: PUSH
38827: LD_INT 39
38829: PUSH
38830: LD_INT 34
38832: PUSH
38833: LD_INT 40
38835: PUSH
38836: LD_INT 71
38838: PUSH
38839: LD_INT 23
38841: PUSH
38842: LD_INT 44
38844: PUSH
38845: LD_INT 48
38847: PUSH
38848: LD_INT 49
38850: PUSH
38851: LD_INT 50
38853: PUSH
38854: LD_INT 51
38856: PUSH
38857: LD_INT 52
38859: PUSH
38860: LD_INT 53
38862: PUSH
38863: LD_INT 54
38865: PUSH
38866: LD_INT 55
38868: PUSH
38869: LD_INT 56
38871: PUSH
38872: LD_INT 57
38874: PUSH
38875: LD_INT 58
38877: PUSH
38878: LD_INT 59
38880: PUSH
38881: LD_INT 63
38883: PUSH
38884: LD_INT 64
38886: PUSH
38887: LD_INT 65
38889: PUSH
38890: LD_INT 82
38892: PUSH
38893: LD_INT 83
38895: PUSH
38896: LD_INT 84
38898: PUSH
38899: LD_INT 85
38901: PUSH
38902: LD_INT 86
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: ST_TO_ADDR
38960: GO 38963
38962: POP
// if state > - 1 and state < 3 then
38963: LD_VAR 0 3
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: GREATER
38972: PUSH
38973: LD_VAR 0 3
38977: PUSH
38978: LD_INT 3
38980: LESS
38981: AND
38982: IFFALSE 39039
// for i in result do
38984: LD_ADDR_VAR 0 5
38988: PUSH
38989: LD_VAR 0 4
38993: PUSH
38994: FOR_IN
38995: IFFALSE 39037
// if GetTech ( i , side ) <> state then
38997: LD_VAR 0 5
39001: PPUSH
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL_OW 321
39011: PUSH
39012: LD_VAR 0 3
39016: NONEQUAL
39017: IFFALSE 39035
// result := result diff i ;
39019: LD_ADDR_VAR 0 4
39023: PUSH
39024: LD_VAR 0 4
39028: PUSH
39029: LD_VAR 0 5
39033: DIFF
39034: ST_TO_ADDR
39035: GO 38994
39037: POP
39038: POP
// end ;
39039: LD_VAR 0 4
39043: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39044: LD_INT 0
39046: PPUSH
39047: PPUSH
39048: PPUSH
// result := true ;
39049: LD_ADDR_VAR 0 3
39053: PUSH
39054: LD_INT 1
39056: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39057: LD_ADDR_VAR 0 5
39061: PUSH
39062: LD_VAR 0 2
39066: PPUSH
39067: CALL_OW 480
39071: ST_TO_ADDR
// if not tmp then
39072: LD_VAR 0 5
39076: NOT
39077: IFFALSE 39081
// exit ;
39079: GO 39130
// for i in tmp do
39081: LD_ADDR_VAR 0 4
39085: PUSH
39086: LD_VAR 0 5
39090: PUSH
39091: FOR_IN
39092: IFFALSE 39128
// if GetTech ( i , side ) <> state_researched then
39094: LD_VAR 0 4
39098: PPUSH
39099: LD_VAR 0 1
39103: PPUSH
39104: CALL_OW 321
39108: PUSH
39109: LD_INT 2
39111: NONEQUAL
39112: IFFALSE 39126
// begin result := false ;
39114: LD_ADDR_VAR 0 3
39118: PUSH
39119: LD_INT 0
39121: ST_TO_ADDR
// exit ;
39122: POP
39123: POP
39124: GO 39130
// end ;
39126: GO 39091
39128: POP
39129: POP
// end ;
39130: LD_VAR 0 3
39134: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39135: LD_INT 0
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39150: LD_VAR 0 1
39154: NOT
39155: PUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 257
39165: PUSH
39166: LD_INT 9
39168: NONEQUAL
39169: OR
39170: IFFALSE 39174
// exit ;
39172: GO 39747
// side := GetSide ( unit ) ;
39174: LD_ADDR_VAR 0 9
39178: PUSH
39179: LD_VAR 0 1
39183: PPUSH
39184: CALL_OW 255
39188: ST_TO_ADDR
// tech_space := tech_spacanom ;
39189: LD_ADDR_VAR 0 12
39193: PUSH
39194: LD_INT 29
39196: ST_TO_ADDR
// tech_time := tech_taurad ;
39197: LD_ADDR_VAR 0 13
39201: PUSH
39202: LD_INT 28
39204: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39205: LD_ADDR_VAR 0 11
39209: PUSH
39210: LD_VAR 0 1
39214: PPUSH
39215: CALL_OW 310
39219: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39220: LD_VAR 0 11
39224: PPUSH
39225: CALL_OW 247
39229: PUSH
39230: LD_INT 2
39232: EQUAL
39233: IFFALSE 39237
// exit ;
39235: GO 39747
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39237: LD_ADDR_VAR 0 8
39241: PUSH
39242: LD_INT 81
39244: PUSH
39245: LD_VAR 0 9
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 3
39256: PUSH
39257: LD_INT 21
39259: PUSH
39260: LD_INT 3
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PPUSH
39275: CALL_OW 69
39279: ST_TO_ADDR
// if not tmp then
39280: LD_VAR 0 8
39284: NOT
39285: IFFALSE 39289
// exit ;
39287: GO 39747
// if in_unit then
39289: LD_VAR 0 11
39293: IFFALSE 39317
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39295: LD_ADDR_VAR 0 10
39299: PUSH
39300: LD_VAR 0 8
39304: PPUSH
39305: LD_VAR 0 11
39309: PPUSH
39310: CALL_OW 74
39314: ST_TO_ADDR
39315: GO 39337
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39317: LD_ADDR_VAR 0 10
39321: PUSH
39322: LD_VAR 0 8
39326: PPUSH
39327: LD_VAR 0 1
39331: PPUSH
39332: CALL_OW 74
39336: ST_TO_ADDR
// if not enemy then
39337: LD_VAR 0 10
39341: NOT
39342: IFFALSE 39346
// exit ;
39344: GO 39747
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39346: LD_VAR 0 11
39350: PUSH
39351: LD_VAR 0 11
39355: PPUSH
39356: LD_VAR 0 10
39360: PPUSH
39361: CALL_OW 296
39365: PUSH
39366: LD_INT 13
39368: GREATER
39369: AND
39370: PUSH
39371: LD_VAR 0 1
39375: PPUSH
39376: LD_VAR 0 10
39380: PPUSH
39381: CALL_OW 296
39385: PUSH
39386: LD_INT 12
39388: GREATER
39389: OR
39390: IFFALSE 39394
// exit ;
39392: GO 39747
// missile := [ 1 ] ;
39394: LD_ADDR_VAR 0 14
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39405: LD_VAR 0 9
39409: PPUSH
39410: LD_VAR 0 12
39414: PPUSH
39415: CALL_OW 325
39419: IFFALSE 39448
// missile := Replace ( missile , missile + 1 , 2 ) ;
39421: LD_ADDR_VAR 0 14
39425: PUSH
39426: LD_VAR 0 14
39430: PPUSH
39431: LD_VAR 0 14
39435: PUSH
39436: LD_INT 1
39438: PLUS
39439: PPUSH
39440: LD_INT 2
39442: PPUSH
39443: CALL_OW 1
39447: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39448: LD_VAR 0 9
39452: PPUSH
39453: LD_VAR 0 13
39457: PPUSH
39458: CALL_OW 325
39462: PUSH
39463: LD_VAR 0 10
39467: PPUSH
39468: CALL_OW 255
39472: PPUSH
39473: LD_VAR 0 13
39477: PPUSH
39478: CALL_OW 325
39482: NOT
39483: AND
39484: IFFALSE 39513
// missile := Replace ( missile , missile + 1 , 3 ) ;
39486: LD_ADDR_VAR 0 14
39490: PUSH
39491: LD_VAR 0 14
39495: PPUSH
39496: LD_VAR 0 14
39500: PUSH
39501: LD_INT 1
39503: PLUS
39504: PPUSH
39505: LD_INT 3
39507: PPUSH
39508: CALL_OW 1
39512: ST_TO_ADDR
// if missile < 2 then
39513: LD_VAR 0 14
39517: PUSH
39518: LD_INT 2
39520: LESS
39521: IFFALSE 39525
// exit ;
39523: GO 39747
// x := GetX ( enemy ) ;
39525: LD_ADDR_VAR 0 4
39529: PUSH
39530: LD_VAR 0 10
39534: PPUSH
39535: CALL_OW 250
39539: ST_TO_ADDR
// y := GetY ( enemy ) ;
39540: LD_ADDR_VAR 0 5
39544: PUSH
39545: LD_VAR 0 10
39549: PPUSH
39550: CALL_OW 251
39554: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39555: LD_ADDR_VAR 0 6
39559: PUSH
39560: LD_VAR 0 4
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PPUSH
39569: LD_INT 1
39571: PPUSH
39572: CALL_OW 12
39576: PLUS
39577: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39578: LD_ADDR_VAR 0 7
39582: PUSH
39583: LD_VAR 0 5
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PPUSH
39592: LD_INT 1
39594: PPUSH
39595: CALL_OW 12
39599: PLUS
39600: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39601: LD_VAR 0 6
39605: PPUSH
39606: LD_VAR 0 7
39610: PPUSH
39611: CALL_OW 488
39615: NOT
39616: IFFALSE 39638
// begin _x := x ;
39618: LD_ADDR_VAR 0 6
39622: PUSH
39623: LD_VAR 0 4
39627: ST_TO_ADDR
// _y := y ;
39628: LD_ADDR_VAR 0 7
39632: PUSH
39633: LD_VAR 0 5
39637: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39638: LD_ADDR_VAR 0 3
39642: PUSH
39643: LD_INT 1
39645: PPUSH
39646: LD_VAR 0 14
39650: PPUSH
39651: CALL_OW 12
39655: ST_TO_ADDR
// case i of 1 :
39656: LD_VAR 0 3
39660: PUSH
39661: LD_INT 1
39663: DOUBLE
39664: EQUAL
39665: IFTRUE 39669
39667: GO 39686
39669: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39670: LD_VAR 0 1
39674: PPUSH
39675: LD_VAR 0 10
39679: PPUSH
39680: CALL_OW 115
39684: GO 39747
39686: LD_INT 2
39688: DOUBLE
39689: EQUAL
39690: IFTRUE 39694
39692: GO 39716
39694: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39695: LD_VAR 0 1
39699: PPUSH
39700: LD_VAR 0 6
39704: PPUSH
39705: LD_VAR 0 7
39709: PPUSH
39710: CALL_OW 153
39714: GO 39747
39716: LD_INT 3
39718: DOUBLE
39719: EQUAL
39720: IFTRUE 39724
39722: GO 39746
39724: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39725: LD_VAR 0 1
39729: PPUSH
39730: LD_VAR 0 6
39734: PPUSH
39735: LD_VAR 0 7
39739: PPUSH
39740: CALL_OW 154
39744: GO 39747
39746: POP
// end ;
39747: LD_VAR 0 2
39751: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39752: LD_INT 0
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
// if not unit or not building then
39760: LD_VAR 0 1
39764: NOT
39765: PUSH
39766: LD_VAR 0 2
39770: NOT
39771: OR
39772: IFFALSE 39776
// exit ;
39774: GO 39934
// x := GetX ( building ) ;
39776: LD_ADDR_VAR 0 5
39780: PUSH
39781: LD_VAR 0 2
39785: PPUSH
39786: CALL_OW 250
39790: ST_TO_ADDR
// y := GetY ( building ) ;
39791: LD_ADDR_VAR 0 6
39795: PUSH
39796: LD_VAR 0 2
39800: PPUSH
39801: CALL_OW 251
39805: ST_TO_ADDR
// for i = 0 to 5 do
39806: LD_ADDR_VAR 0 4
39810: PUSH
39811: DOUBLE
39812: LD_INT 0
39814: DEC
39815: ST_TO_ADDR
39816: LD_INT 5
39818: PUSH
39819: FOR_TO
39820: IFFALSE 39932
// begin _x := ShiftX ( x , i , 3 ) ;
39822: LD_ADDR_VAR 0 7
39826: PUSH
39827: LD_VAR 0 5
39831: PPUSH
39832: LD_VAR 0 4
39836: PPUSH
39837: LD_INT 3
39839: PPUSH
39840: CALL_OW 272
39844: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39845: LD_ADDR_VAR 0 8
39849: PUSH
39850: LD_VAR 0 6
39854: PPUSH
39855: LD_VAR 0 4
39859: PPUSH
39860: LD_INT 3
39862: PPUSH
39863: CALL_OW 273
39867: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39868: LD_VAR 0 7
39872: PPUSH
39873: LD_VAR 0 8
39877: PPUSH
39878: CALL_OW 488
39882: NOT
39883: IFFALSE 39887
// continue ;
39885: GO 39819
// if HexInfo ( _x , _y ) = 0 then
39887: LD_VAR 0 7
39891: PPUSH
39892: LD_VAR 0 8
39896: PPUSH
39897: CALL_OW 428
39901: PUSH
39902: LD_INT 0
39904: EQUAL
39905: IFFALSE 39930
// begin ComMoveXY ( unit , _x , _y ) ;
39907: LD_VAR 0 1
39911: PPUSH
39912: LD_VAR 0 7
39916: PPUSH
39917: LD_VAR 0 8
39921: PPUSH
39922: CALL_OW 111
// exit ;
39926: POP
39927: POP
39928: GO 39934
// end ; end ;
39930: GO 39819
39932: POP
39933: POP
// end ;
39934: LD_VAR 0 3
39938: RET
// export function ScanBase ( side , base_area ) ; begin
39939: LD_INT 0
39941: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39942: LD_ADDR_VAR 0 3
39946: PUSH
39947: LD_VAR 0 2
39951: PPUSH
39952: LD_INT 81
39954: PUSH
39955: LD_VAR 0 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PPUSH
39964: CALL_OW 70
39968: ST_TO_ADDR
// end ;
39969: LD_VAR 0 3
39973: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39974: LD_INT 0
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
// result := false ;
39980: LD_ADDR_VAR 0 2
39984: PUSH
39985: LD_INT 0
39987: ST_TO_ADDR
// side := GetSide ( unit ) ;
39988: LD_ADDR_VAR 0 3
39992: PUSH
39993: LD_VAR 0 1
39997: PPUSH
39998: CALL_OW 255
40002: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40003: LD_ADDR_VAR 0 4
40007: PUSH
40008: LD_VAR 0 1
40012: PPUSH
40013: CALL_OW 248
40017: ST_TO_ADDR
// case nat of 1 :
40018: LD_VAR 0 4
40022: PUSH
40023: LD_INT 1
40025: DOUBLE
40026: EQUAL
40027: IFTRUE 40031
40029: GO 40042
40031: POP
// tech := tech_lassight ; 2 :
40032: LD_ADDR_VAR 0 5
40036: PUSH
40037: LD_INT 12
40039: ST_TO_ADDR
40040: GO 40081
40042: LD_INT 2
40044: DOUBLE
40045: EQUAL
40046: IFTRUE 40050
40048: GO 40061
40050: POP
// tech := tech_mortar ; 3 :
40051: LD_ADDR_VAR 0 5
40055: PUSH
40056: LD_INT 41
40058: ST_TO_ADDR
40059: GO 40081
40061: LD_INT 3
40063: DOUBLE
40064: EQUAL
40065: IFTRUE 40069
40067: GO 40080
40069: POP
// tech := tech_bazooka ; end ;
40070: LD_ADDR_VAR 0 5
40074: PUSH
40075: LD_INT 44
40077: ST_TO_ADDR
40078: GO 40081
40080: POP
// if Researched ( side , tech ) then
40081: LD_VAR 0 3
40085: PPUSH
40086: LD_VAR 0 5
40090: PPUSH
40091: CALL_OW 325
40095: IFFALSE 40122
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40097: LD_ADDR_VAR 0 2
40101: PUSH
40102: LD_INT 5
40104: PUSH
40105: LD_INT 8
40107: PUSH
40108: LD_INT 9
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: PUSH
40116: LD_VAR 0 4
40120: ARRAY
40121: ST_TO_ADDR
// end ;
40122: LD_VAR 0 2
40126: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40127: LD_INT 0
40129: PPUSH
40130: PPUSH
40131: PPUSH
// if not mines then
40132: LD_VAR 0 2
40136: NOT
40137: IFFALSE 40141
// exit ;
40139: GO 40285
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40141: LD_ADDR_VAR 0 5
40145: PUSH
40146: LD_INT 81
40148: PUSH
40149: LD_VAR 0 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 3
40160: PUSH
40161: LD_INT 21
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PPUSH
40179: CALL_OW 69
40183: ST_TO_ADDR
// for i in mines do
40184: LD_ADDR_VAR 0 4
40188: PUSH
40189: LD_VAR 0 2
40193: PUSH
40194: FOR_IN
40195: IFFALSE 40283
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40197: LD_VAR 0 4
40201: PUSH
40202: LD_INT 1
40204: ARRAY
40205: PPUSH
40206: LD_VAR 0 4
40210: PUSH
40211: LD_INT 2
40213: ARRAY
40214: PPUSH
40215: CALL_OW 458
40219: NOT
40220: IFFALSE 40224
// continue ;
40222: GO 40194
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40224: LD_VAR 0 4
40228: PUSH
40229: LD_INT 1
40231: ARRAY
40232: PPUSH
40233: LD_VAR 0 4
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PPUSH
40242: CALL_OW 428
40246: PUSH
40247: LD_VAR 0 5
40251: IN
40252: IFFALSE 40281
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40254: LD_VAR 0 4
40258: PUSH
40259: LD_INT 1
40261: ARRAY
40262: PPUSH
40263: LD_VAR 0 4
40267: PUSH
40268: LD_INT 2
40270: ARRAY
40271: PPUSH
40272: LD_VAR 0 1
40276: PPUSH
40277: CALL_OW 456
// end ;
40281: GO 40194
40283: POP
40284: POP
// end ;
40285: LD_VAR 0 3
40289: RET
// export function Count ( array ) ; var i ; begin
40290: LD_INT 0
40292: PPUSH
40293: PPUSH
// result := 0 ;
40294: LD_ADDR_VAR 0 2
40298: PUSH
40299: LD_INT 0
40301: ST_TO_ADDR
// for i in array do
40302: LD_ADDR_VAR 0 3
40306: PUSH
40307: LD_VAR 0 1
40311: PUSH
40312: FOR_IN
40313: IFFALSE 40337
// if i then
40315: LD_VAR 0 3
40319: IFFALSE 40335
// result := result + 1 ;
40321: LD_ADDR_VAR 0 2
40325: PUSH
40326: LD_VAR 0 2
40330: PUSH
40331: LD_INT 1
40333: PLUS
40334: ST_TO_ADDR
40335: GO 40312
40337: POP
40338: POP
// end ;
40339: LD_VAR 0 2
40343: RET
// export function IsEmpty ( building ) ; begin
40344: LD_INT 0
40346: PPUSH
// if not building then
40347: LD_VAR 0 1
40351: NOT
40352: IFFALSE 40356
// exit ;
40354: GO 40399
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40356: LD_ADDR_VAR 0 2
40360: PUSH
40361: LD_VAR 0 1
40365: PUSH
40366: LD_INT 22
40368: PUSH
40369: LD_VAR 0 1
40373: PPUSH
40374: CALL_OW 255
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 58
40385: PUSH
40386: EMPTY
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PPUSH
40393: CALL_OW 69
40397: IN
40398: ST_TO_ADDR
// end ;
40399: LD_VAR 0 2
40403: RET
// export function IsNotFull ( building ) ; begin
40404: LD_INT 0
40406: PPUSH
// if not building then
40407: LD_VAR 0 1
40411: NOT
40412: IFFALSE 40416
// exit ;
40414: GO 40435
// result := UnitsInside ( building ) < 6 ;
40416: LD_ADDR_VAR 0 2
40420: PUSH
40421: LD_VAR 0 1
40425: PPUSH
40426: CALL_OW 313
40430: PUSH
40431: LD_INT 6
40433: LESS
40434: ST_TO_ADDR
// end ;
40435: LD_VAR 0 2
40439: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40440: LD_INT 0
40442: PPUSH
40443: PPUSH
40444: PPUSH
40445: PPUSH
// tmp := [ ] ;
40446: LD_ADDR_VAR 0 3
40450: PUSH
40451: EMPTY
40452: ST_TO_ADDR
// list := [ ] ;
40453: LD_ADDR_VAR 0 5
40457: PUSH
40458: EMPTY
40459: ST_TO_ADDR
// for i = 16 to 25 do
40460: LD_ADDR_VAR 0 4
40464: PUSH
40465: DOUBLE
40466: LD_INT 16
40468: DEC
40469: ST_TO_ADDR
40470: LD_INT 25
40472: PUSH
40473: FOR_TO
40474: IFFALSE 40547
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40476: LD_ADDR_VAR 0 3
40480: PUSH
40481: LD_VAR 0 3
40485: PUSH
40486: LD_INT 22
40488: PUSH
40489: LD_VAR 0 1
40493: PPUSH
40494: CALL_OW 255
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 91
40505: PUSH
40506: LD_VAR 0 1
40510: PUSH
40511: LD_INT 6
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 30
40521: PUSH
40522: LD_VAR 0 4
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: PPUSH
40539: CALL_OW 69
40543: ADD
40544: ST_TO_ADDR
40545: GO 40473
40547: POP
40548: POP
// for i = 1 to tmp do
40549: LD_ADDR_VAR 0 4
40553: PUSH
40554: DOUBLE
40555: LD_INT 1
40557: DEC
40558: ST_TO_ADDR
40559: LD_VAR 0 3
40563: PUSH
40564: FOR_TO
40565: IFFALSE 40653
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40567: LD_ADDR_VAR 0 5
40571: PUSH
40572: LD_VAR 0 5
40576: PUSH
40577: LD_VAR 0 3
40581: PUSH
40582: LD_VAR 0 4
40586: ARRAY
40587: PPUSH
40588: CALL_OW 266
40592: PUSH
40593: LD_VAR 0 3
40597: PUSH
40598: LD_VAR 0 4
40602: ARRAY
40603: PPUSH
40604: CALL_OW 250
40608: PUSH
40609: LD_VAR 0 3
40613: PUSH
40614: LD_VAR 0 4
40618: ARRAY
40619: PPUSH
40620: CALL_OW 251
40624: PUSH
40625: LD_VAR 0 3
40629: PUSH
40630: LD_VAR 0 4
40634: ARRAY
40635: PPUSH
40636: CALL_OW 254
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: ADD
40650: ST_TO_ADDR
40651: GO 40564
40653: POP
40654: POP
// result := list ;
40655: LD_ADDR_VAR 0 2
40659: PUSH
40660: LD_VAR 0 5
40664: ST_TO_ADDR
// end ;
40665: LD_VAR 0 2
40669: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40670: LD_INT 0
40672: PPUSH
40673: PPUSH
40674: PPUSH
40675: PPUSH
40676: PPUSH
40677: PPUSH
40678: PPUSH
// if not factory then
40679: LD_VAR 0 1
40683: NOT
40684: IFFALSE 40688
// exit ;
40686: GO 41281
// if control = control_apeman then
40688: LD_VAR 0 4
40692: PUSH
40693: LD_INT 5
40695: EQUAL
40696: IFFALSE 40805
// begin tmp := UnitsInside ( factory ) ;
40698: LD_ADDR_VAR 0 8
40702: PUSH
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 313
40712: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40713: LD_VAR 0 8
40717: PPUSH
40718: LD_INT 25
40720: PUSH
40721: LD_INT 12
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PPUSH
40728: CALL_OW 72
40732: NOT
40733: IFFALSE 40743
// control := control_manual ;
40735: LD_ADDR_VAR 0 4
40739: PUSH
40740: LD_INT 1
40742: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40743: LD_ADDR_VAR 0 8
40747: PUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: CALL 40440 0 1
40757: ST_TO_ADDR
// if tmp then
40758: LD_VAR 0 8
40762: IFFALSE 40805
// begin for i in tmp do
40764: LD_ADDR_VAR 0 7
40768: PUSH
40769: LD_VAR 0 8
40773: PUSH
40774: FOR_IN
40775: IFFALSE 40803
// if i [ 1 ] = b_ext_radio then
40777: LD_VAR 0 7
40781: PUSH
40782: LD_INT 1
40784: ARRAY
40785: PUSH
40786: LD_INT 22
40788: EQUAL
40789: IFFALSE 40801
// begin control := control_remote ;
40791: LD_ADDR_VAR 0 4
40795: PUSH
40796: LD_INT 2
40798: ST_TO_ADDR
// break ;
40799: GO 40803
// end ;
40801: GO 40774
40803: POP
40804: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40805: LD_VAR 0 1
40809: PPUSH
40810: LD_VAR 0 2
40814: PPUSH
40815: LD_VAR 0 3
40819: PPUSH
40820: LD_VAR 0 4
40824: PPUSH
40825: LD_VAR 0 5
40829: PPUSH
40830: CALL_OW 448
40834: IFFALSE 40869
// begin result := [ chassis , engine , control , weapon ] ;
40836: LD_ADDR_VAR 0 6
40840: PUSH
40841: LD_VAR 0 2
40845: PUSH
40846: LD_VAR 0 3
40850: PUSH
40851: LD_VAR 0 4
40855: PUSH
40856: LD_VAR 0 5
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: ST_TO_ADDR
// exit ;
40867: GO 41281
// end ; _chassis := AvailableChassisList ( factory ) ;
40869: LD_ADDR_VAR 0 9
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 475
40883: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40884: LD_ADDR_VAR 0 11
40888: PUSH
40889: LD_VAR 0 1
40893: PPUSH
40894: CALL_OW 476
40898: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40899: LD_ADDR_VAR 0 12
40903: PUSH
40904: LD_VAR 0 1
40908: PPUSH
40909: CALL_OW 477
40913: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40914: LD_ADDR_VAR 0 10
40918: PUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: CALL_OW 478
40928: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40929: LD_VAR 0 9
40933: NOT
40934: PUSH
40935: LD_VAR 0 11
40939: NOT
40940: OR
40941: PUSH
40942: LD_VAR 0 12
40946: NOT
40947: OR
40948: PUSH
40949: LD_VAR 0 10
40953: NOT
40954: OR
40955: IFFALSE 40990
// begin result := [ chassis , engine , control , weapon ] ;
40957: LD_ADDR_VAR 0 6
40961: PUSH
40962: LD_VAR 0 2
40966: PUSH
40967: LD_VAR 0 3
40971: PUSH
40972: LD_VAR 0 4
40976: PUSH
40977: LD_VAR 0 5
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// exit ;
40988: GO 41281
// end ; if not chassis in _chassis then
40990: LD_VAR 0 2
40994: PUSH
40995: LD_VAR 0 9
40999: IN
41000: NOT
41001: IFFALSE 41027
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41003: LD_ADDR_VAR 0 2
41007: PUSH
41008: LD_VAR 0 9
41012: PUSH
41013: LD_INT 1
41015: PPUSH
41016: LD_VAR 0 9
41020: PPUSH
41021: CALL_OW 12
41025: ARRAY
41026: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41027: LD_VAR 0 2
41031: PPUSH
41032: LD_VAR 0 3
41036: PPUSH
41037: CALL 41286 0 2
41041: NOT
41042: IFFALSE 41101
// repeat engine := _engine [ 1 ] ;
41044: LD_ADDR_VAR 0 3
41048: PUSH
41049: LD_VAR 0 11
41053: PUSH
41054: LD_INT 1
41056: ARRAY
41057: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41058: LD_ADDR_VAR 0 11
41062: PUSH
41063: LD_VAR 0 11
41067: PPUSH
41068: LD_INT 1
41070: PPUSH
41071: CALL_OW 3
41075: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41076: LD_VAR 0 2
41080: PPUSH
41081: LD_VAR 0 3
41085: PPUSH
41086: CALL 41286 0 2
41090: PUSH
41091: LD_VAR 0 11
41095: PUSH
41096: EMPTY
41097: EQUAL
41098: OR
41099: IFFALSE 41044
// if not control in _control then
41101: LD_VAR 0 4
41105: PUSH
41106: LD_VAR 0 12
41110: IN
41111: NOT
41112: IFFALSE 41138
// control := _control [ rand ( 1 , _control ) ] ;
41114: LD_ADDR_VAR 0 4
41118: PUSH
41119: LD_VAR 0 12
41123: PUSH
41124: LD_INT 1
41126: PPUSH
41127: LD_VAR 0 12
41131: PPUSH
41132: CALL_OW 12
41136: ARRAY
41137: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41138: LD_VAR 0 2
41142: PPUSH
41143: LD_VAR 0 5
41147: PPUSH
41148: CALL 41506 0 2
41152: NOT
41153: IFFALSE 41212
// repeat weapon := _weapon [ 1 ] ;
41155: LD_ADDR_VAR 0 5
41159: PUSH
41160: LD_VAR 0 10
41164: PUSH
41165: LD_INT 1
41167: ARRAY
41168: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41169: LD_ADDR_VAR 0 10
41173: PUSH
41174: LD_VAR 0 10
41178: PPUSH
41179: LD_INT 1
41181: PPUSH
41182: CALL_OW 3
41186: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41187: LD_VAR 0 2
41191: PPUSH
41192: LD_VAR 0 5
41196: PPUSH
41197: CALL 41506 0 2
41201: PUSH
41202: LD_VAR 0 10
41206: PUSH
41207: EMPTY
41208: EQUAL
41209: OR
41210: IFFALSE 41155
// result := [ ] ;
41212: LD_ADDR_VAR 0 6
41216: PUSH
41217: EMPTY
41218: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41219: LD_VAR 0 1
41223: PPUSH
41224: LD_VAR 0 2
41228: PPUSH
41229: LD_VAR 0 3
41233: PPUSH
41234: LD_VAR 0 4
41238: PPUSH
41239: LD_VAR 0 5
41243: PPUSH
41244: CALL_OW 448
41248: IFFALSE 41281
// result := [ chassis , engine , control , weapon ] ;
41250: LD_ADDR_VAR 0 6
41254: PUSH
41255: LD_VAR 0 2
41259: PUSH
41260: LD_VAR 0 3
41264: PUSH
41265: LD_VAR 0 4
41269: PUSH
41270: LD_VAR 0 5
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: ST_TO_ADDR
// end ;
41281: LD_VAR 0 6
41285: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41286: LD_INT 0
41288: PPUSH
// if not chassis or not engine then
41289: LD_VAR 0 1
41293: NOT
41294: PUSH
41295: LD_VAR 0 2
41299: NOT
41300: OR
41301: IFFALSE 41305
// exit ;
41303: GO 41501
// case engine of engine_solar :
41305: LD_VAR 0 2
41309: PUSH
41310: LD_INT 2
41312: DOUBLE
41313: EQUAL
41314: IFTRUE 41318
41316: GO 41356
41318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41319: LD_ADDR_VAR 0 3
41323: PUSH
41324: LD_INT 11
41326: PUSH
41327: LD_INT 12
41329: PUSH
41330: LD_INT 13
41332: PUSH
41333: LD_INT 14
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: ST_TO_ADDR
41354: GO 41485
41356: LD_INT 1
41358: DOUBLE
41359: EQUAL
41360: IFTRUE 41364
41362: GO 41426
41364: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41365: LD_ADDR_VAR 0 3
41369: PUSH
41370: LD_INT 11
41372: PUSH
41373: LD_INT 12
41375: PUSH
41376: LD_INT 13
41378: PUSH
41379: LD_INT 14
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: LD_INT 4
41393: PUSH
41394: LD_INT 5
41396: PUSH
41397: LD_INT 21
41399: PUSH
41400: LD_INT 23
41402: PUSH
41403: LD_INT 22
41405: PUSH
41406: LD_INT 24
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: ST_TO_ADDR
41424: GO 41485
41426: LD_INT 3
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41484
41434: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_INT 13
41442: PUSH
41443: LD_INT 14
41445: PUSH
41446: LD_INT 2
41448: PUSH
41449: LD_INT 3
41451: PUSH
41452: LD_INT 4
41454: PUSH
41455: LD_INT 5
41457: PUSH
41458: LD_INT 21
41460: PUSH
41461: LD_INT 22
41463: PUSH
41464: LD_INT 23
41466: PUSH
41467: LD_INT 24
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: ST_TO_ADDR
41482: GO 41485
41484: POP
// result := ( chassis in result ) ;
41485: LD_ADDR_VAR 0 3
41489: PUSH
41490: LD_VAR 0 1
41494: PUSH
41495: LD_VAR 0 3
41499: IN
41500: ST_TO_ADDR
// end ;
41501: LD_VAR 0 3
41505: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41506: LD_INT 0
41508: PPUSH
// if not chassis or not weapon then
41509: LD_VAR 0 1
41513: NOT
41514: PUSH
41515: LD_VAR 0 2
41519: NOT
41520: OR
41521: IFFALSE 41525
// exit ;
41523: GO 42587
// case weapon of us_machine_gun :
41525: LD_VAR 0 2
41529: PUSH
41530: LD_INT 2
41532: DOUBLE
41533: EQUAL
41534: IFTRUE 41538
41536: GO 41568
41538: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41539: LD_ADDR_VAR 0 3
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: LD_INT 3
41552: PUSH
41553: LD_INT 4
41555: PUSH
41556: LD_INT 5
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: ST_TO_ADDR
41566: GO 42571
41568: LD_INT 3
41570: DOUBLE
41571: EQUAL
41572: IFTRUE 41576
41574: GO 41606
41576: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41577: LD_ADDR_VAR 0 3
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: LD_INT 3
41590: PUSH
41591: LD_INT 4
41593: PUSH
41594: LD_INT 5
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: ST_TO_ADDR
41604: GO 42571
41606: LD_INT 11
41608: DOUBLE
41609: EQUAL
41610: IFTRUE 41614
41612: GO 41644
41614: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41615: LD_ADDR_VAR 0 3
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 4
41631: PUSH
41632: LD_INT 5
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: ST_TO_ADDR
41642: GO 42571
41644: LD_INT 4
41646: DOUBLE
41647: EQUAL
41648: IFTRUE 41652
41650: GO 41678
41652: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41653: LD_ADDR_VAR 0 3
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: LD_INT 3
41663: PUSH
41664: LD_INT 4
41666: PUSH
41667: LD_INT 5
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: ST_TO_ADDR
41676: GO 42571
41678: LD_INT 5
41680: DOUBLE
41681: EQUAL
41682: IFTRUE 41686
41684: GO 41712
41686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41687: LD_ADDR_VAR 0 3
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 4
41700: PUSH
41701: LD_INT 5
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: ST_TO_ADDR
41710: GO 42571
41712: LD_INT 9
41714: DOUBLE
41715: EQUAL
41716: IFTRUE 41720
41718: GO 41746
41720: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: LD_INT 4
41734: PUSH
41735: LD_INT 5
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: ST_TO_ADDR
41744: GO 42571
41746: LD_INT 7
41748: DOUBLE
41749: EQUAL
41750: IFTRUE 41754
41752: GO 41780
41754: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41755: LD_ADDR_VAR 0 3
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: LD_INT 4
41768: PUSH
41769: LD_INT 5
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: ST_TO_ADDR
41778: GO 42571
41780: LD_INT 12
41782: DOUBLE
41783: EQUAL
41784: IFTRUE 41788
41786: GO 41814
41788: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 3
41799: PUSH
41800: LD_INT 4
41802: PUSH
41803: LD_INT 5
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: ST_TO_ADDR
41812: GO 42571
41814: LD_INT 13
41816: DOUBLE
41817: EQUAL
41818: IFTRUE 41822
41820: GO 41848
41822: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41823: LD_ADDR_VAR 0 3
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 4
41836: PUSH
41837: LD_INT 5
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: ST_TO_ADDR
41846: GO 42571
41848: LD_INT 14
41850: DOUBLE
41851: EQUAL
41852: IFTRUE 41856
41854: GO 41874
41856: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41857: LD_ADDR_VAR 0 3
41861: PUSH
41862: LD_INT 4
41864: PUSH
41865: LD_INT 5
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: ST_TO_ADDR
41872: GO 42571
41874: LD_INT 6
41876: DOUBLE
41877: EQUAL
41878: IFTRUE 41882
41880: GO 41900
41882: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41883: LD_ADDR_VAR 0 3
41887: PUSH
41888: LD_INT 4
41890: PUSH
41891: LD_INT 5
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: ST_TO_ADDR
41898: GO 42571
41900: LD_INT 10
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41908
41906: GO 41926
41908: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_INT 4
41916: PUSH
41917: LD_INT 5
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: ST_TO_ADDR
41924: GO 42571
41926: LD_INT 22
41928: DOUBLE
41929: EQUAL
41930: IFTRUE 41934
41932: GO 41960
41934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41935: LD_ADDR_VAR 0 3
41939: PUSH
41940: LD_INT 11
41942: PUSH
41943: LD_INT 12
41945: PUSH
41946: LD_INT 13
41948: PUSH
41949: LD_INT 14
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: ST_TO_ADDR
41958: GO 42571
41960: LD_INT 23
41962: DOUBLE
41963: EQUAL
41964: IFTRUE 41968
41966: GO 41994
41968: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41969: LD_ADDR_VAR 0 3
41973: PUSH
41974: LD_INT 11
41976: PUSH
41977: LD_INT 12
41979: PUSH
41980: LD_INT 13
41982: PUSH
41983: LD_INT 14
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: ST_TO_ADDR
41992: GO 42571
41994: LD_INT 24
41996: DOUBLE
41997: EQUAL
41998: IFTRUE 42002
42000: GO 42028
42002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: LD_INT 11
42010: PUSH
42011: LD_INT 12
42013: PUSH
42014: LD_INT 13
42016: PUSH
42017: LD_INT 14
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
42026: GO 42571
42028: LD_INT 30
42030: DOUBLE
42031: EQUAL
42032: IFTRUE 42036
42034: GO 42062
42036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42037: LD_ADDR_VAR 0 3
42041: PUSH
42042: LD_INT 11
42044: PUSH
42045: LD_INT 12
42047: PUSH
42048: LD_INT 13
42050: PUSH
42051: LD_INT 14
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: ST_TO_ADDR
42060: GO 42571
42062: LD_INT 25
42064: DOUBLE
42065: EQUAL
42066: IFTRUE 42070
42068: GO 42088
42070: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: LD_INT 13
42078: PUSH
42079: LD_INT 14
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: ST_TO_ADDR
42086: GO 42571
42088: LD_INT 27
42090: DOUBLE
42091: EQUAL
42092: IFTRUE 42096
42094: GO 42114
42096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42097: LD_ADDR_VAR 0 3
42101: PUSH
42102: LD_INT 13
42104: PUSH
42105: LD_INT 14
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: ST_TO_ADDR
42112: GO 42571
42114: LD_EXP 50
42118: DOUBLE
42119: EQUAL
42120: IFTRUE 42124
42122: GO 42150
42124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42125: LD_ADDR_VAR 0 3
42129: PUSH
42130: LD_INT 11
42132: PUSH
42133: LD_INT 12
42135: PUSH
42136: LD_INT 13
42138: PUSH
42139: LD_INT 14
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: ST_TO_ADDR
42148: GO 42571
42150: LD_INT 28
42152: DOUBLE
42153: EQUAL
42154: IFTRUE 42158
42156: GO 42176
42158: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42159: LD_ADDR_VAR 0 3
42163: PUSH
42164: LD_INT 13
42166: PUSH
42167: LD_INT 14
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: ST_TO_ADDR
42174: GO 42571
42176: LD_INT 29
42178: DOUBLE
42179: EQUAL
42180: IFTRUE 42184
42182: GO 42202
42184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42185: LD_ADDR_VAR 0 3
42189: PUSH
42190: LD_INT 13
42192: PUSH
42193: LD_INT 14
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: ST_TO_ADDR
42200: GO 42571
42202: LD_INT 31
42204: DOUBLE
42205: EQUAL
42206: IFTRUE 42210
42208: GO 42228
42210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42211: LD_ADDR_VAR 0 3
42215: PUSH
42216: LD_INT 13
42218: PUSH
42219: LD_INT 14
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: ST_TO_ADDR
42226: GO 42571
42228: LD_INT 26
42230: DOUBLE
42231: EQUAL
42232: IFTRUE 42236
42234: GO 42254
42236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42237: LD_ADDR_VAR 0 3
42241: PUSH
42242: LD_INT 13
42244: PUSH
42245: LD_INT 14
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: ST_TO_ADDR
42252: GO 42571
42254: LD_INT 42
42256: DOUBLE
42257: EQUAL
42258: IFTRUE 42262
42260: GO 42288
42262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_INT 21
42270: PUSH
42271: LD_INT 22
42273: PUSH
42274: LD_INT 23
42276: PUSH
42277: LD_INT 24
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
42286: GO 42571
42288: LD_INT 43
42290: DOUBLE
42291: EQUAL
42292: IFTRUE 42296
42294: GO 42322
42296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42297: LD_ADDR_VAR 0 3
42301: PUSH
42302: LD_INT 21
42304: PUSH
42305: LD_INT 22
42307: PUSH
42308: LD_INT 23
42310: PUSH
42311: LD_INT 24
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: ST_TO_ADDR
42320: GO 42571
42322: LD_INT 44
42324: DOUBLE
42325: EQUAL
42326: IFTRUE 42330
42328: GO 42356
42330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42331: LD_ADDR_VAR 0 3
42335: PUSH
42336: LD_INT 21
42338: PUSH
42339: LD_INT 22
42341: PUSH
42342: LD_INT 23
42344: PUSH
42345: LD_INT 24
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
42354: GO 42571
42356: LD_INT 45
42358: DOUBLE
42359: EQUAL
42360: IFTRUE 42364
42362: GO 42390
42364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42365: LD_ADDR_VAR 0 3
42369: PUSH
42370: LD_INT 21
42372: PUSH
42373: LD_INT 22
42375: PUSH
42376: LD_INT 23
42378: PUSH
42379: LD_INT 24
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
42388: GO 42571
42390: LD_INT 49
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 42424
42398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_INT 21
42406: PUSH
42407: LD_INT 22
42409: PUSH
42410: LD_INT 23
42412: PUSH
42413: LD_INT 24
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
42422: GO 42571
42424: LD_INT 51
42426: DOUBLE
42427: EQUAL
42428: IFTRUE 42432
42430: GO 42458
42432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: LD_INT 21
42440: PUSH
42441: LD_INT 22
42443: PUSH
42444: LD_INT 23
42446: PUSH
42447: LD_INT 24
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
42456: GO 42571
42458: LD_INT 52
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42492
42466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_INT 21
42474: PUSH
42475: LD_INT 22
42477: PUSH
42478: LD_INT 23
42480: PUSH
42481: LD_INT 24
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
42490: GO 42571
42492: LD_INT 53
42494: DOUBLE
42495: EQUAL
42496: IFTRUE 42500
42498: GO 42518
42500: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42501: LD_ADDR_VAR 0 3
42505: PUSH
42506: LD_INT 23
42508: PUSH
42509: LD_INT 24
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: ST_TO_ADDR
42516: GO 42571
42518: LD_INT 46
42520: DOUBLE
42521: EQUAL
42522: IFTRUE 42526
42524: GO 42544
42526: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42527: LD_ADDR_VAR 0 3
42531: PUSH
42532: LD_INT 23
42534: PUSH
42535: LD_INT 24
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: ST_TO_ADDR
42542: GO 42571
42544: LD_INT 47
42546: DOUBLE
42547: EQUAL
42548: IFTRUE 42552
42550: GO 42570
42552: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42553: LD_ADDR_VAR 0 3
42557: PUSH
42558: LD_INT 23
42560: PUSH
42561: LD_INT 24
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: ST_TO_ADDR
42568: GO 42571
42570: POP
// result := ( chassis in result ) ;
42571: LD_ADDR_VAR 0 3
42575: PUSH
42576: LD_VAR 0 1
42580: PUSH
42581: LD_VAR 0 3
42585: IN
42586: ST_TO_ADDR
// end ;
42587: LD_VAR 0 3
42591: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42592: LD_INT 0
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
// result := array ;
42601: LD_ADDR_VAR 0 5
42605: PUSH
42606: LD_VAR 0 1
42610: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42611: LD_VAR 0 1
42615: NOT
42616: PUSH
42617: LD_VAR 0 2
42621: NOT
42622: OR
42623: PUSH
42624: LD_VAR 0 3
42628: NOT
42629: OR
42630: PUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_VAR 0 1
42640: GREATER
42641: OR
42642: PUSH
42643: LD_VAR 0 3
42647: PUSH
42648: LD_VAR 0 1
42652: GREATER
42653: OR
42654: IFFALSE 42658
// exit ;
42656: GO 42954
// if direction then
42658: LD_VAR 0 4
42662: IFFALSE 42726
// begin d := 1 ;
42664: LD_ADDR_VAR 0 9
42668: PUSH
42669: LD_INT 1
42671: ST_TO_ADDR
// if i_from > i_to then
42672: LD_VAR 0 2
42676: PUSH
42677: LD_VAR 0 3
42681: GREATER
42682: IFFALSE 42708
// length := ( array - i_from ) + i_to else
42684: LD_ADDR_VAR 0 11
42688: PUSH
42689: LD_VAR 0 1
42693: PUSH
42694: LD_VAR 0 2
42698: MINUS
42699: PUSH
42700: LD_VAR 0 3
42704: PLUS
42705: ST_TO_ADDR
42706: GO 42724
// length := i_to - i_from ;
42708: LD_ADDR_VAR 0 11
42712: PUSH
42713: LD_VAR 0 3
42717: PUSH
42718: LD_VAR 0 2
42722: MINUS
42723: ST_TO_ADDR
// end else
42724: GO 42787
// begin d := - 1 ;
42726: LD_ADDR_VAR 0 9
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: ST_TO_ADDR
// if i_from > i_to then
42735: LD_VAR 0 2
42739: PUSH
42740: LD_VAR 0 3
42744: GREATER
42745: IFFALSE 42765
// length := i_from - i_to else
42747: LD_ADDR_VAR 0 11
42751: PUSH
42752: LD_VAR 0 2
42756: PUSH
42757: LD_VAR 0 3
42761: MINUS
42762: ST_TO_ADDR
42763: GO 42787
// length := ( array - i_to ) + i_from ;
42765: LD_ADDR_VAR 0 11
42769: PUSH
42770: LD_VAR 0 1
42774: PUSH
42775: LD_VAR 0 3
42779: MINUS
42780: PUSH
42781: LD_VAR 0 2
42785: PLUS
42786: ST_TO_ADDR
// end ; if not length then
42787: LD_VAR 0 11
42791: NOT
42792: IFFALSE 42796
// exit ;
42794: GO 42954
// tmp := array ;
42796: LD_ADDR_VAR 0 10
42800: PUSH
42801: LD_VAR 0 1
42805: ST_TO_ADDR
// for i = 1 to length do
42806: LD_ADDR_VAR 0 6
42810: PUSH
42811: DOUBLE
42812: LD_INT 1
42814: DEC
42815: ST_TO_ADDR
42816: LD_VAR 0 11
42820: PUSH
42821: FOR_TO
42822: IFFALSE 42942
// begin for j = 1 to array do
42824: LD_ADDR_VAR 0 7
42828: PUSH
42829: DOUBLE
42830: LD_INT 1
42832: DEC
42833: ST_TO_ADDR
42834: LD_VAR 0 1
42838: PUSH
42839: FOR_TO
42840: IFFALSE 42928
// begin k := j + d ;
42842: LD_ADDR_VAR 0 8
42846: PUSH
42847: LD_VAR 0 7
42851: PUSH
42852: LD_VAR 0 9
42856: PLUS
42857: ST_TO_ADDR
// if k > array then
42858: LD_VAR 0 8
42862: PUSH
42863: LD_VAR 0 1
42867: GREATER
42868: IFFALSE 42878
// k := 1 ;
42870: LD_ADDR_VAR 0 8
42874: PUSH
42875: LD_INT 1
42877: ST_TO_ADDR
// if not k then
42878: LD_VAR 0 8
42882: NOT
42883: IFFALSE 42895
// k := array ;
42885: LD_ADDR_VAR 0 8
42889: PUSH
42890: LD_VAR 0 1
42894: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42895: LD_ADDR_VAR 0 10
42899: PUSH
42900: LD_VAR 0 10
42904: PPUSH
42905: LD_VAR 0 8
42909: PPUSH
42910: LD_VAR 0 1
42914: PUSH
42915: LD_VAR 0 7
42919: ARRAY
42920: PPUSH
42921: CALL_OW 1
42925: ST_TO_ADDR
// end ;
42926: GO 42839
42928: POP
42929: POP
// array := tmp ;
42930: LD_ADDR_VAR 0 1
42934: PUSH
42935: LD_VAR 0 10
42939: ST_TO_ADDR
// end ;
42940: GO 42821
42942: POP
42943: POP
// result := array ;
42944: LD_ADDR_VAR 0 5
42948: PUSH
42949: LD_VAR 0 1
42953: ST_TO_ADDR
// end ;
42954: LD_VAR 0 5
42958: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42959: LD_INT 0
42961: PPUSH
42962: PPUSH
// result := 0 ;
42963: LD_ADDR_VAR 0 3
42967: PUSH
42968: LD_INT 0
42970: ST_TO_ADDR
// if not array or not value in array then
42971: LD_VAR 0 1
42975: NOT
42976: PUSH
42977: LD_VAR 0 2
42981: PUSH
42982: LD_VAR 0 1
42986: IN
42987: NOT
42988: OR
42989: IFFALSE 42993
// exit ;
42991: GO 43047
// for i = 1 to array do
42993: LD_ADDR_VAR 0 4
42997: PUSH
42998: DOUBLE
42999: LD_INT 1
43001: DEC
43002: ST_TO_ADDR
43003: LD_VAR 0 1
43007: PUSH
43008: FOR_TO
43009: IFFALSE 43045
// if value = array [ i ] then
43011: LD_VAR 0 2
43015: PUSH
43016: LD_VAR 0 1
43020: PUSH
43021: LD_VAR 0 4
43025: ARRAY
43026: EQUAL
43027: IFFALSE 43043
// begin result := i ;
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_VAR 0 4
43038: ST_TO_ADDR
// exit ;
43039: POP
43040: POP
43041: GO 43047
// end ;
43043: GO 43008
43045: POP
43046: POP
// end ;
43047: LD_VAR 0 3
43051: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43052: LD_INT 0
43054: PPUSH
// vc_chassis := chassis ;
43055: LD_ADDR_OWVAR 37
43059: PUSH
43060: LD_VAR 0 1
43064: ST_TO_ADDR
// vc_engine := engine ;
43065: LD_ADDR_OWVAR 39
43069: PUSH
43070: LD_VAR 0 2
43074: ST_TO_ADDR
// vc_control := control ;
43075: LD_ADDR_OWVAR 38
43079: PUSH
43080: LD_VAR 0 3
43084: ST_TO_ADDR
// vc_weapon := weapon ;
43085: LD_ADDR_OWVAR 40
43089: PUSH
43090: LD_VAR 0 4
43094: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43095: LD_ADDR_OWVAR 41
43099: PUSH
43100: LD_VAR 0 5
43104: ST_TO_ADDR
// end ;
43105: LD_VAR 0 6
43109: RET
// export function WantPlant ( unit ) ; var task ; begin
43110: LD_INT 0
43112: PPUSH
43113: PPUSH
// result := false ;
43114: LD_ADDR_VAR 0 2
43118: PUSH
43119: LD_INT 0
43121: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: CALL_OW 437
43136: ST_TO_ADDR
// if task then
43137: LD_VAR 0 3
43141: IFFALSE 43169
// if task [ 1 ] [ 1 ] = p then
43143: LD_VAR 0 3
43147: PUSH
43148: LD_INT 1
43150: ARRAY
43151: PUSH
43152: LD_INT 1
43154: ARRAY
43155: PUSH
43156: LD_STRING p
43158: EQUAL
43159: IFFALSE 43169
// result := true ;
43161: LD_ADDR_VAR 0 2
43165: PUSH
43166: LD_INT 1
43168: ST_TO_ADDR
// end ;
43169: LD_VAR 0 2
43173: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43174: LD_INT 0
43176: PPUSH
43177: PPUSH
43178: PPUSH
43179: PPUSH
// if pos < 1 then
43180: LD_VAR 0 2
43184: PUSH
43185: LD_INT 1
43187: LESS
43188: IFFALSE 43192
// exit ;
43190: GO 43495
// if pos = 1 then
43192: LD_VAR 0 2
43196: PUSH
43197: LD_INT 1
43199: EQUAL
43200: IFFALSE 43233
// result := Replace ( arr , pos [ 1 ] , value ) else
43202: LD_ADDR_VAR 0 4
43206: PUSH
43207: LD_VAR 0 1
43211: PPUSH
43212: LD_VAR 0 2
43216: PUSH
43217: LD_INT 1
43219: ARRAY
43220: PPUSH
43221: LD_VAR 0 3
43225: PPUSH
43226: CALL_OW 1
43230: ST_TO_ADDR
43231: GO 43495
// begin tmp := arr ;
43233: LD_ADDR_VAR 0 6
43237: PUSH
43238: LD_VAR 0 1
43242: ST_TO_ADDR
// s_arr := [ tmp ] ;
43243: LD_ADDR_VAR 0 7
43247: PUSH
43248: LD_VAR 0 6
43252: PUSH
43253: EMPTY
43254: LIST
43255: ST_TO_ADDR
// for i = 1 to pos - 1 do
43256: LD_ADDR_VAR 0 5
43260: PUSH
43261: DOUBLE
43262: LD_INT 1
43264: DEC
43265: ST_TO_ADDR
43266: LD_VAR 0 2
43270: PUSH
43271: LD_INT 1
43273: MINUS
43274: PUSH
43275: FOR_TO
43276: IFFALSE 43321
// begin tmp := tmp [ pos [ i ] ] ;
43278: LD_ADDR_VAR 0 6
43282: PUSH
43283: LD_VAR 0 6
43287: PUSH
43288: LD_VAR 0 2
43292: PUSH
43293: LD_VAR 0 5
43297: ARRAY
43298: ARRAY
43299: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43300: LD_ADDR_VAR 0 7
43304: PUSH
43305: LD_VAR 0 7
43309: PUSH
43310: LD_VAR 0 6
43314: PUSH
43315: EMPTY
43316: LIST
43317: ADD
43318: ST_TO_ADDR
// end ;
43319: GO 43275
43321: POP
43322: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43323: LD_ADDR_VAR 0 6
43327: PUSH
43328: LD_VAR 0 6
43332: PPUSH
43333: LD_VAR 0 2
43337: PUSH
43338: LD_VAR 0 2
43342: ARRAY
43343: PPUSH
43344: LD_VAR 0 3
43348: PPUSH
43349: CALL_OW 1
43353: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43354: LD_ADDR_VAR 0 7
43358: PUSH
43359: LD_VAR 0 7
43363: PPUSH
43364: LD_VAR 0 7
43368: PPUSH
43369: LD_VAR 0 6
43373: PPUSH
43374: CALL_OW 1
43378: ST_TO_ADDR
// for i = s_arr downto 2 do
43379: LD_ADDR_VAR 0 5
43383: PUSH
43384: DOUBLE
43385: LD_VAR 0 7
43389: INC
43390: ST_TO_ADDR
43391: LD_INT 2
43393: PUSH
43394: FOR_DOWNTO
43395: IFFALSE 43479
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43397: LD_ADDR_VAR 0 6
43401: PUSH
43402: LD_VAR 0 7
43406: PUSH
43407: LD_VAR 0 5
43411: PUSH
43412: LD_INT 1
43414: MINUS
43415: ARRAY
43416: PPUSH
43417: LD_VAR 0 2
43421: PUSH
43422: LD_VAR 0 5
43426: PUSH
43427: LD_INT 1
43429: MINUS
43430: ARRAY
43431: PPUSH
43432: LD_VAR 0 7
43436: PUSH
43437: LD_VAR 0 5
43441: ARRAY
43442: PPUSH
43443: CALL_OW 1
43447: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43448: LD_ADDR_VAR 0 7
43452: PUSH
43453: LD_VAR 0 7
43457: PPUSH
43458: LD_VAR 0 5
43462: PUSH
43463: LD_INT 1
43465: MINUS
43466: PPUSH
43467: LD_VAR 0 6
43471: PPUSH
43472: CALL_OW 1
43476: ST_TO_ADDR
// end ;
43477: GO 43394
43479: POP
43480: POP
// result := s_arr [ 1 ] ;
43481: LD_ADDR_VAR 0 4
43485: PUSH
43486: LD_VAR 0 7
43490: PUSH
43491: LD_INT 1
43493: ARRAY
43494: ST_TO_ADDR
// end ; end ;
43495: LD_VAR 0 4
43499: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43500: LD_INT 0
43502: PPUSH
43503: PPUSH
// if not list then
43504: LD_VAR 0 1
43508: NOT
43509: IFFALSE 43513
// exit ;
43511: GO 43604
// i := list [ pos1 ] ;
43513: LD_ADDR_VAR 0 5
43517: PUSH
43518: LD_VAR 0 1
43522: PUSH
43523: LD_VAR 0 2
43527: ARRAY
43528: ST_TO_ADDR
// if not i then
43529: LD_VAR 0 5
43533: NOT
43534: IFFALSE 43538
// exit ;
43536: GO 43604
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43538: LD_ADDR_VAR 0 1
43542: PUSH
43543: LD_VAR 0 1
43547: PPUSH
43548: LD_VAR 0 2
43552: PPUSH
43553: LD_VAR 0 1
43557: PUSH
43558: LD_VAR 0 3
43562: ARRAY
43563: PPUSH
43564: CALL_OW 1
43568: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43569: LD_ADDR_VAR 0 1
43573: PUSH
43574: LD_VAR 0 1
43578: PPUSH
43579: LD_VAR 0 3
43583: PPUSH
43584: LD_VAR 0 5
43588: PPUSH
43589: CALL_OW 1
43593: ST_TO_ADDR
// result := list ;
43594: LD_ADDR_VAR 0 4
43598: PUSH
43599: LD_VAR 0 1
43603: ST_TO_ADDR
// end ;
43604: LD_VAR 0 4
43608: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43609: LD_INT 0
43611: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43612: LD_ADDR_VAR 0 5
43616: PUSH
43617: LD_VAR 0 1
43621: PPUSH
43622: CALL_OW 250
43626: PPUSH
43627: LD_VAR 0 1
43631: PPUSH
43632: CALL_OW 251
43636: PPUSH
43637: LD_VAR 0 2
43641: PPUSH
43642: LD_VAR 0 3
43646: PPUSH
43647: LD_VAR 0 4
43651: PPUSH
43652: CALL 43662 0 5
43656: ST_TO_ADDR
// end ;
43657: LD_VAR 0 5
43661: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43662: LD_INT 0
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
// if not list then
43668: LD_VAR 0 3
43672: NOT
43673: IFFALSE 43677
// exit ;
43675: GO 44065
// result := [ ] ;
43677: LD_ADDR_VAR 0 6
43681: PUSH
43682: EMPTY
43683: ST_TO_ADDR
// for i in list do
43684: LD_ADDR_VAR 0 7
43688: PUSH
43689: LD_VAR 0 3
43693: PUSH
43694: FOR_IN
43695: IFFALSE 43897
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43697: LD_ADDR_VAR 0 9
43701: PUSH
43702: LD_VAR 0 7
43706: PPUSH
43707: LD_VAR 0 1
43711: PPUSH
43712: LD_VAR 0 2
43716: PPUSH
43717: CALL_OW 297
43721: ST_TO_ADDR
// if not result then
43722: LD_VAR 0 6
43726: NOT
43727: IFFALSE 43753
// result := [ [ i , tmp ] ] else
43729: LD_ADDR_VAR 0 6
43733: PUSH
43734: LD_VAR 0 7
43738: PUSH
43739: LD_VAR 0 9
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: EMPTY
43749: LIST
43750: ST_TO_ADDR
43751: GO 43895
// begin if result [ result ] [ 2 ] < tmp then
43753: LD_VAR 0 6
43757: PUSH
43758: LD_VAR 0 6
43762: ARRAY
43763: PUSH
43764: LD_INT 2
43766: ARRAY
43767: PUSH
43768: LD_VAR 0 9
43772: LESS
43773: IFFALSE 43815
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43775: LD_ADDR_VAR 0 6
43779: PUSH
43780: LD_VAR 0 6
43784: PPUSH
43785: LD_VAR 0 6
43789: PUSH
43790: LD_INT 1
43792: PLUS
43793: PPUSH
43794: LD_VAR 0 7
43798: PUSH
43799: LD_VAR 0 9
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PPUSH
43808: CALL_OW 2
43812: ST_TO_ADDR
43813: GO 43895
// for j = 1 to result do
43815: LD_ADDR_VAR 0 8
43819: PUSH
43820: DOUBLE
43821: LD_INT 1
43823: DEC
43824: ST_TO_ADDR
43825: LD_VAR 0 6
43829: PUSH
43830: FOR_TO
43831: IFFALSE 43893
// begin if tmp < result [ j ] [ 2 ] then
43833: LD_VAR 0 9
43837: PUSH
43838: LD_VAR 0 6
43842: PUSH
43843: LD_VAR 0 8
43847: ARRAY
43848: PUSH
43849: LD_INT 2
43851: ARRAY
43852: LESS
43853: IFFALSE 43891
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43855: LD_ADDR_VAR 0 6
43859: PUSH
43860: LD_VAR 0 6
43864: PPUSH
43865: LD_VAR 0 8
43869: PPUSH
43870: LD_VAR 0 7
43874: PUSH
43875: LD_VAR 0 9
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PPUSH
43884: CALL_OW 2
43888: ST_TO_ADDR
// break ;
43889: GO 43893
// end ; end ;
43891: GO 43830
43893: POP
43894: POP
// end ; end ;
43895: GO 43694
43897: POP
43898: POP
// if result and not asc then
43899: LD_VAR 0 6
43903: PUSH
43904: LD_VAR 0 4
43908: NOT
43909: AND
43910: IFFALSE 43985
// begin tmp := result ;
43912: LD_ADDR_VAR 0 9
43916: PUSH
43917: LD_VAR 0 6
43921: ST_TO_ADDR
// for i = tmp downto 1 do
43922: LD_ADDR_VAR 0 7
43926: PUSH
43927: DOUBLE
43928: LD_VAR 0 9
43932: INC
43933: ST_TO_ADDR
43934: LD_INT 1
43936: PUSH
43937: FOR_DOWNTO
43938: IFFALSE 43983
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43940: LD_ADDR_VAR 0 6
43944: PUSH
43945: LD_VAR 0 6
43949: PPUSH
43950: LD_VAR 0 9
43954: PUSH
43955: LD_VAR 0 7
43959: MINUS
43960: PUSH
43961: LD_INT 1
43963: PLUS
43964: PPUSH
43965: LD_VAR 0 9
43969: PUSH
43970: LD_VAR 0 7
43974: ARRAY
43975: PPUSH
43976: CALL_OW 1
43980: ST_TO_ADDR
43981: GO 43937
43983: POP
43984: POP
// end ; tmp := [ ] ;
43985: LD_ADDR_VAR 0 9
43989: PUSH
43990: EMPTY
43991: ST_TO_ADDR
// if mode then
43992: LD_VAR 0 5
43996: IFFALSE 44065
// begin for i = 1 to result do
43998: LD_ADDR_VAR 0 7
44002: PUSH
44003: DOUBLE
44004: LD_INT 1
44006: DEC
44007: ST_TO_ADDR
44008: LD_VAR 0 6
44012: PUSH
44013: FOR_TO
44014: IFFALSE 44053
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44016: LD_ADDR_VAR 0 9
44020: PUSH
44021: LD_VAR 0 9
44025: PPUSH
44026: LD_VAR 0 7
44030: PPUSH
44031: LD_VAR 0 6
44035: PUSH
44036: LD_VAR 0 7
44040: ARRAY
44041: PUSH
44042: LD_INT 1
44044: ARRAY
44045: PPUSH
44046: CALL_OW 1
44050: ST_TO_ADDR
44051: GO 44013
44053: POP
44054: POP
// result := tmp ;
44055: LD_ADDR_VAR 0 6
44059: PUSH
44060: LD_VAR 0 9
44064: ST_TO_ADDR
// end ; end ;
44065: LD_VAR 0 6
44069: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44070: LD_INT 0
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44078: LD_ADDR_VAR 0 5
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
// if not x or not y then
44100: LD_VAR 0 2
44104: NOT
44105: PUSH
44106: LD_VAR 0 3
44110: NOT
44111: OR
44112: IFFALSE 44116
// exit ;
44114: GO 45768
// if not range then
44116: LD_VAR 0 4
44120: NOT
44121: IFFALSE 44131
// range := 10 ;
44123: LD_ADDR_VAR 0 4
44127: PUSH
44128: LD_INT 10
44130: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44131: LD_ADDR_VAR 0 8
44135: PUSH
44136: LD_INT 81
44138: PUSH
44139: LD_VAR 0 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 92
44150: PUSH
44151: LD_VAR 0 2
44155: PUSH
44156: LD_VAR 0 3
44160: PUSH
44161: LD_VAR 0 4
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 3
44174: PUSH
44175: LD_INT 21
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: LIST
44193: PPUSH
44194: CALL_OW 69
44198: ST_TO_ADDR
// if not tmp then
44199: LD_VAR 0 8
44203: NOT
44204: IFFALSE 44208
// exit ;
44206: GO 45768
// for i in tmp do
44208: LD_ADDR_VAR 0 6
44212: PUSH
44213: LD_VAR 0 8
44217: PUSH
44218: FOR_IN
44219: IFFALSE 45743
// begin points := [ 0 , 0 , 0 ] ;
44221: LD_ADDR_VAR 0 9
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// bpoints := 1 ;
44240: LD_ADDR_VAR 0 10
44244: PUSH
44245: LD_INT 1
44247: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44248: LD_VAR 0 6
44252: PPUSH
44253: CALL_OW 247
44257: PUSH
44258: LD_INT 1
44260: DOUBLE
44261: EQUAL
44262: IFTRUE 44266
44264: GO 44844
44266: POP
// begin if GetClass ( i ) = 1 then
44267: LD_VAR 0 6
44271: PPUSH
44272: CALL_OW 257
44276: PUSH
44277: LD_INT 1
44279: EQUAL
44280: IFFALSE 44301
// points := [ 10 , 5 , 3 ] ;
44282: LD_ADDR_VAR 0 9
44286: PUSH
44287: LD_INT 10
44289: PUSH
44290: LD_INT 5
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44301: LD_VAR 0 6
44305: PPUSH
44306: CALL_OW 257
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 3
44316: PUSH
44317: LD_INT 4
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: IN
44325: IFFALSE 44346
// points := [ 3 , 2 , 1 ] ;
44327: LD_ADDR_VAR 0 9
44331: PUSH
44332: LD_INT 3
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: LIST
44345: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44346: LD_VAR 0 6
44350: PPUSH
44351: CALL_OW 257
44355: PUSH
44356: LD_INT 5
44358: EQUAL
44359: IFFALSE 44380
// points := [ 130 , 5 , 2 ] ;
44361: LD_ADDR_VAR 0 9
44365: PUSH
44366: LD_INT 130
44368: PUSH
44369: LD_INT 5
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44380: LD_VAR 0 6
44384: PPUSH
44385: CALL_OW 257
44389: PUSH
44390: LD_INT 8
44392: EQUAL
44393: IFFALSE 44414
// points := [ 35 , 35 , 30 ] ;
44395: LD_ADDR_VAR 0 9
44399: PUSH
44400: LD_INT 35
44402: PUSH
44403: LD_INT 35
44405: PUSH
44406: LD_INT 30
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44414: LD_VAR 0 6
44418: PPUSH
44419: CALL_OW 257
44423: PUSH
44424: LD_INT 9
44426: EQUAL
44427: IFFALSE 44448
// points := [ 20 , 55 , 40 ] ;
44429: LD_ADDR_VAR 0 9
44433: PUSH
44434: LD_INT 20
44436: PUSH
44437: LD_INT 55
44439: PUSH
44440: LD_INT 40
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44448: LD_VAR 0 6
44452: PPUSH
44453: CALL_OW 257
44457: PUSH
44458: LD_INT 12
44460: PUSH
44461: LD_INT 16
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: IN
44468: IFFALSE 44489
// points := [ 5 , 3 , 2 ] ;
44470: LD_ADDR_VAR 0 9
44474: PUSH
44475: LD_INT 5
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44489: LD_VAR 0 6
44493: PPUSH
44494: CALL_OW 257
44498: PUSH
44499: LD_INT 17
44501: EQUAL
44502: IFFALSE 44523
// points := [ 100 , 50 , 75 ] ;
44504: LD_ADDR_VAR 0 9
44508: PUSH
44509: LD_INT 100
44511: PUSH
44512: LD_INT 50
44514: PUSH
44515: LD_INT 75
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44523: LD_VAR 0 6
44527: PPUSH
44528: CALL_OW 257
44532: PUSH
44533: LD_INT 15
44535: EQUAL
44536: IFFALSE 44557
// points := [ 10 , 5 , 3 ] ;
44538: LD_ADDR_VAR 0 9
44542: PUSH
44543: LD_INT 10
44545: PUSH
44546: LD_INT 5
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44557: LD_VAR 0 6
44561: PPUSH
44562: CALL_OW 257
44566: PUSH
44567: LD_INT 14
44569: EQUAL
44570: IFFALSE 44591
// points := [ 10 , 0 , 0 ] ;
44572: LD_ADDR_VAR 0 9
44576: PUSH
44577: LD_INT 10
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44591: LD_VAR 0 6
44595: PPUSH
44596: CALL_OW 257
44600: PUSH
44601: LD_INT 11
44603: EQUAL
44604: IFFALSE 44625
// points := [ 30 , 10 , 5 ] ;
44606: LD_ADDR_VAR 0 9
44610: PUSH
44611: LD_INT 30
44613: PUSH
44614: LD_INT 10
44616: PUSH
44617: LD_INT 5
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44625: LD_VAR 0 1
44629: PPUSH
44630: LD_INT 5
44632: PPUSH
44633: CALL_OW 321
44637: PUSH
44638: LD_INT 2
44640: EQUAL
44641: IFFALSE 44658
// bpoints := bpoints * 1.8 ;
44643: LD_ADDR_VAR 0 10
44647: PUSH
44648: LD_VAR 0 10
44652: PUSH
44653: LD_REAL  1.80000000000000E+0000
44656: MUL
44657: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44658: LD_VAR 0 6
44662: PPUSH
44663: CALL_OW 257
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: LD_INT 4
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: IN
44686: PUSH
44687: LD_VAR 0 1
44691: PPUSH
44692: LD_INT 51
44694: PPUSH
44695: CALL_OW 321
44699: PUSH
44700: LD_INT 2
44702: EQUAL
44703: AND
44704: IFFALSE 44721
// bpoints := bpoints * 1.2 ;
44706: LD_ADDR_VAR 0 10
44710: PUSH
44711: LD_VAR 0 10
44715: PUSH
44716: LD_REAL  1.20000000000000E+0000
44719: MUL
44720: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44721: LD_VAR 0 6
44725: PPUSH
44726: CALL_OW 257
44730: PUSH
44731: LD_INT 5
44733: PUSH
44734: LD_INT 7
44736: PUSH
44737: LD_INT 9
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: IN
44745: PUSH
44746: LD_VAR 0 1
44750: PPUSH
44751: LD_INT 52
44753: PPUSH
44754: CALL_OW 321
44758: PUSH
44759: LD_INT 2
44761: EQUAL
44762: AND
44763: IFFALSE 44780
// bpoints := bpoints * 1.5 ;
44765: LD_ADDR_VAR 0 10
44769: PUSH
44770: LD_VAR 0 10
44774: PUSH
44775: LD_REAL  1.50000000000000E+0000
44778: MUL
44779: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44780: LD_VAR 0 1
44784: PPUSH
44785: LD_INT 66
44787: PPUSH
44788: CALL_OW 321
44792: PUSH
44793: LD_INT 2
44795: EQUAL
44796: IFFALSE 44813
// bpoints := bpoints * 1.1 ;
44798: LD_ADDR_VAR 0 10
44802: PUSH
44803: LD_VAR 0 10
44807: PUSH
44808: LD_REAL  1.10000000000000E+0000
44811: MUL
44812: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44813: LD_ADDR_VAR 0 10
44817: PUSH
44818: LD_VAR 0 10
44822: PUSH
44823: LD_VAR 0 6
44827: PPUSH
44828: LD_INT 1
44830: PPUSH
44831: CALL_OW 259
44835: PUSH
44836: LD_REAL  1.15000000000000E+0000
44839: MUL
44840: MUL
44841: ST_TO_ADDR
// end ; unit_vehicle :
44842: GO 45672
44844: LD_INT 2
44846: DOUBLE
44847: EQUAL
44848: IFTRUE 44852
44850: GO 45660
44852: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44853: LD_VAR 0 6
44857: PPUSH
44858: CALL_OW 264
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 42
44868: PUSH
44869: LD_INT 24
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: IN
44877: IFFALSE 44898
// points := [ 25 , 5 , 3 ] ;
44879: LD_ADDR_VAR 0 9
44883: PUSH
44884: LD_INT 25
44886: PUSH
44887: LD_INT 5
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44898: LD_VAR 0 6
44902: PPUSH
44903: CALL_OW 264
44907: PUSH
44908: LD_INT 4
44910: PUSH
44911: LD_INT 43
44913: PUSH
44914: LD_INT 25
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: IN
44922: IFFALSE 44943
// points := [ 40 , 15 , 5 ] ;
44924: LD_ADDR_VAR 0 9
44928: PUSH
44929: LD_INT 40
44931: PUSH
44932: LD_INT 15
44934: PUSH
44935: LD_INT 5
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44943: LD_VAR 0 6
44947: PPUSH
44948: CALL_OW 264
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: LD_INT 23
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: IN
44963: IFFALSE 44984
// points := [ 7 , 25 , 8 ] ;
44965: LD_ADDR_VAR 0 9
44969: PUSH
44970: LD_INT 7
44972: PUSH
44973: LD_INT 25
44975: PUSH
44976: LD_INT 8
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44984: LD_VAR 0 6
44988: PPUSH
44989: CALL_OW 264
44993: PUSH
44994: LD_INT 5
44996: PUSH
44997: LD_INT 27
44999: PUSH
45000: LD_INT 44
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: IN
45008: IFFALSE 45029
// points := [ 14 , 50 , 16 ] ;
45010: LD_ADDR_VAR 0 9
45014: PUSH
45015: LD_INT 14
45017: PUSH
45018: LD_INT 50
45020: PUSH
45021: LD_INT 16
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45029: LD_VAR 0 6
45033: PPUSH
45034: CALL_OW 264
45038: PUSH
45039: LD_INT 6
45041: PUSH
45042: LD_INT 46
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: IN
45049: IFFALSE 45070
// points := [ 32 , 120 , 70 ] ;
45051: LD_ADDR_VAR 0 9
45055: PUSH
45056: LD_INT 32
45058: PUSH
45059: LD_INT 120
45061: PUSH
45062: LD_INT 70
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45070: LD_VAR 0 6
45074: PPUSH
45075: CALL_OW 264
45079: PUSH
45080: LD_INT 7
45082: PUSH
45083: LD_INT 28
45085: PUSH
45086: LD_INT 45
45088: PUSH
45089: LD_EXP 50
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: IN
45100: IFFALSE 45121
// points := [ 35 , 20 , 45 ] ;
45102: LD_ADDR_VAR 0 9
45106: PUSH
45107: LD_INT 35
45109: PUSH
45110: LD_INT 20
45112: PUSH
45113: LD_INT 45
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45121: LD_VAR 0 6
45125: PPUSH
45126: CALL_OW 264
45130: PUSH
45131: LD_INT 47
45133: PUSH
45134: EMPTY
45135: LIST
45136: IN
45137: IFFALSE 45158
// points := [ 67 , 45 , 75 ] ;
45139: LD_ADDR_VAR 0 9
45143: PUSH
45144: LD_INT 67
45146: PUSH
45147: LD_INT 45
45149: PUSH
45150: LD_INT 75
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45158: LD_VAR 0 6
45162: PPUSH
45163: CALL_OW 264
45167: PUSH
45168: LD_INT 26
45170: PUSH
45171: EMPTY
45172: LIST
45173: IN
45174: IFFALSE 45195
// points := [ 120 , 30 , 80 ] ;
45176: LD_ADDR_VAR 0 9
45180: PUSH
45181: LD_INT 120
45183: PUSH
45184: LD_INT 30
45186: PUSH
45187: LD_INT 80
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45195: LD_VAR 0 6
45199: PPUSH
45200: CALL_OW 264
45204: PUSH
45205: LD_INT 22
45207: PUSH
45208: EMPTY
45209: LIST
45210: IN
45211: IFFALSE 45232
// points := [ 40 , 1 , 1 ] ;
45213: LD_ADDR_VAR 0 9
45217: PUSH
45218: LD_INT 40
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45232: LD_VAR 0 6
45236: PPUSH
45237: CALL_OW 264
45241: PUSH
45242: LD_INT 29
45244: PUSH
45245: EMPTY
45246: LIST
45247: IN
45248: IFFALSE 45269
// points := [ 70 , 200 , 400 ] ;
45250: LD_ADDR_VAR 0 9
45254: PUSH
45255: LD_INT 70
45257: PUSH
45258: LD_INT 200
45260: PUSH
45261: LD_INT 400
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45269: LD_VAR 0 6
45273: PPUSH
45274: CALL_OW 264
45278: PUSH
45279: LD_INT 14
45281: PUSH
45282: LD_INT 53
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: IN
45289: IFFALSE 45310
// points := [ 40 , 10 , 20 ] ;
45291: LD_ADDR_VAR 0 9
45295: PUSH
45296: LD_INT 40
45298: PUSH
45299: LD_INT 10
45301: PUSH
45302: LD_INT 20
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: LIST
45309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45310: LD_VAR 0 6
45314: PPUSH
45315: CALL_OW 264
45319: PUSH
45320: LD_INT 9
45322: PUSH
45323: EMPTY
45324: LIST
45325: IN
45326: IFFALSE 45347
// points := [ 5 , 70 , 20 ] ;
45328: LD_ADDR_VAR 0 9
45332: PUSH
45333: LD_INT 5
45335: PUSH
45336: LD_INT 70
45338: PUSH
45339: LD_INT 20
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45347: LD_VAR 0 6
45351: PPUSH
45352: CALL_OW 264
45356: PUSH
45357: LD_INT 10
45359: PUSH
45360: EMPTY
45361: LIST
45362: IN
45363: IFFALSE 45384
// points := [ 35 , 110 , 70 ] ;
45365: LD_ADDR_VAR 0 9
45369: PUSH
45370: LD_INT 35
45372: PUSH
45373: LD_INT 110
45375: PUSH
45376: LD_INT 70
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45384: LD_VAR 0 6
45388: PPUSH
45389: CALL_OW 265
45393: PUSH
45394: LD_INT 25
45396: EQUAL
45397: IFFALSE 45418
// points := [ 80 , 65 , 100 ] ;
45399: LD_ADDR_VAR 0 9
45403: PUSH
45404: LD_INT 80
45406: PUSH
45407: LD_INT 65
45409: PUSH
45410: LD_INT 100
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45418: LD_VAR 0 6
45422: PPUSH
45423: CALL_OW 263
45427: PUSH
45428: LD_INT 1
45430: EQUAL
45431: IFFALSE 45466
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45433: LD_ADDR_VAR 0 10
45437: PUSH
45438: LD_VAR 0 10
45442: PUSH
45443: LD_VAR 0 6
45447: PPUSH
45448: CALL_OW 311
45452: PPUSH
45453: LD_INT 3
45455: PPUSH
45456: CALL_OW 259
45460: PUSH
45461: LD_INT 4
45463: MUL
45464: MUL
45465: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45466: LD_VAR 0 6
45470: PPUSH
45471: CALL_OW 263
45475: PUSH
45476: LD_INT 2
45478: EQUAL
45479: IFFALSE 45530
// begin j := IsControledBy ( i ) ;
45481: LD_ADDR_VAR 0 7
45485: PUSH
45486: LD_VAR 0 6
45490: PPUSH
45491: CALL_OW 312
45495: ST_TO_ADDR
// if j then
45496: LD_VAR 0 7
45500: IFFALSE 45530
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45502: LD_ADDR_VAR 0 10
45506: PUSH
45507: LD_VAR 0 10
45511: PUSH
45512: LD_VAR 0 7
45516: PPUSH
45517: LD_INT 3
45519: PPUSH
45520: CALL_OW 259
45524: PUSH
45525: LD_INT 3
45527: MUL
45528: MUL
45529: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45530: LD_VAR 0 6
45534: PPUSH
45535: CALL_OW 264
45539: PUSH
45540: LD_INT 5
45542: PUSH
45543: LD_INT 6
45545: PUSH
45546: LD_INT 46
45548: PUSH
45549: LD_INT 44
45551: PUSH
45552: LD_INT 47
45554: PUSH
45555: LD_INT 45
45557: PUSH
45558: LD_INT 28
45560: PUSH
45561: LD_INT 7
45563: PUSH
45564: LD_INT 27
45566: PUSH
45567: LD_INT 29
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: IN
45582: PUSH
45583: LD_VAR 0 1
45587: PPUSH
45588: LD_INT 52
45590: PPUSH
45591: CALL_OW 321
45595: PUSH
45596: LD_INT 2
45598: EQUAL
45599: AND
45600: IFFALSE 45617
// bpoints := bpoints * 1.2 ;
45602: LD_ADDR_VAR 0 10
45606: PUSH
45607: LD_VAR 0 10
45611: PUSH
45612: LD_REAL  1.20000000000000E+0000
45615: MUL
45616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45617: LD_VAR 0 6
45621: PPUSH
45622: CALL_OW 264
45626: PUSH
45627: LD_INT 6
45629: PUSH
45630: LD_INT 46
45632: PUSH
45633: LD_INT 47
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: IN
45641: IFFALSE 45658
// bpoints := bpoints * 1.2 ;
45643: LD_ADDR_VAR 0 10
45647: PUSH
45648: LD_VAR 0 10
45652: PUSH
45653: LD_REAL  1.20000000000000E+0000
45656: MUL
45657: ST_TO_ADDR
// end ; unit_building :
45658: GO 45672
45660: LD_INT 3
45662: DOUBLE
45663: EQUAL
45664: IFTRUE 45668
45666: GO 45671
45668: POP
// ; end ;
45669: GO 45672
45671: POP
// for j = 1 to 3 do
45672: LD_ADDR_VAR 0 7
45676: PUSH
45677: DOUBLE
45678: LD_INT 1
45680: DEC
45681: ST_TO_ADDR
45682: LD_INT 3
45684: PUSH
45685: FOR_TO
45686: IFFALSE 45739
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45688: LD_ADDR_VAR 0 5
45692: PUSH
45693: LD_VAR 0 5
45697: PPUSH
45698: LD_VAR 0 7
45702: PPUSH
45703: LD_VAR 0 5
45707: PUSH
45708: LD_VAR 0 7
45712: ARRAY
45713: PUSH
45714: LD_VAR 0 9
45718: PUSH
45719: LD_VAR 0 7
45723: ARRAY
45724: PUSH
45725: LD_VAR 0 10
45729: MUL
45730: PLUS
45731: PPUSH
45732: CALL_OW 1
45736: ST_TO_ADDR
45737: GO 45685
45739: POP
45740: POP
// end ;
45741: GO 44218
45743: POP
45744: POP
// result := Replace ( result , 4 , tmp ) ;
45745: LD_ADDR_VAR 0 5
45749: PUSH
45750: LD_VAR 0 5
45754: PPUSH
45755: LD_INT 4
45757: PPUSH
45758: LD_VAR 0 8
45762: PPUSH
45763: CALL_OW 1
45767: ST_TO_ADDR
// end ;
45768: LD_VAR 0 5
45772: RET
// export function DangerAtRange ( unit , range ) ; begin
45773: LD_INT 0
45775: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45776: LD_ADDR_VAR 0 3
45780: PUSH
45781: LD_VAR 0 1
45785: PPUSH
45786: CALL_OW 255
45790: PPUSH
45791: LD_VAR 0 1
45795: PPUSH
45796: CALL_OW 250
45800: PPUSH
45801: LD_VAR 0 1
45805: PPUSH
45806: CALL_OW 251
45810: PPUSH
45811: LD_VAR 0 2
45815: PPUSH
45816: CALL 44070 0 4
45820: ST_TO_ADDR
// end ;
45821: LD_VAR 0 3
45825: RET
// export function DangerInArea ( side , area ) ; begin
45826: LD_INT 0
45828: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45829: LD_ADDR_VAR 0 3
45833: PUSH
45834: LD_VAR 0 2
45838: PPUSH
45839: LD_INT 81
45841: PUSH
45842: LD_VAR 0 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PPUSH
45851: CALL_OW 70
45855: ST_TO_ADDR
// end ;
45856: LD_VAR 0 3
45860: RET
// export function IsExtension ( b ) ; begin
45861: LD_INT 0
45863: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45864: LD_ADDR_VAR 0 2
45868: PUSH
45869: LD_VAR 0 1
45873: PUSH
45874: LD_INT 23
45876: PUSH
45877: LD_INT 20
45879: PUSH
45880: LD_INT 22
45882: PUSH
45883: LD_INT 17
45885: PUSH
45886: LD_INT 24
45888: PUSH
45889: LD_INT 21
45891: PUSH
45892: LD_INT 19
45894: PUSH
45895: LD_INT 16
45897: PUSH
45898: LD_INT 25
45900: PUSH
45901: LD_INT 18
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: IN
45916: ST_TO_ADDR
// end ;
45917: LD_VAR 0 2
45921: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45922: LD_INT 0
45924: PPUSH
45925: PPUSH
45926: PPUSH
// result := [ ] ;
45927: LD_ADDR_VAR 0 4
45931: PUSH
45932: EMPTY
45933: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45934: LD_ADDR_VAR 0 5
45938: PUSH
45939: LD_VAR 0 2
45943: PPUSH
45944: LD_INT 21
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PPUSH
45954: CALL_OW 70
45958: ST_TO_ADDR
// if not tmp then
45959: LD_VAR 0 5
45963: NOT
45964: IFFALSE 45968
// exit ;
45966: GO 46032
// if checkLink then
45968: LD_VAR 0 3
45972: IFFALSE 46022
// begin for i in tmp do
45974: LD_ADDR_VAR 0 6
45978: PUSH
45979: LD_VAR 0 5
45983: PUSH
45984: FOR_IN
45985: IFFALSE 46020
// if GetBase ( i ) <> base then
45987: LD_VAR 0 6
45991: PPUSH
45992: CALL_OW 274
45996: PUSH
45997: LD_VAR 0 1
46001: NONEQUAL
46002: IFFALSE 46018
// ComLinkToBase ( base , i ) ;
46004: LD_VAR 0 1
46008: PPUSH
46009: LD_VAR 0 6
46013: PPUSH
46014: CALL_OW 169
46018: GO 45984
46020: POP
46021: POP
// end ; result := tmp ;
46022: LD_ADDR_VAR 0 4
46026: PUSH
46027: LD_VAR 0 5
46031: ST_TO_ADDR
// end ;
46032: LD_VAR 0 4
46036: RET
// export function ComComplete ( units , b ) ; var i ; begin
46037: LD_INT 0
46039: PPUSH
46040: PPUSH
// if not units then
46041: LD_VAR 0 1
46045: NOT
46046: IFFALSE 46050
// exit ;
46048: GO 46140
// for i in units do
46050: LD_ADDR_VAR 0 4
46054: PUSH
46055: LD_VAR 0 1
46059: PUSH
46060: FOR_IN
46061: IFFALSE 46138
// if BuildingStatus ( b ) = bs_build then
46063: LD_VAR 0 2
46067: PPUSH
46068: CALL_OW 461
46072: PUSH
46073: LD_INT 1
46075: EQUAL
46076: IFFALSE 46136
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46078: LD_VAR 0 4
46082: PPUSH
46083: LD_STRING h
46085: PUSH
46086: LD_VAR 0 2
46090: PPUSH
46091: CALL_OW 250
46095: PUSH
46096: LD_VAR 0 2
46100: PPUSH
46101: CALL_OW 251
46105: PUSH
46106: LD_VAR 0 2
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: PUSH
46129: EMPTY
46130: LIST
46131: PPUSH
46132: CALL_OW 446
46136: GO 46060
46138: POP
46139: POP
// end ;
46140: LD_VAR 0 3
46144: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46145: LD_INT 0
46147: PPUSH
46148: PPUSH
46149: PPUSH
46150: PPUSH
46151: PPUSH
46152: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46153: LD_VAR 0 1
46157: NOT
46158: PUSH
46159: LD_VAR 0 1
46163: PPUSH
46164: CALL_OW 263
46168: PUSH
46169: LD_INT 2
46171: NONEQUAL
46172: OR
46173: IFFALSE 46177
// exit ;
46175: GO 46493
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46177: LD_ADDR_VAR 0 6
46181: PUSH
46182: LD_INT 22
46184: PUSH
46185: LD_VAR 0 1
46189: PPUSH
46190: CALL_OW 255
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 30
46204: PUSH
46205: LD_INT 36
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 34
46214: PUSH
46215: LD_INT 31
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PPUSH
46231: CALL_OW 69
46235: ST_TO_ADDR
// if not tmp then
46236: LD_VAR 0 6
46240: NOT
46241: IFFALSE 46245
// exit ;
46243: GO 46493
// result := [ ] ;
46245: LD_ADDR_VAR 0 2
46249: PUSH
46250: EMPTY
46251: ST_TO_ADDR
// for i in tmp do
46252: LD_ADDR_VAR 0 3
46256: PUSH
46257: LD_VAR 0 6
46261: PUSH
46262: FOR_IN
46263: IFFALSE 46334
// begin t := UnitsInside ( i ) ;
46265: LD_ADDR_VAR 0 4
46269: PUSH
46270: LD_VAR 0 3
46274: PPUSH
46275: CALL_OW 313
46279: ST_TO_ADDR
// if t then
46280: LD_VAR 0 4
46284: IFFALSE 46332
// for j in t do
46286: LD_ADDR_VAR 0 7
46290: PUSH
46291: LD_VAR 0 4
46295: PUSH
46296: FOR_IN
46297: IFFALSE 46330
// result := Replace ( result , result + 1 , j ) ;
46299: LD_ADDR_VAR 0 2
46303: PUSH
46304: LD_VAR 0 2
46308: PPUSH
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 1
46316: PLUS
46317: PPUSH
46318: LD_VAR 0 7
46322: PPUSH
46323: CALL_OW 1
46327: ST_TO_ADDR
46328: GO 46296
46330: POP
46331: POP
// end ;
46332: GO 46262
46334: POP
46335: POP
// if not result then
46336: LD_VAR 0 2
46340: NOT
46341: IFFALSE 46345
// exit ;
46343: GO 46493
// mech := result [ 1 ] ;
46345: LD_ADDR_VAR 0 5
46349: PUSH
46350: LD_VAR 0 2
46354: PUSH
46355: LD_INT 1
46357: ARRAY
46358: ST_TO_ADDR
// if result > 1 then
46359: LD_VAR 0 2
46363: PUSH
46364: LD_INT 1
46366: GREATER
46367: IFFALSE 46479
// begin for i = 2 to result do
46369: LD_ADDR_VAR 0 3
46373: PUSH
46374: DOUBLE
46375: LD_INT 2
46377: DEC
46378: ST_TO_ADDR
46379: LD_VAR 0 2
46383: PUSH
46384: FOR_TO
46385: IFFALSE 46477
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46387: LD_ADDR_VAR 0 4
46391: PUSH
46392: LD_VAR 0 2
46396: PUSH
46397: LD_VAR 0 3
46401: ARRAY
46402: PPUSH
46403: LD_INT 3
46405: PPUSH
46406: CALL_OW 259
46410: PUSH
46411: LD_VAR 0 2
46415: PUSH
46416: LD_VAR 0 3
46420: ARRAY
46421: PPUSH
46422: CALL_OW 432
46426: MINUS
46427: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46428: LD_VAR 0 4
46432: PUSH
46433: LD_VAR 0 5
46437: PPUSH
46438: LD_INT 3
46440: PPUSH
46441: CALL_OW 259
46445: PUSH
46446: LD_VAR 0 5
46450: PPUSH
46451: CALL_OW 432
46455: MINUS
46456: GREATEREQUAL
46457: IFFALSE 46475
// mech := result [ i ] ;
46459: LD_ADDR_VAR 0 5
46463: PUSH
46464: LD_VAR 0 2
46468: PUSH
46469: LD_VAR 0 3
46473: ARRAY
46474: ST_TO_ADDR
// end ;
46475: GO 46384
46477: POP
46478: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46479: LD_VAR 0 1
46483: PPUSH
46484: LD_VAR 0 5
46488: PPUSH
46489: CALL_OW 135
// end ;
46493: LD_VAR 0 2
46497: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46498: LD_INT 0
46500: PPUSH
46501: PPUSH
46502: PPUSH
46503: PPUSH
46504: PPUSH
46505: PPUSH
46506: PPUSH
46507: PPUSH
46508: PPUSH
46509: PPUSH
46510: PPUSH
46511: PPUSH
46512: PPUSH
// result := [ ] ;
46513: LD_ADDR_VAR 0 7
46517: PUSH
46518: EMPTY
46519: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46520: LD_VAR 0 1
46524: PPUSH
46525: CALL_OW 266
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: IN
46540: NOT
46541: IFFALSE 46545
// exit ;
46543: GO 48179
// if name then
46545: LD_VAR 0 3
46549: IFFALSE 46565
// SetBName ( base_dep , name ) ;
46551: LD_VAR 0 1
46555: PPUSH
46556: LD_VAR 0 3
46560: PPUSH
46561: CALL_OW 500
// base := GetBase ( base_dep ) ;
46565: LD_ADDR_VAR 0 15
46569: PUSH
46570: LD_VAR 0 1
46574: PPUSH
46575: CALL_OW 274
46579: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46580: LD_ADDR_VAR 0 16
46584: PUSH
46585: LD_VAR 0 1
46589: PPUSH
46590: CALL_OW 255
46594: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46595: LD_ADDR_VAR 0 17
46599: PUSH
46600: LD_VAR 0 1
46604: PPUSH
46605: CALL_OW 248
46609: ST_TO_ADDR
// if sources then
46610: LD_VAR 0 5
46614: IFFALSE 46661
// for i = 1 to 3 do
46616: LD_ADDR_VAR 0 8
46620: PUSH
46621: DOUBLE
46622: LD_INT 1
46624: DEC
46625: ST_TO_ADDR
46626: LD_INT 3
46628: PUSH
46629: FOR_TO
46630: IFFALSE 46659
// AddResourceType ( base , i , sources [ i ] ) ;
46632: LD_VAR 0 15
46636: PPUSH
46637: LD_VAR 0 8
46641: PPUSH
46642: LD_VAR 0 5
46646: PUSH
46647: LD_VAR 0 8
46651: ARRAY
46652: PPUSH
46653: CALL_OW 276
46657: GO 46629
46659: POP
46660: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46661: LD_ADDR_VAR 0 18
46665: PUSH
46666: LD_VAR 0 15
46670: PPUSH
46671: LD_VAR 0 2
46675: PPUSH
46676: LD_INT 1
46678: PPUSH
46679: CALL 45922 0 3
46683: ST_TO_ADDR
// InitHc ;
46684: CALL_OW 19
// InitUc ;
46688: CALL_OW 18
// uc_side := side ;
46692: LD_ADDR_OWVAR 20
46696: PUSH
46697: LD_VAR 0 16
46701: ST_TO_ADDR
// uc_nation := nation ;
46702: LD_ADDR_OWVAR 21
46706: PUSH
46707: LD_VAR 0 17
46711: ST_TO_ADDR
// if buildings then
46712: LD_VAR 0 18
46716: IFFALSE 48038
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46718: LD_ADDR_VAR 0 19
46722: PUSH
46723: LD_VAR 0 18
46727: PPUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 30
46733: PUSH
46734: LD_INT 29
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 30
46743: PUSH
46744: LD_INT 30
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: PPUSH
46756: CALL_OW 72
46760: ST_TO_ADDR
// if tmp then
46761: LD_VAR 0 19
46765: IFFALSE 46813
// for i in tmp do
46767: LD_ADDR_VAR 0 8
46771: PUSH
46772: LD_VAR 0 19
46776: PUSH
46777: FOR_IN
46778: IFFALSE 46811
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46780: LD_VAR 0 8
46784: PPUSH
46785: CALL_OW 250
46789: PPUSH
46790: LD_VAR 0 8
46794: PPUSH
46795: CALL_OW 251
46799: PPUSH
46800: LD_VAR 0 16
46804: PPUSH
46805: CALL_OW 441
46809: GO 46777
46811: POP
46812: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46813: LD_VAR 0 18
46817: PPUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 30
46823: PUSH
46824: LD_INT 32
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 30
46833: PUSH
46834: LD_INT 33
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: PPUSH
46846: CALL_OW 72
46850: IFFALSE 46938
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46852: LD_ADDR_VAR 0 8
46856: PUSH
46857: LD_VAR 0 18
46861: PPUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 30
46867: PUSH
46868: LD_INT 32
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 30
46877: PUSH
46878: LD_INT 33
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: PPUSH
46890: CALL_OW 72
46894: PUSH
46895: FOR_IN
46896: IFFALSE 46936
// begin if not GetBWeapon ( i ) then
46898: LD_VAR 0 8
46902: PPUSH
46903: CALL_OW 269
46907: NOT
46908: IFFALSE 46934
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46910: LD_VAR 0 8
46914: PPUSH
46915: LD_VAR 0 8
46919: PPUSH
46920: LD_VAR 0 2
46924: PPUSH
46925: CALL 48184 0 2
46929: PPUSH
46930: CALL_OW 431
// end ;
46934: GO 46895
46936: POP
46937: POP
// end ; for i = 1 to personel do
46938: LD_ADDR_VAR 0 8
46942: PUSH
46943: DOUBLE
46944: LD_INT 1
46946: DEC
46947: ST_TO_ADDR
46948: LD_VAR 0 6
46952: PUSH
46953: FOR_TO
46954: IFFALSE 48018
// begin if i > 4 then
46956: LD_VAR 0 8
46960: PUSH
46961: LD_INT 4
46963: GREATER
46964: IFFALSE 46968
// break ;
46966: GO 48018
// case i of 1 :
46968: LD_VAR 0 8
46972: PUSH
46973: LD_INT 1
46975: DOUBLE
46976: EQUAL
46977: IFTRUE 46981
46979: GO 47061
46981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46982: LD_ADDR_VAR 0 12
46986: PUSH
46987: LD_VAR 0 18
46991: PPUSH
46992: LD_INT 22
46994: PUSH
46995: LD_VAR 0 16
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 58
47006: PUSH
47007: EMPTY
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 30
47015: PUSH
47016: LD_INT 32
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 30
47025: PUSH
47026: LD_INT 4
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 30
47035: PUSH
47036: LD_INT 5
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: PPUSH
47054: CALL_OW 72
47058: ST_TO_ADDR
47059: GO 47283
47061: LD_INT 2
47063: DOUBLE
47064: EQUAL
47065: IFTRUE 47069
47067: GO 47131
47069: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47070: LD_ADDR_VAR 0 12
47074: PUSH
47075: LD_VAR 0 18
47079: PPUSH
47080: LD_INT 22
47082: PUSH
47083: LD_VAR 0 16
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 30
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 30
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PPUSH
47124: CALL_OW 72
47128: ST_TO_ADDR
47129: GO 47283
47131: LD_INT 3
47133: DOUBLE
47134: EQUAL
47135: IFTRUE 47139
47137: GO 47201
47139: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47140: LD_ADDR_VAR 0 12
47144: PUSH
47145: LD_VAR 0 18
47149: PPUSH
47150: LD_INT 22
47152: PUSH
47153: LD_VAR 0 16
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: LD_INT 30
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 30
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: LIST
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PPUSH
47194: CALL_OW 72
47198: ST_TO_ADDR
47199: GO 47283
47201: LD_INT 4
47203: DOUBLE
47204: EQUAL
47205: IFTRUE 47209
47207: GO 47282
47209: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47210: LD_ADDR_VAR 0 12
47214: PUSH
47215: LD_VAR 0 18
47219: PPUSH
47220: LD_INT 22
47222: PUSH
47223: LD_VAR 0 16
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 30
47237: PUSH
47238: LD_INT 6
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 30
47247: PUSH
47248: LD_INT 7
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 30
47257: PUSH
47258: LD_INT 8
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PPUSH
47275: CALL_OW 72
47279: ST_TO_ADDR
47280: GO 47283
47282: POP
// if i = 1 then
47283: LD_VAR 0 8
47287: PUSH
47288: LD_INT 1
47290: EQUAL
47291: IFFALSE 47402
// begin tmp := [ ] ;
47293: LD_ADDR_VAR 0 19
47297: PUSH
47298: EMPTY
47299: ST_TO_ADDR
// for j in f do
47300: LD_ADDR_VAR 0 9
47304: PUSH
47305: LD_VAR 0 12
47309: PUSH
47310: FOR_IN
47311: IFFALSE 47384
// if GetBType ( j ) = b_bunker then
47313: LD_VAR 0 9
47317: PPUSH
47318: CALL_OW 266
47322: PUSH
47323: LD_INT 32
47325: EQUAL
47326: IFFALSE 47353
// tmp := Insert ( tmp , 1 , j ) else
47328: LD_ADDR_VAR 0 19
47332: PUSH
47333: LD_VAR 0 19
47337: PPUSH
47338: LD_INT 1
47340: PPUSH
47341: LD_VAR 0 9
47345: PPUSH
47346: CALL_OW 2
47350: ST_TO_ADDR
47351: GO 47382
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47353: LD_ADDR_VAR 0 19
47357: PUSH
47358: LD_VAR 0 19
47362: PPUSH
47363: LD_VAR 0 19
47367: PUSH
47368: LD_INT 1
47370: PLUS
47371: PPUSH
47372: LD_VAR 0 9
47376: PPUSH
47377: CALL_OW 2
47381: ST_TO_ADDR
47382: GO 47310
47384: POP
47385: POP
// if tmp then
47386: LD_VAR 0 19
47390: IFFALSE 47402
// f := tmp ;
47392: LD_ADDR_VAR 0 12
47396: PUSH
47397: LD_VAR 0 19
47401: ST_TO_ADDR
// end ; x := personel [ i ] ;
47402: LD_ADDR_VAR 0 13
47406: PUSH
47407: LD_VAR 0 6
47411: PUSH
47412: LD_VAR 0 8
47416: ARRAY
47417: ST_TO_ADDR
// if x = - 1 then
47418: LD_VAR 0 13
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: EQUAL
47427: IFFALSE 47636
// begin for j in f do
47429: LD_ADDR_VAR 0 9
47433: PUSH
47434: LD_VAR 0 12
47438: PUSH
47439: FOR_IN
47440: IFFALSE 47632
// repeat InitHc ;
47442: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47446: LD_VAR 0 9
47450: PPUSH
47451: CALL_OW 266
47455: PUSH
47456: LD_INT 5
47458: EQUAL
47459: IFFALSE 47529
// begin if UnitsInside ( j ) < 3 then
47461: LD_VAR 0 9
47465: PPUSH
47466: CALL_OW 313
47470: PUSH
47471: LD_INT 3
47473: LESS
47474: IFFALSE 47510
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47476: LD_INT 0
47478: PPUSH
47479: LD_INT 5
47481: PUSH
47482: LD_INT 8
47484: PUSH
47485: LD_INT 9
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: PUSH
47493: LD_VAR 0 17
47497: ARRAY
47498: PPUSH
47499: LD_VAR 0 4
47503: PPUSH
47504: CALL_OW 380
47508: GO 47527
// PrepareHuman ( false , i , skill ) ;
47510: LD_INT 0
47512: PPUSH
47513: LD_VAR 0 8
47517: PPUSH
47518: LD_VAR 0 4
47522: PPUSH
47523: CALL_OW 380
// end else
47527: GO 47546
// PrepareHuman ( false , i , skill ) ;
47529: LD_INT 0
47531: PPUSH
47532: LD_VAR 0 8
47536: PPUSH
47537: LD_VAR 0 4
47541: PPUSH
47542: CALL_OW 380
// un := CreateHuman ;
47546: LD_ADDR_VAR 0 14
47550: PUSH
47551: CALL_OW 44
47555: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47556: LD_ADDR_VAR 0 7
47560: PUSH
47561: LD_VAR 0 7
47565: PPUSH
47566: LD_INT 1
47568: PPUSH
47569: LD_VAR 0 14
47573: PPUSH
47574: CALL_OW 2
47578: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47579: LD_VAR 0 14
47583: PPUSH
47584: LD_VAR 0 9
47588: PPUSH
47589: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47593: LD_VAR 0 9
47597: PPUSH
47598: CALL_OW 313
47602: PUSH
47603: LD_INT 6
47605: EQUAL
47606: PUSH
47607: LD_VAR 0 9
47611: PPUSH
47612: CALL_OW 266
47616: PUSH
47617: LD_INT 32
47619: PUSH
47620: LD_INT 31
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: IN
47627: OR
47628: IFFALSE 47442
47630: GO 47439
47632: POP
47633: POP
// end else
47634: GO 48016
// for j = 1 to x do
47636: LD_ADDR_VAR 0 9
47640: PUSH
47641: DOUBLE
47642: LD_INT 1
47644: DEC
47645: ST_TO_ADDR
47646: LD_VAR 0 13
47650: PUSH
47651: FOR_TO
47652: IFFALSE 48014
// begin InitHc ;
47654: CALL_OW 19
// if not f then
47658: LD_VAR 0 12
47662: NOT
47663: IFFALSE 47752
// begin PrepareHuman ( false , i , skill ) ;
47665: LD_INT 0
47667: PPUSH
47668: LD_VAR 0 8
47672: PPUSH
47673: LD_VAR 0 4
47677: PPUSH
47678: CALL_OW 380
// un := CreateHuman ;
47682: LD_ADDR_VAR 0 14
47686: PUSH
47687: CALL_OW 44
47691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47692: LD_ADDR_VAR 0 7
47696: PUSH
47697: LD_VAR 0 7
47701: PPUSH
47702: LD_INT 1
47704: PPUSH
47705: LD_VAR 0 14
47709: PPUSH
47710: CALL_OW 2
47714: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47715: LD_VAR 0 14
47719: PPUSH
47720: LD_VAR 0 1
47724: PPUSH
47725: CALL_OW 250
47729: PPUSH
47730: LD_VAR 0 1
47734: PPUSH
47735: CALL_OW 251
47739: PPUSH
47740: LD_INT 10
47742: PPUSH
47743: LD_INT 0
47745: PPUSH
47746: CALL_OW 50
// continue ;
47750: GO 47651
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47752: LD_VAR 0 12
47756: PUSH
47757: LD_INT 1
47759: ARRAY
47760: PPUSH
47761: CALL_OW 313
47765: PUSH
47766: LD_VAR 0 12
47770: PUSH
47771: LD_INT 1
47773: ARRAY
47774: PPUSH
47775: CALL_OW 266
47779: PUSH
47780: LD_INT 32
47782: PUSH
47783: LD_INT 31
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: IN
47790: AND
47791: PUSH
47792: LD_VAR 0 12
47796: PUSH
47797: LD_INT 1
47799: ARRAY
47800: PPUSH
47801: CALL_OW 313
47805: PUSH
47806: LD_INT 6
47808: EQUAL
47809: OR
47810: IFFALSE 47830
// f := Delete ( f , 1 ) ;
47812: LD_ADDR_VAR 0 12
47816: PUSH
47817: LD_VAR 0 12
47821: PPUSH
47822: LD_INT 1
47824: PPUSH
47825: CALL_OW 3
47829: ST_TO_ADDR
// if not f then
47830: LD_VAR 0 12
47834: NOT
47835: IFFALSE 47853
// begin x := x + 2 ;
47837: LD_ADDR_VAR 0 13
47841: PUSH
47842: LD_VAR 0 13
47846: PUSH
47847: LD_INT 2
47849: PLUS
47850: ST_TO_ADDR
// continue ;
47851: GO 47651
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47853: LD_VAR 0 12
47857: PUSH
47858: LD_INT 1
47860: ARRAY
47861: PPUSH
47862: CALL_OW 266
47866: PUSH
47867: LD_INT 5
47869: EQUAL
47870: IFFALSE 47944
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47872: LD_VAR 0 12
47876: PUSH
47877: LD_INT 1
47879: ARRAY
47880: PPUSH
47881: CALL_OW 313
47885: PUSH
47886: LD_INT 3
47888: LESS
47889: IFFALSE 47925
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47891: LD_INT 0
47893: PPUSH
47894: LD_INT 5
47896: PUSH
47897: LD_INT 8
47899: PUSH
47900: LD_INT 9
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: PUSH
47908: LD_VAR 0 17
47912: ARRAY
47913: PPUSH
47914: LD_VAR 0 4
47918: PPUSH
47919: CALL_OW 380
47923: GO 47942
// PrepareHuman ( false , i , skill ) ;
47925: LD_INT 0
47927: PPUSH
47928: LD_VAR 0 8
47932: PPUSH
47933: LD_VAR 0 4
47937: PPUSH
47938: CALL_OW 380
// end else
47942: GO 47961
// PrepareHuman ( false , i , skill ) ;
47944: LD_INT 0
47946: PPUSH
47947: LD_VAR 0 8
47951: PPUSH
47952: LD_VAR 0 4
47956: PPUSH
47957: CALL_OW 380
// un := CreateHuman ;
47961: LD_ADDR_VAR 0 14
47965: PUSH
47966: CALL_OW 44
47970: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47971: LD_ADDR_VAR 0 7
47975: PUSH
47976: LD_VAR 0 7
47980: PPUSH
47981: LD_INT 1
47983: PPUSH
47984: LD_VAR 0 14
47988: PPUSH
47989: CALL_OW 2
47993: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47994: LD_VAR 0 14
47998: PPUSH
47999: LD_VAR 0 12
48003: PUSH
48004: LD_INT 1
48006: ARRAY
48007: PPUSH
48008: CALL_OW 52
// end ;
48012: GO 47651
48014: POP
48015: POP
// end ;
48016: GO 46953
48018: POP
48019: POP
// result := result ^ buildings ;
48020: LD_ADDR_VAR 0 7
48024: PUSH
48025: LD_VAR 0 7
48029: PUSH
48030: LD_VAR 0 18
48034: ADD
48035: ST_TO_ADDR
// end else
48036: GO 48179
// begin for i = 1 to personel do
48038: LD_ADDR_VAR 0 8
48042: PUSH
48043: DOUBLE
48044: LD_INT 1
48046: DEC
48047: ST_TO_ADDR
48048: LD_VAR 0 6
48052: PUSH
48053: FOR_TO
48054: IFFALSE 48177
// begin if i > 4 then
48056: LD_VAR 0 8
48060: PUSH
48061: LD_INT 4
48063: GREATER
48064: IFFALSE 48068
// break ;
48066: GO 48177
// x := personel [ i ] ;
48068: LD_ADDR_VAR 0 13
48072: PUSH
48073: LD_VAR 0 6
48077: PUSH
48078: LD_VAR 0 8
48082: ARRAY
48083: ST_TO_ADDR
// if x = - 1 then
48084: LD_VAR 0 13
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: EQUAL
48093: IFFALSE 48097
// continue ;
48095: GO 48053
// PrepareHuman ( false , i , skill ) ;
48097: LD_INT 0
48099: PPUSH
48100: LD_VAR 0 8
48104: PPUSH
48105: LD_VAR 0 4
48109: PPUSH
48110: CALL_OW 380
// un := CreateHuman ;
48114: LD_ADDR_VAR 0 14
48118: PUSH
48119: CALL_OW 44
48123: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48124: LD_VAR 0 14
48128: PPUSH
48129: LD_VAR 0 1
48133: PPUSH
48134: CALL_OW 250
48138: PPUSH
48139: LD_VAR 0 1
48143: PPUSH
48144: CALL_OW 251
48148: PPUSH
48149: LD_INT 10
48151: PPUSH
48152: LD_INT 0
48154: PPUSH
48155: CALL_OW 50
// result := result ^ un ;
48159: LD_ADDR_VAR 0 7
48163: PUSH
48164: LD_VAR 0 7
48168: PUSH
48169: LD_VAR 0 14
48173: ADD
48174: ST_TO_ADDR
// end ;
48175: GO 48053
48177: POP
48178: POP
// end ; end ;
48179: LD_VAR 0 7
48183: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48184: LD_INT 0
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
// result := false ;
48202: LD_ADDR_VAR 0 3
48206: PUSH
48207: LD_INT 0
48209: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48210: LD_VAR 0 1
48214: NOT
48215: PUSH
48216: LD_VAR 0 1
48220: PPUSH
48221: CALL_OW 266
48225: PUSH
48226: LD_INT 32
48228: PUSH
48229: LD_INT 33
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: IN
48236: NOT
48237: OR
48238: IFFALSE 48242
// exit ;
48240: GO 49351
// nat := GetNation ( tower ) ;
48242: LD_ADDR_VAR 0 12
48246: PUSH
48247: LD_VAR 0 1
48251: PPUSH
48252: CALL_OW 248
48256: ST_TO_ADDR
// side := GetSide ( tower ) ;
48257: LD_ADDR_VAR 0 16
48261: PUSH
48262: LD_VAR 0 1
48266: PPUSH
48267: CALL_OW 255
48271: ST_TO_ADDR
// x := GetX ( tower ) ;
48272: LD_ADDR_VAR 0 10
48276: PUSH
48277: LD_VAR 0 1
48281: PPUSH
48282: CALL_OW 250
48286: ST_TO_ADDR
// y := GetY ( tower ) ;
48287: LD_ADDR_VAR 0 11
48291: PUSH
48292: LD_VAR 0 1
48296: PPUSH
48297: CALL_OW 251
48301: ST_TO_ADDR
// if not x or not y then
48302: LD_VAR 0 10
48306: NOT
48307: PUSH
48308: LD_VAR 0 11
48312: NOT
48313: OR
48314: IFFALSE 48318
// exit ;
48316: GO 49351
// weapon := 0 ;
48318: LD_ADDR_VAR 0 18
48322: PUSH
48323: LD_INT 0
48325: ST_TO_ADDR
// fac_list := [ ] ;
48326: LD_ADDR_VAR 0 17
48330: PUSH
48331: EMPTY
48332: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48333: LD_ADDR_VAR 0 6
48337: PUSH
48338: LD_VAR 0 1
48342: PPUSH
48343: CALL_OW 274
48347: PPUSH
48348: LD_VAR 0 2
48352: PPUSH
48353: LD_INT 0
48355: PPUSH
48356: CALL 45922 0 3
48360: PPUSH
48361: LD_INT 30
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PPUSH
48371: CALL_OW 72
48375: ST_TO_ADDR
// if not factories then
48376: LD_VAR 0 6
48380: NOT
48381: IFFALSE 48385
// exit ;
48383: GO 49351
// for i in factories do
48385: LD_ADDR_VAR 0 8
48389: PUSH
48390: LD_VAR 0 6
48394: PUSH
48395: FOR_IN
48396: IFFALSE 48421
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48398: LD_ADDR_VAR 0 17
48402: PUSH
48403: LD_VAR 0 17
48407: PUSH
48408: LD_VAR 0 8
48412: PPUSH
48413: CALL_OW 478
48417: UNION
48418: ST_TO_ADDR
48419: GO 48395
48421: POP
48422: POP
// if not fac_list then
48423: LD_VAR 0 17
48427: NOT
48428: IFFALSE 48432
// exit ;
48430: GO 49351
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48432: LD_ADDR_VAR 0 5
48436: PUSH
48437: LD_INT 4
48439: PUSH
48440: LD_INT 5
48442: PUSH
48443: LD_INT 9
48445: PUSH
48446: LD_INT 10
48448: PUSH
48449: LD_INT 6
48451: PUSH
48452: LD_INT 7
48454: PUSH
48455: LD_INT 11
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 27
48469: PUSH
48470: LD_INT 28
48472: PUSH
48473: LD_INT 26
48475: PUSH
48476: LD_INT 30
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 43
48487: PUSH
48488: LD_INT 44
48490: PUSH
48491: LD_INT 46
48493: PUSH
48494: LD_INT 45
48496: PUSH
48497: LD_INT 47
48499: PUSH
48500: LD_INT 49
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: PUSH
48516: LD_VAR 0 12
48520: ARRAY
48521: ST_TO_ADDR
// list := list isect fac_list ;
48522: LD_ADDR_VAR 0 5
48526: PUSH
48527: LD_VAR 0 5
48531: PUSH
48532: LD_VAR 0 17
48536: ISECT
48537: ST_TO_ADDR
// if not list then
48538: LD_VAR 0 5
48542: NOT
48543: IFFALSE 48547
// exit ;
48545: GO 49351
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48547: LD_VAR 0 12
48551: PUSH
48552: LD_INT 3
48554: EQUAL
48555: PUSH
48556: LD_INT 49
48558: PUSH
48559: LD_VAR 0 5
48563: IN
48564: AND
48565: PUSH
48566: LD_INT 31
48568: PPUSH
48569: LD_VAR 0 16
48573: PPUSH
48574: CALL_OW 321
48578: PUSH
48579: LD_INT 2
48581: EQUAL
48582: AND
48583: IFFALSE 48643
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48585: LD_INT 22
48587: PUSH
48588: LD_VAR 0 16
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 35
48599: PUSH
48600: LD_INT 49
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 91
48609: PUSH
48610: LD_VAR 0 1
48614: PUSH
48615: LD_INT 10
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: LIST
48627: PPUSH
48628: CALL_OW 69
48632: NOT
48633: IFFALSE 48643
// weapon := ru_time_lapser ;
48635: LD_ADDR_VAR 0 18
48639: PUSH
48640: LD_INT 49
48642: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48643: LD_VAR 0 12
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: IN
48658: PUSH
48659: LD_INT 11
48661: PUSH
48662: LD_VAR 0 5
48666: IN
48667: PUSH
48668: LD_INT 30
48670: PUSH
48671: LD_VAR 0 5
48675: IN
48676: OR
48677: AND
48678: PUSH
48679: LD_INT 6
48681: PPUSH
48682: LD_VAR 0 16
48686: PPUSH
48687: CALL_OW 321
48691: PUSH
48692: LD_INT 2
48694: EQUAL
48695: AND
48696: IFFALSE 48861
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48698: LD_INT 22
48700: PUSH
48701: LD_VAR 0 16
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: LD_INT 35
48715: PUSH
48716: LD_INT 11
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 35
48725: PUSH
48726: LD_INT 30
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 91
48740: PUSH
48741: LD_VAR 0 1
48745: PUSH
48746: LD_INT 18
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: PPUSH
48759: CALL_OW 69
48763: NOT
48764: PUSH
48765: LD_INT 22
48767: PUSH
48768: LD_VAR 0 16
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 30
48782: PUSH
48783: LD_INT 32
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 30
48792: PUSH
48793: LD_INT 33
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 91
48807: PUSH
48808: LD_VAR 0 1
48812: PUSH
48813: LD_INT 12
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: PPUSH
48829: CALL_OW 69
48833: PUSH
48834: LD_INT 2
48836: GREATER
48837: AND
48838: IFFALSE 48861
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48840: LD_ADDR_VAR 0 18
48844: PUSH
48845: LD_INT 11
48847: PUSH
48848: LD_INT 30
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_VAR 0 12
48859: ARRAY
48860: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48861: LD_VAR 0 18
48865: NOT
48866: PUSH
48867: LD_INT 40
48869: PPUSH
48870: LD_VAR 0 16
48874: PPUSH
48875: CALL_OW 321
48879: PUSH
48880: LD_INT 2
48882: EQUAL
48883: AND
48884: PUSH
48885: LD_INT 7
48887: PUSH
48888: LD_VAR 0 5
48892: IN
48893: PUSH
48894: LD_INT 28
48896: PUSH
48897: LD_VAR 0 5
48901: IN
48902: OR
48903: PUSH
48904: LD_INT 45
48906: PUSH
48907: LD_VAR 0 5
48911: IN
48912: OR
48913: AND
48914: IFFALSE 49168
// begin hex := GetHexInfo ( x , y ) ;
48916: LD_ADDR_VAR 0 4
48920: PUSH
48921: LD_VAR 0 10
48925: PPUSH
48926: LD_VAR 0 11
48930: PPUSH
48931: CALL_OW 546
48935: ST_TO_ADDR
// if hex [ 1 ] then
48936: LD_VAR 0 4
48940: PUSH
48941: LD_INT 1
48943: ARRAY
48944: IFFALSE 48948
// exit ;
48946: GO 49351
// height := hex [ 2 ] ;
48948: LD_ADDR_VAR 0 15
48952: PUSH
48953: LD_VAR 0 4
48957: PUSH
48958: LD_INT 2
48960: ARRAY
48961: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48962: LD_ADDR_VAR 0 14
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 3
48975: PUSH
48976: LD_INT 5
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: ST_TO_ADDR
// for i in tmp do
48985: LD_ADDR_VAR 0 8
48989: PUSH
48990: LD_VAR 0 14
48994: PUSH
48995: FOR_IN
48996: IFFALSE 49166
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48998: LD_ADDR_VAR 0 9
49002: PUSH
49003: LD_VAR 0 10
49007: PPUSH
49008: LD_VAR 0 8
49012: PPUSH
49013: LD_INT 5
49015: PPUSH
49016: CALL_OW 272
49020: PUSH
49021: LD_VAR 0 11
49025: PPUSH
49026: LD_VAR 0 8
49030: PPUSH
49031: LD_INT 5
49033: PPUSH
49034: CALL_OW 273
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49043: LD_VAR 0 9
49047: PUSH
49048: LD_INT 1
49050: ARRAY
49051: PPUSH
49052: LD_VAR 0 9
49056: PUSH
49057: LD_INT 2
49059: ARRAY
49060: PPUSH
49061: CALL_OW 488
49065: IFFALSE 49164
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49067: LD_ADDR_VAR 0 4
49071: PUSH
49072: LD_VAR 0 9
49076: PUSH
49077: LD_INT 1
49079: ARRAY
49080: PPUSH
49081: LD_VAR 0 9
49085: PUSH
49086: LD_INT 2
49088: ARRAY
49089: PPUSH
49090: CALL_OW 546
49094: ST_TO_ADDR
// if hex [ 1 ] then
49095: LD_VAR 0 4
49099: PUSH
49100: LD_INT 1
49102: ARRAY
49103: IFFALSE 49107
// continue ;
49105: GO 48995
// h := hex [ 2 ] ;
49107: LD_ADDR_VAR 0 13
49111: PUSH
49112: LD_VAR 0 4
49116: PUSH
49117: LD_INT 2
49119: ARRAY
49120: ST_TO_ADDR
// if h + 7 < height then
49121: LD_VAR 0 13
49125: PUSH
49126: LD_INT 7
49128: PLUS
49129: PUSH
49130: LD_VAR 0 15
49134: LESS
49135: IFFALSE 49164
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49137: LD_ADDR_VAR 0 18
49141: PUSH
49142: LD_INT 7
49144: PUSH
49145: LD_INT 28
49147: PUSH
49148: LD_INT 45
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: PUSH
49156: LD_VAR 0 12
49160: ARRAY
49161: ST_TO_ADDR
// break ;
49162: GO 49166
// end ; end ; end ;
49164: GO 48995
49166: POP
49167: POP
// end ; if not weapon then
49168: LD_VAR 0 18
49172: NOT
49173: IFFALSE 49233
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49175: LD_ADDR_VAR 0 5
49179: PUSH
49180: LD_VAR 0 5
49184: PUSH
49185: LD_INT 11
49187: PUSH
49188: LD_INT 30
49190: PUSH
49191: LD_INT 49
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: DIFF
49199: ST_TO_ADDR
// if not list then
49200: LD_VAR 0 5
49204: NOT
49205: IFFALSE 49209
// exit ;
49207: GO 49351
// weapon := list [ rand ( 1 , list ) ] ;
49209: LD_ADDR_VAR 0 18
49213: PUSH
49214: LD_VAR 0 5
49218: PUSH
49219: LD_INT 1
49221: PPUSH
49222: LD_VAR 0 5
49226: PPUSH
49227: CALL_OW 12
49231: ARRAY
49232: ST_TO_ADDR
// end ; if weapon then
49233: LD_VAR 0 18
49237: IFFALSE 49351
// begin tmp := CostOfWeapon ( weapon ) ;
49239: LD_ADDR_VAR 0 14
49243: PUSH
49244: LD_VAR 0 18
49248: PPUSH
49249: CALL_OW 451
49253: ST_TO_ADDR
// j := GetBase ( tower ) ;
49254: LD_ADDR_VAR 0 9
49258: PUSH
49259: LD_VAR 0 1
49263: PPUSH
49264: CALL_OW 274
49268: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49269: LD_VAR 0 9
49273: PPUSH
49274: LD_INT 1
49276: PPUSH
49277: CALL_OW 275
49281: PUSH
49282: LD_VAR 0 14
49286: PUSH
49287: LD_INT 1
49289: ARRAY
49290: GREATEREQUAL
49291: PUSH
49292: LD_VAR 0 9
49296: PPUSH
49297: LD_INT 2
49299: PPUSH
49300: CALL_OW 275
49304: PUSH
49305: LD_VAR 0 14
49309: PUSH
49310: LD_INT 2
49312: ARRAY
49313: GREATEREQUAL
49314: AND
49315: PUSH
49316: LD_VAR 0 9
49320: PPUSH
49321: LD_INT 3
49323: PPUSH
49324: CALL_OW 275
49328: PUSH
49329: LD_VAR 0 14
49333: PUSH
49334: LD_INT 3
49336: ARRAY
49337: GREATEREQUAL
49338: AND
49339: IFFALSE 49351
// result := weapon ;
49341: LD_ADDR_VAR 0 3
49345: PUSH
49346: LD_VAR 0 18
49350: ST_TO_ADDR
// end ; end ;
49351: LD_VAR 0 3
49355: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49356: LD_INT 0
49358: PPUSH
49359: PPUSH
// result := true ;
49360: LD_ADDR_VAR 0 3
49364: PUSH
49365: LD_INT 1
49367: ST_TO_ADDR
// if array1 = array2 then
49368: LD_VAR 0 1
49372: PUSH
49373: LD_VAR 0 2
49377: EQUAL
49378: IFFALSE 49438
// begin for i = 1 to array1 do
49380: LD_ADDR_VAR 0 4
49384: PUSH
49385: DOUBLE
49386: LD_INT 1
49388: DEC
49389: ST_TO_ADDR
49390: LD_VAR 0 1
49394: PUSH
49395: FOR_TO
49396: IFFALSE 49434
// if array1 [ i ] <> array2 [ i ] then
49398: LD_VAR 0 1
49402: PUSH
49403: LD_VAR 0 4
49407: ARRAY
49408: PUSH
49409: LD_VAR 0 2
49413: PUSH
49414: LD_VAR 0 4
49418: ARRAY
49419: NONEQUAL
49420: IFFALSE 49432
// begin result := false ;
49422: LD_ADDR_VAR 0 3
49426: PUSH
49427: LD_INT 0
49429: ST_TO_ADDR
// break ;
49430: GO 49434
// end ;
49432: GO 49395
49434: POP
49435: POP
// end else
49436: GO 49446
// result := false ;
49438: LD_ADDR_VAR 0 3
49442: PUSH
49443: LD_INT 0
49445: ST_TO_ADDR
// end ;
49446: LD_VAR 0 3
49450: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49451: LD_INT 0
49453: PPUSH
49454: PPUSH
// if not array1 or not array2 then
49455: LD_VAR 0 1
49459: NOT
49460: PUSH
49461: LD_VAR 0 2
49465: NOT
49466: OR
49467: IFFALSE 49471
// exit ;
49469: GO 49535
// result := true ;
49471: LD_ADDR_VAR 0 3
49475: PUSH
49476: LD_INT 1
49478: ST_TO_ADDR
// for i = 1 to array1 do
49479: LD_ADDR_VAR 0 4
49483: PUSH
49484: DOUBLE
49485: LD_INT 1
49487: DEC
49488: ST_TO_ADDR
49489: LD_VAR 0 1
49493: PUSH
49494: FOR_TO
49495: IFFALSE 49533
// if array1 [ i ] <> array2 [ i ] then
49497: LD_VAR 0 1
49501: PUSH
49502: LD_VAR 0 4
49506: ARRAY
49507: PUSH
49508: LD_VAR 0 2
49512: PUSH
49513: LD_VAR 0 4
49517: ARRAY
49518: NONEQUAL
49519: IFFALSE 49531
// begin result := false ;
49521: LD_ADDR_VAR 0 3
49525: PUSH
49526: LD_INT 0
49528: ST_TO_ADDR
// break ;
49529: GO 49533
// end ;
49531: GO 49494
49533: POP
49534: POP
// end ;
49535: LD_VAR 0 3
49539: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49540: LD_INT 0
49542: PPUSH
49543: PPUSH
49544: PPUSH
// pom := GetBase ( fac ) ;
49545: LD_ADDR_VAR 0 5
49549: PUSH
49550: LD_VAR 0 1
49554: PPUSH
49555: CALL_OW 274
49559: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49560: LD_ADDR_VAR 0 4
49564: PUSH
49565: LD_VAR 0 2
49569: PUSH
49570: LD_INT 1
49572: ARRAY
49573: PPUSH
49574: LD_VAR 0 2
49578: PUSH
49579: LD_INT 2
49581: ARRAY
49582: PPUSH
49583: LD_VAR 0 2
49587: PUSH
49588: LD_INT 3
49590: ARRAY
49591: PPUSH
49592: LD_VAR 0 2
49596: PUSH
49597: LD_INT 4
49599: ARRAY
49600: PPUSH
49601: CALL_OW 449
49605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49606: LD_ADDR_VAR 0 3
49610: PUSH
49611: LD_VAR 0 5
49615: PPUSH
49616: LD_INT 1
49618: PPUSH
49619: CALL_OW 275
49623: PUSH
49624: LD_VAR 0 4
49628: PUSH
49629: LD_INT 1
49631: ARRAY
49632: GREATEREQUAL
49633: PUSH
49634: LD_VAR 0 5
49638: PPUSH
49639: LD_INT 2
49641: PPUSH
49642: CALL_OW 275
49646: PUSH
49647: LD_VAR 0 4
49651: PUSH
49652: LD_INT 2
49654: ARRAY
49655: GREATEREQUAL
49656: AND
49657: PUSH
49658: LD_VAR 0 5
49662: PPUSH
49663: LD_INT 3
49665: PPUSH
49666: CALL_OW 275
49670: PUSH
49671: LD_VAR 0 4
49675: PUSH
49676: LD_INT 3
49678: ARRAY
49679: GREATEREQUAL
49680: AND
49681: ST_TO_ADDR
// end ;
49682: LD_VAR 0 3
49686: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49687: LD_INT 0
49689: PPUSH
49690: PPUSH
49691: PPUSH
49692: PPUSH
// pom := GetBase ( building ) ;
49693: LD_ADDR_VAR 0 3
49697: PUSH
49698: LD_VAR 0 1
49702: PPUSH
49703: CALL_OW 274
49707: ST_TO_ADDR
// if not pom then
49708: LD_VAR 0 3
49712: NOT
49713: IFFALSE 49717
// exit ;
49715: GO 49887
// btype := GetBType ( building ) ;
49717: LD_ADDR_VAR 0 5
49721: PUSH
49722: LD_VAR 0 1
49726: PPUSH
49727: CALL_OW 266
49731: ST_TO_ADDR
// if btype = b_armoury then
49732: LD_VAR 0 5
49736: PUSH
49737: LD_INT 4
49739: EQUAL
49740: IFFALSE 49750
// btype := b_barracks ;
49742: LD_ADDR_VAR 0 5
49746: PUSH
49747: LD_INT 5
49749: ST_TO_ADDR
// if btype = b_depot then
49750: LD_VAR 0 5
49754: PUSH
49755: LD_INT 0
49757: EQUAL
49758: IFFALSE 49768
// btype := b_warehouse ;
49760: LD_ADDR_VAR 0 5
49764: PUSH
49765: LD_INT 1
49767: ST_TO_ADDR
// if btype = b_workshop then
49768: LD_VAR 0 5
49772: PUSH
49773: LD_INT 2
49775: EQUAL
49776: IFFALSE 49786
// btype := b_factory ;
49778: LD_ADDR_VAR 0 5
49782: PUSH
49783: LD_INT 3
49785: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49786: LD_ADDR_VAR 0 4
49790: PUSH
49791: LD_VAR 0 5
49795: PPUSH
49796: LD_VAR 0 1
49800: PPUSH
49801: CALL_OW 248
49805: PPUSH
49806: CALL_OW 450
49810: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49811: LD_ADDR_VAR 0 2
49815: PUSH
49816: LD_VAR 0 3
49820: PPUSH
49821: LD_INT 1
49823: PPUSH
49824: CALL_OW 275
49828: PUSH
49829: LD_VAR 0 4
49833: PUSH
49834: LD_INT 1
49836: ARRAY
49837: GREATEREQUAL
49838: PUSH
49839: LD_VAR 0 3
49843: PPUSH
49844: LD_INT 2
49846: PPUSH
49847: CALL_OW 275
49851: PUSH
49852: LD_VAR 0 4
49856: PUSH
49857: LD_INT 2
49859: ARRAY
49860: GREATEREQUAL
49861: AND
49862: PUSH
49863: LD_VAR 0 3
49867: PPUSH
49868: LD_INT 3
49870: PPUSH
49871: CALL_OW 275
49875: PUSH
49876: LD_VAR 0 4
49880: PUSH
49881: LD_INT 3
49883: ARRAY
49884: GREATEREQUAL
49885: AND
49886: ST_TO_ADDR
// end ;
49887: LD_VAR 0 2
49891: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49892: LD_INT 0
49894: PPUSH
49895: PPUSH
49896: PPUSH
// pom := GetBase ( building ) ;
49897: LD_ADDR_VAR 0 4
49901: PUSH
49902: LD_VAR 0 1
49906: PPUSH
49907: CALL_OW 274
49911: ST_TO_ADDR
// if not pom then
49912: LD_VAR 0 4
49916: NOT
49917: IFFALSE 49921
// exit ;
49919: GO 50022
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49921: LD_ADDR_VAR 0 5
49925: PUSH
49926: LD_VAR 0 2
49930: PPUSH
49931: LD_VAR 0 1
49935: PPUSH
49936: CALL_OW 248
49940: PPUSH
49941: CALL_OW 450
49945: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49946: LD_ADDR_VAR 0 3
49950: PUSH
49951: LD_VAR 0 4
49955: PPUSH
49956: LD_INT 1
49958: PPUSH
49959: CALL_OW 275
49963: PUSH
49964: LD_VAR 0 5
49968: PUSH
49969: LD_INT 1
49971: ARRAY
49972: GREATEREQUAL
49973: PUSH
49974: LD_VAR 0 4
49978: PPUSH
49979: LD_INT 2
49981: PPUSH
49982: CALL_OW 275
49986: PUSH
49987: LD_VAR 0 5
49991: PUSH
49992: LD_INT 2
49994: ARRAY
49995: GREATEREQUAL
49996: AND
49997: PUSH
49998: LD_VAR 0 4
50002: PPUSH
50003: LD_INT 3
50005: PPUSH
50006: CALL_OW 275
50010: PUSH
50011: LD_VAR 0 5
50015: PUSH
50016: LD_INT 3
50018: ARRAY
50019: GREATEREQUAL
50020: AND
50021: ST_TO_ADDR
// end ;
50022: LD_VAR 0 3
50026: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50027: LD_INT 0
50029: PPUSH
50030: PPUSH
50031: PPUSH
50032: PPUSH
50033: PPUSH
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
// result := false ;
50040: LD_ADDR_VAR 0 8
50044: PUSH
50045: LD_INT 0
50047: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50048: LD_VAR 0 5
50052: NOT
50053: PUSH
50054: LD_VAR 0 1
50058: NOT
50059: OR
50060: PUSH
50061: LD_VAR 0 2
50065: NOT
50066: OR
50067: PUSH
50068: LD_VAR 0 3
50072: NOT
50073: OR
50074: IFFALSE 50078
// exit ;
50076: GO 50892
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50078: LD_ADDR_VAR 0 14
50082: PUSH
50083: LD_VAR 0 1
50087: PPUSH
50088: LD_VAR 0 2
50092: PPUSH
50093: LD_VAR 0 3
50097: PPUSH
50098: LD_VAR 0 4
50102: PPUSH
50103: LD_VAR 0 5
50107: PUSH
50108: LD_INT 1
50110: ARRAY
50111: PPUSH
50112: CALL_OW 248
50116: PPUSH
50117: LD_INT 0
50119: PPUSH
50120: CALL 52129 0 6
50124: ST_TO_ADDR
// if not hexes then
50125: LD_VAR 0 14
50129: NOT
50130: IFFALSE 50134
// exit ;
50132: GO 50892
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50134: LD_ADDR_VAR 0 17
50138: PUSH
50139: LD_VAR 0 5
50143: PPUSH
50144: LD_INT 22
50146: PUSH
50147: LD_VAR 0 13
50151: PPUSH
50152: CALL_OW 255
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 30
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 30
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PPUSH
50193: CALL_OW 72
50197: ST_TO_ADDR
// for i = 1 to hexes do
50198: LD_ADDR_VAR 0 9
50202: PUSH
50203: DOUBLE
50204: LD_INT 1
50206: DEC
50207: ST_TO_ADDR
50208: LD_VAR 0 14
50212: PUSH
50213: FOR_TO
50214: IFFALSE 50890
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50216: LD_ADDR_VAR 0 13
50220: PUSH
50221: LD_VAR 0 14
50225: PUSH
50226: LD_VAR 0 9
50230: ARRAY
50231: PUSH
50232: LD_INT 1
50234: ARRAY
50235: PPUSH
50236: LD_VAR 0 14
50240: PUSH
50241: LD_VAR 0 9
50245: ARRAY
50246: PUSH
50247: LD_INT 2
50249: ARRAY
50250: PPUSH
50251: CALL_OW 428
50255: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50256: LD_VAR 0 14
50260: PUSH
50261: LD_VAR 0 9
50265: ARRAY
50266: PUSH
50267: LD_INT 1
50269: ARRAY
50270: PPUSH
50271: LD_VAR 0 14
50275: PUSH
50276: LD_VAR 0 9
50280: ARRAY
50281: PUSH
50282: LD_INT 2
50284: ARRAY
50285: PPUSH
50286: CALL_OW 351
50290: PUSH
50291: LD_VAR 0 14
50295: PUSH
50296: LD_VAR 0 9
50300: ARRAY
50301: PUSH
50302: LD_INT 1
50304: ARRAY
50305: PPUSH
50306: LD_VAR 0 14
50310: PUSH
50311: LD_VAR 0 9
50315: ARRAY
50316: PUSH
50317: LD_INT 2
50319: ARRAY
50320: PPUSH
50321: CALL_OW 488
50325: NOT
50326: OR
50327: PUSH
50328: LD_VAR 0 13
50332: PPUSH
50333: CALL_OW 247
50337: PUSH
50338: LD_INT 3
50340: EQUAL
50341: OR
50342: IFFALSE 50348
// exit ;
50344: POP
50345: POP
50346: GO 50892
// if not tmp then
50348: LD_VAR 0 13
50352: NOT
50353: IFFALSE 50357
// continue ;
50355: GO 50213
// result := true ;
50357: LD_ADDR_VAR 0 8
50361: PUSH
50362: LD_INT 1
50364: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50365: LD_VAR 0 6
50369: PUSH
50370: LD_VAR 0 13
50374: PPUSH
50375: CALL_OW 247
50379: PUSH
50380: LD_INT 2
50382: EQUAL
50383: AND
50384: PUSH
50385: LD_VAR 0 13
50389: PPUSH
50390: CALL_OW 263
50394: PUSH
50395: LD_INT 1
50397: EQUAL
50398: AND
50399: IFFALSE 50563
// begin if IsDrivenBy ( tmp ) then
50401: LD_VAR 0 13
50405: PPUSH
50406: CALL_OW 311
50410: IFFALSE 50414
// continue ;
50412: GO 50213
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50414: LD_VAR 0 6
50418: PPUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 60
50424: PUSH
50425: EMPTY
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: LD_INT 55
50437: PUSH
50438: EMPTY
50439: LIST
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PPUSH
50449: CALL_OW 72
50453: IFFALSE 50561
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50455: LD_ADDR_VAR 0 18
50459: PUSH
50460: LD_VAR 0 6
50464: PPUSH
50465: LD_INT 3
50467: PUSH
50468: LD_INT 60
50470: PUSH
50471: EMPTY
50472: LIST
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 3
50480: PUSH
50481: LD_INT 55
50483: PUSH
50484: EMPTY
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PPUSH
50495: CALL_OW 72
50499: PUSH
50500: LD_INT 1
50502: ARRAY
50503: ST_TO_ADDR
// if IsInUnit ( driver ) then
50504: LD_VAR 0 18
50508: PPUSH
50509: CALL_OW 310
50513: IFFALSE 50524
// ComExit ( driver ) ;
50515: LD_VAR 0 18
50519: PPUSH
50520: CALL 75257 0 1
// AddComEnterUnit ( driver , tmp ) ;
50524: LD_VAR 0 18
50528: PPUSH
50529: LD_VAR 0 13
50533: PPUSH
50534: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50538: LD_VAR 0 18
50542: PPUSH
50543: LD_VAR 0 7
50547: PPUSH
50548: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50552: LD_VAR 0 18
50556: PPUSH
50557: CALL_OW 181
// end ; continue ;
50561: GO 50213
// end ; if not cleaners or not tmp in cleaners then
50563: LD_VAR 0 6
50567: NOT
50568: PUSH
50569: LD_VAR 0 13
50573: PUSH
50574: LD_VAR 0 6
50578: IN
50579: NOT
50580: OR
50581: IFFALSE 50888
// begin if dep then
50583: LD_VAR 0 17
50587: IFFALSE 50723
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50589: LD_ADDR_VAR 0 16
50593: PUSH
50594: LD_VAR 0 17
50598: PUSH
50599: LD_INT 1
50601: ARRAY
50602: PPUSH
50603: CALL_OW 250
50607: PPUSH
50608: LD_VAR 0 17
50612: PUSH
50613: LD_INT 1
50615: ARRAY
50616: PPUSH
50617: CALL_OW 254
50621: PPUSH
50622: LD_INT 5
50624: PPUSH
50625: CALL_OW 272
50629: PUSH
50630: LD_VAR 0 17
50634: PUSH
50635: LD_INT 1
50637: ARRAY
50638: PPUSH
50639: CALL_OW 251
50643: PPUSH
50644: LD_VAR 0 17
50648: PUSH
50649: LD_INT 1
50651: ARRAY
50652: PPUSH
50653: CALL_OW 254
50657: PPUSH
50658: LD_INT 5
50660: PPUSH
50661: CALL_OW 273
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50670: LD_VAR 0 16
50674: PUSH
50675: LD_INT 1
50677: ARRAY
50678: PPUSH
50679: LD_VAR 0 16
50683: PUSH
50684: LD_INT 2
50686: ARRAY
50687: PPUSH
50688: CALL_OW 488
50692: IFFALSE 50723
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50694: LD_VAR 0 13
50698: PPUSH
50699: LD_VAR 0 16
50703: PUSH
50704: LD_INT 1
50706: ARRAY
50707: PPUSH
50708: LD_VAR 0 16
50712: PUSH
50713: LD_INT 2
50715: ARRAY
50716: PPUSH
50717: CALL_OW 111
// continue ;
50721: GO 50213
// end ; end ; r := GetDir ( tmp ) ;
50723: LD_ADDR_VAR 0 15
50727: PUSH
50728: LD_VAR 0 13
50732: PPUSH
50733: CALL_OW 254
50737: ST_TO_ADDR
// if r = 5 then
50738: LD_VAR 0 15
50742: PUSH
50743: LD_INT 5
50745: EQUAL
50746: IFFALSE 50756
// r := 0 ;
50748: LD_ADDR_VAR 0 15
50752: PUSH
50753: LD_INT 0
50755: ST_TO_ADDR
// for j = r to 5 do
50756: LD_ADDR_VAR 0 10
50760: PUSH
50761: DOUBLE
50762: LD_VAR 0 15
50766: DEC
50767: ST_TO_ADDR
50768: LD_INT 5
50770: PUSH
50771: FOR_TO
50772: IFFALSE 50886
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50774: LD_ADDR_VAR 0 11
50778: PUSH
50779: LD_VAR 0 13
50783: PPUSH
50784: CALL_OW 250
50788: PPUSH
50789: LD_VAR 0 10
50793: PPUSH
50794: LD_INT 2
50796: PPUSH
50797: CALL_OW 272
50801: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50802: LD_ADDR_VAR 0 12
50806: PUSH
50807: LD_VAR 0 13
50811: PPUSH
50812: CALL_OW 251
50816: PPUSH
50817: LD_VAR 0 10
50821: PPUSH
50822: LD_INT 2
50824: PPUSH
50825: CALL_OW 273
50829: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50830: LD_VAR 0 11
50834: PPUSH
50835: LD_VAR 0 12
50839: PPUSH
50840: CALL_OW 488
50844: PUSH
50845: LD_VAR 0 11
50849: PPUSH
50850: LD_VAR 0 12
50854: PPUSH
50855: CALL_OW 428
50859: NOT
50860: AND
50861: IFFALSE 50884
// begin ComMoveXY ( tmp , _x , _y ) ;
50863: LD_VAR 0 13
50867: PPUSH
50868: LD_VAR 0 11
50872: PPUSH
50873: LD_VAR 0 12
50877: PPUSH
50878: CALL_OW 111
// break ;
50882: GO 50886
// end ; end ;
50884: GO 50771
50886: POP
50887: POP
// end ; end ;
50888: GO 50213
50890: POP
50891: POP
// end ;
50892: LD_VAR 0 8
50896: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50897: LD_INT 0
50899: PPUSH
// result := true ;
50900: LD_ADDR_VAR 0 3
50904: PUSH
50905: LD_INT 1
50907: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50908: LD_VAR 0 2
50912: PUSH
50913: LD_INT 24
50915: DOUBLE
50916: EQUAL
50917: IFTRUE 50927
50919: LD_INT 33
50921: DOUBLE
50922: EQUAL
50923: IFTRUE 50927
50925: GO 50952
50927: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50928: LD_ADDR_VAR 0 3
50932: PUSH
50933: LD_INT 32
50935: PPUSH
50936: LD_VAR 0 1
50940: PPUSH
50941: CALL_OW 321
50945: PUSH
50946: LD_INT 2
50948: EQUAL
50949: ST_TO_ADDR
50950: GO 51272
50952: LD_INT 20
50954: DOUBLE
50955: EQUAL
50956: IFTRUE 50960
50958: GO 50985
50960: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50961: LD_ADDR_VAR 0 3
50965: PUSH
50966: LD_INT 6
50968: PPUSH
50969: LD_VAR 0 1
50973: PPUSH
50974: CALL_OW 321
50978: PUSH
50979: LD_INT 2
50981: EQUAL
50982: ST_TO_ADDR
50983: GO 51272
50985: LD_INT 22
50987: DOUBLE
50988: EQUAL
50989: IFTRUE 50999
50991: LD_INT 36
50993: DOUBLE
50994: EQUAL
50995: IFTRUE 50999
50997: GO 51024
50999: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51000: LD_ADDR_VAR 0 3
51004: PUSH
51005: LD_INT 15
51007: PPUSH
51008: LD_VAR 0 1
51012: PPUSH
51013: CALL_OW 321
51017: PUSH
51018: LD_INT 2
51020: EQUAL
51021: ST_TO_ADDR
51022: GO 51272
51024: LD_INT 30
51026: DOUBLE
51027: EQUAL
51028: IFTRUE 51032
51030: GO 51057
51032: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51033: LD_ADDR_VAR 0 3
51037: PUSH
51038: LD_INT 20
51040: PPUSH
51041: LD_VAR 0 1
51045: PPUSH
51046: CALL_OW 321
51050: PUSH
51051: LD_INT 2
51053: EQUAL
51054: ST_TO_ADDR
51055: GO 51272
51057: LD_INT 28
51059: DOUBLE
51060: EQUAL
51061: IFTRUE 51071
51063: LD_INT 21
51065: DOUBLE
51066: EQUAL
51067: IFTRUE 51071
51069: GO 51096
51071: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51072: LD_ADDR_VAR 0 3
51076: PUSH
51077: LD_INT 21
51079: PPUSH
51080: LD_VAR 0 1
51084: PPUSH
51085: CALL_OW 321
51089: PUSH
51090: LD_INT 2
51092: EQUAL
51093: ST_TO_ADDR
51094: GO 51272
51096: LD_INT 16
51098: DOUBLE
51099: EQUAL
51100: IFTRUE 51104
51102: GO 51131
51104: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51105: LD_ADDR_VAR 0 3
51109: PUSH
51110: LD_EXP 58
51114: PPUSH
51115: LD_VAR 0 1
51119: PPUSH
51120: CALL_OW 321
51124: PUSH
51125: LD_INT 2
51127: EQUAL
51128: ST_TO_ADDR
51129: GO 51272
51131: LD_INT 19
51133: DOUBLE
51134: EQUAL
51135: IFTRUE 51145
51137: LD_INT 23
51139: DOUBLE
51140: EQUAL
51141: IFTRUE 51145
51143: GO 51172
51145: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51146: LD_ADDR_VAR 0 3
51150: PUSH
51151: LD_EXP 57
51155: PPUSH
51156: LD_VAR 0 1
51160: PPUSH
51161: CALL_OW 321
51165: PUSH
51166: LD_INT 2
51168: EQUAL
51169: ST_TO_ADDR
51170: GO 51272
51172: LD_INT 17
51174: DOUBLE
51175: EQUAL
51176: IFTRUE 51180
51178: GO 51205
51180: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51181: LD_ADDR_VAR 0 3
51185: PUSH
51186: LD_INT 39
51188: PPUSH
51189: LD_VAR 0 1
51193: PPUSH
51194: CALL_OW 321
51198: PUSH
51199: LD_INT 2
51201: EQUAL
51202: ST_TO_ADDR
51203: GO 51272
51205: LD_INT 18
51207: DOUBLE
51208: EQUAL
51209: IFTRUE 51213
51211: GO 51238
51213: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51214: LD_ADDR_VAR 0 3
51218: PUSH
51219: LD_INT 40
51221: PPUSH
51222: LD_VAR 0 1
51226: PPUSH
51227: CALL_OW 321
51231: PUSH
51232: LD_INT 2
51234: EQUAL
51235: ST_TO_ADDR
51236: GO 51272
51238: LD_INT 27
51240: DOUBLE
51241: EQUAL
51242: IFTRUE 51246
51244: GO 51271
51246: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51247: LD_ADDR_VAR 0 3
51251: PUSH
51252: LD_INT 35
51254: PPUSH
51255: LD_VAR 0 1
51259: PPUSH
51260: CALL_OW 321
51264: PUSH
51265: LD_INT 2
51267: EQUAL
51268: ST_TO_ADDR
51269: GO 51272
51271: POP
// end ;
51272: LD_VAR 0 3
51276: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51277: LD_INT 0
51279: PPUSH
51280: PPUSH
51281: PPUSH
51282: PPUSH
51283: PPUSH
51284: PPUSH
51285: PPUSH
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
// result := false ;
51290: LD_ADDR_VAR 0 6
51294: PUSH
51295: LD_INT 0
51297: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51298: LD_VAR 0 1
51302: NOT
51303: PUSH
51304: LD_VAR 0 1
51308: PPUSH
51309: CALL_OW 266
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: IN
51324: NOT
51325: OR
51326: PUSH
51327: LD_VAR 0 2
51331: NOT
51332: OR
51333: PUSH
51334: LD_VAR 0 5
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: LD_INT 4
51353: PUSH
51354: LD_INT 5
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: IN
51365: NOT
51366: OR
51367: PUSH
51368: LD_VAR 0 3
51372: PPUSH
51373: LD_VAR 0 4
51377: PPUSH
51378: CALL_OW 488
51382: NOT
51383: OR
51384: IFFALSE 51388
// exit ;
51386: GO 52124
// side := GetSide ( depot ) ;
51388: LD_ADDR_VAR 0 9
51392: PUSH
51393: LD_VAR 0 1
51397: PPUSH
51398: CALL_OW 255
51402: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51403: LD_VAR 0 9
51407: PPUSH
51408: LD_VAR 0 2
51412: PPUSH
51413: CALL 50897 0 2
51417: NOT
51418: IFFALSE 51422
// exit ;
51420: GO 52124
// pom := GetBase ( depot ) ;
51422: LD_ADDR_VAR 0 10
51426: PUSH
51427: LD_VAR 0 1
51431: PPUSH
51432: CALL_OW 274
51436: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51437: LD_ADDR_VAR 0 11
51441: PUSH
51442: LD_VAR 0 2
51446: PPUSH
51447: LD_VAR 0 1
51451: PPUSH
51452: CALL_OW 248
51456: PPUSH
51457: CALL_OW 450
51461: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51462: LD_VAR 0 10
51466: PPUSH
51467: LD_INT 1
51469: PPUSH
51470: CALL_OW 275
51474: PUSH
51475: LD_VAR 0 11
51479: PUSH
51480: LD_INT 1
51482: ARRAY
51483: GREATEREQUAL
51484: PUSH
51485: LD_VAR 0 10
51489: PPUSH
51490: LD_INT 2
51492: PPUSH
51493: CALL_OW 275
51497: PUSH
51498: LD_VAR 0 11
51502: PUSH
51503: LD_INT 2
51505: ARRAY
51506: GREATEREQUAL
51507: AND
51508: PUSH
51509: LD_VAR 0 10
51513: PPUSH
51514: LD_INT 3
51516: PPUSH
51517: CALL_OW 275
51521: PUSH
51522: LD_VAR 0 11
51526: PUSH
51527: LD_INT 3
51529: ARRAY
51530: GREATEREQUAL
51531: AND
51532: NOT
51533: IFFALSE 51537
// exit ;
51535: GO 52124
// if GetBType ( depot ) = b_depot then
51537: LD_VAR 0 1
51541: PPUSH
51542: CALL_OW 266
51546: PUSH
51547: LD_INT 0
51549: EQUAL
51550: IFFALSE 51562
// dist := 28 else
51552: LD_ADDR_VAR 0 14
51556: PUSH
51557: LD_INT 28
51559: ST_TO_ADDR
51560: GO 51570
// dist := 36 ;
51562: LD_ADDR_VAR 0 14
51566: PUSH
51567: LD_INT 36
51569: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51570: LD_VAR 0 1
51574: PPUSH
51575: LD_VAR 0 3
51579: PPUSH
51580: LD_VAR 0 4
51584: PPUSH
51585: CALL_OW 297
51589: PUSH
51590: LD_VAR 0 14
51594: GREATER
51595: IFFALSE 51599
// exit ;
51597: GO 52124
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51599: LD_ADDR_VAR 0 12
51603: PUSH
51604: LD_VAR 0 2
51608: PPUSH
51609: LD_VAR 0 3
51613: PPUSH
51614: LD_VAR 0 4
51618: PPUSH
51619: LD_VAR 0 5
51623: PPUSH
51624: LD_VAR 0 1
51628: PPUSH
51629: CALL_OW 248
51633: PPUSH
51634: LD_INT 0
51636: PPUSH
51637: CALL 52129 0 6
51641: ST_TO_ADDR
// if not hexes then
51642: LD_VAR 0 12
51646: NOT
51647: IFFALSE 51651
// exit ;
51649: GO 52124
// hex := GetHexInfo ( x , y ) ;
51651: LD_ADDR_VAR 0 15
51655: PUSH
51656: LD_VAR 0 3
51660: PPUSH
51661: LD_VAR 0 4
51665: PPUSH
51666: CALL_OW 546
51670: ST_TO_ADDR
// if hex [ 1 ] then
51671: LD_VAR 0 15
51675: PUSH
51676: LD_INT 1
51678: ARRAY
51679: IFFALSE 51683
// exit ;
51681: GO 52124
// height := hex [ 2 ] ;
51683: LD_ADDR_VAR 0 13
51687: PUSH
51688: LD_VAR 0 15
51692: PUSH
51693: LD_INT 2
51695: ARRAY
51696: ST_TO_ADDR
// for i = 1 to hexes do
51697: LD_ADDR_VAR 0 7
51701: PUSH
51702: DOUBLE
51703: LD_INT 1
51705: DEC
51706: ST_TO_ADDR
51707: LD_VAR 0 12
51711: PUSH
51712: FOR_TO
51713: IFFALSE 52043
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51715: LD_VAR 0 12
51719: PUSH
51720: LD_VAR 0 7
51724: ARRAY
51725: PUSH
51726: LD_INT 1
51728: ARRAY
51729: PPUSH
51730: LD_VAR 0 12
51734: PUSH
51735: LD_VAR 0 7
51739: ARRAY
51740: PUSH
51741: LD_INT 2
51743: ARRAY
51744: PPUSH
51745: CALL_OW 488
51749: NOT
51750: PUSH
51751: LD_VAR 0 12
51755: PUSH
51756: LD_VAR 0 7
51760: ARRAY
51761: PUSH
51762: LD_INT 1
51764: ARRAY
51765: PPUSH
51766: LD_VAR 0 12
51770: PUSH
51771: LD_VAR 0 7
51775: ARRAY
51776: PUSH
51777: LD_INT 2
51779: ARRAY
51780: PPUSH
51781: CALL_OW 428
51785: PUSH
51786: LD_INT 0
51788: GREATER
51789: OR
51790: PUSH
51791: LD_VAR 0 12
51795: PUSH
51796: LD_VAR 0 7
51800: ARRAY
51801: PUSH
51802: LD_INT 1
51804: ARRAY
51805: PPUSH
51806: LD_VAR 0 12
51810: PUSH
51811: LD_VAR 0 7
51815: ARRAY
51816: PUSH
51817: LD_INT 2
51819: ARRAY
51820: PPUSH
51821: CALL_OW 351
51825: OR
51826: IFFALSE 51832
// exit ;
51828: POP
51829: POP
51830: GO 52124
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51832: LD_ADDR_VAR 0 8
51836: PUSH
51837: LD_VAR 0 12
51841: PUSH
51842: LD_VAR 0 7
51846: ARRAY
51847: PUSH
51848: LD_INT 1
51850: ARRAY
51851: PPUSH
51852: LD_VAR 0 12
51856: PUSH
51857: LD_VAR 0 7
51861: ARRAY
51862: PUSH
51863: LD_INT 2
51865: ARRAY
51866: PPUSH
51867: CALL_OW 546
51871: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51872: LD_VAR 0 8
51876: PUSH
51877: LD_INT 1
51879: ARRAY
51880: PUSH
51881: LD_VAR 0 8
51885: PUSH
51886: LD_INT 2
51888: ARRAY
51889: PUSH
51890: LD_VAR 0 13
51894: PUSH
51895: LD_INT 2
51897: PLUS
51898: GREATER
51899: OR
51900: PUSH
51901: LD_VAR 0 8
51905: PUSH
51906: LD_INT 2
51908: ARRAY
51909: PUSH
51910: LD_VAR 0 13
51914: PUSH
51915: LD_INT 2
51917: MINUS
51918: LESS
51919: OR
51920: PUSH
51921: LD_VAR 0 8
51925: PUSH
51926: LD_INT 3
51928: ARRAY
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 8
51935: PUSH
51936: LD_INT 9
51938: PUSH
51939: LD_INT 10
51941: PUSH
51942: LD_INT 11
51944: PUSH
51945: LD_INT 12
51947: PUSH
51948: LD_INT 13
51950: PUSH
51951: LD_INT 16
51953: PUSH
51954: LD_INT 17
51956: PUSH
51957: LD_INT 18
51959: PUSH
51960: LD_INT 19
51962: PUSH
51963: LD_INT 20
51965: PUSH
51966: LD_INT 21
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: IN
51984: NOT
51985: OR
51986: PUSH
51987: LD_VAR 0 8
51991: PUSH
51992: LD_INT 5
51994: ARRAY
51995: NOT
51996: OR
51997: PUSH
51998: LD_VAR 0 8
52002: PUSH
52003: LD_INT 6
52005: ARRAY
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 7
52015: PUSH
52016: LD_INT 9
52018: PUSH
52019: LD_INT 10
52021: PUSH
52022: LD_INT 11
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: IN
52033: NOT
52034: OR
52035: IFFALSE 52041
// exit ;
52037: POP
52038: POP
52039: GO 52124
// end ;
52041: GO 51712
52043: POP
52044: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52045: LD_VAR 0 9
52049: PPUSH
52050: LD_VAR 0 3
52054: PPUSH
52055: LD_VAR 0 4
52059: PPUSH
52060: LD_INT 20
52062: PPUSH
52063: CALL 44070 0 4
52067: PUSH
52068: LD_INT 4
52070: ARRAY
52071: IFFALSE 52075
// exit ;
52073: GO 52124
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52075: LD_VAR 0 2
52079: PUSH
52080: LD_INT 29
52082: PUSH
52083: LD_INT 30
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: IN
52090: PUSH
52091: LD_VAR 0 3
52095: PPUSH
52096: LD_VAR 0 4
52100: PPUSH
52101: LD_VAR 0 9
52105: PPUSH
52106: CALL_OW 440
52110: NOT
52111: AND
52112: IFFALSE 52116
// exit ;
52114: GO 52124
// result := true ;
52116: LD_ADDR_VAR 0 6
52120: PUSH
52121: LD_INT 1
52123: ST_TO_ADDR
// end ;
52124: LD_VAR 0 6
52128: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52129: LD_INT 0
52131: PPUSH
52132: PPUSH
52133: PPUSH
52134: PPUSH
52135: PPUSH
52136: PPUSH
52137: PPUSH
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
52143: PPUSH
52144: PPUSH
52145: PPUSH
52146: PPUSH
52147: PPUSH
52148: PPUSH
52149: PPUSH
52150: PPUSH
52151: PPUSH
52152: PPUSH
52153: PPUSH
52154: PPUSH
52155: PPUSH
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
52164: PPUSH
52165: PPUSH
52166: PPUSH
52167: PPUSH
52168: PPUSH
52169: PPUSH
52170: PPUSH
52171: PPUSH
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
52176: PPUSH
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
52184: PPUSH
52185: PPUSH
52186: PPUSH
52187: PPUSH
52188: PPUSH
// result = [ ] ;
52189: LD_ADDR_VAR 0 7
52193: PUSH
52194: EMPTY
52195: ST_TO_ADDR
// temp_list = [ ] ;
52196: LD_ADDR_VAR 0 9
52200: PUSH
52201: EMPTY
52202: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52203: LD_VAR 0 4
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: LD_INT 4
52222: PUSH
52223: LD_INT 5
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: IN
52234: NOT
52235: PUSH
52236: LD_VAR 0 1
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: IN
52251: PUSH
52252: LD_VAR 0 5
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: LIST
52270: IN
52271: NOT
52272: AND
52273: OR
52274: IFFALSE 52278
// exit ;
52276: GO 70669
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52278: LD_VAR 0 1
52282: PUSH
52283: LD_INT 6
52285: PUSH
52286: LD_INT 7
52288: PUSH
52289: LD_INT 8
52291: PUSH
52292: LD_INT 13
52294: PUSH
52295: LD_INT 12
52297: PUSH
52298: LD_INT 15
52300: PUSH
52301: LD_INT 11
52303: PUSH
52304: LD_INT 14
52306: PUSH
52307: LD_INT 10
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: IN
52321: IFFALSE 52331
// btype = b_lab ;
52323: LD_ADDR_VAR 0 1
52327: PUSH
52328: LD_INT 6
52330: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52331: LD_VAR 0 6
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: IN
52350: NOT
52351: PUSH
52352: LD_VAR 0 1
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: LD_INT 6
52371: PUSH
52372: LD_INT 36
52374: PUSH
52375: LD_INT 4
52377: PUSH
52378: LD_INT 5
52380: PUSH
52381: LD_INT 31
52383: PUSH
52384: LD_INT 32
52386: PUSH
52387: LD_INT 33
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: IN
52403: NOT
52404: PUSH
52405: LD_VAR 0 6
52409: PUSH
52410: LD_INT 1
52412: EQUAL
52413: AND
52414: OR
52415: PUSH
52416: LD_VAR 0 1
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: IN
52431: NOT
52432: PUSH
52433: LD_VAR 0 6
52437: PUSH
52438: LD_INT 2
52440: EQUAL
52441: AND
52442: OR
52443: IFFALSE 52453
// mode = 0 ;
52445: LD_ADDR_VAR 0 6
52449: PUSH
52450: LD_INT 0
52452: ST_TO_ADDR
// case mode of 0 :
52453: LD_VAR 0 6
52457: PUSH
52458: LD_INT 0
52460: DOUBLE
52461: EQUAL
52462: IFTRUE 52466
52464: GO 63919
52466: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52467: LD_ADDR_VAR 0 11
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 3
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52660: LD_ADDR_VAR 0 12
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52856: LD_ADDR_VAR 0 13
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53055: LD_ADDR_VAR 0 14
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53251: LD_ADDR_VAR 0 15
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53444: LD_ADDR_VAR 0 16
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: PUSH
53602: LD_INT 3
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53637: LD_ADDR_VAR 0 17
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53867: LD_ADDR_VAR 0 18
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54097: LD_ADDR_VAR 0 19
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54327: LD_ADDR_VAR 0 20
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54557: LD_ADDR_VAR 0 21
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54787: LD_ADDR_VAR 0 22
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55017: LD_ADDR_VAR 0 23
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55297: LD_ADDR_VAR 0 24
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55573: LD_ADDR_VAR 0 25
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55847: LD_ADDR_VAR 0 26
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56123: LD_ADDR_VAR 0 27
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56403: LD_ADDR_VAR 0 28
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56685: LD_ADDR_VAR 0 29
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56964: LD_ADDR_VAR 0 30
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 3
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57242: LD_ADDR_VAR 0 31
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57520: LD_ADDR_VAR 0 32
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 3
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57798: LD_ADDR_VAR 0 33
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58077: LD_ADDR_VAR 0 34
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: LD_INT 3
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58357: LD_ADDR_VAR 0 35
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58469: LD_ADDR_VAR 0 36
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58581: LD_ADDR_VAR 0 37
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58693: LD_ADDR_VAR 0 38
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58805: LD_ADDR_VAR 0 39
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58917: LD_ADDR_VAR 0 40
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59029: LD_ADDR_VAR 0 41
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59379: LD_ADDR_VAR 0 42
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 2
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: NEG
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 3
59676: NEG
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: NEG
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59729: LD_ADDR_VAR 0 43
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 2
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60077: LD_ADDR_VAR 0 44
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 3
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: LD_INT 3
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60427: LD_ADDR_VAR 0 45
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: LD_INT 3
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 3
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: NEG
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60777: LD_ADDR_VAR 0 46
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: NEG
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 3
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61125: LD_ADDR_VAR 0 47
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61276: LD_ADDR_VAR 0 48
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 1
61334: NEG
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61423: LD_ADDR_VAR 0 49
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: NEG
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61567: LD_ADDR_VAR 0 50
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61711: LD_ADDR_VAR 0 51
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61858: LD_ADDR_VAR 0 52
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: NEG
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: NEG
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: NEG
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62009: LD_ADDR_VAR 0 53
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: LD_INT 2
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: LD_INT 2
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62239: LD_ADDR_VAR 0 54
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 2
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62469: LD_ADDR_VAR 0 55
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62699: LD_ADDR_VAR 0 56
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: NEG
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: LD_INT 2
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62929: LD_ADDR_VAR 0 57
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 2
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63159: LD_ADDR_VAR 0 58
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 2
63335: NEG
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: NEG
63359: PUSH
63360: LD_INT 2
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63389: LD_ADDR_VAR 0 59
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63477: LD_ADDR_VAR 0 60
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 1
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 1
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63565: LD_ADDR_VAR 0 61
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63653: LD_ADDR_VAR 0 62
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63741: LD_ADDR_VAR 0 63
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63829: LD_ADDR_VAR 0 64
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: ST_TO_ADDR
// end ; 1 :
63917: GO 69814
63919: LD_INT 1
63921: DOUBLE
63922: EQUAL
63923: IFTRUE 63927
63925: GO 66550
63927: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63928: LD_ADDR_VAR 0 11
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: LD_INT 3
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 3
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: LIST
63971: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63972: LD_ADDR_VAR 0 12
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 3
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64013: LD_ADDR_VAR 0 13
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 3
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 2
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64053: LD_ADDR_VAR 0 14
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: LD_INT 3
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: LIST
64093: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64094: LD_ADDR_VAR 0 15
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: NEG
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64138: LD_ADDR_VAR 0 16
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: LD_INT 3
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 3
64157: NEG
64158: PUSH
64159: LD_INT 2
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 3
64169: NEG
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: LIST
64183: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64184: LD_ADDR_VAR 0 17
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 3
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 3
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: LD_INT 2
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64228: LD_ADDR_VAR 0 18
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 3
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64269: LD_ADDR_VAR 0 19
64273: PUSH
64274: LD_INT 3
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 3
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: LD_INT 3
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: LIST
64308: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64309: LD_ADDR_VAR 0 20
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: LD_INT 2
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64350: LD_ADDR_VAR 0 21
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 3
64368: NEG
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 3
64379: NEG
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: LIST
64393: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64394: LD_ADDR_VAR 0 22
64398: PUSH
64399: LD_INT 2
64401: NEG
64402: PUSH
64403: LD_INT 3
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 3
64425: NEG
64426: PUSH
64427: LD_INT 3
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64440: LD_ADDR_VAR 0 23
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: LD_INT 3
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: LD_INT 4
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 3
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64484: LD_ADDR_VAR 0 24
64488: PUSH
64489: LD_INT 3
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 3
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 4
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: LIST
64524: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64525: LD_ADDR_VAR 0 25
64529: PUSH
64530: LD_INT 3
64532: PUSH
64533: LD_INT 3
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 4
64542: PUSH
64543: LD_INT 3
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: LD_INT 4
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64565: LD_ADDR_VAR 0 26
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: LD_INT 4
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64606: LD_ADDR_VAR 0 27
64610: PUSH
64611: LD_INT 3
64613: NEG
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 3
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 4
64635: NEG
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64650: LD_ADDR_VAR 0 28
64654: PUSH
64655: LD_INT 3
64657: NEG
64658: PUSH
64659: LD_INT 3
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 3
64669: NEG
64670: PUSH
64671: LD_INT 4
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 4
64681: NEG
64682: PUSH
64683: LD_INT 3
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64696: LD_ADDR_VAR 0 29
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 3
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: LD_INT 2
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: LD_INT 4
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: LD_INT 4
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: LD_INT 5
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: LD_INT 5
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: LD_INT 4
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 6
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 6
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: PUSH
64829: LD_INT 5
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64851: LD_ADDR_VAR 0 30
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 3
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 4
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 4
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 4
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 5
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 5
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 5
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 6
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 6
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64994: LD_ADDR_VAR 0 31
64998: PUSH
64999: LD_INT 3
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 2
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 4
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 4
65041: PUSH
65042: LD_INT 4
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 3
65051: PUSH
65052: LD_INT 4
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 5
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 5
65071: PUSH
65072: LD_INT 5
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 4
65081: PUSH
65082: LD_INT 5
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 6
65091: PUSH
65092: LD_INT 5
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 6
65101: PUSH
65102: LD_INT 6
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 5
65111: PUSH
65112: LD_INT 6
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65133: LD_ADDR_VAR 0 32
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: LD_INT 3
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: LD_INT 4
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: LD_INT 4
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: LD_INT 3
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: PUSH
65203: LD_INT 5
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 5
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: LD_INT 4
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: LD_INT 6
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: LD_INT 6
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: LD_INT 5
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65276: LD_ADDR_VAR 0 33
65280: PUSH
65281: LD_INT 2
65283: NEG
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 3
65294: NEG
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 3
65305: NEG
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 3
65317: NEG
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 4
65328: NEG
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 4
65339: NEG
65340: PUSH
65341: LD_INT 1
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 4
65351: NEG
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 5
65362: NEG
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 5
65373: NEG
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 5
65385: NEG
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 6
65396: NEG
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 6
65407: NEG
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65431: LD_ADDR_VAR 0 34
65435: PUSH
65436: LD_INT 2
65438: NEG
65439: PUSH
65440: LD_INT 3
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 3
65450: NEG
65451: PUSH
65452: LD_INT 2
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: LD_INT 3
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 3
65474: NEG
65475: PUSH
65476: LD_INT 4
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 4
65486: NEG
65487: PUSH
65488: LD_INT 3
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 4
65498: NEG
65499: PUSH
65500: LD_INT 4
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 4
65510: NEG
65511: PUSH
65512: LD_INT 5
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 5
65522: NEG
65523: PUSH
65524: LD_INT 4
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 5
65534: NEG
65535: PUSH
65536: LD_INT 5
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 5
65546: NEG
65547: PUSH
65548: LD_INT 6
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 6
65558: NEG
65559: PUSH
65560: LD_INT 5
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 6
65570: NEG
65571: PUSH
65572: LD_INT 6
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65594: LD_ADDR_VAR 0 41
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: LD_INT 2
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: LD_INT 3
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: LD_INT 2
65627: NEG
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65638: LD_ADDR_VAR 0 42
65642: PUSH
65643: LD_INT 2
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 2
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 3
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: LIST
65678: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65679: LD_ADDR_VAR 0 43
65683: PUSH
65684: LD_INT 2
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: LD_INT 3
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65719: LD_ADDR_VAR 0 44
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65760: LD_ADDR_VAR 0 45
65764: PUSH
65765: LD_INT 2
65767: NEG
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65804: LD_ADDR_VAR 0 46
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 2
65823: NEG
65824: PUSH
65825: LD_INT 3
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 3
65835: NEG
65836: PUSH
65837: LD_INT 2
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: LIST
65849: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65850: LD_ADDR_VAR 0 47
65854: PUSH
65855: LD_INT 2
65857: NEG
65858: PUSH
65859: LD_INT 3
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: NEG
65870: PUSH
65871: LD_INT 3
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65883: LD_ADDR_VAR 0 48
65887: PUSH
65888: LD_INT 1
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65914: LD_ADDR_VAR 0 49
65918: PUSH
65919: LD_INT 3
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: LD_INT 2
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65943: LD_ADDR_VAR 0 50
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 1
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65972: LD_ADDR_VAR 0 51
65976: PUSH
65977: LD_INT 1
65979: NEG
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66003: LD_ADDR_VAR 0 52
66007: PUSH
66008: LD_INT 3
66010: NEG
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 3
66022: NEG
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66036: LD_ADDR_VAR 0 53
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: LD_INT 3
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: LD_INT 3
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: LD_INT 2
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: LIST
66079: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66080: LD_ADDR_VAR 0 54
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 3
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 3
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66121: LD_ADDR_VAR 0 55
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: LD_INT 2
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 3
66138: PUSH
66139: LD_INT 3
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 2
66148: PUSH
66149: LD_INT 3
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: LIST
66160: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66161: LD_ADDR_VAR 0 56
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: LD_INT 3
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: LD_INT 3
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66202: LD_ADDR_VAR 0 57
66206: PUSH
66207: LD_INT 2
66209: NEG
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 3
66220: NEG
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 3
66231: NEG
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: LIST
66245: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66246: LD_ADDR_VAR 0 58
66250: PUSH
66251: LD_INT 2
66253: NEG
66254: PUSH
66255: LD_INT 3
66257: NEG
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 3
66265: NEG
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 3
66277: NEG
66278: PUSH
66279: LD_INT 3
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: LIST
66291: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66292: LD_ADDR_VAR 0 59
66296: PUSH
66297: LD_INT 1
66299: NEG
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 1
66322: PUSH
66323: LD_INT 1
66325: NEG
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66336: LD_ADDR_VAR 0 60
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 2
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 2
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: LIST
66376: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66377: LD_ADDR_VAR 0 61
66381: PUSH
66382: LD_INT 2
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: LD_INT 2
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66417: LD_ADDR_VAR 0 62
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: LD_INT 2
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: LIST
66457: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66458: LD_ADDR_VAR 0 63
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 2
66476: NEG
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: LD_INT 1
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: LIST
66501: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66502: LD_ADDR_VAR 0 64
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 2
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 2
66521: NEG
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 2
66533: NEG
66534: PUSH
66535: LD_INT 2
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: ST_TO_ADDR
// end ; 2 :
66548: GO 69814
66550: LD_INT 2
66552: DOUBLE
66553: EQUAL
66554: IFTRUE 66558
66556: GO 69813
66558: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66559: LD_ADDR_VAR 0 29
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 4
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 5
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 5
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 4
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 3
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 3
66638: PUSH
66639: LD_INT 2
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 5
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 3
66659: PUSH
66660: LD_INT 3
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 3
66669: PUSH
66670: LD_INT 2
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 4
66679: PUSH
66680: LD_INT 3
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 4
66689: PUSH
66690: LD_INT 4
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: LD_INT 4
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: LD_INT 3
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 4
66729: PUSH
66730: LD_INT 2
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: LD_INT 4
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: LD_INT 4
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 3
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: LD_INT 4
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: LD_INT 5
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: LD_INT 5
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: LD_INT 4
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: LD_INT 3
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: LD_INT 5
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 2
66831: NEG
66832: PUSH
66833: LD_INT 3
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 2
66876: NEG
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 4
66898: NEG
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 4
66909: NEG
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 4
66921: NEG
66922: PUSH
66923: LD_INT 2
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 4
66944: NEG
66945: PUSH
66946: LD_INT 4
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 4
66956: NEG
66957: PUSH
66958: LD_INT 5
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 3
66968: NEG
66969: PUSH
66970: LD_INT 4
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 3
66980: NEG
66981: PUSH
66982: LD_INT 3
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 4
66992: NEG
66993: PUSH
66994: LD_INT 3
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 5
67004: NEG
67005: PUSH
67006: LD_INT 4
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 5
67016: NEG
67017: PUSH
67018: LD_INT 5
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: NEG
67029: PUSH
67030: LD_INT 5
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 5
67040: NEG
67041: PUSH
67042: LD_INT 3
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67097: LD_ADDR_VAR 0 30
67101: PUSH
67102: LD_INT 4
67104: PUSH
67105: LD_INT 4
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 4
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 5
67124: PUSH
67125: LD_INT 4
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 5
67134: PUSH
67135: LD_INT 5
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 4
67144: PUSH
67145: LD_INT 5
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: LD_INT 4
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 3
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 5
67174: PUSH
67175: LD_INT 3
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: LD_INT 5
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: LD_INT 2
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: LD_INT 3
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 1
67224: PUSH
67225: LD_INT 4
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 0
67234: PUSH
67235: LD_INT 4
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 3
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: LD_INT 2
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: LD_INT 4
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 2
67276: NEG
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 4
67298: NEG
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 3
67310: NEG
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: NEG
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 5
67343: NEG
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 5
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 5
67366: NEG
67367: PUSH
67368: LD_INT 2
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 3
67378: NEG
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 3
67389: NEG
67390: PUSH
67391: LD_INT 3
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 3
67401: NEG
67402: PUSH
67403: LD_INT 4
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 2
67413: NEG
67414: PUSH
67415: LD_INT 3
67417: NEG
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 2
67425: NEG
67426: PUSH
67427: LD_INT 2
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 3
67437: NEG
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 4
67449: NEG
67450: PUSH
67451: LD_INT 3
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 4
67461: NEG
67462: PUSH
67463: LD_INT 4
67465: NEG
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 2
67473: NEG
67474: PUSH
67475: LD_INT 4
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 4
67485: NEG
67486: PUSH
67487: LD_INT 2
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: LD_INT 4
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: LD_INT 5
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 1
67519: PUSH
67520: LD_INT 4
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: LD_INT 3
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: LD_INT 3
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 1
67552: NEG
67553: PUSH
67554: LD_INT 4
67556: NEG
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: LD_INT 5
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 2
67587: NEG
67588: PUSH
67589: LD_INT 5
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67644: LD_ADDR_VAR 0 31
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: LD_INT 4
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: LD_INT 5
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_INT 5
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 4
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 3
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 5
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: NEG
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: NEG
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 3
67755: NEG
67756: PUSH
67757: LD_INT 1
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 2
67778: NEG
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 4
67800: NEG
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 4
67811: NEG
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 4
67823: NEG
67824: PUSH
67825: LD_INT 2
67827: NEG
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: LD_INT 2
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 4
67846: NEG
67847: PUSH
67848: LD_INT 4
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 4
67858: NEG
67859: PUSH
67860: LD_INT 5
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 3
67870: NEG
67871: PUSH
67872: LD_INT 4
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 3
67882: NEG
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 4
67894: NEG
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 5
67906: NEG
67907: PUSH
67908: LD_INT 4
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 5
67918: NEG
67919: PUSH
67920: LD_INT 5
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 3
67930: NEG
67931: PUSH
67932: LD_INT 5
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 5
67942: NEG
67943: PUSH
67944: LD_INT 3
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: LD_INT 4
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 1
67976: PUSH
67977: LD_INT 3
67979: NEG
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 1
67987: PUSH
67988: LD_INT 2
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: LD_INT 2
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 1
68009: NEG
68010: PUSH
68011: LD_INT 3
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: LD_INT 4
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 2
68033: PUSH
68034: LD_INT 2
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 2
68044: NEG
68045: PUSH
68046: LD_INT 4
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 4
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 5
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 5
68087: PUSH
68088: LD_INT 1
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 4
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 3
68117: PUSH
68118: LD_INT 1
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 3
68128: PUSH
68129: LD_INT 2
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 5
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68194: LD_ADDR_VAR 0 32
68198: PUSH
68199: LD_INT 4
68201: NEG
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 4
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 3
68224: NEG
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 3
68235: NEG
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 4
68246: NEG
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 5
68257: NEG
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 5
68268: NEG
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 5
68280: NEG
68281: PUSH
68282: LD_INT 2
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: NEG
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 3
68303: NEG
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 3
68315: NEG
68316: PUSH
68317: LD_INT 4
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 2
68327: NEG
68328: PUSH
68329: LD_INT 3
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: NEG
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 3
68351: NEG
68352: PUSH
68353: LD_INT 2
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 4
68363: NEG
68364: PUSH
68365: LD_INT 3
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 4
68375: NEG
68376: PUSH
68377: LD_INT 4
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 2
68387: NEG
68388: PUSH
68389: LD_INT 4
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 4
68399: NEG
68400: PUSH
68401: LD_INT 2
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: LD_INT 4
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 0
68422: PUSH
68423: LD_INT 5
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 1
68433: PUSH
68434: LD_INT 4
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 1
68444: PUSH
68445: LD_INT 3
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 0
68455: PUSH
68456: LD_INT 3
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 1
68466: NEG
68467: PUSH
68468: LD_INT 4
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 1
68478: NEG
68479: PUSH
68480: LD_INT 5
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 2
68490: PUSH
68491: LD_INT 3
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 2
68501: NEG
68502: PUSH
68503: LD_INT 5
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 3
68513: PUSH
68514: LD_INT 0
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: LD_INT 1
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 4
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 4
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 3
68554: PUSH
68555: LD_INT 1
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 2
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 2
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 2
68585: PUSH
68586: LD_INT 2
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 4
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 4
68606: PUSH
68607: LD_INT 4
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: LD_INT 3
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 5
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 5
68636: PUSH
68637: LD_INT 5
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 4
68646: PUSH
68647: LD_INT 5
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 3
68656: PUSH
68657: LD_INT 4
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: LD_INT 3
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 5
68676: PUSH
68677: LD_INT 3
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 3
68686: PUSH
68687: LD_INT 5
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68741: LD_ADDR_VAR 0 33
68745: PUSH
68746: LD_INT 4
68748: NEG
68749: PUSH
68750: LD_INT 4
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 4
68760: NEG
68761: PUSH
68762: LD_INT 5
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 3
68772: NEG
68773: PUSH
68774: LD_INT 4
68776: NEG
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: NEG
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 4
68796: NEG
68797: PUSH
68798: LD_INT 3
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 5
68808: NEG
68809: PUSH
68810: LD_INT 4
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 5
68820: NEG
68821: PUSH
68822: LD_INT 5
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 3
68832: NEG
68833: PUSH
68834: LD_INT 5
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 5
68844: NEG
68845: PUSH
68846: LD_INT 3
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 4
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 1
68878: PUSH
68879: LD_INT 3
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 2
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 0
68900: PUSH
68901: LD_INT 2
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 1
68911: NEG
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: LD_INT 2
68938: NEG
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: LD_INT 4
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 4
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 4
68968: PUSH
68969: LD_INT 1
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 5
68979: PUSH
68980: LD_INT 0
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 5
68989: PUSH
68990: LD_INT 1
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 4
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 3
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 3
69019: PUSH
69020: LD_INT 1
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: LD_INT 2
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 5
69041: PUSH
69042: LD_INT 2
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 3
69051: PUSH
69052: LD_INT 3
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 3
69061: PUSH
69062: LD_INT 2
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 4
69071: PUSH
69072: LD_INT 3
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 4
69081: PUSH
69082: LD_INT 4
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 3
69091: PUSH
69092: LD_INT 4
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 2
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 2
69111: PUSH
69112: LD_INT 2
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 4
69121: PUSH
69122: LD_INT 2
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 2
69131: PUSH
69132: LD_INT 4
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 0
69141: PUSH
69142: LD_INT 4
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 3
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 1
69161: PUSH
69162: LD_INT 4
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: PUSH
69172: LD_INT 5
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: LD_INT 5
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 1
69191: NEG
69192: PUSH
69193: LD_INT 4
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 1
69202: NEG
69203: PUSH
69204: LD_INT 3
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 2
69213: PUSH
69214: LD_INT 5
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 2
69223: NEG
69224: PUSH
69225: LD_INT 3
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69279: LD_ADDR_VAR 0 34
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: LD_INT 4
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 0
69297: PUSH
69298: LD_INT 5
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: PUSH
69309: LD_INT 4
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: LD_INT 3
69322: NEG
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: LD_INT 3
69333: NEG
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: LD_INT 4
69345: NEG
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 1
69353: NEG
69354: PUSH
69355: LD_INT 5
69357: NEG
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: LD_INT 3
69368: NEG
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 2
69376: NEG
69377: PUSH
69378: LD_INT 5
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 3
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 3
69398: PUSH
69399: LD_INT 1
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 4
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 4
69419: PUSH
69420: LD_INT 1
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 3
69429: PUSH
69430: LD_INT 1
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 2
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 2
69460: PUSH
69461: LD_INT 2
69463: NEG
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 4
69471: PUSH
69472: LD_INT 2
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 4
69481: PUSH
69482: LD_INT 4
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 4
69491: PUSH
69492: LD_INT 3
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 5
69501: PUSH
69502: LD_INT 4
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 5
69511: PUSH
69512: LD_INT 5
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 4
69521: PUSH
69522: LD_INT 5
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: PUSH
69532: LD_INT 4
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 3
69541: PUSH
69542: LD_INT 3
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 5
69551: PUSH
69552: LD_INT 3
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 3
69561: PUSH
69562: LD_INT 5
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: LD_INT 3
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 0
69581: PUSH
69582: LD_INT 2
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: LD_INT 3
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: LD_INT 4
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: LD_INT 4
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: LD_INT 3
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: LD_INT 2
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: LD_INT 4
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 2
69653: NEG
69654: PUSH
69655: LD_INT 2
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 4
69664: NEG
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 4
69675: NEG
69676: PUSH
69677: LD_INT 1
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: NEG
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 3
69698: NEG
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 4
69709: NEG
69710: PUSH
69711: LD_INT 1
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 5
69720: NEG
69721: PUSH
69722: LD_INT 0
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 5
69731: NEG
69732: PUSH
69733: LD_INT 1
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 5
69743: NEG
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 3
69755: NEG
69756: PUSH
69757: LD_INT 2
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: ST_TO_ADDR
// end ; end ;
69811: GO 69814
69813: POP
// case btype of b_depot , b_warehouse :
69814: LD_VAR 0 1
69818: PUSH
69819: LD_INT 0
69821: DOUBLE
69822: EQUAL
69823: IFTRUE 69833
69825: LD_INT 1
69827: DOUBLE
69828: EQUAL
69829: IFTRUE 69833
69831: GO 70034
69833: POP
// case nation of nation_american :
69834: LD_VAR 0 5
69838: PUSH
69839: LD_INT 1
69841: DOUBLE
69842: EQUAL
69843: IFTRUE 69847
69845: GO 69903
69847: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69848: LD_ADDR_VAR 0 9
69852: PUSH
69853: LD_VAR 0 11
69857: PUSH
69858: LD_VAR 0 12
69862: PUSH
69863: LD_VAR 0 13
69867: PUSH
69868: LD_VAR 0 14
69872: PUSH
69873: LD_VAR 0 15
69877: PUSH
69878: LD_VAR 0 16
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: PUSH
69891: LD_VAR 0 4
69895: PUSH
69896: LD_INT 1
69898: PLUS
69899: ARRAY
69900: ST_TO_ADDR
69901: GO 70032
69903: LD_INT 2
69905: DOUBLE
69906: EQUAL
69907: IFTRUE 69911
69909: GO 69967
69911: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69912: LD_ADDR_VAR 0 9
69916: PUSH
69917: LD_VAR 0 17
69921: PUSH
69922: LD_VAR 0 18
69926: PUSH
69927: LD_VAR 0 19
69931: PUSH
69932: LD_VAR 0 20
69936: PUSH
69937: LD_VAR 0 21
69941: PUSH
69942: LD_VAR 0 22
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: PUSH
69955: LD_VAR 0 4
69959: PUSH
69960: LD_INT 1
69962: PLUS
69963: ARRAY
69964: ST_TO_ADDR
69965: GO 70032
69967: LD_INT 3
69969: DOUBLE
69970: EQUAL
69971: IFTRUE 69975
69973: GO 70031
69975: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69976: LD_ADDR_VAR 0 9
69980: PUSH
69981: LD_VAR 0 23
69985: PUSH
69986: LD_VAR 0 24
69990: PUSH
69991: LD_VAR 0 25
69995: PUSH
69996: LD_VAR 0 26
70000: PUSH
70001: LD_VAR 0 27
70005: PUSH
70006: LD_VAR 0 28
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: PUSH
70019: LD_VAR 0 4
70023: PUSH
70024: LD_INT 1
70026: PLUS
70027: ARRAY
70028: ST_TO_ADDR
70029: GO 70032
70031: POP
70032: GO 70587
70034: LD_INT 2
70036: DOUBLE
70037: EQUAL
70038: IFTRUE 70048
70040: LD_INT 3
70042: DOUBLE
70043: EQUAL
70044: IFTRUE 70048
70046: GO 70104
70048: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70049: LD_ADDR_VAR 0 9
70053: PUSH
70054: LD_VAR 0 29
70058: PUSH
70059: LD_VAR 0 30
70063: PUSH
70064: LD_VAR 0 31
70068: PUSH
70069: LD_VAR 0 32
70073: PUSH
70074: LD_VAR 0 33
70078: PUSH
70079: LD_VAR 0 34
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: PUSH
70092: LD_VAR 0 4
70096: PUSH
70097: LD_INT 1
70099: PLUS
70100: ARRAY
70101: ST_TO_ADDR
70102: GO 70587
70104: LD_INT 16
70106: DOUBLE
70107: EQUAL
70108: IFTRUE 70166
70110: LD_INT 17
70112: DOUBLE
70113: EQUAL
70114: IFTRUE 70166
70116: LD_INT 18
70118: DOUBLE
70119: EQUAL
70120: IFTRUE 70166
70122: LD_INT 19
70124: DOUBLE
70125: EQUAL
70126: IFTRUE 70166
70128: LD_INT 22
70130: DOUBLE
70131: EQUAL
70132: IFTRUE 70166
70134: LD_INT 20
70136: DOUBLE
70137: EQUAL
70138: IFTRUE 70166
70140: LD_INT 21
70142: DOUBLE
70143: EQUAL
70144: IFTRUE 70166
70146: LD_INT 23
70148: DOUBLE
70149: EQUAL
70150: IFTRUE 70166
70152: LD_INT 24
70154: DOUBLE
70155: EQUAL
70156: IFTRUE 70166
70158: LD_INT 25
70160: DOUBLE
70161: EQUAL
70162: IFTRUE 70166
70164: GO 70222
70166: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70167: LD_ADDR_VAR 0 9
70171: PUSH
70172: LD_VAR 0 35
70176: PUSH
70177: LD_VAR 0 36
70181: PUSH
70182: LD_VAR 0 37
70186: PUSH
70187: LD_VAR 0 38
70191: PUSH
70192: LD_VAR 0 39
70196: PUSH
70197: LD_VAR 0 40
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: PUSH
70210: LD_VAR 0 4
70214: PUSH
70215: LD_INT 1
70217: PLUS
70218: ARRAY
70219: ST_TO_ADDR
70220: GO 70587
70222: LD_INT 6
70224: DOUBLE
70225: EQUAL
70226: IFTRUE 70278
70228: LD_INT 7
70230: DOUBLE
70231: EQUAL
70232: IFTRUE 70278
70234: LD_INT 8
70236: DOUBLE
70237: EQUAL
70238: IFTRUE 70278
70240: LD_INT 13
70242: DOUBLE
70243: EQUAL
70244: IFTRUE 70278
70246: LD_INT 12
70248: DOUBLE
70249: EQUAL
70250: IFTRUE 70278
70252: LD_INT 15
70254: DOUBLE
70255: EQUAL
70256: IFTRUE 70278
70258: LD_INT 11
70260: DOUBLE
70261: EQUAL
70262: IFTRUE 70278
70264: LD_INT 14
70266: DOUBLE
70267: EQUAL
70268: IFTRUE 70278
70270: LD_INT 10
70272: DOUBLE
70273: EQUAL
70274: IFTRUE 70278
70276: GO 70334
70278: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70279: LD_ADDR_VAR 0 9
70283: PUSH
70284: LD_VAR 0 41
70288: PUSH
70289: LD_VAR 0 42
70293: PUSH
70294: LD_VAR 0 43
70298: PUSH
70299: LD_VAR 0 44
70303: PUSH
70304: LD_VAR 0 45
70308: PUSH
70309: LD_VAR 0 46
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: PUSH
70322: LD_VAR 0 4
70326: PUSH
70327: LD_INT 1
70329: PLUS
70330: ARRAY
70331: ST_TO_ADDR
70332: GO 70587
70334: LD_INT 36
70336: DOUBLE
70337: EQUAL
70338: IFTRUE 70342
70340: GO 70398
70342: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70343: LD_ADDR_VAR 0 9
70347: PUSH
70348: LD_VAR 0 47
70352: PUSH
70353: LD_VAR 0 48
70357: PUSH
70358: LD_VAR 0 49
70362: PUSH
70363: LD_VAR 0 50
70367: PUSH
70368: LD_VAR 0 51
70372: PUSH
70373: LD_VAR 0 52
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: PUSH
70386: LD_VAR 0 4
70390: PUSH
70391: LD_INT 1
70393: PLUS
70394: ARRAY
70395: ST_TO_ADDR
70396: GO 70587
70398: LD_INT 4
70400: DOUBLE
70401: EQUAL
70402: IFTRUE 70424
70404: LD_INT 5
70406: DOUBLE
70407: EQUAL
70408: IFTRUE 70424
70410: LD_INT 34
70412: DOUBLE
70413: EQUAL
70414: IFTRUE 70424
70416: LD_INT 37
70418: DOUBLE
70419: EQUAL
70420: IFTRUE 70424
70422: GO 70480
70424: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70425: LD_ADDR_VAR 0 9
70429: PUSH
70430: LD_VAR 0 53
70434: PUSH
70435: LD_VAR 0 54
70439: PUSH
70440: LD_VAR 0 55
70444: PUSH
70445: LD_VAR 0 56
70449: PUSH
70450: LD_VAR 0 57
70454: PUSH
70455: LD_VAR 0 58
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: PUSH
70468: LD_VAR 0 4
70472: PUSH
70473: LD_INT 1
70475: PLUS
70476: ARRAY
70477: ST_TO_ADDR
70478: GO 70587
70480: LD_INT 31
70482: DOUBLE
70483: EQUAL
70484: IFTRUE 70530
70486: LD_INT 32
70488: DOUBLE
70489: EQUAL
70490: IFTRUE 70530
70492: LD_INT 33
70494: DOUBLE
70495: EQUAL
70496: IFTRUE 70530
70498: LD_INT 27
70500: DOUBLE
70501: EQUAL
70502: IFTRUE 70530
70504: LD_INT 26
70506: DOUBLE
70507: EQUAL
70508: IFTRUE 70530
70510: LD_INT 28
70512: DOUBLE
70513: EQUAL
70514: IFTRUE 70530
70516: LD_INT 29
70518: DOUBLE
70519: EQUAL
70520: IFTRUE 70530
70522: LD_INT 30
70524: DOUBLE
70525: EQUAL
70526: IFTRUE 70530
70528: GO 70586
70530: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70531: LD_ADDR_VAR 0 9
70535: PUSH
70536: LD_VAR 0 59
70540: PUSH
70541: LD_VAR 0 60
70545: PUSH
70546: LD_VAR 0 61
70550: PUSH
70551: LD_VAR 0 62
70555: PUSH
70556: LD_VAR 0 63
70560: PUSH
70561: LD_VAR 0 64
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: PUSH
70574: LD_VAR 0 4
70578: PUSH
70579: LD_INT 1
70581: PLUS
70582: ARRAY
70583: ST_TO_ADDR
70584: GO 70587
70586: POP
// temp_list2 = [ ] ;
70587: LD_ADDR_VAR 0 10
70591: PUSH
70592: EMPTY
70593: ST_TO_ADDR
// for i in temp_list do
70594: LD_ADDR_VAR 0 8
70598: PUSH
70599: LD_VAR 0 9
70603: PUSH
70604: FOR_IN
70605: IFFALSE 70657
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70607: LD_ADDR_VAR 0 10
70611: PUSH
70612: LD_VAR 0 10
70616: PUSH
70617: LD_VAR 0 8
70621: PUSH
70622: LD_INT 1
70624: ARRAY
70625: PUSH
70626: LD_VAR 0 2
70630: PLUS
70631: PUSH
70632: LD_VAR 0 8
70636: PUSH
70637: LD_INT 2
70639: ARRAY
70640: PUSH
70641: LD_VAR 0 3
70645: PLUS
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: EMPTY
70652: LIST
70653: ADD
70654: ST_TO_ADDR
70655: GO 70604
70657: POP
70658: POP
// result = temp_list2 ;
70659: LD_ADDR_VAR 0 7
70663: PUSH
70664: LD_VAR 0 10
70668: ST_TO_ADDR
// end ;
70669: LD_VAR 0 7
70673: RET
// export function EnemyInRange ( unit , dist ) ; begin
70674: LD_INT 0
70676: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70677: LD_ADDR_VAR 0 3
70681: PUSH
70682: LD_VAR 0 1
70686: PPUSH
70687: CALL_OW 255
70691: PPUSH
70692: LD_VAR 0 1
70696: PPUSH
70697: CALL_OW 250
70701: PPUSH
70702: LD_VAR 0 1
70706: PPUSH
70707: CALL_OW 251
70711: PPUSH
70712: LD_VAR 0 2
70716: PPUSH
70717: CALL 44070 0 4
70721: PUSH
70722: LD_INT 4
70724: ARRAY
70725: ST_TO_ADDR
// end ;
70726: LD_VAR 0 3
70730: RET
// export function PlayerSeeMe ( unit ) ; begin
70731: LD_INT 0
70733: PPUSH
// result := See ( your_side , unit ) ;
70734: LD_ADDR_VAR 0 2
70738: PUSH
70739: LD_OWVAR 2
70743: PPUSH
70744: LD_VAR 0 1
70748: PPUSH
70749: CALL_OW 292
70753: ST_TO_ADDR
// end ;
70754: LD_VAR 0 2
70758: RET
// export function ReverseDir ( unit ) ; begin
70759: LD_INT 0
70761: PPUSH
// if not unit then
70762: LD_VAR 0 1
70766: NOT
70767: IFFALSE 70771
// exit ;
70769: GO 70794
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70771: LD_ADDR_VAR 0 2
70775: PUSH
70776: LD_VAR 0 1
70780: PPUSH
70781: CALL_OW 254
70785: PUSH
70786: LD_INT 3
70788: PLUS
70789: PUSH
70790: LD_INT 6
70792: MOD
70793: ST_TO_ADDR
// end ;
70794: LD_VAR 0 2
70798: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70799: LD_INT 0
70801: PPUSH
70802: PPUSH
70803: PPUSH
70804: PPUSH
70805: PPUSH
// if not hexes then
70806: LD_VAR 0 2
70810: NOT
70811: IFFALSE 70815
// exit ;
70813: GO 70963
// dist := 9999 ;
70815: LD_ADDR_VAR 0 5
70819: PUSH
70820: LD_INT 9999
70822: ST_TO_ADDR
// for i = 1 to hexes do
70823: LD_ADDR_VAR 0 4
70827: PUSH
70828: DOUBLE
70829: LD_INT 1
70831: DEC
70832: ST_TO_ADDR
70833: LD_VAR 0 2
70837: PUSH
70838: FOR_TO
70839: IFFALSE 70951
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70841: LD_VAR 0 1
70845: PPUSH
70846: LD_VAR 0 2
70850: PUSH
70851: LD_VAR 0 4
70855: ARRAY
70856: PUSH
70857: LD_INT 1
70859: ARRAY
70860: PPUSH
70861: LD_VAR 0 2
70865: PUSH
70866: LD_VAR 0 4
70870: ARRAY
70871: PUSH
70872: LD_INT 2
70874: ARRAY
70875: PPUSH
70876: CALL_OW 297
70880: PUSH
70881: LD_VAR 0 5
70885: LESS
70886: IFFALSE 70949
// begin hex := hexes [ i ] ;
70888: LD_ADDR_VAR 0 7
70892: PUSH
70893: LD_VAR 0 2
70897: PUSH
70898: LD_VAR 0 4
70902: ARRAY
70903: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70904: LD_ADDR_VAR 0 5
70908: PUSH
70909: LD_VAR 0 1
70913: PPUSH
70914: LD_VAR 0 2
70918: PUSH
70919: LD_VAR 0 4
70923: ARRAY
70924: PUSH
70925: LD_INT 1
70927: ARRAY
70928: PPUSH
70929: LD_VAR 0 2
70933: PUSH
70934: LD_VAR 0 4
70938: ARRAY
70939: PUSH
70940: LD_INT 2
70942: ARRAY
70943: PPUSH
70944: CALL_OW 297
70948: ST_TO_ADDR
// end ; end ;
70949: GO 70838
70951: POP
70952: POP
// result := hex ;
70953: LD_ADDR_VAR 0 3
70957: PUSH
70958: LD_VAR 0 7
70962: ST_TO_ADDR
// end ;
70963: LD_VAR 0 3
70967: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70968: LD_INT 0
70970: PPUSH
70971: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70972: LD_VAR 0 1
70976: NOT
70977: PUSH
70978: LD_VAR 0 1
70982: PUSH
70983: LD_INT 21
70985: PUSH
70986: LD_INT 2
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 23
70995: PUSH
70996: LD_INT 2
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PPUSH
71007: CALL_OW 69
71011: IN
71012: NOT
71013: OR
71014: IFFALSE 71018
// exit ;
71016: GO 71065
// for i = 1 to 3 do
71018: LD_ADDR_VAR 0 3
71022: PUSH
71023: DOUBLE
71024: LD_INT 1
71026: DEC
71027: ST_TO_ADDR
71028: LD_INT 3
71030: PUSH
71031: FOR_TO
71032: IFFALSE 71063
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71034: LD_VAR 0 1
71038: PPUSH
71039: CALL_OW 250
71043: PPUSH
71044: LD_VAR 0 1
71048: PPUSH
71049: CALL_OW 251
71053: PPUSH
71054: LD_INT 1
71056: PPUSH
71057: CALL_OW 453
71061: GO 71031
71063: POP
71064: POP
// end ;
71065: LD_VAR 0 2
71069: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71070: LD_INT 0
71072: PPUSH
71073: PPUSH
71074: PPUSH
71075: PPUSH
71076: PPUSH
71077: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71078: LD_VAR 0 1
71082: NOT
71083: PUSH
71084: LD_VAR 0 2
71088: NOT
71089: OR
71090: PUSH
71091: LD_VAR 0 1
71095: PPUSH
71096: CALL_OW 314
71100: OR
71101: IFFALSE 71105
// exit ;
71103: GO 71546
// x := GetX ( enemy_unit ) ;
71105: LD_ADDR_VAR 0 7
71109: PUSH
71110: LD_VAR 0 2
71114: PPUSH
71115: CALL_OW 250
71119: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71120: LD_ADDR_VAR 0 8
71124: PUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: CALL_OW 251
71134: ST_TO_ADDR
// if not x or not y then
71135: LD_VAR 0 7
71139: NOT
71140: PUSH
71141: LD_VAR 0 8
71145: NOT
71146: OR
71147: IFFALSE 71151
// exit ;
71149: GO 71546
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71151: LD_ADDR_VAR 0 6
71155: PUSH
71156: LD_VAR 0 7
71160: PPUSH
71161: LD_INT 0
71163: PPUSH
71164: LD_INT 4
71166: PPUSH
71167: CALL_OW 272
71171: PUSH
71172: LD_VAR 0 8
71176: PPUSH
71177: LD_INT 0
71179: PPUSH
71180: LD_INT 4
71182: PPUSH
71183: CALL_OW 273
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_VAR 0 7
71196: PPUSH
71197: LD_INT 1
71199: PPUSH
71200: LD_INT 4
71202: PPUSH
71203: CALL_OW 272
71207: PUSH
71208: LD_VAR 0 8
71212: PPUSH
71213: LD_INT 1
71215: PPUSH
71216: LD_INT 4
71218: PPUSH
71219: CALL_OW 273
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_VAR 0 7
71232: PPUSH
71233: LD_INT 2
71235: PPUSH
71236: LD_INT 4
71238: PPUSH
71239: CALL_OW 272
71243: PUSH
71244: LD_VAR 0 8
71248: PPUSH
71249: LD_INT 2
71251: PPUSH
71252: LD_INT 4
71254: PPUSH
71255: CALL_OW 273
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_VAR 0 7
71268: PPUSH
71269: LD_INT 3
71271: PPUSH
71272: LD_INT 4
71274: PPUSH
71275: CALL_OW 272
71279: PUSH
71280: LD_VAR 0 8
71284: PPUSH
71285: LD_INT 3
71287: PPUSH
71288: LD_INT 4
71290: PPUSH
71291: CALL_OW 273
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_VAR 0 7
71304: PPUSH
71305: LD_INT 4
71307: PPUSH
71308: LD_INT 4
71310: PPUSH
71311: CALL_OW 272
71315: PUSH
71316: LD_VAR 0 8
71320: PPUSH
71321: LD_INT 4
71323: PPUSH
71324: LD_INT 4
71326: PPUSH
71327: CALL_OW 273
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_VAR 0 7
71340: PPUSH
71341: LD_INT 5
71343: PPUSH
71344: LD_INT 4
71346: PPUSH
71347: CALL_OW 272
71351: PUSH
71352: LD_VAR 0 8
71356: PPUSH
71357: LD_INT 5
71359: PPUSH
71360: LD_INT 4
71362: PPUSH
71363: CALL_OW 273
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: ST_TO_ADDR
// for i = tmp downto 1 do
71380: LD_ADDR_VAR 0 4
71384: PUSH
71385: DOUBLE
71386: LD_VAR 0 6
71390: INC
71391: ST_TO_ADDR
71392: LD_INT 1
71394: PUSH
71395: FOR_DOWNTO
71396: IFFALSE 71497
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71398: LD_VAR 0 6
71402: PUSH
71403: LD_VAR 0 4
71407: ARRAY
71408: PUSH
71409: LD_INT 1
71411: ARRAY
71412: PPUSH
71413: LD_VAR 0 6
71417: PUSH
71418: LD_VAR 0 4
71422: ARRAY
71423: PUSH
71424: LD_INT 2
71426: ARRAY
71427: PPUSH
71428: CALL_OW 488
71432: NOT
71433: PUSH
71434: LD_VAR 0 6
71438: PUSH
71439: LD_VAR 0 4
71443: ARRAY
71444: PUSH
71445: LD_INT 1
71447: ARRAY
71448: PPUSH
71449: LD_VAR 0 6
71453: PUSH
71454: LD_VAR 0 4
71458: ARRAY
71459: PUSH
71460: LD_INT 2
71462: ARRAY
71463: PPUSH
71464: CALL_OW 428
71468: PUSH
71469: LD_INT 0
71471: NONEQUAL
71472: OR
71473: IFFALSE 71495
// tmp := Delete ( tmp , i ) ;
71475: LD_ADDR_VAR 0 6
71479: PUSH
71480: LD_VAR 0 6
71484: PPUSH
71485: LD_VAR 0 4
71489: PPUSH
71490: CALL_OW 3
71494: ST_TO_ADDR
71495: GO 71395
71497: POP
71498: POP
// j := GetClosestHex ( unit , tmp ) ;
71499: LD_ADDR_VAR 0 5
71503: PUSH
71504: LD_VAR 0 1
71508: PPUSH
71509: LD_VAR 0 6
71513: PPUSH
71514: CALL 70799 0 2
71518: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71519: LD_VAR 0 1
71523: PPUSH
71524: LD_VAR 0 5
71528: PUSH
71529: LD_INT 1
71531: ARRAY
71532: PPUSH
71533: LD_VAR 0 5
71537: PUSH
71538: LD_INT 2
71540: ARRAY
71541: PPUSH
71542: CALL_OW 111
// end ;
71546: LD_VAR 0 3
71550: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71551: LD_INT 0
71553: PPUSH
71554: PPUSH
71555: PPUSH
// uc_side = 0 ;
71556: LD_ADDR_OWVAR 20
71560: PUSH
71561: LD_INT 0
71563: ST_TO_ADDR
// uc_nation = 0 ;
71564: LD_ADDR_OWVAR 21
71568: PUSH
71569: LD_INT 0
71571: ST_TO_ADDR
// InitHc_All ( ) ;
71572: CALL_OW 584
// InitVc ;
71576: CALL_OW 20
// if mastodonts then
71580: LD_VAR 0 6
71584: IFFALSE 71651
// for i = 1 to mastodonts do
71586: LD_ADDR_VAR 0 11
71590: PUSH
71591: DOUBLE
71592: LD_INT 1
71594: DEC
71595: ST_TO_ADDR
71596: LD_VAR 0 6
71600: PUSH
71601: FOR_TO
71602: IFFALSE 71649
// begin vc_chassis := 31 ;
71604: LD_ADDR_OWVAR 37
71608: PUSH
71609: LD_INT 31
71611: ST_TO_ADDR
// vc_control := control_rider ;
71612: LD_ADDR_OWVAR 38
71616: PUSH
71617: LD_INT 4
71619: ST_TO_ADDR
// animal := CreateVehicle ;
71620: LD_ADDR_VAR 0 12
71624: PUSH
71625: CALL_OW 45
71629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71630: LD_VAR 0 12
71634: PPUSH
71635: LD_VAR 0 8
71639: PPUSH
71640: LD_INT 0
71642: PPUSH
71643: CALL 73786 0 3
// end ;
71647: GO 71601
71649: POP
71650: POP
// if horses then
71651: LD_VAR 0 5
71655: IFFALSE 71722
// for i = 1 to horses do
71657: LD_ADDR_VAR 0 11
71661: PUSH
71662: DOUBLE
71663: LD_INT 1
71665: DEC
71666: ST_TO_ADDR
71667: LD_VAR 0 5
71671: PUSH
71672: FOR_TO
71673: IFFALSE 71720
// begin hc_class := 21 ;
71675: LD_ADDR_OWVAR 28
71679: PUSH
71680: LD_INT 21
71682: ST_TO_ADDR
// hc_gallery :=  ;
71683: LD_ADDR_OWVAR 33
71687: PUSH
71688: LD_STRING 
71690: ST_TO_ADDR
// animal := CreateHuman ;
71691: LD_ADDR_VAR 0 12
71695: PUSH
71696: CALL_OW 44
71700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71701: LD_VAR 0 12
71705: PPUSH
71706: LD_VAR 0 8
71710: PPUSH
71711: LD_INT 0
71713: PPUSH
71714: CALL 73786 0 3
// end ;
71718: GO 71672
71720: POP
71721: POP
// if birds then
71722: LD_VAR 0 1
71726: IFFALSE 71793
// for i = 1 to birds do
71728: LD_ADDR_VAR 0 11
71732: PUSH
71733: DOUBLE
71734: LD_INT 1
71736: DEC
71737: ST_TO_ADDR
71738: LD_VAR 0 1
71742: PUSH
71743: FOR_TO
71744: IFFALSE 71791
// begin hc_class = 18 ;
71746: LD_ADDR_OWVAR 28
71750: PUSH
71751: LD_INT 18
71753: ST_TO_ADDR
// hc_gallery =  ;
71754: LD_ADDR_OWVAR 33
71758: PUSH
71759: LD_STRING 
71761: ST_TO_ADDR
// animal := CreateHuman ;
71762: LD_ADDR_VAR 0 12
71766: PUSH
71767: CALL_OW 44
71771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71772: LD_VAR 0 12
71776: PPUSH
71777: LD_VAR 0 8
71781: PPUSH
71782: LD_INT 0
71784: PPUSH
71785: CALL 73786 0 3
// end ;
71789: GO 71743
71791: POP
71792: POP
// if tigers then
71793: LD_VAR 0 2
71797: IFFALSE 71881
// for i = 1 to tigers do
71799: LD_ADDR_VAR 0 11
71803: PUSH
71804: DOUBLE
71805: LD_INT 1
71807: DEC
71808: ST_TO_ADDR
71809: LD_VAR 0 2
71813: PUSH
71814: FOR_TO
71815: IFFALSE 71879
// begin hc_class = class_tiger ;
71817: LD_ADDR_OWVAR 28
71821: PUSH
71822: LD_INT 14
71824: ST_TO_ADDR
// hc_gallery =  ;
71825: LD_ADDR_OWVAR 33
71829: PUSH
71830: LD_STRING 
71832: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71833: LD_ADDR_OWVAR 35
71837: PUSH
71838: LD_INT 7
71840: NEG
71841: PPUSH
71842: LD_INT 7
71844: PPUSH
71845: CALL_OW 12
71849: ST_TO_ADDR
// animal := CreateHuman ;
71850: LD_ADDR_VAR 0 12
71854: PUSH
71855: CALL_OW 44
71859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71860: LD_VAR 0 12
71864: PPUSH
71865: LD_VAR 0 8
71869: PPUSH
71870: LD_INT 0
71872: PPUSH
71873: CALL 73786 0 3
// end ;
71877: GO 71814
71879: POP
71880: POP
// if apemans then
71881: LD_VAR 0 3
71885: IFFALSE 72008
// for i = 1 to apemans do
71887: LD_ADDR_VAR 0 11
71891: PUSH
71892: DOUBLE
71893: LD_INT 1
71895: DEC
71896: ST_TO_ADDR
71897: LD_VAR 0 3
71901: PUSH
71902: FOR_TO
71903: IFFALSE 72006
// begin hc_class = class_apeman ;
71905: LD_ADDR_OWVAR 28
71909: PUSH
71910: LD_INT 12
71912: ST_TO_ADDR
// hc_gallery =  ;
71913: LD_ADDR_OWVAR 33
71917: PUSH
71918: LD_STRING 
71920: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71921: LD_ADDR_OWVAR 35
71925: PUSH
71926: LD_INT 2
71928: NEG
71929: PPUSH
71930: LD_INT 2
71932: PPUSH
71933: CALL_OW 12
71937: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71938: LD_ADDR_OWVAR 31
71942: PUSH
71943: LD_INT 1
71945: PPUSH
71946: LD_INT 3
71948: PPUSH
71949: CALL_OW 12
71953: PUSH
71954: LD_INT 1
71956: PPUSH
71957: LD_INT 3
71959: PPUSH
71960: CALL_OW 12
71964: PUSH
71965: LD_INT 0
71967: PUSH
71968: LD_INT 0
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: ST_TO_ADDR
// animal := CreateHuman ;
71977: LD_ADDR_VAR 0 12
71981: PUSH
71982: CALL_OW 44
71986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71987: LD_VAR 0 12
71991: PPUSH
71992: LD_VAR 0 8
71996: PPUSH
71997: LD_INT 0
71999: PPUSH
72000: CALL 73786 0 3
// end ;
72004: GO 71902
72006: POP
72007: POP
// if enchidnas then
72008: LD_VAR 0 4
72012: IFFALSE 72079
// for i = 1 to enchidnas do
72014: LD_ADDR_VAR 0 11
72018: PUSH
72019: DOUBLE
72020: LD_INT 1
72022: DEC
72023: ST_TO_ADDR
72024: LD_VAR 0 4
72028: PUSH
72029: FOR_TO
72030: IFFALSE 72077
// begin hc_class = 13 ;
72032: LD_ADDR_OWVAR 28
72036: PUSH
72037: LD_INT 13
72039: ST_TO_ADDR
// hc_gallery =  ;
72040: LD_ADDR_OWVAR 33
72044: PUSH
72045: LD_STRING 
72047: ST_TO_ADDR
// animal := CreateHuman ;
72048: LD_ADDR_VAR 0 12
72052: PUSH
72053: CALL_OW 44
72057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72058: LD_VAR 0 12
72062: PPUSH
72063: LD_VAR 0 8
72067: PPUSH
72068: LD_INT 0
72070: PPUSH
72071: CALL 73786 0 3
// end ;
72075: GO 72029
72077: POP
72078: POP
// if fishes then
72079: LD_VAR 0 7
72083: IFFALSE 72150
// for i = 1 to fishes do
72085: LD_ADDR_VAR 0 11
72089: PUSH
72090: DOUBLE
72091: LD_INT 1
72093: DEC
72094: ST_TO_ADDR
72095: LD_VAR 0 7
72099: PUSH
72100: FOR_TO
72101: IFFALSE 72148
// begin hc_class = 20 ;
72103: LD_ADDR_OWVAR 28
72107: PUSH
72108: LD_INT 20
72110: ST_TO_ADDR
// hc_gallery =  ;
72111: LD_ADDR_OWVAR 33
72115: PUSH
72116: LD_STRING 
72118: ST_TO_ADDR
// animal := CreateHuman ;
72119: LD_ADDR_VAR 0 12
72123: PUSH
72124: CALL_OW 44
72128: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72129: LD_VAR 0 12
72133: PPUSH
72134: LD_VAR 0 9
72138: PPUSH
72139: LD_INT 0
72141: PPUSH
72142: CALL 73786 0 3
// end ;
72146: GO 72100
72148: POP
72149: POP
// end ;
72150: LD_VAR 0 10
72154: RET
// export function WantHeal ( sci , unit ) ; begin
72155: LD_INT 0
72157: PPUSH
// if GetTaskList ( sci ) > 0 then
72158: LD_VAR 0 1
72162: PPUSH
72163: CALL_OW 437
72167: PUSH
72168: LD_INT 0
72170: GREATER
72171: IFFALSE 72241
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72173: LD_VAR 0 1
72177: PPUSH
72178: CALL_OW 437
72182: PUSH
72183: LD_INT 1
72185: ARRAY
72186: PUSH
72187: LD_INT 1
72189: ARRAY
72190: PUSH
72191: LD_STRING l
72193: EQUAL
72194: PUSH
72195: LD_VAR 0 1
72199: PPUSH
72200: CALL_OW 437
72204: PUSH
72205: LD_INT 1
72207: ARRAY
72208: PUSH
72209: LD_INT 4
72211: ARRAY
72212: PUSH
72213: LD_VAR 0 2
72217: EQUAL
72218: AND
72219: IFFALSE 72231
// result := true else
72221: LD_ADDR_VAR 0 3
72225: PUSH
72226: LD_INT 1
72228: ST_TO_ADDR
72229: GO 72239
// result := false ;
72231: LD_ADDR_VAR 0 3
72235: PUSH
72236: LD_INT 0
72238: ST_TO_ADDR
// end else
72239: GO 72249
// result := false ;
72241: LD_ADDR_VAR 0 3
72245: PUSH
72246: LD_INT 0
72248: ST_TO_ADDR
// end ;
72249: LD_VAR 0 3
72253: RET
// export function HealTarget ( sci ) ; begin
72254: LD_INT 0
72256: PPUSH
// if not sci then
72257: LD_VAR 0 1
72261: NOT
72262: IFFALSE 72266
// exit ;
72264: GO 72331
// result := 0 ;
72266: LD_ADDR_VAR 0 2
72270: PUSH
72271: LD_INT 0
72273: ST_TO_ADDR
// if GetTaskList ( sci ) then
72274: LD_VAR 0 1
72278: PPUSH
72279: CALL_OW 437
72283: IFFALSE 72331
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72285: LD_VAR 0 1
72289: PPUSH
72290: CALL_OW 437
72294: PUSH
72295: LD_INT 1
72297: ARRAY
72298: PUSH
72299: LD_INT 1
72301: ARRAY
72302: PUSH
72303: LD_STRING l
72305: EQUAL
72306: IFFALSE 72331
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72308: LD_ADDR_VAR 0 2
72312: PUSH
72313: LD_VAR 0 1
72317: PPUSH
72318: CALL_OW 437
72322: PUSH
72323: LD_INT 1
72325: ARRAY
72326: PUSH
72327: LD_INT 4
72329: ARRAY
72330: ST_TO_ADDR
// end ;
72331: LD_VAR 0 2
72335: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72336: LD_INT 0
72338: PPUSH
72339: PPUSH
72340: PPUSH
72341: PPUSH
// if not base_units then
72342: LD_VAR 0 1
72346: NOT
72347: IFFALSE 72351
// exit ;
72349: GO 72438
// result := false ;
72351: LD_ADDR_VAR 0 2
72355: PUSH
72356: LD_INT 0
72358: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72359: LD_ADDR_VAR 0 5
72363: PUSH
72364: LD_VAR 0 1
72368: PPUSH
72369: LD_INT 21
72371: PUSH
72372: LD_INT 3
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PPUSH
72379: CALL_OW 72
72383: ST_TO_ADDR
// if not tmp then
72384: LD_VAR 0 5
72388: NOT
72389: IFFALSE 72393
// exit ;
72391: GO 72438
// for i in tmp do
72393: LD_ADDR_VAR 0 3
72397: PUSH
72398: LD_VAR 0 5
72402: PUSH
72403: FOR_IN
72404: IFFALSE 72436
// begin result := EnemyInRange ( i , 22 ) ;
72406: LD_ADDR_VAR 0 2
72410: PUSH
72411: LD_VAR 0 3
72415: PPUSH
72416: LD_INT 22
72418: PPUSH
72419: CALL 70674 0 2
72423: ST_TO_ADDR
// if result then
72424: LD_VAR 0 2
72428: IFFALSE 72434
// exit ;
72430: POP
72431: POP
72432: GO 72438
// end ;
72434: GO 72403
72436: POP
72437: POP
// end ;
72438: LD_VAR 0 2
72442: RET
// export function FilterByTag ( units , tag ) ; begin
72443: LD_INT 0
72445: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72446: LD_ADDR_VAR 0 3
72450: PUSH
72451: LD_VAR 0 1
72455: PPUSH
72456: LD_INT 120
72458: PUSH
72459: LD_VAR 0 2
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PPUSH
72468: CALL_OW 72
72472: ST_TO_ADDR
// end ;
72473: LD_VAR 0 3
72477: RET
// export function IsDriver ( un ) ; begin
72478: LD_INT 0
72480: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72481: LD_ADDR_VAR 0 2
72485: PUSH
72486: LD_VAR 0 1
72490: PUSH
72491: LD_INT 55
72493: PUSH
72494: EMPTY
72495: LIST
72496: PPUSH
72497: CALL_OW 69
72501: IN
72502: ST_TO_ADDR
// end ;
72503: LD_VAR 0 2
72507: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72508: LD_INT 0
72510: PPUSH
72511: PPUSH
// list := [ ] ;
72512: LD_ADDR_VAR 0 5
72516: PUSH
72517: EMPTY
72518: ST_TO_ADDR
// case d of 0 :
72519: LD_VAR 0 3
72523: PUSH
72524: LD_INT 0
72526: DOUBLE
72527: EQUAL
72528: IFTRUE 72532
72530: GO 72665
72532: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72533: LD_ADDR_VAR 0 5
72537: PUSH
72538: LD_VAR 0 1
72542: PUSH
72543: LD_INT 4
72545: MINUS
72546: PUSH
72547: LD_VAR 0 2
72551: PUSH
72552: LD_INT 4
72554: MINUS
72555: PUSH
72556: LD_INT 2
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: LIST
72563: PUSH
72564: LD_VAR 0 1
72568: PUSH
72569: LD_INT 3
72571: MINUS
72572: PUSH
72573: LD_VAR 0 2
72577: PUSH
72578: LD_INT 1
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: LIST
72585: PUSH
72586: LD_VAR 0 1
72590: PUSH
72591: LD_INT 4
72593: PLUS
72594: PUSH
72595: LD_VAR 0 2
72599: PUSH
72600: LD_INT 4
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: LIST
72607: PUSH
72608: LD_VAR 0 1
72612: PUSH
72613: LD_INT 3
72615: PLUS
72616: PUSH
72617: LD_VAR 0 2
72621: PUSH
72622: LD_INT 3
72624: PLUS
72625: PUSH
72626: LD_INT 5
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: LIST
72633: PUSH
72634: LD_VAR 0 1
72638: PUSH
72639: LD_VAR 0 2
72643: PUSH
72644: LD_INT 4
72646: PLUS
72647: PUSH
72648: LD_INT 0
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: ST_TO_ADDR
// end ; 1 :
72663: GO 73363
72665: LD_INT 1
72667: DOUBLE
72668: EQUAL
72669: IFTRUE 72673
72671: GO 72806
72673: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72674: LD_ADDR_VAR 0 5
72678: PUSH
72679: LD_VAR 0 1
72683: PUSH
72684: LD_VAR 0 2
72688: PUSH
72689: LD_INT 4
72691: MINUS
72692: PUSH
72693: LD_INT 3
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: LIST
72700: PUSH
72701: LD_VAR 0 1
72705: PUSH
72706: LD_INT 3
72708: MINUS
72709: PUSH
72710: LD_VAR 0 2
72714: PUSH
72715: LD_INT 3
72717: MINUS
72718: PUSH
72719: LD_INT 2
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: LIST
72726: PUSH
72727: LD_VAR 0 1
72731: PUSH
72732: LD_INT 4
72734: MINUS
72735: PUSH
72736: LD_VAR 0 2
72740: PUSH
72741: LD_INT 1
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: LIST
72748: PUSH
72749: LD_VAR 0 1
72753: PUSH
72754: LD_VAR 0 2
72758: PUSH
72759: LD_INT 3
72761: PLUS
72762: PUSH
72763: LD_INT 0
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: LIST
72770: PUSH
72771: LD_VAR 0 1
72775: PUSH
72776: LD_INT 4
72778: PLUS
72779: PUSH
72780: LD_VAR 0 2
72784: PUSH
72785: LD_INT 4
72787: PLUS
72788: PUSH
72789: LD_INT 5
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: LIST
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: ST_TO_ADDR
// end ; 2 :
72804: GO 73363
72806: LD_INT 2
72808: DOUBLE
72809: EQUAL
72810: IFTRUE 72814
72812: GO 72943
72814: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72815: LD_ADDR_VAR 0 5
72819: PUSH
72820: LD_VAR 0 1
72824: PUSH
72825: LD_VAR 0 2
72829: PUSH
72830: LD_INT 3
72832: MINUS
72833: PUSH
72834: LD_INT 3
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: LIST
72841: PUSH
72842: LD_VAR 0 1
72846: PUSH
72847: LD_INT 4
72849: PLUS
72850: PUSH
72851: LD_VAR 0 2
72855: PUSH
72856: LD_INT 4
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: LIST
72863: PUSH
72864: LD_VAR 0 1
72868: PUSH
72869: LD_VAR 0 2
72873: PUSH
72874: LD_INT 4
72876: PLUS
72877: PUSH
72878: LD_INT 0
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: LIST
72885: PUSH
72886: LD_VAR 0 1
72890: PUSH
72891: LD_INT 3
72893: MINUS
72894: PUSH
72895: LD_VAR 0 2
72899: PUSH
72900: LD_INT 1
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: LIST
72907: PUSH
72908: LD_VAR 0 1
72912: PUSH
72913: LD_INT 4
72915: MINUS
72916: PUSH
72917: LD_VAR 0 2
72921: PUSH
72922: LD_INT 4
72924: MINUS
72925: PUSH
72926: LD_INT 2
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: LIST
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: ST_TO_ADDR
// end ; 3 :
72941: GO 73363
72943: LD_INT 3
72945: DOUBLE
72946: EQUAL
72947: IFTRUE 72951
72949: GO 73084
72951: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72952: LD_ADDR_VAR 0 5
72956: PUSH
72957: LD_VAR 0 1
72961: PUSH
72962: LD_INT 3
72964: PLUS
72965: PUSH
72966: LD_VAR 0 2
72970: PUSH
72971: LD_INT 4
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: LIST
72978: PUSH
72979: LD_VAR 0 1
72983: PUSH
72984: LD_INT 4
72986: PLUS
72987: PUSH
72988: LD_VAR 0 2
72992: PUSH
72993: LD_INT 4
72995: PLUS
72996: PUSH
72997: LD_INT 5
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: LIST
73004: PUSH
73005: LD_VAR 0 1
73009: PUSH
73010: LD_INT 4
73012: MINUS
73013: PUSH
73014: LD_VAR 0 2
73018: PUSH
73019: LD_INT 1
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: LIST
73026: PUSH
73027: LD_VAR 0 1
73031: PUSH
73032: LD_VAR 0 2
73036: PUSH
73037: LD_INT 4
73039: MINUS
73040: PUSH
73041: LD_INT 3
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: LIST
73048: PUSH
73049: LD_VAR 0 1
73053: PUSH
73054: LD_INT 3
73056: MINUS
73057: PUSH
73058: LD_VAR 0 2
73062: PUSH
73063: LD_INT 3
73065: MINUS
73066: PUSH
73067: LD_INT 2
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: LIST
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: ST_TO_ADDR
// end ; 4 :
73082: GO 73363
73084: LD_INT 4
73086: DOUBLE
73087: EQUAL
73088: IFTRUE 73092
73090: GO 73225
73092: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73093: LD_ADDR_VAR 0 5
73097: PUSH
73098: LD_VAR 0 1
73102: PUSH
73103: LD_VAR 0 2
73107: PUSH
73108: LD_INT 4
73110: PLUS
73111: PUSH
73112: LD_INT 0
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: LIST
73119: PUSH
73120: LD_VAR 0 1
73124: PUSH
73125: LD_INT 3
73127: PLUS
73128: PUSH
73129: LD_VAR 0 2
73133: PUSH
73134: LD_INT 3
73136: PLUS
73137: PUSH
73138: LD_INT 5
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: LIST
73145: PUSH
73146: LD_VAR 0 1
73150: PUSH
73151: LD_INT 4
73153: PLUS
73154: PUSH
73155: LD_VAR 0 2
73159: PUSH
73160: LD_INT 4
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: LIST
73167: PUSH
73168: LD_VAR 0 1
73172: PUSH
73173: LD_VAR 0 2
73177: PUSH
73178: LD_INT 3
73180: MINUS
73181: PUSH
73182: LD_INT 3
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: LIST
73189: PUSH
73190: LD_VAR 0 1
73194: PUSH
73195: LD_INT 4
73197: MINUS
73198: PUSH
73199: LD_VAR 0 2
73203: PUSH
73204: LD_INT 4
73206: MINUS
73207: PUSH
73208: LD_INT 2
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: LIST
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: ST_TO_ADDR
// end ; 5 :
73223: GO 73363
73225: LD_INT 5
73227: DOUBLE
73228: EQUAL
73229: IFTRUE 73233
73231: GO 73362
73233: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73234: LD_ADDR_VAR 0 5
73238: PUSH
73239: LD_VAR 0 1
73243: PUSH
73244: LD_INT 4
73246: MINUS
73247: PUSH
73248: LD_VAR 0 2
73252: PUSH
73253: LD_INT 1
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: LIST
73260: PUSH
73261: LD_VAR 0 1
73265: PUSH
73266: LD_VAR 0 2
73270: PUSH
73271: LD_INT 4
73273: MINUS
73274: PUSH
73275: LD_INT 3
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: LIST
73282: PUSH
73283: LD_VAR 0 1
73287: PUSH
73288: LD_INT 4
73290: PLUS
73291: PUSH
73292: LD_VAR 0 2
73296: PUSH
73297: LD_INT 4
73299: PLUS
73300: PUSH
73301: LD_INT 5
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: LIST
73308: PUSH
73309: LD_VAR 0 1
73313: PUSH
73314: LD_INT 3
73316: PLUS
73317: PUSH
73318: LD_VAR 0 2
73322: PUSH
73323: LD_INT 4
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: LIST
73330: PUSH
73331: LD_VAR 0 1
73335: PUSH
73336: LD_VAR 0 2
73340: PUSH
73341: LD_INT 3
73343: PLUS
73344: PUSH
73345: LD_INT 0
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: LIST
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: ST_TO_ADDR
// end ; end ;
73360: GO 73363
73362: POP
// result := list ;
73363: LD_ADDR_VAR 0 4
73367: PUSH
73368: LD_VAR 0 5
73372: ST_TO_ADDR
// end ;
73373: LD_VAR 0 4
73377: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73378: LD_INT 0
73380: PPUSH
73381: PPUSH
73382: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73383: LD_VAR 0 1
73387: NOT
73388: PUSH
73389: LD_VAR 0 2
73393: PUSH
73394: LD_INT 1
73396: PUSH
73397: LD_INT 2
73399: PUSH
73400: LD_INT 3
73402: PUSH
73403: LD_INT 4
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: IN
73412: NOT
73413: OR
73414: IFFALSE 73418
// exit ;
73416: GO 73510
// tmp := [ ] ;
73418: LD_ADDR_VAR 0 5
73422: PUSH
73423: EMPTY
73424: ST_TO_ADDR
// for i in units do
73425: LD_ADDR_VAR 0 4
73429: PUSH
73430: LD_VAR 0 1
73434: PUSH
73435: FOR_IN
73436: IFFALSE 73479
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73438: LD_ADDR_VAR 0 5
73442: PUSH
73443: LD_VAR 0 5
73447: PPUSH
73448: LD_VAR 0 5
73452: PUSH
73453: LD_INT 1
73455: PLUS
73456: PPUSH
73457: LD_VAR 0 4
73461: PPUSH
73462: LD_VAR 0 2
73466: PPUSH
73467: CALL_OW 259
73471: PPUSH
73472: CALL_OW 2
73476: ST_TO_ADDR
73477: GO 73435
73479: POP
73480: POP
// if not tmp then
73481: LD_VAR 0 5
73485: NOT
73486: IFFALSE 73490
// exit ;
73488: GO 73510
// result := SortListByListDesc ( units , tmp ) ;
73490: LD_ADDR_VAR 0 3
73494: PUSH
73495: LD_VAR 0 1
73499: PPUSH
73500: LD_VAR 0 5
73504: PPUSH
73505: CALL_OW 77
73509: ST_TO_ADDR
// end ;
73510: LD_VAR 0 3
73514: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73515: LD_INT 0
73517: PPUSH
73518: PPUSH
73519: PPUSH
// result := false ;
73520: LD_ADDR_VAR 0 3
73524: PUSH
73525: LD_INT 0
73527: ST_TO_ADDR
// x := GetX ( building ) ;
73528: LD_ADDR_VAR 0 4
73532: PUSH
73533: LD_VAR 0 2
73537: PPUSH
73538: CALL_OW 250
73542: ST_TO_ADDR
// y := GetY ( building ) ;
73543: LD_ADDR_VAR 0 5
73547: PUSH
73548: LD_VAR 0 2
73552: PPUSH
73553: CALL_OW 251
73557: ST_TO_ADDR
// if not building or not x or not y then
73558: LD_VAR 0 2
73562: NOT
73563: PUSH
73564: LD_VAR 0 4
73568: NOT
73569: OR
73570: PUSH
73571: LD_VAR 0 5
73575: NOT
73576: OR
73577: IFFALSE 73581
// exit ;
73579: GO 73673
// if GetTaskList ( unit ) then
73581: LD_VAR 0 1
73585: PPUSH
73586: CALL_OW 437
73590: IFFALSE 73673
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73592: LD_STRING e
73594: PUSH
73595: LD_VAR 0 1
73599: PPUSH
73600: CALL_OW 437
73604: PUSH
73605: LD_INT 1
73607: ARRAY
73608: PUSH
73609: LD_INT 1
73611: ARRAY
73612: EQUAL
73613: PUSH
73614: LD_VAR 0 4
73618: PUSH
73619: LD_VAR 0 1
73623: PPUSH
73624: CALL_OW 437
73628: PUSH
73629: LD_INT 1
73631: ARRAY
73632: PUSH
73633: LD_INT 2
73635: ARRAY
73636: EQUAL
73637: AND
73638: PUSH
73639: LD_VAR 0 5
73643: PUSH
73644: LD_VAR 0 1
73648: PPUSH
73649: CALL_OW 437
73653: PUSH
73654: LD_INT 1
73656: ARRAY
73657: PUSH
73658: LD_INT 3
73660: ARRAY
73661: EQUAL
73662: AND
73663: IFFALSE 73673
// result := true end ;
73665: LD_ADDR_VAR 0 3
73669: PUSH
73670: LD_INT 1
73672: ST_TO_ADDR
// end ;
73673: LD_VAR 0 3
73677: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73678: LD_INT 0
73680: PPUSH
// result := false ;
73681: LD_ADDR_VAR 0 4
73685: PUSH
73686: LD_INT 0
73688: ST_TO_ADDR
// if GetTaskList ( unit ) then
73689: LD_VAR 0 1
73693: PPUSH
73694: CALL_OW 437
73698: IFFALSE 73781
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73700: LD_STRING M
73702: PUSH
73703: LD_VAR 0 1
73707: PPUSH
73708: CALL_OW 437
73712: PUSH
73713: LD_INT 1
73715: ARRAY
73716: PUSH
73717: LD_INT 1
73719: ARRAY
73720: EQUAL
73721: PUSH
73722: LD_VAR 0 2
73726: PUSH
73727: LD_VAR 0 1
73731: PPUSH
73732: CALL_OW 437
73736: PUSH
73737: LD_INT 1
73739: ARRAY
73740: PUSH
73741: LD_INT 2
73743: ARRAY
73744: EQUAL
73745: AND
73746: PUSH
73747: LD_VAR 0 3
73751: PUSH
73752: LD_VAR 0 1
73756: PPUSH
73757: CALL_OW 437
73761: PUSH
73762: LD_INT 1
73764: ARRAY
73765: PUSH
73766: LD_INT 3
73768: ARRAY
73769: EQUAL
73770: AND
73771: IFFALSE 73781
// result := true ;
73773: LD_ADDR_VAR 0 4
73777: PUSH
73778: LD_INT 1
73780: ST_TO_ADDR
// end ; end ;
73781: LD_VAR 0 4
73785: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73786: LD_INT 0
73788: PPUSH
73789: PPUSH
73790: PPUSH
73791: PPUSH
// if not unit or not area then
73792: LD_VAR 0 1
73796: NOT
73797: PUSH
73798: LD_VAR 0 2
73802: NOT
73803: OR
73804: IFFALSE 73808
// exit ;
73806: GO 73972
// tmp := AreaToList ( area , i ) ;
73808: LD_ADDR_VAR 0 6
73812: PUSH
73813: LD_VAR 0 2
73817: PPUSH
73818: LD_VAR 0 5
73822: PPUSH
73823: CALL_OW 517
73827: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73828: LD_ADDR_VAR 0 5
73832: PUSH
73833: DOUBLE
73834: LD_INT 1
73836: DEC
73837: ST_TO_ADDR
73838: LD_VAR 0 6
73842: PUSH
73843: LD_INT 1
73845: ARRAY
73846: PUSH
73847: FOR_TO
73848: IFFALSE 73970
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73850: LD_ADDR_VAR 0 7
73854: PUSH
73855: LD_VAR 0 6
73859: PUSH
73860: LD_INT 1
73862: ARRAY
73863: PUSH
73864: LD_VAR 0 5
73868: ARRAY
73869: PUSH
73870: LD_VAR 0 6
73874: PUSH
73875: LD_INT 2
73877: ARRAY
73878: PUSH
73879: LD_VAR 0 5
73883: ARRAY
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73889: LD_VAR 0 7
73893: PUSH
73894: LD_INT 1
73896: ARRAY
73897: PPUSH
73898: LD_VAR 0 7
73902: PUSH
73903: LD_INT 2
73905: ARRAY
73906: PPUSH
73907: CALL_OW 428
73911: PUSH
73912: LD_INT 0
73914: EQUAL
73915: IFFALSE 73968
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73917: LD_VAR 0 1
73921: PPUSH
73922: LD_VAR 0 7
73926: PUSH
73927: LD_INT 1
73929: ARRAY
73930: PPUSH
73931: LD_VAR 0 7
73935: PUSH
73936: LD_INT 2
73938: ARRAY
73939: PPUSH
73940: LD_VAR 0 3
73944: PPUSH
73945: CALL_OW 48
// result := IsPlaced ( unit ) ;
73949: LD_ADDR_VAR 0 4
73953: PUSH
73954: LD_VAR 0 1
73958: PPUSH
73959: CALL_OW 305
73963: ST_TO_ADDR
// exit ;
73964: POP
73965: POP
73966: GO 73972
// end ; end ;
73968: GO 73847
73970: POP
73971: POP
// end ;
73972: LD_VAR 0 4
73976: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73977: LD_INT 0
73979: PPUSH
73980: PPUSH
73981: PPUSH
// if not side or side > 8 then
73982: LD_VAR 0 1
73986: NOT
73987: PUSH
73988: LD_VAR 0 1
73992: PUSH
73993: LD_INT 8
73995: GREATER
73996: OR
73997: IFFALSE 74001
// exit ;
73999: GO 74188
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74001: LD_ADDR_VAR 0 4
74005: PUSH
74006: LD_INT 22
74008: PUSH
74009: LD_VAR 0 1
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: LD_INT 21
74020: PUSH
74021: LD_INT 3
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PPUSH
74032: CALL_OW 69
74036: ST_TO_ADDR
// if not tmp then
74037: LD_VAR 0 4
74041: NOT
74042: IFFALSE 74046
// exit ;
74044: GO 74188
// enable_addtolog := true ;
74046: LD_ADDR_OWVAR 81
74050: PUSH
74051: LD_INT 1
74053: ST_TO_ADDR
// AddToLog ( [ ) ;
74054: LD_STRING [
74056: PPUSH
74057: CALL_OW 561
// for i in tmp do
74061: LD_ADDR_VAR 0 3
74065: PUSH
74066: LD_VAR 0 4
74070: PUSH
74071: FOR_IN
74072: IFFALSE 74179
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74074: LD_STRING [
74076: PUSH
74077: LD_VAR 0 3
74081: PPUSH
74082: CALL_OW 266
74086: STR
74087: PUSH
74088: LD_STRING , 
74090: STR
74091: PUSH
74092: LD_VAR 0 3
74096: PPUSH
74097: CALL_OW 250
74101: STR
74102: PUSH
74103: LD_STRING , 
74105: STR
74106: PUSH
74107: LD_VAR 0 3
74111: PPUSH
74112: CALL_OW 251
74116: STR
74117: PUSH
74118: LD_STRING , 
74120: STR
74121: PUSH
74122: LD_VAR 0 3
74126: PPUSH
74127: CALL_OW 254
74131: STR
74132: PUSH
74133: LD_STRING , 
74135: STR
74136: PUSH
74137: LD_VAR 0 3
74141: PPUSH
74142: LD_INT 1
74144: PPUSH
74145: CALL_OW 268
74149: STR
74150: PUSH
74151: LD_STRING , 
74153: STR
74154: PUSH
74155: LD_VAR 0 3
74159: PPUSH
74160: LD_INT 2
74162: PPUSH
74163: CALL_OW 268
74167: STR
74168: PUSH
74169: LD_STRING ],
74171: STR
74172: PPUSH
74173: CALL_OW 561
// end ;
74177: GO 74071
74179: POP
74180: POP
// AddToLog ( ]; ) ;
74181: LD_STRING ];
74183: PPUSH
74184: CALL_OW 561
// end ;
74188: LD_VAR 0 2
74192: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74193: LD_INT 0
74195: PPUSH
74196: PPUSH
74197: PPUSH
74198: PPUSH
74199: PPUSH
// if not area or not rate or not max then
74200: LD_VAR 0 1
74204: NOT
74205: PUSH
74206: LD_VAR 0 2
74210: NOT
74211: OR
74212: PUSH
74213: LD_VAR 0 4
74217: NOT
74218: OR
74219: IFFALSE 74223
// exit ;
74221: GO 74412
// while 1 do
74223: LD_INT 1
74225: IFFALSE 74412
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74227: LD_ADDR_VAR 0 9
74231: PUSH
74232: LD_VAR 0 1
74236: PPUSH
74237: LD_INT 1
74239: PPUSH
74240: CALL_OW 287
74244: PUSH
74245: LD_INT 10
74247: MUL
74248: ST_TO_ADDR
// r := rate / 10 ;
74249: LD_ADDR_VAR 0 7
74253: PUSH
74254: LD_VAR 0 2
74258: PUSH
74259: LD_INT 10
74261: DIVREAL
74262: ST_TO_ADDR
// time := 1 1$00 ;
74263: LD_ADDR_VAR 0 8
74267: PUSH
74268: LD_INT 2100
74270: ST_TO_ADDR
// if amount < min then
74271: LD_VAR 0 9
74275: PUSH
74276: LD_VAR 0 3
74280: LESS
74281: IFFALSE 74299
// r := r * 2 else
74283: LD_ADDR_VAR 0 7
74287: PUSH
74288: LD_VAR 0 7
74292: PUSH
74293: LD_INT 2
74295: MUL
74296: ST_TO_ADDR
74297: GO 74325
// if amount > max then
74299: LD_VAR 0 9
74303: PUSH
74304: LD_VAR 0 4
74308: GREATER
74309: IFFALSE 74325
// r := r / 2 ;
74311: LD_ADDR_VAR 0 7
74315: PUSH
74316: LD_VAR 0 7
74320: PUSH
74321: LD_INT 2
74323: DIVREAL
74324: ST_TO_ADDR
// time := time / r ;
74325: LD_ADDR_VAR 0 8
74329: PUSH
74330: LD_VAR 0 8
74334: PUSH
74335: LD_VAR 0 7
74339: DIVREAL
74340: ST_TO_ADDR
// if time < 0 then
74341: LD_VAR 0 8
74345: PUSH
74346: LD_INT 0
74348: LESS
74349: IFFALSE 74366
// time := time * - 1 ;
74351: LD_ADDR_VAR 0 8
74355: PUSH
74356: LD_VAR 0 8
74360: PUSH
74361: LD_INT 1
74363: NEG
74364: MUL
74365: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74366: LD_VAR 0 8
74370: PUSH
74371: LD_INT 35
74373: PPUSH
74374: LD_INT 875
74376: PPUSH
74377: CALL_OW 12
74381: PLUS
74382: PPUSH
74383: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74387: LD_INT 1
74389: PPUSH
74390: LD_INT 5
74392: PPUSH
74393: CALL_OW 12
74397: PPUSH
74398: LD_VAR 0 1
74402: PPUSH
74403: LD_INT 1
74405: PPUSH
74406: CALL_OW 55
// end ;
74410: GO 74223
// end ;
74412: LD_VAR 0 5
74416: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74417: LD_INT 0
74419: PPUSH
74420: PPUSH
74421: PPUSH
74422: PPUSH
74423: PPUSH
74424: PPUSH
74425: PPUSH
74426: PPUSH
// if not turrets or not factories then
74427: LD_VAR 0 1
74431: NOT
74432: PUSH
74433: LD_VAR 0 2
74437: NOT
74438: OR
74439: IFFALSE 74443
// exit ;
74441: GO 74750
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74443: LD_ADDR_VAR 0 10
74447: PUSH
74448: LD_INT 5
74450: PUSH
74451: LD_INT 6
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 2
74460: PUSH
74461: LD_INT 4
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 3
74470: PUSH
74471: LD_INT 5
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 24
74485: PUSH
74486: LD_INT 25
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: PUSH
74493: LD_INT 23
74495: PUSH
74496: LD_INT 27
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 42
74509: PUSH
74510: LD_INT 43
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 44
74519: PUSH
74520: LD_INT 46
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 45
74529: PUSH
74530: LD_INT 47
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: LIST
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: LIST
74546: ST_TO_ADDR
// result := [ ] ;
74547: LD_ADDR_VAR 0 3
74551: PUSH
74552: EMPTY
74553: ST_TO_ADDR
// for i in turrets do
74554: LD_ADDR_VAR 0 4
74558: PUSH
74559: LD_VAR 0 1
74563: PUSH
74564: FOR_IN
74565: IFFALSE 74748
// begin nat := GetNation ( i ) ;
74567: LD_ADDR_VAR 0 7
74571: PUSH
74572: LD_VAR 0 4
74576: PPUSH
74577: CALL_OW 248
74581: ST_TO_ADDR
// weapon := 0 ;
74582: LD_ADDR_VAR 0 8
74586: PUSH
74587: LD_INT 0
74589: ST_TO_ADDR
// if not nat then
74590: LD_VAR 0 7
74594: NOT
74595: IFFALSE 74599
// continue ;
74597: GO 74564
// for j in list [ nat ] do
74599: LD_ADDR_VAR 0 5
74603: PUSH
74604: LD_VAR 0 10
74608: PUSH
74609: LD_VAR 0 7
74613: ARRAY
74614: PUSH
74615: FOR_IN
74616: IFFALSE 74657
// if GetBWeapon ( i ) = j [ 1 ] then
74618: LD_VAR 0 4
74622: PPUSH
74623: CALL_OW 269
74627: PUSH
74628: LD_VAR 0 5
74632: PUSH
74633: LD_INT 1
74635: ARRAY
74636: EQUAL
74637: IFFALSE 74655
// begin weapon := j [ 2 ] ;
74639: LD_ADDR_VAR 0 8
74643: PUSH
74644: LD_VAR 0 5
74648: PUSH
74649: LD_INT 2
74651: ARRAY
74652: ST_TO_ADDR
// break ;
74653: GO 74657
// end ;
74655: GO 74615
74657: POP
74658: POP
// if not weapon then
74659: LD_VAR 0 8
74663: NOT
74664: IFFALSE 74668
// continue ;
74666: GO 74564
// for k in factories do
74668: LD_ADDR_VAR 0 6
74672: PUSH
74673: LD_VAR 0 2
74677: PUSH
74678: FOR_IN
74679: IFFALSE 74744
// begin weapons := AvailableWeaponList ( k ) ;
74681: LD_ADDR_VAR 0 9
74685: PUSH
74686: LD_VAR 0 6
74690: PPUSH
74691: CALL_OW 478
74695: ST_TO_ADDR
// if not weapons then
74696: LD_VAR 0 9
74700: NOT
74701: IFFALSE 74705
// continue ;
74703: GO 74678
// if weapon in weapons then
74705: LD_VAR 0 8
74709: PUSH
74710: LD_VAR 0 9
74714: IN
74715: IFFALSE 74742
// begin result := [ i , weapon ] ;
74717: LD_ADDR_VAR 0 3
74721: PUSH
74722: LD_VAR 0 4
74726: PUSH
74727: LD_VAR 0 8
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: ST_TO_ADDR
// exit ;
74736: POP
74737: POP
74738: POP
74739: POP
74740: GO 74750
// end ; end ;
74742: GO 74678
74744: POP
74745: POP
// end ;
74746: GO 74564
74748: POP
74749: POP
// end ;
74750: LD_VAR 0 3
74754: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74755: LD_INT 0
74757: PPUSH
// if not side or side > 8 then
74758: LD_VAR 0 3
74762: NOT
74763: PUSH
74764: LD_VAR 0 3
74768: PUSH
74769: LD_INT 8
74771: GREATER
74772: OR
74773: IFFALSE 74777
// exit ;
74775: GO 74836
// if not range then
74777: LD_VAR 0 4
74781: NOT
74782: IFFALSE 74793
// range := - 12 ;
74784: LD_ADDR_VAR 0 4
74788: PUSH
74789: LD_INT 12
74791: NEG
74792: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74793: LD_VAR 0 1
74797: PPUSH
74798: LD_VAR 0 2
74802: PPUSH
74803: LD_VAR 0 3
74807: PPUSH
74808: LD_VAR 0 4
74812: PPUSH
74813: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74817: LD_VAR 0 1
74821: PPUSH
74822: LD_VAR 0 2
74826: PPUSH
74827: LD_VAR 0 3
74831: PPUSH
74832: CALL_OW 331
// end ;
74836: LD_VAR 0 5
74840: RET
// export function Video ( mode ) ; begin
74841: LD_INT 0
74843: PPUSH
// ingame_video = mode ;
74844: LD_ADDR_OWVAR 52
74848: PUSH
74849: LD_VAR 0 1
74853: ST_TO_ADDR
// interface_hidden = mode ;
74854: LD_ADDR_OWVAR 54
74858: PUSH
74859: LD_VAR 0 1
74863: ST_TO_ADDR
// end ;
74864: LD_VAR 0 2
74868: RET
// export function Join ( array , element ) ; begin
74869: LD_INT 0
74871: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74872: LD_ADDR_VAR 0 3
74876: PUSH
74877: LD_VAR 0 1
74881: PPUSH
74882: LD_VAR 0 1
74886: PUSH
74887: LD_INT 1
74889: PLUS
74890: PPUSH
74891: LD_VAR 0 2
74895: PPUSH
74896: CALL_OW 1
74900: ST_TO_ADDR
// end ;
74901: LD_VAR 0 3
74905: RET
// export function JoinUnion ( array , element ) ; begin
74906: LD_INT 0
74908: PPUSH
// result := array union element ;
74909: LD_ADDR_VAR 0 3
74913: PUSH
74914: LD_VAR 0 1
74918: PUSH
74919: LD_VAR 0 2
74923: UNION
74924: ST_TO_ADDR
// end ;
74925: LD_VAR 0 3
74929: RET
// export function GetBehemoths ( side ) ; begin
74930: LD_INT 0
74932: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74933: LD_ADDR_VAR 0 2
74937: PUSH
74938: LD_INT 22
74940: PUSH
74941: LD_VAR 0 1
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 31
74952: PUSH
74953: LD_INT 25
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PPUSH
74964: CALL_OW 69
74968: ST_TO_ADDR
// end ;
74969: LD_VAR 0 2
74973: RET
// export function Shuffle ( array ) ; var i , index ; begin
74974: LD_INT 0
74976: PPUSH
74977: PPUSH
74978: PPUSH
// result := [ ] ;
74979: LD_ADDR_VAR 0 2
74983: PUSH
74984: EMPTY
74985: ST_TO_ADDR
// if not array then
74986: LD_VAR 0 1
74990: NOT
74991: IFFALSE 74995
// exit ;
74993: GO 75094
// Randomize ;
74995: CALL_OW 10
// for i = array downto 1 do
74999: LD_ADDR_VAR 0 3
75003: PUSH
75004: DOUBLE
75005: LD_VAR 0 1
75009: INC
75010: ST_TO_ADDR
75011: LD_INT 1
75013: PUSH
75014: FOR_DOWNTO
75015: IFFALSE 75092
// begin index := rand ( 1 , array ) ;
75017: LD_ADDR_VAR 0 4
75021: PUSH
75022: LD_INT 1
75024: PPUSH
75025: LD_VAR 0 1
75029: PPUSH
75030: CALL_OW 12
75034: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75035: LD_ADDR_VAR 0 2
75039: PUSH
75040: LD_VAR 0 2
75044: PPUSH
75045: LD_VAR 0 2
75049: PUSH
75050: LD_INT 1
75052: PLUS
75053: PPUSH
75054: LD_VAR 0 1
75058: PUSH
75059: LD_VAR 0 4
75063: ARRAY
75064: PPUSH
75065: CALL_OW 2
75069: ST_TO_ADDR
// array := Delete ( array , index ) ;
75070: LD_ADDR_VAR 0 1
75074: PUSH
75075: LD_VAR 0 1
75079: PPUSH
75080: LD_VAR 0 4
75084: PPUSH
75085: CALL_OW 3
75089: ST_TO_ADDR
// end ;
75090: GO 75014
75092: POP
75093: POP
// end ;
75094: LD_VAR 0 2
75098: RET
// export function GetBaseMaterials ( base ) ; begin
75099: LD_INT 0
75101: PPUSH
// result := [ 0 , 0 , 0 ] ;
75102: LD_ADDR_VAR 0 2
75106: PUSH
75107: LD_INT 0
75109: PUSH
75110: LD_INT 0
75112: PUSH
75113: LD_INT 0
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: LIST
75120: ST_TO_ADDR
// if not base then
75121: LD_VAR 0 1
75125: NOT
75126: IFFALSE 75130
// exit ;
75128: GO 75179
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75130: LD_ADDR_VAR 0 2
75134: PUSH
75135: LD_VAR 0 1
75139: PPUSH
75140: LD_INT 1
75142: PPUSH
75143: CALL_OW 275
75147: PUSH
75148: LD_VAR 0 1
75152: PPUSH
75153: LD_INT 2
75155: PPUSH
75156: CALL_OW 275
75160: PUSH
75161: LD_VAR 0 1
75165: PPUSH
75166: LD_INT 3
75168: PPUSH
75169: CALL_OW 275
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: LIST
75178: ST_TO_ADDR
// end ;
75179: LD_VAR 0 2
75183: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75184: LD_INT 0
75186: PPUSH
75187: PPUSH
// result := array ;
75188: LD_ADDR_VAR 0 3
75192: PUSH
75193: LD_VAR 0 1
75197: ST_TO_ADDR
// if size > 0 then
75198: LD_VAR 0 2
75202: PUSH
75203: LD_INT 0
75205: GREATER
75206: IFFALSE 75252
// for i := array downto size do
75208: LD_ADDR_VAR 0 4
75212: PUSH
75213: DOUBLE
75214: LD_VAR 0 1
75218: INC
75219: ST_TO_ADDR
75220: LD_VAR 0 2
75224: PUSH
75225: FOR_DOWNTO
75226: IFFALSE 75250
// result := Delete ( result , result ) ;
75228: LD_ADDR_VAR 0 3
75232: PUSH
75233: LD_VAR 0 3
75237: PPUSH
75238: LD_VAR 0 3
75242: PPUSH
75243: CALL_OW 3
75247: ST_TO_ADDR
75248: GO 75225
75250: POP
75251: POP
// end ;
75252: LD_VAR 0 3
75256: RET
// export function ComExit ( unit ) ; var tmp ; begin
75257: LD_INT 0
75259: PPUSH
75260: PPUSH
// if not IsInUnit ( unit ) then
75261: LD_VAR 0 1
75265: PPUSH
75266: CALL_OW 310
75270: NOT
75271: IFFALSE 75275
// exit ;
75273: GO 75335
// tmp := IsInUnit ( unit ) ;
75275: LD_ADDR_VAR 0 3
75279: PUSH
75280: LD_VAR 0 1
75284: PPUSH
75285: CALL_OW 310
75289: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75290: LD_VAR 0 3
75294: PPUSH
75295: CALL_OW 247
75299: PUSH
75300: LD_INT 2
75302: EQUAL
75303: IFFALSE 75316
// ComExitVehicle ( unit ) else
75305: LD_VAR 0 1
75309: PPUSH
75310: CALL_OW 121
75314: GO 75325
// ComExitBuilding ( unit ) ;
75316: LD_VAR 0 1
75320: PPUSH
75321: CALL_OW 122
// result := tmp ;
75325: LD_ADDR_VAR 0 2
75329: PUSH
75330: LD_VAR 0 3
75334: ST_TO_ADDR
// end ;
75335: LD_VAR 0 2
75339: RET
// export function ComExitAll ( units ) ; var i ; begin
75340: LD_INT 0
75342: PPUSH
75343: PPUSH
// if not units then
75344: LD_VAR 0 1
75348: NOT
75349: IFFALSE 75353
// exit ;
75351: GO 75379
// for i in units do
75353: LD_ADDR_VAR 0 3
75357: PUSH
75358: LD_VAR 0 1
75362: PUSH
75363: FOR_IN
75364: IFFALSE 75377
// ComExit ( i ) ;
75366: LD_VAR 0 3
75370: PPUSH
75371: CALL 75257 0 1
75375: GO 75363
75377: POP
75378: POP
// end ;
75379: LD_VAR 0 2
75383: RET
// export function ResetHc ; begin
75384: LD_INT 0
75386: PPUSH
// InitHc ;
75387: CALL_OW 19
// hc_importance := 0 ;
75391: LD_ADDR_OWVAR 32
75395: PUSH
75396: LD_INT 0
75398: ST_TO_ADDR
// end ;
75399: LD_VAR 0 1
75403: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75404: LD_INT 0
75406: PPUSH
75407: PPUSH
75408: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75409: LD_ADDR_VAR 0 6
75413: PUSH
75414: LD_VAR 0 1
75418: PUSH
75419: LD_VAR 0 3
75423: PLUS
75424: PUSH
75425: LD_INT 2
75427: DIV
75428: ST_TO_ADDR
// if _x < 0 then
75429: LD_VAR 0 6
75433: PUSH
75434: LD_INT 0
75436: LESS
75437: IFFALSE 75454
// _x := _x * - 1 ;
75439: LD_ADDR_VAR 0 6
75443: PUSH
75444: LD_VAR 0 6
75448: PUSH
75449: LD_INT 1
75451: NEG
75452: MUL
75453: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75454: LD_ADDR_VAR 0 7
75458: PUSH
75459: LD_VAR 0 2
75463: PUSH
75464: LD_VAR 0 4
75468: PLUS
75469: PUSH
75470: LD_INT 2
75472: DIV
75473: ST_TO_ADDR
// if _y < 0 then
75474: LD_VAR 0 7
75478: PUSH
75479: LD_INT 0
75481: LESS
75482: IFFALSE 75499
// _y := _y * - 1 ;
75484: LD_ADDR_VAR 0 7
75488: PUSH
75489: LD_VAR 0 7
75493: PUSH
75494: LD_INT 1
75496: NEG
75497: MUL
75498: ST_TO_ADDR
// result := [ _x , _y ] ;
75499: LD_ADDR_VAR 0 5
75503: PUSH
75504: LD_VAR 0 6
75508: PUSH
75509: LD_VAR 0 7
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: ST_TO_ADDR
// end ;
75518: LD_VAR 0 5
75522: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75523: LD_INT 0
75525: PPUSH
75526: PPUSH
75527: PPUSH
75528: PPUSH
// task := GetTaskList ( unit ) ;
75529: LD_ADDR_VAR 0 7
75533: PUSH
75534: LD_VAR 0 1
75538: PPUSH
75539: CALL_OW 437
75543: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75544: LD_VAR 0 7
75548: NOT
75549: PUSH
75550: LD_VAR 0 1
75554: PPUSH
75555: LD_VAR 0 2
75559: PPUSH
75560: CALL_OW 308
75564: NOT
75565: AND
75566: IFFALSE 75570
// exit ;
75568: GO 75688
// if IsInArea ( unit , area ) then
75570: LD_VAR 0 1
75574: PPUSH
75575: LD_VAR 0 2
75579: PPUSH
75580: CALL_OW 308
75584: IFFALSE 75602
// begin ComMoveToArea ( unit , goAway ) ;
75586: LD_VAR 0 1
75590: PPUSH
75591: LD_VAR 0 3
75595: PPUSH
75596: CALL_OW 113
// exit ;
75600: GO 75688
// end ; if task [ 1 ] [ 1 ] <> M then
75602: LD_VAR 0 7
75606: PUSH
75607: LD_INT 1
75609: ARRAY
75610: PUSH
75611: LD_INT 1
75613: ARRAY
75614: PUSH
75615: LD_STRING M
75617: NONEQUAL
75618: IFFALSE 75622
// exit ;
75620: GO 75688
// x := task [ 1 ] [ 2 ] ;
75622: LD_ADDR_VAR 0 5
75626: PUSH
75627: LD_VAR 0 7
75631: PUSH
75632: LD_INT 1
75634: ARRAY
75635: PUSH
75636: LD_INT 2
75638: ARRAY
75639: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75640: LD_ADDR_VAR 0 6
75644: PUSH
75645: LD_VAR 0 7
75649: PUSH
75650: LD_INT 1
75652: ARRAY
75653: PUSH
75654: LD_INT 3
75656: ARRAY
75657: ST_TO_ADDR
// if InArea ( x , y , area ) then
75658: LD_VAR 0 5
75662: PPUSH
75663: LD_VAR 0 6
75667: PPUSH
75668: LD_VAR 0 2
75672: PPUSH
75673: CALL_OW 309
75677: IFFALSE 75688
// ComStop ( unit ) ;
75679: LD_VAR 0 1
75683: PPUSH
75684: CALL_OW 141
// end ;
75688: LD_VAR 0 4
75692: RET
// export function Abs ( value ) ; begin
75693: LD_INT 0
75695: PPUSH
// result := value ;
75696: LD_ADDR_VAR 0 2
75700: PUSH
75701: LD_VAR 0 1
75705: ST_TO_ADDR
// if value < 0 then
75706: LD_VAR 0 1
75710: PUSH
75711: LD_INT 0
75713: LESS
75714: IFFALSE 75731
// result := value * - 1 ;
75716: LD_ADDR_VAR 0 2
75720: PUSH
75721: LD_VAR 0 1
75725: PUSH
75726: LD_INT 1
75728: NEG
75729: MUL
75730: ST_TO_ADDR
// end ;
75731: LD_VAR 0 2
75735: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75736: LD_INT 0
75738: PPUSH
75739: PPUSH
75740: PPUSH
75741: PPUSH
75742: PPUSH
75743: PPUSH
75744: PPUSH
75745: PPUSH
// if not unit or not building then
75746: LD_VAR 0 1
75750: NOT
75751: PUSH
75752: LD_VAR 0 2
75756: NOT
75757: OR
75758: IFFALSE 75762
// exit ;
75760: GO 75988
// x := GetX ( building ) ;
75762: LD_ADDR_VAR 0 4
75766: PUSH
75767: LD_VAR 0 2
75771: PPUSH
75772: CALL_OW 250
75776: ST_TO_ADDR
// y := GetY ( building ) ;
75777: LD_ADDR_VAR 0 6
75781: PUSH
75782: LD_VAR 0 2
75786: PPUSH
75787: CALL_OW 251
75791: ST_TO_ADDR
// d := GetDir ( building ) ;
75792: LD_ADDR_VAR 0 8
75796: PUSH
75797: LD_VAR 0 2
75801: PPUSH
75802: CALL_OW 254
75806: ST_TO_ADDR
// r := 4 ;
75807: LD_ADDR_VAR 0 9
75811: PUSH
75812: LD_INT 4
75814: ST_TO_ADDR
// for i := 1 to 5 do
75815: LD_ADDR_VAR 0 10
75819: PUSH
75820: DOUBLE
75821: LD_INT 1
75823: DEC
75824: ST_TO_ADDR
75825: LD_INT 5
75827: PUSH
75828: FOR_TO
75829: IFFALSE 75986
// begin _x := ShiftX ( x , d , r + i ) ;
75831: LD_ADDR_VAR 0 5
75835: PUSH
75836: LD_VAR 0 4
75840: PPUSH
75841: LD_VAR 0 8
75845: PPUSH
75846: LD_VAR 0 9
75850: PUSH
75851: LD_VAR 0 10
75855: PLUS
75856: PPUSH
75857: CALL_OW 272
75861: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75862: LD_ADDR_VAR 0 7
75866: PUSH
75867: LD_VAR 0 6
75871: PPUSH
75872: LD_VAR 0 8
75876: PPUSH
75877: LD_VAR 0 9
75881: PUSH
75882: LD_VAR 0 10
75886: PLUS
75887: PPUSH
75888: CALL_OW 273
75892: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75893: LD_VAR 0 5
75897: PPUSH
75898: LD_VAR 0 7
75902: PPUSH
75903: CALL_OW 488
75907: PUSH
75908: LD_VAR 0 5
75912: PPUSH
75913: LD_VAR 0 7
75917: PPUSH
75918: CALL_OW 428
75922: PPUSH
75923: CALL_OW 247
75927: PUSH
75928: LD_INT 3
75930: PUSH
75931: LD_INT 2
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: IN
75938: NOT
75939: AND
75940: IFFALSE 75984
// begin ComMoveXY ( unit , _x , _y ) ;
75942: LD_VAR 0 1
75946: PPUSH
75947: LD_VAR 0 5
75951: PPUSH
75952: LD_VAR 0 7
75956: PPUSH
75957: CALL_OW 111
// result := [ _x , _y ] ;
75961: LD_ADDR_VAR 0 3
75965: PUSH
75966: LD_VAR 0 5
75970: PUSH
75971: LD_VAR 0 7
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: ST_TO_ADDR
// exit ;
75980: POP
75981: POP
75982: GO 75988
// end ; end ;
75984: GO 75828
75986: POP
75987: POP
// end ;
75988: LD_VAR 0 3
75992: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75993: LD_INT 0
75995: PPUSH
75996: PPUSH
75997: PPUSH
// result := 0 ;
75998: LD_ADDR_VAR 0 3
76002: PUSH
76003: LD_INT 0
76005: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76006: LD_VAR 0 1
76010: PUSH
76011: LD_INT 0
76013: LESS
76014: PUSH
76015: LD_VAR 0 1
76019: PUSH
76020: LD_INT 8
76022: GREATER
76023: OR
76024: PUSH
76025: LD_VAR 0 2
76029: PUSH
76030: LD_INT 0
76032: LESS
76033: OR
76034: PUSH
76035: LD_VAR 0 2
76039: PUSH
76040: LD_INT 8
76042: GREATER
76043: OR
76044: IFFALSE 76048
// exit ;
76046: GO 76123
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76048: LD_ADDR_VAR 0 4
76052: PUSH
76053: LD_INT 22
76055: PUSH
76056: LD_VAR 0 2
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PPUSH
76065: CALL_OW 69
76069: PUSH
76070: FOR_IN
76071: IFFALSE 76121
// begin un := UnitShoot ( i ) ;
76073: LD_ADDR_VAR 0 5
76077: PUSH
76078: LD_VAR 0 4
76082: PPUSH
76083: CALL_OW 504
76087: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76088: LD_VAR 0 5
76092: PPUSH
76093: CALL_OW 255
76097: PUSH
76098: LD_VAR 0 1
76102: EQUAL
76103: IFFALSE 76119
// begin result := un ;
76105: LD_ADDR_VAR 0 3
76109: PUSH
76110: LD_VAR 0 5
76114: ST_TO_ADDR
// exit ;
76115: POP
76116: POP
76117: GO 76123
// end ; end ;
76119: GO 76070
76121: POP
76122: POP
// end ;
76123: LD_VAR 0 3
76127: RET
// export function GetCargoBay ( units ) ; begin
76128: LD_INT 0
76130: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76131: LD_ADDR_VAR 0 2
76135: PUSH
76136: LD_VAR 0 1
76140: PPUSH
76141: LD_INT 2
76143: PUSH
76144: LD_INT 34
76146: PUSH
76147: LD_INT 12
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: LD_INT 34
76156: PUSH
76157: LD_INT 51
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: PUSH
76164: LD_INT 34
76166: PUSH
76167: LD_INT 32
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: LD_INT 34
76176: PUSH
76177: LD_EXP 46
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: PPUSH
76193: CALL_OW 72
76197: ST_TO_ADDR
// end ;
76198: LD_VAR 0 2
76202: RET
// export function Negate ( value ) ; begin
76203: LD_INT 0
76205: PPUSH
// result := not value ;
76206: LD_ADDR_VAR 0 2
76210: PUSH
76211: LD_VAR 0 1
76215: NOT
76216: ST_TO_ADDR
// end ;
76217: LD_VAR 0 2
76221: RET
// export function Inc ( value ) ; begin
76222: LD_INT 0
76224: PPUSH
// result := value + 1 ;
76225: LD_ADDR_VAR 0 2
76229: PUSH
76230: LD_VAR 0 1
76234: PUSH
76235: LD_INT 1
76237: PLUS
76238: ST_TO_ADDR
// end ;
76239: LD_VAR 0 2
76243: RET
// export function Dec ( value ) ; begin
76244: LD_INT 0
76246: PPUSH
// result := value - 1 ;
76247: LD_ADDR_VAR 0 2
76251: PUSH
76252: LD_VAR 0 1
76256: PUSH
76257: LD_INT 1
76259: MINUS
76260: ST_TO_ADDR
// end ;
76261: LD_VAR 0 2
76265: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76266: LD_INT 0
76268: PPUSH
76269: PPUSH
76270: PPUSH
76271: PPUSH
76272: PPUSH
76273: PPUSH
76274: PPUSH
76275: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76276: LD_VAR 0 1
76280: PPUSH
76281: LD_VAR 0 2
76285: PPUSH
76286: CALL_OW 488
76290: NOT
76291: PUSH
76292: LD_VAR 0 3
76296: PPUSH
76297: LD_VAR 0 4
76301: PPUSH
76302: CALL_OW 488
76306: NOT
76307: OR
76308: IFFALSE 76321
// begin result := - 1 ;
76310: LD_ADDR_VAR 0 5
76314: PUSH
76315: LD_INT 1
76317: NEG
76318: ST_TO_ADDR
// exit ;
76319: GO 76556
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76321: LD_ADDR_VAR 0 12
76325: PUSH
76326: LD_VAR 0 1
76330: PPUSH
76331: LD_VAR 0 2
76335: PPUSH
76336: LD_VAR 0 3
76340: PPUSH
76341: LD_VAR 0 4
76345: PPUSH
76346: CALL 75404 0 4
76350: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76351: LD_ADDR_VAR 0 11
76355: PUSH
76356: LD_VAR 0 1
76360: PPUSH
76361: LD_VAR 0 2
76365: PPUSH
76366: LD_VAR 0 12
76370: PUSH
76371: LD_INT 1
76373: ARRAY
76374: PPUSH
76375: LD_VAR 0 12
76379: PUSH
76380: LD_INT 2
76382: ARRAY
76383: PPUSH
76384: CALL_OW 298
76388: ST_TO_ADDR
// distance := 9999 ;
76389: LD_ADDR_VAR 0 10
76393: PUSH
76394: LD_INT 9999
76396: ST_TO_ADDR
// for i := 0 to 5 do
76397: LD_ADDR_VAR 0 6
76401: PUSH
76402: DOUBLE
76403: LD_INT 0
76405: DEC
76406: ST_TO_ADDR
76407: LD_INT 5
76409: PUSH
76410: FOR_TO
76411: IFFALSE 76554
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76413: LD_ADDR_VAR 0 7
76417: PUSH
76418: LD_VAR 0 1
76422: PPUSH
76423: LD_VAR 0 6
76427: PPUSH
76428: LD_VAR 0 11
76432: PPUSH
76433: CALL_OW 272
76437: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76438: LD_ADDR_VAR 0 8
76442: PUSH
76443: LD_VAR 0 2
76447: PPUSH
76448: LD_VAR 0 6
76452: PPUSH
76453: LD_VAR 0 11
76457: PPUSH
76458: CALL_OW 273
76462: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76463: LD_VAR 0 7
76467: PPUSH
76468: LD_VAR 0 8
76472: PPUSH
76473: CALL_OW 488
76477: NOT
76478: IFFALSE 76482
// continue ;
76480: GO 76410
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76482: LD_ADDR_VAR 0 9
76486: PUSH
76487: LD_VAR 0 12
76491: PUSH
76492: LD_INT 1
76494: ARRAY
76495: PPUSH
76496: LD_VAR 0 12
76500: PUSH
76501: LD_INT 2
76503: ARRAY
76504: PPUSH
76505: LD_VAR 0 7
76509: PPUSH
76510: LD_VAR 0 8
76514: PPUSH
76515: CALL_OW 298
76519: ST_TO_ADDR
// if tmp < distance then
76520: LD_VAR 0 9
76524: PUSH
76525: LD_VAR 0 10
76529: LESS
76530: IFFALSE 76552
// begin result := i ;
76532: LD_ADDR_VAR 0 5
76536: PUSH
76537: LD_VAR 0 6
76541: ST_TO_ADDR
// distance := tmp ;
76542: LD_ADDR_VAR 0 10
76546: PUSH
76547: LD_VAR 0 9
76551: ST_TO_ADDR
// end ; end ;
76552: GO 76410
76554: POP
76555: POP
// end ;
76556: LD_VAR 0 5
76560: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76561: LD_INT 0
76563: PPUSH
76564: PPUSH
// if not driver or not IsInUnit ( driver ) then
76565: LD_VAR 0 1
76569: NOT
76570: PUSH
76571: LD_VAR 0 1
76575: PPUSH
76576: CALL_OW 310
76580: NOT
76581: OR
76582: IFFALSE 76586
// exit ;
76584: GO 76676
// vehicle := IsInUnit ( driver ) ;
76586: LD_ADDR_VAR 0 3
76590: PUSH
76591: LD_VAR 0 1
76595: PPUSH
76596: CALL_OW 310
76600: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76601: LD_VAR 0 1
76605: PPUSH
76606: LD_STRING \
76608: PUSH
76609: LD_INT 0
76611: PUSH
76612: LD_INT 0
76614: PUSH
76615: LD_INT 0
76617: PUSH
76618: LD_INT 0
76620: PUSH
76621: LD_INT 0
76623: PUSH
76624: LD_INT 0
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: PUSH
76636: LD_STRING E
76638: PUSH
76639: LD_INT 0
76641: PUSH
76642: LD_INT 0
76644: PUSH
76645: LD_VAR 0 3
76649: PUSH
76650: LD_INT 0
76652: PUSH
76653: LD_INT 0
76655: PUSH
76656: LD_INT 0
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: PPUSH
76672: CALL_OW 446
// end ;
76676: LD_VAR 0 2
76680: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76681: LD_INT 0
76683: PPUSH
76684: PPUSH
// if not driver or not IsInUnit ( driver ) then
76685: LD_VAR 0 1
76689: NOT
76690: PUSH
76691: LD_VAR 0 1
76695: PPUSH
76696: CALL_OW 310
76700: NOT
76701: OR
76702: IFFALSE 76706
// exit ;
76704: GO 76796
// vehicle := IsInUnit ( driver ) ;
76706: LD_ADDR_VAR 0 3
76710: PUSH
76711: LD_VAR 0 1
76715: PPUSH
76716: CALL_OW 310
76720: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76721: LD_VAR 0 1
76725: PPUSH
76726: LD_STRING \
76728: PUSH
76729: LD_INT 0
76731: PUSH
76732: LD_INT 0
76734: PUSH
76735: LD_INT 0
76737: PUSH
76738: LD_INT 0
76740: PUSH
76741: LD_INT 0
76743: PUSH
76744: LD_INT 0
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: PUSH
76756: LD_STRING E
76758: PUSH
76759: LD_INT 0
76761: PUSH
76762: LD_INT 0
76764: PUSH
76765: LD_VAR 0 3
76769: PUSH
76770: LD_INT 0
76772: PUSH
76773: LD_INT 0
76775: PUSH
76776: LD_INT 0
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: PUSH
76788: EMPTY
76789: LIST
76790: LIST
76791: PPUSH
76792: CALL_OW 447
// end ;
76796: LD_VAR 0 2
76800: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76801: LD_INT 0
76803: PPUSH
76804: PPUSH
76805: PPUSH
// tmp := [ ] ;
76806: LD_ADDR_VAR 0 5
76810: PUSH
76811: EMPTY
76812: ST_TO_ADDR
// for i in units do
76813: LD_ADDR_VAR 0 4
76817: PUSH
76818: LD_VAR 0 1
76822: PUSH
76823: FOR_IN
76824: IFFALSE 76862
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76826: LD_ADDR_VAR 0 5
76830: PUSH
76831: LD_VAR 0 5
76835: PPUSH
76836: LD_VAR 0 5
76840: PUSH
76841: LD_INT 1
76843: PLUS
76844: PPUSH
76845: LD_VAR 0 4
76849: PPUSH
76850: CALL_OW 256
76854: PPUSH
76855: CALL_OW 2
76859: ST_TO_ADDR
76860: GO 76823
76862: POP
76863: POP
// if not tmp then
76864: LD_VAR 0 5
76868: NOT
76869: IFFALSE 76873
// exit ;
76871: GO 76921
// if asc then
76873: LD_VAR 0 2
76877: IFFALSE 76901
// result := SortListByListAsc ( units , tmp ) else
76879: LD_ADDR_VAR 0 3
76883: PUSH
76884: LD_VAR 0 1
76888: PPUSH
76889: LD_VAR 0 5
76893: PPUSH
76894: CALL_OW 76
76898: ST_TO_ADDR
76899: GO 76921
// result := SortListByListDesc ( units , tmp ) ;
76901: LD_ADDR_VAR 0 3
76905: PUSH
76906: LD_VAR 0 1
76910: PPUSH
76911: LD_VAR 0 5
76915: PPUSH
76916: CALL_OW 77
76920: ST_TO_ADDR
// end ;
76921: LD_VAR 0 3
76925: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76926: LD_INT 0
76928: PPUSH
76929: PPUSH
// task := GetTaskList ( mech ) ;
76930: LD_ADDR_VAR 0 4
76934: PUSH
76935: LD_VAR 0 1
76939: PPUSH
76940: CALL_OW 437
76944: ST_TO_ADDR
// if not task then
76945: LD_VAR 0 4
76949: NOT
76950: IFFALSE 76954
// exit ;
76952: GO 76996
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76954: LD_ADDR_VAR 0 3
76958: PUSH
76959: LD_VAR 0 4
76963: PUSH
76964: LD_INT 1
76966: ARRAY
76967: PUSH
76968: LD_INT 1
76970: ARRAY
76971: PUSH
76972: LD_STRING r
76974: EQUAL
76975: PUSH
76976: LD_VAR 0 4
76980: PUSH
76981: LD_INT 1
76983: ARRAY
76984: PUSH
76985: LD_INT 4
76987: ARRAY
76988: PUSH
76989: LD_VAR 0 2
76993: EQUAL
76994: AND
76995: ST_TO_ADDR
// end ;
76996: LD_VAR 0 3
77000: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77001: LD_INT 0
77003: PPUSH
// SetDir ( unit , d ) ;
77004: LD_VAR 0 1
77008: PPUSH
77009: LD_VAR 0 4
77013: PPUSH
77014: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77018: LD_VAR 0 1
77022: PPUSH
77023: LD_VAR 0 2
77027: PPUSH
77028: LD_VAR 0 3
77032: PPUSH
77033: LD_VAR 0 5
77037: PPUSH
77038: CALL_OW 48
// end ;
77042: LD_VAR 0 6
77046: RET
// export function ToNaturalNumber ( number ) ; begin
77047: LD_INT 0
77049: PPUSH
// result := number div 1 ;
77050: LD_ADDR_VAR 0 2
77054: PUSH
77055: LD_VAR 0 1
77059: PUSH
77060: LD_INT 1
77062: DIV
77063: ST_TO_ADDR
// if number < 0 then
77064: LD_VAR 0 1
77068: PUSH
77069: LD_INT 0
77071: LESS
77072: IFFALSE 77082
// result := 0 ;
77074: LD_ADDR_VAR 0 2
77078: PUSH
77079: LD_INT 0
77081: ST_TO_ADDR
// end ;
77082: LD_VAR 0 2
77086: RET
// export function SortByClass ( units , class ) ; var un ; begin
77087: LD_INT 0
77089: PPUSH
77090: PPUSH
// if not units or not class then
77091: LD_VAR 0 1
77095: NOT
77096: PUSH
77097: LD_VAR 0 2
77101: NOT
77102: OR
77103: IFFALSE 77107
// exit ;
77105: GO 77202
// result := [ ] ;
77107: LD_ADDR_VAR 0 3
77111: PUSH
77112: EMPTY
77113: ST_TO_ADDR
// for un in units do
77114: LD_ADDR_VAR 0 4
77118: PUSH
77119: LD_VAR 0 1
77123: PUSH
77124: FOR_IN
77125: IFFALSE 77200
// if GetClass ( un ) = class then
77127: LD_VAR 0 4
77131: PPUSH
77132: CALL_OW 257
77136: PUSH
77137: LD_VAR 0 2
77141: EQUAL
77142: IFFALSE 77169
// result := Insert ( result , 1 , un ) else
77144: LD_ADDR_VAR 0 3
77148: PUSH
77149: LD_VAR 0 3
77153: PPUSH
77154: LD_INT 1
77156: PPUSH
77157: LD_VAR 0 4
77161: PPUSH
77162: CALL_OW 2
77166: ST_TO_ADDR
77167: GO 77198
// result := Replace ( result , result + 1 , un ) ;
77169: LD_ADDR_VAR 0 3
77173: PUSH
77174: LD_VAR 0 3
77178: PPUSH
77179: LD_VAR 0 3
77183: PUSH
77184: LD_INT 1
77186: PLUS
77187: PPUSH
77188: LD_VAR 0 4
77192: PPUSH
77193: CALL_OW 1
77197: ST_TO_ADDR
77198: GO 77124
77200: POP
77201: POP
// end ;
77202: LD_VAR 0 3
77206: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77207: LD_INT 0
77209: PPUSH
77210: PPUSH
77211: PPUSH
77212: PPUSH
77213: PPUSH
77214: PPUSH
77215: PPUSH
// result := [ ] ;
77216: LD_ADDR_VAR 0 4
77220: PUSH
77221: EMPTY
77222: ST_TO_ADDR
// if x - r < 0 then
77223: LD_VAR 0 1
77227: PUSH
77228: LD_VAR 0 3
77232: MINUS
77233: PUSH
77234: LD_INT 0
77236: LESS
77237: IFFALSE 77249
// min_x := 0 else
77239: LD_ADDR_VAR 0 8
77243: PUSH
77244: LD_INT 0
77246: ST_TO_ADDR
77247: GO 77265
// min_x := x - r ;
77249: LD_ADDR_VAR 0 8
77253: PUSH
77254: LD_VAR 0 1
77258: PUSH
77259: LD_VAR 0 3
77263: MINUS
77264: ST_TO_ADDR
// if y - r < 0 then
77265: LD_VAR 0 2
77269: PUSH
77270: LD_VAR 0 3
77274: MINUS
77275: PUSH
77276: LD_INT 0
77278: LESS
77279: IFFALSE 77291
// min_y := 0 else
77281: LD_ADDR_VAR 0 7
77285: PUSH
77286: LD_INT 0
77288: ST_TO_ADDR
77289: GO 77307
// min_y := y - r ;
77291: LD_ADDR_VAR 0 7
77295: PUSH
77296: LD_VAR 0 2
77300: PUSH
77301: LD_VAR 0 3
77305: MINUS
77306: ST_TO_ADDR
// max_x := x + r ;
77307: LD_ADDR_VAR 0 9
77311: PUSH
77312: LD_VAR 0 1
77316: PUSH
77317: LD_VAR 0 3
77321: PLUS
77322: ST_TO_ADDR
// max_y := y + r ;
77323: LD_ADDR_VAR 0 10
77327: PUSH
77328: LD_VAR 0 2
77332: PUSH
77333: LD_VAR 0 3
77337: PLUS
77338: ST_TO_ADDR
// for _x = min_x to max_x do
77339: LD_ADDR_VAR 0 5
77343: PUSH
77344: DOUBLE
77345: LD_VAR 0 8
77349: DEC
77350: ST_TO_ADDR
77351: LD_VAR 0 9
77355: PUSH
77356: FOR_TO
77357: IFFALSE 77458
// for _y = min_y to max_y do
77359: LD_ADDR_VAR 0 6
77363: PUSH
77364: DOUBLE
77365: LD_VAR 0 7
77369: DEC
77370: ST_TO_ADDR
77371: LD_VAR 0 10
77375: PUSH
77376: FOR_TO
77377: IFFALSE 77454
// begin if not ValidHex ( _x , _y ) then
77379: LD_VAR 0 5
77383: PPUSH
77384: LD_VAR 0 6
77388: PPUSH
77389: CALL_OW 488
77393: NOT
77394: IFFALSE 77398
// continue ;
77396: GO 77376
// if GetResourceTypeXY ( _x , _y ) then
77398: LD_VAR 0 5
77402: PPUSH
77403: LD_VAR 0 6
77407: PPUSH
77408: CALL_OW 283
77412: IFFALSE 77452
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77414: LD_ADDR_VAR 0 4
77418: PUSH
77419: LD_VAR 0 4
77423: PPUSH
77424: LD_VAR 0 4
77428: PUSH
77429: LD_INT 1
77431: PLUS
77432: PPUSH
77433: LD_VAR 0 5
77437: PUSH
77438: LD_VAR 0 6
77442: PUSH
77443: EMPTY
77444: LIST
77445: LIST
77446: PPUSH
77447: CALL_OW 1
77451: ST_TO_ADDR
// end ;
77452: GO 77376
77454: POP
77455: POP
77456: GO 77356
77458: POP
77459: POP
// end ;
77460: LD_VAR 0 4
77464: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77465: LD_INT 0
77467: PPUSH
77468: PPUSH
77469: PPUSH
77470: PPUSH
77471: PPUSH
77472: PPUSH
77473: PPUSH
77474: PPUSH
// if not units then
77475: LD_VAR 0 1
77479: NOT
77480: IFFALSE 77484
// exit ;
77482: GO 77995
// result := UnitFilter ( units , [ f_ok ] ) ;
77484: LD_ADDR_VAR 0 3
77488: PUSH
77489: LD_VAR 0 1
77493: PPUSH
77494: LD_INT 50
77496: PUSH
77497: EMPTY
77498: LIST
77499: PPUSH
77500: CALL_OW 72
77504: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77505: LD_ADDR_VAR 0 8
77509: PUSH
77510: LD_VAR 0 1
77514: PUSH
77515: LD_INT 1
77517: ARRAY
77518: PPUSH
77519: CALL_OW 255
77523: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77524: LD_ADDR_VAR 0 10
77528: PUSH
77529: LD_INT 29
77531: PUSH
77532: LD_EXP 49
77536: PUSH
77537: LD_INT 49
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: LIST
77544: ST_TO_ADDR
// if not result then
77545: LD_VAR 0 3
77549: NOT
77550: IFFALSE 77554
// exit ;
77552: GO 77995
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77554: LD_ADDR_VAR 0 5
77558: PUSH
77559: LD_INT 81
77561: PUSH
77562: LD_VAR 0 8
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: PPUSH
77571: CALL_OW 69
77575: ST_TO_ADDR
// for i in result do
77576: LD_ADDR_VAR 0 4
77580: PUSH
77581: LD_VAR 0 3
77585: PUSH
77586: FOR_IN
77587: IFFALSE 77993
// begin tag := GetTag ( i ) + 1 ;
77589: LD_ADDR_VAR 0 9
77593: PUSH
77594: LD_VAR 0 4
77598: PPUSH
77599: CALL_OW 110
77603: PUSH
77604: LD_INT 1
77606: PLUS
77607: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77608: LD_ADDR_VAR 0 7
77612: PUSH
77613: LD_VAR 0 4
77617: PPUSH
77618: CALL_OW 250
77622: PPUSH
77623: LD_VAR 0 4
77627: PPUSH
77628: CALL_OW 251
77632: PPUSH
77633: LD_INT 6
77635: PPUSH
77636: CALL 77207 0 3
77640: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77641: LD_VAR 0 7
77645: PUSH
77646: LD_VAR 0 4
77650: PPUSH
77651: CALL_OW 264
77655: PUSH
77656: LD_VAR 0 10
77660: IN
77661: NOT
77662: AND
77663: IFFALSE 77702
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77665: LD_VAR 0 4
77669: PPUSH
77670: LD_VAR 0 7
77674: PUSH
77675: LD_INT 1
77677: ARRAY
77678: PUSH
77679: LD_INT 1
77681: ARRAY
77682: PPUSH
77683: LD_VAR 0 7
77687: PUSH
77688: LD_INT 1
77690: ARRAY
77691: PUSH
77692: LD_INT 2
77694: ARRAY
77695: PPUSH
77696: CALL_OW 116
77700: GO 77991
// if path > tag then
77702: LD_VAR 0 2
77706: PUSH
77707: LD_VAR 0 9
77711: GREATER
77712: IFFALSE 77920
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77714: LD_ADDR_VAR 0 6
77718: PUSH
77719: LD_VAR 0 5
77723: PPUSH
77724: LD_INT 91
77726: PUSH
77727: LD_VAR 0 4
77731: PUSH
77732: LD_INT 12
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: LIST
77739: PPUSH
77740: CALL_OW 72
77744: ST_TO_ADDR
// if nearEnemy then
77745: LD_VAR 0 6
77749: IFFALSE 77818
// begin if GetWeapon ( i ) = ru_time_lapser then
77751: LD_VAR 0 4
77755: PPUSH
77756: CALL_OW 264
77760: PUSH
77761: LD_INT 49
77763: EQUAL
77764: IFFALSE 77792
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77766: LD_VAR 0 4
77770: PPUSH
77771: LD_VAR 0 6
77775: PPUSH
77776: LD_VAR 0 4
77780: PPUSH
77781: CALL_OW 74
77785: PPUSH
77786: CALL_OW 112
77790: GO 77816
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77792: LD_VAR 0 4
77796: PPUSH
77797: LD_VAR 0 6
77801: PPUSH
77802: LD_VAR 0 4
77806: PPUSH
77807: CALL_OW 74
77811: PPUSH
77812: CALL_OW 115
// end else
77816: GO 77918
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77818: LD_VAR 0 4
77822: PPUSH
77823: LD_VAR 0 2
77827: PUSH
77828: LD_VAR 0 9
77832: ARRAY
77833: PUSH
77834: LD_INT 1
77836: ARRAY
77837: PPUSH
77838: LD_VAR 0 2
77842: PUSH
77843: LD_VAR 0 9
77847: ARRAY
77848: PUSH
77849: LD_INT 2
77851: ARRAY
77852: PPUSH
77853: CALL_OW 297
77857: PUSH
77858: LD_INT 6
77860: GREATER
77861: IFFALSE 77904
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77863: LD_VAR 0 4
77867: PPUSH
77868: LD_VAR 0 2
77872: PUSH
77873: LD_VAR 0 9
77877: ARRAY
77878: PUSH
77879: LD_INT 1
77881: ARRAY
77882: PPUSH
77883: LD_VAR 0 2
77887: PUSH
77888: LD_VAR 0 9
77892: ARRAY
77893: PUSH
77894: LD_INT 2
77896: ARRAY
77897: PPUSH
77898: CALL_OW 114
77902: GO 77918
// SetTag ( i , tag ) ;
77904: LD_VAR 0 4
77908: PPUSH
77909: LD_VAR 0 9
77913: PPUSH
77914: CALL_OW 109
// end else
77918: GO 77991
// if enemy then
77920: LD_VAR 0 5
77924: IFFALSE 77991
// begin if GetWeapon ( i ) = ru_time_lapser then
77926: LD_VAR 0 4
77930: PPUSH
77931: CALL_OW 264
77935: PUSH
77936: LD_INT 49
77938: EQUAL
77939: IFFALSE 77967
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77941: LD_VAR 0 4
77945: PPUSH
77946: LD_VAR 0 5
77950: PPUSH
77951: LD_VAR 0 4
77955: PPUSH
77956: CALL_OW 74
77960: PPUSH
77961: CALL_OW 112
77965: GO 77991
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77967: LD_VAR 0 4
77971: PPUSH
77972: LD_VAR 0 5
77976: PPUSH
77977: LD_VAR 0 4
77981: PPUSH
77982: CALL_OW 74
77986: PPUSH
77987: CALL_OW 115
// end ; end ;
77991: GO 77586
77993: POP
77994: POP
// end ;
77995: LD_VAR 0 3
77999: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78000: LD_INT 0
78002: PPUSH
78003: PPUSH
78004: PPUSH
// if not unit or IsInUnit ( unit ) then
78005: LD_VAR 0 1
78009: NOT
78010: PUSH
78011: LD_VAR 0 1
78015: PPUSH
78016: CALL_OW 310
78020: OR
78021: IFFALSE 78025
// exit ;
78023: GO 78116
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78025: LD_ADDR_VAR 0 4
78029: PUSH
78030: LD_VAR 0 1
78034: PPUSH
78035: CALL_OW 250
78039: PPUSH
78040: LD_VAR 0 2
78044: PPUSH
78045: LD_INT 1
78047: PPUSH
78048: CALL_OW 272
78052: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78053: LD_ADDR_VAR 0 5
78057: PUSH
78058: LD_VAR 0 1
78062: PPUSH
78063: CALL_OW 251
78067: PPUSH
78068: LD_VAR 0 2
78072: PPUSH
78073: LD_INT 1
78075: PPUSH
78076: CALL_OW 273
78080: ST_TO_ADDR
// if ValidHex ( x , y ) then
78081: LD_VAR 0 4
78085: PPUSH
78086: LD_VAR 0 5
78090: PPUSH
78091: CALL_OW 488
78095: IFFALSE 78116
// ComTurnXY ( unit , x , y ) ;
78097: LD_VAR 0 1
78101: PPUSH
78102: LD_VAR 0 4
78106: PPUSH
78107: LD_VAR 0 5
78111: PPUSH
78112: CALL_OW 118
// end ;
78116: LD_VAR 0 3
78120: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78121: LD_INT 0
78123: PPUSH
78124: PPUSH
// result := false ;
78125: LD_ADDR_VAR 0 3
78129: PUSH
78130: LD_INT 0
78132: ST_TO_ADDR
// if not units then
78133: LD_VAR 0 2
78137: NOT
78138: IFFALSE 78142
// exit ;
78140: GO 78187
// for i in units do
78142: LD_ADDR_VAR 0 4
78146: PUSH
78147: LD_VAR 0 2
78151: PUSH
78152: FOR_IN
78153: IFFALSE 78185
// if See ( side , i ) then
78155: LD_VAR 0 1
78159: PPUSH
78160: LD_VAR 0 4
78164: PPUSH
78165: CALL_OW 292
78169: IFFALSE 78183
// begin result := true ;
78171: LD_ADDR_VAR 0 3
78175: PUSH
78176: LD_INT 1
78178: ST_TO_ADDR
// exit ;
78179: POP
78180: POP
78181: GO 78187
// end ;
78183: GO 78152
78185: POP
78186: POP
// end ;
78187: LD_VAR 0 3
78191: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78192: LD_INT 0
78194: PPUSH
78195: PPUSH
78196: PPUSH
78197: PPUSH
// if not unit or not points then
78198: LD_VAR 0 1
78202: NOT
78203: PUSH
78204: LD_VAR 0 2
78208: NOT
78209: OR
78210: IFFALSE 78214
// exit ;
78212: GO 78304
// dist := 99999 ;
78214: LD_ADDR_VAR 0 5
78218: PUSH
78219: LD_INT 99999
78221: ST_TO_ADDR
// for i in points do
78222: LD_ADDR_VAR 0 4
78226: PUSH
78227: LD_VAR 0 2
78231: PUSH
78232: FOR_IN
78233: IFFALSE 78302
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78235: LD_ADDR_VAR 0 6
78239: PUSH
78240: LD_VAR 0 1
78244: PPUSH
78245: LD_VAR 0 4
78249: PUSH
78250: LD_INT 1
78252: ARRAY
78253: PPUSH
78254: LD_VAR 0 4
78258: PUSH
78259: LD_INT 2
78261: ARRAY
78262: PPUSH
78263: CALL_OW 297
78267: ST_TO_ADDR
// if tmpDist < dist then
78268: LD_VAR 0 6
78272: PUSH
78273: LD_VAR 0 5
78277: LESS
78278: IFFALSE 78300
// begin result := i ;
78280: LD_ADDR_VAR 0 3
78284: PUSH
78285: LD_VAR 0 4
78289: ST_TO_ADDR
// dist := tmpDist ;
78290: LD_ADDR_VAR 0 5
78294: PUSH
78295: LD_VAR 0 6
78299: ST_TO_ADDR
// end ; end ;
78300: GO 78232
78302: POP
78303: POP
// end ;
78304: LD_VAR 0 3
78308: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78309: LD_INT 0
78311: PPUSH
// uc_side := side ;
78312: LD_ADDR_OWVAR 20
78316: PUSH
78317: LD_VAR 0 1
78321: ST_TO_ADDR
// uc_nation := 3 ;
78322: LD_ADDR_OWVAR 21
78326: PUSH
78327: LD_INT 3
78329: ST_TO_ADDR
// vc_chassis := 25 ;
78330: LD_ADDR_OWVAR 37
78334: PUSH
78335: LD_INT 25
78337: ST_TO_ADDR
// vc_engine := engine_siberite ;
78338: LD_ADDR_OWVAR 39
78342: PUSH
78343: LD_INT 3
78345: ST_TO_ADDR
// vc_control := control_computer ;
78346: LD_ADDR_OWVAR 38
78350: PUSH
78351: LD_INT 3
78353: ST_TO_ADDR
// vc_weapon := 59 ;
78354: LD_ADDR_OWVAR 40
78358: PUSH
78359: LD_INT 59
78361: ST_TO_ADDR
// result := CreateVehicle ;
78362: LD_ADDR_VAR 0 5
78366: PUSH
78367: CALL_OW 45
78371: ST_TO_ADDR
// SetDir ( result , d ) ;
78372: LD_VAR 0 5
78376: PPUSH
78377: LD_VAR 0 4
78381: PPUSH
78382: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78386: LD_VAR 0 5
78390: PPUSH
78391: LD_VAR 0 2
78395: PPUSH
78396: LD_VAR 0 3
78400: PPUSH
78401: LD_INT 0
78403: PPUSH
78404: CALL_OW 48
// end ;
78408: LD_VAR 0 5
78412: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78413: LD_INT 0
78415: PPUSH
78416: PPUSH
78417: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78418: LD_ADDR_VAR 0 2
78422: PUSH
78423: LD_INT 0
78425: PUSH
78426: LD_INT 0
78428: PUSH
78429: LD_INT 0
78431: PUSH
78432: LD_INT 0
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: LIST
78439: LIST
78440: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78441: LD_VAR 0 1
78445: NOT
78446: PUSH
78447: LD_VAR 0 1
78451: PPUSH
78452: CALL_OW 264
78456: PUSH
78457: LD_INT 12
78459: PUSH
78460: LD_INT 51
78462: PUSH
78463: LD_INT 32
78465: PUSH
78466: LD_EXP 46
78470: PUSH
78471: EMPTY
78472: LIST
78473: LIST
78474: LIST
78475: LIST
78476: IN
78477: NOT
78478: OR
78479: IFFALSE 78483
// exit ;
78481: GO 78581
// for i := 1 to 3 do
78483: LD_ADDR_VAR 0 3
78487: PUSH
78488: DOUBLE
78489: LD_INT 1
78491: DEC
78492: ST_TO_ADDR
78493: LD_INT 3
78495: PUSH
78496: FOR_TO
78497: IFFALSE 78579
// begin tmp := GetCargo ( cargo , i ) ;
78499: LD_ADDR_VAR 0 4
78503: PUSH
78504: LD_VAR 0 1
78508: PPUSH
78509: LD_VAR 0 3
78513: PPUSH
78514: CALL_OW 289
78518: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78519: LD_ADDR_VAR 0 2
78523: PUSH
78524: LD_VAR 0 2
78528: PPUSH
78529: LD_VAR 0 3
78533: PPUSH
78534: LD_VAR 0 4
78538: PPUSH
78539: CALL_OW 1
78543: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78544: LD_ADDR_VAR 0 2
78548: PUSH
78549: LD_VAR 0 2
78553: PPUSH
78554: LD_INT 4
78556: PPUSH
78557: LD_VAR 0 2
78561: PUSH
78562: LD_INT 4
78564: ARRAY
78565: PUSH
78566: LD_VAR 0 4
78570: PLUS
78571: PPUSH
78572: CALL_OW 1
78576: ST_TO_ADDR
// end ;
78577: GO 78496
78579: POP
78580: POP
// end ; end_of_file
78581: LD_VAR 0 2
78585: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78586: LD_VAR 0 1
78590: PUSH
78591: LD_INT 200
78593: DOUBLE
78594: GREATEREQUAL
78595: IFFALSE 78603
78597: LD_INT 299
78599: DOUBLE
78600: LESSEQUAL
78601: IFTRUE 78605
78603: GO 78637
78605: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78606: LD_VAR 0 1
78610: PPUSH
78611: LD_VAR 0 2
78615: PPUSH
78616: LD_VAR 0 3
78620: PPUSH
78621: LD_VAR 0 4
78625: PPUSH
78626: LD_VAR 0 5
78630: PPUSH
78631: CALL 33926 0 5
78635: GO 78714
78637: LD_INT 300
78639: DOUBLE
78640: GREATEREQUAL
78641: IFFALSE 78649
78643: LD_INT 399
78645: DOUBLE
78646: LESSEQUAL
78647: IFTRUE 78651
78649: GO 78713
78651: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78652: LD_VAR 0 1
78656: PPUSH
78657: LD_VAR 0 2
78661: PPUSH
78662: LD_VAR 0 3
78666: PPUSH
78667: LD_VAR 0 4
78671: PPUSH
78672: LD_VAR 0 5
78676: PPUSH
78677: LD_VAR 0 6
78681: PPUSH
78682: LD_VAR 0 7
78686: PPUSH
78687: LD_VAR 0 8
78691: PPUSH
78692: LD_VAR 0 9
78696: PPUSH
78697: LD_VAR 0 10
78701: PPUSH
78702: LD_VAR 0 11
78706: PPUSH
78707: CALL 31568 0 11
78711: GO 78714
78713: POP
// end ;
78714: PPOPN 11
78716: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78717: LD_VAR 0 1
78721: PPUSH
78722: LD_VAR 0 2
78726: PPUSH
78727: LD_VAR 0 3
78731: PPUSH
78732: LD_VAR 0 4
78736: PPUSH
78737: LD_VAR 0 5
78741: PPUSH
78742: CALL 33662 0 5
// end ; end_of_file
78746: PPOPN 5
78748: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78749: LD_VAR 0 1
78753: PPUSH
78754: LD_VAR 0 2
78758: PPUSH
78759: LD_VAR 0 3
78763: PPUSH
78764: LD_VAR 0 4
78768: PPUSH
78769: LD_VAR 0 5
78773: PPUSH
78774: LD_VAR 0 6
78778: PPUSH
78779: CALL 19261 0 6
// end ;
78783: PPOPN 6
78785: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78786: CALL 19236 0 0
// end ;
78790: PPOPN 1
78792: END
