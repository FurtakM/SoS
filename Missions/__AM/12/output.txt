// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15411 0 0
// PrepareDifficulty ;
 226: CALL 12514 0 0
// PrepareVehicles ;
 230: CALL 1765 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1339 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3153 0 0
// PrepareWestBase ;
 258: CALL 3668 0 0
// PrepareEastBase ;
 262: CALL 3228 0 0
// PrepareOtherRussians ;
 266: CALL 3780 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_STRING 11_
 688: PPUSH
 689: CALL 36908 0 3
 693: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 694: LD_EXP 1
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 21
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 58
 733: PUSH
 734: EMPTY
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 755: LD_STRING 11_Lisa
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: IFFALSE 816
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_STRING Lisa
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 11_
 781: PPUSH
 782: CALL 36908 0 3
 786: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 787: LD_EXP 2
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 799: LD_EXP 2
 803: PPUSH
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end else
 814: GO 832
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL 1339 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 832: LD_STRING 11_Donaldson
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 893
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 845: LD_ADDR_EXP 3
 849: PUSH
 850: LD_STRING Donaldson
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_STRING 11_
 858: PPUSH
 859: CALL 36908 0 3
 863: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 4
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// end else
 891: GO 909
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 909: LD_STRING 11_Cyrus
 911: PPUSH
 912: CALL_OW 28
 916: PUSH
 917: LD_INT 1
 919: EQUAL
 920: IFFALSE 970
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 36908 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1339 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: PUSH
 994: LD_INT 1
 996: EQUAL
 997: IFFALSE 1047
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
 999: LD_ADDR_EXP 6
1003: PUSH
1004: LD_STRING Denis
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_STRING 11_
1012: PPUSH
1013: CALL 36908 0 3
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1063
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1047: LD_INT 4
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 1339 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1063: LD_STRING 11_Frank
1065: PPUSH
1066: CALL_OW 28
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1124
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 36908 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1201
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING Cornell
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_STRING 11_
1166: PPUSH
1167: CALL 36908 0 3
1171: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1184: LD_EXP 10
1188: PPUSH
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// end else
1199: GO 1217
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1201: LD_INT 4
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL 1339 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_EXP 14
1226: PPUSH
1227: LD_INT 26
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: ST_TO_ADDR
// if not tmp then
1242: LD_VAR 0 2
1246: NOT
1247: IFFALSE 1276
// begin PrepareSoldier ( sex_male , 8 ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 8
1254: PPUSH
1255: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// end else
1274: GO 1315
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1276: LD_VAR 0 2
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: DIFF
1314: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1315: LD_ADDR_EXP 22
1319: PUSH
1320: LD_STRING Powell
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: LD_STRING 
1328: PPUSH
1329: CALL 36908 0 3
1333: ST_TO_ADDR
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// if mech = 1 then
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1591
// begin if others11 > 0 then
1356: LD_EXP 14
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1531
// begin for i := 1 to others11 - 1 do
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 14
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1468
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1388: LD_EXP 14
1392: PUSH
1393: LD_VAR 0 6
1397: ARRAY
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: CALL_OW 259
1406: PUSH
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL_OW 259
1429: LESS
1430: IFFALSE 1466
// begin mecha = others11 [ i + 1 ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_EXP 14
1441: PUSH
1442: LD_VAR 0 6
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1452: LD_VAR 0 9
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL_OW 336
// break ;
1464: GO 1468
// end ; end ;
1466: GO 1385
1468: POP
1469: POP
// if spawnMode = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1499
// PlaceUnitArea ( mecha , area , false ) else
1480: LD_VAR 0 9
1484: PPUSH
1485: LD_VAR 0 1
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
1497: GO 1513
// PlaceHumanInUnit ( mecha , veh ) ;
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 52
// others11 = others11 diff mecha ;
1513: LD_ADDR_EXP 14
1517: PUSH
1518: LD_EXP 14
1522: PUSH
1523: LD_VAR 0 9
1527: DIFF
1528: ST_TO_ADDR
// end else
1529: GO 1589
// begin hc_name =  ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING 
1538: ST_TO_ADDR
// hc_gallery =  ;
1539: LD_ADDR_OWVAR 33
1543: PUSH
1544: LD_STRING 
1546: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1547: LD_INT 0
1549: PPUSH
1550: LD_INT 7
1552: PPUSH
1553: LD_INT 9
1555: PPUSH
1556: CALL_OW 12
1560: PPUSH
1561: CALL_OW 383
// un = CreateHuman ;
1565: LD_ADDR_VAR 0 7
1569: PUSH
1570: CALL_OW 44
1574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1575: LD_VAR 0 7
1579: PPUSH
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 52
// end ; end else
1589: GO 1760
// begin if others11 > 0 then
1591: LD_EXP 14
1595: PUSH
1596: LD_INT 0
1598: GREATER
1599: IFFALSE 1672
// begin if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1634
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1611: LD_EXP 14
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
1632: GO 1652
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1634: LD_EXP 14
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_VAR 0 2
1647: PPUSH
1648: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1652: LD_ADDR_EXP 14
1656: PUSH
1657: LD_EXP 14
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 3
1669: ST_TO_ADDR
// end else
1670: GO 1760
// begin hc_name =  ;
1672: LD_ADDR_OWVAR 26
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 3
1699: PUSH
1700: LD_INT 4
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: ARRAY
1720: PPUSH
1721: LD_INT 7
1723: PPUSH
1724: LD_INT 9
1726: PPUSH
1727: CALL_OW 12
1731: PPUSH
1732: CALL_OW 380
// un = CreateHuman ;
1736: LD_ADDR_VAR 0 7
1740: PUSH
1741: CALL_OW 44
1745: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1746: LD_VAR 0 7
1750: PPUSH
1751: LD_VAR 0 2
1755: PPUSH
1756: CALL_OW 52
// end ; end ; end ;
1760: LD_VAR 0 5
1764: RET
// export function PrepareVehicles ; var veh ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1785: LD_ADDR_OWVAR 37
1789: PUSH
1790: LD_INT 3
1792: ST_TO_ADDR
// vc_engine = 3 ;
1793: LD_ADDR_OWVAR 39
1797: PUSH
1798: LD_INT 3
1800: ST_TO_ADDR
// vc_control = 3 ;
1801: LD_ADDR_OWVAR 38
1805: PUSH
1806: LD_INT 3
1808: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// veh = CreateVehicle ;
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: CALL_OW 45
1826: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1827: LD_VAR 0 2
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// vc_weapon = us_double_gun ;
1842: LD_ADDR_OWVAR 40
1846: PUSH
1847: LD_INT 5
1849: ST_TO_ADDR
// vc_control = 1 ;
1850: LD_ADDR_OWVAR 38
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// veh = CreateVehicle ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: CALL_OW 45
1867: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// vc_weapon = us_light_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// vc_control = 3 ;
1891: LD_ADDR_OWVAR 38
1895: PUSH
1896: LD_INT 3
1898: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1899: LD_ADDR_OWVAR 37
1903: PUSH
1904: LD_INT 2
1906: ST_TO_ADDR
// veh = CreateVehicle ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1932: LD_ADDR_OWVAR 40
1936: PUSH
1937: LD_INT 4
1939: ST_TO_ADDR
// veh = CreateVehicle ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: CALL_OW 45
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: LD_INT 4
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PowellSupport1 ; var veh , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
// uc_side = 1 ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// uc_nation = 1 ;
1983: LD_ADDR_OWVAR 21
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1991: LD_STRING 11_Brown
1993: PPUSH
1994: CALL_OW 28
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: IFFALSE 2052
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2004: LD_ADDR_EXP 7
2008: PUSH
2009: LD_STRING Brown
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_STRING 11_
2017: PPUSH
2018: CALL 36908 0 3
2022: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2023: LD_EXP 7
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2035: LD_EXP 7
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL_OW 49
// end else
2050: GO 2068
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2052: LD_INT 4
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL 1339 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2068: LD_STRING 11_Gary
2070: PPUSH
2071: CALL_OW 28
2075: PUSH
2076: LD_INT 1
2078: EQUAL
2079: IFFALSE 2129
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2081: LD_ADDR_EXP 11
2085: PUSH
2086: LD_STRING Gary
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_STRING 11_
2094: PPUSH
2095: CALL 36908 0 3
2099: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2100: LD_EXP 11
2104: PPUSH
2105: LD_INT 2
2107: PPUSH
2108: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2112: LD_EXP 11
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 49
// end else
2127: GO 2145
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 1339 0 4
// end ; vc_chassis = us_medium_tracked ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 3
2152: ST_TO_ADDR
// vc_engine = 3 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 3
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = us_crane ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 13
2176: ST_TO_ADDR
// veh = CreateVehicle ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: CALL_OW 45
2186: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2214: LD_INT 4
2216: PPUSH
2217: LD_VAR 0 2
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL 1339 0 4
// vc_weapon = 9 ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 9
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2277: LD_INT 4
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 2
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: CALL 1339 0 4
// vc_control = 3 ;
2295: LD_ADDR_OWVAR 38
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2303: LD_ADDR_OWVAR 40
2307: PUSH
2308: LD_INT 12
2310: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2311: LD_ADDR_EXP 15
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2321: LD_ADDR_EXP 16
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2331: LD_EXP 15
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2343: LD_EXP 16
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 4
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2385: LD_EXP 15
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 100
2395: PPUSH
2396: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2400: LD_EXP 16
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_INT 80
2410: PPUSH
2411: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2415: LD_EXP 16
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_INT 20
2425: PPUSH
2426: CALL_OW 291
// end ;
2430: LD_VAR 0 1
2434: RET
// export function PowellSupport2 ; var veh , un ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// uc_side = 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 2
2463: ST_TO_ADDR
// vc_engine = 3 ;
2464: LD_ADDR_OWVAR 39
2468: PUSH
2469: LD_INT 3
2471: ST_TO_ADDR
// vc_control = 3 ;
2472: LD_ADDR_OWVAR 38
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2480: LD_ADDR_OWVAR 40
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// veh = CreateVehicle ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: CALL_OW 45
2497: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 4
2505: PPUSH
2506: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// vc_control = 1 ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2533: LD_ADDR_OWVAR 37
2537: PUSH
2538: LD_INT 2
2540: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2559: LD_VAR 0 2
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2571: LD_VAR 0 2
2575: PPUSH
2576: LD_INT 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2586: LD_STRING 11_Bobby
2588: PPUSH
2589: CALL_OW 28
2593: PUSH
2594: LD_INT 1
2596: EQUAL
2597: IFFALSE 2646
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2599: LD_ADDR_EXP 4
2603: PUSH
2604: LD_STRING Bobby
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_STRING 11_
2612: PPUSH
2613: CALL 36908 0 3
2617: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2618: LD_EXP 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2630: LD_EXP 4
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 52
// end else
2644: GO 2664
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 1339 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2664: LD_STRING 11_Houten
2666: PPUSH
2667: CALL_OW 28
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: IFFALSE 2725
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2677: LD_ADDR_EXP 9
2681: PUSH
2682: LD_STRING Houten
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 11_
2690: PPUSH
2691: CALL 36908 0 3
2695: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2696: LD_EXP 9
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2708: LD_EXP 9
2712: PPUSH
2713: LD_INT 4
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 49
// end else
2723: GO 2741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2725: LD_INT 4
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL 1339 0 4
// end ; vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2757: LD_ADDR_EXP 17
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2767: LD_EXP 17
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: CALL_OW 233
// amCargo4 = CreateVehicle ;
2779: LD_ADDR_EXP 18
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2789: LD_EXP 18
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// amCargo5 = CreateVehicle ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: CALL_OW 45
2810: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2811: LD_EXP 19
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2823: LD_EXP 17
2827: PPUSH
2828: LD_INT 4
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2838: LD_EXP 18
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 49
// if kurtStatus > 0 then
2868: LD_EXP 26
2872: PUSH
2873: LD_INT 0
2875: GREATER
2876: IFFALSE 2925
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2878: LD_EXP 17
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2893: LD_EXP 18
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2908: LD_EXP 19
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_INT 80
2918: PPUSH
2919: CALL_OW 291
// end else
2923: GO 2970
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2925: LD_EXP 17
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2940: LD_EXP 18
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: LD_INT 60
2950: PPUSH
2951: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2955: LD_EXP 19
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 100
2965: PPUSH
2966: CALL_OW 291
// end ; end ;
2970: LD_VAR 0 1
2974: RET
// export function PowellSupport3 ; var veh , un ; begin
2975: LD_INT 0
2977: PPUSH
2978: PPUSH
2979: PPUSH
// uc_side = 1 ;
2980: LD_ADDR_OWVAR 20
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// uc_nation = 1 ;
2988: LD_ADDR_OWVAR 21
2992: PUSH
2993: LD_INT 1
2995: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL 1339 0 4
// vc_chassis = us_medium_wheeled ;
3012: LD_ADDR_OWVAR 37
3016: PUSH
3017: LD_INT 2
3019: ST_TO_ADDR
// vc_engine = 3 ;
3020: LD_ADDR_OWVAR 39
3024: PUSH
3025: LD_INT 3
3027: ST_TO_ADDR
// vc_control = 3 ;
3028: LD_ADDR_OWVAR 38
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3036: LD_ADDR_OWVAR 40
3040: PUSH
3041: LD_INT 12
3043: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3044: LD_ADDR_EXP 20
3048: PUSH
3049: CALL_OW 45
3053: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3054: LD_ADDR_EXP 21
3058: PUSH
3059: CALL_OW 45
3063: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3064: LD_EXP 20
3068: PPUSH
3069: LD_INT 4
3071: PPUSH
3072: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3076: LD_EXP 21
3080: PPUSH
3081: LD_INT 4
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3088: LD_EXP 20
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3103: LD_EXP 21
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3118: LD_EXP 20
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 100
3128: PPUSH
3129: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3133: LD_EXP 21
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 100
3143: PPUSH
3144: CALL_OW 291
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareRussianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 3 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3164: LD_ADDR_EXP 23
3168: PUSH
3169: LD_STRING Davidov
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_STRING 
3177: PPUSH
3178: CALL 36908 0 3
3182: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3183: LD_EXP 23
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3195: LD_ADDR_EXP 34
3199: PUSH
3200: LD_EXP 34
3204: PUSH
3205: LD_EXP 23
3209: ADD
3210: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3211: LD_EXP 34
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 336
// end ;
3223: LD_VAR 0 1
3227: RET
// export function PrepareEastBase ; var i , un ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: LD_INT 121
3241: PPUSH
3242: LD_EXP 36
3246: PPUSH
3247: LD_EXP 37
3251: PPUSH
3252: CALL_OW 12
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 121
3275: PPUSH
3276: LD_EXP 36
3280: PPUSH
3281: LD_EXP 37
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 9
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_EXP 36
3314: PPUSH
3315: LD_EXP 37
3319: PPUSH
3320: CALL_OW 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3335: LD_INT 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: LD_INT 112
3343: PPUSH
3344: LD_EXP 36
3348: PPUSH
3349: LD_EXP 37
3353: PPUSH
3354: CALL_OW 12
3358: PPUSH
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 6
3364: PPUSH
3365: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3369: LD_INT 3
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 47
3377: PPUSH
3378: LD_EXP 36
3382: PPUSH
3383: LD_EXP 37
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: LD_INT 4
3395: PPUSH
3396: LD_INT 6
3398: PPUSH
3399: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_INT 129
3411: PPUSH
3412: LD_EXP 36
3416: PPUSH
3417: LD_EXP 37
3421: PPUSH
3422: CALL_OW 12
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 6
3432: PPUSH
3433: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 135
3445: PPUSH
3446: LD_EXP 36
3450: PPUSH
3451: LD_EXP 37
3455: PPUSH
3456: CALL_OW 12
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 6
3466: PPUSH
3467: CALL 12945 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 30
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3546
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_EXP 36
3523: PPUSH
3524: LD_EXP 37
3528: PPUSH
3529: CALL_OW 12
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL 12945 0 6
3544: GO 3505
3546: POP
3547: POP
// for i = 1 to 5 do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 5
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3661
// begin uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// hc_gallery =  ;
3580: LD_ADDR_OWVAR 33
3584: PUSH
3585: LD_STRING 
3587: ST_TO_ADDR
// hc_name =  ;
3588: LD_ADDR_OWVAR 26
3592: PUSH
3593: LD_STRING 
3595: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_EXP 36
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: CALL_OW 12
3616: PPUSH
3617: CALL_OW 380
// un = CreateHuman ;
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3643: LD_ADDR_EXP 34
3647: PUSH
3648: LD_EXP 34
3652: PUSH
3653: LD_VAR 0 3
3657: ADD
3658: ST_TO_ADDR
// end ;
3659: GO 3561
3661: POP
3662: POP
// end ;
3663: LD_VAR 0 1
3667: RET
// export function PrepareWestBase ; var i , un ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: LD_INT 6
3681: PPUSH
3682: LD_EXP 36
3686: PPUSH
3687: LD_EXP 37
3691: PPUSH
3692: CALL_OW 12
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 91
3715: PPUSH
3716: LD_EXP 36
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: CALL_OW 12
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL 12945 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 21
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 6
3770: PPUSH
3771: CALL 12945 0 6
// end ;
3775: LD_VAR 0 1
3779: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side = 3 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// uc_nation = 3 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// for i = 1 to 5 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 5
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3886
// begin hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_EXP 36
3844: PPUSH
3845: LD_EXP 37
3849: PPUSH
3850: CALL_OW 12
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// end ;
3884: GO 3815
3886: POP
3887: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3888: LD_ADDR_VAR 0 2
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: PUSH
3912: LD_OWVAR 67
3916: ARRAY
3917: PUSH
3918: FOR_TO
3919: IFFALSE 3989
// begin hc_gallery =  ;
3921: LD_ADDR_OWVAR 33
3925: PUSH
3926: LD_STRING 
3928: ST_TO_ADDR
// hc_name =  ;
3929: LD_ADDR_OWVAR 26
3933: PUSH
3934: LD_STRING 
3936: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3937: LD_INT 0
3939: PPUSH
3940: LD_INT 4
3942: PPUSH
3943: LD_EXP 36
3947: PPUSH
3948: LD_EXP 37
3952: PPUSH
3953: CALL_OW 12
3957: PPUSH
3958: CALL_OW 380
// un = CreateHuman ;
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: CALL_OW 44
3971: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3972: LD_VAR 0 3
3976: PPUSH
3977: LD_INT 8
3979: PPUSH
3980: LD_INT 0
3982: PPUSH
3983: CALL_OW 49
// end ;
3987: GO 3918
3989: POP
3990: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: DOUBLE
3997: LD_INT 1
3999: DEC
4000: ST_TO_ADDR
4001: LD_INT 3
4003: PUSH
4004: LD_INT 4
4006: PUSH
4007: LD_INT 5
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: PUSH
4015: LD_OWVAR 67
4019: ARRAY
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4218
// begin vc_engine = 3 ;
4024: LD_ADDR_OWVAR 39
4028: PUSH
4029: LD_INT 3
4031: ST_TO_ADDR
// vc_control = 1 ;
4032: LD_ADDR_OWVAR 38
4036: PUSH
4037: LD_INT 1
4039: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4040: LD_ADDR_OWVAR 40
4044: PUSH
4045: LD_INT 42
4047: PUSH
4048: LD_INT 43
4050: PUSH
4051: LD_INT 44
4053: PUSH
4054: LD_INT 45
4056: PUSH
4057: LD_INT 46
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 1
4069: PPUSH
4070: LD_INT 5
4072: PPUSH
4073: CALL_OW 12
4077: ARRAY
4078: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4079: LD_OWVAR 40
4083: PUSH
4084: LD_INT 46
4086: EQUAL
4087: IFFALSE 4099
// vc_chassis = ru_heavy_tracked else
4089: LD_ADDR_OWVAR 37
4093: PUSH
4094: LD_INT 24
4096: ST_TO_ADDR
4097: GO 4126
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4099: LD_ADDR_OWVAR 37
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 21
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 1
4116: PPUSH
4117: LD_INT 2
4119: PPUSH
4120: CALL_OW 12
4124: ARRAY
4125: ST_TO_ADDR
// veh = CreateVehicle ;
4126: LD_ADDR_VAR 0 4
4130: PUSH
4131: CALL_OW 45
4135: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4136: LD_VAR 0 4
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_INT 5
4155: PPUSH
4156: LD_INT 0
4158: PPUSH
4159: CALL_OW 49
// hc_gallery =  ;
4163: LD_ADDR_OWVAR 33
4167: PUSH
4168: LD_STRING 
4170: ST_TO_ADDR
// hc_name =  ;
4171: LD_ADDR_OWVAR 26
4175: PUSH
4176: LD_STRING 
4178: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4179: LD_INT 0
4181: PPUSH
4182: LD_INT 3
4184: PPUSH
4185: LD_INT 10
4187: PPUSH
4188: CALL_OW 380
// un = CreateHuman ;
4192: LD_ADDR_VAR 0 3
4196: PUSH
4197: CALL_OW 44
4201: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4202: LD_VAR 0 3
4206: PPUSH
4207: LD_VAR 0 4
4211: PPUSH
4212: CALL_OW 52
// end ;
4216: GO 4021
4218: POP
4219: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4220: LD_ADDR_VAR 0 2
4224: PUSH
4225: DOUBLE
4226: LD_INT 1
4228: DEC
4229: ST_TO_ADDR
4230: LD_INT 3
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: LD_INT 5
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_OWVAR 67
4248: ARRAY
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4398
// begin vc_engine = 3 ;
4253: LD_ADDR_OWVAR 39
4257: PUSH
4258: LD_INT 3
4260: ST_TO_ADDR
// vc_control = 3 ;
4261: LD_ADDR_OWVAR 38
4265: PUSH
4266: LD_INT 3
4268: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4269: LD_ADDR_OWVAR 40
4273: PUSH
4274: LD_INT 42
4276: PUSH
4277: LD_INT 43
4279: PUSH
4280: LD_INT 44
4282: PUSH
4283: LD_INT 45
4285: PUSH
4286: LD_INT 46
4288: PUSH
4289: LD_INT 49
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 1
4302: PPUSH
4303: LD_INT 5
4305: PPUSH
4306: CALL_OW 12
4310: ARRAY
4311: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4312: LD_OWVAR 40
4316: PUSH
4317: LD_INT 46
4319: EQUAL
4320: IFFALSE 4332
// vc_chassis = ru_heavy_tracked else
4322: LD_ADDR_OWVAR 37
4326: PUSH
4327: LD_INT 24
4329: ST_TO_ADDR
4330: GO 4359
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4332: LD_ADDR_OWVAR 37
4336: PUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 21
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_INT 2
4352: PPUSH
4353: CALL_OW 12
4357: ARRAY
4358: ST_TO_ADDR
// veh = CreateVehicle ;
4359: LD_ADDR_VAR 0 4
4363: PUSH
4364: CALL_OW 45
4368: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4369: LD_VAR 0 4
4373: PPUSH
4374: LD_INT 3
4376: PPUSH
4377: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_INT 6
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 49
// end ;
4396: GO 4250
4398: POP
4399: POP
// end ; end_of_file
4400: LD_VAR 0 1
4404: RET
// export function PrepareKurt ; begin
4405: LD_INT 0
4407: PPUSH
// uc_side = 8 ;
4408: LD_ADDR_OWVAR 20
4412: PUSH
4413: LD_INT 8
4415: ST_TO_ADDR
// uc_nation = 2 ;
4416: LD_ADDR_OWVAR 21
4420: PUSH
4421: LD_INT 2
4423: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4424: LD_ADDR_OWVAR 37
4428: PUSH
4429: LD_INT 13
4431: ST_TO_ADDR
// vc_engine = 1 ;
4432: LD_ADDR_OWVAR 39
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// vc_control = 1 ;
4440: LD_ADDR_OWVAR 38
4444: PUSH
4445: LD_INT 1
4447: ST_TO_ADDR
// vc_weapon = 24 ;
4448: LD_ADDR_OWVAR 40
4452: PUSH
4453: LD_INT 24
4455: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4456: LD_ADDR_EXP 25
4460: PUSH
4461: CALL_OW 45
4465: ST_TO_ADDR
// if kurtStatus > 0 then
4466: LD_EXP 26
4470: PUSH
4471: LD_INT 0
4473: GREATER
4474: IFFALSE 4526
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4476: LD_ADDR_EXP 24
4480: PUSH
4481: LD_STRING Kurt
4483: PPUSH
4484: LD_INT 0
4486: PPUSH
4487: LD_STRING 
4489: PPUSH
4490: CALL 36908 0 3
4494: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4495: LD_EXP 25
4499: PPUSH
4500: LD_INT 4
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4510: LD_EXP 24
4514: PPUSH
4515: LD_EXP 25
4519: PPUSH
4520: CALL_OW 52
// end else
4524: GO 4603
// begin hc_name =  ;
4526: LD_ADDR_OWVAR 26
4530: PUSH
4531: LD_STRING 
4533: ST_TO_ADDR
// hc_gallery =  ;
4534: LD_ADDR_OWVAR 33
4538: PUSH
4539: LD_STRING 
4541: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 10
4547: PPUSH
4548: CALL_OW 381
// Kurt = CreateHuman ;
4552: LD_ADDR_EXP 24
4556: PUSH
4557: CALL_OW 44
4561: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4562: LD_EXP 25
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4577: LD_EXP 24
4581: PPUSH
4582: LD_EXP 25
4586: PPUSH
4587: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4591: LD_EXP 24
4595: PPUSH
4596: LD_STRING AltKurt
4598: PPUSH
4599: CALL_OW 38
// end ; end ;
4603: LD_VAR 0 1
4607: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
// for i = 1 to 3 do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_INT 3
4626: PUSH
4627: FOR_TO
4628: IFFALSE 4749
// begin uc_side = 1 ;
4630: LD_ADDR_OWVAR 20
4634: PUSH
4635: LD_INT 1
4637: ST_TO_ADDR
// uc_nation = 2 ;
4638: LD_ADDR_OWVAR 21
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// hc_gallery =  ;
4646: LD_ADDR_OWVAR 33
4650: PUSH
4651: LD_STRING 
4653: ST_TO_ADDR
// hc_name =  ;
4654: LD_ADDR_OWVAR 26
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4662: LD_EXP 26
4666: PUSH
4667: LD_INT 0
4669: EQUAL
4670: PUSH
4671: LD_EXP 26
4675: PUSH
4676: LD_INT 2
4678: EQUAL
4679: OR
4680: IFFALSE 4697
// PrepareHuman ( false , 1 , 6 ) else
4682: LD_INT 0
4684: PPUSH
4685: LD_INT 1
4687: PPUSH
4688: LD_INT 6
4690: PPUSH
4691: CALL_OW 380
4695: GO 4710
// PrepareHuman ( false , 1 , 8 ) ;
4697: LD_INT 0
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_INT 8
4705: PPUSH
4706: CALL_OW 380
// un = CreateHuman ;
4710: LD_ADDR_VAR 0 3
4714: PUSH
4715: CALL_OW 44
4719: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4720: LD_VAR 0 3
4724: PPUSH
4725: LD_INT 4
4727: PPUSH
4728: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 4
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 49
// end ;
4747: GO 4627
4749: POP
4750: POP
// vc_chassis = 14 ;
4751: LD_ADDR_OWVAR 37
4755: PUSH
4756: LD_INT 14
4758: ST_TO_ADDR
// vc_engine = 3 ;
4759: LD_ADDR_OWVAR 39
4763: PUSH
4764: LD_INT 3
4766: ST_TO_ADDR
// vc_control = 1 ;
4767: LD_ADDR_OWVAR 38
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4775: LD_ADDR_OWVAR 40
4779: PUSH
4780: LD_INT 27
4782: PUSH
4783: LD_INT 26
4785: PUSH
4786: LD_INT 28
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL_OW 12
4804: ARRAY
4805: ST_TO_ADDR
// veh = CreateVehicle ;
4806: LD_ADDR_VAR 0 4
4810: PUSH
4811: CALL_OW 45
4815: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4816: LD_VAR 0 4
4820: PPUSH
4821: LD_INT 4
4823: PPUSH
4824: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4828: LD_VAR 0 4
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: LD_INT 0
4838: PPUSH
4839: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4843: LD_EXP 26
4847: PUSH
4848: LD_INT 0
4850: EQUAL
4851: PUSH
4852: LD_EXP 26
4856: PUSH
4857: LD_INT 2
4859: EQUAL
4860: OR
4861: IFFALSE 4878
// PrepareHuman ( false , 3 , 6 ) else
4863: LD_INT 0
4865: PPUSH
4866: LD_INT 3
4868: PPUSH
4869: LD_INT 6
4871: PPUSH
4872: CALL_OW 380
4876: GO 4891
// PrepareHuman ( false , 3 , 8 ) ;
4878: LD_INT 0
4880: PPUSH
4881: LD_INT 3
4883: PPUSH
4884: LD_INT 8
4886: PPUSH
4887: CALL_OW 380
// un = CreateHuman ;
4891: LD_ADDR_VAR 0 3
4895: PUSH
4896: CALL_OW 44
4900: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: LD_VAR 0 4
4910: PPUSH
4911: CALL_OW 52
// vc_chassis = 14 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 14
4922: ST_TO_ADDR
// vc_engine = 3 ;
4923: LD_ADDR_OWVAR 39
4927: PUSH
4928: LD_INT 3
4930: ST_TO_ADDR
// vc_control = 1 ;
4931: LD_ADDR_OWVAR 38
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4939: LD_ADDR_OWVAR 40
4943: PUSH
4944: LD_INT 27
4946: PUSH
4947: LD_INT 26
4949: PUSH
4950: LD_INT 28
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: CALL_OW 12
4968: ARRAY
4969: ST_TO_ADDR
// veh = CreateVehicle ;
4970: LD_ADDR_VAR 0 4
4974: PUSH
4975: CALL_OW 45
4979: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4980: LD_VAR 0 4
4984: PPUSH
4985: LD_INT 4
4987: PPUSH
4988: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4992: LD_VAR 0 4
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: LD_INT 0
5002: PPUSH
5003: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5007: LD_EXP 26
5011: PUSH
5012: LD_INT 0
5014: EQUAL
5015: PUSH
5016: LD_EXP 26
5020: PUSH
5021: LD_INT 2
5023: EQUAL
5024: OR
5025: IFFALSE 5042
// PrepareHuman ( false , 4 , 6 ) else
5027: LD_INT 0
5029: PPUSH
5030: LD_INT 4
5032: PPUSH
5033: LD_INT 6
5035: PPUSH
5036: CALL_OW 380
5040: GO 5055
// PrepareHuman ( false , 4 , 8 ) ;
5042: LD_INT 0
5044: PPUSH
5045: LD_INT 4
5047: PPUSH
5048: LD_INT 8
5050: PPUSH
5051: CALL_OW 380
// un = CreateHuman ;
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: CALL_OW 44
5064: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5065: LD_VAR 0 3
5069: PPUSH
5070: LD_INT 4
5072: PPUSH
5073: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: CALL_OW 52
// vc_chassis = 14 ;
5091: LD_ADDR_OWVAR 37
5095: PUSH
5096: LD_INT 14
5098: ST_TO_ADDR
// vc_engine = 3 ;
5099: LD_ADDR_OWVAR 39
5103: PUSH
5104: LD_INT 3
5106: ST_TO_ADDR
// vc_control = 1 ;
5107: LD_ADDR_OWVAR 38
5111: PUSH
5112: LD_INT 1
5114: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5115: LD_ADDR_OWVAR 40
5119: PUSH
5120: LD_INT 27
5122: PUSH
5123: LD_INT 26
5125: PUSH
5126: LD_INT 28
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 1
5136: PPUSH
5137: LD_INT 3
5139: PPUSH
5140: CALL_OW 12
5144: ARRAY
5145: ST_TO_ADDR
// veh = CreateVehicle ;
5146: LD_ADDR_VAR 0 4
5150: PUSH
5151: CALL_OW 45
5155: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5156: LD_VAR 0 4
5160: PPUSH
5161: LD_INT 4
5163: PPUSH
5164: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 4
5175: PPUSH
5176: LD_INT 0
5178: PPUSH
5179: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5183: LD_EXP 26
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: PUSH
5192: LD_EXP 26
5196: PUSH
5197: LD_INT 2
5199: EQUAL
5200: OR
5201: IFFALSE 5218
// PrepareHuman ( false , 2 , 4 ) else
5203: LD_INT 0
5205: PPUSH
5206: LD_INT 2
5208: PPUSH
5209: LD_INT 4
5211: PPUSH
5212: CALL_OW 380
5216: GO 5231
// PrepareHuman ( false , 2 , 8 ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_INT 8
5226: PPUSH
5227: CALL_OW 380
// un = CreateHuman ;
5231: LD_ADDR_VAR 0 3
5235: PUSH
5236: CALL_OW 44
5240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5241: LD_VAR 0 3
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_VAR 0 4
5262: PPUSH
5263: CALL_OW 52
// end ;
5267: LD_VAR 0 1
5271: RET
// export function PrepareAttackLegion ; var i , un ; begin
5272: LD_INT 0
5274: PPUSH
5275: PPUSH
5276: PPUSH
// for i = 1 to 4 do
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: DOUBLE
5283: LD_INT 1
5285: DEC
5286: ST_TO_ADDR
5287: LD_INT 4
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5401
// begin uc_side = 8 ;
5293: LD_ADDR_OWVAR 20
5297: PUSH
5298: LD_INT 8
5300: ST_TO_ADDR
// uc_nation = 2 ;
5301: LD_ADDR_OWVAR 21
5305: PUSH
5306: LD_INT 2
5308: ST_TO_ADDR
// hc_gallery =  ;
5309: LD_ADDR_OWVAR 33
5313: PUSH
5314: LD_STRING 
5316: ST_TO_ADDR
// hc_name =  ;
5317: LD_ADDR_OWVAR 26
5321: PUSH
5322: LD_STRING 
5324: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5325: LD_INT 0
5327: PPUSH
5328: LD_INT 1
5330: PUSH
5331: LD_INT 8
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 2
5343: PPUSH
5344: CALL_OW 12
5348: ARRAY
5349: PPUSH
5350: LD_INT 6
5352: PPUSH
5353: LD_INT 8
5355: PPUSH
5356: CALL_OW 12
5360: PPUSH
5361: CALL_OW 380
// un = CreateHuman ;
5365: LD_ADDR_VAR 0 3
5369: PUSH
5370: CALL_OW 44
5374: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5375: LD_VAR 0 3
5379: PPUSH
5380: LD_INT 19
5382: PPUSH
5383: LD_INT 0
5385: PPUSH
5386: CALL_OW 49
// ComCrawl ( un ) ;
5390: LD_VAR 0 3
5394: PPUSH
5395: CALL_OW 137
// end ;
5399: GO 5290
5401: POP
5402: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 8
5408: PPUSH
5409: LD_INT 2
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5419: LD_INT 20
5421: PPUSH
5422: LD_INT 3
5424: PPUSH
5425: CALL 14923 0 2
// end ; end_of_file
5429: LD_VAR 0 1
5433: RET
// every 1 do var i ;
5434: GO 5436
5436: DISABLE
5437: LD_INT 0
5439: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5440: LD_INT 10
5442: PPUSH
5443: LD_INT 122
5445: PPUSH
5446: LD_INT 145
5448: PPUSH
5449: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5453: LD_INT 137
5455: PPUSH
5456: LD_INT 84
5458: PPUSH
5459: LD_INT 61
5461: PPUSH
5462: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5466: LD_EXP 1
5470: PPUSH
5471: CALL_OW 310
5475: PPUSH
5476: CALL_OW 87
// InGameOn ;
5480: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5484: LD_INT 22
5486: PUSH
5487: LD_INT 1
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: PPUSH
5499: LD_INT 130
5501: PPUSH
5502: LD_INT 103
5504: PPUSH
5505: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5509: LD_VAR 0 1
5513: PPUSH
5514: LD_INT 114
5516: PPUSH
5517: LD_INT 102
5519: PPUSH
5520: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5524: LD_EXP 1
5528: PPUSH
5529: LD_STRING D1-JMM-1
5531: PPUSH
5532: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5536: LD_EXP 1
5540: PPUSH
5541: CALL_OW 310
5545: PPUSH
5546: CALL_OW 87
// if IsOk ( Donaldson ) then
5550: LD_EXP 3
5554: PPUSH
5555: CALL_OW 302
5559: IFFALSE 5639
// begin Say ( Donaldson , D1-Don-1 ) ;
5561: LD_EXP 3
5565: PPUSH
5566: LD_STRING D1-Don-1
5568: PPUSH
5569: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5573: LD_EXP 1
5577: PPUSH
5578: CALL_OW 310
5582: PPUSH
5583: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5587: LD_EXP 1
5591: PPUSH
5592: LD_STRING D1-JMM-2
5594: PPUSH
5595: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5599: LD_EXP 1
5603: PPUSH
5604: CALL_OW 310
5608: PPUSH
5609: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5613: LD_EXP 3
5617: PPUSH
5618: LD_STRING D1-Don-2
5620: PPUSH
5621: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5625: LD_EXP 1
5629: PPUSH
5630: CALL_OW 310
5634: PPUSH
5635: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5639: LD_INT 22
5641: PUSH
5642: LD_INT 1
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: PPUSH
5654: LD_INT 110
5656: PPUSH
5657: LD_INT 101
5659: PPUSH
5660: CALL_OW 171
// wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 310
5680: PPUSH
5681: CALL_OW 87
// wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5692: LD_EXP 1
5696: PPUSH
5697: CALL_OW 310
5701: PPUSH
5702: CALL_OW 87
// wait ( 0 0$1 ) ;
5706: LD_INT 35
5708: PPUSH
5709: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5713: LD_EXP 1
5717: PPUSH
5718: CALL_OW 310
5722: PPUSH
5723: CALL_OW 87
// wait ( 0 0$1 ) ;
5727: LD_INT 35
5729: PPUSH
5730: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5734: LD_EXP 1
5738: PPUSH
5739: CALL_OW 310
5743: PPUSH
5744: CALL_OW 87
// end ;
5748: PPOPN 1
5750: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5751: LD_INT 1
5753: PPUSH
5754: LD_INT 102
5756: PPUSH
5757: LD_INT 94
5759: PPUSH
5760: CALL_OW 293
5764: IFFALSE 5955
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5772: LD_INT 102
5774: PPUSH
5775: LD_INT 94
5777: PPUSH
5778: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5782: LD_INT 22
5784: PUSH
5785: LD_INT 1
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 26
5794: PUSH
5795: LD_INT 1
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 2
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 25
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PUSH
5825: LD_INT 25
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 4
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 25
5847: PUSH
5848: LD_INT 5
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: LD_INT 25
5857: PUSH
5858: LD_INT 8
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: LIST
5878: PPUSH
5879: CALL_OW 69
5883: PPUSH
5884: LD_STRING D1-Sol1-2
5886: PPUSH
5887: LD_STRING 
5889: PPUSH
5890: CALL 12328 0 3
// Say ( JMM , D1-JMM-3 ) ;
5894: LD_EXP 1
5898: PPUSH
5899: LD_STRING D1-JMM-3
5901: PPUSH
5902: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5906: LD_STRING M1
5908: PPUSH
5909: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5913: LD_ADDR_VAR 0 1
5917: PUSH
5918: LD_INT 22
5920: PUSH
5921: LD_INT 1
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PPUSH
5928: CALL_OW 69
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5953
// ComMoveXY ( i , 95 , 84 ) ;
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 95
5943: PPUSH
5944: LD_INT 84
5946: PPUSH
5947: CALL_OW 111
5951: GO 5933
5953: POP
5954: POP
// end ;
5955: PPOPN 1
5957: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5958: GO 5960
5960: DISABLE
5961: LD_INT 0
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: LD_INT 8
5974: PPUSH
5975: LD_INT 22
5977: PUSH
5978: LD_INT 3
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 25
5987: PUSH
5988: LD_INT 9
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 70
6003: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6004: LD_ADDR_VAR 0 3
6008: PUSH
6009: LD_INT 22
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: EMPTY
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: ST_TO_ADDR
// enable ;
6027: ENABLE
// for i in your_units do
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: FOR_IN
6039: IFFALSE 6705
// begin if See ( 3 , i ) then
6041: LD_INT 3
6043: PPUSH
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 292
6053: IFFALSE 6703
// begin disable ;
6055: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_INT 96
6063: PPUSH
6064: LD_INT 85
6066: PPUSH
6067: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 96
6078: PPUSH
6079: LD_INT 85
6081: PPUSH
6082: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: LD_INT 96
6093: PPUSH
6094: LD_INT 85
6096: PPUSH
6097: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6101: LD_VAR 0 2
6105: PPUSH
6106: LD_INT 96
6108: PPUSH
6109: LD_INT 85
6111: PPUSH
6112: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 96
6123: PPUSH
6124: LD_INT 85
6126: PPUSH
6127: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6131: LD_VAR 0 2
6135: PPUSH
6136: LD_INT 96
6138: PPUSH
6139: LD_INT 85
6141: PPUSH
6142: CALL_OW 214
// wait ( 0 0$2 ) ;
6146: LD_INT 70
6148: PPUSH
6149: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6153: LD_EXP 1
6157: PPUSH
6158: LD_STRING D1a-JMM-1
6160: PPUSH
6161: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1a-Don-1
6172: PPUSH
6173: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6177: LD_ADDR_VAR 0 1
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PPUSH
6192: CALL_OW 69
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6217
// ComMoveXY ( i , 109 , 102 ) ;
6200: LD_VAR 0 1
6204: PPUSH
6205: LD_INT 109
6207: PPUSH
6208: LD_INT 102
6210: PPUSH
6211: CALL_OW 111
6215: GO 6197
6217: POP
6218: POP
// Say ( JMM , D1a-JMM-2 ) ;
6219: LD_EXP 1
6223: PPUSH
6224: LD_STRING D1a-JMM-2
6226: PPUSH
6227: CALL_OW 88
// wait ( 0 0$10 ) ;
6231: LD_INT 350
6233: PPUSH
6234: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6238: LD_EXP 1
6242: PPUSH
6243: CALL_OW 310
6247: PPUSH
6248: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6252: LD_EXP 3
6256: PPUSH
6257: LD_STRING D1b-Don-1
6259: PPUSH
6260: CALL_OW 88
// if IsOk ( Donaldson ) then
6264: LD_EXP 3
6268: PPUSH
6269: CALL_OW 302
6273: IFFALSE 6287
// Say ( JMM , D1b-JMM-1 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D1b-JMM-1
6282: PPUSH
6283: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 26
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 2
6309: PUSH
6310: LD_INT 25
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 25
6322: PUSH
6323: LD_INT 2
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: PUSH
6330: LD_INT 25
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 25
6342: PUSH
6343: LD_INT 4
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 25
6352: PUSH
6353: LD_INT 5
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 8
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: PPUSH
6384: CALL_OW 69
6388: PPUSH
6389: LD_STRING D1b-Sol1-1
6391: PPUSH
6392: LD_STRING 
6394: PPUSH
6395: CALL 12328 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6399: LD_EXP 3
6403: PPUSH
6404: LD_STRING D1b-Don-2
6406: PPUSH
6407: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6411: LD_EXP 1
6415: PPUSH
6416: LD_STRING D1b-JMM-2
6418: PPUSH
6419: CALL_OW 88
// dec = ShowQuery1 ;
6423: LD_ADDR_VAR 0 4
6427: PUSH
6428: CALL 12797 0 0
6432: ST_TO_ADDR
// if dec = 1 then
6433: LD_VAR 0 4
6437: PUSH
6438: LD_INT 1
6440: EQUAL
6441: IFFALSE 6547
// begin Say ( JMM , D2-JMM-1 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D2-JMM-1
6450: PPUSH
6451: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6455: LD_EXP 22
6459: PPUSH
6460: LD_STRING D2-Pow-1
6462: PPUSH
6463: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2a-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6479: LD_EXP 22
6483: PPUSH
6484: LD_STRING D2a-Pow-1
6486: PPUSH
6487: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6491: LD_EXP 1
6495: PPUSH
6496: LD_STRING D2a-JMM-2
6498: PPUSH
6499: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6503: LD_EXP 22
6507: PPUSH
6508: LD_STRING D2a-Pow-2
6510: PPUSH
6511: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING D2a-JMM-3
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING D2a-Pow-3
6534: PPUSH
6535: CALL_OW 94
// secondPass = 2 ;
6539: LD_ADDR_EXP 27
6543: PUSH
6544: LD_INT 2
6546: ST_TO_ADDR
// end ; if dec = 2 then
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: EQUAL
6555: IFFALSE 6649
// begin Say ( JMM , D2-JMM-1 ) ;
6557: LD_EXP 1
6561: PPUSH
6562: LD_STRING D2-JMM-1
6564: PPUSH
6565: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6569: LD_EXP 22
6573: PPUSH
6574: LD_STRING D2-Pow-1
6576: PPUSH
6577: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6581: LD_EXP 1
6585: PPUSH
6586: LD_STRING D2b-JMM-1
6588: PPUSH
6589: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6593: LD_EXP 22
6597: PPUSH
6598: LD_STRING D2b-Pow-1
6600: PPUSH
6601: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_STRING D2c-JMM-1
6612: PPUSH
6613: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6617: LD_EXP 22
6621: PPUSH
6622: LD_STRING D2c-Pow-1
6624: PPUSH
6625: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6629: LD_EXP 1
6633: PPUSH
6634: LD_STRING D2c-JMM-2
6636: PPUSH
6637: CALL_OW 88
// secondPass = 2 ;
6641: LD_ADDR_EXP 27
6645: PUSH
6646: LD_INT 2
6648: ST_TO_ADDR
// end ; if dec = 3 then
6649: LD_VAR 0 4
6653: PUSH
6654: LD_INT 3
6656: EQUAL
6657: IFFALSE 6667
// secondPass = 1 ;
6659: LD_ADDR_EXP 27
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// InGameOff ;
6667: CALL_OW 9
// ruAI = 1 ;
6671: LD_ADDR_EXP 41
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6679: LD_INT 1
6681: PPUSH
6682: LD_INT 3
6684: PPUSH
6685: LD_INT 2
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: CALL_OW 80
// SaveForQuickRestart ;
6695: CALL_OW 22
// exit ;
6699: POP
6700: POP
6701: GO 6707
// end ; end ;
6703: GO 6038
6705: POP
6706: POP
// end ;
6707: PPOPN 4
6709: END
// every 1 1$0 trigger secondPass = 2 do
6710: LD_EXP 27
6714: PUSH
6715: LD_INT 2
6717: EQUAL
6718: IFFALSE 6938
6720: GO 6722
6722: DISABLE
// begin PowellSupport1 ;
6723: CALL 1970 0 0
// DialogueOn ;
6727: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6731: LD_EXP 1
6735: PPUSH
6736: LD_STRING DC1-JMM-1
6738: PPUSH
6739: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6743: LD_EXP 22
6747: PPUSH
6748: LD_STRING DC1-Pow-1
6750: PPUSH
6751: CALL_OW 94
// DialogueOff ;
6755: CALL_OW 7
// wait ( 3 3$0 ) ;
6759: LD_INT 6300
6761: PPUSH
6762: CALL_OW 67
// PowellSupport2 ;
6766: CALL 2435 0 0
// DialogueOn ;
6770: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6774: LD_EXP 1
6778: PPUSH
6779: LD_STRING DC2-JMM-1
6781: PPUSH
6782: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6786: LD_EXP 22
6790: PPUSH
6791: LD_STRING DC2-Pow-1
6793: PPUSH
6794: CALL_OW 94
// DialogueOff ;
6798: CALL_OW 7
// wait ( 3 3$00 ) ;
6802: LD_INT 6300
6804: PPUSH
6805: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6809: LD_INT 35
6811: PPUSH
6812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6816: LD_INT 22
6818: PUSH
6819: LD_INT 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 30
6831: PUSH
6832: LD_INT 0
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 30
6841: PUSH
6842: LD_INT 1
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 69
6862: PUSH
6863: LD_INT 11
6865: PPUSH
6866: LD_INT 22
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: NOT
6881: AND
6882: IFFALSE 6809
// wait ( 0 0$10 ) ;
6884: LD_INT 350
6886: PPUSH
6887: CALL_OW 67
// Legion ;
6891: CALL 6939 0 0
// wait ( 6 6$0 ) ;
6895: LD_INT 12600
6897: PPUSH
6898: CALL_OW 67
// PowellSupport3 ;
6902: CALL 2975 0 0
// DialogueOn ;
6906: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6910: LD_EXP 22
6914: PPUSH
6915: LD_STRING DC3-Pow-1
6917: PPUSH
6918: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6922: LD_EXP 1
6926: PPUSH
6927: LD_STRING DC3-JMM-1
6929: PPUSH
6930: CALL_OW 88
// DialogueOff ;
6934: CALL_OW 7
// end ;
6938: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6939: LD_INT 0
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6957: LD_ADDR_VAR 0 5
6961: PUSH
6962: LD_INT 22
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 0
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: PPUSH
7015: CALL_OW 69
7019: ST_TO_ADDR
// crates := 0 ;
7020: LD_ADDR_VAR 0 8
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// oil := 0 ;
7028: LD_ADDR_VAR 0 9
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// siberite := 0 ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// payForNeutral := false ;
7044: LD_ADDR_VAR 0 13
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// payForHelp := false ;
7052: LD_ADDR_VAR 0 14
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// for i in tmp do
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_VAR 0 5
7069: PUSH
7070: FOR_IN
7071: IFFALSE 7162
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7073: LD_ADDR_VAR 0 8
7077: PUSH
7078: LD_VAR 0 8
7082: PUSH
7083: LD_VAR 0 2
7087: PPUSH
7088: CALL_OW 274
7092: PPUSH
7093: LD_INT 1
7095: PPUSH
7096: CALL_OW 275
7100: PLUS
7101: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7102: LD_ADDR_VAR 0 9
7106: PUSH
7107: LD_VAR 0 9
7111: PUSH
7112: LD_VAR 0 2
7116: PPUSH
7117: CALL_OW 274
7121: PPUSH
7122: LD_INT 2
7124: PPUSH
7125: CALL_OW 275
7129: PLUS
7130: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7131: LD_ADDR_VAR 0 10
7135: PUSH
7136: LD_VAR 0 10
7140: PUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 274
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: CALL_OW 275
7158: PLUS
7159: ST_TO_ADDR
// end ;
7160: GO 7070
7162: POP
7163: POP
// PrepareKurt ;
7164: CALL 4405 0 0
// if not Kurt then
7168: LD_EXP 24
7172: NOT
7173: IFFALSE 7177
// exit ;
7175: GO 9309
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7177: LD_EXP 25
7181: PPUSH
7182: LD_INT 144
7184: PPUSH
7185: LD_INT 111
7187: PPUSH
7188: CALL_OW 111
// wait ( 0 0$2 ) ;
7192: LD_INT 70
7194: PPUSH
7195: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7199: LD_INT 167
7201: PPUSH
7202: LD_INT 121
7204: PPUSH
7205: LD_INT 1
7207: PPUSH
7208: LD_INT 10
7210: NEG
7211: PPUSH
7212: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7216: LD_EXP 24
7220: PPUSH
7221: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7225: LD_EXP 24
7229: PPUSH
7230: CALL_OW 87
// wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// DialogueOn ;
7241: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7245: LD_INT 22
7247: PUSH
7248: LD_INT 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 26
7257: PUSH
7258: LD_INT 1
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 2
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 1
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 25
7280: PUSH
7281: LD_INT 2
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 25
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 4
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 25
7310: PUSH
7311: LD_INT 5
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 25
7320: PUSH
7321: LD_INT 8
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: PPUSH
7342: CALL_OW 69
7346: PPUSH
7347: LD_STRING D3-Sol1-1
7349: PPUSH
7350: LD_STRING 
7352: PPUSH
7353: CALL 12328 0 3
// if KurtStatus then
7357: LD_EXP 26
7361: IFFALSE 7461
// begin Say ( Kurt , D3-Kurt-1 ) ;
7363: LD_EXP 24
7367: PPUSH
7368: LD_STRING D3-Kurt-1
7370: PPUSH
7371: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7375: LD_EXP 1
7379: PPUSH
7380: LD_STRING D3-JMM-1
7382: PPUSH
7383: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7387: LD_EXP 24
7391: PPUSH
7392: LD_STRING D3-Kurt-2
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D3-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7411: LD_EXP 24
7415: PPUSH
7416: LD_STRING D3-Kurt-4
7418: PPUSH
7419: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7423: LD_EXP 1
7427: PPUSH
7428: LD_STRING D3-JMM-4
7430: PPUSH
7431: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7435: LD_EXP 24
7439: PPUSH
7440: LD_STRING D3-Kurt-5
7442: PPUSH
7443: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-5a
7454: PPUSH
7455: CALL_OW 88
// end else
7459: GO 7557
// begin Say ( Kurt , D3-Kurt-1 ) ;
7461: LD_EXP 24
7465: PPUSH
7466: LD_STRING D3-Kurt-1
7468: PPUSH
7469: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7473: LD_EXP 1
7477: PPUSH
7478: LD_STRING D3-JMM-1
7480: PPUSH
7481: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7485: LD_EXP 24
7489: PPUSH
7490: LD_STRING D3-Kurt-3
7492: PPUSH
7493: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7497: LD_EXP 1
7501: PPUSH
7502: LD_STRING D3-JMM-3
7504: PPUSH
7505: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7509: LD_EXP 24
7513: PPUSH
7514: LD_STRING D3-Kurt-4
7516: PPUSH
7517: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7521: LD_EXP 1
7525: PPUSH
7526: LD_STRING D3-JMM-4
7528: PPUSH
7529: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7533: LD_EXP 24
7537: PPUSH
7538: LD_STRING D3-Kurt-5
7540: PPUSH
7541: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7545: LD_EXP 24
7549: PPUSH
7550: LD_STRING D3-Kurt-5b
7552: PPUSH
7553: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7557: LD_VAR 0 8
7561: PUSH
7562: LD_INT 120
7564: PUSH
7565: LD_INT 60
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_EXP 26
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ARRAY
7581: GREATEREQUAL
7582: PUSH
7583: LD_VAR 0 10
7587: PUSH
7588: LD_INT 120
7590: PUSH
7591: LD_INT 60
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_EXP 26
7602: PUSH
7603: LD_INT 1
7605: PLUS
7606: ARRAY
7607: GREATEREQUAL
7608: AND
7609: IFFALSE 7661
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_STRING Q2
7618: PUSH
7619: LD_STRING Q2K
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_EXP 26
7630: PUSH
7631: LD_INT 1
7633: PLUS
7634: ARRAY
7635: PPUSH
7636: LD_INT 1
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 4
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 98
7658: ST_TO_ADDR
7659: GO 7705
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7661: LD_ADDR_VAR 0 3
7665: PUSH
7666: LD_STRING Q2
7668: PUSH
7669: LD_STRING Q2K
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_EXP 26
7680: PUSH
7681: LD_INT 1
7683: PLUS
7684: ARRAY
7685: PPUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 98
7704: ST_TO_ADDR
// if dec1 = 1 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 1
7712: EQUAL
7713: IFFALSE 7747
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7715: LD_EXP 1
7719: PPUSH
7720: LD_STRING D3Ka-JMM-1
7722: PPUSH
7723: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7727: LD_EXP 24
7731: PPUSH
7732: LD_STRING D3Ka-Kurt-1
7734: PPUSH
7735: CALL_OW 88
// warWithLegion = 1 ;
7739: LD_ADDR_EXP 30
7743: PUSH
7744: LD_INT 1
7746: ST_TO_ADDR
// end ; if dec1 = 2 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: IFFALSE 7839
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7757: LD_EXP 1
7761: PPUSH
7762: LD_STRING D3Kb-JMM-1
7764: PPUSH
7765: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7769: LD_EXP 24
7773: PPUSH
7774: LD_STRING D3Kb-Kurt-1
7776: PPUSH
7777: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7781: LD_ADDR_VAR 0 11
7785: PUSH
7786: LD_INT 120
7788: PUSH
7789: LD_INT 60
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_EXP 26
7800: PUSH
7801: LD_INT 1
7803: PLUS
7804: ARRAY
7805: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7806: LD_ADDR_VAR 0 12
7810: PUSH
7811: LD_INT 120
7813: PUSH
7814: LD_INT 60
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_EXP 26
7825: PUSH
7826: LD_INT 1
7828: PLUS
7829: ARRAY
7830: ST_TO_ADDR
// payForNeutral := true ;
7831: LD_ADDR_VAR 0 13
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// end ; if dec1 = 3 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 3
7846: EQUAL
7847: IFFALSE 8082
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7849: LD_EXP 1
7853: PPUSH
7854: LD_STRING D3Kc1-JMM-1
7856: PPUSH
7857: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7861: LD_EXP 24
7865: PPUSH
7866: LD_STRING D3Kc1-Kurt-1
7868: PPUSH
7869: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7873: LD_EXP 1
7877: PPUSH
7878: LD_STRING D3Kc1-JMM-2
7880: PPUSH
7881: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7885: LD_EXP 24
7889: PPUSH
7890: LD_STRING D3Kc1-Kurt-2
7892: PPUSH
7893: CALL_OW 88
// askSiberite = 1 ;
7897: LD_ADDR_EXP 32
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7905: LD_ADDR_VAR 0 4
7909: PUSH
7910: LD_STRING Q2b
7912: PPUSH
7913: LD_INT 1
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 98
7931: ST_TO_ADDR
// if dec2 = 1 then
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 1
7939: EQUAL
7940: IFFALSE 7974
// begin Say ( JMM , D4a-JMM-1 ) ;
7942: LD_EXP 1
7946: PPUSH
7947: LD_STRING D4a-JMM-1
7949: PPUSH
7950: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7954: LD_EXP 24
7958: PPUSH
7959: LD_STRING D4b-Kurt-1
7961: PPUSH
7962: CALL_OW 88
// warWithLegion = 1 ;
7966: LD_ADDR_EXP 30
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// end ; if dec2 = 2 then
7974: LD_VAR 0 4
7978: PUSH
7979: LD_INT 2
7981: EQUAL
7982: IFFALSE 8016
// begin Say ( JMM , D4b-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D4b-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7996: LD_EXP 24
8000: PPUSH
8001: LD_STRING D4b-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// warWithLegion = 1 ;
8008: LD_ADDR_EXP 30
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ; if dec2 = 3 then
8016: LD_VAR 0 4
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8082
// begin Say ( JMM , D4c-JMM-1 ) ;
8026: LD_EXP 1
8030: PPUSH
8031: LD_STRING D4c-JMM-1
8033: PPUSH
8034: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8038: LD_EXP 24
8042: PPUSH
8043: LD_STRING D4c-Kurt-1
8045: PPUSH
8046: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D4c-JMM-2
8057: PPUSH
8058: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8062: LD_EXP 24
8066: PPUSH
8067: LD_STRING D4c-Kurt-2
8069: PPUSH
8070: CALL_OW 88
// fakeInfo = 1 ;
8074: LD_ADDR_EXP 31
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 4
8089: EQUAL
8090: IFFALSE 9165
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8092: LD_EXP 1
8096: PPUSH
8097: LD_STRING D3Kd-JMM-1
8099: PPUSH
8100: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8104: LD_VAR 0 8
8108: PUSH
8109: LD_INT 200
8111: PUSH
8112: LD_INT 120
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_EXP 26
8123: PUSH
8124: LD_INT 1
8126: PLUS
8127: ARRAY
8128: GREATEREQUAL
8129: PUSH
8130: LD_VAR 0 10
8134: PUSH
8135: LD_INT 200
8137: PUSH
8138: LD_INT 120
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_EXP 26
8149: PUSH
8150: LD_INT 1
8152: PLUS
8153: ARRAY
8154: GREATEREQUAL
8155: AND
8156: IFFALSE 8208
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8158: LD_ADDR_VAR 0 4
8162: PUSH
8163: LD_STRING Q2a
8165: PUSH
8166: LD_STRING Q2aK
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_EXP 26
8177: PUSH
8178: LD_INT 1
8180: PLUS
8181: ARRAY
8182: PPUSH
8183: LD_INT 1
8185: PUSH
8186: LD_INT 2
8188: PUSH
8189: LD_INT 3
8191: PUSH
8192: LD_INT 4
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 98
8205: ST_TO_ADDR
8206: GO 8385
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8208: LD_VAR 0 8
8212: PUSH
8213: LD_INT 120
8215: PUSH
8216: LD_INT 60
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 26
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: GREATEREQUAL
8233: PUSH
8234: LD_VAR 0 10
8238: PUSH
8239: LD_INT 120
8241: PUSH
8242: LD_INT 60
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_EXP 26
8253: PUSH
8254: LD_INT 1
8256: PLUS
8257: ARRAY
8258: GREATEREQUAL
8259: AND
8260: IFFALSE 8308
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8262: LD_ADDR_VAR 0 4
8266: PUSH
8267: LD_STRING Q2a
8269: PUSH
8270: LD_STRING Q2aK
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_EXP 26
8281: PUSH
8282: LD_INT 1
8284: PLUS
8285: ARRAY
8286: PPUSH
8287: LD_INT 1
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 4
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 98
8305: ST_TO_ADDR
8306: GO 8385
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8308: LD_STRING Q2d
8310: PUSH
8311: LD_STRING Q2dK
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_EXP 26
8322: PUSH
8323: LD_INT 1
8325: PLUS
8326: ARRAY
8327: PPUSH
8328: CALL_OW 97
8332: PUSH
8333: LD_INT 1
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8344
8341: POP
// ; end ;
8342: GO 8345
8344: POP
// dec2 := 0 ;
8345: LD_ADDR_VAR 0 4
8349: PUSH
8350: LD_INT 0
8352: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8353: LD_EXP 1
8357: PPUSH
8358: LD_STRING D3Kc1-JMM-1
8360: PPUSH
8361: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8365: LD_EXP 24
8369: PPUSH
8370: LD_STRING D3Kc2-Kurt-1
8372: PPUSH
8373: CALL_OW 88
// warWithLegion := 1 ;
8377: LD_ADDR_EXP 30
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// end ; if dec2 = 1 then
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 1
8392: EQUAL
8393: IFFALSE 8427
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D5Ka-JMM-1
8402: PPUSH
8403: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8407: LD_EXP 24
8411: PPUSH
8412: LD_STRING D5Ka-Kurt-1
8414: PPUSH
8415: CALL_OW 88
// warWithLegion = 1 ;
8419: LD_ADDR_EXP 30
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// end ; if dec2 = 2 then
8427: LD_VAR 0 4
8431: PUSH
8432: LD_INT 2
8434: EQUAL
8435: IFFALSE 8519
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8437: LD_EXP 1
8441: PPUSH
8442: LD_STRING D3Kb-JMM-1
8444: PPUSH
8445: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8449: LD_EXP 24
8453: PPUSH
8454: LD_STRING D3Kb-Kurt-1
8456: PPUSH
8457: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8461: LD_ADDR_VAR 0 11
8465: PUSH
8466: LD_INT 120
8468: PUSH
8469: LD_INT 60
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_EXP 26
8480: PUSH
8481: LD_INT 1
8483: PLUS
8484: ARRAY
8485: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8486: LD_ADDR_VAR 0 12
8490: PUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 60
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_EXP 26
8505: PUSH
8506: LD_INT 1
8508: PLUS
8509: ARRAY
8510: ST_TO_ADDR
// payForNeutral := true ;
8511: LD_ADDR_VAR 0 13
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// end ; if dec2 = 3 then
8519: LD_VAR 0 4
8523: PUSH
8524: LD_INT 3
8526: EQUAL
8527: IFFALSE 8611
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8529: LD_EXP 1
8533: PPUSH
8534: LD_STRING D3Ke-JMM-1
8536: PPUSH
8537: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8541: LD_EXP 24
8545: PPUSH
8546: LD_STRING D3Ke-Kurt-1
8548: PPUSH
8549: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8553: LD_ADDR_VAR 0 11
8557: PUSH
8558: LD_INT 200
8560: PUSH
8561: LD_INT 120
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_EXP 26
8572: PUSH
8573: LD_INT 1
8575: PLUS
8576: ARRAY
8577: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8578: LD_ADDR_VAR 0 12
8582: PUSH
8583: LD_INT 200
8585: PUSH
8586: LD_INT 120
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_EXP 26
8597: PUSH
8598: LD_INT 1
8600: PLUS
8601: ARRAY
8602: ST_TO_ADDR
// payForHelp := true ;
8603: LD_ADDR_VAR 0 14
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// end ; if dec2 = 4 then
8611: LD_VAR 0 4
8615: PUSH
8616: LD_INT 4
8618: EQUAL
8619: IFFALSE 8854
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8621: LD_EXP 1
8625: PPUSH
8626: LD_STRING D3Kc1-JMM-1
8628: PPUSH
8629: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8633: LD_EXP 24
8637: PPUSH
8638: LD_STRING D3Kc1-Kurt-1
8640: PPUSH
8641: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8645: LD_EXP 1
8649: PPUSH
8650: LD_STRING D3Kc1-JMM-2
8652: PPUSH
8653: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8657: LD_EXP 24
8661: PPUSH
8662: LD_STRING D3Kc1-Kurt-2
8664: PPUSH
8665: CALL_OW 88
// askSiberite = 1 ;
8669: LD_ADDR_EXP 32
8673: PUSH
8674: LD_INT 1
8676: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_STRING Q2b
8684: PPUSH
8685: LD_INT 1
8687: PUSH
8688: LD_INT 2
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: PPUSH
8699: CALL_OW 98
8703: ST_TO_ADDR
// if dec2 = 1 then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: IFFALSE 8746
// begin Say ( JMM , D4a-JMM-1 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4a-JMM-1
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8726: LD_EXP 24
8730: PPUSH
8731: LD_STRING D4b-Kurt-1
8733: PPUSH
8734: CALL_OW 88
// warWithLegion = 1 ;
8738: LD_ADDR_EXP 30
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; if dec2 = 2 then
8746: LD_VAR 0 4
8750: PUSH
8751: LD_INT 2
8753: EQUAL
8754: IFFALSE 8788
// begin Say ( JMM , D4b-JMM-1 ) ;
8756: LD_EXP 1
8760: PPUSH
8761: LD_STRING D4b-JMM-1
8763: PPUSH
8764: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8768: LD_EXP 24
8772: PPUSH
8773: LD_STRING D4b-Kurt-1
8775: PPUSH
8776: CALL_OW 88
// warWithLegion = 1 ;
8780: LD_ADDR_EXP 30
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// end ; if dec2 = 3 then
8788: LD_VAR 0 4
8792: PUSH
8793: LD_INT 3
8795: EQUAL
8796: IFFALSE 8854
// begin Say ( JMM , D4c-JMM-1 ) ;
8798: LD_EXP 1
8802: PPUSH
8803: LD_STRING D4c-JMM-1
8805: PPUSH
8806: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8810: LD_EXP 24
8814: PPUSH
8815: LD_STRING D4c-Kurt-1
8817: PPUSH
8818: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8822: LD_EXP 1
8826: PPUSH
8827: LD_STRING D4c-JMM-2
8829: PPUSH
8830: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8834: LD_EXP 24
8838: PPUSH
8839: LD_STRING D4c-Kurt-2
8841: PPUSH
8842: CALL_OW 88
// fakeInfo = 1 ;
8846: LD_ADDR_EXP 31
8850: PUSH
8851: LD_INT 1
8853: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8854: LD_VAR 0 13
8858: PUSH
8859: LD_VAR 0 14
8863: OR
8864: IFFALSE 9165
// begin for i in tmp do
8866: LD_ADDR_VAR 0 2
8870: PUSH
8871: LD_VAR 0 5
8875: PUSH
8876: FOR_IN
8877: IFFALSE 9163
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8879: LD_ADDR_VAR 0 6
8883: PUSH
8884: LD_VAR 0 2
8888: PPUSH
8889: CALL_OW 274
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: CALL_OW 275
8901: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8902: LD_ADDR_VAR 0 7
8906: PUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: CALL_OW 274
8916: PPUSH
8917: LD_INT 3
8919: PPUSH
8920: CALL_OW 275
8924: ST_TO_ADDR
// if cr then
8925: LD_VAR 0 11
8929: IFFALSE 9043
// begin if tmp2 and tmp2 < cr then
8931: LD_VAR 0 6
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: LD_VAR 0 11
8945: LESS
8946: AND
8947: IFFALSE 8995
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8949: LD_VAR 0 2
8953: PPUSH
8954: CALL_OW 274
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 11
8966: PUSH
8967: LD_VAR 0 6
8971: MINUS
8972: PPUSH
8973: CALL_OW 277
// cr := cr - tmp2 ;
8977: LD_ADDR_VAR 0 11
8981: PUSH
8982: LD_VAR 0 11
8986: PUSH
8987: LD_VAR 0 6
8991: MINUS
8992: ST_TO_ADDR
// end else
8993: GO 9043
// if tmp2 > cr then
8995: LD_VAR 0 6
8999: PUSH
9000: LD_VAR 0 11
9004: GREATER
9005: IFFALSE 9043
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9007: LD_VAR 0 2
9011: PPUSH
9012: CALL_OW 274
9016: PPUSH
9017: LD_INT 1
9019: PPUSH
9020: LD_VAR 0 6
9024: PUSH
9025: LD_VAR 0 11
9029: MINUS
9030: PPUSH
9031: CALL_OW 277
// cr := 0 ;
9035: LD_ADDR_VAR 0 11
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// end ; end ; if sb then
9043: LD_VAR 0 12
9047: IFFALSE 9161
// begin if tmp3 and tmp3 < sb then
9049: LD_VAR 0 7
9053: PUSH
9054: LD_VAR 0 7
9058: PUSH
9059: LD_VAR 0 12
9063: LESS
9064: AND
9065: IFFALSE 9113
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: CALL_OW 274
9076: PPUSH
9077: LD_INT 3
9079: PPUSH
9080: LD_VAR 0 12
9084: PUSH
9085: LD_VAR 0 7
9089: MINUS
9090: PPUSH
9091: CALL_OW 277
// sb := sb - tmp3 ;
9095: LD_ADDR_VAR 0 12
9099: PUSH
9100: LD_VAR 0 12
9104: PUSH
9105: LD_VAR 0 7
9109: MINUS
9110: ST_TO_ADDR
// end else
9111: GO 9161
// if tmp3 > sb then
9113: LD_VAR 0 7
9117: PUSH
9118: LD_VAR 0 12
9122: GREATER
9123: IFFALSE 9161
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9125: LD_VAR 0 2
9129: PPUSH
9130: CALL_OW 274
9134: PPUSH
9135: LD_INT 3
9137: PPUSH
9138: LD_VAR 0 7
9142: PUSH
9143: LD_VAR 0 12
9147: MINUS
9148: PPUSH
9149: CALL_OW 277
// sb := 0 ;
9153: LD_ADDR_VAR 0 12
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// end ; end ; end ;
9161: GO 8876
9163: POP
9164: POP
// end ; end ; DialogueOff ;
9165: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9169: LD_INT 167
9171: PPUSH
9172: LD_INT 121
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9182: LD_EXP 24
9186: PPUSH
9187: LD_EXP 25
9191: PPUSH
9192: CALL_OW 120
// wait ( 0 0$1 ) ;
9196: LD_INT 35
9198: PPUSH
9199: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9203: LD_EXP 25
9207: PPUSH
9208: LD_INT 4
9210: PPUSH
9211: CALL_OW 113
// wait ( 0 0$3 ) ;
9215: LD_INT 105
9217: PPUSH
9218: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9222: LD_EXP 24
9226: PPUSH
9227: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9231: LD_EXP 25
9235: PPUSH
9236: CALL_OW 64
// wait ( 0 0$3 ) ;
9240: LD_INT 105
9242: PPUSH
9243: CALL_OW 67
// if payForHelp then
9247: LD_VAR 0 14
9251: IFFALSE 9309
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9253: LD_INT 36
9255: PPUSH
9256: LD_INT 57
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9266: LD_INT 51
9268: PPUSH
9269: LD_INT 63
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9279: LD_INT 93
9281: PPUSH
9282: LD_INT 65
9284: PPUSH
9285: LD_INT 1
9287: PPUSH
9288: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9292: LD_INT 42
9294: PPUSH
9295: LD_INT 12
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 244
// PrepareLegionForPlayer ;
9305: CALL 4608 0 0
// end ; end ;
9309: LD_VAR 0 1
9313: RET
// every 0 0$10 trigger warWithLegion = 1 do
9314: LD_EXP 30
9318: PUSH
9319: LD_INT 1
9321: EQUAL
9322: IFFALSE 9331
9324: GO 9326
9326: DISABLE
// PrepareAttackLegion ;
9327: CALL 5272 0 0
9331: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9332: LD_EXP 15
9336: PPUSH
9337: CALL_OW 305
9341: PUSH
9342: LD_EXP 15
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 289
9354: NOT
9355: AND
9356: PUSH
9357: LD_EXP 15
9361: PPUSH
9362: LD_INT 2
9364: PPUSH
9365: CALL_OW 289
9369: NOT
9370: AND
9371: PUSH
9372: LD_EXP 15
9376: PPUSH
9377: LD_INT 3
9379: PPUSH
9380: CALL_OW 289
9384: NOT
9385: AND
9386: IFFALSE 9403
9388: GO 9390
9390: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9391: LD_EXP 15
9395: PPUSH
9396: LD_INT 4
9398: PPUSH
9399: CALL_OW 235
9403: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9404: LD_EXP 16
9408: PPUSH
9409: CALL_OW 305
9413: PUSH
9414: LD_EXP 16
9418: PPUSH
9419: LD_INT 1
9421: PPUSH
9422: CALL_OW 289
9426: NOT
9427: AND
9428: PUSH
9429: LD_EXP 16
9433: PPUSH
9434: LD_INT 2
9436: PPUSH
9437: CALL_OW 289
9441: NOT
9442: AND
9443: PUSH
9444: LD_EXP 16
9448: PPUSH
9449: LD_INT 3
9451: PPUSH
9452: CALL_OW 289
9456: NOT
9457: AND
9458: IFFALSE 9475
9460: GO 9462
9462: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9463: LD_EXP 16
9467: PPUSH
9468: LD_INT 4
9470: PPUSH
9471: CALL_OW 235
9475: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9476: LD_EXP 17
9480: PPUSH
9481: CALL_OW 305
9485: PUSH
9486: LD_EXP 17
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: CALL_OW 289
9498: NOT
9499: AND
9500: PUSH
9501: LD_EXP 17
9505: PPUSH
9506: LD_INT 2
9508: PPUSH
9509: CALL_OW 289
9513: NOT
9514: AND
9515: PUSH
9516: LD_EXP 17
9520: PPUSH
9521: LD_INT 3
9523: PPUSH
9524: CALL_OW 289
9528: NOT
9529: AND
9530: IFFALSE 9547
9532: GO 9534
9534: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9535: LD_EXP 17
9539: PPUSH
9540: LD_INT 4
9542: PPUSH
9543: CALL_OW 235
9547: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9548: LD_EXP 18
9552: PPUSH
9553: CALL_OW 305
9557: PUSH
9558: LD_EXP 18
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: CALL_OW 289
9570: NOT
9571: AND
9572: PUSH
9573: LD_EXP 18
9577: PPUSH
9578: LD_INT 2
9580: PPUSH
9581: CALL_OW 289
9585: NOT
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: LD_INT 3
9595: PPUSH
9596: CALL_OW 289
9600: NOT
9601: AND
9602: IFFALSE 9619
9604: GO 9606
9606: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9607: LD_EXP 18
9611: PPUSH
9612: LD_INT 4
9614: PPUSH
9615: CALL_OW 235
9619: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9620: LD_EXP 19
9624: PPUSH
9625: CALL_OW 305
9629: PUSH
9630: LD_EXP 19
9634: PPUSH
9635: LD_INT 1
9637: PPUSH
9638: CALL_OW 289
9642: NOT
9643: AND
9644: PUSH
9645: LD_EXP 19
9649: PPUSH
9650: LD_INT 2
9652: PPUSH
9653: CALL_OW 289
9657: NOT
9658: AND
9659: PUSH
9660: LD_EXP 19
9664: PPUSH
9665: LD_INT 3
9667: PPUSH
9668: CALL_OW 289
9672: NOT
9673: AND
9674: PUSH
9675: LD_EXP 19
9679: PPUSH
9680: LD_INT 2
9682: PPUSH
9683: CALL_OW 289
9687: NOT
9688: AND
9689: IFFALSE 9706
9691: GO 9693
9693: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9694: LD_EXP 19
9698: PPUSH
9699: LD_INT 4
9701: PPUSH
9702: CALL_OW 235
9706: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9707: LD_EXP 20
9711: PPUSH
9712: CALL_OW 305
9716: PUSH
9717: LD_EXP 20
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 289
9729: NOT
9730: AND
9731: PUSH
9732: LD_EXP 20
9736: PPUSH
9737: LD_INT 2
9739: PPUSH
9740: CALL_OW 289
9744: NOT
9745: AND
9746: PUSH
9747: LD_EXP 20
9751: PPUSH
9752: LD_INT 3
9754: PPUSH
9755: CALL_OW 289
9759: NOT
9760: AND
9761: IFFALSE 9778
9763: GO 9765
9765: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9766: LD_EXP 20
9770: PPUSH
9771: LD_INT 4
9773: PPUSH
9774: CALL_OW 235
9778: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9779: LD_EXP 21
9783: PPUSH
9784: CALL_OW 305
9788: PUSH
9789: LD_EXP 21
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 289
9801: NOT
9802: AND
9803: PUSH
9804: LD_EXP 21
9808: PPUSH
9809: LD_INT 2
9811: PPUSH
9812: CALL_OW 289
9816: NOT
9817: AND
9818: PUSH
9819: LD_EXP 21
9823: PPUSH
9824: LD_INT 3
9826: PPUSH
9827: CALL_OW 289
9831: NOT
9832: AND
9833: IFFALSE 9850
9835: GO 9837
9837: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9838: LD_EXP 21
9842: PPUSH
9843: LD_INT 4
9845: PPUSH
9846: CALL_OW 235
9850: END
// every 0 0$1 do var i ;
9851: GO 9853
9853: DISABLE
9854: LD_INT 0
9856: PPUSH
// begin enable ;
9857: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9858: LD_ADDR_VAR 0 1
9862: PUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 4
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 69
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9918
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_INT 4
9888: PPUSH
9889: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9893: LD_VAR 0 1
9897: PPUSH
9898: LD_INT 4
9900: PPUSH
9901: CALL_OW 308
9905: IFFALSE 9916
// RemoveUnit ( i ) ;
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 64
// end ;
9916: GO 9878
9918: POP
9919: POP
// end ;
9920: PPOPN 1
9922: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9923: LD_EXP 27
9927: PUSH
9928: LD_INT 1
9930: EQUAL
9931: IFFALSE 10370
9933: GO 9935
9935: DISABLE
9936: LD_INT 0
9938: PPUSH
9939: PPUSH
9940: PPUSH
// begin enable ;
9941: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9942: LD_ADDR_VAR 0 2
9946: PUSH
9947: LD_INT 12
9949: PPUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 3
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 21
9962: PUSH
9963: LD_INT 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 70
9978: ST_TO_ADDR
// for i in enemyVehs do
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_VAR 0 2
9988: PUSH
9989: FOR_IN
9990: IFFALSE 10368
// begin if See ( 1 , i ) then
9992: LD_INT 1
9994: PPUSH
9995: LD_VAR 0 1
9999: PPUSH
10000: CALL_OW 292
10004: IFFALSE 10366
// begin disable ;
10006: DISABLE
// DialogueOn ;
10007: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10020: LD_INT 22
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 26
10032: PUSH
10033: LD_INT 1
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 25
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 25
10065: PUSH
10066: LD_INT 3
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 4
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 25
10085: PUSH
10086: LD_INT 5
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: LD_INT 25
10095: PUSH
10096: LD_INT 8
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 69
10121: PPUSH
10122: LD_STRING DT1-Sol1-1
10124: PPUSH
10125: LD_STRING DT1-FSol1-1
10127: PPUSH
10128: CALL 12328 0 3
// dec = ShowQuery2 ;
10132: LD_ADDR_VAR 0 3
10136: PUSH
10137: CALL 12871 0 0
10141: ST_TO_ADDR
// if dec = 1 then
10142: LD_VAR 0 3
10146: PUSH
10147: LD_INT 1
10149: EQUAL
10150: IFFALSE 10256
// begin Say ( JMM , D2-JMM-1 ) ;
10152: LD_EXP 1
10156: PPUSH
10157: LD_STRING D2-JMM-1
10159: PPUSH
10160: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10164: LD_EXP 22
10168: PPUSH
10169: LD_STRING D2-Pow-1
10171: PPUSH
10172: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10176: LD_EXP 1
10180: PPUSH
10181: LD_STRING D2a-JMM-1
10183: PPUSH
10184: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10188: LD_EXP 22
10192: PPUSH
10193: LD_STRING D2a-Pow-1
10195: PPUSH
10196: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10200: LD_EXP 1
10204: PPUSH
10205: LD_STRING D2a-JMM-2
10207: PPUSH
10208: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10212: LD_EXP 22
10216: PPUSH
10217: LD_STRING D2a-Pow-2
10219: PPUSH
10220: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10224: LD_EXP 1
10228: PPUSH
10229: LD_STRING D2a-JMM-3
10231: PPUSH
10232: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10236: LD_EXP 22
10240: PPUSH
10241: LD_STRING D2a-Pow-3
10243: PPUSH
10244: CALL_OW 94
// secondPass = 2 ;
10248: LD_ADDR_EXP 27
10252: PUSH
10253: LD_INT 2
10255: ST_TO_ADDR
// end ; if dec = 2 then
10256: LD_VAR 0 3
10260: PUSH
10261: LD_INT 2
10263: EQUAL
10264: IFFALSE 10358
// begin Say ( JMM , D2-JMM-1 ) ;
10266: LD_EXP 1
10270: PPUSH
10271: LD_STRING D2-JMM-1
10273: PPUSH
10274: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10278: LD_EXP 22
10282: PPUSH
10283: LD_STRING D2-Pow-1
10285: PPUSH
10286: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10290: LD_EXP 1
10294: PPUSH
10295: LD_STRING D2b-JMM-1
10297: PPUSH
10298: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10302: LD_EXP 22
10306: PPUSH
10307: LD_STRING D2b-Pow-1
10309: PPUSH
10310: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10314: LD_EXP 1
10318: PPUSH
10319: LD_STRING D2c-JMM-1
10321: PPUSH
10322: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10326: LD_EXP 22
10330: PPUSH
10331: LD_STRING D2c-Pow-1
10333: PPUSH
10334: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10338: LD_EXP 1
10342: PPUSH
10343: LD_STRING D2c-JMM-2
10345: PPUSH
10346: CALL_OW 88
// secondPass = 2 ;
10350: LD_ADDR_EXP 27
10354: PUSH
10355: LD_INT 2
10357: ST_TO_ADDR
// end ; DialogueOff ;
10358: CALL_OW 7
// exit ;
10362: POP
10363: POP
10364: GO 10370
// end ; end ;
10366: GO 9989
10368: POP
10369: POP
// end ;
10370: PPOPN 3
10372: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10373: LD_EXP 28
10377: PUSH
10378: LD_INT 1
10380: EQUAL
10381: PUSH
10382: LD_INT 11
10384: PPUSH
10385: LD_INT 22
10387: PUSH
10388: LD_INT 3
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 70
10399: AND
10400: IFFALSE 10628
10402: GO 10404
10404: DISABLE
10405: LD_INT 0
10407: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: LD_INT 11
10415: PPUSH
10416: LD_INT 22
10418: PUSH
10419: LD_INT 3
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 70
10430: ST_TO_ADDR
// if not vehicles then
10431: LD_VAR 0 1
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10628
// repeat wait ( 0 0$1 ) ;
10440: LD_INT 35
10442: PPUSH
10443: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10447: LD_VAR 0 1
10451: PPUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PPUSH
10462: CALL_OW 72
10466: IFFALSE 10440
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10468: LD_VAR 0 1
10472: PPUSH
10473: LD_INT 101
10475: PUSH
10476: LD_INT 1
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PPUSH
10483: CALL_OW 72
10487: PUSH
10488: LD_INT 1
10490: ARRAY
10491: PPUSH
10492: CALL_OW 87
// DialogueOn ;
10496: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10500: LD_INT 22
10502: PUSH
10503: LD_INT 1
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 26
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 25
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 25
10545: PUSH
10546: LD_INT 3
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 25
10555: PUSH
10556: LD_INT 4
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 25
10565: PUSH
10566: LD_INT 5
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 25
10575: PUSH
10576: LD_INT 8
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PPUSH
10602: LD_STRING DT1-Sol1-1
10604: PPUSH
10605: LD_STRING DT1-FSol1-1
10607: PPUSH
10608: CALL 12328 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10612: LD_EXP 1
10616: PPUSH
10617: LD_STRING DT1-JMM-1
10619: PPUSH
10620: CALL_OW 88
// DialogueOff ;
10624: CALL_OW 7
// end ;
10628: PPOPN 1
10630: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10631: LD_EXP 28
10635: PUSH
10636: LD_INT 1
10638: EQUAL
10639: PUSH
10640: LD_INT 11
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 50
10655: PUSH
10656: EMPTY
10657: LIST
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 21
10674: PUSH
10675: LD_INT 1
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 70
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: AND
10701: PUSH
10702: LD_EXP 29
10706: AND
10707: IFFALSE 10864
10709: GO 10711
10711: DISABLE
// begin vehicleTeleported = 2 ;
10712: LD_ADDR_EXP 28
10716: PUSH
10717: LD_INT 2
10719: ST_TO_ADDR
// DialogueOn ;
10720: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_STRING DT1a-JMM-1
10731: PPUSH
10732: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10736: LD_INT 22
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 26
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: LD_INT 25
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 2
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 3
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 25
10791: PUSH
10792: LD_INT 4
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 25
10801: PUSH
10802: LD_INT 5
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 25
10811: PUSH
10812: LD_INT 8
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 69
10837: PPUSH
10838: LD_STRING DT1a-Sol1-1
10840: PPUSH
10841: LD_STRING DT1a-FSol1-1
10843: PPUSH
10844: CALL 12328 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10848: LD_EXP 1
10852: PPUSH
10853: LD_STRING DT1a-JMM-2
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10865: LD_EXP 28
10869: PUSH
10870: LD_INT 3
10872: EQUAL
10873: PUSH
10874: LD_INT 11
10876: PPUSH
10877: LD_INT 22
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 101
10889: PUSH
10890: LD_INT 1
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PPUSH
10901: CALL_OW 70
10905: AND
10906: IFFALSE 11180
10908: GO 10910
10910: DISABLE
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
10915: PPUSH
// begin wait ( 0 0$0.3 ) ;
10916: LD_INT 10
10918: PPUSH
10919: CALL_OW 67
// DialogueOn ;
10923: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10927: LD_ADDR_VAR 0 3
10931: PUSH
10932: LD_INT 22
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 25
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 2
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 3
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 25
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 25
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 25
11007: PUSH
11008: LD_INT 8
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PPUSH
11029: CALL_OW 69
11033: PPUSH
11034: LD_STRING DT2-Sol1-1
11036: PPUSH
11037: LD_STRING DT2-FSol1-1
11039: PPUSH
11040: CALL 12328 0 3
11044: ST_TO_ADDR
// DialogueOff ;
11045: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11049: LD_INT 35
11051: PPUSH
11052: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11056: LD_INT 11
11058: PPUSH
11059: LD_INT 22
11061: PUSH
11062: LD_INT 3
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 50
11071: PUSH
11072: EMPTY
11073: LIST
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 70
11083: NOT
11084: IFFALSE 11049
// wait ( 0 0$2 ) ;
11086: LD_INT 70
11088: PPUSH
11089: CALL_OW 67
// vehicleTeleported = 4 ;
11093: LD_ADDR_EXP 28
11097: PUSH
11098: LD_INT 4
11100: ST_TO_ADDR
// DialogueOn ;
11101: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11105: LD_EXP 1
11109: PPUSH
11110: LD_STRING DT2a-JMM-1
11112: PPUSH
11113: CALL_OW 88
// if speaker then
11117: LD_VAR 0 3
11121: IFFALSE 11164
// if GetSex ( speaker ) = 1 then
11123: LD_VAR 0 3
11127: PPUSH
11128: CALL_OW 258
11132: PUSH
11133: LD_INT 1
11135: EQUAL
11136: IFFALSE 11152
// Say ( speaker , DT2a-Sol1-1 ) else
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_STRING DT2a-Sol1-1
11145: PPUSH
11146: CALL_OW 88
11150: GO 11164
// Say ( speaker , DT2a-FSol1-1 ) ;
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_STRING DT2a-FSol1-1
11159: PPUSH
11160: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11164: LD_EXP 3
11168: PPUSH
11169: LD_STRING DT2a-Don-1
11171: PPUSH
11172: CALL_OW 88
// DialogueOff ;
11176: CALL_OW 7
// end ;
11180: PPOPN 3
11182: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11183: LD_INT 1
11185: PPUSH
11186: LD_INT 45
11188: PPUSH
11189: LD_INT 74
11191: PPUSH
11192: CALL_OW 293
11196: IFFALSE 11360
11198: GO 11200
11200: DISABLE
// begin DialogueOn ;
11201: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11205: LD_INT 36
11207: PPUSH
11208: LD_INT 55
11210: PPUSH
11211: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11215: LD_INT 22
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 26
11227: PUSH
11228: LD_INT 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: LD_INT 25
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 25
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 25
11270: PUSH
11271: LD_INT 4
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 25
11280: PUSH
11281: LD_INT 5
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 8
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: PPUSH
11317: LD_STRING D5-Sol1-1
11319: PPUSH
11320: LD_STRING D5-FSol1-
11322: PPUSH
11323: CALL 12328 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11327: LD_EXP 30
11331: PUSH
11332: LD_EXP 3
11336: PPUSH
11337: CALL_OW 302
11341: AND
11342: IFFALSE 11356
// Say ( Donaldson , D5-Don-1 ) ;
11344: LD_EXP 3
11348: PPUSH
11349: LD_STRING D5-Don-1
11351: PPUSH
11352: CALL_OW 88
// DialogueOff ;
11356: CALL_OW 7
// end ;
11360: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11361: LD_INT 1
11363: PPUSH
11364: LD_INT 10
11366: PPUSH
11367: CALL_OW 292
11371: PUSH
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 137
11377: PPUSH
11378: CALL_OW 292
11382: OR
11383: IFFALSE 11527
11385: GO 11387
11387: DISABLE
// begin DialogueOn ;
11388: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11392: LD_INT 22
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 26
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: LD_INT 25
11417: PUSH
11418: LD_INT 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 25
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 3
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 25
11447: PUSH
11448: LD_INT 4
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 5
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 8
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 69
11493: PPUSH
11494: LD_STRING DT3-Sol1-1
11496: PPUSH
11497: LD_STRING DT3-FSol1-1
11499: PPUSH
11500: CALL 12328 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11504: LD_EXP 1
11508: PPUSH
11509: LD_STRING DT3-JMM-1
11511: PPUSH
11512: CALL_OW 88
// DialogueOff ;
11516: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11520: LD_STRING M2
11522: PPUSH
11523: CALL_OW 337
// end ;
11527: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11528: LD_EXP 42
11532: PUSH
11533: LD_INT 0
11535: EQUAL
11536: IFFALSE 11619
11538: GO 11540
11540: DISABLE
11541: LD_INT 0
11543: PPUSH
// begin enable ;
11544: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11545: LD_ADDR_VAR 0 1
11549: PUSH
11550: LD_INT 10
11552: PPUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 58
11575: PUSH
11576: EMPTY
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 70
11588: PUSH
11589: FOR_IN
11590: IFFALSE 11617
// if GetLives ( i ) < 1000 then
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 256
11601: PUSH
11602: LD_INT 1000
11604: LESS
11605: IFFALSE 11615
// ruEscape = 1 ;
11607: LD_ADDR_EXP 42
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
11615: GO 11589
11617: POP
11618: POP
// end ;
11619: PPOPN 1
11621: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11622: LD_INT 3
11624: PPUSH
11625: CALL_OW 303
11629: PUSH
11630: LD_INT 4
11632: PPUSH
11633: CALL_OW 303
11637: OR
11638: PUSH
11639: LD_INT 22
11641: PPUSH
11642: LD_INT 22
11644: PUSH
11645: LD_INT 1
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 70
11656: PUSH
11657: LD_INT 0
11659: GREATER
11660: OR
11661: PUSH
11662: LD_EXP 42
11666: PUSH
11667: LD_INT 1
11669: EQUAL
11670: OR
11671: IFFALSE 11902
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
11680: PPUSH
// begin ruAI = 0 ;
11681: LD_ADDR_EXP 41
11685: PUSH
11686: LD_INT 0
11688: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11689: LD_ADDR_VAR 0 3
11693: PUSH
11694: LD_INT 10
11696: PPUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 58
11719: PUSH
11720: EMPTY
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: PPUSH
11728: CALL_OW 70
11732: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11733: LD_EXP 34
11737: PPUSH
11738: CALL_OW 122
// wait ( 0 0$1 ) ;
11742: LD_INT 35
11744: PPUSH
11745: CALL_OW 67
// DialogueOn ;
11749: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11753: LD_EXP 1
11757: PPUSH
11758: LD_STRING D6-JMM-1
11760: PPUSH
11761: CALL_OW 88
// DialogueOff ;
11765: CALL_OW 7
// if vehs > 0 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 0
11776: GREATER
11777: IFFALSE 11847
// for i := 1 to RuScientists do
11779: LD_ADDR_VAR 0 1
11783: PUSH
11784: DOUBLE
11785: LD_INT 1
11787: DEC
11788: ST_TO_ADDR
11789: LD_EXP 34
11793: PUSH
11794: FOR_TO
11795: IFFALSE 11843
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11797: LD_EXP 34
11801: PUSH
11802: LD_VAR 0 1
11806: ARRAY
11807: PPUSH
11808: LD_INT 3
11810: PUSH
11811: LD_INT 60
11813: PUSH
11814: EMPTY
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 72
11825: PPUSH
11826: LD_VAR 0 3
11830: PUSH
11831: LD_VAR 0 1
11835: ARRAY
11836: PPUSH
11837: CALL_OW 120
11841: GO 11794
11843: POP
11844: POP
11845: GO 11902
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11847: LD_EXP 34
11851: PUSH
11852: LD_VAR 0 1
11856: ARRAY
11857: PPUSH
11858: LD_INT 3
11860: PUSH
11861: LD_INT 60
11863: PUSH
11864: EMPTY
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PPUSH
11876: LD_INT 13
11878: PUSH
11879: LD_INT 14
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 1
11888: PPUSH
11889: LD_INT 2
11891: PPUSH
11892: CALL_OW 12
11896: ARRAY
11897: PPUSH
11898: CALL_OW 113
// end ;
11902: PPOPN 3
11904: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11905: LD_EXP 41
11909: PUSH
11910: LD_INT 0
11912: EQUAL
11913: IFFALSE 12285
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
// begin enable ;
11924: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11925: LD_EXP 34
11929: PPUSH
11930: LD_INT 2
11932: PUSH
11933: LD_INT 95
11935: PUSH
11936: LD_INT 13
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 95
11945: PUSH
11946: LD_INT 14
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 72
11962: PUSH
11963: LD_INT 33
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 23
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: LD_INT 95
11988: PUSH
11989: LD_INT 13
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 95
11998: PUSH
11999: LD_INT 14
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: OR
12021: IFFALSE 12210
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12023: LD_ADDR_VAR 0 2
12027: PUSH
12028: LD_EXP 34
12032: PPUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 95
12038: PUSH
12039: LD_INT 13
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 95
12048: PUSH
12049: LD_INT 14
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 72
12065: PUSH
12066: LD_INT 1
12068: ARRAY
12069: ST_TO_ADDR
// if not unit then
12070: LD_VAR 0 2
12074: NOT
12075: IFFALSE 12210
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12077: LD_ADDR_VAR 0 4
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 95
12087: PUSH
12088: LD_INT 13
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 95
12097: PUSH
12098: LD_INT 14
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 33
12112: PUSH
12113: LD_INT 1
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 23
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: ST_TO_ADDR
// if not tmp then
12140: LD_VAR 0 4
12144: NOT
12145: IFFALSE 12149
// exit ;
12147: GO 12285
// for i in tmp do
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: LD_VAR 0 4
12158: PUSH
12159: FOR_IN
12160: IFFALSE 12208
// if IsDrivenBy ( i ) in RuScientists then
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 311
12171: PUSH
12172: LD_EXP 34
12176: IN
12177: IFFALSE 12206
// begin unit := IsDrivenBy ( i ) ;
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_VAR 0 1
12188: PPUSH
12189: CALL_OW 311
12193: ST_TO_ADDR
// veh := i ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 1
12203: ST_TO_ADDR
// break ;
12204: GO 12208
// end ;
12206: GO 12159
12208: POP
12209: POP
// end ; end ; if not unit then
12210: LD_VAR 0 2
12214: NOT
12215: IFFALSE 12219
// exit ;
12217: GO 12285
// RuScientists = RuScientists diff unit ;
12219: LD_ADDR_EXP 34
12223: PUSH
12224: LD_EXP 34
12228: PUSH
12229: LD_VAR 0 2
12233: DIFF
12234: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: CALL_OW 64
// if veh then
12244: LD_VAR 0 3
12248: IFFALSE 12285
// begin if GetWeapon ( veh ) = 49 then
12250: LD_VAR 0 3
12254: PPUSH
12255: CALL_OW 264
12259: PUSH
12260: LD_INT 49
12262: EQUAL
12263: IFFALSE 12276
// KillUnit ( veh ) else
12265: LD_VAR 0 3
12269: PPUSH
12270: CALL_OW 66
12274: GO 12285
// RemoveUnit ( veh ) ;
12276: LD_VAR 0 3
12280: PPUSH
12281: CALL_OW 64
// end ; end ; end_of_file
12285: PPOPN 4
12287: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12288: LD_INT 0
12290: PPUSH
12291: PPUSH
// for i in charactersList do
12292: LD_ADDR_VAR 0 4
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12321
// SaveCharacters ( i , ident ) ;
12305: LD_VAR 0 4
12309: PPUSH
12310: LD_VAR 0 2
12314: PPUSH
12315: CALL_OW 38
12319: GO 12302
12321: POP
12322: POP
// end ;
12323: LD_VAR 0 3
12327: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_VAR 0 1
12342: PUSH
12343: LD_EXP 1
12347: PUSH
12348: LD_EXP 7
12352: PUSH
12353: LD_EXP 3
12357: PUSH
12358: LD_EXP 4
12362: PUSH
12363: LD_EXP 5
12367: PUSH
12368: LD_EXP 2
12372: PUSH
12373: LD_EXP 12
12377: PUSH
12378: LD_EXP 13
12382: PUSH
12383: LD_EXP 9
12387: PUSH
12388: LD_EXP 11
12392: PUSH
12393: LD_EXP 6
12397: PUSH
12398: LD_EXP 8
12402: PUSH
12403: LD_EXP 10
12407: PUSH
12408: LD_EXP 22
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: DIFF
12429: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12430: LD_ADDR_VAR 0 6
12434: PUSH
12435: LD_VAR 0 1
12439: PUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 12
12452: ARRAY
12453: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12454: LD_VAR 0 6
12458: PPUSH
12459: CALL_OW 258
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: IFFALSE 12485
// Say ( speaker , dialogMID ) else
12469: LD_VAR 0 6
12473: PPUSH
12474: LD_VAR 0 2
12478: PPUSH
12479: CALL_OW 88
12483: GO 12499
// Say ( speaker , dialogFID ) ;
12485: LD_VAR 0 6
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: CALL_OW 88
// result := speaker ;
12499: LD_ADDR_VAR 0 4
12503: PUSH
12504: LD_VAR 0 6
12508: ST_TO_ADDR
// end ;
12509: LD_VAR 0 4
12513: RET
// export function PrepareDifficulty ; var tmp ; begin
12514: LD_INT 0
12516: PPUSH
12517: PPUSH
// if Difficulty = 1 then
12518: LD_OWVAR 67
12522: PUSH
12523: LD_INT 1
12525: EQUAL
12526: IFFALSE 12544
// begin RuSolMinLevel = 8 ;
12528: LD_ADDR_EXP 36
12532: PUSH
12533: LD_INT 8
12535: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12536: LD_ADDR_EXP 37
12540: PUSH
12541: LD_INT 10
12543: ST_TO_ADDR
// end ; if Difficulty = 2 then
12544: LD_OWVAR 67
12548: PUSH
12549: LD_INT 2
12551: EQUAL
12552: IFFALSE 12646
// begin RuSolMinLevel = 9 ;
12554: LD_ADDR_EXP 36
12558: PUSH
12559: LD_INT 9
12561: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12562: LD_ADDR_EXP 37
12566: PUSH
12567: LD_INT 10
12569: ST_TO_ADDR
// uc_nation = 3 ;
12570: LD_ADDR_OWVAR 21
12574: PUSH
12575: LD_INT 3
12577: ST_TO_ADDR
// uc_side = 3 ;
12578: LD_ADDR_OWVAR 20
12582: PUSH
12583: LD_INT 3
12585: ST_TO_ADDR
// bc_level = 10 ;
12586: LD_ADDR_OWVAR 43
12590: PUSH
12591: LD_INT 10
12593: ST_TO_ADDR
// bc_type = b_turret ;
12594: LD_ADDR_OWVAR 42
12598: PUSH
12599: LD_INT 33
12601: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: LD_INT 86
12609: PPUSH
12610: LD_INT 34
12612: PPUSH
12613: LD_INT 2
12615: PPUSH
12616: CALL_OW 47
12620: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12621: LD_VAR 0 2
12625: PPUSH
12626: LD_INT 49
12628: PPUSH
12629: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12633: LD_INT 64
12635: PPUSH
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 322
// end ; if Difficulty = 3 then
12646: LD_OWVAR 67
12650: PUSH
12651: LD_INT 3
12653: EQUAL
12654: IFFALSE 12792
// begin RuSolMinLevel = 10 ;
12656: LD_ADDR_EXP 36
12660: PUSH
12661: LD_INT 10
12663: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12664: LD_ADDR_EXP 37
12668: PUSH
12669: LD_INT 10
12671: ST_TO_ADDR
// uc_nation = 3 ;
12672: LD_ADDR_OWVAR 21
12676: PUSH
12677: LD_INT 3
12679: ST_TO_ADDR
// uc_side = 3 ;
12680: LD_ADDR_OWVAR 20
12684: PUSH
12685: LD_INT 3
12687: ST_TO_ADDR
// bc_level = 10 ;
12688: LD_ADDR_OWVAR 43
12692: PUSH
12693: LD_INT 10
12695: ST_TO_ADDR
// bc_type = b_turret ;
12696: LD_ADDR_OWVAR 42
12700: PUSH
12701: LD_INT 33
12703: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_INT 86
12711: PPUSH
12712: LD_INT 34
12714: PPUSH
12715: LD_INT 2
12717: PPUSH
12718: CALL_OW 47
12722: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12723: LD_VAR 0 2
12727: PPUSH
12728: LD_INT 49
12730: PPUSH
12731: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 93
12742: PPUSH
12743: LD_INT 31
12745: PPUSH
12746: LD_INT 2
12748: PPUSH
12749: CALL_OW 47
12753: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12754: LD_VAR 0 2
12758: PPUSH
12759: LD_INT 49
12761: PPUSH
12762: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12766: LD_INT 64
12768: PPUSH
12769: LD_INT 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12779: LD_INT 65
12781: PPUSH
12782: LD_INT 3
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL_OW 322
// end ; end ;
12792: LD_VAR 0 1
12796: RET
// export function ShowQuery1 ; begin
12797: LD_INT 0
12799: PPUSH
// case query ( Q1 ) of 1 :
12800: LD_STRING Q1
12802: PPUSH
12803: CALL_OW 97
12807: PUSH
12808: LD_INT 1
12810: DOUBLE
12811: EQUAL
12812: IFTRUE 12816
12814: GO 12827
12816: POP
// result = 1 ; 2 :
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
12825: GO 12866
12827: LD_INT 2
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12846
12835: POP
// result = 2 ; 3 :
12836: LD_ADDR_VAR 0 1
12840: PUSH
12841: LD_INT 2
12843: ST_TO_ADDR
12844: GO 12866
12846: LD_INT 3
12848: DOUBLE
12849: EQUAL
12850: IFTRUE 12854
12852: GO 12865
12854: POP
// result = 3 ; end ;
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_INT 3
12862: ST_TO_ADDR
12863: GO 12866
12865: POP
// end ;
12866: LD_VAR 0 1
12870: RET
// export function ShowQuery2 ; begin
12871: LD_INT 0
12873: PPUSH
// case query ( Q1a ) of 1 :
12874: LD_STRING Q1a
12876: PPUSH
12877: CALL_OW 97
12881: PUSH
12882: LD_INT 1
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12901
12890: POP
// result = 1 ; 2 :
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
12899: GO 12940
12901: LD_INT 2
12903: DOUBLE
12904: EQUAL
12905: IFTRUE 12909
12907: GO 12920
12909: POP
// result = 2 ; 3 :
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_INT 2
12917: ST_TO_ADDR
12918: GO 12940
12920: LD_INT 3
12922: DOUBLE
12923: EQUAL
12924: IFTRUE 12928
12926: GO 12939
12928: POP
// result = 3 ; end ;
12929: LD_ADDR_VAR 0 1
12933: PUSH
12934: LD_INT 3
12936: ST_TO_ADDR
12937: GO 12940
12939: POP
// end ;
12940: LD_VAR 0 1
12944: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12945: LD_INT 0
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
// for i = 1 to count do
12952: LD_ADDR_VAR 0 8
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 6
12966: PUSH
12967: FOR_TO
12968: IFFALSE 13049
// begin uc_side = side ;
12970: LD_ADDR_OWVAR 20
12974: PUSH
12975: LD_VAR 0 1
12979: ST_TO_ADDR
// uc_nation = nation ;
12980: LD_ADDR_OWVAR 21
12984: PUSH
12985: LD_VAR 0 2
12989: ST_TO_ADDR
// hc_gallery =  ;
12990: LD_ADDR_OWVAR 33
12994: PUSH
12995: LD_STRING 
12997: ST_TO_ADDR
// hc_name =  ;
12998: LD_ADDR_OWVAR 26
13002: PUSH
13003: LD_STRING 
13005: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13006: LD_INT 0
13008: PPUSH
13009: LD_VAR 0 5
13013: PPUSH
13014: LD_VAR 0 4
13018: PPUSH
13019: CALL_OW 380
// un = CreateHuman ;
13023: LD_ADDR_VAR 0 10
13027: PUSH
13028: CALL_OW 44
13032: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13033: LD_VAR 0 10
13037: PPUSH
13038: LD_VAR 0 3
13042: PPUSH
13043: CALL_OW 52
// end ;
13047: GO 12967
13049: POP
13050: POP
// end ;
13051: LD_VAR 0 7
13055: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
13056: LD_INT 0
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13063: LD_ADDR_VAR 0 8
13067: PUSH
13068: LD_INT 48
13070: PUSH
13071: LD_INT 49
13073: PUSH
13074: LD_INT 50
13076: PUSH
13077: LD_INT 20
13079: PUSH
13080: LD_INT 1
13082: PUSH
13083: LD_INT 51
13085: PUSH
13086: LD_INT 52
13088: PUSH
13089: LD_INT 69
13091: PUSH
13092: LD_INT 39
13094: PUSH
13095: LD_INT 34
13097: PUSH
13098: LD_INT 40
13100: PUSH
13101: LD_INT 53
13103: PUSH
13104: LD_INT 71
13106: PUSH
13107: LD_INT 57
13109: PUSH
13110: LD_INT 58
13112: PUSH
13113: LD_INT 44
13115: PUSH
13116: LD_INT 32
13118: PUSH
13119: LD_INT 27
13121: PUSH
13122: LD_INT 23
13124: PUSH
13125: LD_INT 33
13127: PUSH
13128: LD_INT 59
13130: PUSH
13131: LD_INT 54
13133: PUSH
13134: LD_INT 55
13136: PUSH
13137: LD_INT 56
13139: PUSH
13140: LD_INT 63
13142: PUSH
13143: LD_INT 64
13145: PUSH
13146: LD_INT 65
13148: PUSH
13149: LD_INT 30
13151: PUSH
13152: LD_INT 31
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_INT 25
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13198: LD_ADDR_VAR 0 5
13202: PUSH
13203: DOUBLE
13204: LD_INT 1
13206: DEC
13207: ST_TO_ADDR
13208: LD_VAR 0 8
13212: PUSH
13213: FOR_TO
13214: IFFALSE 13290
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13216: LD_VAR 0 8
13220: PUSH
13221: LD_VAR 0 5
13225: ARRAY
13226: PPUSH
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 321
13236: PUSH
13237: LD_INT 1
13239: EQUAL
13240: PUSH
13241: LD_VAR 0 8
13245: PUSH
13246: LD_VAR 0 5
13250: ARRAY
13251: PPUSH
13252: LD_VAR 0 3
13256: PPUSH
13257: CALL_OW 482
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: AND
13266: IFFALSE 13288
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_VAR 0 8
13277: PUSH
13278: LD_VAR 0 5
13282: ARRAY
13283: PPUSH
13284: CALL_OW 184
13288: GO 13213
13290: POP
13291: POP
// end ;
13292: LD_VAR 0 4
13296: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13297: LD_INT 0
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13305: LD_ADDR_VAR 0 8
13309: PUSH
13310: LD_VAR 0 2
13314: PPUSH
13315: CALL_OW 313
13319: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13320: LD_ADDR_VAR 0 9
13324: PUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 22
13332: PUSH
13333: LD_VAR 0 1
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 25
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 24
13354: PUSH
13355: LD_INT 750
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 3
13364: PUSH
13365: LD_INT 54
13367: PUSH
13368: EMPTY
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 70
13385: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13386: LD_ADDR_VAR 0 6
13390: PUSH
13391: LD_VAR 0 3
13395: PPUSH
13396: LD_INT 22
13398: PUSH
13399: LD_VAR 0 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 21
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: LD_INT 24
13423: PUSH
13424: LD_INT 1000
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: PPUSH
13443: CALL_OW 70
13447: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13448: LD_VAR 0 6
13452: NOT
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_VAR 0 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 24
13478: PUSH
13479: LD_INT 250
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 69
13495: NOT
13496: AND
13497: IFFALSE 13501
// exit ;
13499: GO 13683
// if buildings_list > 0 and engineerOkInside then
13501: LD_VAR 0 6
13505: PUSH
13506: LD_INT 0
13508: GREATER
13509: PUSH
13510: LD_VAR 0 8
13514: AND
13515: IFFALSE 13526
// ComExitBuilding ( engineerOkInside ) ;
13517: LD_VAR 0 8
13521: PPUSH
13522: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13526: LD_VAR 0 6
13530: PUSH
13531: LD_INT 0
13533: GREATER
13534: PUSH
13535: LD_VAR 0 9
13539: PUSH
13540: LD_INT 0
13542: GREATER
13543: AND
13544: IFFALSE 13564
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13546: LD_VAR 0 9
13550: PPUSH
13551: LD_VAR 0 6
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13564: LD_VAR 0 6
13568: PUSH
13569: LD_INT 0
13571: EQUAL
13572: PUSH
13573: LD_VAR 0 4
13577: PUSH
13578: LD_INT 0
13580: EQUAL
13581: AND
13582: PUSH
13583: LD_VAR 0 9
13587: PUSH
13588: LD_INT 0
13590: GREATER
13591: AND
13592: IFFALSE 13608
// ComEnterUnit ( engineerOkOutside , building ) ;
13594: LD_VAR 0 9
13598: PPUSH
13599: LD_VAR 0 2
13603: PPUSH
13604: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13608: LD_VAR 0 9
13612: PUSH
13613: LD_INT 0
13615: GREATER
13616: PUSH
13617: LD_VAR 0 6
13621: PUSH
13622: LD_INT 0
13624: EQUAL
13625: AND
13626: PUSH
13627: LD_VAR 0 4
13631: PUSH
13632: LD_INT 0
13634: GREATER
13635: AND
13636: IFFALSE 13683
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13638: LD_VAR 0 9
13642: PPUSH
13643: LD_VAR 0 4
13647: PUSH
13648: LD_INT 1
13650: ARRAY
13651: PPUSH
13652: LD_VAR 0 4
13656: PUSH
13657: LD_INT 2
13659: ARRAY
13660: PPUSH
13661: LD_VAR 0 4
13665: PUSH
13666: LD_INT 3
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 4
13674: PUSH
13675: LD_INT 4
13677: ARRAY
13678: PPUSH
13679: CALL_OW 145
// end ;
13683: LD_VAR 0 5
13687: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13688: LD_INT 0
13690: PPUSH
13691: PPUSH
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
13697: PPUSH
13698: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13699: LD_ADDR_VAR 0 6
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_VAR 0 1
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 25
13718: PUSH
13719: LD_INT 4
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 24
13728: PUSH
13729: LD_INT 251
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: PUSH
13746: LD_EXP 34
13750: PUSH
13751: EMPTY
13752: LIST
13753: DIFF
13754: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13755: LD_ADDR_VAR 0 7
13759: PUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_VAR 0 1
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 25
13779: PUSH
13780: LD_INT 4
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 50
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 70
13802: PUSH
13803: LD_EXP 34
13807: PUSH
13808: EMPTY
13809: LIST
13810: DIFF
13811: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13812: LD_ADDR_VAR 0 10
13816: PUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 22
13824: PUSH
13825: LD_VAR 0 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: LD_INT 24
13849: PUSH
13850: LD_INT 750
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 70
13870: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13871: LD_ADDR_VAR 0 11
13875: PUSH
13876: LD_VAR 0 2
13880: PPUSH
13881: LD_INT 22
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 21
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: LD_INT 24
13908: PUSH
13909: LD_INT 1000
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 70
13929: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13930: LD_VAR 0 10
13934: PUSH
13935: LD_INT 0
13937: GREATER
13938: PUSH
13939: LD_VAR 0 6
13943: PUSH
13944: LD_INT 0
13946: GREATER
13947: AND
13948: IFFALSE 13964
// ComMoveToArea ( damageUnits , healArea ) ;
13950: LD_VAR 0 10
13954: PPUSH
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13964: LD_VAR 0 11
13968: PUSH
13969: LD_INT 0
13971: GREATER
13972: PUSH
13973: LD_VAR 0 7
13977: PUSH
13978: LD_INT 0
13980: GREATER
13981: AND
13982: IFFALSE 14002
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13984: LD_VAR 0 7
13988: PPUSH
13989: LD_VAR 0 11
13993: PUSH
13994: LD_INT 1
13996: ARRAY
13997: PPUSH
13998: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14002: LD_VAR 0 10
14006: PUSH
14007: LD_INT 0
14009: EQUAL
14010: PUSH
14011: LD_VAR 0 11
14015: PUSH
14016: LD_INT 0
14018: EQUAL
14019: AND
14020: PUSH
14021: LD_VAR 0 7
14025: PUSH
14026: LD_INT 0
14028: GREATER
14029: AND
14030: IFFALSE 14135
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14032: LD_ADDR_VAR 0 12
14036: PUSH
14037: LD_INT 22
14039: PUSH
14040: LD_VAR 0 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 21
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 30
14061: PUSH
14062: LD_INT 8
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: PPUSH
14074: CALL_OW 69
14078: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14079: LD_ADDR_VAR 0 13
14083: PUSH
14084: LD_INT 1
14086: PPUSH
14087: LD_VAR 0 12
14091: PPUSH
14092: CALL_OW 12
14096: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14097: LD_VAR 0 7
14101: PPUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 60
14107: PUSH
14108: EMPTY
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 72
14119: PPUSH
14120: LD_VAR 0 12
14124: PUSH
14125: LD_VAR 0 13
14129: ARRAY
14130: PPUSH
14131: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 22
14142: PUSH
14143: LD_VAR 0 1
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 25
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 24
14164: PUSH
14165: LD_INT 751
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PPUSH
14177: CALL_OW 70
14181: PUSH
14182: LD_INT 0
14184: GREATER
14185: PUSH
14186: LD_INT 21
14188: PPUSH
14189: CALL_OW 302
14193: AND
14194: PUSH
14195: LD_INT 21
14197: PPUSH
14198: CALL_OW 255
14202: PUSH
14203: LD_INT 3
14205: EQUAL
14206: AND
14207: IFFALSE 14263
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14209: LD_VAR 0 3
14213: PPUSH
14214: LD_INT 22
14216: PUSH
14217: LD_VAR 0 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 3
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 24
14238: PUSH
14239: LD_INT 751
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 70
14255: PPUSH
14256: LD_INT 21
14258: PPUSH
14259: CALL_OW 120
// end ;
14263: LD_VAR 0 5
14267: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14268: LD_INT 0
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14276: LD_ADDR_VAR 0 7
14280: PUSH
14281: LD_VAR 0 2
14285: PPUSH
14286: LD_INT 22
14288: PUSH
14289: LD_VAR 0 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 34
14310: PUSH
14311: LD_INT 52
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 70
14327: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14328: LD_ADDR_VAR 0 8
14332: PUSH
14333: LD_VAR 0 2
14337: PPUSH
14338: LD_INT 22
14340: PUSH
14341: LD_VAR 0 1
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 3
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 3
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: LD_INT 1000
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: PPUSH
14385: CALL_OW 70
14389: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14390: LD_VAR 0 8
14394: PUSH
14395: LD_INT 0
14397: GREATER
14398: PUSH
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_INT 24
14406: PUSH
14407: LD_INT 750
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 72
14418: PUSH
14419: LD_INT 0
14421: GREATER
14422: AND
14423: IFFALSE 14443
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14425: LD_VAR 0 7
14429: PPUSH
14430: LD_VAR 0 8
14434: PUSH
14435: LD_INT 1
14437: ARRAY
14438: PPUSH
14439: CALL_OW 130
// end ;
14443: LD_VAR 0 3
14447: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14452: LD_INT 22
14454: PUSH
14455: LD_VAR 0 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 21
14466: PUSH
14467: LD_INT 2
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PPUSH
14478: CALL_OW 69
14482: PUSH
14483: LD_INT 18
14485: PPUSH
14486: LD_INT 22
14488: PUSH
14489: LD_VAR 0 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 21
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PPUSH
14512: CALL_OW 70
14516: PUSH
14517: LD_VAR 0 3
14521: LESSEQUAL
14522: DIFF
14523: IFFALSE 14590
// for i = 1 to vehCount do
14525: LD_ADDR_VAR 0 9
14529: PUSH
14530: DOUBLE
14531: LD_INT 1
14533: DEC
14534: ST_TO_ADDR
14535: LD_VAR 0 3
14539: PUSH
14540: FOR_TO
14541: IFFALSE 14588
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14543: LD_VAR 0 2
14547: PPUSH
14548: LD_VAR 0 7
14552: PPUSH
14553: LD_VAR 0 5
14557: PPUSH
14558: LD_VAR 0 6
14562: PPUSH
14563: LD_VAR 0 4
14567: PUSH
14568: LD_INT 1
14570: PPUSH
14571: LD_VAR 0 4
14575: PPUSH
14576: CALL_OW 12
14580: ARRAY
14581: PPUSH
14582: CALL_OW 185
14586: GO 14540
14588: POP
14589: POP
// end ;
14590: LD_VAR 0 8
14594: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14595: LD_INT 0
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14603: LD_ADDR_VAR 0 6
14607: PUSH
14608: LD_INT 22
14610: PUSH
14611: LD_VAR 0 1
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 25
14622: PUSH
14623: LD_INT 9
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 69
14638: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14639: LD_ADDR_VAR 0 7
14643: PUSH
14644: LD_INT 81
14646: PUSH
14647: LD_VAR 0 1
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: LD_INT 21
14661: PUSH
14662: LD_INT 3
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PPUSH
14677: CALL_OW 69
14681: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14682: LD_ADDR_VAR 0 4
14686: PUSH
14687: LD_INT 1
14689: PPUSH
14690: LD_INT 3
14692: PPUSH
14693: CALL_OW 12
14697: ST_TO_ADDR
// for i = 1 to list do
14698: LD_ADDR_VAR 0 5
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 6
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14916
// for ta in filter do
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_VAR 0 7
14725: PUSH
14726: FOR_IN
14727: IFFALSE 14912
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14729: LD_VAR 0 6
14733: PUSH
14734: LD_VAR 0 5
14738: ARRAY
14739: PPUSH
14740: LD_VAR 0 3
14744: PPUSH
14745: CALL_OW 296
14749: PUSH
14750: LD_INT 15
14752: LESSEQUAL
14753: IFFALSE 14910
// begin case c of 1 :
14755: LD_VAR 0 4
14759: PUSH
14760: LD_INT 1
14762: DOUBLE
14763: EQUAL
14764: IFTRUE 14768
14766: GO 14806
14768: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14769: LD_VAR 0 6
14773: PUSH
14774: LD_VAR 0 5
14778: ARRAY
14779: PPUSH
14780: LD_VAR 0 3
14784: PPUSH
14785: CALL_OW 250
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 251
14799: PPUSH
14800: CALL_OW 154
14804: GO 14910
14806: LD_INT 2
14808: DOUBLE
14809: EQUAL
14810: IFTRUE 14814
14812: GO 14878
14814: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14815: LD_VAR 0 6
14819: PUSH
14820: LD_VAR 0 5
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: CALL_OW 250
14835: PUSH
14836: LD_INT 1
14838: NEG
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL_OW 12
14847: PLUS
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL_OW 251
14858: PUSH
14859: LD_INT 1
14861: NEG
14862: PPUSH
14863: LD_INT 1
14865: PPUSH
14866: CALL_OW 12
14870: PLUS
14871: PPUSH
14872: CALL_OW 153
14876: GO 14910
14878: LD_INT 3
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 14909
14886: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14887: LD_VAR 0 6
14891: PUSH
14892: LD_VAR 0 5
14896: ARRAY
14897: PPUSH
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 115
14907: GO 14910
14909: POP
// end ; end ;
14910: GO 14726
14912: POP
14913: POP
14914: GO 14713
14916: POP
14917: POP
// end ;
14918: LD_VAR 0 2
14922: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
14927: PPUSH
14928: PPUSH
// r := 100 ;
14929: LD_ADDR_VAR 0 5
14933: PUSH
14934: LD_INT 100
14936: ST_TO_ADDR
// x := 0 ;
14937: LD_ADDR_VAR 0 6
14941: PUSH
14942: LD_INT 0
14944: ST_TO_ADDR
// while ( x < n ) do
14945: LD_VAR 0 6
14949: PUSH
14950: LD_VAR 0 2
14954: LESS
14955: IFFALSE 15242
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: DOUBLE
14963: LD_INT 1
14965: DEC
14966: ST_TO_ADDR
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_INT 0
14974: PPUSH
14975: CALL_OW 517
14979: PUSH
14980: LD_INT 1
14982: ARRAY
14983: PUSH
14984: FOR_TO
14985: IFFALSE 15238
// begin if r > 50 then
14987: LD_VAR 0 5
14991: PUSH
14992: LD_INT 50
14994: GREATER
14995: IFFALSE 15214
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14997: LD_VAR 0 1
15001: PPUSH
15002: LD_INT 0
15004: PPUSH
15005: CALL_OW 517
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PUSH
15014: LD_VAR 0 4
15018: ARRAY
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: LD_INT 0
15027: PPUSH
15028: CALL_OW 517
15032: PUSH
15033: LD_INT 2
15035: ARRAY
15036: PUSH
15037: LD_VAR 0 4
15041: ARRAY
15042: PPUSH
15043: CALL_OW 458
15047: NOT
15048: IFFALSE 15198
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15050: LD_VAR 0 1
15054: PPUSH
15055: LD_INT 0
15057: PPUSH
15058: CALL_OW 517
15062: PUSH
15063: LD_INT 1
15065: ARRAY
15066: PUSH
15067: LD_VAR 0 4
15071: ARRAY
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_INT 0
15080: PPUSH
15081: CALL_OW 517
15085: PUSH
15086: LD_INT 2
15088: ARRAY
15089: PUSH
15090: LD_VAR 0 4
15094: ARRAY
15095: PPUSH
15096: LD_INT 8
15098: PPUSH
15099: LD_INT 0
15101: PPUSH
15102: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15106: LD_ADDR_EXP 44
15110: PUSH
15111: LD_EXP 44
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: LD_INT 0
15126: PPUSH
15127: CALL_OW 517
15131: PUSH
15132: LD_INT 1
15134: ARRAY
15135: PUSH
15136: LD_VAR 0 4
15140: ARRAY
15141: PUSH
15142: LD_VAR 0 1
15146: PPUSH
15147: LD_INT 0
15149: PPUSH
15150: CALL_OW 517
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PUSH
15159: LD_VAR 0 4
15163: ARRAY
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PPUSH
15169: CALL_OW 2
15173: ST_TO_ADDR
// r := 0 ;
15174: LD_ADDR_VAR 0 5
15178: PUSH
15179: LD_INT 0
15181: ST_TO_ADDR
// x := x + 1 ;
15182: LD_ADDR_VAR 0 6
15186: PUSH
15187: LD_VAR 0 6
15191: PUSH
15192: LD_INT 1
15194: PLUS
15195: ST_TO_ADDR
// end else
15196: GO 15212
// r := r + 35 ;
15198: LD_ADDR_VAR 0 5
15202: PUSH
15203: LD_VAR 0 5
15207: PUSH
15208: LD_INT 35
15210: PLUS
15211: ST_TO_ADDR
// end else
15212: GO 15236
// r := r + rand ( 10 , 25 ) ;
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_VAR 0 5
15223: PUSH
15224: LD_INT 10
15226: PPUSH
15227: LD_INT 25
15229: PPUSH
15230: CALL_OW 12
15234: PLUS
15235: ST_TO_ADDR
// end ;
15236: GO 14984
15238: POP
15239: POP
15240: GO 14945
// end ;
15242: LD_VAR 0 3
15246: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15247: LD_INT 0
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
// tmpTab = [ ] ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: EMPTY
15259: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15260: LD_INT 22
15262: PUSH
15263: LD_VAR 0 1
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 30
15274: PUSH
15275: LD_INT 32
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: PUSH
15291: LD_INT 0
15293: GREATER
15294: IFFALSE 15377
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15296: LD_ADDR_VAR 0 4
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: PUSH
15332: FOR_IN
15333: IFFALSE 15375
// begin for j in UnitsInside ( i ) do
15335: LD_ADDR_VAR 0 5
15339: PUSH
15340: LD_VAR 0 4
15344: PPUSH
15345: CALL_OW 313
15349: PUSH
15350: FOR_IN
15351: IFFALSE 15371
// tmpTab = tmpTab ^ j ;
15353: LD_ADDR_VAR 0 6
15357: PUSH
15358: LD_VAR 0 6
15362: PUSH
15363: LD_VAR 0 5
15367: ADD
15368: ST_TO_ADDR
15369: GO 15350
15371: POP
15372: POP
// end ;
15373: GO 15332
15375: POP
15376: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15377: LD_VAR 0 6
15381: PPUSH
15382: LD_VAR 0 2
15386: PPUSH
15387: CALL_OW 250
15391: PPUSH
15392: LD_VAR 0 2
15396: PPUSH
15397: CALL_OW 251
15401: PPUSH
15402: CALL_OW 114
// end ;
15406: LD_VAR 0 3
15410: RET
// export function CreateNature ; var i , un ; begin
15411: LD_INT 0
15413: PPUSH
15414: PPUSH
15415: PPUSH
// uc_side := 0 ;
15416: LD_ADDR_OWVAR 20
15420: PUSH
15421: LD_INT 0
15423: ST_TO_ADDR
// uc_nation := 0 ;
15424: LD_ADDR_OWVAR 21
15428: PUSH
15429: LD_INT 0
15431: ST_TO_ADDR
// InitHc ;
15432: CALL_OW 19
// hc_class := class_fish ;
15436: LD_ADDR_OWVAR 28
15440: PUSH
15441: LD_INT 20
15443: ST_TO_ADDR
// for i = 1 to 6 do
15444: LD_ADDR_VAR 0 2
15448: PUSH
15449: DOUBLE
15450: LD_INT 1
15452: DEC
15453: ST_TO_ADDR
15454: LD_INT 6
15456: PUSH
15457: FOR_TO
15458: IFFALSE 15477
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15460: CALL_OW 44
15464: PPUSH
15465: LD_INT 23
15467: PPUSH
15468: LD_INT 0
15470: PPUSH
15471: CALL_OW 49
15475: GO 15457
15477: POP
15478: POP
// for i = 1 to Difficulty + 2 do
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_OWVAR 67
15493: PUSH
15494: LD_INT 2
15496: PLUS
15497: PUSH
15498: FOR_TO
15499: IFFALSE 15608
// begin hc_sex = sex_male ;
15501: LD_ADDR_OWVAR 27
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// uc_side = 0 ;
15509: LD_ADDR_OWVAR 20
15513: PUSH
15514: LD_INT 0
15516: ST_TO_ADDR
// uc_nation = nation_nature ;
15517: LD_ADDR_OWVAR 21
15521: PUSH
15522: LD_INT 0
15524: ST_TO_ADDR
// hc_class = class_tiger ;
15525: LD_ADDR_OWVAR 28
15529: PUSH
15530: LD_INT 14
15532: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15533: LD_ADDR_OWVAR 31
15537: PUSH
15538: LD_EXP 37
15542: PUSH
15543: LD_INT 0
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: LD_INT 0
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15558: LD_ADDR_OWVAR 35
15562: PUSH
15563: LD_INT 5
15565: NEG
15566: PPUSH
15567: LD_INT 5
15569: PPUSH
15570: CALL_OW 12
15574: PUSH
15575: LD_OWVAR 67
15579: MUL
15580: ST_TO_ADDR
// un = CreateHuman ;
15581: LD_ADDR_VAR 0 3
15585: PUSH
15586: CALL_OW 44
15590: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15591: LD_VAR 0 3
15595: PPUSH
15596: LD_INT 24
15598: PPUSH
15599: LD_INT 0
15601: PPUSH
15602: CALL_OW 49
// end ;
15606: GO 15498
15608: POP
15609: POP
// for i = 1 to rand ( 3 , 4 ) do
15610: LD_ADDR_VAR 0 2
15614: PUSH
15615: DOUBLE
15616: LD_INT 1
15618: DEC
15619: ST_TO_ADDR
15620: LD_INT 3
15622: PPUSH
15623: LD_INT 4
15625: PPUSH
15626: CALL_OW 12
15630: PUSH
15631: FOR_TO
15632: IFFALSE 15724
// begin hc_sex = sex_male ;
15634: LD_ADDR_OWVAR 27
15638: PUSH
15639: LD_INT 1
15641: ST_TO_ADDR
// uc_side = 0 ;
15642: LD_ADDR_OWVAR 20
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// uc_nation = nation_nature ;
15650: LD_ADDR_OWVAR 21
15654: PUSH
15655: LD_INT 0
15657: ST_TO_ADDR
// hc_class = 18 ;
15658: LD_ADDR_OWVAR 28
15662: PUSH
15663: LD_INT 18
15665: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15666: LD_ADDR_OWVAR 31
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: LD_INT 0
15676: PUSH
15677: LD_INT 0
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: ST_TO_ADDR
// hc_agressivity = 0 ;
15689: LD_ADDR_OWVAR 35
15693: PUSH
15694: LD_INT 0
15696: ST_TO_ADDR
// un = CreateHuman ;
15697: LD_ADDR_VAR 0 3
15701: PUSH
15702: CALL_OW 44
15706: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 24
15714: PPUSH
15715: LD_INT 0
15717: PPUSH
15718: CALL_OW 49
// end ;
15722: GO 15631
15724: POP
15725: POP
// for i = 1 to rand ( 1 , 3 ) do
15726: LD_ADDR_VAR 0 2
15730: PUSH
15731: DOUBLE
15732: LD_INT 1
15734: DEC
15735: ST_TO_ADDR
15736: LD_INT 1
15738: PPUSH
15739: LD_INT 3
15741: PPUSH
15742: CALL_OW 12
15746: PUSH
15747: FOR_TO
15748: IFFALSE 15896
// begin hc_sex = sex_male ;
15750: LD_ADDR_OWVAR 27
15754: PUSH
15755: LD_INT 1
15757: ST_TO_ADDR
// uc_side = 0 ;
15758: LD_ADDR_OWVAR 20
15762: PUSH
15763: LD_INT 0
15765: ST_TO_ADDR
// uc_nation = nation_nature ;
15766: LD_ADDR_OWVAR 21
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
// hc_class = class_apeman ;
15774: LD_ADDR_OWVAR 28
15778: PUSH
15779: LD_INT 12
15781: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15782: LD_ADDR_OWVAR 31
15786: PUSH
15787: LD_EXP 36
15791: PPUSH
15792: LD_EXP 37
15796: PPUSH
15797: CALL_OW 12
15801: PUSH
15802: LD_EXP 36
15806: PPUSH
15807: LD_EXP 37
15811: PPUSH
15812: CALL_OW 12
15816: PUSH
15817: LD_EXP 36
15821: PPUSH
15822: LD_EXP 37
15826: PPUSH
15827: CALL_OW 12
15831: PUSH
15832: LD_EXP 36
15836: PPUSH
15837: LD_EXP 37
15841: PPUSH
15842: CALL_OW 12
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15853: LD_ADDR_OWVAR 35
15857: PUSH
15858: LD_INT 1
15860: PPUSH
15861: LD_INT 20
15863: PPUSH
15864: CALL_OW 12
15868: ST_TO_ADDR
// un = CreateHuman ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: CALL_OW 44
15878: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 24
15886: PPUSH
15887: LD_INT 0
15889: PPUSH
15890: CALL_OW 49
// end ;
15894: GO 15747
15896: POP
15897: POP
// end ; end_of_file
15898: LD_VAR 0 1
15902: RET
// on UnitDestroyed ( unit ) do var i ;
15903: LD_INT 0
15905: PPUSH
// begin if unit in russianTanks then
15906: LD_VAR 0 1
15910: PUSH
15911: LD_EXP 39
15915: IN
15916: IFFALSE 15934
// russianTanks := russianTanks diff unit ;
15918: LD_ADDR_EXP 39
15922: PUSH
15923: LD_EXP 39
15927: PUSH
15928: LD_VAR 0 1
15932: DIFF
15933: ST_TO_ADDR
// if unit in russianTimeLapsers then
15934: LD_VAR 0 1
15938: PUSH
15939: LD_EXP 40
15943: IN
15944: IFFALSE 15962
// russianTimeLapsers := russianTimeLapsers diff unit ;
15946: LD_ADDR_EXP 40
15950: PUSH
15951: LD_EXP 40
15955: PUSH
15956: LD_VAR 0 1
15960: DIFF
15961: ST_TO_ADDR
// if unit in RuScientists then
15962: LD_VAR 0 1
15966: PUSH
15967: LD_EXP 34
15971: IN
15972: IFFALSE 16004
// begin RuScientists = RuScientists diff unit ;
15974: LD_ADDR_EXP 34
15978: PUSH
15979: LD_EXP 34
15983: PUSH
15984: LD_VAR 0 1
15988: DIFF
15989: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15990: LD_ADDR_EXP 35
15994: PUSH
15995: LD_EXP 35
15999: PUSH
16000: LD_INT 1
16002: PLUS
16003: ST_TO_ADDR
// end ; end ;
16004: PPOPN 2
16006: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16007: LD_VAR 0 3
16011: PPUSH
16012: CALL_OW 264
16016: PUSH
16017: LD_INT 9
16019: EQUAL
16020: IFFALSE 16036
// laserCounterDestroy := laserCounterDestroy + 1 ;
16022: LD_ADDR_EXP 50
16026: PUSH
16027: LD_EXP 50
16031: PUSH
16032: LD_INT 1
16034: PLUS
16035: ST_TO_ADDR
// end ;
16036: PPOPN 3
16038: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16039: LD_VAR 0 1
16043: PUSH
16044: LD_INT 10
16046: EQUAL
16047: PUSH
16048: LD_VAR 0 2
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: LD_INT 1
16060: EQUAL
16061: AND
16062: PUSH
16063: LD_EXP 47
16067: PUSH
16068: LD_INT 0
16070: EQUAL
16071: AND
16072: IFFALSE 16184
// begin eventVar1 = 1 ;
16074: LD_ADDR_EXP 47
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// teleportExplored = 1 ;
16082: LD_ADDR_EXP 33
16086: PUSH
16087: LD_INT 1
16089: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16090: LD_STRING M2a
16092: PPUSH
16093: CALL_OW 337
// wait ( 0 0$2 ) ;
16097: LD_INT 70
16099: PPUSH
16100: CALL_OW 67
// DialogueOn ;
16104: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16108: LD_INT 22
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: PPUSH
16137: LD_STRING DT3a-Sol1-1
16139: PPUSH
16140: LD_STRING DT3a-FSol1-1
16142: PPUSH
16143: CALL 12328 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16147: LD_EXP 1
16151: PPUSH
16152: LD_STRING DT3a-JMM-1
16154: PPUSH
16155: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16159: LD_VAR 0 2
16163: PPUSH
16164: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16168: LD_EXP 1
16172: PPUSH
16173: LD_STRING DT3a-JMM-1a
16175: PPUSH
16176: CALL_OW 88
// DialogueOff ;
16180: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 10
16191: EQUAL
16192: PUSH
16193: LD_VAR 0 2
16197: PPUSH
16198: CALL_OW 247
16202: PUSH
16203: LD_INT 2
16205: EQUAL
16206: AND
16207: PUSH
16208: LD_VAR 0 2
16212: PPUSH
16213: CALL_OW 255
16217: PUSH
16218: LD_INT 3
16220: EQUAL
16221: AND
16222: PUSH
16223: LD_EXP 28
16227: PUSH
16228: LD_INT 0
16230: EQUAL
16231: AND
16232: IFFALSE 16249
// begin wait ( 0 0$3 ) ;
16234: LD_INT 105
16236: PPUSH
16237: CALL_OW 67
// vehicleTeleported = 1 ;
16241: LD_ADDR_EXP 28
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 10
16256: EQUAL
16257: PUSH
16258: LD_VAR 0 2
16262: PPUSH
16263: CALL_OW 247
16267: PUSH
16268: LD_INT 2
16270: EQUAL
16271: AND
16272: PUSH
16273: LD_VAR 0 2
16277: PPUSH
16278: CALL_OW 255
16282: PUSH
16283: LD_INT 3
16285: EQUAL
16286: AND
16287: PUSH
16288: LD_EXP 28
16292: PUSH
16293: LD_INT 2
16295: EQUAL
16296: AND
16297: IFFALSE 16314
// begin wait ( 0 0$3 ) ;
16299: LD_INT 105
16301: PPUSH
16302: CALL_OW 67
// vehicleTeleported = 3 ;
16306: LD_ADDR_EXP 28
16310: PUSH
16311: LD_INT 3
16313: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16314: LD_VAR 0 1
16318: PUSH
16319: LD_INT 10
16321: EQUAL
16322: PUSH
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 247
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: AND
16337: PUSH
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL_OW 255
16347: PUSH
16348: LD_INT 3
16350: EQUAL
16351: AND
16352: IFFALSE 16368
// tpCounter = tpCounter + 1 ;
16354: LD_ADDR_EXP 29
16358: PUSH
16359: LD_EXP 29
16363: PUSH
16364: LD_INT 1
16366: PLUS
16367: ST_TO_ADDR
// end ;
16368: PPOPN 2
16370: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 264
16380: PUSH
16381: LD_INT 7
16383: EQUAL
16384: IFFALSE 16394
// rocketBuilded := true ;
16386: LD_ADDR_EXP 51
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 21
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PUSH
16408: LD_INT 112
16410: EQUAL
16411: OR
16412: IFFALSE 16533
// if GetSide ( vehicle ) = 3 then
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 255
16423: PUSH
16424: LD_INT 3
16426: EQUAL
16427: IFFALSE 16533
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 264
16438: PUSH
16439: LD_INT 46
16441: EQUAL
16442: PUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 264
16452: PUSH
16453: LD_INT 45
16455: EQUAL
16456: OR
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 264
16467: PUSH
16468: LD_INT 44
16470: EQUAL
16471: OR
16472: IFFALSE 16490
// begin russianTanks = russianTanks ^ vehicle ;
16474: LD_ADDR_EXP 39
16478: PUSH
16479: LD_EXP 39
16483: PUSH
16484: LD_VAR 0 1
16488: ADD
16489: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 264
16499: PUSH
16500: LD_INT 49
16502: EQUAL
16503: IFFALSE 16533
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16505: LD_ADDR_EXP 40
16509: PUSH
16510: LD_EXP 40
16514: PUSH
16515: LD_VAR 0 1
16519: ADD
16520: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_INT 137
16528: PPUSH
16529: CALL_OW 120
// end ; end ; end ;
16533: PPOPN 2
16535: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16536: LD_INT 0
16538: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16539: LD_VAR 0 2
16543: PPUSH
16544: CALL_OW 255
16548: PUSH
16549: LD_INT 3
16551: EQUAL
16552: PUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 257
16562: PUSH
16563: LD_INT 3
16565: EQUAL
16566: AND
16567: PUSH
16568: LD_INT 21
16570: PPUSH
16571: CALL_OW 255
16575: PUSH
16576: LD_INT 3
16578: EQUAL
16579: AND
16580: PUSH
16581: LD_INT 21
16583: PPUSH
16584: CALL_OW 302
16588: AND
16589: IFFALSE 16603
// ComEnterUnit ( human , ru_fact ) ;
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_INT 21
16598: PPUSH
16599: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: LD_INT 4
16615: EQUAL
16616: PUSH
16617: LD_VAR 0 2
16621: PPUSH
16622: CALL_OW 255
16626: PUSH
16627: LD_INT 3
16629: EQUAL
16630: AND
16631: PUSH
16632: LD_EXP 41
16636: PUSH
16637: LD_INT 0
16639: EQUAL
16640: AND
16641: IFFALSE 16703
// for i in RuScientists do
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_EXP 34
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16701
// if i = human then
16656: LD_VAR 0 3
16660: PUSH
16661: LD_VAR 0 2
16665: EQUAL
16666: IFFALSE 16699
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16668: LD_VAR 0 3
16672: PPUSH
16673: LD_INT 13
16675: PUSH
16676: LD_INT 14
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 1
16685: PPUSH
16686: LD_INT 2
16688: PPUSH
16689: CALL_OW 12
16693: ARRAY
16694: PPUSH
16695: CALL_OW 113
16699: GO 16653
16701: POP
16702: POP
// end ;
16703: PPOPN 3
16705: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16710: LD_VAR 0 2
16714: PPUSH
16715: CALL_OW 255
16719: PUSH
16720: LD_INT 3
16722: EQUAL
16723: PUSH
16724: LD_VAR 0 2
16728: PPUSH
16729: CALL_OW 257
16733: PUSH
16734: LD_INT 4
16736: EQUAL
16737: AND
16738: IFFALSE 16880
// for i in RuScientists do
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: LD_EXP 34
16749: PUSH
16750: FOR_IN
16751: IFFALSE 16878
// if i = human then
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 2
16762: EQUAL
16763: IFFALSE 16876
// if IsOk ( rutp ) then
16765: LD_INT 137
16767: PPUSH
16768: CALL_OW 302
16772: IFFALSE 16845
// begin rnd = rand ( 1 , 2 ) ;
16774: LD_ADDR_VAR 0 4
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_INT 2
16784: PPUSH
16785: CALL_OW 12
16789: ST_TO_ADDR
// if rnd = 1 then
16790: LD_VAR 0 4
16794: PUSH
16795: LD_INT 1
16797: EQUAL
16798: IFFALSE 16812
// ComEnterUnit ( vehicle , rutp ) ;
16800: LD_VAR 0 1
16804: PPUSH
16805: LD_INT 137
16807: PPUSH
16808: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: LD_INT 13
16819: PUSH
16820: LD_INT 14
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 2
16832: PPUSH
16833: CALL_OW 12
16837: ARRAY
16838: PPUSH
16839: CALL_OW 173
// end else
16843: GO 16876
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16845: LD_VAR 0 1
16849: PPUSH
16850: LD_INT 13
16852: PUSH
16853: LD_INT 14
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 1
16862: PPUSH
16863: LD_INT 2
16865: PPUSH
16866: CALL_OW 12
16870: ARRAY
16871: PPUSH
16872: CALL_OW 113
// end ;
16876: GO 16750
16878: POP
16879: POP
// end ;
16880: PPOPN 4
16882: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL 32999 0 1
// end ; end_of_file
16892: PPOPN 1
16894: END
// every 0 0$1 trigger ruAI = 1 do
16895: LD_EXP 41
16899: PUSH
16900: LD_INT 1
16902: EQUAL
16903: IFFALSE 17015
16905: GO 16907
16907: DISABLE
// begin enable ;
16908: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16909: LD_INT 3
16911: PPUSH
16912: LD_INT 6
16914: PPUSH
16915: LD_INT 9
16917: PPUSH
16918: LD_EXP 38
16922: PPUSH
16923: CALL 13297 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 4
16932: PPUSH
16933: LD_INT 10
16935: PPUSH
16936: LD_EXP 38
16940: PPUSH
16941: CALL 13297 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16945: LD_INT 3
16947: PPUSH
16948: LD_INT 9
16950: PPUSH
16951: CALL 14268 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16955: LD_INT 3
16957: PPUSH
16958: LD_INT 10
16960: PPUSH
16961: CALL 14268 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16965: LD_INT 3
16967: PPUSH
16968: LD_INT 16
16970: PPUSH
16971: LD_INT 9
16973: PPUSH
16974: LD_INT 91
16976: PPUSH
16977: CALL 13688 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 17
16986: PPUSH
16987: LD_INT 10
16989: PPUSH
16990: LD_INT 47
16992: PUSH
16993: LD_INT 129
16995: PUSH
16996: LD_INT 135
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL 13688 0 4
// IntBazooka ( 3 ) ;
17008: LD_INT 3
17010: PPUSH
17011: CALL 14595 0 1
// end ;
17015: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
17016: LD_EXP 39
17020: PUSH
17021: LD_INT 3
17023: PUSH
17024: LD_INT 4
17026: PUSH
17027: LD_INT 4
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: LD_OWVAR 67
17039: ARRAY
17040: GREATEREQUAL
17041: IFFALSE 17541
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
17049: PPUSH
17050: PPUSH
17051: PPUSH
// begin enable ;
17052: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_EXP 39
17062: PUSH
17063: LD_EXP 40
17067: UNION
17068: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17069: LD_ADDR_EXP 39
17073: PUSH
17074: LD_EXP 39
17078: PUSH
17079: LD_VAR 0 2
17083: DIFF
17084: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17085: LD_ADDR_EXP 40
17089: PUSH
17090: LD_EXP 40
17094: PUSH
17095: LD_VAR 0 2
17099: DIFF
17100: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17101: LD_INT 10
17103: PPUSH
17104: CALL_OW 302
17108: IFFALSE 17191
// begin for j in tmp do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: LD_VAR 0 2
17119: PUSH
17120: FOR_IN
17121: IFFALSE 17164
// if attackTactic < 2 then
17123: LD_EXP 43
17127: PUSH
17128: LD_INT 2
17130: LESS
17131: IFFALSE 17147
// ComEnterUnit ( j , ruteleprt ) else
17133: LD_VAR 0 1
17137: PPUSH
17138: LD_INT 10
17140: PPUSH
17141: CALL_OW 120
17145: GO 17162
// ComMoveXY ( j , 88 , 69 ) ;
17147: LD_VAR 0 1
17151: PPUSH
17152: LD_INT 88
17154: PPUSH
17155: LD_INT 69
17157: PPUSH
17158: CALL_OW 111
17162: GO 17120
17164: POP
17165: POP
// repeat wait ( 0 0$1 ) ;
17166: LD_INT 35
17168: PPUSH
17169: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17173: LD_VAR 0 2
17177: PPUSH
17178: LD_INT 60
17180: PUSH
17181: EMPTY
17182: LIST
17183: PPUSH
17184: CALL_OW 72
17188: NOT
17189: IFFALSE 17166
// end ; repeat wait ( 0 0$1 ) ;
17191: LD_INT 35
17193: PPUSH
17194: CALL_OW 67
// for j in tmp do
17198: LD_ADDR_VAR 0 1
17202: PUSH
17203: LD_VAR 0 2
17207: PUSH
17208: FOR_IN
17209: IFFALSE 17532
// begin if IsDead ( j ) then
17211: LD_VAR 0 1
17215: PPUSH
17216: CALL_OW 301
17220: IFFALSE 17238
// tmp := tmp diff j ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_VAR 0 2
17231: PUSH
17232: LD_VAR 0 1
17236: DIFF
17237: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17238: LD_ADDR_VAR 0 3
17242: PUSH
17243: LD_INT 81
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: PPUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 74
17267: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17268: LD_ADDR_VAR 0 4
17272: PUSH
17273: LD_INT 81
17275: PUSH
17276: LD_INT 3
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: PPUSH
17305: LD_VAR 0 1
17309: PPUSH
17310: CALL_OW 74
17314: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 264
17324: PUSH
17325: LD_INT 49
17327: EQUAL
17328: IFFALSE 17464
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
17330: LD_VAR 0 2
17334: PPUSH
17335: LD_INT 3
17337: PUSH
17338: LD_INT 34
17340: PUSH
17341: LD_INT 49
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 72
17356: PUSH
17357: LD_INT 1
17359: GREATER
17360: PUSH
17361: LD_VAR 0 2
17365: PPUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 34
17371: PUSH
17372: LD_INT 49
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 72
17387: AND
17388: IFFALSE 17438
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17390: LD_VAR 0 1
17394: PPUSH
17395: LD_VAR 0 2
17399: PPUSH
17400: LD_INT 3
17402: PUSH
17403: LD_INT 34
17405: PUSH
17406: LD_INT 49
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PPUSH
17417: CALL_OW 72
17421: PPUSH
17422: LD_VAR 0 1
17426: PPUSH
17427: CALL_OW 74
17431: PPUSH
17432: CALL_OW 112
17436: GO 17462
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17438: LD_VAR 0 1
17442: PPUSH
17443: LD_VAR 0 3
17447: PPUSH
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 74
17457: PPUSH
17458: CALL_OW 112
// end else
17462: GO 17530
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: CALL_OW 296
17478: PUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: LD_VAR 0 3
17488: PPUSH
17489: CALL_OW 296
17493: PUSH
17494: LD_INT 2
17496: PLUS
17497: LESS
17498: IFFALSE 17516
// ComAttackUnit ( j , target2 ) else
17500: LD_VAR 0 1
17504: PPUSH
17505: LD_VAR 0 4
17509: PPUSH
17510: CALL_OW 115
17514: GO 17530
// ComAttackUnit ( j , target1 ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_VAR 0 3
17525: PPUSH
17526: CALL_OW 115
// end ; end ;
17530: GO 17208
17532: POP
17533: POP
// until not tmp ;
17534: LD_VAR 0 2
17538: NOT
17539: IFFALSE 17191
// end ;
17541: PPOPN 4
17543: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17544: LD_INT 4
17546: PPUSH
17547: CALL_OW 303
17551: IFFALSE 17566
17553: GO 17555
17555: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17556: LD_INT 3
17558: PPUSH
17559: LD_INT 4
17561: PPUSH
17562: CALL 15247 0 2
17566: END
// every 0 0$1 do
17567: GO 17569
17569: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17570: LD_INT 3
17572: PPUSH
17573: LD_INT 91
17575: PPUSH
17576: LD_INT 3
17578: PPUSH
17579: CALL 13056 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17583: LD_INT 3
17585: PPUSH
17586: LD_INT 47
17588: PPUSH
17589: LD_INT 3
17591: PPUSH
17592: CALL 13056 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17596: LD_INT 3
17598: PPUSH
17599: LD_INT 129
17601: PPUSH
17602: LD_INT 3
17604: PPUSH
17605: CALL 13056 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17609: LD_INT 3
17611: PPUSH
17612: LD_INT 3
17614: PPUSH
17615: LD_INT 3
17617: PPUSH
17618: CALL 13056 0 3
// end ;
17622: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17623: LD_INT 22
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 21
17635: PUSH
17636: LD_INT 3
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PPUSH
17647: CALL_OW 69
17651: IFFALSE 17716
17653: GO 17655
17655: DISABLE
// begin wait ( 0 0$40 ) ;
17656: LD_INT 1400
17658: PPUSH
17659: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17663: LD_INT 3
17665: PPUSH
17666: LD_INT 21
17668: PPUSH
17669: LD_INT 3
17671: PUSH
17672: LD_INT 4
17674: PUSH
17675: LD_INT 4
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: LIST
17682: PUSH
17683: LD_OWVAR 67
17687: ARRAY
17688: PPUSH
17689: LD_INT 46
17691: PUSH
17692: LD_INT 45
17694: PUSH
17695: LD_INT 44
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: PPUSH
17703: LD_INT 3
17705: PPUSH
17706: LD_INT 3
17708: PPUSH
17709: LD_INT 24
17711: PPUSH
17712: CALL 14448 0 7
// end ;
17716: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17717: LD_EXP 27
17721: PUSH
17722: LD_INT 2
17724: EQUAL
17725: PUSH
17726: LD_INT 21
17728: PPUSH
17729: CALL_OW 255
17733: PUSH
17734: LD_INT 3
17736: EQUAL
17737: AND
17738: PUSH
17739: LD_INT 112
17741: PPUSH
17742: CALL_OW 255
17746: PUSH
17747: LD_INT 3
17749: EQUAL
17750: AND
17751: PUSH
17752: LD_INT 21
17754: PPUSH
17755: CALL_OW 302
17759: AND
17760: PUSH
17761: LD_INT 112
17763: PPUSH
17764: CALL_OW 302
17768: AND
17769: PUSH
17770: LD_INT 22
17772: PUSH
17773: LD_INT 3
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 21
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 50
17792: PUSH
17793: EMPTY
17794: LIST
17795: PUSH
17796: LD_INT 3
17798: PUSH
17799: LD_INT 58
17801: PUSH
17802: EMPTY
17803: LIST
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: PUSH
17820: LD_INT 18
17822: PPUSH
17823: LD_INT 22
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 21
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 70
17851: PUSH
17852: LD_INT 0
17854: EQUAL
17855: DIFF
17856: AND
17857: IFFALSE 17975
17859: GO 17861
17861: DISABLE
// begin enable ;
17862: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17863: LD_INT 3
17865: PPUSH
17866: LD_INT 21
17868: PPUSH
17869: LD_INT 3
17871: PUSH
17872: LD_INT 4
17874: PUSH
17875: LD_INT 4
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: PUSH
17883: LD_OWVAR 67
17887: ARRAY
17888: PPUSH
17889: LD_INT 46
17891: PUSH
17892: LD_INT 45
17894: PUSH
17895: LD_INT 44
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PPUSH
17903: LD_INT 3
17905: PPUSH
17906: LD_INT 3
17908: PPUSH
17909: LD_INT 24
17911: PPUSH
17912: CALL 14448 0 7
// if russianTimeLapsers = 0 then
17916: LD_EXP 40
17920: PUSH
17921: LD_INT 0
17923: EQUAL
17924: IFFALSE 17975
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17926: LD_INT 3
17928: PPUSH
17929: LD_INT 112
17931: PPUSH
17932: LD_INT 1
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: LD_OWVAR 67
17950: ARRAY
17951: PPUSH
17952: LD_INT 49
17954: PUSH
17955: LD_INT 49
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: LD_INT 3
17967: PPUSH
17968: LD_INT 24
17970: PPUSH
17971: CALL 14448 0 7
// end ;
17975: END
// every 0 0$1 trigger arabianMines do var i ;
17976: LD_EXP 44
17980: IFFALSE 18101
17982: GO 17984
17984: DISABLE
17985: LD_INT 0
17987: PPUSH
// begin enable ;
17988: ENABLE
// for i in arabianMines do
17989: LD_ADDR_VAR 0 1
17993: PUSH
17994: LD_EXP 44
17998: PUSH
17999: FOR_IN
18000: IFFALSE 18099
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18002: LD_INT 22
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 92
18014: PUSH
18015: LD_VAR 0 1
18019: PUSH
18020: LD_INT 1
18022: ARRAY
18023: PUSH
18024: LD_VAR 0 1
18028: PUSH
18029: LD_INT 2
18031: ARRAY
18032: PUSH
18033: LD_INT 3
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PPUSH
18046: CALL_OW 69
18050: IFFALSE 18097
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18052: LD_VAR 0 1
18056: PUSH
18057: LD_INT 1
18059: ARRAY
18060: PPUSH
18061: LD_VAR 0 1
18065: PUSH
18066: LD_INT 2
18068: ARRAY
18069: PPUSH
18070: LD_INT 5
18072: PPUSH
18073: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18077: LD_ADDR_EXP 44
18081: PUSH
18082: LD_EXP 44
18086: PPUSH
18087: LD_VAR 0 1
18091: PPUSH
18092: CALL_OW 3
18096: ST_TO_ADDR
// end ; end ;
18097: GO 17999
18099: POP
18100: POP
// end ;
18101: PPOPN 1
18103: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18104: LD_EXP 28
18108: PUSH
18109: LD_INT 4
18111: EQUAL
18112: PUSH
18113: LD_EXP 29
18117: PUSH
18118: LD_INT 6
18120: PUSH
18121: LD_INT 8
18123: PUSH
18124: LD_INT 8
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: LD_OWVAR 67
18136: ARRAY
18137: EQUAL
18138: AND
18139: IFFALSE 18157
18141: GO 18143
18143: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18144: LD_INT 10
18146: PPUSH
18147: LD_INT 47
18149: PPUSH
18150: LD_INT 82
18152: PPUSH
18153: CALL_OW 243
18157: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18158: LD_EXP 28
18162: PUSH
18163: LD_INT 4
18165: EQUAL
18166: IFFALSE 18188
18168: GO 18170
18170: DISABLE
// begin enable ;
18171: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18172: LD_ADDR_EXP 43
18176: PUSH
18177: LD_INT 1
18179: PPUSH
18180: LD_INT 2
18182: PPUSH
18183: CALL_OW 12
18187: ST_TO_ADDR
// end ; end_of_file
18188: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18189: LD_INT 3
18191: PPUSH
18192: CALL_OW 301
18196: IFFALSE 18385
18198: GO 18200
18200: DISABLE
// begin if sciCounter = 0 then
18201: LD_EXP 35
18205: PUSH
18206: LD_INT 0
18208: EQUAL
18209: IFFALSE 18237
// begin Say ( JMM , D7a-JMM-1 ) ;
18211: LD_EXP 1
18215: PPUSH
18216: LD_STRING D7a-JMM-1
18218: PPUSH
18219: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18223: LD_EXP 22
18227: PPUSH
18228: LD_STRING D7a-Pow-1
18230: PPUSH
18231: CALL_OW 94
// end else
18235: GO 18381
// if sciCounter < 6 then
18237: LD_EXP 35
18241: PUSH
18242: LD_INT 6
18244: LESS
18245: IFFALSE 18273
// begin Say ( JMM , D7b-JMM-1 ) ;
18247: LD_EXP 1
18251: PPUSH
18252: LD_STRING D7b-JMM-1
18254: PPUSH
18255: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18259: LD_EXP 22
18263: PPUSH
18264: LD_STRING D7b-Pow-1
18266: PPUSH
18267: CALL_OW 94
// end else
18271: GO 18381
// begin Say ( JMM , D7c-JMM-1 ) ;
18273: LD_EXP 1
18277: PPUSH
18278: LD_STRING D7c-JMM-1
18280: PPUSH
18281: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18285: LD_EXP 22
18289: PPUSH
18290: LD_STRING D7c-Pow-1
18292: PPUSH
18293: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18297: LD_EXP 1
18301: PPUSH
18302: LD_STRING D7d-JMM-1
18304: PPUSH
18305: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18309: LD_EXP 22
18313: PPUSH
18314: LD_STRING D7d-Pow-1
18316: PPUSH
18317: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18321: LD_EXP 1
18325: PPUSH
18326: LD_STRING D7d-JMM-2
18328: PPUSH
18329: CALL_OW 88
// if askSiberite = 1 then
18333: LD_EXP 32
18337: PUSH
18338: LD_INT 1
18340: EQUAL
18341: IFFALSE 18357
// Say ( JMM , D7d-JMM-2a ) else
18343: LD_EXP 1
18347: PPUSH
18348: LD_STRING D7d-JMM-2a
18350: PPUSH
18351: CALL_OW 88
18355: GO 18369
// SayRadio ( Powell , D7d-Pow-2 ) ;
18357: LD_EXP 22
18361: PPUSH
18362: LD_STRING D7d-Pow-2
18364: PPUSH
18365: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18369: LD_EXP 22
18373: PPUSH
18374: LD_STRING D7d-Pow-2a
18376: PPUSH
18377: CALL_OW 94
// end ; FinishMission ;
18381: CALL 18386 0 0
// end ;
18385: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18386: LD_INT 0
18388: PPUSH
18389: PPUSH
18390: PPUSH
18391: PPUSH
// m1 := false ;
18392: LD_ADDR_VAR 0 2
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// m2 := false ;
18400: LD_ADDR_VAR 0 3
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// m3 := false ;
18408: LD_ADDR_VAR 0 4
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// if not westPathUsed then
18416: LD_EXP 49
18420: NOT
18421: IFFALSE 18430
// SetAchievement ( ACH_PATH ) ;
18423: LD_STRING ACH_PATH
18425: PPUSH
18426: CALL_OW 543
// if not rocketBuilded then
18430: LD_EXP 51
18434: NOT
18435: IFFALSE 18451
// begin wait ( 3 ) ;
18437: LD_INT 3
18439: PPUSH
18440: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18444: LD_STRING ACH_ROCKET
18446: PPUSH
18447: CALL_OW 543
// end ; if tick <= 40 40$00 then
18451: LD_OWVAR 1
18455: PUSH
18456: LD_INT 84000
18458: LESSEQUAL
18459: IFFALSE 18475
// begin wait ( 3 ) ;
18461: LD_INT 3
18463: PPUSH
18464: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18468: LD_STRING ACH_ASPEED_12
18470: PPUSH
18471: CALL_OW 543
// end ; if teleportExplored = 1 then
18475: LD_EXP 33
18479: PUSH
18480: LD_INT 1
18482: EQUAL
18483: IFFALSE 18505
// begin m1 := true ;
18485: LD_ADDR_VAR 0 2
18489: PUSH
18490: LD_INT 1
18492: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18493: LD_STRING Teleport
18495: PPUSH
18496: LD_INT 1
18498: PPUSH
18499: CALL_OW 101
// end else
18503: GO 18516
// AddMedal ( Teleport , - 1 ) ;
18505: LD_STRING Teleport
18507: PPUSH
18508: LD_INT 1
18510: NEG
18511: PPUSH
18512: CALL_OW 101
// if sciCounter > 2 then
18516: LD_EXP 35
18520: PUSH
18521: LD_INT 2
18523: GREATER
18524: IFFALSE 18546
// begin m2 := true ;
18526: LD_ADDR_VAR 0 3
18530: PUSH
18531: LD_INT 1
18533: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18534: LD_STRING Materials
18536: PPUSH
18537: LD_INT 1
18539: PPUSH
18540: CALL_OW 101
// end else
18544: GO 18557
// AddMedal ( Materials , - 1 ) ;
18546: LD_STRING Materials
18548: PPUSH
18549: LD_INT 1
18551: NEG
18552: PPUSH
18553: CALL_OW 101
// if sciCounter >= 6 then
18557: LD_EXP 35
18561: PUSH
18562: LD_INT 6
18564: GREATEREQUAL
18565: IFFALSE 18597
// begin m3 := true ;
18567: LD_ADDR_VAR 0 4
18571: PUSH
18572: LD_INT 1
18574: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18575: LD_STRING Scientists
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18585: LD_INT 1
18587: PPUSH
18588: LD_STRING 12_SciDed_1
18590: PPUSH
18591: CALL_OW 39
// end else
18595: GO 18618
// begin AddMedal ( Scientists , - 1 ) ;
18597: LD_STRING Scientists
18599: PPUSH
18600: LD_INT 1
18602: NEG
18603: PPUSH
18604: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18608: LD_INT 0
18610: PPUSH
18611: LD_STRING 12_SciDed_1
18613: PPUSH
18614: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18618: LD_EXP 31
18622: PPUSH
18623: LD_STRING 12_MainDepositFake_1
18625: PPUSH
18626: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18630: LD_VAR 0 2
18634: PUSH
18635: LD_VAR 0 3
18639: AND
18640: PUSH
18641: LD_VAR 0 4
18645: AND
18646: PUSH
18647: LD_OWVAR 67
18651: PUSH
18652: LD_INT 3
18654: EQUAL
18655: AND
18656: IFFALSE 18668
// SetAchievementEX ( ACH_AMER , 12 ) ;
18658: LD_STRING ACH_AMER
18660: PPUSH
18661: LD_INT 12
18663: PPUSH
18664: CALL_OW 564
// GiveMedals ( MAIN ) ;
18668: LD_STRING MAIN
18670: PPUSH
18671: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18675: LD_INT 22
18677: PUSH
18678: LD_INT 1
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 21
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 25
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 25
18710: PUSH
18711: LD_INT 2
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 25
18720: PUSH
18721: LD_INT 3
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 25
18730: PUSH
18731: LD_INT 4
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 25
18740: PUSH
18741: LD_INT 5
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 25
18750: PUSH
18751: LD_INT 8
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: PPUSH
18772: CALL_OW 69
18776: PPUSH
18777: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18781: LD_EXP 1
18785: PPUSH
18786: LD_EXP 46
18790: PUSH
18791: LD_STRING JMM
18793: STR
18794: PPUSH
18795: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18799: LD_EXP 7
18803: PPUSH
18804: LD_EXP 46
18808: PUSH
18809: LD_STRING Brown
18811: STR
18812: PPUSH
18813: CALL 12288 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18817: LD_EXP 3
18821: PPUSH
18822: LD_EXP 46
18826: PUSH
18827: LD_STRING Donaldson
18829: STR
18830: PPUSH
18831: CALL 12288 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18835: LD_EXP 4
18839: PPUSH
18840: LD_EXP 46
18844: PUSH
18845: LD_STRING Bobby
18847: STR
18848: PPUSH
18849: CALL 12288 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18853: LD_EXP 5
18857: PPUSH
18858: LD_EXP 46
18862: PUSH
18863: LD_STRING Cyrus
18865: STR
18866: PPUSH
18867: CALL 12288 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18871: LD_EXP 2
18875: PPUSH
18876: LD_EXP 46
18880: PUSH
18881: LD_STRING Lisa
18883: STR
18884: PPUSH
18885: CALL 12288 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18889: LD_EXP 12
18893: PPUSH
18894: LD_EXP 46
18898: PUSH
18899: LD_STRING Frank
18901: STR
18902: PPUSH
18903: CALL 12288 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18907: LD_EXP 13
18911: PPUSH
18912: LD_EXP 46
18916: PUSH
18917: LD_STRING Kikuchi
18919: STR
18920: PPUSH
18921: CALL 12288 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18925: LD_EXP 9
18929: PPUSH
18930: LD_EXP 46
18934: PUSH
18935: LD_STRING Houten
18937: STR
18938: PPUSH
18939: CALL 12288 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18943: LD_EXP 11
18947: PPUSH
18948: LD_EXP 46
18952: PUSH
18953: LD_STRING Gary
18955: STR
18956: PPUSH
18957: CALL 12288 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18961: LD_EXP 10
18965: PPUSH
18966: LD_EXP 46
18970: PUSH
18971: LD_STRING Cornell
18973: STR
18974: PPUSH
18975: CALL 12288 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18979: LD_EXP 6
18983: PPUSH
18984: LD_EXP 46
18988: PUSH
18989: LD_STRING Denis
18991: STR
18992: PPUSH
18993: CALL 12288 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18997: LD_EXP 8
19001: PPUSH
19002: LD_EXP 46
19006: PUSH
19007: LD_STRING Gladstone
19009: STR
19010: PPUSH
19011: CALL 12288 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19015: LD_INT 22
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 23
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 21
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: LD_INT 25
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 25
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 25
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 25
19080: PUSH
19081: LD_INT 4
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 25
19090: PUSH
19091: LD_INT 5
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 25
19100: PUSH
19101: LD_INT 8
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: PPUSH
19123: CALL_OW 69
19127: PUSH
19128: LD_EXP 1
19132: PUSH
19133: LD_EXP 7
19137: PUSH
19138: LD_EXP 3
19142: PUSH
19143: LD_EXP 4
19147: PUSH
19148: LD_EXP 5
19152: PUSH
19153: LD_EXP 2
19157: PUSH
19158: LD_EXP 12
19162: PUSH
19163: LD_EXP 8
19167: PUSH
19168: LD_EXP 13
19172: PUSH
19173: LD_EXP 6
19177: PUSH
19178: LD_EXP 9
19182: PUSH
19183: LD_EXP 11
19187: PUSH
19188: LD_EXP 10
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: DIFF
19208: PPUSH
19209: LD_STRING 12_other_survivors
19211: PPUSH
19212: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19216: LD_INT 22
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 23
19228: PUSH
19229: LD_INT 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 21
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 25
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 25
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 25
19271: PUSH
19272: LD_INT 3
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 25
19281: PUSH
19282: LD_INT 4
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 25
19291: PUSH
19292: LD_INT 5
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 25
19301: PUSH
19302: LD_INT 8
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: PPUSH
19324: CALL_OW 69
19328: PPUSH
19329: LD_STRING 12_kurt_squad
19331: PPUSH
19332: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19336: LD_EXP 14
19340: PPUSH
19341: LD_STRING 12_others
19343: PPUSH
19344: CALL_OW 38
// YouWin ;
19348: CALL_OW 103
// end ; end_of_file
19352: LD_VAR 0 1
19356: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19357: LD_EXP 1
19361: PPUSH
19362: CALL_OW 301
19366: IFFALSE 19378
19368: GO 19370
19370: DISABLE
// YouLost ( JMM ) ; end_of_file
19371: LD_STRING JMM
19373: PPUSH
19374: CALL_OW 104
19378: END
// every 0 0$01 do
19379: GO 19381
19381: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19382: LD_INT 1050
19384: PPUSH
19385: CALL_OW 67
// if cratesSpawned < 6 then
19389: LD_EXP 45
19393: PUSH
19394: LD_INT 6
19396: LESS
19397: IFFALSE 19434
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19399: LD_INT 3
19401: PPUSH
19402: LD_INT 5
19404: PPUSH
19405: CALL_OW 12
19409: PPUSH
19410: LD_INT 21
19412: PPUSH
19413: LD_INT 1
19415: PPUSH
19416: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19420: LD_ADDR_EXP 45
19424: PUSH
19425: LD_EXP 45
19429: PUSH
19430: LD_INT 1
19432: PLUS
19433: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19434: LD_EXP 45
19438: PUSH
19439: LD_INT 6
19441: GREATEREQUAL
19442: PUSH
19443: LD_EXP 45
19447: PUSH
19448: LD_INT 12
19450: LESS
19451: AND
19452: IFFALSE 19496
// begin wait ( 0 0$50 ) ;
19454: LD_INT 1750
19456: PPUSH
19457: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19461: LD_INT 3
19463: PPUSH
19464: LD_INT 5
19466: PPUSH
19467: CALL_OW 12
19471: PPUSH
19472: LD_INT 21
19474: PPUSH
19475: LD_INT 1
19477: PPUSH
19478: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19482: LD_ADDR_EXP 45
19486: PUSH
19487: LD_EXP 45
19491: PUSH
19492: LD_INT 1
19494: PLUS
19495: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19496: LD_EXP 45
19500: PUSH
19501: LD_INT 12
19503: GREATEREQUAL
19504: IFFALSE 19548
// begin wait ( 1 1$40 ) ;
19506: LD_INT 3500
19508: PPUSH
19509: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19513: LD_INT 3
19515: PPUSH
19516: LD_INT 5
19518: PPUSH
19519: CALL_OW 12
19523: PPUSH
19524: LD_INT 21
19526: PPUSH
19527: LD_INT 1
19529: PPUSH
19530: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19534: LD_ADDR_EXP 45
19538: PUSH
19539: LD_EXP 45
19543: PUSH
19544: LD_INT 1
19546: PLUS
19547: ST_TO_ADDR
// end ; until false ;
19548: LD_INT 0
19550: IFFALSE 19382
// end ; end_of_file
19552: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19553: LD_INT 0
19555: PPUSH
// ar_miner := 81 ;
19556: LD_ADDR_EXP 59
19560: PUSH
19561: LD_INT 81
19563: ST_TO_ADDR
// ar_crane := 88 ;
19564: LD_ADDR_EXP 58
19568: PUSH
19569: LD_INT 88
19571: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19572: LD_ADDR_EXP 53
19576: PUSH
19577: LD_INT 89
19579: ST_TO_ADDR
// us_hack := 99 ;
19580: LD_ADDR_EXP 54
19584: PUSH
19585: LD_INT 99
19587: ST_TO_ADDR
// us_artillery := 97 ;
19588: LD_ADDR_EXP 55
19592: PUSH
19593: LD_INT 97
19595: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19596: LD_ADDR_EXP 56
19600: PUSH
19601: LD_INT 91
19603: ST_TO_ADDR
// ar_mortar := 92 ;
19604: LD_ADDR_EXP 57
19608: PUSH
19609: LD_INT 92
19611: ST_TO_ADDR
// ru_radar := 98 ;
19612: LD_ADDR_EXP 52
19616: PUSH
19617: LD_INT 98
19619: ST_TO_ADDR
// tech_Artillery := 80 ;
19620: LD_ADDR_EXP 60
19624: PUSH
19625: LD_INT 80
19627: ST_TO_ADDR
// tech_RadMat := 81 ;
19628: LD_ADDR_EXP 61
19632: PUSH
19633: LD_INT 81
19635: ST_TO_ADDR
// tech_BasicTools := 82 ;
19636: LD_ADDR_EXP 62
19640: PUSH
19641: LD_INT 82
19643: ST_TO_ADDR
// tech_Cargo := 83 ;
19644: LD_ADDR_EXP 63
19648: PUSH
19649: LD_INT 83
19651: ST_TO_ADDR
// tech_Track := 84 ;
19652: LD_ADDR_EXP 64
19656: PUSH
19657: LD_INT 84
19659: ST_TO_ADDR
// tech_Crane := 85 ;
19660: LD_ADDR_EXP 65
19664: PUSH
19665: LD_INT 85
19667: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19668: LD_ADDR_EXP 66
19672: PUSH
19673: LD_INT 86
19675: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19676: LD_ADDR_EXP 67
19680: PUSH
19681: LD_INT 87
19683: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19684: LD_ADDR_EXP 68
19688: PUSH
19689: LD_INT 88
19691: ST_TO_ADDR
// class_mastodont := 31 ;
19692: LD_ADDR_EXP 69
19696: PUSH
19697: LD_INT 31
19699: ST_TO_ADDR
// class_horse := 21 ;
19700: LD_ADDR_EXP 70
19704: PUSH
19705: LD_INT 21
19707: ST_TO_ADDR
// end ;
19708: LD_VAR 0 1
19712: RET
// every 1 do
19713: GO 19715
19715: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19716: CALL 19553 0 0
19720: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19721: LD_INT 0
19723: PPUSH
// if p2 = 100 then
19724: LD_VAR 0 2
19728: PUSH
19729: LD_INT 100
19731: EQUAL
19732: IFFALSE 20681
// begin if not StreamModeActive then
19734: LD_EXP 71
19738: NOT
19739: IFFALSE 19749
// StreamModeActive := true ;
19741: LD_ADDR_EXP 71
19745: PUSH
19746: LD_INT 1
19748: ST_TO_ADDR
// if p3 = 0 then
19749: LD_VAR 0 3
19753: PUSH
19754: LD_INT 0
19756: EQUAL
19757: IFFALSE 19763
// InitStreamMode ;
19759: CALL 20841 0 0
// if p3 = 1 then
19763: LD_VAR 0 3
19767: PUSH
19768: LD_INT 1
19770: EQUAL
19771: IFFALSE 19781
// sRocket := true ;
19773: LD_ADDR_EXP 76
19777: PUSH
19778: LD_INT 1
19780: ST_TO_ADDR
// if p3 = 2 then
19781: LD_VAR 0 3
19785: PUSH
19786: LD_INT 2
19788: EQUAL
19789: IFFALSE 19799
// sSpeed := true ;
19791: LD_ADDR_EXP 75
19795: PUSH
19796: LD_INT 1
19798: ST_TO_ADDR
// if p3 = 3 then
19799: LD_VAR 0 3
19803: PUSH
19804: LD_INT 3
19806: EQUAL
19807: IFFALSE 19817
// sEngine := true ;
19809: LD_ADDR_EXP 77
19813: PUSH
19814: LD_INT 1
19816: ST_TO_ADDR
// if p3 = 4 then
19817: LD_VAR 0 3
19821: PUSH
19822: LD_INT 4
19824: EQUAL
19825: IFFALSE 19835
// sSpec := true ;
19827: LD_ADDR_EXP 74
19831: PUSH
19832: LD_INT 1
19834: ST_TO_ADDR
// if p3 = 5 then
19835: LD_VAR 0 3
19839: PUSH
19840: LD_INT 5
19842: EQUAL
19843: IFFALSE 19853
// sLevel := true ;
19845: LD_ADDR_EXP 78
19849: PUSH
19850: LD_INT 1
19852: ST_TO_ADDR
// if p3 = 6 then
19853: LD_VAR 0 3
19857: PUSH
19858: LD_INT 6
19860: EQUAL
19861: IFFALSE 19871
// sArmoury := true ;
19863: LD_ADDR_EXP 79
19867: PUSH
19868: LD_INT 1
19870: ST_TO_ADDR
// if p3 = 7 then
19871: LD_VAR 0 3
19875: PUSH
19876: LD_INT 7
19878: EQUAL
19879: IFFALSE 19889
// sRadar := true ;
19881: LD_ADDR_EXP 80
19885: PUSH
19886: LD_INT 1
19888: ST_TO_ADDR
// if p3 = 8 then
19889: LD_VAR 0 3
19893: PUSH
19894: LD_INT 8
19896: EQUAL
19897: IFFALSE 19907
// sBunker := true ;
19899: LD_ADDR_EXP 81
19903: PUSH
19904: LD_INT 1
19906: ST_TO_ADDR
// if p3 = 9 then
19907: LD_VAR 0 3
19911: PUSH
19912: LD_INT 9
19914: EQUAL
19915: IFFALSE 19925
// sHack := true ;
19917: LD_ADDR_EXP 82
19921: PUSH
19922: LD_INT 1
19924: ST_TO_ADDR
// if p3 = 10 then
19925: LD_VAR 0 3
19929: PUSH
19930: LD_INT 10
19932: EQUAL
19933: IFFALSE 19943
// sFire := true ;
19935: LD_ADDR_EXP 83
19939: PUSH
19940: LD_INT 1
19942: ST_TO_ADDR
// if p3 = 11 then
19943: LD_VAR 0 3
19947: PUSH
19948: LD_INT 11
19950: EQUAL
19951: IFFALSE 19961
// sRefresh := true ;
19953: LD_ADDR_EXP 84
19957: PUSH
19958: LD_INT 1
19960: ST_TO_ADDR
// if p3 = 12 then
19961: LD_VAR 0 3
19965: PUSH
19966: LD_INT 12
19968: EQUAL
19969: IFFALSE 19979
// sExp := true ;
19971: LD_ADDR_EXP 85
19975: PUSH
19976: LD_INT 1
19978: ST_TO_ADDR
// if p3 = 13 then
19979: LD_VAR 0 3
19983: PUSH
19984: LD_INT 13
19986: EQUAL
19987: IFFALSE 19997
// sDepot := true ;
19989: LD_ADDR_EXP 86
19993: PUSH
19994: LD_INT 1
19996: ST_TO_ADDR
// if p3 = 14 then
19997: LD_VAR 0 3
20001: PUSH
20002: LD_INT 14
20004: EQUAL
20005: IFFALSE 20015
// sFlag := true ;
20007: LD_ADDR_EXP 87
20011: PUSH
20012: LD_INT 1
20014: ST_TO_ADDR
// if p3 = 15 then
20015: LD_VAR 0 3
20019: PUSH
20020: LD_INT 15
20022: EQUAL
20023: IFFALSE 20033
// sKamikadze := true ;
20025: LD_ADDR_EXP 95
20029: PUSH
20030: LD_INT 1
20032: ST_TO_ADDR
// if p3 = 16 then
20033: LD_VAR 0 3
20037: PUSH
20038: LD_INT 16
20040: EQUAL
20041: IFFALSE 20051
// sTroll := true ;
20043: LD_ADDR_EXP 96
20047: PUSH
20048: LD_INT 1
20050: ST_TO_ADDR
// if p3 = 17 then
20051: LD_VAR 0 3
20055: PUSH
20056: LD_INT 17
20058: EQUAL
20059: IFFALSE 20069
// sSlow := true ;
20061: LD_ADDR_EXP 97
20065: PUSH
20066: LD_INT 1
20068: ST_TO_ADDR
// if p3 = 18 then
20069: LD_VAR 0 3
20073: PUSH
20074: LD_INT 18
20076: EQUAL
20077: IFFALSE 20087
// sLack := true ;
20079: LD_ADDR_EXP 98
20083: PUSH
20084: LD_INT 1
20086: ST_TO_ADDR
// if p3 = 19 then
20087: LD_VAR 0 3
20091: PUSH
20092: LD_INT 19
20094: EQUAL
20095: IFFALSE 20105
// sTank := true ;
20097: LD_ADDR_EXP 100
20101: PUSH
20102: LD_INT 1
20104: ST_TO_ADDR
// if p3 = 20 then
20105: LD_VAR 0 3
20109: PUSH
20110: LD_INT 20
20112: EQUAL
20113: IFFALSE 20123
// sRemote := true ;
20115: LD_ADDR_EXP 101
20119: PUSH
20120: LD_INT 1
20122: ST_TO_ADDR
// if p3 = 21 then
20123: LD_VAR 0 3
20127: PUSH
20128: LD_INT 21
20130: EQUAL
20131: IFFALSE 20141
// sPowell := true ;
20133: LD_ADDR_EXP 102
20137: PUSH
20138: LD_INT 1
20140: ST_TO_ADDR
// if p3 = 22 then
20141: LD_VAR 0 3
20145: PUSH
20146: LD_INT 22
20148: EQUAL
20149: IFFALSE 20159
// sTeleport := true ;
20151: LD_ADDR_EXP 105
20155: PUSH
20156: LD_INT 1
20158: ST_TO_ADDR
// if p3 = 23 then
20159: LD_VAR 0 3
20163: PUSH
20164: LD_INT 23
20166: EQUAL
20167: IFFALSE 20177
// sOilTower := true ;
20169: LD_ADDR_EXP 107
20173: PUSH
20174: LD_INT 1
20176: ST_TO_ADDR
// if p3 = 24 then
20177: LD_VAR 0 3
20181: PUSH
20182: LD_INT 24
20184: EQUAL
20185: IFFALSE 20195
// sShovel := true ;
20187: LD_ADDR_EXP 108
20191: PUSH
20192: LD_INT 1
20194: ST_TO_ADDR
// if p3 = 25 then
20195: LD_VAR 0 3
20199: PUSH
20200: LD_INT 25
20202: EQUAL
20203: IFFALSE 20213
// sSheik := true ;
20205: LD_ADDR_EXP 109
20209: PUSH
20210: LD_INT 1
20212: ST_TO_ADDR
// if p3 = 26 then
20213: LD_VAR 0 3
20217: PUSH
20218: LD_INT 26
20220: EQUAL
20221: IFFALSE 20231
// sEarthquake := true ;
20223: LD_ADDR_EXP 111
20227: PUSH
20228: LD_INT 1
20230: ST_TO_ADDR
// if p3 = 27 then
20231: LD_VAR 0 3
20235: PUSH
20236: LD_INT 27
20238: EQUAL
20239: IFFALSE 20249
// sAI := true ;
20241: LD_ADDR_EXP 112
20245: PUSH
20246: LD_INT 1
20248: ST_TO_ADDR
// if p3 = 28 then
20249: LD_VAR 0 3
20253: PUSH
20254: LD_INT 28
20256: EQUAL
20257: IFFALSE 20267
// sCargo := true ;
20259: LD_ADDR_EXP 115
20263: PUSH
20264: LD_INT 1
20266: ST_TO_ADDR
// if p3 = 29 then
20267: LD_VAR 0 3
20271: PUSH
20272: LD_INT 29
20274: EQUAL
20275: IFFALSE 20285
// sDLaser := true ;
20277: LD_ADDR_EXP 116
20281: PUSH
20282: LD_INT 1
20284: ST_TO_ADDR
// if p3 = 30 then
20285: LD_VAR 0 3
20289: PUSH
20290: LD_INT 30
20292: EQUAL
20293: IFFALSE 20303
// sExchange := true ;
20295: LD_ADDR_EXP 117
20299: PUSH
20300: LD_INT 1
20302: ST_TO_ADDR
// if p3 = 31 then
20303: LD_VAR 0 3
20307: PUSH
20308: LD_INT 31
20310: EQUAL
20311: IFFALSE 20321
// sFac := true ;
20313: LD_ADDR_EXP 118
20317: PUSH
20318: LD_INT 1
20320: ST_TO_ADDR
// if p3 = 32 then
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 32
20328: EQUAL
20329: IFFALSE 20339
// sPower := true ;
20331: LD_ADDR_EXP 119
20335: PUSH
20336: LD_INT 1
20338: ST_TO_ADDR
// if p3 = 33 then
20339: LD_VAR 0 3
20343: PUSH
20344: LD_INT 33
20346: EQUAL
20347: IFFALSE 20357
// sRandom := true ;
20349: LD_ADDR_EXP 120
20353: PUSH
20354: LD_INT 1
20356: ST_TO_ADDR
// if p3 = 34 then
20357: LD_VAR 0 3
20361: PUSH
20362: LD_INT 34
20364: EQUAL
20365: IFFALSE 20375
// sShield := true ;
20367: LD_ADDR_EXP 121
20371: PUSH
20372: LD_INT 1
20374: ST_TO_ADDR
// if p3 = 35 then
20375: LD_VAR 0 3
20379: PUSH
20380: LD_INT 35
20382: EQUAL
20383: IFFALSE 20393
// sTime := true ;
20385: LD_ADDR_EXP 122
20389: PUSH
20390: LD_INT 1
20392: ST_TO_ADDR
// if p3 = 36 then
20393: LD_VAR 0 3
20397: PUSH
20398: LD_INT 36
20400: EQUAL
20401: IFFALSE 20411
// sTools := true ;
20403: LD_ADDR_EXP 123
20407: PUSH
20408: LD_INT 1
20410: ST_TO_ADDR
// if p3 = 101 then
20411: LD_VAR 0 3
20415: PUSH
20416: LD_INT 101
20418: EQUAL
20419: IFFALSE 20429
// sSold := true ;
20421: LD_ADDR_EXP 88
20425: PUSH
20426: LD_INT 1
20428: ST_TO_ADDR
// if p3 = 102 then
20429: LD_VAR 0 3
20433: PUSH
20434: LD_INT 102
20436: EQUAL
20437: IFFALSE 20447
// sDiff := true ;
20439: LD_ADDR_EXP 89
20443: PUSH
20444: LD_INT 1
20446: ST_TO_ADDR
// if p3 = 103 then
20447: LD_VAR 0 3
20451: PUSH
20452: LD_INT 103
20454: EQUAL
20455: IFFALSE 20465
// sFog := true ;
20457: LD_ADDR_EXP 92
20461: PUSH
20462: LD_INT 1
20464: ST_TO_ADDR
// if p3 = 104 then
20465: LD_VAR 0 3
20469: PUSH
20470: LD_INT 104
20472: EQUAL
20473: IFFALSE 20483
// sReset := true ;
20475: LD_ADDR_EXP 93
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// if p3 = 105 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 105
20490: EQUAL
20491: IFFALSE 20501
// sSun := true ;
20493: LD_ADDR_EXP 94
20497: PUSH
20498: LD_INT 1
20500: ST_TO_ADDR
// if p3 = 106 then
20501: LD_VAR 0 3
20505: PUSH
20506: LD_INT 106
20508: EQUAL
20509: IFFALSE 20519
// sTiger := true ;
20511: LD_ADDR_EXP 90
20515: PUSH
20516: LD_INT 1
20518: ST_TO_ADDR
// if p3 = 107 then
20519: LD_VAR 0 3
20523: PUSH
20524: LD_INT 107
20526: EQUAL
20527: IFFALSE 20537
// sBomb := true ;
20529: LD_ADDR_EXP 91
20533: PUSH
20534: LD_INT 1
20536: ST_TO_ADDR
// if p3 = 108 then
20537: LD_VAR 0 3
20541: PUSH
20542: LD_INT 108
20544: EQUAL
20545: IFFALSE 20555
// sWound := true ;
20547: LD_ADDR_EXP 99
20551: PUSH
20552: LD_INT 1
20554: ST_TO_ADDR
// if p3 = 109 then
20555: LD_VAR 0 3
20559: PUSH
20560: LD_INT 109
20562: EQUAL
20563: IFFALSE 20573
// sBetray := true ;
20565: LD_ADDR_EXP 103
20569: PUSH
20570: LD_INT 1
20572: ST_TO_ADDR
// if p3 = 110 then
20573: LD_VAR 0 3
20577: PUSH
20578: LD_INT 110
20580: EQUAL
20581: IFFALSE 20591
// sContamin := true ;
20583: LD_ADDR_EXP 104
20587: PUSH
20588: LD_INT 1
20590: ST_TO_ADDR
// if p3 = 111 then
20591: LD_VAR 0 3
20595: PUSH
20596: LD_INT 111
20598: EQUAL
20599: IFFALSE 20609
// sOil := true ;
20601: LD_ADDR_EXP 106
20605: PUSH
20606: LD_INT 1
20608: ST_TO_ADDR
// if p3 = 112 then
20609: LD_VAR 0 3
20613: PUSH
20614: LD_INT 112
20616: EQUAL
20617: IFFALSE 20627
// sStu := true ;
20619: LD_ADDR_EXP 110
20623: PUSH
20624: LD_INT 1
20626: ST_TO_ADDR
// if p3 = 113 then
20627: LD_VAR 0 3
20631: PUSH
20632: LD_INT 113
20634: EQUAL
20635: IFFALSE 20645
// sBazooka := true ;
20637: LD_ADDR_EXP 113
20641: PUSH
20642: LD_INT 1
20644: ST_TO_ADDR
// if p3 = 114 then
20645: LD_VAR 0 3
20649: PUSH
20650: LD_INT 114
20652: EQUAL
20653: IFFALSE 20663
// sMortar := true ;
20655: LD_ADDR_EXP 114
20659: PUSH
20660: LD_INT 1
20662: ST_TO_ADDR
// if p3 = 115 then
20663: LD_VAR 0 3
20667: PUSH
20668: LD_INT 115
20670: EQUAL
20671: IFFALSE 20681
// sRanger := true ;
20673: LD_ADDR_EXP 124
20677: PUSH
20678: LD_INT 1
20680: ST_TO_ADDR
// end ; if p2 = 101 then
20681: LD_VAR 0 2
20685: PUSH
20686: LD_INT 101
20688: EQUAL
20689: IFFALSE 20817
// begin case p3 of 1 :
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 1
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20711
20704: POP
// hHackUnlimitedResources ; 2 :
20705: CALL 31854 0 0
20709: GO 20817
20711: LD_INT 2
20713: DOUBLE
20714: EQUAL
20715: IFTRUE 20719
20717: GO 20726
20719: POP
// hHackSetLevel10 ; 3 :
20720: CALL 31987 0 0
20724: GO 20817
20726: LD_INT 3
20728: DOUBLE
20729: EQUAL
20730: IFTRUE 20734
20732: GO 20741
20734: POP
// hHackSetLevel10YourUnits ; 4 :
20735: CALL 32072 0 0
20739: GO 20817
20741: LD_INT 4
20743: DOUBLE
20744: EQUAL
20745: IFTRUE 20749
20747: GO 20756
20749: POP
// hHackInvincible ; 5 :
20750: CALL 32520 0 0
20754: GO 20817
20756: LD_INT 5
20758: DOUBLE
20759: EQUAL
20760: IFTRUE 20764
20762: GO 20771
20764: POP
// hHackInvisible ; 6 :
20765: CALL 32631 0 0
20769: GO 20817
20771: LD_INT 6
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20786
20779: POP
// hHackChangeYourSide ; 7 :
20780: CALL 32688 0 0
20784: GO 20817
20786: LD_INT 7
20788: DOUBLE
20789: EQUAL
20790: IFTRUE 20794
20792: GO 20801
20794: POP
// hHackChangeUnitSide ; 8 :
20795: CALL 32730 0 0
20799: GO 20817
20801: LD_INT 8
20803: DOUBLE
20804: EQUAL
20805: IFTRUE 20809
20807: GO 20816
20809: POP
// hHackFog ; end ;
20810: CALL 32831 0 0
20814: GO 20817
20816: POP
// end ; end ;
20817: LD_VAR 0 7
20821: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20822: GO 20824
20824: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20825: LD_STRING initStreamRollete();
20827: PPUSH
20828: CALL_OW 559
// InitStreamMode ;
20832: CALL 20841 0 0
// DefineStreamItems ( ) ;
20836: CALL 21281 0 0
// end ;
20840: END
// function InitStreamMode ; begin
20841: LD_INT 0
20843: PPUSH
// streamModeActive := false ;
20844: LD_ADDR_EXP 71
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// normalCounter := 36 ;
20852: LD_ADDR_EXP 72
20856: PUSH
20857: LD_INT 36
20859: ST_TO_ADDR
// hardcoreCounter := 16 ;
20860: LD_ADDR_EXP 73
20864: PUSH
20865: LD_INT 16
20867: ST_TO_ADDR
// sRocket := false ;
20868: LD_ADDR_EXP 76
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sSpeed := false ;
20876: LD_ADDR_EXP 75
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sEngine := false ;
20884: LD_ADDR_EXP 77
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sSpec := false ;
20892: LD_ADDR_EXP 74
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sLevel := false ;
20900: LD_ADDR_EXP 78
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sArmoury := false ;
20908: LD_ADDR_EXP 79
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sRadar := false ;
20916: LD_ADDR_EXP 80
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sBunker := false ;
20924: LD_ADDR_EXP 81
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sHack := false ;
20932: LD_ADDR_EXP 82
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sFire := false ;
20940: LD_ADDR_EXP 83
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sRefresh := false ;
20948: LD_ADDR_EXP 84
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sExp := false ;
20956: LD_ADDR_EXP 85
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sDepot := false ;
20964: LD_ADDR_EXP 86
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sFlag := false ;
20972: LD_ADDR_EXP 87
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sKamikadze := false ;
20980: LD_ADDR_EXP 95
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sTroll := false ;
20988: LD_ADDR_EXP 96
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sSlow := false ;
20996: LD_ADDR_EXP 97
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sLack := false ;
21004: LD_ADDR_EXP 98
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sTank := false ;
21012: LD_ADDR_EXP 100
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sRemote := false ;
21020: LD_ADDR_EXP 101
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sPowell := false ;
21028: LD_ADDR_EXP 102
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sTeleport := false ;
21036: LD_ADDR_EXP 105
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sOilTower := false ;
21044: LD_ADDR_EXP 107
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sShovel := false ;
21052: LD_ADDR_EXP 108
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sSheik := false ;
21060: LD_ADDR_EXP 109
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sEarthquake := false ;
21068: LD_ADDR_EXP 111
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sAI := false ;
21076: LD_ADDR_EXP 112
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sCargo := false ;
21084: LD_ADDR_EXP 115
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sDLaser := false ;
21092: LD_ADDR_EXP 116
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// sExchange := false ;
21100: LD_ADDR_EXP 117
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// sFac := false ;
21108: LD_ADDR_EXP 118
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// sPower := false ;
21116: LD_ADDR_EXP 119
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
// sRandom := false ;
21124: LD_ADDR_EXP 120
21128: PUSH
21129: LD_INT 0
21131: ST_TO_ADDR
// sShield := false ;
21132: LD_ADDR_EXP 121
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// sTime := false ;
21140: LD_ADDR_EXP 122
21144: PUSH
21145: LD_INT 0
21147: ST_TO_ADDR
// sTools := false ;
21148: LD_ADDR_EXP 123
21152: PUSH
21153: LD_INT 0
21155: ST_TO_ADDR
// sSold := false ;
21156: LD_ADDR_EXP 88
21160: PUSH
21161: LD_INT 0
21163: ST_TO_ADDR
// sDiff := false ;
21164: LD_ADDR_EXP 89
21168: PUSH
21169: LD_INT 0
21171: ST_TO_ADDR
// sFog := false ;
21172: LD_ADDR_EXP 92
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
// sReset := false ;
21180: LD_ADDR_EXP 93
21184: PUSH
21185: LD_INT 0
21187: ST_TO_ADDR
// sSun := false ;
21188: LD_ADDR_EXP 94
21192: PUSH
21193: LD_INT 0
21195: ST_TO_ADDR
// sTiger := false ;
21196: LD_ADDR_EXP 90
21200: PUSH
21201: LD_INT 0
21203: ST_TO_ADDR
// sBomb := false ;
21204: LD_ADDR_EXP 91
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
// sWound := false ;
21212: LD_ADDR_EXP 99
21216: PUSH
21217: LD_INT 0
21219: ST_TO_ADDR
// sBetray := false ;
21220: LD_ADDR_EXP 103
21224: PUSH
21225: LD_INT 0
21227: ST_TO_ADDR
// sContamin := false ;
21228: LD_ADDR_EXP 104
21232: PUSH
21233: LD_INT 0
21235: ST_TO_ADDR
// sOil := false ;
21236: LD_ADDR_EXP 106
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
// sStu := false ;
21244: LD_ADDR_EXP 110
21248: PUSH
21249: LD_INT 0
21251: ST_TO_ADDR
// sBazooka := false ;
21252: LD_ADDR_EXP 113
21256: PUSH
21257: LD_INT 0
21259: ST_TO_ADDR
// sMortar := false ;
21260: LD_ADDR_EXP 114
21264: PUSH
21265: LD_INT 0
21267: ST_TO_ADDR
// sRanger := false ;
21268: LD_ADDR_EXP 124
21272: PUSH
21273: LD_INT 0
21275: ST_TO_ADDR
// end ;
21276: LD_VAR 0 1
21280: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21281: LD_INT 0
21283: PPUSH
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
// result := [ ] ;
21288: LD_ADDR_VAR 0 1
21292: PUSH
21293: EMPTY
21294: ST_TO_ADDR
// if campaign_id = 1 then
21295: LD_OWVAR 69
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 24241
// begin case mission_number of 1 :
21305: LD_OWVAR 70
21309: PUSH
21310: LD_INT 1
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21382
21318: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21319: LD_ADDR_VAR 0 1
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: LD_INT 4
21329: PUSH
21330: LD_INT 11
21332: PUSH
21333: LD_INT 12
21335: PUSH
21336: LD_INT 15
21338: PUSH
21339: LD_INT 16
21341: PUSH
21342: LD_INT 22
21344: PUSH
21345: LD_INT 23
21347: PUSH
21348: LD_INT 26
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 101
21364: PUSH
21365: LD_INT 102
21367: PUSH
21368: LD_INT 106
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: ST_TO_ADDR
21380: GO 24239
21382: LD_INT 2
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21462
21390: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21391: LD_ADDR_VAR 0 1
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: LD_INT 4
21401: PUSH
21402: LD_INT 11
21404: PUSH
21405: LD_INT 12
21407: PUSH
21408: LD_INT 15
21410: PUSH
21411: LD_INT 16
21413: PUSH
21414: LD_INT 22
21416: PUSH
21417: LD_INT 23
21419: PUSH
21420: LD_INT 26
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 101
21436: PUSH
21437: LD_INT 102
21439: PUSH
21440: LD_INT 105
21442: PUSH
21443: LD_INT 106
21445: PUSH
21446: LD_INT 108
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: ST_TO_ADDR
21460: GO 24239
21462: LD_INT 3
21464: DOUBLE
21465: EQUAL
21466: IFTRUE 21470
21468: GO 21546
21470: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21471: LD_ADDR_VAR 0 1
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 4
21481: PUSH
21482: LD_INT 5
21484: PUSH
21485: LD_INT 11
21487: PUSH
21488: LD_INT 12
21490: PUSH
21491: LD_INT 15
21493: PUSH
21494: LD_INT 16
21496: PUSH
21497: LD_INT 22
21499: PUSH
21500: LD_INT 26
21502: PUSH
21503: LD_INT 36
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 101
21520: PUSH
21521: LD_INT 102
21523: PUSH
21524: LD_INT 105
21526: PUSH
21527: LD_INT 106
21529: PUSH
21530: LD_INT 108
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: ST_TO_ADDR
21544: GO 24239
21546: LD_INT 4
21548: DOUBLE
21549: EQUAL
21550: IFTRUE 21554
21552: GO 21638
21554: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21555: LD_ADDR_VAR 0 1
21559: PUSH
21560: LD_INT 2
21562: PUSH
21563: LD_INT 4
21565: PUSH
21566: LD_INT 5
21568: PUSH
21569: LD_INT 8
21571: PUSH
21572: LD_INT 11
21574: PUSH
21575: LD_INT 12
21577: PUSH
21578: LD_INT 15
21580: PUSH
21581: LD_INT 16
21583: PUSH
21584: LD_INT 22
21586: PUSH
21587: LD_INT 23
21589: PUSH
21590: LD_INT 26
21592: PUSH
21593: LD_INT 36
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 101
21612: PUSH
21613: LD_INT 102
21615: PUSH
21616: LD_INT 105
21618: PUSH
21619: LD_INT 106
21621: PUSH
21622: LD_INT 108
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: ST_TO_ADDR
21636: GO 24239
21638: LD_INT 5
21640: DOUBLE
21641: EQUAL
21642: IFTRUE 21646
21644: GO 21746
21646: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21647: LD_ADDR_VAR 0 1
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: LD_INT 4
21657: PUSH
21658: LD_INT 5
21660: PUSH
21661: LD_INT 6
21663: PUSH
21664: LD_INT 8
21666: PUSH
21667: LD_INT 11
21669: PUSH
21670: LD_INT 12
21672: PUSH
21673: LD_INT 15
21675: PUSH
21676: LD_INT 16
21678: PUSH
21679: LD_INT 22
21681: PUSH
21682: LD_INT 23
21684: PUSH
21685: LD_INT 25
21687: PUSH
21688: LD_INT 26
21690: PUSH
21691: LD_INT 36
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 101
21712: PUSH
21713: LD_INT 102
21715: PUSH
21716: LD_INT 105
21718: PUSH
21719: LD_INT 106
21721: PUSH
21722: LD_INT 108
21724: PUSH
21725: LD_INT 109
21727: PUSH
21728: LD_INT 112
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: ST_TO_ADDR
21744: GO 24239
21746: LD_INT 6
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21874
21754: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21755: LD_ADDR_VAR 0 1
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 4
21765: PUSH
21766: LD_INT 5
21768: PUSH
21769: LD_INT 6
21771: PUSH
21772: LD_INT 8
21774: PUSH
21775: LD_INT 11
21777: PUSH
21778: LD_INT 12
21780: PUSH
21781: LD_INT 15
21783: PUSH
21784: LD_INT 16
21786: PUSH
21787: LD_INT 20
21789: PUSH
21790: LD_INT 21
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_INT 23
21798: PUSH
21799: LD_INT 25
21801: PUSH
21802: LD_INT 26
21804: PUSH
21805: LD_INT 30
21807: PUSH
21808: LD_INT 31
21810: PUSH
21811: LD_INT 32
21813: PUSH
21814: LD_INT 36
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 101
21840: PUSH
21841: LD_INT 102
21843: PUSH
21844: LD_INT 105
21846: PUSH
21847: LD_INT 106
21849: PUSH
21850: LD_INT 108
21852: PUSH
21853: LD_INT 109
21855: PUSH
21856: LD_INT 112
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: ST_TO_ADDR
21872: GO 24239
21874: LD_INT 7
21876: DOUBLE
21877: EQUAL
21878: IFTRUE 21882
21880: GO 21982
21882: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21883: LD_ADDR_VAR 0 1
21887: PUSH
21888: LD_INT 2
21890: PUSH
21891: LD_INT 4
21893: PUSH
21894: LD_INT 5
21896: PUSH
21897: LD_INT 7
21899: PUSH
21900: LD_INT 11
21902: PUSH
21903: LD_INT 12
21905: PUSH
21906: LD_INT 15
21908: PUSH
21909: LD_INT 16
21911: PUSH
21912: LD_INT 20
21914: PUSH
21915: LD_INT 21
21917: PUSH
21918: LD_INT 22
21920: PUSH
21921: LD_INT 23
21923: PUSH
21924: LD_INT 25
21926: PUSH
21927: LD_INT 26
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 101
21948: PUSH
21949: LD_INT 102
21951: PUSH
21952: LD_INT 103
21954: PUSH
21955: LD_INT 105
21957: PUSH
21958: LD_INT 106
21960: PUSH
21961: LD_INT 108
21963: PUSH
21964: LD_INT 112
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: ST_TO_ADDR
21980: GO 24239
21982: LD_INT 8
21984: DOUBLE
21985: EQUAL
21986: IFTRUE 21990
21988: GO 22118
21990: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21991: LD_ADDR_VAR 0 1
21995: PUSH
21996: LD_INT 2
21998: PUSH
21999: LD_INT 4
22001: PUSH
22002: LD_INT 5
22004: PUSH
22005: LD_INT 6
22007: PUSH
22008: LD_INT 7
22010: PUSH
22011: LD_INT 8
22013: PUSH
22014: LD_INT 11
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: LD_INT 15
22022: PUSH
22023: LD_INT 16
22025: PUSH
22026: LD_INT 20
22028: PUSH
22029: LD_INT 21
22031: PUSH
22032: LD_INT 22
22034: PUSH
22035: LD_INT 23
22037: PUSH
22038: LD_INT 25
22040: PUSH
22041: LD_INT 26
22043: PUSH
22044: LD_INT 30
22046: PUSH
22047: LD_INT 31
22049: PUSH
22050: LD_INT 32
22052: PUSH
22053: LD_INT 36
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 101
22080: PUSH
22081: LD_INT 102
22083: PUSH
22084: LD_INT 103
22086: PUSH
22087: LD_INT 105
22089: PUSH
22090: LD_INT 106
22092: PUSH
22093: LD_INT 108
22095: PUSH
22096: LD_INT 109
22098: PUSH
22099: LD_INT 112
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: ST_TO_ADDR
22116: GO 24239
22118: LD_INT 9
22120: DOUBLE
22121: EQUAL
22122: IFTRUE 22126
22124: GO 22262
22126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22127: LD_ADDR_VAR 0 1
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: LD_INT 4
22137: PUSH
22138: LD_INT 5
22140: PUSH
22141: LD_INT 6
22143: PUSH
22144: LD_INT 7
22146: PUSH
22147: LD_INT 8
22149: PUSH
22150: LD_INT 11
22152: PUSH
22153: LD_INT 12
22155: PUSH
22156: LD_INT 15
22158: PUSH
22159: LD_INT 16
22161: PUSH
22162: LD_INT 20
22164: PUSH
22165: LD_INT 21
22167: PUSH
22168: LD_INT 22
22170: PUSH
22171: LD_INT 23
22173: PUSH
22174: LD_INT 25
22176: PUSH
22177: LD_INT 26
22179: PUSH
22180: LD_INT 28
22182: PUSH
22183: LD_INT 30
22185: PUSH
22186: LD_INT 31
22188: PUSH
22189: LD_INT 32
22191: PUSH
22192: LD_INT 36
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 101
22220: PUSH
22221: LD_INT 102
22223: PUSH
22224: LD_INT 103
22226: PUSH
22227: LD_INT 105
22229: PUSH
22230: LD_INT 106
22232: PUSH
22233: LD_INT 108
22235: PUSH
22236: LD_INT 109
22238: PUSH
22239: LD_INT 112
22241: PUSH
22242: LD_INT 114
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: ST_TO_ADDR
22260: GO 24239
22262: LD_INT 10
22264: DOUBLE
22265: EQUAL
22266: IFTRUE 22270
22268: GO 22454
22270: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22271: LD_ADDR_VAR 0 1
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: LD_INT 4
22281: PUSH
22282: LD_INT 5
22284: PUSH
22285: LD_INT 6
22287: PUSH
22288: LD_INT 7
22290: PUSH
22291: LD_INT 8
22293: PUSH
22294: LD_INT 9
22296: PUSH
22297: LD_INT 10
22299: PUSH
22300: LD_INT 11
22302: PUSH
22303: LD_INT 12
22305: PUSH
22306: LD_INT 13
22308: PUSH
22309: LD_INT 14
22311: PUSH
22312: LD_INT 15
22314: PUSH
22315: LD_INT 16
22317: PUSH
22318: LD_INT 17
22320: PUSH
22321: LD_INT 18
22323: PUSH
22324: LD_INT 19
22326: PUSH
22327: LD_INT 20
22329: PUSH
22330: LD_INT 21
22332: PUSH
22333: LD_INT 22
22335: PUSH
22336: LD_INT 23
22338: PUSH
22339: LD_INT 24
22341: PUSH
22342: LD_INT 25
22344: PUSH
22345: LD_INT 26
22347: PUSH
22348: LD_INT 28
22350: PUSH
22351: LD_INT 30
22353: PUSH
22354: LD_INT 31
22356: PUSH
22357: LD_INT 32
22359: PUSH
22360: LD_INT 36
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 101
22396: PUSH
22397: LD_INT 102
22399: PUSH
22400: LD_INT 103
22402: PUSH
22403: LD_INT 104
22405: PUSH
22406: LD_INT 105
22408: PUSH
22409: LD_INT 106
22411: PUSH
22412: LD_INT 107
22414: PUSH
22415: LD_INT 108
22417: PUSH
22418: LD_INT 109
22420: PUSH
22421: LD_INT 110
22423: PUSH
22424: LD_INT 111
22426: PUSH
22427: LD_INT 112
22429: PUSH
22430: LD_INT 114
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: ST_TO_ADDR
22452: GO 24239
22454: LD_INT 11
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22654
22462: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22463: LD_ADDR_VAR 0 1
22467: PUSH
22468: LD_INT 2
22470: PUSH
22471: LD_INT 3
22473: PUSH
22474: LD_INT 4
22476: PUSH
22477: LD_INT 5
22479: PUSH
22480: LD_INT 6
22482: PUSH
22483: LD_INT 7
22485: PUSH
22486: LD_INT 8
22488: PUSH
22489: LD_INT 9
22491: PUSH
22492: LD_INT 10
22494: PUSH
22495: LD_INT 11
22497: PUSH
22498: LD_INT 12
22500: PUSH
22501: LD_INT 13
22503: PUSH
22504: LD_INT 14
22506: PUSH
22507: LD_INT 15
22509: PUSH
22510: LD_INT 16
22512: PUSH
22513: LD_INT 17
22515: PUSH
22516: LD_INT 18
22518: PUSH
22519: LD_INT 19
22521: PUSH
22522: LD_INT 20
22524: PUSH
22525: LD_INT 21
22527: PUSH
22528: LD_INT 22
22530: PUSH
22531: LD_INT 23
22533: PUSH
22534: LD_INT 24
22536: PUSH
22537: LD_INT 25
22539: PUSH
22540: LD_INT 26
22542: PUSH
22543: LD_INT 28
22545: PUSH
22546: LD_INT 30
22548: PUSH
22549: LD_INT 31
22551: PUSH
22552: LD_INT 32
22554: PUSH
22555: LD_INT 34
22557: PUSH
22558: LD_INT 36
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 101
22596: PUSH
22597: LD_INT 102
22599: PUSH
22600: LD_INT 103
22602: PUSH
22603: LD_INT 104
22605: PUSH
22606: LD_INT 105
22608: PUSH
22609: LD_INT 106
22611: PUSH
22612: LD_INT 107
22614: PUSH
22615: LD_INT 108
22617: PUSH
22618: LD_INT 109
22620: PUSH
22621: LD_INT 110
22623: PUSH
22624: LD_INT 111
22626: PUSH
22627: LD_INT 112
22629: PUSH
22630: LD_INT 114
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: ST_TO_ADDR
22652: GO 24239
22654: LD_INT 12
22656: DOUBLE
22657: EQUAL
22658: IFTRUE 22662
22660: GO 22870
22662: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22663: LD_ADDR_VAR 0 1
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: LD_INT 3
22676: PUSH
22677: LD_INT 4
22679: PUSH
22680: LD_INT 5
22682: PUSH
22683: LD_INT 6
22685: PUSH
22686: LD_INT 7
22688: PUSH
22689: LD_INT 8
22691: PUSH
22692: LD_INT 9
22694: PUSH
22695: LD_INT 10
22697: PUSH
22698: LD_INT 11
22700: PUSH
22701: LD_INT 12
22703: PUSH
22704: LD_INT 13
22706: PUSH
22707: LD_INT 14
22709: PUSH
22710: LD_INT 15
22712: PUSH
22713: LD_INT 16
22715: PUSH
22716: LD_INT 17
22718: PUSH
22719: LD_INT 18
22721: PUSH
22722: LD_INT 19
22724: PUSH
22725: LD_INT 20
22727: PUSH
22728: LD_INT 21
22730: PUSH
22731: LD_INT 22
22733: PUSH
22734: LD_INT 23
22736: PUSH
22737: LD_INT 24
22739: PUSH
22740: LD_INT 25
22742: PUSH
22743: LD_INT 26
22745: PUSH
22746: LD_INT 27
22748: PUSH
22749: LD_INT 28
22751: PUSH
22752: LD_INT 30
22754: PUSH
22755: LD_INT 31
22757: PUSH
22758: LD_INT 32
22760: PUSH
22761: LD_INT 33
22763: PUSH
22764: LD_INT 34
22766: PUSH
22767: LD_INT 36
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 101
22808: PUSH
22809: LD_INT 102
22811: PUSH
22812: LD_INT 103
22814: PUSH
22815: LD_INT 104
22817: PUSH
22818: LD_INT 105
22820: PUSH
22821: LD_INT 106
22823: PUSH
22824: LD_INT 107
22826: PUSH
22827: LD_INT 108
22829: PUSH
22830: LD_INT 109
22832: PUSH
22833: LD_INT 110
22835: PUSH
22836: LD_INT 111
22838: PUSH
22839: LD_INT 112
22841: PUSH
22842: LD_INT 113
22844: PUSH
22845: LD_INT 114
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: ST_TO_ADDR
22868: GO 24239
22870: LD_INT 13
22872: DOUBLE
22873: EQUAL
22874: IFTRUE 22878
22876: GO 23074
22878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22879: LD_ADDR_VAR 0 1
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: LD_INT 3
22892: PUSH
22893: LD_INT 4
22895: PUSH
22896: LD_INT 5
22898: PUSH
22899: LD_INT 8
22901: PUSH
22902: LD_INT 9
22904: PUSH
22905: LD_INT 10
22907: PUSH
22908: LD_INT 11
22910: PUSH
22911: LD_INT 12
22913: PUSH
22914: LD_INT 14
22916: PUSH
22917: LD_INT 15
22919: PUSH
22920: LD_INT 16
22922: PUSH
22923: LD_INT 17
22925: PUSH
22926: LD_INT 18
22928: PUSH
22929: LD_INT 19
22931: PUSH
22932: LD_INT 20
22934: PUSH
22935: LD_INT 21
22937: PUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 23
22943: PUSH
22944: LD_INT 24
22946: PUSH
22947: LD_INT 25
22949: PUSH
22950: LD_INT 26
22952: PUSH
22953: LD_INT 27
22955: PUSH
22956: LD_INT 28
22958: PUSH
22959: LD_INT 30
22961: PUSH
22962: LD_INT 31
22964: PUSH
22965: LD_INT 32
22967: PUSH
22968: LD_INT 33
22970: PUSH
22971: LD_INT 34
22973: PUSH
22974: LD_INT 36
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 101
23012: PUSH
23013: LD_INT 102
23015: PUSH
23016: LD_INT 103
23018: PUSH
23019: LD_INT 104
23021: PUSH
23022: LD_INT 105
23024: PUSH
23025: LD_INT 106
23027: PUSH
23028: LD_INT 107
23030: PUSH
23031: LD_INT 108
23033: PUSH
23034: LD_INT 109
23036: PUSH
23037: LD_INT 110
23039: PUSH
23040: LD_INT 111
23042: PUSH
23043: LD_INT 112
23045: PUSH
23046: LD_INT 113
23048: PUSH
23049: LD_INT 114
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: ST_TO_ADDR
23072: GO 24239
23074: LD_INT 14
23076: DOUBLE
23077: EQUAL
23078: IFTRUE 23082
23080: GO 23294
23082: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23083: LD_ADDR_VAR 0 1
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: LD_INT 3
23096: PUSH
23097: LD_INT 4
23099: PUSH
23100: LD_INT 5
23102: PUSH
23103: LD_INT 6
23105: PUSH
23106: LD_INT 7
23108: PUSH
23109: LD_INT 8
23111: PUSH
23112: LD_INT 9
23114: PUSH
23115: LD_INT 10
23117: PUSH
23118: LD_INT 11
23120: PUSH
23121: LD_INT 12
23123: PUSH
23124: LD_INT 13
23126: PUSH
23127: LD_INT 14
23129: PUSH
23130: LD_INT 15
23132: PUSH
23133: LD_INT 16
23135: PUSH
23136: LD_INT 17
23138: PUSH
23139: LD_INT 18
23141: PUSH
23142: LD_INT 19
23144: PUSH
23145: LD_INT 20
23147: PUSH
23148: LD_INT 21
23150: PUSH
23151: LD_INT 22
23153: PUSH
23154: LD_INT 23
23156: PUSH
23157: LD_INT 24
23159: PUSH
23160: LD_INT 25
23162: PUSH
23163: LD_INT 26
23165: PUSH
23166: LD_INT 27
23168: PUSH
23169: LD_INT 28
23171: PUSH
23172: LD_INT 29
23174: PUSH
23175: LD_INT 30
23177: PUSH
23178: LD_INT 31
23180: PUSH
23181: LD_INT 32
23183: PUSH
23184: LD_INT 33
23186: PUSH
23187: LD_INT 34
23189: PUSH
23190: LD_INT 36
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 101
23232: PUSH
23233: LD_INT 102
23235: PUSH
23236: LD_INT 103
23238: PUSH
23239: LD_INT 104
23241: PUSH
23242: LD_INT 105
23244: PUSH
23245: LD_INT 106
23247: PUSH
23248: LD_INT 107
23250: PUSH
23251: LD_INT 108
23253: PUSH
23254: LD_INT 109
23256: PUSH
23257: LD_INT 110
23259: PUSH
23260: LD_INT 111
23262: PUSH
23263: LD_INT 112
23265: PUSH
23266: LD_INT 113
23268: PUSH
23269: LD_INT 114
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: ST_TO_ADDR
23292: GO 24239
23294: LD_INT 15
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23514
23302: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23303: LD_ADDR_VAR 0 1
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: LD_INT 3
23316: PUSH
23317: LD_INT 4
23319: PUSH
23320: LD_INT 5
23322: PUSH
23323: LD_INT 6
23325: PUSH
23326: LD_INT 7
23328: PUSH
23329: LD_INT 8
23331: PUSH
23332: LD_INT 9
23334: PUSH
23335: LD_INT 10
23337: PUSH
23338: LD_INT 11
23340: PUSH
23341: LD_INT 12
23343: PUSH
23344: LD_INT 13
23346: PUSH
23347: LD_INT 14
23349: PUSH
23350: LD_INT 15
23352: PUSH
23353: LD_INT 16
23355: PUSH
23356: LD_INT 17
23358: PUSH
23359: LD_INT 18
23361: PUSH
23362: LD_INT 19
23364: PUSH
23365: LD_INT 20
23367: PUSH
23368: LD_INT 21
23370: PUSH
23371: LD_INT 22
23373: PUSH
23374: LD_INT 23
23376: PUSH
23377: LD_INT 24
23379: PUSH
23380: LD_INT 25
23382: PUSH
23383: LD_INT 26
23385: PUSH
23386: LD_INT 27
23388: PUSH
23389: LD_INT 28
23391: PUSH
23392: LD_INT 29
23394: PUSH
23395: LD_INT 30
23397: PUSH
23398: LD_INT 31
23400: PUSH
23401: LD_INT 32
23403: PUSH
23404: LD_INT 33
23406: PUSH
23407: LD_INT 34
23409: PUSH
23410: LD_INT 36
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 101
23452: PUSH
23453: LD_INT 102
23455: PUSH
23456: LD_INT 103
23458: PUSH
23459: LD_INT 104
23461: PUSH
23462: LD_INT 105
23464: PUSH
23465: LD_INT 106
23467: PUSH
23468: LD_INT 107
23470: PUSH
23471: LD_INT 108
23473: PUSH
23474: LD_INT 109
23476: PUSH
23477: LD_INT 110
23479: PUSH
23480: LD_INT 111
23482: PUSH
23483: LD_INT 112
23485: PUSH
23486: LD_INT 113
23488: PUSH
23489: LD_INT 114
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: ST_TO_ADDR
23512: GO 24239
23514: LD_INT 16
23516: DOUBLE
23517: EQUAL
23518: IFTRUE 23522
23520: GO 23646
23522: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23523: LD_ADDR_VAR 0 1
23527: PUSH
23528: LD_INT 2
23530: PUSH
23531: LD_INT 4
23533: PUSH
23534: LD_INT 5
23536: PUSH
23537: LD_INT 7
23539: PUSH
23540: LD_INT 11
23542: PUSH
23543: LD_INT 12
23545: PUSH
23546: LD_INT 15
23548: PUSH
23549: LD_INT 16
23551: PUSH
23552: LD_INT 20
23554: PUSH
23555: LD_INT 21
23557: PUSH
23558: LD_INT 22
23560: PUSH
23561: LD_INT 23
23563: PUSH
23564: LD_INT 25
23566: PUSH
23567: LD_INT 26
23569: PUSH
23570: LD_INT 30
23572: PUSH
23573: LD_INT 31
23575: PUSH
23576: LD_INT 32
23578: PUSH
23579: LD_INT 33
23581: PUSH
23582: LD_INT 34
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 101
23608: PUSH
23609: LD_INT 102
23611: PUSH
23612: LD_INT 103
23614: PUSH
23615: LD_INT 106
23617: PUSH
23618: LD_INT 108
23620: PUSH
23621: LD_INT 112
23623: PUSH
23624: LD_INT 113
23626: PUSH
23627: LD_INT 114
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: ST_TO_ADDR
23644: GO 24239
23646: LD_INT 17
23648: DOUBLE
23649: EQUAL
23650: IFTRUE 23654
23652: GO 23866
23654: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23655: LD_ADDR_VAR 0 1
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: LD_INT 3
23668: PUSH
23669: LD_INT 4
23671: PUSH
23672: LD_INT 5
23674: PUSH
23675: LD_INT 6
23677: PUSH
23678: LD_INT 7
23680: PUSH
23681: LD_INT 8
23683: PUSH
23684: LD_INT 9
23686: PUSH
23687: LD_INT 10
23689: PUSH
23690: LD_INT 11
23692: PUSH
23693: LD_INT 12
23695: PUSH
23696: LD_INT 13
23698: PUSH
23699: LD_INT 14
23701: PUSH
23702: LD_INT 15
23704: PUSH
23705: LD_INT 16
23707: PUSH
23708: LD_INT 17
23710: PUSH
23711: LD_INT 18
23713: PUSH
23714: LD_INT 19
23716: PUSH
23717: LD_INT 20
23719: PUSH
23720: LD_INT 21
23722: PUSH
23723: LD_INT 22
23725: PUSH
23726: LD_INT 23
23728: PUSH
23729: LD_INT 24
23731: PUSH
23732: LD_INT 25
23734: PUSH
23735: LD_INT 26
23737: PUSH
23738: LD_INT 27
23740: PUSH
23741: LD_INT 28
23743: PUSH
23744: LD_INT 29
23746: PUSH
23747: LD_INT 30
23749: PUSH
23750: LD_INT 31
23752: PUSH
23753: LD_INT 32
23755: PUSH
23756: LD_INT 33
23758: PUSH
23759: LD_INT 34
23761: PUSH
23762: LD_INT 36
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 101
23804: PUSH
23805: LD_INT 102
23807: PUSH
23808: LD_INT 103
23810: PUSH
23811: LD_INT 104
23813: PUSH
23814: LD_INT 105
23816: PUSH
23817: LD_INT 106
23819: PUSH
23820: LD_INT 107
23822: PUSH
23823: LD_INT 108
23825: PUSH
23826: LD_INT 109
23828: PUSH
23829: LD_INT 110
23831: PUSH
23832: LD_INT 111
23834: PUSH
23835: LD_INT 112
23837: PUSH
23838: LD_INT 113
23840: PUSH
23841: LD_INT 114
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: ST_TO_ADDR
23864: GO 24239
23866: LD_INT 18
23868: DOUBLE
23869: EQUAL
23870: IFTRUE 23874
23872: GO 24010
23874: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23875: LD_ADDR_VAR 0 1
23879: PUSH
23880: LD_INT 2
23882: PUSH
23883: LD_INT 4
23885: PUSH
23886: LD_INT 5
23888: PUSH
23889: LD_INT 7
23891: PUSH
23892: LD_INT 11
23894: PUSH
23895: LD_INT 12
23897: PUSH
23898: LD_INT 15
23900: PUSH
23901: LD_INT 16
23903: PUSH
23904: LD_INT 20
23906: PUSH
23907: LD_INT 21
23909: PUSH
23910: LD_INT 22
23912: PUSH
23913: LD_INT 23
23915: PUSH
23916: LD_INT 25
23918: PUSH
23919: LD_INT 26
23921: PUSH
23922: LD_INT 30
23924: PUSH
23925: LD_INT 31
23927: PUSH
23928: LD_INT 32
23930: PUSH
23931: LD_INT 33
23933: PUSH
23934: LD_INT 34
23936: PUSH
23937: LD_INT 35
23939: PUSH
23940: LD_INT 36
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 101
23968: PUSH
23969: LD_INT 102
23971: PUSH
23972: LD_INT 103
23974: PUSH
23975: LD_INT 106
23977: PUSH
23978: LD_INT 108
23980: PUSH
23981: LD_INT 112
23983: PUSH
23984: LD_INT 113
23986: PUSH
23987: LD_INT 114
23989: PUSH
23990: LD_INT 115
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: ST_TO_ADDR
24008: GO 24239
24010: LD_INT 19
24012: DOUBLE
24013: EQUAL
24014: IFTRUE 24018
24016: GO 24238
24018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
24019: LD_ADDR_VAR 0 1
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: LD_INT 3
24032: PUSH
24033: LD_INT 4
24035: PUSH
24036: LD_INT 5
24038: PUSH
24039: LD_INT 6
24041: PUSH
24042: LD_INT 7
24044: PUSH
24045: LD_INT 8
24047: PUSH
24048: LD_INT 9
24050: PUSH
24051: LD_INT 10
24053: PUSH
24054: LD_INT 11
24056: PUSH
24057: LD_INT 12
24059: PUSH
24060: LD_INT 13
24062: PUSH
24063: LD_INT 14
24065: PUSH
24066: LD_INT 15
24068: PUSH
24069: LD_INT 16
24071: PUSH
24072: LD_INT 17
24074: PUSH
24075: LD_INT 18
24077: PUSH
24078: LD_INT 19
24080: PUSH
24081: LD_INT 20
24083: PUSH
24084: LD_INT 21
24086: PUSH
24087: LD_INT 22
24089: PUSH
24090: LD_INT 23
24092: PUSH
24093: LD_INT 24
24095: PUSH
24096: LD_INT 25
24098: PUSH
24099: LD_INT 26
24101: PUSH
24102: LD_INT 27
24104: PUSH
24105: LD_INT 28
24107: PUSH
24108: LD_INT 29
24110: PUSH
24111: LD_INT 30
24113: PUSH
24114: LD_INT 31
24116: PUSH
24117: LD_INT 32
24119: PUSH
24120: LD_INT 33
24122: PUSH
24123: LD_INT 34
24125: PUSH
24126: LD_INT 35
24128: PUSH
24129: LD_INT 36
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 101
24172: PUSH
24173: LD_INT 102
24175: PUSH
24176: LD_INT 103
24178: PUSH
24179: LD_INT 104
24181: PUSH
24182: LD_INT 105
24184: PUSH
24185: LD_INT 106
24187: PUSH
24188: LD_INT 107
24190: PUSH
24191: LD_INT 108
24193: PUSH
24194: LD_INT 109
24196: PUSH
24197: LD_INT 110
24199: PUSH
24200: LD_INT 111
24202: PUSH
24203: LD_INT 112
24205: PUSH
24206: LD_INT 113
24208: PUSH
24209: LD_INT 114
24211: PUSH
24212: LD_INT 115
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: ST_TO_ADDR
24236: GO 24239
24238: POP
// end else
24239: GO 24458
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24241: LD_ADDR_VAR 0 1
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: LD_INT 3
24254: PUSH
24255: LD_INT 4
24257: PUSH
24258: LD_INT 5
24260: PUSH
24261: LD_INT 6
24263: PUSH
24264: LD_INT 7
24266: PUSH
24267: LD_INT 8
24269: PUSH
24270: LD_INT 9
24272: PUSH
24273: LD_INT 10
24275: PUSH
24276: LD_INT 11
24278: PUSH
24279: LD_INT 12
24281: PUSH
24282: LD_INT 13
24284: PUSH
24285: LD_INT 14
24287: PUSH
24288: LD_INT 15
24290: PUSH
24291: LD_INT 16
24293: PUSH
24294: LD_INT 17
24296: PUSH
24297: LD_INT 18
24299: PUSH
24300: LD_INT 19
24302: PUSH
24303: LD_INT 20
24305: PUSH
24306: LD_INT 21
24308: PUSH
24309: LD_INT 22
24311: PUSH
24312: LD_INT 23
24314: PUSH
24315: LD_INT 24
24317: PUSH
24318: LD_INT 25
24320: PUSH
24321: LD_INT 26
24323: PUSH
24324: LD_INT 27
24326: PUSH
24327: LD_INT 28
24329: PUSH
24330: LD_INT 29
24332: PUSH
24333: LD_INT 30
24335: PUSH
24336: LD_INT 31
24338: PUSH
24339: LD_INT 32
24341: PUSH
24342: LD_INT 33
24344: PUSH
24345: LD_INT 34
24347: PUSH
24348: LD_INT 35
24350: PUSH
24351: LD_INT 36
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 101
24394: PUSH
24395: LD_INT 102
24397: PUSH
24398: LD_INT 103
24400: PUSH
24401: LD_INT 104
24403: PUSH
24404: LD_INT 105
24406: PUSH
24407: LD_INT 106
24409: PUSH
24410: LD_INT 107
24412: PUSH
24413: LD_INT 108
24415: PUSH
24416: LD_INT 109
24418: PUSH
24419: LD_INT 110
24421: PUSH
24422: LD_INT 111
24424: PUSH
24425: LD_INT 112
24427: PUSH
24428: LD_INT 113
24430: PUSH
24431: LD_INT 114
24433: PUSH
24434: LD_INT 115
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: ST_TO_ADDR
// if result then
24458: LD_VAR 0 1
24462: IFFALSE 24751
// begin normal :=  ;
24464: LD_ADDR_VAR 0 3
24468: PUSH
24469: LD_STRING 
24471: ST_TO_ADDR
// hardcore :=  ;
24472: LD_ADDR_VAR 0 4
24476: PUSH
24477: LD_STRING 
24479: ST_TO_ADDR
// for i = 1 to normalCounter do
24480: LD_ADDR_VAR 0 5
24484: PUSH
24485: DOUBLE
24486: LD_INT 1
24488: DEC
24489: ST_TO_ADDR
24490: LD_EXP 72
24494: PUSH
24495: FOR_TO
24496: IFFALSE 24597
// begin tmp := 0 ;
24498: LD_ADDR_VAR 0 2
24502: PUSH
24503: LD_STRING 0
24505: ST_TO_ADDR
// if result [ 1 ] then
24506: LD_VAR 0 1
24510: PUSH
24511: LD_INT 1
24513: ARRAY
24514: IFFALSE 24579
// if result [ 1 ] [ 1 ] = i then
24516: LD_VAR 0 1
24520: PUSH
24521: LD_INT 1
24523: ARRAY
24524: PUSH
24525: LD_INT 1
24527: ARRAY
24528: PUSH
24529: LD_VAR 0 5
24533: EQUAL
24534: IFFALSE 24579
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24536: LD_ADDR_VAR 0 1
24540: PUSH
24541: LD_VAR 0 1
24545: PPUSH
24546: LD_INT 1
24548: PPUSH
24549: LD_VAR 0 1
24553: PUSH
24554: LD_INT 1
24556: ARRAY
24557: PPUSH
24558: LD_INT 1
24560: PPUSH
24561: CALL_OW 3
24565: PPUSH
24566: CALL_OW 1
24570: ST_TO_ADDR
// tmp := 1 ;
24571: LD_ADDR_VAR 0 2
24575: PUSH
24576: LD_STRING 1
24578: ST_TO_ADDR
// end ; normal := normal & tmp ;
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: LD_VAR 0 3
24588: PUSH
24589: LD_VAR 0 2
24593: STR
24594: ST_TO_ADDR
// end ;
24595: GO 24495
24597: POP
24598: POP
// for i = 1 to hardcoreCounter do
24599: LD_ADDR_VAR 0 5
24603: PUSH
24604: DOUBLE
24605: LD_INT 1
24607: DEC
24608: ST_TO_ADDR
24609: LD_EXP 73
24613: PUSH
24614: FOR_TO
24615: IFFALSE 24720
// begin tmp := 0 ;
24617: LD_ADDR_VAR 0 2
24621: PUSH
24622: LD_STRING 0
24624: ST_TO_ADDR
// if result [ 2 ] then
24625: LD_VAR 0 1
24629: PUSH
24630: LD_INT 2
24632: ARRAY
24633: IFFALSE 24702
// if result [ 2 ] [ 1 ] = 100 + i then
24635: LD_VAR 0 1
24639: PUSH
24640: LD_INT 2
24642: ARRAY
24643: PUSH
24644: LD_INT 1
24646: ARRAY
24647: PUSH
24648: LD_INT 100
24650: PUSH
24651: LD_VAR 0 5
24655: PLUS
24656: EQUAL
24657: IFFALSE 24702
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24659: LD_ADDR_VAR 0 1
24663: PUSH
24664: LD_VAR 0 1
24668: PPUSH
24669: LD_INT 2
24671: PPUSH
24672: LD_VAR 0 1
24676: PUSH
24677: LD_INT 2
24679: ARRAY
24680: PPUSH
24681: LD_INT 1
24683: PPUSH
24684: CALL_OW 3
24688: PPUSH
24689: CALL_OW 1
24693: ST_TO_ADDR
// tmp := 1 ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_STRING 1
24701: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24702: LD_ADDR_VAR 0 4
24706: PUSH
24707: LD_VAR 0 4
24711: PUSH
24712: LD_VAR 0 2
24716: STR
24717: ST_TO_ADDR
// end ;
24718: GO 24614
24720: POP
24721: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24722: LD_STRING getStreamItemsFromMission("
24724: PUSH
24725: LD_VAR 0 3
24729: STR
24730: PUSH
24731: LD_STRING ","
24733: STR
24734: PUSH
24735: LD_VAR 0 4
24739: STR
24740: PUSH
24741: LD_STRING ")
24743: STR
24744: PPUSH
24745: CALL_OW 559
// end else
24749: GO 24758
// ToLua ( getStreamItemsFromMission("","") ) ;
24751: LD_STRING getStreamItemsFromMission("","")
24753: PPUSH
24754: CALL_OW 559
// end ;
24758: LD_VAR 0 1
24762: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24763: LD_EXP 71
24767: PUSH
24768: LD_EXP 76
24772: AND
24773: IFFALSE 24897
24775: GO 24777
24777: DISABLE
24778: LD_INT 0
24780: PPUSH
24781: PPUSH
// begin enable ;
24782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24783: LD_ADDR_VAR 0 2
24787: PUSH
24788: LD_INT 22
24790: PUSH
24791: LD_OWVAR 2
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: LD_INT 34
24805: PUSH
24806: LD_INT 7
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 34
24815: PUSH
24816: LD_INT 45
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 34
24825: PUSH
24826: LD_INT 28
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 34
24835: PUSH
24836: LD_INT 47
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PPUSH
24854: CALL_OW 69
24858: ST_TO_ADDR
// if not tmp then
24859: LD_VAR 0 2
24863: NOT
24864: IFFALSE 24868
// exit ;
24866: GO 24897
// for i in tmp do
24868: LD_ADDR_VAR 0 1
24872: PUSH
24873: LD_VAR 0 2
24877: PUSH
24878: FOR_IN
24879: IFFALSE 24895
// begin SetLives ( i , 0 ) ;
24881: LD_VAR 0 1
24885: PPUSH
24886: LD_INT 0
24888: PPUSH
24889: CALL_OW 234
// end ;
24893: GO 24878
24895: POP
24896: POP
// end ;
24897: PPOPN 2
24899: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24900: LD_EXP 71
24904: PUSH
24905: LD_EXP 77
24909: AND
24910: IFFALSE 24994
24912: GO 24914
24914: DISABLE
24915: LD_INT 0
24917: PPUSH
24918: PPUSH
// begin enable ;
24919: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24920: LD_ADDR_VAR 0 2
24924: PUSH
24925: LD_INT 22
24927: PUSH
24928: LD_OWVAR 2
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 32
24939: PUSH
24940: LD_INT 3
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PPUSH
24951: CALL_OW 69
24955: ST_TO_ADDR
// if not tmp then
24956: LD_VAR 0 2
24960: NOT
24961: IFFALSE 24965
// exit ;
24963: GO 24994
// for i in tmp do
24965: LD_ADDR_VAR 0 1
24969: PUSH
24970: LD_VAR 0 2
24974: PUSH
24975: FOR_IN
24976: IFFALSE 24992
// begin SetLives ( i , 0 ) ;
24978: LD_VAR 0 1
24982: PPUSH
24983: LD_INT 0
24985: PPUSH
24986: CALL_OW 234
// end ;
24990: GO 24975
24992: POP
24993: POP
// end ;
24994: PPOPN 2
24996: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24997: LD_EXP 71
25001: PUSH
25002: LD_EXP 74
25006: AND
25007: IFFALSE 25100
25009: GO 25011
25011: DISABLE
25012: LD_INT 0
25014: PPUSH
// begin enable ;
25015: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25016: LD_ADDR_VAR 0 1
25020: PUSH
25021: LD_INT 22
25023: PUSH
25024: LD_OWVAR 2
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: LD_INT 25
25038: PUSH
25039: LD_INT 5
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 25
25048: PUSH
25049: LD_INT 9
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 25
25058: PUSH
25059: LD_INT 8
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PPUSH
25076: CALL_OW 69
25080: PUSH
25081: FOR_IN
25082: IFFALSE 25098
// begin SetClass ( i , 1 ) ;
25084: LD_VAR 0 1
25088: PPUSH
25089: LD_INT 1
25091: PPUSH
25092: CALL_OW 336
// end ;
25096: GO 25081
25098: POP
25099: POP
// end ;
25100: PPOPN 1
25102: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25103: LD_EXP 71
25107: PUSH
25108: LD_EXP 75
25112: AND
25113: PUSH
25114: LD_OWVAR 65
25118: PUSH
25119: LD_INT 7
25121: LESS
25122: AND
25123: IFFALSE 25137
25125: GO 25127
25127: DISABLE
// begin enable ;
25128: ENABLE
// game_speed := 7 ;
25129: LD_ADDR_OWVAR 65
25133: PUSH
25134: LD_INT 7
25136: ST_TO_ADDR
// end ;
25137: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25138: LD_EXP 71
25142: PUSH
25143: LD_EXP 78
25147: AND
25148: IFFALSE 25350
25150: GO 25152
25152: DISABLE
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
25157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25158: LD_ADDR_VAR 0 3
25162: PUSH
25163: LD_INT 81
25165: PUSH
25166: LD_OWVAR 2
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 21
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 69
25193: ST_TO_ADDR
// if not tmp then
25194: LD_VAR 0 3
25198: NOT
25199: IFFALSE 25203
// exit ;
25201: GO 25350
// if tmp > 5 then
25203: LD_VAR 0 3
25207: PUSH
25208: LD_INT 5
25210: GREATER
25211: IFFALSE 25223
// k := 5 else
25213: LD_ADDR_VAR 0 2
25217: PUSH
25218: LD_INT 5
25220: ST_TO_ADDR
25221: GO 25233
// k := tmp ;
25223: LD_ADDR_VAR 0 2
25227: PUSH
25228: LD_VAR 0 3
25232: ST_TO_ADDR
// for i := 1 to k do
25233: LD_ADDR_VAR 0 1
25237: PUSH
25238: DOUBLE
25239: LD_INT 1
25241: DEC
25242: ST_TO_ADDR
25243: LD_VAR 0 2
25247: PUSH
25248: FOR_TO
25249: IFFALSE 25348
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25251: LD_VAR 0 3
25255: PUSH
25256: LD_VAR 0 1
25260: ARRAY
25261: PPUSH
25262: LD_VAR 0 1
25266: PUSH
25267: LD_INT 4
25269: MOD
25270: PUSH
25271: LD_INT 1
25273: PLUS
25274: PPUSH
25275: CALL_OW 259
25279: PUSH
25280: LD_INT 10
25282: LESS
25283: IFFALSE 25346
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25285: LD_VAR 0 3
25289: PUSH
25290: LD_VAR 0 1
25294: ARRAY
25295: PPUSH
25296: LD_VAR 0 1
25300: PUSH
25301: LD_INT 4
25303: MOD
25304: PUSH
25305: LD_INT 1
25307: PLUS
25308: PPUSH
25309: LD_VAR 0 3
25313: PUSH
25314: LD_VAR 0 1
25318: ARRAY
25319: PPUSH
25320: LD_VAR 0 1
25324: PUSH
25325: LD_INT 4
25327: MOD
25328: PUSH
25329: LD_INT 1
25331: PLUS
25332: PPUSH
25333: CALL_OW 259
25337: PUSH
25338: LD_INT 1
25340: PLUS
25341: PPUSH
25342: CALL_OW 237
25346: GO 25248
25348: POP
25349: POP
// end ;
25350: PPOPN 3
25352: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25353: LD_EXP 71
25357: PUSH
25358: LD_EXP 79
25362: AND
25363: IFFALSE 25383
25365: GO 25367
25367: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25368: LD_INT 4
25370: PPUSH
25371: LD_OWVAR 2
25375: PPUSH
25376: LD_INT 0
25378: PPUSH
25379: CALL_OW 324
25383: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25384: LD_EXP 71
25388: PUSH
25389: LD_EXP 108
25393: AND
25394: IFFALSE 25414
25396: GO 25398
25398: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25399: LD_INT 19
25401: PPUSH
25402: LD_OWVAR 2
25406: PPUSH
25407: LD_INT 0
25409: PPUSH
25410: CALL_OW 324
25414: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25415: LD_EXP 71
25419: PUSH
25420: LD_EXP 80
25424: AND
25425: IFFALSE 25527
25427: GO 25429
25429: DISABLE
25430: LD_INT 0
25432: PPUSH
25433: PPUSH
// begin enable ;
25434: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25435: LD_ADDR_VAR 0 2
25439: PUSH
25440: LD_INT 22
25442: PUSH
25443: LD_OWVAR 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 34
25457: PUSH
25458: LD_INT 11
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 34
25467: PUSH
25468: LD_INT 30
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PPUSH
25484: CALL_OW 69
25488: ST_TO_ADDR
// if not tmp then
25489: LD_VAR 0 2
25493: NOT
25494: IFFALSE 25498
// exit ;
25496: GO 25527
// for i in tmp do
25498: LD_ADDR_VAR 0 1
25502: PUSH
25503: LD_VAR 0 2
25507: PUSH
25508: FOR_IN
25509: IFFALSE 25525
// begin SetLives ( i , 0 ) ;
25511: LD_VAR 0 1
25515: PPUSH
25516: LD_INT 0
25518: PPUSH
25519: CALL_OW 234
// end ;
25523: GO 25508
25525: POP
25526: POP
// end ;
25527: PPOPN 2
25529: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25530: LD_EXP 71
25534: PUSH
25535: LD_EXP 81
25539: AND
25540: IFFALSE 25560
25542: GO 25544
25544: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25545: LD_INT 32
25547: PPUSH
25548: LD_OWVAR 2
25552: PPUSH
25553: LD_INT 0
25555: PPUSH
25556: CALL_OW 324
25560: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25561: LD_EXP 71
25565: PUSH
25566: LD_EXP 82
25570: AND
25571: IFFALSE 25752
25573: GO 25575
25575: DISABLE
25576: LD_INT 0
25578: PPUSH
25579: PPUSH
25580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: LD_INT 22
25588: PUSH
25589: LD_OWVAR 2
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 33
25600: PUSH
25601: LD_INT 3
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PPUSH
25612: CALL_OW 69
25616: ST_TO_ADDR
// if not tmp then
25617: LD_VAR 0 2
25621: NOT
25622: IFFALSE 25626
// exit ;
25624: GO 25752
// side := 0 ;
25626: LD_ADDR_VAR 0 3
25630: PUSH
25631: LD_INT 0
25633: ST_TO_ADDR
// for i := 1 to 8 do
25634: LD_ADDR_VAR 0 1
25638: PUSH
25639: DOUBLE
25640: LD_INT 1
25642: DEC
25643: ST_TO_ADDR
25644: LD_INT 8
25646: PUSH
25647: FOR_TO
25648: IFFALSE 25696
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25650: LD_OWVAR 2
25654: PUSH
25655: LD_VAR 0 1
25659: NONEQUAL
25660: PUSH
25661: LD_OWVAR 2
25665: PPUSH
25666: LD_VAR 0 1
25670: PPUSH
25671: CALL_OW 81
25675: PUSH
25676: LD_INT 2
25678: EQUAL
25679: AND
25680: IFFALSE 25694
// begin side := i ;
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: LD_VAR 0 1
25691: ST_TO_ADDR
// break ;
25692: GO 25696
// end ;
25694: GO 25647
25696: POP
25697: POP
// if not side then
25698: LD_VAR 0 3
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 25752
// for i := 1 to tmp do
25707: LD_ADDR_VAR 0 1
25711: PUSH
25712: DOUBLE
25713: LD_INT 1
25715: DEC
25716: ST_TO_ADDR
25717: LD_VAR 0 2
25721: PUSH
25722: FOR_TO
25723: IFFALSE 25750
// if Prob ( 60 ) then
25725: LD_INT 60
25727: PPUSH
25728: CALL_OW 13
25732: IFFALSE 25748
// SetSide ( i , side ) ;
25734: LD_VAR 0 1
25738: PPUSH
25739: LD_VAR 0 3
25743: PPUSH
25744: CALL_OW 235
25748: GO 25722
25750: POP
25751: POP
// end ;
25752: PPOPN 3
25754: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25755: LD_EXP 71
25759: PUSH
25760: LD_EXP 84
25764: AND
25765: IFFALSE 25884
25767: GO 25769
25769: DISABLE
25770: LD_INT 0
25772: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25773: LD_ADDR_VAR 0 1
25777: PUSH
25778: LD_INT 22
25780: PUSH
25781: LD_OWVAR 2
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 21
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: LD_INT 23
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: LIST
25821: PPUSH
25822: CALL_OW 69
25826: PUSH
25827: FOR_IN
25828: IFFALSE 25882
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25830: LD_VAR 0 1
25834: PPUSH
25835: CALL_OW 257
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 3
25848: PUSH
25849: LD_INT 4
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: IN
25858: IFFALSE 25880
// SetClass ( un , rand ( 1 , 4 ) ) ;
25860: LD_VAR 0 1
25864: PPUSH
25865: LD_INT 1
25867: PPUSH
25868: LD_INT 4
25870: PPUSH
25871: CALL_OW 12
25875: PPUSH
25876: CALL_OW 336
25880: GO 25827
25882: POP
25883: POP
// end ;
25884: PPOPN 1
25886: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25887: LD_EXP 71
25891: PUSH
25892: LD_EXP 83
25896: AND
25897: IFFALSE 25976
25899: GO 25901
25901: DISABLE
25902: LD_INT 0
25904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25905: LD_ADDR_VAR 0 1
25909: PUSH
25910: LD_INT 22
25912: PUSH
25913: LD_OWVAR 2
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 21
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PPUSH
25936: CALL_OW 69
25940: ST_TO_ADDR
// if not tmp then
25941: LD_VAR 0 1
25945: NOT
25946: IFFALSE 25950
// exit ;
25948: GO 25976
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25950: LD_VAR 0 1
25954: PUSH
25955: LD_INT 1
25957: PPUSH
25958: LD_VAR 0 1
25962: PPUSH
25963: CALL_OW 12
25967: ARRAY
25968: PPUSH
25969: LD_INT 100
25971: PPUSH
25972: CALL_OW 234
// end ;
25976: PPOPN 1
25978: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25979: LD_EXP 71
25983: PUSH
25984: LD_EXP 85
25988: AND
25989: IFFALSE 26087
25991: GO 25993
25993: DISABLE
25994: LD_INT 0
25996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25997: LD_ADDR_VAR 0 1
26001: PUSH
26002: LD_INT 22
26004: PUSH
26005: LD_OWVAR 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 21
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PPUSH
26028: CALL_OW 69
26032: ST_TO_ADDR
// if not tmp then
26033: LD_VAR 0 1
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26087
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26042: LD_VAR 0 1
26046: PUSH
26047: LD_INT 1
26049: PPUSH
26050: LD_VAR 0 1
26054: PPUSH
26055: CALL_OW 12
26059: ARRAY
26060: PPUSH
26061: LD_INT 1
26063: PPUSH
26064: LD_INT 4
26066: PPUSH
26067: CALL_OW 12
26071: PPUSH
26072: LD_INT 3000
26074: PPUSH
26075: LD_INT 9000
26077: PPUSH
26078: CALL_OW 12
26082: PPUSH
26083: CALL_OW 492
// end ;
26087: PPOPN 1
26089: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26090: LD_EXP 71
26094: PUSH
26095: LD_EXP 86
26099: AND
26100: IFFALSE 26120
26102: GO 26104
26104: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26105: LD_INT 1
26107: PPUSH
26108: LD_OWVAR 2
26112: PPUSH
26113: LD_INT 0
26115: PPUSH
26116: CALL_OW 324
26120: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26121: LD_EXP 71
26125: PUSH
26126: LD_EXP 87
26130: AND
26131: IFFALSE 26214
26133: GO 26135
26135: DISABLE
26136: LD_INT 0
26138: PPUSH
26139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26140: LD_ADDR_VAR 0 2
26144: PUSH
26145: LD_INT 22
26147: PUSH
26148: LD_OWVAR 2
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 21
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PPUSH
26171: CALL_OW 69
26175: ST_TO_ADDR
// if not tmp then
26176: LD_VAR 0 2
26180: NOT
26181: IFFALSE 26185
// exit ;
26183: GO 26214
// for i in tmp do
26185: LD_ADDR_VAR 0 1
26189: PUSH
26190: LD_VAR 0 2
26194: PUSH
26195: FOR_IN
26196: IFFALSE 26212
// SetBLevel ( i , 10 ) ;
26198: LD_VAR 0 1
26202: PPUSH
26203: LD_INT 10
26205: PPUSH
26206: CALL_OW 241
26210: GO 26195
26212: POP
26213: POP
// end ;
26214: PPOPN 2
26216: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26217: LD_EXP 71
26221: PUSH
26222: LD_EXP 88
26226: AND
26227: IFFALSE 26338
26229: GO 26231
26231: DISABLE
26232: LD_INT 0
26234: PPUSH
26235: PPUSH
26236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26237: LD_ADDR_VAR 0 3
26241: PUSH
26242: LD_INT 22
26244: PUSH
26245: LD_OWVAR 2
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 25
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PPUSH
26268: CALL_OW 69
26272: ST_TO_ADDR
// if not tmp then
26273: LD_VAR 0 3
26277: NOT
26278: IFFALSE 26282
// exit ;
26280: GO 26338
// un := tmp [ rand ( 1 , tmp ) ] ;
26282: LD_ADDR_VAR 0 2
26286: PUSH
26287: LD_VAR 0 3
26291: PUSH
26292: LD_INT 1
26294: PPUSH
26295: LD_VAR 0 3
26299: PPUSH
26300: CALL_OW 12
26304: ARRAY
26305: ST_TO_ADDR
// if Crawls ( un ) then
26306: LD_VAR 0 2
26310: PPUSH
26311: CALL_OW 318
26315: IFFALSE 26326
// ComWalk ( un ) ;
26317: LD_VAR 0 2
26321: PPUSH
26322: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26326: LD_VAR 0 2
26330: PPUSH
26331: LD_INT 5
26333: PPUSH
26334: CALL_OW 336
// end ;
26338: PPOPN 3
26340: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26341: LD_EXP 71
26345: PUSH
26346: LD_EXP 89
26350: AND
26351: PUSH
26352: LD_OWVAR 67
26356: PUSH
26357: LD_INT 3
26359: LESS
26360: AND
26361: IFFALSE 26380
26363: GO 26365
26365: DISABLE
// Difficulty := Difficulty + 1 ;
26366: LD_ADDR_OWVAR 67
26370: PUSH
26371: LD_OWVAR 67
26375: PUSH
26376: LD_INT 1
26378: PLUS
26379: ST_TO_ADDR
26380: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26381: LD_EXP 71
26385: PUSH
26386: LD_EXP 90
26390: AND
26391: IFFALSE 26494
26393: GO 26395
26395: DISABLE
26396: LD_INT 0
26398: PPUSH
// begin for i := 1 to 5 do
26399: LD_ADDR_VAR 0 1
26403: PUSH
26404: DOUBLE
26405: LD_INT 1
26407: DEC
26408: ST_TO_ADDR
26409: LD_INT 5
26411: PUSH
26412: FOR_TO
26413: IFFALSE 26492
// begin uc_nation := nation_nature ;
26415: LD_ADDR_OWVAR 21
26419: PUSH
26420: LD_INT 0
26422: ST_TO_ADDR
// uc_side := 0 ;
26423: LD_ADDR_OWVAR 20
26427: PUSH
26428: LD_INT 0
26430: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26431: LD_ADDR_OWVAR 29
26435: PUSH
26436: LD_INT 12
26438: PUSH
26439: LD_INT 12
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: ST_TO_ADDR
// hc_agressivity := 20 ;
26446: LD_ADDR_OWVAR 35
26450: PUSH
26451: LD_INT 20
26453: ST_TO_ADDR
// hc_class := class_tiger ;
26454: LD_ADDR_OWVAR 28
26458: PUSH
26459: LD_INT 14
26461: ST_TO_ADDR
// hc_gallery :=  ;
26462: LD_ADDR_OWVAR 33
26466: PUSH
26467: LD_STRING 
26469: ST_TO_ADDR
// hc_name :=  ;
26470: LD_ADDR_OWVAR 26
26474: PUSH
26475: LD_STRING 
26477: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26478: CALL_OW 44
26482: PPUSH
26483: LD_INT 0
26485: PPUSH
26486: CALL_OW 51
// end ;
26490: GO 26412
26492: POP
26493: POP
// end ;
26494: PPOPN 1
26496: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26497: LD_EXP 71
26501: PUSH
26502: LD_EXP 91
26506: AND
26507: IFFALSE 26516
26509: GO 26511
26511: DISABLE
// StreamSibBomb ;
26512: CALL 26517 0 0
26516: END
// export function StreamSibBomb ; var i , x , y ; begin
26517: LD_INT 0
26519: PPUSH
26520: PPUSH
26521: PPUSH
26522: PPUSH
// result := false ;
26523: LD_ADDR_VAR 0 1
26527: PUSH
26528: LD_INT 0
26530: ST_TO_ADDR
// for i := 1 to 16 do
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: DOUBLE
26537: LD_INT 1
26539: DEC
26540: ST_TO_ADDR
26541: LD_INT 16
26543: PUSH
26544: FOR_TO
26545: IFFALSE 26744
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26547: LD_ADDR_VAR 0 3
26551: PUSH
26552: LD_INT 10
26554: PUSH
26555: LD_INT 20
26557: PUSH
26558: LD_INT 30
26560: PUSH
26561: LD_INT 40
26563: PUSH
26564: LD_INT 50
26566: PUSH
26567: LD_INT 60
26569: PUSH
26570: LD_INT 70
26572: PUSH
26573: LD_INT 80
26575: PUSH
26576: LD_INT 90
26578: PUSH
26579: LD_INT 100
26581: PUSH
26582: LD_INT 110
26584: PUSH
26585: LD_INT 120
26587: PUSH
26588: LD_INT 130
26590: PUSH
26591: LD_INT 140
26593: PUSH
26594: LD_INT 150
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: PPUSH
26617: LD_INT 15
26619: PPUSH
26620: CALL_OW 12
26624: ARRAY
26625: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26626: LD_ADDR_VAR 0 4
26630: PUSH
26631: LD_INT 10
26633: PUSH
26634: LD_INT 20
26636: PUSH
26637: LD_INT 30
26639: PUSH
26640: LD_INT 40
26642: PUSH
26643: LD_INT 50
26645: PUSH
26646: LD_INT 60
26648: PUSH
26649: LD_INT 70
26651: PUSH
26652: LD_INT 80
26654: PUSH
26655: LD_INT 90
26657: PUSH
26658: LD_INT 100
26660: PUSH
26661: LD_INT 110
26663: PUSH
26664: LD_INT 120
26666: PUSH
26667: LD_INT 130
26669: PUSH
26670: LD_INT 140
26672: PUSH
26673: LD_INT 150
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: PPUSH
26696: LD_INT 15
26698: PPUSH
26699: CALL_OW 12
26703: ARRAY
26704: ST_TO_ADDR
// if ValidHex ( x , y ) then
26705: LD_VAR 0 3
26709: PPUSH
26710: LD_VAR 0 4
26714: PPUSH
26715: CALL_OW 488
26719: IFFALSE 26742
// begin result := [ x , y ] ;
26721: LD_ADDR_VAR 0 1
26725: PUSH
26726: LD_VAR 0 3
26730: PUSH
26731: LD_VAR 0 4
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: ST_TO_ADDR
// break ;
26740: GO 26744
// end ; end ;
26742: GO 26544
26744: POP
26745: POP
// if result then
26746: LD_VAR 0 1
26750: IFFALSE 26810
// begin ToLua ( playSibBomb() ) ;
26752: LD_STRING playSibBomb()
26754: PPUSH
26755: CALL_OW 559
// wait ( 0 0$14 ) ;
26759: LD_INT 490
26761: PPUSH
26762: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26766: LD_VAR 0 1
26770: PUSH
26771: LD_INT 1
26773: ARRAY
26774: PPUSH
26775: LD_VAR 0 1
26779: PUSH
26780: LD_INT 2
26782: ARRAY
26783: PPUSH
26784: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26788: LD_VAR 0 1
26792: PUSH
26793: LD_INT 1
26795: ARRAY
26796: PPUSH
26797: LD_VAR 0 1
26801: PUSH
26802: LD_INT 2
26804: ARRAY
26805: PPUSH
26806: CALL_OW 429
// end ; end ;
26810: LD_VAR 0 1
26814: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26815: LD_EXP 71
26819: PUSH
26820: LD_EXP 93
26824: AND
26825: IFFALSE 26837
26827: GO 26829
26829: DISABLE
// YouLost (  ) ;
26830: LD_STRING 
26832: PPUSH
26833: CALL_OW 104
26837: END
// every 0 0$1 trigger StreamModeActive and sFog do
26838: LD_EXP 71
26842: PUSH
26843: LD_EXP 92
26847: AND
26848: IFFALSE 26862
26850: GO 26852
26852: DISABLE
// FogOff ( your_side ) ;
26853: LD_OWVAR 2
26857: PPUSH
26858: CALL_OW 344
26862: END
// every 0 0$1 trigger StreamModeActive and sSun do
26863: LD_EXP 71
26867: PUSH
26868: LD_EXP 94
26872: AND
26873: IFFALSE 26901
26875: GO 26877
26877: DISABLE
// begin solar_recharge_percent := 0 ;
26878: LD_ADDR_OWVAR 79
26882: PUSH
26883: LD_INT 0
26885: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26886: LD_INT 10500
26888: PPUSH
26889: CALL_OW 67
// solar_recharge_percent := 100 ;
26893: LD_ADDR_OWVAR 79
26897: PUSH
26898: LD_INT 100
26900: ST_TO_ADDR
// end ;
26901: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26902: LD_EXP 71
26906: PUSH
26907: LD_EXP 95
26911: AND
26912: IFFALSE 27151
26914: GO 26916
26916: DISABLE
26917: LD_INT 0
26919: PPUSH
26920: PPUSH
26921: PPUSH
// begin tmp := [ ] ;
26922: LD_ADDR_VAR 0 3
26926: PUSH
26927: EMPTY
26928: ST_TO_ADDR
// for i := 1 to 6 do
26929: LD_ADDR_VAR 0 1
26933: PUSH
26934: DOUBLE
26935: LD_INT 1
26937: DEC
26938: ST_TO_ADDR
26939: LD_INT 6
26941: PUSH
26942: FOR_TO
26943: IFFALSE 27048
// begin uc_nation := nation_nature ;
26945: LD_ADDR_OWVAR 21
26949: PUSH
26950: LD_INT 0
26952: ST_TO_ADDR
// uc_side := 0 ;
26953: LD_ADDR_OWVAR 20
26957: PUSH
26958: LD_INT 0
26960: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26961: LD_ADDR_OWVAR 29
26965: PUSH
26966: LD_INT 12
26968: PUSH
26969: LD_INT 12
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: ST_TO_ADDR
// hc_agressivity := 20 ;
26976: LD_ADDR_OWVAR 35
26980: PUSH
26981: LD_INT 20
26983: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26984: LD_ADDR_OWVAR 28
26988: PUSH
26989: LD_INT 17
26991: ST_TO_ADDR
// hc_gallery :=  ;
26992: LD_ADDR_OWVAR 33
26996: PUSH
26997: LD_STRING 
26999: ST_TO_ADDR
// hc_name :=  ;
27000: LD_ADDR_OWVAR 26
27004: PUSH
27005: LD_STRING 
27007: ST_TO_ADDR
// un := CreateHuman ;
27008: LD_ADDR_VAR 0 2
27012: PUSH
27013: CALL_OW 44
27017: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27018: LD_VAR 0 2
27022: PPUSH
27023: LD_INT 1
27025: PPUSH
27026: CALL_OW 51
// tmp := tmp ^ un ;
27030: LD_ADDR_VAR 0 3
27034: PUSH
27035: LD_VAR 0 3
27039: PUSH
27040: LD_VAR 0 2
27044: ADD
27045: ST_TO_ADDR
// end ;
27046: GO 26942
27048: POP
27049: POP
// repeat wait ( 0 0$1 ) ;
27050: LD_INT 35
27052: PPUSH
27053: CALL_OW 67
// for un in tmp do
27057: LD_ADDR_VAR 0 2
27061: PUSH
27062: LD_VAR 0 3
27066: PUSH
27067: FOR_IN
27068: IFFALSE 27142
// begin if IsDead ( un ) then
27070: LD_VAR 0 2
27074: PPUSH
27075: CALL_OW 301
27079: IFFALSE 27099
// begin tmp := tmp diff un ;
27081: LD_ADDR_VAR 0 3
27085: PUSH
27086: LD_VAR 0 3
27090: PUSH
27091: LD_VAR 0 2
27095: DIFF
27096: ST_TO_ADDR
// continue ;
27097: GO 27067
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27099: LD_VAR 0 2
27103: PPUSH
27104: LD_INT 3
27106: PUSH
27107: LD_INT 22
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PPUSH
27121: CALL_OW 69
27125: PPUSH
27126: LD_VAR 0 2
27130: PPUSH
27131: CALL_OW 74
27135: PPUSH
27136: CALL_OW 115
// end ;
27140: GO 27067
27142: POP
27143: POP
// until not tmp ;
27144: LD_VAR 0 3
27148: NOT
27149: IFFALSE 27050
// end ;
27151: PPOPN 3
27153: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27154: LD_EXP 71
27158: PUSH
27159: LD_EXP 96
27163: AND
27164: IFFALSE 27218
27166: GO 27168
27168: DISABLE
// begin ToLua ( displayTroll(); ) ;
27169: LD_STRING displayTroll();
27171: PPUSH
27172: CALL_OW 559
// wait ( 3 3$00 ) ;
27176: LD_INT 6300
27178: PPUSH
27179: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27183: LD_STRING hideTroll();
27185: PPUSH
27186: CALL_OW 559
// wait ( 1 1$00 ) ;
27190: LD_INT 2100
27192: PPUSH
27193: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27197: LD_STRING displayTroll();
27199: PPUSH
27200: CALL_OW 559
// wait ( 1 1$00 ) ;
27204: LD_INT 2100
27206: PPUSH
27207: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27211: LD_STRING hideTroll();
27213: PPUSH
27214: CALL_OW 559
// end ;
27218: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27219: LD_EXP 71
27223: PUSH
27224: LD_EXP 97
27228: AND
27229: IFFALSE 27292
27231: GO 27233
27233: DISABLE
27234: LD_INT 0
27236: PPUSH
// begin p := 0 ;
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: LD_INT 0
27244: ST_TO_ADDR
// repeat game_speed := 1 ;
27245: LD_ADDR_OWVAR 65
27249: PUSH
27250: LD_INT 1
27252: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27253: LD_INT 35
27255: PPUSH
27256: CALL_OW 67
// p := p + 1 ;
27260: LD_ADDR_VAR 0 1
27264: PUSH
27265: LD_VAR 0 1
27269: PUSH
27270: LD_INT 1
27272: PLUS
27273: ST_TO_ADDR
// until p >= 60 ;
27274: LD_VAR 0 1
27278: PUSH
27279: LD_INT 60
27281: GREATEREQUAL
27282: IFFALSE 27245
// game_speed := 4 ;
27284: LD_ADDR_OWVAR 65
27288: PUSH
27289: LD_INT 4
27291: ST_TO_ADDR
// end ;
27292: PPOPN 1
27294: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27295: LD_EXP 71
27299: PUSH
27300: LD_EXP 98
27304: AND
27305: IFFALSE 27451
27307: GO 27309
27309: DISABLE
27310: LD_INT 0
27312: PPUSH
27313: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27314: LD_ADDR_VAR 0 1
27318: PUSH
27319: LD_INT 22
27321: PUSH
27322: LD_OWVAR 2
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: LD_INT 30
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 30
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PPUSH
27363: CALL_OW 69
27367: ST_TO_ADDR
// if not depot then
27368: LD_VAR 0 1
27372: NOT
27373: IFFALSE 27377
// exit ;
27375: GO 27451
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27377: LD_ADDR_VAR 0 2
27381: PUSH
27382: LD_VAR 0 1
27386: PUSH
27387: LD_INT 1
27389: PPUSH
27390: LD_VAR 0 1
27394: PPUSH
27395: CALL_OW 12
27399: ARRAY
27400: PPUSH
27401: CALL_OW 274
27405: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27406: LD_VAR 0 2
27410: PPUSH
27411: LD_INT 1
27413: PPUSH
27414: LD_INT 0
27416: PPUSH
27417: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27421: LD_VAR 0 2
27425: PPUSH
27426: LD_INT 2
27428: PPUSH
27429: LD_INT 0
27431: PPUSH
27432: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27436: LD_VAR 0 2
27440: PPUSH
27441: LD_INT 3
27443: PPUSH
27444: LD_INT 0
27446: PPUSH
27447: CALL_OW 277
// end ;
27451: PPOPN 2
27453: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27454: LD_EXP 71
27458: PUSH
27459: LD_EXP 99
27463: AND
27464: IFFALSE 27561
27466: GO 27468
27468: DISABLE
27469: LD_INT 0
27471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27472: LD_ADDR_VAR 0 1
27476: PUSH
27477: LD_INT 22
27479: PUSH
27480: LD_OWVAR 2
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 21
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 3
27501: PUSH
27502: LD_INT 23
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: PPUSH
27521: CALL_OW 69
27525: ST_TO_ADDR
// if not tmp then
27526: LD_VAR 0 1
27530: NOT
27531: IFFALSE 27535
// exit ;
27533: GO 27561
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 1
27542: PPUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: CALL_OW 12
27552: ARRAY
27553: PPUSH
27554: LD_INT 200
27556: PPUSH
27557: CALL_OW 234
// end ;
27561: PPOPN 1
27563: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27564: LD_EXP 71
27568: PUSH
27569: LD_EXP 100
27573: AND
27574: IFFALSE 27653
27576: GO 27578
27578: DISABLE
27579: LD_INT 0
27581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27582: LD_ADDR_VAR 0 1
27586: PUSH
27587: LD_INT 22
27589: PUSH
27590: LD_OWVAR 2
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 21
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PPUSH
27613: CALL_OW 69
27617: ST_TO_ADDR
// if not tmp then
27618: LD_VAR 0 1
27622: NOT
27623: IFFALSE 27627
// exit ;
27625: GO 27653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27627: LD_VAR 0 1
27631: PUSH
27632: LD_INT 1
27634: PPUSH
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL_OW 12
27644: ARRAY
27645: PPUSH
27646: LD_INT 60
27648: PPUSH
27649: CALL_OW 234
// end ;
27653: PPOPN 1
27655: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27656: LD_EXP 71
27660: PUSH
27661: LD_EXP 101
27665: AND
27666: IFFALSE 27765
27668: GO 27670
27670: DISABLE
27671: LD_INT 0
27673: PPUSH
27674: PPUSH
// begin enable ;
27675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27676: LD_ADDR_VAR 0 1
27680: PUSH
27681: LD_INT 22
27683: PUSH
27684: LD_OWVAR 2
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 61
27695: PUSH
27696: EMPTY
27697: LIST
27698: PUSH
27699: LD_INT 33
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: PPUSH
27714: CALL_OW 69
27718: ST_TO_ADDR
// if not tmp then
27719: LD_VAR 0 1
27723: NOT
27724: IFFALSE 27728
// exit ;
27726: GO 27765
// for i in tmp do
27728: LD_ADDR_VAR 0 2
27732: PUSH
27733: LD_VAR 0 1
27737: PUSH
27738: FOR_IN
27739: IFFALSE 27763
// if IsControledBy ( i ) then
27741: LD_VAR 0 2
27745: PPUSH
27746: CALL_OW 312
27750: IFFALSE 27761
// ComUnlink ( i ) ;
27752: LD_VAR 0 2
27756: PPUSH
27757: CALL_OW 136
27761: GO 27738
27763: POP
27764: POP
// end ;
27765: PPOPN 2
27767: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27768: LD_EXP 71
27772: PUSH
27773: LD_EXP 102
27777: AND
27778: IFFALSE 27918
27780: GO 27782
27782: DISABLE
27783: LD_INT 0
27785: PPUSH
27786: PPUSH
// begin ToLua ( displayPowell(); ) ;
27787: LD_STRING displayPowell();
27789: PPUSH
27790: CALL_OW 559
// uc_side := 0 ;
27794: LD_ADDR_OWVAR 20
27798: PUSH
27799: LD_INT 0
27801: ST_TO_ADDR
// uc_nation := 2 ;
27802: LD_ADDR_OWVAR 21
27806: PUSH
27807: LD_INT 2
27809: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27810: LD_ADDR_OWVAR 37
27814: PUSH
27815: LD_INT 14
27817: ST_TO_ADDR
// vc_engine := engine_siberite ;
27818: LD_ADDR_OWVAR 39
27822: PUSH
27823: LD_INT 3
27825: ST_TO_ADDR
// vc_control := control_apeman ;
27826: LD_ADDR_OWVAR 38
27830: PUSH
27831: LD_INT 5
27833: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27834: LD_ADDR_OWVAR 40
27838: PUSH
27839: LD_INT 29
27841: ST_TO_ADDR
// un := CreateVehicle ;
27842: LD_ADDR_VAR 0 2
27846: PUSH
27847: CALL_OW 45
27851: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27852: LD_VAR 0 2
27856: PPUSH
27857: LD_INT 1
27859: PPUSH
27860: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27864: LD_INT 35
27866: PPUSH
27867: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27871: LD_VAR 0 2
27875: PPUSH
27876: LD_INT 22
27878: PUSH
27879: LD_OWVAR 2
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PPUSH
27888: CALL_OW 69
27892: PPUSH
27893: LD_VAR 0 2
27897: PPUSH
27898: CALL_OW 74
27902: PPUSH
27903: CALL_OW 115
// until IsDead ( un ) ;
27907: LD_VAR 0 2
27911: PPUSH
27912: CALL_OW 301
27916: IFFALSE 27864
// end ;
27918: PPOPN 2
27920: END
// every 0 0$1 trigger StreamModeActive and sStu do
27921: LD_EXP 71
27925: PUSH
27926: LD_EXP 110
27930: AND
27931: IFFALSE 27947
27933: GO 27935
27935: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27936: LD_STRING displayStucuk();
27938: PPUSH
27939: CALL_OW 559
// ResetFog ;
27943: CALL_OW 335
// end ;
27947: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27948: LD_EXP 71
27952: PUSH
27953: LD_EXP 103
27957: AND
27958: IFFALSE 28099
27960: GO 27962
27962: DISABLE
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27967: LD_ADDR_VAR 0 2
27971: PUSH
27972: LD_INT 22
27974: PUSH
27975: LD_OWVAR 2
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 21
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PPUSH
27998: CALL_OW 69
28002: ST_TO_ADDR
// if not tmp then
28003: LD_VAR 0 2
28007: NOT
28008: IFFALSE 28012
// exit ;
28010: GO 28099
// un := tmp [ rand ( 1 , tmp ) ] ;
28012: LD_ADDR_VAR 0 1
28016: PUSH
28017: LD_VAR 0 2
28021: PUSH
28022: LD_INT 1
28024: PPUSH
28025: LD_VAR 0 2
28029: PPUSH
28030: CALL_OW 12
28034: ARRAY
28035: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28036: LD_VAR 0 1
28040: PPUSH
28041: LD_INT 0
28043: PPUSH
28044: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28048: LD_VAR 0 1
28052: PPUSH
28053: LD_OWVAR 3
28057: PUSH
28058: LD_VAR 0 1
28062: DIFF
28063: PPUSH
28064: LD_VAR 0 1
28068: PPUSH
28069: CALL_OW 74
28073: PPUSH
28074: CALL_OW 115
// wait ( 0 0$20 ) ;
28078: LD_INT 700
28080: PPUSH
28081: CALL_OW 67
// SetSide ( un , your_side ) ;
28085: LD_VAR 0 1
28089: PPUSH
28090: LD_OWVAR 2
28094: PPUSH
28095: CALL_OW 235
// end ;
28099: PPOPN 2
28101: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28102: LD_EXP 71
28106: PUSH
28107: LD_EXP 104
28111: AND
28112: IFFALSE 28218
28114: GO 28116
28116: DISABLE
28117: LD_INT 0
28119: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28120: LD_ADDR_VAR 0 1
28124: PUSH
28125: LD_INT 22
28127: PUSH
28128: LD_OWVAR 2
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: PUSH
28140: LD_INT 30
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 30
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PPUSH
28169: CALL_OW 69
28173: ST_TO_ADDR
// if not depot then
28174: LD_VAR 0 1
28178: NOT
28179: IFFALSE 28183
// exit ;
28181: GO 28218
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28183: LD_VAR 0 1
28187: PUSH
28188: LD_INT 1
28190: ARRAY
28191: PPUSH
28192: CALL_OW 250
28196: PPUSH
28197: LD_VAR 0 1
28201: PUSH
28202: LD_INT 1
28204: ARRAY
28205: PPUSH
28206: CALL_OW 251
28210: PPUSH
28211: LD_INT 70
28213: PPUSH
28214: CALL_OW 495
// end ;
28218: PPOPN 1
28220: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28221: LD_EXP 71
28225: PUSH
28226: LD_EXP 105
28230: AND
28231: IFFALSE 28442
28233: GO 28235
28235: DISABLE
28236: LD_INT 0
28238: PPUSH
28239: PPUSH
28240: PPUSH
28241: PPUSH
28242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28243: LD_ADDR_VAR 0 5
28247: PUSH
28248: LD_INT 22
28250: PUSH
28251: LD_OWVAR 2
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 21
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 69
28278: ST_TO_ADDR
// if not tmp then
28279: LD_VAR 0 5
28283: NOT
28284: IFFALSE 28288
// exit ;
28286: GO 28442
// for i in tmp do
28288: LD_ADDR_VAR 0 1
28292: PUSH
28293: LD_VAR 0 5
28297: PUSH
28298: FOR_IN
28299: IFFALSE 28440
// begin d := rand ( 0 , 5 ) ;
28301: LD_ADDR_VAR 0 4
28305: PUSH
28306: LD_INT 0
28308: PPUSH
28309: LD_INT 5
28311: PPUSH
28312: CALL_OW 12
28316: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28317: LD_ADDR_VAR 0 2
28321: PUSH
28322: LD_VAR 0 1
28326: PPUSH
28327: CALL_OW 250
28331: PPUSH
28332: LD_VAR 0 4
28336: PPUSH
28337: LD_INT 3
28339: PPUSH
28340: LD_INT 12
28342: PPUSH
28343: CALL_OW 12
28347: PPUSH
28348: CALL_OW 272
28352: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28353: LD_ADDR_VAR 0 3
28357: PUSH
28358: LD_VAR 0 1
28362: PPUSH
28363: CALL_OW 251
28367: PPUSH
28368: LD_VAR 0 4
28372: PPUSH
28373: LD_INT 3
28375: PPUSH
28376: LD_INT 12
28378: PPUSH
28379: CALL_OW 12
28383: PPUSH
28384: CALL_OW 273
28388: ST_TO_ADDR
// if ValidHex ( x , y ) then
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_VAR 0 3
28398: PPUSH
28399: CALL_OW 488
28403: IFFALSE 28438
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28405: LD_VAR 0 1
28409: PPUSH
28410: LD_VAR 0 2
28414: PPUSH
28415: LD_VAR 0 3
28419: PPUSH
28420: LD_INT 3
28422: PPUSH
28423: LD_INT 6
28425: PPUSH
28426: CALL_OW 12
28430: PPUSH
28431: LD_INT 1
28433: PPUSH
28434: CALL_OW 483
// end ;
28438: GO 28298
28440: POP
28441: POP
// end ;
28442: PPOPN 5
28444: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28445: LD_EXP 71
28449: PUSH
28450: LD_EXP 106
28454: AND
28455: IFFALSE 28549
28457: GO 28459
28459: DISABLE
28460: LD_INT 0
28462: PPUSH
28463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28464: LD_ADDR_VAR 0 2
28468: PUSH
28469: LD_INT 22
28471: PUSH
28472: LD_OWVAR 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 32
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 21
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: PPUSH
28506: CALL_OW 69
28510: ST_TO_ADDR
// if not tmp then
28511: LD_VAR 0 2
28515: NOT
28516: IFFALSE 28520
// exit ;
28518: GO 28549
// for i in tmp do
28520: LD_ADDR_VAR 0 1
28524: PUSH
28525: LD_VAR 0 2
28529: PUSH
28530: FOR_IN
28531: IFFALSE 28547
// SetFuel ( i , 0 ) ;
28533: LD_VAR 0 1
28537: PPUSH
28538: LD_INT 0
28540: PPUSH
28541: CALL_OW 240
28545: GO 28530
28547: POP
28548: POP
// end ;
28549: PPOPN 2
28551: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28552: LD_EXP 71
28556: PUSH
28557: LD_EXP 107
28561: AND
28562: IFFALSE 28628
28564: GO 28566
28566: DISABLE
28567: LD_INT 0
28569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28570: LD_ADDR_VAR 0 1
28574: PUSH
28575: LD_INT 22
28577: PUSH
28578: LD_OWVAR 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 30
28589: PUSH
28590: LD_INT 29
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PPUSH
28601: CALL_OW 69
28605: ST_TO_ADDR
// if not tmp then
28606: LD_VAR 0 1
28610: NOT
28611: IFFALSE 28615
// exit ;
28613: GO 28628
// DestroyUnit ( tmp [ 1 ] ) ;
28615: LD_VAR 0 1
28619: PUSH
28620: LD_INT 1
28622: ARRAY
28623: PPUSH
28624: CALL_OW 65
// end ;
28628: PPOPN 1
28630: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28631: LD_EXP 71
28635: PUSH
28636: LD_EXP 109
28640: AND
28641: IFFALSE 28770
28643: GO 28645
28645: DISABLE
28646: LD_INT 0
28648: PPUSH
// begin uc_side := 0 ;
28649: LD_ADDR_OWVAR 20
28653: PUSH
28654: LD_INT 0
28656: ST_TO_ADDR
// uc_nation := nation_arabian ;
28657: LD_ADDR_OWVAR 21
28661: PUSH
28662: LD_INT 2
28664: ST_TO_ADDR
// hc_gallery :=  ;
28665: LD_ADDR_OWVAR 33
28669: PUSH
28670: LD_STRING 
28672: ST_TO_ADDR
// hc_name :=  ;
28673: LD_ADDR_OWVAR 26
28677: PUSH
28678: LD_STRING 
28680: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28681: LD_INT 1
28683: PPUSH
28684: LD_INT 11
28686: PPUSH
28687: LD_INT 10
28689: PPUSH
28690: CALL_OW 380
// un := CreateHuman ;
28694: LD_ADDR_VAR 0 1
28698: PUSH
28699: CALL_OW 44
28703: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28704: LD_VAR 0 1
28708: PPUSH
28709: LD_INT 1
28711: PPUSH
28712: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28716: LD_INT 35
28718: PPUSH
28719: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28723: LD_VAR 0 1
28727: PPUSH
28728: LD_INT 22
28730: PUSH
28731: LD_OWVAR 2
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PPUSH
28740: CALL_OW 69
28744: PPUSH
28745: LD_VAR 0 1
28749: PPUSH
28750: CALL_OW 74
28754: PPUSH
28755: CALL_OW 115
// until IsDead ( un ) ;
28759: LD_VAR 0 1
28763: PPUSH
28764: CALL_OW 301
28768: IFFALSE 28716
// end ;
28770: PPOPN 1
28772: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28773: LD_EXP 71
28777: PUSH
28778: LD_EXP 111
28782: AND
28783: IFFALSE 28795
28785: GO 28787
28787: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28788: LD_STRING earthquake(getX(game), 0, 32)
28790: PPUSH
28791: CALL_OW 559
28795: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28796: LD_EXP 71
28800: PUSH
28801: LD_EXP 112
28805: AND
28806: IFFALSE 28897
28808: GO 28810
28810: DISABLE
28811: LD_INT 0
28813: PPUSH
// begin enable ;
28814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28815: LD_ADDR_VAR 0 1
28819: PUSH
28820: LD_INT 22
28822: PUSH
28823: LD_OWVAR 2
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 21
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 33
28844: PUSH
28845: LD_INT 3
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: PPUSH
28857: CALL_OW 69
28861: ST_TO_ADDR
// if not tmp then
28862: LD_VAR 0 1
28866: NOT
28867: IFFALSE 28871
// exit ;
28869: GO 28897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28871: LD_VAR 0 1
28875: PUSH
28876: LD_INT 1
28878: PPUSH
28879: LD_VAR 0 1
28883: PPUSH
28884: CALL_OW 12
28888: ARRAY
28889: PPUSH
28890: LD_INT 1
28892: PPUSH
28893: CALL_OW 234
// end ;
28897: PPOPN 1
28899: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28900: LD_EXP 71
28904: PUSH
28905: LD_EXP 113
28909: AND
28910: IFFALSE 29051
28912: GO 28914
28914: DISABLE
28915: LD_INT 0
28917: PPUSH
28918: PPUSH
28919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28920: LD_ADDR_VAR 0 3
28924: PUSH
28925: LD_INT 22
28927: PUSH
28928: LD_OWVAR 2
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 25
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PPUSH
28951: CALL_OW 69
28955: ST_TO_ADDR
// if not tmp then
28956: LD_VAR 0 3
28960: NOT
28961: IFFALSE 28965
// exit ;
28963: GO 29051
// un := tmp [ rand ( 1 , tmp ) ] ;
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_VAR 0 3
28974: PUSH
28975: LD_INT 1
28977: PPUSH
28978: LD_VAR 0 3
28982: PPUSH
28983: CALL_OW 12
28987: ARRAY
28988: ST_TO_ADDR
// if Crawls ( un ) then
28989: LD_VAR 0 2
28993: PPUSH
28994: CALL_OW 318
28998: IFFALSE 29009
// ComWalk ( un ) ;
29000: LD_VAR 0 2
29004: PPUSH
29005: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29009: LD_VAR 0 2
29013: PPUSH
29014: LD_INT 9
29016: PPUSH
29017: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29021: LD_INT 28
29023: PPUSH
29024: LD_OWVAR 2
29028: PPUSH
29029: LD_INT 2
29031: PPUSH
29032: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29036: LD_INT 29
29038: PPUSH
29039: LD_OWVAR 2
29043: PPUSH
29044: LD_INT 2
29046: PPUSH
29047: CALL_OW 322
// end ;
29051: PPOPN 3
29053: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29054: LD_EXP 71
29058: PUSH
29059: LD_EXP 114
29063: AND
29064: IFFALSE 29175
29066: GO 29068
29068: DISABLE
29069: LD_INT 0
29071: PPUSH
29072: PPUSH
29073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29074: LD_ADDR_VAR 0 3
29078: PUSH
29079: LD_INT 22
29081: PUSH
29082: LD_OWVAR 2
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 25
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PPUSH
29105: CALL_OW 69
29109: ST_TO_ADDR
// if not tmp then
29110: LD_VAR 0 3
29114: NOT
29115: IFFALSE 29119
// exit ;
29117: GO 29175
// un := tmp [ rand ( 1 , tmp ) ] ;
29119: LD_ADDR_VAR 0 2
29123: PUSH
29124: LD_VAR 0 3
29128: PUSH
29129: LD_INT 1
29131: PPUSH
29132: LD_VAR 0 3
29136: PPUSH
29137: CALL_OW 12
29141: ARRAY
29142: ST_TO_ADDR
// if Crawls ( un ) then
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 318
29152: IFFALSE 29163
// ComWalk ( un ) ;
29154: LD_VAR 0 2
29158: PPUSH
29159: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29163: LD_VAR 0 2
29167: PPUSH
29168: LD_INT 8
29170: PPUSH
29171: CALL_OW 336
// end ;
29175: PPOPN 3
29177: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29178: LD_EXP 71
29182: PUSH
29183: LD_EXP 115
29187: AND
29188: IFFALSE 29332
29190: GO 29192
29192: DISABLE
29193: LD_INT 0
29195: PPUSH
29196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_INT 22
29204: PUSH
29205: LD_OWVAR 2
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 21
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 2
29226: PUSH
29227: LD_INT 34
29229: PUSH
29230: LD_INT 12
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 34
29239: PUSH
29240: LD_INT 51
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 34
29249: PUSH
29250: LD_INT 32
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: PPUSH
29268: CALL_OW 69
29272: ST_TO_ADDR
// if not tmp then
29273: LD_VAR 0 2
29277: NOT
29278: IFFALSE 29282
// exit ;
29280: GO 29332
// for i in tmp do
29282: LD_ADDR_VAR 0 1
29286: PUSH
29287: LD_VAR 0 2
29291: PUSH
29292: FOR_IN
29293: IFFALSE 29330
// if GetCargo ( i , mat_artifact ) = 0 then
29295: LD_VAR 0 1
29299: PPUSH
29300: LD_INT 4
29302: PPUSH
29303: CALL_OW 289
29307: PUSH
29308: LD_INT 0
29310: EQUAL
29311: IFFALSE 29328
// SetCargo ( i , mat_siberit , 100 ) ;
29313: LD_VAR 0 1
29317: PPUSH
29318: LD_INT 3
29320: PPUSH
29321: LD_INT 100
29323: PPUSH
29324: CALL_OW 290
29328: GO 29292
29330: POP
29331: POP
// end ;
29332: PPOPN 2
29334: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29335: LD_EXP 71
29339: PUSH
29340: LD_EXP 116
29344: AND
29345: IFFALSE 29528
29347: GO 29349
29349: DISABLE
29350: LD_INT 0
29352: PPUSH
29353: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29354: LD_ADDR_VAR 0 2
29358: PUSH
29359: LD_INT 22
29361: PUSH
29362: LD_OWVAR 2
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PPUSH
29371: CALL_OW 69
29375: ST_TO_ADDR
// if not tmp then
29376: LD_VAR 0 2
29380: NOT
29381: IFFALSE 29385
// exit ;
29383: GO 29528
// for i := 1 to 2 do
29385: LD_ADDR_VAR 0 1
29389: PUSH
29390: DOUBLE
29391: LD_INT 1
29393: DEC
29394: ST_TO_ADDR
29395: LD_INT 2
29397: PUSH
29398: FOR_TO
29399: IFFALSE 29526
// begin uc_side := your_side ;
29401: LD_ADDR_OWVAR 20
29405: PUSH
29406: LD_OWVAR 2
29410: ST_TO_ADDR
// uc_nation := nation_american ;
29411: LD_ADDR_OWVAR 21
29415: PUSH
29416: LD_INT 1
29418: ST_TO_ADDR
// vc_chassis := us_morphling ;
29419: LD_ADDR_OWVAR 37
29423: PUSH
29424: LD_INT 5
29426: ST_TO_ADDR
// vc_engine := engine_siberite ;
29427: LD_ADDR_OWVAR 39
29431: PUSH
29432: LD_INT 3
29434: ST_TO_ADDR
// vc_control := control_computer ;
29435: LD_ADDR_OWVAR 38
29439: PUSH
29440: LD_INT 3
29442: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29443: LD_ADDR_OWVAR 40
29447: PUSH
29448: LD_INT 10
29450: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29451: LD_VAR 0 2
29455: PUSH
29456: LD_INT 1
29458: ARRAY
29459: PPUSH
29460: CALL_OW 310
29464: NOT
29465: IFFALSE 29512
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29467: CALL_OW 45
29471: PPUSH
29472: LD_VAR 0 2
29476: PUSH
29477: LD_INT 1
29479: ARRAY
29480: PPUSH
29481: CALL_OW 250
29485: PPUSH
29486: LD_VAR 0 2
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PPUSH
29495: CALL_OW 251
29499: PPUSH
29500: LD_INT 12
29502: PPUSH
29503: LD_INT 1
29505: PPUSH
29506: CALL_OW 50
29510: GO 29524
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29512: CALL_OW 45
29516: PPUSH
29517: LD_INT 1
29519: PPUSH
29520: CALL_OW 51
// end ;
29524: GO 29398
29526: POP
29527: POP
// end ;
29528: PPOPN 2
29530: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29531: LD_EXP 71
29535: PUSH
29536: LD_EXP 117
29540: AND
29541: IFFALSE 29763
29543: GO 29545
29545: DISABLE
29546: LD_INT 0
29548: PPUSH
29549: PPUSH
29550: PPUSH
29551: PPUSH
29552: PPUSH
29553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29554: LD_ADDR_VAR 0 6
29558: PUSH
29559: LD_INT 22
29561: PUSH
29562: LD_OWVAR 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 21
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 23
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: ST_TO_ADDR
// if not tmp then
29608: LD_VAR 0 6
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29763
// s1 := rand ( 1 , 4 ) ;
29617: LD_ADDR_VAR 0 2
29621: PUSH
29622: LD_INT 1
29624: PPUSH
29625: LD_INT 4
29627: PPUSH
29628: CALL_OW 12
29632: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29633: LD_ADDR_VAR 0 4
29637: PUSH
29638: LD_VAR 0 6
29642: PUSH
29643: LD_INT 1
29645: ARRAY
29646: PPUSH
29647: LD_VAR 0 2
29651: PPUSH
29652: CALL_OW 259
29656: ST_TO_ADDR
// if s1 = 1 then
29657: LD_VAR 0 2
29661: PUSH
29662: LD_INT 1
29664: EQUAL
29665: IFFALSE 29685
// s2 := rand ( 2 , 4 ) else
29667: LD_ADDR_VAR 0 3
29671: PUSH
29672: LD_INT 2
29674: PPUSH
29675: LD_INT 4
29677: PPUSH
29678: CALL_OW 12
29682: ST_TO_ADDR
29683: GO 29693
// s2 := 1 ;
29685: LD_ADDR_VAR 0 3
29689: PUSH
29690: LD_INT 1
29692: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29693: LD_ADDR_VAR 0 5
29697: PUSH
29698: LD_VAR 0 6
29702: PUSH
29703: LD_INT 1
29705: ARRAY
29706: PPUSH
29707: LD_VAR 0 3
29711: PPUSH
29712: CALL_OW 259
29716: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29717: LD_VAR 0 6
29721: PUSH
29722: LD_INT 1
29724: ARRAY
29725: PPUSH
29726: LD_VAR 0 2
29730: PPUSH
29731: LD_VAR 0 5
29735: PPUSH
29736: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29740: LD_VAR 0 6
29744: PUSH
29745: LD_INT 1
29747: ARRAY
29748: PPUSH
29749: LD_VAR 0 3
29753: PPUSH
29754: LD_VAR 0 4
29758: PPUSH
29759: CALL_OW 237
// end ;
29763: PPOPN 6
29765: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29766: LD_EXP 71
29770: PUSH
29771: LD_EXP 118
29775: AND
29776: IFFALSE 29855
29778: GO 29780
29780: DISABLE
29781: LD_INT 0
29783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29784: LD_ADDR_VAR 0 1
29788: PUSH
29789: LD_INT 22
29791: PUSH
29792: LD_OWVAR 2
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 30
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 69
29819: ST_TO_ADDR
// if not tmp then
29820: LD_VAR 0 1
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 29855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29829: LD_VAR 0 1
29833: PUSH
29834: LD_INT 1
29836: PPUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 12
29846: ARRAY
29847: PPUSH
29848: LD_INT 1
29850: PPUSH
29851: CALL_OW 234
// end ;
29855: PPOPN 1
29857: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29858: LD_EXP 71
29862: PUSH
29863: LD_EXP 119
29867: AND
29868: IFFALSE 29980
29870: GO 29872
29872: DISABLE
29873: LD_INT 0
29875: PPUSH
29876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29877: LD_ADDR_VAR 0 2
29881: PUSH
29882: LD_INT 22
29884: PUSH
29885: LD_OWVAR 2
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: LD_INT 30
29899: PUSH
29900: LD_INT 27
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 30
29909: PUSH
29910: LD_INT 26
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 30
29919: PUSH
29920: LD_INT 28
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PPUSH
29937: CALL_OW 69
29941: ST_TO_ADDR
// if not tmp then
29942: LD_VAR 0 2
29946: NOT
29947: IFFALSE 29951
// exit ;
29949: GO 29980
// for i in tmp do
29951: LD_ADDR_VAR 0 1
29955: PUSH
29956: LD_VAR 0 2
29960: PUSH
29961: FOR_IN
29962: IFFALSE 29978
// SetLives ( i , 1 ) ;
29964: LD_VAR 0 1
29968: PPUSH
29969: LD_INT 1
29971: PPUSH
29972: CALL_OW 234
29976: GO 29961
29978: POP
29979: POP
// end ;
29980: PPOPN 2
29982: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29983: LD_EXP 71
29987: PUSH
29988: LD_EXP 120
29992: AND
29993: IFFALSE 30267
29995: GO 29997
29997: DISABLE
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
30002: PPUSH
// begin i := rand ( 1 , 7 ) ;
30003: LD_ADDR_VAR 0 1
30007: PUSH
30008: LD_INT 1
30010: PPUSH
30011: LD_INT 7
30013: PPUSH
30014: CALL_OW 12
30018: ST_TO_ADDR
// case i of 1 :
30019: LD_VAR 0 1
30023: PUSH
30024: LD_INT 1
30026: DOUBLE
30027: EQUAL
30028: IFTRUE 30032
30030: GO 30042
30032: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30033: LD_STRING earthquake(getX(game), 0, 32)
30035: PPUSH
30036: CALL_OW 559
30040: GO 30267
30042: LD_INT 2
30044: DOUBLE
30045: EQUAL
30046: IFTRUE 30050
30048: GO 30064
30050: POP
// begin ToLua ( displayStucuk(); ) ;
30051: LD_STRING displayStucuk();
30053: PPUSH
30054: CALL_OW 559
// ResetFog ;
30058: CALL_OW 335
// end ; 3 :
30062: GO 30267
30064: LD_INT 3
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30176
30072: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30073: LD_ADDR_VAR 0 2
30077: PUSH
30078: LD_INT 22
30080: PUSH
30081: LD_OWVAR 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 25
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PPUSH
30104: CALL_OW 69
30108: ST_TO_ADDR
// if not tmp then
30109: LD_VAR 0 2
30113: NOT
30114: IFFALSE 30118
// exit ;
30116: GO 30267
// un := tmp [ rand ( 1 , tmp ) ] ;
30118: LD_ADDR_VAR 0 3
30122: PUSH
30123: LD_VAR 0 2
30127: PUSH
30128: LD_INT 1
30130: PPUSH
30131: LD_VAR 0 2
30135: PPUSH
30136: CALL_OW 12
30140: ARRAY
30141: ST_TO_ADDR
// if Crawls ( un ) then
30142: LD_VAR 0 3
30146: PPUSH
30147: CALL_OW 318
30151: IFFALSE 30162
// ComWalk ( un ) ;
30153: LD_VAR 0 3
30157: PPUSH
30158: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30162: LD_VAR 0 3
30166: PPUSH
30167: LD_INT 8
30169: PPUSH
30170: CALL_OW 336
// end ; 4 :
30174: GO 30267
30176: LD_INT 4
30178: DOUBLE
30179: EQUAL
30180: IFTRUE 30184
30182: GO 30245
30184: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30185: LD_ADDR_VAR 0 2
30189: PUSH
30190: LD_INT 22
30192: PUSH
30193: LD_OWVAR 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 30
30204: PUSH
30205: LD_INT 29
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PPUSH
30216: CALL_OW 69
30220: ST_TO_ADDR
// if not tmp then
30221: LD_VAR 0 2
30225: NOT
30226: IFFALSE 30230
// exit ;
30228: GO 30267
// DestroyUnit ( tmp [ 1 ] ) ;
30230: LD_VAR 0 2
30234: PUSH
30235: LD_INT 1
30237: ARRAY
30238: PPUSH
30239: CALL_OW 65
// end ; 5 .. 7 :
30243: GO 30267
30245: LD_INT 5
30247: DOUBLE
30248: GREATEREQUAL
30249: IFFALSE 30257
30251: LD_INT 7
30253: DOUBLE
30254: LESSEQUAL
30255: IFTRUE 30259
30257: GO 30266
30259: POP
// StreamSibBomb ; end ;
30260: CALL 26517 0 0
30264: GO 30267
30266: POP
// end ;
30267: PPOPN 3
30269: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30270: LD_EXP 71
30274: PUSH
30275: LD_EXP 121
30279: AND
30280: IFFALSE 30436
30282: GO 30284
30284: DISABLE
30285: LD_INT 0
30287: PPUSH
30288: PPUSH
30289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30290: LD_ADDR_VAR 0 2
30294: PUSH
30295: LD_INT 81
30297: PUSH
30298: LD_OWVAR 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: LD_INT 21
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 21
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PPUSH
30339: CALL_OW 69
30343: ST_TO_ADDR
// if not tmp then
30344: LD_VAR 0 2
30348: NOT
30349: IFFALSE 30353
// exit ;
30351: GO 30436
// p := 0 ;
30353: LD_ADDR_VAR 0 3
30357: PUSH
30358: LD_INT 0
30360: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30361: LD_INT 35
30363: PPUSH
30364: CALL_OW 67
// p := p + 1 ;
30368: LD_ADDR_VAR 0 3
30372: PUSH
30373: LD_VAR 0 3
30377: PUSH
30378: LD_INT 1
30380: PLUS
30381: ST_TO_ADDR
// for i in tmp do
30382: LD_ADDR_VAR 0 1
30386: PUSH
30387: LD_VAR 0 2
30391: PUSH
30392: FOR_IN
30393: IFFALSE 30424
// if GetLives ( i ) < 1000 then
30395: LD_VAR 0 1
30399: PPUSH
30400: CALL_OW 256
30404: PUSH
30405: LD_INT 1000
30407: LESS
30408: IFFALSE 30422
// SetLives ( i , 1000 ) ;
30410: LD_VAR 0 1
30414: PPUSH
30415: LD_INT 1000
30417: PPUSH
30418: CALL_OW 234
30422: GO 30392
30424: POP
30425: POP
// until p > 20 ;
30426: LD_VAR 0 3
30430: PUSH
30431: LD_INT 20
30433: GREATER
30434: IFFALSE 30361
// end ;
30436: PPOPN 3
30438: END
// every 0 0$1 trigger StreamModeActive and sTime do
30439: LD_EXP 71
30443: PUSH
30444: LD_EXP 122
30448: AND
30449: IFFALSE 30484
30451: GO 30453
30453: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30454: LD_INT 28
30456: PPUSH
30457: LD_OWVAR 2
30461: PPUSH
30462: LD_INT 2
30464: PPUSH
30465: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30469: LD_INT 30
30471: PPUSH
30472: LD_OWVAR 2
30476: PPUSH
30477: LD_INT 2
30479: PPUSH
30480: CALL_OW 322
// end ;
30484: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30485: LD_EXP 71
30489: PUSH
30490: LD_EXP 123
30494: AND
30495: IFFALSE 30616
30497: GO 30499
30499: DISABLE
30500: LD_INT 0
30502: PPUSH
30503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30504: LD_ADDR_VAR 0 2
30508: PUSH
30509: LD_INT 22
30511: PUSH
30512: LD_OWVAR 2
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 21
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: LD_INT 23
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: PPUSH
30553: CALL_OW 69
30557: ST_TO_ADDR
// if not tmp then
30558: LD_VAR 0 2
30562: NOT
30563: IFFALSE 30567
// exit ;
30565: GO 30616
// for i in tmp do
30567: LD_ADDR_VAR 0 1
30571: PUSH
30572: LD_VAR 0 2
30576: PUSH
30577: FOR_IN
30578: IFFALSE 30614
// begin if Crawls ( i ) then
30580: LD_VAR 0 1
30584: PPUSH
30585: CALL_OW 318
30589: IFFALSE 30600
// ComWalk ( i ) ;
30591: LD_VAR 0 1
30595: PPUSH
30596: CALL_OW 138
// SetClass ( i , 2 ) ;
30600: LD_VAR 0 1
30604: PPUSH
30605: LD_INT 2
30607: PPUSH
30608: CALL_OW 336
// end ;
30612: GO 30577
30614: POP
30615: POP
// end ;
30616: PPOPN 2
30618: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30619: LD_EXP 71
30623: PUSH
30624: LD_EXP 124
30628: AND
30629: IFFALSE 30910
30631: GO 30633
30633: DISABLE
30634: LD_INT 0
30636: PPUSH
30637: PPUSH
30638: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30639: LD_OWVAR 2
30643: PPUSH
30644: LD_INT 9
30646: PPUSH
30647: LD_INT 1
30649: PPUSH
30650: LD_INT 1
30652: PPUSH
30653: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30657: LD_INT 9
30659: PPUSH
30660: LD_OWVAR 2
30664: PPUSH
30665: CALL_OW 343
// uc_side := 9 ;
30669: LD_ADDR_OWVAR 20
30673: PUSH
30674: LD_INT 9
30676: ST_TO_ADDR
// uc_nation := 2 ;
30677: LD_ADDR_OWVAR 21
30681: PUSH
30682: LD_INT 2
30684: ST_TO_ADDR
// hc_name := Dark Warrior ;
30685: LD_ADDR_OWVAR 26
30689: PUSH
30690: LD_STRING Dark Warrior
30692: ST_TO_ADDR
// hc_gallery :=  ;
30693: LD_ADDR_OWVAR 33
30697: PUSH
30698: LD_STRING 
30700: ST_TO_ADDR
// hc_noskilllimit := true ;
30701: LD_ADDR_OWVAR 76
30705: PUSH
30706: LD_INT 1
30708: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30709: LD_ADDR_OWVAR 31
30713: PUSH
30714: LD_INT 30
30716: PUSH
30717: LD_INT 30
30719: PUSH
30720: LD_INT 30
30722: PUSH
30723: LD_INT 30
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: ST_TO_ADDR
// un := CreateHuman ;
30732: LD_ADDR_VAR 0 3
30736: PUSH
30737: CALL_OW 44
30741: ST_TO_ADDR
// hc_noskilllimit := false ;
30742: LD_ADDR_OWVAR 76
30746: PUSH
30747: LD_INT 0
30749: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30750: LD_VAR 0 3
30754: PPUSH
30755: LD_INT 1
30757: PPUSH
30758: CALL_OW 51
// p := 0 ;
30762: LD_ADDR_VAR 0 2
30766: PUSH
30767: LD_INT 0
30769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30770: LD_INT 35
30772: PPUSH
30773: CALL_OW 67
// p := p + 1 ;
30777: LD_ADDR_VAR 0 2
30781: PUSH
30782: LD_VAR 0 2
30786: PUSH
30787: LD_INT 1
30789: PLUS
30790: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30791: LD_VAR 0 3
30795: PPUSH
30796: CALL_OW 256
30800: PUSH
30801: LD_INT 1000
30803: LESS
30804: IFFALSE 30818
// SetLives ( un , 1000 ) ;
30806: LD_VAR 0 3
30810: PPUSH
30811: LD_INT 1000
30813: PPUSH
30814: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30818: LD_VAR 0 3
30822: PPUSH
30823: LD_INT 81
30825: PUSH
30826: LD_OWVAR 2
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 91
30837: PUSH
30838: LD_VAR 0 3
30842: PUSH
30843: LD_INT 30
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PPUSH
30855: CALL_OW 69
30859: PPUSH
30860: LD_VAR 0 3
30864: PPUSH
30865: CALL_OW 74
30869: PPUSH
30870: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30874: LD_VAR 0 2
30878: PUSH
30879: LD_INT 60
30881: GREATER
30882: PUSH
30883: LD_VAR 0 3
30887: PPUSH
30888: CALL_OW 301
30892: OR
30893: IFFALSE 30770
// if un then
30895: LD_VAR 0 3
30899: IFFALSE 30910
// RemoveUnit ( un ) ;
30901: LD_VAR 0 3
30905: PPUSH
30906: CALL_OW 64
// end ;
30910: PPOPN 3
30912: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30913: LD_INT 0
30915: PPUSH
// case cmd of 301 :
30916: LD_VAR 0 1
30920: PUSH
30921: LD_INT 301
30923: DOUBLE
30924: EQUAL
30925: IFTRUE 30929
30927: GO 30961
30929: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30930: LD_VAR 0 6
30934: PPUSH
30935: LD_VAR 0 7
30939: PPUSH
30940: LD_VAR 0 8
30944: PPUSH
30945: LD_VAR 0 4
30949: PPUSH
30950: LD_VAR 0 5
30954: PPUSH
30955: CALL 32162 0 5
30959: GO 31082
30961: LD_INT 302
30963: DOUBLE
30964: EQUAL
30965: IFTRUE 30969
30967: GO 31006
30969: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30970: LD_VAR 0 6
30974: PPUSH
30975: LD_VAR 0 7
30979: PPUSH
30980: LD_VAR 0 8
30984: PPUSH
30985: LD_VAR 0 9
30989: PPUSH
30990: LD_VAR 0 4
30994: PPUSH
30995: LD_VAR 0 5
30999: PPUSH
31000: CALL 32253 0 6
31004: GO 31082
31006: LD_INT 303
31008: DOUBLE
31009: EQUAL
31010: IFTRUE 31014
31012: GO 31051
31014: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31015: LD_VAR 0 6
31019: PPUSH
31020: LD_VAR 0 7
31024: PPUSH
31025: LD_VAR 0 8
31029: PPUSH
31030: LD_VAR 0 9
31034: PPUSH
31035: LD_VAR 0 4
31039: PPUSH
31040: LD_VAR 0 5
31044: PPUSH
31045: CALL 31087 0 6
31049: GO 31082
31051: LD_INT 304
31053: DOUBLE
31054: EQUAL
31055: IFTRUE 31059
31057: GO 31081
31059: POP
// hHackTeleport ( unit , x , y ) ; end ;
31060: LD_VAR 0 2
31064: PPUSH
31065: LD_VAR 0 4
31069: PPUSH
31070: LD_VAR 0 5
31074: PPUSH
31075: CALL 32846 0 3
31079: GO 31082
31081: POP
// end ;
31082: LD_VAR 0 12
31086: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31087: LD_INT 0
31089: PPUSH
31090: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31091: LD_VAR 0 1
31095: PUSH
31096: LD_INT 1
31098: LESS
31099: PUSH
31100: LD_VAR 0 1
31104: PUSH
31105: LD_INT 3
31107: GREATER
31108: OR
31109: PUSH
31110: LD_VAR 0 5
31114: PPUSH
31115: LD_VAR 0 6
31119: PPUSH
31120: CALL_OW 428
31124: OR
31125: IFFALSE 31129
// exit ;
31127: GO 31849
// uc_side := your_side ;
31129: LD_ADDR_OWVAR 20
31133: PUSH
31134: LD_OWVAR 2
31138: ST_TO_ADDR
// uc_nation := nation ;
31139: LD_ADDR_OWVAR 21
31143: PUSH
31144: LD_VAR 0 1
31148: ST_TO_ADDR
// bc_level = 1 ;
31149: LD_ADDR_OWVAR 43
31153: PUSH
31154: LD_INT 1
31156: ST_TO_ADDR
// case btype of 1 :
31157: LD_VAR 0 2
31161: PUSH
31162: LD_INT 1
31164: DOUBLE
31165: EQUAL
31166: IFTRUE 31170
31168: GO 31181
31170: POP
// bc_type := b_depot ; 2 :
31171: LD_ADDR_OWVAR 42
31175: PUSH
31176: LD_INT 0
31178: ST_TO_ADDR
31179: GO 31793
31181: LD_INT 2
31183: DOUBLE
31184: EQUAL
31185: IFTRUE 31189
31187: GO 31200
31189: POP
// bc_type := b_warehouse ; 3 :
31190: LD_ADDR_OWVAR 42
31194: PUSH
31195: LD_INT 1
31197: ST_TO_ADDR
31198: GO 31793
31200: LD_INT 3
31202: DOUBLE
31203: EQUAL
31204: IFTRUE 31208
31206: GO 31219
31208: POP
// bc_type := b_lab ; 4 .. 9 :
31209: LD_ADDR_OWVAR 42
31213: PUSH
31214: LD_INT 6
31216: ST_TO_ADDR
31217: GO 31793
31219: LD_INT 4
31221: DOUBLE
31222: GREATEREQUAL
31223: IFFALSE 31231
31225: LD_INT 9
31227: DOUBLE
31228: LESSEQUAL
31229: IFTRUE 31233
31231: GO 31285
31233: POP
// begin bc_type := b_lab_half ;
31234: LD_ADDR_OWVAR 42
31238: PUSH
31239: LD_INT 7
31241: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31242: LD_ADDR_OWVAR 44
31246: PUSH
31247: LD_INT 10
31249: PUSH
31250: LD_INT 11
31252: PUSH
31253: LD_INT 12
31255: PUSH
31256: LD_INT 15
31258: PUSH
31259: LD_INT 14
31261: PUSH
31262: LD_INT 13
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: PUSH
31273: LD_VAR 0 2
31277: PUSH
31278: LD_INT 3
31280: MINUS
31281: ARRAY
31282: ST_TO_ADDR
// end ; 10 .. 13 :
31283: GO 31793
31285: LD_INT 10
31287: DOUBLE
31288: GREATEREQUAL
31289: IFFALSE 31297
31291: LD_INT 13
31293: DOUBLE
31294: LESSEQUAL
31295: IFTRUE 31299
31297: GO 31376
31299: POP
// begin bc_type := b_lab_full ;
31300: LD_ADDR_OWVAR 42
31304: PUSH
31305: LD_INT 8
31307: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31308: LD_ADDR_OWVAR 44
31312: PUSH
31313: LD_INT 10
31315: PUSH
31316: LD_INT 12
31318: PUSH
31319: LD_INT 14
31321: PUSH
31322: LD_INT 13
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: PUSH
31331: LD_VAR 0 2
31335: PUSH
31336: LD_INT 9
31338: MINUS
31339: ARRAY
31340: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31341: LD_ADDR_OWVAR 45
31345: PUSH
31346: LD_INT 11
31348: PUSH
31349: LD_INT 15
31351: PUSH
31352: LD_INT 12
31354: PUSH
31355: LD_INT 15
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: PUSH
31364: LD_VAR 0 2
31368: PUSH
31369: LD_INT 9
31371: MINUS
31372: ARRAY
31373: ST_TO_ADDR
// end ; 14 :
31374: GO 31793
31376: LD_INT 14
31378: DOUBLE
31379: EQUAL
31380: IFTRUE 31384
31382: GO 31395
31384: POP
// bc_type := b_workshop ; 15 :
31385: LD_ADDR_OWVAR 42
31389: PUSH
31390: LD_INT 2
31392: ST_TO_ADDR
31393: GO 31793
31395: LD_INT 15
31397: DOUBLE
31398: EQUAL
31399: IFTRUE 31403
31401: GO 31414
31403: POP
// bc_type := b_factory ; 16 :
31404: LD_ADDR_OWVAR 42
31408: PUSH
31409: LD_INT 3
31411: ST_TO_ADDR
31412: GO 31793
31414: LD_INT 16
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31433
31422: POP
// bc_type := b_ext_gun ; 17 :
31423: LD_ADDR_OWVAR 42
31427: PUSH
31428: LD_INT 17
31430: ST_TO_ADDR
31431: GO 31793
31433: LD_INT 17
31435: DOUBLE
31436: EQUAL
31437: IFTRUE 31441
31439: GO 31469
31441: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31442: LD_ADDR_OWVAR 42
31446: PUSH
31447: LD_INT 19
31449: PUSH
31450: LD_INT 23
31452: PUSH
31453: LD_INT 19
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: PUSH
31461: LD_VAR 0 1
31465: ARRAY
31466: ST_TO_ADDR
31467: GO 31793
31469: LD_INT 18
31471: DOUBLE
31472: EQUAL
31473: IFTRUE 31477
31475: GO 31488
31477: POP
// bc_type := b_ext_radar ; 19 :
31478: LD_ADDR_OWVAR 42
31482: PUSH
31483: LD_INT 20
31485: ST_TO_ADDR
31486: GO 31793
31488: LD_INT 19
31490: DOUBLE
31491: EQUAL
31492: IFTRUE 31496
31494: GO 31507
31496: POP
// bc_type := b_ext_radio ; 20 :
31497: LD_ADDR_OWVAR 42
31501: PUSH
31502: LD_INT 22
31504: ST_TO_ADDR
31505: GO 31793
31507: LD_INT 20
31509: DOUBLE
31510: EQUAL
31511: IFTRUE 31515
31513: GO 31526
31515: POP
// bc_type := b_ext_siberium ; 21 :
31516: LD_ADDR_OWVAR 42
31520: PUSH
31521: LD_INT 21
31523: ST_TO_ADDR
31524: GO 31793
31526: LD_INT 21
31528: DOUBLE
31529: EQUAL
31530: IFTRUE 31534
31532: GO 31545
31534: POP
// bc_type := b_ext_computer ; 22 :
31535: LD_ADDR_OWVAR 42
31539: PUSH
31540: LD_INT 24
31542: ST_TO_ADDR
31543: GO 31793
31545: LD_INT 22
31547: DOUBLE
31548: EQUAL
31549: IFTRUE 31553
31551: GO 31564
31553: POP
// bc_type := b_ext_track ; 23 :
31554: LD_ADDR_OWVAR 42
31558: PUSH
31559: LD_INT 16
31561: ST_TO_ADDR
31562: GO 31793
31564: LD_INT 23
31566: DOUBLE
31567: EQUAL
31568: IFTRUE 31572
31570: GO 31583
31572: POP
// bc_type := b_ext_laser ; 24 :
31573: LD_ADDR_OWVAR 42
31577: PUSH
31578: LD_INT 25
31580: ST_TO_ADDR
31581: GO 31793
31583: LD_INT 24
31585: DOUBLE
31586: EQUAL
31587: IFTRUE 31591
31589: GO 31602
31591: POP
// bc_type := b_control_tower ; 25 :
31592: LD_ADDR_OWVAR 42
31596: PUSH
31597: LD_INT 36
31599: ST_TO_ADDR
31600: GO 31793
31602: LD_INT 25
31604: DOUBLE
31605: EQUAL
31606: IFTRUE 31610
31608: GO 31621
31610: POP
// bc_type := b_breastwork ; 26 :
31611: LD_ADDR_OWVAR 42
31615: PUSH
31616: LD_INT 31
31618: ST_TO_ADDR
31619: GO 31793
31621: LD_INT 26
31623: DOUBLE
31624: EQUAL
31625: IFTRUE 31629
31627: GO 31640
31629: POP
// bc_type := b_bunker ; 27 :
31630: LD_ADDR_OWVAR 42
31634: PUSH
31635: LD_INT 32
31637: ST_TO_ADDR
31638: GO 31793
31640: LD_INT 27
31642: DOUBLE
31643: EQUAL
31644: IFTRUE 31648
31646: GO 31659
31648: POP
// bc_type := b_turret ; 28 :
31649: LD_ADDR_OWVAR 42
31653: PUSH
31654: LD_INT 33
31656: ST_TO_ADDR
31657: GO 31793
31659: LD_INT 28
31661: DOUBLE
31662: EQUAL
31663: IFTRUE 31667
31665: GO 31678
31667: POP
// bc_type := b_armoury ; 29 :
31668: LD_ADDR_OWVAR 42
31672: PUSH
31673: LD_INT 4
31675: ST_TO_ADDR
31676: GO 31793
31678: LD_INT 29
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31686
31684: GO 31697
31686: POP
// bc_type := b_barracks ; 30 :
31687: LD_ADDR_OWVAR 42
31691: PUSH
31692: LD_INT 5
31694: ST_TO_ADDR
31695: GO 31793
31697: LD_INT 30
31699: DOUBLE
31700: EQUAL
31701: IFTRUE 31705
31703: GO 31716
31705: POP
// bc_type := b_solar_power ; 31 :
31706: LD_ADDR_OWVAR 42
31710: PUSH
31711: LD_INT 27
31713: ST_TO_ADDR
31714: GO 31793
31716: LD_INT 31
31718: DOUBLE
31719: EQUAL
31720: IFTRUE 31724
31722: GO 31735
31724: POP
// bc_type := b_oil_power ; 32 :
31725: LD_ADDR_OWVAR 42
31729: PUSH
31730: LD_INT 26
31732: ST_TO_ADDR
31733: GO 31793
31735: LD_INT 32
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31754
31743: POP
// bc_type := b_siberite_power ; 33 :
31744: LD_ADDR_OWVAR 42
31748: PUSH
31749: LD_INT 28
31751: ST_TO_ADDR
31752: GO 31793
31754: LD_INT 33
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31773
31762: POP
// bc_type := b_oil_mine ; 34 :
31763: LD_ADDR_OWVAR 42
31767: PUSH
31768: LD_INT 29
31770: ST_TO_ADDR
31771: GO 31793
31773: LD_INT 34
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31792
31781: POP
// bc_type := b_siberite_mine ; end ;
31782: LD_ADDR_OWVAR 42
31786: PUSH
31787: LD_INT 30
31789: ST_TO_ADDR
31790: GO 31793
31792: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31793: LD_ADDR_VAR 0 8
31797: PUSH
31798: LD_VAR 0 5
31802: PPUSH
31803: LD_VAR 0 6
31807: PPUSH
31808: LD_VAR 0 3
31812: PPUSH
31813: CALL_OW 47
31817: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31818: LD_OWVAR 42
31822: PUSH
31823: LD_INT 32
31825: PUSH
31826: LD_INT 33
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: IN
31833: IFFALSE 31849
// PlaceWeaponTurret ( b , weapon ) ;
31835: LD_VAR 0 8
31839: PPUSH
31840: LD_VAR 0 4
31844: PPUSH
31845: CALL_OW 431
// end ;
31849: LD_VAR 0 7
31853: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31854: LD_INT 0
31856: PPUSH
31857: PPUSH
31858: PPUSH
31859: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31860: LD_ADDR_VAR 0 4
31864: PUSH
31865: LD_INT 22
31867: PUSH
31868: LD_OWVAR 2
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: LD_INT 30
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 30
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PPUSH
31909: CALL_OW 69
31913: ST_TO_ADDR
// if not tmp then
31914: LD_VAR 0 4
31918: NOT
31919: IFFALSE 31923
// exit ;
31921: GO 31982
// for i in tmp do
31923: LD_ADDR_VAR 0 2
31927: PUSH
31928: LD_VAR 0 4
31932: PUSH
31933: FOR_IN
31934: IFFALSE 31980
// for j = 1 to 3 do
31936: LD_ADDR_VAR 0 3
31940: PUSH
31941: DOUBLE
31942: LD_INT 1
31944: DEC
31945: ST_TO_ADDR
31946: LD_INT 3
31948: PUSH
31949: FOR_TO
31950: IFFALSE 31976
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31952: LD_VAR 0 2
31956: PPUSH
31957: CALL_OW 274
31961: PPUSH
31962: LD_VAR 0 3
31966: PPUSH
31967: LD_INT 99999
31969: PPUSH
31970: CALL_OW 277
31974: GO 31949
31976: POP
31977: POP
31978: GO 31933
31980: POP
31981: POP
// end ;
31982: LD_VAR 0 1
31986: RET
// export function hHackSetLevel10 ; var i , j ; begin
31987: LD_INT 0
31989: PPUSH
31990: PPUSH
31991: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31992: LD_ADDR_VAR 0 2
31996: PUSH
31997: LD_INT 21
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PPUSH
32007: CALL_OW 69
32011: PUSH
32012: FOR_IN
32013: IFFALSE 32065
// if IsSelected ( i ) then
32015: LD_VAR 0 2
32019: PPUSH
32020: CALL_OW 306
32024: IFFALSE 32063
// begin for j := 1 to 4 do
32026: LD_ADDR_VAR 0 3
32030: PUSH
32031: DOUBLE
32032: LD_INT 1
32034: DEC
32035: ST_TO_ADDR
32036: LD_INT 4
32038: PUSH
32039: FOR_TO
32040: IFFALSE 32061
// SetSkill ( i , j , 10 ) ;
32042: LD_VAR 0 2
32046: PPUSH
32047: LD_VAR 0 3
32051: PPUSH
32052: LD_INT 10
32054: PPUSH
32055: CALL_OW 237
32059: GO 32039
32061: POP
32062: POP
// end ;
32063: GO 32012
32065: POP
32066: POP
// end ;
32067: LD_VAR 0 1
32071: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32072: LD_INT 0
32074: PPUSH
32075: PPUSH
32076: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32077: LD_ADDR_VAR 0 2
32081: PUSH
32082: LD_INT 22
32084: PUSH
32085: LD_OWVAR 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 21
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PPUSH
32108: CALL_OW 69
32112: PUSH
32113: FOR_IN
32114: IFFALSE 32155
// begin for j := 1 to 4 do
32116: LD_ADDR_VAR 0 3
32120: PUSH
32121: DOUBLE
32122: LD_INT 1
32124: DEC
32125: ST_TO_ADDR
32126: LD_INT 4
32128: PUSH
32129: FOR_TO
32130: IFFALSE 32151
// SetSkill ( i , j , 10 ) ;
32132: LD_VAR 0 2
32136: PPUSH
32137: LD_VAR 0 3
32141: PPUSH
32142: LD_INT 10
32144: PPUSH
32145: CALL_OW 237
32149: GO 32129
32151: POP
32152: POP
// end ;
32153: GO 32113
32155: POP
32156: POP
// end ;
32157: LD_VAR 0 1
32161: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32162: LD_INT 0
32164: PPUSH
// uc_side := your_side ;
32165: LD_ADDR_OWVAR 20
32169: PUSH
32170: LD_OWVAR 2
32174: ST_TO_ADDR
// uc_nation := nation ;
32175: LD_ADDR_OWVAR 21
32179: PUSH
32180: LD_VAR 0 1
32184: ST_TO_ADDR
// InitHc ;
32185: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32189: LD_INT 0
32191: PPUSH
32192: LD_VAR 0 2
32196: PPUSH
32197: LD_VAR 0 3
32201: PPUSH
32202: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32206: LD_VAR 0 4
32210: PPUSH
32211: LD_VAR 0 5
32215: PPUSH
32216: CALL_OW 428
32220: PUSH
32221: LD_INT 0
32223: EQUAL
32224: IFFALSE 32248
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32226: CALL_OW 44
32230: PPUSH
32231: LD_VAR 0 4
32235: PPUSH
32236: LD_VAR 0 5
32240: PPUSH
32241: LD_INT 1
32243: PPUSH
32244: CALL_OW 48
// end ;
32248: LD_VAR 0 6
32252: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32253: LD_INT 0
32255: PPUSH
32256: PPUSH
// uc_side := your_side ;
32257: LD_ADDR_OWVAR 20
32261: PUSH
32262: LD_OWVAR 2
32266: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32267: LD_VAR 0 1
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 3
32280: PUSH
32281: LD_INT 4
32283: PUSH
32284: LD_INT 5
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: IN
32294: IFFALSE 32306
// uc_nation := nation_american else
32296: LD_ADDR_OWVAR 21
32300: PUSH
32301: LD_INT 1
32303: ST_TO_ADDR
32304: GO 32349
// if chassis in [ 11 , 12 , 13 , 14 ] then
32306: LD_VAR 0 1
32310: PUSH
32311: LD_INT 11
32313: PUSH
32314: LD_INT 12
32316: PUSH
32317: LD_INT 13
32319: PUSH
32320: LD_INT 14
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: IN
32329: IFFALSE 32341
// uc_nation := nation_arabian else
32331: LD_ADDR_OWVAR 21
32335: PUSH
32336: LD_INT 2
32338: ST_TO_ADDR
32339: GO 32349
// uc_nation := nation_russian ;
32341: LD_ADDR_OWVAR 21
32345: PUSH
32346: LD_INT 3
32348: ST_TO_ADDR
// vc_chassis := chassis ;
32349: LD_ADDR_OWVAR 37
32353: PUSH
32354: LD_VAR 0 1
32358: ST_TO_ADDR
// vc_engine := engine ;
32359: LD_ADDR_OWVAR 39
32363: PUSH
32364: LD_VAR 0 2
32368: ST_TO_ADDR
// vc_control := control ;
32369: LD_ADDR_OWVAR 38
32373: PUSH
32374: LD_VAR 0 3
32378: ST_TO_ADDR
// vc_weapon := weapon ;
32379: LD_ADDR_OWVAR 40
32383: PUSH
32384: LD_VAR 0 4
32388: ST_TO_ADDR
// un := CreateVehicle ;
32389: LD_ADDR_VAR 0 8
32393: PUSH
32394: CALL_OW 45
32398: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32399: LD_VAR 0 8
32403: PPUSH
32404: LD_INT 0
32406: PPUSH
32407: LD_INT 5
32409: PPUSH
32410: CALL_OW 12
32414: PPUSH
32415: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32419: LD_VAR 0 8
32423: PPUSH
32424: LD_VAR 0 5
32428: PPUSH
32429: LD_VAR 0 6
32433: PPUSH
32434: LD_INT 1
32436: PPUSH
32437: CALL_OW 48
// end ;
32441: LD_VAR 0 7
32445: RET
// export hInvincible ; every 1 do
32446: GO 32448
32448: DISABLE
// hInvincible := [ ] ;
32449: LD_ADDR_EXP 125
32453: PUSH
32454: EMPTY
32455: ST_TO_ADDR
32456: END
// every 10 do var i ;
32457: GO 32459
32459: DISABLE
32460: LD_INT 0
32462: PPUSH
// begin enable ;
32463: ENABLE
// if not hInvincible then
32464: LD_EXP 125
32468: NOT
32469: IFFALSE 32473
// exit ;
32471: GO 32517
// for i in hInvincible do
32473: LD_ADDR_VAR 0 1
32477: PUSH
32478: LD_EXP 125
32482: PUSH
32483: FOR_IN
32484: IFFALSE 32515
// if GetLives ( i ) < 1000 then
32486: LD_VAR 0 1
32490: PPUSH
32491: CALL_OW 256
32495: PUSH
32496: LD_INT 1000
32498: LESS
32499: IFFALSE 32513
// SetLives ( i , 1000 ) ;
32501: LD_VAR 0 1
32505: PPUSH
32506: LD_INT 1000
32508: PPUSH
32509: CALL_OW 234
32513: GO 32483
32515: POP
32516: POP
// end ;
32517: PPOPN 1
32519: END
// export function hHackInvincible ; var i ; begin
32520: LD_INT 0
32522: PPUSH
32523: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32524: LD_ADDR_VAR 0 2
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 21
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 21
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: PPUSH
32557: CALL_OW 69
32561: PUSH
32562: FOR_IN
32563: IFFALSE 32624
// if IsSelected ( i ) then
32565: LD_VAR 0 2
32569: PPUSH
32570: CALL_OW 306
32574: IFFALSE 32622
// begin if i in hInvincible then
32576: LD_VAR 0 2
32580: PUSH
32581: LD_EXP 125
32585: IN
32586: IFFALSE 32606
// hInvincible := hInvincible diff i else
32588: LD_ADDR_EXP 125
32592: PUSH
32593: LD_EXP 125
32597: PUSH
32598: LD_VAR 0 2
32602: DIFF
32603: ST_TO_ADDR
32604: GO 32622
// hInvincible := hInvincible union i ;
32606: LD_ADDR_EXP 125
32610: PUSH
32611: LD_EXP 125
32615: PUSH
32616: LD_VAR 0 2
32620: UNION
32621: ST_TO_ADDR
// end ;
32622: GO 32562
32624: POP
32625: POP
// end ;
32626: LD_VAR 0 1
32630: RET
// export function hHackInvisible ; var i , j ; begin
32631: LD_INT 0
32633: PPUSH
32634: PPUSH
32635: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32636: LD_ADDR_VAR 0 2
32640: PUSH
32641: LD_INT 21
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PPUSH
32651: CALL_OW 69
32655: PUSH
32656: FOR_IN
32657: IFFALSE 32681
// if IsSelected ( i ) then
32659: LD_VAR 0 2
32663: PPUSH
32664: CALL_OW 306
32668: IFFALSE 32679
// ComForceInvisible ( i ) ;
32670: LD_VAR 0 2
32674: PPUSH
32675: CALL_OW 496
32679: GO 32656
32681: POP
32682: POP
// end ;
32683: LD_VAR 0 1
32687: RET
// export function hHackChangeYourSide ; begin
32688: LD_INT 0
32690: PPUSH
// if your_side = 8 then
32691: LD_OWVAR 2
32695: PUSH
32696: LD_INT 8
32698: EQUAL
32699: IFFALSE 32711
// your_side := 0 else
32701: LD_ADDR_OWVAR 2
32705: PUSH
32706: LD_INT 0
32708: ST_TO_ADDR
32709: GO 32725
// your_side := your_side + 1 ;
32711: LD_ADDR_OWVAR 2
32715: PUSH
32716: LD_OWVAR 2
32720: PUSH
32721: LD_INT 1
32723: PLUS
32724: ST_TO_ADDR
// end ;
32725: LD_VAR 0 1
32729: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32730: LD_INT 0
32732: PPUSH
32733: PPUSH
32734: PPUSH
// for i in all_units do
32735: LD_ADDR_VAR 0 2
32739: PUSH
32740: LD_OWVAR 3
32744: PUSH
32745: FOR_IN
32746: IFFALSE 32824
// if IsSelected ( i ) then
32748: LD_VAR 0 2
32752: PPUSH
32753: CALL_OW 306
32757: IFFALSE 32822
// begin j := GetSide ( i ) ;
32759: LD_ADDR_VAR 0 3
32763: PUSH
32764: LD_VAR 0 2
32768: PPUSH
32769: CALL_OW 255
32773: ST_TO_ADDR
// if j = 8 then
32774: LD_VAR 0 3
32778: PUSH
32779: LD_INT 8
32781: EQUAL
32782: IFFALSE 32794
// j := 0 else
32784: LD_ADDR_VAR 0 3
32788: PUSH
32789: LD_INT 0
32791: ST_TO_ADDR
32792: GO 32808
// j := j + 1 ;
32794: LD_ADDR_VAR 0 3
32798: PUSH
32799: LD_VAR 0 3
32803: PUSH
32804: LD_INT 1
32806: PLUS
32807: ST_TO_ADDR
// SetSide ( i , j ) ;
32808: LD_VAR 0 2
32812: PPUSH
32813: LD_VAR 0 3
32817: PPUSH
32818: CALL_OW 235
// end ;
32822: GO 32745
32824: POP
32825: POP
// end ;
32826: LD_VAR 0 1
32830: RET
// export function hHackFog ; begin
32831: LD_INT 0
32833: PPUSH
// FogOff ( true ) ;
32834: LD_INT 1
32836: PPUSH
32837: CALL_OW 344
// end ;
32841: LD_VAR 0 1
32845: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32846: LD_INT 0
32848: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32849: LD_VAR 0 1
32853: PPUSH
32854: LD_VAR 0 2
32858: PPUSH
32859: LD_VAR 0 3
32863: PPUSH
32864: LD_INT 1
32866: PPUSH
32867: LD_INT 1
32869: PPUSH
32870: CALL_OW 483
// CenterOnXY ( x , y ) ;
32874: LD_VAR 0 2
32878: PPUSH
32879: LD_VAR 0 3
32883: PPUSH
32884: CALL_OW 84
// end ; end_of_file
32888: LD_VAR 0 4
32892: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32893: LD_INT 0
32895: PPUSH
32896: PPUSH
32897: PPUSH
32898: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32899: LD_VAR 0 1
32903: PPUSH
32904: CALL_OW 264
32908: PUSH
32909: LD_EXP 56
32913: EQUAL
32914: IFFALSE 32986
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32916: LD_INT 68
32918: PPUSH
32919: LD_VAR 0 1
32923: PPUSH
32924: CALL_OW 255
32928: PPUSH
32929: CALL_OW 321
32933: PUSH
32934: LD_INT 2
32936: EQUAL
32937: IFFALSE 32949
// eff := 70 else
32939: LD_ADDR_VAR 0 4
32943: PUSH
32944: LD_INT 70
32946: ST_TO_ADDR
32947: GO 32957
// eff := 30 ;
32949: LD_ADDR_VAR 0 4
32953: PUSH
32954: LD_INT 30
32956: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32957: LD_VAR 0 1
32961: PPUSH
32962: CALL_OW 250
32966: PPUSH
32967: LD_VAR 0 1
32971: PPUSH
32972: CALL_OW 251
32976: PPUSH
32977: LD_VAR 0 4
32981: PPUSH
32982: CALL_OW 495
// end ; end ;
32986: LD_VAR 0 2
32990: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32991: LD_INT 0
32993: PPUSH
// end ;
32994: LD_VAR 0 4
32998: RET
// export function SOS_Command ( cmd ) ; begin
32999: LD_INT 0
33001: PPUSH
// end ;
33002: LD_VAR 0 2
33006: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33007: LD_INT 0
33009: PPUSH
// if cmd = 121 then
33010: LD_VAR 0 1
33014: PUSH
33015: LD_INT 121
33017: EQUAL
33018: IFFALSE 33020
// end ;
33020: LD_VAR 0 6
33024: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33025: LD_INT 0
33027: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33028: LD_VAR 0 1
33032: PUSH
33033: LD_INT 250
33035: EQUAL
33036: PUSH
33037: LD_VAR 0 2
33041: PPUSH
33042: CALL_OW 264
33046: PUSH
33047: LD_EXP 59
33051: EQUAL
33052: AND
33053: IFFALSE 33074
// MinerPlaceMine ( unit , x , y ) ;
33055: LD_VAR 0 2
33059: PPUSH
33060: LD_VAR 0 4
33064: PPUSH
33065: LD_VAR 0 5
33069: PPUSH
33070: CALL 35423 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33074: LD_VAR 0 1
33078: PUSH
33079: LD_INT 251
33081: EQUAL
33082: PUSH
33083: LD_VAR 0 2
33087: PPUSH
33088: CALL_OW 264
33092: PUSH
33093: LD_EXP 59
33097: EQUAL
33098: AND
33099: IFFALSE 33120
// MinerDetonateMine ( unit , x , y ) ;
33101: LD_VAR 0 2
33105: PPUSH
33106: LD_VAR 0 4
33110: PPUSH
33111: LD_VAR 0 5
33115: PPUSH
33116: CALL 35700 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33120: LD_VAR 0 1
33124: PUSH
33125: LD_INT 252
33127: EQUAL
33128: PUSH
33129: LD_VAR 0 2
33133: PPUSH
33134: CALL_OW 264
33138: PUSH
33139: LD_EXP 59
33143: EQUAL
33144: AND
33145: IFFALSE 33166
// MinerCreateMinefield ( unit , x , y ) ;
33147: LD_VAR 0 2
33151: PPUSH
33152: LD_VAR 0 4
33156: PPUSH
33157: LD_VAR 0 5
33161: PPUSH
33162: CALL 36117 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33166: LD_VAR 0 1
33170: PUSH
33171: LD_INT 253
33173: EQUAL
33174: PUSH
33175: LD_VAR 0 2
33179: PPUSH
33180: CALL_OW 257
33184: PUSH
33185: LD_INT 5
33187: EQUAL
33188: AND
33189: IFFALSE 33210
// ComBinocular ( unit , x , y ) ;
33191: LD_VAR 0 2
33195: PPUSH
33196: LD_VAR 0 4
33200: PPUSH
33201: LD_VAR 0 5
33205: PPUSH
33206: CALL 36488 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33210: LD_VAR 0 1
33214: PUSH
33215: LD_INT 254
33217: EQUAL
33218: PUSH
33219: LD_VAR 0 2
33223: PPUSH
33224: CALL_OW 264
33228: PUSH
33229: LD_EXP 54
33233: EQUAL
33234: AND
33235: PUSH
33236: LD_VAR 0 3
33240: PPUSH
33241: CALL_OW 263
33245: PUSH
33246: LD_INT 3
33248: EQUAL
33249: AND
33250: IFFALSE 33266
// HackDestroyVehicle ( unit , selectedUnit ) ;
33252: LD_VAR 0 2
33256: PPUSH
33257: LD_VAR 0 3
33261: PPUSH
33262: CALL 34783 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33266: LD_VAR 0 1
33270: PUSH
33271: LD_INT 255
33273: EQUAL
33274: PUSH
33275: LD_VAR 0 2
33279: PPUSH
33280: CALL_OW 264
33284: PUSH
33285: LD_INT 14
33287: PUSH
33288: LD_INT 53
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: IN
33295: AND
33296: PUSH
33297: LD_VAR 0 4
33301: PPUSH
33302: LD_VAR 0 5
33306: PPUSH
33307: CALL_OW 488
33311: AND
33312: IFFALSE 33336
// CutTreeXYR ( unit , x , y , 12 ) ;
33314: LD_VAR 0 2
33318: PPUSH
33319: LD_VAR 0 4
33323: PPUSH
33324: LD_VAR 0 5
33328: PPUSH
33329: LD_INT 12
33331: PPUSH
33332: CALL 33349 0 4
// end ;
33336: LD_VAR 0 6
33340: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33341: LD_INT 0
33343: PPUSH
// end ;
33344: LD_VAR 0 4
33348: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33349: LD_INT 0
33351: PPUSH
33352: PPUSH
33353: PPUSH
33354: PPUSH
33355: PPUSH
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33360: LD_VAR 0 1
33364: NOT
33365: PUSH
33366: LD_VAR 0 2
33370: PPUSH
33371: LD_VAR 0 3
33375: PPUSH
33376: CALL_OW 488
33380: NOT
33381: OR
33382: PUSH
33383: LD_VAR 0 4
33387: NOT
33388: OR
33389: IFFALSE 33393
// exit ;
33391: GO 33733
// list := [ ] ;
33393: LD_ADDR_VAR 0 13
33397: PUSH
33398: EMPTY
33399: ST_TO_ADDR
// if x - r < 0 then
33400: LD_VAR 0 2
33404: PUSH
33405: LD_VAR 0 4
33409: MINUS
33410: PUSH
33411: LD_INT 0
33413: LESS
33414: IFFALSE 33426
// min_x := 0 else
33416: LD_ADDR_VAR 0 7
33420: PUSH
33421: LD_INT 0
33423: ST_TO_ADDR
33424: GO 33442
// min_x := x - r ;
33426: LD_ADDR_VAR 0 7
33430: PUSH
33431: LD_VAR 0 2
33435: PUSH
33436: LD_VAR 0 4
33440: MINUS
33441: ST_TO_ADDR
// if y - r < 0 then
33442: LD_VAR 0 3
33446: PUSH
33447: LD_VAR 0 4
33451: MINUS
33452: PUSH
33453: LD_INT 0
33455: LESS
33456: IFFALSE 33468
// min_y := 0 else
33458: LD_ADDR_VAR 0 8
33462: PUSH
33463: LD_INT 0
33465: ST_TO_ADDR
33466: GO 33484
// min_y := y - r ;
33468: LD_ADDR_VAR 0 8
33472: PUSH
33473: LD_VAR 0 3
33477: PUSH
33478: LD_VAR 0 4
33482: MINUS
33483: ST_TO_ADDR
// max_x := x + r ;
33484: LD_ADDR_VAR 0 9
33488: PUSH
33489: LD_VAR 0 2
33493: PUSH
33494: LD_VAR 0 4
33498: PLUS
33499: ST_TO_ADDR
// max_y := y + r ;
33500: LD_ADDR_VAR 0 10
33504: PUSH
33505: LD_VAR 0 3
33509: PUSH
33510: LD_VAR 0 4
33514: PLUS
33515: ST_TO_ADDR
// for _x = min_x to max_x do
33516: LD_ADDR_VAR 0 11
33520: PUSH
33521: DOUBLE
33522: LD_VAR 0 7
33526: DEC
33527: ST_TO_ADDR
33528: LD_VAR 0 9
33532: PUSH
33533: FOR_TO
33534: IFFALSE 33651
// for _y = min_y to max_y do
33536: LD_ADDR_VAR 0 12
33540: PUSH
33541: DOUBLE
33542: LD_VAR 0 8
33546: DEC
33547: ST_TO_ADDR
33548: LD_VAR 0 10
33552: PUSH
33553: FOR_TO
33554: IFFALSE 33647
// begin if not ValidHex ( _x , _y ) then
33556: LD_VAR 0 11
33560: PPUSH
33561: LD_VAR 0 12
33565: PPUSH
33566: CALL_OW 488
33570: NOT
33571: IFFALSE 33575
// continue ;
33573: GO 33553
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33575: LD_VAR 0 11
33579: PPUSH
33580: LD_VAR 0 12
33584: PPUSH
33585: CALL_OW 351
33589: PUSH
33590: LD_VAR 0 11
33594: PPUSH
33595: LD_VAR 0 12
33599: PPUSH
33600: CALL_OW 554
33604: AND
33605: IFFALSE 33645
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33607: LD_ADDR_VAR 0 13
33611: PUSH
33612: LD_VAR 0 13
33616: PPUSH
33617: LD_VAR 0 13
33621: PUSH
33622: LD_INT 1
33624: PLUS
33625: PPUSH
33626: LD_VAR 0 11
33630: PUSH
33631: LD_VAR 0 12
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PPUSH
33640: CALL_OW 2
33644: ST_TO_ADDR
// end ;
33645: GO 33553
33647: POP
33648: POP
33649: GO 33533
33651: POP
33652: POP
// if not list then
33653: LD_VAR 0 13
33657: NOT
33658: IFFALSE 33662
// exit ;
33660: GO 33733
// for i in list do
33662: LD_ADDR_VAR 0 6
33666: PUSH
33667: LD_VAR 0 13
33671: PUSH
33672: FOR_IN
33673: IFFALSE 33731
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33675: LD_VAR 0 1
33679: PPUSH
33680: LD_STRING M
33682: PUSH
33683: LD_VAR 0 6
33687: PUSH
33688: LD_INT 1
33690: ARRAY
33691: PUSH
33692: LD_VAR 0 6
33696: PUSH
33697: LD_INT 2
33699: ARRAY
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: PPUSH
33725: CALL_OW 447
33729: GO 33672
33731: POP
33732: POP
// end ;
33733: LD_VAR 0 5
33737: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33738: LD_EXP 128
33742: NOT
33743: IFFALSE 33793
33745: GO 33747
33747: DISABLE
// begin initHack := true ;
33748: LD_ADDR_EXP 128
33752: PUSH
33753: LD_INT 1
33755: ST_TO_ADDR
// hackTanks := [ ] ;
33756: LD_ADDR_EXP 129
33760: PUSH
33761: EMPTY
33762: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33763: LD_ADDR_EXP 130
33767: PUSH
33768: EMPTY
33769: ST_TO_ADDR
// hackLimit := 3 ;
33770: LD_ADDR_EXP 131
33774: PUSH
33775: LD_INT 3
33777: ST_TO_ADDR
// hackDist := 12 ;
33778: LD_ADDR_EXP 132
33782: PUSH
33783: LD_INT 12
33785: ST_TO_ADDR
// hackCounter := [ ] ;
33786: LD_ADDR_EXP 133
33790: PUSH
33791: EMPTY
33792: ST_TO_ADDR
// end ;
33793: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33794: LD_EXP 128
33798: PUSH
33799: LD_INT 34
33801: PUSH
33802: LD_EXP 54
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PPUSH
33811: CALL_OW 69
33815: AND
33816: IFFALSE 34071
33818: GO 33820
33820: DISABLE
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
// begin enable ;
33825: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33826: LD_ADDR_VAR 0 1
33830: PUSH
33831: LD_INT 34
33833: PUSH
33834: LD_EXP 54
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PPUSH
33843: CALL_OW 69
33847: PUSH
33848: FOR_IN
33849: IFFALSE 34069
// begin if not i in hackTanks then
33851: LD_VAR 0 1
33855: PUSH
33856: LD_EXP 129
33860: IN
33861: NOT
33862: IFFALSE 33945
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33864: LD_ADDR_EXP 129
33868: PUSH
33869: LD_EXP 129
33873: PPUSH
33874: LD_EXP 129
33878: PUSH
33879: LD_INT 1
33881: PLUS
33882: PPUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 1
33892: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33893: LD_ADDR_EXP 130
33897: PUSH
33898: LD_EXP 130
33902: PPUSH
33903: LD_EXP 130
33907: PUSH
33908: LD_INT 1
33910: PLUS
33911: PPUSH
33912: EMPTY
33913: PPUSH
33914: CALL_OW 1
33918: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33919: LD_ADDR_EXP 133
33923: PUSH
33924: LD_EXP 133
33928: PPUSH
33929: LD_EXP 133
33933: PUSH
33934: LD_INT 1
33936: PLUS
33937: PPUSH
33938: EMPTY
33939: PPUSH
33940: CALL_OW 1
33944: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33945: LD_VAR 0 1
33949: PPUSH
33950: CALL_OW 302
33954: NOT
33955: IFFALSE 33968
// begin HackUnlinkAll ( i ) ;
33957: LD_VAR 0 1
33961: PPUSH
33962: CALL 34074 0 1
// continue ;
33966: GO 33848
// end ; HackCheckCapturedStatus ( i ) ;
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL 34517 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33977: LD_ADDR_VAR 0 2
33981: PUSH
33982: LD_INT 81
33984: PUSH
33985: LD_VAR 0 1
33989: PPUSH
33990: CALL_OW 255
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 33
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 91
34011: PUSH
34012: LD_VAR 0 1
34016: PUSH
34017: LD_EXP 132
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 50
34029: PUSH
34030: EMPTY
34031: LIST
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: PPUSH
34039: CALL_OW 69
34043: ST_TO_ADDR
// if not tmp then
34044: LD_VAR 0 2
34048: NOT
34049: IFFALSE 34053
// continue ;
34051: GO 33848
// HackLink ( i , tmp ) ;
34053: LD_VAR 0 1
34057: PPUSH
34058: LD_VAR 0 2
34062: PPUSH
34063: CALL 34210 0 2
// end ;
34067: GO 33848
34069: POP
34070: POP
// end ;
34071: PPOPN 2
34073: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34074: LD_INT 0
34076: PPUSH
34077: PPUSH
34078: PPUSH
// if not hack in hackTanks then
34079: LD_VAR 0 1
34083: PUSH
34084: LD_EXP 129
34088: IN
34089: NOT
34090: IFFALSE 34094
// exit ;
34092: GO 34205
// index := GetElementIndex ( hackTanks , hack ) ;
34094: LD_ADDR_VAR 0 4
34098: PUSH
34099: LD_EXP 129
34103: PPUSH
34104: LD_VAR 0 1
34108: PPUSH
34109: CALL 41639 0 2
34113: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34114: LD_EXP 130
34118: PUSH
34119: LD_VAR 0 4
34123: ARRAY
34124: IFFALSE 34205
// begin for i in hackTanksCaptured [ index ] do
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_EXP 130
34135: PUSH
34136: LD_VAR 0 4
34140: ARRAY
34141: PUSH
34142: FOR_IN
34143: IFFALSE 34169
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34145: LD_VAR 0 3
34149: PUSH
34150: LD_INT 1
34152: ARRAY
34153: PPUSH
34154: LD_VAR 0 3
34158: PUSH
34159: LD_INT 2
34161: ARRAY
34162: PPUSH
34163: CALL_OW 235
34167: GO 34142
34169: POP
34170: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34171: LD_ADDR_EXP 130
34175: PUSH
34176: LD_EXP 130
34180: PPUSH
34181: LD_VAR 0 4
34185: PPUSH
34186: EMPTY
34187: PPUSH
34188: CALL_OW 1
34192: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34193: LD_VAR 0 1
34197: PPUSH
34198: LD_INT 0
34200: PPUSH
34201: CALL_OW 505
// end ; end ;
34205: LD_VAR 0 2
34209: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34210: LD_INT 0
34212: PPUSH
34213: PPUSH
34214: PPUSH
// if not hack in hackTanks or not vehicles then
34215: LD_VAR 0 1
34219: PUSH
34220: LD_EXP 129
34224: IN
34225: NOT
34226: PUSH
34227: LD_VAR 0 2
34231: NOT
34232: OR
34233: IFFALSE 34237
// exit ;
34235: GO 34512
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34237: LD_ADDR_VAR 0 2
34241: PUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: LD_VAR 0 2
34251: PPUSH
34252: LD_INT 1
34254: PPUSH
34255: LD_INT 1
34257: PPUSH
34258: CALL 42289 0 4
34262: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34263: LD_ADDR_VAR 0 5
34267: PUSH
34268: LD_EXP 129
34272: PPUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL 41639 0 2
34282: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34283: LD_EXP 130
34287: PUSH
34288: LD_VAR 0 5
34292: ARRAY
34293: PUSH
34294: LD_EXP 131
34298: LESS
34299: IFFALSE 34488
// begin for i := 1 to vehicles do
34301: LD_ADDR_VAR 0 4
34305: PUSH
34306: DOUBLE
34307: LD_INT 1
34309: DEC
34310: ST_TO_ADDR
34311: LD_VAR 0 2
34315: PUSH
34316: FOR_TO
34317: IFFALSE 34486
// begin if hackTanksCaptured [ index ] = hackLimit then
34319: LD_EXP 130
34323: PUSH
34324: LD_VAR 0 5
34328: ARRAY
34329: PUSH
34330: LD_EXP 131
34334: EQUAL
34335: IFFALSE 34339
// break ;
34337: GO 34486
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34339: LD_ADDR_EXP 133
34343: PUSH
34344: LD_EXP 133
34348: PPUSH
34349: LD_VAR 0 5
34353: PPUSH
34354: LD_EXP 133
34358: PUSH
34359: LD_VAR 0 5
34363: ARRAY
34364: PUSH
34365: LD_INT 1
34367: PLUS
34368: PPUSH
34369: CALL_OW 1
34373: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34374: LD_ADDR_EXP 130
34378: PUSH
34379: LD_EXP 130
34383: PPUSH
34384: LD_VAR 0 5
34388: PUSH
34389: LD_EXP 130
34393: PUSH
34394: LD_VAR 0 5
34398: ARRAY
34399: PUSH
34400: LD_INT 1
34402: PLUS
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PPUSH
34408: LD_VAR 0 2
34412: PUSH
34413: LD_VAR 0 4
34417: ARRAY
34418: PUSH
34419: LD_VAR 0 2
34423: PUSH
34424: LD_VAR 0 4
34428: ARRAY
34429: PPUSH
34430: CALL_OW 255
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PPUSH
34439: CALL 41854 0 3
34443: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34444: LD_VAR 0 2
34448: PUSH
34449: LD_VAR 0 4
34453: ARRAY
34454: PPUSH
34455: LD_VAR 0 1
34459: PPUSH
34460: CALL_OW 255
34464: PPUSH
34465: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34469: LD_VAR 0 2
34473: PUSH
34474: LD_VAR 0 4
34478: ARRAY
34479: PPUSH
34480: CALL_OW 141
// end ;
34484: GO 34316
34486: POP
34487: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34488: LD_VAR 0 1
34492: PPUSH
34493: LD_EXP 130
34497: PUSH
34498: LD_VAR 0 5
34502: ARRAY
34503: PUSH
34504: LD_INT 0
34506: PLUS
34507: PPUSH
34508: CALL_OW 505
// end ;
34512: LD_VAR 0 3
34516: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34517: LD_INT 0
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
// if not hack in hackTanks then
34523: LD_VAR 0 1
34527: PUSH
34528: LD_EXP 129
34532: IN
34533: NOT
34534: IFFALSE 34538
// exit ;
34536: GO 34778
// index := GetElementIndex ( hackTanks , hack ) ;
34538: LD_ADDR_VAR 0 4
34542: PUSH
34543: LD_EXP 129
34547: PPUSH
34548: LD_VAR 0 1
34552: PPUSH
34553: CALL 41639 0 2
34557: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: DOUBLE
34564: LD_EXP 130
34568: PUSH
34569: LD_VAR 0 4
34573: ARRAY
34574: INC
34575: ST_TO_ADDR
34576: LD_INT 1
34578: PUSH
34579: FOR_DOWNTO
34580: IFFALSE 34752
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34582: LD_ADDR_VAR 0 5
34586: PUSH
34587: LD_EXP 130
34591: PUSH
34592: LD_VAR 0 4
34596: ARRAY
34597: PUSH
34598: LD_VAR 0 3
34602: ARRAY
34603: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34604: LD_VAR 0 5
34608: PUSH
34609: LD_INT 1
34611: ARRAY
34612: PPUSH
34613: CALL_OW 302
34617: NOT
34618: PUSH
34619: LD_VAR 0 5
34623: PUSH
34624: LD_INT 1
34626: ARRAY
34627: PPUSH
34628: CALL_OW 255
34632: PUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 255
34642: NONEQUAL
34643: OR
34644: IFFALSE 34750
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34646: LD_VAR 0 5
34650: PUSH
34651: LD_INT 1
34653: ARRAY
34654: PPUSH
34655: CALL_OW 305
34659: PUSH
34660: LD_VAR 0 5
34664: PUSH
34665: LD_INT 1
34667: ARRAY
34668: PPUSH
34669: CALL_OW 255
34673: PUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 255
34683: EQUAL
34684: AND
34685: IFFALSE 34709
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34687: LD_VAR 0 5
34691: PUSH
34692: LD_INT 1
34694: ARRAY
34695: PPUSH
34696: LD_VAR 0 5
34700: PUSH
34701: LD_INT 2
34703: ARRAY
34704: PPUSH
34705: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34709: LD_ADDR_EXP 130
34713: PUSH
34714: LD_EXP 130
34718: PPUSH
34719: LD_VAR 0 4
34723: PPUSH
34724: LD_EXP 130
34728: PUSH
34729: LD_VAR 0 4
34733: ARRAY
34734: PPUSH
34735: LD_VAR 0 3
34739: PPUSH
34740: CALL_OW 3
34744: PPUSH
34745: CALL_OW 1
34749: ST_TO_ADDR
// end ; end ;
34750: GO 34579
34752: POP
34753: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34754: LD_VAR 0 1
34758: PPUSH
34759: LD_EXP 130
34763: PUSH
34764: LD_VAR 0 4
34768: ARRAY
34769: PUSH
34770: LD_INT 0
34772: PLUS
34773: PPUSH
34774: CALL_OW 505
// end ;
34778: LD_VAR 0 2
34782: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34783: LD_INT 0
34785: PPUSH
34786: PPUSH
34787: PPUSH
34788: PPUSH
// if not hack in hackTanks then
34789: LD_VAR 0 1
34793: PUSH
34794: LD_EXP 129
34798: IN
34799: NOT
34800: IFFALSE 34804
// exit ;
34802: GO 34889
// index := GetElementIndex ( hackTanks , hack ) ;
34804: LD_ADDR_VAR 0 5
34808: PUSH
34809: LD_EXP 129
34813: PPUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: CALL 41639 0 2
34823: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34824: LD_ADDR_VAR 0 4
34828: PUSH
34829: DOUBLE
34830: LD_INT 1
34832: DEC
34833: ST_TO_ADDR
34834: LD_EXP 130
34838: PUSH
34839: LD_VAR 0 5
34843: ARRAY
34844: PUSH
34845: FOR_TO
34846: IFFALSE 34887
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34848: LD_EXP 130
34852: PUSH
34853: LD_VAR 0 5
34857: ARRAY
34858: PUSH
34859: LD_VAR 0 4
34863: ARRAY
34864: PUSH
34865: LD_INT 1
34867: ARRAY
34868: PUSH
34869: LD_VAR 0 2
34873: EQUAL
34874: IFFALSE 34885
// KillUnit ( vehicle ) ;
34876: LD_VAR 0 2
34880: PPUSH
34881: CALL_OW 66
34885: GO 34845
34887: POP
34888: POP
// end ;
34889: LD_VAR 0 3
34893: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34894: LD_EXP 134
34898: NOT
34899: IFFALSE 34934
34901: GO 34903
34903: DISABLE
// begin initMiner := true ;
34904: LD_ADDR_EXP 134
34908: PUSH
34909: LD_INT 1
34911: ST_TO_ADDR
// minersList := [ ] ;
34912: LD_ADDR_EXP 135
34916: PUSH
34917: EMPTY
34918: ST_TO_ADDR
// minerMinesList := [ ] ;
34919: LD_ADDR_EXP 136
34923: PUSH
34924: EMPTY
34925: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34926: LD_ADDR_EXP 137
34930: PUSH
34931: LD_INT 5
34933: ST_TO_ADDR
// end ;
34934: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34935: LD_EXP 134
34939: PUSH
34940: LD_INT 34
34942: PUSH
34943: LD_EXP 59
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PPUSH
34952: CALL_OW 69
34956: AND
34957: IFFALSE 35420
34959: GO 34961
34961: DISABLE
34962: LD_INT 0
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
// begin enable ;
34968: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34969: LD_ADDR_VAR 0 1
34973: PUSH
34974: LD_INT 34
34976: PUSH
34977: LD_EXP 59
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PPUSH
34986: CALL_OW 69
34990: PUSH
34991: FOR_IN
34992: IFFALSE 35064
// begin if not i in minersList then
34994: LD_VAR 0 1
34998: PUSH
34999: LD_EXP 135
35003: IN
35004: NOT
35005: IFFALSE 35062
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35007: LD_ADDR_EXP 135
35011: PUSH
35012: LD_EXP 135
35016: PPUSH
35017: LD_EXP 135
35021: PUSH
35022: LD_INT 1
35024: PLUS
35025: PPUSH
35026: LD_VAR 0 1
35030: PPUSH
35031: CALL_OW 1
35035: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35036: LD_ADDR_EXP 136
35040: PUSH
35041: LD_EXP 136
35045: PPUSH
35046: LD_EXP 136
35050: PUSH
35051: LD_INT 1
35053: PLUS
35054: PPUSH
35055: EMPTY
35056: PPUSH
35057: CALL_OW 1
35061: ST_TO_ADDR
// end end ;
35062: GO 34991
35064: POP
35065: POP
// for i := minerMinesList downto 1 do
35066: LD_ADDR_VAR 0 1
35070: PUSH
35071: DOUBLE
35072: LD_EXP 136
35076: INC
35077: ST_TO_ADDR
35078: LD_INT 1
35080: PUSH
35081: FOR_DOWNTO
35082: IFFALSE 35418
// begin if IsLive ( minersList [ i ] ) then
35084: LD_EXP 135
35088: PUSH
35089: LD_VAR 0 1
35093: ARRAY
35094: PPUSH
35095: CALL_OW 300
35099: IFFALSE 35127
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35101: LD_EXP 135
35105: PUSH
35106: LD_VAR 0 1
35110: ARRAY
35111: PPUSH
35112: LD_EXP 136
35116: PUSH
35117: LD_VAR 0 1
35121: ARRAY
35122: PPUSH
35123: CALL_OW 505
// if not minerMinesList [ i ] then
35127: LD_EXP 136
35131: PUSH
35132: LD_VAR 0 1
35136: ARRAY
35137: NOT
35138: IFFALSE 35142
// continue ;
35140: GO 35081
// for j := minerMinesList [ i ] downto 1 do
35142: LD_ADDR_VAR 0 2
35146: PUSH
35147: DOUBLE
35148: LD_EXP 136
35152: PUSH
35153: LD_VAR 0 1
35157: ARRAY
35158: INC
35159: ST_TO_ADDR
35160: LD_INT 1
35162: PUSH
35163: FOR_DOWNTO
35164: IFFALSE 35414
// begin side := GetSide ( minersList [ i ] ) ;
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_EXP 135
35175: PUSH
35176: LD_VAR 0 1
35180: ARRAY
35181: PPUSH
35182: CALL_OW 255
35186: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35187: LD_ADDR_VAR 0 4
35191: PUSH
35192: LD_EXP 136
35196: PUSH
35197: LD_VAR 0 1
35201: ARRAY
35202: PUSH
35203: LD_VAR 0 2
35207: ARRAY
35208: PUSH
35209: LD_INT 1
35211: ARRAY
35212: PPUSH
35213: LD_EXP 136
35217: PUSH
35218: LD_VAR 0 1
35222: ARRAY
35223: PUSH
35224: LD_VAR 0 2
35228: ARRAY
35229: PUSH
35230: LD_INT 2
35232: ARRAY
35233: PPUSH
35234: CALL_OW 428
35238: ST_TO_ADDR
// if not tmp then
35239: LD_VAR 0 4
35243: NOT
35244: IFFALSE 35248
// continue ;
35246: GO 35163
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35248: LD_VAR 0 4
35252: PUSH
35253: LD_INT 81
35255: PUSH
35256: LD_VAR 0 3
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PPUSH
35265: CALL_OW 69
35269: IN
35270: PUSH
35271: LD_EXP 136
35275: PUSH
35276: LD_VAR 0 1
35280: ARRAY
35281: PUSH
35282: LD_VAR 0 2
35286: ARRAY
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PPUSH
35292: LD_EXP 136
35296: PUSH
35297: LD_VAR 0 1
35301: ARRAY
35302: PUSH
35303: LD_VAR 0 2
35307: ARRAY
35308: PUSH
35309: LD_INT 2
35311: ARRAY
35312: PPUSH
35313: CALL_OW 458
35317: AND
35318: IFFALSE 35412
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35320: LD_EXP 136
35324: PUSH
35325: LD_VAR 0 1
35329: ARRAY
35330: PUSH
35331: LD_VAR 0 2
35335: ARRAY
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PPUSH
35341: LD_EXP 136
35345: PUSH
35346: LD_VAR 0 1
35350: ARRAY
35351: PUSH
35352: LD_VAR 0 2
35356: ARRAY
35357: PUSH
35358: LD_INT 2
35360: ARRAY
35361: PPUSH
35362: LD_VAR 0 3
35366: PPUSH
35367: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35371: LD_ADDR_EXP 136
35375: PUSH
35376: LD_EXP 136
35380: PPUSH
35381: LD_VAR 0 1
35385: PPUSH
35386: LD_EXP 136
35390: PUSH
35391: LD_VAR 0 1
35395: ARRAY
35396: PPUSH
35397: LD_VAR 0 2
35401: PPUSH
35402: CALL_OW 3
35406: PPUSH
35407: CALL_OW 1
35411: ST_TO_ADDR
// end ; end ;
35412: GO 35163
35414: POP
35415: POP
// end ;
35416: GO 35081
35418: POP
35419: POP
// end ;
35420: PPOPN 4
35422: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35423: LD_INT 0
35425: PPUSH
35426: PPUSH
// result := false ;
35427: LD_ADDR_VAR 0 4
35431: PUSH
35432: LD_INT 0
35434: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35435: LD_VAR 0 1
35439: PPUSH
35440: CALL_OW 264
35444: PUSH
35445: LD_EXP 59
35449: EQUAL
35450: NOT
35451: IFFALSE 35455
// exit ;
35453: GO 35695
// index := GetElementIndex ( minersList , unit ) ;
35455: LD_ADDR_VAR 0 5
35459: PUSH
35460: LD_EXP 135
35464: PPUSH
35465: LD_VAR 0 1
35469: PPUSH
35470: CALL 41639 0 2
35474: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35475: LD_EXP 136
35479: PUSH
35480: LD_VAR 0 5
35484: ARRAY
35485: PUSH
35486: LD_EXP 137
35490: GREATEREQUAL
35491: IFFALSE 35495
// exit ;
35493: GO 35695
// ComMoveXY ( unit , x , y ) ;
35495: LD_VAR 0 1
35499: PPUSH
35500: LD_VAR 0 2
35504: PPUSH
35505: LD_VAR 0 3
35509: PPUSH
35510: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35514: LD_INT 35
35516: PPUSH
35517: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35521: LD_VAR 0 1
35525: PPUSH
35526: LD_VAR 0 2
35530: PPUSH
35531: LD_VAR 0 3
35535: PPUSH
35536: CALL 72006 0 3
35540: NOT
35541: PUSH
35542: LD_VAR 0 1
35546: PPUSH
35547: CALL_OW 314
35551: AND
35552: IFFALSE 35556
// exit ;
35554: GO 35695
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35556: LD_VAR 0 2
35560: PPUSH
35561: LD_VAR 0 3
35565: PPUSH
35566: CALL_OW 428
35570: PUSH
35571: LD_VAR 0 1
35575: EQUAL
35576: PUSH
35577: LD_VAR 0 1
35581: PPUSH
35582: CALL_OW 314
35586: NOT
35587: AND
35588: IFFALSE 35514
// PlaySoundXY ( x , y , PlantMine ) ;
35590: LD_VAR 0 2
35594: PPUSH
35595: LD_VAR 0 3
35599: PPUSH
35600: LD_STRING PlantMine
35602: PPUSH
35603: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35607: LD_VAR 0 2
35611: PPUSH
35612: LD_VAR 0 3
35616: PPUSH
35617: LD_VAR 0 1
35621: PPUSH
35622: CALL_OW 255
35626: PPUSH
35627: LD_INT 0
35629: PPUSH
35630: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35634: LD_ADDR_EXP 136
35638: PUSH
35639: LD_EXP 136
35643: PPUSH
35644: LD_VAR 0 5
35648: PUSH
35649: LD_EXP 136
35653: PUSH
35654: LD_VAR 0 5
35658: ARRAY
35659: PUSH
35660: LD_INT 1
35662: PLUS
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PPUSH
35668: LD_VAR 0 2
35672: PUSH
35673: LD_VAR 0 3
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PPUSH
35682: CALL 41854 0 3
35686: ST_TO_ADDR
// result := true ;
35687: LD_ADDR_VAR 0 4
35691: PUSH
35692: LD_INT 1
35694: ST_TO_ADDR
// end ;
35695: LD_VAR 0 4
35699: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
35704: PPUSH
// if not unit in minersList then
35705: LD_VAR 0 1
35709: PUSH
35710: LD_EXP 135
35714: IN
35715: NOT
35716: IFFALSE 35720
// exit ;
35718: GO 36112
// index := GetElementIndex ( minersList , unit ) ;
35720: LD_ADDR_VAR 0 6
35724: PUSH
35725: LD_EXP 135
35729: PPUSH
35730: LD_VAR 0 1
35734: PPUSH
35735: CALL 41639 0 2
35739: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35740: LD_ADDR_VAR 0 5
35744: PUSH
35745: DOUBLE
35746: LD_EXP 136
35750: PUSH
35751: LD_VAR 0 6
35755: ARRAY
35756: INC
35757: ST_TO_ADDR
35758: LD_INT 1
35760: PUSH
35761: FOR_DOWNTO
35762: IFFALSE 35923
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35764: LD_EXP 136
35768: PUSH
35769: LD_VAR 0 6
35773: ARRAY
35774: PUSH
35775: LD_VAR 0 5
35779: ARRAY
35780: PUSH
35781: LD_INT 1
35783: ARRAY
35784: PUSH
35785: LD_VAR 0 2
35789: EQUAL
35790: PUSH
35791: LD_EXP 136
35795: PUSH
35796: LD_VAR 0 6
35800: ARRAY
35801: PUSH
35802: LD_VAR 0 5
35806: ARRAY
35807: PUSH
35808: LD_INT 2
35810: ARRAY
35811: PUSH
35812: LD_VAR 0 3
35816: EQUAL
35817: AND
35818: IFFALSE 35921
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35820: LD_EXP 136
35824: PUSH
35825: LD_VAR 0 6
35829: ARRAY
35830: PUSH
35831: LD_VAR 0 5
35835: ARRAY
35836: PUSH
35837: LD_INT 1
35839: ARRAY
35840: PPUSH
35841: LD_EXP 136
35845: PUSH
35846: LD_VAR 0 6
35850: ARRAY
35851: PUSH
35852: LD_VAR 0 5
35856: ARRAY
35857: PUSH
35858: LD_INT 2
35860: ARRAY
35861: PPUSH
35862: LD_VAR 0 1
35866: PPUSH
35867: CALL_OW 255
35871: PPUSH
35872: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35876: LD_ADDR_EXP 136
35880: PUSH
35881: LD_EXP 136
35885: PPUSH
35886: LD_VAR 0 6
35890: PPUSH
35891: LD_EXP 136
35895: PUSH
35896: LD_VAR 0 6
35900: ARRAY
35901: PPUSH
35902: LD_VAR 0 5
35906: PPUSH
35907: CALL_OW 3
35911: PPUSH
35912: CALL_OW 1
35916: ST_TO_ADDR
// exit ;
35917: POP
35918: POP
35919: GO 36112
// end ; end ;
35921: GO 35761
35923: POP
35924: POP
// for i := minerMinesList [ index ] downto 1 do
35925: LD_ADDR_VAR 0 5
35929: PUSH
35930: DOUBLE
35931: LD_EXP 136
35935: PUSH
35936: LD_VAR 0 6
35940: ARRAY
35941: INC
35942: ST_TO_ADDR
35943: LD_INT 1
35945: PUSH
35946: FOR_DOWNTO
35947: IFFALSE 36110
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35949: LD_EXP 136
35953: PUSH
35954: LD_VAR 0 6
35958: ARRAY
35959: PUSH
35960: LD_VAR 0 5
35964: ARRAY
35965: PUSH
35966: LD_INT 1
35968: ARRAY
35969: PPUSH
35970: LD_EXP 136
35974: PUSH
35975: LD_VAR 0 6
35979: ARRAY
35980: PUSH
35981: LD_VAR 0 5
35985: ARRAY
35986: PUSH
35987: LD_INT 2
35989: ARRAY
35990: PPUSH
35991: LD_VAR 0 2
35995: PPUSH
35996: LD_VAR 0 3
36000: PPUSH
36001: CALL_OW 298
36005: PUSH
36006: LD_INT 6
36008: LESS
36009: IFFALSE 36108
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36011: LD_EXP 136
36015: PUSH
36016: LD_VAR 0 6
36020: ARRAY
36021: PUSH
36022: LD_VAR 0 5
36026: ARRAY
36027: PUSH
36028: LD_INT 1
36030: ARRAY
36031: PPUSH
36032: LD_EXP 136
36036: PUSH
36037: LD_VAR 0 6
36041: ARRAY
36042: PUSH
36043: LD_VAR 0 5
36047: ARRAY
36048: PUSH
36049: LD_INT 2
36051: ARRAY
36052: PPUSH
36053: LD_VAR 0 1
36057: PPUSH
36058: CALL_OW 255
36062: PPUSH
36063: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36067: LD_ADDR_EXP 136
36071: PUSH
36072: LD_EXP 136
36076: PPUSH
36077: LD_VAR 0 6
36081: PPUSH
36082: LD_EXP 136
36086: PUSH
36087: LD_VAR 0 6
36091: ARRAY
36092: PPUSH
36093: LD_VAR 0 5
36097: PPUSH
36098: CALL_OW 3
36102: PPUSH
36103: CALL_OW 1
36107: ST_TO_ADDR
// end ; end ;
36108: GO 35946
36110: POP
36111: POP
// end ;
36112: LD_VAR 0 4
36116: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36117: LD_INT 0
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36128: LD_VAR 0 1
36132: PPUSH
36133: CALL_OW 264
36137: PUSH
36138: LD_EXP 59
36142: EQUAL
36143: NOT
36144: PUSH
36145: LD_VAR 0 1
36149: PUSH
36150: LD_EXP 135
36154: IN
36155: NOT
36156: OR
36157: IFFALSE 36161
// exit ;
36159: GO 36483
// index := GetElementIndex ( minersList , unit ) ;
36161: LD_ADDR_VAR 0 6
36165: PUSH
36166: LD_EXP 135
36170: PPUSH
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL 41639 0 2
36180: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36181: LD_ADDR_VAR 0 8
36185: PUSH
36186: LD_EXP 137
36190: PUSH
36191: LD_EXP 136
36195: PUSH
36196: LD_VAR 0 6
36200: ARRAY
36201: MINUS
36202: ST_TO_ADDR
// if not minesFreeAmount then
36203: LD_VAR 0 8
36207: NOT
36208: IFFALSE 36212
// exit ;
36210: GO 36483
// tmp := [ ] ;
36212: LD_ADDR_VAR 0 7
36216: PUSH
36217: EMPTY
36218: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36219: LD_ADDR_VAR 0 5
36223: PUSH
36224: DOUBLE
36225: LD_INT 1
36227: DEC
36228: ST_TO_ADDR
36229: LD_VAR 0 8
36233: PUSH
36234: FOR_TO
36235: IFFALSE 36430
// begin _d := rand ( 0 , 5 ) ;
36237: LD_ADDR_VAR 0 11
36241: PUSH
36242: LD_INT 0
36244: PPUSH
36245: LD_INT 5
36247: PPUSH
36248: CALL_OW 12
36252: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36253: LD_ADDR_VAR 0 12
36257: PUSH
36258: LD_INT 2
36260: PPUSH
36261: LD_INT 6
36263: PPUSH
36264: CALL_OW 12
36268: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36269: LD_ADDR_VAR 0 9
36273: PUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: LD_VAR 0 11
36283: PPUSH
36284: LD_VAR 0 12
36288: PPUSH
36289: CALL_OW 272
36293: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36294: LD_ADDR_VAR 0 10
36298: PUSH
36299: LD_VAR 0 3
36303: PPUSH
36304: LD_VAR 0 11
36308: PPUSH
36309: LD_VAR 0 12
36313: PPUSH
36314: CALL_OW 273
36318: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36319: LD_VAR 0 9
36323: PPUSH
36324: LD_VAR 0 10
36328: PPUSH
36329: CALL_OW 488
36333: PUSH
36334: LD_VAR 0 9
36338: PUSH
36339: LD_VAR 0 10
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_VAR 0 7
36352: IN
36353: NOT
36354: AND
36355: PUSH
36356: LD_VAR 0 9
36360: PPUSH
36361: LD_VAR 0 10
36365: PPUSH
36366: CALL_OW 458
36370: NOT
36371: AND
36372: IFFALSE 36414
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36374: LD_ADDR_VAR 0 7
36378: PUSH
36379: LD_VAR 0 7
36383: PPUSH
36384: LD_VAR 0 7
36388: PUSH
36389: LD_INT 1
36391: PLUS
36392: PPUSH
36393: LD_VAR 0 9
36397: PUSH
36398: LD_VAR 0 10
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PPUSH
36407: CALL_OW 1
36411: ST_TO_ADDR
36412: GO 36428
// i := i - 1 ;
36414: LD_ADDR_VAR 0 5
36418: PUSH
36419: LD_VAR 0 5
36423: PUSH
36424: LD_INT 1
36426: MINUS
36427: ST_TO_ADDR
// end ;
36428: GO 36234
36430: POP
36431: POP
// for i in tmp do
36432: LD_ADDR_VAR 0 5
36436: PUSH
36437: LD_VAR 0 7
36441: PUSH
36442: FOR_IN
36443: IFFALSE 36481
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36445: LD_VAR 0 1
36449: PPUSH
36450: LD_VAR 0 5
36454: PUSH
36455: LD_INT 1
36457: ARRAY
36458: PPUSH
36459: LD_VAR 0 5
36463: PUSH
36464: LD_INT 2
36466: ARRAY
36467: PPUSH
36468: CALL 35423 0 3
36472: NOT
36473: IFFALSE 36479
// exit ;
36475: POP
36476: POP
36477: GO 36483
36479: GO 36442
36481: POP
36482: POP
// end ;
36483: LD_VAR 0 4
36487: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36488: LD_INT 0
36490: PPUSH
36491: PPUSH
36492: PPUSH
36493: PPUSH
36494: PPUSH
36495: PPUSH
36496: PPUSH
// if not GetClass ( unit ) = class_sniper then
36497: LD_VAR 0 1
36501: PPUSH
36502: CALL_OW 257
36506: PUSH
36507: LD_INT 5
36509: EQUAL
36510: NOT
36511: IFFALSE 36515
// exit ;
36513: GO 36903
// dist := 8 ;
36515: LD_ADDR_VAR 0 5
36519: PUSH
36520: LD_INT 8
36522: ST_TO_ADDR
// viewRange := 12 ;
36523: LD_ADDR_VAR 0 7
36527: PUSH
36528: LD_INT 12
36530: ST_TO_ADDR
// side := GetSide ( unit ) ;
36531: LD_ADDR_VAR 0 6
36535: PUSH
36536: LD_VAR 0 1
36540: PPUSH
36541: CALL_OW 255
36545: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36546: LD_INT 61
36548: PPUSH
36549: LD_VAR 0 6
36553: PPUSH
36554: CALL_OW 321
36558: PUSH
36559: LD_INT 2
36561: EQUAL
36562: IFFALSE 36572
// viewRange := 16 ;
36564: LD_ADDR_VAR 0 7
36568: PUSH
36569: LD_INT 16
36571: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36572: LD_VAR 0 1
36576: PPUSH
36577: LD_VAR 0 2
36581: PPUSH
36582: LD_VAR 0 3
36586: PPUSH
36587: CALL_OW 297
36591: PUSH
36592: LD_VAR 0 5
36596: GREATER
36597: IFFALSE 36676
// begin ComMoveXY ( unit , x , y ) ;
36599: LD_VAR 0 1
36603: PPUSH
36604: LD_VAR 0 2
36608: PPUSH
36609: LD_VAR 0 3
36613: PPUSH
36614: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36618: LD_INT 35
36620: PPUSH
36621: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36625: LD_VAR 0 1
36629: PPUSH
36630: LD_VAR 0 2
36634: PPUSH
36635: LD_VAR 0 3
36639: PPUSH
36640: CALL 72006 0 3
36644: NOT
36645: IFFALSE 36649
// exit ;
36647: GO 36903
// until GetDistUnitXY ( unit , x , y ) < dist ;
36649: LD_VAR 0 1
36653: PPUSH
36654: LD_VAR 0 2
36658: PPUSH
36659: LD_VAR 0 3
36663: PPUSH
36664: CALL_OW 297
36668: PUSH
36669: LD_VAR 0 5
36673: LESS
36674: IFFALSE 36618
// end ; ComTurnXY ( unit , x , y ) ;
36676: LD_VAR 0 1
36680: PPUSH
36681: LD_VAR 0 2
36685: PPUSH
36686: LD_VAR 0 3
36690: PPUSH
36691: CALL_OW 118
// wait ( 5 ) ;
36695: LD_INT 5
36697: PPUSH
36698: CALL_OW 67
// _d := GetDir ( unit ) ;
36702: LD_ADDR_VAR 0 10
36706: PUSH
36707: LD_VAR 0 1
36711: PPUSH
36712: CALL_OW 254
36716: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36717: LD_ADDR_VAR 0 8
36721: PUSH
36722: LD_VAR 0 1
36726: PPUSH
36727: CALL_OW 250
36731: PPUSH
36732: LD_VAR 0 10
36736: PPUSH
36737: LD_VAR 0 5
36741: PPUSH
36742: CALL_OW 272
36746: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: LD_VAR 0 1
36756: PPUSH
36757: CALL_OW 251
36761: PPUSH
36762: LD_VAR 0 10
36766: PPUSH
36767: LD_VAR 0 5
36771: PPUSH
36772: CALL_OW 273
36776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36777: LD_VAR 0 8
36781: PPUSH
36782: LD_VAR 0 9
36786: PPUSH
36787: CALL_OW 488
36791: NOT
36792: IFFALSE 36796
// exit ;
36794: GO 36903
// ComAnimCustom ( unit , 1 ) ;
36796: LD_VAR 0 1
36800: PPUSH
36801: LD_INT 1
36803: PPUSH
36804: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36808: LD_VAR 0 8
36812: PPUSH
36813: LD_VAR 0 9
36817: PPUSH
36818: LD_VAR 0 6
36822: PPUSH
36823: LD_VAR 0 7
36827: PPUSH
36828: CALL_OW 330
// repeat wait ( 1 ) ;
36832: LD_INT 1
36834: PPUSH
36835: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 316
36848: PUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL_OW 314
36858: OR
36859: PUSH
36860: LD_VAR 0 1
36864: PPUSH
36865: CALL_OW 302
36869: NOT
36870: OR
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 301
36881: OR
36882: IFFALSE 36832
// RemoveSeeing ( _x , _y , side ) ;
36884: LD_VAR 0 8
36888: PPUSH
36889: LD_VAR 0 9
36893: PPUSH
36894: LD_VAR 0 6
36898: PPUSH
36899: CALL_OW 331
// end ; end_of_file
36903: LD_VAR 0 4
36907: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36908: LD_INT 0
36910: PPUSH
36911: PPUSH
// if exist_mode then
36912: LD_VAR 0 2
36916: IFFALSE 36941
// unit := CreateCharacter ( prefix & ident ) else
36918: LD_ADDR_VAR 0 5
36922: PUSH
36923: LD_VAR 0 3
36927: PUSH
36928: LD_VAR 0 1
36932: STR
36933: PPUSH
36934: CALL_OW 34
36938: ST_TO_ADDR
36939: GO 36956
// unit := NewCharacter ( ident ) ;
36941: LD_ADDR_VAR 0 5
36945: PUSH
36946: LD_VAR 0 1
36950: PPUSH
36951: CALL_OW 25
36955: ST_TO_ADDR
// result := unit ;
36956: LD_ADDR_VAR 0 4
36960: PUSH
36961: LD_VAR 0 5
36965: ST_TO_ADDR
// end ;
36966: LD_VAR 0 4
36970: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36971: LD_INT 0
36973: PPUSH
36974: PPUSH
// if not side or not nation then
36975: LD_VAR 0 1
36979: NOT
36980: PUSH
36981: LD_VAR 0 2
36985: NOT
36986: OR
36987: IFFALSE 36991
// exit ;
36989: GO 37755
// case nation of nation_american :
36991: LD_VAR 0 2
36995: PUSH
36996: LD_INT 1
36998: DOUBLE
36999: EQUAL
37000: IFTRUE 37004
37002: GO 37218
37004: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37005: LD_ADDR_VAR 0 4
37009: PUSH
37010: LD_INT 35
37012: PUSH
37013: LD_INT 45
37015: PUSH
37016: LD_INT 46
37018: PUSH
37019: LD_INT 47
37021: PUSH
37022: LD_INT 82
37024: PUSH
37025: LD_INT 83
37027: PUSH
37028: LD_INT 84
37030: PUSH
37031: LD_INT 85
37033: PUSH
37034: LD_INT 86
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 6
37045: PUSH
37046: LD_INT 15
37048: PUSH
37049: LD_INT 16
37051: PUSH
37052: LD_INT 7
37054: PUSH
37055: LD_INT 12
37057: PUSH
37058: LD_INT 13
37060: PUSH
37061: LD_INT 10
37063: PUSH
37064: LD_INT 14
37066: PUSH
37067: LD_INT 20
37069: PUSH
37070: LD_INT 21
37072: PUSH
37073: LD_INT 22
37075: PUSH
37076: LD_INT 25
37078: PUSH
37079: LD_INT 32
37081: PUSH
37082: LD_INT 27
37084: PUSH
37085: LD_INT 36
37087: PUSH
37088: LD_INT 69
37090: PUSH
37091: LD_INT 39
37093: PUSH
37094: LD_INT 34
37096: PUSH
37097: LD_INT 40
37099: PUSH
37100: LD_INT 48
37102: PUSH
37103: LD_INT 49
37105: PUSH
37106: LD_INT 50
37108: PUSH
37109: LD_INT 51
37111: PUSH
37112: LD_INT 52
37114: PUSH
37115: LD_INT 53
37117: PUSH
37118: LD_INT 54
37120: PUSH
37121: LD_INT 55
37123: PUSH
37124: LD_INT 56
37126: PUSH
37127: LD_INT 57
37129: PUSH
37130: LD_INT 58
37132: PUSH
37133: LD_INT 59
37135: PUSH
37136: LD_INT 60
37138: PUSH
37139: LD_INT 61
37141: PUSH
37142: LD_INT 62
37144: PUSH
37145: LD_INT 80
37147: PUSH
37148: LD_INT 82
37150: PUSH
37151: LD_INT 83
37153: PUSH
37154: LD_INT 84
37156: PUSH
37157: LD_INT 85
37159: PUSH
37160: LD_INT 86
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: ST_TO_ADDR
37216: GO 37679
37218: LD_INT 2
37220: DOUBLE
37221: EQUAL
37222: IFTRUE 37226
37224: GO 37448
37226: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
37227: LD_ADDR_VAR 0 4
37231: PUSH
37232: LD_INT 35
37234: PUSH
37235: LD_INT 45
37237: PUSH
37238: LD_INT 46
37240: PUSH
37241: LD_INT 47
37243: PUSH
37244: LD_INT 82
37246: PUSH
37247: LD_INT 83
37249: PUSH
37250: LD_INT 84
37252: PUSH
37253: LD_INT 85
37255: PUSH
37256: LD_INT 87
37258: PUSH
37259: LD_INT 70
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 11
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: LD_INT 4
37273: PUSH
37274: LD_INT 5
37276: PUSH
37277: LD_INT 6
37279: PUSH
37280: LD_INT 15
37282: PUSH
37283: LD_INT 18
37285: PUSH
37286: LD_INT 7
37288: PUSH
37289: LD_INT 17
37291: PUSH
37292: LD_INT 8
37294: PUSH
37295: LD_INT 20
37297: PUSH
37298: LD_INT 21
37300: PUSH
37301: LD_INT 22
37303: PUSH
37304: LD_INT 72
37306: PUSH
37307: LD_INT 26
37309: PUSH
37310: LD_INT 69
37312: PUSH
37313: LD_INT 39
37315: PUSH
37316: LD_INT 40
37318: PUSH
37319: LD_INT 41
37321: PUSH
37322: LD_INT 42
37324: PUSH
37325: LD_INT 43
37327: PUSH
37328: LD_INT 48
37330: PUSH
37331: LD_INT 49
37333: PUSH
37334: LD_INT 50
37336: PUSH
37337: LD_INT 51
37339: PUSH
37340: LD_INT 52
37342: PUSH
37343: LD_INT 53
37345: PUSH
37346: LD_INT 54
37348: PUSH
37349: LD_INT 55
37351: PUSH
37352: LD_INT 56
37354: PUSH
37355: LD_INT 60
37357: PUSH
37358: LD_INT 61
37360: PUSH
37361: LD_INT 62
37363: PUSH
37364: LD_INT 66
37366: PUSH
37367: LD_INT 67
37369: PUSH
37370: LD_INT 68
37372: PUSH
37373: LD_INT 81
37375: PUSH
37376: LD_INT 82
37378: PUSH
37379: LD_INT 83
37381: PUSH
37382: LD_INT 84
37384: PUSH
37385: LD_INT 85
37387: PUSH
37388: LD_INT 87
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
37446: GO 37679
37448: LD_INT 3
37450: DOUBLE
37451: EQUAL
37452: IFTRUE 37456
37454: GO 37678
37456: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37457: LD_ADDR_VAR 0 4
37461: PUSH
37462: LD_INT 46
37464: PUSH
37465: LD_INT 47
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 82
37476: PUSH
37477: LD_INT 83
37479: PUSH
37480: LD_INT 84
37482: PUSH
37483: LD_INT 85
37485: PUSH
37486: LD_INT 86
37488: PUSH
37489: LD_INT 11
37491: PUSH
37492: LD_INT 9
37494: PUSH
37495: LD_INT 20
37497: PUSH
37498: LD_INT 19
37500: PUSH
37501: LD_INT 21
37503: PUSH
37504: LD_INT 24
37506: PUSH
37507: LD_INT 22
37509: PUSH
37510: LD_INT 25
37512: PUSH
37513: LD_INT 28
37515: PUSH
37516: LD_INT 29
37518: PUSH
37519: LD_INT 30
37521: PUSH
37522: LD_INT 31
37524: PUSH
37525: LD_INT 37
37527: PUSH
37528: LD_INT 38
37530: PUSH
37531: LD_INT 32
37533: PUSH
37534: LD_INT 27
37536: PUSH
37537: LD_INT 33
37539: PUSH
37540: LD_INT 69
37542: PUSH
37543: LD_INT 39
37545: PUSH
37546: LD_INT 34
37548: PUSH
37549: LD_INT 40
37551: PUSH
37552: LD_INT 71
37554: PUSH
37555: LD_INT 23
37557: PUSH
37558: LD_INT 44
37560: PUSH
37561: LD_INT 48
37563: PUSH
37564: LD_INT 49
37566: PUSH
37567: LD_INT 50
37569: PUSH
37570: LD_INT 51
37572: PUSH
37573: LD_INT 52
37575: PUSH
37576: LD_INT 53
37578: PUSH
37579: LD_INT 54
37581: PUSH
37582: LD_INT 55
37584: PUSH
37585: LD_INT 56
37587: PUSH
37588: LD_INT 57
37590: PUSH
37591: LD_INT 58
37593: PUSH
37594: LD_INT 59
37596: PUSH
37597: LD_INT 63
37599: PUSH
37600: LD_INT 64
37602: PUSH
37603: LD_INT 65
37605: PUSH
37606: LD_INT 82
37608: PUSH
37609: LD_INT 83
37611: PUSH
37612: LD_INT 84
37614: PUSH
37615: LD_INT 85
37617: PUSH
37618: LD_INT 86
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
37676: GO 37679
37678: POP
// if state > - 1 and state < 3 then
37679: LD_VAR 0 3
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: GREATER
37688: PUSH
37689: LD_VAR 0 3
37693: PUSH
37694: LD_INT 3
37696: LESS
37697: AND
37698: IFFALSE 37755
// for i in result do
37700: LD_ADDR_VAR 0 5
37704: PUSH
37705: LD_VAR 0 4
37709: PUSH
37710: FOR_IN
37711: IFFALSE 37753
// if GetTech ( i , side ) <> state then
37713: LD_VAR 0 5
37717: PPUSH
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL_OW 321
37727: PUSH
37728: LD_VAR 0 3
37732: NONEQUAL
37733: IFFALSE 37751
// result := result diff i ;
37735: LD_ADDR_VAR 0 4
37739: PUSH
37740: LD_VAR 0 4
37744: PUSH
37745: LD_VAR 0 5
37749: DIFF
37750: ST_TO_ADDR
37751: GO 37710
37753: POP
37754: POP
// end ;
37755: LD_VAR 0 4
37759: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37760: LD_INT 0
37762: PPUSH
37763: PPUSH
37764: PPUSH
// result := true ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_INT 1
37772: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37773: LD_ADDR_VAR 0 5
37777: PUSH
37778: LD_VAR 0 2
37782: PPUSH
37783: CALL_OW 480
37787: ST_TO_ADDR
// if not tmp then
37788: LD_VAR 0 5
37792: NOT
37793: IFFALSE 37797
// exit ;
37795: GO 37846
// for i in tmp do
37797: LD_ADDR_VAR 0 4
37801: PUSH
37802: LD_VAR 0 5
37806: PUSH
37807: FOR_IN
37808: IFFALSE 37844
// if GetTech ( i , side ) <> state_researched then
37810: LD_VAR 0 4
37814: PPUSH
37815: LD_VAR 0 1
37819: PPUSH
37820: CALL_OW 321
37824: PUSH
37825: LD_INT 2
37827: NONEQUAL
37828: IFFALSE 37842
// begin result := false ;
37830: LD_ADDR_VAR 0 3
37834: PUSH
37835: LD_INT 0
37837: ST_TO_ADDR
// exit ;
37838: POP
37839: POP
37840: GO 37846
// end ;
37842: GO 37807
37844: POP
37845: POP
// end ;
37846: LD_VAR 0 3
37850: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37851: LD_INT 0
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
37859: PPUSH
37860: PPUSH
37861: PPUSH
37862: PPUSH
37863: PPUSH
37864: PPUSH
37865: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37866: LD_VAR 0 1
37870: NOT
37871: PUSH
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 257
37881: PUSH
37882: LD_INT 9
37884: NONEQUAL
37885: OR
37886: IFFALSE 37890
// exit ;
37888: GO 38463
// side := GetSide ( unit ) ;
37890: LD_ADDR_VAR 0 9
37894: PUSH
37895: LD_VAR 0 1
37899: PPUSH
37900: CALL_OW 255
37904: ST_TO_ADDR
// tech_space := tech_spacanom ;
37905: LD_ADDR_VAR 0 12
37909: PUSH
37910: LD_INT 29
37912: ST_TO_ADDR
// tech_time := tech_taurad ;
37913: LD_ADDR_VAR 0 13
37917: PUSH
37918: LD_INT 28
37920: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37921: LD_ADDR_VAR 0 11
37925: PUSH
37926: LD_VAR 0 1
37930: PPUSH
37931: CALL_OW 310
37935: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37936: LD_VAR 0 11
37940: PPUSH
37941: CALL_OW 247
37945: PUSH
37946: LD_INT 2
37948: EQUAL
37949: IFFALSE 37953
// exit ;
37951: GO 38463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37953: LD_ADDR_VAR 0 8
37957: PUSH
37958: LD_INT 81
37960: PUSH
37961: LD_VAR 0 9
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 3
37972: PUSH
37973: LD_INT 21
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PPUSH
37991: CALL_OW 69
37995: ST_TO_ADDR
// if not tmp then
37996: LD_VAR 0 8
38000: NOT
38001: IFFALSE 38005
// exit ;
38003: GO 38463
// if in_unit then
38005: LD_VAR 0 11
38009: IFFALSE 38033
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38011: LD_ADDR_VAR 0 10
38015: PUSH
38016: LD_VAR 0 8
38020: PPUSH
38021: LD_VAR 0 11
38025: PPUSH
38026: CALL_OW 74
38030: ST_TO_ADDR
38031: GO 38053
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38033: LD_ADDR_VAR 0 10
38037: PUSH
38038: LD_VAR 0 8
38042: PPUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL_OW 74
38052: ST_TO_ADDR
// if not enemy then
38053: LD_VAR 0 10
38057: NOT
38058: IFFALSE 38062
// exit ;
38060: GO 38463
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38062: LD_VAR 0 11
38066: PUSH
38067: LD_VAR 0 11
38071: PPUSH
38072: LD_VAR 0 10
38076: PPUSH
38077: CALL_OW 296
38081: PUSH
38082: LD_INT 13
38084: GREATER
38085: AND
38086: PUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: LD_VAR 0 10
38096: PPUSH
38097: CALL_OW 296
38101: PUSH
38102: LD_INT 12
38104: GREATER
38105: OR
38106: IFFALSE 38110
// exit ;
38108: GO 38463
// missile := [ 1 ] ;
38110: LD_ADDR_VAR 0 14
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38121: LD_VAR 0 9
38125: PPUSH
38126: LD_VAR 0 12
38130: PPUSH
38131: CALL_OW 325
38135: IFFALSE 38164
// missile := Insert ( missile , missile + 1 , 2 ) ;
38137: LD_ADDR_VAR 0 14
38141: PUSH
38142: LD_VAR 0 14
38146: PPUSH
38147: LD_VAR 0 14
38151: PUSH
38152: LD_INT 1
38154: PLUS
38155: PPUSH
38156: LD_INT 2
38158: PPUSH
38159: CALL_OW 2
38163: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38164: LD_VAR 0 9
38168: PPUSH
38169: LD_VAR 0 13
38173: PPUSH
38174: CALL_OW 325
38178: PUSH
38179: LD_VAR 0 10
38183: PPUSH
38184: CALL_OW 255
38188: PPUSH
38189: LD_VAR 0 13
38193: PPUSH
38194: CALL_OW 325
38198: NOT
38199: AND
38200: IFFALSE 38229
// missile := Insert ( missile , missile + 1 , 3 ) ;
38202: LD_ADDR_VAR 0 14
38206: PUSH
38207: LD_VAR 0 14
38211: PPUSH
38212: LD_VAR 0 14
38216: PUSH
38217: LD_INT 1
38219: PLUS
38220: PPUSH
38221: LD_INT 3
38223: PPUSH
38224: CALL_OW 2
38228: ST_TO_ADDR
// if missile < 2 then
38229: LD_VAR 0 14
38233: PUSH
38234: LD_INT 2
38236: LESS
38237: IFFALSE 38241
// exit ;
38239: GO 38463
// x := GetX ( enemy ) ;
38241: LD_ADDR_VAR 0 4
38245: PUSH
38246: LD_VAR 0 10
38250: PPUSH
38251: CALL_OW 250
38255: ST_TO_ADDR
// y := GetY ( enemy ) ;
38256: LD_ADDR_VAR 0 5
38260: PUSH
38261: LD_VAR 0 10
38265: PPUSH
38266: CALL_OW 251
38270: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38271: LD_ADDR_VAR 0 6
38275: PUSH
38276: LD_VAR 0 4
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PPUSH
38285: LD_INT 1
38287: PPUSH
38288: CALL_OW 12
38292: PLUS
38293: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38294: LD_ADDR_VAR 0 7
38298: PUSH
38299: LD_VAR 0 5
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PPUSH
38308: LD_INT 1
38310: PPUSH
38311: CALL_OW 12
38315: PLUS
38316: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38317: LD_VAR 0 6
38321: PPUSH
38322: LD_VAR 0 7
38326: PPUSH
38327: CALL_OW 488
38331: NOT
38332: IFFALSE 38354
// begin _x := x ;
38334: LD_ADDR_VAR 0 6
38338: PUSH
38339: LD_VAR 0 4
38343: ST_TO_ADDR
// _y := y ;
38344: LD_ADDR_VAR 0 7
38348: PUSH
38349: LD_VAR 0 5
38353: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38354: LD_ADDR_VAR 0 3
38358: PUSH
38359: LD_INT 1
38361: PPUSH
38362: LD_VAR 0 14
38366: PPUSH
38367: CALL_OW 12
38371: ST_TO_ADDR
// case i of 1 :
38372: LD_VAR 0 3
38376: PUSH
38377: LD_INT 1
38379: DOUBLE
38380: EQUAL
38381: IFTRUE 38385
38383: GO 38402
38385: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38386: LD_VAR 0 1
38390: PPUSH
38391: LD_VAR 0 10
38395: PPUSH
38396: CALL_OW 115
38400: GO 38463
38402: LD_INT 2
38404: DOUBLE
38405: EQUAL
38406: IFTRUE 38410
38408: GO 38432
38410: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38411: LD_VAR 0 1
38415: PPUSH
38416: LD_VAR 0 6
38420: PPUSH
38421: LD_VAR 0 7
38425: PPUSH
38426: CALL_OW 153
38430: GO 38463
38432: LD_INT 3
38434: DOUBLE
38435: EQUAL
38436: IFTRUE 38440
38438: GO 38462
38440: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38441: LD_VAR 0 1
38445: PPUSH
38446: LD_VAR 0 6
38450: PPUSH
38451: LD_VAR 0 7
38455: PPUSH
38456: CALL_OW 154
38460: GO 38463
38462: POP
// end ;
38463: LD_VAR 0 2
38467: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38468: LD_INT 0
38470: PPUSH
38471: PPUSH
38472: PPUSH
38473: PPUSH
38474: PPUSH
38475: PPUSH
// if not unit or not building then
38476: LD_VAR 0 1
38480: NOT
38481: PUSH
38482: LD_VAR 0 2
38486: NOT
38487: OR
38488: IFFALSE 38492
// exit ;
38490: GO 38650
// x := GetX ( building ) ;
38492: LD_ADDR_VAR 0 5
38496: PUSH
38497: LD_VAR 0 2
38501: PPUSH
38502: CALL_OW 250
38506: ST_TO_ADDR
// y := GetY ( building ) ;
38507: LD_ADDR_VAR 0 6
38511: PUSH
38512: LD_VAR 0 2
38516: PPUSH
38517: CALL_OW 251
38521: ST_TO_ADDR
// for i = 0 to 5 do
38522: LD_ADDR_VAR 0 4
38526: PUSH
38527: DOUBLE
38528: LD_INT 0
38530: DEC
38531: ST_TO_ADDR
38532: LD_INT 5
38534: PUSH
38535: FOR_TO
38536: IFFALSE 38648
// begin _x := ShiftX ( x , i , 3 ) ;
38538: LD_ADDR_VAR 0 7
38542: PUSH
38543: LD_VAR 0 5
38547: PPUSH
38548: LD_VAR 0 4
38552: PPUSH
38553: LD_INT 3
38555: PPUSH
38556: CALL_OW 272
38560: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38561: LD_ADDR_VAR 0 8
38565: PUSH
38566: LD_VAR 0 6
38570: PPUSH
38571: LD_VAR 0 4
38575: PPUSH
38576: LD_INT 3
38578: PPUSH
38579: CALL_OW 273
38583: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38584: LD_VAR 0 7
38588: PPUSH
38589: LD_VAR 0 8
38593: PPUSH
38594: CALL_OW 488
38598: NOT
38599: IFFALSE 38603
// continue ;
38601: GO 38535
// if HexInfo ( _x , _y ) = 0 then
38603: LD_VAR 0 7
38607: PPUSH
38608: LD_VAR 0 8
38612: PPUSH
38613: CALL_OW 428
38617: PUSH
38618: LD_INT 0
38620: EQUAL
38621: IFFALSE 38646
// begin ComMoveXY ( unit , _x , _y ) ;
38623: LD_VAR 0 1
38627: PPUSH
38628: LD_VAR 0 7
38632: PPUSH
38633: LD_VAR 0 8
38637: PPUSH
38638: CALL_OW 111
// exit ;
38642: POP
38643: POP
38644: GO 38650
// end ; end ;
38646: GO 38535
38648: POP
38649: POP
// end ;
38650: LD_VAR 0 3
38654: RET
// export function ScanBase ( side , base_area ) ; begin
38655: LD_INT 0
38657: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38658: LD_ADDR_VAR 0 3
38662: PUSH
38663: LD_VAR 0 2
38667: PPUSH
38668: LD_INT 81
38670: PUSH
38671: LD_VAR 0 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PPUSH
38680: CALL_OW 70
38684: ST_TO_ADDR
// end ;
38685: LD_VAR 0 3
38689: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38690: LD_INT 0
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
// result := false ;
38696: LD_ADDR_VAR 0 2
38700: PUSH
38701: LD_INT 0
38703: ST_TO_ADDR
// side := GetSide ( unit ) ;
38704: LD_ADDR_VAR 0 3
38708: PUSH
38709: LD_VAR 0 1
38713: PPUSH
38714: CALL_OW 255
38718: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38719: LD_ADDR_VAR 0 4
38723: PUSH
38724: LD_VAR 0 1
38728: PPUSH
38729: CALL_OW 248
38733: ST_TO_ADDR
// case nat of 1 :
38734: LD_VAR 0 4
38738: PUSH
38739: LD_INT 1
38741: DOUBLE
38742: EQUAL
38743: IFTRUE 38747
38745: GO 38758
38747: POP
// tech := tech_lassight ; 2 :
38748: LD_ADDR_VAR 0 5
38752: PUSH
38753: LD_INT 12
38755: ST_TO_ADDR
38756: GO 38797
38758: LD_INT 2
38760: DOUBLE
38761: EQUAL
38762: IFTRUE 38766
38764: GO 38777
38766: POP
// tech := tech_mortar ; 3 :
38767: LD_ADDR_VAR 0 5
38771: PUSH
38772: LD_INT 41
38774: ST_TO_ADDR
38775: GO 38797
38777: LD_INT 3
38779: DOUBLE
38780: EQUAL
38781: IFTRUE 38785
38783: GO 38796
38785: POP
// tech := tech_bazooka ; end ;
38786: LD_ADDR_VAR 0 5
38790: PUSH
38791: LD_INT 44
38793: ST_TO_ADDR
38794: GO 38797
38796: POP
// if Researched ( side , tech ) then
38797: LD_VAR 0 3
38801: PPUSH
38802: LD_VAR 0 5
38806: PPUSH
38807: CALL_OW 325
38811: IFFALSE 38838
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38813: LD_ADDR_VAR 0 2
38817: PUSH
38818: LD_INT 5
38820: PUSH
38821: LD_INT 8
38823: PUSH
38824: LD_INT 9
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: PUSH
38832: LD_VAR 0 4
38836: ARRAY
38837: ST_TO_ADDR
// end ;
38838: LD_VAR 0 2
38842: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38843: LD_INT 0
38845: PPUSH
38846: PPUSH
38847: PPUSH
// if not mines then
38848: LD_VAR 0 2
38852: NOT
38853: IFFALSE 38857
// exit ;
38855: GO 39001
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38857: LD_ADDR_VAR 0 5
38861: PUSH
38862: LD_INT 81
38864: PUSH
38865: LD_VAR 0 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 3
38876: PUSH
38877: LD_INT 21
38879: PUSH
38880: LD_INT 3
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PPUSH
38895: CALL_OW 69
38899: ST_TO_ADDR
// for i in mines do
38900: LD_ADDR_VAR 0 4
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: FOR_IN
38911: IFFALSE 38999
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38913: LD_VAR 0 4
38917: PUSH
38918: LD_INT 1
38920: ARRAY
38921: PPUSH
38922: LD_VAR 0 4
38926: PUSH
38927: LD_INT 2
38929: ARRAY
38930: PPUSH
38931: CALL_OW 458
38935: NOT
38936: IFFALSE 38940
// continue ;
38938: GO 38910
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38940: LD_VAR 0 4
38944: PUSH
38945: LD_INT 1
38947: ARRAY
38948: PPUSH
38949: LD_VAR 0 4
38953: PUSH
38954: LD_INT 2
38956: ARRAY
38957: PPUSH
38958: CALL_OW 428
38962: PUSH
38963: LD_VAR 0 5
38967: IN
38968: IFFALSE 38997
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38970: LD_VAR 0 4
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PPUSH
38979: LD_VAR 0 4
38983: PUSH
38984: LD_INT 2
38986: ARRAY
38987: PPUSH
38988: LD_VAR 0 1
38992: PPUSH
38993: CALL_OW 456
// end ;
38997: GO 38910
38999: POP
39000: POP
// end ;
39001: LD_VAR 0 3
39005: RET
// export function Count ( array ) ; var i ; begin
39006: LD_INT 0
39008: PPUSH
39009: PPUSH
// result := 0 ;
39010: LD_ADDR_VAR 0 2
39014: PUSH
39015: LD_INT 0
39017: ST_TO_ADDR
// for i in array do
39018: LD_ADDR_VAR 0 3
39022: PUSH
39023: LD_VAR 0 1
39027: PUSH
39028: FOR_IN
39029: IFFALSE 39053
// if i then
39031: LD_VAR 0 3
39035: IFFALSE 39051
// result := result + 1 ;
39037: LD_ADDR_VAR 0 2
39041: PUSH
39042: LD_VAR 0 2
39046: PUSH
39047: LD_INT 1
39049: PLUS
39050: ST_TO_ADDR
39051: GO 39028
39053: POP
39054: POP
// end ;
39055: LD_VAR 0 2
39059: RET
// export function IsEmpty ( building ) ; begin
39060: LD_INT 0
39062: PPUSH
// if not building then
39063: LD_VAR 0 1
39067: NOT
39068: IFFALSE 39072
// exit ;
39070: GO 39115
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39072: LD_ADDR_VAR 0 2
39076: PUSH
39077: LD_VAR 0 1
39081: PUSH
39082: LD_INT 22
39084: PUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 255
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 58
39101: PUSH
39102: EMPTY
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PPUSH
39109: CALL_OW 69
39113: IN
39114: ST_TO_ADDR
// end ;
39115: LD_VAR 0 2
39119: RET
// export function IsNotFull ( building ) ; begin
39120: LD_INT 0
39122: PPUSH
// if not building then
39123: LD_VAR 0 1
39127: NOT
39128: IFFALSE 39132
// exit ;
39130: GO 39151
// result := UnitsInside ( building ) < 6 ;
39132: LD_ADDR_VAR 0 2
39136: PUSH
39137: LD_VAR 0 1
39141: PPUSH
39142: CALL_OW 313
39146: PUSH
39147: LD_INT 6
39149: LESS
39150: ST_TO_ADDR
// end ;
39151: LD_VAR 0 2
39155: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39156: LD_INT 0
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
// tmp := [ ] ;
39162: LD_ADDR_VAR 0 3
39166: PUSH
39167: EMPTY
39168: ST_TO_ADDR
// list := [ ] ;
39169: LD_ADDR_VAR 0 5
39173: PUSH
39174: EMPTY
39175: ST_TO_ADDR
// for i = 16 to 25 do
39176: LD_ADDR_VAR 0 4
39180: PUSH
39181: DOUBLE
39182: LD_INT 16
39184: DEC
39185: ST_TO_ADDR
39186: LD_INT 25
39188: PUSH
39189: FOR_TO
39190: IFFALSE 39263
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39192: LD_ADDR_VAR 0 3
39196: PUSH
39197: LD_VAR 0 3
39201: PUSH
39202: LD_INT 22
39204: PUSH
39205: LD_VAR 0 1
39209: PPUSH
39210: CALL_OW 255
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 91
39221: PUSH
39222: LD_VAR 0 1
39226: PUSH
39227: LD_INT 6
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 30
39237: PUSH
39238: LD_VAR 0 4
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: PUSH
39252: EMPTY
39253: LIST
39254: PPUSH
39255: CALL_OW 69
39259: ADD
39260: ST_TO_ADDR
39261: GO 39189
39263: POP
39264: POP
// for i = 1 to tmp do
39265: LD_ADDR_VAR 0 4
39269: PUSH
39270: DOUBLE
39271: LD_INT 1
39273: DEC
39274: ST_TO_ADDR
39275: LD_VAR 0 3
39279: PUSH
39280: FOR_TO
39281: IFFALSE 39369
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39283: LD_ADDR_VAR 0 5
39287: PUSH
39288: LD_VAR 0 5
39292: PUSH
39293: LD_VAR 0 3
39297: PUSH
39298: LD_VAR 0 4
39302: ARRAY
39303: PPUSH
39304: CALL_OW 266
39308: PUSH
39309: LD_VAR 0 3
39313: PUSH
39314: LD_VAR 0 4
39318: ARRAY
39319: PPUSH
39320: CALL_OW 250
39324: PUSH
39325: LD_VAR 0 3
39329: PUSH
39330: LD_VAR 0 4
39334: ARRAY
39335: PPUSH
39336: CALL_OW 251
39340: PUSH
39341: LD_VAR 0 3
39345: PUSH
39346: LD_VAR 0 4
39350: ARRAY
39351: PPUSH
39352: CALL_OW 254
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: PUSH
39363: EMPTY
39364: LIST
39365: ADD
39366: ST_TO_ADDR
39367: GO 39280
39369: POP
39370: POP
// result := list ;
39371: LD_ADDR_VAR 0 2
39375: PUSH
39376: LD_VAR 0 5
39380: ST_TO_ADDR
// end ;
39381: LD_VAR 0 2
39385: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39386: LD_INT 0
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
// if not factory then
39395: LD_VAR 0 1
39399: NOT
39400: IFFALSE 39404
// exit ;
39402: GO 39997
// if control = control_apeman then
39404: LD_VAR 0 4
39408: PUSH
39409: LD_INT 5
39411: EQUAL
39412: IFFALSE 39521
// begin tmp := UnitsInside ( factory ) ;
39414: LD_ADDR_VAR 0 8
39418: PUSH
39419: LD_VAR 0 1
39423: PPUSH
39424: CALL_OW 313
39428: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39429: LD_VAR 0 8
39433: PPUSH
39434: LD_INT 25
39436: PUSH
39437: LD_INT 12
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PPUSH
39444: CALL_OW 72
39448: NOT
39449: IFFALSE 39459
// control := control_manual ;
39451: LD_ADDR_VAR 0 4
39455: PUSH
39456: LD_INT 1
39458: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39459: LD_ADDR_VAR 0 8
39463: PUSH
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL 39156 0 1
39473: ST_TO_ADDR
// if tmp then
39474: LD_VAR 0 8
39478: IFFALSE 39521
// begin for i in tmp do
39480: LD_ADDR_VAR 0 7
39484: PUSH
39485: LD_VAR 0 8
39489: PUSH
39490: FOR_IN
39491: IFFALSE 39519
// if i [ 1 ] = b_ext_radio then
39493: LD_VAR 0 7
39497: PUSH
39498: LD_INT 1
39500: ARRAY
39501: PUSH
39502: LD_INT 22
39504: EQUAL
39505: IFFALSE 39517
// begin control := control_remote ;
39507: LD_ADDR_VAR 0 4
39511: PUSH
39512: LD_INT 2
39514: ST_TO_ADDR
// break ;
39515: GO 39519
// end ;
39517: GO 39490
39519: POP
39520: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39521: LD_VAR 0 1
39525: PPUSH
39526: LD_VAR 0 2
39530: PPUSH
39531: LD_VAR 0 3
39535: PPUSH
39536: LD_VAR 0 4
39540: PPUSH
39541: LD_VAR 0 5
39545: PPUSH
39546: CALL_OW 448
39550: IFFALSE 39585
// begin result := [ chassis , engine , control , weapon ] ;
39552: LD_ADDR_VAR 0 6
39556: PUSH
39557: LD_VAR 0 2
39561: PUSH
39562: LD_VAR 0 3
39566: PUSH
39567: LD_VAR 0 4
39571: PUSH
39572: LD_VAR 0 5
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: ST_TO_ADDR
// exit ;
39583: GO 39997
// end ; _chassis := AvailableChassisList ( factory ) ;
39585: LD_ADDR_VAR 0 9
39589: PUSH
39590: LD_VAR 0 1
39594: PPUSH
39595: CALL_OW 475
39599: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39600: LD_ADDR_VAR 0 11
39604: PUSH
39605: LD_VAR 0 1
39609: PPUSH
39610: CALL_OW 476
39614: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39615: LD_ADDR_VAR 0 12
39619: PUSH
39620: LD_VAR 0 1
39624: PPUSH
39625: CALL_OW 477
39629: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39630: LD_ADDR_VAR 0 10
39634: PUSH
39635: LD_VAR 0 1
39639: PPUSH
39640: CALL_OW 478
39644: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39645: LD_VAR 0 9
39649: NOT
39650: PUSH
39651: LD_VAR 0 11
39655: NOT
39656: OR
39657: PUSH
39658: LD_VAR 0 12
39662: NOT
39663: OR
39664: PUSH
39665: LD_VAR 0 10
39669: NOT
39670: OR
39671: IFFALSE 39706
// begin result := [ chassis , engine , control , weapon ] ;
39673: LD_ADDR_VAR 0 6
39677: PUSH
39678: LD_VAR 0 2
39682: PUSH
39683: LD_VAR 0 3
39687: PUSH
39688: LD_VAR 0 4
39692: PUSH
39693: LD_VAR 0 5
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: ST_TO_ADDR
// exit ;
39704: GO 39997
// end ; if not chassis in _chassis then
39706: LD_VAR 0 2
39710: PUSH
39711: LD_VAR 0 9
39715: IN
39716: NOT
39717: IFFALSE 39743
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39719: LD_ADDR_VAR 0 2
39723: PUSH
39724: LD_VAR 0 9
39728: PUSH
39729: LD_INT 1
39731: PPUSH
39732: LD_VAR 0 9
39736: PPUSH
39737: CALL_OW 12
39741: ARRAY
39742: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39743: LD_VAR 0 2
39747: PPUSH
39748: LD_VAR 0 3
39752: PPUSH
39753: CALL 40002 0 2
39757: NOT
39758: IFFALSE 39817
// repeat engine := _engine [ 1 ] ;
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_VAR 0 11
39769: PUSH
39770: LD_INT 1
39772: ARRAY
39773: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39774: LD_ADDR_VAR 0 11
39778: PUSH
39779: LD_VAR 0 11
39783: PPUSH
39784: LD_INT 1
39786: PPUSH
39787: CALL_OW 3
39791: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39792: LD_VAR 0 2
39796: PPUSH
39797: LD_VAR 0 3
39801: PPUSH
39802: CALL 40002 0 2
39806: PUSH
39807: LD_VAR 0 11
39811: PUSH
39812: EMPTY
39813: EQUAL
39814: OR
39815: IFFALSE 39760
// if not control in _control then
39817: LD_VAR 0 4
39821: PUSH
39822: LD_VAR 0 12
39826: IN
39827: NOT
39828: IFFALSE 39854
// control := _control [ rand ( 1 , _control ) ] ;
39830: LD_ADDR_VAR 0 4
39834: PUSH
39835: LD_VAR 0 12
39839: PUSH
39840: LD_INT 1
39842: PPUSH
39843: LD_VAR 0 12
39847: PPUSH
39848: CALL_OW 12
39852: ARRAY
39853: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39854: LD_VAR 0 2
39858: PPUSH
39859: LD_VAR 0 5
39863: PPUSH
39864: CALL 40222 0 2
39868: NOT
39869: IFFALSE 39928
// repeat weapon := _weapon [ 1 ] ;
39871: LD_ADDR_VAR 0 5
39875: PUSH
39876: LD_VAR 0 10
39880: PUSH
39881: LD_INT 1
39883: ARRAY
39884: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39885: LD_ADDR_VAR 0 10
39889: PUSH
39890: LD_VAR 0 10
39894: PPUSH
39895: LD_INT 1
39897: PPUSH
39898: CALL_OW 3
39902: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39903: LD_VAR 0 2
39907: PPUSH
39908: LD_VAR 0 5
39912: PPUSH
39913: CALL 40222 0 2
39917: PUSH
39918: LD_VAR 0 10
39922: PUSH
39923: EMPTY
39924: EQUAL
39925: OR
39926: IFFALSE 39871
// result := [ ] ;
39928: LD_ADDR_VAR 0 6
39932: PUSH
39933: EMPTY
39934: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39935: LD_VAR 0 1
39939: PPUSH
39940: LD_VAR 0 2
39944: PPUSH
39945: LD_VAR 0 3
39949: PPUSH
39950: LD_VAR 0 4
39954: PPUSH
39955: LD_VAR 0 5
39959: PPUSH
39960: CALL_OW 448
39964: IFFALSE 39997
// result := [ chassis , engine , control , weapon ] ;
39966: LD_ADDR_VAR 0 6
39970: PUSH
39971: LD_VAR 0 2
39975: PUSH
39976: LD_VAR 0 3
39980: PUSH
39981: LD_VAR 0 4
39985: PUSH
39986: LD_VAR 0 5
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: ST_TO_ADDR
// end ;
39997: LD_VAR 0 6
40001: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40002: LD_INT 0
40004: PPUSH
// if not chassis or not engine then
40005: LD_VAR 0 1
40009: NOT
40010: PUSH
40011: LD_VAR 0 2
40015: NOT
40016: OR
40017: IFFALSE 40021
// exit ;
40019: GO 40217
// case engine of engine_solar :
40021: LD_VAR 0 2
40025: PUSH
40026: LD_INT 2
40028: DOUBLE
40029: EQUAL
40030: IFTRUE 40034
40032: GO 40072
40034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40035: LD_ADDR_VAR 0 3
40039: PUSH
40040: LD_INT 11
40042: PUSH
40043: LD_INT 12
40045: PUSH
40046: LD_INT 13
40048: PUSH
40049: LD_INT 14
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: ST_TO_ADDR
40070: GO 40201
40072: LD_INT 1
40074: DOUBLE
40075: EQUAL
40076: IFTRUE 40080
40078: GO 40142
40080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40081: LD_ADDR_VAR 0 3
40085: PUSH
40086: LD_INT 11
40088: PUSH
40089: LD_INT 12
40091: PUSH
40092: LD_INT 13
40094: PUSH
40095: LD_INT 14
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 3
40106: PUSH
40107: LD_INT 4
40109: PUSH
40110: LD_INT 5
40112: PUSH
40113: LD_INT 21
40115: PUSH
40116: LD_INT 23
40118: PUSH
40119: LD_INT 22
40121: PUSH
40122: LD_INT 24
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: ST_TO_ADDR
40140: GO 40201
40142: LD_INT 3
40144: DOUBLE
40145: EQUAL
40146: IFTRUE 40150
40148: GO 40200
40150: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40151: LD_ADDR_VAR 0 3
40155: PUSH
40156: LD_INT 13
40158: PUSH
40159: LD_INT 14
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 3
40167: PUSH
40168: LD_INT 4
40170: PUSH
40171: LD_INT 5
40173: PUSH
40174: LD_INT 21
40176: PUSH
40177: LD_INT 22
40179: PUSH
40180: LD_INT 23
40182: PUSH
40183: LD_INT 24
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: ST_TO_ADDR
40198: GO 40201
40200: POP
// result := ( chassis in result ) ;
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_VAR 0 1
40210: PUSH
40211: LD_VAR 0 3
40215: IN
40216: ST_TO_ADDR
// end ;
40217: LD_VAR 0 3
40221: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40222: LD_INT 0
40224: PPUSH
// if not chassis or not weapon then
40225: LD_VAR 0 1
40229: NOT
40230: PUSH
40231: LD_VAR 0 2
40235: NOT
40236: OR
40237: IFFALSE 40241
// exit ;
40239: GO 41267
// case weapon of us_machine_gun :
40241: LD_VAR 0 2
40245: PUSH
40246: LD_INT 2
40248: DOUBLE
40249: EQUAL
40250: IFTRUE 40254
40252: GO 40284
40254: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40255: LD_ADDR_VAR 0 3
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: LD_INT 4
40271: PUSH
40272: LD_INT 5
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: ST_TO_ADDR
40282: GO 41251
40284: LD_INT 3
40286: DOUBLE
40287: EQUAL
40288: IFTRUE 40292
40290: GO 40322
40292: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40293: LD_ADDR_VAR 0 3
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: LD_INT 4
40309: PUSH
40310: LD_INT 5
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: ST_TO_ADDR
40320: GO 41251
40322: LD_INT 11
40324: DOUBLE
40325: EQUAL
40326: IFTRUE 40330
40328: GO 40360
40330: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40331: LD_ADDR_VAR 0 3
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 3
40344: PUSH
40345: LD_INT 4
40347: PUSH
40348: LD_INT 5
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: ST_TO_ADDR
40358: GO 41251
40360: LD_INT 4
40362: DOUBLE
40363: EQUAL
40364: IFTRUE 40368
40366: GO 40394
40368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40369: LD_ADDR_VAR 0 3
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 3
40379: PUSH
40380: LD_INT 4
40382: PUSH
40383: LD_INT 5
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: ST_TO_ADDR
40392: GO 41251
40394: LD_INT 5
40396: DOUBLE
40397: EQUAL
40398: IFTRUE 40402
40400: GO 40428
40402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40403: LD_ADDR_VAR 0 3
40407: PUSH
40408: LD_INT 2
40410: PUSH
40411: LD_INT 3
40413: PUSH
40414: LD_INT 4
40416: PUSH
40417: LD_INT 5
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: ST_TO_ADDR
40426: GO 41251
40428: LD_INT 9
40430: DOUBLE
40431: EQUAL
40432: IFTRUE 40436
40434: GO 40462
40436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40437: LD_ADDR_VAR 0 3
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: LD_INT 3
40447: PUSH
40448: LD_INT 4
40450: PUSH
40451: LD_INT 5
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: ST_TO_ADDR
40460: GO 41251
40462: LD_INT 7
40464: DOUBLE
40465: EQUAL
40466: IFTRUE 40470
40468: GO 40496
40470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40471: LD_ADDR_VAR 0 3
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: LD_INT 4
40484: PUSH
40485: LD_INT 5
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: ST_TO_ADDR
40494: GO 41251
40496: LD_INT 12
40498: DOUBLE
40499: EQUAL
40500: IFTRUE 40504
40502: GO 40530
40504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40505: LD_ADDR_VAR 0 3
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 3
40515: PUSH
40516: LD_INT 4
40518: PUSH
40519: LD_INT 5
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
40528: GO 41251
40530: LD_INT 13
40532: DOUBLE
40533: EQUAL
40534: IFTRUE 40538
40536: GO 40564
40538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40539: LD_ADDR_VAR 0 3
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 3
40549: PUSH
40550: LD_INT 4
40552: PUSH
40553: LD_INT 5
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: ST_TO_ADDR
40562: GO 41251
40564: LD_INT 14
40566: DOUBLE
40567: EQUAL
40568: IFTRUE 40572
40570: GO 40590
40572: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40573: LD_ADDR_VAR 0 3
40577: PUSH
40578: LD_INT 4
40580: PUSH
40581: LD_INT 5
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: ST_TO_ADDR
40588: GO 41251
40590: LD_INT 6
40592: DOUBLE
40593: EQUAL
40594: IFTRUE 40598
40596: GO 40616
40598: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40599: LD_ADDR_VAR 0 3
40603: PUSH
40604: LD_INT 4
40606: PUSH
40607: LD_INT 5
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: ST_TO_ADDR
40614: GO 41251
40616: LD_INT 10
40618: DOUBLE
40619: EQUAL
40620: IFTRUE 40624
40622: GO 40642
40624: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40625: LD_ADDR_VAR 0 3
40629: PUSH
40630: LD_INT 4
40632: PUSH
40633: LD_INT 5
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: ST_TO_ADDR
40640: GO 41251
40642: LD_INT 22
40644: DOUBLE
40645: EQUAL
40646: IFTRUE 40650
40648: GO 40676
40650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40651: LD_ADDR_VAR 0 3
40655: PUSH
40656: LD_INT 11
40658: PUSH
40659: LD_INT 12
40661: PUSH
40662: LD_INT 13
40664: PUSH
40665: LD_INT 14
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: ST_TO_ADDR
40674: GO 41251
40676: LD_INT 23
40678: DOUBLE
40679: EQUAL
40680: IFTRUE 40684
40682: GO 40710
40684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40685: LD_ADDR_VAR 0 3
40689: PUSH
40690: LD_INT 11
40692: PUSH
40693: LD_INT 12
40695: PUSH
40696: LD_INT 13
40698: PUSH
40699: LD_INT 14
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: ST_TO_ADDR
40708: GO 41251
40710: LD_INT 24
40712: DOUBLE
40713: EQUAL
40714: IFTRUE 40718
40716: GO 40744
40718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40719: LD_ADDR_VAR 0 3
40723: PUSH
40724: LD_INT 11
40726: PUSH
40727: LD_INT 12
40729: PUSH
40730: LD_INT 13
40732: PUSH
40733: LD_INT 14
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: ST_TO_ADDR
40742: GO 41251
40744: LD_INT 30
40746: DOUBLE
40747: EQUAL
40748: IFTRUE 40752
40750: GO 40778
40752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40753: LD_ADDR_VAR 0 3
40757: PUSH
40758: LD_INT 11
40760: PUSH
40761: LD_INT 12
40763: PUSH
40764: LD_INT 13
40766: PUSH
40767: LD_INT 14
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: ST_TO_ADDR
40776: GO 41251
40778: LD_INT 25
40780: DOUBLE
40781: EQUAL
40782: IFTRUE 40786
40784: GO 40804
40786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40787: LD_ADDR_VAR 0 3
40791: PUSH
40792: LD_INT 13
40794: PUSH
40795: LD_INT 14
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: ST_TO_ADDR
40802: GO 41251
40804: LD_INT 27
40806: DOUBLE
40807: EQUAL
40808: IFTRUE 40812
40810: GO 40830
40812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40813: LD_ADDR_VAR 0 3
40817: PUSH
40818: LD_INT 13
40820: PUSH
40821: LD_INT 14
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: ST_TO_ADDR
40828: GO 41251
40830: LD_INT 28
40832: DOUBLE
40833: EQUAL
40834: IFTRUE 40838
40836: GO 40856
40838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40839: LD_ADDR_VAR 0 3
40843: PUSH
40844: LD_INT 13
40846: PUSH
40847: LD_INT 14
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: ST_TO_ADDR
40854: GO 41251
40856: LD_INT 29
40858: DOUBLE
40859: EQUAL
40860: IFTRUE 40864
40862: GO 40882
40864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40865: LD_ADDR_VAR 0 3
40869: PUSH
40870: LD_INT 13
40872: PUSH
40873: LD_INT 14
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: ST_TO_ADDR
40880: GO 41251
40882: LD_INT 31
40884: DOUBLE
40885: EQUAL
40886: IFTRUE 40890
40888: GO 40908
40890: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40891: LD_ADDR_VAR 0 3
40895: PUSH
40896: LD_INT 13
40898: PUSH
40899: LD_INT 14
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: ST_TO_ADDR
40906: GO 41251
40908: LD_INT 26
40910: DOUBLE
40911: EQUAL
40912: IFTRUE 40916
40914: GO 40934
40916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40917: LD_ADDR_VAR 0 3
40921: PUSH
40922: LD_INT 13
40924: PUSH
40925: LD_INT 14
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: ST_TO_ADDR
40932: GO 41251
40934: LD_INT 42
40936: DOUBLE
40937: EQUAL
40938: IFTRUE 40942
40940: GO 40968
40942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40943: LD_ADDR_VAR 0 3
40947: PUSH
40948: LD_INT 21
40950: PUSH
40951: LD_INT 22
40953: PUSH
40954: LD_INT 23
40956: PUSH
40957: LD_INT 24
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: ST_TO_ADDR
40966: GO 41251
40968: LD_INT 43
40970: DOUBLE
40971: EQUAL
40972: IFTRUE 40976
40974: GO 41002
40976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40977: LD_ADDR_VAR 0 3
40981: PUSH
40982: LD_INT 21
40984: PUSH
40985: LD_INT 22
40987: PUSH
40988: LD_INT 23
40990: PUSH
40991: LD_INT 24
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: ST_TO_ADDR
41000: GO 41251
41002: LD_INT 44
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41036
41010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41011: LD_ADDR_VAR 0 3
41015: PUSH
41016: LD_INT 21
41018: PUSH
41019: LD_INT 22
41021: PUSH
41022: LD_INT 23
41024: PUSH
41025: LD_INT 24
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
41034: GO 41251
41036: LD_INT 45
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41044
41042: GO 41070
41044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_INT 21
41052: PUSH
41053: LD_INT 22
41055: PUSH
41056: LD_INT 23
41058: PUSH
41059: LD_INT 24
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: ST_TO_ADDR
41068: GO 41251
41070: LD_INT 49
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41104
41078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_INT 21
41086: PUSH
41087: LD_INT 22
41089: PUSH
41090: LD_INT 23
41092: PUSH
41093: LD_INT 24
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: ST_TO_ADDR
41102: GO 41251
41104: LD_INT 51
41106: DOUBLE
41107: EQUAL
41108: IFTRUE 41112
41110: GO 41138
41112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41113: LD_ADDR_VAR 0 3
41117: PUSH
41118: LD_INT 21
41120: PUSH
41121: LD_INT 22
41123: PUSH
41124: LD_INT 23
41126: PUSH
41127: LD_INT 24
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: ST_TO_ADDR
41136: GO 41251
41138: LD_INT 52
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41146
41144: GO 41172
41146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_INT 21
41154: PUSH
41155: LD_INT 22
41157: PUSH
41158: LD_INT 23
41160: PUSH
41161: LD_INT 24
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
41170: GO 41251
41172: LD_INT 53
41174: DOUBLE
41175: EQUAL
41176: IFTRUE 41180
41178: GO 41198
41180: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41181: LD_ADDR_VAR 0 3
41185: PUSH
41186: LD_INT 23
41188: PUSH
41189: LD_INT 24
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: ST_TO_ADDR
41196: GO 41251
41198: LD_INT 46
41200: DOUBLE
41201: EQUAL
41202: IFTRUE 41206
41204: GO 41224
41206: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41207: LD_ADDR_VAR 0 3
41211: PUSH
41212: LD_INT 23
41214: PUSH
41215: LD_INT 24
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: ST_TO_ADDR
41222: GO 41251
41224: LD_INT 47
41226: DOUBLE
41227: EQUAL
41228: IFTRUE 41232
41230: GO 41250
41232: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41233: LD_ADDR_VAR 0 3
41237: PUSH
41238: LD_INT 23
41240: PUSH
41241: LD_INT 24
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: ST_TO_ADDR
41248: GO 41251
41250: POP
// result := ( chassis in result ) ;
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_VAR 0 1
41260: PUSH
41261: LD_VAR 0 3
41265: IN
41266: ST_TO_ADDR
// end ;
41267: LD_VAR 0 3
41271: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41272: LD_INT 0
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
// result := array ;
41281: LD_ADDR_VAR 0 5
41285: PUSH
41286: LD_VAR 0 1
41290: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41291: LD_VAR 0 1
41295: NOT
41296: PUSH
41297: LD_VAR 0 2
41301: NOT
41302: OR
41303: PUSH
41304: LD_VAR 0 3
41308: NOT
41309: OR
41310: PUSH
41311: LD_VAR 0 2
41315: PUSH
41316: LD_VAR 0 1
41320: GREATER
41321: OR
41322: PUSH
41323: LD_VAR 0 3
41327: PUSH
41328: LD_VAR 0 1
41332: GREATER
41333: OR
41334: IFFALSE 41338
// exit ;
41336: GO 41634
// if direction then
41338: LD_VAR 0 4
41342: IFFALSE 41406
// begin d := 1 ;
41344: LD_ADDR_VAR 0 9
41348: PUSH
41349: LD_INT 1
41351: ST_TO_ADDR
// if i_from > i_to then
41352: LD_VAR 0 2
41356: PUSH
41357: LD_VAR 0 3
41361: GREATER
41362: IFFALSE 41388
// length := ( array - i_from ) + i_to else
41364: LD_ADDR_VAR 0 11
41368: PUSH
41369: LD_VAR 0 1
41373: PUSH
41374: LD_VAR 0 2
41378: MINUS
41379: PUSH
41380: LD_VAR 0 3
41384: PLUS
41385: ST_TO_ADDR
41386: GO 41404
// length := i_to - i_from ;
41388: LD_ADDR_VAR 0 11
41392: PUSH
41393: LD_VAR 0 3
41397: PUSH
41398: LD_VAR 0 2
41402: MINUS
41403: ST_TO_ADDR
// end else
41404: GO 41467
// begin d := - 1 ;
41406: LD_ADDR_VAR 0 9
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: ST_TO_ADDR
// if i_from > i_to then
41415: LD_VAR 0 2
41419: PUSH
41420: LD_VAR 0 3
41424: GREATER
41425: IFFALSE 41445
// length := i_from - i_to else
41427: LD_ADDR_VAR 0 11
41431: PUSH
41432: LD_VAR 0 2
41436: PUSH
41437: LD_VAR 0 3
41441: MINUS
41442: ST_TO_ADDR
41443: GO 41467
// length := ( array - i_to ) + i_from ;
41445: LD_ADDR_VAR 0 11
41449: PUSH
41450: LD_VAR 0 1
41454: PUSH
41455: LD_VAR 0 3
41459: MINUS
41460: PUSH
41461: LD_VAR 0 2
41465: PLUS
41466: ST_TO_ADDR
// end ; if not length then
41467: LD_VAR 0 11
41471: NOT
41472: IFFALSE 41476
// exit ;
41474: GO 41634
// tmp := array ;
41476: LD_ADDR_VAR 0 10
41480: PUSH
41481: LD_VAR 0 1
41485: ST_TO_ADDR
// for i = 1 to length do
41486: LD_ADDR_VAR 0 6
41490: PUSH
41491: DOUBLE
41492: LD_INT 1
41494: DEC
41495: ST_TO_ADDR
41496: LD_VAR 0 11
41500: PUSH
41501: FOR_TO
41502: IFFALSE 41622
// begin for j = 1 to array do
41504: LD_ADDR_VAR 0 7
41508: PUSH
41509: DOUBLE
41510: LD_INT 1
41512: DEC
41513: ST_TO_ADDR
41514: LD_VAR 0 1
41518: PUSH
41519: FOR_TO
41520: IFFALSE 41608
// begin k := j + d ;
41522: LD_ADDR_VAR 0 8
41526: PUSH
41527: LD_VAR 0 7
41531: PUSH
41532: LD_VAR 0 9
41536: PLUS
41537: ST_TO_ADDR
// if k > array then
41538: LD_VAR 0 8
41542: PUSH
41543: LD_VAR 0 1
41547: GREATER
41548: IFFALSE 41558
// k := 1 ;
41550: LD_ADDR_VAR 0 8
41554: PUSH
41555: LD_INT 1
41557: ST_TO_ADDR
// if not k then
41558: LD_VAR 0 8
41562: NOT
41563: IFFALSE 41575
// k := array ;
41565: LD_ADDR_VAR 0 8
41569: PUSH
41570: LD_VAR 0 1
41574: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41575: LD_ADDR_VAR 0 10
41579: PUSH
41580: LD_VAR 0 10
41584: PPUSH
41585: LD_VAR 0 8
41589: PPUSH
41590: LD_VAR 0 1
41594: PUSH
41595: LD_VAR 0 7
41599: ARRAY
41600: PPUSH
41601: CALL_OW 1
41605: ST_TO_ADDR
// end ;
41606: GO 41519
41608: POP
41609: POP
// array := tmp ;
41610: LD_ADDR_VAR 0 1
41614: PUSH
41615: LD_VAR 0 10
41619: ST_TO_ADDR
// end ;
41620: GO 41501
41622: POP
41623: POP
// result := array ;
41624: LD_ADDR_VAR 0 5
41628: PUSH
41629: LD_VAR 0 1
41633: ST_TO_ADDR
// end ;
41634: LD_VAR 0 5
41638: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41639: LD_INT 0
41641: PPUSH
41642: PPUSH
// result := 0 ;
41643: LD_ADDR_VAR 0 3
41647: PUSH
41648: LD_INT 0
41650: ST_TO_ADDR
// if not array or not value in array then
41651: LD_VAR 0 1
41655: NOT
41656: PUSH
41657: LD_VAR 0 2
41661: PUSH
41662: LD_VAR 0 1
41666: IN
41667: NOT
41668: OR
41669: IFFALSE 41673
// exit ;
41671: GO 41727
// for i = 1 to array do
41673: LD_ADDR_VAR 0 4
41677: PUSH
41678: DOUBLE
41679: LD_INT 1
41681: DEC
41682: ST_TO_ADDR
41683: LD_VAR 0 1
41687: PUSH
41688: FOR_TO
41689: IFFALSE 41725
// if value = array [ i ] then
41691: LD_VAR 0 2
41695: PUSH
41696: LD_VAR 0 1
41700: PUSH
41701: LD_VAR 0 4
41705: ARRAY
41706: EQUAL
41707: IFFALSE 41723
// begin result := i ;
41709: LD_ADDR_VAR 0 3
41713: PUSH
41714: LD_VAR 0 4
41718: ST_TO_ADDR
// exit ;
41719: POP
41720: POP
41721: GO 41727
// end ;
41723: GO 41688
41725: POP
41726: POP
// end ;
41727: LD_VAR 0 3
41731: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41732: LD_INT 0
41734: PPUSH
// vc_chassis := chassis ;
41735: LD_ADDR_OWVAR 37
41739: PUSH
41740: LD_VAR 0 1
41744: ST_TO_ADDR
// vc_engine := engine ;
41745: LD_ADDR_OWVAR 39
41749: PUSH
41750: LD_VAR 0 2
41754: ST_TO_ADDR
// vc_control := control ;
41755: LD_ADDR_OWVAR 38
41759: PUSH
41760: LD_VAR 0 3
41764: ST_TO_ADDR
// vc_weapon := weapon ;
41765: LD_ADDR_OWVAR 40
41769: PUSH
41770: LD_VAR 0 4
41774: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41775: LD_ADDR_OWVAR 41
41779: PUSH
41780: LD_VAR 0 5
41784: ST_TO_ADDR
// end ;
41785: LD_VAR 0 6
41789: RET
// export function WantPlant ( unit ) ; var task ; begin
41790: LD_INT 0
41792: PPUSH
41793: PPUSH
// result := false ;
41794: LD_ADDR_VAR 0 2
41798: PUSH
41799: LD_INT 0
41801: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41802: LD_ADDR_VAR 0 3
41806: PUSH
41807: LD_VAR 0 1
41811: PPUSH
41812: CALL_OW 437
41816: ST_TO_ADDR
// if task then
41817: LD_VAR 0 3
41821: IFFALSE 41849
// if task [ 1 ] [ 1 ] = p then
41823: LD_VAR 0 3
41827: PUSH
41828: LD_INT 1
41830: ARRAY
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PUSH
41836: LD_STRING p
41838: EQUAL
41839: IFFALSE 41849
// result := true ;
41841: LD_ADDR_VAR 0 2
41845: PUSH
41846: LD_INT 1
41848: ST_TO_ADDR
// end ;
41849: LD_VAR 0 2
41853: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41854: LD_INT 0
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
// if pos < 1 then
41860: LD_VAR 0 2
41864: PUSH
41865: LD_INT 1
41867: LESS
41868: IFFALSE 41872
// exit ;
41870: GO 42175
// if pos = 1 then
41872: LD_VAR 0 2
41876: PUSH
41877: LD_INT 1
41879: EQUAL
41880: IFFALSE 41913
// result := Replace ( arr , pos [ 1 ] , value ) else
41882: LD_ADDR_VAR 0 4
41886: PUSH
41887: LD_VAR 0 1
41891: PPUSH
41892: LD_VAR 0 2
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: PPUSH
41901: LD_VAR 0 3
41905: PPUSH
41906: CALL_OW 1
41910: ST_TO_ADDR
41911: GO 42175
// begin tmp := arr ;
41913: LD_ADDR_VAR 0 6
41917: PUSH
41918: LD_VAR 0 1
41922: ST_TO_ADDR
// s_arr := [ tmp ] ;
41923: LD_ADDR_VAR 0 7
41927: PUSH
41928: LD_VAR 0 6
41932: PUSH
41933: EMPTY
41934: LIST
41935: ST_TO_ADDR
// for i = 1 to pos - 1 do
41936: LD_ADDR_VAR 0 5
41940: PUSH
41941: DOUBLE
41942: LD_INT 1
41944: DEC
41945: ST_TO_ADDR
41946: LD_VAR 0 2
41950: PUSH
41951: LD_INT 1
41953: MINUS
41954: PUSH
41955: FOR_TO
41956: IFFALSE 42001
// begin tmp := tmp [ pos [ i ] ] ;
41958: LD_ADDR_VAR 0 6
41962: PUSH
41963: LD_VAR 0 6
41967: PUSH
41968: LD_VAR 0 2
41972: PUSH
41973: LD_VAR 0 5
41977: ARRAY
41978: ARRAY
41979: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41980: LD_ADDR_VAR 0 7
41984: PUSH
41985: LD_VAR 0 7
41989: PUSH
41990: LD_VAR 0 6
41994: PUSH
41995: EMPTY
41996: LIST
41997: ADD
41998: ST_TO_ADDR
// end ;
41999: GO 41955
42001: POP
42002: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42003: LD_ADDR_VAR 0 6
42007: PUSH
42008: LD_VAR 0 6
42012: PPUSH
42013: LD_VAR 0 2
42017: PUSH
42018: LD_VAR 0 2
42022: ARRAY
42023: PPUSH
42024: LD_VAR 0 3
42028: PPUSH
42029: CALL_OW 1
42033: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42034: LD_ADDR_VAR 0 7
42038: PUSH
42039: LD_VAR 0 7
42043: PPUSH
42044: LD_VAR 0 7
42048: PPUSH
42049: LD_VAR 0 6
42053: PPUSH
42054: CALL_OW 1
42058: ST_TO_ADDR
// for i = s_arr downto 2 do
42059: LD_ADDR_VAR 0 5
42063: PUSH
42064: DOUBLE
42065: LD_VAR 0 7
42069: INC
42070: ST_TO_ADDR
42071: LD_INT 2
42073: PUSH
42074: FOR_DOWNTO
42075: IFFALSE 42159
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42077: LD_ADDR_VAR 0 6
42081: PUSH
42082: LD_VAR 0 7
42086: PUSH
42087: LD_VAR 0 5
42091: PUSH
42092: LD_INT 1
42094: MINUS
42095: ARRAY
42096: PPUSH
42097: LD_VAR 0 2
42101: PUSH
42102: LD_VAR 0 5
42106: PUSH
42107: LD_INT 1
42109: MINUS
42110: ARRAY
42111: PPUSH
42112: LD_VAR 0 7
42116: PUSH
42117: LD_VAR 0 5
42121: ARRAY
42122: PPUSH
42123: CALL_OW 1
42127: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42128: LD_ADDR_VAR 0 7
42132: PUSH
42133: LD_VAR 0 7
42137: PPUSH
42138: LD_VAR 0 5
42142: PUSH
42143: LD_INT 1
42145: MINUS
42146: PPUSH
42147: LD_VAR 0 6
42151: PPUSH
42152: CALL_OW 1
42156: ST_TO_ADDR
// end ;
42157: GO 42074
42159: POP
42160: POP
// result := s_arr [ 1 ] ;
42161: LD_ADDR_VAR 0 4
42165: PUSH
42166: LD_VAR 0 7
42170: PUSH
42171: LD_INT 1
42173: ARRAY
42174: ST_TO_ADDR
// end ; end ;
42175: LD_VAR 0 4
42179: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42180: LD_INT 0
42182: PPUSH
42183: PPUSH
// if not list then
42184: LD_VAR 0 1
42188: NOT
42189: IFFALSE 42193
// exit ;
42191: GO 42284
// i := list [ pos1 ] ;
42193: LD_ADDR_VAR 0 5
42197: PUSH
42198: LD_VAR 0 1
42202: PUSH
42203: LD_VAR 0 2
42207: ARRAY
42208: ST_TO_ADDR
// if not i then
42209: LD_VAR 0 5
42213: NOT
42214: IFFALSE 42218
// exit ;
42216: GO 42284
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42218: LD_ADDR_VAR 0 1
42222: PUSH
42223: LD_VAR 0 1
42227: PPUSH
42228: LD_VAR 0 2
42232: PPUSH
42233: LD_VAR 0 1
42237: PUSH
42238: LD_VAR 0 3
42242: ARRAY
42243: PPUSH
42244: CALL_OW 1
42248: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42249: LD_ADDR_VAR 0 1
42253: PUSH
42254: LD_VAR 0 1
42258: PPUSH
42259: LD_VAR 0 3
42263: PPUSH
42264: LD_VAR 0 5
42268: PPUSH
42269: CALL_OW 1
42273: ST_TO_ADDR
// result := list ;
42274: LD_ADDR_VAR 0 4
42278: PUSH
42279: LD_VAR 0 1
42283: ST_TO_ADDR
// end ;
42284: LD_VAR 0 4
42288: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42289: LD_INT 0
42291: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42292: LD_ADDR_VAR 0 5
42296: PUSH
42297: LD_VAR 0 1
42301: PPUSH
42302: CALL_OW 250
42306: PPUSH
42307: LD_VAR 0 1
42311: PPUSH
42312: CALL_OW 251
42316: PPUSH
42317: LD_VAR 0 2
42321: PPUSH
42322: LD_VAR 0 3
42326: PPUSH
42327: LD_VAR 0 4
42331: PPUSH
42332: CALL 42342 0 5
42336: ST_TO_ADDR
// end ;
42337: LD_VAR 0 5
42341: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42342: LD_INT 0
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
// if not list then
42348: LD_VAR 0 3
42352: NOT
42353: IFFALSE 42357
// exit ;
42355: GO 42745
// result := [ ] ;
42357: LD_ADDR_VAR 0 6
42361: PUSH
42362: EMPTY
42363: ST_TO_ADDR
// for i in list do
42364: LD_ADDR_VAR 0 7
42368: PUSH
42369: LD_VAR 0 3
42373: PUSH
42374: FOR_IN
42375: IFFALSE 42577
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42377: LD_ADDR_VAR 0 9
42381: PUSH
42382: LD_VAR 0 7
42386: PPUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: LD_VAR 0 2
42396: PPUSH
42397: CALL_OW 297
42401: ST_TO_ADDR
// if not result then
42402: LD_VAR 0 6
42406: NOT
42407: IFFALSE 42433
// result := [ [ i , tmp ] ] else
42409: LD_ADDR_VAR 0 6
42413: PUSH
42414: LD_VAR 0 7
42418: PUSH
42419: LD_VAR 0 9
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: EMPTY
42429: LIST
42430: ST_TO_ADDR
42431: GO 42575
// begin if result [ result ] [ 2 ] < tmp then
42433: LD_VAR 0 6
42437: PUSH
42438: LD_VAR 0 6
42442: ARRAY
42443: PUSH
42444: LD_INT 2
42446: ARRAY
42447: PUSH
42448: LD_VAR 0 9
42452: LESS
42453: IFFALSE 42495
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42455: LD_ADDR_VAR 0 6
42459: PUSH
42460: LD_VAR 0 6
42464: PPUSH
42465: LD_VAR 0 6
42469: PUSH
42470: LD_INT 1
42472: PLUS
42473: PPUSH
42474: LD_VAR 0 7
42478: PUSH
42479: LD_VAR 0 9
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PPUSH
42488: CALL_OW 2
42492: ST_TO_ADDR
42493: GO 42575
// for j = 1 to result do
42495: LD_ADDR_VAR 0 8
42499: PUSH
42500: DOUBLE
42501: LD_INT 1
42503: DEC
42504: ST_TO_ADDR
42505: LD_VAR 0 6
42509: PUSH
42510: FOR_TO
42511: IFFALSE 42573
// begin if tmp < result [ j ] [ 2 ] then
42513: LD_VAR 0 9
42517: PUSH
42518: LD_VAR 0 6
42522: PUSH
42523: LD_VAR 0 8
42527: ARRAY
42528: PUSH
42529: LD_INT 2
42531: ARRAY
42532: LESS
42533: IFFALSE 42571
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42535: LD_ADDR_VAR 0 6
42539: PUSH
42540: LD_VAR 0 6
42544: PPUSH
42545: LD_VAR 0 8
42549: PPUSH
42550: LD_VAR 0 7
42554: PUSH
42555: LD_VAR 0 9
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PPUSH
42564: CALL_OW 2
42568: ST_TO_ADDR
// break ;
42569: GO 42573
// end ; end ;
42571: GO 42510
42573: POP
42574: POP
// end ; end ;
42575: GO 42374
42577: POP
42578: POP
// if result and not asc then
42579: LD_VAR 0 6
42583: PUSH
42584: LD_VAR 0 4
42588: NOT
42589: AND
42590: IFFALSE 42665
// begin tmp := result ;
42592: LD_ADDR_VAR 0 9
42596: PUSH
42597: LD_VAR 0 6
42601: ST_TO_ADDR
// for i = tmp downto 1 do
42602: LD_ADDR_VAR 0 7
42606: PUSH
42607: DOUBLE
42608: LD_VAR 0 9
42612: INC
42613: ST_TO_ADDR
42614: LD_INT 1
42616: PUSH
42617: FOR_DOWNTO
42618: IFFALSE 42663
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42620: LD_ADDR_VAR 0 6
42624: PUSH
42625: LD_VAR 0 6
42629: PPUSH
42630: LD_VAR 0 9
42634: PUSH
42635: LD_VAR 0 7
42639: MINUS
42640: PUSH
42641: LD_INT 1
42643: PLUS
42644: PPUSH
42645: LD_VAR 0 9
42649: PUSH
42650: LD_VAR 0 7
42654: ARRAY
42655: PPUSH
42656: CALL_OW 1
42660: ST_TO_ADDR
42661: GO 42617
42663: POP
42664: POP
// end ; tmp := [ ] ;
42665: LD_ADDR_VAR 0 9
42669: PUSH
42670: EMPTY
42671: ST_TO_ADDR
// if mode then
42672: LD_VAR 0 5
42676: IFFALSE 42745
// begin for i = 1 to result do
42678: LD_ADDR_VAR 0 7
42682: PUSH
42683: DOUBLE
42684: LD_INT 1
42686: DEC
42687: ST_TO_ADDR
42688: LD_VAR 0 6
42692: PUSH
42693: FOR_TO
42694: IFFALSE 42733
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42696: LD_ADDR_VAR 0 9
42700: PUSH
42701: LD_VAR 0 9
42705: PPUSH
42706: LD_VAR 0 7
42710: PPUSH
42711: LD_VAR 0 6
42715: PUSH
42716: LD_VAR 0 7
42720: ARRAY
42721: PUSH
42722: LD_INT 1
42724: ARRAY
42725: PPUSH
42726: CALL_OW 1
42730: ST_TO_ADDR
42731: GO 42693
42733: POP
42734: POP
// result := tmp ;
42735: LD_ADDR_VAR 0 6
42739: PUSH
42740: LD_VAR 0 9
42744: ST_TO_ADDR
// end ; end ;
42745: LD_VAR 0 6
42749: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42750: LD_INT 0
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42758: LD_ADDR_VAR 0 5
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: ST_TO_ADDR
// if not x or not y then
42780: LD_VAR 0 2
42784: NOT
42785: PUSH
42786: LD_VAR 0 3
42790: NOT
42791: OR
42792: IFFALSE 42796
// exit ;
42794: GO 44442
// if not range then
42796: LD_VAR 0 4
42800: NOT
42801: IFFALSE 42811
// range := 10 ;
42803: LD_ADDR_VAR 0 4
42807: PUSH
42808: LD_INT 10
42810: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42811: LD_ADDR_VAR 0 8
42815: PUSH
42816: LD_INT 81
42818: PUSH
42819: LD_VAR 0 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 92
42830: PUSH
42831: LD_VAR 0 2
42835: PUSH
42836: LD_VAR 0 3
42840: PUSH
42841: LD_VAR 0 4
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: LD_INT 21
42857: PUSH
42858: LD_INT 3
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: PPUSH
42874: CALL_OW 69
42878: ST_TO_ADDR
// if not tmp then
42879: LD_VAR 0 8
42883: NOT
42884: IFFALSE 42888
// exit ;
42886: GO 44442
// for i in tmp do
42888: LD_ADDR_VAR 0 6
42892: PUSH
42893: LD_VAR 0 8
42897: PUSH
42898: FOR_IN
42899: IFFALSE 44417
// begin points := [ 0 , 0 , 0 ] ;
42901: LD_ADDR_VAR 0 9
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// bpoints := 1 ;
42920: LD_ADDR_VAR 0 10
42924: PUSH
42925: LD_INT 1
42927: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42928: LD_VAR 0 6
42932: PPUSH
42933: CALL_OW 247
42937: PUSH
42938: LD_INT 1
42940: DOUBLE
42941: EQUAL
42942: IFTRUE 42946
42944: GO 43524
42946: POP
// begin if GetClass ( i ) = 1 then
42947: LD_VAR 0 6
42951: PPUSH
42952: CALL_OW 257
42956: PUSH
42957: LD_INT 1
42959: EQUAL
42960: IFFALSE 42981
// points := [ 10 , 5 , 3 ] ;
42962: LD_ADDR_VAR 0 9
42966: PUSH
42967: LD_INT 10
42969: PUSH
42970: LD_INT 5
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42981: LD_VAR 0 6
42985: PPUSH
42986: CALL_OW 257
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: LD_INT 3
42996: PUSH
42997: LD_INT 4
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: IN
43005: IFFALSE 43026
// points := [ 3 , 2 , 1 ] ;
43007: LD_ADDR_VAR 0 9
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43026: LD_VAR 0 6
43030: PPUSH
43031: CALL_OW 257
43035: PUSH
43036: LD_INT 5
43038: EQUAL
43039: IFFALSE 43060
// points := [ 130 , 5 , 2 ] ;
43041: LD_ADDR_VAR 0 9
43045: PUSH
43046: LD_INT 130
43048: PUSH
43049: LD_INT 5
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43060: LD_VAR 0 6
43064: PPUSH
43065: CALL_OW 257
43069: PUSH
43070: LD_INT 8
43072: EQUAL
43073: IFFALSE 43094
// points := [ 35 , 35 , 30 ] ;
43075: LD_ADDR_VAR 0 9
43079: PUSH
43080: LD_INT 35
43082: PUSH
43083: LD_INT 35
43085: PUSH
43086: LD_INT 30
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43094: LD_VAR 0 6
43098: PPUSH
43099: CALL_OW 257
43103: PUSH
43104: LD_INT 9
43106: EQUAL
43107: IFFALSE 43128
// points := [ 20 , 55 , 40 ] ;
43109: LD_ADDR_VAR 0 9
43113: PUSH
43114: LD_INT 20
43116: PUSH
43117: LD_INT 55
43119: PUSH
43120: LD_INT 40
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43128: LD_VAR 0 6
43132: PPUSH
43133: CALL_OW 257
43137: PUSH
43138: LD_INT 12
43140: PUSH
43141: LD_INT 16
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: IN
43148: IFFALSE 43169
// points := [ 5 , 3 , 2 ] ;
43150: LD_ADDR_VAR 0 9
43154: PUSH
43155: LD_INT 5
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43169: LD_VAR 0 6
43173: PPUSH
43174: CALL_OW 257
43178: PUSH
43179: LD_INT 17
43181: EQUAL
43182: IFFALSE 43203
// points := [ 100 , 50 , 75 ] ;
43184: LD_ADDR_VAR 0 9
43188: PUSH
43189: LD_INT 100
43191: PUSH
43192: LD_INT 50
43194: PUSH
43195: LD_INT 75
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43203: LD_VAR 0 6
43207: PPUSH
43208: CALL_OW 257
43212: PUSH
43213: LD_INT 15
43215: EQUAL
43216: IFFALSE 43237
// points := [ 10 , 5 , 3 ] ;
43218: LD_ADDR_VAR 0 9
43222: PUSH
43223: LD_INT 10
43225: PUSH
43226: LD_INT 5
43228: PUSH
43229: LD_INT 3
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43237: LD_VAR 0 6
43241: PPUSH
43242: CALL_OW 257
43246: PUSH
43247: LD_INT 14
43249: EQUAL
43250: IFFALSE 43271
// points := [ 10 , 0 , 0 ] ;
43252: LD_ADDR_VAR 0 9
43256: PUSH
43257: LD_INT 10
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43271: LD_VAR 0 6
43275: PPUSH
43276: CALL_OW 257
43280: PUSH
43281: LD_INT 11
43283: EQUAL
43284: IFFALSE 43305
// points := [ 30 , 10 , 5 ] ;
43286: LD_ADDR_VAR 0 9
43290: PUSH
43291: LD_INT 30
43293: PUSH
43294: LD_INT 10
43296: PUSH
43297: LD_INT 5
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43305: LD_VAR 0 1
43309: PPUSH
43310: LD_INT 5
43312: PPUSH
43313: CALL_OW 321
43317: PUSH
43318: LD_INT 2
43320: EQUAL
43321: IFFALSE 43338
// bpoints := bpoints * 1.8 ;
43323: LD_ADDR_VAR 0 10
43327: PUSH
43328: LD_VAR 0 10
43332: PUSH
43333: LD_REAL  1.80000000000000E+0000
43336: MUL
43337: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43338: LD_VAR 0 6
43342: PPUSH
43343: CALL_OW 257
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 3
43356: PUSH
43357: LD_INT 4
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: IN
43366: PUSH
43367: LD_VAR 0 1
43371: PPUSH
43372: LD_INT 51
43374: PPUSH
43375: CALL_OW 321
43379: PUSH
43380: LD_INT 2
43382: EQUAL
43383: AND
43384: IFFALSE 43401
// bpoints := bpoints * 1.2 ;
43386: LD_ADDR_VAR 0 10
43390: PUSH
43391: LD_VAR 0 10
43395: PUSH
43396: LD_REAL  1.20000000000000E+0000
43399: MUL
43400: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43401: LD_VAR 0 6
43405: PPUSH
43406: CALL_OW 257
43410: PUSH
43411: LD_INT 5
43413: PUSH
43414: LD_INT 7
43416: PUSH
43417: LD_INT 9
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: LIST
43424: IN
43425: PUSH
43426: LD_VAR 0 1
43430: PPUSH
43431: LD_INT 52
43433: PPUSH
43434: CALL_OW 321
43438: PUSH
43439: LD_INT 2
43441: EQUAL
43442: AND
43443: IFFALSE 43460
// bpoints := bpoints * 1.5 ;
43445: LD_ADDR_VAR 0 10
43449: PUSH
43450: LD_VAR 0 10
43454: PUSH
43455: LD_REAL  1.50000000000000E+0000
43458: MUL
43459: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43460: LD_VAR 0 1
43464: PPUSH
43465: LD_INT 66
43467: PPUSH
43468: CALL_OW 321
43472: PUSH
43473: LD_INT 2
43475: EQUAL
43476: IFFALSE 43493
// bpoints := bpoints * 1.1 ;
43478: LD_ADDR_VAR 0 10
43482: PUSH
43483: LD_VAR 0 10
43487: PUSH
43488: LD_REAL  1.10000000000000E+0000
43491: MUL
43492: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43493: LD_ADDR_VAR 0 10
43497: PUSH
43498: LD_VAR 0 10
43502: PUSH
43503: LD_VAR 0 6
43507: PPUSH
43508: LD_INT 1
43510: PPUSH
43511: CALL_OW 259
43515: PUSH
43516: LD_REAL  1.15000000000000E+0000
43519: MUL
43520: MUL
43521: ST_TO_ADDR
// end ; unit_vehicle :
43522: GO 44346
43524: LD_INT 2
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43532
43530: GO 44334
43532: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43533: LD_VAR 0 6
43537: PPUSH
43538: CALL_OW 264
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 42
43548: PUSH
43549: LD_INT 24
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: LIST
43556: IN
43557: IFFALSE 43578
// points := [ 25 , 5 , 3 ] ;
43559: LD_ADDR_VAR 0 9
43563: PUSH
43564: LD_INT 25
43566: PUSH
43567: LD_INT 5
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43578: LD_VAR 0 6
43582: PPUSH
43583: CALL_OW 264
43587: PUSH
43588: LD_INT 4
43590: PUSH
43591: LD_INT 43
43593: PUSH
43594: LD_INT 25
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: LIST
43601: IN
43602: IFFALSE 43623
// points := [ 40 , 15 , 5 ] ;
43604: LD_ADDR_VAR 0 9
43608: PUSH
43609: LD_INT 40
43611: PUSH
43612: LD_INT 15
43614: PUSH
43615: LD_INT 5
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43623: LD_VAR 0 6
43627: PPUSH
43628: CALL_OW 264
43632: PUSH
43633: LD_INT 3
43635: PUSH
43636: LD_INT 23
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: IN
43643: IFFALSE 43664
// points := [ 7 , 25 , 8 ] ;
43645: LD_ADDR_VAR 0 9
43649: PUSH
43650: LD_INT 7
43652: PUSH
43653: LD_INT 25
43655: PUSH
43656: LD_INT 8
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43664: LD_VAR 0 6
43668: PPUSH
43669: CALL_OW 264
43673: PUSH
43674: LD_INT 5
43676: PUSH
43677: LD_INT 27
43679: PUSH
43680: LD_INT 44
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: IN
43688: IFFALSE 43709
// points := [ 14 , 50 , 16 ] ;
43690: LD_ADDR_VAR 0 9
43694: PUSH
43695: LD_INT 14
43697: PUSH
43698: LD_INT 50
43700: PUSH
43701: LD_INT 16
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43709: LD_VAR 0 6
43713: PPUSH
43714: CALL_OW 264
43718: PUSH
43719: LD_INT 6
43721: PUSH
43722: LD_INT 46
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: IN
43729: IFFALSE 43750
// points := [ 32 , 120 , 70 ] ;
43731: LD_ADDR_VAR 0 9
43735: PUSH
43736: LD_INT 32
43738: PUSH
43739: LD_INT 120
43741: PUSH
43742: LD_INT 70
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43750: LD_VAR 0 6
43754: PPUSH
43755: CALL_OW 264
43759: PUSH
43760: LD_INT 7
43762: PUSH
43763: LD_INT 28
43765: PUSH
43766: LD_INT 45
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: IN
43774: IFFALSE 43795
// points := [ 35 , 20 , 45 ] ;
43776: LD_ADDR_VAR 0 9
43780: PUSH
43781: LD_INT 35
43783: PUSH
43784: LD_INT 20
43786: PUSH
43787: LD_INT 45
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43795: LD_VAR 0 6
43799: PPUSH
43800: CALL_OW 264
43804: PUSH
43805: LD_INT 47
43807: PUSH
43808: EMPTY
43809: LIST
43810: IN
43811: IFFALSE 43832
// points := [ 67 , 45 , 75 ] ;
43813: LD_ADDR_VAR 0 9
43817: PUSH
43818: LD_INT 67
43820: PUSH
43821: LD_INT 45
43823: PUSH
43824: LD_INT 75
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43832: LD_VAR 0 6
43836: PPUSH
43837: CALL_OW 264
43841: PUSH
43842: LD_INT 26
43844: PUSH
43845: EMPTY
43846: LIST
43847: IN
43848: IFFALSE 43869
// points := [ 120 , 30 , 80 ] ;
43850: LD_ADDR_VAR 0 9
43854: PUSH
43855: LD_INT 120
43857: PUSH
43858: LD_INT 30
43860: PUSH
43861: LD_INT 80
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43869: LD_VAR 0 6
43873: PPUSH
43874: CALL_OW 264
43878: PUSH
43879: LD_INT 22
43881: PUSH
43882: EMPTY
43883: LIST
43884: IN
43885: IFFALSE 43906
// points := [ 40 , 1 , 1 ] ;
43887: LD_ADDR_VAR 0 9
43891: PUSH
43892: LD_INT 40
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43906: LD_VAR 0 6
43910: PPUSH
43911: CALL_OW 264
43915: PUSH
43916: LD_INT 29
43918: PUSH
43919: EMPTY
43920: LIST
43921: IN
43922: IFFALSE 43943
// points := [ 70 , 200 , 400 ] ;
43924: LD_ADDR_VAR 0 9
43928: PUSH
43929: LD_INT 70
43931: PUSH
43932: LD_INT 200
43934: PUSH
43935: LD_INT 400
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43943: LD_VAR 0 6
43947: PPUSH
43948: CALL_OW 264
43952: PUSH
43953: LD_INT 14
43955: PUSH
43956: LD_INT 53
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: IN
43963: IFFALSE 43984
// points := [ 40 , 10 , 20 ] ;
43965: LD_ADDR_VAR 0 9
43969: PUSH
43970: LD_INT 40
43972: PUSH
43973: LD_INT 10
43975: PUSH
43976: LD_INT 20
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: LIST
43983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43984: LD_VAR 0 6
43988: PPUSH
43989: CALL_OW 264
43993: PUSH
43994: LD_INT 9
43996: PUSH
43997: EMPTY
43998: LIST
43999: IN
44000: IFFALSE 44021
// points := [ 5 , 70 , 20 ] ;
44002: LD_ADDR_VAR 0 9
44006: PUSH
44007: LD_INT 5
44009: PUSH
44010: LD_INT 70
44012: PUSH
44013: LD_INT 20
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44021: LD_VAR 0 6
44025: PPUSH
44026: CALL_OW 264
44030: PUSH
44031: LD_INT 10
44033: PUSH
44034: EMPTY
44035: LIST
44036: IN
44037: IFFALSE 44058
// points := [ 35 , 110 , 70 ] ;
44039: LD_ADDR_VAR 0 9
44043: PUSH
44044: LD_INT 35
44046: PUSH
44047: LD_INT 110
44049: PUSH
44050: LD_INT 70
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44058: LD_VAR 0 6
44062: PPUSH
44063: CALL_OW 265
44067: PUSH
44068: LD_INT 25
44070: EQUAL
44071: IFFALSE 44092
// points := [ 80 , 65 , 100 ] ;
44073: LD_ADDR_VAR 0 9
44077: PUSH
44078: LD_INT 80
44080: PUSH
44081: LD_INT 65
44083: PUSH
44084: LD_INT 100
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44092: LD_VAR 0 6
44096: PPUSH
44097: CALL_OW 263
44101: PUSH
44102: LD_INT 1
44104: EQUAL
44105: IFFALSE 44140
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44107: LD_ADDR_VAR 0 10
44111: PUSH
44112: LD_VAR 0 10
44116: PUSH
44117: LD_VAR 0 6
44121: PPUSH
44122: CALL_OW 311
44126: PPUSH
44127: LD_INT 3
44129: PPUSH
44130: CALL_OW 259
44134: PUSH
44135: LD_INT 4
44137: MUL
44138: MUL
44139: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44140: LD_VAR 0 6
44144: PPUSH
44145: CALL_OW 263
44149: PUSH
44150: LD_INT 2
44152: EQUAL
44153: IFFALSE 44204
// begin j := IsControledBy ( i ) ;
44155: LD_ADDR_VAR 0 7
44159: PUSH
44160: LD_VAR 0 6
44164: PPUSH
44165: CALL_OW 312
44169: ST_TO_ADDR
// if j then
44170: LD_VAR 0 7
44174: IFFALSE 44204
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44176: LD_ADDR_VAR 0 10
44180: PUSH
44181: LD_VAR 0 10
44185: PUSH
44186: LD_VAR 0 7
44190: PPUSH
44191: LD_INT 3
44193: PPUSH
44194: CALL_OW 259
44198: PUSH
44199: LD_INT 3
44201: MUL
44202: MUL
44203: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44204: LD_VAR 0 6
44208: PPUSH
44209: CALL_OW 264
44213: PUSH
44214: LD_INT 5
44216: PUSH
44217: LD_INT 6
44219: PUSH
44220: LD_INT 46
44222: PUSH
44223: LD_INT 44
44225: PUSH
44226: LD_INT 47
44228: PUSH
44229: LD_INT 45
44231: PUSH
44232: LD_INT 28
44234: PUSH
44235: LD_INT 7
44237: PUSH
44238: LD_INT 27
44240: PUSH
44241: LD_INT 29
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: IN
44256: PUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: LD_INT 52
44264: PPUSH
44265: CALL_OW 321
44269: PUSH
44270: LD_INT 2
44272: EQUAL
44273: AND
44274: IFFALSE 44291
// bpoints := bpoints * 1.2 ;
44276: LD_ADDR_VAR 0 10
44280: PUSH
44281: LD_VAR 0 10
44285: PUSH
44286: LD_REAL  1.20000000000000E+0000
44289: MUL
44290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44291: LD_VAR 0 6
44295: PPUSH
44296: CALL_OW 264
44300: PUSH
44301: LD_INT 6
44303: PUSH
44304: LD_INT 46
44306: PUSH
44307: LD_INT 47
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: IN
44315: IFFALSE 44332
// bpoints := bpoints * 1.2 ;
44317: LD_ADDR_VAR 0 10
44321: PUSH
44322: LD_VAR 0 10
44326: PUSH
44327: LD_REAL  1.20000000000000E+0000
44330: MUL
44331: ST_TO_ADDR
// end ; unit_building :
44332: GO 44346
44334: LD_INT 3
44336: DOUBLE
44337: EQUAL
44338: IFTRUE 44342
44340: GO 44345
44342: POP
// ; end ;
44343: GO 44346
44345: POP
// for j = 1 to 3 do
44346: LD_ADDR_VAR 0 7
44350: PUSH
44351: DOUBLE
44352: LD_INT 1
44354: DEC
44355: ST_TO_ADDR
44356: LD_INT 3
44358: PUSH
44359: FOR_TO
44360: IFFALSE 44413
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44362: LD_ADDR_VAR 0 5
44366: PUSH
44367: LD_VAR 0 5
44371: PPUSH
44372: LD_VAR 0 7
44376: PPUSH
44377: LD_VAR 0 5
44381: PUSH
44382: LD_VAR 0 7
44386: ARRAY
44387: PUSH
44388: LD_VAR 0 9
44392: PUSH
44393: LD_VAR 0 7
44397: ARRAY
44398: PUSH
44399: LD_VAR 0 10
44403: MUL
44404: PLUS
44405: PPUSH
44406: CALL_OW 1
44410: ST_TO_ADDR
44411: GO 44359
44413: POP
44414: POP
// end ;
44415: GO 42898
44417: POP
44418: POP
// result := Replace ( result , 4 , tmp ) ;
44419: LD_ADDR_VAR 0 5
44423: PUSH
44424: LD_VAR 0 5
44428: PPUSH
44429: LD_INT 4
44431: PPUSH
44432: LD_VAR 0 8
44436: PPUSH
44437: CALL_OW 1
44441: ST_TO_ADDR
// end ;
44442: LD_VAR 0 5
44446: RET
// export function DangerAtRange ( unit , range ) ; begin
44447: LD_INT 0
44449: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44450: LD_ADDR_VAR 0 3
44454: PUSH
44455: LD_VAR 0 1
44459: PPUSH
44460: CALL_OW 255
44464: PPUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: CALL_OW 250
44474: PPUSH
44475: LD_VAR 0 1
44479: PPUSH
44480: CALL_OW 251
44484: PPUSH
44485: LD_VAR 0 2
44489: PPUSH
44490: CALL 42750 0 4
44494: ST_TO_ADDR
// end ;
44495: LD_VAR 0 3
44499: RET
// export function DangerInArea ( side , area ) ; begin
44500: LD_INT 0
44502: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44503: LD_ADDR_VAR 0 3
44507: PUSH
44508: LD_VAR 0 2
44512: PPUSH
44513: LD_INT 81
44515: PUSH
44516: LD_VAR 0 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PPUSH
44525: CALL_OW 70
44529: ST_TO_ADDR
// end ;
44530: LD_VAR 0 3
44534: RET
// export function IsExtension ( b ) ; begin
44535: LD_INT 0
44537: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44538: LD_ADDR_VAR 0 2
44542: PUSH
44543: LD_VAR 0 1
44547: PUSH
44548: LD_INT 23
44550: PUSH
44551: LD_INT 20
44553: PUSH
44554: LD_INT 22
44556: PUSH
44557: LD_INT 17
44559: PUSH
44560: LD_INT 24
44562: PUSH
44563: LD_INT 21
44565: PUSH
44566: LD_INT 19
44568: PUSH
44569: LD_INT 16
44571: PUSH
44572: LD_INT 25
44574: PUSH
44575: LD_INT 18
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: IN
44590: ST_TO_ADDR
// end ;
44591: LD_VAR 0 2
44595: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44596: LD_INT 0
44598: PPUSH
44599: PPUSH
44600: PPUSH
// result := [ ] ;
44601: LD_ADDR_VAR 0 4
44605: PUSH
44606: EMPTY
44607: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44608: LD_ADDR_VAR 0 5
44612: PUSH
44613: LD_VAR 0 2
44617: PPUSH
44618: LD_INT 21
44620: PUSH
44621: LD_INT 3
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PPUSH
44628: CALL_OW 70
44632: ST_TO_ADDR
// if not tmp then
44633: LD_VAR 0 5
44637: NOT
44638: IFFALSE 44642
// exit ;
44640: GO 44706
// if checkLink then
44642: LD_VAR 0 3
44646: IFFALSE 44696
// begin for i in tmp do
44648: LD_ADDR_VAR 0 6
44652: PUSH
44653: LD_VAR 0 5
44657: PUSH
44658: FOR_IN
44659: IFFALSE 44694
// if GetBase ( i ) <> base then
44661: LD_VAR 0 6
44665: PPUSH
44666: CALL_OW 274
44670: PUSH
44671: LD_VAR 0 1
44675: NONEQUAL
44676: IFFALSE 44692
// ComLinkToBase ( base , i ) ;
44678: LD_VAR 0 1
44682: PPUSH
44683: LD_VAR 0 6
44687: PPUSH
44688: CALL_OW 169
44692: GO 44658
44694: POP
44695: POP
// end ; result := tmp ;
44696: LD_ADDR_VAR 0 4
44700: PUSH
44701: LD_VAR 0 5
44705: ST_TO_ADDR
// end ;
44706: LD_VAR 0 4
44710: RET
// export function ComComplete ( units , b ) ; var i ; begin
44711: LD_INT 0
44713: PPUSH
44714: PPUSH
// if not units then
44715: LD_VAR 0 1
44719: NOT
44720: IFFALSE 44724
// exit ;
44722: GO 44814
// for i in units do
44724: LD_ADDR_VAR 0 4
44728: PUSH
44729: LD_VAR 0 1
44733: PUSH
44734: FOR_IN
44735: IFFALSE 44812
// if BuildingStatus ( b ) = bs_build then
44737: LD_VAR 0 2
44741: PPUSH
44742: CALL_OW 461
44746: PUSH
44747: LD_INT 1
44749: EQUAL
44750: IFFALSE 44810
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44752: LD_VAR 0 4
44756: PPUSH
44757: LD_STRING h
44759: PUSH
44760: LD_VAR 0 2
44764: PPUSH
44765: CALL_OW 250
44769: PUSH
44770: LD_VAR 0 2
44774: PPUSH
44775: CALL_OW 251
44779: PUSH
44780: LD_VAR 0 2
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: PUSH
44803: EMPTY
44804: LIST
44805: PPUSH
44806: CALL_OW 446
44810: GO 44734
44812: POP
44813: POP
// end ;
44814: LD_VAR 0 3
44818: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44819: LD_INT 0
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44827: LD_VAR 0 1
44831: NOT
44832: PUSH
44833: LD_VAR 0 1
44837: PPUSH
44838: CALL_OW 263
44842: PUSH
44843: LD_INT 2
44845: EQUAL
44846: NOT
44847: OR
44848: IFFALSE 44852
// exit ;
44850: GO 45168
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44852: LD_ADDR_VAR 0 6
44856: PUSH
44857: LD_INT 22
44859: PUSH
44860: LD_VAR 0 1
44864: PPUSH
44865: CALL_OW 255
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: LD_INT 30
44879: PUSH
44880: LD_INT 36
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 34
44889: PUSH
44890: LD_INT 31
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PPUSH
44906: CALL_OW 69
44910: ST_TO_ADDR
// if not tmp then
44911: LD_VAR 0 6
44915: NOT
44916: IFFALSE 44920
// exit ;
44918: GO 45168
// result := [ ] ;
44920: LD_ADDR_VAR 0 2
44924: PUSH
44925: EMPTY
44926: ST_TO_ADDR
// for i in tmp do
44927: LD_ADDR_VAR 0 3
44931: PUSH
44932: LD_VAR 0 6
44936: PUSH
44937: FOR_IN
44938: IFFALSE 45009
// begin t := UnitsInside ( i ) ;
44940: LD_ADDR_VAR 0 4
44944: PUSH
44945: LD_VAR 0 3
44949: PPUSH
44950: CALL_OW 313
44954: ST_TO_ADDR
// if t then
44955: LD_VAR 0 4
44959: IFFALSE 45007
// for j in t do
44961: LD_ADDR_VAR 0 7
44965: PUSH
44966: LD_VAR 0 4
44970: PUSH
44971: FOR_IN
44972: IFFALSE 45005
// result := Insert ( result , result + 1 , j ) ;
44974: LD_ADDR_VAR 0 2
44978: PUSH
44979: LD_VAR 0 2
44983: PPUSH
44984: LD_VAR 0 2
44988: PUSH
44989: LD_INT 1
44991: PLUS
44992: PPUSH
44993: LD_VAR 0 7
44997: PPUSH
44998: CALL_OW 2
45002: ST_TO_ADDR
45003: GO 44971
45005: POP
45006: POP
// end ;
45007: GO 44937
45009: POP
45010: POP
// if not result then
45011: LD_VAR 0 2
45015: NOT
45016: IFFALSE 45020
// exit ;
45018: GO 45168
// mech := result [ 1 ] ;
45020: LD_ADDR_VAR 0 5
45024: PUSH
45025: LD_VAR 0 2
45029: PUSH
45030: LD_INT 1
45032: ARRAY
45033: ST_TO_ADDR
// if result > 1 then
45034: LD_VAR 0 2
45038: PUSH
45039: LD_INT 1
45041: GREATER
45042: IFFALSE 45154
// for i = 2 to result do
45044: LD_ADDR_VAR 0 3
45048: PUSH
45049: DOUBLE
45050: LD_INT 2
45052: DEC
45053: ST_TO_ADDR
45054: LD_VAR 0 2
45058: PUSH
45059: FOR_TO
45060: IFFALSE 45152
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45062: LD_ADDR_VAR 0 4
45066: PUSH
45067: LD_VAR 0 2
45071: PUSH
45072: LD_VAR 0 3
45076: ARRAY
45077: PPUSH
45078: LD_INT 3
45080: PPUSH
45081: CALL_OW 259
45085: PUSH
45086: LD_VAR 0 2
45090: PUSH
45091: LD_VAR 0 3
45095: ARRAY
45096: PPUSH
45097: CALL_OW 432
45101: MINUS
45102: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45103: LD_VAR 0 4
45107: PUSH
45108: LD_VAR 0 5
45112: PPUSH
45113: LD_INT 3
45115: PPUSH
45116: CALL_OW 259
45120: PUSH
45121: LD_VAR 0 5
45125: PPUSH
45126: CALL_OW 432
45130: MINUS
45131: GREATEREQUAL
45132: IFFALSE 45150
// mech := result [ i ] ;
45134: LD_ADDR_VAR 0 5
45138: PUSH
45139: LD_VAR 0 2
45143: PUSH
45144: LD_VAR 0 3
45148: ARRAY
45149: ST_TO_ADDR
// end ;
45150: GO 45059
45152: POP
45153: POP
// ComLinkTo ( vehicle , mech ) ;
45154: LD_VAR 0 1
45158: PPUSH
45159: LD_VAR 0 5
45163: PPUSH
45164: CALL_OW 135
// end ;
45168: LD_VAR 0 2
45172: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45173: LD_INT 0
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
45187: PPUSH
// result := [ ] ;
45188: LD_ADDR_VAR 0 7
45192: PUSH
45193: EMPTY
45194: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45195: LD_VAR 0 1
45199: PPUSH
45200: CALL_OW 266
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: IN
45215: NOT
45216: IFFALSE 45220
// exit ;
45218: GO 46854
// if name then
45220: LD_VAR 0 3
45224: IFFALSE 45240
// SetBName ( base_dep , name ) ;
45226: LD_VAR 0 1
45230: PPUSH
45231: LD_VAR 0 3
45235: PPUSH
45236: CALL_OW 500
// base := GetBase ( base_dep ) ;
45240: LD_ADDR_VAR 0 15
45244: PUSH
45245: LD_VAR 0 1
45249: PPUSH
45250: CALL_OW 274
45254: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45255: LD_ADDR_VAR 0 16
45259: PUSH
45260: LD_VAR 0 1
45264: PPUSH
45265: CALL_OW 255
45269: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45270: LD_ADDR_VAR 0 17
45274: PUSH
45275: LD_VAR 0 1
45279: PPUSH
45280: CALL_OW 248
45284: ST_TO_ADDR
// if sources then
45285: LD_VAR 0 5
45289: IFFALSE 45336
// for i = 1 to 3 do
45291: LD_ADDR_VAR 0 8
45295: PUSH
45296: DOUBLE
45297: LD_INT 1
45299: DEC
45300: ST_TO_ADDR
45301: LD_INT 3
45303: PUSH
45304: FOR_TO
45305: IFFALSE 45334
// AddResourceType ( base , i , sources [ i ] ) ;
45307: LD_VAR 0 15
45311: PPUSH
45312: LD_VAR 0 8
45316: PPUSH
45317: LD_VAR 0 5
45321: PUSH
45322: LD_VAR 0 8
45326: ARRAY
45327: PPUSH
45328: CALL_OW 276
45332: GO 45304
45334: POP
45335: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45336: LD_ADDR_VAR 0 18
45340: PUSH
45341: LD_VAR 0 15
45345: PPUSH
45346: LD_VAR 0 2
45350: PPUSH
45351: LD_INT 1
45353: PPUSH
45354: CALL 44596 0 3
45358: ST_TO_ADDR
// InitHc ;
45359: CALL_OW 19
// InitUc ;
45363: CALL_OW 18
// uc_side := side ;
45367: LD_ADDR_OWVAR 20
45371: PUSH
45372: LD_VAR 0 16
45376: ST_TO_ADDR
// uc_nation := nation ;
45377: LD_ADDR_OWVAR 21
45381: PUSH
45382: LD_VAR 0 17
45386: ST_TO_ADDR
// if buildings then
45387: LD_VAR 0 18
45391: IFFALSE 46713
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45393: LD_ADDR_VAR 0 19
45397: PUSH
45398: LD_VAR 0 18
45402: PPUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 30
45408: PUSH
45409: LD_INT 29
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 30
45418: PUSH
45419: LD_INT 30
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: LIST
45430: PPUSH
45431: CALL_OW 72
45435: ST_TO_ADDR
// if tmp then
45436: LD_VAR 0 19
45440: IFFALSE 45488
// for i in tmp do
45442: LD_ADDR_VAR 0 8
45446: PUSH
45447: LD_VAR 0 19
45451: PUSH
45452: FOR_IN
45453: IFFALSE 45486
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45455: LD_VAR 0 8
45459: PPUSH
45460: CALL_OW 250
45464: PPUSH
45465: LD_VAR 0 8
45469: PPUSH
45470: CALL_OW 251
45474: PPUSH
45475: LD_VAR 0 16
45479: PPUSH
45480: CALL_OW 441
45484: GO 45452
45486: POP
45487: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45488: LD_VAR 0 18
45492: PPUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 30
45498: PUSH
45499: LD_INT 32
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 30
45508: PUSH
45509: LD_INT 33
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: PPUSH
45521: CALL_OW 72
45525: IFFALSE 45613
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45527: LD_ADDR_VAR 0 8
45531: PUSH
45532: LD_VAR 0 18
45536: PPUSH
45537: LD_INT 2
45539: PUSH
45540: LD_INT 30
45542: PUSH
45543: LD_INT 32
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 30
45552: PUSH
45553: LD_INT 33
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: PPUSH
45565: CALL_OW 72
45569: PUSH
45570: FOR_IN
45571: IFFALSE 45611
// begin if not GetBWeapon ( i ) then
45573: LD_VAR 0 8
45577: PPUSH
45578: CALL_OW 269
45582: NOT
45583: IFFALSE 45609
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45585: LD_VAR 0 8
45589: PPUSH
45590: LD_VAR 0 8
45594: PPUSH
45595: LD_VAR 0 2
45599: PPUSH
45600: CALL 46859 0 2
45604: PPUSH
45605: CALL_OW 431
// end ;
45609: GO 45570
45611: POP
45612: POP
// end ; for i = 1 to personel do
45613: LD_ADDR_VAR 0 8
45617: PUSH
45618: DOUBLE
45619: LD_INT 1
45621: DEC
45622: ST_TO_ADDR
45623: LD_VAR 0 6
45627: PUSH
45628: FOR_TO
45629: IFFALSE 46693
// begin if i > 4 then
45631: LD_VAR 0 8
45635: PUSH
45636: LD_INT 4
45638: GREATER
45639: IFFALSE 45643
// break ;
45641: GO 46693
// case i of 1 :
45643: LD_VAR 0 8
45647: PUSH
45648: LD_INT 1
45650: DOUBLE
45651: EQUAL
45652: IFTRUE 45656
45654: GO 45736
45656: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45657: LD_ADDR_VAR 0 12
45661: PUSH
45662: LD_VAR 0 18
45666: PPUSH
45667: LD_INT 22
45669: PUSH
45670: LD_VAR 0 16
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 58
45681: PUSH
45682: EMPTY
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 30
45690: PUSH
45691: LD_INT 32
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 30
45700: PUSH
45701: LD_INT 4
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 30
45710: PUSH
45711: LD_INT 5
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: PPUSH
45729: CALL_OW 72
45733: ST_TO_ADDR
45734: GO 45958
45736: LD_INT 2
45738: DOUBLE
45739: EQUAL
45740: IFTRUE 45744
45742: GO 45806
45744: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45745: LD_ADDR_VAR 0 12
45749: PUSH
45750: LD_VAR 0 18
45754: PPUSH
45755: LD_INT 22
45757: PUSH
45758: LD_VAR 0 16
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: LD_INT 30
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 30
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PPUSH
45799: CALL_OW 72
45803: ST_TO_ADDR
45804: GO 45958
45806: LD_INT 3
45808: DOUBLE
45809: EQUAL
45810: IFTRUE 45814
45812: GO 45876
45814: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45815: LD_ADDR_VAR 0 12
45819: PUSH
45820: LD_VAR 0 18
45824: PPUSH
45825: LD_INT 22
45827: PUSH
45828: LD_VAR 0 16
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: LD_INT 30
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 30
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PPUSH
45869: CALL_OW 72
45873: ST_TO_ADDR
45874: GO 45958
45876: LD_INT 4
45878: DOUBLE
45879: EQUAL
45880: IFTRUE 45884
45882: GO 45957
45884: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45885: LD_ADDR_VAR 0 12
45889: PUSH
45890: LD_VAR 0 18
45894: PPUSH
45895: LD_INT 22
45897: PUSH
45898: LD_VAR 0 16
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: LD_INT 30
45912: PUSH
45913: LD_INT 6
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 30
45922: PUSH
45923: LD_INT 7
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 30
45932: PUSH
45933: LD_INT 8
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PPUSH
45950: CALL_OW 72
45954: ST_TO_ADDR
45955: GO 45958
45957: POP
// if i = 1 then
45958: LD_VAR 0 8
45962: PUSH
45963: LD_INT 1
45965: EQUAL
45966: IFFALSE 46077
// begin tmp := [ ] ;
45968: LD_ADDR_VAR 0 19
45972: PUSH
45973: EMPTY
45974: ST_TO_ADDR
// for j in f do
45975: LD_ADDR_VAR 0 9
45979: PUSH
45980: LD_VAR 0 12
45984: PUSH
45985: FOR_IN
45986: IFFALSE 46059
// if GetBType ( j ) = b_bunker then
45988: LD_VAR 0 9
45992: PPUSH
45993: CALL_OW 266
45997: PUSH
45998: LD_INT 32
46000: EQUAL
46001: IFFALSE 46028
// tmp := Insert ( tmp , 1 , j ) else
46003: LD_ADDR_VAR 0 19
46007: PUSH
46008: LD_VAR 0 19
46012: PPUSH
46013: LD_INT 1
46015: PPUSH
46016: LD_VAR 0 9
46020: PPUSH
46021: CALL_OW 2
46025: ST_TO_ADDR
46026: GO 46057
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46028: LD_ADDR_VAR 0 19
46032: PUSH
46033: LD_VAR 0 19
46037: PPUSH
46038: LD_VAR 0 19
46042: PUSH
46043: LD_INT 1
46045: PLUS
46046: PPUSH
46047: LD_VAR 0 9
46051: PPUSH
46052: CALL_OW 2
46056: ST_TO_ADDR
46057: GO 45985
46059: POP
46060: POP
// if tmp then
46061: LD_VAR 0 19
46065: IFFALSE 46077
// f := tmp ;
46067: LD_ADDR_VAR 0 12
46071: PUSH
46072: LD_VAR 0 19
46076: ST_TO_ADDR
// end ; x := personel [ i ] ;
46077: LD_ADDR_VAR 0 13
46081: PUSH
46082: LD_VAR 0 6
46086: PUSH
46087: LD_VAR 0 8
46091: ARRAY
46092: ST_TO_ADDR
// if x = - 1 then
46093: LD_VAR 0 13
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: EQUAL
46102: IFFALSE 46311
// begin for j in f do
46104: LD_ADDR_VAR 0 9
46108: PUSH
46109: LD_VAR 0 12
46113: PUSH
46114: FOR_IN
46115: IFFALSE 46307
// repeat InitHc ;
46117: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46121: LD_VAR 0 9
46125: PPUSH
46126: CALL_OW 266
46130: PUSH
46131: LD_INT 5
46133: EQUAL
46134: IFFALSE 46204
// begin if UnitsInside ( j ) < 3 then
46136: LD_VAR 0 9
46140: PPUSH
46141: CALL_OW 313
46145: PUSH
46146: LD_INT 3
46148: LESS
46149: IFFALSE 46185
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46151: LD_INT 0
46153: PPUSH
46154: LD_INT 5
46156: PUSH
46157: LD_INT 8
46159: PUSH
46160: LD_INT 9
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: PUSH
46168: LD_VAR 0 17
46172: ARRAY
46173: PPUSH
46174: LD_VAR 0 4
46178: PPUSH
46179: CALL_OW 380
46183: GO 46202
// PrepareHuman ( false , i , skill ) ;
46185: LD_INT 0
46187: PPUSH
46188: LD_VAR 0 8
46192: PPUSH
46193: LD_VAR 0 4
46197: PPUSH
46198: CALL_OW 380
// end else
46202: GO 46221
// PrepareHuman ( false , i , skill ) ;
46204: LD_INT 0
46206: PPUSH
46207: LD_VAR 0 8
46211: PPUSH
46212: LD_VAR 0 4
46216: PPUSH
46217: CALL_OW 380
// un := CreateHuman ;
46221: LD_ADDR_VAR 0 14
46225: PUSH
46226: CALL_OW 44
46230: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46231: LD_ADDR_VAR 0 7
46235: PUSH
46236: LD_VAR 0 7
46240: PPUSH
46241: LD_INT 1
46243: PPUSH
46244: LD_VAR 0 14
46248: PPUSH
46249: CALL_OW 2
46253: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46254: LD_VAR 0 14
46258: PPUSH
46259: LD_VAR 0 9
46263: PPUSH
46264: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46268: LD_VAR 0 9
46272: PPUSH
46273: CALL_OW 313
46277: PUSH
46278: LD_INT 6
46280: EQUAL
46281: PUSH
46282: LD_VAR 0 9
46286: PPUSH
46287: CALL_OW 266
46291: PUSH
46292: LD_INT 32
46294: PUSH
46295: LD_INT 31
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: IN
46302: OR
46303: IFFALSE 46117
46305: GO 46114
46307: POP
46308: POP
// end else
46309: GO 46691
// for j = 1 to x do
46311: LD_ADDR_VAR 0 9
46315: PUSH
46316: DOUBLE
46317: LD_INT 1
46319: DEC
46320: ST_TO_ADDR
46321: LD_VAR 0 13
46325: PUSH
46326: FOR_TO
46327: IFFALSE 46689
// begin InitHc ;
46329: CALL_OW 19
// if not f then
46333: LD_VAR 0 12
46337: NOT
46338: IFFALSE 46427
// begin PrepareHuman ( false , i , skill ) ;
46340: LD_INT 0
46342: PPUSH
46343: LD_VAR 0 8
46347: PPUSH
46348: LD_VAR 0 4
46352: PPUSH
46353: CALL_OW 380
// un := CreateHuman ;
46357: LD_ADDR_VAR 0 14
46361: PUSH
46362: CALL_OW 44
46366: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46367: LD_ADDR_VAR 0 7
46371: PUSH
46372: LD_VAR 0 7
46376: PPUSH
46377: LD_INT 1
46379: PPUSH
46380: LD_VAR 0 14
46384: PPUSH
46385: CALL_OW 2
46389: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46390: LD_VAR 0 14
46394: PPUSH
46395: LD_VAR 0 1
46399: PPUSH
46400: CALL_OW 250
46404: PPUSH
46405: LD_VAR 0 1
46409: PPUSH
46410: CALL_OW 251
46414: PPUSH
46415: LD_INT 10
46417: PPUSH
46418: LD_INT 0
46420: PPUSH
46421: CALL_OW 50
// continue ;
46425: GO 46326
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46427: LD_VAR 0 12
46431: PUSH
46432: LD_INT 1
46434: ARRAY
46435: PPUSH
46436: CALL_OW 313
46440: PUSH
46441: LD_VAR 0 12
46445: PUSH
46446: LD_INT 1
46448: ARRAY
46449: PPUSH
46450: CALL_OW 266
46454: PUSH
46455: LD_INT 32
46457: PUSH
46458: LD_INT 31
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: IN
46465: AND
46466: PUSH
46467: LD_VAR 0 12
46471: PUSH
46472: LD_INT 1
46474: ARRAY
46475: PPUSH
46476: CALL_OW 313
46480: PUSH
46481: LD_INT 6
46483: EQUAL
46484: OR
46485: IFFALSE 46505
// f := Delete ( f , 1 ) ;
46487: LD_ADDR_VAR 0 12
46491: PUSH
46492: LD_VAR 0 12
46496: PPUSH
46497: LD_INT 1
46499: PPUSH
46500: CALL_OW 3
46504: ST_TO_ADDR
// if not f then
46505: LD_VAR 0 12
46509: NOT
46510: IFFALSE 46528
// begin x := x + 2 ;
46512: LD_ADDR_VAR 0 13
46516: PUSH
46517: LD_VAR 0 13
46521: PUSH
46522: LD_INT 2
46524: PLUS
46525: ST_TO_ADDR
// continue ;
46526: GO 46326
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46528: LD_VAR 0 12
46532: PUSH
46533: LD_INT 1
46535: ARRAY
46536: PPUSH
46537: CALL_OW 266
46541: PUSH
46542: LD_INT 5
46544: EQUAL
46545: IFFALSE 46619
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46547: LD_VAR 0 12
46551: PUSH
46552: LD_INT 1
46554: ARRAY
46555: PPUSH
46556: CALL_OW 313
46560: PUSH
46561: LD_INT 3
46563: LESS
46564: IFFALSE 46600
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46566: LD_INT 0
46568: PPUSH
46569: LD_INT 5
46571: PUSH
46572: LD_INT 8
46574: PUSH
46575: LD_INT 9
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: PUSH
46583: LD_VAR 0 17
46587: ARRAY
46588: PPUSH
46589: LD_VAR 0 4
46593: PPUSH
46594: CALL_OW 380
46598: GO 46617
// PrepareHuman ( false , i , skill ) ;
46600: LD_INT 0
46602: PPUSH
46603: LD_VAR 0 8
46607: PPUSH
46608: LD_VAR 0 4
46612: PPUSH
46613: CALL_OW 380
// end else
46617: GO 46636
// PrepareHuman ( false , i , skill ) ;
46619: LD_INT 0
46621: PPUSH
46622: LD_VAR 0 8
46626: PPUSH
46627: LD_VAR 0 4
46631: PPUSH
46632: CALL_OW 380
// un := CreateHuman ;
46636: LD_ADDR_VAR 0 14
46640: PUSH
46641: CALL_OW 44
46645: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46646: LD_ADDR_VAR 0 7
46650: PUSH
46651: LD_VAR 0 7
46655: PPUSH
46656: LD_INT 1
46658: PPUSH
46659: LD_VAR 0 14
46663: PPUSH
46664: CALL_OW 2
46668: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46669: LD_VAR 0 14
46673: PPUSH
46674: LD_VAR 0 12
46678: PUSH
46679: LD_INT 1
46681: ARRAY
46682: PPUSH
46683: CALL_OW 52
// end ;
46687: GO 46326
46689: POP
46690: POP
// end ;
46691: GO 45628
46693: POP
46694: POP
// result := result ^ buildings ;
46695: LD_ADDR_VAR 0 7
46699: PUSH
46700: LD_VAR 0 7
46704: PUSH
46705: LD_VAR 0 18
46709: ADD
46710: ST_TO_ADDR
// end else
46711: GO 46854
// begin for i = 1 to personel do
46713: LD_ADDR_VAR 0 8
46717: PUSH
46718: DOUBLE
46719: LD_INT 1
46721: DEC
46722: ST_TO_ADDR
46723: LD_VAR 0 6
46727: PUSH
46728: FOR_TO
46729: IFFALSE 46852
// begin if i > 4 then
46731: LD_VAR 0 8
46735: PUSH
46736: LD_INT 4
46738: GREATER
46739: IFFALSE 46743
// break ;
46741: GO 46852
// x := personel [ i ] ;
46743: LD_ADDR_VAR 0 13
46747: PUSH
46748: LD_VAR 0 6
46752: PUSH
46753: LD_VAR 0 8
46757: ARRAY
46758: ST_TO_ADDR
// if x = - 1 then
46759: LD_VAR 0 13
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: EQUAL
46768: IFFALSE 46772
// continue ;
46770: GO 46728
// PrepareHuman ( false , i , skill ) ;
46772: LD_INT 0
46774: PPUSH
46775: LD_VAR 0 8
46779: PPUSH
46780: LD_VAR 0 4
46784: PPUSH
46785: CALL_OW 380
// un := CreateHuman ;
46789: LD_ADDR_VAR 0 14
46793: PUSH
46794: CALL_OW 44
46798: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46799: LD_VAR 0 14
46803: PPUSH
46804: LD_VAR 0 1
46808: PPUSH
46809: CALL_OW 250
46813: PPUSH
46814: LD_VAR 0 1
46818: PPUSH
46819: CALL_OW 251
46823: PPUSH
46824: LD_INT 10
46826: PPUSH
46827: LD_INT 0
46829: PPUSH
46830: CALL_OW 50
// result := result ^ un ;
46834: LD_ADDR_VAR 0 7
46838: PUSH
46839: LD_VAR 0 7
46843: PUSH
46844: LD_VAR 0 14
46848: ADD
46849: ST_TO_ADDR
// end ;
46850: GO 46728
46852: POP
46853: POP
// end ; end ;
46854: LD_VAR 0 7
46858: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46859: LD_INT 0
46861: PPUSH
46862: PPUSH
46863: PPUSH
46864: PPUSH
46865: PPUSH
46866: PPUSH
46867: PPUSH
46868: PPUSH
46869: PPUSH
46870: PPUSH
46871: PPUSH
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
46876: PPUSH
// result := false ;
46877: LD_ADDR_VAR 0 3
46881: PUSH
46882: LD_INT 0
46884: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46885: LD_VAR 0 1
46889: NOT
46890: PUSH
46891: LD_VAR 0 1
46895: PPUSH
46896: CALL_OW 266
46900: PUSH
46901: LD_INT 32
46903: PUSH
46904: LD_INT 33
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: IN
46911: NOT
46912: OR
46913: IFFALSE 46917
// exit ;
46915: GO 48026
// nat := GetNation ( tower ) ;
46917: LD_ADDR_VAR 0 12
46921: PUSH
46922: LD_VAR 0 1
46926: PPUSH
46927: CALL_OW 248
46931: ST_TO_ADDR
// side := GetSide ( tower ) ;
46932: LD_ADDR_VAR 0 16
46936: PUSH
46937: LD_VAR 0 1
46941: PPUSH
46942: CALL_OW 255
46946: ST_TO_ADDR
// x := GetX ( tower ) ;
46947: LD_ADDR_VAR 0 10
46951: PUSH
46952: LD_VAR 0 1
46956: PPUSH
46957: CALL_OW 250
46961: ST_TO_ADDR
// y := GetY ( tower ) ;
46962: LD_ADDR_VAR 0 11
46966: PUSH
46967: LD_VAR 0 1
46971: PPUSH
46972: CALL_OW 251
46976: ST_TO_ADDR
// if not x or not y then
46977: LD_VAR 0 10
46981: NOT
46982: PUSH
46983: LD_VAR 0 11
46987: NOT
46988: OR
46989: IFFALSE 46993
// exit ;
46991: GO 48026
// weapon := 0 ;
46993: LD_ADDR_VAR 0 18
46997: PUSH
46998: LD_INT 0
47000: ST_TO_ADDR
// fac_list := [ ] ;
47001: LD_ADDR_VAR 0 17
47005: PUSH
47006: EMPTY
47007: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47008: LD_ADDR_VAR 0 6
47012: PUSH
47013: LD_VAR 0 1
47017: PPUSH
47018: CALL_OW 274
47022: PPUSH
47023: LD_VAR 0 2
47027: PPUSH
47028: LD_INT 0
47030: PPUSH
47031: CALL 44596 0 3
47035: PPUSH
47036: LD_INT 30
47038: PUSH
47039: LD_INT 3
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PPUSH
47046: CALL_OW 72
47050: ST_TO_ADDR
// if not factories then
47051: LD_VAR 0 6
47055: NOT
47056: IFFALSE 47060
// exit ;
47058: GO 48026
// for i in factories do
47060: LD_ADDR_VAR 0 8
47064: PUSH
47065: LD_VAR 0 6
47069: PUSH
47070: FOR_IN
47071: IFFALSE 47096
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47073: LD_ADDR_VAR 0 17
47077: PUSH
47078: LD_VAR 0 17
47082: PUSH
47083: LD_VAR 0 8
47087: PPUSH
47088: CALL_OW 478
47092: UNION
47093: ST_TO_ADDR
47094: GO 47070
47096: POP
47097: POP
// if not fac_list then
47098: LD_VAR 0 17
47102: NOT
47103: IFFALSE 47107
// exit ;
47105: GO 48026
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47107: LD_ADDR_VAR 0 5
47111: PUSH
47112: LD_INT 4
47114: PUSH
47115: LD_INT 5
47117: PUSH
47118: LD_INT 9
47120: PUSH
47121: LD_INT 10
47123: PUSH
47124: LD_INT 6
47126: PUSH
47127: LD_INT 7
47129: PUSH
47130: LD_INT 11
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 27
47144: PUSH
47145: LD_INT 28
47147: PUSH
47148: LD_INT 26
47150: PUSH
47151: LD_INT 30
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 43
47162: PUSH
47163: LD_INT 44
47165: PUSH
47166: LD_INT 46
47168: PUSH
47169: LD_INT 45
47171: PUSH
47172: LD_INT 47
47174: PUSH
47175: LD_INT 49
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: PUSH
47191: LD_VAR 0 12
47195: ARRAY
47196: ST_TO_ADDR
// list := list isect fac_list ;
47197: LD_ADDR_VAR 0 5
47201: PUSH
47202: LD_VAR 0 5
47206: PUSH
47207: LD_VAR 0 17
47211: ISECT
47212: ST_TO_ADDR
// if not list then
47213: LD_VAR 0 5
47217: NOT
47218: IFFALSE 47222
// exit ;
47220: GO 48026
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47222: LD_VAR 0 12
47226: PUSH
47227: LD_INT 3
47229: EQUAL
47230: PUSH
47231: LD_INT 49
47233: PUSH
47234: LD_VAR 0 5
47238: IN
47239: AND
47240: PUSH
47241: LD_INT 31
47243: PPUSH
47244: LD_VAR 0 16
47248: PPUSH
47249: CALL_OW 321
47253: PUSH
47254: LD_INT 2
47256: EQUAL
47257: AND
47258: IFFALSE 47318
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47260: LD_INT 22
47262: PUSH
47263: LD_VAR 0 16
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 35
47274: PUSH
47275: LD_INT 49
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 91
47284: PUSH
47285: LD_VAR 0 1
47289: PUSH
47290: LD_INT 10
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: PPUSH
47303: CALL_OW 69
47307: NOT
47308: IFFALSE 47318
// weapon := ru_time_lapser ;
47310: LD_ADDR_VAR 0 18
47314: PUSH
47315: LD_INT 49
47317: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47318: LD_VAR 0 12
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: IN
47333: PUSH
47334: LD_INT 11
47336: PUSH
47337: LD_VAR 0 5
47341: IN
47342: PUSH
47343: LD_INT 30
47345: PUSH
47346: LD_VAR 0 5
47350: IN
47351: OR
47352: AND
47353: PUSH
47354: LD_INT 6
47356: PPUSH
47357: LD_VAR 0 16
47361: PPUSH
47362: CALL_OW 321
47366: PUSH
47367: LD_INT 2
47369: EQUAL
47370: AND
47371: IFFALSE 47536
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47373: LD_INT 22
47375: PUSH
47376: LD_VAR 0 16
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 35
47390: PUSH
47391: LD_INT 11
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 35
47400: PUSH
47401: LD_INT 30
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 91
47415: PUSH
47416: LD_VAR 0 1
47420: PUSH
47421: LD_INT 18
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: PPUSH
47434: CALL_OW 69
47438: NOT
47439: PUSH
47440: LD_INT 22
47442: PUSH
47443: LD_VAR 0 16
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 30
47457: PUSH
47458: LD_INT 32
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 30
47467: PUSH
47468: LD_INT 33
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 91
47482: PUSH
47483: LD_VAR 0 1
47487: PUSH
47488: LD_INT 12
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: PUSH
47501: EMPTY
47502: LIST
47503: PPUSH
47504: CALL_OW 69
47508: PUSH
47509: LD_INT 2
47511: GREATER
47512: AND
47513: IFFALSE 47536
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47515: LD_ADDR_VAR 0 18
47519: PUSH
47520: LD_INT 11
47522: PUSH
47523: LD_INT 30
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_VAR 0 12
47534: ARRAY
47535: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47536: LD_VAR 0 18
47540: NOT
47541: PUSH
47542: LD_INT 40
47544: PPUSH
47545: LD_VAR 0 16
47549: PPUSH
47550: CALL_OW 321
47554: PUSH
47555: LD_INT 2
47557: EQUAL
47558: AND
47559: PUSH
47560: LD_INT 7
47562: PUSH
47563: LD_VAR 0 5
47567: IN
47568: PUSH
47569: LD_INT 28
47571: PUSH
47572: LD_VAR 0 5
47576: IN
47577: OR
47578: PUSH
47579: LD_INT 45
47581: PUSH
47582: LD_VAR 0 5
47586: IN
47587: OR
47588: AND
47589: IFFALSE 47843
// begin hex := GetHexInfo ( x , y ) ;
47591: LD_ADDR_VAR 0 4
47595: PUSH
47596: LD_VAR 0 10
47600: PPUSH
47601: LD_VAR 0 11
47605: PPUSH
47606: CALL_OW 546
47610: ST_TO_ADDR
// if hex [ 1 ] then
47611: LD_VAR 0 4
47615: PUSH
47616: LD_INT 1
47618: ARRAY
47619: IFFALSE 47623
// exit ;
47621: GO 48026
// height := hex [ 2 ] ;
47623: LD_ADDR_VAR 0 15
47627: PUSH
47628: LD_VAR 0 4
47632: PUSH
47633: LD_INT 2
47635: ARRAY
47636: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47637: LD_ADDR_VAR 0 14
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: LD_INT 5
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// for i in tmp do
47660: LD_ADDR_VAR 0 8
47664: PUSH
47665: LD_VAR 0 14
47669: PUSH
47670: FOR_IN
47671: IFFALSE 47841
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47673: LD_ADDR_VAR 0 9
47677: PUSH
47678: LD_VAR 0 10
47682: PPUSH
47683: LD_VAR 0 8
47687: PPUSH
47688: LD_INT 5
47690: PPUSH
47691: CALL_OW 272
47695: PUSH
47696: LD_VAR 0 11
47700: PPUSH
47701: LD_VAR 0 8
47705: PPUSH
47706: LD_INT 5
47708: PPUSH
47709: CALL_OW 273
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47718: LD_VAR 0 9
47722: PUSH
47723: LD_INT 1
47725: ARRAY
47726: PPUSH
47727: LD_VAR 0 9
47731: PUSH
47732: LD_INT 2
47734: ARRAY
47735: PPUSH
47736: CALL_OW 488
47740: IFFALSE 47839
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47742: LD_ADDR_VAR 0 4
47746: PUSH
47747: LD_VAR 0 9
47751: PUSH
47752: LD_INT 1
47754: ARRAY
47755: PPUSH
47756: LD_VAR 0 9
47760: PUSH
47761: LD_INT 2
47763: ARRAY
47764: PPUSH
47765: CALL_OW 546
47769: ST_TO_ADDR
// if hex [ 1 ] then
47770: LD_VAR 0 4
47774: PUSH
47775: LD_INT 1
47777: ARRAY
47778: IFFALSE 47782
// continue ;
47780: GO 47670
// h := hex [ 2 ] ;
47782: LD_ADDR_VAR 0 13
47786: PUSH
47787: LD_VAR 0 4
47791: PUSH
47792: LD_INT 2
47794: ARRAY
47795: ST_TO_ADDR
// if h + 7 < height then
47796: LD_VAR 0 13
47800: PUSH
47801: LD_INT 7
47803: PLUS
47804: PUSH
47805: LD_VAR 0 15
47809: LESS
47810: IFFALSE 47839
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47812: LD_ADDR_VAR 0 18
47816: PUSH
47817: LD_INT 7
47819: PUSH
47820: LD_INT 28
47822: PUSH
47823: LD_INT 45
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: PUSH
47831: LD_VAR 0 12
47835: ARRAY
47836: ST_TO_ADDR
// break ;
47837: GO 47841
// end ; end ; end ;
47839: GO 47670
47841: POP
47842: POP
// end ; if not weapon then
47843: LD_VAR 0 18
47847: NOT
47848: IFFALSE 47908
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47850: LD_ADDR_VAR 0 5
47854: PUSH
47855: LD_VAR 0 5
47859: PUSH
47860: LD_INT 11
47862: PUSH
47863: LD_INT 30
47865: PUSH
47866: LD_INT 49
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: DIFF
47874: ST_TO_ADDR
// if not list then
47875: LD_VAR 0 5
47879: NOT
47880: IFFALSE 47884
// exit ;
47882: GO 48026
// weapon := list [ rand ( 1 , list ) ] ;
47884: LD_ADDR_VAR 0 18
47888: PUSH
47889: LD_VAR 0 5
47893: PUSH
47894: LD_INT 1
47896: PPUSH
47897: LD_VAR 0 5
47901: PPUSH
47902: CALL_OW 12
47906: ARRAY
47907: ST_TO_ADDR
// end ; if weapon then
47908: LD_VAR 0 18
47912: IFFALSE 48026
// begin tmp := CostOfWeapon ( weapon ) ;
47914: LD_ADDR_VAR 0 14
47918: PUSH
47919: LD_VAR 0 18
47923: PPUSH
47924: CALL_OW 451
47928: ST_TO_ADDR
// j := GetBase ( tower ) ;
47929: LD_ADDR_VAR 0 9
47933: PUSH
47934: LD_VAR 0 1
47938: PPUSH
47939: CALL_OW 274
47943: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47944: LD_VAR 0 9
47948: PPUSH
47949: LD_INT 1
47951: PPUSH
47952: CALL_OW 275
47956: PUSH
47957: LD_VAR 0 14
47961: PUSH
47962: LD_INT 1
47964: ARRAY
47965: GREATEREQUAL
47966: PUSH
47967: LD_VAR 0 9
47971: PPUSH
47972: LD_INT 2
47974: PPUSH
47975: CALL_OW 275
47979: PUSH
47980: LD_VAR 0 14
47984: PUSH
47985: LD_INT 2
47987: ARRAY
47988: GREATEREQUAL
47989: AND
47990: PUSH
47991: LD_VAR 0 9
47995: PPUSH
47996: LD_INT 3
47998: PPUSH
47999: CALL_OW 275
48003: PUSH
48004: LD_VAR 0 14
48008: PUSH
48009: LD_INT 3
48011: ARRAY
48012: GREATEREQUAL
48013: AND
48014: IFFALSE 48026
// result := weapon ;
48016: LD_ADDR_VAR 0 3
48020: PUSH
48021: LD_VAR 0 18
48025: ST_TO_ADDR
// end ; end ;
48026: LD_VAR 0 3
48030: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48031: LD_INT 0
48033: PPUSH
48034: PPUSH
// result := true ;
48035: LD_ADDR_VAR 0 3
48039: PUSH
48040: LD_INT 1
48042: ST_TO_ADDR
// if array1 = array2 then
48043: LD_VAR 0 1
48047: PUSH
48048: LD_VAR 0 2
48052: EQUAL
48053: IFFALSE 48113
// begin for i = 1 to array1 do
48055: LD_ADDR_VAR 0 4
48059: PUSH
48060: DOUBLE
48061: LD_INT 1
48063: DEC
48064: ST_TO_ADDR
48065: LD_VAR 0 1
48069: PUSH
48070: FOR_TO
48071: IFFALSE 48109
// if array1 [ i ] <> array2 [ i ] then
48073: LD_VAR 0 1
48077: PUSH
48078: LD_VAR 0 4
48082: ARRAY
48083: PUSH
48084: LD_VAR 0 2
48088: PUSH
48089: LD_VAR 0 4
48093: ARRAY
48094: NONEQUAL
48095: IFFALSE 48107
// begin result := false ;
48097: LD_ADDR_VAR 0 3
48101: PUSH
48102: LD_INT 0
48104: ST_TO_ADDR
// break ;
48105: GO 48109
// end ;
48107: GO 48070
48109: POP
48110: POP
// end else
48111: GO 48121
// result := false ;
48113: LD_ADDR_VAR 0 3
48117: PUSH
48118: LD_INT 0
48120: ST_TO_ADDR
// end ;
48121: LD_VAR 0 3
48125: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48126: LD_INT 0
48128: PPUSH
48129: PPUSH
// if not array1 or not array2 then
48130: LD_VAR 0 1
48134: NOT
48135: PUSH
48136: LD_VAR 0 2
48140: NOT
48141: OR
48142: IFFALSE 48146
// exit ;
48144: GO 48210
// result := true ;
48146: LD_ADDR_VAR 0 3
48150: PUSH
48151: LD_INT 1
48153: ST_TO_ADDR
// for i = 1 to array1 do
48154: LD_ADDR_VAR 0 4
48158: PUSH
48159: DOUBLE
48160: LD_INT 1
48162: DEC
48163: ST_TO_ADDR
48164: LD_VAR 0 1
48168: PUSH
48169: FOR_TO
48170: IFFALSE 48208
// if array1 [ i ] <> array2 [ i ] then
48172: LD_VAR 0 1
48176: PUSH
48177: LD_VAR 0 4
48181: ARRAY
48182: PUSH
48183: LD_VAR 0 2
48187: PUSH
48188: LD_VAR 0 4
48192: ARRAY
48193: NONEQUAL
48194: IFFALSE 48206
// begin result := false ;
48196: LD_ADDR_VAR 0 3
48200: PUSH
48201: LD_INT 0
48203: ST_TO_ADDR
// break ;
48204: GO 48208
// end ;
48206: GO 48169
48208: POP
48209: POP
// end ;
48210: LD_VAR 0 3
48214: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48215: LD_INT 0
48217: PPUSH
48218: PPUSH
48219: PPUSH
// pom := GetBase ( fac ) ;
48220: LD_ADDR_VAR 0 5
48224: PUSH
48225: LD_VAR 0 1
48229: PPUSH
48230: CALL_OW 274
48234: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48235: LD_ADDR_VAR 0 4
48239: PUSH
48240: LD_VAR 0 2
48244: PUSH
48245: LD_INT 1
48247: ARRAY
48248: PPUSH
48249: LD_VAR 0 2
48253: PUSH
48254: LD_INT 2
48256: ARRAY
48257: PPUSH
48258: LD_VAR 0 2
48262: PUSH
48263: LD_INT 3
48265: ARRAY
48266: PPUSH
48267: LD_VAR 0 2
48271: PUSH
48272: LD_INT 4
48274: ARRAY
48275: PPUSH
48276: CALL_OW 449
48280: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48281: LD_ADDR_VAR 0 3
48285: PUSH
48286: LD_VAR 0 5
48290: PPUSH
48291: LD_INT 1
48293: PPUSH
48294: CALL_OW 275
48298: PUSH
48299: LD_VAR 0 4
48303: PUSH
48304: LD_INT 1
48306: ARRAY
48307: GREATEREQUAL
48308: PUSH
48309: LD_VAR 0 5
48313: PPUSH
48314: LD_INT 2
48316: PPUSH
48317: CALL_OW 275
48321: PUSH
48322: LD_VAR 0 4
48326: PUSH
48327: LD_INT 2
48329: ARRAY
48330: GREATEREQUAL
48331: AND
48332: PUSH
48333: LD_VAR 0 5
48337: PPUSH
48338: LD_INT 3
48340: PPUSH
48341: CALL_OW 275
48345: PUSH
48346: LD_VAR 0 4
48350: PUSH
48351: LD_INT 3
48353: ARRAY
48354: GREATEREQUAL
48355: AND
48356: ST_TO_ADDR
// end ;
48357: LD_VAR 0 3
48361: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48362: LD_INT 0
48364: PPUSH
48365: PPUSH
48366: PPUSH
48367: PPUSH
// pom := GetBase ( building ) ;
48368: LD_ADDR_VAR 0 3
48372: PUSH
48373: LD_VAR 0 1
48377: PPUSH
48378: CALL_OW 274
48382: ST_TO_ADDR
// if not pom then
48383: LD_VAR 0 3
48387: NOT
48388: IFFALSE 48392
// exit ;
48390: GO 48562
// btype := GetBType ( building ) ;
48392: LD_ADDR_VAR 0 5
48396: PUSH
48397: LD_VAR 0 1
48401: PPUSH
48402: CALL_OW 266
48406: ST_TO_ADDR
// if btype = b_armoury then
48407: LD_VAR 0 5
48411: PUSH
48412: LD_INT 4
48414: EQUAL
48415: IFFALSE 48425
// btype := b_barracks ;
48417: LD_ADDR_VAR 0 5
48421: PUSH
48422: LD_INT 5
48424: ST_TO_ADDR
// if btype = b_depot then
48425: LD_VAR 0 5
48429: PUSH
48430: LD_INT 0
48432: EQUAL
48433: IFFALSE 48443
// btype := b_warehouse ;
48435: LD_ADDR_VAR 0 5
48439: PUSH
48440: LD_INT 1
48442: ST_TO_ADDR
// if btype = b_workshop then
48443: LD_VAR 0 5
48447: PUSH
48448: LD_INT 2
48450: EQUAL
48451: IFFALSE 48461
// btype := b_factory ;
48453: LD_ADDR_VAR 0 5
48457: PUSH
48458: LD_INT 3
48460: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48461: LD_ADDR_VAR 0 4
48465: PUSH
48466: LD_VAR 0 5
48470: PPUSH
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 248
48480: PPUSH
48481: CALL_OW 450
48485: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48486: LD_ADDR_VAR 0 2
48490: PUSH
48491: LD_VAR 0 3
48495: PPUSH
48496: LD_INT 1
48498: PPUSH
48499: CALL_OW 275
48503: PUSH
48504: LD_VAR 0 4
48508: PUSH
48509: LD_INT 1
48511: ARRAY
48512: GREATEREQUAL
48513: PUSH
48514: LD_VAR 0 3
48518: PPUSH
48519: LD_INT 2
48521: PPUSH
48522: CALL_OW 275
48526: PUSH
48527: LD_VAR 0 4
48531: PUSH
48532: LD_INT 2
48534: ARRAY
48535: GREATEREQUAL
48536: AND
48537: PUSH
48538: LD_VAR 0 3
48542: PPUSH
48543: LD_INT 3
48545: PPUSH
48546: CALL_OW 275
48550: PUSH
48551: LD_VAR 0 4
48555: PUSH
48556: LD_INT 3
48558: ARRAY
48559: GREATEREQUAL
48560: AND
48561: ST_TO_ADDR
// end ;
48562: LD_VAR 0 2
48566: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48567: LD_INT 0
48569: PPUSH
48570: PPUSH
48571: PPUSH
// pom := GetBase ( building ) ;
48572: LD_ADDR_VAR 0 4
48576: PUSH
48577: LD_VAR 0 1
48581: PPUSH
48582: CALL_OW 274
48586: ST_TO_ADDR
// if not pom then
48587: LD_VAR 0 4
48591: NOT
48592: IFFALSE 48596
// exit ;
48594: GO 48697
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48596: LD_ADDR_VAR 0 5
48600: PUSH
48601: LD_VAR 0 2
48605: PPUSH
48606: LD_VAR 0 1
48610: PPUSH
48611: CALL_OW 248
48615: PPUSH
48616: CALL_OW 450
48620: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48621: LD_ADDR_VAR 0 3
48625: PUSH
48626: LD_VAR 0 4
48630: PPUSH
48631: LD_INT 1
48633: PPUSH
48634: CALL_OW 275
48638: PUSH
48639: LD_VAR 0 5
48643: PUSH
48644: LD_INT 1
48646: ARRAY
48647: GREATEREQUAL
48648: PUSH
48649: LD_VAR 0 4
48653: PPUSH
48654: LD_INT 2
48656: PPUSH
48657: CALL_OW 275
48661: PUSH
48662: LD_VAR 0 5
48666: PUSH
48667: LD_INT 2
48669: ARRAY
48670: GREATEREQUAL
48671: AND
48672: PUSH
48673: LD_VAR 0 4
48677: PPUSH
48678: LD_INT 3
48680: PPUSH
48681: CALL_OW 275
48685: PUSH
48686: LD_VAR 0 5
48690: PUSH
48691: LD_INT 3
48693: ARRAY
48694: GREATEREQUAL
48695: AND
48696: ST_TO_ADDR
// end ;
48697: LD_VAR 0 3
48701: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48702: LD_INT 0
48704: PPUSH
48705: PPUSH
48706: PPUSH
48707: PPUSH
48708: PPUSH
48709: PPUSH
48710: PPUSH
48711: PPUSH
48712: PPUSH
48713: PPUSH
48714: PPUSH
// result := false ;
48715: LD_ADDR_VAR 0 8
48719: PUSH
48720: LD_INT 0
48722: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48723: LD_VAR 0 5
48727: NOT
48728: PUSH
48729: LD_VAR 0 1
48733: NOT
48734: OR
48735: PUSH
48736: LD_VAR 0 2
48740: NOT
48741: OR
48742: PUSH
48743: LD_VAR 0 3
48747: NOT
48748: OR
48749: IFFALSE 48753
// exit ;
48751: GO 49567
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48753: LD_ADDR_VAR 0 14
48757: PUSH
48758: LD_VAR 0 1
48762: PPUSH
48763: LD_VAR 0 2
48767: PPUSH
48768: LD_VAR 0 3
48772: PPUSH
48773: LD_VAR 0 4
48777: PPUSH
48778: LD_VAR 0 5
48782: PUSH
48783: LD_INT 1
48785: ARRAY
48786: PPUSH
48787: CALL_OW 248
48791: PPUSH
48792: LD_INT 0
48794: PPUSH
48795: CALL 50404 0 6
48799: ST_TO_ADDR
// if not hexes then
48800: LD_VAR 0 14
48804: NOT
48805: IFFALSE 48809
// exit ;
48807: GO 49567
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48809: LD_ADDR_VAR 0 17
48813: PUSH
48814: LD_VAR 0 5
48818: PPUSH
48819: LD_INT 22
48821: PUSH
48822: LD_VAR 0 13
48826: PPUSH
48827: CALL_OW 255
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 30
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 30
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PPUSH
48868: CALL_OW 72
48872: ST_TO_ADDR
// for i = 1 to hexes do
48873: LD_ADDR_VAR 0 9
48877: PUSH
48878: DOUBLE
48879: LD_INT 1
48881: DEC
48882: ST_TO_ADDR
48883: LD_VAR 0 14
48887: PUSH
48888: FOR_TO
48889: IFFALSE 49565
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48891: LD_ADDR_VAR 0 13
48895: PUSH
48896: LD_VAR 0 14
48900: PUSH
48901: LD_VAR 0 9
48905: ARRAY
48906: PUSH
48907: LD_INT 1
48909: ARRAY
48910: PPUSH
48911: LD_VAR 0 14
48915: PUSH
48916: LD_VAR 0 9
48920: ARRAY
48921: PUSH
48922: LD_INT 2
48924: ARRAY
48925: PPUSH
48926: CALL_OW 428
48930: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48931: LD_VAR 0 14
48935: PUSH
48936: LD_VAR 0 9
48940: ARRAY
48941: PUSH
48942: LD_INT 1
48944: ARRAY
48945: PPUSH
48946: LD_VAR 0 14
48950: PUSH
48951: LD_VAR 0 9
48955: ARRAY
48956: PUSH
48957: LD_INT 2
48959: ARRAY
48960: PPUSH
48961: CALL_OW 351
48965: PUSH
48966: LD_VAR 0 14
48970: PUSH
48971: LD_VAR 0 9
48975: ARRAY
48976: PUSH
48977: LD_INT 1
48979: ARRAY
48980: PPUSH
48981: LD_VAR 0 14
48985: PUSH
48986: LD_VAR 0 9
48990: ARRAY
48991: PUSH
48992: LD_INT 2
48994: ARRAY
48995: PPUSH
48996: CALL_OW 488
49000: NOT
49001: OR
49002: PUSH
49003: LD_VAR 0 13
49007: PPUSH
49008: CALL_OW 247
49012: PUSH
49013: LD_INT 3
49015: EQUAL
49016: OR
49017: IFFALSE 49023
// exit ;
49019: POP
49020: POP
49021: GO 49567
// if not tmp then
49023: LD_VAR 0 13
49027: NOT
49028: IFFALSE 49032
// continue ;
49030: GO 48888
// result := true ;
49032: LD_ADDR_VAR 0 8
49036: PUSH
49037: LD_INT 1
49039: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49040: LD_VAR 0 6
49044: PUSH
49045: LD_VAR 0 13
49049: PPUSH
49050: CALL_OW 247
49054: PUSH
49055: LD_INT 2
49057: EQUAL
49058: AND
49059: PUSH
49060: LD_VAR 0 13
49064: PPUSH
49065: CALL_OW 263
49069: PUSH
49070: LD_INT 1
49072: EQUAL
49073: AND
49074: IFFALSE 49238
// begin if IsDrivenBy ( tmp ) then
49076: LD_VAR 0 13
49080: PPUSH
49081: CALL_OW 311
49085: IFFALSE 49089
// continue ;
49087: GO 48888
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49089: LD_VAR 0 6
49093: PPUSH
49094: LD_INT 3
49096: PUSH
49097: LD_INT 60
49099: PUSH
49100: EMPTY
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: LD_INT 55
49112: PUSH
49113: EMPTY
49114: LIST
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PPUSH
49124: CALL_OW 72
49128: IFFALSE 49236
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49130: LD_ADDR_VAR 0 18
49134: PUSH
49135: LD_VAR 0 6
49139: PPUSH
49140: LD_INT 3
49142: PUSH
49143: LD_INT 60
49145: PUSH
49146: EMPTY
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: PUSH
49156: LD_INT 55
49158: PUSH
49159: EMPTY
49160: LIST
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PPUSH
49170: CALL_OW 72
49174: PUSH
49175: LD_INT 1
49177: ARRAY
49178: ST_TO_ADDR
// if IsInUnit ( driver ) then
49179: LD_VAR 0 18
49183: PPUSH
49184: CALL_OW 310
49188: IFFALSE 49199
// ComExit ( driver ) ;
49190: LD_VAR 0 18
49194: PPUSH
49195: CALL 73588 0 1
// AddComEnterUnit ( driver , tmp ) ;
49199: LD_VAR 0 18
49203: PPUSH
49204: LD_VAR 0 13
49208: PPUSH
49209: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49213: LD_VAR 0 18
49217: PPUSH
49218: LD_VAR 0 7
49222: PPUSH
49223: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49227: LD_VAR 0 18
49231: PPUSH
49232: CALL_OW 181
// end ; continue ;
49236: GO 48888
// end ; if not cleaners or not tmp in cleaners then
49238: LD_VAR 0 6
49242: NOT
49243: PUSH
49244: LD_VAR 0 13
49248: PUSH
49249: LD_VAR 0 6
49253: IN
49254: NOT
49255: OR
49256: IFFALSE 49563
// begin if dep then
49258: LD_VAR 0 17
49262: IFFALSE 49398
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49264: LD_ADDR_VAR 0 16
49268: PUSH
49269: LD_VAR 0 17
49273: PUSH
49274: LD_INT 1
49276: ARRAY
49277: PPUSH
49278: CALL_OW 250
49282: PPUSH
49283: LD_VAR 0 17
49287: PUSH
49288: LD_INT 1
49290: ARRAY
49291: PPUSH
49292: CALL_OW 254
49296: PPUSH
49297: LD_INT 5
49299: PPUSH
49300: CALL_OW 272
49304: PUSH
49305: LD_VAR 0 17
49309: PUSH
49310: LD_INT 1
49312: ARRAY
49313: PPUSH
49314: CALL_OW 251
49318: PPUSH
49319: LD_VAR 0 17
49323: PUSH
49324: LD_INT 1
49326: ARRAY
49327: PPUSH
49328: CALL_OW 254
49332: PPUSH
49333: LD_INT 5
49335: PPUSH
49336: CALL_OW 273
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49345: LD_VAR 0 16
49349: PUSH
49350: LD_INT 1
49352: ARRAY
49353: PPUSH
49354: LD_VAR 0 16
49358: PUSH
49359: LD_INT 2
49361: ARRAY
49362: PPUSH
49363: CALL_OW 488
49367: IFFALSE 49398
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49369: LD_VAR 0 13
49373: PPUSH
49374: LD_VAR 0 16
49378: PUSH
49379: LD_INT 1
49381: ARRAY
49382: PPUSH
49383: LD_VAR 0 16
49387: PUSH
49388: LD_INT 2
49390: ARRAY
49391: PPUSH
49392: CALL_OW 111
// continue ;
49396: GO 48888
// end ; end ; r := GetDir ( tmp ) ;
49398: LD_ADDR_VAR 0 15
49402: PUSH
49403: LD_VAR 0 13
49407: PPUSH
49408: CALL_OW 254
49412: ST_TO_ADDR
// if r = 5 then
49413: LD_VAR 0 15
49417: PUSH
49418: LD_INT 5
49420: EQUAL
49421: IFFALSE 49431
// r := 0 ;
49423: LD_ADDR_VAR 0 15
49427: PUSH
49428: LD_INT 0
49430: ST_TO_ADDR
// for j = r to 5 do
49431: LD_ADDR_VAR 0 10
49435: PUSH
49436: DOUBLE
49437: LD_VAR 0 15
49441: DEC
49442: ST_TO_ADDR
49443: LD_INT 5
49445: PUSH
49446: FOR_TO
49447: IFFALSE 49561
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49449: LD_ADDR_VAR 0 11
49453: PUSH
49454: LD_VAR 0 13
49458: PPUSH
49459: CALL_OW 250
49463: PPUSH
49464: LD_VAR 0 10
49468: PPUSH
49469: LD_INT 2
49471: PPUSH
49472: CALL_OW 272
49476: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49477: LD_ADDR_VAR 0 12
49481: PUSH
49482: LD_VAR 0 13
49486: PPUSH
49487: CALL_OW 251
49491: PPUSH
49492: LD_VAR 0 10
49496: PPUSH
49497: LD_INT 2
49499: PPUSH
49500: CALL_OW 273
49504: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49505: LD_VAR 0 11
49509: PPUSH
49510: LD_VAR 0 12
49514: PPUSH
49515: CALL_OW 488
49519: PUSH
49520: LD_VAR 0 11
49524: PPUSH
49525: LD_VAR 0 12
49529: PPUSH
49530: CALL_OW 428
49534: NOT
49535: AND
49536: IFFALSE 49559
// begin ComMoveXY ( tmp , _x , _y ) ;
49538: LD_VAR 0 13
49542: PPUSH
49543: LD_VAR 0 11
49547: PPUSH
49548: LD_VAR 0 12
49552: PPUSH
49553: CALL_OW 111
// break ;
49557: GO 49561
// end ; end ;
49559: GO 49446
49561: POP
49562: POP
// end ; end ;
49563: GO 48888
49565: POP
49566: POP
// end ;
49567: LD_VAR 0 8
49571: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49572: LD_INT 0
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
49583: PPUSH
// result := false ;
49584: LD_ADDR_VAR 0 6
49588: PUSH
49589: LD_INT 0
49591: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49592: LD_VAR 0 1
49596: NOT
49597: PUSH
49598: LD_VAR 0 1
49602: PPUSH
49603: CALL_OW 266
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: IN
49618: NOT
49619: OR
49620: PUSH
49621: LD_VAR 0 2
49625: NOT
49626: OR
49627: PUSH
49628: LD_VAR 0 5
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 4
49647: PUSH
49648: LD_INT 5
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: IN
49659: NOT
49660: OR
49661: PUSH
49662: LD_VAR 0 3
49666: PPUSH
49667: LD_VAR 0 4
49671: PPUSH
49672: CALL_OW 488
49676: NOT
49677: OR
49678: IFFALSE 49682
// exit ;
49680: GO 50399
// pom := GetBase ( depot ) ;
49682: LD_ADDR_VAR 0 10
49686: PUSH
49687: LD_VAR 0 1
49691: PPUSH
49692: CALL_OW 274
49696: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49697: LD_ADDR_VAR 0 11
49701: PUSH
49702: LD_VAR 0 2
49706: PPUSH
49707: LD_VAR 0 1
49711: PPUSH
49712: CALL_OW 248
49716: PPUSH
49717: CALL_OW 450
49721: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49722: LD_VAR 0 10
49726: PPUSH
49727: LD_INT 1
49729: PPUSH
49730: CALL_OW 275
49734: PUSH
49735: LD_VAR 0 11
49739: PUSH
49740: LD_INT 1
49742: ARRAY
49743: GREATEREQUAL
49744: PUSH
49745: LD_VAR 0 10
49749: PPUSH
49750: LD_INT 2
49752: PPUSH
49753: CALL_OW 275
49757: PUSH
49758: LD_VAR 0 11
49762: PUSH
49763: LD_INT 2
49765: ARRAY
49766: GREATEREQUAL
49767: AND
49768: PUSH
49769: LD_VAR 0 10
49773: PPUSH
49774: LD_INT 3
49776: PPUSH
49777: CALL_OW 275
49781: PUSH
49782: LD_VAR 0 11
49786: PUSH
49787: LD_INT 3
49789: ARRAY
49790: GREATEREQUAL
49791: AND
49792: NOT
49793: IFFALSE 49797
// exit ;
49795: GO 50399
// if GetBType ( depot ) = b_depot then
49797: LD_VAR 0 1
49801: PPUSH
49802: CALL_OW 266
49806: PUSH
49807: LD_INT 0
49809: EQUAL
49810: IFFALSE 49822
// dist := 28 else
49812: LD_ADDR_VAR 0 14
49816: PUSH
49817: LD_INT 28
49819: ST_TO_ADDR
49820: GO 49830
// dist := 36 ;
49822: LD_ADDR_VAR 0 14
49826: PUSH
49827: LD_INT 36
49829: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49830: LD_VAR 0 1
49834: PPUSH
49835: LD_VAR 0 3
49839: PPUSH
49840: LD_VAR 0 4
49844: PPUSH
49845: CALL_OW 297
49849: PUSH
49850: LD_VAR 0 14
49854: GREATER
49855: IFFALSE 49859
// exit ;
49857: GO 50399
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49859: LD_ADDR_VAR 0 12
49863: PUSH
49864: LD_VAR 0 2
49868: PPUSH
49869: LD_VAR 0 3
49873: PPUSH
49874: LD_VAR 0 4
49878: PPUSH
49879: LD_VAR 0 5
49883: PPUSH
49884: LD_VAR 0 1
49888: PPUSH
49889: CALL_OW 248
49893: PPUSH
49894: LD_INT 0
49896: PPUSH
49897: CALL 50404 0 6
49901: ST_TO_ADDR
// if not hexes then
49902: LD_VAR 0 12
49906: NOT
49907: IFFALSE 49911
// exit ;
49909: GO 50399
// hex := GetHexInfo ( x , y ) ;
49911: LD_ADDR_VAR 0 15
49915: PUSH
49916: LD_VAR 0 3
49920: PPUSH
49921: LD_VAR 0 4
49925: PPUSH
49926: CALL_OW 546
49930: ST_TO_ADDR
// if hex [ 1 ] then
49931: LD_VAR 0 15
49935: PUSH
49936: LD_INT 1
49938: ARRAY
49939: IFFALSE 49943
// exit ;
49941: GO 50399
// height := hex [ 2 ] ;
49943: LD_ADDR_VAR 0 13
49947: PUSH
49948: LD_VAR 0 15
49952: PUSH
49953: LD_INT 2
49955: ARRAY
49956: ST_TO_ADDR
// for i = 1 to hexes do
49957: LD_ADDR_VAR 0 7
49961: PUSH
49962: DOUBLE
49963: LD_INT 1
49965: DEC
49966: ST_TO_ADDR
49967: LD_VAR 0 12
49971: PUSH
49972: FOR_TO
49973: IFFALSE 50303
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49975: LD_VAR 0 12
49979: PUSH
49980: LD_VAR 0 7
49984: ARRAY
49985: PUSH
49986: LD_INT 1
49988: ARRAY
49989: PPUSH
49990: LD_VAR 0 12
49994: PUSH
49995: LD_VAR 0 7
49999: ARRAY
50000: PUSH
50001: LD_INT 2
50003: ARRAY
50004: PPUSH
50005: CALL_OW 488
50009: NOT
50010: PUSH
50011: LD_VAR 0 12
50015: PUSH
50016: LD_VAR 0 7
50020: ARRAY
50021: PUSH
50022: LD_INT 1
50024: ARRAY
50025: PPUSH
50026: LD_VAR 0 12
50030: PUSH
50031: LD_VAR 0 7
50035: ARRAY
50036: PUSH
50037: LD_INT 2
50039: ARRAY
50040: PPUSH
50041: CALL_OW 428
50045: PUSH
50046: LD_INT 0
50048: GREATER
50049: OR
50050: PUSH
50051: LD_VAR 0 12
50055: PUSH
50056: LD_VAR 0 7
50060: ARRAY
50061: PUSH
50062: LD_INT 1
50064: ARRAY
50065: PPUSH
50066: LD_VAR 0 12
50070: PUSH
50071: LD_VAR 0 7
50075: ARRAY
50076: PUSH
50077: LD_INT 2
50079: ARRAY
50080: PPUSH
50081: CALL_OW 351
50085: OR
50086: IFFALSE 50092
// exit ;
50088: POP
50089: POP
50090: GO 50399
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50092: LD_ADDR_VAR 0 8
50096: PUSH
50097: LD_VAR 0 12
50101: PUSH
50102: LD_VAR 0 7
50106: ARRAY
50107: PUSH
50108: LD_INT 1
50110: ARRAY
50111: PPUSH
50112: LD_VAR 0 12
50116: PUSH
50117: LD_VAR 0 7
50121: ARRAY
50122: PUSH
50123: LD_INT 2
50125: ARRAY
50126: PPUSH
50127: CALL_OW 546
50131: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50132: LD_VAR 0 8
50136: PUSH
50137: LD_INT 1
50139: ARRAY
50140: PUSH
50141: LD_VAR 0 8
50145: PUSH
50146: LD_INT 2
50148: ARRAY
50149: PUSH
50150: LD_VAR 0 13
50154: PUSH
50155: LD_INT 2
50157: PLUS
50158: GREATER
50159: OR
50160: PUSH
50161: LD_VAR 0 8
50165: PUSH
50166: LD_INT 2
50168: ARRAY
50169: PUSH
50170: LD_VAR 0 13
50174: PUSH
50175: LD_INT 2
50177: MINUS
50178: LESS
50179: OR
50180: PUSH
50181: LD_VAR 0 8
50185: PUSH
50186: LD_INT 3
50188: ARRAY
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 8
50195: PUSH
50196: LD_INT 9
50198: PUSH
50199: LD_INT 10
50201: PUSH
50202: LD_INT 11
50204: PUSH
50205: LD_INT 12
50207: PUSH
50208: LD_INT 13
50210: PUSH
50211: LD_INT 16
50213: PUSH
50214: LD_INT 17
50216: PUSH
50217: LD_INT 18
50219: PUSH
50220: LD_INT 19
50222: PUSH
50223: LD_INT 20
50225: PUSH
50226: LD_INT 21
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: IN
50244: NOT
50245: OR
50246: PUSH
50247: LD_VAR 0 8
50251: PUSH
50252: LD_INT 5
50254: ARRAY
50255: NOT
50256: OR
50257: PUSH
50258: LD_VAR 0 8
50262: PUSH
50263: LD_INT 6
50265: ARRAY
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 7
50275: PUSH
50276: LD_INT 9
50278: PUSH
50279: LD_INT 10
50281: PUSH
50282: LD_INT 11
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: IN
50293: NOT
50294: OR
50295: IFFALSE 50301
// exit ;
50297: POP
50298: POP
50299: GO 50399
// end ;
50301: GO 49972
50303: POP
50304: POP
// side := GetSide ( depot ) ;
50305: LD_ADDR_VAR 0 9
50309: PUSH
50310: LD_VAR 0 1
50314: PPUSH
50315: CALL_OW 255
50319: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50320: LD_VAR 0 9
50324: PPUSH
50325: LD_VAR 0 3
50329: PPUSH
50330: LD_VAR 0 4
50334: PPUSH
50335: LD_INT 20
50337: PPUSH
50338: CALL 42750 0 4
50342: PUSH
50343: LD_INT 4
50345: ARRAY
50346: IFFALSE 50350
// exit ;
50348: GO 50399
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50350: LD_VAR 0 2
50354: PUSH
50355: LD_INT 29
50357: PUSH
50358: LD_INT 30
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: IN
50365: PUSH
50366: LD_VAR 0 3
50370: PPUSH
50371: LD_VAR 0 4
50375: PPUSH
50376: LD_VAR 0 9
50380: PPUSH
50381: CALL_OW 440
50385: NOT
50386: AND
50387: IFFALSE 50391
// exit ;
50389: GO 50399
// result := true ;
50391: LD_ADDR_VAR 0 6
50395: PUSH
50396: LD_INT 1
50398: ST_TO_ADDR
// end ;
50399: LD_VAR 0 6
50403: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50404: LD_INT 0
50406: PPUSH
50407: PPUSH
50408: PPUSH
50409: PPUSH
50410: PPUSH
50411: PPUSH
50412: PPUSH
50413: PPUSH
50414: PPUSH
50415: PPUSH
50416: PPUSH
50417: PPUSH
50418: PPUSH
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
50426: PPUSH
50427: PPUSH
50428: PPUSH
50429: PPUSH
50430: PPUSH
50431: PPUSH
50432: PPUSH
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
50448: PPUSH
50449: PPUSH
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
50456: PPUSH
50457: PPUSH
50458: PPUSH
50459: PPUSH
50460: PPUSH
50461: PPUSH
50462: PPUSH
50463: PPUSH
// result = [ ] ;
50464: LD_ADDR_VAR 0 7
50468: PUSH
50469: EMPTY
50470: ST_TO_ADDR
// temp_list = [ ] ;
50471: LD_ADDR_VAR 0 9
50475: PUSH
50476: EMPTY
50477: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50478: LD_VAR 0 4
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: LD_INT 4
50497: PUSH
50498: LD_INT 5
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: IN
50509: NOT
50510: PUSH
50511: LD_VAR 0 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: IN
50526: PUSH
50527: LD_VAR 0 5
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: IN
50546: NOT
50547: AND
50548: OR
50549: IFFALSE 50553
// exit ;
50551: GO 68944
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50553: LD_VAR 0 1
50557: PUSH
50558: LD_INT 6
50560: PUSH
50561: LD_INT 7
50563: PUSH
50564: LD_INT 8
50566: PUSH
50567: LD_INT 13
50569: PUSH
50570: LD_INT 12
50572: PUSH
50573: LD_INT 15
50575: PUSH
50576: LD_INT 11
50578: PUSH
50579: LD_INT 14
50581: PUSH
50582: LD_INT 10
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: IN
50596: IFFALSE 50606
// btype = b_lab ;
50598: LD_ADDR_VAR 0 1
50602: PUSH
50603: LD_INT 6
50605: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50606: LD_VAR 0 6
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: LIST
50624: IN
50625: NOT
50626: PUSH
50627: LD_VAR 0 1
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: LD_INT 6
50646: PUSH
50647: LD_INT 36
50649: PUSH
50650: LD_INT 4
50652: PUSH
50653: LD_INT 5
50655: PUSH
50656: LD_INT 31
50658: PUSH
50659: LD_INT 32
50661: PUSH
50662: LD_INT 33
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: IN
50678: NOT
50679: PUSH
50680: LD_VAR 0 6
50684: PUSH
50685: LD_INT 1
50687: EQUAL
50688: AND
50689: OR
50690: PUSH
50691: LD_VAR 0 1
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: IN
50706: NOT
50707: PUSH
50708: LD_VAR 0 6
50712: PUSH
50713: LD_INT 2
50715: EQUAL
50716: AND
50717: OR
50718: IFFALSE 50728
// mode = 0 ;
50720: LD_ADDR_VAR 0 6
50724: PUSH
50725: LD_INT 0
50727: ST_TO_ADDR
// case mode of 0 :
50728: LD_VAR 0 6
50732: PUSH
50733: LD_INT 0
50735: DOUBLE
50736: EQUAL
50737: IFTRUE 50741
50739: GO 62194
50741: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50742: LD_ADDR_VAR 0 11
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50935: LD_ADDR_VAR 0 12
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: NEG
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 3
51103: NEG
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51131: LD_ADDR_VAR 0 13
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: NEG
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: NEG
51303: PUSH
51304: LD_INT 3
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51330: LD_ADDR_VAR 0 14
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51526: LD_ADDR_VAR 0 15
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51719: LD_ADDR_VAR 0 16
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51912: LD_ADDR_VAR 0 17
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52142: LD_ADDR_VAR 0 18
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52372: LD_ADDR_VAR 0 19
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52602: LD_ADDR_VAR 0 20
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52832: LD_ADDR_VAR 0 21
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53062: LD_ADDR_VAR 0 22
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53292: LD_ADDR_VAR 0 23
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 3
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 2
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53572: LD_ADDR_VAR 0 24
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53848: LD_ADDR_VAR 0 25
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 3
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54122: LD_ADDR_VAR 0 26
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 3
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54398: LD_ADDR_VAR 0 27
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54678: LD_ADDR_VAR 0 28
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 3
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54960: LD_ADDR_VAR 0 29
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 3
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 3
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55239: LD_ADDR_VAR 0 30
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 3
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55517: LD_ADDR_VAR 0 31
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 3
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 3
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: NEG
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55795: LD_ADDR_VAR 0 32
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: LD_INT 3
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 3
56038: NEG
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56073: LD_ADDR_VAR 0 33
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56352: LD_ADDR_VAR 0 34
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56632: LD_ADDR_VAR 0 35
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56744: LD_ADDR_VAR 0 36
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56856: LD_ADDR_VAR 0 37
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56968: LD_ADDR_VAR 0 38
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57080: LD_ADDR_VAR 0 39
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57192: LD_ADDR_VAR 0 40
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57304: LD_ADDR_VAR 0 41
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57654: LD_ADDR_VAR 0 42
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 3
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 3
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58004: LD_ADDR_VAR 0 43
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 3
58300: NEG
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58352: LD_ADDR_VAR 0 44
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: LD_INT 3
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: NEG
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: NEG
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58702: LD_ADDR_VAR 0 45
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 3
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 3
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59052: LD_ADDR_VAR 0 46
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 3
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59400: LD_ADDR_VAR 0 47
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59551: LD_ADDR_VAR 0 48
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59698: LD_ADDR_VAR 0 49
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59842: LD_ADDR_VAR 0 50
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59986: LD_ADDR_VAR 0 51
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60133: LD_ADDR_VAR 0 52
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60284: LD_ADDR_VAR 0 53
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: LD_INT 2
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60514: LD_ADDR_VAR 0 54
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 2
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60744: LD_ADDR_VAR 0 55
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60974: LD_ADDR_VAR 0 56
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61204: LD_ADDR_VAR 0 57
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 2
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61434: LD_ADDR_VAR 0 58
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61664: LD_ADDR_VAR 0 59
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61752: LD_ADDR_VAR 0 60
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61840: LD_ADDR_VAR 0 61
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61928: LD_ADDR_VAR 0 62
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62016: LD_ADDR_VAR 0 63
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62104: LD_ADDR_VAR 0 64
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: ST_TO_ADDR
// end ; 1 :
62192: GO 68089
62194: LD_INT 1
62196: DOUBLE
62197: EQUAL
62198: IFTRUE 62202
62200: GO 64825
62202: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62203: LD_ADDR_VAR 0 11
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 3
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 3
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62247: LD_ADDR_VAR 0 12
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62288: LD_ADDR_VAR 0 13
62292: PUSH
62293: LD_INT 3
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 3
62305: PUSH
62306: LD_INT 3
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62328: LD_ADDR_VAR 0 14
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62369: LD_ADDR_VAR 0 15
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 3
62398: NEG
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: LIST
62412: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62413: LD_ADDR_VAR 0 16
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: LD_INT 3
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 3
62432: NEG
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: NEG
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62459: LD_ADDR_VAR 0 17
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 3
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62503: LD_ADDR_VAR 0 18
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62544: LD_ADDR_VAR 0 19
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 3
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 2
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62584: LD_ADDR_VAR 0 20
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62625: LD_ADDR_VAR 0 21
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: NEG
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62669: LD_ADDR_VAR 0 22
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: NEG
62689: PUSH
62690: LD_INT 2
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 3
62700: NEG
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62715: LD_ADDR_VAR 0 23
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 3
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: LD_INT 4
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 3
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: LIST
62758: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62759: LD_ADDR_VAR 0 24
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 4
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62800: LD_ADDR_VAR 0 25
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 4
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 3
62827: PUSH
62828: LD_INT 4
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62840: LD_ADDR_VAR 0 26
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: LD_INT 3
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: LD_INT 4
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62881: LD_ADDR_VAR 0 27
62885: PUSH
62886: LD_INT 3
62888: NEG
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 3
62899: NEG
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 4
62910: NEG
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62925: LD_ADDR_VAR 0 28
62929: PUSH
62930: LD_INT 3
62932: NEG
62933: PUSH
62934: LD_INT 3
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: LD_INT 4
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 4
62956: NEG
62957: PUSH
62958: LD_INT 3
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: LIST
62970: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62971: LD_ADDR_VAR 0 29
62975: PUSH
62976: LD_INT 1
62978: NEG
62979: PUSH
62980: LD_INT 3
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 3
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: LD_INT 2
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 4
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 4
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 3
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 5
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 5
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: LD_INT 4
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 6
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 6
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: LD_INT 5
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63126: LD_ADDR_VAR 0 30
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 4
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 4
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 5
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 5
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 5
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 6
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 6
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63269: LD_ADDR_VAR 0 31
63273: PUSH
63274: LD_INT 3
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 3
63286: PUSH
63287: LD_INT 3
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 2
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 4
63306: PUSH
63307: LD_INT 3
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 4
63316: PUSH
63317: LD_INT 4
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 3
63326: PUSH
63327: LD_INT 4
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 5
63336: PUSH
63337: LD_INT 4
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 5
63346: PUSH
63347: LD_INT 5
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 4
63356: PUSH
63357: LD_INT 5
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 6
63366: PUSH
63367: LD_INT 5
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 6
63376: PUSH
63377: LD_INT 6
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 5
63386: PUSH
63387: LD_INT 6
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63408: LD_ADDR_VAR 0 32
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 3
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 1
63435: NEG
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: LD_INT 4
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: LD_INT 5
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 5
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: NEG
63498: PUSH
63499: LD_INT 4
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: LD_INT 6
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 6
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: LD_INT 5
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63551: LD_ADDR_VAR 0 33
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 3
63569: NEG
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 3
63580: NEG
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: NEG
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 4
63603: NEG
63604: PUSH
63605: LD_INT 0
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 4
63614: NEG
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 4
63626: NEG
63627: PUSH
63628: LD_INT 1
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 5
63637: NEG
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 5
63648: NEG
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 5
63660: NEG
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 6
63671: NEG
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 6
63682: NEG
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63706: LD_ADDR_VAR 0 34
63710: PUSH
63711: LD_INT 2
63713: NEG
63714: PUSH
63715: LD_INT 3
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 3
63725: NEG
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 3
63737: NEG
63738: PUSH
63739: LD_INT 3
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 3
63749: NEG
63750: PUSH
63751: LD_INT 4
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 4
63761: NEG
63762: PUSH
63763: LD_INT 3
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 4
63773: NEG
63774: PUSH
63775: LD_INT 4
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 4
63785: NEG
63786: PUSH
63787: LD_INT 5
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 5
63797: NEG
63798: PUSH
63799: LD_INT 4
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 5
63809: NEG
63810: PUSH
63811: LD_INT 5
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 5
63821: NEG
63822: PUSH
63823: LD_INT 6
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 6
63833: NEG
63834: PUSH
63835: LD_INT 5
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 6
63845: NEG
63846: PUSH
63847: LD_INT 6
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63869: LD_ADDR_VAR 0 41
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 2
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 3
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63913: LD_ADDR_VAR 0 42
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 3
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: LIST
63953: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63954: LD_ADDR_VAR 0 43
63958: PUSH
63959: LD_INT 2
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 3
63971: PUSH
63972: LD_INT 2
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 2
63981: PUSH
63982: LD_INT 3
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: LIST
63993: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63994: LD_ADDR_VAR 0 44
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: LD_INT 2
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 3
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 2
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: LIST
64034: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64035: LD_ADDR_VAR 0 45
64039: PUSH
64040: LD_INT 2
64042: NEG
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 2
64053: NEG
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 3
64064: NEG
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: LIST
64078: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64079: LD_ADDR_VAR 0 46
64083: PUSH
64084: LD_INT 2
64086: NEG
64087: PUSH
64088: LD_INT 2
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 3
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: NEG
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: LIST
64124: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64125: LD_ADDR_VAR 0 47
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 3
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: NEG
64145: PUSH
64146: LD_INT 3
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64158: LD_ADDR_VAR 0 48
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: LD_INT 2
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64189: LD_ADDR_VAR 0 49
64193: PUSH
64194: LD_INT 3
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64218: LD_ADDR_VAR 0 50
64222: PUSH
64223: LD_INT 2
64225: PUSH
64226: LD_INT 3
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: LD_INT 3
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64247: LD_ADDR_VAR 0 51
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: LD_INT 2
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 2
64265: NEG
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64278: LD_ADDR_VAR 0 52
64282: PUSH
64283: LD_INT 3
64285: NEG
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: LD_INT 2
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64311: LD_ADDR_VAR 0 53
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: LD_INT 3
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 3
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: LD_INT 2
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64355: LD_ADDR_VAR 0 54
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 3
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 3
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: LIST
64395: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64396: LD_ADDR_VAR 0 55
64400: PUSH
64401: LD_INT 3
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 3
64413: PUSH
64414: LD_INT 3
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: PUSH
64424: LD_INT 3
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64436: LD_ADDR_VAR 0 56
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 3
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64477: LD_ADDR_VAR 0 57
64481: PUSH
64482: LD_INT 2
64484: NEG
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 3
64495: NEG
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 3
64506: NEG
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64521: LD_ADDR_VAR 0 58
64525: PUSH
64526: LD_INT 2
64528: NEG
64529: PUSH
64530: LD_INT 3
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: NEG
64541: PUSH
64542: LD_INT 2
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: NEG
64553: PUSH
64554: LD_INT 3
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64567: LD_ADDR_VAR 0 59
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: LD_INT 2
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64611: LD_ADDR_VAR 0 60
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 2
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64652: LD_ADDR_VAR 0 61
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: LIST
64691: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64692: LD_ADDR_VAR 0 62
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 2
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64733: LD_ADDR_VAR 0 63
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 2
64751: NEG
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64777: LD_ADDR_VAR 0 64
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 2
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: NEG
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: ST_TO_ADDR
// end ; 2 :
64823: GO 68089
64825: LD_INT 2
64827: DOUBLE
64828: EQUAL
64829: IFTRUE 64833
64831: GO 68088
64833: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64834: LD_ADDR_VAR 0 29
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 4
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 5
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 5
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 4
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 5
64924: PUSH
64925: LD_INT 2
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 3
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 3
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 4
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 4
64964: PUSH
64965: LD_INT 4
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: LD_INT 4
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 2
64984: PUSH
64985: LD_INT 3
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 4
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 2
65014: PUSH
65015: LD_INT 4
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 4
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: LD_INT 3
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 4
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 5
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 5
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 4
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: LD_INT 5
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: LD_INT 3
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 3
65128: NEG
65129: PUSH
65130: LD_INT 1
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 3
65162: NEG
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 4
65173: NEG
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 4
65184: NEG
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 4
65196: NEG
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 2
65208: NEG
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 4
65219: NEG
65220: PUSH
65221: LD_INT 4
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 4
65231: NEG
65232: PUSH
65233: LD_INT 5
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 3
65243: NEG
65244: PUSH
65245: LD_INT 4
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: NEG
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 4
65267: NEG
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 5
65279: NEG
65280: PUSH
65281: LD_INT 4
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 5
65291: NEG
65292: PUSH
65293: LD_INT 5
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 3
65303: NEG
65304: PUSH
65305: LD_INT 5
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 5
65315: NEG
65316: PUSH
65317: LD_INT 3
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65372: LD_ADDR_VAR 0 30
65376: PUSH
65377: LD_INT 4
65379: PUSH
65380: LD_INT 4
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 4
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 5
65399: PUSH
65400: LD_INT 4
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 5
65409: PUSH
65410: LD_INT 5
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 4
65419: PUSH
65420: LD_INT 5
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 3
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 5
65449: PUSH
65450: LD_INT 3
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 3
65459: PUSH
65460: LD_INT 5
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: LD_INT 4
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 4
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 1
65519: NEG
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: PUSH
65542: LD_INT 4
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 2
65551: NEG
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 4
65562: NEG
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 4
65573: NEG
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: NEG
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: NEG
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 4
65607: NEG
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 5
65618: NEG
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 5
65629: NEG
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 5
65641: NEG
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 3
65653: NEG
65654: PUSH
65655: LD_INT 2
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: NEG
65665: PUSH
65666: LD_INT 3
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 3
65676: NEG
65677: PUSH
65678: LD_INT 4
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: NEG
65689: PUSH
65690: LD_INT 3
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 2
65700: NEG
65701: PUSH
65702: LD_INT 2
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 3
65712: NEG
65713: PUSH
65714: LD_INT 2
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 4
65724: NEG
65725: PUSH
65726: LD_INT 3
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 4
65736: NEG
65737: PUSH
65738: LD_INT 4
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: LD_INT 4
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 4
65760: NEG
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 4
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: LD_INT 5
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: LD_INT 4
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: LD_INT 3
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: LD_INT 4
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: LD_INT 5
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: PUSH
65852: LD_INT 3
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: LD_INT 5
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65919: LD_ADDR_VAR 0 31
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: LD_INT 4
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 4
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: LD_INT 5
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: LD_INT 5
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 4
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 2
65998: PUSH
65999: LD_INT 5
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: LD_INT 3
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 3
66019: NEG
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 3
66030: NEG
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: NEG
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 3
66064: NEG
66065: PUSH
66066: LD_INT 1
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 4
66075: NEG
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 4
66086: NEG
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 4
66098: NEG
66099: PUSH
66100: LD_INT 2
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: LD_INT 2
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 4
66121: NEG
66122: PUSH
66123: LD_INT 4
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 4
66133: NEG
66134: PUSH
66135: LD_INT 5
66137: NEG
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 3
66145: NEG
66146: PUSH
66147: LD_INT 4
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 3
66157: NEG
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 4
66169: NEG
66170: PUSH
66171: LD_INT 3
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 5
66181: NEG
66182: PUSH
66183: LD_INT 4
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 5
66193: NEG
66194: PUSH
66195: LD_INT 5
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 3
66205: NEG
66206: PUSH
66207: LD_INT 5
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 5
66217: NEG
66218: PUSH
66219: LD_INT 3
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 3
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: LD_INT 4
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: LD_INT 2
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 1
66284: NEG
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 2
66319: NEG
66320: PUSH
66321: LD_INT 4
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 4
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 4
66341: PUSH
66342: LD_INT 1
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 5
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 5
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 4
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 3
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: LD_INT 2
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 5
66414: PUSH
66415: LD_INT 2
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66469: LD_ADDR_VAR 0 32
66473: PUSH
66474: LD_INT 4
66476: NEG
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 4
66487: NEG
66488: PUSH
66489: LD_INT 1
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 3
66499: NEG
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: LD_INT 1
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 4
66521: NEG
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 5
66532: NEG
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 5
66543: NEG
66544: PUSH
66545: LD_INT 1
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 5
66555: NEG
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 3
66567: NEG
66568: PUSH
66569: LD_INT 2
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 3
66578: NEG
66579: PUSH
66580: LD_INT 3
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 3
66590: NEG
66591: PUSH
66592: LD_INT 4
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 2
66602: NEG
66603: PUSH
66604: LD_INT 3
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: NEG
66615: PUSH
66616: LD_INT 2
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: NEG
66627: PUSH
66628: LD_INT 2
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 4
66638: NEG
66639: PUSH
66640: LD_INT 3
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 4
66650: NEG
66651: PUSH
66652: LD_INT 4
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: LD_INT 4
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 4
66674: NEG
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: LD_INT 4
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_INT 5
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 1
66708: PUSH
66709: LD_INT 4
66711: NEG
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: LD_INT 3
66722: NEG
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: LD_INT 3
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: NEG
66742: PUSH
66743: LD_INT 4
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: NEG
66754: PUSH
66755: LD_INT 5
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: LD_INT 3
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 2
66776: NEG
66777: PUSH
66778: LD_INT 5
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 4
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 2
66860: PUSH
66861: LD_INT 2
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 4
66871: PUSH
66872: LD_INT 2
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 4
66881: PUSH
66882: LD_INT 4
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 4
66891: PUSH
66892: LD_INT 3
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 5
66901: PUSH
66902: LD_INT 4
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 5
66911: PUSH
66912: LD_INT 5
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 4
66921: PUSH
66922: LD_INT 5
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 3
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 5
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: LD_INT 5
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67016: LD_ADDR_VAR 0 33
67020: PUSH
67021: LD_INT 4
67023: NEG
67024: PUSH
67025: LD_INT 4
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 4
67035: NEG
67036: PUSH
67037: LD_INT 5
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 3
67047: NEG
67048: PUSH
67049: LD_INT 4
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 3
67059: NEG
67060: PUSH
67061: LD_INT 3
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 4
67071: NEG
67072: PUSH
67073: LD_INT 3
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 5
67083: NEG
67084: PUSH
67085: LD_INT 4
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 5
67095: NEG
67096: PUSH
67097: LD_INT 5
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 3
67107: NEG
67108: PUSH
67109: LD_INT 5
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 5
67119: NEG
67120: PUSH
67121: LD_INT 3
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 0
67142: PUSH
67143: LD_INT 4
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: LD_INT 2
67167: NEG
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: LD_INT 2
67178: NEG
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: LD_INT 3
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 1
67198: NEG
67199: PUSH
67200: LD_INT 4
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 2
67210: PUSH
67211: LD_INT 2
67213: NEG
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 2
67221: NEG
67222: PUSH
67223: LD_INT 4
67225: NEG
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 4
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: LD_INT 1
67246: NEG
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 5
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 5
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 4
67274: PUSH
67275: LD_INT 1
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 3
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 3
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 3
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 5
67316: PUSH
67317: LD_INT 2
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 3
67326: PUSH
67327: LD_INT 3
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 3
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 4
67346: PUSH
67347: LD_INT 3
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 4
67356: PUSH
67357: LD_INT 4
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 3
67366: PUSH
67367: LD_INT 4
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: LD_INT 3
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: LD_INT 2
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 4
67396: PUSH
67397: LD_INT 2
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 2
67406: PUSH
67407: LD_INT 4
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 4
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: LD_INT 3
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: LD_INT 4
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: LD_INT 5
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: LD_INT 5
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: PUSH
67468: LD_INT 4
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: NEG
67478: PUSH
67479: LD_INT 3
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 2
67488: PUSH
67489: LD_INT 5
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 2
67498: NEG
67499: PUSH
67500: LD_INT 3
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67554: LD_ADDR_VAR 0 34
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: LD_INT 5
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: LD_INT 4
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 3
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: LD_INT 4
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 5
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 2
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 2
67651: NEG
67652: PUSH
67653: LD_INT 5
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: LD_INT 0
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 3
67673: PUSH
67674: LD_INT 1
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 4
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 4
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 3
67704: PUSH
67705: LD_INT 1
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 2
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: LD_INT 2
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: LD_INT 2
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 4
67756: PUSH
67757: LD_INT 4
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 4
67766: PUSH
67767: LD_INT 3
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 5
67776: PUSH
67777: LD_INT 4
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 5
67786: PUSH
67787: LD_INT 5
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: LD_INT 5
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: LD_INT 4
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: LD_INT 3
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 5
67826: PUSH
67827: LD_INT 3
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: LD_INT 5
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: LD_INT 3
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: LD_INT 2
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: LD_INT 4
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: LD_INT 4
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: LD_INT 3
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 1
67907: NEG
67908: PUSH
67909: LD_INT 2
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 2
67918: PUSH
67919: LD_INT 4
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: NEG
67929: PUSH
67930: LD_INT 2
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 4
67939: NEG
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 4
67950: NEG
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 3
67962: NEG
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: LD_INT 1
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 4
67984: NEG
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 5
67995: NEG
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 5
68006: NEG
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 5
68018: NEG
68019: PUSH
68020: LD_INT 2
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: ST_TO_ADDR
// end ; end ;
68086: GO 68089
68088: POP
// case btype of b_depot , b_warehouse :
68089: LD_VAR 0 1
68093: PUSH
68094: LD_INT 0
68096: DOUBLE
68097: EQUAL
68098: IFTRUE 68108
68100: LD_INT 1
68102: DOUBLE
68103: EQUAL
68104: IFTRUE 68108
68106: GO 68309
68108: POP
// case nation of nation_american :
68109: LD_VAR 0 5
68113: PUSH
68114: LD_INT 1
68116: DOUBLE
68117: EQUAL
68118: IFTRUE 68122
68120: GO 68178
68122: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68123: LD_ADDR_VAR 0 9
68127: PUSH
68128: LD_VAR 0 11
68132: PUSH
68133: LD_VAR 0 12
68137: PUSH
68138: LD_VAR 0 13
68142: PUSH
68143: LD_VAR 0 14
68147: PUSH
68148: LD_VAR 0 15
68152: PUSH
68153: LD_VAR 0 16
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: PUSH
68166: LD_VAR 0 4
68170: PUSH
68171: LD_INT 1
68173: PLUS
68174: ARRAY
68175: ST_TO_ADDR
68176: GO 68307
68178: LD_INT 2
68180: DOUBLE
68181: EQUAL
68182: IFTRUE 68186
68184: GO 68242
68186: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68187: LD_ADDR_VAR 0 9
68191: PUSH
68192: LD_VAR 0 17
68196: PUSH
68197: LD_VAR 0 18
68201: PUSH
68202: LD_VAR 0 19
68206: PUSH
68207: LD_VAR 0 20
68211: PUSH
68212: LD_VAR 0 21
68216: PUSH
68217: LD_VAR 0 22
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: PUSH
68230: LD_VAR 0 4
68234: PUSH
68235: LD_INT 1
68237: PLUS
68238: ARRAY
68239: ST_TO_ADDR
68240: GO 68307
68242: LD_INT 3
68244: DOUBLE
68245: EQUAL
68246: IFTRUE 68250
68248: GO 68306
68250: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68251: LD_ADDR_VAR 0 9
68255: PUSH
68256: LD_VAR 0 23
68260: PUSH
68261: LD_VAR 0 24
68265: PUSH
68266: LD_VAR 0 25
68270: PUSH
68271: LD_VAR 0 26
68275: PUSH
68276: LD_VAR 0 27
68280: PUSH
68281: LD_VAR 0 28
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: PUSH
68294: LD_VAR 0 4
68298: PUSH
68299: LD_INT 1
68301: PLUS
68302: ARRAY
68303: ST_TO_ADDR
68304: GO 68307
68306: POP
68307: GO 68862
68309: LD_INT 2
68311: DOUBLE
68312: EQUAL
68313: IFTRUE 68323
68315: LD_INT 3
68317: DOUBLE
68318: EQUAL
68319: IFTRUE 68323
68321: GO 68379
68323: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68324: LD_ADDR_VAR 0 9
68328: PUSH
68329: LD_VAR 0 29
68333: PUSH
68334: LD_VAR 0 30
68338: PUSH
68339: LD_VAR 0 31
68343: PUSH
68344: LD_VAR 0 32
68348: PUSH
68349: LD_VAR 0 33
68353: PUSH
68354: LD_VAR 0 34
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: PUSH
68367: LD_VAR 0 4
68371: PUSH
68372: LD_INT 1
68374: PLUS
68375: ARRAY
68376: ST_TO_ADDR
68377: GO 68862
68379: LD_INT 16
68381: DOUBLE
68382: EQUAL
68383: IFTRUE 68441
68385: LD_INT 17
68387: DOUBLE
68388: EQUAL
68389: IFTRUE 68441
68391: LD_INT 18
68393: DOUBLE
68394: EQUAL
68395: IFTRUE 68441
68397: LD_INT 19
68399: DOUBLE
68400: EQUAL
68401: IFTRUE 68441
68403: LD_INT 22
68405: DOUBLE
68406: EQUAL
68407: IFTRUE 68441
68409: LD_INT 20
68411: DOUBLE
68412: EQUAL
68413: IFTRUE 68441
68415: LD_INT 21
68417: DOUBLE
68418: EQUAL
68419: IFTRUE 68441
68421: LD_INT 23
68423: DOUBLE
68424: EQUAL
68425: IFTRUE 68441
68427: LD_INT 24
68429: DOUBLE
68430: EQUAL
68431: IFTRUE 68441
68433: LD_INT 25
68435: DOUBLE
68436: EQUAL
68437: IFTRUE 68441
68439: GO 68497
68441: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68442: LD_ADDR_VAR 0 9
68446: PUSH
68447: LD_VAR 0 35
68451: PUSH
68452: LD_VAR 0 36
68456: PUSH
68457: LD_VAR 0 37
68461: PUSH
68462: LD_VAR 0 38
68466: PUSH
68467: LD_VAR 0 39
68471: PUSH
68472: LD_VAR 0 40
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: PUSH
68485: LD_VAR 0 4
68489: PUSH
68490: LD_INT 1
68492: PLUS
68493: ARRAY
68494: ST_TO_ADDR
68495: GO 68862
68497: LD_INT 6
68499: DOUBLE
68500: EQUAL
68501: IFTRUE 68553
68503: LD_INT 7
68505: DOUBLE
68506: EQUAL
68507: IFTRUE 68553
68509: LD_INT 8
68511: DOUBLE
68512: EQUAL
68513: IFTRUE 68553
68515: LD_INT 13
68517: DOUBLE
68518: EQUAL
68519: IFTRUE 68553
68521: LD_INT 12
68523: DOUBLE
68524: EQUAL
68525: IFTRUE 68553
68527: LD_INT 15
68529: DOUBLE
68530: EQUAL
68531: IFTRUE 68553
68533: LD_INT 11
68535: DOUBLE
68536: EQUAL
68537: IFTRUE 68553
68539: LD_INT 14
68541: DOUBLE
68542: EQUAL
68543: IFTRUE 68553
68545: LD_INT 10
68547: DOUBLE
68548: EQUAL
68549: IFTRUE 68553
68551: GO 68609
68553: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68554: LD_ADDR_VAR 0 9
68558: PUSH
68559: LD_VAR 0 41
68563: PUSH
68564: LD_VAR 0 42
68568: PUSH
68569: LD_VAR 0 43
68573: PUSH
68574: LD_VAR 0 44
68578: PUSH
68579: LD_VAR 0 45
68583: PUSH
68584: LD_VAR 0 46
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: PUSH
68597: LD_VAR 0 4
68601: PUSH
68602: LD_INT 1
68604: PLUS
68605: ARRAY
68606: ST_TO_ADDR
68607: GO 68862
68609: LD_INT 36
68611: DOUBLE
68612: EQUAL
68613: IFTRUE 68617
68615: GO 68673
68617: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68618: LD_ADDR_VAR 0 9
68622: PUSH
68623: LD_VAR 0 47
68627: PUSH
68628: LD_VAR 0 48
68632: PUSH
68633: LD_VAR 0 49
68637: PUSH
68638: LD_VAR 0 50
68642: PUSH
68643: LD_VAR 0 51
68647: PUSH
68648: LD_VAR 0 52
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: PUSH
68661: LD_VAR 0 4
68665: PUSH
68666: LD_INT 1
68668: PLUS
68669: ARRAY
68670: ST_TO_ADDR
68671: GO 68862
68673: LD_INT 4
68675: DOUBLE
68676: EQUAL
68677: IFTRUE 68699
68679: LD_INT 5
68681: DOUBLE
68682: EQUAL
68683: IFTRUE 68699
68685: LD_INT 34
68687: DOUBLE
68688: EQUAL
68689: IFTRUE 68699
68691: LD_INT 37
68693: DOUBLE
68694: EQUAL
68695: IFTRUE 68699
68697: GO 68755
68699: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68700: LD_ADDR_VAR 0 9
68704: PUSH
68705: LD_VAR 0 53
68709: PUSH
68710: LD_VAR 0 54
68714: PUSH
68715: LD_VAR 0 55
68719: PUSH
68720: LD_VAR 0 56
68724: PUSH
68725: LD_VAR 0 57
68729: PUSH
68730: LD_VAR 0 58
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: PUSH
68743: LD_VAR 0 4
68747: PUSH
68748: LD_INT 1
68750: PLUS
68751: ARRAY
68752: ST_TO_ADDR
68753: GO 68862
68755: LD_INT 31
68757: DOUBLE
68758: EQUAL
68759: IFTRUE 68805
68761: LD_INT 32
68763: DOUBLE
68764: EQUAL
68765: IFTRUE 68805
68767: LD_INT 33
68769: DOUBLE
68770: EQUAL
68771: IFTRUE 68805
68773: LD_INT 27
68775: DOUBLE
68776: EQUAL
68777: IFTRUE 68805
68779: LD_INT 26
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68805
68785: LD_INT 28
68787: DOUBLE
68788: EQUAL
68789: IFTRUE 68805
68791: LD_INT 29
68793: DOUBLE
68794: EQUAL
68795: IFTRUE 68805
68797: LD_INT 30
68799: DOUBLE
68800: EQUAL
68801: IFTRUE 68805
68803: GO 68861
68805: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68806: LD_ADDR_VAR 0 9
68810: PUSH
68811: LD_VAR 0 59
68815: PUSH
68816: LD_VAR 0 60
68820: PUSH
68821: LD_VAR 0 61
68825: PUSH
68826: LD_VAR 0 62
68830: PUSH
68831: LD_VAR 0 63
68835: PUSH
68836: LD_VAR 0 64
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: PUSH
68849: LD_VAR 0 4
68853: PUSH
68854: LD_INT 1
68856: PLUS
68857: ARRAY
68858: ST_TO_ADDR
68859: GO 68862
68861: POP
// temp_list2 = [ ] ;
68862: LD_ADDR_VAR 0 10
68866: PUSH
68867: EMPTY
68868: ST_TO_ADDR
// for i in temp_list do
68869: LD_ADDR_VAR 0 8
68873: PUSH
68874: LD_VAR 0 9
68878: PUSH
68879: FOR_IN
68880: IFFALSE 68932
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68882: LD_ADDR_VAR 0 10
68886: PUSH
68887: LD_VAR 0 10
68891: PUSH
68892: LD_VAR 0 8
68896: PUSH
68897: LD_INT 1
68899: ARRAY
68900: PUSH
68901: LD_VAR 0 2
68905: PLUS
68906: PUSH
68907: LD_VAR 0 8
68911: PUSH
68912: LD_INT 2
68914: ARRAY
68915: PUSH
68916: LD_VAR 0 3
68920: PLUS
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: EMPTY
68927: LIST
68928: ADD
68929: ST_TO_ADDR
68930: GO 68879
68932: POP
68933: POP
// result = temp_list2 ;
68934: LD_ADDR_VAR 0 7
68938: PUSH
68939: LD_VAR 0 10
68943: ST_TO_ADDR
// end ;
68944: LD_VAR 0 7
68948: RET
// export function EnemyInRange ( unit , dist ) ; begin
68949: LD_INT 0
68951: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68952: LD_ADDR_VAR 0 3
68956: PUSH
68957: LD_VAR 0 1
68961: PPUSH
68962: CALL_OW 255
68966: PPUSH
68967: LD_VAR 0 1
68971: PPUSH
68972: CALL_OW 250
68976: PPUSH
68977: LD_VAR 0 1
68981: PPUSH
68982: CALL_OW 251
68986: PPUSH
68987: LD_VAR 0 2
68991: PPUSH
68992: CALL 42750 0 4
68996: PUSH
68997: LD_INT 4
68999: ARRAY
69000: ST_TO_ADDR
// end ;
69001: LD_VAR 0 3
69005: RET
// export function PlayerSeeMe ( unit ) ; begin
69006: LD_INT 0
69008: PPUSH
// result := See ( your_side , unit ) ;
69009: LD_ADDR_VAR 0 2
69013: PUSH
69014: LD_OWVAR 2
69018: PPUSH
69019: LD_VAR 0 1
69023: PPUSH
69024: CALL_OW 292
69028: ST_TO_ADDR
// end ;
69029: LD_VAR 0 2
69033: RET
// export function ReverseDir ( unit ) ; begin
69034: LD_INT 0
69036: PPUSH
// if not unit then
69037: LD_VAR 0 1
69041: NOT
69042: IFFALSE 69046
// exit ;
69044: GO 69069
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69046: LD_ADDR_VAR 0 2
69050: PUSH
69051: LD_VAR 0 1
69055: PPUSH
69056: CALL_OW 254
69060: PUSH
69061: LD_INT 3
69063: PLUS
69064: PUSH
69065: LD_INT 6
69067: MOD
69068: ST_TO_ADDR
// end ;
69069: LD_VAR 0 2
69073: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69074: LD_INT 0
69076: PPUSH
69077: PPUSH
69078: PPUSH
69079: PPUSH
69080: PPUSH
// if not hexes then
69081: LD_VAR 0 2
69085: NOT
69086: IFFALSE 69090
// exit ;
69088: GO 69238
// dist := 9999 ;
69090: LD_ADDR_VAR 0 5
69094: PUSH
69095: LD_INT 9999
69097: ST_TO_ADDR
// for i = 1 to hexes do
69098: LD_ADDR_VAR 0 4
69102: PUSH
69103: DOUBLE
69104: LD_INT 1
69106: DEC
69107: ST_TO_ADDR
69108: LD_VAR 0 2
69112: PUSH
69113: FOR_TO
69114: IFFALSE 69226
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69116: LD_VAR 0 1
69120: PPUSH
69121: LD_VAR 0 2
69125: PUSH
69126: LD_VAR 0 4
69130: ARRAY
69131: PUSH
69132: LD_INT 1
69134: ARRAY
69135: PPUSH
69136: LD_VAR 0 2
69140: PUSH
69141: LD_VAR 0 4
69145: ARRAY
69146: PUSH
69147: LD_INT 2
69149: ARRAY
69150: PPUSH
69151: CALL_OW 297
69155: PUSH
69156: LD_VAR 0 5
69160: LESS
69161: IFFALSE 69224
// begin hex := hexes [ i ] ;
69163: LD_ADDR_VAR 0 7
69167: PUSH
69168: LD_VAR 0 2
69172: PUSH
69173: LD_VAR 0 4
69177: ARRAY
69178: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69179: LD_ADDR_VAR 0 5
69183: PUSH
69184: LD_VAR 0 1
69188: PPUSH
69189: LD_VAR 0 2
69193: PUSH
69194: LD_VAR 0 4
69198: ARRAY
69199: PUSH
69200: LD_INT 1
69202: ARRAY
69203: PPUSH
69204: LD_VAR 0 2
69208: PUSH
69209: LD_VAR 0 4
69213: ARRAY
69214: PUSH
69215: LD_INT 2
69217: ARRAY
69218: PPUSH
69219: CALL_OW 297
69223: ST_TO_ADDR
// end ; end ;
69224: GO 69113
69226: POP
69227: POP
// result := hex ;
69228: LD_ADDR_VAR 0 3
69232: PUSH
69233: LD_VAR 0 7
69237: ST_TO_ADDR
// end ;
69238: LD_VAR 0 3
69242: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69243: LD_INT 0
69245: PPUSH
69246: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69247: LD_VAR 0 1
69251: NOT
69252: PUSH
69253: LD_VAR 0 1
69257: PUSH
69258: LD_INT 21
69260: PUSH
69261: LD_INT 2
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 23
69270: PUSH
69271: LD_INT 2
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PPUSH
69282: CALL_OW 69
69286: IN
69287: NOT
69288: OR
69289: IFFALSE 69293
// exit ;
69291: GO 69340
// for i = 1 to 3 do
69293: LD_ADDR_VAR 0 3
69297: PUSH
69298: DOUBLE
69299: LD_INT 1
69301: DEC
69302: ST_TO_ADDR
69303: LD_INT 3
69305: PUSH
69306: FOR_TO
69307: IFFALSE 69338
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69309: LD_VAR 0 1
69313: PPUSH
69314: CALL_OW 250
69318: PPUSH
69319: LD_VAR 0 1
69323: PPUSH
69324: CALL_OW 251
69328: PPUSH
69329: LD_INT 1
69331: PPUSH
69332: CALL_OW 453
69336: GO 69306
69338: POP
69339: POP
// end ;
69340: LD_VAR 0 2
69344: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69345: LD_INT 0
69347: PPUSH
69348: PPUSH
69349: PPUSH
69350: PPUSH
69351: PPUSH
69352: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69353: LD_VAR 0 1
69357: NOT
69358: PUSH
69359: LD_VAR 0 2
69363: NOT
69364: OR
69365: PUSH
69366: LD_VAR 0 1
69370: PPUSH
69371: CALL_OW 314
69375: OR
69376: IFFALSE 69380
// exit ;
69378: GO 69821
// x := GetX ( enemy_unit ) ;
69380: LD_ADDR_VAR 0 7
69384: PUSH
69385: LD_VAR 0 2
69389: PPUSH
69390: CALL_OW 250
69394: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69395: LD_ADDR_VAR 0 8
69399: PUSH
69400: LD_VAR 0 2
69404: PPUSH
69405: CALL_OW 251
69409: ST_TO_ADDR
// if not x or not y then
69410: LD_VAR 0 7
69414: NOT
69415: PUSH
69416: LD_VAR 0 8
69420: NOT
69421: OR
69422: IFFALSE 69426
// exit ;
69424: GO 69821
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69426: LD_ADDR_VAR 0 6
69430: PUSH
69431: LD_VAR 0 7
69435: PPUSH
69436: LD_INT 0
69438: PPUSH
69439: LD_INT 4
69441: PPUSH
69442: CALL_OW 272
69446: PUSH
69447: LD_VAR 0 8
69451: PPUSH
69452: LD_INT 0
69454: PPUSH
69455: LD_INT 4
69457: PPUSH
69458: CALL_OW 273
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_VAR 0 7
69471: PPUSH
69472: LD_INT 1
69474: PPUSH
69475: LD_INT 4
69477: PPUSH
69478: CALL_OW 272
69482: PUSH
69483: LD_VAR 0 8
69487: PPUSH
69488: LD_INT 1
69490: PPUSH
69491: LD_INT 4
69493: PPUSH
69494: CALL_OW 273
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_VAR 0 7
69507: PPUSH
69508: LD_INT 2
69510: PPUSH
69511: LD_INT 4
69513: PPUSH
69514: CALL_OW 272
69518: PUSH
69519: LD_VAR 0 8
69523: PPUSH
69524: LD_INT 2
69526: PPUSH
69527: LD_INT 4
69529: PPUSH
69530: CALL_OW 273
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_VAR 0 7
69543: PPUSH
69544: LD_INT 3
69546: PPUSH
69547: LD_INT 4
69549: PPUSH
69550: CALL_OW 272
69554: PUSH
69555: LD_VAR 0 8
69559: PPUSH
69560: LD_INT 3
69562: PPUSH
69563: LD_INT 4
69565: PPUSH
69566: CALL_OW 273
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_VAR 0 7
69579: PPUSH
69580: LD_INT 4
69582: PPUSH
69583: LD_INT 4
69585: PPUSH
69586: CALL_OW 272
69590: PUSH
69591: LD_VAR 0 8
69595: PPUSH
69596: LD_INT 4
69598: PPUSH
69599: LD_INT 4
69601: PPUSH
69602: CALL_OW 273
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_VAR 0 7
69615: PPUSH
69616: LD_INT 5
69618: PPUSH
69619: LD_INT 4
69621: PPUSH
69622: CALL_OW 272
69626: PUSH
69627: LD_VAR 0 8
69631: PPUSH
69632: LD_INT 5
69634: PPUSH
69635: LD_INT 4
69637: PPUSH
69638: CALL_OW 273
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: ST_TO_ADDR
// for i = tmp downto 1 do
69655: LD_ADDR_VAR 0 4
69659: PUSH
69660: DOUBLE
69661: LD_VAR 0 6
69665: INC
69666: ST_TO_ADDR
69667: LD_INT 1
69669: PUSH
69670: FOR_DOWNTO
69671: IFFALSE 69772
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69673: LD_VAR 0 6
69677: PUSH
69678: LD_VAR 0 4
69682: ARRAY
69683: PUSH
69684: LD_INT 1
69686: ARRAY
69687: PPUSH
69688: LD_VAR 0 6
69692: PUSH
69693: LD_VAR 0 4
69697: ARRAY
69698: PUSH
69699: LD_INT 2
69701: ARRAY
69702: PPUSH
69703: CALL_OW 488
69707: NOT
69708: PUSH
69709: LD_VAR 0 6
69713: PUSH
69714: LD_VAR 0 4
69718: ARRAY
69719: PUSH
69720: LD_INT 1
69722: ARRAY
69723: PPUSH
69724: LD_VAR 0 6
69728: PUSH
69729: LD_VAR 0 4
69733: ARRAY
69734: PUSH
69735: LD_INT 2
69737: ARRAY
69738: PPUSH
69739: CALL_OW 428
69743: PUSH
69744: LD_INT 0
69746: NONEQUAL
69747: OR
69748: IFFALSE 69770
// tmp := Delete ( tmp , i ) ;
69750: LD_ADDR_VAR 0 6
69754: PUSH
69755: LD_VAR 0 6
69759: PPUSH
69760: LD_VAR 0 4
69764: PPUSH
69765: CALL_OW 3
69769: ST_TO_ADDR
69770: GO 69670
69772: POP
69773: POP
// j := GetClosestHex ( unit , tmp ) ;
69774: LD_ADDR_VAR 0 5
69778: PUSH
69779: LD_VAR 0 1
69783: PPUSH
69784: LD_VAR 0 6
69788: PPUSH
69789: CALL 69074 0 2
69793: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69794: LD_VAR 0 1
69798: PPUSH
69799: LD_VAR 0 5
69803: PUSH
69804: LD_INT 1
69806: ARRAY
69807: PPUSH
69808: LD_VAR 0 5
69812: PUSH
69813: LD_INT 2
69815: ARRAY
69816: PPUSH
69817: CALL_OW 111
// end ;
69821: LD_VAR 0 3
69825: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69826: LD_INT 0
69828: PPUSH
69829: PPUSH
69830: PPUSH
// uc_side = 0 ;
69831: LD_ADDR_OWVAR 20
69835: PUSH
69836: LD_INT 0
69838: ST_TO_ADDR
// uc_nation = 0 ;
69839: LD_ADDR_OWVAR 21
69843: PUSH
69844: LD_INT 0
69846: ST_TO_ADDR
// InitHc_All ( ) ;
69847: CALL_OW 584
// InitVc ;
69851: CALL_OW 20
// if mastodonts then
69855: LD_VAR 0 6
69859: IFFALSE 69926
// for i = 1 to mastodonts do
69861: LD_ADDR_VAR 0 11
69865: PUSH
69866: DOUBLE
69867: LD_INT 1
69869: DEC
69870: ST_TO_ADDR
69871: LD_VAR 0 6
69875: PUSH
69876: FOR_TO
69877: IFFALSE 69924
// begin vc_chassis := 31 ;
69879: LD_ADDR_OWVAR 37
69883: PUSH
69884: LD_INT 31
69886: ST_TO_ADDR
// vc_control := control_rider ;
69887: LD_ADDR_OWVAR 38
69891: PUSH
69892: LD_INT 4
69894: ST_TO_ADDR
// animal := CreateVehicle ;
69895: LD_ADDR_VAR 0 12
69899: PUSH
69900: CALL_OW 45
69904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69905: LD_VAR 0 12
69909: PPUSH
69910: LD_VAR 0 8
69914: PPUSH
69915: LD_INT 0
69917: PPUSH
69918: CALL 72114 0 3
// end ;
69922: GO 69876
69924: POP
69925: POP
// if horses then
69926: LD_VAR 0 5
69930: IFFALSE 69997
// for i = 1 to horses do
69932: LD_ADDR_VAR 0 11
69936: PUSH
69937: DOUBLE
69938: LD_INT 1
69940: DEC
69941: ST_TO_ADDR
69942: LD_VAR 0 5
69946: PUSH
69947: FOR_TO
69948: IFFALSE 69995
// begin hc_class := 21 ;
69950: LD_ADDR_OWVAR 28
69954: PUSH
69955: LD_INT 21
69957: ST_TO_ADDR
// hc_gallery :=  ;
69958: LD_ADDR_OWVAR 33
69962: PUSH
69963: LD_STRING 
69965: ST_TO_ADDR
// animal := CreateHuman ;
69966: LD_ADDR_VAR 0 12
69970: PUSH
69971: CALL_OW 44
69975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69976: LD_VAR 0 12
69980: PPUSH
69981: LD_VAR 0 8
69985: PPUSH
69986: LD_INT 0
69988: PPUSH
69989: CALL 72114 0 3
// end ;
69993: GO 69947
69995: POP
69996: POP
// if birds then
69997: LD_VAR 0 1
70001: IFFALSE 70068
// for i = 1 to birds do
70003: LD_ADDR_VAR 0 11
70007: PUSH
70008: DOUBLE
70009: LD_INT 1
70011: DEC
70012: ST_TO_ADDR
70013: LD_VAR 0 1
70017: PUSH
70018: FOR_TO
70019: IFFALSE 70066
// begin hc_class = 18 ;
70021: LD_ADDR_OWVAR 28
70025: PUSH
70026: LD_INT 18
70028: ST_TO_ADDR
// hc_gallery =  ;
70029: LD_ADDR_OWVAR 33
70033: PUSH
70034: LD_STRING 
70036: ST_TO_ADDR
// animal := CreateHuman ;
70037: LD_ADDR_VAR 0 12
70041: PUSH
70042: CALL_OW 44
70046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70047: LD_VAR 0 12
70051: PPUSH
70052: LD_VAR 0 8
70056: PPUSH
70057: LD_INT 0
70059: PPUSH
70060: CALL 72114 0 3
// end ;
70064: GO 70018
70066: POP
70067: POP
// if tigers then
70068: LD_VAR 0 2
70072: IFFALSE 70156
// for i = 1 to tigers do
70074: LD_ADDR_VAR 0 11
70078: PUSH
70079: DOUBLE
70080: LD_INT 1
70082: DEC
70083: ST_TO_ADDR
70084: LD_VAR 0 2
70088: PUSH
70089: FOR_TO
70090: IFFALSE 70154
// begin hc_class = class_tiger ;
70092: LD_ADDR_OWVAR 28
70096: PUSH
70097: LD_INT 14
70099: ST_TO_ADDR
// hc_gallery =  ;
70100: LD_ADDR_OWVAR 33
70104: PUSH
70105: LD_STRING 
70107: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70108: LD_ADDR_OWVAR 35
70112: PUSH
70113: LD_INT 7
70115: NEG
70116: PPUSH
70117: LD_INT 7
70119: PPUSH
70120: CALL_OW 12
70124: ST_TO_ADDR
// animal := CreateHuman ;
70125: LD_ADDR_VAR 0 12
70129: PUSH
70130: CALL_OW 44
70134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70135: LD_VAR 0 12
70139: PPUSH
70140: LD_VAR 0 8
70144: PPUSH
70145: LD_INT 0
70147: PPUSH
70148: CALL 72114 0 3
// end ;
70152: GO 70089
70154: POP
70155: POP
// if apemans then
70156: LD_VAR 0 3
70160: IFFALSE 70283
// for i = 1 to apemans do
70162: LD_ADDR_VAR 0 11
70166: PUSH
70167: DOUBLE
70168: LD_INT 1
70170: DEC
70171: ST_TO_ADDR
70172: LD_VAR 0 3
70176: PUSH
70177: FOR_TO
70178: IFFALSE 70281
// begin hc_class = class_apeman ;
70180: LD_ADDR_OWVAR 28
70184: PUSH
70185: LD_INT 12
70187: ST_TO_ADDR
// hc_gallery =  ;
70188: LD_ADDR_OWVAR 33
70192: PUSH
70193: LD_STRING 
70195: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
70196: LD_ADDR_OWVAR 35
70200: PUSH
70201: LD_INT 5
70203: NEG
70204: PPUSH
70205: LD_INT 5
70207: PPUSH
70208: CALL_OW 12
70212: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70213: LD_ADDR_OWVAR 31
70217: PUSH
70218: LD_INT 1
70220: PPUSH
70221: LD_INT 3
70223: PPUSH
70224: CALL_OW 12
70228: PUSH
70229: LD_INT 1
70231: PPUSH
70232: LD_INT 3
70234: PPUSH
70235: CALL_OW 12
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: LD_INT 0
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: ST_TO_ADDR
// animal := CreateHuman ;
70252: LD_ADDR_VAR 0 12
70256: PUSH
70257: CALL_OW 44
70261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70262: LD_VAR 0 12
70266: PPUSH
70267: LD_VAR 0 8
70271: PPUSH
70272: LD_INT 0
70274: PPUSH
70275: CALL 72114 0 3
// end ;
70279: GO 70177
70281: POP
70282: POP
// if enchidnas then
70283: LD_VAR 0 4
70287: IFFALSE 70354
// for i = 1 to enchidnas do
70289: LD_ADDR_VAR 0 11
70293: PUSH
70294: DOUBLE
70295: LD_INT 1
70297: DEC
70298: ST_TO_ADDR
70299: LD_VAR 0 4
70303: PUSH
70304: FOR_TO
70305: IFFALSE 70352
// begin hc_class = 13 ;
70307: LD_ADDR_OWVAR 28
70311: PUSH
70312: LD_INT 13
70314: ST_TO_ADDR
// hc_gallery =  ;
70315: LD_ADDR_OWVAR 33
70319: PUSH
70320: LD_STRING 
70322: ST_TO_ADDR
// animal := CreateHuman ;
70323: LD_ADDR_VAR 0 12
70327: PUSH
70328: CALL_OW 44
70332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70333: LD_VAR 0 12
70337: PPUSH
70338: LD_VAR 0 8
70342: PPUSH
70343: LD_INT 0
70345: PPUSH
70346: CALL 72114 0 3
// end ;
70350: GO 70304
70352: POP
70353: POP
// if fishes then
70354: LD_VAR 0 7
70358: IFFALSE 70425
// for i = 1 to fishes do
70360: LD_ADDR_VAR 0 11
70364: PUSH
70365: DOUBLE
70366: LD_INT 1
70368: DEC
70369: ST_TO_ADDR
70370: LD_VAR 0 7
70374: PUSH
70375: FOR_TO
70376: IFFALSE 70423
// begin hc_class = 20 ;
70378: LD_ADDR_OWVAR 28
70382: PUSH
70383: LD_INT 20
70385: ST_TO_ADDR
// hc_gallery =  ;
70386: LD_ADDR_OWVAR 33
70390: PUSH
70391: LD_STRING 
70393: ST_TO_ADDR
// animal := CreateHuman ;
70394: LD_ADDR_VAR 0 12
70398: PUSH
70399: CALL_OW 44
70403: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70404: LD_VAR 0 12
70408: PPUSH
70409: LD_VAR 0 9
70413: PPUSH
70414: LD_INT 0
70416: PPUSH
70417: CALL 72114 0 3
// end ;
70421: GO 70375
70423: POP
70424: POP
// end ;
70425: LD_VAR 0 10
70429: RET
// export function WantHeal ( sci , unit ) ; begin
70430: LD_INT 0
70432: PPUSH
// if GetTaskList ( sci ) > 0 then
70433: LD_VAR 0 1
70437: PPUSH
70438: CALL_OW 437
70442: PUSH
70443: LD_INT 0
70445: GREATER
70446: IFFALSE 70516
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70448: LD_VAR 0 1
70452: PPUSH
70453: CALL_OW 437
70457: PUSH
70458: LD_INT 1
70460: ARRAY
70461: PUSH
70462: LD_INT 1
70464: ARRAY
70465: PUSH
70466: LD_STRING l
70468: EQUAL
70469: PUSH
70470: LD_VAR 0 1
70474: PPUSH
70475: CALL_OW 437
70479: PUSH
70480: LD_INT 1
70482: ARRAY
70483: PUSH
70484: LD_INT 4
70486: ARRAY
70487: PUSH
70488: LD_VAR 0 2
70492: EQUAL
70493: AND
70494: IFFALSE 70506
// result := true else
70496: LD_ADDR_VAR 0 3
70500: PUSH
70501: LD_INT 1
70503: ST_TO_ADDR
70504: GO 70514
// result := false ;
70506: LD_ADDR_VAR 0 3
70510: PUSH
70511: LD_INT 0
70513: ST_TO_ADDR
// end else
70514: GO 70524
// result := false ;
70516: LD_ADDR_VAR 0 3
70520: PUSH
70521: LD_INT 0
70523: ST_TO_ADDR
// end ;
70524: LD_VAR 0 3
70528: RET
// export function HealTarget ( sci ) ; begin
70529: LD_INT 0
70531: PPUSH
// if not sci then
70532: LD_VAR 0 1
70536: NOT
70537: IFFALSE 70541
// exit ;
70539: GO 70606
// result := 0 ;
70541: LD_ADDR_VAR 0 2
70545: PUSH
70546: LD_INT 0
70548: ST_TO_ADDR
// if GetTaskList ( sci ) then
70549: LD_VAR 0 1
70553: PPUSH
70554: CALL_OW 437
70558: IFFALSE 70606
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70560: LD_VAR 0 1
70564: PPUSH
70565: CALL_OW 437
70569: PUSH
70570: LD_INT 1
70572: ARRAY
70573: PUSH
70574: LD_INT 1
70576: ARRAY
70577: PUSH
70578: LD_STRING l
70580: EQUAL
70581: IFFALSE 70606
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70583: LD_ADDR_VAR 0 2
70587: PUSH
70588: LD_VAR 0 1
70592: PPUSH
70593: CALL_OW 437
70597: PUSH
70598: LD_INT 1
70600: ARRAY
70601: PUSH
70602: LD_INT 4
70604: ARRAY
70605: ST_TO_ADDR
// end ;
70606: LD_VAR 0 2
70610: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70611: LD_INT 0
70613: PPUSH
70614: PPUSH
70615: PPUSH
70616: PPUSH
// if not base_units then
70617: LD_VAR 0 1
70621: NOT
70622: IFFALSE 70626
// exit ;
70624: GO 70713
// result := false ;
70626: LD_ADDR_VAR 0 2
70630: PUSH
70631: LD_INT 0
70633: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70634: LD_ADDR_VAR 0 5
70638: PUSH
70639: LD_VAR 0 1
70643: PPUSH
70644: LD_INT 21
70646: PUSH
70647: LD_INT 3
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PPUSH
70654: CALL_OW 72
70658: ST_TO_ADDR
// if not tmp then
70659: LD_VAR 0 5
70663: NOT
70664: IFFALSE 70668
// exit ;
70666: GO 70713
// for i in tmp do
70668: LD_ADDR_VAR 0 3
70672: PUSH
70673: LD_VAR 0 5
70677: PUSH
70678: FOR_IN
70679: IFFALSE 70711
// begin result := EnemyInRange ( i , 22 ) ;
70681: LD_ADDR_VAR 0 2
70685: PUSH
70686: LD_VAR 0 3
70690: PPUSH
70691: LD_INT 22
70693: PPUSH
70694: CALL 68949 0 2
70698: ST_TO_ADDR
// if result then
70699: LD_VAR 0 2
70703: IFFALSE 70709
// exit ;
70705: POP
70706: POP
70707: GO 70713
// end ;
70709: GO 70678
70711: POP
70712: POP
// end ;
70713: LD_VAR 0 2
70717: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70718: LD_INT 0
70720: PPUSH
70721: PPUSH
// if not units then
70722: LD_VAR 0 1
70726: NOT
70727: IFFALSE 70731
// exit ;
70729: GO 70801
// result := [ ] ;
70731: LD_ADDR_VAR 0 3
70735: PUSH
70736: EMPTY
70737: ST_TO_ADDR
// for i in units do
70738: LD_ADDR_VAR 0 4
70742: PUSH
70743: LD_VAR 0 1
70747: PUSH
70748: FOR_IN
70749: IFFALSE 70799
// if GetTag ( i ) = tag then
70751: LD_VAR 0 4
70755: PPUSH
70756: CALL_OW 110
70760: PUSH
70761: LD_VAR 0 2
70765: EQUAL
70766: IFFALSE 70797
// result := Insert ( result , result + 1 , i ) ;
70768: LD_ADDR_VAR 0 3
70772: PUSH
70773: LD_VAR 0 3
70777: PPUSH
70778: LD_VAR 0 3
70782: PUSH
70783: LD_INT 1
70785: PLUS
70786: PPUSH
70787: LD_VAR 0 4
70791: PPUSH
70792: CALL_OW 2
70796: ST_TO_ADDR
70797: GO 70748
70799: POP
70800: POP
// end ;
70801: LD_VAR 0 3
70805: RET
// export function IsDriver ( un ) ; begin
70806: LD_INT 0
70808: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70809: LD_ADDR_VAR 0 2
70813: PUSH
70814: LD_VAR 0 1
70818: PUSH
70819: LD_INT 55
70821: PUSH
70822: EMPTY
70823: LIST
70824: PPUSH
70825: CALL_OW 69
70829: IN
70830: ST_TO_ADDR
// end ;
70831: LD_VAR 0 2
70835: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70836: LD_INT 0
70838: PPUSH
70839: PPUSH
// list := [ ] ;
70840: LD_ADDR_VAR 0 5
70844: PUSH
70845: EMPTY
70846: ST_TO_ADDR
// case d of 0 :
70847: LD_VAR 0 3
70851: PUSH
70852: LD_INT 0
70854: DOUBLE
70855: EQUAL
70856: IFTRUE 70860
70858: GO 70993
70860: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70861: LD_ADDR_VAR 0 5
70865: PUSH
70866: LD_VAR 0 1
70870: PUSH
70871: LD_INT 4
70873: MINUS
70874: PUSH
70875: LD_VAR 0 2
70879: PUSH
70880: LD_INT 4
70882: MINUS
70883: PUSH
70884: LD_INT 2
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: LIST
70891: PUSH
70892: LD_VAR 0 1
70896: PUSH
70897: LD_INT 3
70899: MINUS
70900: PUSH
70901: LD_VAR 0 2
70905: PUSH
70906: LD_INT 1
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: LIST
70913: PUSH
70914: LD_VAR 0 1
70918: PUSH
70919: LD_INT 4
70921: PLUS
70922: PUSH
70923: LD_VAR 0 2
70927: PUSH
70928: LD_INT 4
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: LIST
70935: PUSH
70936: LD_VAR 0 1
70940: PUSH
70941: LD_INT 3
70943: PLUS
70944: PUSH
70945: LD_VAR 0 2
70949: PUSH
70950: LD_INT 3
70952: PLUS
70953: PUSH
70954: LD_INT 5
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: LIST
70961: PUSH
70962: LD_VAR 0 1
70966: PUSH
70967: LD_VAR 0 2
70971: PUSH
70972: LD_INT 4
70974: PLUS
70975: PUSH
70976: LD_INT 0
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: LIST
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: ST_TO_ADDR
// end ; 1 :
70991: GO 71691
70993: LD_INT 1
70995: DOUBLE
70996: EQUAL
70997: IFTRUE 71001
70999: GO 71134
71001: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71002: LD_ADDR_VAR 0 5
71006: PUSH
71007: LD_VAR 0 1
71011: PUSH
71012: LD_VAR 0 2
71016: PUSH
71017: LD_INT 4
71019: MINUS
71020: PUSH
71021: LD_INT 3
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: LIST
71028: PUSH
71029: LD_VAR 0 1
71033: PUSH
71034: LD_INT 3
71036: MINUS
71037: PUSH
71038: LD_VAR 0 2
71042: PUSH
71043: LD_INT 3
71045: MINUS
71046: PUSH
71047: LD_INT 2
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: LIST
71054: PUSH
71055: LD_VAR 0 1
71059: PUSH
71060: LD_INT 4
71062: MINUS
71063: PUSH
71064: LD_VAR 0 2
71068: PUSH
71069: LD_INT 1
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: LIST
71076: PUSH
71077: LD_VAR 0 1
71081: PUSH
71082: LD_VAR 0 2
71086: PUSH
71087: LD_INT 3
71089: PLUS
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: LIST
71098: PUSH
71099: LD_VAR 0 1
71103: PUSH
71104: LD_INT 4
71106: PLUS
71107: PUSH
71108: LD_VAR 0 2
71112: PUSH
71113: LD_INT 4
71115: PLUS
71116: PUSH
71117: LD_INT 5
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: LIST
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: ST_TO_ADDR
// end ; 2 :
71132: GO 71691
71134: LD_INT 2
71136: DOUBLE
71137: EQUAL
71138: IFTRUE 71142
71140: GO 71271
71142: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71143: LD_ADDR_VAR 0 5
71147: PUSH
71148: LD_VAR 0 1
71152: PUSH
71153: LD_VAR 0 2
71157: PUSH
71158: LD_INT 3
71160: MINUS
71161: PUSH
71162: LD_INT 3
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: LIST
71169: PUSH
71170: LD_VAR 0 1
71174: PUSH
71175: LD_INT 4
71177: PLUS
71178: PUSH
71179: LD_VAR 0 2
71183: PUSH
71184: LD_INT 4
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: LIST
71191: PUSH
71192: LD_VAR 0 1
71196: PUSH
71197: LD_VAR 0 2
71201: PUSH
71202: LD_INT 4
71204: PLUS
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: LIST
71213: PUSH
71214: LD_VAR 0 1
71218: PUSH
71219: LD_INT 3
71221: MINUS
71222: PUSH
71223: LD_VAR 0 2
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: PUSH
71236: LD_VAR 0 1
71240: PUSH
71241: LD_INT 4
71243: MINUS
71244: PUSH
71245: LD_VAR 0 2
71249: PUSH
71250: LD_INT 4
71252: MINUS
71253: PUSH
71254: LD_INT 2
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: LIST
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: ST_TO_ADDR
// end ; 3 :
71269: GO 71691
71271: LD_INT 3
71273: DOUBLE
71274: EQUAL
71275: IFTRUE 71279
71277: GO 71412
71279: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71280: LD_ADDR_VAR 0 5
71284: PUSH
71285: LD_VAR 0 1
71289: PUSH
71290: LD_INT 3
71292: PLUS
71293: PUSH
71294: LD_VAR 0 2
71298: PUSH
71299: LD_INT 4
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: LIST
71306: PUSH
71307: LD_VAR 0 1
71311: PUSH
71312: LD_INT 4
71314: PLUS
71315: PUSH
71316: LD_VAR 0 2
71320: PUSH
71321: LD_INT 4
71323: PLUS
71324: PUSH
71325: LD_INT 5
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: LIST
71332: PUSH
71333: LD_VAR 0 1
71337: PUSH
71338: LD_INT 4
71340: MINUS
71341: PUSH
71342: LD_VAR 0 2
71346: PUSH
71347: LD_INT 1
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: LIST
71354: PUSH
71355: LD_VAR 0 1
71359: PUSH
71360: LD_VAR 0 2
71364: PUSH
71365: LD_INT 4
71367: MINUS
71368: PUSH
71369: LD_INT 3
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: LIST
71376: PUSH
71377: LD_VAR 0 1
71381: PUSH
71382: LD_INT 3
71384: MINUS
71385: PUSH
71386: LD_VAR 0 2
71390: PUSH
71391: LD_INT 3
71393: MINUS
71394: PUSH
71395: LD_INT 2
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: LIST
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: ST_TO_ADDR
// end ; 4 :
71410: GO 71691
71412: LD_INT 4
71414: DOUBLE
71415: EQUAL
71416: IFTRUE 71420
71418: GO 71553
71420: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71421: LD_ADDR_VAR 0 5
71425: PUSH
71426: LD_VAR 0 1
71430: PUSH
71431: LD_VAR 0 2
71435: PUSH
71436: LD_INT 4
71438: PLUS
71439: PUSH
71440: LD_INT 0
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: LIST
71447: PUSH
71448: LD_VAR 0 1
71452: PUSH
71453: LD_INT 3
71455: PLUS
71456: PUSH
71457: LD_VAR 0 2
71461: PUSH
71462: LD_INT 3
71464: PLUS
71465: PUSH
71466: LD_INT 5
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: LIST
71473: PUSH
71474: LD_VAR 0 1
71478: PUSH
71479: LD_INT 4
71481: PLUS
71482: PUSH
71483: LD_VAR 0 2
71487: PUSH
71488: LD_INT 4
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: LIST
71495: PUSH
71496: LD_VAR 0 1
71500: PUSH
71501: LD_VAR 0 2
71505: PUSH
71506: LD_INT 3
71508: MINUS
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: LIST
71517: PUSH
71518: LD_VAR 0 1
71522: PUSH
71523: LD_INT 4
71525: MINUS
71526: PUSH
71527: LD_VAR 0 2
71531: PUSH
71532: LD_INT 4
71534: MINUS
71535: PUSH
71536: LD_INT 2
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: LIST
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: ST_TO_ADDR
// end ; 5 :
71551: GO 71691
71553: LD_INT 5
71555: DOUBLE
71556: EQUAL
71557: IFTRUE 71561
71559: GO 71690
71561: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71562: LD_ADDR_VAR 0 5
71566: PUSH
71567: LD_VAR 0 1
71571: PUSH
71572: LD_INT 4
71574: MINUS
71575: PUSH
71576: LD_VAR 0 2
71580: PUSH
71581: LD_INT 1
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: LIST
71588: PUSH
71589: LD_VAR 0 1
71593: PUSH
71594: LD_VAR 0 2
71598: PUSH
71599: LD_INT 4
71601: MINUS
71602: PUSH
71603: LD_INT 3
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: LIST
71610: PUSH
71611: LD_VAR 0 1
71615: PUSH
71616: LD_INT 4
71618: PLUS
71619: PUSH
71620: LD_VAR 0 2
71624: PUSH
71625: LD_INT 4
71627: PLUS
71628: PUSH
71629: LD_INT 5
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: LIST
71636: PUSH
71637: LD_VAR 0 1
71641: PUSH
71642: LD_INT 3
71644: PLUS
71645: PUSH
71646: LD_VAR 0 2
71650: PUSH
71651: LD_INT 4
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: LIST
71658: PUSH
71659: LD_VAR 0 1
71663: PUSH
71664: LD_VAR 0 2
71668: PUSH
71669: LD_INT 3
71671: PLUS
71672: PUSH
71673: LD_INT 0
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: LIST
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: ST_TO_ADDR
// end ; end ;
71688: GO 71691
71690: POP
// result := list ;
71691: LD_ADDR_VAR 0 4
71695: PUSH
71696: LD_VAR 0 5
71700: ST_TO_ADDR
// end ;
71701: LD_VAR 0 4
71705: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71706: LD_INT 0
71708: PPUSH
71709: PPUSH
71710: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71711: LD_VAR 0 1
71715: NOT
71716: PUSH
71717: LD_VAR 0 2
71721: PUSH
71722: LD_INT 1
71724: PUSH
71725: LD_INT 2
71727: PUSH
71728: LD_INT 3
71730: PUSH
71731: LD_INT 4
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: IN
71740: NOT
71741: OR
71742: IFFALSE 71746
// exit ;
71744: GO 71838
// tmp := [ ] ;
71746: LD_ADDR_VAR 0 5
71750: PUSH
71751: EMPTY
71752: ST_TO_ADDR
// for i in units do
71753: LD_ADDR_VAR 0 4
71757: PUSH
71758: LD_VAR 0 1
71762: PUSH
71763: FOR_IN
71764: IFFALSE 71807
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71766: LD_ADDR_VAR 0 5
71770: PUSH
71771: LD_VAR 0 5
71775: PPUSH
71776: LD_VAR 0 5
71780: PUSH
71781: LD_INT 1
71783: PLUS
71784: PPUSH
71785: LD_VAR 0 4
71789: PPUSH
71790: LD_VAR 0 2
71794: PPUSH
71795: CALL_OW 259
71799: PPUSH
71800: CALL_OW 2
71804: ST_TO_ADDR
71805: GO 71763
71807: POP
71808: POP
// if not tmp then
71809: LD_VAR 0 5
71813: NOT
71814: IFFALSE 71818
// exit ;
71816: GO 71838
// result := SortListByListDesc ( units , tmp ) ;
71818: LD_ADDR_VAR 0 3
71822: PUSH
71823: LD_VAR 0 1
71827: PPUSH
71828: LD_VAR 0 5
71832: PPUSH
71833: CALL_OW 77
71837: ST_TO_ADDR
// end ;
71838: LD_VAR 0 3
71842: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71843: LD_INT 0
71845: PPUSH
71846: PPUSH
71847: PPUSH
// result := false ;
71848: LD_ADDR_VAR 0 3
71852: PUSH
71853: LD_INT 0
71855: ST_TO_ADDR
// x := GetX ( building ) ;
71856: LD_ADDR_VAR 0 4
71860: PUSH
71861: LD_VAR 0 2
71865: PPUSH
71866: CALL_OW 250
71870: ST_TO_ADDR
// y := GetY ( building ) ;
71871: LD_ADDR_VAR 0 5
71875: PUSH
71876: LD_VAR 0 2
71880: PPUSH
71881: CALL_OW 251
71885: ST_TO_ADDR
// if not building or not x or not y then
71886: LD_VAR 0 2
71890: NOT
71891: PUSH
71892: LD_VAR 0 4
71896: NOT
71897: OR
71898: PUSH
71899: LD_VAR 0 5
71903: NOT
71904: OR
71905: IFFALSE 71909
// exit ;
71907: GO 72001
// if GetTaskList ( unit ) then
71909: LD_VAR 0 1
71913: PPUSH
71914: CALL_OW 437
71918: IFFALSE 72001
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71920: LD_STRING e
71922: PUSH
71923: LD_VAR 0 1
71927: PPUSH
71928: CALL_OW 437
71932: PUSH
71933: LD_INT 1
71935: ARRAY
71936: PUSH
71937: LD_INT 1
71939: ARRAY
71940: EQUAL
71941: PUSH
71942: LD_VAR 0 4
71946: PUSH
71947: LD_VAR 0 1
71951: PPUSH
71952: CALL_OW 437
71956: PUSH
71957: LD_INT 1
71959: ARRAY
71960: PUSH
71961: LD_INT 2
71963: ARRAY
71964: EQUAL
71965: AND
71966: PUSH
71967: LD_VAR 0 5
71971: PUSH
71972: LD_VAR 0 1
71976: PPUSH
71977: CALL_OW 437
71981: PUSH
71982: LD_INT 1
71984: ARRAY
71985: PUSH
71986: LD_INT 3
71988: ARRAY
71989: EQUAL
71990: AND
71991: IFFALSE 72001
// result := true end ;
71993: LD_ADDR_VAR 0 3
71997: PUSH
71998: LD_INT 1
72000: ST_TO_ADDR
// end ;
72001: LD_VAR 0 3
72005: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72006: LD_INT 0
72008: PPUSH
// result := false ;
72009: LD_ADDR_VAR 0 4
72013: PUSH
72014: LD_INT 0
72016: ST_TO_ADDR
// if GetTaskList ( unit ) then
72017: LD_VAR 0 1
72021: PPUSH
72022: CALL_OW 437
72026: IFFALSE 72109
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72028: LD_STRING M
72030: PUSH
72031: LD_VAR 0 1
72035: PPUSH
72036: CALL_OW 437
72040: PUSH
72041: LD_INT 1
72043: ARRAY
72044: PUSH
72045: LD_INT 1
72047: ARRAY
72048: EQUAL
72049: PUSH
72050: LD_VAR 0 2
72054: PUSH
72055: LD_VAR 0 1
72059: PPUSH
72060: CALL_OW 437
72064: PUSH
72065: LD_INT 1
72067: ARRAY
72068: PUSH
72069: LD_INT 2
72071: ARRAY
72072: EQUAL
72073: AND
72074: PUSH
72075: LD_VAR 0 3
72079: PUSH
72080: LD_VAR 0 1
72084: PPUSH
72085: CALL_OW 437
72089: PUSH
72090: LD_INT 1
72092: ARRAY
72093: PUSH
72094: LD_INT 3
72096: ARRAY
72097: EQUAL
72098: AND
72099: IFFALSE 72109
// result := true ;
72101: LD_ADDR_VAR 0 4
72105: PUSH
72106: LD_INT 1
72108: ST_TO_ADDR
// end ; end ;
72109: LD_VAR 0 4
72113: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72114: LD_INT 0
72116: PPUSH
72117: PPUSH
72118: PPUSH
72119: PPUSH
// if not unit or not area then
72120: LD_VAR 0 1
72124: NOT
72125: PUSH
72126: LD_VAR 0 2
72130: NOT
72131: OR
72132: IFFALSE 72136
// exit ;
72134: GO 72300
// tmp := AreaToList ( area , i ) ;
72136: LD_ADDR_VAR 0 6
72140: PUSH
72141: LD_VAR 0 2
72145: PPUSH
72146: LD_VAR 0 5
72150: PPUSH
72151: CALL_OW 517
72155: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72156: LD_ADDR_VAR 0 5
72160: PUSH
72161: DOUBLE
72162: LD_INT 1
72164: DEC
72165: ST_TO_ADDR
72166: LD_VAR 0 6
72170: PUSH
72171: LD_INT 1
72173: ARRAY
72174: PUSH
72175: FOR_TO
72176: IFFALSE 72298
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72178: LD_ADDR_VAR 0 7
72182: PUSH
72183: LD_VAR 0 6
72187: PUSH
72188: LD_INT 1
72190: ARRAY
72191: PUSH
72192: LD_VAR 0 5
72196: ARRAY
72197: PUSH
72198: LD_VAR 0 6
72202: PUSH
72203: LD_INT 2
72205: ARRAY
72206: PUSH
72207: LD_VAR 0 5
72211: ARRAY
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72217: LD_VAR 0 7
72221: PUSH
72222: LD_INT 1
72224: ARRAY
72225: PPUSH
72226: LD_VAR 0 7
72230: PUSH
72231: LD_INT 2
72233: ARRAY
72234: PPUSH
72235: CALL_OW 428
72239: PUSH
72240: LD_INT 0
72242: EQUAL
72243: IFFALSE 72296
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72245: LD_VAR 0 1
72249: PPUSH
72250: LD_VAR 0 7
72254: PUSH
72255: LD_INT 1
72257: ARRAY
72258: PPUSH
72259: LD_VAR 0 7
72263: PUSH
72264: LD_INT 2
72266: ARRAY
72267: PPUSH
72268: LD_VAR 0 3
72272: PPUSH
72273: CALL_OW 48
// result := IsPlaced ( unit ) ;
72277: LD_ADDR_VAR 0 4
72281: PUSH
72282: LD_VAR 0 1
72286: PPUSH
72287: CALL_OW 305
72291: ST_TO_ADDR
// exit ;
72292: POP
72293: POP
72294: GO 72300
// end ; end ;
72296: GO 72175
72298: POP
72299: POP
// end ;
72300: LD_VAR 0 4
72304: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72305: LD_INT 0
72307: PPUSH
72308: PPUSH
72309: PPUSH
// if not side or side > 8 then
72310: LD_VAR 0 1
72314: NOT
72315: PUSH
72316: LD_VAR 0 1
72320: PUSH
72321: LD_INT 8
72323: GREATER
72324: OR
72325: IFFALSE 72329
// exit ;
72327: GO 72516
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72329: LD_ADDR_VAR 0 4
72333: PUSH
72334: LD_INT 22
72336: PUSH
72337: LD_VAR 0 1
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 21
72348: PUSH
72349: LD_INT 3
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PPUSH
72360: CALL_OW 69
72364: ST_TO_ADDR
// if not tmp then
72365: LD_VAR 0 4
72369: NOT
72370: IFFALSE 72374
// exit ;
72372: GO 72516
// enable_addtolog := true ;
72374: LD_ADDR_OWVAR 81
72378: PUSH
72379: LD_INT 1
72381: ST_TO_ADDR
// AddToLog ( [ ) ;
72382: LD_STRING [
72384: PPUSH
72385: CALL_OW 561
// for i in tmp do
72389: LD_ADDR_VAR 0 3
72393: PUSH
72394: LD_VAR 0 4
72398: PUSH
72399: FOR_IN
72400: IFFALSE 72507
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72402: LD_STRING [
72404: PUSH
72405: LD_VAR 0 3
72409: PPUSH
72410: CALL_OW 266
72414: STR
72415: PUSH
72416: LD_STRING , 
72418: STR
72419: PUSH
72420: LD_VAR 0 3
72424: PPUSH
72425: CALL_OW 250
72429: STR
72430: PUSH
72431: LD_STRING , 
72433: STR
72434: PUSH
72435: LD_VAR 0 3
72439: PPUSH
72440: CALL_OW 251
72444: STR
72445: PUSH
72446: LD_STRING , 
72448: STR
72449: PUSH
72450: LD_VAR 0 3
72454: PPUSH
72455: CALL_OW 254
72459: STR
72460: PUSH
72461: LD_STRING , 
72463: STR
72464: PUSH
72465: LD_VAR 0 3
72469: PPUSH
72470: LD_INT 1
72472: PPUSH
72473: CALL_OW 268
72477: STR
72478: PUSH
72479: LD_STRING , 
72481: STR
72482: PUSH
72483: LD_VAR 0 3
72487: PPUSH
72488: LD_INT 2
72490: PPUSH
72491: CALL_OW 268
72495: STR
72496: PUSH
72497: LD_STRING ],
72499: STR
72500: PPUSH
72501: CALL_OW 561
// end ;
72505: GO 72399
72507: POP
72508: POP
// AddToLog ( ]; ) ;
72509: LD_STRING ];
72511: PPUSH
72512: CALL_OW 561
// end ;
72516: LD_VAR 0 2
72520: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72521: LD_INT 0
72523: PPUSH
72524: PPUSH
72525: PPUSH
72526: PPUSH
72527: PPUSH
// if not area or not rate or not max then
72528: LD_VAR 0 1
72532: NOT
72533: PUSH
72534: LD_VAR 0 2
72538: NOT
72539: OR
72540: PUSH
72541: LD_VAR 0 4
72545: NOT
72546: OR
72547: IFFALSE 72551
// exit ;
72549: GO 72743
// while 1 do
72551: LD_INT 1
72553: IFFALSE 72743
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72555: LD_ADDR_VAR 0 9
72559: PUSH
72560: LD_VAR 0 1
72564: PPUSH
72565: LD_INT 1
72567: PPUSH
72568: CALL_OW 287
72572: PUSH
72573: LD_INT 10
72575: MUL
72576: ST_TO_ADDR
// r := rate / 10 ;
72577: LD_ADDR_VAR 0 7
72581: PUSH
72582: LD_VAR 0 2
72586: PUSH
72587: LD_INT 10
72589: DIVREAL
72590: ST_TO_ADDR
// time := 1 1$00 ;
72591: LD_ADDR_VAR 0 8
72595: PUSH
72596: LD_INT 2100
72598: ST_TO_ADDR
// if amount < min then
72599: LD_VAR 0 9
72603: PUSH
72604: LD_VAR 0 3
72608: LESS
72609: IFFALSE 72627
// r := r * 2 else
72611: LD_ADDR_VAR 0 7
72615: PUSH
72616: LD_VAR 0 7
72620: PUSH
72621: LD_INT 2
72623: MUL
72624: ST_TO_ADDR
72625: GO 72653
// if amount > max then
72627: LD_VAR 0 9
72631: PUSH
72632: LD_VAR 0 4
72636: GREATER
72637: IFFALSE 72653
// r := r / 2 ;
72639: LD_ADDR_VAR 0 7
72643: PUSH
72644: LD_VAR 0 7
72648: PUSH
72649: LD_INT 2
72651: DIVREAL
72652: ST_TO_ADDR
// time := time / r ;
72653: LD_ADDR_VAR 0 8
72657: PUSH
72658: LD_VAR 0 8
72662: PUSH
72663: LD_VAR 0 7
72667: DIVREAL
72668: ST_TO_ADDR
// if time < 0 then
72669: LD_VAR 0 8
72673: PUSH
72674: LD_INT 0
72676: LESS
72677: IFFALSE 72694
// time := time * - 1 ;
72679: LD_ADDR_VAR 0 8
72683: PUSH
72684: LD_VAR 0 8
72688: PUSH
72689: LD_INT 1
72691: NEG
72692: MUL
72693: ST_TO_ADDR
// wait ( time ) ;
72694: LD_VAR 0 8
72698: PPUSH
72699: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72703: LD_INT 35
72705: PPUSH
72706: LD_INT 875
72708: PPUSH
72709: CALL_OW 12
72713: PPUSH
72714: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72718: LD_INT 1
72720: PPUSH
72721: LD_INT 5
72723: PPUSH
72724: CALL_OW 12
72728: PPUSH
72729: LD_VAR 0 1
72733: PPUSH
72734: LD_INT 1
72736: PPUSH
72737: CALL_OW 55
// end ;
72741: GO 72551
// end ;
72743: LD_VAR 0 5
72747: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72748: LD_INT 0
72750: PPUSH
72751: PPUSH
72752: PPUSH
72753: PPUSH
72754: PPUSH
72755: PPUSH
72756: PPUSH
72757: PPUSH
// if not turrets or not factories then
72758: LD_VAR 0 1
72762: NOT
72763: PUSH
72764: LD_VAR 0 2
72768: NOT
72769: OR
72770: IFFALSE 72774
// exit ;
72772: GO 73081
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72774: LD_ADDR_VAR 0 10
72778: PUSH
72779: LD_INT 5
72781: PUSH
72782: LD_INT 6
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 2
72791: PUSH
72792: LD_INT 4
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 3
72801: PUSH
72802: LD_INT 5
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 24
72816: PUSH
72817: LD_INT 25
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 23
72826: PUSH
72827: LD_INT 27
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 42
72840: PUSH
72841: LD_INT 43
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 44
72850: PUSH
72851: LD_INT 46
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 45
72860: PUSH
72861: LD_INT 47
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: LIST
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: LIST
72877: ST_TO_ADDR
// result := [ ] ;
72878: LD_ADDR_VAR 0 3
72882: PUSH
72883: EMPTY
72884: ST_TO_ADDR
// for i in turrets do
72885: LD_ADDR_VAR 0 4
72889: PUSH
72890: LD_VAR 0 1
72894: PUSH
72895: FOR_IN
72896: IFFALSE 73079
// begin nat := GetNation ( i ) ;
72898: LD_ADDR_VAR 0 7
72902: PUSH
72903: LD_VAR 0 4
72907: PPUSH
72908: CALL_OW 248
72912: ST_TO_ADDR
// weapon := 0 ;
72913: LD_ADDR_VAR 0 8
72917: PUSH
72918: LD_INT 0
72920: ST_TO_ADDR
// if not nat then
72921: LD_VAR 0 7
72925: NOT
72926: IFFALSE 72930
// continue ;
72928: GO 72895
// for j in list [ nat ] do
72930: LD_ADDR_VAR 0 5
72934: PUSH
72935: LD_VAR 0 10
72939: PUSH
72940: LD_VAR 0 7
72944: ARRAY
72945: PUSH
72946: FOR_IN
72947: IFFALSE 72988
// if GetBWeapon ( i ) = j [ 1 ] then
72949: LD_VAR 0 4
72953: PPUSH
72954: CALL_OW 269
72958: PUSH
72959: LD_VAR 0 5
72963: PUSH
72964: LD_INT 1
72966: ARRAY
72967: EQUAL
72968: IFFALSE 72986
// begin weapon := j [ 2 ] ;
72970: LD_ADDR_VAR 0 8
72974: PUSH
72975: LD_VAR 0 5
72979: PUSH
72980: LD_INT 2
72982: ARRAY
72983: ST_TO_ADDR
// break ;
72984: GO 72988
// end ;
72986: GO 72946
72988: POP
72989: POP
// if not weapon then
72990: LD_VAR 0 8
72994: NOT
72995: IFFALSE 72999
// continue ;
72997: GO 72895
// for k in factories do
72999: LD_ADDR_VAR 0 6
73003: PUSH
73004: LD_VAR 0 2
73008: PUSH
73009: FOR_IN
73010: IFFALSE 73075
// begin weapons := AvailableWeaponList ( k ) ;
73012: LD_ADDR_VAR 0 9
73016: PUSH
73017: LD_VAR 0 6
73021: PPUSH
73022: CALL_OW 478
73026: ST_TO_ADDR
// if not weapons then
73027: LD_VAR 0 9
73031: NOT
73032: IFFALSE 73036
// continue ;
73034: GO 73009
// if weapon in weapons then
73036: LD_VAR 0 8
73040: PUSH
73041: LD_VAR 0 9
73045: IN
73046: IFFALSE 73073
// begin result := [ i , weapon ] ;
73048: LD_ADDR_VAR 0 3
73052: PUSH
73053: LD_VAR 0 4
73057: PUSH
73058: LD_VAR 0 8
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: ST_TO_ADDR
// exit ;
73067: POP
73068: POP
73069: POP
73070: POP
73071: GO 73081
// end ; end ;
73073: GO 73009
73075: POP
73076: POP
// end ;
73077: GO 72895
73079: POP
73080: POP
// end ;
73081: LD_VAR 0 3
73085: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73086: LD_INT 0
73088: PPUSH
// if not side or side > 8 then
73089: LD_VAR 0 3
73093: NOT
73094: PUSH
73095: LD_VAR 0 3
73099: PUSH
73100: LD_INT 8
73102: GREATER
73103: OR
73104: IFFALSE 73108
// exit ;
73106: GO 73167
// if not range then
73108: LD_VAR 0 4
73112: NOT
73113: IFFALSE 73124
// range := - 12 ;
73115: LD_ADDR_VAR 0 4
73119: PUSH
73120: LD_INT 12
73122: NEG
73123: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73124: LD_VAR 0 1
73128: PPUSH
73129: LD_VAR 0 2
73133: PPUSH
73134: LD_VAR 0 3
73138: PPUSH
73139: LD_VAR 0 4
73143: PPUSH
73144: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73148: LD_VAR 0 1
73152: PPUSH
73153: LD_VAR 0 2
73157: PPUSH
73158: LD_VAR 0 3
73162: PPUSH
73163: CALL_OW 331
// end ;
73167: LD_VAR 0 5
73171: RET
// export function Video ( mode ) ; begin
73172: LD_INT 0
73174: PPUSH
// ingame_video = mode ;
73175: LD_ADDR_OWVAR 52
73179: PUSH
73180: LD_VAR 0 1
73184: ST_TO_ADDR
// interface_hidden = mode ;
73185: LD_ADDR_OWVAR 54
73189: PUSH
73190: LD_VAR 0 1
73194: ST_TO_ADDR
// end ;
73195: LD_VAR 0 2
73199: RET
// export function Join ( array , element ) ; begin
73200: LD_INT 0
73202: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73203: LD_ADDR_VAR 0 3
73207: PUSH
73208: LD_VAR 0 1
73212: PPUSH
73213: LD_VAR 0 1
73217: PUSH
73218: LD_INT 1
73220: PLUS
73221: PPUSH
73222: LD_VAR 0 2
73226: PPUSH
73227: CALL_OW 1
73231: ST_TO_ADDR
// end ;
73232: LD_VAR 0 3
73236: RET
// export function JoinUnion ( array , element ) ; begin
73237: LD_INT 0
73239: PPUSH
// result := array union element ;
73240: LD_ADDR_VAR 0 3
73244: PUSH
73245: LD_VAR 0 1
73249: PUSH
73250: LD_VAR 0 2
73254: UNION
73255: ST_TO_ADDR
// end ;
73256: LD_VAR 0 3
73260: RET
// export function GetBehemoths ( side ) ; begin
73261: LD_INT 0
73263: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73264: LD_ADDR_VAR 0 2
73268: PUSH
73269: LD_INT 22
73271: PUSH
73272: LD_VAR 0 1
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 31
73283: PUSH
73284: LD_INT 25
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PPUSH
73295: CALL_OW 69
73299: ST_TO_ADDR
// end ;
73300: LD_VAR 0 2
73304: RET
// export function Shuffle ( array ) ; var i , index ; begin
73305: LD_INT 0
73307: PPUSH
73308: PPUSH
73309: PPUSH
// result := [ ] ;
73310: LD_ADDR_VAR 0 2
73314: PUSH
73315: EMPTY
73316: ST_TO_ADDR
// if not array then
73317: LD_VAR 0 1
73321: NOT
73322: IFFALSE 73326
// exit ;
73324: GO 73425
// Randomize ;
73326: CALL_OW 10
// for i = array downto 1 do
73330: LD_ADDR_VAR 0 3
73334: PUSH
73335: DOUBLE
73336: LD_VAR 0 1
73340: INC
73341: ST_TO_ADDR
73342: LD_INT 1
73344: PUSH
73345: FOR_DOWNTO
73346: IFFALSE 73423
// begin index := rand ( 1 , array ) ;
73348: LD_ADDR_VAR 0 4
73352: PUSH
73353: LD_INT 1
73355: PPUSH
73356: LD_VAR 0 1
73360: PPUSH
73361: CALL_OW 12
73365: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73366: LD_ADDR_VAR 0 2
73370: PUSH
73371: LD_VAR 0 2
73375: PPUSH
73376: LD_VAR 0 2
73380: PUSH
73381: LD_INT 1
73383: PLUS
73384: PPUSH
73385: LD_VAR 0 1
73389: PUSH
73390: LD_VAR 0 4
73394: ARRAY
73395: PPUSH
73396: CALL_OW 2
73400: ST_TO_ADDR
// array := Delete ( array , index ) ;
73401: LD_ADDR_VAR 0 1
73405: PUSH
73406: LD_VAR 0 1
73410: PPUSH
73411: LD_VAR 0 4
73415: PPUSH
73416: CALL_OW 3
73420: ST_TO_ADDR
// end ;
73421: GO 73345
73423: POP
73424: POP
// end ;
73425: LD_VAR 0 2
73429: RET
// export function GetBaseMaterials ( base ) ; begin
73430: LD_INT 0
73432: PPUSH
// result := [ 0 , 0 , 0 ] ;
73433: LD_ADDR_VAR 0 2
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: LD_INT 0
73443: PUSH
73444: LD_INT 0
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: LIST
73451: ST_TO_ADDR
// if not base then
73452: LD_VAR 0 1
73456: NOT
73457: IFFALSE 73461
// exit ;
73459: GO 73510
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73461: LD_ADDR_VAR 0 2
73465: PUSH
73466: LD_VAR 0 1
73470: PPUSH
73471: LD_INT 1
73473: PPUSH
73474: CALL_OW 275
73478: PUSH
73479: LD_VAR 0 1
73483: PPUSH
73484: LD_INT 2
73486: PPUSH
73487: CALL_OW 275
73491: PUSH
73492: LD_VAR 0 1
73496: PPUSH
73497: LD_INT 3
73499: PPUSH
73500: CALL_OW 275
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: LIST
73509: ST_TO_ADDR
// end ;
73510: LD_VAR 0 2
73514: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73515: LD_INT 0
73517: PPUSH
73518: PPUSH
// result := array ;
73519: LD_ADDR_VAR 0 3
73523: PUSH
73524: LD_VAR 0 1
73528: ST_TO_ADDR
// if size > 0 then
73529: LD_VAR 0 2
73533: PUSH
73534: LD_INT 0
73536: GREATER
73537: IFFALSE 73583
// for i := array downto size do
73539: LD_ADDR_VAR 0 4
73543: PUSH
73544: DOUBLE
73545: LD_VAR 0 1
73549: INC
73550: ST_TO_ADDR
73551: LD_VAR 0 2
73555: PUSH
73556: FOR_DOWNTO
73557: IFFALSE 73581
// result := Delete ( result , result ) ;
73559: LD_ADDR_VAR 0 3
73563: PUSH
73564: LD_VAR 0 3
73568: PPUSH
73569: LD_VAR 0 3
73573: PPUSH
73574: CALL_OW 3
73578: ST_TO_ADDR
73579: GO 73556
73581: POP
73582: POP
// end ;
73583: LD_VAR 0 3
73587: RET
// export function ComExit ( unit ) ; var tmp ; begin
73588: LD_INT 0
73590: PPUSH
73591: PPUSH
// if not IsInUnit ( unit ) then
73592: LD_VAR 0 1
73596: PPUSH
73597: CALL_OW 310
73601: NOT
73602: IFFALSE 73606
// exit ;
73604: GO 73666
// tmp := IsInUnit ( unit ) ;
73606: LD_ADDR_VAR 0 3
73610: PUSH
73611: LD_VAR 0 1
73615: PPUSH
73616: CALL_OW 310
73620: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73621: LD_VAR 0 3
73625: PPUSH
73626: CALL_OW 247
73630: PUSH
73631: LD_INT 2
73633: EQUAL
73634: IFFALSE 73647
// ComExitVehicle ( unit ) else
73636: LD_VAR 0 1
73640: PPUSH
73641: CALL_OW 121
73645: GO 73656
// ComExitBuilding ( unit ) ;
73647: LD_VAR 0 1
73651: PPUSH
73652: CALL_OW 122
// result := tmp ;
73656: LD_ADDR_VAR 0 2
73660: PUSH
73661: LD_VAR 0 3
73665: ST_TO_ADDR
// end ;
73666: LD_VAR 0 2
73670: RET
// export function ComExitAll ( units ) ; var i ; begin
73671: LD_INT 0
73673: PPUSH
73674: PPUSH
// if not units then
73675: LD_VAR 0 1
73679: NOT
73680: IFFALSE 73684
// exit ;
73682: GO 73710
// for i in units do
73684: LD_ADDR_VAR 0 3
73688: PUSH
73689: LD_VAR 0 1
73693: PUSH
73694: FOR_IN
73695: IFFALSE 73708
// ComExit ( i ) ;
73697: LD_VAR 0 3
73701: PPUSH
73702: CALL 73588 0 1
73706: GO 73694
73708: POP
73709: POP
// end ;
73710: LD_VAR 0 2
73714: RET
// export function ResetHc ; begin
73715: LD_INT 0
73717: PPUSH
// InitHc ;
73718: CALL_OW 19
// hc_importance := 0 ;
73722: LD_ADDR_OWVAR 32
73726: PUSH
73727: LD_INT 0
73729: ST_TO_ADDR
// end ;
73730: LD_VAR 0 1
73734: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73735: LD_INT 0
73737: PPUSH
73738: PPUSH
73739: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73740: LD_ADDR_VAR 0 6
73744: PUSH
73745: LD_VAR 0 1
73749: PUSH
73750: LD_VAR 0 3
73754: PLUS
73755: PUSH
73756: LD_INT 2
73758: DIV
73759: ST_TO_ADDR
// if _x < 0 then
73760: LD_VAR 0 6
73764: PUSH
73765: LD_INT 0
73767: LESS
73768: IFFALSE 73785
// _x := _x * - 1 ;
73770: LD_ADDR_VAR 0 6
73774: PUSH
73775: LD_VAR 0 6
73779: PUSH
73780: LD_INT 1
73782: NEG
73783: MUL
73784: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73785: LD_ADDR_VAR 0 7
73789: PUSH
73790: LD_VAR 0 2
73794: PUSH
73795: LD_VAR 0 4
73799: PLUS
73800: PUSH
73801: LD_INT 2
73803: DIV
73804: ST_TO_ADDR
// if _y < 0 then
73805: LD_VAR 0 7
73809: PUSH
73810: LD_INT 0
73812: LESS
73813: IFFALSE 73830
// _y := _y * - 1 ;
73815: LD_ADDR_VAR 0 7
73819: PUSH
73820: LD_VAR 0 7
73824: PUSH
73825: LD_INT 1
73827: NEG
73828: MUL
73829: ST_TO_ADDR
// result := [ _x , _y ] ;
73830: LD_ADDR_VAR 0 5
73834: PUSH
73835: LD_VAR 0 6
73839: PUSH
73840: LD_VAR 0 7
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: ST_TO_ADDR
// end ;
73849: LD_VAR 0 5
73853: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73854: LD_INT 0
73856: PPUSH
73857: PPUSH
73858: PPUSH
73859: PPUSH
// task := GetTaskList ( unit ) ;
73860: LD_ADDR_VAR 0 7
73864: PUSH
73865: LD_VAR 0 1
73869: PPUSH
73870: CALL_OW 437
73874: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73875: LD_VAR 0 7
73879: NOT
73880: PUSH
73881: LD_VAR 0 1
73885: PPUSH
73886: LD_VAR 0 2
73890: PPUSH
73891: CALL_OW 308
73895: NOT
73896: AND
73897: IFFALSE 73901
// exit ;
73899: GO 74019
// if IsInArea ( unit , area ) then
73901: LD_VAR 0 1
73905: PPUSH
73906: LD_VAR 0 2
73910: PPUSH
73911: CALL_OW 308
73915: IFFALSE 73933
// begin ComMoveToArea ( unit , goAway ) ;
73917: LD_VAR 0 1
73921: PPUSH
73922: LD_VAR 0 3
73926: PPUSH
73927: CALL_OW 113
// exit ;
73931: GO 74019
// end ; if task [ 1 ] [ 1 ] <> M then
73933: LD_VAR 0 7
73937: PUSH
73938: LD_INT 1
73940: ARRAY
73941: PUSH
73942: LD_INT 1
73944: ARRAY
73945: PUSH
73946: LD_STRING M
73948: NONEQUAL
73949: IFFALSE 73953
// exit ;
73951: GO 74019
// x := task [ 1 ] [ 2 ] ;
73953: LD_ADDR_VAR 0 5
73957: PUSH
73958: LD_VAR 0 7
73962: PUSH
73963: LD_INT 1
73965: ARRAY
73966: PUSH
73967: LD_INT 2
73969: ARRAY
73970: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73971: LD_ADDR_VAR 0 6
73975: PUSH
73976: LD_VAR 0 7
73980: PUSH
73981: LD_INT 1
73983: ARRAY
73984: PUSH
73985: LD_INT 3
73987: ARRAY
73988: ST_TO_ADDR
// if InArea ( x , y , area ) then
73989: LD_VAR 0 5
73993: PPUSH
73994: LD_VAR 0 6
73998: PPUSH
73999: LD_VAR 0 2
74003: PPUSH
74004: CALL_OW 309
74008: IFFALSE 74019
// ComStop ( unit ) ;
74010: LD_VAR 0 1
74014: PPUSH
74015: CALL_OW 141
// end ;
74019: LD_VAR 0 4
74023: RET
// export function Abs ( value ) ; begin
74024: LD_INT 0
74026: PPUSH
// result := value ;
74027: LD_ADDR_VAR 0 2
74031: PUSH
74032: LD_VAR 0 1
74036: ST_TO_ADDR
// if value < 0 then
74037: LD_VAR 0 1
74041: PUSH
74042: LD_INT 0
74044: LESS
74045: IFFALSE 74062
// result := value * - 1 ;
74047: LD_ADDR_VAR 0 2
74051: PUSH
74052: LD_VAR 0 1
74056: PUSH
74057: LD_INT 1
74059: NEG
74060: MUL
74061: ST_TO_ADDR
// end ;
74062: LD_VAR 0 2
74066: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74067: LD_INT 0
74069: PPUSH
74070: PPUSH
74071: PPUSH
74072: PPUSH
74073: PPUSH
74074: PPUSH
74075: PPUSH
74076: PPUSH
// if not unit or not building then
74077: LD_VAR 0 1
74081: NOT
74082: PUSH
74083: LD_VAR 0 2
74087: NOT
74088: OR
74089: IFFALSE 74093
// exit ;
74091: GO 74319
// x := GetX ( building ) ;
74093: LD_ADDR_VAR 0 4
74097: PUSH
74098: LD_VAR 0 2
74102: PPUSH
74103: CALL_OW 250
74107: ST_TO_ADDR
// y := GetY ( building ) ;
74108: LD_ADDR_VAR 0 6
74112: PUSH
74113: LD_VAR 0 2
74117: PPUSH
74118: CALL_OW 251
74122: ST_TO_ADDR
// d := GetDir ( building ) ;
74123: LD_ADDR_VAR 0 8
74127: PUSH
74128: LD_VAR 0 2
74132: PPUSH
74133: CALL_OW 254
74137: ST_TO_ADDR
// r := 4 ;
74138: LD_ADDR_VAR 0 9
74142: PUSH
74143: LD_INT 4
74145: ST_TO_ADDR
// for i := 1 to 5 do
74146: LD_ADDR_VAR 0 10
74150: PUSH
74151: DOUBLE
74152: LD_INT 1
74154: DEC
74155: ST_TO_ADDR
74156: LD_INT 5
74158: PUSH
74159: FOR_TO
74160: IFFALSE 74317
// begin _x := ShiftX ( x , d , r + i ) ;
74162: LD_ADDR_VAR 0 5
74166: PUSH
74167: LD_VAR 0 4
74171: PPUSH
74172: LD_VAR 0 8
74176: PPUSH
74177: LD_VAR 0 9
74181: PUSH
74182: LD_VAR 0 10
74186: PLUS
74187: PPUSH
74188: CALL_OW 272
74192: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74193: LD_ADDR_VAR 0 7
74197: PUSH
74198: LD_VAR 0 6
74202: PPUSH
74203: LD_VAR 0 8
74207: PPUSH
74208: LD_VAR 0 9
74212: PUSH
74213: LD_VAR 0 10
74217: PLUS
74218: PPUSH
74219: CALL_OW 273
74223: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74224: LD_VAR 0 5
74228: PPUSH
74229: LD_VAR 0 7
74233: PPUSH
74234: CALL_OW 488
74238: PUSH
74239: LD_VAR 0 5
74243: PPUSH
74244: LD_VAR 0 7
74248: PPUSH
74249: CALL_OW 428
74253: PPUSH
74254: CALL_OW 247
74258: PUSH
74259: LD_INT 3
74261: PUSH
74262: LD_INT 2
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: IN
74269: NOT
74270: AND
74271: IFFALSE 74315
// begin ComMoveXY ( unit , _x , _y ) ;
74273: LD_VAR 0 1
74277: PPUSH
74278: LD_VAR 0 5
74282: PPUSH
74283: LD_VAR 0 7
74287: PPUSH
74288: CALL_OW 111
// result := [ _x , _y ] ;
74292: LD_ADDR_VAR 0 3
74296: PUSH
74297: LD_VAR 0 5
74301: PUSH
74302: LD_VAR 0 7
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: ST_TO_ADDR
// exit ;
74311: POP
74312: POP
74313: GO 74319
// end ; end ;
74315: GO 74159
74317: POP
74318: POP
// end ;
74319: LD_VAR 0 3
74323: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74324: LD_INT 0
74326: PPUSH
74327: PPUSH
74328: PPUSH
// result := 0 ;
74329: LD_ADDR_VAR 0 3
74333: PUSH
74334: LD_INT 0
74336: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74337: LD_VAR 0 1
74341: PUSH
74342: LD_INT 0
74344: LESS
74345: PUSH
74346: LD_VAR 0 1
74350: PUSH
74351: LD_INT 8
74353: GREATER
74354: OR
74355: PUSH
74356: LD_VAR 0 2
74360: PUSH
74361: LD_INT 0
74363: LESS
74364: OR
74365: PUSH
74366: LD_VAR 0 2
74370: PUSH
74371: LD_INT 8
74373: GREATER
74374: OR
74375: IFFALSE 74379
// exit ;
74377: GO 74454
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74379: LD_ADDR_VAR 0 4
74383: PUSH
74384: LD_INT 22
74386: PUSH
74387: LD_VAR 0 2
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PPUSH
74396: CALL_OW 69
74400: PUSH
74401: FOR_IN
74402: IFFALSE 74452
// begin un := UnitShoot ( i ) ;
74404: LD_ADDR_VAR 0 5
74408: PUSH
74409: LD_VAR 0 4
74413: PPUSH
74414: CALL_OW 504
74418: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74419: LD_VAR 0 5
74423: PPUSH
74424: CALL_OW 255
74428: PUSH
74429: LD_VAR 0 1
74433: EQUAL
74434: IFFALSE 74450
// begin result := un ;
74436: LD_ADDR_VAR 0 3
74440: PUSH
74441: LD_VAR 0 5
74445: ST_TO_ADDR
// exit ;
74446: POP
74447: POP
74448: GO 74454
// end ; end ;
74450: GO 74401
74452: POP
74453: POP
// end ;
74454: LD_VAR 0 3
74458: RET
// export function GetCargoBay ( units ) ; begin
74459: LD_INT 0
74461: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74462: LD_ADDR_VAR 0 2
74466: PUSH
74467: LD_VAR 0 1
74471: PPUSH
74472: LD_INT 2
74474: PUSH
74475: LD_INT 34
74477: PUSH
74478: LD_INT 12
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 34
74487: PUSH
74488: LD_INT 51
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 34
74497: PUSH
74498: LD_INT 32
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 34
74507: PUSH
74508: LD_EXP 53
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: PPUSH
74524: CALL_OW 72
74528: ST_TO_ADDR
// end ; end_of_file
74529: LD_VAR 0 2
74533: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74534: LD_VAR 0 1
74538: PUSH
74539: LD_INT 200
74541: DOUBLE
74542: GREATEREQUAL
74543: IFFALSE 74551
74545: LD_INT 299
74547: DOUBLE
74548: LESSEQUAL
74549: IFTRUE 74553
74551: GO 74585
74553: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74554: LD_VAR 0 1
74558: PPUSH
74559: LD_VAR 0 2
74563: PPUSH
74564: LD_VAR 0 3
74568: PPUSH
74569: LD_VAR 0 4
74573: PPUSH
74574: LD_VAR 0 5
74578: PPUSH
74579: CALL 33025 0 5
74583: GO 74662
74585: LD_INT 300
74587: DOUBLE
74588: GREATEREQUAL
74589: IFFALSE 74597
74591: LD_INT 399
74593: DOUBLE
74594: LESSEQUAL
74595: IFTRUE 74599
74597: GO 74661
74599: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74600: LD_VAR 0 1
74604: PPUSH
74605: LD_VAR 0 2
74609: PPUSH
74610: LD_VAR 0 3
74614: PPUSH
74615: LD_VAR 0 4
74619: PPUSH
74620: LD_VAR 0 5
74624: PPUSH
74625: LD_VAR 0 6
74629: PPUSH
74630: LD_VAR 0 7
74634: PPUSH
74635: LD_VAR 0 8
74639: PPUSH
74640: LD_VAR 0 9
74644: PPUSH
74645: LD_VAR 0 10
74649: PPUSH
74650: LD_VAR 0 11
74654: PPUSH
74655: CALL 30913 0 11
74659: GO 74662
74661: POP
// end ;
74662: PPOPN 11
74664: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74665: LD_VAR 0 1
74669: PPUSH
74670: LD_VAR 0 2
74674: PPUSH
74675: LD_VAR 0 3
74679: PPUSH
74680: LD_VAR 0 4
74684: PPUSH
74685: LD_VAR 0 5
74689: PPUSH
74690: CALL 33007 0 5
// end ; end_of_file
74694: PPOPN 5
74696: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74697: LD_VAR 0 1
74701: PPUSH
74702: LD_VAR 0 2
74706: PPUSH
74707: LD_VAR 0 3
74711: PPUSH
74712: LD_VAR 0 4
74716: PPUSH
74717: LD_VAR 0 5
74721: PPUSH
74722: LD_VAR 0 6
74726: PPUSH
74727: CALL 19721 0 6
// end ;
74731: PPOPN 6
74733: END
