Export function EnchancedSaveCharacters(charactersList, ident);
var i;
begin
for i in charactersList do
    SaveCharacters(i, ident);
end;

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, speaker;
begin
characters := characters diff [JMM, Brown, Donaldson, Bobby, Cyrus, Lisa, Frank, Kikuchi, Houten, Gary, Denis, Gladstone, Cornel, Powell];
speaker := characters[rand(1, characters)];

if GetSex(speaker) = sex_male then
   Say(speaker, dialogMID)
else
   Say(speaker, dialogFID);

result := speaker;
end;

Export function PrepareDifficulty;
var tmp;
begin
if Difficulty = 1 then
   begin
   RuSolMinLevel = 8;
   RuSolMaxLevel = 10;
   end
else if Difficulty = 2 then
   begin
   RuSolMinLevel = 9;
   RuSolMaxLevel = 10;

   uc_nation = 3;
   uc_side = 3;

   bc_level = 10;
   bc_type = b_turret;
   tmp = CreateAndPlaceBuildingXYD(86, 34, 2);
   PlaceWeaponTurret(tmp, 49);
   SetTech(64, 3, state_enabled);
   end
else
   begin
   RuSolMinLevel = 10;
   RuSolMaxLevel = 10;

   uc_nation = 3;
   uc_side = 3;

   bc_level = 10;
   bc_type = b_turret;
   tmp = CreateAndPlaceBuildingXYD(86, 34, 2);
   PlaceWeaponTurret(tmp, 49);
   tmp = CreateAndPlaceBuildingXYD(93, 31, 2);
   PlaceWeaponTurret(tmp, 49);

   SetTech(64, 3, state_enabled);
   SetTech(65, 3, state_enabled);
   end;
End;

Export function ShowQuery1;
begin
result := Query('Q1');
End;

Export function ShowQuery2;
begin
result := Query('Q1a');
End;

Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un;
begin
for i = 1 to count do
    begin
    uc_side = side;
    uc_nation = nation;

    hc_gallery = '';
    hc_name = '';
    PrepareHuman(false, class, skill);

    un = CreateHuman;
    PlaceHumanInUnit(un, build);
    end;
End;

Export function ResAllTechs(side, lab, nation);
var i, list;
begin
list := [48, 49, 50, 20, 1, 51, 52, 69, 39, 34, 40, 53, 71, 57, 58, 44, 32, 27, 23, 33, 59, 54, 55, 56, 63, 64, 65, 30, 31, 21, 22, 25];

for i := 1 to list do
    if GetTech(list[i], side) = state_enabled and TechNationAvailable(list[i], nation) then
       AddComResearch(lab, list[i]);
End;

Export function RepairAndRebuildBase(side, depot, area, destroyedBuildings);
var buildingsList, i, engineerOkInside, engineerOkOutside, j;
begin
engineerOkInside := UnitsInside(depot);
engineerOkOutside := FilterUnitsInArea(area, [[f_side, side], [f_class, 2], [f_lives, 750], [f_not, [f_inside]]]);
buildingsList := FilterUnitsInArea(area,[[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

if not buildingsList and not FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 250]]) then
   exit;

if buildingsList and engineerOkInside then
   ComExitBuilding(engineerOkInside);

if buildingsList and engineerOkOutside then
   ComRepairBuilding(engineerOkOutside, buildingsList[1]);

if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
   ComEnterUnit(engineerOkOutside, depot);

if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
   ComBuild(engineerOkOutside, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);
End;

Export function HealUnitInBase(side, healArea, baseArea, buildings);
var sciList, sciListOutside,  i, j, damageUnits, unitsToHeal, tmp, rnd;
begin
sciList = FilterAllUnits([[f_side, side], [f_class, 4], [f_lives, 251]]) diff [RuScientists];
sciListOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_outside], [f_class, 4], [f_ok]]) diff [RuScientists];
damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 750]]]);
unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_lives, 1000]]]);

if damageUnits and sciList then
   ComMoveToArea(damageUnits, healArea);

if unitsToHeal and sciList and sciListOutside = 0 then
   for i in buildings do
       begin
       if UnitsInside(i) then
          begin
          ComExitBuilding(UnitsInside(i));
          break;
          end;
       end;

if unitsToHeal and sciListOutside then
   ComHeal(sciListOutside, unitsToHeal[1]);

if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
   begin
   tmp := buildings;
   rnd := rand(1, tmp);
   ComEnterUnit(UnitFilter(sciListOutside, [f_not, [f_hastask]]), tmp[rnd]);
   end;
End;  

Export function CraneRepairBuild(side, baseArea);
var i, mechTmp, vehicleTmp, crane_list, buildings_list;
begin
crane_list = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_vehicle], [f_weapon, ru_crane]]);
buildings_list = FilterUnitsInArea(baseArea, [[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

if buildings_list > 0 and UnitFilter(crane_list, [f_lives, 750]) > 0 then
   ComRepairBuilding(crane_list, buildings_list[1]);
End;
  
Export function BuildingVehicle(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i;
begin
if FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) diff FilterUnitsInArea(RussianOutsideVehs, [[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
   for i := 1 to vehCount do
       AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);
End;   

Export Function IntBazooka(side);
var ta, c, i, list, filter;
begin
list := FilterAllUnits([[f_side, side], [f_class, class_bazooker]]);
filter := FilterAllUnits([[f_enemy, side], [f_not, [f_type, unit_building]]]);

c := Rand(1, 3);

for i := 1 to list do
    for ta in filter do
        begin
        if GetDistUnits(list[i], ta) <= 15 then
           begin
           case c of
                1: ComTimeShift(list[i], GetX(ta), GetY(ta));
                2: ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                3: ComAttackUnit(list[i], ta);
                end;
           end;
        end;
End;

Export Function PlaceMines(area, n);
var i, r, x;
begin
r := 100;
x := 0;

while (x < n) do
  for i = 1 to AreaToList(area, 0)[1] do
      begin
      if r > 50 then
         begin
         if not MineAtPos(AreaToList(area, 0)[1][i], AreaToList(area, 0)[2][i]) then
            begin
            PlaceMine(AreaToList(area, 0)[1][i], AreaToList(area, 0)[2][i], 8, 0);

            arabianMines := Insert(arabianMines, 1, [AreaToList(area, 0)[1][i], AreaToList(area, 0)[2][i]]);

            r := 0;
            x := x + 1;
            end
         end
      else
         r := r + 35;
      end
End;

Export function DefendDepot(side, build);
var i, j, tmp, bunkers;
begin
tmp := [];
bunkers := FilterAllUnits([[f_side, side], [f_btype, b_bunker]]);

if bunkers then
   for i in bunkers do
       for j in UnitsInside(i) do
           tmp := Replace(tmp, tmp + 1, j);

if tmp then
   begin
   ComExitBuilding(tmp);
   AddComAgressiveMove(tmp, GetX(build), GetY(build));
   end;
End;

Export Function CreateNature;
var i, un;
begin
uc_side := 0;
uc_nation := 0;

InitHc;

hc_class := class_fish;

for i := 1 to 6 do
    PlaceUnitArea(CreateHuman, waterArea, false);

for i := 1 to Difficulty + 2  do
    begin 
    hc_sex := sex_male;
    uc_side := 0;
    uc_nation := nation_nature;
    hc_class := class_tiger;
    hc_skills := [RuSolMaxLevel, 0, 0, 0];
    hc_agressivity := rand(-5,5) * Difficulty;

    un := CreateHuman;
    PlaceUnitArea(un, NatureArea, false);
    end;

for i := 1 to rand(3, 4) do
    begin 
    hc_sex:= sex_male;
    uc_side := 0;
    uc_nation := nation_nature;
    hc_class := 18;
    hc_skills := [0, 0, 0, 0];
    hc_agressivity := 0;

    un := CreateHuman;
    PlaceUnitArea(un, NatureArea, false);
    end;

for i := 1 to [4, 3, 3, 3][Difficulty] do
    begin
    hc_sex := sex_male;
    uc_side := 0;
    uc_nation := nation_nature;
    hc_class := class_apeman;
    hc_skills := [rand(0, 2), 0, 0, 0];
    hc_agressivity = rand(-10, 10);

    un := CreateHuman;
    PlaceUnitArea(un, ApeNatureArea, false);
    end;
End;